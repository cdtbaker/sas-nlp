<?xml version="1.0" encoding="UTF-8"?>
    <source package="sun.text.normalizer">
        <import package="java.text.ParsePosition"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.TreeSet"/>
        <class name="UnicodeSet" line="5">
            <implements interface="UnicodeMatcher"/>
            <javadoc line="5">
                A mutable set of Unicode characters and multicharacter strings.  Objects of this class
                  represent &lt;em&gt;character classes&lt;/em&gt; used in regular expressions.
                  A character specifies a subset of Unicode code points.  Legal
                  code points are U+0000 to U+10FFFF, inclusive.
                  &lt;p&gt;The UnicodeSet class is not designed to be subclassed.
                  &lt;p&gt;&lt;code&gt;UnicodeSet&lt;/code&gt; supports two APIs. The first is the
                  &lt;em&gt;operand&lt;/em&gt; API that allows the caller to modify the value of
                  a &lt;code&gt;UnicodeSet&lt;/code&gt; object. It conforms to Java 2&apos;s
                  &lt;code&gt;java.util.Set&lt;/code&gt; interface, although
                  &lt;code&gt;UnicodeSet&lt;/code&gt; does not actually implement that
                  interface. All methods of &lt;code&gt;Set&lt;/code&gt; are supported, with the
                  modification that they take a character range or single character
                  instead of an &lt;code&gt;Object&lt;/code&gt;, and they take a
                  &lt;code&gt;UnicodeSet&lt;/code&gt; instead of a &lt;code&gt;Collection&lt;/code&gt;.  The
                  operand API may be thought of in terms of boolean logic: a boolean
                  OR is implemented by &lt;code&gt;add&lt;/code&gt;, a boolean AND is implemented
                  by &lt;code&gt;retain&lt;/code&gt;, a boolean XOR is implemented by
                  &lt;code&gt;complement&lt;/code&gt; taking an argument, and a boolean NOT is
                  implemented by &lt;code&gt;complement&lt;/code&gt; with no argument.  In terms
                  of traditional set theory function names, &lt;code&gt;add&lt;/code&gt; is a
                  union, &lt;code&gt;retain&lt;/code&gt; is an intersection, &lt;code&gt;remove&lt;/code&gt;
                  is an asymmetric difference, and &lt;code&gt;complement&lt;/code&gt; with no
                  argument is a set complement with respect to the superset range
                  &lt;code&gt;MIN_VALUE-MAX_VALUE&lt;/code&gt;
                  &lt;p&gt;The second API is the
                  &lt;code&gt;applyPattern()&lt;/code&gt;/&lt;code&gt;toPattern()&lt;/code&gt; API from the
                  &lt;code&gt;java.text.Format&lt;/code&gt;-derived classes.  Unlike the
                  methods that add characters, add categories, and control the logic
                  of the set, the method &lt;code&gt;applyPattern()&lt;/code&gt; sets all
                  attributes of a &lt;code&gt;UnicodeSet&lt;/code&gt; at once, based on a
                  string pattern.
                  &lt;p&gt;&lt;b&gt;Pattern syntax&lt;/b&gt;&lt;/p&gt;
                  Patterns are accepted by the constructors and the
                  &lt;code&gt;applyPattern()&lt;/code&gt; methods and returned by the
                  &lt;code&gt;toPattern()&lt;/code&gt; method.  These patterns follow a syntax
                  similar to that employed by version 8 regular expression character
                  classes.  Here are some simple examples:
                  &lt;blockquote&gt;
                  &lt;table&gt;
                  &lt;tr align=&quot;top&quot;&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;No characters&lt;/td&gt;
                  &lt;/tr&gt;&lt;tr align=&quot;top&quot;&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;code&gt;[a]&lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;The character &apos;a&apos;&lt;/td&gt;
                  &lt;/tr&gt;&lt;tr align=&quot;top&quot;&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;code&gt;[ae]&lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;The characters &apos;a&apos; and &apos;e&apos;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;code&gt;[a-e]&lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;The characters &apos;a&apos; through &apos;e&apos; inclusive, in Unicode code
                  point order&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;code&gt;[\\u4E01]&lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;The character U+4E01&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;code&gt;[a{ab}{ac}]&lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;The character &apos;a&apos; and the multicharacter strings &amp;quot;ab&amp;quot; and
                  &amp;quot;ac&amp;quot;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;code&gt;[\p{Lu}]&lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;All characters in the general category Uppercase Letter&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  Any character may be preceded by a backslash in order to remove any special
                  meaning.  White space characters, as defined by UCharacterProperty.isRuleWhiteSpace(), are
                  ignored, unless they are escaped.
                  &lt;p&gt;Property patterns specify a set of characters having a certain
                  property as defined by the Unicode standard.  Both the POSIX-like
                  &quot;[:Lu:]&quot; and the Perl-like syntax &quot;\p{Lu}&quot; are recognized.  For a
                  complete list of supported property patterns, see the User&apos;s Guide
                  for UnicodeSet at
                  &lt;a href=&quot;http://www.icu-project.org/userguide/unicodeSet.html&quot;&gt;
                  http://www.icu-project.org/userguide/unicodeSet.html&lt;/a&gt;.
                  Actual determination of property data is defined by the underlying
                  Unicode database as implemented by UCharacter.
                  &lt;p&gt;Patterns specify individual characters, ranges of characters, and
                  Unicode property sets.  When elements are concatenated, they
                  specify their union.  To complement a set, place a &apos;^&apos; immediately
                  after the opening &apos;[&apos;.  Property patterns are inverted by modifying
                  their delimiters; &quot;[:^foo]&quot; and &quot;\P{foo}&quot;.  In any other location,
                  &apos;^&apos; has no special meaning.
                  &lt;p&gt;Ranges are indicated by placing two a &apos;-&apos; between two
                  characters, as in &quot;a-z&quot;.  This specifies the range of all
                  characters from the left to the right, in Unicode order.  If the
                  left character is greater than or equal to the
                  right character it is a syntax error.  If a &apos;-&apos; occurs as the first
                  character after the opening &apos;[&apos; or &apos;[^&apos;, or if it occurs as the
                  last character before the closing &apos;]&apos;, then it is taken as a
                  literal.  Thus &quot;[a\\-b]&quot;, &quot;[-ab]&quot;, and &quot;[ab-]&quot; all indicate the same
                  set of three characters, &apos;a&apos;, &apos;b&apos;, and &apos;-&apos;.
                  &lt;p&gt;Sets may be intersected using the &apos;&amp;&apos; operator or the asymmetric
                  set difference may be taken using the &apos;-&apos; operator, for example,
                  &quot;[[:L:]&amp;[\\u0000-\\u0FFF]]&quot; indicates the set of all Unicode letters
                  with values less than 4096.  Operators (&apos;&amp;&apos; and &apos;|&apos;) have equal
                  precedence and bind left-to-right.  Thus
                  &quot;[[:L:]-[a-z]-[\\u0100-\\u01FF]]&quot; is equivalent to
                  &quot;[[[:L:]-[a-z]]-[\\u0100-\\u01FF]]&quot;.  This only really matters for
                  difference; intersection is commutative.
                  &lt;table&gt;
                  &lt;tr valign=top&gt;&lt;td nowrap&gt;&lt;code&gt;[a]&lt;/code&gt;&lt;td&gt;The set containing &apos;a&apos;
                  &lt;tr valign=top&gt;&lt;td nowrap&gt;&lt;code&gt;[a-z]&lt;/code&gt;&lt;td&gt;The set containing &apos;a&apos;
                  through &apos;z&apos; and all letters in between, in Unicode order
                  &lt;tr valign=top&gt;&lt;td nowrap&gt;&lt;code&gt;[^a-z]&lt;/code&gt;&lt;td&gt;The set containing
                  all characters but &apos;a&apos; through &apos;z&apos;,
                  that is, U+0000 through &apos;a&apos;-1 and &apos;z&apos;+1 through U+10FFFF
                  &lt;tr valign=top&gt;&lt;td nowrap&gt;&lt;code&gt;[[&lt;em&gt;pat1&lt;/em&gt;][&lt;em&gt;pat2&lt;/em&gt;]]&lt;/code&gt;
                  &lt;td&gt;The union of sets specified by &lt;em&gt;pat1&lt;/em&gt; and &lt;em&gt;pat2&lt;/em&gt;
                  &lt;tr valign=top&gt;&lt;td nowrap&gt;&lt;code&gt;[[&lt;em&gt;pat1&lt;/em&gt;]&amp;[&lt;em&gt;pat2&lt;/em&gt;]]&lt;/code&gt;
                  &lt;td&gt;The intersection of sets specified by &lt;em&gt;pat1&lt;/em&gt; and &lt;em&gt;pat2&lt;/em&gt;
                  &lt;tr valign=top&gt;&lt;td nowrap&gt;&lt;code&gt;[[&lt;em&gt;pat1&lt;/em&gt;]-[&lt;em&gt;pat2&lt;/em&gt;]]&lt;/code&gt;
                  &lt;td&gt;The asymmetric difference of sets specified by &lt;em&gt;pat1&lt;/em&gt; and
                  &lt;em&gt;pat2&lt;/em&gt;
                  &lt;tr valign=top&gt;&lt;td nowrap&gt;&lt;code&gt;[:Lu:] or \p{Lu}&lt;/code&gt;
                  &lt;td&gt;The set of characters having the specified
                  Unicode property; in
                  this case, Unicode uppercase letters
                  &lt;tr valign=top&gt;&lt;td nowrap&gt;&lt;code&gt;[:^Lu:] or \P{Lu}&lt;/code&gt;
                  &lt;td&gt;The set of characters &lt;em&gt;not&lt;/em&gt; having the given
                  Unicode property
                  &lt;/table&gt;
                  &lt;p&gt;&lt;b&gt;Warning&lt;/b&gt;: you cannot add an empty string (&quot;&quot;) to a UnicodeSet.&lt;/p&gt;
                  &lt;p&gt;&lt;b&gt;Formal syntax&lt;/b&gt;&lt;/p&gt;
                  &lt;blockquote&gt;
                  &lt;table&gt;
                  &lt;tr align=&quot;top&quot;&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;right&quot;&gt;&lt;code&gt;pattern :=&amp;nbsp; &lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;code&gt;(&apos;[&apos; &apos;^&apos;? item &apos;]&apos;) |
                  property&lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;top&quot;&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;right&quot;&gt;&lt;code&gt;item :=&amp;nbsp; &lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;code&gt;char | (char &apos;-&apos; char) | pattern-expr&lt;br&gt;
                  &lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;top&quot;&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;right&quot;&gt;&lt;code&gt;pattern-expr :=&amp;nbsp; &lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;code&gt;pattern | pattern-expr pattern |
                  pattern-expr op pattern&lt;br&gt;
                  &lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;top&quot;&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;right&quot;&gt;&lt;code&gt;op :=&amp;nbsp; &lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;code&gt;&apos;&amp;amp;&apos; | &apos;-&apos;&lt;br&gt;
                  &lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;top&quot;&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;right&quot;&gt;&lt;code&gt;special :=&amp;nbsp; &lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;code&gt;&apos;[&apos; | &apos;]&apos; | &apos;-&apos;&lt;br&gt;
                  &lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;top&quot;&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;right&quot;&gt;&lt;code&gt;char :=&amp;nbsp; &lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;em&gt;any character that is not&lt;/em&gt;&lt;code&gt; special&lt;br&gt;
                  | (&apos;\\&apos; &lt;/code&gt;&lt;em&gt;any character&lt;/em&gt;&lt;code&gt;)&lt;br&gt;
                  | (&apos;&amp;#92;u&apos; hex hex hex hex)&lt;br&gt;
                  &lt;/code&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr align=&quot;top&quot;&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;right&quot;&gt;&lt;code&gt;hex :=&amp;nbsp; &lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;em&gt;any character for which
                  &lt;/em&gt;&lt;code&gt;Character.digit(c, 16)&lt;/code&gt;&lt;em&gt;
                  returns a non-negative result&lt;/em&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td nowrap valign=&quot;top&quot; align=&quot;right&quot;&gt;&lt;code&gt;property :=&amp;nbsp; &lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;em&gt;a Unicode property set pattern&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;br&gt;
                  &lt;table border=&quot;1&quot;&gt;
                  &lt;tr&gt;
                  &lt;td&gt;Legend: &lt;table&gt;
                  &lt;tr&gt;
                  &lt;td nowrap valign=&quot;top&quot;&gt;&lt;code&gt;a := b&lt;/code&gt;&lt;/td&gt;
                  &lt;td width=&quot;20&quot; valign=&quot;top&quot;&gt;&amp;nbsp; &lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;code&gt;a&lt;/code&gt; may be replaced by &lt;code&gt;b&lt;/code&gt; &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td nowrap valign=&quot;top&quot;&gt;&lt;code&gt;a?&lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;zero or one instance of &lt;code&gt;a&lt;/code&gt;&lt;br&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td nowrap valign=&quot;top&quot;&gt;&lt;code&gt;a&lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;one or more instances of &lt;code&gt;a&lt;/code&gt;&lt;br&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td nowrap valign=&quot;top&quot;&gt;&lt;code&gt;a | b&lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;either &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt;&lt;br&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td nowrap valign=&quot;top&quot;&gt;&lt;code&gt;&apos;a&apos;&lt;/code&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;&lt;/td&gt;
                  &lt;td valign=&quot;top&quot;&gt;the literal string between the quotes &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;To iterate over contents of UnicodeSet, use UnicodeSetIterator class.                
                <author>
                    Alan Liu                    
                </author>
                <stable>
                    ICU 2.0                    
                </stable>
                <see>
                    UnicodeSetIterator                    
                </see>
            </javadoc>
            <declaration name="LOW" type="int" line="223"/>
            <declaration name="HIGH" type="int" line="224"/>
            <declaration name="MIN_VALUE" type="int" line="225"/>
            <javadoc line="225">
                Minimum value that can be stored in a UnicodeSet.                
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <declaration name="MAX_VALUE" type="int" line="230"/>
            <javadoc line="230">
                Maximum value that can be stored in a UnicodeSet.                
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <declaration name="len" type="int" line="235"/>
            <declaration name="list" type="int[]" line="236"/>
            <declaration name="rangeList" type="int[]" line="237"/>
            <declaration name="buffer" type="int[]" line="238"/>
            <declaration name="strings" type="TreeSet" line="239"/>
            <declaration name="pat" type="String" line="240"/>
            <javadoc line="240">
                The pattern representation of this set.  This may not be the
                  most economical pattern.  It is the pattern supplied to
                  applyPattern(), with variables substituted and whitespace
                  removed.  For sets constructed without applyPattern(), or
                  modified using the non-pattern API, this string will be null,
                  indicating that toPattern() must generate a pattern
                  representation from the inversion list.                
            </javadoc>
            <declaration name="START_EXTRA" type="int" line="250"/>
            <declaration name="GROW_EXTRA" type="int" line="251"/>
            <declaration name="INCLUSIONS" type="UnicodeSet" line="252"/>
            <javadoc line="252">
                A set of all characters _except_ the second through last characters of
                  certain ranges.  These ranges are ranges of characters whose
                  properties are all exactly alike, e.g. CJK Ideographs from
                  U+4E00 to U+9FA5.                
            </javadoc>
            <javadoc line="259">
                Constructs an empty set.                
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="UnicodeSet" type="constructor" line="263"/>
            <javadoc line="267">
                Constructs a set containing the given range. If &lt;code&gt;end &gt;
                  start&lt;/code&gt; then an empty set is created.                
                <param>
                    start first character, inclusive, of range                    
                </param>
                <param>
                    end last character, inclusive, of range                    
                </param>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="UnicodeSet" type="constructor" line="274">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="278">
                Constructs a set from the given pattern.  See the class description
                  for the syntax of the pattern language.  Whitespace is ignored.                
                <param>
                    pattern a string specifying what characters are in the set                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the pattern contains
                      a syntax error.                    
                </exception>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="UnicodeSet" type="constructor" line="286">
                <params>
                    <param name="pattern" type="String"/>
                </params>
            </method>
            <javadoc line="290">
                Make this object represent the same set as &lt;code&gt;other&lt;/code&gt;.                
                <param>
                    other a <code>UnicodeSet</code> whose value will be
                      copied to this object                    
                </param>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="set" type="UnicodeSet" line="296">
                <params>
                    <param name="other" type="UnicodeSet"/>
                </params>
            </method>
            <javadoc line="303">
                Modifies this set to represent the set specified by the given pattern.
                  See the class description for the syntax of the pattern language.
                  Whitespace is ignored.                
                <param>
                    pattern a string specifying what characters are in the set                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if the pattern
                      contains a syntax error.                    
                </exception>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="applyPattern" type="UnicodeSet" line="312">
                <params>
                    <param name="pattern" type="String"/>
                </params>
            </method>
            <javadoc line="315">
                Append the &lt;code&gt;toPattern()&lt;/code&gt; representation of a
                  string to the given &lt;code&gt;StringBuffer&lt;/code&gt;.                
            </javadoc>
            <method name="_appendToPat" type="void" line="319">
                <params>
                    <param name="buf" type="StringBuffer"/>
                    <param name="s" type="String"/>
                    <param name="escapeUnprintable" type="boolean"/>
                </params>
                <scope line="320"/>
            </method>
            <javadoc line="324">
                Append the &lt;code&gt;toPattern()&lt;/code&gt; representation of a
                  character to the given &lt;code&gt;StringBuffer&lt;/code&gt;.                
            </javadoc>
            <method name="_appendToPat" type="void" line="328">
                <params>
                    <param name="buf" type="StringBuffer"/>
                    <param name="c" type="int"/>
                    <param name="escapeUnprintable" type="boolean"/>
                </params>
                <scope line="329">
                    <scope line="330"/>
                </scope>
                <scope line="348"/>
            </method>
            <javadoc line="355">
                Append a string representation of this set to result.  This will be
                  a cleaned version of the string passed to applyPattern(), if there
                  is one.  Otherwise it will be generated.                
            </javadoc>
            <method name="_toPattern" type="StringBuffer" line="360">
                <params>
                    <param name="result" type="StringBuffer"/>
                    <param name="escapeUnprintable" type="boolean"/>
                </params>
                <scope line="361">
                    <declaration name="i" type="int" line="362"/>
                    <declaration name="backslashCount" type="int" line="363"/>
                    <scope line="364">
                        <declaration name="c" type="int" line="365"/>
                        <scope line="367">
                            <scope line="368"/>
                        </scope>
                        <scope line="374">
                            <scope line="376"/>
                            <scope line="379"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="388">
                Generate and append a string representation of this set to result.
                  This does not use this.pat, the cleaned up copy of the string
                  passed to applyPattern().                
                <param>
                    includeStrings if false, doesn't include the strings.                    
                </param>
                <stable>
                    ICU 3.8                    
                </stable>
            </javadoc>
            <method name="_generatePattern" type="StringBuffer" line="395">
                <params>
                    <param name="result" type="StringBuffer"/>
                    <param name="escapeUnprintable" type="boolean"/>
                    <param name="includeStrings" type="boolean"/>
                </params>
                <declaration name="count" type="int" line="397"/>
                <scope line="398">
                    <scope line="400">
                        <declaration name="start" type="int" line="401"/>
                        <declaration name="end" type="int" line="402"/>
                        <scope line="404">
                            <scope line="405"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="412">
                    <scope line="413">
                        <declaration name="start" type="int" line="414"/>
                        <declaration name="end" type="int" line="415"/>
                        <scope line="417">
                            <scope line="418"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="425">
                    <declaration name="it" type="Iterator" line="426"/>
                    <scope line="427"/>
                </scope>
            </method>
            <method name="add_unchecked" type="UnicodeSet" line="435">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="436"/>
                <scope line="439"/>
                <scope line="442"/>
                <scope line="445"/>
            </method>
            <javadoc line="450">
                Adds the specified character to this set if it is not already
                  present.  If this set already contains the specified character,
                  the call leaves this set unchanged.                
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="add" type="UnicodeSet" line="456">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <method name="add_unchecked" type="UnicodeSet" line="459">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="460"/>
                <declaration name="i" type="int" line="463"/>
                <scope line="465">
                    <scope line="467"/>
                    <scope line="471"/>
                </scope>
                <scope line="476"/>
                <scope line="479">
                    <scope line="480">
                        <declaration name="temp" type="int[]" line="481"/>
                    </scope>
                    <scope line="486"/>
                </scope>
            </method>
            <javadoc line="496">
                Adds the specified multicharacter to this set if it is not already
                  present.  If this set already contains the multicharacter,
                  the call leaves this set unchanged.
                  Thus &quot;ch&quot; =&gt; {&quot;ch&quot;}
                  &lt;br&gt;&lt;b&gt;Warning: you cannot add an empty string (&quot;&quot;) to a UnicodeSet.&lt;/b&gt;                
                <param>
                    s the source string                    
                </param>
                <return>
                    this object, for chaining                    
                </return>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="add" type="UnicodeSet" line="506">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="cp" type="int" line="507"/>
                <scope line="508"/>
                <scope line="512"/>
            </method>
            <javadoc line="517">
                @return a code point IF the string consists of a single one.
                  otherwise returns -1.                
                <param>
                    string to test                    
                </param>
            </javadoc>
            <method name="getSingleCP" type="int" line="522">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="523"/>
                <declaration name="cp" type="int" line="528"/>
                <scope line="529"/>
            </method>
            <javadoc line="534">
                Complements the specified range in this set.  Any character in
                  the range will be removed if it is in this set, or will be
                  added if it is not in this set.  If &lt;code&gt;end &gt; start&lt;/code&gt;
                  then an empty range is complemented, leaving the set unchanged.                
                <param>
                    start first character, inclusive, of range to be removed
                      from this set.                    
                </param>
                <param>
                    end last character, inclusive, of range to be removed
                      from this set.                    
                </param>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="complement" type="UnicodeSet" line="545">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="546"/>
                <scope line="549"/>
                <scope line="552"/>
            </method>
            <javadoc line="558">
                This is equivalent to
                  &lt;code&gt;complement(MIN_VALUE, MAX_VALUE)&lt;/code&gt;.                
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="complement" type="UnicodeSet" line="563">
                <scope line="564"/>
                <scope line="568"/>
            </method>
            <javadoc line="577">
                Returns true if this set contains the given character.                
                <param>
                    c character to be checked for containment                    
                </param>
                <return>
                    true if the test condition is met                    
                </return>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="contains" type="boolean" line="583">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="584"/>
                <declaration name="i" type="int" line="587"/>
            </method>
            <javadoc line="590">
                Returns the smallest value i such that c &lt; list[i].  Caller
                  must ensure that c is a legal value or this method will enter
                  an infinite loop.  This method performs a binary search.                
                <param>
                    c a character in the range MIN_VALUE..MAX_VALUE
                      inclusive                    
                </param>
                <return>
                    the smallest integer i in the range 0..len-1,
                      inclusive, such that c < list[i]                    
                </return>
            </javadoc>
            <method name="findCodePoint" type="int" line="599">
                <params>
                    <param name="c" type="int"/>
                </params>
                <declaration name="lo" type="int" line="602"/>
                <declaration name="hi" type="int" line="603"/>
                <scope line="604">
                    <declaration name="i" type="int" line="605"/>
                    <scope line="607"/>
                    <scope line="610"/>
                </scope>
            </method>
            <javadoc line="615">
                Adds all of the elements in the specified set to this set if
                  they&apos;re not already present.  This operation effectively
                  modifies this set so that its value is the &lt;i&gt;union&lt;/i&gt; of the two
                  sets.  The behavior of this operation is unspecified if the specified
                  collection is modified while the operation is in progress.                
                <param>
                    c set whose elements are to be added to this set.                    
                </param>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="addAll" type="UnicodeSet" line="624">
                <params>
                    <param name="c" type="UnicodeSet"/>
                </params>
            </method>
            <javadoc line="629">
                Retains only the elements in this set that are contained in the
                  specified set.  In other words, removes from this set all of
                  its elements that are not contained in the specified set.  This
                  operation effectively modifies this set so that its value is
                  the &lt;i&gt;intersection&lt;/i&gt; of the two sets.                
                <param>
                    c set that defines which elements this set will retain.                    
                </param>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="retainAll" type="UnicodeSet" line="638">
                <params>
                    <param name="c" type="UnicodeSet"/>
                </params>
            </method>
            <javadoc line="643">
                Removes from this set all of its elements that are contained in the
                  specified set.  This operation effectively modifies this
                  set so that its value is the &lt;i&gt;asymmetric set difference&lt;/i&gt; of
                  the two sets.                
                <param>
                    c set that defines which elements will be removed from
                      this set.                    
                </param>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="removeAll" type="UnicodeSet" line="652">
                <params>
                    <param name="c" type="UnicodeSet"/>
                </params>
            </method>
            <javadoc line="657">
                Removes all of the elements from this set.  This set will be
                  empty after this call returns.                
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="clear" type="UnicodeSet" line="662"/>
            <javadoc line="669">
                Iteration method that returns the number of ranges contained in
                  this set.                
                <see>
                    #getRangeStart                    
                </see>
                <see>
                    #getRangeEnd                    
                </see>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="getRangeCount" type="int" line="676"/>
            <javadoc line="679">
                Iteration method that returns the first character in the
                  specified range of this set.                
                <exception>
                    ArrayIndexOutOfBoundsException if index is outside
                      the range <code>0..getRangeCount()-1</code>                    
                </exception>
                <see>
                    #getRangeCount                    
                </see>
                <see>
                    #getRangeEnd                    
                </see>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="getRangeStart" type="int" line="688">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="691">
                Iteration method that returns the last character in the
                  specified range of this set.                
                <exception>
                    ArrayIndexOutOfBoundsException if index is outside
                      the range <code>0..getRangeCount()-1</code>                    
                </exception>
                <see>
                    #getRangeStart                    
                </see>
                <see>
                    #getRangeEnd                    
                </see>
                <stable>
                    ICU 2.0                    
                </stable>
            </javadoc>
            <method name="getRangeEnd" type="int" line="700">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="703">
                Parses the given pattern, starting at the given position.  The character
                  at pattern.charAt(pos.getIndex()) must be &apos;[&apos;, or the parse fails.
                  Parsing continues until the corresponding closing &apos;]&apos;.  If a syntax error
                  is encountered between the opening and closing brace, the parse fails.
                  Upon return from a successful parse, the ParsePosition is updated to
                  point to the character following the closing &apos;]&apos;, and an inversion
                  list for the parsed pattern is returned.  This method
                  calls itself recursively to parse embedded subpatterns.                
                <param>
                    pattern the string containing the pattern to be parsed.  The
                      portion of the string from pos.getIndex(), which must be a '[', to the
                      corresponding closing ']', is parsed.                    
                </param>
                <param>
                    pos upon entry, the position at which to being parsing.  The
                      character at pattern.charAt(pos.getIndex()) must be a '['.  Upon return
                      from a successful parse, pos.getIndex() is either the character after the
                      closing ']' of the parsed pattern, or pattern.length() if the closing ']'
                      is the last character of the pattern string.                    
                </param>
                <return>
                    an inversion list for the parsed substring
                      of <code>pattern</code>                    
                </return>
                <exception>
                    java.lang.IllegalArgumentException if the parse fails.                    
                </exception>
            </javadoc>
            <method name="applyPattern" type="UnicodeSet" line="724">
                <params>
                    <param name="pattern" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                    <param name="symbols" type="SymbolTable"/>
                    <param name="options" type="int"/>
                </params>
                <declaration name="parsePositionWasNull" type="boolean" line="725"/>
                <scope line="726"/>
                <declaration name="rebuiltPat" type="StringBuffer" line="729"/>
                <declaration name="chars" type="RuleCharacterIterator" line="730"/>
                <scope line="732"/>
                <scope line="736">
                    <declaration name="i" type="int" line="737"/>
                    <scope line="738"/>
                    <scope line="741"/>
                </scope>
            </method>
            <javadoc line="747">
                Parse the pattern from the given RuleCharacterIterator.  The
                  iterator is advanced over the parsed pattern.                
                <param>
                    chars iterator over the pattern characters.  Upon return
                      it will be advanced to the first character after the parsed
                      pattern, or the end of the iteration if all characters are
                      parsed.                    
                </param>
                <param>
                    symbols symbol table to use to parse and dereference
                      variables, or null if none.                    
                </param>
                <param>
                    rebuiltPat the pattern that was parsed, rebuilt or
                      copied from the input pattern, as appropriate.                    
                </param>
                <param>
                    options a bit mask of zero or more of the following:
                      IGNORE_SPACE, CASE.                    
                </param>
            </javadoc>
            <method name="applyPattern" type="void" line="761">
                <params>
                    <param name="chars" type="RuleCharacterIterator"/>
                    <param name="symbols" type="SymbolTable"/>
                    <param name="rebuiltPat" type="StringBuffer"/>
                    <param name="options" type="int"/>
                </params>
                <declaration name="opts" type="int" line="762"/>
                <scope line="763"/>
                <declaration name="patBuf" type="StringBuffer" line="766"/>
                <declaration name="usePat" type="boolean" line="767"/>
                <declaration name="scratch" type="UnicodeSet" line="768"/>
                <declaration name="backup" type="Object" line="769"/>
                <declaration name="lastItem" type="int" line="770"/>
                <declaration name="op" type="char" line="771"/>
                <declaration name="invert" type="boolean" line="772"/>
                <scope line="774">
                    <scope line="775">
                        <scope line="776"/>
                    </scope>
                    <declaration name="c" type="int" line="780"/>
                    <declaration name="literal" type="boolean" line="781"/>
                    <declaration name="nested" type="UnicodeSet" line="782"/>
                    <declaration name="setMode" type="int" line="783"/>
                    <scope line="784"/>
                    <scope line="787">
                        <scope line="791">
                            <scope line="792"/>
                            <scope line="796">
                                <scope line="802"/>
                                <scope line="809"/>
                                <scope line="812"/>
                            </scope>
                        </scope>
                        <scope line="818">
                            <declaration name="m" type="UnicodeMatcher" line="819"/>
                            <scope line="820">
                                <scope line="821"/>
                                <scope line="825"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="831">
                        <scope line="832">
                            <scope line="833"/>
                        </scope>
                        <scope line="840"/>
                        <scope line="843"/>
                        <scope line="860"/>
                    </scope>
                    <scope line="880"/>
                    <scope line="883">
                        <scope line="886"/>
                        <scope line="890"/>
                        <scope line="894"/>
                        <scope line="901">
                            <scope line="902"/>
                            <scope line="906">
                                <scope line="910"/>
                            </scope>
                        </scope>
                        <scope line="919"/>
                        <scope line="927"/>
                        <scope line="930"/>
                        <scope line="935"/>
                        <scope line="938"/>
                        <declaration name="ok" type="boolean" line="941"/>
                        <scope line="942">
                            <scope line="945"/>
                        </scope>
                        <scope line="951"/>
                        <declaration name="anchor" type="boolean" line="963"/>
                        <scope line="964"/>
                        <scope line="969">
                            <scope line="970"/>
                        </scope>
                    </scope>
                    <scope line="991">
                        <scope line="992"/>
                    </scope>
                    <scope line="1001"/>
                    <scope line="1008"/>
                </scope>
                <scope line="1016"/>
                <scope line="1020"/>
                <scope line="1023"/>
                <scope line="1026"/>
            </method>
            <method name="syntaxError" type="void" line="1030">
                <params>
                    <param name="chars" type="RuleCharacterIterator"/>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="ensureCapacity" type="void" line="1033">
                <params>
                    <param name="newLen" type="int"/>
                </params>
                <declaration name="temp" type="int[]" line="1035"/>
            </method>
            <method name="ensureBufferCapacity" type="void" line="1039">
                <params>
                    <param name="newLen" type="int"/>
                </params>
            </method>
            <javadoc line="1043">
                Assumes start &lt;= end.                
            </javadoc>
            <method name="range" type="int[]" line="1046">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="1047"/>
                <scope line="1050"/>
            </method>
            <method name="xor" type="UnicodeSet" line="1056">
                <params>
                    <param name="other" type="int[]"/>
                    <param name="otherLen" type="int"/>
                    <param name="polarity" type="int"/>
                </params>
                <declaration name="i" type="int" line="1058"/>
                <declaration name="a" type="int" line="1059"/>
                <declaration name="b" type="int" line="1060"/>
                <scope line="1061">
                    <scope line="1063"/>
                </scope>
                <scope line="1068"/>
                <scope line="1071">
                    <scope line="1072"/>
                    <scope line="1076"/>
                    <scope line="1080"/>
                    <scope line="1084"/>
                </scope>
                <declaration name="temp" type="int[]" line="1090"/>
            </method>
            <method name="add" type="UnicodeSet" line="1096">
                <params>
                    <param name="other" type="int[]"/>
                    <param name="otherLen" type="int"/>
                    <param name="polarity" type="int"/>
                </params>
                <declaration name="i" type="int" line="1098"/>
                <declaration name="a" type="int" line="1099"/>
                <declaration name="b" type="int" line="1100"/>
                <scope line="1101">
                    <scope line="1104">
                        <scope line="1105"/>
                        <scope line="1108"/>
                    </scope>
                    <scope line="1115">
                        <scope line="1116"/>
                        <scope line="1119"/>
                    </scope>
                    <scope line="1126">
                        <scope line="1128"/>
                        <scope line="1131"/>
                    </scope>
                    <scope line="1142"/>
                    <scope line="1146"/>
                    <scope line="1156"/>
                    <scope line="1161"/>
                    <scope line="1165"/>
                    <scope line="1174"/>
                    <scope line="1179"/>
                    <scope line="1183"/>
                </scope>
                <declaration name="temp" type="int[]" line="1195"/>
            </method>
            <method name="retain" type="UnicodeSet" line="1201">
                <params>
                    <param name="other" type="int[]"/>
                    <param name="otherLen" type="int"/>
                    <param name="polarity" type="int"/>
                </params>
                <declaration name="i" type="int" line="1203"/>
                <declaration name="a" type="int" line="1204"/>
                <declaration name="b" type="int" line="1205"/>
                <scope line="1206">
                    <scope line="1209"/>
                    <scope line="1213"/>
                    <scope line="1217"/>
                    <scope line="1227"/>
                    <scope line="1232"/>
                    <scope line="1237"/>
                    <scope line="1247"/>
                    <scope line="1251"/>
                    <scope line="1256"/>
                    <scope line="1265"/>
                    <scope line="1269"/>
                    <scope line="1274"/>
                </scope>
                <declaration name="temp" type="int[]" line="1286"/>
            </method>
            <method name="max" type="int" line="1292">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <interface name="Filter">
                <method name="contains" type="boolean" line="1296"/>
            </interface>
            <declaration name="NO_VERSION" type="VersionInfo" line="1298"/>
            <class name="VersionFilter" line="1299">
                <implements interface="Filter"/>
                <declaration name="version" type="VersionInfo" line="1300"/>
                <method name="VersionFilter" type="constructor" line="1301">
                    <params>
                        <param name="version" type="VersionInfo"/>
                    </params>
                </method>
                <method name="contains" type="boolean" line="1304">
                    <params>
                        <param name="ch" type="int"/>
                    </params>
                    <declaration name="v" type="VersionInfo" line="1305"/>
                </method>
            </class>
            <method name="getInclusions" type="UnicodeSet" line="1309">
                <params>
                    <param name="src" type="int"/>
                </params>
                <scope line="1310"/>
                <scope line="1313">
                    <declaration name="incl" type="UnicodeSet" line="1314"/>
                </scope>
            </method>
            <javadoc line="1326">
                Generic filter-based scanning code for UCD property UnicodeSets.                
            </javadoc>
            <method name="applyFilter" type="UnicodeSet" line="1329">
                <params>
                    <param name="filter" type="Filter"/>
                    <param name="src" type="int"/>
                </params>
                <declaration name="startHasProperty" type="int" line="1331"/>
                <declaration name="inclusions" type="UnicodeSet" line="1332"/>
                <declaration name="limitRange" type="int" line="1333"/>
                <scope line="1334">
                    <declaration name="start" type="int" line="1335"/>
                    <declaration name="end" type="int" line="1336"/>
                    <scope line="1337">
                        <scope line="1338">
                            <scope line="1339"/>
                        </scope>
                        <scope line="1343"/>
                    </scope>
                </scope>
                <scope line="1349"/>
            </method>
            <javadoc line="1354">
                Remove leading and trailing rule white space and compress
                  internal rule white space to a single space character.                
                <see>
                    UCharacterProperty#isRuleWhiteSpace                    
                </see>
            </javadoc>
            <method name="mungeCharName" type="String" line="1359">
                <params>
                    <param name="source" type="String"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="1360"/>
                <scope line="1361">
                    <declaration name="ch" type="int" line="1362"/>
                    <scope line="1364">
                        <scope line="1365"/>
                    </scope>
                </scope>
                <scope line="1372"/>
            </method>
            <javadoc line="1377">
                Modifies this set to contain those code points which have the
                  given value for the given property.  Prior contents of this
                  set are lost.                
                <param>
                    propertyAlias                    
                </param>
                <param>
                    valueAlias                    
                </param>
                <param>
                    symbols if not null, then symbols are first called to see if a property
                      is available. If true, then everything else is skipped.                    
                </param>
                <return>
                    this set                    
                </return>
                <stable>
                    ICU 3.2                    
                </stable>
            </javadoc>
            <method name="applyPropertyAlias" type="UnicodeSet" line="1388">
                <params>
                    <param name="propertyAlias" type="String"/>
                    <param name="valueAlias" type="String"/>
                    <param name="symbols" type="SymbolTable"/>
                </params>
                <scope line="1389">
                    <scope line="1390">
                        <declaration name="version" type="VersionInfo" line="1391"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1398">
                Return true if the given iterator appears to point at a
                  property pattern.  Regardless of the result, return with the
                  iterator unchanged.                
                <param>
                    chars iterator over the pattern characters.  Upon return
                      it will be unchanged.                    
                </param>
                <param>
                    iterOpts RuleCharacterIterator options                    
                </param>
            </javadoc>
            <method name="resemblesPropertyPattern" type="boolean" line="1406">
                <params>
                    <param name="chars" type="RuleCharacterIterator"/>
                    <param name="iterOpts" type="int"/>
                </params>
                <declaration name="result" type="boolean" line="1407"/>
                <declaration name="pos" type="Object" line="1409"/>
                <declaration name="c" type="int" line="1410"/>
                <scope line="1411">
                    <declaration name="d" type="int" line="1412"/>
                </scope>
            </method>
            <javadoc line="1418">
                Parse the given property pattern at the given parse position.                
                <param>
                    symbols TODO                    
                </param>
            </javadoc>
            <method name="applyPropertyPattern" type="UnicodeSet" line="1422">
                <params>
                    <param name="pattern" type="String"/>
                    <param name="ppos" type="ParsePosition"/>
                    <param name="symbols" type="SymbolTable"/>
                </params>
                <declaration name="pos" type="int" line="1423"/>
                <scope line="1424"/>
                <declaration name="posix" type="boolean" line="1427"/>
                <declaration name="isName" type="boolean" line="1428"/>
                <declaration name="invert" type="boolean" line="1429"/>
                <scope line="1430">
                    <scope line="1433"/>
                </scope>
                <scope line="1438">
                    <declaration name="c" type="char" line="1439"/>
                    <scope line="1443"/>
                </scope>
                <scope line="1447"/>
                <declaration name="close" type="int" line="1450"/>
                <scope line="1451"/>
                <declaration name="equals" type="int" line="1454"/>
                <declaration name="propName" type="String" line="1455"/>
                <scope line="1456"/>
                <scope line="1460">
                    <scope line="1463"/>
                </scope>
                <scope line="1469"/>
            </method>
            <javadoc line="1475">
                Parse a property pattern.                
                <param>
                    chars iterator over the pattern characters.  Upon return
                      it will be advanced to the first character after the parsed
                      pattern, or the end of the iteration if all characters are
                      parsed.                    
                </param>
                <param>
                    rebuiltPat the pattern that was parsed, rebuilt or
                      copied from the input pattern, as appropriate.                    
                </param>
                <param>
                    symbols TODO                    
                </param>
            </javadoc>
            <method name="applyPropertyPattern" type="void" line="1485">
                <params>
                    <param name="chars" type="RuleCharacterIterator"/>
                    <param name="rebuiltPat" type="StringBuffer"/>
                    <param name="symbols" type="SymbolTable"/>
                </params>
                <declaration name="patStr" type="String" line="1486"/>
                <declaration name="pos" type="ParsePosition" line="1487"/>
                <scope line="1489"/>
            </method>
            <declaration name="IGNORE_SPACE" type="int" line="1495"/>
            <javadoc line="1495">
                Bitmask for constructor and applyPattern() indicating that
                  white space should be ignored.  If set, ignore characters for
                  which UCharacterProperty.isRuleWhiteSpace() returns true,
                  unless they are quoted or escaped.  This may be ORed together
                  with other selectors.                
                <stable>
                    ICU 3.8                    
                </stable>
            </javadoc>
        </class>
    </source>