<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.net.httpserver">
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <class name="Filter" line="31">
            <javadoc line="31">
                A filter used to pre- and post-process incoming requests. Pre-processing occurs
                  before the application&apos;s exchange handler is invoked, and post-processing
                  occurs after the exchange handler returns.  Filters
                  are organised in chains, and are associated with HttpContext instances.
                  &lt;p&gt;
                  Each Filter in the chain, invokes the next filter within its own
                  doFilter() implementation. The final Filter in the chain invokes the applications
                  exchange handler.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="Filter" type="constructor" line="44"/>
            <class name="Chain" line="46">
                <comment line="53">
                    the last element in the chain must invoke the users
                     handler                    
                </comment>
                <javadoc line="46">
                    a chain of filters associated with a HttpServer.
                      Each filter in the chain is given one of these
                      so it can invoke the next filter in the chain                    
                </javadoc>
                <declaration name="iter" type="ListIterator&lt;Filter&gt;" line="55"/>
                <declaration name="handler" type="HttpHandler" line="56"/>
                <method name="Chain" type="constructor" line="58">
                    <params>
                        <param name="filters" type="List<Filter>"/>
                        <param name="handler" type="HttpHandler"/>
                    </params>
                </method>
                <javadoc line="63">
                    calls the next filter in the chain, or else
                      the users exchange handler, if this is the
                      final filter in the chain. The Filter may decide
                      to terminate the chain, by not calling this method.
                      In this case, the filter &lt;b&gt;must&lt;/b&gt; send the
                      response to the request, because the application&apos;s
                      exchange handler will not be invoked.                    
                    <param>
                        exchange the HttpExchange                        
                    </param>
                    <throws>
                        IOException let exceptions pass up the stack                        
                    </throws>
                    <throws>
                        NullPointerException if exchange is &lt;code&gt;null&lt;/code&gt;                        
                    </throws>
                </javadoc>
                <method name="doFilter" type="void" line="75">
                    <params>
                        <param name="exchange" type="HttpExchange"/>
                    </params>
                    <scope line="76"/>
                    <scope line="78">
                        <declaration name="f" type="Filter" line="79"/>
                    </scope>
                </method>
            </class>
            <method name="doFilter" type="void" line="85"/>
            <javadoc line="85">
                Asks this filter to pre/post-process the given exchange. The filter
                  can :-
                  &lt;ul&gt;&lt;li&gt;examine or modify the request headers&lt;/li&gt;
                  &lt;li&gt;filter the request body or the response body, by creating suitable
                  filter streams and calling{@link HttpExchange#setStreams(InputStream,OutputStream)}&lt;/li&gt;
                  &lt;li&gt;set attribute Objects in the exchange, which other filters or the
                  exchange handler can access.&lt;/li&gt;
                  &lt;li&gt;decide to either :-&lt;ol&gt;
                  &lt;li&gt;invoke the next filter in the chain, by calling{@link Filter.Chain#doFilter(HttpExchange)}&lt;/li&gt;
                  &lt;li&gt;terminate the chain of invocation, by &lt;b&gt;not&lt;/b&gt; calling{@link Filter.Chain#doFilter(HttpExchange)}&lt;/li&gt;&lt;/ol&gt;
                  &lt;li&gt;if option 1. above taken, then when doFilter() returns all subsequent
                  filters in the Chain have been called, and the response headers can be
                  examined or modified.&lt;/li&gt;
                  &lt;li&gt;if option 2. above taken, then this Filter must use the HttpExchange
                  to send back an appropriate response&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;                
                <param>
                    exchange the &lt;code&gt;HttpExchange&lt;/code&gt; to be filtered.                    
                </param>
                <param>
                    chain the Chain which allows the next filter to be invoked.                    
                </param>
                <throws>
                    IOException may be thrown by any filter module, and if
                      caught, must be rethrown again.                    
                </throws>
                <throws>
                    NullPointerException if either exchange or chain are &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="description" type="String" line="113"/>
            <javadoc line="113">
                returns a short description of this Filter                
                <return>
                    a string describing the Filter                    
                </return>
            </javadoc>
        </class>
    </source>