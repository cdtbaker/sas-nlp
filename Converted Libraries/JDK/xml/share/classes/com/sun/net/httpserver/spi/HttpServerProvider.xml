<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.net.httpserver.spi">
        <import package="java.io.FileDescriptor"/>
        <import package="java.io.IOException"/>
        <import package="java.net"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Iterator"/>
        <import package="sun.misc.Service"/>
        <import package="sun.misc.ServiceConfigurationError"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="com.sun.net.httpserver"/>
        <class name="HttpServerProvider" line="12">
            <javadoc line="12">
                Service provider class for HttpServer.
                  Sub-classes of HttpServerProvider provide an implementation of {@link HttpServer} and
                  associated classes. Applications do not normally use this class.
                  See {@link #provider()} for how providers are found and loaded.                
            </javadoc>
            <method name="createHttpServer" type="HttpServer" line="19"/>
            <javadoc line="19">
                creates a HttpServer from this provider                
                <param>
                    addr the address to bind to. May be <code>null</code>                    
                </param>
                <param>
                    backlog the socket backlog. A value of <code>zero</code> means the systems default                    
                </param>
            </javadoc>
            <method name="createHttpsServer" type="HttpsServer" line="25"/>
            <javadoc line="25">
                creates a HttpsServer from this provider                
                <param>
                    addr the address to bind to. May be <code>null</code>                    
                </param>
                <param>
                    backlog the socket backlog. A value of <code>zero</code> means the systems default                    
                </param>
            </javadoc>
            <declaration name="lock" type="Object" line="31"/>
            <declaration name="provider" type="HttpServerProvider" line="32"/>
            <javadoc line="33">
                Initializes a new instance of this class.  &lt;/p&gt;                
                <throws>
                    SecurityExceptionIf a security manager has been installed and it denies{@link RuntimePermission}<tt>("httpServerProvider")</tt>                    
                </throws>
            </javadoc>
            <method name="HttpServerProvider" type="constructor" line="37">
                <declaration name="sm" type="SecurityManager" line="38"/>
            </method>
            <method name="loadProviderFromProperty" type="boolean" line="41">
                <declaration name="cn" type="String" line="42"/>
                <scope line="44">
                    <declaration name="c" type="Class" line="45"/>
                </scope>
                <scope line="49"/>
                <scope line="52"/>
                <scope line="55"/>
                <scope line="58"/>
            </method>
            <method name="loadProviderAsService" type="boolean" line="62">
                <declaration name="i" type="Iterator" line="63"/>
                <scope line="64">
                    <scope line="65"/>
                    <scope line="70">
                        <scope line="71"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="78">
                Returns the system wide default HttpServerProvider for this invocation of
                  the Java virtual machine.
                  &lt;p&gt; The first invocation of this method locates the default provider
                  object as follows: &lt;/p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;&lt;p&gt; If the system property
                  &lt;tt&gt;com.sun.net.httpserver.HttpServerProvider&lt;/tt&gt; is defined then it is
                  taken to be the fully-qualified name of a concrete provider class.
                  The class is loaded and instantiated; if this process fails then an
                  unspecified unchecked error or exception is thrown.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; If a provider class has been installed in a jar file that is
                  visible to the system class loader, and that jar file contains a
                  provider-configuration file named
                  &lt;tt&gt;com.sun.net.httpserver.HttpServerProvider&lt;/tt&gt; in the resource
                  directory &lt;tt&gt;META-INF/services&lt;/tt&gt;, then the first class name
                  specified in that file is taken.  The class is loaded and
                  instantiated; if this process fails then an unspecified unchecked error or exception is
                  thrown.  &lt;/p&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;p&gt; Finally, if no provider has been specified by any of the above
                  means then the system-default provider class is instantiated and the
                  result is returned.  &lt;/p&gt;&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt; Subsequent invocations of this method return the provider that was
                  returned by the first invocation.  &lt;/p&gt;                
                <return>
                    The system-wide default HttpServerProvider                    
                </return>
            </javadoc>
            <method name="provider" type="HttpServerProvider" line="105">
                <scope line="106">
                    <anonymous_class line="108">
                        <method name="run" type="Object" line="109"/>
                    </anonymous_class>
                </scope>
            </method>
        </class>
    </source>