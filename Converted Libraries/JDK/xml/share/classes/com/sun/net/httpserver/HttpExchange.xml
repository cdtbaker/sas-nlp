<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.net.httpserver">
        <import package="java.io"/>
        <import package="java.nio"/>
        <import package="java.nio.channels"/>
        <import package="java.net"/>
        <import package="javax.net.ssl"/>
        <import package="java.util"/>
        <import package="sun.net.www.MessageHeader"/>
        <class name="HttpExchange" line="36">
            <javadoc line="36">
                This class encapsulates a HTTP request received and a
                  response to be generated in one exchange. It provides methods
                  for examining the request from the client, and for building and
                  sending the response.
                  &lt;p&gt;
                  The typical life-cycle of a HttpExchange is shown in the sequence
                  below.
                  &lt;ol&gt;&lt;li&gt;{@link #getRequestMethod()} to determine the command
                  &lt;li&gt;{@link #getRequestHeaders()} to examine the request headers (if needed)
                  &lt;li&gt;{@link #getRequestBody()} returns a {@link java.io.InputStream} for reading the request body.
                  After reading the request body, the stream is close.
                  &lt;li&gt;{@link #getResponseHeaders()} to set any response headers, except content-length
                  &lt;li&gt;{@link #sendResponseHeaders(int,long)} to send the response headers. Must be called before
                  next step.
                  &lt;li&gt;{@link #getResponseBody()} to get a {@link java.io.OutputStream} to send the response body.
                  When the response body has been written, the stream must be closed to terminate the exchange.
                  &lt;/ol&gt;
                  &lt;b&gt;Terminating exchanges&lt;/b&gt;
                  &lt;br&gt;
                  Exchanges are terminated when both the request InputStream and response OutputStream are closed.
                  Closing the OutputStream, implicitly closes the InputStream (if it is not already closed).
                  However, it is recommended
                  to consume all the data from the InputStream before closing it.
                  The convenience method {@link #close()} does all of these tasks.
                  Closing an exchange without consuming all of the request body is not an error
                  but may make the underlying TCP connection unusable for following exchanges.
                  The effect of failing to terminate an exchange is undefined, but will typically
                  result in resources failing to be freed/reused.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="HttpExchange" type="constructor" line="70"/>
            <method name="getRequestHeaders" type="Headers" line="73"/>
            <javadoc line="73">
                Returns an immutable Map containing the HTTP headers that were
                  included with this request. The keys in this Map will be the header
                  names, while the values will be a List of Strings containing each value
                  that was included (either for a header that was listed several times,
                  or one that accepts a comma-delimited list of values on a single line).
                  In either of these cases, the values for the header name will be
                  presented in the order that they were included in the request.
                  &lt;p&gt;
                  The keys in Map are case-insensitive.                
                <return>
                    a read-only Map which can be used to access request headers                    
                </return>
            </javadoc>
            <method name="getResponseHeaders" type="Headers" line="87"/>
            <javadoc line="87">
                Returns a mutable Map into which the HTTP response headers can be stored
                  and which will be transmitted as part of this response. The keys in the
                  Map will be the header names, while the values must be a List of Strings
                  containing each value that should be included multiple times
                  (in the order that they should be included).
                  &lt;p&gt;
                  The keys in Map are case-insensitive.                
                <return>
                    a writable Map which can be used to set response headers.                    
                </return>
            </javadoc>
            <method name="getRequestURI" type="URI" line="99"/>
            <javadoc line="99">
                Get the request URI                
                <return>
                    the request URI                    
                </return>
            </javadoc>
            <method name="getRequestMethod" type="String" line="106"/>
            <javadoc line="106">
                Get the request method                
                <return>
                    the request method                    
                </return>
            </javadoc>
            <method name="getHttpContext" type="HttpContext" line="112"/>
            <javadoc line="112">
                Get the HttpContext for this exchange                
                <return>
                    the HttpContext                    
                </return>
            </javadoc>
            <method name="close" type="void" line="118"/>
            <javadoc line="118">
                Ends this exchange by doing the following in sequence:&lt;p&gt;&lt;ol&gt;
                  &lt;li&gt;close the request InputStream, if not already closed&lt;p&gt;&lt;/li&gt;
                  &lt;li&gt;close the response OutputStream, if not already closed. &lt;/li&gt;
                  &lt;/ol&gt;                
            </javadoc>
            <method name="getRequestBody" type="InputStream" line="126"/>
            <javadoc line="126">
                returns a stream from which the request body can be read.
                  Multiple calls to this method will return the same stream.
                  It is recommended that applications should consume (read) all of the
                  data from this stream before closing it. If a stream is closed
                  before all data has been read, then the close() call will
                  read and discard remaining data (up to an implementation specific
                  number of bytes).                
                <return>
                    the stream from which the request body can be read.                    
                </return>
            </javadoc>
            <method name="getResponseBody" type="OutputStream" line="138"/>
            <javadoc line="138">
                returns a stream to which the response body must be
                  written. {@link #sendResponseHeaders(int,long)}) must be called prior to calling
                  this method. Multiple calls to this method (for the same exchange)
                  will return the same stream. In order to correctly terminate
                  each exchange, the output stream must be closed, even if no
                  response body is being sent.
                  &lt;p&gt;
                  Closing this stream implicitly
                  closes the InputStream returned from {@link #getRequestBody()}(if it is not already closed).
                  &lt;P&gt;
                  If the call to sendResponseHeaders() specified a fixed response
                  body length, then the exact number of bytes specified in that
                  call must be written to this stream. If too many bytes are written,
                  then write() will throw an IOException. If too few bytes are written
                  then the stream close() will throw an IOException. In both cases,
                  the exchange is aborted and the underlying TCP connection closed.                
                <return>
                    the stream to which the response body is written                    
                </return>
            </javadoc>
            <method name="sendResponseHeaders" type="void" line="161"/>
            <javadoc line="161">
                Starts sending the response back to the client using the current set of response headers
                  and the numeric response code as specified in this method. The response body length is also specified
                  as follows. If the response length parameter is greater than zero, this specifies an exact
                  number of bytes to send and the application must send that exact amount of data.
                  If the response length parameter is &lt;code&gt;zero&lt;/code&gt;, then chunked transfer encoding is
                  used and an arbitrary amount of data may be sent. The application terminates the
                  response body by closing the OutputStream. If response length has the value &lt;code&gt;-1&lt;/code&gt;
                  then no response body is being sent.
                  &lt;p&gt;
                  If the content-length response header has not already been set then
                  this is set to the apropriate value depending on the response length parameter.
                  &lt;p&gt;
                  This method must be called prior to calling {@link #getResponseBody()}.                
                <param>
                    rCode the response code to send                    
                </param>
                <param>
                    responseLength if > 0, specifies a fixed response body length
                      and that exact number of bytes must be written
                      to the stream acquired from getResponseBody(), or else
                      if equal to 0, then chunked encoding is used,
                      and an arbitrary number of bytes may be written.
                      if <= -1, then no response body length is specified and
                      no response body may be written.                    
                </param>
                <see>
                    HttpExchange#getResponseBody()                    
                </see>
            </javadoc>
            <method name="getRemoteAddress" type="InetSocketAddress" line="187"/>
            <javadoc line="187">
                Returns the address of the remote entity invoking this request                
                <return>
                    the InetSocketAddress of the caller                    
                </return>
            </javadoc>
            <method name="getResponseCode" type="int" line="193"/>
            <javadoc line="193">
                Returns the response code, if it has already been set                
                <return>
                    the response code, if available. <code>-1</code> if not available yet.                    
                </return>
            </javadoc>
            <method name="getLocalAddress" type="InetSocketAddress" line="199"/>
            <javadoc line="199">
                Returns the local address on which the request was received                
                <return>
                    the InetSocketAddress of the local interface                    
                </return>
            </javadoc>
            <method name="getProtocol" type="String" line="205"/>
            <javadoc line="205">
                Returns the protocol string from the request in the form
                  &lt;i&gt;protocol/majorVersion.minorVersion&lt;/i&gt;. For example,
                  &quot;HTTP/1.1&quot;                
                <return>
                    the protocol string from the request                    
                </return>
            </javadoc>
            <method name="getAttribute" type="Object" line="213"/>
            <javadoc line="213">
                Filter modules may store arbitrary objects with HttpExchange
                  instances as an out-of-band communication mechanism. Other Filters
                  or the exchange handler may then access these objects.
                  &lt;p&gt;
                  Each Filter class will document the attributes which they make
                  available.                
                <param>
                    name the name of the attribute to retrieve                    
                </param>
                <return>
                    the attribute object, or null if it does not exist                    
                </return>
                <throws>
                    NullPointerException if name is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="setAttribute" type="void" line="226"/>
            <javadoc line="226">
                Filter modules may store arbitrary objects with HttpExchange
                  instances as an out-of-band communication mechanism. Other Filters
                  or the exchange handler may then access these objects.
                  &lt;p&gt;
                  Each Filter class will document the attributes which they make
                  available.                
                <param>
                    name the name to associate with the attribute value                    
                </param>
                <param>
                    value the object to store as the attribute value. <code>null</code>
                      value is permitted.                    
                </param>
                <throws>
                    NullPointerException if name is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="setStreams" type="void" line="240"/>
            <javadoc line="240">
                Used by Filters to wrap either (or both) of this exchange&apos;s InputStream
                  and OutputStream, with the given filtered streams so
                  that subsequent calls to {@link #getRequestBody()} will
                  return the given {@link java.io.InputStream}, and calls to{@link #getResponseBody()} will return the given{@link java.io.OutputStream}. The streams provided to this
                  call must wrap the original streams, and may be (but are not
                  required to be) sub-classes of {@link java.io.FilterInputStream}and {@link java.io.FilterOutputStream}.                
                <param>
                    i the filtered input stream to set as this object's inputstream,
                      or <code>null</code> if no change.                    
                </param>
                <param>
                    o the filtered output stream to set as this object's outputstream,
                      or <code>null</code> if no change.                    
                </param>
            </javadoc>
            <method name="getPrincipal" type="HttpPrincipal" line="258"/>
            <javadoc line="258">
                If an authenticator is set on the HttpContext that owns this exchange,
                  then this method will return the {@link HttpPrincipal} that represents
                  the authenticated user for this HttpExchange.                
                <return>
                    the HttpPrincipal, or <code>null</code> if no authenticator is set.                    
                </return>
            </javadoc>
        </class>
    </source>