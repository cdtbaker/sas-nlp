<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.net.httpserver">
        <import package="java.util"/>
        <class name="Headers" line="30">
            <comment line="68">
                Normalize the key by converting to following form.
                 First char upper case, rest lower case.
                 key is presumed to be ASCII                
            </comment>
            <implements interface="Map">
                <type_params>
                    <type_param name="String"/>
                    <type_param name="List<String>"/>
                </type_params>
            </implements>
            <javadoc line="30">
                HTTP request and response headers are represented by this class which implements
                  the interface {@link java.util.Map}&amp;lt;{@link java.lang.String},{@link java.util.List}&amp;lt;{@link java.lang.String}&amp;gt;&amp;gt;.
                  The keys are case-insensitive Strings representing the header names and
                  the value associated with each key is a {@link List}&amp;lt;{@link String}&amp;gt; with one
                  element for each occurence of the header name in the request or response.
                  &lt;p&gt;
                  For example, if a response header instance contains one key &quot;HeaderName&quot; with two values &quot;value1 and value2&quot;
                  then this object is output as two header lines:
                  &lt;blockquote&gt;&lt;pre&gt;
                  HeaderName: value1
                  HeaderName: value2
                  &lt;/blockquote&gt;&lt;/pre&gt;
                  &lt;p&gt;
                  All the normal {@link java.util.Map} methods are provided, but the following
                  additional convenience methods are most likely to be used:
                  &lt;ul&gt;
                  &lt;li&gt;{@link #getFirst(String)} returns a single valued header or the first value of
                  a multi-valued header.&lt;/li&gt;
                  &lt;li&gt;{@link #add(String,String)} adds the given header value to the list for the given key&lt;/li&gt;
                  &lt;li&gt;{@link #set(String,String)} sets the given header field to the single value given
                  overwriting any existing values in the value list.
                  &lt;/ul&gt;&lt;p&gt;
                  All methods in this class accept &lt;code&gt;null&lt;/code&gt; values for keys and values. However, null
                  keys will never will be present in HTTP request headers, and will not be output/sent in response headers.
                  Null values can be represented as either a null entry for the key (i.e. the list is null) or
                  where the key has a list, but one (or more) of the list&apos;s values is null. Null values are output
                  as a header line containing the key but no associated value.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="map" type="HashMap&lt;String,List&lt;String&gt;&gt;" line="63"/>
            <method name="Headers" type="constructor" line="65"/>
            <method name="normalize" type="String" line="71">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="72"/>
                <declaration name="len" type="int" line="75"/>
                <scope line="76"/>
                <declaration name="b" type="char[]" line="79"/>
                <scope line="80"/>
                <scope line="83">
                    <scope line="84"/>
                </scope>
            </method>
            <method name="size" type="int" line="91"/>
            <method name="isEmpty" type="boolean" line="93"/>
            <method name="containsKey" type="boolean" line="95">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="96"/>
                <scope line="99"/>
            </method>
            <method name="containsValue" type="boolean" line="105">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="get" type="List<String>" line="109">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="113">
                returns the first value from the List of String values
                  for the given key (if at least one exists).                
                <param>
                    key the key to search for                    
                </param>
                <return>
                    the first string value associated with the key                    
                </return>
            </javadoc>
            <method name="getFirst" type="String" line="119">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="l" type="List&lt;String&gt;" line="120"/>
                <scope line="121"/>
            </method>
            <method name="put" type="List<String>" line="127">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="List<String>"/>
                </params>
            </method>
            <javadoc line="131">
                adds the given value to the list of headers
                  for the given key. If the mapping does not
                  already exist, then it is created                
                <param>
                    key the header name                    
                </param>
                <param>
                    value the header value to add to the header                    
                </param>
            </javadoc>
            <method name="add" type="void" line="138">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <declaration name="k" type="String" line="139"/>
                <declaration name="l" type="List&lt;String&gt;" line="140"/>
                <scope line="141"/>
            </method>
            <javadoc line="148">
                sets the given value as the sole header value
                  for the given key. If the mapping does not
                  already exist, then it is created                
                <param>
                    key the header name                    
                </param>
                <param>
                    value the header value to set.                    
                </param>
            </javadoc>
            <method name="set" type="void" line="155">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <declaration name="l" type="LinkedList&lt;String&gt;" line="156"/>
            </method>
            <method name="remove" type="List<String>" line="162">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="putAll" type="void" line="166">
                <params>
                    <param name="t" type="Map<? extends String,? extends List<String>>"/>
                </params>
            </method>
            <method name="clear" type="void" line="170"/>
            <method name="keySet" type="Set<String>" line="172"/>
            <method name="values" type="Collection<List<String>>" line="174"/>
            <method name="entrySet" type="Set<Map.Entry<String,List<String>>>" line="176"/>
            <method name="equals" type="boolean" line="180">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="182"/>
        </class>
    </source>