<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.net.httpserver">
        <import package="java.net"/>
        <import package="java.io"/>
        <import package="java.nio"/>
        <import package="java.security"/>
        <import package="java.nio.channels"/>
        <import package="java.util"/>
        <import package="java.util.concurrent"/>
        <import package="javax.net.ssl"/>
        <import package="com.sun.net.httpserver.spi.HttpServerProvider"/>
        <class name="HttpServer" line="11">
            <javadoc line="11">
                This class implements a simple HTTP server. A HttpServer is bound to an IP address
                  and port number and listens for incoming TCP connections from clients on this address.
                  The sub-class {@link HttpsServer} implements a server which handles HTTPS requests.
                  &lt;p&gt;
                  One or more {@link HttpHandler} objects must be associated with a server
                  in order to process requests. Each such HttpHandler is registered
                  with a root URI path which represents the
                  location of the application or service on this server. The mapping of a handler
                  to a HttpServer is encapsulated by a {@link HttpContext} object. HttpContexts
                  are created by calling {@link #createContext(String,HttpHandler)}.
                  Any request for which no handler can be found is rejected with a 404 response.
                  Management of threads can be done external to this object by providing a{@link java.util.concurrent.Executor} object. If none is provided a default
                  implementation is used.
                  &lt;p&gt;
                  &lt;a name=&quot;mapping_description&quot;&gt;&lt;/a&gt;
                  &lt;b&gt;Mapping request URIs to HttpContext paths&lt;/b&gt;&lt;p&gt;
                  When a HTTP request is received,
                  the appropriate HttpContext (and handler) is located by finding the context
                  whose path is the longest matching prefix of the request URI&apos;s path.
                  Paths are matched literally, which means that the strings are compared
                  case sensitively, and with no conversion to or from any encoded forms.
                  For example. Given a HttpServer with the following HttpContexts configured.&lt;p&gt;
                  &lt;table &gt;
                  &lt;tr&gt;&lt;td&gt;&lt;i&gt;Context&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;Context path&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;ctx1&lt;/td&gt;&lt;td&gt;&quot;/&quot;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;ctx2&lt;/td&gt;&lt;td&gt;&quot;/apps/&quot;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;ctx3&lt;/td&gt;&lt;td&gt;&quot;/apps/foo/&quot;&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;
                  the following table shows some request URIs and which, if any context they would
                  match with.&lt;p&gt;
                  &lt;table&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;i&gt;Request URI&lt;/i&gt;&lt;/td&gt;&lt;td&gt;&lt;i&gt;Matches context&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&quot;http://foo.com/apps/foo/bar&quot;&lt;/td&gt;&lt;td&gt;ctx3&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&quot;http://foo.com/apps/Foo/bar&quot;&lt;/td&gt;&lt;td&gt;no match, wrong case&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&quot;http://foo.com/apps/app1&quot;&lt;/td&gt;&lt;td&gt;ctx2&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&quot;http://foo.com/foo&quot;&lt;/td&gt;&lt;td&gt;ctx1&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;
                  &lt;b&gt;Note about socket backlogs&lt;/b&gt;&lt;p&gt;
                  When binding to an address and port number, the application can also specify an integer
                  &lt;i&gt;backlog&lt;/i&gt; parameter. This represents the maximum number of incoming TCP connections
                  which the system will queue internally. Connections are queued while they are waiting to
                  be accepted by the HttpServer. When the limit is reached, further connections may be
                  rejected (or possibly ignored) by the underlying TCP implementation. Setting the right
                  backlog value is a compromise between efficient resource usage in the TCP layer (not setting
                  it too high) and allowing adequate throughput of incoming requests (not setting it too low).                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <javadoc line="62">
                                
            </javadoc>
            <method name="HttpServer" type="constructor" line="64"/>
            <javadoc line="66">
                creates a HttpServer instance which is initially not bound to any local address/port.
                  The HttpServer is acquired from the currently installed {@link HttpServerProvider}The server must be bound using {@link #bind(InetSocketAddress,int)} before it can be used.                
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="create" type="HttpServer" line="71"/>
            <javadoc line="74">
                Create a &lt;code&gt;HttpServer&lt;/code&gt; instance which will bind to the
                  specified {@link java.net.InetSocketAddress} (IP address and port number)
                  A maximum backlog can also be specified. This is the maximum number of
                  queued incoming connections to allow on the listening socket.
                  Queued TCP connections exceeding this limit may be rejected by the TCP implementation.
                  The HttpServer is acquired from the currently installed {@link HttpServerProvider}                
                <param>
                    addr the address to listen on, if <code>null</code> then bind() must be called
                      to set the address                    
                </param>
                <param>
                    backlog the socket backlog. If this value is less than or equal to zero,
                      then a system default value is used.                    
                </param>
                <throws>
                    BindException if the server cannot bind to the requested address,
                      or if the server is already bound.                    
                </throws>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="create" type="HttpServer" line="89">
                <params>
                    <param name="addr" type="InetSocketAddress"/>
                    <param name="backlog" type="int"/>
                </params>
                <declaration name="provider" type="HttpServerProvider" line="90"/>
            </method>
            <method name="bind" type="void" line="93"/>
            <javadoc line="93">
                Binds a currently unbound HttpServer to the given address and port number.
                  A maximum backlog can also be specified. This is the maximum number of
                  queued incoming connections to allow on the listening socket.
                  Queued TCP connections exceeding this limit may be rejected by the TCP implementation.                
                <param>
                    addr the address to listen on                    
                </param>
                <param>
                    backlog the socket backlog. If this value is less than or equal to zero,
                      then a system default value is used.                    
                </param>
                <throws>
                    BindException if the server cannot bind to the requested address or if the server
                      is already bound.                    
                </throws>
                <throws>
                    NullPointerException if addr is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="start" type="void" line="106"/>
            <javadoc line="106">
                Starts this server in a new background thread. The background thread
                  inherits the priority, thread group and context class loader
                  of the caller.                
            </javadoc>
            <method name="setExecutor" type="void" line="112"/>
            <javadoc line="112">
                sets this server&apos;s {@link java.util.concurrent.Executor} object. An
                  Executor must be established before {@link #start()} is called.
                  All HTTP requests are handled in tasks given to the executor.
                  If this method is not called (before start()) or if it is
                  called with a &lt;code&gt;null&lt;/code&gt; Executor, then
                  a default implementation is used, which uses the thread
                  which was created by the {@link #start()} method.                
                <param>
                    executor the Executor to set, or <code>null</code> for  default
                      implementation                    
                </param>
                <throws>
                    IllegalStateException if the server is already started                    
                </throws>
            </javadoc>
            <method name="getExecutor" type="Executor" line="125"/>
            <javadoc line="125">
                returns this server&apos;s Executor object if one was specified with{@link #setExecutor(Executor)}, or &lt;code&gt;null&lt;/code&gt; if none was
                  specified.                
                <return>
                    the Executor established for this server or <code>null</code> if not set.                    
                </return>
            </javadoc>
            <method name="stop" type="void" line="131"/>
            <javadoc line="131">
                stops this server by closing the listening socket and disallowing
                  any new exchanges from being processed. The method will then block
                  until all current exchange handlers have completed or else when
                  approximately &lt;i&gt;delay&lt;/i&gt; seconds have elapsed (whichever happens
                  sooner). Then, all open TCP connections are closed, the background
                  thread created by start() exits, and the method returns.
                  Once stopped, a HttpServer cannot be re-used. &lt;p&gt;                
                <param>
                    delay the maximum time in seconds to wait until exchanges have finished.                    
                </param>
                <throws>
                    IllegalArgumentException if delay is less than zero.                    
                </throws>
            </javadoc>
            <method name="createContext" type="HttpContext" line="143"/>
            <javadoc line="143">
                Creates a HttpContext. A HttpContext represents a mapping from a
                  URI path to a exchange handler on this HttpServer. Once created, all requests
                  received by the server for the path will be handled by calling
                  the given handler object. The context is identified by the path, and
                  can later be removed from the server using this with the {@link #removeContext(String)} method.
                  &lt;p&gt;
                  The path specifies the root URI path for this context. The first character of path must be
                  &apos;/&apos;. &lt;p&gt;
                  The class overview describes how incoming request URIs are &lt;a href=&quot;#mapping_description&quot;&gt;mapped&lt;/a&gt;
                  to HttpContext instances.                
                <param>
                    path the root URI path to associate the context with                    
                </param>
                <param>
                    handler the handler to invoke for incoming requests.                    
                </param>
                <throws>
                    IllegalArgumentException if path is invalid, or if a context
                      already exists for this path                    
                </throws>
                <throws>
                    NullPointerException if either path, or handler are <code>null</code>                    
                </throws>
            </javadoc>
            <method name="createContext" type="HttpContext" line="161"/>
            <javadoc line="161">
                Creates a HttpContext without initially specifying a handler. The handler must later be specified using{@link HttpContext#setHandler(HttpHandler)}.  A HttpContext represents a mapping from a
                  URI path to an exchange handler on this HttpServer. Once created, and when
                  the handler has been set, all requests
                  received by the server for the path will be handled by calling
                  the handler object. The context is identified by the path, and
                  can later be removed from the server using this with the {@link #removeContext(String)} method.
                  &lt;p&gt;
                  The path specifies the root URI path for this context. The first character of path must be
                  &apos;/&apos;. &lt;p&gt;
                  The class overview describes how incoming request URIs are &lt;a href=&quot;#mapping_description&quot;&gt;mapped&lt;/a&gt;
                  to HttpContext instances.                
                <param>
                    path the root URI path to associate the context with                    
                </param>
                <throws>
                    IllegalArgumentException if path is invalid, or if a context
                      already exists for this path                    
                </throws>
                <throws>
                    NullPointerException if path is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="removeContext" type="void" line="179"/>
            <javadoc line="179">
                Removes the context identified by the given path from the server.
                  Removing a context does not affect exchanges currently being processed
                  but prevents new ones from being accepted.                
                <param>
                    path the path of the handler to remove                    
                </param>
                <throws>
                    IllegalArgumentException if no handler corresponding to this
                      path exists.                    
                </throws>
                <throws>
                    NullPointerException if path is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="removeContext" type="void" line="189"/>
            <javadoc line="189">
                Removes the given context from the server.
                  Removing a context does not affect exchanges currently being processed
                  but prevents new ones from being accepted.                
                <param>
                    context the context to remove                    
                </param>
                <throws>
                    NullPointerException if context is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="getAddress" type="InetSocketAddress" line="197"/>
            <javadoc line="197">
                returns the address this server is listening on                
                <return>
                    the address/port number the server is listening on                    
                </return>
            </javadoc>
        </class>
    </source>