<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.net.ssl">
        <import package="java.net.URL"/>
        <import package="java.net.HttpURLConnection"/>
        <import package="java.io.IOException"/>
        <import package="javax.net.SocketFactory"/>
        <import package="javax.net.ssl.SSLSocketFactory"/>
        <import package="javax.security.cert.X509Certificate"/>
        <class name="HttpsURLConnection" line="8">
            <extends class="HttpURLConnection"/>
            <javadoc line="8">
                HTTP URL connection with support for HTTPS-specific features. See
                  &lt;A HREF=&quot;http://www.w3.org/pub/WWW/Protocols/&quot;&gt; the spec &lt;/A&gt; for
                  details.                
                <deprecated>
                    As of JDK 1.4, this implementation-specific class was
                      replaced by {@link javax.net.ssl.HttpsURLConnection}.                    
                </deprecated>
            </javadoc>
            <method name="HttpsURLConnection" type="constructor" line="16">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <method name="getCipherSuite" type="String" line="19"/>
            <javadoc line="19">
                Returns the cipher suite in use on this connection.                
                <return>
                    the cipher suite                    
                </return>
            </javadoc>
            <method name="getServerCertificateChain" type="X509Certificate[]" line="24"/>
            <javadoc line="24">
                Returns the server&apos;s X.509 certificate chain, or null if
                  the server did not authenticate.                
                <return>
                    the server certificate chain                    
                </return>
            </javadoc>
            <declaration name="defaultHostnameVerifier" type="HostnameVerifier" line="30"/>
            <javadoc line="30">
                HostnameVerifier provides a callback mechanism so that
                  implementers of this interface can supply a policy for
                  handling the case where the host to connect to and
                  the server name from the certificate mismatch.
                  The default implementation will deny such connections.                
            </javadoc>
            <anonymous_class line="37">
                <method name="verify" type="boolean" line="38">
                    <params>
                        <param name="urlHostname" type="String"/>
                        <param name="certHostname" type="String"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="hostnameVerifier" type="HostnameVerifier" line="43"/>
            <javadoc line="44">
                Sets the default HostnameVerifier inherited when an instance
                  of this class is created.                
                <param>
                    v the default host name verifier                    
                </param>
            </javadoc>
            <method name="setDefaultHostnameVerifier" type="void" line="49">
                <params>
                    <param name="v" type="HostnameVerifier"/>
                </params>
                <scope line="50"/>
                <declaration name="sm" type="SecurityManager" line="53"/>
                <scope line="54"/>
            </method>
            <javadoc line="59">
                Gets the default HostnameVerifier.                
                <return>
                    the default host name verifier                    
                </return>
            </javadoc>
            <method name="getDefaultHostnameVerifier" type="HostnameVerifier" line="63"/>
            <javadoc line="66">
                Sets the HostnameVerifier.                
                <param>
                    v the host name verifier                    
                </param>
            </javadoc>
            <method name="setHostnameVerifier" type="void" line="70">
                <params>
                    <param name="v" type="HostnameVerifier"/>
                </params>
                <scope line="71"/>
            </method>
            <javadoc line="76">
                Gets the HostnameVerifier.                
                <return>
                    the host name verifier                    
                </return>
            </javadoc>
            <method name="getHostnameVerifier" type="HostnameVerifier" line="80"/>
            <declaration name="defaultSSLSocketFactory" type="SSLSocketFactory" line="83"/>
            <declaration name="sslSocketFactory" type="SSLSocketFactory" line="84"/>
            <javadoc line="85">
                Sets the default SSL socket factory inherited when an instance
                  of this class is created.                
                <param>
                    sf the default SSL socket factory                    
                </param>
            </javadoc>
            <method name="setDefaultSSLSocketFactory" type="void" line="90">
                <params>
                    <param name="sf" type="SSLSocketFactory"/>
                </params>
                <scope line="91"/>
                <declaration name="sm" type="SecurityManager" line="94"/>
                <scope line="95"/>
            </method>
            <javadoc line="100">
                Gets the default SSL socket factory.                
                <return>
                    the default SSL socket factory                    
                </return>
            </javadoc>
            <method name="getDefaultSSLSocketFactory" type="SSLSocketFactory" line="104">
                <scope line="105"/>
            </method>
            <javadoc line="110">
                Sets the SSL socket factory.                
                <param>
                    sf the SSL socket factory                    
                </param>
            </javadoc>
            <method name="setSSLSocketFactory" type="void" line="114">
                <params>
                    <param name="sf" type="SSLSocketFactory"/>
                </params>
                <scope line="115"/>
            </method>
            <javadoc line="120">
                Gets the SSL socket factory.                
                <return>
                    the SSL socket factory                    
                </return>
            </javadoc>
            <method name="getSSLSocketFactory" type="SSLSocketFactory" line="124"/>
        </class>
    </source>