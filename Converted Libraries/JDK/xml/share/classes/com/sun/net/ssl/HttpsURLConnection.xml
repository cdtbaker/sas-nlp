<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.net.ssl">
        <import package="java.net.URL"/>
        <import package="java.net.HttpURLConnection"/>
        <import package="java.io.IOException"/>
        <import package="javax.net.SocketFactory"/>
        <import package="javax.net.ssl.SSLSocketFactory"/>
        <import package="javax.security.cert.X509Certificate"/>
        <class name="HttpsURLConnection" line="40">
            <extends class="HttpURLConnection"/>
            <comment line="53">
                Initialize an HTTPS URLConnection ... could check that the URL
                 is an &quot;https&quot; URL, and that the handler is also an HTTPS one,
                 but that&apos;s established by other code in this package.
                 @param url the URL                
            </comment>
            <javadoc line="40">
                HTTP URL connection with support for HTTPS-specific features. See
                  &lt;A HREF=&quot;http://www.w3.org/pub/WWW/Protocols/&quot;&gt; the spec &lt;/A&gt; for
                  details.                
                <deprecated>
                    As of JDK 1.4, this implementation-specific class was
                      replaced by {@link javax.net.ssl.HttpsURLConnection}.                    
                </deprecated>
            </javadoc>
            <method name="HttpsURLConnection" type="constructor" line="58">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <method name="getCipherSuite" type="String" line="62"/>
            <javadoc line="62">
                Returns the cipher suite in use on this connection.                
                <return>
                    the cipher suite                    
                </return>
            </javadoc>
            <method name="getServerCertificateChain" type="X509Certificate[]" line="68"/>
            <javadoc line="68">
                Returns the server&apos;s X.509 certificate chain, or null if
                  the server did not authenticate.                
                <return>
                    the server certificate chain                    
                </return>
            </javadoc>
            <declaration name="defaultHostnameVerifier" type="HostnameVerifier" line="75"/>
            <javadoc line="75">
                HostnameVerifier provides a callback mechanism so that
                  implementers of this interface can supply a policy for
                  handling the case where the host to connect to and
                  the server name from the certificate mismatch.
                  The default implementation will deny such connections.                
            </javadoc>
            <anonymous_class line="84">
                <method name="verify" type="boolean" line="85">
                    <params>
                        <param name="urlHostname" type="String"/>
                        <param name="certHostname" type="String"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="hostnameVerifier" type="HostnameVerifier" line="90"/>
            <javadoc line="92">
                Sets the default HostnameVerifier inherited when an instance
                  of this class is created.                
                <param>
                    v the default host name verifier                    
                </param>
            </javadoc>
            <method name="setDefaultHostnameVerifier" type="void" line="97">
                <params>
                    <param name="v" type="HostnameVerifier"/>
                </params>
                <scope line="98"/>
                <declaration name="sm" type="SecurityManager" line="103"/>
                <scope line="104"/>
            </method>
            <javadoc line="110">
                Gets the default HostnameVerifier.                
                <return>
                    the default host name verifier                    
                </return>
            </javadoc>
            <method name="getDefaultHostnameVerifier" type="HostnameVerifier" line="114"/>
            <javadoc line="118">
                Sets the HostnameVerifier.                
                <param>
                    v the host name verifier                    
                </param>
            </javadoc>
            <method name="setHostnameVerifier" type="void" line="122">
                <params>
                    <param name="v" type="HostnameVerifier"/>
                </params>
                <scope line="123"/>
            </method>
            <javadoc line="131">
                Gets the HostnameVerifier.                
                <return>
                    the host name verifier                    
                </return>
            </javadoc>
            <method name="getHostnameVerifier" type="HostnameVerifier" line="135"/>
            <declaration name="defaultSSLSocketFactory" type="SSLSocketFactory" line="139"/>
            <declaration name="sslSocketFactory" type="SSLSocketFactory" line="141"/>
            <javadoc line="143">
                Sets the default SSL socket factory inherited when an instance
                  of this class is created.                
                <param>
                    sf the default SSL socket factory                    
                </param>
            </javadoc>
            <method name="setDefaultSSLSocketFactory" type="void" line="148">
                <params>
                    <param name="sf" type="SSLSocketFactory"/>
                </params>
                <scope line="149"/>
                <declaration name="sm" type="SecurityManager" line="154"/>
                <scope line="155"/>
            </method>
            <javadoc line="161">
                Gets the default SSL socket factory.                
                <return>
                    the default SSL socket factory                    
                </return>
            </javadoc>
            <method name="getDefaultSSLSocketFactory" type="SSLSocketFactory" line="165">
                <scope line="166"/>
            </method>
            <javadoc line="173">
                Sets the SSL socket factory.                
                <param>
                    sf the SSL socket factory                    
                </param>
            </javadoc>
            <method name="setSSLSocketFactory" type="void" line="177">
                <params>
                    <param name="sf" type="SSLSocketFactory"/>
                </params>
                <scope line="178"/>
            </method>
            <javadoc line="185">
                Gets the SSL socket factory.                
                <return>
                    the SSL socket factory                    
                </return>
            </javadoc>
            <method name="getSSLSocketFactory" type="SSLSocketFactory" line="189"/>
        </class>
    </source>