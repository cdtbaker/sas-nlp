<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.net.ssl.internal.www.protocol.https">
        <import package="java.net.URL"/>
        <import package="java.net.Proxy"/>
        <import package="java.net.ProtocolException"/>
        <import package="java.io"/>
        <import package="javax.net.ssl"/>
        <import package="java.security.Permission"/>
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="sun.net.www.http.HttpClient"/>
        <class name="HttpsURLConnectionOldImpl" line="11">
            <extends class="com.sun.net.ssl.HttpsURLConnection"/>
            <javadoc line="11">
                A class to represent an HTTP connection to a remote object.
                  Ideally, this class should subclass and inherit the http handler
                  implementation, but it can&apos;t do so because that class have the
                  wrong Java Type.  Thus it uses the delegate (aka, the
                  Adapter/Wrapper design pattern) to reuse code from the http
                  handler.
                  Since it would use a delegate to access
                  sun.net.www.protocol.http.HttpURLConnection functionalities, it
                  needs to implement all public methods in it&apos;s super class and all
                  the way to Object.                
            </javadoc>
            <declaration name="delegate" type="DelegateHttpsURLConnection" line="24"/>
            <method name="HttpsURLConnectionOldImpl" type="constructor" line="25">
                <params>
                    <param name="u" type="URL"/>
                    <param name="handler" type="Handler"/>
                </params>
            </method>
            <method name="HttpsURLConnectionOldImpl" type="constructor" line="28">
                <params>
                    <param name="u" type="URL"/>
                    <param name="p" type="Proxy"/>
                    <param name="handler" type="Handler"/>
                </params>
            </method>
            <javadoc line="32">
                Create a new HttpClient object, bypassing the cache of
                  HTTP client objects/connections.                
                <param>
                    url       the URL being accessed                    
                </param>
            </javadoc>
            <method name="setNewClient" type="void" line="37">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="40">
                Obtain a HttpClient object. Use the cached copy if specified.                
                <param>
                    url       the URL being accessed                    
                </param>
                <param>
                    useCache  whether the cached connection should be used
                      if present                    
                </param>
            </javadoc>
            <method name="setNewClient" type="void" line="46">
                <params>
                    <param name="url" type="URL"/>
                    <param name="useCache" type="boolean"/>
                </params>
            </method>
            <javadoc line="49">
                Create a new HttpClient object, set up so that it uses
                  per-instance proxying to the given HTTP proxy.  This
                  bypasses the cache of HTTP client objects/connections.                
                <param>
                    url       the URL being accessed                    
                </param>
                <param>
                    proxyHost the proxy host to use                    
                </param>
                <param>
                    proxyPort the proxy port to use                    
                </param>
            </javadoc>
            <method name="setProxiedClient" type="void" line="57">
                <params>
                    <param name="url" type="URL"/>
                    <param name="proxyHost" type="String"/>
                    <param name="proxyPort" type="int"/>
                </params>
            </method>
            <javadoc line="60">
                Obtain a HttpClient object, set up so that it uses per-instance
                  proxying to the given HTTP proxy. Use the cached copy of HTTP
                  client objects/connections if specified.                
                <param>
                    url       the URL being accessed                    
                </param>
                <param>
                    proxyHost the proxy host to use                    
                </param>
                <param>
                    proxyPort the proxy port to use                    
                </param>
                <param>
                    useCache  whether the cached connection should be used
                      if present                    
                </param>
            </javadoc>
            <method name="setProxiedClient" type="void" line="70">
                <params>
                    <param name="url" type="URL"/>
                    <param name="proxyHost" type="String"/>
                    <param name="proxyPort" type="int"/>
                    <param name="useCache" type="boolean"/>
                </params>
            </method>
            <javadoc line="73">
                Implements the HTTP protocol handler&apos;s &quot;connect&quot; method,
                  establishing an SSL connection to the server as necessary.                
            </javadoc>
            <method name="connect" type="void" line="77"/>
            <javadoc line="80">
                Used by subclass to access &quot;connected&quot; variable.  Since we are
                  delegating the actual implementation to &quot;delegate&quot;, we need to
                  delegate the access of &quot;connected&quot; as well.                
            </javadoc>
            <method name="isConnected" type="boolean" line="85"/>
            <javadoc line="88">
                Used by subclass to access &quot;connected&quot; variable.  Since we are
                  delegating the actual implementation to &quot;delegate&quot;, we need to
                  delegate the access of &quot;connected&quot; as well.                
            </javadoc>
            <method name="setConnected" type="void" line="93">
                <params>
                    <param name="conn" type="boolean"/>
                </params>
            </method>
            <javadoc line="96">
                Returns the cipher suite in use on this connection.                
            </javadoc>
            <method name="getCipherSuite" type="String" line="99"/>
            <javadoc line="102">
                Returns the certificate chain the client sent to the
                  server, or null if the client did not authenticate.                
            </javadoc>
            <method name="getLocalCertificates" type="java.security.cert.Certificate[]" line="106"/>
            <javadoc line="109">
                Returns the server&apos;s certificate chain, or throws
                  SSLPeerUnverified Exception if
                  the server did not authenticate.                
            </javadoc>
            <method name="getServerCertificates" type="java.security.cert.Certificate[]" line="114"/>
            <javadoc line="117">
                Returns the server&apos;s X.509 certificate chain, or null if
                  the server did not authenticate.
                  NOTE: This method is not necessary for the version of this class
                  implementing javax.net.ssl.HttpsURLConnection, but provided for
                  compatibility with the com.sun.net.ssl.HttpsURLConnection version.                
            </javadoc>
            <method name="getServerCertificateChain" type="javax.security.cert.X509Certificate[]" line="124">
                <scope line="125"/>
                <scope line="128"/>
            </method>
            <method name="getOutputStream" type="OutputStream" line="132"/>
            <method name="getInputStream" type="InputStream" line="135"/>
            <method name="getErrorStream" type="InputStream" line="138"/>
            <javadoc line="141">
                Disconnect from the server.                
            </javadoc>
            <method name="disconnect" type="void" line="144"/>
            <method name="usingProxy" type="boolean" line="147"/>
            <javadoc line="150">
                Returns an unmodifiable Map of the header fields.
                  The Map keys are Strings that represent the
                  response-header field names. Each Map value is an
                  unmodifiable List of Strings that represents
                  the corresponding field values.                
                <return>
                    a Map of header fields                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getHeaderFields" type="Map&lt;String,List&lt;String&gt;&gt;" line="159"/>
            <javadoc line="162">
                Gets a header field by name. Returns null if not known.                
                <param>
                    name the name of the header field                    
                </param>
            </javadoc>
            <method name="getHeaderField" type="String" line="166">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="169">
                Gets a header field by index. Returns null if not known.                
                <param>
                    n the index of the header field                    
                </param>
            </javadoc>
            <method name="getHeaderField" type="String" line="173">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="176">
                Gets a header field by index. Returns null if not known.                
                <param>
                    n the index of the header field                    
                </param>
            </javadoc>
            <method name="getHeaderFieldKey" type="String" line="180">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="183">
                Sets request property. If a property with the key already
                  exists, overwrite its value with the new value.                
                <param>
                    value the value to be set                    
                </param>
            </javadoc>
            <method name="setRequestProperty" type="void" line="188">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="191">
                Adds a general request property specified by a
                  key-value pair.  This method will not overwrite
                  existing values associated with the same key.                
                <param>
                    key     the keyword by which the request is known
                      (e.g., &quot;&lt;code&gt;accept&lt;/code&gt;&quot;).                    
                </param>
                <param>
                    value  the value associated with it.                    
                </param>
                <see>
                    #getRequestProperties(java.lang.String)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addRequestProperty" type="void" line="201">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="204">
                Overwrite super class method                
            </javadoc>
            <method name="getResponseCode" type="int" line="207"/>
            <method name="getRequestProperty" type="String" line="210">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="213">
                Returns an unmodifiable Map of general request
                  properties for this connection. The Map keys
                  are Strings that represent the request-header
                  field names. Each Map value is a unmodifiable List
                  of Strings that represents the corresponding
                  field values.                
                <return>
                    a Map of the general request properties for this connection.                    
                </return>
                <throws>
                    IllegalStateException if already connected                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getRequestProperties" type="Map&lt;String,List&lt;String&gt;&gt;" line="224"/>
            <method name="setInstanceFollowRedirects" type="void" line="227">
                <params>
                    <param name="shouldFollow" type="boolean"/>
                </params>
            </method>
            <method name="getInstanceFollowRedirects" type="boolean" line="230"/>
            <method name="setRequestMethod" type="void" line="233">
                <params>
                    <param name="method" type="String"/>
                </params>
            </method>
            <method name="getRequestMethod" type="String" line="236"/>
            <method name="getResponseMessage" type="String" line="239"/>
            <method name="getHeaderFieldDate" type="long" line="242">
                <params>
                    <param name="name" type="String"/>
                    <param name="Default" type="long"/>
                </params>
            </method>
            <method name="getPermission" type="Permission" line="245"/>
            <method name="getURL" type="URL" line="248"/>
            <method name="getContentLength" type="int" line="251"/>
            <method name="getContentLengthLong" type="long" line="254"/>
            <method name="getContentType" type="String" line="257"/>
            <method name="getContentEncoding" type="String" line="260"/>
            <method name="getExpiration" type="long" line="263"/>
            <method name="getDate" type="long" line="266"/>
            <method name="getLastModified" type="long" line="269"/>
            <method name="getHeaderFieldInt" type="int" line="272">
                <params>
                    <param name="name" type="String"/>
                    <param name="Default" type="int"/>
                </params>
            </method>
            <method name="getHeaderFieldLong" type="long" line="275">
                <params>
                    <param name="name" type="String"/>
                    <param name="Default" type="long"/>
                </params>
            </method>
            <method name="getContent" type="Object" line="278"/>
            <method name="getContent" type="Object" line="281">
                <params>
                    <param name="classes" type="Class[]"/>
                </params>
            </method>
            <method name="toString" type="String" line="284"/>
            <method name="setDoInput" type="void" line="287">
                <params>
                    <param name="doinput" type="boolean"/>
                </params>
            </method>
            <method name="getDoInput" type="boolean" line="290"/>
            <method name="setDoOutput" type="void" line="293">
                <params>
                    <param name="dooutput" type="boolean"/>
                </params>
            </method>
            <method name="getDoOutput" type="boolean" line="296"/>
            <method name="setAllowUserInteraction" type="void" line="299">
                <params>
                    <param name="allowuserinteraction" type="boolean"/>
                </params>
            </method>
            <method name="getAllowUserInteraction" type="boolean" line="302"/>
            <method name="setUseCaches" type="void" line="305">
                <params>
                    <param name="usecaches" type="boolean"/>
                </params>
            </method>
            <method name="getUseCaches" type="boolean" line="308"/>
            <method name="setIfModifiedSince" type="void" line="311">
                <params>
                    <param name="ifmodifiedsince" type="long"/>
                </params>
            </method>
            <method name="getIfModifiedSince" type="long" line="314"/>
            <method name="getDefaultUseCaches" type="boolean" line="317"/>
            <method name="setDefaultUseCaches" type="void" line="320">
                <params>
                    <param name="defaultusecaches" type="boolean"/>
                </params>
            </method>
            <method name="finalize" type="void" line="323"/>
            <method name="equals" type="boolean" line="326">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="329"/>
            <method name="setConnectTimeout" type="void" line="332">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <method name="getConnectTimeout" type="int" line="335"/>
            <method name="setReadTimeout" type="void" line="338">
                <params>
                    <param name="timeout" type="int"/>
                </params>
            </method>
            <method name="getReadTimeout" type="int" line="341"/>
            <method name="setFixedLengthStreamingMode" type="void" line="344">
                <params>
                    <param name="contentLength" type="int"/>
                </params>
            </method>
            <method name="setFixedLengthStreamingMode" type="void" line="347">
                <params>
                    <param name="contentLength" type="long"/>
                </params>
            </method>
            <method name="setChunkedStreamingMode" type="void" line="350">
                <params>
                    <param name="chunklen" type="int"/>
                </params>
            </method>
        </class>
    </source>