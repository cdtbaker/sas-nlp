<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.net.ssl.internal.www.protocol.https">
        <import package="java.net.URL"/>
        <import package="java.net.Proxy"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Collection"/>
        <import package="java.util.List"/>
        <import package="java.util.Iterator"/>
        <import package="java.security.Principal"/>
        <import package="java.security.cert"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="sun.security.util.HostnameChecker"/>
        <import package="sun.security.util.DerValue"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.net.www.protocol.https.AbstractDelegateHttpsURLConnection"/>
        <class name="DelegateHttpsURLConnection" line="46">
            <extends class="AbstractDelegateHttpsURLConnection"/>
            <comment line="59">
                we need a reference to the HttpsURLConnection to get                
            </comment>
            <comment line="60">
                the properties set there                
            </comment>
            <comment line="61">
                we also need it to be public so that it can be referenced                
            </comment>
            <comment line="62">
                from sun.net.www.protocol.http.HttpURLConnection                
            </comment>
            <comment line="63">
                this is for ResponseCache.put(URI, URLConnection)                
            </comment>
            <comment line="64">
                second parameter needs to be cast to javax.net.ssl.HttpsURLConnection                
            </comment>
            <comment line="65">
                instead of AbstractDelegateHttpsURLConnection                
            </comment>
            <comment line="92">
                Called by layered delegator&apos;s finalize() method to handle closing
                 the underlying object.                
            </comment>
            <comment line="109">
                In com.sun.net.ssl.HostnameVerifier the method is defined
                 as verify(String urlHostname, String certHostname).
                 This means we need to extract the hostname from the X.509 certificate
                 or from the Kerberos principal name, in this wrapper.                
            </comment>
            <comment line="143">
                Get the peer principal from the session                
            </comment>
            <comment line="160">
                Extract the name of the SSL server from the certificate.
                
                 Note this code is essentially a subset of the hostname extraction
                 code in HostnameChecker.                
            </comment>
            <javadoc line="46">
                This class was introduced to provide an additional level of
                  abstraction between javax.net.ssl.HttpURLConnection and
                  com.sun.net.ssl.HttpURLConnection objects. &lt;p&gt;
                  javax.net.ssl.HttpURLConnection is used in the new sun.net version
                  of protocol implementation (this one)
                  com.sun.net.ssl.HttpURLConnection is used in the com.sun version.                
            </javadoc>
            <declaration name="httpsURLConnection" type="com.sun.net.ssl.HttpsURLConnection" line="65"/>
            <method name="DelegateHttpsURLConnection" type="constructor" line="70">
                <params>
                    <param name="url" type="URL"/>
                    <param name="handler" type="sun.net.www.protocol.http.Handler"/>
                    <param name="httpsURLConnection" type="com.sun.net.ssl.HttpsURLConnection"/>
                </params>
            </method>
            <method name="DelegateHttpsURLConnection" type="constructor" line="77">
                <params>
                    <param name="url" type="URL"/>
                    <param name="p" type="Proxy"/>
                    <param name="handler" type="sun.net.www.protocol.http.Handler"/>
                    <param name="httpsURLConnection" type="com.sun.net.ssl.HttpsURLConnection"/>
                </params>
            </method>
            <method name="getSSLSocketFactory" type="javax.net.ssl.SSLSocketFactory" line="82"/>
            <method name="getHostnameVerifier" type="javax.net.ssl.HostnameVerifier" line="86">
                <comment line="87">
                    note: getHostnameVerifier() never returns null                    
                </comment>
            </method>
            <method name="dispose" type="void" line="95"/>
        </class>
        <class name="VerifierWrapper" line="100">
            <comment line="59">
                we need a reference to the HttpsURLConnection to get                
            </comment>
            <comment line="60">
                the properties set there                
            </comment>
            <comment line="61">
                we also need it to be public so that it can be referenced                
            </comment>
            <comment line="62">
                from sun.net.www.protocol.http.HttpURLConnection                
            </comment>
            <comment line="63">
                this is for ResponseCache.put(URI, URLConnection)                
            </comment>
            <comment line="64">
                second parameter needs to be cast to javax.net.ssl.HttpsURLConnection                
            </comment>
            <comment line="65">
                instead of AbstractDelegateHttpsURLConnection                
            </comment>
            <comment line="92">
                Called by layered delegator&apos;s finalize() method to handle closing
                 the underlying object.                
            </comment>
            <comment line="109">
                In com.sun.net.ssl.HostnameVerifier the method is defined
                 as verify(String urlHostname, String certHostname).
                 This means we need to extract the hostname from the X.509 certificate
                 or from the Kerberos principal name, in this wrapper.                
            </comment>
            <comment line="143">
                Get the peer principal from the session                
            </comment>
            <comment line="160">
                Extract the name of the SSL server from the certificate.
                
                 Note this code is essentially a subset of the hostname extraction
                 code in HostnameChecker.                
            </comment>
            <implements interface="javax.net.ssl.HostnameVerifier"/>
            <declaration name="verifier" type="com.sun.net.ssl.HostnameVerifier" line="102"/>
            <method name="VerifierWrapper" type="constructor" line="104">
                <params>
                    <param name="verifier" type="com.sun.net.ssl.HostnameVerifier"/>
                </params>
            </method>
            <method name="verify" type="boolean" line="114">
                <params>
                    <param name="hostname" type="String"/>
                    <param name="session" type="javax.net.ssl.SSLSession"/>
                </params>
                <comment line="117">
                    Use ciphersuite to determine whether Kerberos is active.                    
                </comment>
                <comment line="122">
                    X.509                    
                </comment>
                <scope line="115">
                    <declaration name="serverName" type="String" line="116"/>
                    <scope line="118"/>
                    <scope line="122">
                        <declaration name="serverChain" type="Certificate[]" line="123"/>
                        <scope line="124"/>
                        <scope line="127"/>
                        <declaration name="serverCert" type="X509Certificate" line="130"/>
                    </scope>
                    <scope line="133"/>
                </scope>
                <scope line="137"/>
            </method>
            <method name="getPeerPrincipal" type="Principal" line="147">
                <params>
                    <param name="session" type="javax.net.ssl.SSLSession"/>
                </params>
                <comment line="152">
                    if the provider does not support it, return null, since                    
                </comment>
                <comment line="153">
                    we need it only for Kerberos.                    
                </comment>
                <declaration name="principal" type="Principal" line="148"/>
                <scope line="149"/>
                <scope line="151"/>
            </method>
            <method name="getServername" type="String" line="165">
                <params>
                    <param name="peerCert" type="X509Certificate"/>
                </params>
                <comment line="167">
                    compare to subjectAltNames if dnsName is present                    
                </comment>
                <comment line="173">
                    compare dNSName with host in url                    
                </comment>
                <comment line="180">
                    else check against common name in the subject field                    
                </comment>
                <comment line="190">
                    ignore                    
                </comment>
                <comment line="194">
                    ignore                    
                </comment>
                <scope line="166">
                    <declaration name="subjAltNames" type="Collection" line="168"/>
                    <scope line="169">
                        <scope line="170">
                            <declaration name="next" type="List" line="171"/>
                            <scope line="172">
                                <declaration name="dnsName" type="String" line="174"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="subject" type="X500Name" line="181"/>
                    <declaration name="derValue" type="DerValue" line="183"/>
                    <scope line="185">
                        <scope line="186">
                            <declaration name="name" type="String" line="187"/>
                        </scope>
                        <scope line="189"/>
                    </scope>
                </scope>
                <scope line="193"/>
            </method>
        </class>
    </source>