<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.net.httpserver">
        <class name="BasicAuthenticator" line="28">
            <extends class="Authenticator"/>
            <javadoc line="28">
                BasicAuthenticator provides an implementation of HTTP Basic
                  authentication. It is an abstract class and must be extended
                  to provide an implementation of {@link #checkCredentials(String,String)}which is called to verify each incoming request.                
            </javadoc>
            <declaration name="realm" type="String" line="36"/>
            <javadoc line="38">
                Creates a BasicAuthenticator for the given HTTP realm                
                <param>
                    realm The HTTP Basic authentication realm                    
                </param>
                <throws>
                    NullPointerException if the realm is an empty string                    
                </throws>
            </javadoc>
            <method name="BasicAuthenticator" type="constructor" line="43">
                <params>
                    <param name="realm" type="String"/>
                </params>
            </method>
            <javadoc line="47">
                returns the realm this BasicAuthenticator was created with                
                <return>
                    the authenticator's realm string.                    
                </return>
            </javadoc>
            <method name="getRealm" type="String" line="51"/>
            <method name="authenticate" type="Result" line="56">
                <params>
                    <param name="t" type="HttpExchange"/>
                </params>
                <comment line="59">
                    look for auth token                    
                </comment>
                <comment line="85">
                                        
                </comment>
                <declaration name="rmap" type="Headers" line="57"/>
                <declaration name="auth" type="String" line="61"/>
                <scope line="62">
                    <declaration name="map" type="Headers" line="63"/>
                </scope>
                <declaration name="sp" type="int" line="67"/>
                <scope line="68"/>
                <declaration name="b" type="byte[]" line="71"/>
                <declaration name="userpass" type="String" line="72"/>
                <declaration name="colon" type="int" line="73"/>
                <declaration name="uname" type="String" line="74"/>
                <declaration name="pass" type="String" line="75"/>
                <scope line="77"/>
                <scope line="83">
                    <declaration name="map" type="Headers" line="86"/>
                </scope>
            </method>
            <method name="checkCredentials" type="boolean" line="92"/>
            <javadoc line="92">
                called for each incoming request to verify the
                  given name and password in the context of this
                  Authenticator&apos;s realm. Any caching of credentials
                  must be done by the implementation of this method                
                <param>
                    username the username from the request                    
                </param>
                <param>
                    password the password from the request                    
                </param>
                <return>
                    <code>true</code> if the credentials are valid,
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
        </class>
        <class name="Base64" line="105">
            <javadoc line="107">
                Translates the specified byte array into a Base64 string as per
                  Preferences.put(byte[]).                
            </javadoc>
            <method name="byteArrayToBase64" type="String" line="111">
                <params>
                    <param name="a" type="byte[]"/>
                </params>
            </method>
            <javadoc line="115">
                Translates the specified byte array into an &quot;aternate representation&quot;
                  Base64 string.  This non-standard variant uses an alphabet that does
                  not contain the uppercase alphabetic characters, which makes it
                  suitable for use in situations where case-folding occurs.                
            </javadoc>
            <method name="byteArrayToAltBase64" type="String" line="121">
                <params>
                    <param name="a" type="byte[]"/>
                </params>
            </method>
            <method name="byteArrayToBase64" type="String" line="125">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="alternate" type="boolean"/>
                </params>
                <comment line="134">
                    Translate all full groups from byte array elements to Base64                    
                </comment>
                <comment line="146">
                    Translate partial group if present                    
                </comment>
                <comment line="154">
                    assert numBytesInPartialGroup == 2;                    
                </comment>
                <comment line="161">
                    assert inCursor == a.length;
                     assert result.length() == resultLen;                    
                </comment>
                <declaration name="aLen" type="int" line="126"/>
                <declaration name="numFullGroups" type="int" line="127"/>
                <declaration name="numBytesInPartialGroup" type="int" line="128"/>
                <declaration name="resultLen" type="int" line="129"/>
                <declaration name="result" type="StringBuffer" line="130"/>
                <declaration name="intToAlpha" type="char[]" line="131"/>
                <declaration name="inCursor" type="int" line="134"/>
                <scope line="135">
                    <declaration name="byte0" type="int" line="136"/>
                    <declaration name="byte1" type="int" line="137"/>
                    <declaration name="byte2" type="int" line="138"/>
                </scope>
                <scope line="146">
                    <declaration name="byte0" type="int" line="147"/>
                    <scope line="149"/>
                    <scope line="152">
                        <declaration name="byte1" type="int" line="154"/>
                    </scope>
                </scope>
            </method>
            <declaration name="intToBase64" type="char" line="165"/>
            <javadoc line="165">
                This array is a lookup table that translates 6-bit positive integer
                  index values into their &quot;Base64 Alphabet&quot; equivalents as specified
                  in Table 1 of RFC 2045.                
            </javadoc>
            <declaration name="intToAltBase64" type="char" line="178"/>
            <javadoc line="178">
                This array is a lookup table that translates 6-bit positive integer
                  index values into their &quot;Alternate Base64 Alphabet&quot; equivalents.
                  This is NOT the real Base64 Alphabet as per in Table 1 of RFC 2045.
                  This alternate alphabet does not use the capital letters.  It is
                  designed for use in environments where &quot;case folding&quot; occurs.                
            </javadoc>
            <javadoc line="193">
                Translates the specified Base64 string (as per Preferences.get(byte[]))
                  into a byte array.                
                <throw>
                    IllegalArgumentException if <tt>s</tt> is not a valid Base64
                      string.                    
                </throw>
            </javadoc>
            <method name="base64ToByteArray" type="byte[]" line="200">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="204">
                Translates the specified &quot;aternate representation&quot; Base64 string
                  into a byte array.                
                <throw>
                    IllegalArgumentException or ArrayOutOfBoundsException
                      if <tt>s</tt> is not a valid alternate representation
                      Base64 string.                    
                </throw>
            </javadoc>
            <method name="altBase64ToByteArray" type="byte[]" line="212">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="base64ToByteArray" type="byte[]" line="216">
                <params>
                    <param name="s" type="String"/>
                    <param name="alternate" type="boolean"/>
                </params>
                <comment line="236">
                    Translate all full groups from base64 to byte array elements                    
                </comment>
                <comment line="248">
                    Translate partial group, if present                    
                </comment>
                <comment line="259">
                    assert inCursor == s.length()-missingBytesInLastGroup;
                     assert outCursor == result.length;                    
                </comment>
                <declaration name="alphaToInt" type="byte[]" line="217"/>
                <declaration name="sLen" type="int" line="218"/>
                <declaration name="numGroups" type="int" line="219"/>
                <declaration name="missingBytesInLastGroup" type="int" line="223"/>
                <declaration name="numFullGroups" type="int" line="224"/>
                <scope line="225">
                    <scope line="226"/>
                </scope>
                <declaration name="result" type="byte[]" line="233"/>
                <declaration name="inCursor" type="int" line="236"/>
                <scope line="237">
                    <declaration name="ch0" type="int" line="238"/>
                    <declaration name="ch1" type="int" line="239"/>
                    <declaration name="ch2" type="int" line="240"/>
                    <declaration name="ch3" type="int" line="241"/>
                </scope>
                <scope line="248">
                    <declaration name="ch0" type="int" line="249"/>
                    <declaration name="ch1" type="int" line="250"/>
                    <scope line="253">
                        <declaration name="ch2" type="int" line="254"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="263">
                Translates the specified character, which is assumed to be in the
                  &quot;Base 64 Alphabet&quot; into its equivalent 6-bit positive integer.                
                <throw>
                    IllegalArgumentException or ArrayOutOfBoundsException if
                      c is not in the Base64 Alphabet.                    
                </throw>
            </javadoc>
            <method name="base64toInt" type="int" line="270">
                <params>
                    <param name="c" type="char"/>
                    <param name="alphaToInt" type="byte[]"/>
                </params>
                <declaration name="result" type="int" line="271"/>
            </method>
            <declaration name="base64ToInt" type="byte" line="277"/>
            <javadoc line="277">
                This array is a lookup table that translates unicode characters
                  drawn from the &quot;Base64 Alphabet&quot; (as specified in Table 1 of RFC 2045)
                  into their 6-bit positive integer equivalents.  Characters that
                  are not in the Base64 alphabet but fall within the bounds of the
                  array are translated to -1.                
            </javadoc>
            <declaration name="altBase64ToInt" type="byte" line="294"/>
            <javadoc line="294">
                This array is the analogue of base64ToInt, but for the nonstandard
                  variant that avoids the use of uppercase alphabetic characters.                
            </javadoc>
        </class>
    </source>