<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.net.httpserver">
        <class name="BasicAuthenticator" line="2">
            <extends class="Authenticator"/>
            <javadoc line="2">
                BasicAuthenticator provides an implementation of HTTP Basic
                  authentication. It is an abstract class and must be extended
                  to provide an implementation of {@link #checkCredentials(String,String)}which is called to verify each incoming request.                
            </javadoc>
            <declaration name="realm" type="String" line="8"/>
            <javadoc line="9">
                Creates a BasicAuthenticator for the given HTTP realm                
                <param>
                    realm The HTTP Basic authentication realm                    
                </param>
                <throws>
                    NullPointerException if the realm is an empty string                    
                </throws>
            </javadoc>
            <method name="BasicAuthenticator" type="constructor" line="14">
                <params>
                    <param name="realm" type="String"/>
                </params>
            </method>
            <javadoc line="17">
                returns the realm this BasicAuthenticator was created with                
                <return>
                    the authenticator&apos;s realm string.                    
                </return>
            </javadoc>
            <method name="getRealm" type="String" line="21"/>
            <method name="authenticate" type="Result" line="24">
                <params>
                    <param name="t" type="HttpExchange"/>
                </params>
                <declaration name="rmap" type="Headers" line="25"/>
                <declaration name="auth" type="String" line="26"/>
                <scope line="27">
                    <declaration name="map" type="Headers" line="28"/>
                </scope>
                <declaration name="sp" type="int" line="32"/>
                <scope line="33"/>
                <declaration name="b" type="byte[]" line="36"/>
                <declaration name="userpass" type="String" line="37"/>
                <declaration name="colon" type="int" line="38"/>
                <declaration name="uname" type="String" line="39"/>
                <declaration name="pass" type="String" line="40"/>
                <scope line="41"/>
                <scope line="44">
                    <declaration name="map" type="Headers" line="45"/>
                </scope>
            </method>
            <method name="checkCredentials" type="boolean" line="50"/>
            <javadoc line="50">
                called for each incoming request to verify the
                  given name and password in the context of this
                  Authenticator&apos;s realm. Any caching of credentials
                  must be done by the implementation of this method                
                <param>
                    username the username from the request                    
                </param>
                <param>
                    password the password from the request                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the credentials are valid,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
        </class>
        <class name="Base64" line="62">
            <javadoc line="63">
                Translates the specified byte array into a Base64 string as per
                  Preferences.put(byte[]).                
            </javadoc>
            <method name="byteArrayToBase64" type="String" line="67">
                <params>
                    <param name="a" type="byte[]"/>
                </params>
            </method>
            <javadoc line="70">
                Translates the specified byte array into an &quot;aternate representation&quot;
                  Base64 string.  This non-standard variant uses an alphabet that does
                  not contain the uppercase alphabetic characters, which makes it
                  suitable for use in situations where case-folding occurs.                
            </javadoc>
            <method name="byteArrayToAltBase64" type="String" line="76">
                <params>
                    <param name="a" type="byte[]"/>
                </params>
            </method>
            <method name="byteArrayToBase64" type="String" line="79">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="alternate" type="boolean"/>
                </params>
                <declaration name="aLen" type="int" line="80"/>
                <declaration name="numFullGroups" type="int" line="81"/>
                <declaration name="numBytesInPartialGroup" type="int" line="82"/>
                <declaration name="resultLen" type="int" line="83"/>
                <declaration name="result" type="StringBuffer" line="84"/>
                <declaration name="intToAlpha" type="char[]" line="85"/>
                <declaration name="inCursor" type="int" line="86"/>
                <scope line="87">
                    <declaration name="byte0" type="int" line="88"/>
                    <declaration name="byte1" type="int" line="89"/>
                    <declaration name="byte2" type="int" line="90"/>
                </scope>
                <scope line="96">
                    <declaration name="byte0" type="int" line="97"/>
                    <scope line="99"/>
                    <scope line="103">
                        <declaration name="byte1" type="int" line="104"/>
                    </scope>
                </scope>
            </method>
            <declaration name="intToBase64" type="char" line="112"/>
            <javadoc line="112">
                This array is a lookup table that translates 6-bit positive integer
                  index values into their &quot;Base64 Alphabet&quot; equivalents as specified
                  in Table 1 of RFC 2045.                
            </javadoc>
            <declaration name="intToAltBase64" type="char" line="118"/>
            <javadoc line="118">
                This array is a lookup table that translates 6-bit positive integer
                  index values into their &quot;Alternate Base64 Alphabet&quot; equivalents.
                  This is NOT the real Base64 Alphabet as per in Table 1 of RFC 2045.
                  This alternate alphabet does not use the capital letters.  It is
                  designed for use in environments where &quot;case folding&quot; occurs.                
            </javadoc>
            <javadoc line="126">
                Translates the specified Base64 string (as per Preferences.get(byte[]))
                  into a byte array.                
                <throw>
                    IllegalArgumentException if &lt;tt&gt;s&lt;/tt&gt; is not a valid Base64
                      string.                    
                </throw>
            </javadoc>
            <method name="base64ToByteArray" type="byte[]" line="132">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="135">
                Translates the specified &quot;aternate representation&quot; Base64 string
                  into a byte array.                
                <throw>
                    IllegalArgumentException or ArrayOutOfBoundsException
                      if &lt;tt&gt;s&lt;/tt&gt; is not a valid alternate representation
                      Base64 string.                    
                </throw>
            </javadoc>
            <method name="altBase64ToByteArray" type="byte[]" line="142">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="base64ToByteArray" type="byte[]" line="145">
                <params>
                    <param name="s" type="String"/>
                    <param name="alternate" type="boolean"/>
                </params>
                <declaration name="alphaToInt" type="byte[]" line="146"/>
                <declaration name="sLen" type="int" line="147"/>
                <declaration name="numGroups" type="int" line="148"/>
                <declaration name="missingBytesInLastGroup" type="int" line="150"/>
                <declaration name="numFullGroups" type="int" line="151"/>
                <scope line="152">
                    <scope line="153"/>
                </scope>
                <declaration name="result" type="byte[]" line="159"/>
                <declaration name="inCursor" type="int" line="160"/>
                <scope line="161">
                    <declaration name="ch0" type="int" line="162"/>
                    <declaration name="ch1" type="int" line="163"/>
                    <declaration name="ch2" type="int" line="164"/>
                    <declaration name="ch3" type="int" line="165"/>
                </scope>
                <scope line="170">
                    <declaration name="ch0" type="int" line="171"/>
                    <declaration name="ch1" type="int" line="172"/>
                    <scope line="174">
                        <declaration name="ch2" type="int" line="175"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="181">
                Translates the specified character, which is assumed to be in the
                  &quot;Base 64 Alphabet&quot; into its equivalent 6-bit positive integer.                
                <throw>
                    IllegalArgumentException or ArrayOutOfBoundsException if
                      c is not in the Base64 Alphabet.                    
                </throw>
            </javadoc>
            <method name="base64toInt" type="int" line="187">
                <params>
                    <param name="c" type="char"/>
                    <param name="alphaToInt" type="byte[]"/>
                </params>
                <declaration name="result" type="int" line="188"/>
            </method>
            <declaration name="base64ToInt" type="byte" line="192"/>
            <javadoc line="192">
                This array is a lookup table that translates unicode characters
                  drawn from the &quot;Base64 Alphabet&quot; (as specified in Table 1 of RFC 2045)
                  into their 6-bit positive integer equivalents.  Characters that
                  are not in the Base64 alphabet but fall within the bounds of the
                  array are translated to -1.                
            </javadoc>
            <declaration name="altBase64ToInt" type="byte" line="200"/>
            <javadoc line="200">
                This array is the analogue of base64ToInt, but for the nonstandard
                  variant that avoids the use of uppercase alphabetic characters.                
            </javadoc>
        </class>
    </source>