<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.net.ssl">
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.security"/>
        <import package="java.security.Provider.Service"/>
        <import package="java.net.Socket"/>
        <import package="sun.security.jca"/>
        <class name="SSLSecurity" line="8">
            <javadoc line="8">
                This class instantiates implementations of JSSE engine classes from
                  providers registered with the java.security.Security object.                
                <author>
                    Jan Luehe                    
                </author>
                <author>
                    Jeff Nisewanger                    
                </author>
                <author>
                    Brad Wetmore                    
                </author>
            </javadoc>
            <method name="SSLSecurity" type="constructor" line="16"/>
            <method name="getService" type="Service" line="18">
                <params>
                    <param name="type" type="String"/>
                    <param name="alg" type="String"/>
                </params>
                <declaration name="list" type="ProviderList" line="19"/>
                <scope line="20">
                    <declaration name="s" type="Service" line="21"/>
                    <scope line="22"/>
                </scope>
            </method>
            <javadoc line="28">
                The body of the driver for the getImpl method.                
            </javadoc>
            <method name="getImpl1" type="Object[]" line="31">
                <params>
                    <param name="algName" type="String"/>
                    <param name="engineType" type="String"/>
                    <param name="service" type="Service"/>
                </params>
                <declaration name="provider" type="Provider" line="32"/>
                <declaration name="className" type="String" line="33"/>
                <declaration name="implClass" type="Class" line="34"/>
                <scope line="35">
                    <declaration name="cl" type="ClassLoader" line="36"/>
                    <scope line="37"/>
                    <scope line="40"/>
                </scope>
                <scope line="44"/>
                <scope line="47"/>
                <scope line="50">
                    <declaration name="typeClassJavax" type="Class" line="51"/>
                    <declaration name="typeClassCom" type="Class" line="52"/>
                    <declaration name="obj" type="Object" line="53"/>
                    <scope line="54">
                        <scope line="55"/>
                        <scope line="58"/>
                        <scope line="61"/>
                        <scope line="64"/>
                    </scope>
                    <scope line="68"/>
                    <scope line="71"/>
                    <scope line="74"/>
                </scope>
                <scope line="78">
                    <declaration name="exc" type="IllegalStateException" line="79"/>
                </scope>
            </method>
            <javadoc line="84">
                Returns an array of objects: the first object in the array is
                  an instance of an implementation of the requested algorithm
                  and type, and the second object in the array identifies the provider
                  of that implementation.
                  The &lt;code&gt;provName&lt;/code&gt; argument can be null, in which case all
                  configured providers will be searched in order of preference.                
            </javadoc>
            <method name="getImpl" type="Object[]" line="92">
                <params>
                    <param name="algName" type="String"/>
                    <param name="engineType" type="String"/>
                    <param name="provName" type="String"/>
                </params>
                <declaration name="service" type="Service" line="93"/>
                <scope line="94">
                    <declaration name="list" type="ProviderList" line="95"/>
                    <declaration name="prov" type="Provider" line="96"/>
                    <scope line="97"/>
                </scope>
                <scope line="102"/>
                <scope line="105"/>
            </method>
            <javadoc line="110">
                Returns an array of objects: the first object in the array is
                  an instance of an implementation of the requested algorithm
                  and type, and the second object in the array identifies the provider
                  of that implementation.
                  The &lt;code&gt;prov&lt;/code&gt; argument can be null, in which case all
                  configured providers will be searched in order of preference.                
            </javadoc>
            <method name="getImpl" type="Object[]" line="118">
                <params>
                    <param name="algName" type="String"/>
                    <param name="engineType" type="String"/>
                    <param name="prov" type="Provider"/>
                </params>
                <declaration name="service" type="Service" line="119"/>
                <scope line="120"/>
            </method>
            <method name="checkSuperclass" type="boolean" line="125">
                <params>
                    <param name="subclass" type="Class"/>
                    <param name="superclass" type="Class"/>
                </params>
                <scope line="127">
                    <scope line="129"/>
                </scope>
            </method>
            <method name="truncateArray" type="Object[]" line="135">
                <params>
                    <param name="oldArray" type="Object[]"/>
                    <param name="newArray" type="Object[]"/>
                </params>
                <scope line="136"/>
            </method>
        </class>
        <class name="SSLContextSpiWrapper" line="142">
            <extends class="SSLContextSpi"/>
            <declaration name="theSSLContext" type="javax.net.ssl.SSLContext" line="143"/>
            <method name="SSLContextSpiWrapper" type="constructor" line="144">
                <params>
                    <param name="algName" type="String"/>
                    <param name="prov" type="Provider"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="147">
                <params>
                    <param name="kma" type="KeyManager[]"/>
                    <param name="tma" type="TrustManager[]"/>
                    <param name="sr" type="SecureRandom"/>
                </params>
                <declaration name="dst" type="int" line="148"/>
                <declaration name="src" type="int" line="149"/>
                <declaration name="kmaw" type="javax.net.ssl.KeyManager[]" line="150"/>
                <declaration name="tmaw" type="javax.net.ssl.TrustManager[]" line="151"/>
                <scope line="152">
                    <scope line="154">
                        <scope line="155">
                            <scope line="156"/>
                        </scope>
                        <scope line="161"/>
                    </scope>
                    <scope line="167"/>
                </scope>
                <scope line="171"/>
                <scope line="174">
                    <scope line="176">
                        <scope line="177">
                            <scope line="178"/>
                        </scope>
                        <scope line="183"/>
                    </scope>
                    <scope line="189"/>
                </scope>
                <scope line="193"/>
            </method>
            <method name="engineGetSocketFactory" type="javax.net.ssl.SSLSocketFactory" line="198"/>
            <method name="engineGetServerSocketFactory" type="javax.net.ssl.SSLServerSocketFactory" line="201"/>
        </class>
        <class name="TrustManagerFactorySpiWrapper" line="205">
            <extends class="TrustManagerFactorySpi"/>
            <declaration name="theTrustManagerFactory" type="javax.net.ssl.TrustManagerFactory" line="206"/>
            <method name="TrustManagerFactorySpiWrapper" type="constructor" line="207">
                <params>
                    <param name="algName" type="String"/>
                    <param name="prov" type="Provider"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="210">
                <params>
                    <param name="ks" type="KeyStore"/>
                </params>
            </method>
            <method name="engineGetTrustManagers" type="TrustManager[]" line="213">
                <declaration name="dst" type="int" line="214"/>
                <declaration name="src" type="int" line="215"/>
                <declaration name="tma" type="javax.net.ssl.TrustManager[]" line="216"/>
                <declaration name="tmaw" type="TrustManager[]" line="217"/>
                <scope line="218">
                    <scope line="219">
                        <scope line="220"/>
                    </scope>
                    <scope line="225"/>
                </scope>
                <scope line="231"/>
            </method>
        </class>
        <class name="KeyManagerFactorySpiWrapper" line="237">
            <extends class="KeyManagerFactorySpi"/>
            <declaration name="theKeyManagerFactory" type="javax.net.ssl.KeyManagerFactory" line="238"/>
            <method name="KeyManagerFactorySpiWrapper" type="constructor" line="239">
                <params>
                    <param name="algName" type="String"/>
                    <param name="prov" type="Provider"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="242">
                <params>
                    <param name="ks" type="KeyStore"/>
                    <param name="password" type="char[]"/>
                </params>
            </method>
            <method name="engineGetKeyManagers" type="KeyManager[]" line="245">
                <declaration name="dst" type="int" line="246"/>
                <declaration name="src" type="int" line="247"/>
                <declaration name="kma" type="javax.net.ssl.KeyManager[]" line="248"/>
                <declaration name="kmaw" type="KeyManager[]" line="249"/>
                <scope line="250">
                    <scope line="251">
                        <scope line="252"/>
                    </scope>
                    <scope line="257"/>
                </scope>
                <scope line="263"/>
            </method>
        </class>
        <class name="X509KeyManagerJavaxWrapper" line="269">
            <implements interface="javax.net.ssl.X509KeyManager"/>
            <declaration name="theX509KeyManager" type="X509KeyManager" line="270"/>
            <method name="X509KeyManagerJavaxWrapper" type="constructor" line="271">
                <params>
                    <param name="obj" type="X509KeyManager"/>
                </params>
            </method>
            <method name="getClientAliases" type="String[]" line="274">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="chooseClientAlias" type="String" line="277">
                <params>
                    <param name="keyTypes" type="String[]"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
                <declaration name="retval" type="String" line="278"/>
                <scope line="279"/>
                <scope line="282"/>
            </method>
            <method name="chooseEngineClientAlias" type="String" line="287">
                <params>
                    <param name="keyTypes" type="String[]"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="engine" type="javax.net.ssl.SSLEngine"/>
                </params>
                <declaration name="retval" type="String" line="288"/>
                <scope line="289"/>
                <scope line="292"/>
            </method>
            <method name="getServerAliases" type="String[]" line="297">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="chooseServerAlias" type="String" line="300">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="socket" type="Socket"/>
                </params>
                <scope line="301"/>
            </method>
            <method name="chooseEngineServerAlias" type="String" line="306">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                    <param name="engine" type="javax.net.ssl.SSLEngine"/>
                </params>
                <scope line="307"/>
            </method>
            <method name="getCertificateChain" type="java.security.cert.X509Certificate[]" line="312">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <method name="getPrivateKey" type="PrivateKey" line="315">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
        </class>
        <class name="X509TrustManagerJavaxWrapper" line="319">
            <implements interface="javax.net.ssl.X509TrustManager"/>
            <declaration name="theX509TrustManager" type="X509TrustManager" line="320"/>
            <method name="X509TrustManagerJavaxWrapper" type="constructor" line="321">
                <params>
                    <param name="obj" type="X509TrustManager"/>
                </params>
            </method>
            <method name="checkClientTrusted" type="void" line="324">
                <params>
                    <param name="chain" type="java.security.cert.X509Certificate[]"/>
                    <param name="authType" type="String"/>
                </params>
                <scope line="325"/>
            </method>
            <method name="checkServerTrusted" type="void" line="329">
                <params>
                    <param name="chain" type="java.security.cert.X509Certificate[]"/>
                    <param name="authType" type="String"/>
                </params>
                <scope line="330"/>
            </method>
            <method name="getAcceptedIssuers" type="java.security.cert.X509Certificate[]" line="334"/>
        </class>
        <class name="X509KeyManagerComSunWrapper" line="338">
            <implements interface="X509KeyManager"/>
            <declaration name="theX509KeyManager" type="javax.net.ssl.X509KeyManager" line="339"/>
            <method name="X509KeyManagerComSunWrapper" type="constructor" line="340">
                <params>
                    <param name="obj" type="javax.net.ssl.X509KeyManager"/>
                </params>
            </method>
            <method name="getClientAliases" type="String[]" line="343">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="chooseClientAlias" type="String" line="346">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
                <declaration name="keyTypes" type="String[]" line="347"/>
            </method>
            <method name="getServerAliases" type="String[]" line="350">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="chooseServerAlias" type="String" line="353">
                <params>
                    <param name="keyType" type="String"/>
                    <param name="issuers" type="Principal[]"/>
                </params>
            </method>
            <method name="getCertificateChain" type="java.security.cert.X509Certificate[]" line="356">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <method name="getPrivateKey" type="PrivateKey" line="359">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
        </class>
        <class name="X509TrustManagerComSunWrapper" line="363">
            <implements interface="X509TrustManager"/>
            <declaration name="theX509TrustManager" type="javax.net.ssl.X509TrustManager" line="364"/>
            <method name="X509TrustManagerComSunWrapper" type="constructor" line="365">
                <params>
                    <param name="obj" type="javax.net.ssl.X509TrustManager"/>
                </params>
            </method>
            <method name="isClientTrusted" type="boolean" line="368">
                <params>
                    <param name="chain" type="java.security.cert.X509Certificate[]"/>
                </params>
                <scope line="369"/>
                <scope line="373"/>
            </method>
            <method name="isServerTrusted" type="boolean" line="377">
                <params>
                    <param name="chain" type="java.security.cert.X509Certificate[]"/>
                </params>
                <scope line="378"/>
                <scope line="382"/>
            </method>
            <method name="getAcceptedIssuers" type="java.security.cert.X509Certificate[]" line="386"/>
        </class>
    </source>