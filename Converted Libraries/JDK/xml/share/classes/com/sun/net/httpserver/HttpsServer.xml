<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.net.httpserver">
        <import package="java.net"/>
        <import package="java.io"/>
        <import package="java.nio"/>
        <import package="java.security"/>
        <import package="java.nio.channels"/>
        <import package="java.util"/>
        <import package="java.util.concurrent"/>
        <import package="javax.net.ssl"/>
        <import package="com.sun.net.httpserver.spi"/>
        <class name="HttpsServer" line="11">
            <extends class="HttpServer"/>
            <javadoc line="11">
                This class is an extension of {@link HttpServer} which provides
                  support for HTTPS. &lt;p&gt;
                  A HttpsServer must have an associated {@link HttpsConfigurator} object
                  which is used to establish the SSL configuration for the SSL connections.
                  &lt;p&gt;
                  All other configuration is the same as for HttpServer.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <javadoc line="21">
                                
            </javadoc>
            <method name="HttpsServer" type="constructor" line="23"/>
            <javadoc line="25">
                creates a HttpsServer instance which is initially not bound to any local address/port.
                  The HttpsServer is acquired from the currently installed {@link HttpServerProvider}The server must be bound using {@link #bind(InetSocketAddress,int)} before it can be used.
                  The server must also have a HttpsConfigurator established with {@link #setHttpsConfigurator(HttpsConfigurator)}                
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="create" type="HttpsServer" line="31"/>
            <javadoc line="34">
                Create a &lt;code&gt;HttpsServer&lt;/code&gt; instance which will bind to the
                  specified {@link java.net.InetSocketAddress} (IP address and port number)
                  A maximum backlog can also be specified. This is the maximum number of
                  queued incoming connections to allow on the listening socket.
                  Queued TCP connections exceeding this limit may be rejected by the TCP implementation.
                  The HttpsServer is acquired from the currently installed {@link HttpServerProvider}The server must have a HttpsConfigurator established with {@link #setHttpsConfigurator(HttpsConfigurator)}                
                <param>
                    addr the address to listen on, if <code>null</code> then bind() must be called
                      to set the address                    
                </param>
                <param>
                    backlog the socket backlog. If this value is less than or equal to zero,
                      then a system default value is used.                    
                </param>
                <throws>
                    BindException if the server cannot bind to the requested address,
                      or if the server is already bound.                    
                </throws>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="create" type="HttpsServer" line="49">
                <params>
                    <param name="addr" type="InetSocketAddress"/>
                    <param name="backlog" type="int"/>
                </params>
                <declaration name="provider" type="HttpServerProvider" line="50"/>
            </method>
            <method name="setHttpsConfigurator" type="void" line="53"/>
            <javadoc line="53">
                Sets this server&apos;s {@link HttpsConfigurator} object.                
                <param>
                    config the HttpsConfigurator to set                    
                </param>
                <throws>
                    NullPointerException if config is null.                    
                </throws>
            </javadoc>
            <method name="getHttpsConfigurator" type="HttpsConfigurator" line="59"/>
            <javadoc line="59">
                Gets this server&apos;s {@link HttpsConfigurator} object, if it has been set.                
                <return>
                    the HttpsConfigurator for this server, or <code>null</code> if not set.                    
                </return>
            </javadoc>
        </class>
    </source>