<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <import package="java.util.logging.Level"/>
        <import package="java.util.Vector"/>
        <import package="java.net.InetAddress"/>
        <import package="com.sun.jmx.defaults.JmxProperties.SNMP_LOGGER"/>
        <class name="SnmpMessage" line="6">
            <extends class="SnmpMsg"/>
            <implements interface="SnmpDefinitions"/>
            <javadoc line="6">
                Is a partially decoded representation of an SNMP packet.
                  &lt;P&gt;
                  You will not normally need to use this class unless you decide to
                  implement your own {@link com.sun.jmx.snmp.SnmpPduFactory SnmpPduFactory} object.
                  &lt;P&gt;
                  The &lt;CODE&gt;SnmpMessage&lt;/CODE&gt; class is directly mapped onto the
                  &lt;CODE&gt;Message&lt;/CODE&gt; syntax defined in RFC1157 and RFC1902.
                  &lt;BLOCKQUOTE&gt;
                  &lt;PRE&gt;
                  Message ::= SEQUENCE {
                  version       INTEGER { version(1) }, -- for SNMPv2
                  community     OCTET STRING,           -- community name
                  data          ANY                     -- an SNMPv2 PDU
                  }
                  &lt;/PRE&gt;
                  &lt;/BLOCKQUOTE&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <see>
                    SnmpPduFactory                    
                </see>
                <see>
                    SnmpPduPacket                    
                </see>
            </javadoc>
            <declaration name="community" type="byte[]" line="29"/>
            <javadoc line="29">
                Community name.                
            </javadoc>
            <javadoc line="33">
                Encodes this message and puts the result in the specified byte array.
                  For internal use only.                
                <param>
                    outputBytes An array to receive the resulting encoding.                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException If the result does not fit
                      into the specified array.                    
                </exception>
            </javadoc>
            <method name="encodeMessage" type="int" line="40">
                <params>
                    <param name="outputBytes" type="byte[]"/>
                </params>
                <declaration name="encodingLength" type="int" line="41"/>
                <scope line="43">
                    <declaration name="benc" type="BerEncoder" line="44"/>
                </scope>
                <scope line="52"/>
            </method>
            <javadoc line="57">
                Returns the associated request ID.                
                <param>
                    inputBytes The flat message.                    
                </param>
                <return>
                    The request ID.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getRequestId" type="int" line="63">
                <params>
                    <param name="inputBytes" type="byte[]"/>
                </params>
                <declaration name="requestId" type="int" line="64"/>
                <declaration name="bdec" type="BerDecoder" line="65"/>
                <declaration name="bdec2" type="BerDecoder" line="66"/>
                <declaration name="any" type="byte[]" line="67"/>
                <scope line="68">
                    <declaration name="type" type="int" line="75"/>
                </scope>
                <scope line="79"/>
                <scope line="82"/>
                <scope line="85"/>
                <scope line="87"/>
                <scope line="90"/>
            </method>
            <javadoc line="94">
                Decodes the specified bytes and initializes this message.
                  For internal use only.                
                <param>
                    inputBytes The bytes to be decoded.                    
                </param>
                <exception>
                    SnmpStatusException If the specified bytes are not a valid encoding.                    
                </exception>
            </javadoc>
            <method name="decodeMessage" type="void" line="100">
                <params>
                    <param name="inputBytes" type="byte[]"/>
                    <param name="byteCount" type="int"/>
                </params>
                <scope line="101">
                    <declaration name="bdec" type="BerDecoder" line="102"/>
                </scope>
                <scope line="110"/>
            </method>
            <javadoc line="114">
                Initializes this message with the specified &lt;CODE&gt;pdu&lt;/CODE&gt;.
                  &lt;P&gt;
                  This method initializes the data field with an array of
                  &lt;CODE&gt;maxDataLength&lt;/CODE&gt; bytes. It encodes the &lt;CODE&gt;pdu&lt;/CODE&gt;.
                  The resulting encoding is stored in the data field
                  and the length of the encoding is stored in &lt;CODE&gt;dataLength&lt;/CODE&gt;.
                  &lt;p&gt;
                  If the encoding length exceeds &lt;CODE&gt;maxDataLength&lt;/CODE&gt;,
                  the method throws an exception.                
                <param>
                    pdu The PDU to be encoded.                    
                </param>
                <param>
                    maxDataLength The maximum length permitted for the data field.                    
                </param>
                <exception>
                    SnmpStatusException If the specified &lt;CODE&gt;pdu&lt;/CODE&gt; is not valid.                    
                </exception>
                <exception>
                    SnmpTooBigException If the resulting encoding does not fit
                      into &lt;CODE&gt;maxDataLength&lt;/CODE&gt; bytes.                    
                </exception>
                <exception>
                    ArrayIndexOutOfBoundsException If the encoding exceeds &lt;CODE&gt;maxDataLength&lt;/CODE&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="encodeSnmpPdu" type="void" line="132">
                <params>
                    <param name="pdu" type="SnmpPdu"/>
                    <param name="maxDataLength" type="int"/>
                </params>
                <declaration name="pdupacket" type="SnmpPduPacket" line="133"/>
                <scope line="139">
                    <declaration name="benc" type="BerEncoder" line="140"/>
                    <declaration name="reqPdu" type="SnmpPduRequest" line="151"/>
                    <declaration name="bulkPdu" type="SnmpPduBulk" line="157"/>
                    <declaration name="trapPdu" type="SnmpPduTrap" line="163"/>
                </scope>
                <scope line="177"/>
            </method>
            <javadoc line="181">
                Gets the PDU encoded in this message.
                  &lt;P&gt;
                  This method decodes the data field and returns the resulting PDU.                
                <return>
                    The resulting PDU.                    
                </return>
                <exception>
                    SnmpStatusException If the encoding is not valid.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="decodeSnmpPdu" type="SnmpPdu" line="189">
                <declaration name="pdu" type="SnmpPduPacket" line="190"/>
                <declaration name="bdec" type="BerDecoder" line="191"/>
                <scope line="192">
                    <declaration name="type" type="int" line="193"/>
                    <declaration name="reqPdu" type="SnmpPduRequest" line="203"/>
                    <declaration name="bulkPdu" type="SnmpPduBulk" line="210"/>
                    <declaration name="trapPdu" type="SnmpPduTrap" line="217"/>
                    <declaration name="b" type="byte[]" line="219"/>
                </scope>
                <scope line="234">
                    <scope line="235"/>
                </scope>
                <scope line="240">
                    <scope line="241"/>
                </scope>
            </method>
            <javadoc line="252">
                Dumps this message in a string.                
                <return>
                    The string containing the dump.                    
                </return>
            </javadoc>
            <method name="printMessage" type="String" line="256">
                <declaration name="sb" type="StringBuffer" line="257"/>
                <scope line="258"/>
                <scope line="261"/>
            </method>
        </class>
    </source>