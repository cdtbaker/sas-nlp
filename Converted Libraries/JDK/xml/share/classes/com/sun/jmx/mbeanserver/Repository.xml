<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="com.sun.jmx.defaults.ServiceName"/>
        <import package="com.sun.jmx.defaults.JmxProperties.MBEANSERVER_LOGGER"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.concurrent.locks.ReentrantReadWriteLock"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="javax.management.DynamicMBean"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.QueryExp"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <class name="Repository" line="47">
            <comment line="76">
                Private fields --------------------------------------------&gt;                
            </comment>
            <comment line="107">
                Private fields &lt;=============================================                
            </comment>
            <comment line="109">
                Private methods ---------------------------------------------&gt;                
            </comment>
            <comment line="111">
                                
            </comment>
            <comment line="308">
                Private methods &lt;=============================================                
            </comment>
            <comment line="310">
                Protected methods ---------------------------------------------&gt;                
            </comment>
            <comment line="312">
                Protected methods &lt;=============================================                
            </comment>
            <comment line="314">
                Public methods ---------------------------------------------&gt;                
            </comment>
            <comment line="678">
                Public methods &lt;=============================================                
            </comment>
            <javadoc line="47">
                This repository does not support persistency.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <interface name="RegistrationContext">
                <javadoc line="54">
                    An interface that allows the caller to get some control
                      over the registration.                    
                    <see>
                        #addMBean                        
                    </see>
                    <see>
                        #remove                        
                    </see>
                </javadoc>
                <method name="registering" type="void" line="61"/>
                <javadoc line="61">
                    Called by {@link #addMBean}.
                      Can throw a RuntimeOperationsException to cancel the
                      registration.                    
                </javadoc>
                <method name="unregistered" type="void" line="68"/>
                <javadoc line="68">
                    Called by {@link #remove}.
                      Any exception thrown by this method will be ignored.                    
                </javadoc>
            </interface>
            <declaration name="domainTb" type="Map&lt;String,Map&lt;String,NamedObject&gt;&gt;" line="77"/>
            <javadoc line="77">
                The structure for storing the objects is very basic.
                  A Hashtable is used for storing the different domains
                  For each domain, a hashtable contains the instances with
                  canonical key property list string as key and named object
                  aggregated from given object name and mbean instance as value.                
            </javadoc>
            <declaration name="nbElements" type="int" line="86"/>
            <javadoc line="86">
                Number of elements contained in the Repository                
            </javadoc>
            <declaration name="domain" type="String" line="91"/>
            <javadoc line="91">
                Domain name of the server the repository is attached to.
                  It is quicker to store the information in the repository rather
                  than querying the framework each time the info is required.                
            </javadoc>
            <declaration name="lock" type="ReentrantReadWriteLock" line="98"/>
            <javadoc line="98">
                We use a global reentrant read write lock to protect the repository.
                  This seems safer and more efficient: we are using Maps of Maps,
                  Guaranteing consistency while using Concurent objects at each level
                  may be more difficult.                
            </javadoc>
            <class name="ObjectNamePattern" line="111">
                <declaration name="keys" type="String[]" line="112"/>
                <declaration name="values" type="String[]" line="113"/>
                <declaration name="properties" type="String" line="114"/>
                <declaration name="isPropertyListPattern" type="boolean" line="115"/>
                <declaration name="isPropertyValuePattern" type="boolean" line="116"/>
                <declaration name="pattern" type="ObjectName" line="118"/>
                <javadoc line="118">
                    The ObjectName pattern against which ObjectNames are matched.                    
                </javadoc>
                <javadoc line="123">
                    Builds a new ObjectNamePattern object from an ObjectName pattern.                    
                    <param>
                        pattern The ObjectName pattern under examination.                        
                    </param>
                </javadoc>
                <method name="ObjectNamePattern" type="constructor" line="127">
                    <params>
                        <param name="pattern" type="ObjectName"/>
                    </params>
                </method>
                <javadoc line="135">
                    Builds a new ObjectNamePattern object from an ObjectName pattern
                      constituents.                    
                    <param>
                        propertyListPattern pattern.isPropertyListPattern().                        
                    </param>
                    <param>
                        propertyValuePattern pattern.isPropertyValuePattern().                        
                    </param>
                    <param>
                        canonicalProps pattern.getCanonicalKeyPropertyListString().                        
                    </param>
                    <param>
                        keyPropertyList pattern.getKeyPropertyList().                        
                    </param>
                    <param>
                        pattern The ObjectName pattern under examination.                        
                    </param>
                </javadoc>
                <method name="ObjectNamePattern" type="constructor" line="148">
                    <params>
                        <param name="propertyListPattern" type="boolean"/>
                        <param name="propertyValuePattern" type="boolean"/>
                        <param name="canonicalProps" type="String"/>
                        <param name="keyPropertyList" type="Map<String,String>"/>
                        <param name="pattern" type="ObjectName"/>
                    </params>
                    <declaration name="len" type="int" line="152"/>
                    <declaration name="i" type="int" line="155"/>
                    <scope line="156"/>
                </method>
                <javadoc line="164">
                    Return true if the given ObjectName matches the ObjectName pattern
                      for which this object has been built.
                      WARNING: domain name is not considered here because it is supposed
                      not to be wildcard when called. PropertyList is also
                      supposed not to be zero-length.                    
                    <param>
                        name The ObjectName we want to match against the pattern.                        
                    </param>
                    <return>
                        true if &lt;code&gt;name&lt;/code&gt; matches the pattern.                        
                    </return>
                </javadoc>
                <method name="matchKeys" type="boolean" line="173">
                    <params>
                        <param name="name" type="ObjectName"/>
                    </params>
                    <comment line="175">
                        If key property value pattern but not key property list
                         pattern, then the number of key properties must be equal                        
                    </comment>
                    <comment line="183">
                        If key property value pattern or key property list pattern,
                         then every property inside pattern should exist in name                        
                    </comment>
                    <comment line="188">
                        Find value in given object name for key at current
                         index in receiver                        
                    </comment>
                    <comment line="192">
                        Did we find a value for this key ?                        
                    </comment>
                    <comment line="195">
                        If this property is ok (same key, same value), go to next                        
                    </comment>
                    <comment line="199">
                        wildmatch key property values
                         values[i] is the pattern;
                         v is the string                        
                    </comment>
                    <comment line="213">
                        If no pattern, then canonical names must be equal                        
                    </comment>
                    <scope line="185">
                        <scope line="186">
                            <declaration name="v" type="String" line="190"/>
                            <scope line="197"/>
                        </scope>
                    </scope>
                    <declaration name="p1" type="String" line="214"/>
                    <declaration name="p2" type="String" line="215"/>
                </method>
            </class>
            <javadoc line="220">
                Add all the matching objects from the given hashtable in the
                  result set for the given ObjectNamePattern
                  Do not check whether the domains match (only check for matching
                  key property lists - see &lt;i&gt;matchKeys()&lt;/i&gt;)                
            </javadoc>
            <method name="addAllMatching" type="void" line="228">
                <params>
                    <param name="moiTb" type="Map<String,NamedObject>"/>
                    <param name="result" type="Set<NamedObject>"/>
                    <param name="pattern" type="ObjectNamePattern"/>
                </params>
                <comment line="233">
                    if all couples (property, value) are contained                    
                </comment>
                <scope line="229">
                    <scope line="230">
                        <declaration name="on" type="ObjectName" line="231"/>
                    </scope>
                </scope>
            </method>
            <method name="addNewDomMoi" type="void" line="241">
                <params>
                    <param name="object" type="DynamicMBean"/>
                    <param name="dom" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="context" type="RegistrationContext"/>
                </params>
                <declaration name="moiTb" type="Map&lt;String,NamedObject&gt;" line="242"/>
                <declaration name="key" type="String" line="244"/>
            </method>
            <method name="registering" type="void" line="250">
                <params>
                    <param name="context" type="RegistrationContext"/>
                </params>
                <scope line="252"/>
                <scope line="254"/>
                <scope line="256"/>
            </method>
            <method name="unregistering" type="void" line="261">
                <params>
                    <param name="context" type="RegistrationContext"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="267">
                    shouldn&apos;t come here...                    
                </comment>
                <scope line="263"/>
                <scope line="265"/>
            </method>
            <method name="addMoiToTb" type="void" line="277">
                <params>
                    <param name="object" type="DynamicMBean"/>
                    <param name="name" type="ObjectName"/>
                    <param name="key" type="String"/>
                    <param name="moiTb" type="Map<String,NamedObject>"/>
                    <param name="context" type="RegistrationContext"/>
                </params>
            </method>
            <javadoc line="282">
                Retrieves the named object contained in repository
                  from the given objectname.                
            </javadoc>
            <method name="retrieveNamedObject" type="NamedObject" line="286">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="289">
                    No patterns inside reposit                    
                </comment>
                <comment line="292">
                    Extract the domain name.                    
                </comment>
                <comment line="295">
                    Default domain case                    
                </comment>
                <comment line="302">
                    No domain containing registered object names                    
                </comment>
                <declaration name="dom" type="String" line="292"/>
                <scope line="295"/>
                <declaration name="moiTb" type="Map&lt;String,NamedObject&gt;" line="299"/>
                <scope line="300"/>
            </method>
            <javadoc line="315">
                Construct a new repository with the given default domain.                
            </javadoc>
            <method name="Repository" type="constructor" line="318">
                <params>
                    <param name="domain" type="String"/>
                </params>
            </method>
            <javadoc line="322">
                Construct a new repository with the given default domain.                
            </javadoc>
            <method name="Repository" type="constructor" line="325">
                <params>
                    <param name="domain" type="String"/>
                    <param name="fairLock" type="boolean"/>
                </params>
                <comment line="332">
                    we use == domain later on...                    
                </comment>
                <comment line="336">
                    Creates a new hashtable for the default domain                    
                </comment>
            </method>
            <javadoc line="339">
                Returns the list of domains in which any MBean is currently
                  registered.                
            </javadoc>
            <method name="getDomains" type="String[]" line="344">
                <comment line="350">
                    Temporary list                    
                </comment>
                <comment line="354">
                    Skip domains that are in the table but have no
                     MBean registered in them
                     in particular the default domain may be like this                    
                </comment>
                <comment line="365">
                    Make an array from result.                    
                </comment>
                <declaration name="result" type="List&lt;String&gt;" line="347"/>
                <scope line="348">
                    <scope line="352">
                        <declaration name="t" type="Map&lt;String,NamedObject&gt;" line="356"/>
                    </scope>
                </scope>
                <scope line="360"/>
            </method>
            <javadoc line="368">
                Stores an MBean associated with its object name in the repository.                
                <param>
                    object  MBean to be stored in the repository.                    
                </param>
                <param>
                    name    MBean object name.                    
                </param>
                <param>
                    context A registration context. If non null, the repository
                      will call {@link RegistrationContext#registering()context.registering()} from within the repository
                      lock, when it has determined that the {@code object}can be stored in the repository with that {@code name}.
                      If {@link RegistrationContext#registering()context.registering()} throws an exception, the
                      operation is abandonned, the MBean is not added to the
                      repository, and a {@link RuntimeOperationsException}is thrown.                    
                </param>
            </javadoc>
            <method name="addMBean" type="void" line="386">
                <params>
                    <param name="object" type="DynamicMBean"/>
                    <param name="name" type="ObjectName"/>
                    <param name="context" type="RegistrationContext"/>
                </params>
                <comment line="394">
                    Extract the domain name.                    
                </comment>
                <comment line="398">
                    Set domain to default if domain is empty and not already set                    
                </comment>
                <comment line="402">
                    Do we have default domain ?                    
                </comment>
                <comment line="403">
                    ES: OK (dom &amp; domain are interned)                    
                </comment>
                <comment line="410">
                    Validate name for an object                    
                </comment>
                <comment line="419">
                    Domain cannot be JMImplementation if entry does not exist                    
                </comment>
                <comment line="428">
                    If domain does not already exist, add it to the hash table                    
                </comment>
                <comment line="434">
                    Add instance if not already present                    
                </comment>
                <scope line="388"/>
                <declaration name="dom" type="String" line="394"/>
                <declaration name="to_default_domain" type="boolean" line="395"/>
                <scope line="402"/>
                <scope line="405"/>
                <scope line="410"/>
                <scope line="417">
                    <scope line="421"/>
                    <declaration name="moiTb" type="Map&lt;String,NamedObject&gt;" line="428"/>
                    <scope line="429"/>
                    <scope line="432">
                        <declaration name="cstr" type="String" line="434"/>
                        <declaration name="elmt" type="NamedObject" line="435"/>
                        <scope line="436"/>
                        <scope line="438"/>
                    </scope>
                </scope>
                <scope line="444"/>
            </method>
            <javadoc line="449">
                Checks whether an MBean of the name specified is already stored in
                  the repository.                
                <param>
                    name name of the MBean to find.                    
                </param>
                <return>
                    true if the MBean is stored in the repository,
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="458">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="459"/>
                <scope line="464"/>
                <scope line="466"/>
            </method>
            <javadoc line="471">
                Retrieves the MBean of the name specified from the repository. The
                  object name must match exactly.                
                <param>
                    name name of the MBean to retrieve.                    
                </param>
                <return>
                    The retrieved MBean if it is contained in the repository,
                      null otherwise.                    
                </return>
            </javadoc>
            <method name="retrieve" type="DynamicMBean" line="480">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="487">
                    Calls internal retrieve method to get the named object                    
                </comment>
                <scope line="481"/>
                <scope line="488">
                    <declaration name="no" type="NamedObject" line="489"/>
                </scope>
                <scope line="492"/>
            </method>
            <javadoc line="497">
                Selects and retrieves the list of MBeans whose names match the specified
                  object name pattern and which match the specified query expression
                  (optionally).                
                <param>
                    pattern The name of the MBean(s) to retrieve - may be a specific
                      object or a name pattern allowing multiple MBeans to be selected.                    
                </param>
                <param>
                    query query expression to apply when selecting objects - this
                      parameter will be ignored when the Repository Service does not
                      support filtering.                    
                </param>
                <return>
                    The list of MBeans selected. There may be zero, one or many
                      MBeans returned in the set.                    
                </return>
            </javadoc>
            <method name="query" type="Set<NamedObject>" line="511">
                <params>
                    <param name="pattern" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <comment line="516">
                    The following filter cases are considered:
                     null, &quot;&quot;, &quot;*:*&quot; : names in all domains
                     &quot;:*&quot;, &quot;:[key=value],*&quot; : names in defaultDomain
                     &quot;domain:*&quot;, &quot;domain:[key=value],*&quot; : names in the specified domain                    
                </comment>
                <comment line="521">
                    Surely one of the most frequent cases ... query on the whole world                    
                </comment>
                <comment line="532">
                    If pattern is not a pattern, retrieve this mbean !                    
                </comment>
                <comment line="539">
                    All names in all domains                    
                </comment>
                <comment line="554">
                    All names in default domain                    
                </comment>
                <comment line="574">
                    Pattern matching in the domain name (*, ?)                    
                </comment>
                <declaration name="result" type="Set&lt;NamedObject&gt;" line="513"/>
                <declaration name="name" type="ObjectName" line="521"/>
                <scope line="529">
                    <scope line="532">
                        <declaration name="no" type="NamedObject" line="533"/>
                    </scope>
                    <scope line="539">
                        <scope line="540"/>
                    </scope>
                    <declaration name="canonical_key_property_list_string" type="String" line="546"/>
                    <declaration name="allNames" type="boolean" line="548"/>
                    <declaration name="namePattern" type="ObjectNamePattern" line="550"/>
                    <scope line="554">
                        <declaration name="moiTb" type="Map&lt;String,NamedObject&gt;" line="555"/>
                    </scope>
                    <scope line="563">
                        <declaration name="moiTb" type="Map&lt;String,NamedObject&gt;" line="564"/>
                    </scope>
                    <declaration name="dom2Match" type="String" line="574"/>
                    <scope line="575">
                        <scope line="576">
                            <declaration name="moiTb" type="Map&lt;String,NamedObject&gt;" line="577"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="585"/>
            </method>
            <javadoc line="590">
                Removes an MBean from the repository.                
                <param>
                    name name of the MBean to remove.                    
                </param>
                <param>
                    context A registration context. If non null, the repository
                      will call {@link RegistrationContext#unregistered()context.unregistered()} from within the repository
                      lock, just after the mbean associated with{@code name} is removed from the repository.
                      If {@link RegistrationContext#unregistered()context.unregistered()} is not expected to throw any
                      exception. If it does, the exception is logged
                      and swallowed.                    
                </param>
                <exception>
                    InstanceNotFoundException The MBean does not exist in
                      the repository.                    
                </exception>
            </javadoc>
            <method name="remove" type="void" line="609">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="context" type="RegistrationContext"/>
                </params>
                <comment line="612">
                    Debugging stuff                    
                </comment>
                <comment line="618">
                    Extract domain name.                    
                </comment>
                <comment line="621">
                    Default domain case                    
                </comment>
                <comment line="626">
                    Find the domain subtable                    
                </comment>
                <comment line="632">
                    Remove the corresponding element                    
                </comment>
                <comment line="637">
                    We removed it !                    
                </comment>
                <comment line="640">
                    No more object for this domain, we remove this domain hashtable                    
                </comment>
                <comment line="644">
                    set a new default domain table (always present)
                     need to reinstantiate a hashtable because of possible
                     big buckets array size inside table, never cleared,
                     thus the new !                    
                </comment>
                <comment line="648">
                    ES: OK dom and domain are interned.                    
                </comment>
                <scope line="612"/>
                <declaration name="dom" type="String" line="618"/>
                <scope line="624">
                    <declaration name="moiTb" type="Map&lt;String,NamedObject&gt;" line="626"/>
                    <scope line="627"/>
                    <scope line="632"/>
                    <scope line="640"/>
                </scope>
                <scope line="653"/>
            </method>
            <javadoc line="658">
                Gets the number of MBeans stored in the repository.                
                <return>
                    Number of MBeans.                    
                </return>
            </javadoc>
            <method name="getCount" type="Integer" line="663"/>
            <javadoc line="667">
                Gets the name of the domain currently used by default in the
                  repository.                
                <return>
                    A string giving the name of the default domain name.                    
                </return>
            </javadoc>
            <method name="getDefaultDomain" type="String" line="673"/>
        </class>
    </source>