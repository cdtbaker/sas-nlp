<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.agent">
        <import package="java.io.Serializable"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpValue"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibOid"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibNode"/>
        <class name="SnmpMibGroup" line="12">
            <extends class="SnmpMibOid"/>
            <implements interface="Serializable"/>
            <javadoc line="12">
                Represents a node in an SNMP MIB which corresponds to a group.
                  This class allows subnodes to be registered below a group, providing
                  support for nested groups. The subnodes are registered at run time
                  when registering the nested groups in the global MIB OID tree.
                  &lt;P&gt;
                  This class is used by the class generated by &lt;CODE&gt;mibgen&lt;/CODE&gt;.
                  You should not need to use this class directly.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="subgroups" type="Hashtable&amp;lt;Long,Long&amp;gt;" line="24"/>
            <method name="isTable" type="boolean" line="25"/>
            <javadoc line="25">
                Tells whether the given arc identifies a table in this group.                
                <param>
                    arc An OID arc.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if `arc&apos; leads to a table.                    
                </return>
            </javadoc>
            <method name="isVariable" type="boolean" line="31"/>
            <javadoc line="31">
                Tells whether the given arc identifies a variable (scalar object) in
                  this group.                
                <param>
                    arc An OID arc.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if `arc&apos; leads to a variable.                    
                </return>
            </javadoc>
            <method name="isReadable" type="boolean" line="38"/>
            <javadoc line="38">
                Tells whether the given arc identifies a readable scalar object in
                  this group.                
                <param>
                    arc An OID arc.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if `arc&apos; leads to a readable variable.                    
                </return>
            </javadoc>
            <method name="getTable" type="SnmpMibTable" line="45"/>
            <javadoc line="45">
                Gets the table identified by the given `arc&apos;.                
                <param>
                    arc An OID arc.                    
                </param>
                <return>
                    The &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt; identified by `arc&apos;, or
                      &lt;CODE&gt;null&lt;/CODE&gt; if `arc&apos; does not identify any table.                    
                </return>
            </javadoc>
            <javadoc line="52">
                Checks whether the given OID arc identifies a variable (scalar
                  object).                
                <exception>
                    If the given `arc&apos; does not identify any variable in this
                      group, throws an SnmpStatusException.                    
                </exception>
            </javadoc>
            <method name="validateVarId" type="void" line="58">
                <params>
                    <param name="arc" type="long"/>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <javadoc line="61">
                Tell whether the given OID arc identifies a sub-tree
                  leading to a nested SNMP sub-group. This method is used internally.
                  You shouldn&apos;t need to call it directly.                
                <param>
                    arc An OID arc.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the given OID arc identifies a subtree
                      leading to a nested SNMP sub-group.                    
                </return>
            </javadoc>
            <method name="isNestedArc" type="boolean" line="69">
                <params>
                    <param name="arc" type="long"/>
                </params>
                <declaration name="obj" type="Object" line="71"/>
            </method>
            <method name="get" type="void" line="74"/>
            <javadoc line="74">
                Generic handling of the &lt;CODE&gt;get&lt;/CODE&gt; operation.
                  &lt;p&gt;The actual implementation of this method will be generated
                  by mibgen. Usually, this implementation only delegates the
                  job to some other provided runtime class, which knows how to
                  access the MBean. The current toolkit thus provides two
                  implementations:
                  &lt;ul&gt;&lt;li&gt;The standard implementation will directly access the
                  MBean through a java reference,&lt;/li&gt;
                  &lt;li&gt;The generic implementation will access the MBean through
                  the MBean server.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Both implementations rely upon specific - and distinct, set of
                  mibgen generated methods.
                  &lt;p&gt; You can override this method if you need to implement some
                  specific policies for minimizing the accesses made to some remote
                  underlying resources.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException An error occurred while accessing
                      the MIB node.                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="98"/>
            <javadoc line="98">
                Generic handling of the &lt;CODE&gt;set&lt;/CODE&gt; operation.
                  &lt;p&gt;The actual implementation of this method will be generated
                  by mibgen. Usually, this implementation only delegates the
                  job to some other provided runtime class, which knows how to
                  access the MBean. The current toolkit thus provides two
                  implementations:
                  &lt;ul&gt;&lt;li&gt;The standard implementation will directly access the
                  MBean through a java reference,&lt;/li&gt;
                  &lt;li&gt;The generic implementation will access the MBean through
                  the MBean server.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Both implementations rely upon specific - and distinct, set of
                  mibgen generated methods.
                  &lt;p&gt; You can override this method if you need to implement some
                  specific policies for minimizing the accesses made to some remote
                  underlying resources.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException An error occurred while accessing
                      the MIB node.                    
                </exception>
            </javadoc>
            <method name="check" type="void" line="122"/>
            <javadoc line="122">
                Generic handling of the &lt;CODE&gt;check&lt;/CODE&gt; operation.
                  &lt;p&gt;The actual implementation of this method will be generated
                  by mibgen. Usually, this implementation only delegates the
                  job to some other provided runtime class, which knows how to
                  access the MBean. The current toolkit thus provides two
                  implementations:
                  &lt;ul&gt;&lt;li&gt;The standard implementation will directly access the
                  MBean through a java reference,&lt;/li&gt;
                  &lt;li&gt;The generic implementation will access the MBean through
                  the MBean server.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Both implementations rely upon specific - and distinct, set of
                  mibgen generated methods.
                  &lt;p&gt; You can override this method if you need to implement some
                  specific policies for minimizing the accesses made to some remote
                  underlying resources, or if you need to implement some consistency
                  checks between the different values provided in the varbind list.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException An error occurred while accessing
                      the MIB node.                    
                </exception>
            </javadoc>
            <method name="getRootOid" type="void" line="147">
                <params>
                    <param name="result" type="Vector"/>
                </params>
            </method>
            <javadoc line="150">
                Register an OID arc that identifies a sub-tree
                  leading to a nested SNMP sub-group. This method is used internally.
                  You shouldn&apos;t ever call it directly.                
                <param>
                    arc An OID arc.                    
                </param>
            </javadoc>
            <method name="registerNestedArc" type="void" line="156">
                <params>
                    <param name="arc" type="long"/>
                </params>
                <declaration name="obj" type="Long" line="157"/>
            </method>
            <javadoc line="161">
                Register an OID arc that identifies a scalar object or a table.
                  This method is used internally. You shouldn&apos;t ever call it directly.                
                <param>
                    arc An OID arc.                    
                </param>
            </javadoc>
            <method name="registerObject" type="void" line="166">
                <params>
                    <param name="arc" type="long"/>
                </params>
                <declaration name="oid" type="long[]" line="167"/>
            </method>
            <javadoc line="171">
                Register a child node of this node in the OID tree.
                  This method is used internally. You shouldn&apos;t ever call it directly.                
                <param>
                    oid The oid of the node being registered.                    
                </param>
                <param>
                    cursor The position reached in the oid.                    
                </param>
                <param>
                    node The node being registered.                    
                </param>
            </javadoc>
            <method name="registerNode" type="void" line="178">
                <params>
                    <param name="oid" type="long[]"/>
                    <param name="cursor" type="int"/>
                    <param name="node" type="SnmpMibNode"/>
                </params>
            </method>
            <method name="findHandlingNode" type="void" line="184">
                <params>
                    <param name="varbind" type="SnmpVarBind"/>
                    <param name="oid" type="long[]"/>
                    <param name="depth" type="int"/>
                    <param name="handlers" type="SnmpRequestTree"/>
                </params>
                <declaration name="length" type="int" line="185"/>
                <declaration name="node" type="SnmpMibNode" line="186"/>
                <declaration name="data" type="Object" line="188"/>
                <scope line="189"/>
                <declaration name="arc" type="long" line="192"/>
                <scope line="193"/>
                <scope line="197">
                    <declaration name="table" type="SnmpMibTable" line="198"/>
                </scope>
                <scope line="201"/>
            </method>
            <method name="findNextHandlingNode" type="long[]" line="209">
                <params>
                    <param name="varbind" type="SnmpVarBind"/>
                    <param name="oid" type="long[]"/>
                    <param name="pos" type="int"/>
                    <param name="depth" type="int"/>
                    <param name="handlers" type="SnmpRequestTree"/>
                    <param name="checker" type="AcmChecker"/>
                </params>
                <declaration name="length" type="int" line="210"/>
                <declaration name="node" type="SnmpMibNode" line="211"/>
                <declaration name="data" type="Object" line="213"/>
                <declaration name="pduVersion" type="int" line="214"/>
                <declaration name="arc" type="long" line="216"/>
                <declaration name="result" type="long[]" line="217"/>
                <scope line="218">
                    <scope line="219">
                        <declaration name="table" type="SnmpMibTable" line="220"/>
                        <scope line="222"/>
                        <scope line="225"/>
                        <scope line="228"/>
                    </scope>
                    <scope line="234">
                        <scope line="235">
                            <scope line="240"/>
                            <scope line="243"/>
                            <scope line="246"/>
                        </scope>
                    </scope>
                    <scope line="253">
                        <declaration name="child" type="SnmpMibNode" line="254"/>
                        <scope line="255">
                            <scope line="257"/>
                            <scope line="262"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="269">
                    <declaration name="newOid" type="long[]" line="270"/>
                </scope>
            </method>
        </class>
    </source>