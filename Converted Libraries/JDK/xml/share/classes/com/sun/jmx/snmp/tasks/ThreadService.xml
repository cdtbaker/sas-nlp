<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.tasks">
        <import package="java.util.ArrayList"/>
        <import package="com.sun.jmx.snmp.tasks.Task"/>
        <import package="com.sun.jmx.snmp.tasks.TaskServer"/>
        <class name="ThreadService" line="32">
            <comment line="54">
                public methods
                 --------------                
            </comment>
            <comment line="124">
                to terminate                
            </comment>
            <comment line="150">
                private classes
                 ---------------                
            </comment>
            <comment line="153">
                A thread used to execute jobs                
            </comment>
            <comment line="209">
                private methods                
            </comment>
            <comment line="229">
                protected or private variables
                 ------------------------------                
            </comment>
            <implements interface="TaskServer"/>
            <javadoc line="32">
                This class implements a {@link com.sun.jmx.snmp.tasks.TaskServer} over
                  a thread pool.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <method name="ThreadService" type="constructor" line="40">
                <params>
                    <param name="threadNumber" type="int"/>
                </params>
                <scope line="41"/>
            </method>
            <javadoc line="56">
                Submit a task to be executed.
                  Once a task is submitted, it is guaranteed that either{@link com.sun.jmx.snmp.tasks.Task#run() task.run()} or{@link com.sun.jmx.snmp.tasks.Task#cancel() task.cancel()} will be called.
                  This implementation of TaskServer uses a thread pool to execute
                  the submitted tasks.                
                <param>
                    task The task to be executed.                    
                </param>
                <exception>
                    IllegalArgumentException if the submitted task is null.                    
                </exception>
            </javadoc>
            <method name="submitTask" type="void" line="66">
                <params>
                    <param name="task" type="Task"/>
                </params>
            </method>
            <javadoc line="70">
                Submit a task to be executed.
                  This implementation of TaskServer uses a thread pool to execute
                  the submitted tasks.                
                <param>
                    task The task to be executed.                    
                </param>
                <exception>
                    IllegalArgumentException if the submitted task is null.                    
                </exception>
            </javadoc>
            <method name="submitTask" type="void" line="77">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <scope line="80"/>
                <scope line="84"/>
            </method>
            <method name="removeTask" type="Runnable" line="93">
                <params>
                    <param name="task" type="Runnable"/>
                </params>
                <declaration name="removed" type="Runnable" line="96"/>
                <scope line="97">
                    <declaration name="lg" type="int" line="98"/>
                    <scope line="99"/>
                </scope>
            </method>
            <method name="removeAll" type="void" line="108">
                <declaration name="jobs" type="Object[]" line="111"/>
                <scope line="112"/>
                <declaration name="len" type="int" line="116"/>
                <scope line="117">
                    <declaration name="o" type="Object" line="118"/>
                </scope>
            </method>
            <method name="terminate" type="void" line="124">
                <comment line="143">
                    TODO                    
                </comment>
                <scope line="126"/>
                <scope line="132"/>
                <scope line="138">
                    <scope line="139"/>
                    <scope line="141"/>
                </scope>
            </method>
            <class name="ExecutorThread" line="154">
                <extends class="Thread"/>
                <method name="ExecutorThread" type="constructor" line="155">
                    <comment line="160">
                        init                        
                    </comment>
                </method>
                <method name="run" type="void" line="166">
                    <comment line="183">
                        terminated ?                        
                    </comment>
                    <comment line="194">
                        TODO                        
                    </comment>
                    <comment line="201">
                        re-init                        
                    </comment>
                    <scope line="168">
                        <declaration name="job" type="Runnable" line="169"/>
                        <scope line="171">
                            <scope line="172">
                                <scope line="174"/>
                            </scope>
                            <scope line="178">
                                <scope line="179"/>
                                <scope line="181"/>
                                <scope line="183"/>
                            </scope>
                        </scope>
                        <scope line="188">
                            <scope line="189"/>
                            <scope line="192"/>
                            <scope line="195"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <method name="stateCheck" type="void" line="209">
                <scope line="210"/>
            </method>
            <method name="createThread" type="void" line="215">
                <scope line="216">
                    <scope line="217">
                        <scope line="218">
                            <declaration name="et" type="ExecutorThread" line="219"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="jobList" type="ArrayList&lt;Runnable&gt;" line="230"/>
            <declaration name="threadList" type="ExecutorThread[]" line="232"/>
            <declaration name="minThreads" type="int" line="233"/>
            <declaration name="currThreds" type="int" line="234"/>
            <declaration name="idle" type="int" line="235"/>
            <declaration name="terminated" type="boolean" line="237"/>
            <declaration name="priority" type="int" line="238"/>
            <declaration name="threadGroup" type="ThreadGroup" line="239"/>
            <declaration name="cloader" type="ClassLoader" line="240"/>
            <declaration name="counter" type="long" line="242"/>
            <declaration name="addedJobs" type="int" line="244"/>
            <declaration name="doneJobs" type="int" line="245"/>
        </class>
    </source>