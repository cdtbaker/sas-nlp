<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.remote.internal">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="com.sun.jmx.remote.security.NotificationAccessController"/>
        <import package="com.sun.jmx.remote.util.ClassLogger"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <import package="java.io.IOException"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.ListenerNotFoundException"/>
        <import package="javax.management.MBeanPermission"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanServerDelegate"/>
        <import package="javax.management.MBeanServerNotification"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationBroadcaster"/>
        <import package="javax.management.NotificationFilter"/>
        <import package="javax.management.ObjectInstance"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.remote.NotificationResult"/>
        <import package="javax.management.remote.TargetedNotification"/>
        <import package="javax.management.MalformedObjectNameException"/>
        <import package="javax.security.auth.Subject"/>
        <class name="ServerNotifForwarder" line="60">
            <comment line="219">
                This is the object that will apply our filtering to candidate
                 notifications.  First of all, if there are no listeners for the
                 ObjectName that the notification is coming from, we go no further.
                 Then, for each listener, we must apply the corresponding filter (if any)
                 and ignore the listener if the filter rejects.  Finally, we apply
                 some access checks which may also reject the listener.
                
                 A given notification may trigger several listeners on the same MBean,
                 which is why listenerMap is a Map&lt;ObjectName, Set&lt;IdAndFilter&gt;&gt; and
                 why we add the found notifications to a supplied List rather than
                 just returning a boolean.                
            </comment>
            <comment line="290">
                The standard RMI connector client will register a listener on the MBeanServerDelegate
                 in order to be told when MBeans are unregistered.  We snoop on fetched notifications
                 so that we can know too, and remove the corresponding entry from the listenerMap.
                 See 6957378.                
            </comment>
            <comment line="340">
                ----------------
                 PRIVATE METHODS
                ----------------                
            </comment>
            <comment line="466">
                ------------------
                 PRIVATE VARIABLES
                ------------------                
            </comment>
            <method name="ServerNotifForwarder" type="constructor" line="66">
                <params>
                    <param name="mbeanServer" type="MBeanServer"/>
                    <param name="env" type="Map<String,?>"/>
                    <param name="notifBuffer" type="NotificationBuffer"/>
                    <param name="connectionId" type="String"/>
                </params>
            </method>
            <method name="addNotificationListener" type="Integer" line="80">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="filter" type="NotificationFilter"/>
                </params>
                <comment line="90">
                    Explicitly check MBeanPermission for addNotificationListener                    
                </comment>
                <comment line="117">
                    6238731: set the default domain if no domain is set.                    
                </comment>
                <comment line="124">
                    impossible, but...                    
                </comment>
                <comment line="134">
                    Tread carefully because if set.size() == 1 it may be the
                     Collections.singleton we make here, which is unmodifiable.                    
                </comment>
                <scope line="82"/>
                <scope line="92"/>
                <scope line="96">
                    <anonymous_class line="99">
                        <method name="run" type="Boolean" line="100"/>
                    </anonymous_class>
                    <declaration name="instanceOf" type="boolean" line="97"/>
                    <scope line="104"/>
                </scope>
                <scope line="110"/>
                <declaration name="id" type="Integer" line="114"/>
                <declaration name="nn" type="ObjectName" line="117"/>
                <scope line="118">
                    <scope line="119"/>
                    <scope line="122">
                        <declaration name="ioe" type="IOException" line="124"/>
                    </scope>
                </scope>
                <scope line="130">
                    <declaration name="idaf" type="IdAndFilter" line="131"/>
                    <declaration name="set" type="Set&lt;IdAndFilter&gt;" line="132"/>
                    <scope line="137"/>
                </scope>
            </method>
            <method name="removeNotificationListener" type="void" line="150">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listenerIDs" type="Integer[]"/>
                </params>
                <comment line="160">
                    Explicitly check MBeanPermission for removeNotificationListener                    
                </comment>
                <comment line="173">
                    Give back the first exception                    
                </comment>
                <scope line="152"/>
                <scope line="162"/>
                <declaration name="re" type="Exception" line="167"/>
                <scope line="168">
                    <scope line="169"/>
                    <scope line="171">
                        <scope line="174"/>
                    </scope>
                </scope>
                <scope line="179"/>
            </method>
            <method name="removeNotificationListener" type="void" line="188">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listenerID" type="Integer"/>
                </params>
                <comment line="206">
                    Tread carefully because if set.size() == 1 it may be a
                     Collections.singleton, which is unmodifiable.                    
                </comment>
                <scope line="190"/>
                <scope line="197">
                    <scope line="198"/>
                </scope>
                <scope line="204">
                    <declaration name="set" type="Set&lt;IdAndFilter&gt;" line="207"/>
                    <declaration name="idaf" type="IdAndFilter" line="208"/>
                </scope>
            </method>
            <declaration name="bufferFilter" type="NotificationBufferFilter" line="230"/>
            <anonymous_class line="231">
                <method name="apply" type="void" line="233">
                    <params>
                        <param name="targetedNotifs" type="List<TargetedNotification>"/>
                        <param name="source" type="ObjectName"/>
                        <param name="notif" type="Notification"/>
                    </params>
                    <comment line="235">
                        We proceed in two stages here, to avoid holding the listenerMap
                         lock while invoking the filters (which are user code).                        
                    </comment>
                    <comment line="247">
                        We don&apos;t synchronize on targetedNotifs, because it is a local
                         variable of our caller and no other thread can see it.                        
                    </comment>
                    <declaration name="candidates" type="IdAndFilter[]" line="236"/>
                    <scope line="237">
                        <declaration name="set" type="Set&lt;IdAndFilter&gt;" line="238"/>
                        <scope line="239"/>
                    </scope>
                    <scope line="248">
                        <declaration name="nf" type="NotificationFilter" line="249"/>
                        <scope line="250">
                            <declaration name="tn" type="TargetedNotification" line="252"/>
                        </scope>
                    </scope>
                </method>
            </anonymous_class>
            <method name="fetchNotifs" type="NotificationResult" line="263">
                <params>
                    <param name="startSequenceNumber" type="long"/>
                    <param name="timeout" type="long"/>
                    <param name="maxNotifications" type="int"/>
                </params>
                <scope line="264"/>
                <declaration name="nr" type="NotificationResult" line="271"/>
                <declaration name="t" type="long" line="272"/>
                <scope line="273"/>
                <scope line="278"/>
                <scope line="282"/>
            </method>
            <method name="snoopOnUnregister" type="void" line="293">
                <params>
                    <param name="nr" type="NotificationResult"/>
                </params>
                <comment line="303">
                    This is a notification from the MBeanServerDelegate.                    
                </comment>
                <declaration name="delegateSet" type="Set&lt;IdAndFilter&gt;" line="294"/>
                <scope line="295"/>
                <scope line="298">
                    <declaration name="id" type="Integer" line="299"/>
                    <scope line="300">
                        <scope line="301">
                            <declaration name="n" type="Notification" line="303"/>
                            <scope line="305">
                                <declaration name="mbsn" type="MBeanServerNotification" line="306"/>
                                <declaration name="gone" type="ObjectName" line="307"/>
                                <scope line="308"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="terminate" type="void" line="317">
                <scope line="318"/>
                <scope line="322">
                    <scope line="323"/>
                    <scope line="329"/>
                </scope>
                <scope line="334"/>
            </method>
            <method name="getSubject" type="Subject" line="343"/>
            <method name="checkState" type="void" line="347">
                <scope line="348">
                    <scope line="349"/>
                </scope>
            </method>
            <method name="getListenerID" type="Integer" line="355">
                <scope line="356"/>
            </method>
            <javadoc line="361">
                Explicitly check the MBeanPermission for
                  the current access control context.                
            </javadoc>
            <method name="checkMBeanPermission" type="void" line="367">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="actions" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="368"/>
                <scope line="369">
                    <declaration name="acc" type="AccessControlContext" line="370"/>
                    <declaration name="oi" type="ObjectInstance" line="371"/>
                    <scope line="372">
                        <anonymous_class line="374">
                            <method name="run" type="ObjectInstance" line="376"/>
                        </anonymous_class>
                    </scope>
                    <scope line="380"/>
                    <declaration name="classname" type="String" line="383"/>
                    <declaration name="perm" type="MBeanPermission" line="384"/>
                </scope>
            </method>
            <javadoc line="393">
                Check if the caller has the right to get the following notifications.                
            </javadoc>
            <method name="allowNotificationEmission" type="boolean" line="397">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="tn" type="TargetedNotification"/>
                </params>
                <scope line="398">
                    <scope line="399"/>
                    <scope line="402"/>
                </scope>
                <scope line="407">
                    <scope line="408"/>
                </scope>
                <scope line="414">
                    <scope line="415"/>
                </scope>
            </method>
            <javadoc line="424">
                Iterate until we extract the real exception
                  from a stack of PrivilegedActionExceptions.                
            </javadoc>
            <method name="extractException" type="Exception" line="428">
                <params>
                    <param name="e" type="Exception"/>
                </params>
                <scope line="429"/>
            </method>
            <class name="IdAndFilter" line="435">
                <declaration name="id" type="Integer" line="436"/>
                <declaration name="filter" type="NotificationFilter" line="437"/>
                <method name="IdAndFilter" type="constructor" line="439">
                    <params>
                        <param name="id" type="Integer"/>
                        <param name="filter" type="NotificationFilter"/>
                    </params>
                </method>
                <method name="getId" type="Integer" line="444"/>
                <method name="getFilter" type="NotificationFilter" line="448"/>
                <method name="hashCode" type="int" line="453"/>
                <method name="equals" type="boolean" line="458">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
            </class>
            <declaration name="mbeanServer" type="MBeanServer" line="469"/>
            <declaration name="connectionId" type="String" line="471"/>
            <declaration name="connectionTimeout" type="long" line="473"/>
            <declaration name="listenerCounter" type="int" line="475"/>
            <declaration name="listenerCounterLock" type="int[]" line="476"/>
            <declaration name="notifBuffer" type="NotificationBuffer" line="478"/>
            <declaration name="listenerMap" type="Map&lt;ObjectName,Set&lt;IdAndFilter&gt;&gt;" line="479"/>
            <declaration name="terminated" type="boolean" line="482"/>
            <declaration name="terminationLock" type="int[]" line="483"/>
            <declaration name="broadcasterClass" type="String" line="485"/>
            <declaration name="checkNotificationEmission" type="boolean" line="488"/>
            <declaration name="notificationAccessController" type="NotificationAccessController" line="490"/>
            <declaration name="logger" type="ClassLogger" line="492"/>
        </class>
    </source>