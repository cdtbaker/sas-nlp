<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <import package="java.net.InetAddress"/>
        <import package="java.io.Serializable"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="com.sun.jmx.snmp.internal.SnmpTools"/>
        <class name="SnmpEngineId" line="36">
            <implements interface="Serializable"/>
            <javadoc line="36">
                This class is handling an &lt;CODE&gt;SnmpEngineId&lt;/CODE&gt; data. It copes with binary as well as &lt;CODE&gt;String&lt;/CODE&gt; representation of an engine Id. A string format engine is an hex string starting with 0x.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <declaration name="engineId" type="byte[]" line="45"/>
            <declaration name="hexString" type="String" line="46"/>
            <declaration name="humanString" type="String" line="47"/>
            <javadoc line="48">
                New &lt;CODE&gt;SnmpEngineId&lt;/CODE&gt; with an hex string value. Can handle engine Id format &amp;lt;host&amp;gt:&amp;lt;port&amp;gt.                
                <param>
                    hexString Hexa string.                    
                </param>
            </javadoc>
            <method name="SnmpEngineId" type="constructor" line="52">
                <params>
                    <param name="hexString" type="String"/>
                </params>
            </method>
            <javadoc line="56">
                New &lt;CODE&gt;SnmpEngineId&lt;/CODE&gt; with a binary value. You can use &lt;CODE&gt; SnmpTools &lt;/CODE&gt; to convert from hex string to binary format.                
                <param>
                    bin Binary value                    
                </param>
            </javadoc>
            <method name="SnmpEngineId" type="constructor" line="60">
                <params>
                    <param name="bin" type="byte[]"/>
                </params>
            </method>
            <javadoc line="65">
                If a string of the format &amp;lt;address&amp;gt;:&amp;lt;port&amp;gt;:&amp;lt;IANA number&amp;gt; has been provided at creation time, this string is returned.                
                <return>
                    The Id as a readable string or null if not provided.                    
                </return>
            </javadoc>
            <method name="getReadableId" type="String" line="69"/>
            <javadoc line="73">
                Returns a string format engine Id.                
                <return>
                    String format value.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="77"/>
            <javadoc line="80">
                Returns a binary engine Id.                
                <return>
                    Binary value.                    
                </return>
            </javadoc>
            <method name="getBytes" type="byte[]" line="84"/>
            <javadoc line="88">
                In order to store the string used to create the engineId.                
            </javadoc>
            <method name="setStringValue" type="void" line="91">
                <params>
                    <param name="val" type="String"/>
                </params>
            </method>
            <method name="validateId" type="void" line="95">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="arr" type="byte[]" line="96"/>
            </method>
            <method name="validateId" type="void" line="100">
                <params>
                    <param name="arr" type="byte[]"/>
                </params>
                <comment line="106">
                    octet strings with very first bit = 0 and length != 12 octets                    
                </comment>
                <declaration name="zeroedArrays" type="byte[]" line="109"/>
                <declaration name="FFArrays" type="byte[]" line="111"/>
            </method>
            <javadoc line="117">
                Generates an engine Id based on the passed array.                
                <return>
                    The created engine Id or null if given arr is null or its length == 0;                    
                </return>
                <exception>
                    IllegalArgumentException when:
                      &lt;ul&gt;
                      &lt;li&gt;octet string lower than 5 bytes.&lt;/li&gt;
                      &lt;li&gt;octet string greater than 32 bytes.&lt;/li&gt;
                      &lt;li&gt;octet string = all zeros.&lt;/li&gt;
                      &lt;li&gt;octet string = all &apos;ff&apos;H.&lt;/li&gt;
                      &lt;li&gt;octet strings with very first bit = 0 and length != 12 octets&lt;/li&gt;
                      &lt;/ul&gt;                    
                </exception>
            </javadoc>
            <method name="createEngineId" type="SnmpEngineId" line="129">
                <params>
                    <param name="arr" type="byte[]"/>
                </params>
            </method>
            <javadoc line="135">
                Generates an engine Id that is unique to the host the agent is running on. The engine Id unicity is system time based. The creation algorithm uses the SUN Microsystems IANA number (42).                
                <return>
                    The generated engine Id.                    
                </return>
            </javadoc>
            <method name="createEngineId" type="SnmpEngineId" line="139">
                <declaration name="address" type="byte[]" line="140"/>
                <declaration name="engineid" type="byte[]" line="141"/>
                <declaration name="iana" type="int" line="142"/>
                <declaration name="mask" type="long" line="143"/>
                <declaration name="time" type="long" line="144"/>
            </method>
            <javadoc line="165">
                Translates an engine Id in an SnmpOid format. This is useful when dealing with USM MIB indexes.
                  The oid format is : &lt;engine Id length&gt;.&lt;engine Id binary octet1&gt;....&lt;engine Id binary octetn - 1&gt;.&lt;engine Id binary octetn&gt;
                  Eg: &quot;0x8000002a05819dcb6e00001f96&quot; ==&gt; 13.128.0.0.42.5.129.157.203.110.0.0.31.150                
                <return>
                    SnmpOid The oid.                    
                </return>
            </javadoc>
            <method name="toOid" type="SnmpOid" line="172">
                <declaration name="oid" type="long[]" line="173"/>
            </method>
            <javadoc line="180">
                &lt;P&gt;Generates a unique engine Id. Hexadecimal strings as well as a textual description are supported. The textual format is as follow:
                  &lt;BR&gt;  &amp;lt;address&amp;gt;:&amp;lt;port&amp;gt;:&amp;lt;IANA number&amp;gt;&lt;/P&gt;
                  &lt;P&gt;The allowed formats :&lt;/P&gt;
                  &lt;ul&gt;
                  &lt;li&gt; &amp;lt;address&amp;gt;:&amp;lt;port&amp;gt;:&amp;lt;IANA number&amp;gt
                  &lt;BR&gt;   All these parameters are used to generate the Id. WARNING, this method is not compliant with IPv6 address format. Use { @link com.sun.jmx.snmp.SnmpEngineId#createEngineId(java.lang.String,java.lang.String) } instead.&lt;/li&gt;
                  &lt;li&gt; &amp;lt;address&amp;gt;:&amp;lt;port&amp;gt;
                  &lt;BR&gt;   The IANA number will be the SUN Microsystems one (42). &lt;/li&gt;
                  &lt;li&gt; address
                  &lt;BR&gt;   The port 161 will be used to generate the Id. IANA number will be the SUN Microsystems one (42). &lt;/li&gt;
                  &lt;li&gt; :port
                  &lt;BR&gt;   The host to use is localhost. IANA number will be the SUN Microsystems one (42). &lt;/li&gt;
                  &lt;li&gt; ::&amp;lt;IANA number&amp;gt &amp;nbsp;&amp;nbsp;&amp;nbsp;
                  &lt;BR&gt;   The port 161 and localhost will be used to generate the Id. &lt;/li&gt;
                  &lt;li&gt; :&amp;lt;port&amp;gt;:&amp;lt;IANA number&amp;gt;
                  &lt;BR&gt;   The host to use is localhost. &lt;/li&gt;
                  &lt;li&gt; &amp;lt;address&amp;gt;::&amp;lt;IANA number&amp;gt
                  &lt;BR&gt;   The port 161 will be used to generate the Id. &lt;/li&gt;
                  &lt;li&gt; :: &amp;nbsp;&amp;nbsp;&amp;nbsp;
                  &lt;BR&gt;   The port 161, localhost and the SUN Microsystems IANA number will be used to generate the Id. &lt;/li&gt;
                  &lt;/ul&gt;                
                <exception>
                    UnknownHostException if the host name contained in the textual format is unknown.                    
                </exception>
                <exception>
                    IllegalArgumentException when :
                      &lt;ul&gt;
                      &lt;li&gt;octet string lower than 5 bytes.&lt;/li&gt;
                      &lt;li&gt;octet string greater than 32 bytes.&lt;/li&gt;
                      &lt;li&gt;octet string = all zeros.&lt;/li&gt;
                      &lt;li&gt;octet string = all &apos;ff&apos;H.&lt;/li&gt;
                      &lt;li&gt;octet strings with very first bit = 0 and length != 12 octets&lt;/li&gt;
                      &lt;li&gt;An IPv6 address format is used in conjonction with the &quot;:&quot; separator&lt;/li&gt;
                      &lt;/ul&gt;                    
                </exception>
                <param>
                    str The string to parse.                    
                </param>
                <return>
                    The generated engine Id or null if the passed string is null.                    
                </return>
            </javadoc>
            <method name="createEngineId" type="SnmpEngineId" line="217">
                <params>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="221">
                Idem { @link
                  com.sun.jmx.snmp.SnmpEngineId#createEngineId(java.lang.String) }
                  with the ability to provide your own separator. This allows IPv6
                  address format handling (eg: providing @ as separator).                
                <param>
                    str The string to parse.                    
                </param>
                <param>
                    separator the separator to use. If null is provided, the default
                      separator &quot;:&quot; is used.                    
                </param>
                <return>
                    The generated engine Id or null if the passed string is null.                    
                </return>
                <exception>
                    UnknownHostException if the host name contained in the
                      textual format is unknown.                    
                </exception>
                <exception>
                    IllegalArgumentException when :
                      &lt;ul&gt;
                      &lt;li&gt;octet string lower than 5 bytes.&lt;/li&gt;
                      &lt;li&gt;octet string greater than 32 bytes.&lt;/li&gt;
                      &lt;li&gt;octet string = all zeros.&lt;/li&gt;
                      &lt;li&gt;octet string = all &apos;ff&apos;H.&lt;/li&gt;
                      &lt;li&gt;octet strings with very first bit = 0 and length != 12 octets&lt;/li&gt;
                      &lt;li&gt;An IPv6 address format is used in conjonction with the &quot;:&quot;
                      separator&lt;/li&gt;
                      &lt;/ul&gt;                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="createEngineId" type="SnmpEngineId" line="245">
                <params>
                    <param name="str" type="String"/>
                    <param name="separator" type="String"/>
                </params>
                <comment line="266">
                    Deal with address                    
                </comment>
                <comment line="277">
                    No need to go further, no port.                    
                </comment>
                <comment line="288">
                    Deal with port                    
                </comment>
                <comment line="292">
                    No need to go further, no port.                    
                </comment>
                <comment line="305">
                    No need to go further, no iana.                    
                </comment>
                <comment line="314">
                    Deal with iana                    
                </comment>
                <comment line="318">
                    No need to go further, no port.                    
                </comment>
                <scope line="248"/>
                <declaration name="token" type="StringTokenizer" line="253"/>
                <declaration name="address" type="String" line="257"/>
                <declaration name="port" type="String" line="258"/>
                <declaration name="iana" type="String" line="259"/>
                <declaration name="objPort" type="int" line="260"/>
                <declaration name="objIana" type="int" line="261"/>
                <declaration name="objAddress" type="InetAddress" line="262"/>
                <declaration name="eng" type="SnmpEngineId" line="263"/>
                <scope line="264">
                    <scope line="266"/>
                    <scope line="268"/>
                    <scope line="271">
                        <scope line="273"/>
                        <scope line="275"/>
                    </scope>
                    <scope line="288"/>
                    <scope line="290"/>
                    <scope line="299">
                        <scope line="301"/>
                        <scope line="303"/>
                    </scope>
                    <scope line="314"/>
                    <scope line="316"/>
                </scope>
                <scope line="335"/>
            </method>
            <javadoc line="341">
                Generates a unique engine Id. The engine Id unicity is based on
                  the host IP address and port. The IP address used is the
                  localhost one. The creation algorithm uses the SUN Microsystems IANA
                  number (42).                
                <param>
                    port The TCP/IP port the SNMPv3 Adaptor Server is listening to.                    
                </param>
                <return>
                    The generated engine Id.                    
                </return>
                <exception>
                    UnknownHostException if the local host name
                      used to calculate the id is unknown.                    
                </exception>
            </javadoc>
            <method name="createEngineId" type="SnmpEngineId" line="352">
                <params>
                    <param name="port" type="int"/>
                </params>
                <declaration name="suniana" type="int" line="353"/>
                <declaration name="address" type="InetAddress" line="354"/>
            </method>
            <javadoc line="358">
                Generates a unique engine Id. The engine Id unicity is based on
                  the host IP address and port. The IP address used is the passed
                  one. The creation algorithm uses the SUN Microsystems IANA
                  number (42).                
                <param>
                    address The IP address the SNMPv3 Adaptor Server is listening to.                    
                </param>
                <param>
                    port The TCP/IP port the SNMPv3 Adaptor Server is listening to.                    
                </param>
                <return>
                    The generated engine Id.                    
                </return>
                <exception>
                    UnknownHostException. if the provided address is null.                    
                </exception>
            </javadoc>
            <method name="createEngineId" type="SnmpEngineId" line="369">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
                <declaration name="suniana" type="int" line="370"/>
            </method>
            <javadoc line="376">
                Generates a unique engine Id. The engine Id unicity is based on
                  the host IP address and port. The IP address is the localhost one.
                  The creation algorithm uses the passed IANA number.                
                <param>
                    port The TCP/IP port the SNMPv3 Adaptor Server is listening to.                    
                </param>
                <param>
                    iana Your enterprise IANA number.                    
                </param>
                <exception>
                    UnknownHostException if the local host name used to calculate the id is unknown.                    
                </exception>
                <return>
                    The generated engine Id.                    
                </return>
            </javadoc>
            <method name="createEngineId" type="SnmpEngineId" line="385">
                <params>
                    <param name="port" type="int"/>
                    <param name="iana" type="int"/>
                </params>
                <declaration name="address" type="InetAddress" line="386"/>
            </method>
            <javadoc line="391">
                Generates a unique engine Id. The engine Id unicity is based on the host IP address and port. The IP address is the passed one, it handles IPv4 and IPv6 hosts. The creation algorithm uses the passed IANA number.                
                <param>
                    addr The IP address the SNMPv3 Adaptor Server is listening to.                    
                </param>
                <param>
                    port The TCP/IP port the SNMPv3 Adaptor Server is listening to.                    
                </param>
                <param>
                    iana Your enterprise IANA number.                    
                </param>
                <return>
                    The generated engine Id.                    
                </return>
                <exception>
                    UnknownHostException if the provided &lt;CODE&gt;InetAddress &lt;/CODE&gt; is null.                    
                </exception>
            </javadoc>
            <method name="createEngineId" type="SnmpEngineId" line="401">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="port" type="int"/>
                    <param name="iana" type="int"/>
                </params>
                <declaration name="address" type="byte[]" line="403"/>
                <declaration name="engineid" type="byte[]" line="404"/>
                <scope line="419"/>
            </method>
            <javadoc line="431">
                Generates an engine Id based on an InetAddress. Handles IPv4 and IPv6 addresses. The creation algorithm uses the passed IANA number.                
                <param>
                    iana Your enterprise IANA number.                    
                </param>
                <param>
                    addr The IP address the SNMPv3 Adaptor Server is listening to.                    
                </param>
                <return>
                    The generated engine Id.                    
                </return>
                <since>
                    1.5                    
                </since>
                <exception>
                    UnknownHostException if the provided &lt;CODE&gt;InetAddress &lt;/CODE&gt; is null.                    
                </exception>
            </javadoc>
            <method name="createEngineId" type="SnmpEngineId" line="440">
                <params>
                    <param name="iana" type="int"/>
                    <param name="addr" type="InetAddress"/>
                </params>
                <declaration name="address" type="byte[]" line="442"/>
                <declaration name="engineid" type="byte[]" line="443"/>
                <scope line="456"/>
            </method>
            <javadoc line="463">
                Generates an engine Id based on an InetAddress. Handles IPv4 and IPv6
                  addresses. The creation algorithm uses the sun IANA number (42).                
                <param>
                    addr The IP address the SNMPv3 Adaptor Server is listening to.                    
                </param>
                <return>
                    The generated engine Id.                    
                </return>
                <since>
                    1.5                    
                </since>
                <exception>
                    UnknownHostException if the provided
                      &lt;CODE&gt;InetAddress&lt;/CODE&gt; is null.                    
                </exception>
            </javadoc>
            <method name="createEngineId" type="SnmpEngineId" line="472">
                <params>
                    <param name="addr" type="InetAddress"/>
                </params>
            </method>
            <javadoc line="477">
                Tests &lt;CODE&gt;SnmpEngineId&lt;/CODE&gt; instance equality. Two &lt;CODE&gt;SnmpEngineId&lt;/CODE&gt; are equal if they have the same value.                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the two &lt;CODE&gt;SnmpEngineId&lt;/CODE&gt; are equals, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="481">
                <params>
                    <param name="a" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="486"/>
        </class>
    </source>