<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.agent">
        <import package="com.sun.jmx.snmp.SnmpPduPacket"/>
        <import package="com.sun.jmx.snmp.SnmpPdu"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <interface name="SnmpUserDataFactory">
            <javadoc line="5">
                This interface is provided to enable fine customization of the SNMP
                  agent behaviour.
                  &lt;p&gt;You will not need to implement this interface except if your agent
                  needs extra customization requiring some contextual information.&lt;/p&gt;
                  &lt;p&gt;If an SnmpUserDataFactory is set on the SnmpAdaptorServer, then a new
                  object containing user-data will be allocated through this factory
                  for each incoming request. This object will be passed along to
                  the SnmpMibAgent within SnmpMibRequest objects. By default, no
                  SnmpUserDataFactory is set on the SnmpAdaptorServer, and the contextual
                  object passed to SnmpMibAgent is null.&lt;/p&gt;
                  &lt;p&gt;You can use this feature to obtain on contextual information
                  (such as community string etc...) or to implement a caching
                  mechanism, or for whatever purpose might be required by your specific
                  agent implementation.&lt;/p&gt;
                  &lt;p&gt;The sequence &lt;code&gt;allocateUserData() / releaseUserData()&lt;/code&gt; can
                  also be used to implement a caching mechanism:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;allocateUserData()&lt;/code&gt; could be used to allocate
                  some cache space,&lt;/li&gt;
                  &lt;li&gt;and &lt;code&gt;releaseUserData()&lt;/code&gt; could be used to flush it.&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <see>
                    com.sun.jmx.snmp.agent.SnmpMibRequest                    
                </see>
                <see>
                    com.sun.jmx.snmp.agent.SnmpMibAgent                    
                </see>
                <see>
                    com.sun.jmx.snmp.daemon.SnmpAdaptorServer                    
                </see>
            </javadoc>
            <method name="allocateUserData" type="Object" line="34"/>
            <javadoc line="34">
                Called by the &lt;CODE&gt;SnmpAdaptorServer&lt;/CODE&gt; adaptor.
                  Allocate a contextual object containing some user data. This method
                  is called once for each incoming SNMP request. The scope
                  of this object will be the whole request. Since the request can be
                  handled in several threads, the user should make sure that this
                  object can be accessed in a thread-safe manner. The SNMP framework
                  will never access this object directly - it will simply pass
                  it to the &lt;code&gt;SnmpMibAgent&lt;/code&gt; within
                  &lt;code&gt;SnmpMibRequest&lt;/code&gt; objects - from where it can be retrieved
                  through the {@link com.sun.jmx.snmp.agent.SnmpMibRequest#getUserData() getUserData()} accessor.
                  &lt;code&gt;null&lt;/code&gt; is considered to be a valid return value.
                  This method is called just after the SnmpPduPacket has been
                  decoded.                
                <param>
                    requestPdu The SnmpPduPacket received from the SNMP manager.
                      <b>This parameter is owned by the SNMP framework and must be
                      considered as transient.</b> If you wish to keep some of its
                      content after this method returns (by storing it in the
                      returned object for instance) you should clone that
                      information.                    
                </param>
                <return>
                    A newly allocated user-data contextual object, or
                      <code>null</code>                    
                </return>
                <exception>
                    SnmpStatusException If an SnmpStatusException is thrown,
                      the request will be aborted.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="releaseUserData" type="void" line="61"/>
            <javadoc line="61">
                Called by the &lt;CODE&gt;SnmpAdaptorServer&lt;/CODE&gt; adaptor.
                  Release a previously allocated contextual object containing user-data.
                  This method is called just before the responsePdu is sent back to the
                  manager. It gives the user a chance to alter the responsePdu packet
                  before it is encoded, and to free any resources that might have
                  been allocated when creating the contextual object.                
                <param>
                    userData The contextual object being released.                    
                </param>
                <param>
                    responsePdu The SnmpPduPacket that will be sent back to the
                      SNMP manager.
                      <b>This parameter is owned by the SNMP framework and must be
                      considered as transient.</b> If you wish to keep some of its
                      content after this method returns you should clone that
                      information.                    
                </param>
                <exception>
                    SnmpStatusException If an SnmpStatusException is thrown,
                      the responsePdu is dropped and nothing is returned to
                      to the manager.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
        </interface>
    </source>