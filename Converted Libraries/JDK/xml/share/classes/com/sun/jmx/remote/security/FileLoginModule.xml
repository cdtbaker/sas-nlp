<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.remote.security">
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FilePermission"/>
        <import package="java.io.IOException"/>
        <import package="java.security.AccessControlException"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Map"/>
        <import package="java.util.Properties"/>
        <import package="javax.security.auth"/>
        <import package="javax.security.auth.callback"/>
        <import package="javax.security.auth.login"/>
        <import package="javax.security.auth.spi"/>
        <import package="javax.management.remote.JMXPrincipal"/>
        <import package="com.sun.jmx.remote.util.ClassLogger"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <import package="sun.management.jmxremote.ConnectorBootstrap"/>
        <class name="FileLoginModule" line="23">
            <implements interface="LoginModule"/>
            <javadoc line="23">
                This {@link LoginModule} performs file-based authentication.
                  &lt;p&gt; A supplied username and password is verified against the
                  corresponding user credentials stored in a designated password file.
                  If successful then a new {@link JMXPrincipal} is created with the
                  user&apos;s name and it is associated with the current {@link Subject}.
                  Such principals may be identified and granted management privileges in
                  the access control file for JMX remote management or in a Java security
                  policy.
                  &lt;p&gt; The password file comprises a list of key-value pairs as specified in{@link Properties}. The key represents a user&apos;s name and the value is its
                  associated cleartext password. By default, the following password file is
                  used:
                  &lt;pre&gt;
                  ${java.home}/lib/management/jmxremote.password
                  &lt;/pre&gt;
                  A different password file can be specified via the &lt;code&gt;passwordFile&lt;/code&gt;
                  configuration option.
                  &lt;p&gt; This module recognizes the following &lt;code&gt;Configuration&lt;/code&gt; options:
                  &lt;dl&gt;
                  &lt;dt&gt; &lt;code&gt;passwordFile&lt;/code&gt; &lt;/dt&gt;
                  &lt;dd&gt; the path to an alternative password file. It is used instead of
                  the default password file.&lt;/dd&gt;
                  &lt;dt&gt; &lt;code&gt;useFirstPass&lt;/code&gt; &lt;/dt&gt;
                  &lt;dd&gt; if &lt;code&gt;true&lt;/code&gt;, this module retrieves the username and password
                  from the module&apos;s shared state, using &quot;javax.security.auth.login.name&quot;
                  and &quot;javax.security.auth.login.password&quot; as the respective keys. The
                  retrieved values are used for authentication. If authentication fails,
                  no attempt for a retry is made, and the failure is reported back to
                  the calling application.&lt;/dd&gt;
                  &lt;dt&gt; &lt;code&gt;tryFirstPass&lt;/code&gt; &lt;/dt&gt;
                  &lt;dd&gt; if &lt;code&gt;true&lt;/code&gt;, this module retrieves the username and password
                  from the module&apos;s shared state, using &quot;javax.security.auth.login.name&quot;
                  and &quot;javax.security.auth.login.password&quot; as the respective keys.  The
                  retrieved values are used for authentication. If authentication fails,
                  the module uses the CallbackHandler to retrieve a new username and
                  password, and another attempt to authenticate is made. If the
                  authentication fails, the failure is reported back to the calling
                  application.&lt;/dd&gt;
                  &lt;dt&gt; &lt;code&gt;storePass&lt;/code&gt; &lt;/dt&gt;
                  &lt;dd&gt; if &lt;code&gt;true&lt;/code&gt;, this module stores the username and password
                  obtained from the CallbackHandler in the module&apos;s shared state, using
                  &quot;javax.security.auth.login.name&quot; and
                  &quot;javax.security.auth.login.password&quot; as the respective keys.  This is
                  not performed if existing values already exist for the username and
                  password in the shared state, or if authentication fails.&lt;/dd&gt;
                  &lt;dt&gt; &lt;code&gt;clearPass&lt;/code&gt; &lt;/dt&gt;
                  &lt;dd&gt; if &lt;code&gt;true&lt;/code&gt;, this module clears the username and password
                  stored in the module&apos;s shared state after both phases of authentication
                  (login and commit) have completed.&lt;/dd&gt;
                  &lt;/dl&gt;                
            </javadoc>
            <declaration name="DEFAULT_PASSWORD_FILE_NAME" type="String" line="75"/>
            <declaration name="USERNAME_KEY" type="String" line="76"/>
            <declaration name="PASSWORD_KEY" type="String" line="77"/>
            <declaration name="logger" type="ClassLogger" line="78"/>
            <declaration name="useFirstPass" type="boolean" line="79"/>
            <declaration name="tryFirstPass" type="boolean" line="80"/>
            <declaration name="storePass" type="boolean" line="81"/>
            <declaration name="clearPass" type="boolean" line="82"/>
            <declaration name="succeeded" type="boolean" line="83"/>
            <declaration name="commitSucceeded" type="boolean" line="84"/>
            <declaration name="username" type="String" line="85"/>
            <declaration name="password" type="char[]" line="86"/>
            <declaration name="user" type="JMXPrincipal" line="87"/>
            <declaration name="subject" type="Subject" line="88"/>
            <declaration name="callbackHandler" type="CallbackHandler" line="89"/>
            <declaration name="sharedState" type="Map&amp;lt;String,Object&amp;gt;" line="90"/>
            <declaration name="options" type="Map&amp;lt;String,?&amp;gt;" line="91"/>
            <declaration name="passwordFile" type="String" line="92"/>
            <declaration name="passwordFileDisplayName" type="String" line="93"/>
            <declaration name="userSuppliedPasswordFile" type="boolean" line="94"/>
            <declaration name="hasJavaHomePermission" type="boolean" line="95"/>
            <declaration name="userCredentials" type="Properties" line="96"/>
            <javadoc line="97">
                Initialize this &lt;code&gt;LoginModule&lt;/code&gt;.                
                <param>
                    subject the &lt;code&gt;Subject&lt;/code&gt; to be authenticated.                    
                </param>
                <param>
                    callbackHandler a &lt;code&gt;CallbackHandler&lt;/code&gt; to acquire the
                      user&apos;s name and password.                    
                </param>
                <param>
                    sharedState shared &lt;code&gt;LoginModule&lt;/code&gt; state.                    
                </param>
                <param>
                    options options specified in the login
                      &lt;code&gt;Configuration&lt;/code&gt; for this particular
                      &lt;code&gt;LoginModule&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="initialize" type="void" line="107">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="callbackHandler" type="CallbackHandler"/>
                    <param name="sharedState" type="Map&lt;String,?&gt;"/>
                    <param name="options" type="Map&lt;String,?&gt;"/>
                </params>
                <scope line="119">
                    <scope line="122"/>
                    <scope line="127"/>
                </scope>
            </method>
            <javadoc line="133">
                Begin user authentication (Authentication Phase 1).
                  &lt;p&gt; Acquire the user&apos;s name and password and verify them against
                  the corresponding credentials from the password file.                
                <return>
                    true always, since this &lt;code&gt;LoginModule&lt;/code&gt;
                      should not be ignored.                    
                </return>
                <exception>
                    FailedLoginException if the authentication fails.                    
                </exception>
                <exception>
                    LoginException if this &lt;code&gt;LoginModule&lt;/code&gt;
                      is unable to perform the authentication.                    
                </exception>
            </javadoc>
            <method name="login" type="boolean" line="143">
                <scope line="144"/>
                <scope line="147">
                    <declaration name="le" type="LoginException" line="148"/>
                </scope>
                <scope line="151"/>
                <scope line="154"/>
                <scope line="157">
                    <scope line="158">
                        <scope line="161"/>
                    </scope>
                    <scope line="166"/>
                </scope>
                <scope line="171">
                    <scope line="172">
                        <scope line="175"/>
                    </scope>
                    <scope line="180"/>
                </scope>
                <scope line="186"/>
                <scope line="189">
                    <scope line="192"/>
                </scope>
                <scope line="197"/>
            </method>
            <javadoc line="203">
                Complete user authentication (Authentication Phase 2).
                  &lt;p&gt; This method is called if the LoginContext&apos;s
                  overall authentication has succeeded
                  (all the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL
                  LoginModules have succeeded).
                  &lt;p&gt; If this LoginModule&apos;s own authentication attempt
                  succeeded (checked by retrieving the private state saved by the
                  &lt;code&gt;login&lt;/code&gt; method), then this method associates a
                  &lt;code&gt;JMXPrincipal&lt;/code&gt; with the &lt;code&gt;Subject&lt;/code&gt; located in the
                  &lt;code&gt;LoginModule&lt;/code&gt;.  If this LoginModule&apos;s own
                  authentication attempted failed, then this method removes
                  any state that was originally saved.                
                <exception>
                    LoginException if the commit fails                    
                </exception>
                <return>
                    true if this LoginModule&apos;s own login and commit
                      attempts succeeded, or false otherwise.                    
                </return>
            </javadoc>
            <method name="commit" type="boolean" line="220">
                <scope line="221"/>
                <scope line="224">
                    <scope line="225"/>
                    <scope line="229"/>
                    <scope line="232"/>
                </scope>
            </method>
            <javadoc line="240">
                Abort user authentication (Authentication Phase 2).
                  &lt;p&gt; This method is called if the LoginContext&apos;s overall authentication
                  failed (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL
                  LoginModules did not succeed).
                  &lt;p&gt; If this LoginModule&apos;s own authentication attempt
                  succeeded (checked by retrieving the private state saved by the
                  &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt; methods),
                  then this method cleans up any state that was originally saved.                
                <exception>
                    LoginException if the abort fails.                    
                </exception>
                <return>
                    false if this LoginModule&apos;s own login and/or commit attempts
                      failed, and true otherwise.                    
                </return>
            </javadoc>
            <method name="abort" type="boolean" line="253">
                <scope line="254"/>
                <scope line="257"/>
                <scope line="260"/>
                <scope line="265"/>
            </method>
            <javadoc line="270">
                Logout a user.
                  &lt;p&gt; This method removes the Principals
                  that were added by the &lt;code&gt;commit&lt;/code&gt; method.                
                <exception>
                    LoginException if the logout fails.                    
                </exception>
                <return>
                    true in all cases since this &lt;code&gt;LoginModule&lt;/code&gt;
                      should not be ignored.                    
                </return>
            </javadoc>
            <method name="logout" type="boolean" line="278">
                <scope line="279"/>
                <scope line="288"/>
            </method>
            <javadoc line="293">
                Attempt authentication                
                <param>
                    usePasswdFromSharedState a flag to tell this method whether
                      to retrieve the password from the sharedState.                    
                </param>
            </javadoc>
            <method name="attemptAuthentication" type="void" line="298">
                <params>
                    <param name="usePasswdFromSharedState" type="boolean"/>
                </params>
                <declaration name="localPassword" type="String" line="300"/>
                <scope line="301">
                    <scope line="302"/>
                </scope>
                <scope line="307"/>
                <scope line="312"/>
            </method>
            <method name="loadPasswordFile" type="void" line="316">
                <declaration name="fis" type="FileInputStream" line="317"/>
                <scope line="318"/>
                <scope line="321">
                    <scope line="322"/>
                    <scope line="325">
                        <declaration name="fp" type="FilePermission" line="326"/>
                        <declaration name="ace" type="AccessControlException" line="327"/>
                    </scope>
                </scope>
                <scope line="332">
                    <declaration name="bis" type="BufferedInputStream" line="333"/>
                    <scope line="334"/>
                    <scope line="338"/>
                </scope>
                <scope line="342"/>
            </method>
            <javadoc line="346">
                Get the username and password.
                  This method does not return any value.
                  Instead, it sets global name and password variables.
                  &lt;p&gt; Also note that this method will set the username and password
                  values in the shared state in case subsequent LoginModules
                  want to use them via use/tryFirstPass.                
                <param>
                    usePasswdFromSharedState boolean that tells this method whether
                      to retrieve the password from the sharedState.                    
                </param>
            </javadoc>
            <method name="getUsernamePassword" type="void" line="356">
                <params>
                    <param name="usePasswdFromSharedState" type="boolean"/>
                </params>
                <scope line="357"/>
                <declaration name="callbacks" type="Callback[]" line="363"/>
                <scope line="366">
                    <declaration name="tmpPassword" type="char[]" line="369"/>
                </scope>
                <scope line="374">
                    <declaration name="le" type="LoginException" line="375"/>
                </scope>
                <scope line="378">
                    <declaration name="le" type="LoginException" line="379"/>
                </scope>
            </method>
            <javadoc line="383">
                Clean out state because of a failed authentication attempt                
            </javadoc>
            <method name="cleanState" type="void" line="386">
                <scope line="388"/>
                <scope line="392"/>
            </method>
        </class>
    </source>