<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <class name="SnmpCounter64" line="31">
            <extends class="SnmpValue"/>
            <comment line="42">
                CONSTRUCTORS                
            </comment>
            <comment line="43">
                -------------                
            </comment>
            <comment line="73">
                PUBLIC METHODS                
            </comment>
            <comment line="74">
                ---------------                
            </comment>
            <comment line="203">
                VARIABLES                
            </comment>
            <comment line="204">
                ----------                
            </comment>
            <javadoc line="31">
                Represents an SNMP 64bits counter.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="39"/>
            <javadoc line="43">
                Constructs a new &lt;CODE&gt;SnmpCounter64&lt;/CODE&gt; from the specified long value.                
                <param>
                    v The initialization value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified value is negative
                      or larger than <CODE>Long.MAX_VALUE</CODE>.                    
                </exception>
            </javadoc>
            <method name="SnmpCounter64" type="constructor" line="49">
                <params>
                    <param name="v" type="long"/>
                </params>
                <comment line="51">
                    NOTE:                    
                </comment>
                <comment line="52">
                    The max value for a counter64 variable is 2^64 - 1.                    
                </comment>
                <comment line="53">
                    The max value for a Long is 2^63 - 1.                    
                </comment>
                <comment line="54">
                    All the allowed values for a conuter64 variable cannot be covered !!!                    
                </comment>
                <comment line="55">
                                        
                </comment>
                <scope line="56"/>
            </method>
            <javadoc line="62">
                Constructs a new &lt;CODE&gt;SnmpCounter64&lt;/CODE&gt; from the specified &lt;CODE&gt;Long&lt;/CODE&gt; value.                
                <param>
                    v The initialization value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified value is negative
                      or larger than <CODE>Long.MAX_VALUE</CODE>.                    
                </exception>
            </javadoc>
            <method name="SnmpCounter64" type="constructor" line="68">
                <params>
                    <param name="v" type="Long"/>
                </params>
            </method>
            <javadoc line="74">
                Returns the counter value of this &lt;CODE&gt;SnmpCounter64&lt;/CODE&gt;.                
                <return>
                    The value.                    
                </return>
            </javadoc>
            <method name="longValue" type="long" line="78"/>
            <javadoc line="82">
                Converts the counter value to its &lt;CODE&gt;Long&lt;/CODE&gt; form.                
                <return>
                    The <CODE>Long</CODE> representation of the value.                    
                </return>
            </javadoc>
            <method name="toLong" type="Long" line="86"/>
            <javadoc line="90">
                Converts the counter value to its integer form.                
                <return>
                    The integer representation of the value.                    
                </return>
            </javadoc>
            <method name="intValue" type="int" line="94"/>
            <javadoc line="98">
                Converts the counter value to its &lt;CODE&gt;Integer&lt;/CODE&gt; form.                
                <return>
                    The <CODE>Integer</CODE> representation of the value.                    
                </return>
            </javadoc>
            <method name="toInteger" type="Integer" line="102"/>
            <javadoc line="106">
                Converts the counter value to its &lt;CODE&gt;String&lt;/CODE&gt; form.                
                <return>
                    The <CODE>String</CODE> representation of the value.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="110"/>
            <javadoc line="114">
                Converts the counter value to its &lt;CODE&gt;SnmpOid&lt;/CODE&gt; form.                
                <return>
                    The OID representation of the value.                    
                </return>
            </javadoc>
            <method name="toOid" type="SnmpOid" line="118"/>
            <javadoc line="122">
                Extracts the counter from an index OID and returns its
                  value converted as an &lt;CODE&gt;SnmpOid&lt;/CODE&gt;.                
                <param>
                    index The index array.                    
                </param>
                <param>
                    start The position in the index array.                    
                </param>
                <return>
                    The OID representing the counter value.                    
                </return>
                <exception>
                    SnmpStatusException There is no counter value
                      available at the start position.                    
                </exception>
            </javadoc>
            <method name="toOid" type="SnmpOid" line="131">
                <params>
                    <param name="index" type="long[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="132"/>
                <scope line="135"/>
            </method>
            <javadoc line="140">
                Scans an index OID, skips the counter value and returns the position
                  of the next value.                
                <param>
                    index The index array.                    
                </param>
                <param>
                    start The position in the index array.                    
                </param>
                <return>
                    The position of the next value.                    
                </return>
                <exception>
                    SnmpStatusException There is no counter value
                      available at the start position.                    
                </exception>
            </javadoc>
            <method name="nextOid" type="int" line="149">
                <params>
                    <param name="index" type="long[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="150"/>
                <scope line="153"/>
            </method>
            <javadoc line="158">
                Appends an &lt;CODE&gt;SnmpOid&lt;/CODE&gt; representing an &lt;CODE&gt;SnmpCounter64&lt;/CODE&gt; to another OID.                
                <param>
                    source An OID representing an <CODE>SnmpCounter64</CODE> value.                    
                </param>
                <param>
                    dest Where source should be appended.                    
                </param>
            </javadoc>
            <method name="appendToOid" type="void" line="163">
                <params>
                    <param name="source" type="SnmpOid"/>
                    <param name="dest" type="SnmpOid"/>
                </params>
                <scope line="164"/>
            </method>
            <javadoc line="170">
                Performs a clone action. This provides a workaround for the
                  &lt;CODE&gt;SnmpValue&lt;/CODE&gt; interface.                
                <return>
                    The SnmpValue clone.                    
                </return>
            </javadoc>
            <method name="duplicate" type="SnmpValue" line="175"/>
            <javadoc line="179">
                Clones the &lt;CODE&gt;SnmpCounter64&lt;/CODE&gt; object, making a copy of its data.                
                <return>
                    The object clone.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="183">
                <comment line="189">
                    vm bug.                    
                </comment>
                <declaration name="newclone" type="SnmpCounter64" line="184"/>
                <scope line="185"/>
                <scope line="188"/>
            </method>
            <javadoc line="194">
                Returns a textual description of the type object.                
                <return>
                    ASN.1 textual description.                    
                </return>
            </javadoc>
            <method name="getTypeName" type="String" line="198"/>
            <declaration name="name" type="String" line="204"/>
            <javadoc line="204">
                Name of the type.                
            </javadoc>
            <declaration name="value" type="long" line="209"/>
            <javadoc line="209">
                This is where the value is stored. This long is positive.                
                <serial>
                                        
                </serial>
            </javadoc>
        </class>
    </source>