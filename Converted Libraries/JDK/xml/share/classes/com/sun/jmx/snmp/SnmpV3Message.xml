<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <import package="java.util.Vector"/>
        <import package="java.util.logging.Level"/>
        <import package="java.net.InetAddress"/>
        <import package="com.sun.jmx.defaults.JmxProperties.SNMP_LOGGER"/>
        <import package="com.sun.jmx.snmp.internal.SnmpMsgProcessingSubSystem"/>
        <import package="com.sun.jmx.snmp.internal.SnmpSecurityModel"/>
        <import package="com.sun.jmx.snmp.internal.SnmpDecryptedPdu"/>
        <import package="com.sun.jmx.snmp.internal.SnmpSecurityCache"/>
        <import package="com.sun.jmx.snmp.SnmpMsg"/>
        <import package="com.sun.jmx.snmp.SnmpPdu"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.SnmpTooBigException"/>
        <import package="com.sun.jmx.snmp.SnmpScopedPduBulk"/>
        <import package="com.sun.jmx.snmp.BerException"/>
        <import package="com.sun.jmx.snmp.SnmpScopedPduRequest"/>
        <import package="com.sun.jmx.snmp.BerDecoder"/>
        <import package="com.sun.jmx.snmp.SnmpDefinitions"/>
        <import package="com.sun.jmx.snmp.SnmpEngineId"/>
        <import package="com.sun.jmx.snmp.SnmpScopedPduPacket"/>
        <import package="com.sun.jmx.snmp.BerEncoder"/>
        <import package="com.sun.jmx.snmp.SnmpPduRequestType"/>
        <import package="com.sun.jmx.snmp.SnmpPduBulkType"/>
        <class name="SnmpV3Message" line="56">
            <extends class="SnmpMsg"/>
            <javadoc line="56">
                Is a partially decoded representation of an SNMP V3 packet.
                  &lt;P&gt;
                  This class can be used when developing customized manager or agent.
                  &lt;P&gt;
                  The &lt;CODE&gt;SnmpV3Message&lt;/CODE&gt; class is directly mapped onto the
                  message syntax defined in RFC 2572.
                  &lt;BLOCKQUOTE&gt;
                  &lt;PRE&gt;
                  SNMPv3Message ::= SEQUENCE {
                  msgVersion INTEGER ( 0 .. 2147483647 ),
                  -- administrative parameters
                  msgGlobalData HeaderData,
                  -- security model-specific parameters
                  -- format defined by Security Model
                  msgSecurityParameters OCTET STRING,
                  msgData  ScopedPduData
                  }
                  HeaderData ::= SEQUENCE {
                  msgID      INTEGER (0..2147483647),
                  msgMaxSize INTEGER (484..2147483647),
                  msgFlags   OCTET STRING (SIZE(1)),
                  --  .... ...1   authFlag
                  --  .... ..1.   privFlag
                  --  .... .1..   reportableFlag
                  --              Please observe:
                  --  .... ..00   is OK, means noAuthNoPriv
                  --  .... ..01   is OK, means authNoPriv
                  --  .... ..10   reserved, must NOT be used.
                  --  .... ..11   is OK, means authPriv
                  msgSecurityModel INTEGER (1..2147483647)
                  }
                  &lt;/BLOCKQUOTE&gt;
                  &lt;/PRE&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="msgId" type="int" line="98"/>
            <javadoc line="98">
                Message identifier.                
            </javadoc>
            <declaration name="msgMaxSize" type="int" line="103"/>
            <javadoc line="103">
                Message max size the pdu sender can deal with.                
            </javadoc>
            <declaration name="msgFlags" type="byte" line="107"/>
            <javadoc line="107">
                Message flags. Reportable flag  and security level.&lt;/P&gt;
                  &lt;PRE&gt;
                  --  .... ...1   authFlag
                  --  .... ..1.   privFlag
                  --  .... .1..   reportableFlag
                  --              Please observe:
                  --  .... ..00   is OK, means noAuthNoPriv
                  --  .... ..01   is OK, means authNoPriv
                  --  .... ..10   reserved, must NOT be used.
                  --  .... ..11   is OK, means authPriv
                  &lt;/PRE&gt;                
            </javadoc>
            <declaration name="msgSecurityModel" type="int" line="121"/>
            <javadoc line="121">
                The security model the security sub system MUST use in order to deal with this pdu (eg: User based Security Model Id = 3).                
            </javadoc>
            <declaration name="msgSecurityParameters" type="byte[]" line="125"/>
            <javadoc line="125">
                The unmarshalled security parameters.                
            </javadoc>
            <declaration name="contextEngineId" type="byte[]" line="129"/>
            <javadoc line="129">
                The context engine Id in which the pdu must be handled (Generaly the local engine Id).                
            </javadoc>
            <declaration name="contextName" type="byte[]" line="133"/>
            <javadoc line="133">
                The context name in which the OID has to be interpreted.                
            </javadoc>
            <declaration name="encryptedPdu" type="byte[]" line="137"/>
            <javadoc line="137">
                The encrypted form of the scoped pdu (Only relevant when dealing with privacy).                
            </javadoc>
            <javadoc line="141">
                Constructor.                
            </javadoc>
            <method name="SnmpV3Message" type="constructor" line="145"/>
            <javadoc line="147">
                Encodes this message and puts the result in the specified byte array.
                  For internal use only.                
                <param>
                    outputBytes An array to receive the resulting encoding.                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException If the result does not fit
                      into the specified array.                    
                </exception>
            </javadoc>
            <method name="encodeMessage" type="int" line="157">
                <params>
                    <param name="outputBytes" type="byte[]"/>
                </params>
                <declaration name="encodingLength" type="int" line="158"/>
                <scope line="159"/>
            </method>
            <javadoc line="167">
                Decodes the specified bytes and initializes this message.
                  For internal use only.                
                <param>
                    inputBytes The bytes to be decoded.                    
                </param>
                <exception>
                    SnmpStatusException If the specified bytes are not a valid encoding.                    
                </exception>
            </javadoc>
            <method name="decodeMessage" type="void" line="176">
                <params>
                    <param name="inputBytes" type="byte[]"/>
                    <param name="byteCount" type="int"/>
                </params>
                <scope line="178">
                    <declaration name="bdec" type="BerDecoder" line="179"/>
                    <scope line="189"/>
                    <scope line="197"/>
                </scope>
                <scope line="202"/>
                <scope line="207">
                    <declaration name="strb" type="StringBuilder" line="208"/>
                </scope>
            </method>
            <javadoc line="236">
                Returns the associated request Id.                
                <param>
                    data The flat message.                    
                </param>
                <return>
                    The request Id.                    
                </return>
            </javadoc>
            <method name="getRequestId" type="int" line="241">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="bdec" type="BerDecoder" line="242"/>
                <declaration name="msgId" type="int" line="243"/>
                <scope line="244"/>
                <scope line="250"/>
                <scope line="253"/>
                <scope line="256"/>
            </method>
            <javadoc line="262">
                Initializes this message with the specified &lt;CODE&gt;pdu&lt;/CODE&gt;.
                  &lt;P&gt;
                  This method initializes the data field with an array of
                  &lt;CODE&gt;maxDataLength&lt;/CODE&gt; bytes. It encodes the &lt;CODE&gt;pdu&lt;/CODE&gt;.
                  The resulting encoding is stored in the data field
                  and the length of the encoding is stored in &lt;CODE&gt;dataLength&lt;/CODE&gt;.
                  &lt;p&gt;
                  If the encoding length exceeds &lt;CODE&gt;maxDataLength&lt;/CODE&gt;,
                  the method throws an exception.                
                <param>
                    p The PDU to be encoded.                    
                </param>
                <param>
                    maxDataLength The maximum length permitted for the data field.                    
                </param>
                <exception>
                    SnmpStatusException If the specified &lt;CODE&gt;pdu&lt;/CODE&gt;
                      is not valid.                    
                </exception>
                <exception>
                    SnmpTooBigException If the resulting encoding does not fit
                      into &lt;CODE&gt;maxDataLength&lt;/CODE&gt; bytes.                    
                </exception>
                <exception>
                    ArrayIndexOutOfBoundsException If the encoding exceeds
                      &lt;CODE&gt;maxDataLength&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="encodeSnmpPdu" type="void" line="285">
                <params>
                    <param name="p" type="SnmpPdu"/>
                    <param name="maxDataLength" type="int"/>
                </params>
                <comment line="330">
                    Allocate the array to receive the encoding.                    
                </comment>
                <comment line="335">
                    Encode the pdu
                     Reminder: BerEncoder does backward encoding !                    
                </comment>
                <declaration name="pdu" type="SnmpScopedPduPacket" line="287"/>
                <scope line="289">
                    <declaration name="strb" type="StringBuilder" line="290"/>
                </scope>
                <scope line="339">
                    <declaration name="benc" type="BerEncoder" line="340"/>
                    <declaration name="reqPdu" type="SnmpPduRequestType" line="353"/>
                    <declaration name="bulkPdu" type="SnmpPduBulkType" line="360"/>
                </scope>
                <scope line="372"/>
            </method>
            <javadoc line="378">
                Gets the PDU encoded in this message.
                  &lt;P&gt;
                  This method decodes the data field and returns the resulting PDU.                
                <return>
                    The resulting PDU.                    
                </return>
                <exception>
                    SnmpStatusException If the encoding is not valid.                    
                </exception>
            </javadoc>
            <method name="decodeSnmpPdu" type="SnmpPdu" line="388">
                <comment line="434">
                    The easy work.                    
                </comment>
                <declaration name="pdu" type="SnmpScopedPduPacket" line="390"/>
                <declaration name="bdec" type="BerDecoder" line="392"/>
                <scope line="393">
                    <declaration name="type" type="int" line="394"/>
                    <declaration name="reqPdu" type="SnmpScopedPduRequest" line="405"/>
                    <declaration name="bulkPdu" type="SnmpScopedPduBulk" line="413"/>
                </scope>
                <scope line="425">
                    <scope line="426"/>
                </scope>
                <scope line="448">
                    <declaration name="strb" type="StringBuilder" line="449"/>
                </scope>
            </method>
            <javadoc line="475">
                Dumps this message in a string.                
                <return>
                    The string containing the dump.                    
                </return>
            </javadoc>
            <method name="printMessage" type="String" line="480">
                <declaration name="sb" type="StringBuffer" line="481"/>
                <scope line="487"/>
                <scope line="490"/>
                <scope line="498"/>
                <scope line="501"/>
            </method>
        </class>
    </source>