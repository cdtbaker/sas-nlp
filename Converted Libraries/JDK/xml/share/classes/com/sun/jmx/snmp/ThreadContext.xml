<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <import package="java.util.Stack"/>
        <import package="java.util.EmptyStackException"/>
        <class name="ThreadContext" line="4">
            <implements interface="Cloneable"/>
            <javadoc line="4">
                &lt;p&gt;&lt;b&gt;Warning: The interface of this class is subject to change.
                  Use at your own risk.&lt;/b&gt;&lt;/p&gt;
                  &lt;p&gt;This class associates a context with each thread that
                  references it.  The context is a set of mappings between Strings
                  and Objects.  It is managed as a stack, typically with code like
                  this:&lt;/p&gt;
                  &lt;pre&gt;
                  ThreadContext oldContext = ThreadContext.push(myKey, myObject);
                  // plus possibly further calls to ThreadContext.push...
                  try {
                  doSomeOperation();
                  } finally {
                  ThreadContext.restore(oldContext);
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;The &lt;code&gt;try&lt;/code&gt;...&lt;code&gt;finally&lt;/code&gt; block ensures that
                  the &lt;code&gt;restore&lt;/code&gt; is done even if
                  &lt;code&gt;doSomeOperation&lt;/code&gt; terminates abnormally (with an
                  exception).&lt;/p&gt;
                  &lt;p&gt;A thread can consult its own context using
                  &lt;code&gt;ThreadContext.get(myKey)&lt;/code&gt;.  The result is the
                  value that was most recently pushed with the given key.&lt;/p&gt;
                  &lt;p&gt;A thread cannot read or modify the context of another thread.&lt;/p&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="previous" type="ThreadContext" line="32"/>
            <declaration name="key" type="String" line="33"/>
            <declaration name="value" type="Object" line="34"/>
            <method name="ThreadContext" type="constructor" line="35">
                <params>
                    <param name="previous" type="ThreadContext"/>
                    <param name="key" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="40">
                &lt;p&gt;Get the Object that was most recently pushed with the given key.&lt;/p&gt;                
                <param>
                    key the key of interest.                    
                </param>
                <return>
                    the last Object that was pushed (using
                      <code>push</code>) with that key and not subsequently canceled
                      by a <code>restore</code>; or null if there is no such object.
                      A null return value may also indicate that the last Object
                      pushed was the value <code>null</code>.  Use the
                      <code>contains</code> method to distinguish this case from the
                      case where there is no Object.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>key</code> is null.                    
                </exception>
            </javadoc>
            <method name="get" type="Object" line="52">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="context" type="ThreadContext" line="53"/>
            </method>
            <javadoc line="57">
                &lt;p&gt;Check whether a value with the given key exists in the stack.
                  This means that the &lt;code&gt;push&lt;/code&gt; method was called with
                  this key and it was not cancelled by a subsequent
                  &lt;code&gt;restore&lt;/code&gt;.  This method is useful when the
                  &lt;code&gt;get&lt;/code&gt; method returns null, to distinguish between
                  the case where the key exists in the stack but is associated
                  with a null value, and the case where the key does not exist in
                  the stack.&lt;/p&gt;                
                <return>
                    true if the key exists in the stack.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>key</code> is null.                    
                </exception>
            </javadoc>
            <method name="contains" type="boolean" line="69">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="72">
                &lt;p&gt;Find the ThreadContext in the stack that contains the given key,
                  or return null if there is none.&lt;/p&gt;                
                <exception>
                    IllegalArgumentException if <code>key</code> is null.                    
                </exception>
            </javadoc>
            <method name="contextContaining" type="ThreadContext" line="77">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="79"/>
            </method>
            <javadoc line="84">
                &lt;p&gt;Push an object on the context stack with the given key.
                  This operation can subsequently be undone by calling
                  &lt;code&gt;restore&lt;/code&gt; with the ThreadContext value returned
                  here.&lt;/p&gt;                
                <param>
                    key the key that will be used to find the object while it is
                      on the stack.                    
                </param>
                <param>
                    value the value to be associated with that key.  It may be null.                    
                </param>
                <return>
                    a ThreadContext that can be given to <code>restore</code> to
                      restore the stack to its state before the <code>push</code>.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>key</code> is null.                    
                </exception>
            </javadoc>
            <method name="push" type="ThreadContext" line="96">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="oldContext" type="ThreadContext" line="98"/>
                <declaration name="newContext" type="ThreadContext" line="100"/>
            </method>
            <javadoc line="104">
                &lt;p&gt;Return an object that can later be supplied to &lt;code&gt;restore&lt;/code&gt;
                  to restore the context stack to its current state.  The object can
                  also be given to &lt;code&gt;setInitialContext&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    a ThreadContext that represents the current context stack.                    
                </return>
            </javadoc>
            <method name="getThreadContext" type="ThreadContext" line="110"/>
            <javadoc line="113">
                &lt;p&gt;Restore the context stack to an earlier state.  This typically
                  undoes the effect of one or more &lt;code&gt;push&lt;/code&gt; calls.&lt;/p&gt;                
                <param>
                    oldContext the state to return.  This is usually the return
                      value of an earlier <code>push</code> operation.                    
                </param>
                <exception>
                    NullPointerException if <code>oldContext</code> is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>oldContext</code>
                      does not represent a context from this thread, or if that
                      context was undone by an earlier <code>restore</code>.                    
                </exception>
            </javadoc>
            <method name="restore" type="void" line="123">
                <params>
                    <param name="oldContext" type="ThreadContext"/>
                </params>
                <scope line="125">
                    <scope line="126"/>
                </scope>
            </method>
            <javadoc line="133">
                &lt;p&gt;Set the initial context of the calling thread to a context obtained
                  from another thread.  After this call, the calling thread will see
                  the same results from the &lt;code&gt;get&lt;/code&gt; method as the thread
                  from which the &lt;code&gt;context&lt;/code&gt; argument was obtained, at the
                  time it was obtained.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;context&lt;/code&gt; argument must be the result of an earlier
                  &lt;code&gt;push&lt;/code&gt; or &lt;code&gt;getThreadContext&lt;/code&gt; call.  It is an
                  error (which may or may not be detected) if this context has been
                  undone by a &lt;code&gt;restore&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;The context stack of the calling thread must be empty before this
                  call, i.e., there must not have been a &lt;code&gt;push&lt;/code&gt; not undone
                  by a subsequent &lt;code&gt;restore&lt;/code&gt;.&lt;/p&gt;                
                <exception>
                    IllegalArgumentException if the context stack was
                      not empty before the call.  An implementation may also throw this
                      exception if <code>context</code> is no longer current in the
                      thread from which it was obtained.                    
                </exception>
            </javadoc>
            <method name="setInitialContext" type="void" line="151">
                <params>
                    <param name="context" type="ThreadContext"/>
                </params>
            </method>
            <method name="getContext" type="ThreadContext" line="155"/>
            <method name="setContext" type="void" line="158">
                <params>
                    <param name="context" type="ThreadContext"/>
                </params>
            </method>
            <declaration name="localContext" type="ThreadLocal&lt;ThreadContext&gt;" line="161"/>
        </class>
    </source>