<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <import package="java.util.Stack"/>
        <import package="java.util.EmptyStackException"/>
        <class name="ThreadContext" line="32">
            <comment line="68">
                The context of a thread is stored as a linked list.  At the
                head of the list is the value returned by localContext.get().
                At the tail of the list is a sentinel ThreadContext value with
                &quot;previous&quot; and &quot;key&quot; both null.  There is a different sentinel
                object for each thread.
                
                Because a null key indicates the sentinel, we reject attempts to
                push context entries with a null key.
                
                The reason for using a sentinel rather than just terminating
                the list with a null reference is to protect against incorrect
                or even malicious code.  If you have a reference to the
                sentinel value, you can erase the context stack.  Only the
                caller of the first &quot;push&quot; that put something on the stack can
                get such a reference, so if that caller does not give this
                reference away, no one else can erase the stack.
                
                If the restore method took a null reference to mean an empty
                stack, anyone could erase the stack, since anyone can make a
                null reference.
                
                When the stack is empty, we discard the sentinel object and
                have localContext.get() return null.  Then we recreate the
                sentinel object on the first subsequent push.
                
                ThreadContext objects are immutable.  As a consequence, you can
                give a ThreadContext object to setInitialContext that is no
                longer current.  But the interface says this can be rejected,                
            </comment>
            <comment line="98">
                We have to comment out &quot;final&quot; here because of a bug in the JDK1.1                
            </comment>
            <comment line="173">
                /**
                   * Change the value that was most recently associated with the given key
                   * in a &lt;code&gt;push&lt;/code&gt; operation not cancelled by a subsequent
                   * &lt;code&gt;restore&lt;/code&gt;.  If there is no such association, nothing happens
                   * and the return value is null.
                   *
                   * @param key the key of interest.
                   * @param value the new value to associate with that key.
                   *
                   * @return the value that was previously associated with the key, or null
                   * if the key does not exist in the stack.
                   *
                   * @exception IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is null.
                   */
                  public static Object set(String key, Object value)
                          throws IllegalArgumentException {
                      ThreadContext context = contextContaining(key);
                      if (context == null)
                          return null;
                      Object old = context.value;
                      context.value = value;
                      return old;
                  }                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="32">
                &lt;p&gt;&lt;b&gt;Warning: The interface of this class is subject to change.
                  Use at your own risk.&lt;/b&gt;&lt;/p&gt;
                  &lt;p&gt;This class associates a context with each thread that
                  references it.  The context is a set of mappings between Strings
                  and Objects.  It is managed as a stack, typically with code like
                  this:&lt;/p&gt;
                  &lt;pre&gt;
                  ThreadContext oldContext = ThreadContext.push(myKey, myObject);
                  // plus possibly further calls to ThreadContext.push...
                  try {
                  doSomeOperation();
                  } finally {
                  ThreadContext.restore(oldContext);
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;The &lt;code&gt;try&lt;/code&gt;...&lt;code&gt;finally&lt;/code&gt; block ensures that
                  the &lt;code&gt;restore&lt;/code&gt; is done even if
                  &lt;code&gt;doSomeOperation&lt;/code&gt; terminates abnormally (with an
                  exception).&lt;/p&gt;
                  &lt;p&gt;A thread can consult its own context using
                  &lt;code&gt;ThreadContext.get(myKey)&lt;/code&gt;.  The result is the
                  value that was most recently pushed with the given key.&lt;/p&gt;
                  &lt;p&gt;A thread cannot read or modify the context of another thread.&lt;/p&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="previous" type="ThreadContext" line="99"/>
            <declaration name="key" type="String" line="100"/>
            <declaration name="value" type="Object" line="101"/>
            <method name="ThreadContext" type="constructor" line="103">
                <params>
                    <param name="previous" type="ThreadContext"/>
                    <param name="key" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="109">
                &lt;p&gt;Get the Object that was most recently pushed with the given key.&lt;/p&gt;                
                <param>
                    key the key of interest.                    
                </param>
                <return>
                    the last Object that was pushed (using
                      &lt;code&gt;push&lt;/code&gt;) with that key and not subsequently canceled
                      by a &lt;code&gt;restore&lt;/code&gt;; or null if there is no such object.
                      A null return value may also indicate that the last Object
                      pushed was the value &lt;code&gt;null&lt;/code&gt;.  Use the
                      &lt;code&gt;contains&lt;/code&gt; method to distinguish this case from the
                      case where there is no Object.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is null.                    
                </exception>
            </javadoc>
            <method name="get" type="Object" line="124">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="context" type="ThreadContext" line="125"/>
            </method>
            <javadoc line="132">
                &lt;p&gt;Check whether a value with the given key exists in the stack.
                  This means that the &lt;code&gt;push&lt;/code&gt; method was called with
                  this key and it was not cancelled by a subsequent
                  &lt;code&gt;restore&lt;/code&gt;.  This method is useful when the
                  &lt;code&gt;get&lt;/code&gt; method returns null, to distinguish between
                  the case where the key exists in the stack but is associated
                  with a null value, and the case where the key does not exist in
                  the stack.&lt;/p&gt;                
                <return>
                    true if the key exists in the stack.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is null.                    
                </exception>
            </javadoc>
            <method name="contains" type="boolean" line="147">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="151">
                &lt;p&gt;Find the ThreadContext in the stack that contains the given key,
                  or return null if there is none.&lt;/p&gt;                
                <exception>
                    IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is null.                    
                </exception>
            </javadoc>
            <method name="contextContaining" type="ThreadContext" line="158">
                <params>
                    <param name="key" type="String"/>
                </params>
                <comment line="167">
                    Note that &quot;context.key&quot; may be null if &quot;context&quot; is the                    
                </comment>
                <scope line="163"/>
            </method>
            <javadoc line="196">
                &lt;p&gt;Push an object on the context stack with the given key.
                  This operation can subsequently be undone by calling
                  &lt;code&gt;restore&lt;/code&gt; with the ThreadContext value returned
                  here.&lt;/p&gt;                
                <param>
                    key the key that will be used to find the object while it is
                      on the stack.                    
                </param>
                <param>
                    value the value to be associated with that key.  It may be null.                    
                </param>
                <return>
                    a ThreadContext that can be given to &lt;code&gt;restore&lt;/code&gt; to
                      restore the stack to its state before the &lt;code&gt;push&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is null.                    
                </exception>
            </javadoc>
            <method name="push" type="ThreadContext" line="212">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <comment line="219">
                    make sentinel                    
                </comment>
                <declaration name="oldContext" type="ThreadContext" line="216"/>
                <declaration name="newContext" type="ThreadContext" line="219"/>
            </method>
            <javadoc line="224">
                &lt;p&gt;Return an object that can later be supplied to &lt;code&gt;restore&lt;/code&gt;
                  to restore the context stack to its current state.  The object can
                  also be given to &lt;code&gt;setInitialContext&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    a ThreadContext that represents the current context stack.                    
                </return>
            </javadoc>
            <method name="getThreadContext" type="ThreadContext" line="231"/>
            <javadoc line="235">
                &lt;p&gt;Restore the context stack to an earlier state.  This typically
                  undoes the effect of one or more &lt;code&gt;push&lt;/code&gt; calls.&lt;/p&gt;                
                <param>
                    oldContext the state to return.  This is usually the return
                      value of an earlier &lt;code&gt;push&lt;/code&gt; operation.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;oldContext&lt;/code&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;oldContext&lt;/code&gt;
                      does not represent a context from this thread, or if that
                      context was undone by an earlier &lt;code&gt;restore&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="restore" type="void" line="248">
                <params>
                    <param name="oldContext" type="ThreadContext"/>
                </params>
                <comment line="250">
                    The following test is not strictly necessary in the code as it
                    stands today, since the reference to &quot;oldContext.key&quot; would
                    generate a NullPointerException anyway.  But if someone
                    didn&apos;t notice that during subsequent changes, they could
                    accidentally permit restore(null) with the semantics of                    
                </comment>
                <comment line="259">
                                        
                </comment>
                <comment line="270">
                    Discard the sentinel if the stack is empty.  This means that it
                    is an error to call &quot;restore&quot; a second time with the
                    ThreadContext value that means an empty stack.  That&apos;s why we
                    don&apos;t say that it is all right to restore the stack to the                    
                </comment>
                <scope line="261">
                    <scope line="262"/>
                </scope>
            </method>
            <javadoc line="280">
                &lt;p&gt;Set the initial context of the calling thread to a context obtained
                  from another thread.  After this call, the calling thread will see
                  the same results from the &lt;code&gt;get&lt;/code&gt; method as the thread
                  from which the &lt;code&gt;context&lt;/code&gt; argument was obtained, at the
                  time it was obtained.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;context&lt;/code&gt; argument must be the result of an earlier
                  &lt;code&gt;push&lt;/code&gt; or &lt;code&gt;getThreadContext&lt;/code&gt; call.  It is an
                  error (which may or may not be detected) if this context has been
                  undone by a &lt;code&gt;restore&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;The context stack of the calling thread must be empty before this
                  call, i.e., there must not have been a &lt;code&gt;push&lt;/code&gt; not undone
                  by a subsequent &lt;code&gt;restore&lt;/code&gt;.&lt;/p&gt;                
                <exception>
                    IllegalArgumentException if the context stack was
                      not empty before the call.  An implementation may also throw this
                      exception if &lt;code&gt;context&lt;/code&gt; is no longer current in the
                      thread from which it was obtained.                    
                </exception>
            </javadoc>
            <method name="setInitialContext" type="void" line="308">
                <params>
                    <param name="context" type="ThreadContext"/>
                </params>
                <comment line="302">
                    We rely on the fact that ThreadContext objects are immutable.
                    This means that we don&apos;t have to check that the &quot;context&quot;
                    argument is valid.  It necessarily represents the head of a
                    valid chain of ThreadContext objects, even if the thread from
                    which it was obtained has subsequently been set to a point                    
                </comment>
                <comment line="310">
                    The following test assumes that we discard sentinels when the                    
                </comment>
            </method>
            <method name="getContext" type="ThreadContext" line="316"/>
            <method name="setContext" type="void" line="320">
                <params>
                    <param name="context" type="ThreadContext"/>
                </params>
            </method>
            <declaration name="localContext" type="ThreadLocal&lt;ThreadContext&gt;" line="324"/>
        </class>
    </source>