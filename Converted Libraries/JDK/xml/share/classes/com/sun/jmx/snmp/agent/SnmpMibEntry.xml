<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.agent">
        <import package="java.io.Serializable"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Enumeration"/>
        <import package="com.sun.jmx.snmp.SnmpValue"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibOid"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibNode"/>
        <class name="SnmpMibEntry" line="10">
            <extends class="SnmpMibNode"/>
            <implements interface="Serializable"/>
            <javadoc line="10">
                Represents a node in an SNMP MIB which corresponds to a table entry
                  meta node.
                  &lt;P&gt;
                  This class is used by the class generated by &lt;CODE&gt;mibgen&lt;/CODE&gt;.
                  You should not need to use this class directly.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <method name="isVariable" type="boolean" line="20"/>
            <javadoc line="20">
                Tells whether the given arc identifies a variable (scalar object) in
                  this entry.                
                <param>
                    arc An OID arc.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if `arc&apos; leads to a variable.                    
                </return>
            </javadoc>
            <method name="isReadable" type="boolean" line="27"/>
            <javadoc line="27">
                Tells whether the given arc identifies a readable scalar object in
                  this entry.                
                <param>
                    arc An OID arc.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if `arc&apos; leads to a readable variable.                    
                </return>
            </javadoc>
            <javadoc line="34">
                Get the next OID arc corresponding to a readable scalar variable.                
            </javadoc>
            <method name="getNextVarId" type="long" line="37">
                <params>
                    <param name="id" type="long"/>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="nextvar" type="long" line="38"/>
            </method>
            <javadoc line="42">
                Checks whether the given OID arc identifies a variable (columnar
                  object).                
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
                <exception>
                    If the given `arc&apos; does not identify any variable in this
                      group, throws an SnmpStatusException.                    
                </exception>
            </javadoc>
            <method name="validateVarId" type="void" line="51">
                <params>
                    <param name="arc" type="long"/>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <method name="get" type="void" line="54"/>
            <javadoc line="54">
                Generic handling of the &lt;CODE&gt;get&lt;/CODE&gt; operation.
                  &lt;p&gt;The actual implementation of this method will be generated
                  by mibgen. Usually, this implementation only delegates the
                  job to some other provided runtime class, which knows how to
                  access the MBean. The current toolkit thus provides two
                  implementations:
                  &lt;ul&gt;&lt;li&gt;The standard implementation will directly access the
                  MBean through a java reference,&lt;/li&gt;
                  &lt;li&gt;The generic implementation will access the MBean through
                  the MBean server.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Both implementations rely upon specific - and distinct, set of
                  mibgen generated methods.
                  &lt;p&gt; You can override this method if you need to implement some
                  specific policies for minimizing the accesses made to some remote
                  underlying resources.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException An error occurred while accessing
                      the MIB node.                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="78"/>
            <javadoc line="78">
                Generic handling of the &lt;CODE&gt;set&lt;/CODE&gt; operation.
                  &lt;p&gt;The actual implementation of this method will be generated
                  by mibgen. Usually, this implementation only delegates the
                  job to some other provided runtime class, which knows how to
                  access the MBean. The current toolkit thus provides two
                  implementations:
                  &lt;ul&gt;&lt;li&gt;The standard implementation will directly access the
                  MBean through a java reference,&lt;/li&gt;
                  &lt;li&gt;The generic implementation will access the MBean through
                  the MBean server.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Both implementations rely upon specific - and distinct, set of
                  mibgen generated methods.
                  &lt;p&gt; You can override this method if you need to implement some
                  specific policies for minimizing the accesses made to some remote
                  underlying resources.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException An error occurred while accessing
                      the MIB node.                    
                </exception>
            </javadoc>
            <method name="check" type="void" line="102"/>
            <javadoc line="102">
                Generic handling of the &lt;CODE&gt;check&lt;/CODE&gt; operation.
                  &lt;p&gt;The actual implementation of this method will be generated
                  by mibgen. Usually, this implementation only delegates the
                  job to some other provided runtime class, which knows how to
                  access the MBean. The current toolkit thus provides two
                  implementations:
                  &lt;ul&gt;&lt;li&gt;The standard implementation will directly access the
                  MBean through a java reference,&lt;/li&gt;
                  &lt;li&gt;The generic implementation will access the MBean through
                  the MBean server.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Both implementations rely upon specific - and distinct, set of
                  mibgen generated methods.
                  &lt;p&gt; You can override this method if you need to implement some
                  specific policies for minimizing the accesses made to some remote
                  underlying resources, or if you need to implement some consistency
                  checks between the different values provided in the varbind list.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException An error occurred while accessing
                      the MIB node.                    
                </exception>
            </javadoc>
        </class>
    </source>