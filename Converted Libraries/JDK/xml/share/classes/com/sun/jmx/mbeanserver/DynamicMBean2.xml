<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="javax.management.DynamicMBean"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.ObjectName"/>
        <interface name="DynamicMBean2">
            <implements interface="DynamicMBean"/>
            <javadoc line="32">
                A dynamic MBean that wraps an underlying resource.  A version of this
                  interface might eventually appear in the public JMX API.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getResource" type="Object" line="39"/>
            <javadoc line="39">
                The resource corresponding to this MBean.  This is the object whose
                  class name should be reflected by the MBean&apos;s
                  getMBeanInfo().getClassName() for example.  For a &quot;plain&quot;
                  DynamicMBean it will be &quot;this&quot;.  For an MBean that wraps another
                  object, like javax.management.StandardMBean, it will be the wrapped
                  object.                
            </javadoc>
            <method name="getClassName" type="String" line="49"/>
            <javadoc line="49">
                The name of this MBean&apos;s class, as used by permission checks.
                  This is typically equal to getResource().getClass().getName().
                  This method is typically faster, sometimes much faster,
                  than getMBeanInfo().getClassName(), but should return the same
                  result.                
            </javadoc>
            <method name="preRegister2" type="void" line="58"/>
            <javadoc line="58">
                Additional registration hook.  This method is called after{@link javax.management.MBeanRegistration#preRegister preRegister}.
                  Unlike that method, if it throws an exception and the MBean implements{@code MBeanRegistration}, then {@link javax.management.MBeanRegistration#postRegister postRegister(false)}will be called on the MBean.  This is the behavior that the MBean
                  expects for a problem that does not come from its own preRegister
                  method.                
            </javadoc>
            <method name="registerFailed" type="void" line="71"/>
            <javadoc line="71">
                Additional registration hook.  This method is called if preRegister
                  and preRegister2 succeed, but then the MBean cannot be registered
                  (for example because there is already another MBean of the same name).                
            </javadoc>
        </interface>
    </source>