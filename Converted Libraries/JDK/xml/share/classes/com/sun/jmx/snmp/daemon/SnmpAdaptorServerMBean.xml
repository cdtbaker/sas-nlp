<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.daemon">
        <import package="java.util.Vector"/>
        <import package="java.io.IOException"/>
        <import package="java.net.InetAddress"/>
        <import package="com.sun.jmx.snmp.SnmpPduFactory"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.SnmpVarBindList"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpTimeticks"/>
        <import package="com.sun.jmx.snmp.SnmpIpAddress"/>
        <import package="com.sun.jmx.snmp.SnmpPduPacket"/>
        <import package="com.sun.jmx.snmp.InetAddressAcl"/>
        <import package="com.sun.jmx.snmp.SnmpPeer"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibAgent"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibHandler"/>
        <import package="com.sun.jmx.snmp.agent.SnmpUserDataFactory"/>
        <interface name="SnmpAdaptorServerMBean">
            <implements interface="CommunicatorServerMBean"/>
            <comment line="61">
                GETTERS AND SETTERS
                --------------------                
            </comment>
            <comment line="283">
                GETTERS FOR SNMP GROUP (MIBII)
                -------------------------------                
            </comment>
            <comment line="423">
                PUBLIC METHODS
                ---------------                
            </comment>
            <javadoc line="52">
                Exposes the remote management interface of the {@link SnmpAdaptorServer} MBean.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <method name="getInetAddressAcl" type="InetAddressAcl" line="63"/>
            <javadoc line="63">
                Returns the Ip address based ACL used by this SNMP protocol adaptor.                
                <return>
                    The &lt;CODE&gt;InetAddressAcl&lt;/CODE&gt; implementation.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getTrapPort" type="Integer" line="70"/>
            <javadoc line="70">
                Returns the port used by this SNMP protocol adaptor for sending traps.
                  By default, port 162 is used.                
                <return>
                    The port number for sending SNMP traps.                    
                </return>
            </javadoc>
            <method name="setTrapPort" type="void" line="78"/>
            <javadoc line="78">
                Sets the port used by this SNMP protocol adaptor for sending traps.                
                <param>
                    port The port number for sending SNMP traps.                    
                </param>
            </javadoc>
            <method name="getInformPort" type="int" line="85"/>
            <javadoc line="85">
                Returns the port used by this SNMP protocol adaptor for sending inform requests.
                  By default, port 162 is used.                
                <return>
                    The port number for sending SNMP inform requests.                    
                </return>
            </javadoc>
            <method name="setInformPort" type="void" line="93"/>
            <javadoc line="93">
                Sets the port used by this SNMP protocol adaptor for sending inform requests.                
                <param>
                    port The port number for sending SNMP inform requests.                    
                </param>
            </javadoc>
            <method name="getServedClientCount" type="int" line="100"/>
            <javadoc line="100">
                Gets the number of managers that have been processed by this SNMP protocol adaptor
                  since its creation.                
                <return>
                    The number of managers handled by this SNMP protocol adaptor
                      since its creation. This counter is not reset by the &lt;CODE&gt;stop&lt;/CODE&gt; method.                    
                </return>
            </javadoc>
            <method name="getActiveClientCount" type="int" line="109"/>
            <javadoc line="109">
                Gets the number of managers currently being processed by this
                  SNMP protocol adaptor.                
                <return>
                    The number of managers currently being processed by this
                      SNMP protocol adaptor.                    
                </return>
            </javadoc>
            <method name="getMaxActiveClientCount" type="int" line="118"/>
            <javadoc line="118">
                Gets the maximum number of managers that this SNMP protocol adaptor can
                  process concurrently.                
                <return>
                    The maximum number of managers that this SNMP protocol adaptor can
                      process concurrently.                    
                </return>
            </javadoc>
            <method name="setMaxActiveClientCount" type="void" line="127"/>
            <javadoc line="127">
                Sets the maximum number of managers this SNMP protocol adaptor can
                  process concurrently.                
                <param>
                    c The number of managers.                    
                </param>
                <exception>
                    java.lang.IllegalStateException This method has been invoked
                      while the communicator was &lt;CODE&gt;ONLINE&lt;/CODE&gt; or &lt;CODE&gt;STARTING&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="getProtocol" type="String" line="138"/>
            <javadoc line="138">
                Returns the protocol of this SNMP protocol adaptor.                
                <return>
                    The string &quot;snmp&quot;.                    
                </return>
            </javadoc>
            <method name="getBufferSize" type="Integer" line="145"/>
            <javadoc line="145">
                Returns the buffer size of this SNMP protocol adaptor.
                  By default, buffer size 1024 is used.                
                <return>
                    The buffer size.                    
                </return>
            </javadoc>
            <method name="setBufferSize" type="void" line="153"/>
            <javadoc line="153">
                Sets the buffer size of this SNMP protocol adaptor.                
                <param>
                    s The buffer size.                    
                </param>
                <exception>
                    java.lang.IllegalStateException This method has been invoked
                      while the communicator was &lt;CODE&gt;ONLINE&lt;/CODE&gt; or &lt;CODE&gt;STARTING&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="getMaxTries" type="int" line="163"/>
            <javadoc line="163">
                Gets the number of times to try sending an inform request before giving up.                
                <return>
                    The maximun number of tries.                    
                </return>
            </javadoc>
            <method name="setMaxTries" type="void" line="169"/>
            <javadoc line="169">
                Changes the maximun number of times to try sending an inform request before giving up.                
                <param>
                    newMaxTries The maximun number of tries.                    
                </param>
            </javadoc>
            <method name="getTimeout" type="int" line="175"/>
            <javadoc line="175">
                Gets the timeout to wait for an inform response from the manager.                
                <return>
                    The value of the timeout property.                    
                </return>
            </javadoc>
            <method name="setTimeout" type="void" line="181"/>
            <javadoc line="181">
                Changes the timeout to wait for an inform response from the manager.                
                <param>
                    newTimeout The timeout (in milliseconds).                    
                </param>
            </javadoc>
            <method name="getPduFactory" type="SnmpPduFactory" line="187"/>
            <javadoc line="187">
                Returns the message factory of this SNMP protocol adaptor.                
                <return>
                    The factory object.                    
                </return>
            </javadoc>
            <method name="setPduFactory" type="void" line="194"/>
            <javadoc line="194">
                Sets the message factory of this SNMP protocol adaptor.                
                <param>
                    factory The factory object (null means the default factory).                    
                </param>
            </javadoc>
            <method name="setUserDataFactory" type="void" line="202"/>
            <javadoc line="202">
                Set the user-data factory of this SNMP protocol adaptor.                
                <param>
                    factory The factory object (null means no factory).                    
                </param>
                <see>
                    com.sun.jmx.snmp.agent.SnmpUserDataFactory                    
                </see>
            </javadoc>
            <method name="getUserDataFactory" type="SnmpUserDataFactory" line="210"/>
            <javadoc line="210">
                Get the user-data factory associated with this SNMP protocol adaptor.                
                <return>
                    The factory object (null means no factory).                    
                </return>
                <see>
                    com.sun.jmx.snmp.agent.SnmpUserDataFactory                    
                </see>
            </javadoc>
            <method name="getAuthTrapEnabled" type="boolean" line="218"/>
            <javadoc line="218">
                Returns &lt;CODE&gt;true&lt;/CODE&gt; if authentication traps are enabled.
                  &lt;P&gt;
                  When this feature is enabled, the SNMP protocol adaptor sends
                  an &lt;CODE&gt;authenticationFailure&lt;/CODE&gt; trap each time an authentication fails.
                  &lt;P&gt;
                  The default behaviour is to send authentication traps.                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if authentication traps are enabled, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="setAuthTrapEnabled" type="void" line="230"/>
            <javadoc line="230">
                Sets the flag indicating if traps need to be sent in case of authentication failure.                
                <param>
                    enabled Flag indicating if traps need to be sent.                    
                </param>
            </javadoc>
            <method name="getAuthRespEnabled" type="boolean" line="237"/>
            <javadoc line="237">
                Returns &lt;code&gt;true&lt;/code&gt; if this SNMP protocol adaptor sends a response in case
                  of authentication failure.
                  &lt;P&gt;
                  When this feature is enabled, the SNMP protocol adaptor sends a response with &lt;CODE&gt;noSuchName&lt;/CODE&gt;
                  or &lt;CODE&gt;readOnly&lt;/CODE&gt; when the authentication failed. If the flag is disabled, the
                  SNMP protocol adaptor trashes the PDU silently.
                  &lt;P&gt;
                  The default behavior is to send responses.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if responses are sent.                    
                </return>
            </javadoc>
            <method name="setAuthRespEnabled" type="void" line="251"/>
            <javadoc line="251">
                Sets the flag indicating if responses need to be sent in case of authentication failure.                
                <param>
                    enabled Flag indicating if responses need to be sent.                    
                </param>
            </javadoc>
            <method name="getEnterpriseOid" type="String" line="258"/>
            <javadoc line="258">
                Returns the enterprise OID. It is used by {@link #snmpV1Trap snmpV1Trap} to fill
                  the &apos;enterprise&apos; field of the trap request.                
                <return>
                    The OID in string format &quot;x.x.x.x&quot;.                    
                </return>
            </javadoc>
            <method name="setEnterpriseOid" type="void" line="266"/>
            <javadoc line="266">
                Sets the enterprise OID.                
                <param>
                    oid The OID in string format &quot;x.x.x.x&quot;.                    
                </param>
                <exception>
                    IllegalArgumentException The string format is incorrect                    
                </exception>
            </javadoc>
            <method name="getMibs" type="String[]" line="275"/>
            <javadoc line="275">
                Returns the names of the MIBs available in this SNMP protocol adaptor.                
                <return>
                    An array of MIB names.                    
                </return>
            </javadoc>
            <method name="getSnmpOutTraps" type="Long" line="285"/>
            <javadoc line="285">
                Returns the &lt;CODE&gt;snmpOutTraps&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutTraps&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpOutGetResponses" type="Long" line="292"/>
            <javadoc line="292">
                Returns the &lt;CODE&gt;snmpOutGetResponses&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutGetResponses&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpOutGenErrs" type="Long" line="299"/>
            <javadoc line="299">
                Returns the &lt;CODE&gt;snmpOutGenErrs&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutGenErrs&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpOutBadValues" type="Long" line="306"/>
            <javadoc line="306">
                Returns the &lt;CODE&gt;snmpOutBadValues&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutBadValues&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpOutNoSuchNames" type="Long" line="313"/>
            <javadoc line="313">
                Returns the &lt;CODE&gt;snmpOutNoSuchNames&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutNoSuchNames&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpOutTooBigs" type="Long" line="320"/>
            <javadoc line="320">
                Returns the &lt;CODE&gt;snmpOutTooBigs&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutTooBigs&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInASNParseErrs" type="Long" line="327"/>
            <javadoc line="327">
                Returns the &lt;CODE&gt;snmpInASNParseErrs&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInASNParseErrs&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInBadCommunityUses" type="Long" line="334"/>
            <javadoc line="334">
                Returns the &lt;CODE&gt;snmpInBadCommunityUses&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInBadCommunityUses&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInBadCommunityNames" type="Long" line="341"/>
            <javadoc line="341">
                Returns the &lt;CODE&gt;snmpInBadCommunityNames&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInBadCommunityNames&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInBadVersions" type="Long" line="348"/>
            <javadoc line="348">
                Returns the &lt;CODE&gt;snmpInBadVersions&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInBadVersions&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpOutPkts" type="Long" line="355"/>
            <javadoc line="355">
                Returns the &lt;CODE&gt;snmpOutPkts&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutPkts&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInPkts" type="Long" line="362"/>
            <javadoc line="362">
                Returns the &lt;CODE&gt;snmpInPkts&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInPkts&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInGetRequests" type="Long" line="369"/>
            <javadoc line="369">
                Returns the &lt;CODE&gt;snmpInGetRequests&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInGetRequests&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInGetNexts" type="Long" line="376"/>
            <javadoc line="376">
                Returns the &lt;CODE&gt;snmpInGetNexts&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInGetNexts&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInSetRequests" type="Long" line="383"/>
            <javadoc line="383">
                Returns the &lt;CODE&gt;snmpInSetRequests&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInSetRequests&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInTotalSetVars" type="Long" line="390"/>
            <javadoc line="390">
                Returns the &lt;CODE&gt;snmpInTotalSetVars&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInTotalSetVars&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInTotalReqVars" type="Long" line="397"/>
            <javadoc line="397">
                Returns the &lt;CODE&gt;snmpInTotalReqVars&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInTotalReqVars&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpSilentDrops" type="Long" line="404"/>
            <javadoc line="404">
                Returns the &lt;CODE&gt;snmpSilentDrops&lt;/CODE&gt; value defined in rfc 1907 NMPv2-MIB .                
                <return>
                    The &lt;CODE&gt;snmpSilentDrops&lt;/CODE&gt; value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getSnmpProxyDrops" type="Long" line="413"/>
            <javadoc line="413">
                Returns the &lt;CODE&gt;snmpProxyDrops&lt;/CODE&gt; value defined in rfc 1907 NMPv2-MIB .                
                <return>
                    The &lt;CODE&gt;snmpProxyDrops&lt;/CODE&gt; value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="addMib" type="SnmpMibHandler" line="425"/>
            <javadoc line="425">
                Adds a new MIB in the SNMP MIB handler.
                  This method is called automatically by {@link com.sun.jmx.snmp.agent.SnmpMibAgent#setSnmpAdaptor(SnmpMibHandler)}and {@link com.sun.jmx.snmp.agent.SnmpMibAgent#setSnmpAdaptorName(ObjectName)}and should not be called directly.                
                <param>
                    mib The MIB to add.                    
                </param>
                <return>
                    A reference to the SNMP MIB handler.                    
                </return>
                <exception>
                    IllegalArgumentException If the parameter is null.                    
                </exception>
            </javadoc>
            <method name="addMib" type="SnmpMibHandler" line="439"/>
            <javadoc line="439">
                Adds a new MIB in the SNMP MIB handler.                
                <param>
                    mib The MIB to add.                    
                </param>
                <param>
                    oids The set of OIDs this agent implements.                    
                </param>
                <return>
                    A reference to the SNMP MIB handler.                    
                </return>
                <exception>
                    IllegalArgumentException If the parameter is null.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="removeMib" type="boolean" line="453"/>
            <javadoc line="453">
                Removes the specified MIB from the SNMP protocol adaptor.
                  This method is called automatically by {@link com.sun.jmx.snmp.agent.SnmpMibAgent#setSnmpAdaptor(SnmpMibHandler)}and {@link com.sun.jmx.snmp.agent.SnmpMibAgent#setSnmpAdaptorName(ObjectName)}and should not be called directly.                
                <param>
                    mib The MIB to be removed.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified &lt;CODE&gt;mib&lt;/CODE&gt; was a MIB included in the SNMP MIB handler,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="snmpV1Trap" type="void" line="466"/>
            <javadoc line="466">
                Sends a trap using SNMP V1 trap format.
                  &lt;BR&gt;The trap is sent to each destination defined in the ACL file (if available).
                  If no ACL file or no destinations are available, the trap is sent to the local host.                
                <param>
                    generic The generic number of the trap.                    
                </param>
                <param>
                    specific The specific number of the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <exception>
                    IOException An I/O error occured while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="snmpV1Trap" type="void" line="481"/>
            <javadoc line="481">
                Sends a trap using SNMP V1 trap format.
                  &lt;BR&gt;The trap is sent to the specified &lt;CODE&gt;InetAddress&lt;/CODE&gt; destination
                  using the specified community string (and the ACL file is not used).                
                <param>
                    address The &lt;CODE&gt;InetAddress&lt;/CODE&gt; destination of the trap.                    
                </param>
                <param>
                    cs The community string to be used for the trap.                    
                </param>
                <param>
                    generic The generic number of the trap.                    
                </param>
                <param>
                    specific The specific number of the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="snmpV1Trap" type="void" line="499"/>
            <javadoc line="499">
                Sends a trap using SNMP V1 trap format.
                  &lt;BR&gt;The trap is sent to the specified &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; destination.
                  The community string used is the one located in the &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; parameters (&lt;CODE&gt;SnmpParameters.getRdCommunity() &lt;/CODE&gt;).                
                <param>
                    peer The &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; destination of the trap.                    
                </param>
                <param>
                    agentAddr The agent address to be used for the trap.                    
                </param>
                <param>
                    enterpOid The enterprise OID to be used for the trap.                    
                </param>
                <param>
                    generic The generic number of the trap.                    
                </param>
                <param>
                    specific The specific number of the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <param>
                    time The time stamp (overwrite the current time).                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="snmpV2Trap" type="void" line="525"/>
            <javadoc line="525">
                Sends a trap using SNMP V2 trap format.
                  &lt;BR&gt;The trap is sent to the specified &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; destination.
                  &lt;BR&gt;The community string used is the one located in the &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; parameters (&lt;CODE&gt;SnmpParameters.getRdCommunity() &lt;/CODE&gt;).
                  &lt;BR&gt;The variable list included in the outgoing trap is composed of the following items:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;sysUpTime.0&lt;/CODE&gt; with the value specified by &lt;CODE&gt;time&lt;/CODE&gt;
                  &lt;LI&gt;&lt;CODE&gt;snmpTrapOid.0&lt;/CODE&gt; with the value specified by &lt;CODE&gt;trapOid&lt;/CODE&gt;
                  &lt;LI&gt;&lt;CODE&gt;all the (oid,values)&lt;/CODE&gt; from the specified &lt;CODE&gt;varBindList&lt;/CODE&gt;
                  &lt;/UL&gt;                
                <param>
                    peer The &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; destination of the trap.                    
                </param>
                <param>
                    trapOid The OID identifying the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <param>
                    time The time stamp (overwrite the current time).                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="snmpV2Trap" type="void" line="551"/>
            <javadoc line="551">
                Sends a trap using SNMP V2 trap format.
                  &lt;BR&gt;The trap is sent to each destination defined in the ACL file (if available).
                  If no ACL file or no destinations are available, the trap is sent to the local host.
                  &lt;BR&gt;The variable list included in the outgoing trap is composed of the following items:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;sysUpTime.0&lt;/CODE&gt; with its current value
                  &lt;LI&gt;&lt;CODE&gt;snmpTrapOid.0&lt;/CODE&gt; with the value specified by &lt;CODE&gt;trapOid&lt;/CODE&gt;
                  &lt;LI&gt;&lt;CODE&gt;all the (oid,values)&lt;/CODE&gt; from the specified &lt;CODE&gt;varBindList&lt;/CODE&gt;
                  &lt;/UL&gt;                
                <param>
                    trapOid The OID identifying the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <exception>
                    IOException An I/O error occured while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="snmpV2Trap" type="void" line="571"/>
            <javadoc line="571">
                Sends a trap using SNMP V2 trap format.
                  &lt;BR&gt;The trap is sent to the specified &lt;CODE&gt;InetAddress&lt;/CODE&gt; destination
                  using the specified community string (and the ACL file is not used).
                  &lt;BR&gt;The variable list included in the outgoing trap is composed of the following items:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;sysUpTime.0&lt;/CODE&gt; with its current value
                  &lt;LI&gt;&lt;CODE&gt;snmpTrapOid.0&lt;/CODE&gt; with the value specified by &lt;CODE&gt;trapOid&lt;/CODE&gt;
                  &lt;LI&gt;&lt;CODE&gt;all the (oid,values)&lt;/CODE&gt; from the specified &lt;CODE&gt;varBindList&lt;/CODE&gt;
                  &lt;/UL&gt;                
                <param>
                    address The &lt;CODE&gt;InetAddress&lt;/CODE&gt; destination of the trap.                    
                </param>
                <param>
                    cs The community string to be used for the trap.                    
                </param>
                <param>
                    trapOid The OID identifying the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="snmpPduTrap" type="void" line="593"/>
            <javadoc line="593">
                Send the specified trap PDU to the passed &lt;CODE&gt;InetAddress&lt;/CODE&gt;.                
                <param>
                    address The destination address.                    
                </param>
                <param>
                    pdu The pdu to send.                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="snmpPduTrap" type="void" line="604"/>
            <javadoc line="604">
                Send the specified trap PDU to the passed &lt;CODE&gt;SnmpPeer&lt;/CODE&gt;.                
                <param>
                    peer The destination peer. The Read community string is used of &lt;CODE&gt;SnmpParameters&lt;/CODE&gt; is used as the trap community string.                    
                </param>
                <param>
                    pdu The pdu to send.                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="snmpInformRequest" type="Vector" line="616"/>
            <javadoc line="616">
                Sends an inform using SNMP V2 inform request format.
                  &lt;BR&gt;The inform request is sent to each destination defined in the ACL file (if available).
                  If no ACL file or no destinations are available, the inform request is sent to the local host.
                  &lt;BR&gt;The variable list included in the outgoing inform request is composed of the following items:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;sysUpTime.0&lt;/CODE&gt; with its current value
                  &lt;LI&gt;&lt;CODE&gt;snmpTrapOid.0&lt;/CODE&gt; with the value specified by &lt;CODE&gt;trapOid&lt;/CODE&gt;
                  &lt;LI&gt;&lt;CODE&gt;all the (oid,values)&lt;/CODE&gt; from the specified &lt;CODE&gt;varBindList&lt;/CODE&gt;
                  &lt;/UL&gt;
                  To send an inform request, the SNMP adaptor server must be active.                
                <param>
                    cb The callback that is invoked when a request is complete.                    
                </param>
                <param>
                    trapOid The OID identifying the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <return>
                    A vector of {@link com.sun.jmx.snmp.daemon.SnmpInformRequest} objects.
                      &lt;P&gt;If there is no destination host for this inform request, the returned vector will be empty.                    
                </return>
                <exception>
                    IllegalStateException  This method has been invoked while the SNMP adaptor server was not active.                    
                </exception>
                <exception>
                    IOException An I/O error occurred while sending the inform request.                    
                </exception>
                <exception>
                    SnmpStatusException If the inform request exceeds the limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="snmpInformRequest" type="SnmpInformRequest" line="642"/>
            <javadoc line="642">
                Sends an inform using SNMP V2 inform request format.
                  &lt;BR&gt;The inform is sent to the specified &lt;CODE&gt;InetAddress&lt;/CODE&gt; destination
                  using the specified community string.
                  &lt;BR&gt;The variable list included in the outgoing inform request is composed of the following items:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;sysUpTime.0&lt;/CODE&gt; with its current value
                  &lt;LI&gt;&lt;CODE&gt;snmpTrapOid.0&lt;/CODE&gt; with the value specified by &lt;CODE&gt;trapOid&lt;/CODE&gt;
                  &lt;LI&gt;&lt;CODE&gt;all the (oid,values)&lt;/CODE&gt; from the specified &lt;CODE&gt;varBindList&lt;/CODE&gt;
                  &lt;/UL&gt;
                  To send an inform request, the SNMP adaptor server must be active.                
                <param>
                    address The &lt;CODE&gt;InetAddress&lt;/CODE&gt; destination for this inform request.                    
                </param>
                <param>
                    cs The community string to be used for the inform request.                    
                </param>
                <param>
                    cb The callback that is invoked when a request is complete.                    
                </param>
                <param>
                    trapOid The OID identifying the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <return>
                    The inform request object.                    
                </return>
                <exception>
                    IllegalStateException  This method has been invoked while the SNMP adaptor server was not active.                    
                </exception>
                <exception>
                    IOException An I/O error occurred while sending the inform request.                    
                </exception>
                <exception>
                    SnmpStatusException If the inform request exceeds the limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="snmpInformRequest" type="SnmpInformRequest" line="671"/>
            <javadoc line="671">
                Sends an inform using SNMP V2 inform request format.
                  &lt;BR&gt;The inform is sent to the specified &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; destination.
                  &lt;BR&gt; The community string used is the one located in the &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; parameters (&lt;CODE&gt;SnmpParameters.getInformCommunity() &lt;/CODE&gt;).
                  &lt;BR&gt;The variable list included in the outgoing inform is composed of the following items:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;sysUpTime.0&lt;/CODE&gt; with its current value
                  &lt;LI&gt;&lt;CODE&gt;snmpTrapOid.0&lt;/CODE&gt; with the value specified by &lt;CODE&gt;trapOid&lt;/CODE&gt;
                  &lt;LI&gt;&lt;CODE&gt;all the (oid,values)&lt;/CODE&gt; from the specified &lt;CODE&gt;varBindList&lt;/CODE&gt;
                  &lt;/UL&gt;
                  To send an inform request, the SNMP adaptor server must be active.                
                <param>
                    peer The &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; destination for this inform request.                    
                </param>
                <param>
                    cb The callback that is invoked when a request is complete.                    
                </param>
                <param>
                    trapOid The OID identifying the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <return>
                    The inform request object.                    
                </return>
                <exception>
                    IllegalStateException  This method has been invoked while the SNMP adaptor server was not active.                    
                </exception>
                <exception>
                    IOException An I/O error occurred while sending the inform request.                    
                </exception>
                <exception>
                    SnmpStatusException If the inform request exceeds the limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
        </interface>
    </source>