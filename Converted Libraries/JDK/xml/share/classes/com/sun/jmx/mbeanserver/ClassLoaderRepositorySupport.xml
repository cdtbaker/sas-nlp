<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="com.sun.jmx.defaults.JmxProperties.MBEANSERVER_LOGGER"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.loading.PrivateClassLoader"/>
        <class name="ClassLoaderRepositorySupport" line="40">
            <comment line="51">
                We associate an optional ObjectName with each entry so that
                we can remove the correct entry when unregistering an MBean
                that is a ClassLoader.  The same object could be registered
                under two different names (even though this is not recommended)
                so if we did not do this we could disturb the defined                
            </comment>
            <comment line="139">
                from javax.management.loading.DefaultLoaderRepository                
            </comment>
            <comment line="146">
                from javax.management.loading.DefaultLoaderRepository                
            </comment>
            <implements interface="ModifiableClassLoaderRepository"/>
            <javadoc line="40">
                This class keeps the list of Class Loaders registered in the MBean Server.
                  It provides the necessary methods to load classes using the
                  registered Class Loaders.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <class name="LoaderEntry" line="56">
                <comment line="58">
                    can be null                    
                </comment>
                <declaration name="name" type="ObjectName" line="57"/>
                <declaration name="loader" type="ClassLoader" line="58"/>
                <method name="LoaderEntry" type="constructor" line="60">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="loader" type="ClassLoader"/>
                    </params>
                </method>
            </class>
            <declaration name="EMPTY_LOADER_ARRAY" type="LoaderEntry[]" line="66"/>
            <declaration name="loaders" type="LoaderEntry[]" line="68"/>
            <javadoc line="68">
                List of class loaders
                  Only read-only actions should be performed on this object.
                  We do O(n) operations on this array, e.g. when removing
                  a ClassLoader.  The assumption is that the number of elements
                  is small, probably less than ten, and that the vast majority
                  of operations are searches (loadClass) which are by definition
                  linear.                
            </javadoc>
            <javadoc line="80">
                Same behavior as add(Object o) in {@link java.util.List}.
                  Replace the loader list with a new one in which the new
                  loader has been added.                
            </javadoc>
            <method name="add" type="boolean" line="85">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="cl" type="ClassLoader"/>
                </params>
                <declaration name="l" type="List&lt;LoaderEntry&gt;" line="86"/>
            </method>
            <javadoc line="93">
                Same behavior as remove(Object o) in {@link java.util.List}.
                  Replace the loader list with a new one in which the old loader
                  has been removed.
                  The ObjectName may be null, in which case the entry to
                  be removed must also have a null ObjectName and the ClassLoader
                  values must match.  If the ObjectName is not null, then
                  the first entry with a matching ObjectName is removed,
                  regardless of whether ClassLoader values match.  (In fact,
                  the ClassLoader parameter will usually be null in this case.)                
            </javadoc>
            <method name="remove" type="boolean" line="105">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="cl" type="ClassLoader"/>
                </params>
                <declaration name="size" type="int" line="106"/>
                <scope line="107">
                    <declaration name="entry" type="LoaderEntry" line="108"/>
                    <declaration name="match" type="boolean" line="109"/>
                    <scope line="113">
                        <declaration name="newloaders" type="LoaderEntry[]" line="114"/>
                    </scope>
                </scope>
            </method>
            <declaration name="search" type="Map&lt;String,List&lt;ClassLoader&gt;&gt;" line="126"/>
            <javadoc line="126">
                List of valid search                
            </javadoc>
            <declaration name="loadersWithNames" type="Map&lt;ObjectName,ClassLoader&gt;" line="132"/>
            <javadoc line="132">
                List of named class loaders.                
            </javadoc>
            <method name="loadClass" type="Class<?>" line="140">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <method name="loadClassWithout" type="Class<?>" line="147">
                <params>
                    <param name="without" type="ClassLoader"/>
                    <param name="className" type="String"/>
                </params>
                <comment line="154">
                    without is null =&gt; just behave as loadClass                    
                </comment>
                <comment line="155">
                                        
                </comment>
                <comment line="159">
                    We must try to load the class without the given loader.                    
                </comment>
                <comment line="160">
                                        
                </comment>
                <scope line="148"/>
                <scope line="162"/>
                <scope line="164"/>
            </method>
            <method name="loadClassBefore" type="Class<?>" line="171">
                <params>
                    <param name="stop" type="ClassLoader"/>
                    <param name="className" type="String"/>
                </params>
                <scope line="172"/>
                <scope line="182"/>
                <scope line="184"/>
            </method>
            <method name="loadClass" type="Class<?>" line="194">
                <params>
                    <param name="list" type="LoaderEntry"/>
                    <param name="className" type="String"/>
                    <param name="without" type="ClassLoader"/>
                    <param name="stop" type="ClassLoader"/>
                </params>
                <comment line="199">
                    bootstrap class loader                    
                </comment>
                <comment line="210">
                    We used to have a special case for &quot;instanceof
                    MLet&quot; here, where we invoked the method
                    loadClass(className, null) to prevent infinite
                    recursion.  But the rule whereby the MLet only
                    consults loaders that precede it in the CLR (via
                    loadClassBefore) means that the recursion can&apos;t
                    happen, and the test here caused some legitimate
                    classloading to fail.  For example, if you have
                    dependencies C-&gt;D-&gt;E with loaders {E D C} in the
                    CLR in that order, you would expect to be able to
                    load C.  The problem is that while resolving D, CLR                    
                </comment>
                <comment line="224">
                    OK: continue with next class                    
                </comment>
                <declaration name="size" type="int" line="195"/>
                <scope line="196">
                    <scope line="197">
                        <declaration name="cl" type="ClassLoader" line="198"/>
                        <scope line="205"/>
                    </scope>
                    <scope line="223"/>
                </scope>
            </method>
            <method name="startValidSearch" type="void" line="233">
                <params>
                    <param name="aloader" type="ClassLoader"/>
                    <param name="className" type="String"/>
                </params>
                <comment line="234">
                    Check if we have such a current search                    
                </comment>
                <comment line="235">
                                        
                </comment>
                <comment line="247">
                    Add an entry                    
                </comment>
                <comment line="248">
                                        
                </comment>
                <declaration name="excluded" type="List&lt;ClassLoader&gt;" line="236"/>
                <scope line="237">
                    <scope line="238"/>
                </scope>
                <scope line="249"/>
                <scope line="254"/>
            </method>
            <method name="stopValidSearch" type="void" line="263">
                <params>
                    <param name="aloader" type="ClassLoader"/>
                    <param name="className" type="String"/>
                </params>
                <comment line="265">
                    Retrieve the search.                    
                </comment>
                <comment line="266">
                                        
                </comment>
                <declaration name="excluded" type="List&lt;ClassLoader&gt;" line="267"/>
                <scope line="268">
                    <scope line="270"/>
                </scope>
            </method>
            <method name="addClassLoader" type="void" line="279">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <method name="removeClassLoader" type="void" line="283">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <method name="addClassLoader" type="void" line="288">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <method name="removeClassLoader" type="void" line="294">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="loader" type="ClassLoader" line="295"/>
            </method>
            <method name="getClassLoader" type="ClassLoader" line="300">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
        </class>
    </source>