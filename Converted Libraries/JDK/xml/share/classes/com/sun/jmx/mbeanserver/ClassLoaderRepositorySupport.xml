<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="com.sun.jmx.defaults.JmxProperties.MBEANSERVER_LOGGER"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.loading.PrivateClassLoader"/>
        <class name="ClassLoaderRepositorySupport" line="11">
            <implements interface="ModifiableClassLoaderRepository"/>
            <javadoc line="11">
                This class keeps the list of Class Loaders registered in the MBean Server.
                  It provides the necessary methods to load classes using the
                  registered Class Loaders.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <class name="LoaderEntry" line="18">
                <declaration name="name" type="ObjectName" line="19"/>
                <declaration name="loader" type="ClassLoader" line="20"/>
                <method name="LoaderEntry" type="constructor" line="21">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="loader" type="ClassLoader"/>
                    </params>
                </method>
            </class>
            <declaration name="EMPTY_LOADER_ARRAY" type="LoaderEntry[]" line="26"/>
            <declaration name="loaders" type="LoaderEntry[]" line="27"/>
            <javadoc line="27">
                List of class loaders
                  Only read-only actions should be performed on this object.
                  We do O(n) operations on this array, e.g. when removing
                  a ClassLoader.  The assumption is that the number of elements
                  is small, probably less than ten, and that the vast majority
                  of operations are searches (loadClass) which are by definition
                  linear.                
            </javadoc>
            <javadoc line="37">
                Same behavior as add(Object o) in {@link java.util.List}.
                  Replace the loader list with a new one in which the new
                  loader has been added.                
            </javadoc>
            <method name="add" type="boolean" line="42">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="cl" type="ClassLoader"/>
                </params>
                <declaration name="l" type="List&amp;lt;LoaderEntry&amp;gt;" line="43"/>
            </method>
            <javadoc line="48">
                Same behavior as remove(Object o) in {@link java.util.List}.
                  Replace the loader list with a new one in which the old loader
                  has been removed.
                  The ObjectName may be null, in which case the entry to
                  be removed must also have a null ObjectName and the ClassLoader
                  values must match.  If the ObjectName is not null, then
                  the first entry with a matching ObjectName is removed,
                  regardless of whether ClassLoader values match.  (In fact,
                  the ClassLoader parameter will usually be null in this case.)                
            </javadoc>
            <method name="remove" type="boolean" line="59">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="cl" type="ClassLoader"/>
                </params>
                <declaration name="size" type="int" line="60"/>
                <scope line="61">
                    <declaration name="entry" type="LoaderEntry" line="62"/>
                    <declaration name="match" type="boolean" line="63"/>
                    <scope line="64">
                        <declaration name="newloaders" type="LoaderEntry[]" line="65"/>
                    </scope>
                </scope>
            </method>
            <declaration name="search" type="Map&amp;lt;String,List&amp;lt;ClassLoader&amp;gt;&amp;gt;" line="74"/>
            <javadoc line="74">
                List of valid search                
            </javadoc>
            <declaration name="loadersWithNames" type="Map&amp;lt;ObjectName,ClassLoader&amp;gt;" line="78"/>
            <javadoc line="78">
                List of named class loaders.                
            </javadoc>
            <method name="loadClass" type="Class&lt;?&gt;" line="82">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <method name="loadClassWithout" type="Class&lt;?&gt;" line="85">
                <params>
                    <param name="without" type="ClassLoader"/>
                    <param name="className" type="String"/>
                </params>
                <scope line="86"/>
                <scope line="91"/>
                <scope line="94"/>
            </method>
            <method name="loadClassBefore" type="Class&lt;?&gt;" line="98">
                <params>
                    <param name="stop" type="ClassLoader"/>
                    <param name="className" type="String"/>
                </params>
                <scope line="99"/>
                <scope line="104"/>
                <scope line="107"/>
            </method>
            <method name="loadClass" type="Class&lt;?&gt;" line="111">
                <params>
                    <param name="list" type="LoaderEntry"/>
                    <param name="className" type="String"/>
                    <param name="without" type="ClassLoader"/>
                    <param name="stop" type="ClassLoader"/>
                </params>
                <declaration name="size" type="int" line="112"/>
                <scope line="113">
                    <scope line="114">
                        <declaration name="cl" type="ClassLoader" line="115"/>
                        <scope line="119"/>
                    </scope>
                    <scope line="124"/>
                </scope>
            </method>
            <method name="startValidSearch" type="void" line="129">
                <params>
                    <param name="aloader" type="ClassLoader"/>
                    <param name="className" type="String"/>
                </params>
                <declaration name="excluded" type="List&amp;lt;ClassLoader&amp;gt;" line="130"/>
                <scope line="131">
                    <scope line="132"/>
                </scope>
                <scope line="137"/>
                <scope line="142"/>
            </method>
            <method name="stopValidSearch" type="void" line="146">
                <params>
                    <param name="aloader" type="ClassLoader"/>
                    <param name="className" type="String"/>
                </params>
                <declaration name="excluded" type="List&amp;lt;ClassLoader&amp;gt;" line="147"/>
                <scope line="148">
                    <scope line="150"/>
                </scope>
            </method>
            <method name="addClassLoader" type="void" line="155">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <method name="removeClassLoader" type="void" line="158">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <method name="addClassLoader" type="void" line="161">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <method name="removeClassLoader" type="void" line="165">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="loader" type="ClassLoader" line="166"/>
            </method>
            <method name="getClassLoader" type="ClassLoader" line="169">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
        </class>
    </source>