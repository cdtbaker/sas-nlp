<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.agent">
        <import package="java.io.Serializable"/>
        <import package="java.util.Date"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.ListenerNotFoundException"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationBroadcaster"/>
        <import package="javax.management.NotificationFilter"/>
        <import package="javax.management.NotificationListener"/>
        <import package="javax.management.ObjectName"/>
        <import package="com.sun.jmx.defaults.JmxProperties.SNMP_ADAPTOR_LOGGER"/>
        <import package="com.sun.jmx.snmp.EnumRowStatus"/>
        <import package="com.sun.jmx.snmp.SnmpInt"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.SnmpValue"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <class name="SnmpMibTable" line="51">
            <extends class="SnmpMibNode"/>
            <comment line="103">
                -------------------------------------------------------------------
                 PUBLIC METHODS
                 -------------------------------------------------------------------                
            </comment>
            <comment line="221">
                ---------------------------------------------------------------------
                
                 Implements the method defined in SnmpMibNode.
                
                 ---------------------------------------------------------------------                
            </comment>
            <comment line="295">
                ---------------------------------------------------------------------
                
                 Implements the method defined in SnmpMibNode.
                
                 ---------------------------------------------------------------------                
            </comment>
            <comment line="359">
                ---------------------------------------------------------------------
                
                 Implements the method defined in SnmpMibNode.
                
                 ---------------------------------------------------------------------                
            </comment>
            <comment line="740">
                EVENT STUFF
                ------------                
            </comment>
            <comment line="855">
                ----------------------------------------------------------------------
                 PROTECTED METHODS - RowStatus
                 ----------------------------------------------------------------------                
            </comment>
            <comment line="1512">
                -------------------------------------------------------------------
                 PROTECTED METHODS - get next
                 -------------------------------------------------------------------                
            </comment>
            <comment line="1677">
                -------------------------------------------------------------------
                 Abstract Protected Methods
                 -------------------------------------------------------------------                
            </comment>
            <comment line="1774">
                ----------------------------------------------------------------------
                 PACKAGE METHODS
                 ----------------------------------------------------------------------                
            </comment>
            <comment line="1811">
                ---------------------------------------------------------------------
                
                 Register an exception when checking the RowStatus variable
                
                 ---------------------------------------------------------------------                
            </comment>
            <comment line="1825">
                ---------------------------------------------------------------------
                
                 Register an exception when checking the RowStatus variable
                
                 ---------------------------------------------------------------------                
            </comment>
            <comment line="1839">
                ---------------------------------------------------------------------
                
                 Implements the method defined in SnmpMibNode.
                
                 ---------------------------------------------------------------------                
            </comment>
            <comment line="1907">
                ---------------------------------------------------------------------
                
                 Implements the method defined in SnmpMibNode. The algorithm is very
                 largely inspired from the original getNext() method.
                
                 ---------------------------------------------------------------------                
            </comment>
            <comment line="2190">
                ----------------------------------------------------------------------
                 PRIVATE METHODS
                 ----------------------------------------------------------------------                
            </comment>
            <comment line="2479">
                ----------------------------------------------------------------------
                 PROTECTED VARIABLES
                 ----------------------------------------------------------------------                
            </comment>
            <comment line="2508">
                ----------------------------------------------------------------------
                 PRIVATE VARIABLES
                 ----------------------------------------------------------------------                
            </comment>
            <comment line="2518">
                The list of indexes.
                 @serial                
            </comment>
            <comment line="2522">
                private Vector indexes= new Vector();                
            </comment>
            <comment line="2546">
                Callback handlers                
            </comment>
            <comment line="2549">
                final Vector callbacks = new Vector();                
            </comment>
            <comment line="2564">
                PACKAGE VARIABLES
                ------------------                
            </comment>
            <implements interface="NotificationBroadcaster"/>
            <implements interface="Serializable"/>
            <javadoc line="51">
                This class is the base class for SNMP table metadata.
                  &lt;p&gt;
                  Its responsibility is to manage a sorted array of OID indexes
                  according to the SNMP indexing scheme over the &quot;real&quot; table.
                  Each object of this class can be bound to an{@link com.sun.jmx.snmp.agent.SnmpTableEntryFactory} to which it will
                  forward remote entry creation requests, and invoke callbacks
                  when an entry has been successfully added to / removed from
                  the OID index array.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For each table defined in the MIB, mibgen will generate a specific
                  class called Table&lt;i&gt;TableName&lt;/i&gt; that will implement the
                  SnmpTableEntryFactory interface, and a corresponding
                  &lt;i&gt;TableName&lt;/i&gt;Meta class that will extend this class. &lt;br&gt;
                  The Table&lt;i&gt;TableName&lt;/i&gt; class corresponds to the MBean view of the
                  table while the &lt;i&gt;TableName&lt;/i&gt;Meta class corresponds to the
                  MIB metadata view of the same table.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Objects of this class are instantiated by the generated
                  whole MIB class extending {@link com.sun.jmx.snmp.agent.SnmpMib}You should never need to instantiate this class directly.
                  &lt;/p&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <see>
                    com.sun.jmx.snmp.agent.SnmpMib                    
                </see>
                <see>
                    com.sun.jmx.snmp.agent.SnmpMibEntry                    
                </see>
                <see>
                    com.sun.jmx.snmp.agent.SnmpTableEntryFactory                    
                </see>
                <see>
                    com.sun.jmx.snmp.agent.SnmpTableSupport                    
                </see>
            </javadoc>
            <javadoc line="91">
                Create a new &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt; metadata node.
                  &lt;p&gt;                
                <param>
                    mib The SNMP MIB to which the metadata will be linked.                    
                </param>
            </javadoc>
            <method name="SnmpMibTable" type="constructor" line="97">
                <params>
                    <param name="mib" type="SnmpMib"/>
                </params>
            </method>
            <method name="createNewEntry" type="void" line="106"/>
            <javadoc line="106">
                This method is invoked when the creation of a new entry is requested
                  by a remote SNMP manager.
                  &lt;br&gt;By default, remote entry creation is disabled - and this method
                  will not be called. You can dynamically switch the entry creation
                  policy by calling &lt;code&gt;setCreationEnabled(true)&lt;/code&gt; and &lt;code&gt;
                  setCreationEnabled(false)&lt;/code&gt; on this object.
                  &lt;p&gt;&lt;b&gt;&lt;i&gt;
                  This method is called internally by the SNMP runtime and you
                  should never need to call it directly. &lt;/b&gt;&lt;/i&gt;However you might want
                  to extend it in order to implement your own specific application
                  behaviour, should the default behaviour not be at your convenience.
                  &lt;/p&gt;
                  &lt;p&gt;                
                <param>
                    req   The SNMP  subrequest requesting this creation                    
                </param>
                <param>
                    rowOid  The OID indexing the conceptual row (entry) for which
                      the creation was requested.                    
                </param>
                <param>
                    depth The position of the columnar object arc in the OIDs
                      from the varbind list.                    
                </param>
                <exception>
                    SnmpStatusException if the entry cannot be created.                    
                </exception>
            </javadoc>
            <method name="isRegistrationRequired" type="boolean" line="132"/>
            <javadoc line="132">
                Tell whether the specific version of this metadata generated
                  by &lt;code&gt;mibgen&lt;/code&gt; requires entries to be registered with
                  the MBeanServer. In this case an ObjectName will have to be
                  passed to addEntry() in order for the table to behave correctly
                  (case of the generic metadata).
                  &lt;p&gt;
                  If that version of the metadata does not require entry to be
                  registered, then passing an ObjectName becomes optional (null
                  can be passed instead).                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if registration is required by this
                      version of the metadata.                    
                </return>
            </javadoc>
            <javadoc line="148">
                Tell whether a new entry should be created when a SET operation
                  is received for an entry that does not exist yet.                
                <return>
                    true if a new entry must be created, false otherwise.&lt;br&gt;
                      [default: returns &lt;CODE&gt;false&lt;/CODE&gt;]                    
                </return>
            </javadoc>
            <method name="isCreationEnabled" type="boolean" line="155"/>
            <javadoc line="159">
                This method lets you dynamically switch the creation policy.
                  &lt;p&gt;                
                <param>
                    remoteCreationFlag Tells whether remote entry creation must
                      be enabled or disabled.
                      &lt;ul&gt;&lt;li&gt;
                      &lt;CODE&gt;setCreationEnabled(true)&lt;/CODE&gt; will enable remote entry
                      creation via SET operations.&lt;/li&gt;
                      &lt;li&gt;
                      &lt;CODE&gt;setCreationEnabled(false)&lt;/CODE&gt; will disable remote entry
                      creation via SET operations.&lt;/li&gt;
                      &lt;p&gt; By default remote entry creation via SET operation is disabled.
                      &lt;/p&gt;
                      &lt;/ul&gt;                    
                </param>
            </javadoc>
            <method name="setCreationEnabled" type="void" line="175">
                <params>
                    <param name="remoteCreationFlag" type="boolean"/>
                </params>
            </method>
            <javadoc line="179">
                Return &lt;code&gt;true&lt;/code&gt; if the conceptual row contains a columnar
                  object used to control creation/deletion of rows in this table.
                  &lt;p&gt;
                  This  columnar object can be either a variable with RowStatus
                  syntax as defined by RFC 2579, or a plain variable whose
                  semantics is table specific.
                  &lt;p&gt;
                  By default, this function returns &lt;code&gt;false&lt;/code&gt;, and it is
                  assumed that the table has no such control variable.&lt;br&gt;
                  When &lt;code&gt;mibgen&lt;/code&gt; is used over SMIv2 MIBs, it will generate
                  an &lt;code&gt;hasRowStatus()&lt;/code&gt; method returning &lt;code&gt;true&lt;/code&gt;
                  for each table containing an object with RowStatus syntax.
                  &lt;p&gt;
                  When this method returns &lt;code&gt;false&lt;/code&gt; the default mechanism
                  for remote entry creation is used.
                  Otherwise, creation/deletion is performed as specified
                  by the control variable (see getRowAction() for more details).
                  &lt;p&gt;
                  This method is called internally when a SET request involving
                  this table is processed.
                  &lt;p&gt;
                  If you need to implement a control variable which do not use
                  the RowStatus convention as defined by RFC 2579, you should
                  subclass the generated table metadata class in order to redefine
                  this method and make it returns &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;
                  You will then have to redefine the isRowStatus(), mapRowStatus(),
                  isRowReady(), and setRowStatus() methods to suit your specific
                  implementation.
                  &lt;p&gt;                
                <return>
                    &lt;li&gt;&lt;code&gt;true&lt;/code&gt; if this table contains a control
                      variable (eg: a variable with RFC 2579 RowStatus syntax),
                      &lt;/li&gt;
                      &lt;li&gt;&lt;code&gt;false&lt;/code&gt; if this table does not contain
                      any control variable.&lt;/li&gt;                    
                </return>
            </javadoc>
            <method name="hasRowStatus" type="boolean" line="216"/>
            <javadoc line="225">
                Generic handling of the &lt;CODE&gt;get&lt;/CODE&gt; operation.
                  &lt;p&gt; The default implementation of this method is to
                  &lt;ul&gt;
                  &lt;li&gt; check whether the entry exists, and if not register an
                  exception for each varbind in the list.
                  &lt;li&gt; call the generated
                  &lt;CODE&gt;get(req,oid,depth+1)&lt;/CODE&gt; method. &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;pre&gt;
                  public void get(SnmpMibSubRequest req, int depth)
                  throws SnmpStatusException {
                  boolean         isnew  = req.isNewEntry();
                  // if the entry does not exists, then registers an error for
                  // each varbind involved (nb: this should not happen, since
                  // the error should already have been detected earlier)
                  //
                  if (isnew) {
                  SnmpVarBind     var = null;
                  for (Enumeration e= req.getElements(); e.hasMoreElements();) {
                  var = (SnmpVarBind) e.nextElement();
                  req.registerGetException(var,noSuchNameException);
                  }
                  }
                  final SnmpOid oid = req.getEntryOid();
                  get(req,oid,depth+1);
                  }
                  &lt;/pre&gt;
                  &lt;p&gt; You should not need to override this method in any cases, because
                  it will eventually call
                  &lt;CODE&gt;get(SnmpMibSubRequest req, int depth)&lt;/CODE&gt; on the generated
                  derivative of &lt;CODE&gt;SnmpMibEntry&lt;/CODE&gt;. If you need to implement
                  specific policies for minimizing the accesses made to some remote
                  underlying resources, or if you need to implement some consistency
                  checks between the different values provided in the varbind list,
                  you should then rather override
                  &lt;CODE&gt;get(SnmpMibSubRequest req, int depth)&lt;/CODE&gt; on the generated
                  derivative of &lt;CODE&gt;SnmpMibEntry&lt;/CODE&gt;.
                  &lt;p&gt;                
            </javadoc>
            <method name="get" type="void" line="270">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="depth" type="int"/>
                </params>
                <comment line="276">
                    if the entry does not exists, then registers an error for
                     each varbind involved (nb: should not happen, the error
                     should have been registered earlier)                    
                </comment>
                <comment line="289">
                    SnmpIndex   index  = buildSnmpIndex(oid.longValue(false), 0);
                     get(req,index,depth+1);                    
                </comment>
                <declaration name="isnew" type="boolean" line="272"/>
                <declaration name="r" type="SnmpMibSubRequest" line="273"/>
                <scope line="278">
                    <declaration name="var" type="SnmpVarBind" line="279"/>
                    <scope line="280"/>
                </scope>
                <declaration name="oid" type="SnmpOid" line="286"/>
            </method>
            <javadoc line="299">
                Generic handling of the &lt;CODE&gt;check&lt;/CODE&gt; operation.
                  &lt;p&gt; The default implementation of this method is to
                  &lt;ul&gt;
                  &lt;li&gt; check whether a new entry must be created, and if remote
                  creation of entries is enabled, create it. &lt;/li&gt;
                  &lt;li&gt; call the generated
                  &lt;CODE&gt;check(req,oid,depth+1)&lt;/CODE&gt; method. &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;pre&gt;
                  public void check(SnmpMibSubRequest req, int depth)
                  throws SnmpStatusException {
                  final SnmpOid     oid    = req.getEntryOid();
                  final int         action = getRowAction(req,oid,depth+1);
                  beginRowAction(req,oid,depth+1,action);
                  check(req,oid,depth+1);
                  }
                  &lt;/pre&gt;
                  &lt;p&gt; You should not need to override this method in any cases, because
                  it will eventually call
                  &lt;CODE&gt;check(SnmpMibSubRequest req, int depth)&lt;/CODE&gt; on the generated
                  derivative of &lt;CODE&gt;SnmpMibEntry&lt;/CODE&gt;. If you need to implement
                  specific policies for minimizing the accesses made to some remote
                  underlying resources, or if you need to implement some consistency
                  checks between the different values provided in the varbind list,
                  you should then rather override
                  &lt;CODE&gt;check(SnmpMibSubRequest req, int depth)&lt;/CODE&gt; on the generated
                  derivative of &lt;CODE&gt;SnmpMibEntry&lt;/CODE&gt;.
                  &lt;p&gt;                
            </javadoc>
            <method name="check" type="void" line="333">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="depth" type="int"/>
                </params>
                <declaration name="oid" type="SnmpOid" line="334"/>
                <declaration name="action" type="int" line="335"/>
                <scope line="337"/>
                <scope line="344"/>
                <scope line="352"/>
            </method>
            <javadoc line="363">
                Generic handling of the &lt;CODE&gt;set&lt;/CODE&gt; operation.
                  &lt;p&gt; The default implementation of this method is to
                  call the generated
                  &lt;CODE&gt;set(req,oid,depth+1)&lt;/CODE&gt; method.
                  &lt;p&gt;
                  &lt;pre&gt;
                  public void set(SnmpMibSubRequest req, int depth)
                  throws SnmpStatusException {
                  final SnmpOid oid = req.getEntryOid();
                  final int  action = getRowAction(req,oid,depth+1);
                  set(req,oid,depth+1);
                  endRowAction(req,oid,depth+1,action);
                  }
                  &lt;/pre&gt;
                  &lt;p&gt; You should not need to override this method in any cases, because
                  it will eventually call
                  &lt;CODE&gt;set(SnmpMibSubRequest req, int depth)&lt;/CODE&gt; on the generated
                  derivative of &lt;CODE&gt;SnmpMibEntry&lt;/CODE&gt;. If you need to implement
                  specific policies for minimizing the accesses made to some remote
                  underlying resources, or if you need to implement some consistency
                  checks between the different values provided in the varbind list,
                  you should then rather override
                  &lt;CODE&gt;set(SnmpMibSubRequest req, int depth)&lt;/CODE&gt; on the generated
                  derivative of &lt;CODE&gt;SnmpMibEntry&lt;/CODE&gt;.
                  &lt;p&gt;                
            </javadoc>
            <method name="set" type="void" line="393">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="depth" type="int"/>
                </params>
                <scope line="396"/>
                <declaration name="oid" type="SnmpOid" line="401"/>
                <declaration name="action" type="int" line="402"/>
                <scope line="404"/>
                <scope line="411"/>
                <scope line="418"/>
            </method>
            <javadoc line="425">
                Add a new entry in this &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt;.
                  Also triggers the addEntryCB() callback of the{@link com.sun.jmx.snmp.agent.SnmpTableEntryFactory} interface
                  if this node is bound to a factory.
                  This method assumes that the given entry will not be registered.
                  If the entry is going to be registered, or if ObjectName&apos;s are
                  required, then{@link com.sun.jmx.snmp.agent.SnmpMibTable#addEntry(SnmpOid,ObjectName,Object)} should be prefered.
                  &lt;br&gt; This function is mainly provided for backward compatibility.
                  &lt;p&gt;                
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row to be added.                    
                </param>
                <param>
                    entry The entry to add.                    
                </param>
                <exception>
                    SnmpStatusException The entry couldn&apos;t be added
                      at the position identified by the given
                      &lt;code&gt;rowOid&lt;/code&gt;, or this version of the metadata
                      requires ObjectName&apos;s.                    
                </exception>
            </javadoc>
            <method name="addEntry" type="void" line="450">
                <params>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="entry" type="Object"/>
                </params>
                <comment line="449">
                    public void addEntry(SnmpIndex index, Object entry)                    
                </comment>
            </method>
            <javadoc line="455">
                Add a new entry in this &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt;.
                  Also triggers the addEntryCB() callback of the{@link com.sun.jmx.snmp.agent.SnmpTableEntryFactory} interface
                  if this node is bound to a factory.
                  &lt;p&gt;                
                <param>
                    oid    The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row to be added.                    
                </param>
                <param>
                    name  The ObjectName with which this entry is registered.
                      This parameter can be omitted if isRegistrationRequired()
                      return false.                    
                </param>
                <param>
                    entry The entry to add.                    
                </param>
                <exception>
                    SnmpStatusException The entry couldn&apos;t be added
                      at the position identified by the given
                      &lt;code&gt;rowOid&lt;/code&gt;, or if this version of the metadata
                      requires ObjectName&apos;s, and the given name is null.                    
                </exception>
            </javadoc>
            <method name="addEntry" type="void" line="480">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="name" type="ObjectName"/>
                    <param name="entry" type="Object"/>
                </params>
                <comment line="477">
                    protected synchronized void addEntry(SnmpIndex index, ObjectName name,
                                                          Object entry)                    
                </comment>
                <comment line="487">
                    indexes.addElement(index);
                     XX oids.addElement(oid);                    
                </comment>
                <comment line="496">
                    triggers callbacks on the entry factory                    
                </comment>
                <comment line="511">
                    sends the notifications                    
                </comment>
                <comment line="518">
                    Get the insertion position ...                    
                </comment>
                <comment line="521">
                    bug jaw.00356.B : use oid rather than index to get the
                     insertion point.                    
                </comment>
                <comment line="526">
                    Add a new element in the vectors ...
                    
                                indexes.addElement(index);
                     XX oids.addElement(oid);                    
                </comment>
                <comment line="537">
                    Insert new element ...                    
                </comment>
                <comment line="540">
                    indexes.insertElementAt(index, pos);
                     XX oids.insertElementAt(oid, pos);                    
                </comment>
                <comment line="552">
                    triggers callbacks on the entry factory                    
                </comment>
                <comment line="567">
                    sends the notifications                    
                </comment>
                <scope line="485">
                    <scope line="497">
                        <scope line="498"/>
                        <scope line="500"/>
                    </scope>
                </scope>
                <declaration name="pos" type="int" line="519"/>
                <scope line="524"/>
                <scope line="535">
                    <scope line="538"/>
                    <scope line="547"/>
                </scope>
                <scope line="553">
                    <scope line="554"/>
                    <scope line="556"/>
                </scope>
            </method>
            <javadoc line="572">
                Remove the specified entry from the table.
                  Also triggers the removeEntryCB() callback of the{@link com.sun.jmx.snmp.agent.SnmpTableEntryFactory} interface
                  if this node is bound to a factory.
                  &lt;p&gt;                
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row to remove.                    
                </param>
                <param>
                    entry The entry to be removed. This parameter is not used
                      internally, it is simply passed along to the
                      removeEntryCB() callback.                    
                </param>
                <exception>
                    SnmpStatusException if the specified entry couldn&apos;t
                      be removed (if the given &lt;code&gt;rowOid&lt;/code&gt; is not
                      valid for instance).                    
                </exception>
            </javadoc>
            <method name="removeEntry" type="void" line="591">
                <params>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="entry" type="Object"/>
                </params>
                <declaration name="pos" type="int" line="592"/>
            </method>
            <javadoc line="598">
                Remove the specified entry from the table.
                  Also triggers the removeEntryCB() callback of the{@link com.sun.jmx.snmp.agent.SnmpTableEntryFactory} interface
                  if this node is bound to a factory.
                  &lt;p&gt;                
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row to remove.                    
                </param>
                <exception>
                    SnmpStatusException if the specified entry couldn&apos;t
                      be removed (if the given &lt;code&gt;rowOid&lt;/code&gt; is not
                      valid for instance).                    
                </exception>
            </javadoc>
            <method name="removeEntry" type="void" line="613">
                <params>
                    <param name="rowOid" type="SnmpOid"/>
                </params>
                <declaration name="pos" type="int" line="614"/>
            </method>
            <javadoc line="620">
                Remove the specified entry from the table.
                  Also triggers the removeEntryCB() callback of the{@link com.sun.jmx.snmp.agent.SnmpTableEntryFactory} interface
                  if this node is bound to a factory.
                  &lt;p&gt;                
                <param>
                    pos The position of the entry in the table.                    
                </param>
                <param>
                    entry The entry to be removed. This parameter is not used
                      internally, it is simply passed along to the
                      removeEntryCB() callback.                    
                </param>
                <exception>
                    SnmpStatusException if the specified entry couldn&apos;t
                      be removed.                    
                </exception>
            </javadoc>
            <method name="removeEntry" type="void" line="637">
                <params>
                    <param name="pos" type="int"/>
                    <param name="entry" type="Object"/>
                </params>
                <declaration name="obj" type="Object" line="642"/>
                <scope line="643"/>
                <declaration name="name" type="ObjectName" line="648"/>
                <scope line="649"/>
                <declaration name="rowOid" type="SnmpOid" line="654"/>
            </method>
            <javadoc line="667">
                Get the entry corresponding to the specified rowOid.
                  &lt;p&gt;                
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the
                      row to be retrieved.                    
                </param>
                <return>
                    The entry.                    
                </return>
                <exception>
                    SnmpStatusException There is no entry with the specified
                      &lt;code&gt;rowOid&lt;/code&gt; in the table.                    
                </exception>
            </javadoc>
            <method name="getEntry" type="Object" line="680">
                <params>
                    <param name="rowOid" type="SnmpOid"/>
                </params>
                <declaration name="pos" type="int" line="681"/>
            </method>
            <javadoc line="687">
                Get the ObjectName of the entry corresponding to the
                  specified rowOid.
                  The result of this method is only meaningful if
                  isRegistrationRequired() yields true.
                  &lt;p&gt;                
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row whose ObjectName we want to retrieve.                    
                </param>
                <return>
                    The object name of the entry.                    
                </return>
                <exception>
                    SnmpStatusException There is no entry with the specified
                      &lt;code&gt;rowOid&lt;/code&gt; in the table.                    
                </exception>
            </javadoc>
            <method name="getEntryName" type="ObjectName" line="703">
                <params>
                    <param name="rowOid" type="SnmpOid"/>
                </params>
                <declaration name="pos" type="int" line="704"/>
            </method>
            <javadoc line="711">
                Return the entries stored in this table &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt;.
                  &lt;p&gt;
                  If the subclass generated by mibgen uses the generic way to access
                  the entries (i.e. if it goes through the MBeanServer) then some of
                  the entries may be &lt;code&gt;null&lt;/code&gt;. It all depends whether a non
                  &lt;code&gt;null&lt;/code&gt; entry was passed to addEntry().&lt;br&gt;
                  Otherwise, if it uses the standard way (access the entry directly
                  through their standard MBean interface) this array will contain all
                  the entries.
                  &lt;p&gt;                
                <return>
                    The entries array.                    
                </return>
            </javadoc>
            <method name="getBasicEntries" type="Object[]" line="724">
                <declaration name="array" type="Object[]" line="725"/>
            </method>
            <javadoc line="730">
                Get the size of the table.                
                <return>
                    The number of entries currently registered in this table.                    
                </return>
            </javadoc>
            <method name="getSize" type="int" line="735"/>
            <javadoc line="742">
                Enable to add an SNMP entry listener to this
                  &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt;.
                  &lt;p&gt;                
                <param>
                    listener The listener object which will handle the
                      notifications emitted by the registered MBean.                    
                </param>
                <param>
                    filter The filter object. If filter is null, no filtering
                      will be performed before handling notifications.                    
                </param>
                <param>
                    handback The context to be sent to the listener when a
                      notification is emitted.                    
                </param>
                <exception>
                    IllegalArgumentException Listener parameter is null.                    
                </exception>
            </javadoc>
            <method name="addNotificationListener" type="void" line="760">
                <params>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <comment line="763">
                    Check listener                    
                </comment>
                <comment line="770">
                    looking for listener in handbackTable                    
                </comment>
                <comment line="783">
                    Add the handback and the filter                    
                </comment>
                <scope line="764"/>
                <declaration name="handbackList" type="Vector&lt;Object&gt;" line="771"/>
                <declaration name="filterList" type="Vector&lt;NotificationFilter&gt;" line="773"/>
                <scope line="775"/>
            </method>
            <javadoc line="788">
                Enable to remove an SNMP entry listener from this
                  &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt;.                
                <param>
                    listener The listener object which will handle the
                      notifications emitted by the registered MBean.
                      This method will remove all the information related to this
                      listener.                    
                </param>
                <exception>
                    ListenerNotFoundException The listener is not registered
                      in the MBean.                    
                </exception>
            </javadoc>
            <method name="removeNotificationListener" type="void" line="802">
                <params>
                    <param name="listener" type="NotificationListener"/>
                </params>
                <comment line="805">
                    looking for listener in handbackTable                    
                </comment>
                <comment line="815">
                    If handback is null, remove the listener entry                    
                </comment>
                <declaration name="handbackList" type="java.util.Vector" line="806"/>
                <declaration name="filterList" type="java.util.Vector" line="808"/>
                <scope line="810"/>
            </method>
            <javadoc line="820">
                Return a &lt;CODE&gt;NotificationInfo&lt;/CODE&gt; object containing the
                  notification class and the notification type sent by the
                  &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt;.                
            </javadoc>
            <method name="getNotificationInfo" type="MBeanNotificationInfo[]" line="825">
                <declaration name="types" type="String[]" line="827"/>
                <declaration name="notifsInfo" type="MBeanNotificationInfo[]" line="830"/>
            </method>
            <javadoc line="840">
                Register the factory through which table entries should
                  be created when remote entry creation is enabled.
                  &lt;p&gt;                
                <param>
                    factory The{@link com.sun.jmx.snmp.agent.SnmpTableEntryFactory} through
                      which entries will be created when a remote SNMP manager
                      request the creation of a new entry via an SNMP SET request.                    
                </param>
            </javadoc>
            <method name="registerEntryFactory" type="void" line="850">
                <params>
                    <param name="factory" type="SnmpTableEntryFactory"/>
                </params>
            </method>
            <javadoc line="858">
                Return true if the columnar object identified by &lt;code&gt;var&lt;/code&gt;
                  is used to control the addition/deletion of rows in this table.
                  &lt;p&gt;
                  By default, this method assumes that there is no control variable
                  and always return &lt;code&gt;false&lt;/code&gt;
                  &lt;p&gt;
                  If this table was defined using SMIv2, and if it contains a
                  control variable with RowStatus syntax, &lt;code&gt;mibgen&lt;/code&gt;
                  will generate a non default implementation for this method
                  that will identify the RowStatus control variable.
                  &lt;p&gt;
                  You will have to redefine this method if you need to implement
                  control variables that do not conform to RFC 2579 RowStatus
                  TEXTUAL-CONVENTION.
                  &lt;p&gt;                
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row involved in the operation.                    
                </param>
                <param>
                    var The OID arc identifying the involved columnar object.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
            </javadoc>
            <method name="isRowStatus" type="boolean" line="887">
                <params>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="var" type="long"/>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <javadoc line="892">
                Return the RowStatus code value specified in this request.
                  &lt;p&gt;
                  The RowStatus code value should be one of the values defined
                  by {@link com.sun.jmx.snmp.EnumRowStatus}. These codes correspond
                  to RowStatus codes as defined in RFC 2579, plus the &lt;i&gt;unspecified&lt;/i&gt;
                  value which is SNMP Runtime specific.
                  &lt;p&gt;                
                <param>
                    req    The sub-request that must be handled by this node.                    
                </param>
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row involved in the operation.                    
                </param>
                <param>
                    depth  The depth reached in the OID tree.                    
                </param>
                <return>
                    The RowStatus code specified in this request, if any:
                      &lt;ul&gt;
                      &lt;li&gt;If the specified row does not exist and this table do
                      not use any variable to control creation/deletion of
                      rows, then default creation mechanism is assumed and
                      &lt;i&gt;createAndGo&lt;/i&gt; is returned&lt;/li&gt;
                      &lt;li&gt;Otherwise, if the row exists and this table do not use any
                      variable to control creation/deletion of rows,
                      &lt;i&gt;unspecified&lt;/i&gt; is returned.&lt;/li&gt;
                      &lt;li&gt;Otherwise, if the request does not contain the control variable,
                      &lt;i&gt;unspecified&lt;/i&gt; is returned.&lt;/li&gt;
                      &lt;li&gt;Otherwise, mapRowStatus() is called to extract the RowStatus
                      code from the SnmpVarBind that contains the control variable.&lt;/li&gt;
                      &lt;/ul&gt;                    
                </return>
                <exception>
                    SnmpStatusException if the value of the control variable
                      could not be mapped to a RowStatus code.                    
                </exception>
                <see>
                    com.sun.jmx.snmp.EnumRowStatus                    
                </see>
            </javadoc>
            <method name="getRowAction" type="int" line="930">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="depth" type="int"/>
                </params>
                <declaration name="isnew" type="boolean" line="931"/>
                <declaration name="vb" type="SnmpVarBind" line="932"/>
                <scope line="933"/>
                <scope line="939"/>
                <scope line="941"/>
            </method>
            <javadoc line="947">
                Map the value of the &lt;code&gt;vbstatus&lt;/code&gt; varbind to the
                  corresponding RowStatus code defined in{@link com.sun.jmx.snmp.EnumRowStatus}.
                  These codes correspond to RowStatus codes as defined in RFC 2579,
                  plus the &lt;i&gt;unspecified&lt;/i&gt; value which is SNMP Runtime specific.
                  &lt;p&gt;
                  By default, this method assumes that the control variable is
                  an Integer, and it simply returns its value without further
                  analysis.
                  &lt;p&gt;
                  If this table was defined using SMIv2, and if it contains a
                  control variable with RowStatus syntax, &lt;code&gt;mibgen&lt;/code&gt;
                  will generate a non default implementation for this method.
                  &lt;p&gt;
                  You will have to redefine this method if you need to implement
                  control variables that do not conform to RFC 2579 RowStatus
                  TEXTUAL-CONVENTION.
                  &lt;p&gt;                
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row involved in the operation.                    
                </param>
                <param>
                    vbstatus The SnmpVarBind containing the value of the control
                      variable, as identified by the isRowStatus() method.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
                <return>
                    The RowStatus code mapped from the value contained
                      in &lt;code&gt;vbstatus&lt;/code&gt;.                    
                </return>
                <exception>
                    SnmpStatusException if the value of the control variable
                      could not be mapped to a RowStatus code.                    
                </exception>
                <see>
                    com.sun.jmx.snmp.EnumRowStatus                    
                </see>
            </javadoc>
            <method name="mapRowStatus" type="int" line="988">
                <params>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="vbstatus" type="SnmpVarBind"/>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="rsvalue" type="SnmpValue" line="989"/>
            </method>
            <javadoc line="998">
                Set the control variable to the specified &lt;code&gt;newStatus&lt;/code&gt;
                  value.
                  &lt;p&gt;
                  This method maps the given &lt;code&gt;newStatus&lt;/code&gt; to the appropriate
                  value for the control variable, then sets the control variable in
                  the entry identified by &lt;code&gt;rowOid&lt;/code&gt;. It returns the new
                  value of the control variable.
                  &lt;p&gt;
                  By default, it is assumed that there is no control variable so this
                  method does nothing and simply returns &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;
                  If this table was defined using SMIv2, and if it contains a
                  control variable with RowStatus syntax, &lt;code&gt;mibgen&lt;/code&gt;
                  will generate a non default implementation for this method.
                  &lt;p&gt;
                  You will have to redefine this method if you need to implement
                  control variables that do not conform to RFC 2579 RowStatus
                  TEXTUAL-CONVENTION.
                  &lt;p&gt;                
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row involved in the operation.                    
                </param>
                <param>
                    newStatus The new status for the row: one of the
                      RowStatus code defined in{@link com.sun.jmx.snmp.EnumRowStatus}. These codes
                      correspond to RowStatus codes as defined in RFC 2579,
                      plus the &lt;i&gt;unspecified&lt;/i&gt; value which is SNMP Runtime specific.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
                <return>
                    The new value of the control variable (usually
                      &lt;code&gt;new SnmpInt(newStatus)&lt;/code&gt;) or &lt;code&gt;null&lt;/code&gt;
                      if the table do not have any control variable.                    
                </return>
                <exception>
                    SnmpStatusException If the given &lt;code&gt;newStatus&lt;/code&gt;
                      could not be set on the specified entry, or if the
                      given &lt;code&gt;newStatus&lt;/code&gt; is not valid.                    
                </exception>
                <see>
                    com.sun.jmx.snmp.EnumRowStatus                    
                </see>
            </javadoc>
            <method name="setRowStatus" type="SnmpValue" line="1046">
                <params>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="newStatus" type="int"/>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <javadoc line="1050">
                Tell whether the specified row is ready and can be put in the
                  &lt;i&gt;notInService&lt;/i&gt; state.
                  &lt;p&gt;
                  This method is called only once, after all the varbind have been
                  set on a new entry for which &lt;i&gt;createAndWait&lt;/i&gt; was specified.
                  &lt;p&gt;
                  If the entry is not yet ready, this method should return false.
                  It will then be the responsibility of the entry to switch its
                  own state to &lt;i&gt;notInService&lt;/i&gt; when it becomes ready.
                  No further call to &lt;code&gt;isRowReady()&lt;/code&gt; will be made.
                  &lt;p&gt;
                  By default, this method always return true. &lt;br&gt;
                  &lt;code&gt;mibgen&lt;/code&gt; will not generate any specific implementation
                  for this method - meaning that by default, a row created using
                  &lt;i&gt;createAndWait&lt;/i&gt; will always be placed in &lt;i&gt;notInService&lt;/i&gt;
                  state at the end of the request.
                  &lt;p&gt;
                  If this table was defined using SMIv2, and if it contains a
                  control variable with RowStatus syntax, &lt;code&gt;mibgen&lt;/code&gt;
                  will generate an implementation for this method that will
                  delegate the work to the metadata class modelling the conceptual
                  row, so that you can override the default behaviour by subclassing
                  that metadata class.
                  &lt;p&gt;
                  You will have to redefine this method if this default mechanism
                  does not suit your needs.
                  &lt;p&gt;                
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row involved in the operation.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the row can be placed in
                      &lt;i&gt;notInService&lt;/i&gt; state.                    
                </return>
                <exception>
                    SnmpStatusException An error occured while trying
                      to retrieve the row status, and the operation should
                      be aborted.                    
                </exception>
                <see>
                    com.sun.jmx.snmp.EnumRowStatus                    
                </see>
            </javadoc>
            <method name="isRowReady" type="boolean" line="1097">
                <params>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <javadoc line="1101">
                Check whether the control variable of the given row can be
                  switched to the new specified &lt;code&gt;newStatus&lt;/code&gt;.
                  &lt;p&gt;
                  This method is called during the &lt;i&gt;check&lt;/i&gt; phase of a SET
                  request when the control variable specifies &lt;i&gt;active&lt;/i&gt; or
                  &lt;i&gt;notInService&lt;/i&gt;.
                  &lt;p&gt;
                  By default it is assumed that nothing prevents putting the
                  row in the requested state, and this method does nothing.
                  It is simply provided as a hook so that specific checks can
                  be implemented.
                  &lt;p&gt;
                  Note that if the actual row deletion fails afterward, the
                  atomicity of the request is no longer guaranteed.
                  &lt;p&gt;                
                <param>
                    req    The sub-request that must be handled by this node.                    
                </param>
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row involved in the operation.                    
                </param>
                <param>
                    depth  The depth reached in the OID tree.                    
                </param>
                <param>
                    newStatus The new status for the row: one of the
                      RowStatus code defined in{@link com.sun.jmx.snmp.EnumRowStatus}. These codes
                      correspond to RowStatus codes as defined in RFC 2579,
                      plus the &lt;i&gt;unspecified&lt;/i&gt; value which is SNMP Runtime specific.                    
                </param>
                <exception>
                    SnmpStatusException if switching to this new state
                      would fail.                    
                </exception>
            </javadoc>
            <method name="checkRowStatusChange" type="void" line="1138">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="depth" type="int"/>
                    <param name="newStatus" type="int"/>
                </params>
            </method>
            <javadoc line="1142">
                Check whether the specified row can be removed from the table.
                  &lt;p&gt;
                  This method is called during the &lt;i&gt;check&lt;/i&gt; phase of a SET
                  request when the control variable specifies &lt;i&gt;destroy&lt;/i&gt;
                  &lt;p&gt;
                  By default it is assumed that nothing prevents row deletion
                  and this method does nothing. It is simply provided as a hook
                  so that specific checks can be implemented.
                  &lt;p&gt;
                  Note that if the actual row deletion fails afterward, the
                  atomicity of the request is no longer guaranteed.
                  &lt;p&gt;                
                <param>
                    req    The sub-request that must be handled by this node.                    
                </param>
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row involved in the operation.                    
                </param>
                <param>
                    depth  The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException if the row deletion must be
                      rejected.                    
                </exception>
            </javadoc>
            <method name="checkRemoveTableRow" type="void" line="1168">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="depth" type="int"/>
                </params>
            </method>
            <javadoc line="1172">
                Remove a table row upon a remote manager request.
                  This method is called internally when &lt;code&gt;getRowAction()&lt;/code&gt;
                  yields &lt;i&gt;destroy&lt;/i&gt; - i.e.: it is only called when a remote
                  manager requests the removal of a table row.&lt;br&gt;
                  You should never need to call this function directly.
                  &lt;p&gt;
                  By default, this method simply calls &lt;code&gt;removeEntry(rowOid)
                  &lt;/code&gt;.
                  &lt;p&gt;
                  You can redefine this method if you need to implement some
                  specific behaviour when a remote row deletion is invoked.
                  &lt;p&gt;
                  Note that specific checks should not be implemented in this
                  method, but rather in &lt;code&gt;checkRemoveTableRow()&lt;/code&gt;.
                  If &lt;code&gt;checkRemoveTableRow()&lt;/code&gt; succeeds and this method
                  fails afterward, the atomicity of the original SET request can no
                  longer be guaranteed.
                  &lt;p&gt;                
                <param>
                    req    The sub-request that must be handled by this node.                    
                </param>
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row involved in the operation.                    
                </param>
                <param>
                    depth  The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException if the actual row deletion fails.
                      This should not happen since it would break the
                      atomicity of the SET request. Specific checks should
                      be implemented in &lt;code&gt;checkRemoveTableRow()&lt;/code&gt;
                      if needed. If the entry does not exists, no exception
                      is generated and the method simply returns.                    
                </exception>
            </javadoc>
            <method name="removeTableRow" type="void" line="1210">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="depth" type="int"/>
                </params>
            </method>
            <javadoc line="1215">
                This method takes care of initial RowStatus handling during the
                  check() phase of a SET request.
                  In particular it will:
                  &lt;ul&gt;&lt;li&gt;check that the given &lt;code&gt;rowAction&lt;/code&gt; returned by
                  &lt;code&gt;getRowAction()&lt;/code&gt; is valid.&lt;/li&gt;
                  &lt;li&gt;Then depending on the &lt;code&gt;rowAction&lt;/code&gt; specified it will:
                  &lt;ul&gt;&lt;li&gt;either call &lt;code&gt;createNewEntry()&lt;/code&gt; (&lt;code&gt;
                  rowAction = &lt;i&gt;createAndGo&lt;/i&gt; or &lt;i&gt;createAndWait&lt;/i&gt;
                  &lt;/code&gt;),&lt;/li&gt;
                  &lt;li&gt;or call &lt;code&gt;checkRemoveTableRow()&lt;/code&gt; (&lt;code&gt;
                  rowAction = &lt;i&gt;destroy&lt;/i&gt;&lt;/code&gt;),&lt;/li&gt;
                  &lt;li&gt;or call &lt;code&gt;checkRowStatusChange()&lt;/code&gt; (&lt;code&gt;
                  rowAction = &lt;i&gt;active&lt;/i&gt; or &lt;i&gt;notInService&lt;/i&gt;&lt;/code&gt;),&lt;/li&gt;
                  &lt;li&gt;or generate a SnmpStatusException if the passed &lt;code&gt;
                  rowAction&lt;/code&gt; is not correct.&lt;/li&gt;
                  &lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
                  &lt;p&gt;
                  In principle, you should not need to redefine this method.
                  &lt;p&gt;
                  &lt;code&gt;beginRowAction()&lt;/code&gt; is called during the check phase
                  of a SET request, before actual checking on the varbind list
                  is performed.
                  &lt;p&gt;                
                <param>
                    req    The sub-request that must be handled by this node.                    
                </param>
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row involved in the operation.                    
                </param>
                <param>
                    depth  The depth reached in the OID tree.                    
                </param>
                <param>
                    rowAction The requested action as returned by &lt;code&gt;
                      getRowAction()&lt;/code&gt;: one of the RowStatus codes defined in{@link com.sun.jmx.snmp.EnumRowStatus}. These codes
                      correspond to RowStatus codes as defined in RFC 2579,
                      plus the &lt;i&gt;unspecified&lt;/i&gt; value which is SNMP Runtime specific.                    
                </param>
                <exception>
                    SnmpStatusException if the specified &lt;code&gt;rowAction&lt;/code&gt;
                      is not valid or cannot be executed.
                      This should not happen since it would break the
                      atomicity of the SET request. Specific checks should
                      be implemented in &lt;code&gt;beginRowAction()&lt;/code&gt; if needed.                    
                </exception>
                <see>
                    com.sun.jmx.snmp.EnumRowStatus                    
                </see>
            </javadoc>
            <method name="beginRowAction" type="void" line="1264">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="depth" type="int"/>
                    <param name="rowAction" type="int"/>
                </params>
                <declaration name="isnew" type="boolean" line="1265"/>
                <declaration name="oid" type="SnmpOid" line="1266"/>
                <declaration name="action" type="int" line="1267"/>
                <scope line="1271">
                    <scope line="1272"/>
                </scope>
                <scope line="1283">
                    <scope line="1284">
                        <scope line="1285"/>
                    </scope>
                    <scope line="1292">
                        <scope line="1293"/>
                    </scope>
                </scope>
                <scope line="1303">
                    <scope line="1304"/>
                </scope>
                <scope line="1316">
                    <scope line="1317"/>
                </scope>
                <scope line="1324">
                    <scope line="1325"/>
                </scope>
                <scope line="1338">
                    <scope line="1339"/>
                </scope>
                <scope line="1353"/>
            </method>
            <javadoc line="1364">
                This method takes care of final RowStatus handling during the
                  set() phase of a SET request.
                  In particular it will:
                  &lt;ul&gt;&lt;li&gt;either call &lt;code&gt;setRowStatus(&lt;i&gt;active&lt;/i&gt;)&lt;/code&gt;
                  (&lt;code&gt; rowAction = &lt;i&gt;createAndGo&lt;/i&gt; or &lt;i&gt;active&lt;/i&gt;
                  &lt;/code&gt;),&lt;/li&gt;
                  &lt;li&gt;or call &lt;code&gt;setRowStatus(&lt;i&gt;notInService&lt;/i&gt; or &lt;i&gt;
                  notReady&lt;/i&gt;)&lt;/code&gt; depending on the result of &lt;code&gt;
                  isRowReady()&lt;/code&gt; (&lt;code&gt;rowAction = &lt;i&gt;createAndWait&lt;/i&gt;
                  &lt;/code&gt;),&lt;/li&gt;
                  &lt;li&gt;or call &lt;code&gt;setRowStatus(&lt;i&gt;notInService&lt;/i&gt;)&lt;/code&gt;
                  (&lt;code&gt; rowAction = &lt;i&gt;notInService&lt;/i&gt;&lt;/code&gt;),
                  &lt;li&gt;or call &lt;code&gt;removeTableRow()&lt;/code&gt; (&lt;code&gt;
                  rowAction = &lt;i&gt;destroy&lt;/i&gt;&lt;/code&gt;),&lt;/li&gt;
                  &lt;li&gt;or generate a SnmpStatusException if the passed &lt;code&gt;
                  rowAction&lt;/code&gt; is not correct. This should be avoided
                  since it would break SET request atomicity&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  In principle, you should not need to redefine this method.
                  &lt;p&gt;
                  &lt;code&gt;endRowAction()&lt;/code&gt; is called during the set() phase
                  of a SET request, after the actual set() on the varbind list
                  has been performed. The varbind containing the control variable
                  is updated with the value returned by setRowStatus() (if it is
                  not &lt;code&gt;null&lt;/code&gt;).
                  &lt;p&gt;                
                <param>
                    req    The sub-request that must be handled by this node.                    
                </param>
                <param>
                    rowOid The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; identifying the table
                      row involved in the operation.                    
                </param>
                <param>
                    depth  The depth reached in the OID tree.                    
                </param>
                <param>
                    rowAction The requested action as returned by &lt;code&gt;
                      getRowAction()&lt;/code&gt;: one of the RowStatus codes defined in{@link com.sun.jmx.snmp.EnumRowStatus}. These codes
                      correspond to RowStatus codes as defined in RFC 2579,
                      plus the &lt;i&gt;unspecified&lt;/i&gt; value which is SNMP Runtime specific.                    
                </param>
                <exception>
                    SnmpStatusException if the specified &lt;code&gt;rowAction&lt;/code&gt;
                      is not valid.                    
                </exception>
                <see>
                    com.sun.jmx.snmp.EnumRowStatus                    
                </see>
            </javadoc>
            <method name="endRowAction" type="void" line="1414">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="depth" type="int"/>
                    <param name="rowAction" type="int"/>
                </params>
                <declaration name="isnew" type="boolean" line="1415"/>
                <declaration name="oid" type="SnmpOid" line="1416"/>
                <declaration name="action" type="int" line="1417"/>
                <declaration name="data" type="Object" line="1418"/>
                <declaration name="value" type="SnmpValue" line="1419"/>
                <scope line="1425"/>
                <scope line="1435">
                    <scope line="1436"/>
                </scope>
                <scope line="1444">
                    <scope line="1445"/>
                </scope>
                <scope line="1456">
                    <scope line="1457"/>
                </scope>
                <scope line="1464">
                    <scope line="1465"/>
                </scope>
                <scope line="1475"/>
                <scope line="1485"/>
                <scope line="1496"/>
                <scope line="1505">
                    <declaration name="vb" type="SnmpVarBind" line="1506"/>
                </scope>
            </method>
            <javadoc line="1515">
                Return the next OID arc corresponding to a readable columnar
                  object in the underlying entry OBJECT-TYPE, possibly skipping over
                  those objects that must not or cannot be returned.
                  Calls {@link #getNextVarEntryId(com.sun.jmx.snmp.SnmpOid,long,java.lang.Object)},
                  until{@link #skipEntryVariable(com.sun.jmx.snmp.SnmpOid,long,java.lang.Object,int)} returns false.                
                <param>
                    rowOid The OID index of the row involved in the operation.                    
                </param>
                <param>
                    var Id of the variable we start from, looking for the next.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
                <param>
                    pduVersion Protocol version of the original request PDU.                    
                </param>
                <return>
                    The next columnar object id which can be returned using
                      the given PDU&apos;s protocol version.                    
                </return>
                <exception>
                    SnmpStatusException If no id is found after the given id.                    
                </exception>
            </javadoc>
            <method name="getNextVarEntryId" type="long" line="1547">
                <params>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="var" type="long"/>
                    <param name="userData" type="Object"/>
                    <param name="pduVersion" type="int"/>
                </params>
                <declaration name="varid" type="long" line="1549"/>
                <scope line="1550"/>
            </method>
            <javadoc line="1557">
                Hook for subclasses.
                  The default implementation of this method is to always return
                  false. Subclasses should redefine this method so that it returns
                  true when:
                  &lt;ul&gt;&lt;li&gt;the variable is a leaf that is not instantiated,&lt;/li&gt;
                  &lt;li&gt;or the variable is a leaf whose type cannot be returned by that
                  version of the protocol (e.g. an Counter64 with SNMPv1).&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    rowOid The OID index of the row involved in the operation.                    
                </param>
                <param>
                    var Id of the variable we start from, looking for the next.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
                <param>
                    pduVersion Protocol version of the original request PDU.                    
                </param>
                <return>
                    true if the variable must be skipped by the get-next
                      algorithm.                    
                </return>
            </javadoc>
            <method name="skipEntryVariable" type="boolean" line="1584">
                <params>
                    <param name="rowOid" type="SnmpOid"/>
                    <param name="var" type="long"/>
                    <param name="userData" type="Object"/>
                    <param name="pduVersion" type="int"/>
                </params>
            </method>
            <javadoc line="1588">
                Get the &lt;CODE&gt;SnmpOid&lt;/CODE&gt; index of the row that follows
                  the given &lt;CODE&gt;oid&lt;/CODE&gt; in the table. The given &lt;CODE&gt;
                  oid&lt;/CODE&gt; does not need to be a valid row OID index.
                  &lt;p&gt;                
                <param>
                    oid The OID from which the search will begin.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
                <return>
                    The next &lt;CODE&gt;SnmpOid&lt;/CODE&gt; index.                    
                </return>
                <exception>
                    SnmpStatusException There is no index following the
                      specified &lt;CODE&gt;oid&lt;/CODE&gt; in the table.                    
                </exception>
            </javadoc>
            <method name="getNextOid" type="SnmpOid" line="1607">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
                <comment line="1615">
                    Just a simple check to speed up retrieval of last element ...
                    
                     XX SnmpOid last= (SnmpOid) oids.lastElement();                    
                </comment>
                <comment line="1620">
                    Last element of the table ...                    
                </comment>
                <comment line="1625">
                    First find the oid. This will allow to speed up retrieval process
                     during smart discovery of table (using the getNext) as the
                     management station will use the valid index returned during a
                     previous getNext ...                    
                </comment>
                <comment line="1631">
                    Returns the position following the position at which resOid
                     is found, or the position at which resOid should be inserted.                    
                </comment>
                <comment line="1636">
                    If the position returned is not out of bound, we will find
                     the next element in the array.                    
                </comment>
                <comment line="1641">
                    XX last = (SnmpOid) oids.elementAt(newPos);                    
                </comment>
                <comment line="1647">
                    We are dealing with the last element of the table ..                    
                </comment>
                <declaration name="resOid" type="SnmpOid" line="1612"/>
                <declaration name="last" type="SnmpOid" line="1617"/>
                <scope line="1618"/>
                <declaration name="newPos" type="int" line="1633"/>
                <scope line="1638">
                    <scope line="1639"/>
                    <scope line="1642"/>
                </scope>
                <scope line="1645"/>
            </method>
            <javadoc line="1655">
                Return the first entry OID registered in the table.
                  &lt;p&gt;                
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
                <return>
                    The &lt;CODE&gt;SnmpOid&lt;/CODE&gt; of the first entry in the table.                    
                </return>
                <exception>
                    SnmpStatusException If the table is empty.                    
                </exception>
            </javadoc>
            <method name="getNextOid" type="SnmpOid" line="1669">
                <params>
                    <param name="userData" type="Object"/>
                </params>
                <comment line="1673">
                    XX return (SnmpOid) oids.firstElement();                    
                </comment>
            </method>
            <method name="getNextVarEntryId" type="long" line="1680"/>
            <javadoc line="1680">
                This method is used internally and is implemented by the
                  &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt; subclasses generated by &lt;CODE&gt;mibgen&lt;/CODE&gt;.
                  &lt;p&gt; Return the next OID arc corresponding to a readable columnar
                  object in the underlying entry OBJECT-TYPE.&lt;/p&gt;
                  &lt;p&gt;                
                <param>
                    rowOid The OID index of the row involved in the operation.                    
                </param>
                <param>
                    var Id of the variable we start from, looking for the next.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
                <return>
                    The next columnar object id.                    
                </return>
                <exception>
                    SnmpStatusException If no id is found after the given id.                    
                </exception>
            </javadoc>
            <method name="validateVarEntryId" type="void" line="1706"/>
            <javadoc line="1706">
                This method is used internally and is implemented by the
                  &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt; subclasses generated by &lt;CODE&gt;mibgen&lt;/CODE&gt;.
                  &lt;p&gt;                
                <param>
                    rowOid The OID index of the row involved in the operation.                    
                </param>
                <param>
                    var The var we want to validate.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
                <exception>
                    SnmpStatusException If this id is not valid.                    
                </exception>
            </javadoc>
            <method name="isReadableEntryId" type="boolean" line="1727"/>
            <javadoc line="1727">
                This method is used internally and is implemented by the
                  &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt; subclasses generated by &lt;CODE&gt;mibgen&lt;/CODE&gt;.
                  &lt;p&gt;                
                <param>
                    rowOid The OID index of the row involved in the operation.                    
                </param>
                <param>
                    var The OID arc.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
                <exception>
                    SnmpStatusException If this id is not valid.                    
                </exception>
            </javadoc>
            <method name="get" type="void" line="1749"/>
            <javadoc line="1749">
                This method is used internally and is implemented by the
                  &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt; subclasses generated by &lt;CODE&gt;mibgen&lt;/CODE&gt;.                
            </javadoc>
            <method name="check" type="void" line="1757"/>
            <javadoc line="1757">
                This method is used internally and is implemented by the
                  &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt; subclasses generated by &lt;CODE&gt;mibgen&lt;/CODE&gt;.                
            </javadoc>
            <method name="set" type="void" line="1765"/>
            <javadoc line="1765">
                This method is used internally and is implemented by the
                  &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt; subclasses generated by &lt;CODE&gt;mibgen&lt;/CODE&gt;.                
            </javadoc>
            <javadoc line="1777">
                Get the &lt;CODE&gt;SnmpOid&lt;/CODE&gt; index of the row that follows the
                  index extracted from the specified OID array.
                  Builds the SnmpOid corresponding to the row OID and calls
                  &lt;code&gt;getNextOid(oid,userData)&lt;/code&gt;;
                  &lt;p&gt;                
                <param>
                    oid The OID array.                    
                </param>
                <param>
                    pos The position in the OID array at which the index starts.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
                <return>
                    The next &lt;CODE&gt;SnmpOid&lt;/CODE&gt;.                    
                </return>
                <exception>
                    SnmpStatusException There is no index following the
                      specified one in the table.                    
                </exception>
            </javadoc>
            <method name="getNextOid" type="SnmpOid" line="1799">
                <params>
                    <param name="oid" type="long[]"/>
                    <param name="pos" type="int"/>
                    <param name="userData" type="Object"/>
                </params>
                <comment line="1802">
                    Construct the sub-oid starting at pos.
                     This sub-oid correspond to the oid part just after the entry
                     variable oid.                    
                </comment>
                <declaration name="resOid" type="SnmpOid" line="1805"/>
            </method>
            <method name="checkRowStatusFail" type="void" line="1818">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="errorStatus" type="int"/>
                </params>
                <declaration name="statusvb" type="SnmpVarBind" line="1819"/>
                <declaration name="x" type="SnmpStatusException" line="1820"/>
            </method>
            <method name="setRowStatusFail" type="void" line="1832">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="errorStatus" type="int"/>
                </params>
                <declaration name="statusvb" type="SnmpVarBind" line="1833"/>
                <declaration name="x" type="SnmpStatusException" line="1834"/>
            </method>
            <method name="findHandlingNode" type="void" line="1846">
                <params>
                    <param name="varbind" type="SnmpVarBind"/>
                    <param name="oid" type="long[]"/>
                    <param name="depth" type="int"/>
                    <param name="handlers" type="SnmpRequestTree"/>
                </params>
                <comment line="1863">
                    Checks that the oid is valid
                     validateOid(oid,depth);                    
                </comment>
                <comment line="1866">
                    Gets the part of the OID that identifies the entry                    
                </comment>
                <comment line="1869">
                    Finds the entry: false means that the entry does not exists                    
                </comment>
                <comment line="1873">
                    Fails if the entry is not found and the table does not
                     not support creation.
                     We know that the entry does not exists if (isentry == false).                    
                </comment>
                <comment line="1878">
                    we&apos;re not doing a set                    
                </comment>
                <comment line="1881">
                    we&apos;re doing a set but creation is disabled.                    
                </comment>
                <comment line="1888">
                    Validate the entry id                    
                </comment>
                <comment line="1890">
                    The entry already exists - validate the id                    
                </comment>
                <comment line="1894">
                    Registers this node for the identified entry.                    
                </comment>
                <comment line="1898">
                    We only try to identify the RowStatus for SET operations                    
                </comment>
                <declaration name="length" type="int" line="1848"/>
                <declaration name="entryoid" type="SnmpOid" line="1866"/>
                <declaration name="data" type="Object" line="1869"/>
                <declaration name="hasEntry" type="boolean" line="1870"/>
                <scope line="1875"/>
                <declaration name="var" type="long" line="1885"/>
                <scope line="1888"/>
            </method>
            <method name="findNextHandlingNode" type="long[]" line="1916">
                <params>
                    <param name="varbind" type="SnmpVarBind"/>
                    <param name="oid" type="long[]"/>
                    <param name="pos" type="int"/>
                    <param name="depth" type="int"/>
                    <param name="handlers" type="SnmpRequestTree"/>
                    <param name="checker" type="AcmChecker"/>
                </params>
                <comment line="1921">
                    This should be considered as a genErr, but we do not want to
                     abort the whole request, so we&apos;re going to throw
                     a noSuchObject...                    
                </comment>
                <comment line="1932">
                    If the querried oid contains less arcs than the OID of the
                     xxxEntry object, we must return the first leaf under the
                     first columnar object: the best way to do that is to reset
                     the queried oid:
                       oid[0] = nodeId (arc of the xxxEntry object)
                       pos    = 0 (points to the arc of the xxxEntry object)
                     then we just have to proceed...                    
                </comment>
                <comment line="1941">
                    this will have the side effect to set
                        oid[pos] = nodeId
                     and
                        (pos+1) = length
                     so we won&apos;t fall into the &quot;else if&quot; cases below -
                     so using &quot;else if&quot; rather than &quot;if ...&quot; is guaranteed
                     to be safe.                    
                </comment>
                <comment line="1954">
                    oid[pos] is expected to be the id of the xxxEntry ...
                     The id requested is greater than the id of the xxxEntry,
                     so we won&apos;t find the next element in this table... (any
                     element in this table will have a smaller OID)                    
                </comment>
                <comment line="1961">
                    we must return the first leaf under the first columnar
                     object, so we are back to our first case where pos was
                     out of bounds... =&gt; reset the oid to contain only the
                     arc of the xxxEntry object.                    
                </comment>
                <comment line="1971">
                    The arc at the position &quot;pos+1&quot; is the id of the columnar
                     object (ie: the id of the variable in the table entry)                    
                </comment>
                <comment line="1977">
                    Now that we&apos;ve got everything right we can begin.                    
                </comment>
                <comment line="1981">
                    pos points to the last arc in the oid, and this arc is
                     guaranteed to be the xxxEntry id (we have handled all
                     the other possibilities before)
                    
                     We must therefore return the first leaf below the first
                     columnar object in the table.
                    
                     Get the first index. If an exception is raised,
                     then it means that the table is empty. We thus do not
                     have to catch the exception - we let it propagate to
                     the caller.                    
                </comment>
                <comment line="1996">
                    In that case we have (pos+1) = (length-1), so pos
                     points to the arc of the querried variable (columnar object).
                     Since the requested oid stops there, it means we have
                     to return the first leaf under this columnar object.
                    
                     So we first get the first index:
                     Note: if this raises an exception, this means that the table
                     is empty, so we can let the exception propagate to the caller.                    
                </comment>
                <comment line="2007">
                    XXX revisit: not exactly perfect:
                         a specific row could be empty.. But we don&apos;t know
                         how to make the difference! =&gt; tradeoff holes
                         in tables can&apos;t be properly supported (all rows
                         must have the same holes)                    
                </comment>
                <comment line="2018">
                    So now there remain one last case, namely: some part of the
                     index is provided by the oid...
                     We build a possibly incomplete and invalid index from
                     the OID.
                     The piece of index provided should begin at pos+2
                       oid[pos]   = id of the xxxEntry object,
                       oid[pos+1] = id of the columnar object,
                       oid[pos+2] ... oid[length-1] = piece of index.                    
                </comment>
                <comment line="2028">
                    We get the next index following the provided index.
                     If this raises an exception, then it means that we have
                     reached the last index in the table, and we must then
                     try with the next columnar object.
                    
                     Bug fix 4269251
                     The SnmpIndex is defined to contain a valid oid:
                     this is not an SNMP requirement for the getNext request.
                     So we no more use the SnmpIndex but directly the SnmpOid.                    
                </comment>
                <comment line="2041">
                    If the variable must ne skipped, fall through...
                    
                     XXX revisit: not exactly perfect:
                         a specific row could be empty.. But we don&apos;t know
                         how to make the difference! =&gt; tradeoff holes
                         in tables can&apos;t be properly supported (all rows
                         must have the same holes)                    
                </comment>
                <declaration name="length" type="int" line="1917"/>
                <declaration name="data" type="Object" line="1926"/>
                <declaration name="pduVersion" type="int" line="1927"/>
                <declaration name="var" type="long" line="1929"/>
                <scope line="1939"/>
                <scope line="1952"/>
                <scope line="1959"/>
                <scope line="1969"/>
                <declaration name="entryoid" type="SnmpOid" line="1977"/>
                <scope line="1979"/>
                <scope line="1994">
                    <scope line="2012"/>
                </scope>
                <scope line="2015">
                    <scope line="2037"/>
                    <scope line="2050"/>
                </scope>
            </method>
            <method name="findNextAccessibleOid" type="long[]" line="2071">
                <params>
                    <param name="entryoid" type="SnmpOid"/>
                    <param name="varbind" type="SnmpVarBind"/>
                    <param name="oid" type="long[]"/>
                    <param name="depth" type="int"/>
                    <param name="handlers" type="SnmpRequestTree"/>
                    <param name="checker" type="AcmChecker"/>
                    <param name="data" type="Object"/>
                    <param name="var" type="long"/>
                </params>
                <comment line="2075">
                    Loop on each var (column)                    
                </comment>
                <comment line="2077">
                    This should not happen. If it happens, (bug, or customized
                     methods returning garbage instead of raising an exception),
                     it probably means that there is nothing to return anyway.
                     So we throw the exception.
                     =&gt; will skip to next node in the MIB tree.                    
                </comment>
                <comment line="2086">
                    So here we know both the row (entryoid) and the column (var)                    
                </comment>
                <comment line="2090">
                    Raising an exception here will make the catch() clause
                     switch to the next variable. If `var&apos; is not readable
                     for this specific entry, it is not readable for any
                     other entry =&gt; skip to next column.                    
                </comment>
                <comment line="2098">
                    Prepare the result and the ACM checker.                    
                </comment>
                <comment line="2103">
                    Bug detector!                    
                </comment>
                <comment line="2105">
                    Copy the entryOid at the end of `result&apos;                    
                </comment>
                <comment line="2110">
                    Set the node Id and var Id in result.                    
                </comment>
                <comment line="2115">
                    Append nodeId.varId.&lt;rowOid&gt; to ACM checker.                    
                </comment>
                <comment line="2119">
                    No we&apos;re going to ACM check our OID.                    
                </comment>
                <comment line="2123">
                    No exception thrown by checker =&gt; this is all OK!
                     we have it: register the handler and return the
                     result.                    
                </comment>
                <comment line="2130">
                    Skip to the next entry. If an exception is
                     thrown, will be catch by enclosing catch
                     and a skip is done to the next var.                    
                </comment>
                <comment line="2136">
                    Clean the checker.                    
                </comment>
                <comment line="2141">
                    Catching an exception here means we have to skip to the
                     next column.
                    
                     Back to the first row.                    
                </comment>
                <comment line="2147">
                    Find out the next column.                    
                </comment>
                <comment line="2153">
                    This should not happen. If it happens, (bug, or customized
                     methods returning garbage instead of raising an exception),
                     it probably means that there is nothing to return anyway.
                     No need to continue, we throw an exception.
                     =&gt; will skip to next node in the MIB tree.                    
                </comment>
                <declaration name="pduVersion" type="int" line="2072"/>
                <scope line="2075">
                    <scope line="2088">
                        <declaration name="etable" type="long[]" line="2099"/>
                        <declaration name="elength" type="int" line="2100"/>
                        <declaration name="result" type="long[]" line="2101"/>
                        <scope line="2119"/>
                        <scope line="2128"/>
                        <scope line="2134"/>
                    </scope>
                    <scope line="2139"/>
                </scope>
            </method>
            <javadoc line="2164">
                Validate the specified OID.
                  &lt;p&gt;                
                <param>
                    oid The OID array.                    
                </param>
                <param>
                    pos The position in the array.                    
                </param>
                <exception>
                    SnmpStatusException If the validation fails.                    
                </exception>
            </javadoc>
            <method name="validateOid" type="void" line="2174">
                <params>
                    <param name="oid" type="long[]"/>
                    <param name="pos" type="int"/>
                </params>
                <comment line="2178">
                    Control the length of the oid                    
                </comment>
                <comment line="2183">
                    Check that the entry identifier is specified                    
                </comment>
                <declaration name="length" type="int" line="2175"/>
            </method>
            <javadoc line="2193">
                Enable this &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt; to send a notification.
                  &lt;p&gt;                
                <param>
                    notification The notification to send.                    
                </param>
            </javadoc>
            <method name="sendNotification" type="void" line="2199">
                <params>
                    <param name="notification" type="Notification"/>
                </params>
                <comment line="2202">
                    loop on listener                    
                </comment>
                <comment line="2210">
                    Get the associated handback list and the associated filter list                    
                </comment>
                <comment line="2217">
                    loop on handback                    
                </comment>
                <scope line="2204">
                    <declaration name="listener" type="NotificationListener" line="2206"/>
                    <declaration name="handbackList" type="java.util.Vector" line="2211"/>
                    <declaration name="filterList" type="java.util.Vector" line="2213"/>
                    <declaration name="f" type="java.util.Enumeration" line="2218"/>
                    <scope line="2220">
                        <declaration name="handback" type="Object" line="2222"/>
                        <declaration name="filter" type="NotificationFilter" line="2223"/>
                        <scope line="2227"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2235">
                This method is used by the SnmpMibTable to create and send a table
                  entry notification to all the listeners registered for this kind of
                  notification.
                  &lt;p&gt;                
                <param>
                    type The notification type.                    
                </param>
                <param>
                    timeStamp The notification emission date.                    
                </param>
                <param>
                    entry The entry object.                    
                </param>
            </javadoc>
            <method name="sendNotification" type="void" line="2248">
                <params>
                    <param name="type" type="String"/>
                    <param name="timeStamp" type="long"/>
                    <param name="entry" type="Object"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="2250"/>
                <declaration name="notif" type="SnmpTableEntryNotification" line="2254"/>
            </method>
            <javadoc line="2261">
                Return true if the entry identified by the given OID index
                  is contained in this table.
                  &lt;p&gt;
                  &lt;b&gt;Do not call this method directly&lt;/b&gt;.
                  &lt;p&gt;
                  This method is provided has a hook for subclasses.
                  It is called when a get/set request is received in order to
                  determine whether the specified entry is contained in the table.
                  You may want to override this method if you need to perform e.g.
                  lazy evaluation of tables (you need to update the table when a
                  request is received) or if your table is virtual.
                  &lt;p&gt;
                  Note that this method is called by the Runtime from within a
                  synchronized block.                
                <param>
                    oid The index part of the OID we&apos;re looking for.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the &lt;code&gt;{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}&lt;/code&gt;
                      for each incoming SNMP request.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the entry is found, &lt;code&gt;false&lt;/code&gt;
                      otherwise.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="contains" type="boolean" line="2288">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <javadoc line="2292">
                Look for the given oid in the OID table (tableoids) and returns
                  its position.
                  &lt;p&gt;                
                <param>
                    oid The OID we&apos;re looking for.                    
                </param>
                <return>
                    The position of the OID in the table. -1 if the given
                      OID was not found.                    
                </return>
            </javadoc>
            <method name="findObject" type="int" line="2303">
                <params>
                    <param name="oid" type="SnmpOid"/>
                </params>
                <comment line="2310">
                    System.out.println(&quot;Try to retrieve: &quot; + oid.toString());                    
                </comment>
                <comment line="2313">
                    XX pos = (SnmpOid) oids.elementAt(curr);                    
                </comment>
                <comment line="2316">
                    System.out.println(&quot;Compare with&quot; + pos.toString());
                     never know ...we might find something ...                    
                </comment>
                <declaration name="low" type="int" line="2304"/>
                <declaration name="max" type="int" line="2305"/>
                <declaration name="pos" type="SnmpOid" line="2306"/>
                <declaration name="comp" type="int" line="2307"/>
                <declaration name="curr" type="int" line="2308"/>
                <scope line="2310">
                    <scope line="2322"/>
                    <scope line="2325"/>
                    <scope line="2327"/>
                </scope>
            </method>
            <javadoc line="2335">
                Search the position at which the given oid should be inserted
                  in the OID table (tableoids).
                  &lt;p&gt;                
                <param>
                    oid The OID we would like to insert.                    
                </param>
                <return>
                    The position at which the OID should be inserted in
                      the table.                    
                </return>
                <exception>
                    SnmpStatusException if the OID is already present in the
                      table.                    
                </exception>
            </javadoc>
            <method name="getInsertionPoint" type="int" line="2350">
                <params>
                    <param name="oid" type="SnmpOid"/>
                </params>
            </method>
            <javadoc line="2354">
                Search the position at which the given oid should be inserted
                  in the OID table (tableoids).
                  &lt;p&gt;                
                <param>
                    oid The OID we would like to insert.                    
                </param>
                <param>
                    fail Tells whether a SnmpStatusException must be generated
                      if the given OID is already present in the table.                    
                </param>
                <return>
                    The position at which the OID should be inserted in
                      the table. When the OID is found, it returns the next
                      position. Note that it is not valid to insert twice the
                      same OID. This feature is only an optimization to improve
                      the getNextOid() behaviour.                    
                </return>
                <exception>
                    SnmpStatusException if the OID is already present in the
                      table and &lt;code&gt;fail&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="getInsertionPoint" type="int" line="2375">
                <params>
                    <param name="oid" type="SnmpOid"/>
                    <param name="fail" type="boolean"/>
                </params>
                <comment line="2386">
                    XX pos= (SnmpOid) oids.elementAt(curr);                    
                </comment>
                <comment line="2389">
                    never know ...we might find something ...                    
                </comment>
                <declaration name="failStatus" type="int" line="2377"/>
                <declaration name="low" type="int" line="2378"/>
                <declaration name="max" type="int" line="2379"/>
                <declaration name="pos" type="SnmpOid" line="2380"/>
                <declaration name="comp" type="int" line="2381"/>
                <declaration name="curr" type="int" line="2382"/>
                <scope line="2383">
                    <scope line="2392"/>
                    <scope line="2399"/>
                    <scope line="2401"/>
                </scope>
            </method>
            <javadoc line="2409">
                Remove the OID located at the given position.
                  &lt;p&gt;                
                <param>
                    pos The position at which the OID to be removed is located.                    
                </param>
            </javadoc>
            <method name="removeOid" type="void" line="2416">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="l1" type="int" line="2419"/>
            </method>
            <javadoc line="2426">
                Insert an OID at the given position.
                  &lt;p&gt;                
                <param>
                    oid The OID to be inserted in the table                    
                </param>
                <param>
                    pos The position at which the OID to be added is located.                    
                </param>
            </javadoc>
            <method name="insertOid" type="void" line="2434">
                <params>
                    <param name="pos" type="int"/>
                    <param name="oid" type="SnmpOid"/>
                </params>
                <comment line="2437">
                    Vector must be enlarged                    
                </comment>
                <comment line="2439">
                    Save old vector                    
                </comment>
                <comment line="2442">
                    Allocate larger vectors                    
                </comment>
                <comment line="2446">
                    Check pos validity                    
                </comment>
                <comment line="2453">
                    Copy original vector up to `pos&apos;                    
                </comment>
                <comment line="2457">
                    Copy original vector from `pos&apos; to end, leaving
                     an empty room at `pos&apos; in the new vector.                    
                </comment>
                <comment line="2464">
                    Vector is large enough to accomodate one additional
                     entry.
                    
                     Shift vector, making an empty room at `pos&apos;                    
                </comment>
                <comment line="2473">
                    Fill the gap at `pos&apos;                    
                </comment>
                <scope line="2435">
                    <declaration name="olde" type="SnmpOid[]" line="2439"/>
                    <declaration name="l1" type="int" line="2449"/>
                    <declaration name="l2" type="int" line="2450"/>
                </scope>
                <scope line="2462"/>
            </method>
            <declaration name="nodeId" type="int" line="2482"/>
            <javadoc line="2482">
                The id of the contained entry object.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="theMib" type="SnmpMib" line="2488"/>
            <javadoc line="2488">
                The MIB to which the metadata is linked.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="creationEnabled" type="boolean" line="2494"/>
            <javadoc line="2494">
                &lt;CODE&gt;true&lt;/CODE&gt; if remote creation of entries via SET operations
                  is enabled.
                  [default value is &lt;CODE&gt;false&lt;/CODE&gt;]                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="factory" type="SnmpTableEntryFactory" line="2502"/>
            <javadoc line="2502">
                The entry factory                
            </javadoc>
            <declaration name="size" type="int" line="2511"/>
            <javadoc line="2511">
                The number of elements in the table.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="Delta" type="int" line="2523"/>
            <javadoc line="2523">
                The list of OIDs.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="tablecount" type="int" line="2529"/>
            <declaration name="tablesize" type="int" line="2530"/>
            <declaration name="tableoids" type="SnmpOid" line="2531"/>
            <declaration name="entries" type="Vector&lt;Object&gt;" line="2533"/>
            <javadoc line="2533">
                The list of entries.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="entrynames" type="Vector&lt;ObjectName&gt;" line="2539"/>
            <javadoc line="2539">
                The list of object names.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="handbackTable" type="Hashtable&lt;NotificationListener,Vector&lt;Object&gt;&gt;" line="2550"/>
            <javadoc line="2550">
                Listener hastable containing the hand-back objects.                
            </javadoc>
            <declaration name="filterTable" type="Hashtable&lt;NotificationListener,Vector&lt;NotificationFilter&gt;&gt;" line="2556"/>
            <javadoc line="2556">
                Listener hastable containing the filter objects.                
            </javadoc>
            <declaration name="sequenceNumber" type="long" line="2565"/>
            <javadoc line="2565">
                SNMP table sequence number.
                  The default value is set to 0.                
            </javadoc>
        </class>
    </source>