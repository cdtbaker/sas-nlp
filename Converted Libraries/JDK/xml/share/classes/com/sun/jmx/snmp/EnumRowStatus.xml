<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <import package="java.io.Serializable"/>
        <import package="java.util.Hashtable"/>
        <import package="com.sun.jmx.snmp.SnmpValue"/>
        <import package="com.sun.jmx.snmp.SnmpInt"/>
        <import package="com.sun.jmx.snmp.Enumerated"/>
        <class name="EnumRowStatus" line="7">
            <extends class="Enumerated"/>
            <implements interface="Serializable"/>
            <javadoc line="7">
                This class is an internal class which is used to represent RowStatus
                  codes as defined in RFC 2579.
                  It defines an additional code, &lt;i&gt;unspecified&lt;/i&gt;, which is
                  implementation specific, and is used to identify
                  unspecified actions (when for instance the RowStatus variable
                  is not present in the varbind list) or uninitialized values.
                  mibgen does not generate objects of this class but any variable
                  using the RowStatus textual convention can be converted into an
                  object of this class thanks to the
                  &lt;code&gt;EnumRowStatus(Enumerated valueIndex)&lt;/code&gt; constructor.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="22"/>
            <declaration name="unspecified" type="int" line="23"/>
            <javadoc line="23">
                This value is SNMP Runtime implementation specific, and is used to identify
                  unspecified actions (when for instance the RowStatus variable
                  is not present in the varbind list) or uninitialized values.                
            </javadoc>
            <declaration name="active" type="int" line="29"/>
            <javadoc line="29">
                This value corresponds to the &lt;i&gt;active&lt;/i&gt; RowStatus, as defined in
                  RFC 2579 from SMIv2:
                  &lt;ul&gt;
                  &lt;i&gt;active&lt;/i&gt; indicates that the conceptual row is available for
                  use by the managed device;
                  &lt;/ul&gt;                
            </javadoc>
            <declaration name="notInService" type="int" line="38"/>
            <javadoc line="38">
                This value corresponds to the &lt;i&gt;notInService&lt;/i&gt; RowStatus, as
                  defined in RFC 2579 from SMIv2:
                  &lt;ul&gt;
                  &lt;i&gt;notInService&lt;/i&gt; indicates that the conceptual
                  row exists in the agent, but is unavailable for use by
                  the managed device; &lt;i&gt;notInService&lt;/i&gt; has
                  no implication regarding the internal consistency of
                  the row, availability of resources, or consistency with
                  the current state of the managed device;
                  &lt;/ul&gt;                
            </javadoc>
            <declaration name="notReady" type="int" line="51"/>
            <javadoc line="51">
                This value corresponds to the &lt;i&gt;notReady&lt;/i&gt; RowStatus, as defined
                  in RFC 2579 from SMIv2:
                  &lt;ul&gt;
                  &lt;i&gt;notReady&lt;/i&gt; indicates that the conceptual row
                  exists in the agent, but is missing information
                  necessary in order to be available for use by the
                  managed device (i.e., one or more required columns in
                  the conceptual row have not been instantiated);
                  &lt;/ul&gt;                
            </javadoc>
            <declaration name="createAndGo" type="int" line="63"/>
            <javadoc line="63">
                This value corresponds to the &lt;i&gt;createAndGo&lt;/i&gt; RowStatus,
                  as defined in RFC 2579 from SMIv2:
                  &lt;ul&gt;
                  &lt;i&gt;createAndGo&lt;/i&gt; is supplied by a management
                  station wishing to create a new instance of a
                  conceptual row and to have its status automatically set
                  to active, making it available for use by the managed
                  device;
                  &lt;/ul&gt;                
            </javadoc>
            <declaration name="createAndWait" type="int" line="75"/>
            <javadoc line="75">
                This value corresponds to the &lt;i&gt;createAndWait&lt;/i&gt; RowStatus,
                  as defined in RFC 2579 from SMIv2:
                  &lt;ul&gt;
                  &lt;i&gt;createAndWait&lt;/i&gt; is supplied by a management
                  station wishing to create a new instance of a
                  conceptual row (but not make it available for use by
                  the managed device);
                  &lt;/ul&gt;                
            </javadoc>
            <declaration name="destroy" type="int" line="86"/>
            <javadoc line="86">
                This value corresponds to the &lt;i&gt;destroy&lt;/i&gt; RowStatus, as defined in
                  RFC 2579 from SMIv2:
                  &lt;ul&gt;
                  &lt;i&gt;destroy&lt;/i&gt; is supplied by a management station
                  wishing to delete all of the instances associated with
                  an existing conceptual row.
                  &lt;/ul&gt;                
            </javadoc>
            <javadoc line="96">
                Build an &lt;code&gt;EnumRowStatus&lt;/code&gt; from an &lt;code&gt;int&lt;/code&gt;.                
                <param>
                    valueIndex should be either 0 (&lt;i&gt;unspecified&lt;/i&gt;), or one of
                      the values defined in RFC 2579.                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      &lt;code&gt;valueIndex&lt;/code&gt; is not valid.                    
                </exception>
            </javadoc>
            <method name="EnumRowStatus" type="constructor" line="103">
                <params>
                    <param name="valueIndex" type="int"/>
                </params>
            </method>
            <javadoc line="106">
                Build an &lt;code&gt;EnumRowStatus&lt;/code&gt; from an &lt;code&gt;Enumerated&lt;/code&gt;.                
                <param>
                    valueIndex should be either 0 (&lt;i&gt;unspecified&lt;/i&gt;), or one of
                      the values defined in RFC 2579.                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      &lt;code&gt;valueIndex&lt;/code&gt; is not valid.                    
                </exception>
            </javadoc>
            <method name="EnumRowStatus" type="constructor" line="113">
                <params>
                    <param name="valueIndex" type="Enumerated"/>
                </params>
            </method>
            <javadoc line="116">
                Build an &lt;code&gt;EnumRowStatus&lt;/code&gt; from a &lt;code&gt;long&lt;/code&gt;.                
                <param>
                    valueIndex should be either 0 (&lt;i&gt;unspecified&lt;/i&gt;), or one of
                      the values defined in RFC 2579.                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      &lt;code&gt;valueIndex&lt;/code&gt; is not valid.                    
                </exception>
            </javadoc>
            <method name="EnumRowStatus" type="constructor" line="123">
                <params>
                    <param name="valueIndex" type="long"/>
                </params>
            </method>
            <javadoc line="126">
                Build an &lt;code&gt;EnumRowStatus&lt;/code&gt; from an &lt;code&gt;Integer&lt;/code&gt;.                
                <param>
                    valueIndex should be either 0 (&lt;i&gt;unspecified&lt;/i&gt;), or one of
                      the values defined in RFC 2579.                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      &lt;code&gt;valueIndex&lt;/code&gt; is not valid.                    
                </exception>
            </javadoc>
            <method name="EnumRowStatus" type="constructor" line="133">
                <params>
                    <param name="valueIndex" type="Integer"/>
                </params>
            </method>
            <javadoc line="136">
                Build an &lt;code&gt;EnumRowStatus&lt;/code&gt; from a &lt;code&gt;Long&lt;/code&gt;.                
                <param>
                    valueIndex should be either 0 (&lt;i&gt;unspecified&lt;/i&gt;), or one of
                      the values defined in RFC 2579.                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      &lt;code&gt;valueIndex&lt;/code&gt; is not valid.                    
                </exception>
            </javadoc>
            <method name="EnumRowStatus" type="constructor" line="143">
                <params>
                    <param name="valueIndex" type="Long"/>
                </params>
            </method>
            <javadoc line="146">
                Build an &lt;code&gt;EnumRowStatus&lt;/code&gt; with &lt;i&gt;unspecified&lt;/i&gt; value.                
            </javadoc>
            <method name="EnumRowStatus" type="constructor" line="149"/>
            <javadoc line="152">
                Build an &lt;code&gt;EnumRowStatus&lt;/code&gt; from a &lt;code&gt;String&lt;/code&gt;.                
                <param>
                    x should be either &quot;unspecified&quot;, or one of
                      the values defined in RFC 2579 (&quot;active&quot;, &quot;notReady&quot;, etc...)                    
                </param>
                <exception>
                    IllegalArgumentException if the given String
                      &lt;code&gt;x&lt;/code&gt; is not valid.                    
                </exception>
            </javadoc>
            <method name="EnumRowStatus" type="constructor" line="159">
                <params>
                    <param name="x" type="String"/>
                </params>
            </method>
            <javadoc line="162">
                Build an &lt;code&gt;EnumRowStatus&lt;/code&gt; from an &lt;code&gt;SnmpInt&lt;/code&gt;.                
                <param>
                    valueIndex should be either 0 (&lt;i&gt;unspecified&lt;/i&gt;), or one of
                      the values defined in RFC 2579.                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      &lt;code&gt;valueIndex&lt;/code&gt; is not valid.                    
                </exception>
            </javadoc>
            <method name="EnumRowStatus" type="constructor" line="169">
                <params>
                    <param name="valueIndex" type="SnmpInt"/>
                </params>
            </method>
            <javadoc line="172">
                Build an SnmpValue from this object.                
                <exception>
                    IllegalArgumentException if this object holds an
                      &lt;i&gt;unspecified&lt;/i&gt; value.                    
                </exception>
                <return>
                    an SnmpInt containing this object value.                    
                </return>
            </javadoc>
            <method name="toSnmpValue" type="SnmpInt" line="178"/>
            <javadoc line="182">
                Check that the given &lt;code&gt;value&lt;/code&gt; is valid.
                  Valid values are:
                  &lt;ul&gt;&lt;li&gt;&lt;i&gt;unspecified(0)&lt;/i&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;i&gt;active(1)&lt;/i&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;i&gt;notInService(2)&lt;/i&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;i&gt;notReady(3)&lt;/i&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;i&gt;createAndGo(4)&lt;/i&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;i&gt;createAndWait(5)&lt;/i&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;i&gt;destroy(6)&lt;/i&gt;&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="isValidValue" type="boolean" line="194">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <method name="getIntTable" type="Hashtable" line="199"/>
            <method name="getStringTable" type="Hashtable" line="202"/>
            <method name="getRSIntTable" type="Hashtable" line="205"/>
            <method name="getRSStringTable" type="Hashtable" line="208"/>
            <declaration name="intTable" type="Hashtable&amp;lt;Integer,String&amp;gt;" line="211"/>
            <declaration name="stringTable" type="Hashtable&amp;lt;String,Integer&amp;gt;" line="212"/>
            <scope line="213"/>
        </class>
    </source>