<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.IdentityHashMap"/>
        <import package="java.util.LinkedHashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.SortedMap"/>
        <import package="java.util.TreeMap"/>
        <import package="javax.management.MalformedObjectNameException"/>
        <import package="javax.management.ObjectName"/>
        <class name="Util" line="18">
            <method name="newObjectName" type="ObjectName" line="19">
                <params>
                    <param name="string" type="String"/>
                </params>
                <scope line="20"/>
                <scope line="23"/>
            </method>
            <method name="newMap" type="Map&lt;K,V&gt;" line="27"/>
            <method name="newSynchronizedMap" type="Map&lt;K,V&gt;" line="30"/>
            <method name="newIdentityHashMap" type="IdentityHashMap&lt;K,V&gt;" line="33"/>
            <method name="newSynchronizedIdentityHashMap" type="Map&lt;K,V&gt;" line="36">
                <declaration name="map" type="Map&amp;lt;K,V&amp;gt;" line="37"/>
            </method>
            <method name="newSortedMap" type="SortedMap&lt;K,V&gt;" line="40"/>
            <method name="newSortedMap" type="SortedMap&lt;K,V&gt;" line="43">
                <params>
                    <param name="comp" type="Comparator&lt;? super K&gt;"/>
                </params>
            </method>
            <method name="newInsertionOrderMap" type="Map&lt;K,V&gt;" line="46"/>
            <method name="newSet" type="Set&lt;E&gt;" line="49"/>
            <method name="newSet" type="Set&lt;E&gt;" line="52">
                <params>
                    <param name="c" type="Collection&lt;E&gt;"/>
                </params>
            </method>
            <method name="newList" type="List&lt;E&gt;" line="55"/>
            <method name="newList" type="List&lt;E&gt;" line="58">
                <params>
                    <param name="c" type="Collection&lt;E&gt;"/>
                </params>
            </method>
            <method name="cast" type="T" line="61">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <javadoc line="64">
                Computes a descriptor hashcode from its names and values.                
                <param>
                    names  the sorted array of descriptor names.                    
                </param>
                <param>
                    values the array of descriptor values.                    
                </param>
                <return>
                    a hash code value, as described in {@link #hashCode(Descriptor)}                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="70">
                <params>
                    <param name="names" type="String[]"/>
                    <param name="values" type="Object[]"/>
                </params>
                <declaration name="hash" type="int" line="71"/>
                <scope line="72">
                    <declaration name="v" type="Object" line="73"/>
                    <declaration name="h" type="int" line="74"/>
                    <scope line="75"/>
                    <scope line="78"/>
                    <scope line="81"/>
                    <scope line="84"/>
                </scope>
            </method>
            <javadoc line="91">
                Match a part of a string against a shell-style pattern.
                  The only pattern characters recognized are &lt;code&gt;?&lt;/code&gt;,
                  standing for any one character,
                  and &lt;code&gt;&lt;/code&gt;, standing for any string of
                  characters, including the empty string. For instance,{@code wildmatch(&quot;sandwich&quot;,&quot;sa?dch&quot;,1,4,1,4)} will match{@code &quot;and&quot;} against {@code &quot;a?d&quot;}.                
                <param>
                    str  the string containing the sequence to match.                    
                </param>
                <param>
                    pat  a string containing a pattern to match the sub string
                      against.                    
                </param>
                <param>
                    stri   the index in the string at which matching should begin.                    
                </param>
                <param>
                    strend the index in the string at which the matching should
                      end.                    
                </param>
                <param>
                    pati   the index in the pattern at which matching should begin.                    
                </param>
                <param>
                    patend the index in the pattern at which the matching should
                      end.                    
                </param>
                <return>
                    true if and only if the string matches the pattern.                    
                </return>
            </javadoc>
            <method name="wildmatch" type="boolean" line="108">
                <params>
                    <param name="str" type="String"/>
                    <param name="pat" type="String"/>
                    <param name="stri" type="int"/>
                    <param name="strend" type="int"/>
                    <param name="pati" type="int"/>
                    <param name="patend" type="int"/>
                </params>
                <declaration name="starstri" type="int" line="109"/>
                <declaration name="starpati" type="int" line="110"/>
                <scope line="112">
                    <scope line="113">
                        <declaration name="patc" type="char" line="114"/>
                        <scope line="127"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="142">
                Match a string against a shell-style pattern.  The only pattern
                  characters recognized are &lt;code&gt;?&lt;/code&gt;, standing for any one
                  character, and &lt;code&gt;&lt;/code&gt;, standing for any string of
                  characters, including the empty string.                
                <param>
                    str the string to match.                    
                </param>
                <param>
                    pat the pattern to match the string against.                    
                </param>
                <return>
                    true if and only if the string matches the pattern.                    
                </return>
            </javadoc>
            <method name="wildmatch" type="boolean" line="151">
                <params>
                    <param name="str" type="String"/>
                    <param name="pat" type="String"/>
                </params>
            </method>
        </class>
    </source>