<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.remote.security">
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.Set"/>
        <import package="javax.management.Attribute"/>
        <import package="javax.management.AttributeList"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.IntrospectionException"/>
        <import package="javax.management.InvalidAttributeValueException"/>
        <import package="javax.management.ListenerNotFoundException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.MBeanRegistrationException"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.NotificationFilter"/>
        <import package="javax.management.NotificationListener"/>
        <import package="javax.management.ObjectInstance"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.OperationsException"/>
        <import package="javax.management.QueryExp"/>
        <import package="javax.management.ReflectionException"/>
        <import package="javax.management.loading.ClassLoaderRepository"/>
        <import package="javax.management.remote.MBeanServerForwarder"/>
        <class name="MBeanServerAccessController" line="55">
            <comment line="131">
                --------------------------------------------                
            </comment>
            <comment line="132">
                --------------------------------------------                
            </comment>
            <comment line="133">
                                
            </comment>
            <comment line="134">
                Implementation of the MBeanServer interface                
            </comment>
            <comment line="135">
                                
            </comment>
            <comment line="136">
                --------------------------------------------                
            </comment>
            <comment line="137">
                --------------------------------------------                
            </comment>
            <comment line="608">
                ----------------                
            </comment>
            <comment line="609">
                PRIVATE METHODS                
            </comment>
            <comment line="610">
                ----------------                
            </comment>
            <comment line="661">
                ------------------                
            </comment>
            <comment line="662">
                PRIVATE VARIABLES                
            </comment>
            <comment line="663">
                ------------------                
            </comment>
            <implements interface="MBeanServerForwarder"/>
            <javadoc line="55">
                &lt;p&gt;An object of this class implements the MBeanServer interface
                  and, for each of its methods, calls an appropriate checking method
                  and then forwards the request to a wrapped MBeanServer object.  The
                  checking method may throw a RuntimeException if the operation is
                  not allowed; in this case the request is not forwarded to the
                  wrapped object.&lt;/p&gt;
                  &lt;p&gt;A typical use of this class is to insert it between a connector server
                  such as the RMI connector and the MBeanServer with which the connector
                  is associated.  Requests from the connector client can then be filtered
                  and those operations that are not allowed, or not allowed in a particular
                  context, can be rejected by throwing a &lt;code&gt;SecurityException&lt;/code&gt;
                  in the corresponding &lt;code&gt;check&lt;/code&gt; method.&lt;/p&gt;
                  &lt;p&gt;This is an abstract class, because in its implementation none of
                  the checking methods does anything.  To be useful, it must be
                  subclassed and at least one of the checking methods overridden to
                  do some checking.  Some or all of the MBeanServer methods may also
                  be overridden, for instance if the default checking behavior is
                  inappropriate.&lt;/p&gt;
                  &lt;p&gt;If there is no SecurityManager, then the access controller will refuse
                  to create an MBean that is a ClassLoader, which includes MLets, or to
                  execute the method addURL on an MBean that is an MLet. This prevents
                  people from opening security holes unintentionally. Otherwise, it
                  would not be obvious that granting write access grants the ability to
                  download and execute arbitrary code in the target MBean server. Advanced
                  users who do want the ability to use MLets are presumably advanced enough
                  to handle policy files and security managers.&lt;/p&gt;                
            </javadoc>
            <method name="getMBeanServer" type="MBeanServer" line="89"/>
            <method name="setMBeanServer" type="void" line="93">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                </params>
            </method>
            <method name="checkRead" type="void" line="102"/>
            <javadoc line="102">
                Check if the caller can do read operations. This method does
                  nothing if so, otherwise throws SecurityException.                
            </javadoc>
            <method name="checkWrite" type="void" line="108"/>
            <javadoc line="108">
                Check if the caller can do write operations.  This method does
                  nothing if so, otherwise throws SecurityException.                
            </javadoc>
            <javadoc line="114">
                Check if the caller can create the named class.  The default
                  implementation of this method calls {@link #checkWrite()}.                
            </javadoc>
            <method name="checkCreate" type="void" line="118">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <javadoc line="122">
                Check if the caller can unregister the named MBean.  The default
                  implementation of this method calls {@link #checkWrite()}.                
            </javadoc>
            <method name="checkUnregister" type="void" line="126">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="138">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="addNotificationListener" type="void" line="146">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <javadoc line="152">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="addNotificationListener" type="void" line="160">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="ObjectName"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <javadoc line="166">
                Call &lt;code&gt;checkCreate(className)&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="176">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="178"/>
                <scope line="179">
                    <declaration name="object" type="Object" line="180"/>
                </scope>
                <scope line="183"/>
            </method>
            <javadoc line="188">
                Call &lt;code&gt;checkCreate(className)&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="199">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="201"/>
                <scope line="202">
                    <declaration name="object" type="Object" line="203"/>
                </scope>
                <scope line="208"/>
            </method>
            <javadoc line="214">
                Call &lt;code&gt;checkCreate(className)&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="227">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="loaderName" type="ObjectName"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="229"/>
                <scope line="230">
                    <declaration name="object" type="Object" line="231"/>
                </scope>
                <scope line="235"/>
            </method>
            <javadoc line="240">
                Call &lt;code&gt;checkCreate(className)&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="255">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="257"/>
                <scope line="258">
                    <declaration name="object" type="Object" line="259"/>
                </scope>
                <scope line="265"/>
            </method>
            <javadoc line="271">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="deserialize" type="ObjectInputStream" line="277">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <javadoc line="282">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="deserialize" type="ObjectInputStream" line="288">
                <params>
                    <param name="className" type="String"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <javadoc line="293">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="deserialize" type="ObjectInputStream" line="304">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <javadoc line="309">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="getAttribute" type="Object" line="318">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                </params>
            </method>
            <javadoc line="323">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="getAttributes" type="AttributeList" line="328">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attributes" type="String[]"/>
                </params>
            </method>
            <javadoc line="333">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="getClassLoader" type="ClassLoader" line="338">
                <params>
                    <param name="loaderName" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="343">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="getClassLoaderFor" type="ClassLoader" line="348">
                <params>
                    <param name="mbeanName" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="353">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="getClassLoaderRepository" type="ClassLoaderRepository" line="357"/>
            <javadoc line="362">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="getDefaultDomain" type="String" line="366"/>
            <javadoc line="371">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="getDomains" type="String[]" line="375"/>
            <javadoc line="380">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="getMBeanCount" type="Integer" line="384"/>
            <javadoc line="389">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="getMBeanInfo" type="MBeanInfo" line="397">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="402">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="getObjectInstance" type="ObjectInstance" line="407">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="412">
                Call &lt;code&gt;checkCreate(className)&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="instantiate" type="Object" line="417">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <javadoc line="422">
                Call &lt;code&gt;checkCreate(className)&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="instantiate" type="Object" line="429">
                <params>
                    <param name="className" type="String"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                </params>
            </method>
            <javadoc line="434">
                Call &lt;code&gt;checkCreate(className)&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="instantiate" type="Object" line="439">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="444">
                Call &lt;code&gt;checkCreate(className)&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="instantiate" type="Object" line="450">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                </params>
            </method>
            <javadoc line="456">
                Call &lt;code&gt;checkWrite()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="invoke" type="Object" line="465">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="operationName" type="String"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                </params>
            </method>
            <javadoc line="471">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="isInstanceOf" type="boolean" line="476">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="className" type="String"/>
                </params>
            </method>
            <javadoc line="481">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="isRegistered" type="boolean" line="485">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="490">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="queryMBeans" type="Set<ObjectInstance>" line="494">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
            </method>
            <javadoc line="499">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="queryNames" type="Set<ObjectName>" line="503">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
            </method>
            <javadoc line="508">
                Call &lt;code&gt;checkWrite()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="registerMBean" type="ObjectInstance" line="516">
                <params>
                    <param name="object" type="Object"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="521">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="removeNotificationListener" type="void" line="527">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                </params>
            </method>
            <javadoc line="532">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="removeNotificationListener" type="void" line="540">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <javadoc line="546">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="removeNotificationListener" type="void" line="552">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="557">
                Call &lt;code&gt;checkRead()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="removeNotificationListener" type="void" line="565">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="ObjectName"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <javadoc line="571">
                Call &lt;code&gt;checkWrite()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="setAttribute" type="void" line="581">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attribute" type="Attribute"/>
                </params>
            </method>
            <javadoc line="586">
                Call &lt;code&gt;checkWrite()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="setAttributes" type="AttributeList" line="592">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attributes" type="AttributeList"/>
                </params>
            </method>
            <javadoc line="597">
                Call &lt;code&gt;checkUnregister()&lt;/code&gt;, then forward this method to the
                  wrapped object.                
            </javadoc>
            <method name="unregisterMBean" type="void" line="602">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <method name="checkClassLoader" type="void" line="611">
                <params>
                    <param name="object" type="Object"/>
                </params>
            </method>
            <method name="checkMLetMethods" type="void" line="620">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="operation" type="String"/>
                </params>
                <comment line="621">
                    Check if security manager installed                    
                </comment>
                <comment line="626">
                    Check for addURL and getMBeansFromURL methods                    
                </comment>
                <comment line="631">
                    Check if MBean is instance of MLet                    
                </comment>
                <comment line="636">
                    Throw security exception                    
                </comment>
                <comment line="637">
                    addURL                    
                </comment>
                <comment line="640">
                    getMBeansFromURL                    
                </comment>
                <comment line="641">
                    Whether or not calling getMBeansFromURL is allowed is controlled                    
                </comment>
                <comment line="642">
                    by the value of the &quot;jmx.remote.x.mlet.allow.getMBeansFromURL&quot;                    
                </comment>
                <comment line="643">
                    system property. If the value of this property is true, calling                    
                </comment>
                <comment line="644">
                    the MLet&apos;s getMBeansFromURL method is allowed. The default value                    
                </comment>
                <comment line="645">
                    for this property is false.                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="622"/>
                <scope line="623"/>
                <scope line="628"/>
                <scope line="633"/>
                <scope line="637"/>
                <scope line="640">
                    <declaration name="propName" type="String" line="646"/>
                    <declaration name="propAction" type="GetPropertyAction" line="647"/>
                    <declaration name="propValue" type="String" line="648"/>
                    <declaration name="allowGetMBeansFromURL" type="boolean" line="649"/>
                    <scope line="650"/>
                </scope>
            </method>
            <declaration name="mbs" type="MBeanServer" line="664"/>
        </class>
    </source>