<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.agent">
        <import package="java.io.Serializable"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpValue"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <class name="SnmpStandardObjectServer" line="10">
            <implements interface="Serializable"/>
            <javadoc line="10">
                &lt;p&gt;
                  This class is a utility class that transform SNMP GET / SET requests
                  into series of get&lt;i&gt;AttributeName&lt;/i&gt;() set&lt;i&gt;AttributeName&lt;/i&gt;()
                  invoked on the MBean.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The transformation relies on the metadata information provided by the{@link com.sun.jmx.snmp.agent.SnmpStandardMetaServer} object which is
                  passed as first parameter to every method. This SnmpStandardMetaServer
                  object is usually a Metadata object generated by &lt;code&gt;mibgen&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The MBean is not invoked directly by this class but through the
                  metadata object which holds a reference on it.
                  &lt;/p&gt;
                  &lt;p&gt;&lt;b&gt;&lt;i&gt;
                  This class is used internally by mibgen generated metadata objects and
                  you should never need to use it directly.
                  &lt;/b&gt;&lt;/i&gt;&lt;/p&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="33"/>
            <javadoc line="34">
                Generic handling of the &lt;CODE&gt;get&lt;/CODE&gt; operation.
                  &lt;p&gt; The default implementation of this method is to loop over the
                  varbind list associated with the sub-request and to call
                  &lt;CODE&gt;get(var.oid.getOidArc(depth), data);&lt;/CODE&gt;
                  &lt;pre&gt;
                  public void get(SnmpStandardMetaServer meta, SnmpMibSubRequest req,
                  int depth)
                  throws SnmpStatusException {
                  final Object data = req.getUserData();
                  for (Enumeration e= req.getElements(); e.hasMoreElements();) {
                  final SnmpVarBind var= (SnmpVarBind) e.nextElement();
                  try {
                  // This method will generate a SnmpStatusException
                  // if `depth&apos; is out of bounds.
                  //
                  final long id = var.oid.getOidArc(depth);
                  var.value = meta.get(id, data);
                  } catch(SnmpStatusException x) {
                  req.registerGetException(var,x);
                  }
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt; You can override this method if you need to implement some
                  specific policies for minimizing the accesses made to some remote
                  underlying resources.
                  &lt;p&gt;                
                <param>
                    meta  A pointer to the generated meta-data object which
                      implements the <code>SnmpStandardMetaServer</code>
                      interface.                    
                </param>
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException An error occurred while accessing
                      the MIB node.                    
                </exception>
            </javadoc>
            <method name="get" type="void" line="70">
                <params>
                    <param name="meta" type="SnmpStandardMetaServer"/>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="depth" type="int"/>
                </params>
                <declaration name="data" type="Object" line="71"/>
                <scope line="72">
                    <declaration name="var" type="SnmpVarBind" line="73"/>
                    <scope line="74">
                        <declaration name="id" type="long" line="75"/>
                    </scope>
                    <scope line="78"/>
                </scope>
            </method>
            <javadoc line="83">
                Generic handling of the &lt;CODE&gt;set&lt;/CODE&gt; operation.
                  &lt;p&gt; The default implementation of this method is to loop over the
                  varbind list associated with the sub-request and to call
                  &lt;CODE&gt;set(var.value, var.oid.getOidArc(depth), data);&lt;/CODE&gt;
                  &lt;pre&gt;
                  public void set(SnmpStandardMetaServer meta, SnmpMibSubRequest req,
                  int depth)
                  throws SnmpStatusException {
                  final Object data = req.getUserData();
                  for (Enumeration e= req.getElements(); e.hasMoreElements();) {
                  final SnmpVarBind var= (SnmpVarBind) e.nextElement();
                  try {
                  // This method will generate a SnmpStatusException
                  // if `depth&apos; is out of bounds.
                  //
                  final long id = var.oid.getOidArc(depth);
                  var.value = meta.set(var.value, id, data);
                  } catch(SnmpStatusException x) {
                  req.registerSetException(var,x);
                  }
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt; You can override this method if you need to implement some
                  specific policies for minimizing the accesses made to some remote
                  underlying resources.
                  &lt;p&gt;                
                <param>
                    meta  A pointer to the generated meta-data object which
                      implements the <code>SnmpStandardMetaServer</code>
                      interface.                    
                </param>
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException An error occurred while accessing
                      the MIB node.                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="119">
                <params>
                    <param name="meta" type="SnmpStandardMetaServer"/>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="depth" type="int"/>
                </params>
                <declaration name="data" type="Object" line="120"/>
                <scope line="121">
                    <declaration name="var" type="SnmpVarBind" line="122"/>
                    <scope line="124">
                        <declaration name="id" type="long" line="125"/>
                    </scope>
                    <scope line="128"/>
                </scope>
            </method>
            <javadoc line="133">
                Generic handling of the &lt;CODE&gt;check&lt;/CODE&gt; operation.
                  &lt;p&gt; The default implementation of this method is to loop over the
                  varbind list associated with the sub-request and to call
                  &lt;CODE&gt;check(var.value, var.oid.getOidArc(depth), data);&lt;/CODE&gt;
                  &lt;pre&gt;
                  public void check(SnmpStandardMetaServer meta, SnmpMibSubRequest req,
                  int depth)
                  throws SnmpStatusException {
                  final Object data = req.getUserData();
                  for (Enumeration e= req.getElements(); e.hasMoreElements();) {
                  final SnmpVarBind var= (SnmpVarBind) e.nextElement();
                  try {
                  // This method will generate a SnmpStatusException
                  // if `depth&apos; is out of bounds.
                  //
                  final long id = var.oid.getOidArc(depth);
                  meta.check(var.value, id, data);
                  } catch(SnmpStatusException x) {
                  req.registerCheckException(var,x);
                  }
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt; You can override this method if you need to implement some
                  specific policies for minimizing the accesses made to some remote
                  underlying resources, or if you need to implement some consistency
                  checks between the different values provided in the varbind list.
                  &lt;p&gt;                
                <param>
                    meta  A pointer to the generated meta-data object which
                      implements the <code>SnmpStandardMetaServer</code>
                      interface.                    
                </param>
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException An error occurred while accessing
                      the MIB node.                    
                </exception>
            </javadoc>
            <method name="check" type="void" line="170">
                <params>
                    <param name="meta" type="SnmpStandardMetaServer"/>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="depth" type="int"/>
                </params>
                <declaration name="data" type="Object" line="171"/>
                <scope line="172">
                    <declaration name="var" type="SnmpVarBind" line="173"/>
                    <scope line="174">
                        <declaration name="id" type="long" line="175"/>
                    </scope>
                    <scope line="178"/>
                </scope>
            </method>
        </class>
    </source>