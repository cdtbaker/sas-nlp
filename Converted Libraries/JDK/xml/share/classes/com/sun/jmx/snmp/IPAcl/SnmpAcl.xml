<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.IPAcl">
        <import package="java.io.Serializable"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.HashSet"/>
        <import package="java.security.acl.AclEntry"/>
        <import package="java.security.acl.NotOwnerException"/>
        <import package="com.sun.jmx.defaults.JmxProperties.SNMP_LOGGER"/>
        <import package="com.sun.jmx.snmp.InetAddressAcl"/>
        <class name="SnmpAcl" line="52">
            <comment line="461">
                PRIVATE VARIABLES
                ------------------                
            </comment>
            <implements interface="InetAddressAcl"/>
            <implements interface="Serializable"/>
            <javadoc line="52">
                Defines an implementation of the {@link com.sun.jmx.snmp.InetAddressAcl InetAddressAcl} interface.
                  &lt;p&gt;
                  In this implementation the ACL information is stored on a flat file and
                  its default location is &quot;$JRE/lib/snmp.acl&quot; - See{@link #getDefaultAclFileName()}&lt;p&gt;
                  &lt;OL&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="66"/>
            <declaration name="READ" type="PermissionImpl" line="68"/>
            <declaration name="WRITE" type="PermissionImpl" line="69"/>
            <javadoc line="71">
                Constructs the Java Dynamic Management(TM) Access Control List
                  based on IP addresses. The ACL will take the given owner name.
                  The current IP address will be the owner of the ACL.                
                <param>
                    Owner The name of the ACL Owner.                    
                </param>
                <exception>
                    UnknownHostException If the local host is unknown.                    
                </exception>
                <exception>
                    IllegalArgumentException If the ACL file doesn&apos;t exist.                    
                </exception>
            </javadoc>
            <method name="SnmpAcl" type="constructor" line="82">
                <params>
                    <param name="Owner" type="String"/>
                </params>
            </method>
            <javadoc line="86">
                Constructs the Java Dynamic Management(TM) Access Control List
                  based on IP addresses. The ACL will take the given owner name.
                  The current IP address will be the owner of the ACL.                
                <param>
                    Owner The name of the ACL Owner.                    
                </param>
                <param>
                    aclFileName The name of the ACL File.                    
                </param>
                <exception>
                    UnknownHostException If the local host is unknown.                    
                </exception>
                <exception>
                    IllegalArgumentException If the ACL file doesn&apos;t exist.                    
                </exception>
            </javadoc>
            <method name="SnmpAcl" type="constructor" line="98">
                <params>
                    <param name="Owner" type="String"/>
                    <param name="aclFileName" type="String"/>
                </params>
                <comment line="103">
                    PrincipalImpl() take the current host as entry                    
                </comment>
                <scope line="104">
                    <declaration name="ownEntry" type="AclEntry" line="106"/>
                </scope>
                <scope line="110">
                    <scope line="111"/>
                </scope>
            </method>
            <javadoc line="123">
                Returns an enumeration of the entries in this ACL. Each element in the
                  enumeration is of type &lt;CODE&gt;java.security.acl.AclEntry&lt;/CODE&gt;.                
                <return>
                    An enumeration of the entries in this ACL.                    
                </return>
            </javadoc>
            <method name="entries" type="Enumeration" line="129"/>
            <javadoc line="133">
                Returns ann enumeration of community strings. Community strings are returned as String.                
                <return>
                    The enumeration of community strings.                    
                </return>
            </javadoc>
            <method name="communities" type="Enumeration<String>" line="137">
                <declaration name="set" type="HashSet&lt;String&gt;" line="138"/>
                <declaration name="res" type="Vector&lt;String&gt;" line="139"/>
                <scope line="140">
                    <declaration name="entry" type="AclEntryImpl" line="141"/>
                    <scope line="143"/>
                </scope>
                <declaration name="objs" type="String[]" line="147"/>
            </method>
            <javadoc line="154">
                Returns the name of the ACL.                
                <return>
                    The name of the ACL.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="159"/>
            <javadoc line="163">
                Returns the read permission instance used.                
                <return>
                    The read permission instance.                    
                </return>
            </javadoc>
            <method name="getREAD" type="PermissionImpl" line="168"/>
            <javadoc line="172">
                Returns the write permission instance used.                
                <return>
                    The write permission instance.                    
                </return>
            </javadoc>
            <method name="getWRITE" type="PermissionImpl" line="177"/>
            <javadoc line="181">
                Get the default name for the ACL file.
                  In this implementation this is &quot;$JRE/lib/snmp.acl&quot;                
                <return>
                    The default name for the ACL file.                    
                </return>
            </javadoc>
            <method name="getDefaultAclFileName" type="String" line="186">
                <declaration name="fileSeparator" type="String" line="187"/>
                <declaration name="defaultAclName" type="StringBuffer" line="189"/>
            </method>
            <javadoc line="196">
                Sets the full path of the file containing the ACL information.                
                <param>
                    filename The full path of the file containing the ACL information.                    
                </param>
                <throws>
                    IllegalArgumentException If the passed ACL file doesn&apos;t exist.                    
                </throws>
            </javadoc>
            <method name="setAuthorizedListFile" type="void" line="203">
                <params>
                    <param name="filename" type="String"/>
                </params>
                <declaration name="file" type="File" line="204"/>
                <scope line="205">
                    <scope line="206"/>
                </scope>
                <scope line="215"/>
            </method>
            <javadoc line="222">
                Resets this ACL to the values contained in the configuration file.                
                <exception>
                    NotOwnerException If the principal attempting the reset is not an owner of this ACL.                    
                </exception>
                <exception>
                    UnknownHostException If IP addresses for hosts contained in the ACL file couldn&apos;t be found.                    
                </exception>
            </javadoc>
            <method name="rereadTheFile" type="void" line="228">
                <declaration name="ownEntry" type="AclEntry" line="233"/>
            </method>
            <javadoc line="240">
                Returns the full path of the file used to get ACL information.                
                <return>
                    The full path of the file used to get ACL information.                    
                </return>
            </javadoc>
            <method name="getAuthorizedListFile" type="String" line="245"/>
            <javadoc line="249">
                Checks whether or not the specified host has &lt;CODE&gt;READ&lt;/CODE&gt; access.                
                <param>
                    address The host address to check.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the host has read permission, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="checkReadPermission" type="boolean" line="256">
                <params>
                    <param name="address" type="InetAddress"/>
                </params>
                <declaration name="p" type="PrincipalImpl" line="258"/>
            </method>
            <javadoc line="262">
                Checks whether or not the specified host and community have &lt;CODE&gt;READ&lt;/CODE&gt; access.                
                <param>
                    address The host address to check.                    
                </param>
                <param>
                    community The community associated with the host.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the pair (host, community) has read permission, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="checkReadPermission" type="boolean" line="270">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="community" type="String"/>
                </params>
                <declaration name="p" type="PrincipalImpl" line="272"/>
            </method>
            <javadoc line="276">
                Checks whether or not a community string is defined.                
                <param>
                    community The community to check.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the community is known, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="checkCommunity" type="boolean" line="283">
                <params>
                    <param name="community" type="String"/>
                </params>
            </method>
            <javadoc line="287">
                Checks whether or not the specified host has &lt;CODE&gt;WRITE&lt;/CODE&gt; access.                
                <param>
                    address The host address to check.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the host has write permission, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="checkWritePermission" type="boolean" line="294">
                <params>
                    <param name="address" type="InetAddress"/>
                </params>
                <declaration name="p" type="PrincipalImpl" line="296"/>
            </method>
            <javadoc line="300">
                Checks whether or not the specified host and community have &lt;CODE&gt;WRITE&lt;/CODE&gt; access.                
                <param>
                    address The host address to check.                    
                </param>
                <param>
                    community The community associated with the host.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the pair (host, community) has write permission, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="checkWritePermission" type="boolean" line="308">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="community" type="String"/>
                </params>
                <declaration name="p" type="PrincipalImpl" line="310"/>
            </method>
            <javadoc line="314">
                Returns an enumeration of trap destinations.                
                <return>
                    An enumeration of the trap destinations (enumeration of &lt;CODE&gt;InetAddress&lt;/CODE&gt;).                    
                </return>
            </javadoc>
            <method name="getTrapDestinations" type="Enumeration" line="319"/>
            <javadoc line="323">
                Returns an enumeration of trap communities for a given host.                
                <param>
                    i The address of the host.                    
                </param>
                <return>
                    An enumeration of trap communities for a given host (enumeration of &lt;CODE&gt;String&lt;/CODE&gt;).                    
                </return>
            </javadoc>
            <method name="getTrapCommunities" type="Enumeration" line="330">
                <params>
                    <param name="i" type="InetAddress"/>
                </params>
                <declaration name="list" type="Vector" line="331"/>
                <scope line="332">
                    <scope line="333"/>
                </scope>
                <scope line="338">
                    <scope line="340"/>
                </scope>
            </method>
            <javadoc line="348">
                Returns an enumeration of inform destinations.                
                <return>
                    An enumeration of the inform destinations (enumeration of &lt;CODE&gt;InetAddress&lt;/CODE&gt;).                    
                </return>
            </javadoc>
            <method name="getInformDestinations" type="Enumeration" line="353"/>
            <javadoc line="357">
                Returns an enumeration of inform communities for a given host.                
                <param>
                    i The address of the host.                    
                </param>
                <return>
                    An enumeration of inform communities for a given host (enumeration of &lt;CODE&gt;String&lt;/CODE&gt;).                    
                </return>
            </javadoc>
            <method name="getInformCommunities" type="Enumeration" line="364">
                <params>
                    <param name="i" type="InetAddress"/>
                </params>
                <declaration name="list" type="Vector" line="365"/>
                <scope line="366">
                    <scope line="367"/>
                </scope>
                <scope line="372">
                    <scope line="374"/>
                </scope>
            </method>
            <javadoc line="382">
                Converts the input configuration file into ACL.                
            </javadoc>
            <method name="readAuthorizedListFile" type="void" line="385">
                <comment line="397">
                    Read the file content                    
                </comment>
                <scope line="389">
                    <scope line="390"/>
                </scope>
                <scope line="395">
                    <declaration name="parser" type="Parser" line="397"/>
                    <scope line="398"/>
                    <scope line="400">
                        <scope line="401"/>
                    </scope>
                    <scope line="410">
                        <declaration name="n" type="JDMSecurityDefs" line="411"/>
                    </scope>
                    <scope line="415">
                        <scope line="416"/>
                    </scope>
                    <scope line="421">
                        <scope line="422"/>
                    </scope>
                    <scope line="429">
                        <declaration name="aa" type="AclEntryImpl" line="430"/>
                        <scope line="431"/>
                        <scope line="436">
                            <declaration name="perm" type="java.security.acl.Permission" line="437"/>
                            <scope line="438"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="447">
                Set the default full path for &quot;snmp.acl&quot; input file.
                  Do not complain if the file does not exists.                
            </javadoc>
            <method name="setDefaultFileName" type="void" line="451">
                <comment line="456">
                    OK...                    
                </comment>
                <scope line="452"/>
                <scope line="454"/>
            </method>
            <declaration name="acl" type="AclImpl" line="463"/>
            <javadoc line="463">
                Represents the Access Control List.                
            </javadoc>
            <declaration name="alwaysAuthorized" type="boolean" line="467"/>
            <javadoc line="467">
                Flag indicating whether the access is always authorized.
                  &lt;BR&gt;This is the case if there is no flat file defined.                
            </javadoc>
            <declaration name="authorizedListFile" type="String" line="472"/>
            <javadoc line="472">
                Represents the Access Control List flat file.                
            </javadoc>
            <declaration name="trapDestList" type="Hashtable&lt;InetAddress,Vector&lt;String&gt;&gt;" line="476"/>
            <javadoc line="476">
                Contains the hosts list for trap destination.                
            </javadoc>
            <declaration name="informDestList" type="Hashtable&lt;InetAddress,Vector&lt;String&gt;&gt;" line="480"/>
            <javadoc line="480">
                Contains the hosts list for inform destination.                
            </javadoc>
            <declaration name="owner" type="PrincipalImpl" line="485"/>
        </class>
    </source>