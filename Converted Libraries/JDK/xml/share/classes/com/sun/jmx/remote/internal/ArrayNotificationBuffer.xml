<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.remote.internal">
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanServerDelegate"/>
        <import package="javax.management.MBeanServerNotification"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationBroadcaster"/>
        <import package="javax.management.NotificationFilter"/>
        <import package="javax.management.NotificationFilterSupport"/>
        <import package="javax.management.NotificationListener"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.QueryEval"/>
        <import package="javax.management.QueryExp"/>
        <import package="javax.management.remote.NotificationResult"/>
        <import package="javax.management.remote.TargetedNotification"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <import package="com.sun.jmx.remote.util.ClassLogger"/>
        <class name="ArrayNotificationBuffer" line="30">
            <implements interface="NotificationBuffer"/>
            <javadoc line="30">
                A circular buffer of notifications received from an MBean server.                
            </javadoc>
            <declaration name="disposed" type="boolean" line="34"/>
            <declaration name="globalLock" type="Object" line="35"/>
            <declaration name="mbsToBuffer" type="HashMap&lt;MBeanServer,ArrayNotificationBuffer&gt;" line="36"/>
            <declaration name="sharers" type="Collection&lt;ShareBuffer&gt;" line="37"/>
            <method name="getNotificationBuffer" type="NotificationBuffer" line="38">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                    <param name="env" type="Map<String,?>"/>
                </params>
                <declaration name="queueSize" type="int" line="40"/>
                <declaration name="buf" type="ArrayNotificationBuffer" line="41"/>
                <declaration name="create" type="boolean" line="42"/>
                <declaration name="sharer" type="NotificationBuffer" line="43"/>
                <scope line="44">
                    <scope line="47"/>
                </scope>
            </method>
            <method name="removeNotificationBuffer" type="void" line="56">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                </params>
                <scope line="57"/>
            </method>
            <method name="addSharer" type="void" line="61">
                <params>
                    <param name="sharer" type="ShareBuffer"/>
                </params>
                <scope line="62">
                    <scope line="63"/>
                </scope>
            </method>
            <method name="removeSharer" type="void" line="69">
                <params>
                    <param name="sharer" type="ShareBuffer"/>
                </params>
                <declaration name="empty" type="boolean" line="70"/>
                <scope line="71">
                    <scope line="75">
                        <declaration name="max" type="int" line="76"/>
                        <scope line="77">
                            <declaration name="bufsize" type="int" line="78"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="84">
                    <scope line="85"/>
                </scope>
            </method>
            <method name="resize" type="void" line="92">
                <params>
                    <param name="newSize" type="int"/>
                </params>
            </method>
            <class name="ShareBuffer" line="98">
                <implements interface="NotificationBuffer"/>
                <method name="ShareBuffer" type="constructor" line="99">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <method name="fetchNotifications" type="NotificationResult" line="103">
                    <params>
                        <param name="filter" type="NotificationBufferFilter"/>
                        <param name="startSequenceNumber" type="long"/>
                        <param name="timeout" type="long"/>
                        <param name="maxNotifications" type="int"/>
                    </params>
                    <declaration name="buf" type="NotificationBuffer" line="104"/>
                </method>
                <method name="dispose" type="void" line="107"/>
                <method name="getSize" type="int" line="110"/>
                <declaration name="size" type="int" line="113"/>
            </class>
            <method name="ArrayNotificationBuffer" type="constructor" line="115">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                    <param name="queueSize" type="int"/>
                </params>
            </method>
            <method name="isDisposed" type="boolean" line="125"/>
            <method name="dispose" type="void" line="128"/>
            <javadoc line="131">
                &lt;p&gt;Fetch notifications that match the given listeners.&lt;/p&gt;
                  &lt;p&gt;The operation only considers notifications with a sequence
                  number at least &lt;code&gt;startSequenceNumber&lt;/code&gt;.  It will take
                  no longer than &lt;code&gt;timeout&lt;/code&gt;, and will return no more
                  than &lt;code&gt;maxNotifications&lt;/code&gt; different notifications.&lt;/p&gt;
                  &lt;p&gt;If there are no notifications matching the criteria, the
                  operation will block until one arrives, subject to the
                  timeout.&lt;/p&gt;                
                <param>
                    filter an object that will add notifications to a{@code List<TargetedNotification>} if they match the current
                      listeners with their filters.                    
                </param>
                <param>
                    startSequenceNumber the first sequence number to
                      consider.                    
                </param>
                <param>
                    timeout the maximum time to wait.  May be 0 to indicate
                      not to wait if there are no notifications.                    
                </param>
                <param>
                    maxNotifications the maximum number of notifications to
                      return.  May be 0 to indicate a wait for eligible notifications
                      that will return a usable <code>nextSequenceNumber</code>.  The{@link TargetedNotification} array in the returned {@link NotificationResult} may contain more than this number of
                      elements but will not contain more than this number of
                      different notifications.                    
                </param>
            </javadoc>
            <method name="fetchNotifications" type="NotificationResult" line="152">
                <params>
                    <param name="filter" type="NotificationBufferFilter"/>
                    <param name="startSequenceNumber" type="long"/>
                    <param name="timeout" type="long"/>
                    <param name="maxNotifications" type="int"/>
                </params>
                <scope line="154">
                    <scope line="155"/>
                </scope>
                <scope line="159"/>
                <scope line="163"/>
                <scope line="166">
                    <declaration name="msg" type="String" line="167"/>
                </scope>
                <declaration name="endTime" type="long" line="171"/>
                <declaration name="earliestSeq" type="long" line="174"/>
                <declaration name="nextSeq" type="long" line="175"/>
                <declaration name="notifs" type="List&lt;TargetedNotification&gt;" line="176"/>
                <scope line="177">
                    <declaration name="candidate" type="NamedNotification" line="179"/>
                    <scope line="180">
                        <scope line="181">
                            <scope line="183"/>
                            <scope line="186"/>
                        </scope>
                        <scope line="192"/>
                        <scope line="196">
                            <scope line="198"/>
                        </scope>
                        <scope line="203">
                            <scope line="204"/>
                            <declaration name="toWait" type="long" line="208"/>
                            <scope line="209"/>
                            <scope line="213"/>
                        </scope>
                    </scope>
                    <declaration name="name" type="ObjectName" line="222"/>
                    <declaration name="notif" type="Notification" line="223"/>
                    <declaration name="matchedNotifs" type="List&lt;TargetedNotification&gt;" line="224"/>
                    <scope line="227">
                        <scope line="228"/>
                    </scope>
                </scope>
                <declaration name="nnotifs" type="int" line="238"/>
                <declaration name="resultNotifs" type="TargetedNotification[]" line="239"/>
                <declaration name="nr" type="NotificationResult" line="241"/>
            </method>
            <method name="earliestSequenceNumber" type="long" line="246"/>
            <method name="nextSequenceNumber" type="long" line="249"/>
            <method name="addNotification" type="void" line="252">
                <params>
                    <param name="notif" type="NamedNotification"/>
                </params>
                <scope line="254">
                    <scope line="256"/>
                </scope>
            </method>
            <method name="dropNotification" type="void" line="265"/>
            <method name="notificationAt" type="NamedNotification" line="269">
                <params>
                    <param name="seqNo" type="long"/>
                </params>
                <declaration name="index" type="long" line="270"/>
                <scope line="271">
                    <declaration name="msg" type="String" line="272"/>
                </scope>
            </method>
            <class name="NamedNotification" line="278">
                <method name="NamedNotification" type="constructor" line="279">
                    <params>
                        <param name="sender" type="ObjectName"/>
                        <param name="notif" type="Notification"/>
                    </params>
                </method>
                <method name="getObjectName" type="ObjectName" line="283"/>
                <method name="getNotification" type="Notification" line="286"/>
                <method name="toString" type="String" line="289"/>
                <declaration name="sender" type="ObjectName" line="292"/>
                <declaration name="notification" type="Notification" line="293"/>
            </class>
            <method name="createListeners" type="void" line="295">
                <scope line="297"/>
                <scope line="300"/>
                <scope line="304">
                    <declaration name="msg" type="String" line="305"/>
                    <declaration name="re" type="RuntimeException" line="306"/>
                </scope>
                <declaration name="names" type="Set&lt;ObjectName&gt;" line="312"/>
                <scope line="314"/>
            </method>
            <method name="addBufferListener" type="void" line="321">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="324"/>
                <scope line="327"/>
            </method>
            <method name="removeBufferListener" type="void" line="331">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="334"/>
                <scope line="337"/>
            </method>
            <method name="addNotificationListener" type="void" line="341">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <scope line="342">
                    <anonymous_class line="343">
                        <method name="run" type="Void" line="344"/>
                    </anonymous_class>
                </scope>
                <scope line="351"/>
            </method>
            <method name="removeNotificationListener" type="void" line="355">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                </params>
                <scope line="356">
                    <anonymous_class line="357">
                        <method name="run" type="Void" line="358"/>
                    </anonymous_class>
                </scope>
                <scope line="365"/>
            </method>
            <method name="queryNames" type="Set<ObjectName>" line="369">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <anonymous_class line="370">
                    <method name="run" type="Set<ObjectName>" line="371"/>
                </anonymous_class>
                <declaration name="act" type="PrivilegedAction&lt;Set&lt;ObjectName&gt;&gt;" line="370"/>
                <scope line="376"/>
                <scope line="379"/>
            </method>
            <method name="isInstanceOf" type="boolean" line="385">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                    <param name="className" type="String"/>
                </params>
                <anonymous_class line="386">
                    <method name="run" type="Boolean" line="387"/>
                </anonymous_class>
                <declaration name="act" type="PrivilegedExceptionAction&lt;Boolean&gt;" line="386"/>
                <scope line="392"/>
                <scope line="395"/>
            </method>
            <method name="createdNotification" type="void" line="401">
                <params>
                    <param name="n" type="MBeanServerNotification"/>
                </params>
                <declaration name="shouldEqual" type="String" line="402"/>
                <scope line="403"/>
                <declaration name="name" type="ObjectName" line="407"/>
                <scope line="409">
                    <scope line="410"/>
                </scope>
                <scope line="415"/>
            </method>
            <class name="BufferListener" line="420">
                <implements interface="NotificationListener"/>
                <method name="handleNotification" type="void" line="421">
                    <params>
                        <param name="notif" type="Notification"/>
                        <param name="handback" type="Object"/>
                    </params>
                    <scope line="422"/>
                    <declaration name="name" type="ObjectName" line="425"/>
                </method>
            </class>
            <declaration name="bufferListener" type="NotificationListener" line="429"/>
            <class name="BroadcasterQuery" line="430">
                <extends class="QueryEval"/>
                <implements interface="QueryExp"/>
                <declaration name="serialVersionUID" type="long" line="431"/>
                <method name="apply" type="boolean" line="432">
                    <params>
                        <param name="name" type="ObjectName"/>
                    </params>
                    <declaration name="mbs" type="MBeanServer" line="433"/>
                </method>
            </class>
            <declaration name="broadcasterQuery" type="QueryExp" line="437"/>
            <declaration name="creationFilter" type="NotificationFilter" line="438"/>
            <scope line="439">
                <declaration name="nfs" type="NotificationFilterSupport" line="440"/>
            </scope>
            <declaration name="creationListener" type="NotificationListener" line="444"/>
            <anonymous_class line="444">
                <method name="handleNotification" type="void" line="445">
                    <params>
                        <param name="notif" type="Notification"/>
                        <param name="handback" type="Object"/>
                    </params>
                </method>
            </anonymous_class>
            <method name="destroyListeners" type="void" line="451">
                <scope line="454"/>
                <scope line="457"/>
                <declaration name="names" type="Set&lt;ObjectName&gt;" line="460"/>
                <scope line="461"/>
            </method>
            <method name="checkNoLocks" type="void" line="467"/>
            <javadoc line="470">
                Iterate until we extract the real exception
                  from a stack of PrivilegedActionExceptions.                
            </javadoc>
            <method name="extractException" type="Exception" line="474">
                <params>
                    <param name="e" type="Exception"/>
                </params>
                <scope line="475"/>
            </method>
            <declaration name="logger" type="ClassLogger" line="480"/>
            <declaration name="mBeanServer" type="MBeanServer" line="481"/>
            <declaration name="queue" type="ArrayQueue&lt;NamedNotification&gt;" line="482"/>
            <declaration name="queueSize" type="int" line="483"/>
            <declaration name="earliestSequenceNumber" type="long" line="484"/>
            <declaration name="nextSequenceNumber" type="long" line="485"/>
            <declaration name="createdDuringQuery" type="Set&lt;ObjectName&gt;" line="486"/>
            <declaration name="broadcasterClass" type="String" line="487"/>
        </class>
    </source>