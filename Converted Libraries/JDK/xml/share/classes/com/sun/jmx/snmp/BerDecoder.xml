<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <class name="BerDecoder" line="32">
            <comment line="449">
                                
            </comment>
            <comment line="450">
                Some standard tags                
            </comment>
            <comment line="451">
                                
            </comment>
            <comment line="462">
                //////////////////////// PRIVATE ///////////////////////////////                
            </comment>
            <comment line="734">
                private static final void debug(String str) {                
            </comment>
            <comment line="735">
                System.out.println(str);                
            </comment>
            <comment line="736">
                }                
            </comment>
            <comment line="738">
                                
            </comment>
            <comment line="739">
                This is the byte array containing the encoding.                
            </comment>
            <comment line="740">
                                
            </comment>
            <comment line="743">
                                
            </comment>
            <comment line="744">
                This is the current location. It is the next byte                
            </comment>
            <comment line="745">
                to be decoded. It&apos;s an index in bytes[].                
            </comment>
            <comment line="746">
                                
            </comment>
            <comment line="749">
                                
            </comment>
            <comment line="750">
                This is the stack where end of sequences are kept.                
            </comment>
            <comment line="751">
                A value is computed and pushed in it each time openSequence()                
            </comment>
            <comment line="752">
                is invoked.                
            </comment>
            <comment line="753">
                A value is pulled and checked each time closeSequence() is called.                
            </comment>
            <comment line="754">
                                
            </comment>
            <javadoc line="32">
                The &lt;CODE&gt;BerDecoder&lt;/CODE&gt; class is used for decoding
                  BER-encoded data.
                  A &lt;CODE&gt;BerDecoder&lt;/CODE&gt; needs to be set up with the byte string containing
                  the encoding. It maintains a current position in the byte string.
                  Methods allows to fetch integer, string, OID, etc., from the current
                  position. After a fetch the current position is moved forward.
                  A fetch throws a &lt;CODE&gt;BerException&lt;/CODE&gt; if the encoding is not of the
                  expected type.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="53">
                Constructs a new decoder and attaches it to the specified byte string.                
                <param>
                    b The byte string containing the encoded data.                    
                </param>
            </javadoc>
            <method name="BerDecoder" type="constructor" line="59">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <method name="reset" type="void" line="64"/>
            <javadoc line="69">
                Fetch an integer.                
                <return>
                    The decoded integer.                    
                </return>
                <exception>
                    BerException Current position does not point to an integer.                    
                </exception>
            </javadoc>
            <method name="fetchInteger" type="int" line="77"/>
            <javadoc line="82">
                Fetch an integer with the specified tag.                
                <param>
                    tag The expected tag.                    
                </param>
                <return>
                    The decoded integer.                    
                </return>
                <exception>
                    BerException Current position does not point to an integer
                      or the tag is not the expected one.                    
                </exception>
            </javadoc>
            <method name="fetchInteger" type="int" line="93">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="result" type="int" line="94"/>
                <declaration name="backup" type="int" line="95"/>
                <scope line="96">
                    <scope line="97"/>
                </scope>
                <scope line="102"/>
            </method>
            <javadoc line="112">
                Fetch an integer and return a long value.                
                <return>
                    The decoded integer.                    
                </return>
                <exception>
                    BerException Current position does not point to an integer.                    
                </exception>
            </javadoc>
            <method name="fetchIntegerAsLong" type="long" line="120"/>
            <javadoc line="125">
                Fetch an integer with the specified tag and return a long value.                
                <param>
                    tag The expected tag.                    
                </param>
                <return>
                    The decoded integer.                    
                </return>
                <exception>
                    BerException Current position does not point to an integer
                      or the tag is not the expected one.                    
                </exception>
            </javadoc>
            <method name="fetchIntegerAsLong" type="long" line="136">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="result" type="long" line="137"/>
                <declaration name="backup" type="int" line="138"/>
                <scope line="139">
                    <scope line="140"/>
                </scope>
                <scope line="145"/>
            </method>
            <javadoc line="155">
                Fetch an octet string.                
                <return>
                    The decoded string.                    
                </return>
                <exception>
                    BerException Current position does not point to an octet string.                    
                </exception>
            </javadoc>
            <method name="fetchOctetString" type="byte[]" line="163"/>
            <javadoc line="168">
                Fetch an octet string with a specified tag.                
                <param>
                    tag The expected tag.                    
                </param>
                <return>
                    The decoded string.                    
                </return>
                <exception>
                    BerException Current position does not point to an octet string
                      or the tag is not the expected one.                    
                </exception>
            </javadoc>
            <method name="fetchOctetString" type="byte[]" line="179">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="result" type="byte[]" line="180"/>
                <declaration name="backup" type="int" line="181"/>
                <scope line="182">
                    <scope line="183"/>
                </scope>
                <scope line="188"/>
            </method>
            <javadoc line="197">
                Fetch an object identifier.                
                <return>
                    The decoded object identifier as an array of long.                    
                </return>
            </javadoc>
            <method name="fetchOid" type="long[]" line="203"/>
            <javadoc line="208">
                Fetch an object identifier with a specified tag.                
                <param>
                    tag The expected tag.                    
                </param>
                <return>
                    The decoded object identifier as an array of long.                    
                </return>
                <exception>
                    BerException Current position does not point to an oid
                      or the tag is not the expected one.                    
                </exception>
            </javadoc>
            <method name="fetchOid" type="long[]" line="219">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="result" type="long[]" line="220"/>
                <declaration name="backup" type="int" line="221"/>
                <scope line="222">
                    <scope line="223"/>
                </scope>
                <scope line="228"/>
            </method>
            <javadoc line="237">
                Fetch a &lt;CODE&gt;NULL&lt;/CODE&gt; value.                
                <exception>
                    BerException Current position does not point to <CODE>NULL</CODE> value.                    
                </exception>
            </javadoc>
            <method name="fetchNull" type="void" line="243"/>
            <javadoc line="248">
                Fetch a &lt;CODE&gt;NULL&lt;/CODE&gt; value with a specified tag.                
                <param>
                    tag The expected tag.                    
                </param>
                <exception>
                    BerException Current position does not point to
                      <CODE>NULL</CODE> value or the tag is not the expected one.                    
                </exception>
            </javadoc>
            <method name="fetchNull" type="void" line="257">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="backup" type="int" line="258"/>
                <scope line="259">
                    <scope line="260"/>
                    <declaration name="length" type="int" line="263"/>
                </scope>
                <scope line="266"/>
            </method>
            <javadoc line="274">
                Fetch an &lt;CODE&gt;ANY&lt;/CODE&gt; value. In fact, this method does not decode anything
                  it simply returns the next TLV as an array of bytes.                
                <return>
                    The TLV as a byte array.                    
                </return>
                <exception>
                    BerException The next TLV is really badly encoded...                    
                </exception>
            </javadoc>
            <method name="fetchAny" type="byte[]" line="283">
                <comment line="295">
                    for (int i = 0 ; i &lt; tlvLength ; i++) {                    
                </comment>
                <comment line="296">
                    data[i] = bytes[backup + i] ;                    
                </comment>
                <comment line="297">
                    }                    
                </comment>
                <comment line="305">
                    catch(Error e) {                    
                </comment>
                <comment line="306">
                    debug(&quot;fetchAny: Error decoding BER: &quot; + e);                    
                </comment>
                <comment line="307">
                    throw e;                    
                </comment>
                <comment line="308">
                    }                    
                </comment>
                <declaration name="result" type="byte[]" line="284"/>
                <declaration name="backup" type="int" line="285"/>
                <scope line="286">
                    <declaration name="tag" type="int" line="287"/>
                    <declaration name="contentLength" type="int" line="288"/>
                    <declaration name="tlvLength" type="int" line="290"/>
                    <declaration name="data" type="byte[]" line="293"/>
                </scope>
                <scope line="301"/>
            </method>
            <javadoc line="314">
                Fetch an &lt;CODE&gt;ANY&lt;/CODE&gt; value with a specific tag.                
                <param>
                    tag The expected tag.                    
                </param>
                <return>
                    The TLV as a byte array.                    
                </return>
                <exception>
                    BerException The next TLV is really badly encoded...                    
                </exception>
            </javadoc>
            <method name="fetchAny" type="byte[]" line="324">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <scope line="325"/>
            </method>
            <javadoc line="333">
                Fetch a sequence header.
                  The decoder computes the end position of the sequence and push it
                  on its stack.                
                <exception>
                    BerException Current position does not point to a sequence header.                    
                </exception>
            </javadoc>
            <method name="openSequence" type="void" line="341"/>
            <javadoc line="346">
                Fetch a sequence header with a specific tag.                
                <param>
                    tag The expected tag.                    
                </param>
                <exception>
                    BerException Current position does not point to a sequence header
                      or the tag is not the expected one.                    
                </exception>
            </javadoc>
            <method name="openSequence" type="void" line="355">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="backup" type="int" line="356"/>
                <scope line="357">
                    <scope line="358"/>
                    <declaration name="l" type="int" line="361"/>
                </scope>
                <scope line="366"/>
            </method>
            <javadoc line="373">
                Close a sequence.
                  The decode pull the stack and verifies that the current position
                  matches with the calculated end of the sequence. If not it throws
                  an exception.                
                <exception>
                    BerException The sequence is not expected to finish here.                    
                </exception>
            </javadoc>
            <method name="closeSequence" type="void" line="382">
                <scope line="383"/>
                <scope line="386"/>
            </method>
            <javadoc line="392">
                Return &lt;CODE&gt;true&lt;/CODE&gt; if the end of the current sequence is not reached.
                  When this method returns &lt;CODE&gt;false&lt;/CODE&gt;, &lt;CODE&gt;closeSequence&lt;/CODE&gt; can (and must) be
                  invoked.                
                <return>
                    <CODE>true</CODE> if there is still some data in the sequence.                    
                </return>
            </javadoc>
            <method name="cannotCloseSequence" type="boolean" line="400"/>
            <javadoc line="405">
                Get the tag of the data at the current position.
                  Current position is unchanged.                
                <return>
                    The next tag.                    
                </return>
            </javadoc>
            <method name="getTag" type="int" line="412">
                <declaration name="result" type="int" line="413"/>
                <declaration name="backup" type="int" line="414"/>
                <scope line="415"/>
                <scope line="418"/>
            </method>
            <method name="toString" type="String" line="427">
                <declaration name="result" type="StringBuffer" line="428"/>
                <scope line="429">
                    <declaration name="b" type="int" line="430"/>
                    <scope line="431"/>
                    <scope line="436"/>
                </scope>
                <scope line="440"/>
            </method>
            <declaration name="BooleanTag" type="int" line="451"/>
            <declaration name="IntegerTag" type="int" line="452"/>
            <declaration name="OctetStringTag" type="int" line="453"/>
            <declaration name="NullTag" type="int" line="454"/>
            <declaration name="OidTag" type="int" line="455"/>
            <declaration name="SequenceTag" type="int" line="456"/>
            <javadoc line="465">
                Fetch a tag and move the current position forward.                
                <return>
                    The tag                    
                </return>
            </javadoc>
            <method name="fetchTag" type="int" line="471">
                <declaration name="result" type="int" line="472"/>
                <declaration name="backup" type="int" line="473"/>
                <scope line="475">
                    <declaration name="b0" type="byte" line="476"/>
                    <scope line="478">
                        <scope line="479"/>
                    </scope>
                </scope>
                <scope line="485"/>
            </method>
            <javadoc line="494">
                Fetch a length and move the current position forward.                
                <return>
                    The length                    
                </return>
            </javadoc>
            <method name="fetchLength" type="int" line="500">
                <declaration name="result" type="int" line="501"/>
                <declaration name="backup" type="int" line="502"/>
                <scope line="504">
                    <declaration name="b0" type="byte" line="505"/>
                    <scope line="506"/>
                    <scope line="509">
                        <scope line="510">
                            <declaration name="bX" type="byte" line="511"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="517"/>
            </method>
            <javadoc line="526">
                Fetch an integer value and move the current position forward.                
                <return>
                    The integer                    
                </return>
            </javadoc>
            <method name="fetchIntegerValue" type="int" line="532">
                <declaration name="result" type="int" line="533"/>
                <declaration name="backup" type="int" line="534"/>
                <scope line="536">
                    <declaration name="length" type="int" line="537"/>
                    <declaration name="end" type="int" line="541"/>
                    <scope line="543">
                        <declaration name="b" type="byte" line="544"/>
                        <scope line="545"/>
                        <scope line="548"/>
                    </scope>
                </scope>
                <scope line="553"/>
                <scope line="557"/>
                <scope line="561"/>
            </method>
            <javadoc line="569">
                Fetch an integer value and return a long value.
                  FIX ME: someday we could have only on fetchIntegerValue() which always
                  returns a long value.                
                <return>
                    The integer                    
                </return>
            </javadoc>
            <method name="fetchIntegerValueAsLong" type="long" line="577">
                <declaration name="result" type="long" line="578"/>
                <declaration name="backup" type="int" line="579"/>
                <scope line="581">
                    <declaration name="length" type="int" line="582"/>
                    <declaration name="end" type="int" line="587"/>
                    <scope line="589">
                        <declaration name="b" type="byte" line="590"/>
                        <scope line="591"/>
                        <scope line="594"/>
                    </scope>
                </scope>
                <scope line="599"/>
                <scope line="603"/>
                <scope line="607"/>
            </method>
            <javadoc line="615">
                Fetch a byte string and move the current position forward.                
                <return>
                    The byte string                    
                </return>
            </javadoc>
            <method name="fetchStringValue" type="byte[]" line="621">
                <comment line="633">
                    int i = 0 ;                    
                </comment>
                <comment line="634">
                    while (i &lt; length) {                    
                </comment>
                <comment line="635">
                    result[i++] = bytes[next++] ;                    
                </comment>
                <comment line="636">
                    }                    
                </comment>
                <comment line="651">
                    catch(Error e) {                    
                </comment>
                <comment line="652">
                    debug(&quot;fetchStringValue: Error decoding BER: &quot; + e);                    
                </comment>
                <comment line="653">
                    throw e;                    
                </comment>
                <comment line="654">
                    }                    
                </comment>
                <declaration name="result" type="byte[]" line="622"/>
                <declaration name="backup" type="int" line="623"/>
                <scope line="625">
                    <declaration name="length" type="int" line="626"/>
                    <declaration name="data" type="byte" line="630"/>
                </scope>
                <scope line="639"/>
                <scope line="643"/>
                <scope line="647"/>
            </method>
            <javadoc line="661">
                Fetch an oid and move the current position forward.                
                <return>
                    The oid                    
                </return>
            </javadoc>
            <method name="fetchOidValue" type="long[]" line="667">
                <comment line="676">
                    Count how many bytes have their 8th bit to 0                    
                </comment>
                <comment line="677">
                    -&gt; this gives the number of components in the oid                    
                </comment>
                <comment line="688">
                    bugId 4641746                    
                </comment>
                <comment line="689">
                    The 8th bit of the first byte should always be set to 0                    
                </comment>
                <comment line="692">
                    bugId 4641746                    
                </comment>
                <comment line="693">
                    The first sub Id cannot be greater than 2                    
                </comment>
                <comment line="706">
                    bugId 4654674                    
                </comment>
                <comment line="711">
                    bugId 4654674                    
                </comment>
                <comment line="725">
                    catch(Error e) {                    
                </comment>
                <comment line="726">
                    debug(&quot;fetchOidValue: Error decoding BER: &quot; + e);                    
                </comment>
                <comment line="727">
                    throw e;                    
                </comment>
                <comment line="728">
                    }                    
                </comment>
                <declaration name="result" type="long[]" line="668"/>
                <declaration name="backup" type="int" line="669"/>
                <scope line="671">
                    <declaration name="length" type="int" line="672"/>
                    <declaration name="subidCount" type="int" line="678"/>
                    <scope line="679">
                        <scope line="680"/>
                    </scope>
                    <declaration name="datalen" type="int" line="684"/>
                    <declaration name="data" type="long[]" line="685"/>
                    <declaration name="b0" type="byte" line="686"/>
                    <declaration name="lb0" type="long" line="694"/>
                    <declaration name="lb1" type="long" line="697"/>
                    <declaration name="i" type="int" line="700"/>
                    <scope line="701">
                        <declaration name="subid" type="long" line="702"/>
                        <declaration name="b" type="byte" line="703"/>
                        <scope line="704"/>
                    </scope>
                </scope>
                <scope line="717"/>
                <scope line="721"/>
            </method>
            <declaration name="bytes" type="byte" line="740"/>
            <declaration name="next" type="int" line="746"/>
            <declaration name="stackBuf" type="int" line="754"/>
            <declaration name="stackTop" type="int" line="755"/>
        </class>
    </source>