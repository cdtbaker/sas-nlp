<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <class name="BerDecoder" line="2">
            <javadoc line="2">
                The &lt;CODE&gt;BerDecoder&lt;/CODE&gt; class is used for decoding
                  BER-encoded data.
                  A &lt;CODE&gt;BerDecoder&lt;/CODE&gt; needs to be set up with the byte string containing
                  the encoding. It maintains a current position in the byte string.
                  Methods allows to fetch integer, string, OID, etc., from the current
                  position. After a fetch the current position is moved forward.
                  A fetch throws a &lt;CODE&gt;BerException&lt;/CODE&gt; if the encoding is not of the
                  expected type.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="16">
                Constructs a new decoder and attaches it to the specified byte string.                
                <param>
                    b The byte string containing the encoded data.                    
                </param>
            </javadoc>
            <method name="BerDecoder" type="constructor" line="20">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <method name="reset" type="void" line="24"/>
            <javadoc line="28">
                Fetch an integer.                
                <return>
                    The decoded integer.                    
                </return>
                <exception>
                    BerException Current position does not point to an integer.                    
                </exception>
            </javadoc>
            <method name="fetchInteger" type="int" line="33"/>
            <javadoc line="36">
                Fetch an integer with the specified tag.                
                <param>
                    tag The expected tag.                    
                </param>
                <return>
                    The decoded integer.                    
                </return>
                <exception>
                    BerException Current position does not point to an integer
                      or the tag is not the expected one.                    
                </exception>
            </javadoc>
            <method name="fetchInteger" type="int" line="43">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="result" type="int" line="44"/>
                <declaration name="backup" type="int" line="45"/>
                <scope line="46">
                    <scope line="47"/>
                </scope>
                <scope line="52"/>
            </method>
            <javadoc line="58">
                Fetch an integer and return a long value.                
                <return>
                    The decoded integer.                    
                </return>
                <exception>
                    BerException Current position does not point to an integer.                    
                </exception>
            </javadoc>
            <method name="fetchIntegerAsLong" type="long" line="63"/>
            <javadoc line="66">
                Fetch an integer with the specified tag and return a long value.                
                <param>
                    tag The expected tag.                    
                </param>
                <return>
                    The decoded integer.                    
                </return>
                <exception>
                    BerException Current position does not point to an integer
                      or the tag is not the expected one.                    
                </exception>
            </javadoc>
            <method name="fetchIntegerAsLong" type="long" line="73">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="result" type="long" line="74"/>
                <declaration name="backup" type="int" line="75"/>
                <scope line="76">
                    <scope line="77"/>
                </scope>
                <scope line="82"/>
            </method>
            <javadoc line="88">
                Fetch an octet string.                
                <return>
                    The decoded string.                    
                </return>
                <exception>
                    BerException Current position does not point to an octet string.                    
                </exception>
            </javadoc>
            <method name="fetchOctetString" type="byte[]" line="93"/>
            <javadoc line="96">
                Fetch an octet string with a specified tag.                
                <param>
                    tag The expected tag.                    
                </param>
                <return>
                    The decoded string.                    
                </return>
                <exception>
                    BerException Current position does not point to an octet string
                      or the tag is not the expected one.                    
                </exception>
            </javadoc>
            <method name="fetchOctetString" type="byte[]" line="103">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="result" type="byte[]" line="104"/>
                <declaration name="backup" type="int" line="105"/>
                <scope line="106">
                    <scope line="107"/>
                </scope>
                <scope line="112"/>
            </method>
            <javadoc line="118">
                Fetch an object identifier.                
                <return>
                    The decoded object identifier as an array of long.                    
                </return>
            </javadoc>
            <method name="fetchOid" type="long[]" line="122"/>
            <javadoc line="125">
                Fetch an object identifier with a specified tag.                
                <param>
                    tag The expected tag.                    
                </param>
                <return>
                    The decoded object identifier as an array of long.                    
                </return>
                <exception>
                    BerException Current position does not point to an oid
                      or the tag is not the expected one.                    
                </exception>
            </javadoc>
            <method name="fetchOid" type="long[]" line="132">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="result" type="long[]" line="133"/>
                <declaration name="backup" type="int" line="134"/>
                <scope line="135">
                    <scope line="136"/>
                </scope>
                <scope line="141"/>
            </method>
            <javadoc line="147">
                Fetch a &lt;CODE&gt;NULL&lt;/CODE&gt; value.                
                <exception>
                    BerException Current position does not point to &lt;CODE&gt;NULL&lt;/CODE&gt; value.                    
                </exception>
            </javadoc>
            <method name="fetchNull" type="void" line="151"/>
            <javadoc line="154">
                Fetch a &lt;CODE&gt;NULL&lt;/CODE&gt; value with a specified tag.                
                <param>
                    tag The expected tag.                    
                </param>
                <exception>
                    BerException Current position does not point to
                      &lt;CODE&gt;NULL&lt;/CODE&gt; value or the tag is not the expected one.                    
                </exception>
            </javadoc>
            <method name="fetchNull" type="void" line="160">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="backup" type="int" line="161"/>
                <scope line="162">
                    <scope line="163"/>
                    <declaration name="length" type="int" line="166"/>
                </scope>
                <scope line="169"/>
            </method>
            <javadoc line="174">
                Fetch an &lt;CODE&gt;ANY&lt;/CODE&gt; value. In fact, this method does not decode anything
                  it simply returns the next TLV as an array of bytes.                
                <return>
                    The TLV as a byte array.                    
                </return>
                <exception>
                    BerException The next TLV is really badly encoded...                    
                </exception>
            </javadoc>
            <method name="fetchAny" type="byte[]" line="180">
                <declaration name="result" type="byte[]" line="181"/>
                <declaration name="backup" type="int" line="182"/>
                <scope line="183">
                    <declaration name="tag" type="int" line="184"/>
                    <declaration name="contentLength" type="int" line="185"/>
                    <declaration name="tlvLength" type="int" line="187"/>
                    <declaration name="data" type="byte[]" line="189"/>
                </scope>
                <scope line="194"/>
            </method>
            <javadoc line="200">
                Fetch an &lt;CODE&gt;ANY&lt;/CODE&gt; value with a specific tag.                
                <param>
                    tag The expected tag.                    
                </param>
                <return>
                    The TLV as a byte array.                    
                </return>
                <exception>
                    BerException The next TLV is really badly encoded...                    
                </exception>
            </javadoc>
            <method name="fetchAny" type="byte[]" line="206">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <scope line="207"/>
            </method>
            <javadoc line="212">
                Fetch a sequence header.
                  The decoder computes the end position of the sequence and push it
                  on its stack.                
                <exception>
                    BerException Current position does not point to a sequence header.                    
                </exception>
            </javadoc>
            <method name="openSequence" type="void" line="218"/>
            <javadoc line="221">
                Fetch a sequence header with a specific tag.                
                <param>
                    tag The expected tag.                    
                </param>
                <exception>
                    BerException Current position does not point to a sequence header
                      or the tag is not the expected one.                    
                </exception>
            </javadoc>
            <method name="openSequence" type="void" line="227">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="backup" type="int" line="228"/>
                <scope line="229">
                    <scope line="230"/>
                    <declaration name="l" type="int" line="233"/>
                </scope>
                <scope line="238"/>
            </method>
            <javadoc line="243">
                Close a sequence.
                  The decode pull the stack and verifies that the current position
                  matches with the calculated end of the sequence. If not it throws
                  an exception.                
                <exception>
                    BerException The sequence is not expected to finish here.                    
                </exception>
            </javadoc>
            <method name="closeSequence" type="void" line="250">
                <scope line="251"/>
                <scope line="254"/>
            </method>
            <javadoc line="258">
                Return &lt;CODE&gt;true&lt;/CODE&gt; if the end of the current sequence is not reached.
                  When this method returns &lt;CODE&gt;false&lt;/CODE&gt;, &lt;CODE&gt;closeSequence&lt;/CODE&gt; can (and must) be
                  invoked.                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if there is still some data in the sequence.                    
                </return>
            </javadoc>
            <method name="cannotCloseSequence" type="boolean" line="264"/>
            <javadoc line="267">
                Get the tag of the data at the current position.
                  Current position is unchanged.                
                <return>
                    The next tag.                    
                </return>
            </javadoc>
            <method name="getTag" type="int" line="272">
                <declaration name="result" type="int" line="273"/>
                <declaration name="backup" type="int" line="274"/>
                <scope line="275"/>
                <scope line="278"/>
            </method>
            <method name="toString" type="String" line="283">
                <declaration name="result" type="StringBuffer" line="284"/>
                <scope line="285">
                    <declaration name="b" type="int" line="286"/>
                    <scope line="287"/>
                    <scope line="292"/>
                </scope>
                <scope line="296"/>
            </method>
            <declaration name="BooleanTag" type="int" line="301"/>
            <declaration name="IntegerTag" type="int" line="302"/>
            <declaration name="OctetStringTag" type="int" line="303"/>
            <declaration name="NullTag" type="int" line="304"/>
            <declaration name="OidTag" type="int" line="305"/>
            <declaration name="SequenceTag" type="int" line="306"/>
            <javadoc line="307">
                Fetch a tag and move the current position forward.                
                <return>
                    The tag                    
                </return>
            </javadoc>
            <method name="fetchTag" type="int" line="311">
                <declaration name="result" type="int" line="312"/>
                <declaration name="backup" type="int" line="313"/>
                <scope line="314">
                    <declaration name="b0" type="byte" line="315"/>
                    <scope line="317">
                        <scope line="318"/>
                    </scope>
                </scope>
                <scope line="324"/>
            </method>
            <javadoc line="330">
                Fetch a length and move the current position forward.                
                <return>
                    The length                    
                </return>
            </javadoc>
            <method name="fetchLength" type="int" line="334">
                <declaration name="result" type="int" line="335"/>
                <declaration name="backup" type="int" line="336"/>
                <scope line="337">
                    <declaration name="b0" type="byte" line="338"/>
                    <scope line="339"/>
                    <scope line="342">
                        <scope line="343">
                            <declaration name="bX" type="byte" line="344"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="350"/>
            </method>
            <javadoc line="356">
                Fetch an integer value and move the current position forward.                
                <return>
                    The integer                    
                </return>
            </javadoc>
            <method name="fetchIntegerValue" type="int" line="360">
                <declaration name="result" type="int" line="361"/>
                <declaration name="backup" type="int" line="362"/>
                <scope line="363">
                    <declaration name="length" type="int" line="364"/>
                    <declaration name="end" type="int" line="367"/>
                    <scope line="369">
                        <declaration name="b" type="byte" line="370"/>
                        <scope line="371"/>
                        <scope line="374"/>
                    </scope>
                </scope>
                <scope line="379"/>
                <scope line="383"/>
                <scope line="387"/>
            </method>
            <javadoc line="393">
                Fetch an integer value and return a long value.
                  FIX ME: someday we could have only on fetchIntegerValue() which always
                  returns a long value.                
                <return>
                    The integer                    
                </return>
            </javadoc>
            <method name="fetchIntegerValueAsLong" type="long" line="399">
                <declaration name="result" type="long" line="400"/>
                <declaration name="backup" type="int" line="401"/>
                <scope line="402">
                    <declaration name="length" type="int" line="403"/>
                    <declaration name="end" type="int" line="406"/>
                    <scope line="408">
                        <declaration name="b" type="byte" line="409"/>
                        <scope line="410"/>
                        <scope line="413"/>
                    </scope>
                </scope>
                <scope line="418"/>
                <scope line="422"/>
                <scope line="426"/>
            </method>
            <javadoc line="432">
                Fetch a byte string and move the current position forward.                
                <return>
                    The byte string                    
                </return>
            </javadoc>
            <method name="fetchStringValue" type="byte[]" line="436">
                <declaration name="result" type="byte[]" line="437"/>
                <declaration name="backup" type="int" line="438"/>
                <scope line="439">
                    <declaration name="length" type="int" line="440"/>
                    <declaration name="data" type="byte" line="443"/>
                </scope>
                <scope line="448"/>
                <scope line="452"/>
                <scope line="456"/>
            </method>
            <javadoc line="462">
                Fetch an oid and move the current position forward.                
                <return>
                    The oid                    
                </return>
            </javadoc>
            <method name="fetchOidValue" type="long[]" line="466">
                <declaration name="result" type="long[]" line="467"/>
                <declaration name="backup" type="int" line="468"/>
                <scope line="469">
                    <declaration name="length" type="int" line="470"/>
                    <declaration name="subidCount" type="int" line="473"/>
                    <scope line="474">
                        <scope line="475"/>
                    </scope>
                    <declaration name="datalen" type="int" line="479"/>
                    <declaration name="data" type="long[]" line="480"/>
                    <declaration name="b0" type="byte" line="481"/>
                    <declaration name="lb0" type="long" line="483"/>
                    <declaration name="lb1" type="long" line="485"/>
                    <declaration name="i" type="int" line="488"/>
                    <scope line="489">
                        <declaration name="subid" type="long" line="490"/>
                        <declaration name="b" type="byte" line="491"/>
                        <scope line="492"/>
                    </scope>
                </scope>
                <scope line="503"/>
                <scope line="507"/>
            </method>
            <declaration name="bytes" type="byte" line="513"/>
            <declaration name="next" type="int" line="514"/>
            <declaration name="stackBuf" type="int" line="515"/>
            <declaration name="stackTop" type="int" line="516"/>
        </class>
    </source>