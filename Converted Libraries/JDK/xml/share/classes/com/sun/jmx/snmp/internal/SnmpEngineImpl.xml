<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.internal">
        <import package="java.net.InetAddress"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.logging.Level"/>
        <import package="java.io.Serializable"/>
        <import package="com.sun.jmx.snmp.SnmpDefinitions"/>
        <import package="com.sun.jmx.snmp.SnmpEngineId"/>
        <import package="com.sun.jmx.snmp.SnmpEngine"/>
        <import package="com.sun.jmx.snmp.SnmpUsmKeyHandler"/>
        <import package="com.sun.jmx.snmp.SnmpEngineFactory"/>
        <import package="com.sun.jmx.snmp.SnmpUnknownModelException"/>
        <import package="com.sun.jmx.snmp.internal.SnmpTools"/>
        <import package="com.sun.jmx.snmp.SnmpBadSecurityLevelException"/>
        <import package="com.sun.jmx.defaults.JmxProperties.SNMP_LOGGER"/>
        <class name="SnmpEngineImpl" line="44">
            <comment line="328">
                Do some check and store the nb boots value.                
            </comment>
            <comment line="338">
                Initialize internal status.                
            </comment>
            <comment line="357">
                Initialize the engineID.                
            </comment>
            <implements interface="SnmpEngine"/>
            <implements interface="Serializable"/>
            <javadoc line="44">
                This engine is conformant with the RFC 2571. It is the main object within
                  an SNMP entity (agent, manager...).
                  To an engine is associated an {@link com.sun.jmx.snmp.SnmpEngineId}.
                  The way the engineId is retrieved is linked to the way the engine is
                  instantiated. See each &lt;CODE&gt;SnmpEngine&lt;/CODE&gt; constructor for more details.
                  An engine is composed of a set of sub systems{@link com.sun.jmx.snmp.internal.SnmpSubSystem}. An &lt;CODE&gt;SNMP&lt;/CODE&gt;
                  engine can contain a:
                  &lt;ul&gt;
                  &lt;li&gt; Message Processing Sub System :{@link com.sun.jmx.snmp.internal.SnmpMsgProcessingSubSystem}&lt;/li&gt;
                  &lt;li&gt; Security Sub System :{@link com.sun.jmx.snmp.internal.SnmpSecuritySubSystem} &lt;/li&gt;
                  &lt;li&gt; Access Control Sub System :{@link com.sun.jmx.snmp.internal.SnmpAccessControlSubSystem}&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;P&gt; Each sub system contains a set of models. A model is an implementation
                  of a particular treatement (eg: the User based Security Model defined in
                  RFC 2574 is a functional element dealing with authentication and privacy).
                  &lt;/P&gt;
                  Engine instantiation is based on a factory. This factory, implementing
                  mandatorily {@link com.sun.jmx.snmp.SnmpEngineFactory  SnmpEngineFactory}is set in the method &lt;CODE&gt;setFactory&lt;/CODE&gt;.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="73"/>
            <declaration name="noAuthNoPriv" type="int" line="75"/>
            <javadoc line="75">
                Security level. No authentication, no privacy. Value is 0,
                  as defined in RFC 2572                
            </javadoc>
            <declaration name="authNoPriv" type="int" line="80"/>
            <javadoc line="80">
                Security level. Authentication, no privacy. Value is 1, as
                  defined in RFC 2572                
            </javadoc>
            <declaration name="authPriv" type="int" line="85"/>
            <javadoc line="85">
                Security level. Authentication, privacy. Value is 3,
                  as defined in RFC 2572                
            </javadoc>
            <declaration name="reportableFlag" type="int" line="90"/>
            <javadoc line="90">
                Flag that indicates that a report is to be sent. Value is 4, as defined in RFC 2572                
            </javadoc>
            <declaration name="authMask" type="int" line="95"/>
            <javadoc line="95">
                Mask used to isolate authentication information within a message flag.                
            </javadoc>
            <declaration name="privMask" type="int" line="99"/>
            <javadoc line="99">
                Mask used to isolate privacy information within a message flag.                
            </javadoc>
            <declaration name="authPrivMask" type="int" line="103"/>
            <javadoc line="103">
                Mask used to isolate authentication and privacy information within a message flag.                
            </javadoc>
            <declaration name="engineid" type="SnmpEngineId" line="108"/>
            <declaration name="factory" type="SnmpEngineFactory" line="109"/>
            <declaration name="startTime" type="long" line="110"/>
            <declaration name="boot" type="int" line="112"/>
            <declaration name="checkOid" type="boolean" line="113"/>
            <declaration name="usmKeyHandler" type="SnmpUsmKeyHandler" line="115"/>
            <declaration name="lcd" type="SnmpLcd" line="116"/>
            <declaration name="securitySub" type="SnmpSecuritySubSystem" line="118"/>
            <declaration name="messageSub" type="SnmpMsgProcessingSubSystem" line="120"/>
            <declaration name="accessSub" type="SnmpAccessControlSubSystem" line="122"/>
            <javadoc line="124">
                Gets the engine time in seconds. This is the time from the last reboot.                
                <return>
                    The time from the last reboot.                    
                </return>
            </javadoc>
            <method name="getEngineTime" type="int" line="128">
                <comment line="130">
                    We do the counter wrap in a lazt way. Each time Engine is asked for his time it checks. So if nobody use the Engine, the time can wrap and wrap again without incrementing nb boot. We can imagine that it is irrelevant due to the amount of time needed to wrap.                    
                </comment>
                <comment line="133">
                    67 years of running. That is a great thing!
                    Reinitialize startTime.                    
                </comment>
                <comment line="137">
                    Can&apos;t do anything with this counter.                    
                </comment>
                <comment line="140">
                    Store for future use.                    
                </comment>
                <declaration name="delta" type="long" line="130"/>
                <scope line="131"/>
            </method>
            <javadoc line="146">
                Gets the engine Id. This is unique for each engine.                
                <return>
                    The engine Id object.                    
                </return>
            </javadoc>
            <method name="getEngineId" type="SnmpEngineId" line="150"/>
            <javadoc line="154">
                Gets the Usm key handler.                
                <return>
                    The key handler.                    
                </return>
            </javadoc>
            <method name="getUsmKeyHandler" type="SnmpUsmKeyHandler" line="158"/>
            <javadoc line="162">
                Gets the engine Lcd.                
                <return>
                    The engine Lcd.                    
                </return>
            </javadoc>
            <method name="getLcd" type="SnmpLcd" line="166"/>
            <javadoc line="169">
                Gets the engine boot number. This is the number of time this engine has rebooted. Each time an &lt;CODE&gt;SnmpEngine&lt;/CODE&gt; is instantiated, it will read this value in its Lcd, and store back the value incremented by one.                
                <return>
                    The engine&apos;s number of reboot.                    
                </return>
            </javadoc>
            <method name="getEngineBoots" type="int" line="173"/>
            <javadoc line="177">
                Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine Id, engine boots).
                  &lt;P&gt; WARNING : The SnmpEngineId is computed as follow:
                  &lt;ul&gt;
                  &lt;li&gt; If an lcd file is provided containing the property &quot;localEngineID&quot;, this property value is used.&lt;/li&gt;.
                  &lt;li&gt; If not, if the passed engineID is not null, this engine ID is used.&lt;/li&gt;
                  &lt;li&gt; If not, a time based engineID is computed.&lt;/li&gt;
                  &lt;/ul&gt;
                  This constructor should be called by an &lt;CODE&gt;SnmpEngineFactory&lt;/CODE&gt;. Don&apos;t call it directly.                
                <param>
                    fact The factory used to instantiate this engine.                    
                </param>
                <param>
                    lcd The local configuration datastore.                    
                </param>
                <param>
                    engineid The engine ID to use. If null is provided, an SnmpEngineId is computed using the current time.                    
                </param>
                <throws>
                    UnknownHostException Exception thrown, if the host name located in the property &quot;localEngineID&quot; is invalid.                    
                </throws>
            </javadoc>
            <method name="SnmpEngineImpl" type="constructor" line="193">
                <params>
                    <param name="fact" type="SnmpEngineFactory"/>
                    <param name="lcd" type="SnmpLcd"/>
                    <param name="engineid" type="SnmpEngineId"/>
                </params>
                <scope line="197"/>
                <scope line="204"/>
            </method>
            <javadoc line="210">
                Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine ID, engine boots).
                  &lt;P&gt; WARNING : The SnmpEngineId is computed as follow:
                  &lt;ul&gt;
                  &lt;li&gt; If an lcd file is provided containing the property &quot;localEngineID&quot;, this property value is used.&lt;/li&gt;.
                  &lt;li&gt; If not, the passed address and port are used to compute one.&lt;/li&gt;
                  &lt;/ul&gt;
                  This constructor should be called by an &lt;CODE&gt;SnmpEngineFactory&lt;/CODE&gt;. Don&apos;t call it directly.                
                <param>
                    fact The factory used to instantiate this engine.                    
                </param>
                <param>
                    lcd The local configuration datastore.                    
                </param>
                <param>
                    port UDP port to use in order to calculate the engine ID.                    
                </param>
                <param>
                    address An IP address used to calculate the engine ID.                    
                </param>
                <throws>
                    UnknownHostException Exception thrown, if the host name located in the property &quot;localEngineID&quot; is invalid.                    
                </throws>
            </javadoc>
            <method name="SnmpEngineImpl" type="constructor" line="227">
                <params>
                    <param name="fact" type="SnmpEngineFactory"/>
                    <param name="lcd" type="SnmpLcd"/>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="235"/>
            </method>
            <javadoc line="244">
                Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine ID, engine boots).
                  &lt;P&gt; WARNING : The SnmpEngineId is computed as follow:
                  &lt;ul&gt;
                  &lt;li&gt; If an lcd file is provided containing the property &quot;localEngineID&quot;, this property value is used.&lt;/li&gt;.
                  &lt;li&gt; If not, The passed port is used to compute one.&lt;/li&gt;
                  &lt;/ul&gt;
                  This constructor should be called by an &lt;CODE&gt;SnmpEngineFactory&lt;/CODE&gt;. Don&apos;t call it directly.                
                <param>
                    fact The factory used to instantiate this engine.                    
                </param>
                <param>
                    lcd The local configuration datastore                    
                </param>
                <param>
                    port UDP port to use in order to calculate the engine ID.                    
                </param>
                <throws>
                    UnknownHostException Exception thrown, if the host name located in the property &quot;localEngineID&quot; is invalid.                    
                </throws>
            </javadoc>
            <method name="SnmpEngineImpl" type="constructor" line="259">
                <params>
                    <param name="fact" type="SnmpEngineFactory"/>
                    <param name="lcd" type="SnmpLcd"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="267"/>
            </method>
            <javadoc line="276">
                Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine ID, engine boots).
                  &lt;P&gt; WARNING : The SnmpEngineId is computed as follow:
                  &lt;ul&gt;
                  &lt;li&gt; If an lcd file is provided containing the property &quot;localEngineID&quot;, this property value is used.&lt;/li&gt;.
                  &lt;li&gt; If not, a time based engineID is computed.&lt;/li&gt;
                  &lt;/ul&gt;
                  When no configuration nor java property is set for the engine ID value, a unique time based engine ID will be generated.
                  This constructor should be called by an &lt;CODE&gt;SnmpEngineFactory&lt;/CODE&gt;. Don&apos;t call it directly.                
                <param>
                    fact The factory used to instantiate this engine.                    
                </param>
                <param>
                    lcd The local configuration datastore.                    
                </param>
            </javadoc>
            <method name="SnmpEngineImpl" type="constructor" line="289">
                <params>
                    <param name="fact" type="SnmpEngineFactory"/>
                    <param name="lcd" type="SnmpLcd"/>
                </params>
                <scope line="297"/>
            </method>
            <javadoc line="306">
                Access Control will check the oids. By default is false.                
            </javadoc>
            <method name="activateCheckOid" type="void" line="309"/>
            <javadoc line="313">
                Access Control will not check the oids. By default is false.                
            </javadoc>
            <method name="deactivateCheckOid" type="void" line="316"/>
            <javadoc line="320">
                Access Control check or not the oids. By default is false.                
            </javadoc>
            <method name="isCheckOidActivated" type="boolean" line="323"/>
            <method name="storeNBBoots" type="void" line="328">
                <params>
                    <param name="boot" type="int"/>
                </params>
                <scope line="329"/>
            </method>
            <method name="init" type="void" line="338">
                <params>
                    <param name="lcd" type="SnmpLcd"/>
                    <param name="fact" type="SnmpEngineFactory"/>
                </params>
            </method>
            <method name="setUsmKeyHandler" type="void" line="352">
                <params>
                    <param name="usmKeyHandler" type="SnmpUsmKeyHandler"/>
                </params>
            </method>
            <method name="initEngineID" type="void" line="357">
                <declaration name="id" type="String" line="358"/>
                <scope line="359"/>
            </method>
            <javadoc line="365">
                Returns the Message Processing Sub System.                
                <return>
                    The Message Processing Sub System.                    
                </return>
            </javadoc>
            <method name="getMsgProcessingSubSystem" type="SnmpMsgProcessingSubSystem" line="369"/>
            <javadoc line="373">
                Sets the Message Processing Sub System.                
                <param>
                    sys The Message Processing Sub System.                    
                </param>
            </javadoc>
            <method name="setMsgProcessingSubSystem" type="void" line="377">
                <params>
                    <param name="sys" type="SnmpMsgProcessingSubSystem"/>
                </params>
            </method>
            <javadoc line="381">
                Returns the Security Sub System.                
                <return>
                    The Security Sub System.                    
                </return>
            </javadoc>
            <method name="getSecuritySubSystem" type="SnmpSecuritySubSystem" line="385"/>
            <javadoc line="388">
                Sets the Security Sub System.                
                <param>
                    sys The Security Sub System.                    
                </param>
            </javadoc>
            <method name="setSecuritySubSystem" type="void" line="392">
                <params>
                    <param name="sys" type="SnmpSecuritySubSystem"/>
                </params>
            </method>
            <javadoc line="395">
                Sets the Access Control Sub System.                
                <param>
                    sys The Access Control Sub System.                    
                </param>
            </javadoc>
            <method name="setAccessControlSubSystem" type="void" line="399">
                <params>
                    <param name="sys" type="SnmpAccessControlSubSystem"/>
                </params>
            </method>
            <javadoc line="403">
                Returns the Access Control Sub System.                
                <return>
                    The Access Control Sub System.                    
                </return>
            </javadoc>
            <method name="getAccessControlSubSystem" type="SnmpAccessControlSubSystem" line="407"/>
            <javadoc line="410">
                Checks the passed msg flags according to the rules specified in RFC 2572.                
                <param>
                    msgFlags The msg flags.                    
                </param>
            </javadoc>
            <method name="checkSecurityLevel" type="void" line="415">
                <params>
                    <param name="msgFlags" type="byte"/>
                </params>
                <declaration name="secLevel" type="int" line="416"/>
                <scope line="418"/>
            </method>
        </class>
    </source>