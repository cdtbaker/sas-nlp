<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.internal">
        <import package="java.net.InetAddress"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.logging.Level"/>
        <import package="java.io.Serializable"/>
        <import package="com.sun.jmx.snmp.SnmpDefinitions"/>
        <import package="com.sun.jmx.snmp.SnmpEngineId"/>
        <import package="com.sun.jmx.snmp.SnmpEngine"/>
        <import package="com.sun.jmx.snmp.SnmpUsmKeyHandler"/>
        <import package="com.sun.jmx.snmp.SnmpEngineFactory"/>
        <import package="com.sun.jmx.snmp.SnmpUnknownModelException"/>
        <import package="com.sun.jmx.snmp.internal.SnmpTools"/>
        <import package="com.sun.jmx.snmp.SnmpBadSecurityLevelException"/>
        <import package="com.sun.jmx.defaults.JmxProperties.SNMP_LOGGER"/>
        <class name="SnmpEngineImpl" line="16">
            <implements interface="SnmpEngine"/>
            <implements interface="Serializable"/>
            <javadoc line="16">
                This engine is conformant with the RFC 2571. It is the main object within
                  an SNMP entity (agent, manager...).
                  To an engine is associated an {@link com.sun.jmx.snmp.SnmpEngineId}.
                  The way the engineId is retrieved is linked to the way the engine is
                  instantiated. See each &lt;CODE&gt;SnmpEngine&lt;/CODE&gt; constructor for more details.
                  An engine is composed of a set of sub systems{@link com.sun.jmx.snmp.internal.SnmpSubSystem}. An &lt;CODE&gt;SNMP&lt;/CODE&gt;
                  engine can contain a:
                  &lt;ul&gt;
                  &lt;li&gt; Message Processing Sub System :{@link com.sun.jmx.snmp.internal.SnmpMsgProcessingSubSystem}&lt;/li&gt;
                  &lt;li&gt; Security Sub System :{@link com.sun.jmx.snmp.internal.SnmpSecuritySubSystem} &lt;/li&gt;
                  &lt;li&gt; Access Control Sub System :{@link com.sun.jmx.snmp.internal.SnmpAccessControlSubSystem}&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;P&gt; Each sub system contains a set of models. A model is an implementation
                  of a particular treatement (eg: the User based Security Model defined in
                  RFC 2574 is a functional element dealing with authentication and privacy).
                  &lt;/P&gt;
                  Engine instantiation is based on a factory. This factory, implementing
                  mandatorily {@link com.sun.jmx.snmp.SnmpEngineFactory  SnmpEngineFactory}is set in the method &lt;CODE&gt;setFactory&lt;/CODE&gt;.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="40"/>
            <declaration name="noAuthNoPriv" type="int" line="41"/>
            <javadoc line="41">
                Security level. No authentication, no privacy. Value is 0,
                  as defined in RFC 2572                
            </javadoc>
            <declaration name="authNoPriv" type="int" line="46"/>
            <javadoc line="46">
                Security level. Authentication, no privacy. Value is 1, as
                  defined in RFC 2572                
            </javadoc>
            <declaration name="authPriv" type="int" line="51"/>
            <javadoc line="51">
                Security level. Authentication, privacy. Value is 3,
                  as defined in RFC 2572                
            </javadoc>
            <declaration name="reportableFlag" type="int" line="56"/>
            <javadoc line="56">
                Flag that indicates that a report is to be sent. Value is 4, as defined in RFC 2572                
            </javadoc>
            <declaration name="authMask" type="int" line="60"/>
            <javadoc line="60">
                Mask used to isolate authentication information within a message flag.                
            </javadoc>
            <declaration name="privMask" type="int" line="64"/>
            <javadoc line="64">
                Mask used to isolate privacy information within a message flag.                
            </javadoc>
            <declaration name="authPrivMask" type="int" line="68"/>
            <javadoc line="68">
                Mask used to isolate authentication and privacy information within a message flag.                
            </javadoc>
            <declaration name="engineid" type="SnmpEngineId" line="72"/>
            <declaration name="factory" type="SnmpEngineFactory" line="73"/>
            <declaration name="startTime" type="long" line="74"/>
            <declaration name="boot" type="int" line="75"/>
            <declaration name="checkOid" type="boolean" line="76"/>
            <declaration name="usmKeyHandler" type="SnmpUsmKeyHandler" line="77"/>
            <declaration name="lcd" type="SnmpLcd" line="78"/>
            <declaration name="securitySub" type="SnmpSecuritySubSystem" line="79"/>
            <declaration name="messageSub" type="SnmpMsgProcessingSubSystem" line="80"/>
            <declaration name="accessSub" type="SnmpAccessControlSubSystem" line="81"/>
            <javadoc line="82">
                Gets the engine time in seconds. This is the time from the last reboot.                
                <return>
                    The time from the last reboot.                    
                </return>
            </javadoc>
            <method name="getEngineTime" type="int" line="86">
                <declaration name="delta" type="long" line="87"/>
                <scope line="88"/>
            </method>
            <javadoc line="95">
                Gets the engine Id. This is unique for each engine.                
                <return>
                    The engine Id object.                    
                </return>
            </javadoc>
            <method name="getEngineId" type="SnmpEngineId" line="99"/>
            <javadoc line="102">
                Gets the Usm key handler.                
                <return>
                    The key handler.                    
                </return>
            </javadoc>
            <method name="getUsmKeyHandler" type="SnmpUsmKeyHandler" line="106"/>
            <javadoc line="109">
                Gets the engine Lcd.                
                <return>
                    The engine Lcd.                    
                </return>
            </javadoc>
            <method name="getLcd" type="SnmpLcd" line="113"/>
            <javadoc line="116">
                Gets the engine boot number. This is the number of time this engine has rebooted. Each time an &lt;CODE&gt;SnmpEngine&lt;/CODE&gt; is instantiated, it will read this value in its Lcd, and store back the value incremented by one.                
                <return>
                    The engine's number of reboot.                    
                </return>
            </javadoc>
            <method name="getEngineBoots" type="int" line="120"/>
            <javadoc line="123">
                Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine Id, engine boots).
                  &lt;P&gt; WARNING : The SnmpEngineId is computed as follow:
                  &lt;ul&gt;
                  &lt;li&gt; If an lcd file is provided containing the property &quot;localEngineID&quot;, this property value is used.&lt;/li&gt;.
                  &lt;li&gt; If not, if the passed engineID is not null, this engine ID is used.&lt;/li&gt;
                  &lt;li&gt; If not, a time based engineID is computed.&lt;/li&gt;
                  &lt;/ul&gt;
                  This constructor should be called by an &lt;CODE&gt;SnmpEngineFactory&lt;/CODE&gt;. Don&apos;t call it directly.                
                <param>
                    fact The factory used to instantiate this engine.                    
                </param>
                <param>
                    lcd The local configuration datastore.                    
                </param>
                <param>
                    engineid The engine ID to use. If null is provided, an SnmpEngineId is computed using the current time.                    
                </param>
                <throws>
                    UnknownHostException Exception thrown, if the host name located in the property "localEngineID" is invalid.                    
                </throws>
            </javadoc>
            <method name="SnmpEngineImpl" type="constructor" line="137">
                <params>
                    <param name="fact" type="SnmpEngineFactory"/>
                    <param name="lcd" type="SnmpLcd"/>
                    <param name="engineid" type="SnmpEngineId"/>
                </params>
                <scope line="140"/>
                <scope line="145"/>
            </method>
            <javadoc line="149">
                Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine ID, engine boots).
                  &lt;P&gt; WARNING : The SnmpEngineId is computed as follow:
                  &lt;ul&gt;
                  &lt;li&gt; If an lcd file is provided containing the property &quot;localEngineID&quot;, this property value is used.&lt;/li&gt;.
                  &lt;li&gt; If not, the passed address and port are used to compute one.&lt;/li&gt;
                  &lt;/ul&gt;
                  This constructor should be called by an &lt;CODE&gt;SnmpEngineFactory&lt;/CODE&gt;. Don&apos;t call it directly.                
                <param>
                    fact The factory used to instantiate this engine.                    
                </param>
                <param>
                    lcd The local configuration datastore.                    
                </param>
                <param>
                    port UDP port to use in order to calculate the engine ID.                    
                </param>
                <param>
                    address An IP address used to calculate the engine ID.                    
                </param>
                <throws>
                    UnknownHostException Exception thrown, if the host name located in the property "localEngineID" is invalid.                    
                </throws>
            </javadoc>
            <method name="SnmpEngineImpl" type="constructor" line="163">
                <params>
                    <param name="fact" type="SnmpEngineFactory"/>
                    <param name="lcd" type="SnmpLcd"/>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="168"/>
            </method>
            <javadoc line="172">
                Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine ID, engine boots).
                  &lt;P&gt; WARNING : The SnmpEngineId is computed as follow:
                  &lt;ul&gt;
                  &lt;li&gt; If an lcd file is provided containing the property &quot;localEngineID&quot;, this property value is used.&lt;/li&gt;.
                  &lt;li&gt; If not, The passed port is used to compute one.&lt;/li&gt;
                  &lt;/ul&gt;
                  This constructor should be called by an &lt;CODE&gt;SnmpEngineFactory&lt;/CODE&gt;. Don&apos;t call it directly.                
                <param>
                    fact The factory used to instantiate this engine.                    
                </param>
                <param>
                    lcd The local configuration datastore                    
                </param>
                <param>
                    port UDP port to use in order to calculate the engine ID.                    
                </param>
                <throws>
                    UnknownHostException Exception thrown, if the host name located in the property "localEngineID" is invalid.                    
                </throws>
            </javadoc>
            <method name="SnmpEngineImpl" type="constructor" line="185">
                <params>
                    <param name="fact" type="SnmpEngineFactory"/>
                    <param name="lcd" type="SnmpLcd"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="190"/>
            </method>
            <javadoc line="194">
                Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine ID, engine boots).
                  &lt;P&gt; WARNING : The SnmpEngineId is computed as follow:
                  &lt;ul&gt;
                  &lt;li&gt; If an lcd file is provided containing the property &quot;localEngineID&quot;, this property value is used.&lt;/li&gt;.
                  &lt;li&gt; If not, a time based engineID is computed.&lt;/li&gt;
                  &lt;/ul&gt;
                  When no configuration nor java property is set for the engine ID value, a unique time based engine ID will be generated.
                  This constructor should be called by an &lt;CODE&gt;SnmpEngineFactory&lt;/CODE&gt;. Don&apos;t call it directly.                
                <param>
                    fact The factory used to instantiate this engine.                    
                </param>
                <param>
                    lcd The local configuration datastore.                    
                </param>
            </javadoc>
            <method name="SnmpEngineImpl" type="constructor" line="206">
                <params>
                    <param name="fact" type="SnmpEngineFactory"/>
                    <param name="lcd" type="SnmpLcd"/>
                </params>
                <scope line="211"/>
            </method>
            <javadoc line="215">
                Access Control will check the oids. By default is false.                
            </javadoc>
            <method name="activateCheckOid" type="void" line="218"/>
            <javadoc line="221">
                Access Control will not check the oids. By default is false.                
            </javadoc>
            <method name="deactivateCheckOid" type="void" line="224"/>
            <javadoc line="227">
                Access Control check or not the oids. By default is false.                
            </javadoc>
            <method name="isCheckOidActivated" type="boolean" line="230"/>
            <method name="storeNBBoots" type="void" line="233">
                <params>
                    <param name="boot" type="int"/>
                </params>
                <scope line="234"/>
            </method>
            <method name="init" type="void" line="240">
                <params>
                    <param name="lcd" type="SnmpLcd"/>
                    <param name="fact" type="SnmpEngineFactory"/>
                </params>
            </method>
            <method name="setUsmKeyHandler" type="void" line="248">
                <params>
                    <param name="usmKeyHandler" type="SnmpUsmKeyHandler"/>
                </params>
            </method>
            <method name="initEngineID" type="void" line="251">
                <declaration name="id" type="String" line="252"/>
                <scope line="253"/>
            </method>
            <javadoc line="257">
                Returns the Message Processing Sub System.                
                <return>
                    The Message Processing Sub System.                    
                </return>
            </javadoc>
            <method name="getMsgProcessingSubSystem" type="SnmpMsgProcessingSubSystem" line="261"/>
            <javadoc line="264">
                Sets the Message Processing Sub System.                
                <param>
                    sys The Message Processing Sub System.                    
                </param>
            </javadoc>
            <method name="setMsgProcessingSubSystem" type="void" line="268">
                <params>
                    <param name="sys" type="SnmpMsgProcessingSubSystem"/>
                </params>
            </method>
            <javadoc line="271">
                Returns the Security Sub System.                
                <return>
                    The Security Sub System.                    
                </return>
            </javadoc>
            <method name="getSecuritySubSystem" type="SnmpSecuritySubSystem" line="275"/>
            <javadoc line="278">
                Sets the Security Sub System.                
                <param>
                    sys The Security Sub System.                    
                </param>
            </javadoc>
            <method name="setSecuritySubSystem" type="void" line="282">
                <params>
                    <param name="sys" type="SnmpSecuritySubSystem"/>
                </params>
            </method>
            <javadoc line="285">
                Sets the Access Control Sub System.                
                <param>
                    sys The Access Control Sub System.                    
                </param>
            </javadoc>
            <method name="setAccessControlSubSystem" type="void" line="289">
                <params>
                    <param name="sys" type="SnmpAccessControlSubSystem"/>
                </params>
            </method>
            <javadoc line="292">
                Returns the Access Control Sub System.                
                <return>
                    The Access Control Sub System.                    
                </return>
            </javadoc>
            <method name="getAccessControlSubSystem" type="SnmpAccessControlSubSystem" line="296"/>
            <javadoc line="299">
                Checks the passed msg flags according to the rules specified in RFC 2572.                
                <param>
                    msgFlags The msg flags.                    
                </param>
            </javadoc>
            <method name="checkSecurityLevel" type="void" line="303">
                <params>
                    <param name="msgFlags" type="byte"/>
                </params>
                <declaration name="secLevel" type="int" line="304"/>
                <scope line="305"/>
            </method>
        </class>
    </source>