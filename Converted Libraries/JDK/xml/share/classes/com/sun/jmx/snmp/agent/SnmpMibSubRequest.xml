<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.agent">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <interface name="SnmpMibSubRequest">
            <implements interface="SnmpMibRequest"/>
            <javadoc line="35">
                This interface models an SNMP sub request to be performed on a specific
                  SNMP MIB node. The node involved can be either an SNMP group, an SNMP table,
                  or an SNMP table entry (conceptual row). The conceptual row may or may not
                  already exist. If the row did not exist at the time when the request
                  was received, the &lt;CODE&gt;isNewEntry()&lt;/CODE&gt; method will return &lt;CODE&gt;
                  true&lt;/CODE&gt;.
                  &lt;p&gt;
                  Objects implementing this interface will be allocated by the SNMP engine.
                  You will never need to implement this interface. You will only use it.
                  &lt;/p&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <method name="getElements" type="Enumeration" line="50"/>
            <javadoc line="50">
                Return the list of varbind to be handled by the SNMP MIB node.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; &lt;ul&gt;
                  &lt;i&gt;In case of SET operation, if this node is a table row which
                  contains a control variable (as identified by the table&apos;s
                  isRowStatus() method) the control variable will not
                  be included in this list: it will be obtained by calling
                  getRowStatusVarBind(). This will allow you to handle the control
                  variable specifically.&lt;/i&gt;&lt;br&gt;
                  You will never need to worry about this unless you need to
                  implement a non standard mechanism for handling row
                  creation and deletion.
                  &lt;/ul&gt;
                  &lt;p&gt;                
                <return>
                    The elements of the enumeration are instances of{@link com.sun.jmx.snmp.SnmpVarBind}                    
                </return>
            </javadoc>
            <method name="getSubList" type="Vector<SnmpVarBind>" line="70"/>
            <javadoc line="70">
                Return the list of varbind to be handled by the SNMP MIB node.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; &lt;ul&gt;
                  &lt;i&gt;In case of SET operation, if this node is a table row which
                  contains a control variable (as identified by the table&apos;s
                  isRowStatus() method) the control variable will not
                  be included in this list: it will be obtained by calling
                  getRowStatusVarBind(). This will allow you to handle the control
                  variable specifically.&lt;/i&gt;&lt;br&gt;
                  You will never need to worry about this unless you need to
                  implement a non standard mechanism for handling row
                  creation and deletion.
                  &lt;/ul&gt;
                  &lt;p&gt;                
                <return>
                    The elements of the vector are instances of{@link com.sun.jmx.snmp.SnmpVarBind}                    
                </return>
            </javadoc>
            <method name="getEntryOid" type="SnmpOid" line="90"/>
            <javadoc line="90">
                Return the part of the OID identifying the table entry involved.
                  &lt;p&gt;                
                <return>
                    {@link com.sun.jmx.snmp.SnmpOid} or &lt;CODE&gt;null&lt;/CODE&gt;
                      if the request is not directed to an entry.                    
                </return>
            </javadoc>
            <method name="isNewEntry" type="boolean" line="99"/>
            <javadoc line="99">
                Indicate whether the entry involved is a new entry.
                  This method will return &lt;CODE&gt;true&lt;/CODE&gt; if the entry was not
                  found when the request was processed. As a consequence, &lt;CODE&gt;
                  true&lt;/CODE&gt; means that either the entry does not exist yet,
                  or it has been created while processing this request.
                  The result of this method is only significant when an entry
                  is involved.
                  &lt;p&gt;                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; If the entry did not exist,
                      or &lt;CODE&gt;false&lt;/CODE&gt; if the entry involved was found.                    
                </return>
            </javadoc>
            <method name="getRowStatusVarBind" type="SnmpVarBind" line="114"/>
            <javadoc line="114">
                Return the varbind that holds the RowStatus variable.
                  It corresponds to the varbind that was identified by
                  the &lt;code&gt;isRowStatus()&lt;/code&gt; method generated by mibgen
                  on {@link com.sun.jmx.snmp.agent.SnmpMibTable} derivatives.
                  &lt;ul&gt;&lt;li&gt;In SMIv2, it is the varbind which contains the columnar
                  object implementing the RowStatus TEXTUAL-CONVENTION.&lt;/li&gt;
                  &lt;li&gt;In SMIv1 nothing special is generated&lt;/li&gt;
                  &lt;ul&gt;You may however subclass the generated table metadata
                  class in order to provide your own implementation of
                  isRowStatus(), getRowAction(), isRowReady() and
                  setRowStatus()
                  (see  {@link com.sun.jmx.snmp.agent.SnmpMibTable}).&lt;/ul&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;                
                <return>
                    a varbind that serves to control the table modification.
                      &lt;code&gt;null&lt;/code&gt; means that no such varbind could be
                      identified.&lt;br&gt;
                      &lt;b&gt;Note:&lt;/b&gt;&lt;i&gt;The runtime will only try to identify
                      the RowStatus varbind when processing an
                      SNMP SET request. In this case, the identified
                      varbind will not be included in the set of varbinds
                      returned by getSubList() and getElements().
                      &lt;/i&gt;                    
                </return>
            </javadoc>
            <method name="registerGetException" type="void" line="142"/>
            <javadoc line="142">
                This method should be called when a status exception needs to
                  be raised for a given varbind of an SNMP GET request. This method
                  performs all the necessary conversions (SNMPv1 &lt;=&gt; SNMPv2) and
                  propagates the exception if needed:
                  If the version is SNMP v1, the exception is propagated.
                  If the version is SNMP v2, the exception is stored in the varbind.
                  This method also takes care of setting the correct value of the
                  index field.
                  &lt;p&gt;                
                <param>
                    varbind The varbind for which the exception is
                      registered. Note that this varbind &lt;b&gt;must&lt;/b&gt; have
                      been obtained from the enumeration returned by
                      &lt;CODE&gt;getElements()&lt;/CODE&gt;, or from the vector
                      returned by &lt;CODE&gt;getSubList()&lt;/CODE&gt;                    
                </param>
                <param>
                    exception The exception to be registered for the given varbind.                    
                </param>
            </javadoc>
            <method name="registerSetException" type="void" line="166"/>
            <javadoc line="166">
                This method should be called when a status exception needs to
                  be raised for a given varbind of an SNMP SET request. This method
                  performs all the necessary conversions (SNMPv1 &lt;=&gt; SNMPv2) and
                  propagates the exception if needed.
                  This method also takes care of setting the correct value of the
                  index field.
                  &lt;p&gt;                
                <param>
                    varbind The varbind for which the exception is
                      registered. Note that this varbind &lt;b&gt;must&lt;/b&gt; have
                      been obtained from the enumeration returned by
                      &lt;CODE&gt;getElements()&lt;/CODE&gt;, or from the vector
                      returned by &lt;CODE&gt;getSubList()&lt;/CODE&gt;                    
                </param>
                <param>
                    exception The exception to be registered for the given varbind.                    
                </param>
            </javadoc>
            <method name="registerCheckException" type="void" line="188"/>
            <javadoc line="188">
                This method should be called when a status exception needs to
                  be raised when checking a given varbind for an SNMP SET request.
                  This method performs all the necessary conversions (SNMPv1 &lt;=&gt;
                  SNMPv2) and propagates the exception if needed.
                  This method also takes care of setting the correct value of the
                  index field.
                  &lt;p&gt;                
                <param>
                    varbind The varbind for which the exception is
                      registered. Note that this varbind &lt;b&gt;must&lt;/b&gt; have
                      been obtained from the enumeration returned by
                      &lt;CODE&gt;getElements()&lt;/CODE&gt;, or from the vector
                      returned by &lt;CODE&gt;getSubList()&lt;/CODE&gt;                    
                </param>
                <param>
                    exception The exception to be registered for the given varbind.                    
                </param>
            </javadoc>
        </interface>
    </source>