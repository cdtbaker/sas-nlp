<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.IPAcl">
        <import package="java.security.Principal"/>
        <import package="java.security.acl.Acl"/>
        <import package="java.security.acl.AclEntry"/>
        <import package="java.security.acl.NotOwnerException"/>
        <import package="java.io.Serializable"/>
        <import package="java.security.acl.Permission"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <class name="AclImpl" line="42">
            <extends class="OwnerImpl"/>
            <implements interface="Acl"/>
            <implements interface="Serializable"/>
            <javadoc line="42">
                Represent an Access Control List (ACL) which is used to guard access to http adaptor.
                  &lt;P&gt;
                  It is a data structure with multiple ACL entries. Each ACL entry, of interface type
                  AclEntry, contains a set of permissions and a set of communities associated with a
                  particular principal. (A principal represents an entity such as a host or a group of host).
                  Additionally, each ACL entry is specified as being either positive or negative.
                  If positive, the permissions are to be granted to the associated principal.
                  If negative, the permissions are to be denied.                
                <see>
                    java.security.acl.Acl                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="56"/>
            <declaration name="entryList" type="Vector&lt;AclEntry&gt;" line="58"/>
            <declaration name="aclName" type="String" line="59"/>
            <javadoc line="61">
                Constructs the ACL with a specified owner                
                <param>
                    owner owner of the ACL.                    
                </param>
                <param>
                    name  name of this ACL.                    
                </param>
            </javadoc>
            <method name="AclImpl" type="constructor" line="67">
                <params>
                    <param name="owner" type="PrincipalImpl"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="73">
                Sets the name of this ACL.                
                <param>
                    caller the principal invoking this method. It must be an owner
                      of this ACL.                    
                </param>
                <param>
                    name the name to be given to this ACL.                    
                </param>
                <exception>
                    NotOwnerException if the caller principal is not an owner
                      of this ACL.                    
                </exception>
                <see>
                    java.security.Principal                    
                </see>
            </javadoc>
            <method name="setName" type="void" line="85">
                <params>
                    <param name="caller" type="Principal"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="91">
                Returns the name of this ACL.                
                <return>
                    the name of this ACL.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="96"/>
            <javadoc line="100">
                Adds an ACL entry to this ACL. An entry associates a principal (e.g., an individual or a group)
                  with a set of permissions. Each principal can have at most one positive ACL entry
                  (specifying permissions to be granted to the principal) and one negative ACL entry
                  (specifying permissions to be denied). If there is already an ACL entry
                  of the same type (negative or positive) already in the ACL, false is returned.                
                <param>
                    caller the principal invoking this method. It must be an owner
                      of this ACL.                    
                </param>
                <param>
                    entry the ACL entry to be added to this ACL.                    
                </param>
                <return>
                    true on success, false if an entry of the same type (positive
                      or negative) for the same principal is already present in this ACL.                    
                </return>
                <exception>
                    NotOwnerException if the caller principal is not an owner of
                      this ACL.                    
                </exception>
                <see>
                    java.security.Principal                    
                </see>
            </javadoc>
            <method name="addEntry" type="boolean" line="117">
                <params>
                    <param name="caller" type="Principal"/>
                    <param name="entry" type="AclEntry"/>
                </params>
                <comment line="123">
                    for (Enumeration e = entryList.elements();e.hasMoreElements();){
                    AclEntry ent = (AclEntry) e.nextElement();
                    if (ent.getPrincipal().equals(entry.getPrincipal()))
                    return false;
                    }                    
                </comment>
            </method>
            <javadoc line="135">
                Removes an ACL entry from this ACL.                
                <param>
                    caller the principal invoking this method. It must be an owner
                      of this ACL.                    
                </param>
                <param>
                    entry the ACL entry to be removed from this ACL.                    
                </param>
                <return>
                    true on success, false if the entry is not part of this ACL.                    
                </return>
                <exception>
                    NotOwnerException if the caller principal is not an owner
                      of this Acl.                    
                </exception>
                <see>
                    java.security.Principal                    
                </see>
                <see>
                    java.security.acl.AclEntry                    
                </see>
            </javadoc>
            <method name="removeEntry" type="boolean" line="148">
                <params>
                    <param name="caller" type="Principal"/>
                    <param name="entry" type="AclEntry"/>
                </params>
            </method>
            <javadoc line="155">
                Removes all ACL entries from this ACL.                
                <param>
                    caller the principal invoking this method. It must be an owner
                      of this ACL.                    
                </param>
                <exception>
                    NotOwnerException if the caller principal is not an owner of
                      this Acl.                    
                </exception>
                <see>
                    java.security.Principal                    
                </see>
            </javadoc>
            <method name="removeAll" type="void" line="165">
                <params>
                    <param name="caller" type="Principal"/>
                </params>
            </method>
            <javadoc line="171">
                Returns an enumeration for the set of allowed permissions for
                  the specified principal
                  (representing an entity such as an individual or a group).
                  This set of allowed permissions is calculated as follows:
                  &lt;UL&gt;
                  &lt;LI&gt;If there is no entry in this Access Control List for the specified
                  principal, an empty permission set is returned.&lt;/LI&gt;
                  &lt;LI&gt;Otherwise, the principal&apos;s group permission sets are determined.
                  (A principal can belong to one or more groups, where a group is a group
                  of principals, represented by the Group interface.)&lt;/LI&gt;
                  &lt;/UL&gt;                
                <param>
                    user the principal whose permission set is to be returned.                    
                </param>
                <return>
                    the permission set specifying the permissions the principal
                      is allowed.                    
                </return>
                <see>
                    java.security.Principal                    
                </see>
            </javadoc>
            <method name="getPermissions" type="Enumeration<Permission>" line="188">
                <params>
                    <param name="user" type="Principal"/>
                </params>
                <declaration name="empty" type="Vector&lt;Permission&gt;" line="189"/>
                <scope line="190">
                    <declaration name="ent" type="AclEntry" line="191"/>
                </scope>
            </method>
            <javadoc line="198">
                Returns an enumeration of the entries in this ACL. Each element in the
                  enumeration is of type AclEntry.                
                <return>
                    an enumeration of the entries in this ACL.                    
                </return>
            </javadoc>
            <method name="entries" type="Enumeration<AclEntry>" line="204"/>
            <javadoc line="208">
                Checks whether or not the specified principal has the specified
                  permission.
                  If it does, true is returned, otherwise false is returned.
                  More specifically, this method checks whether the passed permission
                  is a member of the allowed permission set of the specified principal.
                  The allowed permission set is determined by the same algorithm as is
                  used by the getPermissions method.                
                <param>
                    user the principal, assumed to be a valid authenticated Principal.                    
                </param>
                <param>
                    perm the permission to be checked for.                    
                </param>
                <return>
                    true if the principal has the specified permission,
                      false otherwise.                    
                </return>
                <see>
                    java.security.Principal                    
                </see>
                <see>
                    java.security.Permission                    
                </see>
            </javadoc>
            <method name="checkPermission" type="boolean" line="225">
                <params>
                    <param name="user" type="Principal"/>
                    <param name="perm" type="java.security.acl.Permission"/>
                </params>
                <scope line="226">
                    <declaration name="ent" type="AclEntry" line="227"/>
                </scope>
            </method>
            <javadoc line="234">
                Checks whether or not the specified principal has the specified
                  permission.
                  If it does, true is returned, otherwise false is returned.
                  More specifically, this method checks whether the passed permission
                  is a member of the allowed permission set of the specified principal.
                  The allowed permission set is determined by the same algorithm as is
                  used by the getPermissions method.                
                <param>
                    user the principal, assumed to be a valid authenticated Principal.                    
                </param>
                <param>
                    community the community name associated with the principal.                    
                </param>
                <param>
                    perm the permission to be checked for.                    
                </param>
                <return>
                    true if the principal has the specified permission, false
                      otherwise.                    
                </return>
                <see>
                    java.security.Principal                    
                </see>
                <see>
                    java.security.Permission                    
                </see>
            </javadoc>
            <method name="checkPermission" type="boolean" line="252">
                <params>
                    <param name="user" type="Principal"/>
                    <param name="community" type="String"/>
                    <param name="perm" type="java.security.acl.Permission"/>
                </params>
                <scope line="253">
                    <declaration name="ent" type="AclEntryImpl" line="254"/>
                </scope>
            </method>
            <javadoc line="261">
                Checks whether or not the specified community string is defined.                
                <param>
                    community the community name associated with the principal.                    
                </param>
                <return>
                    true if the specified community string is defined, false
                      otherwise.                    
                </return>
                <see>
                    java.security.Principal                    
                </see>
                <see>
                    java.security.Permission                    
                </see>
            </javadoc>
            <method name="checkCommunity" type="boolean" line="271">
                <params>
                    <param name="community" type="String"/>
                </params>
                <scope line="272">
                    <declaration name="ent" type="AclEntryImpl" line="273"/>
                </scope>
            </method>
            <javadoc line="279">
                Returns a string representation of the ACL contents.                
                <return>
                    a string representation of the ACL contents.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="284"/>
        </class>
    </source>