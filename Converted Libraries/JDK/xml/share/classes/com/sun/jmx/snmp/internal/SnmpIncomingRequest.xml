<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.internal">
        <import package="java.net.InetAddress"/>
        <import package="com.sun.jmx.snmp.SnmpSecurityParameters"/>
        <import package="com.sun.jmx.snmp.SnmpTooBigException"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.SnmpPdu"/>
        <import package="com.sun.jmx.snmp.SnmpMsg"/>
        <import package="com.sun.jmx.snmp.SnmpUnknownSecModelException"/>
        <import package="com.sun.jmx.snmp.SnmpBadSecurityLevelException"/>
        <interface name="SnmpIncomingRequest">
            <javadoc line="10">
                &lt;P&gt; An &lt;CODE&gt;SnmpIncomingRequest&lt;/CODE&gt; handles both sides of an incoming SNMP request:
                  &lt;ul&gt;
                  &lt;li&gt; The request. Unmarshalling of the received message. &lt;/li&gt;
                  &lt;li&gt; The response. Marshalling of the message to send. &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getSecurityParameters" type="SnmpSecurityParameters" line="21"/>
            <javadoc line="21">
                Once the incoming request decoded, returns the decoded security parameters.                
                <return>
                    The decoded security parameters.                    
                </return>
            </javadoc>
            <method name="isReport" type="boolean" line="26"/>
            <javadoc line="26">
                Tests if a report is expected.                
                <return>
                    boolean indicating if a report is to be sent.                    
                </return>
            </javadoc>
            <method name="isResponse" type="boolean" line="31"/>
            <javadoc line="31">
                Tests if a response is expected.                
                <return>
                    boolean indicating if a response is to be sent.                    
                </return>
            </javadoc>
            <method name="noResponse" type="void" line="36"/>
            <javadoc line="36">
                Tells this request that no response will be sent.                
            </javadoc>
            <method name="getPrincipal" type="String" line="40"/>
            <javadoc line="40">
                Gets the incoming request principal.                
                <return>
                    The request principal.                    
                </return>
            </javadoc>
            <method name="getSecurityLevel" type="int" line="45"/>
            <javadoc line="45">
                Gets the incoming request security level. This level is defined in {@link com.sun.jmx.snmp.SnmpEngine SnmpEngine}.                
                <return>
                    The security level.                    
                </return>
            </javadoc>
            <method name="getSecurityModel" type="int" line="50"/>
            <javadoc line="50">
                Gets the incoming request security model.                
                <return>
                    The security model.                    
                </return>
            </javadoc>
            <method name="getContextName" type="byte[]" line="55"/>
            <javadoc line="55">
                Gets the incoming request context name.                
                <return>
                    The context name.                    
                </return>
            </javadoc>
            <method name="getContextEngineId" type="byte[]" line="60"/>
            <javadoc line="60">
                Gets the incoming request context engine Id.                
                <return>
                    The context engine Id.                    
                </return>
            </javadoc>
            <method name="getAccessContext" type="byte[]" line="65"/>
            <javadoc line="65">
                Gets the incoming request context name used by Access Control Model in order to allow or deny the access to OIDs.                
            </javadoc>
            <method name="encodeMessage" type="int" line="69"/>
            <javadoc line="69">
                Encodes the response message to send and puts the result in the specified byte array.                
                <param>
                    outputBytes An array to receive the resulting encoding.                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException If the result does not fit
                      into the specified array.                    
                </exception>
            </javadoc>
            <method name="decodeMessage" type="void" line="76"/>
            <javadoc line="76">
                Decodes the specified bytes and initializes the request with the incoming message.                
                <param>
                    inputBytes The bytes to be decoded.                    
                </param>
                <exception>
                    SnmpStatusException If the specified bytes are not a valid encoding or if the security applied to this request failed and no report is to be sent (typically trap PDU).                    
                </exception>
            </javadoc>
            <method name="encodeSnmpPdu" type="SnmpMsg" line="82"/>
            <javadoc line="82">
                Initializes the response to send with the passed Pdu.
                  &lt;P&gt;
                  If the encoding length exceeds &lt;CODE&gt;maxDataLength&lt;/CODE&gt;,
                  the method throws an exception.                
                <param>
                    p The PDU to be encoded.                    
                </param>
                <param>
                    maxDataLength The maximum length permitted for the data field.                    
                </param>
                <exception>
                    SnmpStatusException If the specified &lt;CODE&gt;pdu&lt;/CODE&gt;
                      is not valid.                    
                </exception>
                <exception>
                    SnmpTooBigException If the resulting encoding does not fit
                      into &lt;CODE&gt;maxDataLength&lt;/CODE&gt; bytes.                    
                </exception>
                <exception>
                    ArrayIndexOutOfBoundsException If the encoding exceeds
                      &lt;CODE&gt;maxDataLength&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="decodeSnmpPdu" type="SnmpPdu" line="97"/>
            <javadoc line="97">
                Gets the request PDU encoded in the received message.
                  &lt;P&gt;
                  This method decodes the data field and returns the resulting PDU.                
                <return>
                    The resulting PDU.                    
                </return>
                <exception>
                    SnmpStatusException If the encoding is not valid.                    
                </exception>
            </javadoc>
            <method name="printRequestMessage" type="String" line="105"/>
            <javadoc line="105">
                Returns a stringified form of the received message.                
                <return>
                    The message state string.                    
                </return>
            </javadoc>
            <method name="printResponseMessage" type="String" line="110"/>
            <javadoc line="110">
                Returns a stringified form of the message to send.                
                <return>
                    The message state string.                    
                </return>
            </javadoc>
        </interface>
    </source>