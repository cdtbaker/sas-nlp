<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.Array"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Type"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="java.util.WeakHashMap"/>
        <import package="javax.management.Descriptor"/>
        <import package="javax.management.ImmutableDescriptor"/>
        <import package="javax.management.IntrospectionException"/>
        <import package="javax.management.InvalidAttributeValueException"/>
        <import package="javax.management.MBeanAttributeInfo"/>
        <import package="javax.management.MBeanConstructorInfo"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.MBeanOperationInfo"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.NotificationBroadcaster"/>
        <import package="javax.management.ReflectionException"/>
        <class name="MBeanIntrospector" line="25">
            <type_params>
                <type_param name="M"/>
            </type_params>
            <javadoc line="25">
                An introspector for MBeans of a certain type.  There is one instance
                  of this class for Standard MBeans, and one for every MXBeanMappingFactory;
                  these two cases correspond to the two concrete subclasses of this abstract
                  class.                
                <param>
                    <M>
                      the representation of methods for this kind of MBean:
                      Method for Standard MBeans, ConvertingMethod for MXBeans.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <class name="PerInterfaceMap" line="36">
                <type_params>
                    <type_param name="M"/>
                </type_params>
                <extends class="WeakHashMap">
                    <type_params>
                        <type_param name="Class<?>"/>
                        <type_param name="WeakReference<PerInterface<M>>"/>
                    </type_params>
                </extends>
            </class>
            <method name="getPerInterfaceMap" type="PerInterfaceMap<M>" line="38"/>
            <javadoc line="38">
                The map from interface to PerInterface for this type of MBean.                
            </javadoc>
            <method name="getMBeanInfoMap" type="MBeanInfoMap" line="42"/>
            <javadoc line="42">
                The map from concrete implementation class and interface to
                  MBeanInfo for this type of MBean.                
            </javadoc>
            <method name="getAnalyzer" type="MBeanAnalyzer<M>" line="47"/>
            <javadoc line="47">
                Make an interface analyzer for this type of MBean.                
            </javadoc>
            <method name="isMXBean" type="boolean" line="51"/>
            <javadoc line="51">
                True if MBeans with this kind of introspector are MXBeans.                
            </javadoc>
            <method name="mFrom" type="M" line="55"/>
            <javadoc line="55">
                Find the M corresponding to the given Method.                
            </javadoc>
            <method name="getName" type="String" line="59"/>
            <javadoc line="59">
                Get the name of this method.                
            </javadoc>
            <method name="getGenericReturnType" type="Type" line="63"/>
            <javadoc line="63">
                Get the return type of this method.  This is the return type
                  of a method in a Java interface, so for MXBeans it is the
                  declared Java type, not the mapped Open Type.                
            </javadoc>
            <method name="getGenericParameterTypes" type="Type[]" line="69"/>
            <javadoc line="69">
                Get the parameter types of this method in the Java interface
                  it came from.                
            </javadoc>
            <method name="getSignature" type="String[]" line="74"/>
            <javadoc line="74">
                Get the signature of this method as a caller would have to supply
                  it in MBeanServer.invoke.  For MXBeans, the named types will be
                  the mapped Open Types for the parameters.                
            </javadoc>
            <method name="checkMethod" type="void" line="80"/>
            <javadoc line="80">
                Check that this method is valid.  For example, a method in an
                  MXBean interface is not valid if one of its parameters cannot be
                  mapped to an Open Type.                
            </javadoc>
            <method name="invokeM2" type="Object" line="86"/>
            <javadoc line="86">
                Invoke the method with the given target and arguments.                
                <param>
                    cookie Additional information about the target.  For an
                      MXBean, this is the MXBeanLookup associated with the MXBean.                    
                </param>
            </javadoc>
            <method name="validParameter" type="boolean" line="92"/>
            <javadoc line="92">
                Test whether the given value is valid for the given parameter of this
                  M.                
            </javadoc>
            <method name="getMBeanAttributeInfo" type="MBeanAttributeInfo" line="97"/>
            <javadoc line="97">
                Construct an MBeanAttributeInfo for the given attribute based on the
                  given getter and setter.  One but not both of the getter and setter
                  may be null.                
            </javadoc>
            <method name="getMBeanOperationInfo" type="MBeanOperationInfo" line="103"/>
            <javadoc line="103">
                Construct an MBeanOperationInfo for the given operation based on
                  the M it was derived from.                
            </javadoc>
            <method name="getBasicMBeanDescriptor" type="Descriptor" line="108"/>
            <javadoc line="108">
                Get a Descriptor containing fields that MBeans of this kind will
                  always have.  For example, MXBeans will always have &quot;mxbean=true&quot;.                
            </javadoc>
            <method name="getMBeanDescriptor" type="Descriptor" line="113"/>
            <javadoc line="113">
                Get a Descriptor containing additional fields beyond the ones
                  from getBasicMBeanDescriptor that MBeans whose concrete class
                  is resourceClass will always have.                
            </javadoc>
            <javadoc line="119">
                Get the methods to be analyzed to build the MBean interface.                
            </javadoc>
            <method name="getMethods" type="List<Method>" line="122">
                <params>
                    <param name="mbeanType" type="Class<?>"/>
                </params>
            </method>
            <method name="getPerInterface" type="PerInterface<M>" line="125">
                <params>
                    <param name="mbeanInterface" type="Class<?>"/>
                </params>
                <declaration name="map" type="PerInterfaceMap&lt;M&gt;" line="126"/>
                <scope line="127">
                    <declaration name="wr" type="WeakReference&lt;PerInterface&lt;M&gt;&gt;" line="128"/>
                    <declaration name="pi" type="PerInterface&lt;M&gt;" line="129"/>
                    <scope line="130">
                        <scope line="131">
                            <declaration name="analyzer" type="MBeanAnalyzer&lt;M&gt;" line="132"/>
                            <declaration name="mbeanInfo" type="MBeanInfo" line="133"/>
                        </scope>
                        <scope line="138"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="145">
                Make the MBeanInfo skeleton for the given MBean interface using
                  the given analyzer.  This will never be the MBeanInfo of any real
                  MBean (because the getClassName() must be a concrete class), but
                  its MBeanAttributeInfo[] and MBeanOperationInfo[] can be inserted
                  into such an MBeanInfo, and its Descriptor can be the basis for
                  the MBeanInfo&apos;s Descriptor.                
            </javadoc>
            <method name="makeInterfaceMBeanInfo" type="MBeanInfo" line="153">
                <params>
                    <param name="mbeanInterface" type="Class<?>"/>
                    <param name="analyzer" type="MBeanAnalyzer<M>"/>
                </params>
                <declaration name="maker" type="MBeanInfoMaker" line="154"/>
                <declaration name="description" type="String" line="156"/>
            </method>
            <javadoc line="159">
                True if the given getter and setter are consistent.                
            </javadoc>
            <method name="consistent" type="boolean" line="162">
                <params>
                    <param name="getter" type="M"/>
                    <param name="setter" type="M"/>
                </params>
            </method>
            <javadoc line="165">
                Invoke the given M on the given target with the given args and cookie.
                  Wrap exceptions appropriately.                
            </javadoc>
            <method name="invokeM" type="Object" line="169">
                <params>
                    <param name="m" type="M"/>
                    <param name="target" type="Object"/>
                    <param name="args" type="Object[]"/>
                    <param name="cookie" type="Object"/>
                </params>
                <scope line="170"/>
                <scope line="173"/>
                <scope line="177"/>
            </method>
            <javadoc line="181">
                Invoke the given setter on the given target with the given argument
                  and cookie.  Wrap exceptions appropriately.                
            </javadoc>
            <method name="invokeSetter" type="void" line="185">
                <params>
                    <param name="name" type="String"/>
                    <param name="setter" type="M"/>
                    <param name="target" type="Object"/>
                    <param name="arg" type="Object"/>
                    <param name="cookie" type="Object"/>
                </params>
                <scope line="186"/>
                <scope line="189"/>
                <scope line="192"/>
                <scope line="196"/>
            </method>
            <method name="maybeInvalidParameter" type="void" line="201">
                <params>
                    <param name="name" type="String"/>
                    <param name="setter" type="M"/>
                    <param name="arg" type="Object"/>
                    <param name="cookie" type="Object"/>
                </params>
                <scope line="202">
                    <declaration name="msg" type="String" line="203"/>
                </scope>
            </method>
            <method name="isValidParameter" type="boolean" line="207">
                <params>
                    <param name="m" type="Method"/>
                    <param name="value" type="Object"/>
                    <param name="paramNo" type="int"/>
                </params>
                <declaration name="c" type="Class&lt;?&gt;" line="208"/>
                <scope line="209">
                    <declaration name="a" type="Object" line="210"/>
                </scope>
                <scope line="214"/>
            </method>
            <method name="unwrapInvocationTargetException" type="void" line="218">
                <params>
                    <param name="e" type="InvocationTargetException"/>
                </params>
                <declaration name="t" type="Throwable" line="219"/>
            </method>
            <class name="MBeanInfoMaker" line="224">
                <implements interface="MBeanAnalyzer.MBeanVisitor">
                    <type_params>
                        <type_param name="M"/>
                    </type_params>
                </implements>
                <javadoc line="224">
                    A visitor that constructs the per-interface MBeanInfo.                    
                </javadoc>
                <method name="visitAttribute" type="void" line="228">
                    <params>
                        <param name="attributeName" type="String"/>
                        <param name="getter" type="M"/>
                        <param name="setter" type="M"/>
                    </params>
                    <declaration name="mbai" type="MBeanAttributeInfo" line="229"/>
                </method>
                <method name="visitOperation" type="void" line="232">
                    <params>
                        <param name="operationName" type="String"/>
                        <param name="operation" type="M"/>
                    </params>
                    <declaration name="mboi" type="MBeanOperationInfo" line="233"/>
                </method>
                <javadoc line="236">
                    Make an MBeanInfo based on the attributes and operations
                      found in the interface.                    
                </javadoc>
                <method name="makeMBeanInfo" type="MBeanInfo" line="240">
                    <params>
                        <param name="mbeanInterface" type="Class<?>"/>
                        <param name="description" type="String"/>
                    </params>
                    <declaration name="attrArray" type="MBeanAttributeInfo[]" line="241"/>
                    <declaration name="opArray" type="MBeanOperationInfo[]" line="242"/>
                    <declaration name="interfaceClassName" type="String" line="243"/>
                    <declaration name="classNameDescriptor" type="Descriptor" line="244"/>
                    <declaration name="mbeanDescriptor" type="Descriptor" line="245"/>
                    <declaration name="annotatedDescriptor" type="Descriptor" line="246"/>
                    <declaration name="descriptor" type="Descriptor" line="247"/>
                </method>
                <declaration name="attrs" type="List&lt;MBeanAttributeInfo&gt;" line="250"/>
                <declaration name="ops" type="List&lt;MBeanOperationInfo&gt;" line="251"/>
            </class>
            <class name="MBeanInfoMap" line="253">
                <extends class="WeakHashMap">
                    <type_params>
                        <type_param name="Class<?>"/>
                        <type_param name="WeakHashMap<Class<?>,MBeanInfo>"/>
                    </type_params>
                </extends>
            </class>
            <javadoc line="255">
                Return the MBeanInfo for the given resource, based on the given
                  per-interface data.                
            </javadoc>
            <method name="getMBeanInfo" type="MBeanInfo" line="259">
                <params>
                    <param name="resource" type="Object"/>
                    <param name="perInterface" type="PerInterface<M>"/>
                </params>
                <declaration name="mbi" type="MBeanInfo" line="260"/>
                <declaration name="notifs" type="MBeanNotificationInfo[]" line="261"/>
                <scope line="263"/>
            </method>
            <javadoc line="267">
                Return the basic MBeanInfo for resources of the given class and
                  per-interface data.  This MBeanInfo might not be the final MBeanInfo
                  for instances of the class, because if the class is a
                  NotificationBroadcaster then each instance gets to decide what
                  MBeanNotificationInfo[] to put in its own MBeanInfo.                
            </javadoc>
            <method name="getClassMBeanInfo" type="MBeanInfo" line="274">
                <params>
                    <param name="resourceClass" type="Class<?>"/>
                    <param name="perInterface" type="PerInterface<M>"/>
                </params>
                <declaration name="map" type="MBeanInfoMap" line="275"/>
                <scope line="276">
                    <declaration name="intfMap" type="WeakHashMap&lt;Class&lt;?&gt;,MBeanInfo&gt;" line="277"/>
                    <scope line="278"/>
                    <declaration name="intfClass" type="Class&lt;?&gt;" line="282"/>
                    <declaration name="mbi" type="MBeanInfo" line="283"/>
                    <scope line="284">
                        <declaration name="imbi" type="MBeanInfo" line="285"/>
                        <declaration name="descriptor" type="Descriptor" line="286"/>
                    </scope>
                </scope>
            </method>
            <method name="findNotifications" type="MBeanNotificationInfo[]" line="293">
                <params>
                    <param name="moi" type="Object"/>
                </params>
                <declaration name="mbn" type="MBeanNotificationInfo[]" line="295"/>
                <declaration name="result" type="MBeanNotificationInfo[]" line="297"/>
                <scope line="298">
                    <declaration name="ni" type="MBeanNotificationInfo" line="299"/>
                </scope>
            </method>
            <method name="findConstructors" type="MBeanConstructorInfo[]" line="305">
                <params>
                    <param name="c" type="Class<?>"/>
                </params>
                <declaration name="cons" type="Constructor&lt;?&gt;[]" line="306"/>
                <declaration name="mbc" type="MBeanConstructorInfo[]" line="307"/>
                <scope line="308">
                    <declaration name="descr" type="String" line="309"/>
                </scope>
            </method>
        </class>
    </source>