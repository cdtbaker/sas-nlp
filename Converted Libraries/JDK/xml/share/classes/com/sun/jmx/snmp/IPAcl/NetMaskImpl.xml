<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.IPAcl">
        <import package="com.sun.jmx.defaults.JmxProperties.SNMP_LOGGER"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.io.Serializable"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.security.Principal"/>
        <import package="java.security.acl.Group"/>
        <class name="NetMaskImpl" line="41">
            <extends class="PrincipalImpl"/>
            <implements interface="Group"/>
            <implements interface="Serializable"/>
            <javadoc line="41">
                This class is used to represent a subnet mask (a group of hosts matching the same
                  IP mask).                
                <see>
                    java.security.acl.Group                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="49"/>
            <declaration name="subnet" type="byte[]" line="51"/>
            <declaration name="prefix" type="int" line="52"/>
            <javadoc line="53">
                Constructs an empty group.                
                <exception>
                    UnknownHostException Not implemented                    
                </exception>
            </javadoc>
            <method name="NetMaskImpl" type="constructor" line="57"/>
            <method name="extractSubNet" type="byte[]" line="60">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
                <comment line="75">
                    8 is a byte size. Common to any InetAddress (V4 or V6).                    
                </comment>
                <comment line="103">
                    8 is a byte size. Common to any InetAddress (V4 or V6).                    
                </comment>
                <declaration name="addrLength" type="int" line="61"/>
                <declaration name="subnet" type="byte[]" line="62"/>
                <scope line="63">
                    <declaration name="buff" type="StringBuffer" line="66"/>
                    <scope line="67"/>
                </scope>
                <declaration name="fullyCoveredByte" type="int" line="75"/>
                <scope line="76">
                    <scope line="77"/>
                </scope>
                <scope line="84">
                    <scope line="85"/>
                </scope>
                <declaration name="partialyCoveredIndex" type="int" line="91"/>
                <scope line="92"/>
                <declaration name="toDeal" type="byte" line="96"/>
                <scope line="97"/>
                <declaration name="nbbits" type="int" line="103"/>
                <declaration name="subnetSize" type="int" line="104"/>
                <scope line="111"/>
                <declaration name="mask" type="byte" line="116"/>
                <scope line="117"/>
                <scope line="120"/>
                <declaration name="maskedValue" type="byte" line="125"/>
                <scope line="127"/>
                <scope line="132"/>
                <scope line="136">
                    <scope line="139"/>
                </scope>
                <scope line="145">
                    <scope line="147"/>
                </scope>
            </method>
            <javadoc line="155">
                Constructs a group using the specified subnet mask.
                  THIS ALGORITHM IS V4 and V6 compatible.                
                <exception>
                    UnknownHostException if the subnet mask cann&apos;t be built.                    
                </exception>
            </javadoc>
            <method name="NetMaskImpl" type="constructor" line="161">
                <params>
                    <param name="a" type="String"/>
                    <param name="prefix" type="int"/>
                </params>
            </method>
            <javadoc line="167">
                Adds the specified member to the group.                
                <param>
                    p the principal to add to this group.                    
                </param>
                <return>
                    true if the member was successfully added, false if the
                      principal was already a member.                    
                </return>
            </javadoc>
            <method name="addMember" type="boolean" line="174">
                <params>
                    <param name="p" type="Principal"/>
                </params>
                <comment line="176">
                    we don&apos;t need to add members because the ip address is a subnet mask                    
                </comment>
            </method>
            <method name="hashCode" type="int" line="179"/>
            <javadoc line="183">
                Compares this group to the specified object. Returns true if the object
                  passed in matches the group represented.                
                <param>
                    p the object to compare with.                    
                </param>
                <return>
                    true if the object passed in matches the subnet mask,
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="191">
                <params>
                    <param name="p" type="Object"/>
                </params>
                <scope line="192">
                    <declaration name="received" type="PrincipalImpl" line="193"/>
                    <declaration name="addr" type="InetAddress" line="194"/>
                    <scope line="195"/>
                    <declaration name="recAddr" type="byte[]" line="199"/>
                    <scope line="200">
                        <scope line="201"/>
                        <scope line="209">
                            <scope line="210"/>
                        </scope>
                    </scope>
                    <scope line="217"/>
                </scope>
            </method>
            <javadoc line="225">
                Returns true if the passed principal is a member of the group.                
                <param>
                    p the principal whose membership is to be checked.                    
                </param>
                <return>
                    true if the principal is a member of this group, false otherwise.                    
                </return>
            </javadoc>
            <method name="isMember" type="boolean" line="231">
                <params>
                    <param name="p" type="Principal"/>
                </params>
            </method>
            <javadoc line="236">
                Returns an enumeration which contains the subnet mask.                
                <return>
                    an enumeration which contains the subnet mask.                    
                </return>
            </javadoc>
            <method name="members" type="Enumeration<? extends Principal>" line="241">
                <declaration name="v" type="Vector&lt;Principal&gt;" line="242"/>
            </method>
            <javadoc line="247">
                Removes the specified member from the group. (Not implemented)                
                <param>
                    p the principal to remove from this group.                    
                </param>
                <return>
                    allways return true.                    
                </return>
            </javadoc>
            <method name="removeMember" type="boolean" line="253">
                <params>
                    <param name="p" type="Principal"/>
                </params>
            </method>
            <javadoc line="257">
                Prints a string representation of this group.                
                <return>
                    a string representation of this group.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="262"/>
        </class>
    </source>