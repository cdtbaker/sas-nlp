<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.IPAcl">
        <import package="com.sun.jmx.defaults.JmxProperties.SNMP_LOGGER"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.io.Serializable"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.security.Principal"/>
        <import package="java.security.acl.Group"/>
        <class name="NetMaskImpl" line="11">
            <extends class="PrincipalImpl"/>
            <implements interface="Group"/>
            <implements interface="Serializable"/>
            <javadoc line="11">
                This class is used to represent a subnet mask (a group of hosts matching the same
                  IP mask).                
                <see>
                    java.security.acl.Group                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="17"/>
            <declaration name="subnet" type="byte[]" line="18"/>
            <declaration name="prefix" type="int" line="19"/>
            <javadoc line="20">
                Constructs an empty group.                
                <exception>
                    UnknownHostException Not implemented                    
                </exception>
            </javadoc>
            <method name="NetMaskImpl" type="constructor" line="24"/>
            <method name="extractSubNet" type="byte[]" line="26">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
                <declaration name="addrLength" type="int" line="27"/>
                <declaration name="subnet" type="byte[]" line="28"/>
                <scope line="29">
                    <declaration name="buff" type="StringBuffer" line="31"/>
                    <scope line="32"/>
                </scope>
                <declaration name="fullyCoveredByte" type="int" line="37"/>
                <scope line="38">
                    <scope line="39"/>
                </scope>
                <scope line="45">
                    <scope line="46"/>
                </scope>
                <declaration name="partialyCoveredIndex" type="int" line="51"/>
                <scope line="52"/>
                <declaration name="toDeal" type="byte" line="55"/>
                <scope line="56"/>
                <declaration name="nbbits" type="int" line="59"/>
                <declaration name="subnetSize" type="int" line="60"/>
                <scope line="63"/>
                <declaration name="mask" type="byte" line="66"/>
                <scope line="67"/>
                <scope line="70"/>
                <declaration name="maskedValue" type="byte" line="73"/>
                <scope line="74"/>
                <scope line="78"/>
                <scope line="81">
                    <scope line="83"/>
                </scope>
                <scope line="87">
                    <scope line="89"/>
                </scope>
            </method>
            <javadoc line="95">
                Constructs a group using the specified subnet mask.
                  THIS ALGORITHM IS V4 and V6 compatible.                
                <exception>
                    UnknownHostException if the subnet mask cann't be built.                    
                </exception>
            </javadoc>
            <method name="NetMaskImpl" type="constructor" line="100">
                <params>
                    <param name="a" type="String"/>
                    <param name="prefix" type="int"/>
                </params>
            </method>
            <javadoc line="105">
                Adds the specified member to the group.                
                <param>
                    p the principal to add to this group.                    
                </param>
                <return>
                    true if the member was successfully added, false if the
                      principal was already a member.                    
                </return>
            </javadoc>
            <method name="addMember" type="boolean" line="111">
                <params>
                    <param name="p" type="Principal"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="114"/>
            <javadoc line="117">
                Compares this group to the specified object. Returns true if the object
                  passed in matches the group represented.                
                <param>
                    p the object to compare with.                    
                </param>
                <return>
                    true if the object passed in matches the subnet mask,
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="124">
                <params>
                    <param name="p" type="Object"/>
                </params>
                <scope line="125">
                    <declaration name="received" type="PrincipalImpl" line="126"/>
                    <declaration name="addr" type="InetAddress" line="127"/>
                    <scope line="128"/>
                    <declaration name="recAddr" type="byte[]" line="131"/>
                    <scope line="132">
                        <scope line="133"/>
                        <scope line="137">
                            <scope line="138"/>
                        </scope>
                    </scope>
                    <scope line="144"/>
                </scope>
            </method>
            <javadoc line="151">
                Returns true if the passed principal is a member of the group.                
                <param>
                    p the principal whose membership is to be checked.                    
                </param>
                <return>
                    true if the principal is a member of this group, false otherwise.                    
                </return>
            </javadoc>
            <method name="isMember" type="boolean" line="156">
                <params>
                    <param name="p" type="Principal"/>
                </params>
            </method>
            <javadoc line="160">
                Returns an enumeration which contains the subnet mask.                
                <return>
                    an enumeration which contains the subnet mask.                    
                </return>
            </javadoc>
            <method name="members" type="Enumeration<? extends Principal>" line="164">
                <declaration name="v" type="Vector&lt;Principal&gt;" line="165"/>
            </method>
            <javadoc line="169">
                Removes the specified member from the group. (Not implemented)                
                <param>
                    p the principal to remove from this group.                    
                </param>
                <return>
                    allways return true.                    
                </return>
            </javadoc>
            <method name="removeMember" type="boolean" line="174">
                <params>
                    <param name="p" type="Principal"/>
                </params>
            </method>
            <javadoc line="177">
                Prints a string representation of this group.                
                <return>
                    a string representation of this group.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="181"/>
        </class>
    </source>