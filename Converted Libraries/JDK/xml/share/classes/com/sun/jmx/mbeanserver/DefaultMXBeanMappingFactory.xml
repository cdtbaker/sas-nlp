<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="com.sun.jmx.mbeanserver.MXBeanIntrospector.typeName"/>
        <import package="javax.management.openmbean.SimpleType"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <import package="java.beans.ConstructorProperties"/>
        <import package="java.io.InvalidObjectException"/>
        <import package="java.lang.annotation.ElementType"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.Array"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.Field"/>
        <import package="java.lang.reflect.GenericArrayType"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.lang.reflect.ParameterizedType"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.lang.reflect.Type"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.BitSet"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.SortedMap"/>
        <import package="java.util.SortedSet"/>
        <import package="java.util.TreeSet"/>
        <import package="java.util.WeakHashMap"/>
        <import package="javax.management.JMX"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.openmbean.ArrayType"/>
        <import package="javax.management.openmbean.CompositeData"/>
        <import package="javax.management.openmbean.CompositeDataInvocationHandler"/>
        <import package="javax.management.openmbean.CompositeDataSupport"/>
        <import package="javax.management.openmbean.CompositeDataView"/>
        <import package="javax.management.openmbean.CompositeType"/>
        <import package="javax.management.openmbean.OpenDataException"/>
        <import package="javax.management.openmbean.OpenType"/>
        <import package="javax.management.openmbean.SimpleType"/>
        <import package="javax.management.openmbean.TabularData"/>
        <import package="javax.management.openmbean.TabularDataSupport"/>
        <import package="javax.management.openmbean.TabularType"/>
        <class name="DefaultMXBeanMappingFactory" line="46">
            <extends class="MXBeanMappingFactory"/>
            <javadoc line="46">
                &lt;p&gt;A converter between Java types and the limited set of classes
                  defined by Open MBeans.&lt;/p&gt;
                  &lt;p&gt;A Java type is an instance of java.lang.reflect.Type.  For our
                  purposes, it is either a Class, such as String.class or int.class;
                  or a ParameterizedType, such as List&lt;String&gt; or Map&lt;Integer,
                  String[]&gt;.  On J2SE 1.4 and earlier, it can only be a Class.&lt;/p&gt;
                  &lt;p&gt;Each Type is associated with an DefaultMXBeanMappingFactory.  The
                  DefaultMXBeanMappingFactory defines an OpenType corresponding to the Type, plus a
                  Java class corresponding to the OpenType.  For example:&lt;/p&gt;
                  &lt;pre&gt;
                  Type                     Open class     OpenType
                  ----                     ----------     --------
                  Integer                Integer        SimpleType.INTEGER
                  int                            int            SimpleType.INTEGER
                  Integer[]              Integer[]      ArrayType(1, SimpleType.INTEGER)
                  int[]                  Integer[]      ArrayType(SimpleType.INTEGER, true)
                  String[][]             String[][]     ArrayType(2, SimpleType.STRING)
                  List&lt;String&gt;                   String[]       ArrayType(1, SimpleType.STRING)
                  ThreadState (an Enum)    String         SimpleType.STRING
                  Map&lt;Integer, String[]&gt;   TabularData          TabularType(
                  CompositeType(
                  {&quot;key&quot;, SimpleType.INTEGER},
                  {&quot;value&quot;,
                  ArrayType(1,
                  SimpleType.STRING)}),
                  indexNames={&quot;key&quot;})
                  &lt;/pre&gt;
                  &lt;p&gt;Apart from simple types, arrays, and collections, Java types are
                  converted through introspection into CompositeType.  The Java type
                  must have at least one getter (method such as &quot;int getSize()&quot; or
                  &quot;boolean isBig()&quot;), and we must be able to deduce how to
                  reconstruct an instance of the Java class from the values of the
                  getters using one of various heuristics.&lt;/p&gt;                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <class name="NonNullMXBeanMapping" line="83">
                <extends class="MXBeanMapping"/>
                <method name="NonNullMXBeanMapping" type="constructor" line="84">
                    <params>
                        <param name="javaType" type="Type"/>
                        <param name="openType" type="OpenType<?>"/>
                    </params>
                </method>
                <method name="fromOpenValue" type="Object" line="87">
                    <params>
                        <param name="openValue" type="Object"/>
                    </params>
                </method>
                <method name="toOpenValue" type="Object" line="91">
                    <params>
                        <param name="javaValue" type="Object"/>
                    </params>
                </method>
                <method name="fromNonNullOpenValue" type="Object" line="95"/>
                <method name="toNonNullOpenValue" type="Object" line="96"/>
                <javadoc line="97">
                    &lt;p&gt;True if and only if this MXBeanMapping&apos;s toOpenValue and
                      fromOpenValue methods are the identity function.&lt;/p&gt;                    
                </javadoc>
                <method name="isIdentity" type="boolean" line="101"/>
            </class>
            <method name="isIdentity" type="boolean" line="105">
                <params>
                    <param name="mapping" type="MXBeanMapping"/>
                </params>
            </method>
            <class name="Mappings" line="108">
                <extends class="WeakHashMap">
                    <type_params>
                        <type_param name="Type"/>
                        <type_param name="WeakReference<MXBeanMapping>"/>
                    </type_params>
                </extends>
            </class>
            <declaration name="mappings" type="Mappings" line="110"/>
            <declaration name="permanentMappings" type="List&lt;MXBeanMapping&gt;" line="111"/>
            <javadoc line="111">
                Following List simply serves to keep a reference to predefined
                  MXBeanMappings so they don&apos;t get garbage collected.                
            </javadoc>
            <method name="getMapping" type="MXBeanMapping" line="116">
                <params>
                    <param name="type" type="Type"/>
                </params>
                <declaration name="wr" type="WeakReference&lt;MXBeanMapping&gt;" line="117"/>
            </method>
            <method name="putMapping" type="void" line="120">
                <params>
                    <param name="type" type="Type"/>
                    <param name="mapping" type="MXBeanMapping"/>
                </params>
                <declaration name="wr" type="WeakReference&lt;MXBeanMapping&gt;" line="121"/>
            </method>
            <method name="putPermanentMapping" type="void" line="124">
                <params>
                    <param name="type" type="Type"/>
                    <param name="mapping" type="MXBeanMapping"/>
                </params>
            </method>
            <scope line="128">
                <declaration name="simpleTypes" type="OpenType&lt;?&gt;[]" line="129"/>
                <scope line="130">
                    <declaration name="t" type="OpenType&lt;?&gt;" line="131"/>
                    <declaration name="c" type="Class&lt;?&gt;" line="132"/>
                    <scope line="133"/>
                    <scope line="136"/>
                    <declaration name="mapping" type="MXBeanMapping" line="139"/>
                    <scope line="141">
                        <scope line="142">
                            <declaration name="typeField" type="Field" line="143"/>
                            <declaration name="primitiveType" type="Class&lt;?&gt;" line="144"/>
                            <declaration name="primitiveMapping" type="MXBeanMapping" line="145"/>
                            <scope line="147">
                                <declaration name="primitiveArrayType" type="Class&lt;?&gt;" line="148"/>
                                <declaration name="primitiveArrayOpenType" type="OpenType&lt;?&gt;" line="149"/>
                                <declaration name="primitiveArrayMapping" type="MXBeanMapping" line="150"/>
                            </scope>
                        </scope>
                        <scope line="154"/>
                        <scope line="156"/>
                    </scope>
                </scope>
            </scope>
            <javadoc line="162">
                Get the converter for the given Java type, creating it if necessary.                
            </javadoc>
            <method name="mappingForType" type="MXBeanMapping" line="165">
                <params>
                    <param name="objType" type="Type"/>
                    <param name="factory" type="MXBeanMappingFactory"/>
                </params>
                <scope line="166"/>
                <declaration name="mapping" type="MXBeanMapping" line="169"/>
                <scope line="173"/>
                <scope line="176"/>
                <scope line="179"/>
            </method>
            <method name="makeMapping" type="MXBeanMapping" line="185">
                <params>
                    <param name="objType" type="Type"/>
                    <param name="factory" type="MXBeanMappingFactory"/>
                </params>
                <scope line="186">
                    <declaration name="componentType" type="Type" line="187"/>
                </scope>
                <scope line="190">
                    <declaration name="objClass" type="Class&lt;?&gt;" line="191"/>
                    <scope line="192"/>
                    <scope line="195">
                        <declaration name="componentType" type="Type" line="196"/>
                    </scope>
                    <scope line="199"/>
                    <scope line="202"/>
                </scope>
                <scope line="206"/>
            </method>
            <method name="makeEnumMapping" type="MXBeanMapping" line="211">
                <params>
                    <param name="enumClass" type="Class<?>"/>
                    <param name="fake" type="Class<T>"/>
                </params>
            </method>
            <method name="makeArrayOrCollectionMapping" type="MXBeanMapping" line="214">
                <params>
                    <param name="collectionType" type="Type"/>
                    <param name="elementType" type="Type"/>
                    <param name="factory" type="MXBeanMappingFactory"/>
                </params>
                <declaration name="elementMapping" type="MXBeanMapping" line="215"/>
                <declaration name="elementOpenType" type="OpenType&lt;?&gt;" line="216"/>
                <declaration name="openType" type="ArrayType&lt;?&gt;" line="217"/>
                <declaration name="elementOpenClass" type="Class&lt;?&gt;" line="218"/>
                <declaration name="openArrayClass" type="Class&lt;?&gt;" line="219"/>
                <declaration name="openArrayClassName" type="String" line="220"/>
                <scope line="223"/>
                <scope line="226"/>
                <scope line="229"/>
                <scope line="232">
                    <scope line="233"/>
                    <scope line="236"/>
                </scope>
            </method>
            <declaration name="keyArray" type="String[]" line="241"/>
            <declaration name="keyValueArray" type="String[]" line="242"/>
            <method name="makeTabularMapping" type="MXBeanMapping" line="243">
                <params>
                    <param name="objType" type="Type"/>
                    <param name="sortedMap" type="boolean"/>
                    <param name="keyType" type="Type"/>
                    <param name="valueType" type="Type"/>
                    <param name="factory" type="MXBeanMappingFactory"/>
                </params>
                <declaration name="objTypeName" type="String" line="244"/>
                <declaration name="keyMapping" type="MXBeanMapping" line="245"/>
                <declaration name="valueMapping" type="MXBeanMapping" line="246"/>
                <declaration name="keyOpenType" type="OpenType&lt;?&gt;" line="247"/>
                <declaration name="valueOpenType" type="OpenType&lt;?&gt;" line="248"/>
                <declaration name="rowType" type="CompositeType" line="249"/>
                <declaration name="tabularType" type="TabularType" line="250"/>
            </method>
            <method name="makeParameterizedTypeMapping" type="MXBeanMapping" line="253">
                <params>
                    <param name="objType" type="ParameterizedType"/>
                    <param name="factory" type="MXBeanMappingFactory"/>
                </params>
                <declaration name="rawType" type="Type" line="254"/>
                <scope line="255">
                    <declaration name="c" type="Class&lt;?&gt;" line="256"/>
                    <scope line="257">
                        <declaration name="actuals" type="Type[]" line="258"/>
                    </scope>
                    <scope line="263">
                        <declaration name="sortedMap" type="boolean" line="264"/>
                        <scope line="265">
                            <declaration name="actuals" type="Type[]" line="266"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="makeMXBeanRefMapping" type="MXBeanMapping" line="275">
                <params>
                    <param name="t" type="Type"/>
                </params>
            </method>
            <method name="makeCompositeMapping" type="MXBeanMapping" line="278">
                <params>
                    <param name="c" type="Class<?>"/>
                    <param name="factory" type="MXBeanMappingFactory"/>
                </params>
                <declaration name="gcInfoHack" type="boolean" line="279"/>
                <declaration name="methods" type="List&lt;Method&gt;" line="280"/>
                <declaration name="getterMap" type="SortedMap&lt;String,Method&gt;" line="281"/>
                <scope line="282">
                    <declaration name="propertyName" type="String" line="283"/>
                    <declaration name="old" type="Method" line="286"/>
                    <scope line="287">
                        <declaration name="msg" type="String" line="288"/>
                    </scope>
                </scope>
                <declaration name="nitems" type="int" line="292"/>
                <scope line="293"/>
                <declaration name="getters" type="Method[]" line="296"/>
                <declaration name="itemNames" type="String[]" line="297"/>
                <declaration name="openTypes" type="OpenType&lt;?&gt;[]" line="298"/>
                <declaration name="i" type="int" line="299"/>
                <scope line="300">
                    <declaration name="getter" type="Method" line="302"/>
                    <declaration name="retType" type="Type" line="304"/>
                </scope>
                <declaration name="compositeType" type="CompositeType" line="308"/>
            </method>
            <class name="IdentityMapping" line="311">
                <extends class="NonNullMXBeanMapping"/>
                <method name="IdentityMapping" type="constructor" line="312">
                    <params>
                        <param name="targetType" type="Type"/>
                        <param name="openType" type="OpenType<?>"/>
                    </params>
                </method>
                <method name="isIdentity" type="boolean" line="315"/>
                <method name="fromNonNullOpenValue" type="Object" line="318">
                    <params>
                        <param name="openValue" type="Object"/>
                    </params>
                </method>
                <method name="toNonNullOpenValue" type="Object" line="321">
                    <params>
                        <param name="javaValue" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="EnumMapping" line="325">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <extends class="NonNullMXBeanMapping"/>
                <method name="EnumMapping" type="constructor" line="326">
                    <params>
                        <param name="enumClass" type="Class<T>"/>
                    </params>
                </method>
                <method name="toNonNullOpenValue" type="Object" line="330">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <method name="fromNonNullOpenValue" type="T" line="333">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                    <scope line="334"/>
                    <scope line="337"/>
                </method>
                <declaration name="enumClass" type="Class&lt;T&gt;" line="341"/>
            </class>
            <class name="ArrayMapping" line="343">
                <extends class="NonNullMXBeanMapping"/>
                <method name="ArrayMapping" type="constructor" line="344">
                    <params>
                        <param name="targetType" type="Type"/>
                        <param name="openArrayType" type="ArrayType<?>"/>
                        <param name="openArrayClass" type="Class<?>"/>
                        <param name="elementMapping" type="MXBeanMapping"/>
                    </params>
                </method>
                <method name="toNonNullOpenValue" type="Object" line="348">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                    <declaration name="valueArray" type="Object[]" line="349"/>
                    <declaration name="len" type="int" line="350"/>
                    <declaration name="openArray" type="Object[]" line="351"/>
                </method>
                <method name="fromNonNullOpenValue" type="Object" line="355">
                    <params>
                        <param name="openValue" type="Object"/>
                    </params>
                    <declaration name="openArray" type="Object[]" line="356"/>
                    <declaration name="javaType" type="Type" line="357"/>
                    <declaration name="valueArray" type="Object[]" line="358"/>
                    <declaration name="componentType" type="Type" line="359"/>
                    <scope line="360"/>
                    <scope line="363"/>
                    <scope line="366"/>
                </method>
                <method name="checkReconstructible" type="void" line="373"/>
                <declaration name="elementMapping" type="MXBeanMapping" line="376"/>
                <javadoc line="376">
                    DefaultMXBeanMappingFactory for the elements of this array.  If this is an
                      array of arrays, the converter converts the second-level arrays,
                      not the deepest elements.                    
                </javadoc>
            </class>
            <class name="CollectionMapping" line="383">
                <extends class="NonNullMXBeanMapping"/>
                <method name="CollectionMapping" type="constructor" line="384">
                    <params>
                        <param name="targetType" type="Type"/>
                        <param name="openArrayType" type="ArrayType<?>"/>
                        <param name="openArrayClass" type="Class<?>"/>
                        <param name="elementMapping" type="MXBeanMapping"/>
                    </params>
                    <declaration name="raw" type="Type" line="387"/>
                    <declaration name="c" type="Class&lt;?&gt;" line="388"/>
                    <declaration name="collC" type="Class&lt;?&gt;" line="389"/>
                    <scope line="393"/>
                </method>
                <method name="toNonNullOpenValue" type="Object" line="399">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                    <declaration name="valueCollection" type="Collection&lt;?&gt;" line="400"/>
                    <scope line="401">
                        <declaration name="comparator" type="Comparator&lt;?&gt;" line="402"/>
                        <scope line="403">
                            <declaration name="msg" type="String" line="404"/>
                        </scope>
                    </scope>
                    <declaration name="openArray" type="Object[]" line="408"/>
                    <declaration name="i" type="int" line="409"/>
                </method>
                <method name="fromNonNullOpenValue" type="Object" line="413">
                    <params>
                        <param name="openValue" type="Object"/>
                    </params>
                    <declaration name="openArray" type="Object[]" line="414"/>
                    <declaration name="valueCollection" type="Collection&lt;Object&gt;" line="415"/>
                    <scope line="416"/>
                    <scope line="419"/>
                    <scope line="422">
                        <declaration name="value" type="Object" line="423"/>
                        <scope line="424">
                            <declaration name="msg" type="String" line="425"/>
                        </scope>
                    </scope>
                </method>
                <method name="checkReconstructible" type="void" line="431"/>
                <declaration name="collectionClass" type="Class&lt;? extends Collection&lt;?&gt;&gt;" line="434"/>
                <declaration name="elementMapping" type="MXBeanMapping" line="435"/>
            </class>
            <class name="MXBeanRefMapping" line="437">
                <extends class="NonNullMXBeanMapping"/>
                <method name="MXBeanRefMapping" type="constructor" line="438">
                    <params>
                        <param name="intf" type="Type"/>
                    </params>
                </method>
                <method name="toNonNullOpenValue" type="Object" line="441">
                    <params>
                        <param name="javaValue" type="Object"/>
                    </params>
                    <declaration name="lookup" type="MXBeanLookup" line="442"/>
                    <declaration name="name" type="ObjectName" line="443"/>
                </method>
                <method name="fromNonNullOpenValue" type="Object" line="447">
                    <params>
                        <param name="openValue" type="Object"/>
                    </params>
                    <declaration name="lookup" type="MXBeanLookup" line="448"/>
                    <declaration name="name" type="ObjectName" line="449"/>
                    <declaration name="mxbean" type="Object" line="450"/>
                    <scope line="451">
                        <declaration name="msg" type="String" line="452"/>
                    </scope>
                </method>
                <method name="lookupNotNull" type="MXBeanLookup" line="457">
                    <params>
                        <param name="excClass" type="Class<T>"/>
                    </params>
                    <declaration name="lookup" type="MXBeanLookup" line="458"/>
                    <scope line="459">
                        <declaration name="msg" type="String" line="460"/>
                        <declaration name="exc" type="T" line="461"/>
                        <scope line="462">
                            <declaration name="con" type="Constructor&lt;T&gt;" line="463"/>
                        </scope>
                        <scope line="466"/>
                    </scope>
                </method>
            </class>
            <class name="TabularMapping" line="474">
                <extends class="NonNullMXBeanMapping"/>
                <method name="TabularMapping" type="constructor" line="475">
                    <params>
                        <param name="targetType" type="Type"/>
                        <param name="sortedMap" type="boolean"/>
                        <param name="tabularType" type="TabularType"/>
                        <param name="keyConverter" type="MXBeanMapping"/>
                        <param name="valueConverter" type="MXBeanMapping"/>
                    </params>
                </method>
                <method name="toNonNullOpenValue" type="Object" line="481">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                    <declaration name="valueMap" type="Map&lt;Object,Object&gt;" line="482"/>
                    <scope line="483">
                        <declaration name="comparator" type="Comparator&lt;?&gt;" line="484"/>
                        <scope line="485">
                            <declaration name="msg" type="String" line="486"/>
                        </scope>
                    </scope>
                    <declaration name="tabularType" type="TabularType" line="490"/>
                    <declaration name="table" type="TabularData" line="491"/>
                    <declaration name="rowType" type="CompositeType" line="492"/>
                    <scope line="493">
                        <declaration name="openKey" type="Object" line="494"/>
                        <declaration name="openValue" type="Object" line="495"/>
                        <declaration name="row" type="CompositeData" line="496"/>
                    </scope>
                </method>
                <method name="fromNonNullOpenValue" type="Object" line="502">
                    <params>
                        <param name="openValue" type="Object"/>
                    </params>
                    <declaration name="table" type="TabularData" line="503"/>
                    <declaration name="rows" type="Collection&lt;CompositeData&gt;" line="504"/>
                    <declaration name="valueMap" type="Map&lt;Object,Object&gt;" line="505"/>
                    <scope line="506">
                        <declaration name="key" type="Object" line="507"/>
                        <declaration name="value" type="Object" line="508"/>
                        <scope line="509">
                            <declaration name="msg" type="String" line="510"/>
                        </scope>
                    </scope>
                </method>
                <method name="checkReconstructible" type="void" line="516"/>
                <declaration name="sortedMap" type="boolean" line="520"/>
                <declaration name="keyMapping" type="MXBeanMapping" line="521"/>
                <declaration name="valueMapping" type="MXBeanMapping" line="522"/>
            </class>
            <class name="CompositeMapping" line="524">
                <extends class="NonNullMXBeanMapping"/>
                <method name="CompositeMapping" type="constructor" line="525">
                    <params>
                        <param name="targetClass" type="Class<?>"/>
                        <param name="compositeType" type="CompositeType"/>
                        <param name="itemNames" type="String[]"/>
                        <param name="getters" type="Method[]"/>
                        <param name="factory" type="MXBeanMappingFactory"/>
                    </params>
                    <scope line="531">
                        <declaration name="retType" type="Type" line="532"/>
                    </scope>
                </method>
                <method name="toNonNullOpenValue" type="Object" line="536">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                    <declaration name="ct" type="CompositeType" line="537"/>
                    <declaration name="values" type="Object[]" line="540"/>
                    <scope line="541">
                        <scope line="542">
                            <declaration name="got" type="Object" line="543"/>
                        </scope>
                        <scope line="546"/>
                    </scope>
                </method>
                <javadoc line="552">
                    Determine how to convert back from the CompositeData into
                      the original Java type.  For a type that is not reconstructible,
                      this method will fail every time, and will throw the right
                      exception.                    
                </javadoc>
                <method name="makeCompositeBuilder" type="void" line="558">
                    <declaration name="targetClass" type="Class&lt;?&gt;" line="560"/>
                    <declaration name="builders" type="CompositeBuilder[][]" line="561"/>
                    <declaration name="foundBuilder" type="CompositeBuilder" line="562"/>
                    <declaration name="whyNots" type="StringBuilder" line="563"/>
                    <declaration name="possibleCause" type="Throwable" line="564"/>
                    <scope line="565">
                        <scope line="566">
                            <declaration name="builder" type="CompositeBuilder" line="567"/>
                            <declaration name="whyNot" type="String" line="568"/>
                            <scope line="569"/>
                            <declaration name="cause" type="Throwable" line="573"/>
                            <scope line="575"/>
                        </scope>
                    </scope>
                    <scope line="582">
                        <declaration name="msg" type="String" line="583"/>
                    </scope>
                </method>
                <method name="checkReconstructible" type="void" line="589"/>
                <method name="fromNonNullOpenValue" type="Object" line="592">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <declaration name="itemNames" type="String[]" line="596"/>
                <declaration name="getters" type="Method[]" line="597"/>
                <declaration name="getterMappings" type="MXBeanMapping[]" line="598"/>
                <declaration name="compositeBuilder" type="CompositeBuilder" line="599"/>
            </class>
            <class name="CompositeBuilder" line="601">
                <javadoc line="601">
                    Converts from a CompositeData to an instance of the targetClass.                    
                </javadoc>
                <method name="CompositeBuilder" type="constructor" line="605">
                    <params>
                        <param name="targetClass" type="Class<?>"/>
                        <param name="itemNames" type="String[]"/>
                    </params>
                </method>
                <method name="getTargetClass" type="Class<?>" line="609"/>
                <method name="getItemNames" type="String[]" line="612"/>
                <method name="applicable" type="String" line="615"/>
                <javadoc line="615">
                    If the subclass is appropriate for targetClass, then the
                      method returns null.  If the subclass is not appropriate,
                      then the method returns an explanation of why not.  If the
                      subclass should be appropriate but there is a problem,
                      then the method throws InvalidObjectException.                    
                </javadoc>
                <javadoc line="623">
                    If the subclass returns an explanation of why it is not applicable,
                      it can additionally indicate an exception with details.  This is
                      potentially confusing, because the real problem could be that one
                      of the other subclasses is supposed to be applicable but isn&apos;t.
                      But the advantage of less information loss probably outweighs the
                      disadvantage of possible confusion.                    
                </javadoc>
                <method name="possibleCause" type="Throwable" line="631"/>
                <method name="fromCompositeData" type="Object" line="634"/>
                <declaration name="targetClass" type="Class&lt;?&gt;" line="635"/>
                <declaration name="itemNames" type="String[]" line="636"/>
            </class>
            <class name="CompositeBuilderViaFrom" line="638">
                <extends class="CompositeBuilder"/>
                <javadoc line="638">
                    Builder for when the target class has a method &quot;public static
                      from(CompositeData)&quot;.                    
                </javadoc>
                <method name="CompositeBuilderViaFrom" type="constructor" line="643">
                    <params>
                        <param name="targetClass" type="Class<?>"/>
                        <param name="itemNames" type="String[]"/>
                    </params>
                </method>
                <method name="applicable" type="String" line="646">
                    <params>
                        <param name="getters" type="Method[]"/>
                    </params>
                    <declaration name="targetClass" type="Class&lt;?&gt;" line="647"/>
                    <scope line="648">
                        <declaration name="fromMethod" type="Method" line="649"/>
                        <scope line="650">
                            <declaration name="msg" type="String" line="651"/>
                        </scope>
                        <scope line="654">
                            <declaration name="msg" type="String" line="655"/>
                        </scope>
                    </scope>
                    <scope line="661"/>
                    <scope line="664"/>
                </method>
                <method name="fromCompositeData" type="Object" line="668">
                    <params>
                        <param name="cd" type="CompositeData"/>
                        <param name="itemNames" type="String[]"/>
                        <param name="converters" type="MXBeanMapping[]"/>
                    </params>
                    <scope line="669"/>
                    <scope line="672">
                        <declaration name="msg" type="String" line="673"/>
                    </scope>
                </method>
                <declaration name="fromMethod" type="Method" line="677"/>
            </class>
            <class name="CompositeBuilderCheckGetters" line="679">
                <extends class="CompositeBuilder"/>
                <javadoc line="679">
                    This builder never actually returns success.  It simply serves
                      to check whether the other builders in the same group have any
                      chance of success.  If any getter in the targetClass returns
                      a type that we don&apos;t know how to reconstruct, then we will
                      not be able to make a builder, and there is no point in repeating
                      the error about the problematic getter as many times as there are
                      candidate builders.  Instead, the &quot;applicable&quot; method will return
                      an explanatory string, and the other builders will be skipped.
                      If all the getters are OK, then the &quot;applicable&quot; method will return
                      an empty string and the other builders will be tried.                    
                </javadoc>
                <method name="CompositeBuilderCheckGetters" type="constructor" line="692">
                    <params>
                        <param name="targetClass" type="Class<?>"/>
                        <param name="itemNames" type="String[]"/>
                        <param name="getterConverters" type="MXBeanMapping[]"/>
                    </params>
                </method>
                <method name="applicable" type="String" line="696">
                    <params>
                        <param name="getters" type="Method[]"/>
                    </params>
                    <scope line="697">
                        <scope line="698"/>
                        <scope line="701"/>
                    </scope>
                </method>
                <method name="possibleCause" type="Throwable" line="708"/>
                <method name="fromCompositeData" type="Object" line="711">
                    <params>
                        <param name="cd" type="CompositeData"/>
                        <param name="itemNames" type="String[]"/>
                        <param name="converters" type="MXBeanMapping[]"/>
                    </params>
                </method>
                <declaration name="getterConverters" type="MXBeanMapping[]" line="714"/>
                <declaration name="possibleCause" type="Throwable" line="715"/>
            </class>
            <class name="CompositeBuilderViaSetters" line="717">
                <extends class="CompositeBuilder"/>
                <javadoc line="717">
                    Builder for when the target class has a setter for every getter.                    
                </javadoc>
                <method name="CompositeBuilderViaSetters" type="constructor" line="721">
                    <params>
                        <param name="targetClass" type="Class<?>"/>
                        <param name="itemNames" type="String[]"/>
                    </params>
                </method>
                <method name="applicable" type="String" line="724">
                    <params>
                        <param name="getters" type="Method[]"/>
                    </params>
                    <scope line="725">
                        <declaration name="c" type="Constructor&lt;?&gt;" line="726"/>
                    </scope>
                    <scope line="728"/>
                    <declaration name="setters" type="Method[]" line="731"/>
                    <scope line="732">
                        <declaration name="getter" type="Method" line="733"/>
                        <declaration name="returnType" type="Class&lt;?&gt;" line="734"/>
                        <declaration name="name" type="String" line="735"/>
                        <declaration name="setterName" type="String" line="736"/>
                        <declaration name="setter" type="Method" line="737"/>
                        <scope line="738"/>
                        <scope line="742"/>
                    </scope>
                </method>
                <method name="fromCompositeData" type="Object" line="750">
                    <params>
                        <param name="cd" type="CompositeData"/>
                        <param name="itemNames" type="String[]"/>
                        <param name="converters" type="MXBeanMapping[]"/>
                    </params>
                    <declaration name="o" type="Object" line="751"/>
                    <scope line="752">
                        <scope line="754">
                            <scope line="755">
                                <declaration name="openItem" type="Object" line="756"/>
                                <declaration name="javaItem" type="Object" line="757"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="762"/>
                </method>
                <declaration name="setters" type="Method[]" line="767"/>
            </class>
            <class name="CompositeBuilderViaConstructor" line="769">
                <extends class="CompositeBuilder"/>
                <javadoc line="769">
                    Builder for when the target class has a constructor that is
                      annotated with @ConstructorProperties so we can see the correspondence
                      to getters.                    
                </javadoc>
                <method name="CompositeBuilderViaConstructor" type="constructor" line="775">
                    <params>
                        <param name="targetClass" type="Class<?>"/>
                        <param name="itemNames" type="String[]"/>
                    </params>
                </method>
                <method name="applicable" type="String" line="778">
                    <params>
                        <param name="getters" type="Method[]"/>
                    </params>
                    <declaration name="propertyNamesClass" type="Class&lt;ConstructorProperties&gt;" line="779"/>
                    <declaration name="targetClass" type="Class&lt;?&gt;" line="780"/>
                    <declaration name="constrs" type="Constructor&lt;?&gt;[]" line="781"/>
                    <declaration name="annotatedConstrList" type="List&lt;Constructor&lt;?&gt;&gt;" line="782"/>
                    <scope line="783"/>
                    <declaration name="getterMap" type="Map&lt;String,Integer&gt;" line="788"/>
                    <declaration name="itemNames" type="String[]" line="789"/>
                    <declaration name="getterIndexSets" type="Set&lt;BitSet&gt;" line="791"/>
                    <scope line="792">
                        <declaration name="propertyNames" type="String[]" line="793"/>
                        <declaration name="paramTypes" type="Type[]" line="794"/>
                        <scope line="795">
                            <declaration name="msg" type="String" line="796"/>
                        </scope>
                        <declaration name="paramIndexes" type="int[]" line="799"/>
                        <declaration name="present" type="BitSet" line="801"/>
                        <scope line="802">
                            <declaration name="propertyName" type="String" line="803"/>
                            <scope line="804">
                                <declaration name="msg" type="String" line="805"/>
                                <scope line="806">
                                    <scope line="807"/>
                                </scope>
                            </scope>
                            <declaration name="getterIndex" type="int" line="814"/>
                            <scope line="816">
                                <declaration name="msg" type="String" line="817"/>
                            </scope>
                            <declaration name="getter" type="Method" line="821"/>
                            <declaration name="propertyType" type="Type" line="822"/>
                            <scope line="823">
                                <declaration name="msg" type="String" line="824"/>
                            </scope>
                        </scope>
                        <scope line="828">
                            <declaration name="msg" type="String" line="829"/>
                        </scope>
                        <declaration name="c" type="Constr" line="832"/>
                    </scope>
                    <scope line="835">
                        <declaration name="seen" type="boolean" line="836"/>
                        <scope line="837">
                            <scope line="839">
                                <declaration name="u" type="BitSet" line="840"/>
                                <scope line="843">
                                    <declaration name="names" type="Set&lt;String&gt;" line="844"/>
                                    <declaration name="msg" type="String" line="846"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="fromCompositeData" type="Object" line="854">
                    <params>
                        <param name="cd" type="CompositeData"/>
                        <param name="itemNames" type="String[]"/>
                        <param name="mappings" type="MXBeanMapping[]"/>
                    </params>
                    <declaration name="ct" type="CompositeType" line="855"/>
                    <declaration name="present" type="BitSet" line="856"/>
                    <scope line="857"/>
                    <declaration name="max" type="Constr" line="860"/>
                    <scope line="861"/>
                    <scope line="864">
                        <declaration name="msg" type="String" line="865"/>
                    </scope>
                    <declaration name="params" type="Object[]" line="868"/>
                    <scope line="869">
                        <declaration name="openItem" type="Object" line="871"/>
                        <declaration name="javaItem" type="Object" line="872"/>
                        <declaration name="index" type="int" line="873"/>
                    </scope>
                    <scope line="876"/>
                    <scope line="879">
                        <declaration name="msg" type="String" line="880"/>
                    </scope>
                </method>
                <method name="subset" type="boolean" line="884">
                    <params>
                        <param name="sub" type="BitSet"/>
                        <param name="sup" type="BitSet"/>
                    </params>
                    <declaration name="subcopy" type="BitSet" line="885"/>
                </method>
                <class name="Constr" line="889">
                    <declaration name="constructor" type="Constructor&lt;?&gt;" line="890"/>
                    <declaration name="paramIndexes" type="int[]" line="891"/>
                    <declaration name="presentParams" type="BitSet" line="892"/>
                    <method name="Constr" type="constructor" line="893">
                        <params>
                            <param name="constructor" type="Constructor<?>"/>
                            <param name="paramIndexes" type="int[]"/>
                            <param name="presentParams" type="BitSet"/>
                        </params>
                    </method>
                </class>
                <declaration name="annotatedConstructors" type="List&lt;Constr&gt;" line="899"/>
            </class>
            <class name="CompositeBuilderViaProxy" line="901">
                <extends class="CompositeBuilder"/>
                <javadoc line="901">
                    Builder for when the target class is an interface and contains
                      no methods other than getters.  Then we can make an instance
                      using a dynamic proxy that forwards the getters to the source
                      CompositeData.                    
                </javadoc>
                <method name="CompositeBuilderViaProxy" type="constructor" line="908">
                    <params>
                        <param name="targetClass" type="Class<?>"/>
                        <param name="itemNames" type="String[]"/>
                    </params>
                </method>
                <method name="applicable" type="String" line="911">
                    <params>
                        <param name="getters" type="Method[]"/>
                    </params>
                    <declaration name="targetClass" type="Class&lt;?&gt;" line="912"/>
                    <declaration name="methods" type="Set&lt;Method&gt;" line="914"/>
                    <declaration name="bad" type="String" line="916"/>
                    <scope line="917">
                        <declaration name="mname" type="String" line="918"/>
                        <declaration name="mparams" type="Class&lt;?&gt;[]" line="919"/>
                        <scope line="920">
                            <declaration name="om" type="Method" line="921"/>
                        </scope>
                        <scope line="924"/>
                    </scope>
                </method>
                <method name="fromCompositeData" type="Object" line="931">
                    <params>
                        <param name="cd" type="CompositeData"/>
                        <param name="itemNames" type="String[]"/>
                        <param name="converters" type="MXBeanMapping[]"/>
                    </params>
                    <declaration name="targetClass" type="Class&lt;?&gt;" line="932"/>
                </method>
            </class>
            <method name="invalidObjectException" type="InvalidObjectException" line="936">
                <params>
                    <param name="msg" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <method name="invalidObjectException" type="InvalidObjectException" line="939">
                <params>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <method name="openDataException" type="OpenDataException" line="942">
                <params>
                    <param name="msg" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <method name="openDataException" type="OpenDataException" line="945">
                <params>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <method name="mustBeComparable" type="void" line="948">
                <params>
                    <param name="collection" type="Class<?>"/>
                    <param name="element" type="Type"/>
                </params>
                <scope line="949">
                    <declaration name="msg" type="String" line="950"/>
                </scope>
            </method>
            <javadoc line="954">
                Utility method to take a string and convert it to normal Java variable
                  name capitalization.  This normally means converting the first
                  character from upper case to lower case, but in the (unusual) special
                  case when there is more than one character and both the first and
                  second characters are upper case, we leave it alone.
                  &lt;p&gt;
                  Thus &quot;FooBah&quot; becomes &quot;fooBah&quot; and &quot;X&quot; becomes &quot;x&quot;, but &quot;URL&quot; stays
                  as &quot;URL&quot;.                
                <param>
                    name The string to be decapitalized.                    
                </param>
                <return>
                    The decapitalized version of the string.                    
                </return>
            </javadoc>
            <method name="decapitalize" type="String" line="966">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="967"/>
                <declaration name="offset1" type="int" line="970"/>
            </method>
            <javadoc line="974">
                Reverse operation for java.beans.Introspector.decapitalize.  For any s,
                  capitalize(decapitalize(s)).equals(s).  The reverse is not true:
                  e.g. capitalize(&quot;uRL&quot;) produces &quot;URL&quot; which is unchanged by
                  decapitalize.                
            </javadoc>
            <method name="capitalize" type="String" line="980">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="offset1" type="int" line="982"/>
            </method>
            <method name="propertyName" type="String" line="985">
                <params>
                    <param name="m" type="Method"/>
                </params>
                <declaration name="rest" type="String" line="986"/>
                <declaration name="name" type="String" line="987"/>
            </method>
            <declaration name="inProgress" type="Map&lt;Type,Type&gt;" line="993"/>
        </class>
    </source>