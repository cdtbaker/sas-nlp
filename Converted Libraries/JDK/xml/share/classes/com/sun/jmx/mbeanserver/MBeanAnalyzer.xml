<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <class name="MBeanAnalyzer" line="10">
            <type_params>
                <type_param name="M"/>
            </type_params>
            <javadoc line="10">
                &lt;p&gt;An analyzer for a given MBean interface.  The analyzer can
                  be for Standard MBeans or MXBeans, depending on the MBeanIntrospector
                  passed at construction.
                  &lt;p&gt;The analyzer can
                  visit the attributes and operations of the interface, calling
                  a caller-supplied visitor method for each one.&lt;/p&gt;                
                <param>
                    &lt;M&gt;
                      Method or ConvertingMethod according as this is a
                      Standard MBean or an MXBean.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <interface name="MBeanVisitor">
                <type_params>
                    <type_param name="M"/>
                </type_params>
                <method name="visitAttribute" type="void" line="24"/>
                <method name="visitOperation" type="void" line="25"/>
            </interface>
            <method name="visit" type="void" line="27">
                <params>
                    <param name="visitor" type="MBeanVisitor&lt;M&gt;"/>
                </params>
                <scope line="28">
                    <declaration name="name" type="String" line="29"/>
                    <declaration name="am" type="AttrMethods&amp;lt;M&amp;gt;" line="30"/>
                </scope>
                <scope line="33"/>
            </method>
            <declaration name="opMap" type="Map&amp;lt;String,List&amp;lt;M&amp;gt;&amp;gt;" line="37"/>
            <declaration name="attrMap" type="Map&amp;lt;String,AttrMethods&amp;lt;M&amp;gt;&amp;gt;" line="38"/>
            <class name="AttrMethods" line="39">
                <type_params>
                    <type_param name="M"/>
                </type_params>
                <declaration name="getter" type="M" line="40"/>
                <declaration name="setter" type="M" line="41"/>
            </class>
            <javadoc line="43">
                &lt;p&gt;Return an MBeanAnalyzer for the given MBean interface and
                  MBeanIntrospector.  Calling this method twice with the same
                  parameters may return the same object or two different but
                  equivalent objects.                
            </javadoc>
            <method name="analyzer" type="MBeanAnalyzer&lt;M&gt;" line="49">
                <params>
                    <param name="mbeanType" type="Class&lt;?&gt;"/>
                    <param name="introspector" type="MBeanIntrospector&lt;M&gt;"/>
                </params>
            </method>
            <method name="MBeanAnalyzer" type="constructor" line="52">
                <params>
                    <param name="mbeanType" type="Class&lt;?&gt;"/>
                    <param name="introspector" type="MBeanIntrospector&lt;M&gt;"/>
                </params>
                <scope line="53"/>
                <scope line="56"/>
                <scope line="59"/>
            </method>
            <method name="initMaps" type="void" line="63">
                <params>
                    <param name="mbeanType" type="Class&lt;?&gt;"/>
                    <param name="introspector" type="MBeanIntrospector&lt;M&gt;"/>
                </params>
                <declaration name="methods1" type="List&amp;lt;Method&amp;gt;" line="64"/>
                <declaration name="methods" type="List&amp;lt;Method&amp;gt;" line="65"/>
                <scope line="66">
                    <declaration name="name" type="String" line="67"/>
                    <declaration name="nParams" type="int" line="68"/>
                    <declaration name="cm" type="M" line="69"/>
                    <declaration name="attrName" type="String" line="70"/>
                    <scope line="73">
                        <declaration name="am" type="AttrMethods&amp;lt;M&amp;gt;" line="74"/>
                        <scope line="76">
                            <scope line="77">
                                <declaration name="msg" type="String" line="78"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="85">
                        <declaration name="am" type="AttrMethods&amp;lt;M&amp;gt;" line="87"/>
                        <scope line="89">
                            <declaration name="msg" type="String" line="90"/>
                        </scope>
                    </scope>
                    <scope line="96">
                        <declaration name="cms" type="List&amp;lt;M&amp;gt;" line="97"/>
                    </scope>
                </scope>
                <scope line="103">
                    <declaration name="am" type="AttrMethods&amp;lt;M&amp;gt;" line="104"/>
                    <scope line="105">
                        <declaration name="msg" type="String" line="106"/>
                    </scope>
                </scope>
            </method>
            <class name="MethodOrder" line="111">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="Method"/>
                    </type_params>
                </implements>
                <javadoc line="111">
                    A comparator that defines a total order so that methods have the
                      same name and identical signatures appear next to each others.
                      The methods are sorted in such a way that methods which
                      override each other will sit next to each other, with the
                      overridden method first - e.g. Object getFoo() is placed before
                      Integer getFoo(). This makes it possible to determine whether
                      a method overrides another one simply by looking at the method(s)
                      that precedes it in the list. (see eliminateCovariantMethods).                    
                </javadoc>
                <method name="compare" type="int" line="122">
                    <params>
                        <param name="a" type="Method"/>
                        <param name="b" type="Method"/>
                    </params>
                    <declaration name="cmp" type="int" line="123"/>
                    <declaration name="aparams" type="Class&amp;lt;?&amp;gt;[]" line="125"/>
                    <declaration name="bparams" type="Class&amp;lt;?&amp;gt;[]" line="126"/>
                    <scope line="128"/>
                    <declaration name="aret" type="Class&amp;lt;?&amp;gt;" line="131"/>
                    <declaration name="bret" type="Class&amp;lt;?&amp;gt;" line="132"/>
                </method>
                <declaration name="instance" type="MethodOrder" line="137"/>
            </class>
            <method name="eliminateCovariantMethods" type="List&lt;Method&gt;" line="139">
                <params>
                    <param name="startMethods" type="List&lt;Method&gt;"/>
                </params>
                <declaration name="len" type="int" line="140"/>
                <declaration name="sorted" type="Method[]" line="141"/>
                <declaration name="overridden" type="Set&amp;lt;Method&amp;gt;" line="143"/>
                <scope line="144">
                    <declaration name="m0" type="Method" line="145"/>
                    <declaration name="m1" type="Method" line="146"/>
                    <scope line="148"/>
                </scope>
                <declaration name="methods" type="List&amp;lt;Method&amp;gt;" line="152"/>
            </method>
        </class>
    </source>