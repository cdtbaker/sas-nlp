<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.agent">
        <import package="java.io.Serializable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpValue"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <class name="SnmpMibOid" line="9">
            <extends class="SnmpMibNode"/>
            <implements interface="Serializable"/>
            <javadoc line="9">
                Represents a node in an SNMP MIB which is neither a group nor a variable.
                  This class defines a list of sub-nodes and the methods that allow to
                  manipulate the sub-nodes.
                  &lt;P&gt;
                  This class is used internally and by the class generated by
                  &lt;CODE&gt;mibgen&lt;/CODE&gt;.
                  You should not need to use this class directly.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="21"/>
            <javadoc line="22">
                Default constructor.                
            </javadoc>
            <method name="SnmpMibOid" type="constructor" line="25"/>
            <javadoc line="27">
                Generic handling of the &lt;CODE&gt;get&lt;/CODE&gt; operation.
                  &lt;p&gt; This method should be overridden in subclasses.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException The default implementation (if not
                      overridden) is to generate a SnmpStatusException.                    
                </exception>
            </javadoc>
            <method name="get" type="void" line="36">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="depth" type="int"/>
                </params>
                <scope line="37">
                    <declaration name="var" type="SnmpVarBind" line="38"/>
                    <declaration name="x" type="SnmpStatusException" line="39"/>
                </scope>
            </method>
            <javadoc line="43">
                Generic handling of the &lt;CODE&gt;set&lt;/CODE&gt; operation.
                  &lt;p&gt; This method should be overridden in subclasses.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException The default implementation (if not
                      overridden) is to generate a SnmpStatusException.                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="52">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="depth" type="int"/>
                </params>
                <scope line="53">
                    <declaration name="var" type="SnmpVarBind" line="54"/>
                    <declaration name="x" type="SnmpStatusException" line="55"/>
                </scope>
            </method>
            <javadoc line="59">
                Generic handling of the &lt;CODE&gt;check&lt;/CODE&gt; operation.
                  &lt;p&gt; This method should be overridden in subclasses.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException The default implementation (if not
                      overriden) is to generate a SnmpStatusException.                    
                </exception>
            </javadoc>
            <method name="check" type="void" line="68">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="depth" type="int"/>
                </params>
                <scope line="69">
                    <declaration name="var" type="SnmpVarBind" line="70"/>
                    <declaration name="x" type="SnmpStatusException" line="71"/>
                </scope>
            </method>
            <method name="findHandlingNode" type="void" line="75">
                <params>
                    <param name="varbind" type="SnmpVarBind"/>
                    <param name="oid" type="long[]"/>
                    <param name="depth" type="int"/>
                    <param name="handlers" type="SnmpRequestTree"/>
                </params>
                <declaration name="length" type="int" line="76"/>
                <declaration name="node" type="SnmpMibNode" line="77"/>
                <scope line="79"/>
                <scope line="82"/>
                <scope line="85">
                    <declaration name="child" type="SnmpMibNode" line="86"/>
                </scope>
            </method>
            <method name="findNextHandlingNode" type="long[]" line="91">
                <params>
                    <param name="varbind" type="SnmpVarBind"/>
                    <param name="oid" type="long[]"/>
                    <param name="pos" type="int"/>
                    <param name="depth" type="int"/>
                    <param name="handlers" type="SnmpRequestTree"/>
                    <param name="checker" type="AcmChecker"/>
                </params>
                <declaration name="length" type="int" line="92"/>
                <declaration name="node" type="SnmpMibNode" line="93"/>
                <declaration name="result" type="long[]" line="94"/>
                <declaration name="data" type="Object" line="96"/>
                <declaration name="pduVersion" type="int" line="97"/>
                <scope line="98">
                    <declaration name="newOid" type="long[]" line="99"/>
                </scope>
                <declaration name="newOid" type="long[]" line="104"/>
                <declaration name="index" type="long" line="105"/>
                <scope line="106">
                    <scope line="107">
                        <declaration name="child" type="SnmpMibNode" line="108"/>
                        <scope line="109"/>
                        <scope line="112">
                            <scope line="114"/>
                            <scope line="117"/>
                        </scope>
                    </scope>
                    <scope line="124"/>
                </scope>
            </method>
            <javadoc line="132">
                Computes the root OID of the MIB.                
            </javadoc>
            <method name="getRootOid" type="void" line="135">
                <params>
                    <param name="result" type="Vector&lt;Integer&gt;"/>
                </params>
            </method>
            <javadoc line="140">
                Registers a specific node in the tree.                
            </javadoc>
            <method name="registerNode" type="void" line="143">
                <params>
                    <param name="oidString" type="String"/>
                    <param name="node" type="SnmpMibNode"/>
                </params>
                <declaration name="oid" type="SnmpOid" line="144"/>
            </method>
            <javadoc line="147">
                Registers a specific node in the tree.                
            </javadoc>
            <method name="registerNode" type="void" line="150">
                <params>
                    <param name="oid" type="long[]"/>
                    <param name="cursor" type="int"/>
                    <param name="node" type="SnmpMibNode"/>
                </params>
                <declaration name="var" type="long" line="152"/>
                <declaration name="pos" type="int" line="153"/>
                <scope line="154">
                    <scope line="159"/>
                    <declaration name="child" type="SnmpMibOid" line="163"/>
                </scope>
                <scope line="168">
                    <declaration name="tmp" type="int[]" line="169"/>
                    <declaration name="newPos" type="int" line="175"/>
                    <scope line="177"/>
                    <declaration name="child" type="SnmpMibOid" line="181"/>
                </scope>
                <scope line="186">
                    <declaration name="child" type="SnmpMibNode" line="187"/>
                    <scope line="188">
                        <scope line="190">
                            <scope line="191"/>
                            <scope line="196"/>
                            <scope line="200"/>
                        </scope>
                    </scope>
                    <scope line="209"/>
                </scope>
            </method>
            <javadoc line="215">
                Export this node&apos;s children to a brother node that will replace
                  this node in the OID tree.
                  This method is a patch that fixes the problem of registering
                  a subnode before its father node.                
            </javadoc>
            <method name="exportChildren" type="void" line="221">
                <params>
                    <param name="brother" type="SnmpMibOid"/>
                </params>
                <declaration name="oid" type="long[]" line="223"/>
                <scope line="224">
                    <declaration name="child" type="SnmpMibNode" line="225"/>
                </scope>
            </method>
            <method name="getChild" type="SnmpMibNode" line="231">
                <params>
                    <param name="id" type="long"/>
                </params>
                <declaration name="pos" type="int" line="232"/>
                <declaration name="child" type="SnmpMibNode" line="235"/>
                <scope line="236"/>
                <scope line="239"/>
            </method>
            <method name="retrieveIndex" type="int" line="245">
                <params>
                    <param name="val" type="long"/>
                </params>
                <declaration name="low" type="int" line="246"/>
                <declaration name="cursor" type="int" line="247"/>
                <declaration name="max" type="int" line="249"/>
                <declaration name="curr" type="int" line="250"/>
                <declaration name="elmt" type="int" line="251"/>
                <scope line="252">
                    <scope line="254"/>
                    <scope line="257"/>
                    <scope line="260"/>
                </scope>
            </method>
            <method name="getInsertAt" type="int" line="267">
                <params>
                    <param name="val" type="long"/>
                </params>
                <declaration name="low" type="int" line="268"/>
                <declaration name="index" type="int" line="269"/>
                <declaration name="max" type="int" line="271"/>
                <declaration name="elmt" type="int" line="272"/>
                <declaration name="curr" type="int" line="273"/>
                <scope line="274">
                    <scope line="277"/>
                    <scope line="280"/>
                </scope>
            </method>
            <declaration name="children" type="NonSyncVector&amp;lt;SnmpMibNode&amp;gt;" line="287"/>
            <javadoc line="287">
                Contains the list of sub nodes.                
            </javadoc>
            <declaration name="nbChildren" type="int" line="291"/>
            <javadoc line="291">
                The number of sub nodes.                
            </javadoc>
            <class name="NonSyncVector" line="295">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <extends class="Vector">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </extends>
                <method name="NonSyncVector" type="constructor" line="296">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <method name="addNonSyncElement" type="void" line="299">
                    <params>
                        <param name="obj" type="E"/>
                    </params>
                </method>
                <method name="elementAtNonSync" type="E" line="303">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
            </class>
        </class>
    </source>