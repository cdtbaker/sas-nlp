<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.agent">
        <import package="java.io.Serializable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpValue"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <class name="SnmpMibOid" line="44">
            <extends class="SnmpMibNode"/>
            <comment line="67">
                PUBLIC METHODS
                ---------------                
            </comment>
            <comment line="141">
                ---------------------------------------------------------------------
                
                 Implements the method defined in SnmpMibNode.
                
                 ---------------------------------------------------------------------                
            </comment>
            <comment line="189">
                ---------------------------------------------------------------------
                
                 Implements the method defined in SnmpMibNode.
                
                 ---------------------------------------------------------------------                
            </comment>
            <comment line="296">
                PROTECTED METHODS
                ------------------                
            </comment>
            <comment line="437">
                PRIVATE METHODS
                ----------------                
            </comment>
            <comment line="526">
                PRIVATE VARIABLES
                ------------------                
            </comment>
            <comment line="540">
                All the methods of the Vector class are synchronized.
                 Synchronization is a very expensive operation. In our case it is
                 not always required...                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="44">
                Represents a node in an SNMP MIB which is neither a group nor a variable.
                  This class defines a list of sub-nodes and the methods that allow to
                  manipulate the sub-nodes.
                  &lt;P&gt;
                  This class is used internally and by the class generated by
                  &lt;CODE&gt;mibgen&lt;/CODE&gt;.
                  You should not need to use this class directly.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="58"/>
            <javadoc line="60">
                Default constructor.                
            </javadoc>
            <method name="SnmpMibOid" type="constructor" line="63"/>
            <javadoc line="69">
                Generic handling of the &lt;CODE&gt;get&lt;/CODE&gt; operation.
                  &lt;p&gt; This method should be overridden in subclasses.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException The default implementation (if not
                      overridden) is to generate a SnmpStatusException.                    
                </exception>
            </javadoc>
            <method name="get" type="void" line="83">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="depth" type="int"/>
                </params>
                <scope line="84">
                    <declaration name="var" type="SnmpVarBind" line="85"/>
                    <declaration name="x" type="SnmpStatusException" line="86"/>
                </scope>
            </method>
            <javadoc line="92">
                Generic handling of the &lt;CODE&gt;set&lt;/CODE&gt; operation.
                  &lt;p&gt; This method should be overridden in subclasses.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException The default implementation (if not
                      overridden) is to generate a SnmpStatusException.                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="106">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="depth" type="int"/>
                </params>
                <scope line="107">
                    <declaration name="var" type="SnmpVarBind" line="108"/>
                    <declaration name="x" type="SnmpStatusException" line="109"/>
                </scope>
            </method>
            <javadoc line="115">
                Generic handling of the &lt;CODE&gt;check&lt;/CODE&gt; operation.
                  &lt;p&gt; This method should be overridden in subclasses.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException The default implementation (if not
                      overriden) is to generate a SnmpStatusException.                    
                </exception>
            </javadoc>
            <method name="check" type="void" line="129">
                <params>
                    <param name="req" type="SnmpMibSubRequest"/>
                    <param name="depth" type="int"/>
                </params>
                <scope line="130">
                    <declaration name="var" type="SnmpVarBind" line="131"/>
                    <declaration name="x" type="SnmpStatusException" line="132"/>
                </scope>
            </method>
            <method name="findHandlingNode" type="void" line="149">
                <params>
                    <param name="varbind" type="SnmpVarBind"/>
                    <param name="oid" type="long[]"/>
                    <param name="depth" type="int"/>
                    <param name="handlers" type="SnmpRequestTree"/>
                </params>
                <comment line="160">
                    Nothing is left... the oid is not valid                    
                </comment>
                <comment line="164">
                    The oid is not complete...                    
                </comment>
                <comment line="168">
                    Some children variable or subobject is being querried
                     getChild() will raise an exception if no child is found.                    
                </comment>
                <comment line="173">
                    XXXX zzzz : what about null children?
                                 (variables for nested groups)
                     if child==null, then we&apos;re dealing with a variable or
                     a table: we register this node.
                     This behaviour should be overriden in subclasses,
                     in particular in group meta classes: the group
                     meta classes that hold tables should take care
                     of forwarding this call to all the tables involved.                    
                </comment>
                <declaration name="length" type="int" line="152"/>
                <declaration name="node" type="SnmpMibNode" line="153"/>
                <scope line="158"/>
                <scope line="162"/>
                <scope line="166">
                    <declaration name="child" type="SnmpMibNode" line="170"/>
                </scope>
            </method>
            <method name="findNextHandlingNode" type="long[]" line="198">
                <params>
                    <param name="varbind" type="SnmpVarBind"/>
                    <param name="oid" type="long[]"/>
                    <param name="pos" type="int"/>
                    <param name="depth" type="int"/>
                    <param name="handlers" type="SnmpRequestTree"/>
                    <param name="checker" type="AcmChecker"/>
                </params>
                <comment line="206">
                    This should be considered as a genErr, but we do not want to
                     abort the whole request, so we&apos;re going to throw
                     a noSuchObject...                    
                </comment>
                <comment line="223">
                    search the element specified in the oid                    
                </comment>
                <comment line="232">
                    SnmpOid result = null;                    
                </comment>
                <comment line="234">
                    shouldn&apos;t happen                    
                </comment>
                <comment line="236">
                    validateVarId(index);
                     handlers.add(this,varbind,depth);
                     result = new SnmpOid(0);                    
                </comment>
                <comment line="250">
                    Build up the leaf OID                    
                </comment>
                <comment line="255">
                    If there is no such element go one level up ...                    
                </comment>
                <comment line="259">
                    There is no need to carry the original oid ...                    
                </comment>
                <declaration name="length" type="int" line="201"/>
                <declaration name="node" type="SnmpMibNode" line="202"/>
                <declaration name="result" type="long[]" line="203"/>
                <declaration name="data" type="Object" line="211"/>
                <declaration name="pduVersion" type="int" line="212"/>
                <scope line="214">
                    <declaration name="newOid" type="long[]" line="215"/>
                </scope>
                <declaration name="newOid" type="long[]" line="224"/>
                <declaration name="index" type="long" line="225"/>
                <scope line="227">
                    <scope line="229">
                        <declaration name="child" type="SnmpMibNode" line="230"/>
                        <scope line="232"/>
                        <scope line="238">
                            <scope line="240"/>
                            <scope line="244"/>
                        </scope>
                    </scope>
                    <scope line="253"/>
                </scope>
            </method>
            <javadoc line="267">
                Computes the root OID of the MIB.                
            </javadoc>
            <method name="getRootOid" type="void" line="270">
                <params>
                    <param name="result" type="Vector<Integer>"/>
                </params>
                <comment line="273">
                    If a node has several children, let assume that we are one step to
                     far in order to get the MIB root.                    
                </comment>
                <comment line="281">
                    Now query our child.                    
                </comment>
            </method>
            <javadoc line="286">
                Registers a specific node in the tree.                
            </javadoc>
            <method name="registerNode" type="void" line="290">
                <params>
                    <param name="oidString" type="String"/>
                    <param name="node" type="SnmpMibNode"/>
                </params>
                <declaration name="oid" type="SnmpOid" line="291"/>
            </method>
            <javadoc line="298">
                Registers a specific node in the tree.                
            </javadoc>
            <method name="registerNode" type="void" line="302">
                <params>
                    <param name="oid" type="long[]"/>
                    <param name="cursor" type="int"/>
                    <param name="node" type="SnmpMibNode"/>
                </params>
                <comment line="308">
                    Check if the node is already defined                    
                </comment>
                <comment line="312">
                    System.out.println(&quot;entering registration for val=&quot;
                     + String.valueOf(var) + &quot; position= &quot; + cursor);                    
                </comment>
                <comment line="322">
                    That &apos;s the end of the trip.
                     Do not forward the registration                    
                </comment>
                <comment line="325">
                    System.out.println(&quot;End of trip for val=&quot;
                          + String.valueOf(var) + &quot; position= &quot; + cursor);                    
                </comment>
                <comment line="331">
                    System.out.println(&quot;Create node for val=&quot;
                           + String.valueOf(var) + &quot; position= &quot; + cursor);                    
                </comment>
                <comment line="339">
                    The node is not yet registered                    
                </comment>
                <comment line="350">
                    That &apos;s the end of the trip.
                     Do not forward the registration                    
                </comment>
                <comment line="353">
                    System.out.println(&quot;End of trip for val=&quot;
                         + String.valueOf(var) + &quot; position= &quot; + cursor);                    
                </comment>
                <comment line="359">
                    System.out.println(&quot;Create node for val=&quot; +
                         String.valueOf(var) + &quot; position= &quot; + cursor);                    
                </comment>
                <comment line="366">
                    The node is already registered                    
                </comment>
                <comment line="370">
                    System.out.println(&quot;Node already registered val=&quot; +
                              String.valueOf(var) + &quot; position= &quot; + cursor);                    
                </comment>
                <comment line="374">
                    Now we&apos;re going to patch the tree the following way:
                       if a subgroup has been registered before its father,
                       we&apos;re going to replace the father OID node with
                       the actual group-node and export the children from
                       the temporary OID node to the actual group node.                    
                </comment>
                <comment line="382">
                    `node&apos; is a group =&gt; replace `child&apos; with `node&apos;
                     export the child&apos;s subtree to `node&apos;.                    
                </comment>
                <comment line="391">
                    `node&apos; is a temporary node, and `child&apos; is a
                      group =&gt; keep child and export the node&apos;s
                      subtree to `child&apos;.                    
                </comment>
                <comment line="398">
                    `node&apos; and `child&apos; are both temporary OID nodes
                     =&gt; replace `child&apos; with `node&apos; and export child&apos;s
                     subtree to `node&apos;.                    
                </comment>
                <declaration name="var" type="long" line="309"/>
                <declaration name="pos" type="int" line="314"/>
                <scope line="315">
                    <scope line="320"/>
                    <declaration name="child" type="SnmpMibOid" line="332"/>
                </scope>
                <scope line="337">
                    <declaration name="tmp" type="int[]" line="340"/>
                    <declaration name="newPos" type="int" line="346"/>
                    <scope line="348"/>
                    <declaration name="child" type="SnmpMibOid" line="357"/>
                </scope>
                <scope line="364">
                    <declaration name="child" type="SnmpMibNode" line="367"/>
                    <scope line="368">
                        <scope line="372">
                            <scope line="380"/>
                            <scope line="389"/>
                            <scope line="396"/>
                        </scope>
                    </scope>
                    <scope line="408"/>
                </scope>
            </method>
            <javadoc line="416">
                Export this node&apos;s children to a brother node that will replace
                  this node in the OID tree.
                  This method is a patch that fixes the problem of registering
                  a subnode before its father node.                
            </javadoc>
            <method name="exportChildren" type="void" line="424">
                <params>
                    <param name="brother" type="SnmpMibOid"/>
                </params>
                <declaration name="oid" type="long[]" line="427"/>
                <scope line="428">
                    <declaration name="child" type="SnmpMibNode" line="429"/>
                </scope>
            </method>
            <method name="getChild" type="SnmpMibNode" line="439">
                <params>
                    <param name="id" type="long"/>
                </params>
                <comment line="442">
                    first we need to retrieve the identifier in the list of children                    
                </comment>
                <comment line="451">
                    Access the node                    
                </comment>
                <declaration name="pos" type="int" line="443"/>
                <declaration name="child" type="SnmpMibNode" line="452"/>
                <scope line="453"/>
                <scope line="455"/>
            </method>
            <method name="retrieveIndex" type="int" line="463">
                <params>
                    <param name="val" type="long"/>
                </params>
                <comment line="477">
                    We need to get the next index ...                    
                </comment>
                <declaration name="low" type="int" line="465"/>
                <declaration name="cursor" type="int" line="466"/>
                <declaration name="max" type="int" line="470"/>
                <declaration name="curr" type="int" line="471"/>
                <declaration name="elmt" type="int" line="472"/>
                <scope line="473">
                    <scope line="475"/>
                    <scope line="480"/>
                    <scope line="482"/>
                </scope>
            </method>
            <method name="getInsertAt" type="int" line="490">
                <params>
                    <param name="val" type="long"/>
                </params>
                <comment line="499">
                    final int[] v = varList;                    
                </comment>
                <comment line="501">
                    if (index &gt; a[max])
                    return max +1;                    
                </comment>
                <comment line="510">
                    never know ...we might find something ...                    
                </comment>
                <declaration name="low" type="int" line="492"/>
                <declaration name="index" type="int" line="493"/>
                <declaration name="max" type="int" line="496"/>
                <declaration name="elmt" type="int" line="497"/>
                <declaration name="curr" type="int" line="504"/>
                <scope line="505">
                    <scope line="514"/>
                    <scope line="516"/>
                </scope>
            </method>
            <declaration name="children" type="NonSyncVector&lt;SnmpMibNode&gt;" line="528"/>
            <javadoc line="528">
                Contains the list of sub nodes.                
            </javadoc>
            <declaration name="nbChildren" type="int" line="533"/>
            <javadoc line="533">
                The number of sub nodes.                
            </javadoc>
            <class name="NonSyncVector" line="543">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <extends class="Vector">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </extends>
                <comment line="544">
                    We will never serialize this                    
                </comment>
                <method name="NonSyncVector" type="constructor" line="546">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <method name="addNonSyncElement" type="void" line="550">
                    <params>
                        <param name="obj" type="E"/>
                    </params>
                </method>
                <method name="elementAtNonSync" type="E" line="556">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
            </class>
        </class>
    </source>