<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.remote.util">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.SortedMap"/>
        <import package="java.util.SortedSet"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.TreeMap"/>
        <import package="java.util.TreeSet"/>
        <import package="java.security.AccessController"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.remote.JMXConnectorFactory"/>
        <import package="javax.management.remote.JMXConnectorServerFactory"/>
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="com.sun.jmx.remote.security.NotificationAccessController"/>
        <import package="javax.management.remote.JMXConnector"/>
        <import package="javax.management.remote.JMXConnectorServer"/>
        <class name="EnvHelp" line="25">
            <declaration name="DEFAULT_CLASS_LOADER" type="String" line="26"/>
            <javadoc line="26">
                &lt;p&gt;Name of the attribute that specifies a default class loader
                  object.
                  The value associated with this attribute is a ClassLoader object&lt;/p&gt;                
            </javadoc>
            <declaration name="DEFAULT_CLASS_LOADER_NAME" type="String" line="32"/>
            <javadoc line="32">
                &lt;p&gt;Name of the attribute that specifies a default class loader
                  ObjectName.
                  The value associated with this attribute is an ObjectName object&lt;/p&gt;                
            </javadoc>
            <javadoc line="38">
                Get the Connector Server default class loader.
                  &lt;p&gt;
                  Returns:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;
                  The ClassLoader object found in &lt;var&gt;env&lt;/var&gt; for
                  &lt;code&gt;jmx.remote.default.class.loader&lt;/code&gt;, if any.
                  &lt;/li&gt;
                  &lt;li&gt;
                  The ClassLoader pointed to by the ObjectName found in
                  &lt;var&gt;env&lt;/var&gt; for &lt;code&gt;jmx.remote.default.class.loader.name&lt;/code&gt;,
                  and registered in &lt;var&gt;mbs&lt;/var&gt; if any.
                  &lt;/li&gt;
                  &lt;li&gt;
                  The current thread&apos;s context classloader otherwise.
                  &lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    env Environment attributes.                    
                </param>
                <param>
                    mbs The MBeanServer for which the connector server provides
                      remote access.                    
                </param>
                <return>
                    the connector server&apos;s default class loader.                    
                </return>
                <exception>
                    IllegalArgumentException if one of the following is true:
                      &lt;ul&gt;
                      &lt;li&gt;both
                      &lt;code&gt;jmx.remote.default.class.loader&lt;/code&gt; and
                      &lt;code&gt;jmx.remote.default.class.loader.name&lt;/code&gt; are specified,
                      &lt;/li&gt;
                      &lt;li&gt;or
                      &lt;code&gt;jmx.remote.default.class.loader&lt;/code&gt; is not
                      an instance of {@link ClassLoader},
                      &lt;/li&gt;
                      &lt;li&gt;or
                      &lt;code&gt;jmx.remote.default.class.loader.name&lt;/code&gt; is not
                      an instance of {@link ObjectName},
                      &lt;/li&gt;
                      &lt;li&gt;or
                      &lt;code&gt;jmx.remote.default.class.loader.name&lt;/code&gt; is specified
                      but &lt;var&gt;mbs&lt;/var&gt; is null.
                      &lt;/li&gt;                    
                </exception>
                <exception>
                    InstanceNotFoundException if
                      &lt;code&gt;jmx.remote.default.class.loader.name&lt;/code&gt; is specified
                      and the ClassLoader MBean is not found in &lt;var&gt;mbs&lt;/var&gt;.                    
                </exception>
            </javadoc>
            <method name="resolveServerClassLoader" type="ClassLoader" line="83">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                    <param name="mbs" type="MBeanServer"/>
                </params>
                <declaration name="loader" type="Object" line="85"/>
                <declaration name="name" type="Object" line="86"/>
                <scope line="87">
                    <declaration name="msg" type="String" line="88"/>
                </scope>
                <scope line="92">
                    <scope line="93"/>
                    <scope line="96">
                        <declaration name="msg" type="String" line="97"/>
                    </scope>
                </scope>
                <declaration name="on" type="ObjectName" line="101"/>
                <scope line="102"/>
                <scope line="105">
                    <declaration name="msg" type="String" line="106"/>
                </scope>
            </method>
            <javadoc line="112">
                Get the Connector Client default class loader.
                  &lt;p&gt;
                  Returns:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;
                  The ClassLoader object found in &lt;var&gt;env&lt;/var&gt; for
                  &lt;code&gt;jmx.remote.default.class.loader&lt;/code&gt;, if any.
                  &lt;/li&gt;
                  &lt;li&gt;The &lt;tt&gt;Thread.currentThread().getContextClassLoader()&lt;/tt&gt;
                  otherwise.
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Usually a Connector Client will call
                  &lt;pre&gt;
                  ClassLoader dcl = EnvHelp.resolveClientClassLoader(env);
                  &lt;/pre&gt;
                  in its &lt;code&gt;connect(Map env)&lt;/code&gt; method.                
                <return>
                    The connector client default class loader.                    
                </return>
                <exception>
                    IllegalArgumentException if
                      &lt;code&gt;jmx.remote.default.class.loader&lt;/code&gt; is specified
                      and is not an instance of {@link ClassLoader}.                    
                </exception>
            </javadoc>
            <method name="resolveClientClassLoader" type="ClassLoader" line="137">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                </params>
                <declaration name="loader" type="Object" line="139"/>
                <scope line="141"/>
                <scope line="144">
                    <declaration name="msg" type="String" line="145"/>
                </scope>
            </method>
            <javadoc line="149">
                Initialize the cause field of a {@code Throwable} object.                
                <param>
                    throwable The {@code Throwable} on which the cause is set.                    
                </param>
                <param>
                    cause The cause to set on the supplied {@code Throwable}.                    
                </param>
                <return>
                    the {@code Throwable} with the cause field initialized.                    
                </return>
            </javadoc>
            <method name="initCause" type="T" line="155">
                <params>
                    <param name="throwable" type="T"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="159">
                Returns the cause field of a {@code Throwable} object.
                  The cause field can be got only if &lt;var&gt;t&lt;/var&gt; has an{@link Throwable#getCause()} method (JDK Version &gt;= 1.4)                
                <param>
                    t {@code Throwable} on which the cause must be set.                    
                </param>
                <return>
                    the cause if getCause() succeeded and the got value is not
                      null, otherwise return the &lt;var&gt;t&lt;/var&gt;.                    
                </return>
            </javadoc>
            <method name="getCause" type="Throwable" line="166">
                <params>
                    <param name="t" type="Throwable"/>
                </params>
                <declaration name="ret" type="Throwable" line="167"/>
                <scope line="168">
                    <declaration name="getCause" type="java.lang.reflect.Method" line="169"/>
                </scope>
                <scope line="172"/>
            </method>
            <declaration name="BUFFER_SIZE_PROPERTY" type="String" line="176"/>
            <javadoc line="176">
                &lt;p&gt;Name of the attribute that specifies the size of a notification
                  buffer for a connector server. The default value is 1000.                
            </javadoc>
            <javadoc line="181">
                Returns the size of a notification buffer for a connector server.
                  The default value is 1000.                
            </javadoc>
            <method name="getNotifBufferSize" type="int" line="185">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                </params>
                <declaration name="defaultQueueSize" type="int" line="186"/>
                <declaration name="oldP" type="String" line="187"/>
                <scope line="188">
                    <declaration name="act" type="GetPropertyAction" line="189"/>
                    <declaration name="s" type="String" line="190"/>
                    <scope line="191"/>
                    <scope line="194">
                        <scope line="197"/>
                    </scope>
                </scope>
                <scope line="202"/>
                <declaration name="queueSize" type="int" line="206"/>
                <scope line="207">
                    <scope line="208"/>
                    <scope line="211"/>
                </scope>
                <scope line="215"/>
            </method>
            <declaration name="MAX_FETCH_NOTIFS" type="String" line="221"/>
            <javadoc line="221">
                &lt;p&gt;Name of the attribute that specifies the maximum number of
                  notifications that a client will fetch from its server.. The
                  value associated with this attribute should be an
                  &lt;code&gt;Integer&lt;/code&gt; object.  The default value is 1000.&lt;/p&gt;                
            </javadoc>
            <javadoc line="228">
                Returns the maximum notification number which a client will
                  fetch every time.                
            </javadoc>
            <method name="getMaxFetchNotifNumber" type="int" line="232">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                </params>
            </method>
            <declaration name="FETCH_TIMEOUT" type="String" line="235"/>
            <javadoc line="235">
                &lt;p&gt;Name of the attribute that specifies the timeout for a
                  client to fetch notifications from its server. The value
                  associated with this attribute should be a &lt;code&gt;Long&lt;/code&gt;
                  object.  The default value is 60000 milliseconds.&lt;/p&gt;                
            </javadoc>
            <javadoc line="242">
                Returns the timeout for a client to fetch notifications.                
            </javadoc>
            <method name="getFetchTimeout" type="long" line="245">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                </params>
            </method>
            <declaration name="NOTIF_ACCESS_CONTROLLER" type="String" line="248"/>
            <javadoc line="248">
                &lt;p&gt;Name of the attribute that specifies an object that will check
                  accesses to add/removeNotificationListener and also attempts to
                  receive notifications.  The value associated with this attribute
                  should be a &lt;code&gt;NotificationAccessController&lt;/code&gt; object.
                  The default value is null.&lt;/p&gt;
                  This field is not public because of its com.sun dependency.                
            </javadoc>
            <method name="getNotificationAccessController" type="NotificationAccessController" line="257">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                </params>
            </method>
            <javadoc line="260">
                Get an integer-valued attribute with name &lt;code&gt;name&lt;/code&gt;
                  from &lt;code&gt;env&lt;/code&gt;.  If &lt;code&gt;env&lt;/code&gt; is null, or does
                  not contain an entry for &lt;code&gt;name&lt;/code&gt;, return
                  &lt;code&gt;defaultValue&lt;/code&gt;.  The value may be a Number, or it
                  may be a String that is parsable as a long.  It must be at
                  least &lt;code&gt;minValue&lt;/code&gt; and at most&lt;code&gt;maxValue&lt;/code&gt;.                
                <throws>
                    IllegalArgumentException if &lt;code&gt;env&lt;/code&gt; contains
                      an entry for &lt;code&gt;name&lt;/code&gt; but it does not meet the
                      constraints above.                    
                </throws>
            </javadoc>
            <method name="getIntegerAttribute" type="long" line="271">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                    <param name="name" type="String"/>
                    <param name="defaultValue" type="long"/>
                    <param name="minValue" type="long"/>
                    <param name="maxValue" type="long"/>
                </params>
                <declaration name="o" type="Object" line="272"/>
                <declaration name="result" type="long" line="274"/>
                <scope line="276"/>
                <scope line="279">
                    <declaration name="msg" type="String" line="280"/>
                </scope>
                <scope line="283">
                    <declaration name="msg" type="String" line="284"/>
                </scope>
                <scope line="287">
                    <declaration name="msg" type="String" line="288"/>
                </scope>
            </method>
            <declaration name="DEFAULT_ORB" type="String" line="293"/>
            <method name="checkAttributes" type="void" line="294">
                <params>
                    <param name="attributes" type="Map&lt;?,?&gt;"/>
                </params>
                <scope line="295">
                    <scope line="296">
                        <declaration name="msg" type="String" line="297"/>
                    </scope>
                </scope>
            </method>
            <method name="filterAttributes" type="Map&lt;String,V&gt;" line="302">
                <params>
                    <param name="attributes" type="Map&lt;String,V&gt;"/>
                </params>
                <scope line="303"/>
                <declaration name="map" type="SortedMap&amp;lt;String,V&amp;gt;" line="306"/>
            </method>
            <javadoc line="311">
                Remove from the given Collection any element that is not a
                  serializable object.                
            </javadoc>
            <method name="purgeUnserializable" type="void" line="315">
                <params>
                    <param name="objects" type="Collection&lt;?&gt;"/>
                </params>
                <declaration name="oos" type="ObjectOutputStream" line="317"/>
                <declaration name="i" type="int" line="318"/>
                <scope line="319">
                    <declaration name="v" type="Object" line="320"/>
                    <scope line="321">
                        <scope line="322"/>
                    </scope>
                    <scope line="327">
                        <scope line="330"/>
                    </scope>
                    <scope line="334">
                        <scope line="335"/>
                    </scope>
                </scope>
            </method>
            <declaration name="HIDDEN_ATTRIBUTES" type="String" line="343"/>
            <javadoc line="343">
                The value of this attribute, if present, is a string specifying
                  what other attributes should not appear in
                  JMXConnectorServer.getAttributes().  It is a space-separated
                  list of attribute patterns, where each pattern is either an
                  attribute name, or an attribute prefix followed by a &quot;&quot;
                  character.  The &quot;&quot; has no special significance anywhere except
                  at the end of a pattern.  By default, this list is added to the
                  list defined by {@link #DEFAULT_HIDDEN_ATTRIBUTES} (which
                  uses the same format).  If the value of this attribute begins
                  with an &quot;=&quot;, then the remainder of the string defines the
                  complete list of attribute patterns.                
            </javadoc>
            <declaration name="DEFAULT_HIDDEN_ATTRIBUTES" type="String" line="357"/>
            <javadoc line="357">
                Default list of attributes not to show.                
                <see>
                    #HIDDEN_ATTRIBUTES                    
                </see>
            </javadoc>
            <declaration name="defaultHiddenStrings" type="SortedSet&amp;lt;String&amp;gt;" line="362"/>
            <declaration name="defaultHiddenPrefixes" type="SortedSet&amp;lt;String&amp;gt;" line="363"/>
            <method name="hideAttributes" type="void" line="364">
                <params>
                    <param name="map" type="SortedMap&lt;String,?&gt;"/>
                </params>
                <declaration name="hiddenStrings" type="SortedSet&amp;lt;String&amp;gt;" line="366"/>
                <declaration name="hiddenPrefixes" type="SortedSet&amp;lt;String&amp;gt;" line="367"/>
                <declaration name="hide" type="String" line="368"/>
                <scope line="369"/>
                <scope line="376">
                    <scope line="378">
                        <scope line="379"/>
                    </scope>
                </scope>
                <declaration name="sentinelKey" type="String" line="386"/>
                <declaration name="keyIterator" type="Iterator&amp;lt;String&amp;gt;" line="387"/>
                <declaration name="stringIterator" type="Iterator&amp;lt;String&amp;gt;" line="388"/>
                <declaration name="prefixIterator" type="Iterator&amp;lt;String&amp;gt;" line="389"/>
                <declaration name="nextString" type="String" line="390"/>
                <declaration name="nextPrefix" type="String" line="393"/>
                <scope line="396">
                    <declaration name="key" type="String" line="397"/>
                    <declaration name="cmp" type="int" line="398"/>
                    <scope line="399"/>
                    <scope line="403"/>
                    <scope line="407">
                        <scope line="408"/>
                    </scope>
                </scope>
            </method>
            <method name="parseHiddenAttributes" type="void" line="417">
                <params>
                    <param name="hide" type="String"/>
                    <param name="hiddenStrings" type="SortedSet&lt;String&gt;"/>
                    <param name="hiddenPrefixes" type="SortedSet&lt;String&gt;"/>
                </params>
                <declaration name="tok" type="StringTokenizer" line="418"/>
                <scope line="419">
                    <declaration name="s" type="String" line="420"/>
                </scope>
            </method>
            <declaration name="SERVER_CONNECTION_TIMEOUT" type="String" line="425"/>
            <javadoc line="425">
                &lt;p&gt;Name of the attribute that specifies the timeout to keep a
                  server side connection after answering last client request.
                  The default value is 120000 milliseconds.&lt;/p&gt;                
            </javadoc>
            <javadoc line="431">
                Returns the server side connection timeout.                
            </javadoc>
            <method name="getServerConnectionTimeout" type="long" line="434">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                </params>
            </method>
            <declaration name="CLIENT_CONNECTION_CHECK_PERIOD" type="String" line="437"/>
            <javadoc line="437">
                &lt;p&gt;Name of the attribute that specifies the period in
                  millisecond for a client to check its connection.  The default
                  value is 60000 milliseconds.&lt;/p&gt;                
            </javadoc>
            <javadoc line="443">
                Returns the client connection check period.                
            </javadoc>
            <method name="getConnectionCheckPeriod" type="long" line="446">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                </params>
            </method>
            <javadoc line="449">
                Computes a boolean value from a string value retrieved from a
                  property in the given map.                
                <param>
                    env the environment map.                    
                </param>
                <param>
                    prop the name of the property in the environment map whose
                      returned string value must be converted into a boolean value.                    
                </param>
                <param>
                    systemProperty if true, consult a system property of the
                      same name if there is no entry in the environment map.                    
                </param>
                <return>
                    &lt;ul&gt;
                      &lt;li&gt;{@code false} if {@code env.get(prop)} is {@code null}&lt;/li&gt;
                      &lt;li&gt;{@code false} if{@code ((String)env.get(prop)).equalsIgnoreCase(&quot;false&quot;)}is {@code true}&lt;/li&gt;
                      &lt;li&gt;{@code true} if{@code ((String)env.get(prop)).equalsIgnoreCase(&quot;true&quot;)}is {@code true}&lt;/li&gt;
                      &lt;/ul&gt;                    
                </return>
                <throws>
                    IllegalArgumentException if {@code env} is {@code null} or{@code env.get(prop)} is not {@code null} and{@code ((String)env.get(prop)).equalsIgnoreCase(&quot;false&quot;)} and{@code ((String)env.get(prop)).equalsIgnoreCase(&quot;true&quot;)} are{@code false}.                    
                </throws>
                <throws>
                    ClassCastException if {@code env.get(prop)} cannot be cast
                      to {@code String}.                    
                </throws>
            </javadoc>
            <method name="computeBooleanFromString" type="boolean" line="466">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                    <param name="prop" type="String"/>
                    <param name="systemProperty" type="boolean"/>
                </params>
            </method>
            <javadoc line="470">
                Computes a boolean value from a string value retrieved from a
                  property in the given map.                
                <param>
                    env the environment map.                    
                </param>
                <param>
                    prop the name of the property in the environment map whose
                      returned string value must be converted into a boolean value.                    
                </param>
                <param>
                    systemProperty if true, consult a system property of the
                      same name if there is no entry in the environment map.                    
                </param>
                <param>
                    defaultValue a default value to return in case no property
                      was defined.                    
                </param>
                <return>
                    &lt;ul&gt;
                      &lt;li&gt;{@code defaultValue} if {@code env.get(prop)} is {@code null}and {@code systemProperty} is {@code false}&lt;/li&gt;
                      &lt;li&gt;{@code defaultValue} if {@code env.get(prop)} is {@code null}and {@code systemProperty} is {@code true} and{@code System.getProperty(prop)} is {@code null}&lt;/li&gt;
                      &lt;li&gt;{@code false} if {@code env.get(prop)} is {@code null}and {@code systemProperty} is {@code true} and{@code System.getProperty(prop).equalsIgnoreCase(&quot;false&quot;)}is {@code true}&lt;/li&gt;
                      &lt;li&gt;{@code true} if {@code env.get(prop)} is {@code null}and {@code systemProperty} is {@code true} and{@code System.getProperty(prop).equalsIgnoreCase(&quot;true&quot;)}is {@code true}&lt;/li&gt;
                      &lt;li&gt;{@code false} if{@code ((String)env.get(prop)).equalsIgnoreCase(&quot;false&quot;)}is {@code true}&lt;/li&gt;
                      &lt;li&gt;{@code true} if{@code ((String)env.get(prop)).equalsIgnoreCase(&quot;true&quot;)}is {@code true}&lt;/li&gt;
                      &lt;/ul&gt;                    
                </return>
                <throws>
                    IllegalArgumentException if {@code env} is {@code null} or{@code env.get(prop)} is not {@code null} and{@code ((String)env.get(prop)).equalsIgnoreCase(&quot;false&quot;)} and{@code ((String)env.get(prop)).equalsIgnoreCase(&quot;true&quot;)} are{@code false}.                    
                </throws>
                <throws>
                    ClassCastException if {@code env.get(prop)} cannot be cast
                      to {@code String}.                    
                </throws>
            </javadoc>
            <method name="computeBooleanFromString" type="boolean" line="492">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                    <param name="prop" type="String"/>
                    <param name="systemProperty" type="boolean"/>
                    <param name="defaultValue" type="boolean"/>
                </params>
                <declaration name="stringBoolean" type="String" line="494"/>
                <scope line="495"/>
            </method>
            <javadoc line="503">
                Converts a map into a valid hash table, i.e.
                  it removes all the &apos;null&apos; values from the map.                
            </javadoc>
            <method name="mapToHashtable" type="Hashtable&lt;K,V&gt;" line="507">
                <params>
                    <param name="map" type="Map&lt;K,V&gt;"/>
                </params>
                <declaration name="m" type="HashMap&amp;lt;K,V&amp;gt;" line="508"/>
            </method>
            <declaration name="JMX_SERVER_DAEMON" type="String" line="513"/>
            <javadoc line="513">
                &lt;p&gt;Name of the attribute that specifies whether a connector server
                  should not prevent the VM from exiting                
            </javadoc>
            <javadoc line="518">
                Returns true if {@value SERVER_DAEMON} is specified in the {@code env}as a key and its value is a String and it is equal to true ignoring case.                
                <param>
                    env                    
                </param>
                <return>
                                        
                </return>
            </javadoc>
            <method name="isServerDaemon" type="boolean" line="523">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                </params>
            </method>
            <class name="SinkOutputStream" line="526">
                <extends class="OutputStream"/>
                <method name="write" type="void" line="527">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="529">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="logger" type="ClassLogger" line="532"/>
        </class>
    </source>