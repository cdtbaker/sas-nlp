<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.remote.util">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.SortedMap"/>
        <import package="java.util.SortedSet"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.TreeMap"/>
        <import package="java.util.TreeSet"/>
        <import package="java.security.AccessController"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.remote.JMXConnectorFactory"/>
        <import package="javax.management.remote.JMXConnectorServerFactory"/>
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="com.sun.jmx.remote.security.NotificationAccessController"/>
        <import package="javax.management.remote.JMXConnector"/>
        <import package="javax.management.remote.JMXConnectorServer"/>
        <class name="EnvHelp" line="55">
            <comment line="424">
                Check that all attributes have a key that is a String.                
            </comment>
            <comment line="436">
                Return a writable map containing only those attributes that are
                serializable, and that are not hidden by
                jmx.remote.x.hidden.attributes or the default list of hidden                
            </comment>
            <declaration name="DEFAULT_CLASS_LOADER" type="String" line="57"/>
            <javadoc line="57">
                &lt;p&gt;Name of the attribute that specifies a default class loader
                  object.
                  The value associated with this attribute is a ClassLoader object&lt;/p&gt;                
            </javadoc>
            <declaration name="DEFAULT_CLASS_LOADER_NAME" type="String" line="65"/>
            <javadoc line="65">
                &lt;p&gt;Name of the attribute that specifies a default class loader
                  ObjectName.
                  The value associated with this attribute is an ObjectName object&lt;/p&gt;                
            </javadoc>
            <javadoc line="73">
                Get the Connector Server default class loader.
                  &lt;p&gt;
                  Returns:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;
                  The ClassLoader object found in &lt;var&gt;env&lt;/var&gt; for
                  &lt;code&gt;jmx.remote.default.class.loader&lt;/code&gt;, if any.
                  &lt;/li&gt;
                  &lt;li&gt;
                  The ClassLoader pointed to by the ObjectName found in
                  &lt;var&gt;env&lt;/var&gt; for &lt;code&gt;jmx.remote.default.class.loader.name&lt;/code&gt;,
                  and registered in &lt;var&gt;mbs&lt;/var&gt; if any.
                  &lt;/li&gt;
                  &lt;li&gt;
                  The current thread&apos;s context classloader otherwise.
                  &lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    env Environment attributes.                    
                </param>
                <param>
                    mbs The MBeanServer for which the connector server provides
                      remote access.                    
                </param>
                <return>
                    the connector server's default class loader.                    
                </return>
                <exception>
                    IllegalArgumentException if one of the following is true:
                      <ul>
                      <li>both
                      <code>jmx.remote.default.class.loader</code> and
                      <code>jmx.remote.default.class.loader.name</code> are specified,
                      </li>
                      <li>or
                      <code>jmx.remote.default.class.loader</code> is not
                      an instance of {@link ClassLoader},
                      </li>
                      <li>or
                      <code>jmx.remote.default.class.loader.name</code> is not
                      an instance of {@link ObjectName},
                      </li>
                      <li>or
                      <code>jmx.remote.default.class.loader.name</code> is specified
                      but <var>mbs</var> is null.
                      </li>                    
                </exception>
                <exception>
                    InstanceNotFoundException if
                      <code>jmx.remote.default.class.loader.name</code> is specified
                      and the ClassLoader MBean is not found in <var>mbs</var>.                    
                </exception>
            </javadoc>
            <method name="resolveServerClassLoader" type="ClassLoader" line="123">
                <params>
                    <param name="env" type="Map<String,?>"/>
                    <param name="mbs" type="MBeanServer"/>
                </params>
                <declaration name="loader" type="Object" line="128"/>
                <declaration name="name" type="Object" line="129"/>
                <scope line="131">
                    <declaration name="msg" type="String" line="132"/>
                </scope>
                <scope line="142">
                    <scope line="143"/>
                    <scope line="145">
                        <declaration name="msg" type="String" line="146"/>
                    </scope>
                </scope>
                <declaration name="on" type="ObjectName" line="154"/>
                <scope line="155"/>
                <scope line="157">
                    <declaration name="msg" type="String" line="158"/>
                </scope>
            </method>
            <javadoc line="171">
                Get the Connector Client default class loader.
                  &lt;p&gt;
                  Returns:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;
                  The ClassLoader object found in &lt;var&gt;env&lt;/var&gt; for
                  &lt;code&gt;jmx.remote.default.class.loader&lt;/code&gt;, if any.
                  &lt;/li&gt;
                  &lt;li&gt;The &lt;tt&gt;Thread.currentThread().getContextClassLoader()&lt;/tt&gt;
                  otherwise.
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Usually a Connector Client will call
                  &lt;pre&gt;
                  ClassLoader dcl = EnvHelp.resolveClientClassLoader(env);
                  &lt;/pre&gt;
                  in its &lt;code&gt;connect(Map env)&lt;/code&gt; method.                
                <return>
                    The connector client default class loader.                    
                </return>
                <exception>
                    IllegalArgumentException if
                      <code>jmx.remote.default.class.loader</code> is specified
                      and is not an instance of {@link ClassLoader}.                    
                </exception>
            </javadoc>
            <method name="resolveClientClassLoader" type="ClassLoader" line="198">
                <params>
                    <param name="env" type="Map<String,?>"/>
                </params>
                <declaration name="loader" type="Object" line="203"/>
                <scope line="208"/>
                <scope line="210">
                    <declaration name="msg" type="String" line="211"/>
                </scope>
            </method>
            <javadoc line="219">
                Initialize the cause field of a {@code Throwable} object.                
                <param>
                    throwable The {@code Throwable} on which the cause is set.                    
                </param>
                <param>
                    cause The cause to set on the supplied {@code Throwable}.                    
                </param>
                <return>
                    the {@code Throwable} with the cause field initialized.                    
                </return>
            </javadoc>
            <method name="initCause" type="T" line="227">
                <params>
                    <param name="throwable" type="T"/>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="232">
                Returns the cause field of a {@code Throwable} object.
                  The cause field can be got only if &lt;var&gt;t&lt;/var&gt; has an{@link Throwable#getCause()} method (JDK Version &gt;= 1.4)                
                <param>
                    t {@code Throwable} on which the cause must be set.                    
                </param>
                <return>
                    the cause if getCause() succeeded and the got value is not
                      null, otherwise return the <var>t</var>.                    
                </return>
            </javadoc>
            <method name="getCause" type="Throwable" line="240">
                <params>
                    <param name="t" type="Throwable"/>
                </params>
                <comment line="249">
                    OK.                    
                </comment>
                <comment line="250">
                    it must be older than 1.4.                    
                </comment>
                <declaration name="ret" type="Throwable" line="241"/>
                <scope line="243">
                    <declaration name="getCause" type="java.lang.reflect.Method" line="244"/>
                </scope>
                <scope line="248"/>
            </method>
            <declaration name="BUFFER_SIZE_PROPERTY" type="String" line="256"/>
            <javadoc line="256">
                &lt;p&gt;Name of the attribute that specifies the size of a notification
                  buffer for a connector server. The default value is 1000.                
            </javadoc>
            <javadoc line="264">
                Returns the size of a notification buffer for a connector server.
                  The default value is 1000.                
            </javadoc>
            <method name="getNotifBufferSize" type="int" line="268">
                <params>
                    <param name="env" type="Map<String,?>"/>
                </params>
                <comment line="269">
                    default value                    
                </comment>
                <comment line="271">
                    keep it for the compability for the fix:                    
                </comment>
                <comment line="272">
                    6174229: Environment parameter should be notification.buffer.size                    
                </comment>
                <comment line="273">
                    instead of buffer.size                    
                </comment>
                <comment line="276">
                    the default value re-specified in the system                    
                </comment>
                <comment line="282">
                    try the old one                    
                </comment>
                <comment line="303">
                    try the old one                    
                </comment>
                <declaration name="defaultQueueSize" type="int" line="269"/>
                <declaration name="oldP" type="String" line="274"/>
                <scope line="277">
                    <declaration name="act" type="GetPropertyAction" line="278"/>
                    <declaration name="s" type="String" line="279"/>
                    <scope line="280"/>
                    <scope line="282">
                        <scope line="285"/>
                    </scope>
                </scope>
                <scope line="289"/>
                <declaration name="queueSize" type="int" line="296"/>
                <scope line="298">
                    <scope line="299"/>
                    <scope line="303"/>
                </scope>
                <scope line="308"/>
            </method>
            <declaration name="MAX_FETCH_NOTIFS" type="String" line="318"/>
            <javadoc line="318">
                &lt;p&gt;Name of the attribute that specifies the maximum number of
                  notifications that a client will fetch from its server.. The
                  value associated with this attribute should be an
                  &lt;code&gt;Integer&lt;/code&gt; object.  The default value is 1000.&lt;/p&gt;                
            </javadoc>
            <javadoc line="327">
                Returns the maximum notification number which a client will
                  fetch every time.                
            </javadoc>
            <method name="getMaxFetchNotifNumber" type="int" line="331">
                <params>
                    <param name="env" type="Map<String,?>"/>
                </params>
            </method>
            <declaration name="FETCH_TIMEOUT" type="String" line="336"/>
            <javadoc line="336">
                &lt;p&gt;Name of the attribute that specifies the timeout for a
                  client to fetch notifications from its server. The value
                  associated with this attribute should be a &lt;code&gt;Long&lt;/code&gt;
                  object.  The default value is 60000 milliseconds.&lt;/p&gt;                
            </javadoc>
            <javadoc line="345">
                Returns the timeout for a client to fetch notifications.                
            </javadoc>
            <method name="getFetchTimeout" type="long" line="348">
                <params>
                    <param name="env" type="Map<String,?>"/>
                </params>
            </method>
            <declaration name="NOTIF_ACCESS_CONTROLLER" type="String" line="353"/>
            <javadoc line="353">
                &lt;p&gt;Name of the attribute that specifies an object that will check
                  accesses to add/removeNotificationListener and also attempts to
                  receive notifications.  The value associated with this attribute
                  should be a &lt;code&gt;NotificationAccessController&lt;/code&gt; object.
                  The default value is null.&lt;/p&gt;
                  This field is not public because of its com.sun dependency.                
            </javadoc>
            <method name="getNotificationAccessController" type="NotificationAccessController" line="365">
                <params>
                    <param name="env" type="Map<String,?>"/>
                </params>
            </method>
            <javadoc line="370">
                Get an integer-valued attribute with name &lt;code&gt;name&lt;/code&gt;
                  from &lt;code&gt;env&lt;/code&gt;.  If &lt;code&gt;env&lt;/code&gt; is null, or does
                  not contain an entry for &lt;code&gt;name&lt;/code&gt;, return
                  &lt;code&gt;defaultValue&lt;/code&gt;.  The value may be a Number, or it
                  may be a String that is parsable as a long.  It must be at
                  least &lt;code&gt;minValue&lt;/code&gt; and at most&lt;code&gt;maxValue&lt;/code&gt;.                
                <throws>
                    IllegalArgumentException if <code>env</code> contains
                      an entry for <code>name</code> but it does not meet the
                      constraints above.                    
                </throws>
            </javadoc>
            <method name="getIntegerAttribute" type="long" line="384">
                <params>
                    <param name="env" type="Map<String,?>"/>
                    <param name="name" type="String"/>
                    <param name="defaultValue" type="long"/>
                    <param name="minValue" type="long"/>
                    <param name="maxValue" type="long"/>
                </params>
                <comment line="396">
                    May throw a NumberFormatException, which is an                    
                </comment>
                <declaration name="o" type="Object" line="385"/>
                <declaration name="result" type="long" line="390"/>
                <scope line="394"/>
                <scope line="398">
                    <declaration name="msg" type="String" line="399"/>
                </scope>
                <scope line="404">
                    <declaration name="msg" type="String" line="405"/>
                </scope>
                <scope line="411">
                    <declaration name="msg" type="String" line="412"/>
                </scope>
            </method>
            <declaration name="DEFAULT_ORB" type="String" line="421"/>
            <method name="checkAttributes" type="void" line="425">
                <params>
                    <param name="attributes" type="Map<?,?>"/>
                </params>
                <scope line="426">
                    <scope line="427">
                        <declaration name="msg" type="String" line="428"/>
                    </scope>
                </scope>
            </method>
            <method name="filterAttributes" type="Map<String,V>" line="439">
                <params>
                    <param name="attributes" type="Map<String,V>"/>
                </params>
                <scope line="440"/>
                <declaration name="map" type="SortedMap&lt;String,V&gt;" line="444"/>
            </method>
            <javadoc line="450">
                Remove from the given Collection any element that is not a
                  serializable object.                
            </javadoc>
            <method name="purgeUnserializable" type="void" line="454">
                <params>
                    <param name="objects" type="Collection<?>"/>
                </params>
                <comment line="484">
                    ObjectOutputStream invalid after exception                    
                </comment>
                <declaration name="oos" type="ObjectOutputStream" line="456"/>
                <declaration name="i" type="int" line="457"/>
                <scope line="458">
                    <declaration name="v" type="Object" line="459"/>
                    <scope line="461">
                        <scope line="462"/>
                    </scope>
                    <scope line="469">
                        <scope line="473"/>
                    </scope>
                    <scope line="477">
                        <scope line="478"/>
                    </scope>
                </scope>
            </method>
            <declaration name="HIDDEN_ATTRIBUTES" type="String" line="489"/>
            <javadoc line="489">
                The value of this attribute, if present, is a string specifying
                  what other attributes should not appear in
                  JMXConnectorServer.getAttributes().  It is a space-separated
                  list of attribute patterns, where each pattern is either an
                  attribute name, or an attribute prefix followed by a &quot;&quot;
                  character.  The &quot;&quot; has no special significance anywhere except
                  at the end of a pattern.  By default, this list is added to the
                  list defined by {@link #DEFAULT_HIDDEN_ATTRIBUTES} (which
                  uses the same format).  If the value of this attribute begins
                  with an &quot;=&quot;, then the remainder of the string defines the
                  complete list of attribute patterns.                
            </javadoc>
            <declaration name="DEFAULT_HIDDEN_ATTRIBUTES" type="String" line="505"/>
            <javadoc line="505">
                Default list of attributes not to show.                
                <see>
                    #HIDDEN_ATTRIBUTES                    
                </see>
            </javadoc>
            <declaration name="defaultHiddenStrings" type="SortedSet&lt;String&gt;" line="528"/>
            <declaration name="defaultHiddenPrefixes" type="SortedSet&lt;String&gt;" line="530"/>
            <method name="hideAttributes" type="void" line="533">
                <params>
                    <param name="map" type="SortedMap<String,?>"/>
                </params>
                <comment line="562">
                    Construct a string that is greater than any key in the map.
                    Setting a string-to-match or a prefix-to-match to this string
                    guarantees that we will never call next() on the corresponding                    
                </comment>
                <comment line="582">
                    Read each key in sorted order and, if it matches a string                    
                </comment>
                <comment line="588">
                    Continue through string-match values until we find one
                    that is either greater than the current key, or equal                    
                </comment>
                <comment line="603">
                    Continue through the prefix values until we find one
                    that is either greater than the current key, or a                    
                </comment>
                <declaration name="hiddenStrings" type="SortedSet&lt;String&gt;" line="537"/>
                <declaration name="hiddenPrefixes" type="SortedSet&lt;String&gt;" line="538"/>
                <declaration name="hide" type="String" line="540"/>
                <scope line="541"/>
                <scope line="549">
                    <scope line="551">
                        <scope line="552"/>
                    </scope>
                </scope>
                <declaration name="sentinelKey" type="String" line="566"/>
                <declaration name="keyIterator" type="Iterator&lt;String&gt;" line="567"/>
                <declaration name="stringIterator" type="Iterator&lt;String&gt;" line="568"/>
                <declaration name="prefixIterator" type="Iterator&lt;String&gt;" line="569"/>
                <declaration name="nextString" type="String" line="571"/>
                <declaration name="nextPrefix" type="String" line="576"/>
                <scope line="585">
                    <declaration name="key" type="String" line="586"/>
                    <declaration name="cmp" type="int" line="591"/>
                    <scope line="592"/>
                    <scope line="598"/>
                    <scope line="606">
                        <scope line="607"/>
                    </scope>
                </scope>
            </method>
            <method name="parseHiddenAttributes" type="void" line="621">
                <params>
                    <param name="hide" type="String"/>
                    <param name="hiddenStrings" type="SortedSet<String>"/>
                    <param name="hiddenPrefixes" type="SortedSet<String>"/>
                </params>
                <declaration name="tok" type="StringTokenizer" line="622"/>
                <scope line="623">
                    <declaration name="s" type="String" line="624"/>
                </scope>
            </method>
            <declaration name="SERVER_CONNECTION_TIMEOUT" type="String" line="632"/>
            <javadoc line="632">
                &lt;p&gt;Name of the attribute that specifies the timeout to keep a
                  server side connection after answering last client request.
                  The default value is 120000 milliseconds.&lt;/p&gt;                
            </javadoc>
            <javadoc line="640">
                Returns the server side connection timeout.                
            </javadoc>
            <method name="getServerConnectionTimeout" type="long" line="643">
                <params>
                    <param name="env" type="Map<String,?>"/>
                </params>
            </method>
            <declaration name="CLIENT_CONNECTION_CHECK_PERIOD" type="String" line="648"/>
            <javadoc line="648">
                &lt;p&gt;Name of the attribute that specifies the period in
                  millisecond for a client to check its connection.  The default
                  value is 60000 milliseconds.&lt;/p&gt;                
            </javadoc>
            <javadoc line="656">
                Returns the client connection check period.                
            </javadoc>
            <method name="getConnectionCheckPeriod" type="long" line="659">
                <params>
                    <param name="env" type="Map<String,?>"/>
                </params>
            </method>
            <javadoc line="664">
                Computes a boolean value from a string value retrieved from a
                  property in the given map.                
                <param>
                    env the environment map.                    
                </param>
                <param>
                    prop the name of the property in the environment map whose
                      returned string value must be converted into a boolean value.                    
                </param>
                <param>
                    systemProperty if true, consult a system property of the
                      same name if there is no entry in the environment map.                    
                </param>
                <return>
                    <ul>
                      <li>{@code false} if {@code env.get(prop)} is {@code null}</li>
                      <li>{@code false} if{@code ((String)env.get(prop)).equalsIgnoreCase("false")}is {@code true}</li>
                      <li>{@code true} if{@code ((String)env.get(prop)).equalsIgnoreCase("true")}is {@code true}</li>
                      </ul>                    
                </return>
                <throws>
                    IllegalArgumentException if {@code env} is {@code null} or{@code env.get(prop)} is not {@code null} and{@code ((String)env.get(prop)).equalsIgnoreCase("false")} and{@code ((String)env.get(prop)).equalsIgnoreCase("true")} are{@code false}.                    
                </throws>
                <throws>
                    ClassCastException if {@code env.get(prop)} cannot be cast
                      to {@code String}.                    
                </throws>
            </javadoc>
            <method name="computeBooleanFromString" type="boolean" line="694">
                <params>
                    <param name="env" type="Map<String,?>"/>
                    <param name="prop" type="String"/>
                    <param name="systemProperty" type="boolean"/>
                </params>
                <comment line="699">
                    returns a default value of &apos;false&apos; if no property is found...                    
                </comment>
            </method>
            <javadoc line="703">
                Computes a boolean value from a string value retrieved from a
                  property in the given map.                
                <param>
                    env the environment map.                    
                </param>
                <param>
                    prop the name of the property in the environment map whose
                      returned string value must be converted into a boolean value.                    
                </param>
                <param>
                    systemProperty if true, consult a system property of the
                      same name if there is no entry in the environment map.                    
                </param>
                <param>
                    defaultValue a default value to return in case no property
                      was defined.                    
                </param>
                <return>
                    <ul>
                      <li>{@code defaultValue} if {@code env.get(prop)} is {@code null}and {@code systemProperty} is {@code false}</li>
                      <li>{@code defaultValue} if {@code env.get(prop)} is {@code null}and {@code systemProperty} is {@code true} and{@code System.getProperty(prop)} is {@code null}</li>
                      <li>{@code false} if {@code env.get(prop)} is {@code null}and {@code systemProperty} is {@code true} and{@code System.getProperty(prop).equalsIgnoreCase("false")}is {@code true}</li>
                      <li>{@code true} if {@code env.get(prop)} is {@code null}and {@code systemProperty} is {@code true} and{@code System.getProperty(prop).equalsIgnoreCase("true")}is {@code true}</li>
                      <li>{@code false} if{@code ((String)env.get(prop)).equalsIgnoreCase("false")}is {@code true}</li>
                      <li>{@code true} if{@code ((String)env.get(prop)).equalsIgnoreCase("true")}is {@code true}</li>
                      </ul>                    
                </return>
                <throws>
                    IllegalArgumentException if {@code env} is {@code null} or{@code env.get(prop)} is not {@code null} and{@code ((String)env.get(prop)).equalsIgnoreCase("false")} and{@code ((String)env.get(prop)).equalsIgnoreCase("true")} are{@code false}.                    
                </throws>
                <throws>
                    ClassCastException if {@code env.get(prop)} cannot be cast
                      to {@code String}.                    
                </throws>
            </javadoc>
            <method name="computeBooleanFromString" type="boolean" line="748">
                <params>
                    <param name="env" type="Map<String,?>"/>
                    <param name="prop" type="String"/>
                    <param name="systemProperty" type="boolean"/>
                    <param name="defaultValue" type="boolean"/>
                </params>
                <declaration name="stringBoolean" type="String" line="753"/>
                <scope line="754"/>
            </method>
            <javadoc line="771">
                Converts a map into a valid hash table, i.e.
                  it removes all the &apos;null&apos; values from the map.                
            </javadoc>
            <method name="mapToHashtable" type="Hashtable<K,V>" line="775">
                <params>
                    <param name="map" type="Map<K,V>"/>
                </params>
                <declaration name="m" type="HashMap&lt;K,V&gt;" line="776"/>
            </method>
            <declaration name="JMX_SERVER_DAEMON" type="String" line="783"/>
            <javadoc line="783">
                &lt;p&gt;Name of the attribute that specifies whether a connector server
                  should not prevent the VM from exiting                
            </javadoc>
            <javadoc line="789">
                Returns true if {@value SERVER_DAEMON} is specified in the {@code env}as a key and its value is a String and it is equal to true ignoring case.                
                <param>
                    env                    
                </param>
                <return>
                                        
                </return>
            </javadoc>
            <method name="isServerDaemon" type="boolean" line="796">
                <params>
                    <param name="env" type="Map<String,?>"/>
                </params>
            </method>
            <class name="SinkOutputStream" line="801">
                <extends class="OutputStream"/>
                <comment line="510">
                    This list is copied directly from the spec, plus
                    java.naming.security..  Most of the attributes here would have
                    been eliminated from the map anyway because they are typically
                    not serializable.  But just in case they are, we list them here                    
                </comment>
                <method name="write" type="void" line="802">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="803">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="logger" type="ClassLogger" line="806"/>
        </class>
    </source>