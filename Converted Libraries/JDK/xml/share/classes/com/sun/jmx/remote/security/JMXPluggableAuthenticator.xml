<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.remote.security">
        <import package="java.io.IOException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.Principal"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.Properties"/>
        <import package="javax.management.remote.JMXPrincipal"/>
        <import package="javax.management.remote.JMXAuthenticator"/>
        <import package="javax.security.auth.AuthPermission"/>
        <import package="javax.security.auth.Subject"/>
        <import package="javax.security.auth.callback"/>
        <import package="javax.security.auth.login.AppConfigurationEntry"/>
        <import package="javax.security.auth.login.Configuration"/>
        <import package="javax.security.auth.login.LoginContext"/>
        <import package="javax.security.auth.login.LoginException"/>
        <import package="javax.security.auth.spi.LoginModule"/>
        <import package="com.sun.jmx.remote.util.ClassLogger"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <class name="JMXPluggableAuthenticator" line="24">
            <implements interface="JMXAuthenticator"/>
            <javadoc line="24">
                &lt;p&gt;This class represents a
                  &lt;a href=&quot;{@docRoot}/../guide/security/jaas/JAASRefGuide.html&quot;&gt;JAAS&lt;/a&gt;
                  based implementation of the {@link JMXAuthenticator} interface.&lt;/p&gt;
                  &lt;p&gt;Authentication is performed by passing the supplied user&apos;s credentials
                  to one or more authentication mechanisms ({@link LoginModule}) for
                  verification. An authentication mechanism acquires the user&apos;s credentials
                  by calling {@link NameCallback} and/or {@link PasswordCallback}.
                  If authentication is successful then an authenticated {@link Subject}filled in with a {@link Principal} is returned.  Authorization checks
                  will then be performed based on this &lt;code&gt;Subject&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;By default, a single file-based authentication mechanism{@link FileLoginModule} is configured (&lt;code&gt;FileLoginConfig&lt;/code&gt;).&lt;/p&gt;
                  &lt;p&gt;To override the default configuration use the
                  &lt;code&gt;com.sun.management.jmxremote.login.config&lt;/code&gt; management property
                  described in the JRE/lib/management/management.properties file.
                  Set this property to the name of a JAAS configuration entry and ensure that
                  the entry is loaded by the installed {@link Configuration}. In addition,
                  ensure that the authentication mechanisms specified in the entry acquire
                  the user&apos;s credentials by calling {@link NameCallback} and{@link PasswordCallback} and that they return a {@link Subject} filled-in
                  with a {@link Principal}, for those users that are successfully
                  authenticated.&lt;/p&gt;                
            </javadoc>
            <javadoc line="46">
                Creates an instance of &lt;code&gt;JMXPluggableAuthenticator&lt;/code&gt;
                  and initializes it with a {@link LoginContext}.                
                <param>
                    env the environment containing configuration properties for the
                      authenticator. Can be null, which is equivalent to an empty
                      Map.                    
                </param>
                <exception>
                    SecurityException if the authentication mechanism cannot be
                      initialized.                    
                </exception>
            </javadoc>
            <method name="JMXPluggableAuthenticator" type="constructor" line="55">
                <params>
                    <param name="env" type="Map<?,?>"/>
                </params>
                <declaration name="loginConfigName" type="String" line="56"/>
                <declaration name="passwordFile" type="String" line="57"/>
                <scope line="58"/>
                <scope line="62">
                    <scope line="63"/>
                    <scope line="66">
                        <declaration name="sm" type="SecurityManager" line="67"/>
                        <scope line="68"/>
                        <declaration name="pf" type="String" line="71"/>
                        <scope line="72">
                            <anonymous_class line="73">
                                <method name="run" type="LoginContext" line="74"/>
                            </anonymous_class>
                        </scope>
                        <scope line="80"/>
                    </scope>
                </scope>
                <scope line="85"/>
                <scope line="88"/>
            </method>
            <javadoc line="92">
                Authenticate the &lt;code&gt;MBeanServerConnection&lt;/code&gt; client
                  with the given client credentials.                
                <param>
                    credentials the user-defined credentials to be passed in
                      to the server in order to authenticate the user before creating
                      the <code>MBeanServerConnection</code>.  This parameter must
                      be a two-element <code>String[]</code> containing the client's
                      username and password in that order.                    
                </param>
                <return>
                    the authenticated subject containing a
                      <code>JMXPrincipal(username)</code>.                    
                </return>
                <exception>
                    SecurityException if the server cannot authenticate the user
                      with the provided credentials.                    
                </exception>
            </javadoc>
            <method name="authenticate" type="Subject" line="105">
                <params>
                    <param name="credentials" type="Object"/>
                </params>
                <scope line="106">
                    <declaration name="message" type="String" line="108"/>
                </scope>
                <declaration name="aCredentials" type="String[]" line="111"/>
                <scope line="112">
                    <declaration name="message" type="String" line="113"/>
                </scope>
                <scope line="118">
                    <declaration name="message" type="String" line="119"/>
                </scope>
                <scope line="122">
                    <declaration name="subject" type="Subject" line="124"/>
                    <anonymous_class line="125">
                        <method name="run" type="Void" line="126"/>
                    </anonymous_class>
                </scope>
                <scope line="134"/>
            </method>
            <method name="authenticationFailure" type="void" line="139">
                <params>
                    <param name="method" type="String"/>
                    <param name="message" type="String"/>
                </params>
                <declaration name="msg" type="String" line="140"/>
                <declaration name="e" type="SecurityException" line="141"/>
            </method>
            <method name="authenticationFailure" type="void" line="145">
                <params>
                    <param name="method" type="String"/>
                    <param name="exception" type="Exception"/>
                </params>
                <declaration name="msg" type="String" line="146"/>
                <declaration name="se" type="SecurityException" line="147"/>
                <scope line="148"/>
                <scope line="152">
                    <declaration name="e" type="SecurityException" line="154"/>
                </scope>
            </method>
            <method name="logException" type="void" line="161">
                <params>
                    <param name="method" type="String"/>
                    <param name="message" type="String"/>
                    <param name="e" type="Exception"/>
                </params>
                <scope line="162"/>
                <scope line="165"/>
            </method>
            <declaration name="loginContext" type="LoginContext" line="169"/>
            <declaration name="username" type="String" line="170"/>
            <declaration name="password" type="String" line="171"/>
            <declaration name="LOGIN_CONFIG_PROP" type="String" line="172"/>
            <declaration name="LOGIN_CONFIG_NAME" type="String" line="173"/>
            <declaration name="PASSWORD_FILE_PROP" type="String" line="174"/>
            <declaration name="logger" type="ClassLogger" line="175"/>
            <class name="JMXCallbackHandler" line="176">
                <implements interface="CallbackHandler"/>
                <javadoc line="176">
                    This callback handler supplies the username and password (which was
                      originally supplied by the JMX user) to the JAAS login module performing
                      the authentication. No interactive user prompting is required because the
                      credentials are already available to this class (via its enclosing class).                    
                </javadoc>
                <javadoc line="183">
                    Sets the username and password in the appropriate Callback object.                    
                </javadoc>
                <method name="handle" type="void" line="186">
                    <params>
                        <param name="callbacks" type="Callback[]"/>
                    </params>
                    <scope line="187">
                        <scope line="188"/>
                        <scope line="191"/>
                        <scope line="194"/>
                    </scope>
                </method>
            </class>
            <class name="FileLoginConfig" line="200">
                <extends class="Configuration"/>
                <javadoc line="200">
                    This class defines the JAAS configuration for file-based authentication.
                      It is equivalent to the following textual configuration entry:
                      &lt;pre&gt;
                      JMXPluggableAuthenticator {
                      com.sun.jmx.remote.security.FileLoginModule required;
                      };
                      &lt;/pre&gt;                    
                </javadoc>
                <declaration name="entries" type="AppConfigurationEntry[]" line="210"/>
                <declaration name="FILE_LOGIN_MODULE" type="String" line="211"/>
                <declaration name="PASSWORD_FILE_OPTION" type="String" line="212"/>
                <javadoc line="213">
                    Creates an instance of &lt;code&gt;FileLoginConfig&lt;/code&gt;                    
                    <param>
                        passwordFile A filepath that identifies the password file to use.
                          If null then the default password file is used.                        
                    </param>
                </javadoc>
                <method name="FileLoginConfig" type="constructor" line="218">
                    <params>
                        <param name="passwordFile" type="String"/>
                    </params>
                    <declaration name="options" type="Map&lt;String,String&gt;" line="219"/>
                    <scope line="220"/>
                    <scope line="224"/>
                </method>
                <javadoc line="229">
                    Gets the JAAS configuration for file-based authentication                    
                </javadoc>
                <method name="getAppConfigurationEntry" type="AppConfigurationEntry[]" line="232">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <javadoc line="235">
                    Refreshes the configuration.                    
                </javadoc>
                <method name="refresh" type="void" line="238"/>
            </class>
        </class>
    </source>