<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="com.sun.jmx.interceptor.DefaultMBeanServerInterceptor"/>
        <import package="com.sun.jmx.interceptor.MBeanServerInterceptor"/>
        <import package="com.sun.jmx.defaults.JmxProperties.MBEANSERVER_LOGGER"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.Attribute"/>
        <import package="javax.management.AttributeList"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.IntrospectionException"/>
        <import package="javax.management.InvalidAttributeValueException"/>
        <import package="javax.management.ListenerNotFoundException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.MBeanPermission"/>
        <import package="javax.management.MBeanRegistrationException"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanServerDelegate"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.NotificationFilter"/>
        <import package="javax.management.NotificationListener"/>
        <import package="javax.management.ObjectInstance"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.OperationsException"/>
        <import package="javax.management.QueryExp"/>
        <import package="javax.management.ReflectionException"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <import package="javax.management.loading.ClassLoaderRepository"/>
        <class name="JmxMBeanServer" line="36">
            <implements interface="SunJmxMBeanServer"/>
            <javadoc line="36">
                This is the base class for MBean manipulation on the agent side. It
                  contains the methods necessary for the creation, registration, and
                  deletion of MBeans as well as the access methods for registered MBeans.
                  This is the core component of the JMX infrastructure.
                  &lt;P&gt;
                  Every MBean which is added to the MBean server becomes manageable:
                  its attributes and operations become remotely accessible through
                  the connectors/adaptors connected to that MBean server.
                  A Java object cannot be registered in the MBean server unless it is a
                  JMX compliant MBean.
                  &lt;P&gt;
                  When an MBean is registered or unregistered in the MBean server an{@link javax.management.MBeanServerNotification MBeanServerNotification}Notification is emitted. To register an object as listener to
                  MBeanServerNotifications you should call the MBean server method{@link #addNotificationListener addNotificationListener} with
                  the &lt;CODE&gt;ObjectName&lt;/CODE&gt; of the{@link javax.management.MBeanServerDelegate MBeanServerDelegate}.
                  This &lt;CODE&gt;ObjectName&lt;/CODE&gt; is:
                  &lt;BR&gt;
                  &lt;CODE&gt;JMImplementation:type=MBeanServerDelegate&lt;/CODE&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_FAIR_LOCK_POLICY" type="boolean" line="57"/>
            <javadoc line="57">
                Control the default locking policy of the repository.
                  By default, we will be using a fair locking policy.                
            </javadoc>
            <declaration name="instantiator" type="MBeanInstantiator" line="62"/>
            <declaration name="secureClr" type="SecureClassLoaderRepository" line="63"/>
            <declaration name="interceptorsEnabled" type="boolean" line="64"/>
            <javadoc line="64">
                true if interceptors are enabled                
            </javadoc>
            <declaration name="outerShell" type="MBeanServer" line="68"/>
            <declaration name="mbsInterceptor" type="MBeanServer" line="69"/>
            <declaration name="mBeanServerDelegateObject" type="MBeanServerDelegate" line="70"/>
            <javadoc line="70">
                The MBeanServerDelegate object representing the MBean Server                
            </javadoc>
            <javadoc line="74">
                &lt;b&gt;Package:&lt;/b&gt; Creates an MBeanServer with the
                  specified default domain name, outer interface, and delegate.
                  &lt;p&gt;The default domain name is used as the domain part in the ObjectName
                  of MBeans if no domain is specified by the user.
                  &lt;ul&gt;&lt;b&gt;Note:&lt;/b&gt;Using this constructor directly is strongly
                  discouraged. You should use{@link javax.management.MBeanServerFactory#createMBeanServer(java.lang.String)}or{@link javax.management.MBeanServerFactory#newMBeanServer(java.lang.String)}instead.
                  &lt;p&gt;
                  By default, interceptors are disabled. Use{@link #JmxMBeanServer(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,boolean)} to enable them.
                  &lt;/ul&gt;                
                <param>
                    domain The default domain name used by this MBeanServer.                    
                </param>
                <param>
                    outer A pointer to the MBeanServer object that must be
                      passed to the MBeans when invoking their{@link javax.management.MBeanRegistration} interface.                    
                </param>
                <param>
                    delegate A pointer to the MBeanServerDelegate associated
                      with the new MBeanServer. The new MBeanServer must register
                      this MBean in its MBean repository.                    
                </param>
                <exception>
                    IllegalArgumentException if the instantiator is null.                    
                </exception>
            </javadoc>
            <method name="JmxMBeanServer" type="constructor" line="92">
                <params>
                    <param name="domain" type="String"/>
                    <param name="outer" type="MBeanServer"/>
                    <param name="delegate" type="MBeanServerDelegate"/>
                </params>
            </method>
            <javadoc line="95">
                &lt;b&gt;Package:&lt;/b&gt; Creates an MBeanServer with the
                  specified default domain name, outer interface, and delegate.
                  &lt;p&gt;The default domain name is used as the domain part in the ObjectName
                  of MBeans if no domain is specified by the user.
                  &lt;ul&gt;&lt;b&gt;Note:&lt;/b&gt;Using this constructor directly is strongly
                  discouraged. You should use{@link javax.management.MBeanServerFactory#createMBeanServer(java.lang.String)}or{@link javax.management.MBeanServerFactory#newMBeanServer(java.lang.String)}instead.
                  &lt;/ul&gt;                
                <param>
                    domain The default domain name used by this MBeanServer.                    
                </param>
                <param>
                    outer A pointer to the MBeanServer object that must be
                      passed to the MBeans when invoking their{@link javax.management.MBeanRegistration} interface.                    
                </param>
                <param>
                    delegate A pointer to the MBeanServerDelegate associated
                      with the new MBeanServer. The new MBeanServer must register
                      this MBean in its MBean repository.                    
                </param>
                <param>
                    interceptors If <code>true</code>,{@link MBeanServerInterceptor} will be enabled (default is
                      <code>false</code>)
                      Note: this parameter is not taken into account by this
                      implementation - the default value <code>false</code> is
                      always used.                    
                </param>
                <exception>
                    IllegalArgumentException if the instantiator is null.                    
                </exception>
            </javadoc>
            <method name="JmxMBeanServer" type="constructor" line="116">
                <params>
                    <param name="domain" type="String"/>
                    <param name="outer" type="MBeanServer"/>
                    <param name="delegate" type="MBeanServerDelegate"/>
                    <param name="interceptors" type="boolean"/>
                </params>
            </method>
            <javadoc line="119">
                &lt;b&gt;Package:&lt;/b&gt; Creates an MBeanServer.                
                <param>
                    domain The default domain name used by this MBeanServer.                    
                </param>
                <param>
                    outer A pointer to the MBeanServer object that must be
                      passed to the MBeans when invoking their{@link javax.management.MBeanRegistration} interface.                    
                </param>
                <param>
                    delegate A pointer to the MBeanServerDelegate associated
                      with the new MBeanServer. The new MBeanServer must register
                      this MBean in its MBean repository.                    
                </param>
                <param>
                    instantiator The MBeanInstantiator that will be used to
                      instantiate MBeans and take care of class loading issues.                    
                </param>
                <param>
                    metadata The MetaData object that will be used by the
                      MBean server in order to invoke the MBean interface of
                      the registered MBeans.                    
                </param>
                <param>
                    interceptors If <code>true</code>,{@link MBeanServerInterceptor} will be enabled (default is
                      <code>false</code>).                    
                </param>
            </javadoc>
            <method name="JmxMBeanServer" type="constructor" line="135">
                <params>
                    <param name="domain" type="String"/>
                    <param name="outer" type="MBeanServer"/>
                    <param name="delegate" type="MBeanServerDelegate"/>
                    <param name="instantiator" type="MBeanInstantiator"/>
                    <param name="interceptors" type="boolean"/>
                </params>
            </method>
            <javadoc line="138">
                &lt;b&gt;Package:&lt;/b&gt; Creates an MBeanServer.                
                <param>
                    domain The default domain name used by this MBeanServer.                    
                </param>
                <param>
                    outer A pointer to the MBeanServer object that must be
                      passed to the MBeans when invoking their{@link javax.management.MBeanRegistration} interface.                    
                </param>
                <param>
                    delegate A pointer to the MBeanServerDelegate associated
                      with the new MBeanServer. The new MBeanServer must register
                      this MBean in its MBean repository.                    
                </param>
                <param>
                    instantiator The MBeanInstantiator that will be used to
                      instantiate MBeans and take care of class loading issues.                    
                </param>
                <param>
                    metadata The MetaData object that will be used by the
                      MBean server in order to invoke the MBean interface of
                      the registered MBeans.                    
                </param>
                <param>
                    interceptors If <code>true</code>,{@link MBeanServerInterceptor} will be enabled (default is
                      <code>false</code>).                    
                </param>
                <param>
                    fairLock If {@code true}, the MBean repository will use a {@link java.util.concurrent.locks.ReentrantReadWriteLock#ReentrantReadWriteLock(boolean)fair locking} policy.                    
                </param>
            </javadoc>
            <method name="JmxMBeanServer" type="constructor" line="155">
                <params>
                    <param name="domain" type="String"/>
                    <param name="outer" type="MBeanServer"/>
                    <param name="delegate" type="MBeanServerDelegate"/>
                    <param name="instantiator" type="MBeanInstantiator"/>
                    <param name="interceptors" type="boolean"/>
                    <param name="fairLock" type="boolean"/>
                </params>
                <scope line="156">
                    <declaration name="clr" type="ModifiableClassLoaderRepository" line="157"/>
                </scope>
                <declaration name="repository" type="Repository" line="166"/>
            </method>
            <javadoc line="171">
                Tell whether {@link MBeanServerInterceptor}s are enabled on this
                  object.                
                <return>
                    <code>true</code> if {@link MBeanServerInterceptor}s are
                      enabled.                    
                </return>
                <see>
                    #newMBeanServer(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,boolean)                    
                </see>
            </javadoc>
            <method name="interceptorsEnabled" type="boolean" line="178"/>
            <javadoc line="181">
                Return the MBeanInstantiator associated to this MBeanServer.                
                <exception>
                    UnsupportedOperationException if{@link MBeanServerInterceptor}s
                      are not enabled on this object.                    
                </exception>
                <see>
                    #interceptorsEnabled                    
                </see>
            </javadoc>
            <method name="getMBeanInstantiator" type="MBeanInstantiator" line="187"/>
            <javadoc line="191">
                Instantiates and registers an MBean in the MBean server.
                  The MBean server will use its{@link javax.management.loading.ClassLoaderRepository Default Loader Repository}to load the class of the MBean.
                  An object name is associated to the MBean.
                  If the object name given is null, the MBean can automatically
                  provide its own name by implementing the{@link javax.management.MBeanRegistration MBeanRegistration} interface.
                  The call returns an &lt;CODE&gt;ObjectInstance&lt;/CODE&gt; object representing
                  the newly created MBean.                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <return>
                    An <CODE>ObjectInstance</CODE>, containing the
                      <CODE>ObjectName</CODE> and the Java class name of the newly
                      instantiated MBean.                    
                </return>
                <exception>
                    ReflectionException Wraps an
                      <CODE>{@link java.lang.ClassNotFoundException}</CODE> or an
                      <CODE>{@link java.lang.Exception}</CODE> that occurred
                      when trying to invoke the MBean's constructor.                    
                </exception>
                <exception>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </exception>
                <exception>
                    MBeanRegistrationException The <CODE>preRegister()</CODE>
                      (<CODE>MBeanRegistration</CODE> interface) method of the MBean
                      has thrown an exception. The MBean will not be registered.                    
                </exception>
                <exception>
                    MBeanException The constructor of the MBean has thrown
                      an exception.                    
                </exception>
                <exception>
                    NotCompliantMBeanException This class is not a JMX
                      compliant MBean.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>:
                      The className passed in parameter is null, the
                      <CODE>ObjectName</CODE> passed in parameter contains a pattern
                      or no <CODE>ObjectName</CODE> is specified for the MBean.                    
                </exception>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="223">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="226">
                Instantiates and registers an MBean in the MBean server.
                  The class loader to be used is identified by its object  name.
                  An object name is associated to the MBean.
                  If the object name  of the loader is null, the ClassLoader that
                  loaded the MBean server will be used.
                  If the MBean&apos;s object name given is null, the MBean can
                  automatically provide its own name by implementing the{@link javax.management.MBeanRegistration MBeanRegistration} interface.
                  The call returns an &lt;CODE&gt;ObjectInstance&lt;/CODE&gt; object representing
                  the newly created MBean.                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <return>
                    An <CODE>ObjectInstance</CODE>, containing the
                      <CODE>ObjectName</CODE> and the Java class name
                      of the newly instantiated MBean.                    
                </return>
                <exception>
                    ReflectionException  Wraps an
                      <CODE>{@link java.lang.ClassNotFoundException}</CODE> or an
                      <CODE>{@link java.lang.Exception}</CODE> that occurred when trying
                      to invoke the MBean's constructor.                    
                </exception>
                <exception>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </exception>
                <exception>
                    MBeanRegistrationException The <CODE>preRegister()</CODE>
                      (<CODE>MBeanRegistration</CODE>  interface) method of the MBean
                      has thrown an exception. The MBean will not be registered.                    
                </exception>
                <exception>
                    MBeanException The constructor of the MBean has thrown
                      an exception                    
                </exception>
                <exception>
                    NotCompliantMBeanException This class is not a JMX
                      compliant MBean.                    
                </exception>
                <exception>
                    InstanceNotFoundException The specified class loader
                      is not registered in the MBean server.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
                      className passed in parameter is null, the <CODE>ObjectName</CODE>
                      passed in parameter contains a pattern or no
                      <CODE>ObjectName</CODE> is specified for the MBean.                    
                </exception>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="263">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="loaderName" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="266">
                Instantiates and registers an MBean in the MBean server.
                  The MBean server will use its{@link javax.management.loading.ClassLoaderRepository Default Loader Repository}to load the class of the MBean.
                  An object name is associated to the MBean.
                  If the object name given is null, the MBean can automatically
                  provide its own name by implementing the{@link javax.management.MBeanRegistration MBeanRegistration} interface.
                  The call returns an &lt;CODE&gt;ObjectInstance&lt;/CODE&gt; object representing
                  the newly created MBean.                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <param>
                    params An array containing the parameters of the constructor
                      to be invoked.                    
                </param>
                <param>
                    signature An array containing the signature of the
                      constructor to be invoked.                    
                </param>
                <return>
                    An <CODE>ObjectInstance</CODE>, containing the
                      <CODE>ObjectName</CODE> and the Java class name
                      of the newly instantiated MBean.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      <CODE>{@link java.lang.ClassNotFoundException}</CODE> or an
                      <CODE>{@link java.lang.Exception}</CODE> that occurred
                      when trying to invoke the MBean's constructor.                    
                </exception>
                <exception>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </exception>
                <exception>
                    MBeanRegistrationException The <CODE>preRegister()</CODE>
                      (<CODE>MBeanRegistration</CODE>  interface) method of the MBean
                      has thrown an exception. The MBean will not be registered.                    
                </exception>
                <exception>
                    MBeanException The constructor of the MBean has
                      thrown an exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
                      className passed in parameter is null, the <CODE>ObjectName</CODE>
                      passed in parameter contains a pattern or no
                      <CODE>ObjectName</CODE> is specified for the MBean.                    
                </exception>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="300">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                </params>
            </method>
            <javadoc line="303">
                Instantiates and registers an MBean in the MBean server.
                  The class loader to be used is identified by its object name.
                  An object name is associated to the MBean. If the object name
                  of the loader is not specified, the ClassLoader that loaded the
                  MBean server will be used.
                  If  the MBean object name given is null, the MBean can automatically
                  provide its own name by implementing the{@link javax.management.MBeanRegistration MBeanRegistration} interface.
                  The call returns an &lt;CODE&gt;ObjectInstance&lt;/CODE&gt; object representing
                  the newly created MBean.                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <param>
                    params An array containing the parameters of the constructor
                      to be invoked.                    
                </param>
                <param>
                    signature An array containing the signature of the
                      constructor to be invoked.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <return>
                    An <CODE>ObjectInstance</CODE>, containing the
                      <CODE>ObjectName</CODE> and the Java class name of the newly
                      instantiated MBean.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      <CODE>{@link java.lang.ClassNotFoundException}</CODE> or an
                      <CODE>{@link java.lang.Exception}</CODE>
                      that occurred when trying to invoke the MBean's constructor.                    
                </exception>
                <exception>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </exception>
                <exception>
                    MBeanRegistrationException The <CODE>preRegister()</CODE>
                      (<CODE>MBeanRegistration</CODE>  interface) method of the MBean
                      has thrown an exception. The MBean will not be registered.                    
                </exception>
                <exception>
                    MBeanException The constructor of the MBean has
                      thrown an exception                    
                </exception>
                <exception>
                    InstanceNotFoundException The specified class loader is
                      not registered in the MBean server.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
                      className passed in parameter is null, the <CODE>ObjectName</CODE>
                      passed in parameter contains a pattern or no
                      <CODE>ObjectName</CODE> is specified for the MBean.                    
                </exception>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="342">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                </params>
            </method>
            <javadoc line="345">
                Registers a pre-existing object as an MBean with the MBean server.
                  If the object name given is null, the MBean may automatically
                  provide its own name by implementing the{@link javax.management.MBeanRegistration MBeanRegistration}  interface.
                  The call returns an &lt;CODE&gt;ObjectInstance&lt;/CODE&gt; object representing
                  the registered MBean.                
                <param>
                    object The  MBean to be registered as an MBean.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <return>
                    The <CODE>ObjectInstance</CODE> for the MBean that has been
                      registered.                    
                </return>
                <exception>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </exception>
                <exception>
                    MBeanRegistrationException The <CODE>preRegister()</CODE>
                      (<CODE>MBeanRegistration</CODE>  interface) method of the MBean
                      has thrown an exception. The MBean will not be registered.                    
                </exception>
                <exception>
                    NotCompliantMBeanException This object is not a JMX
                      compliant MBean                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
                      object passed in parameter is null or no object name is specified.                    
                </exception>
            </javadoc>
            <method name="registerMBean" type="ObjectInstance" line="366">
                <params>
                    <param name="object" type="Object"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="369">
                De-registers an MBean from the MBean server. The MBean is identified by
                  its object name. Once the method has been invoked, the MBean may
                  no longer be accessed by its object name.                
                <param>
                    name The object name of the MBean to be de-registered.                    
                </param>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
                <exception>
                    MBeanRegistrationException The <code>preDeregister()</code>
                      (<CODE>MBeanRegistration</CODE>  interface) method of the MBean
                      has thrown an exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
                      object name in parameter is null or the MBean you are when
                      trying to de-register is the{@link javax.management.MBeanServerDelegate MBeanServerDelegate}MBean.                    
                </exception>
            </javadoc>
            <method name="unregisterMBean" type="void" line="384">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="387">
                Gets the &lt;CODE&gt;ObjectInstance&lt;/CODE&gt; for a given MBean registered
                  with the MBean server.                
                <param>
                    name The object name of the MBean.                    
                </param>
                <return>
                    The <CODE>ObjectInstance</CODE> associated to the MBean
                      specified by <VAR>name</VAR>.                    
                </return>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
            </javadoc>
            <method name="getObjectInstance" type="ObjectInstance" line="396">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="399">
                Gets MBeans controlled by the MBean server. This method allows any
                  of the following to be obtained: All MBeans, a set of MBeans specified
                  by pattern matching on the &lt;CODE&gt;ObjectName&lt;/CODE&gt; and/or a Query
                  expression, a specific MBean. When the object name is null or no
                  domain and key properties are specified, all objects are to be
                  selected (and filtered if a query is specified). It returns the
                  set of &lt;CODE&gt;ObjectInstance&lt;/CODE&gt; objects (containing the
                  &lt;CODE&gt;ObjectName&lt;/CODE&gt; and the Java Class name) for
                  the selected MBeans.                
                <param>
                    name The object name pattern identifying the MBeans to
                      be retrieved. If null or or no domain and key properties
                      are specified, all the MBeans registered will be retrieved.                    
                </param>
                <param>
                    query The query expression to be applied for selecting
                      MBeans. If null no query expression will be applied for
                      selecting MBeans.                    
                </param>
                <return>
                    A set containing the <CODE>ObjectInstance</CODE> objects
                      for the selected MBeans.
                      If no MBean satisfies the query an empty list is returned.                    
                </return>
            </javadoc>
            <method name="queryMBeans" type="Set<ObjectInstance>" line="419">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
            </method>
            <javadoc line="422">
                Gets the names of MBeans controlled by the MBean server. This method
                  enables any of the following to be obtained: The names of all MBeans,
                  the names of a set of MBeans specified by pattern matching on the
                  &lt;CODE&gt;ObjectName&lt;/CODE&gt; and/or a Query expression, a specific
                  MBean name (equivalent to testing whether an MBean is registered).
                  When the object name is null or or no domain and key properties are
                  specified, all objects are selected (and filtered if a query is
                  specified). It returns the set of ObjectNames for the MBeans
                  selected.                
                <param>
                    name The object name pattern identifying the MBeans to be
                      retrieved. If null or no domain and key properties are
                      specified, all the MBeans registered will be retrieved.                    
                </param>
                <param>
                    query The query expression to be applied for selecting
                      MBeans. If null no query expression will be applied for
                      selecting MBeans.                    
                </param>
                <return>
                    A set containing the ObjectNames for the MBeans selected.
                      If no MBean satisfies the query, an empty list is returned.                    
                </return>
            </javadoc>
            <method name="queryNames" type="Set<ObjectName>" line="441">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
            </method>
            <javadoc line="444">
                Checks whether an MBean, identified by its object name, is already
                  registered with the MBean server.                
                <param>
                    name The object name of the MBean to be checked.                    
                </param>
                <return>
                    True if the MBean is already registered in the MBean server,
                      false otherwise.                    
                </return>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The object
                      name in parameter is null.                    
                </exception>
            </javadoc>
            <method name="isRegistered" type="boolean" line="454">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="457">
                Returns the number of MBeans registered in the MBean server.                
            </javadoc>
            <method name="getMBeanCount" type="Integer" line="460"/>
            <javadoc line="463">
                Gets the value of a specific attribute of a named MBean. The MBean
                  is identified by its object name.                
                <param>
                    name The object name of the MBean from which the attribute
                      is to be retrieved.                    
                </param>
                <param>
                    attribute A String specifying the name of the attribute to be
                      retrieved.                    
                </param>
                <return>
                    The value of the retrieved attribute.                    
                </return>
                <exception>
                    AttributeNotFoundException The attribute specified
                      is not accessible in the MBean.                    
                </exception>
                <exception>
                    MBeanException  Wraps an exception thrown by the
                      MBean's getter.                    
                </exception>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
                <exception>
                    ReflectionException  Wraps an
                      <CODE>{@link java.lang.Exception}</CODE> thrown when trying to
                      invoke the setter.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>:
                      The object name in parameter is null or the attribute in
                      parameter is null.                    
                </exception>
            </javadoc>
            <method name="getAttribute" type="Object" line="485">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                </params>
            </method>
            <javadoc line="488">
                Enables the values of several attributes of a named MBean. The MBean
                  is identified by its object name.                
                <param>
                    name The object name of the MBean from which the attributes are
                      retrieved.                    
                </param>
                <param>
                    attributes A list of the attributes to be retrieved.                    
                </param>
                <return>
                    The list of the retrieved attributes.                    
                </return>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
                <exception>
                    ReflectionException An exception occurred when trying
                      to invoke the getAttributes method of a Dynamic MBean.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wrap an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
                      object name in parameter is null or attributes in parameter
                      is null.                    
                </exception>
            </javadoc>
            <method name="getAttributes" type="AttributeList" line="504">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attributes" type="String[]"/>
                </params>
            </method>
            <javadoc line="507">
                Sets the value of a specific attribute of a named MBean. The MBean
                  is identified by its object name.                
                <param>
                    name The name of the MBean within which the attribute is
                      to be set.                    
                </param>
                <param>
                    attribute The identification of the attribute to be set
                      and the value it is to be set to.                    
                </param>
                <exception>
                    InstanceNotFoundException The MBean specified is
                      not registered in the MBean server.                    
                </exception>
                <exception>
                    AttributeNotFoundException The attribute specified is
                      not accessible in the MBean.                    
                </exception>
                <exception>
                    InvalidAttributeValueException The value specified for
                      the attribute is not valid.                    
                </exception>
                <exception>
                    MBeanException Wraps an exception thrown by the
                      MBean's setter.                    
                </exception>
                <exception>
                    ReflectionException  Wraps an
                      <CODE>{@link java.lang.Exception}</CODE> thrown when trying
                      to invoke the setter.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
                      object name in parameter is null or the attribute in parameter
                      is null.                    
                </exception>
            </javadoc>
            <method name="setAttribute" type="void" line="530">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attribute" type="Attribute"/>
                </params>
            </method>
            <javadoc line="533">
                Sets the values of several attributes of a named MBean. The MBean is
                  identified by its object name.                
                <param>
                    name The object name of the MBean within which the
                      attributes are to  be set.                    
                </param>
                <param>
                    attributes A list of attributes: The identification of the
                      attributes to be set and  the values they are to be set to.                    
                </param>
                <return>
                    The list of attributes that were set, with their new values.                    
                </return>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
                <exception>
                    ReflectionException An exception occurred when trying
                      to invoke the getAttributes method of a Dynamic MBean.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>:
                      The object name in parameter is null or  attributes in
                      parameter is null.                    
                </exception>
            </javadoc>
            <method name="setAttributes" type="AttributeList" line="550">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attributes" type="AttributeList"/>
                </params>
            </method>
            <javadoc line="553">
                Invokes an operation on an MBean.                
                <param>
                    name The object name of the MBean on which the method is to be
                      invoked.                    
                </param>
                <param>
                    operationName The name of the operation to be invoked.                    
                </param>
                <param>
                    params An array containing the parameters to be set when
                      the operation is invoked                    
                </param>
                <param>
                    signature An array containing the signature of the operation.
                      The class objects will be loaded using the same class loader as
                      the one used for loading the MBean on which the operation was
                      invoked.                    
                </param>
                <return>
                    The object returned by the operation, which represents the
                      result ofinvoking the operation on the  MBean specified.                    
                </return>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
                <exception>
                    MBeanException  Wraps an exception thrown by the MBean's
                      invoked method.                    
                </exception>
                <exception>
                    ReflectionException  Wraps an
                      <CODE>{@link java.lang.Exception}</CODE> thrown while trying
                      to invoke the method.                    
                </exception>
            </javadoc>
            <method name="invoke" type="Object" line="574">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="operationName" type="String"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                </params>
            </method>
            <javadoc line="577">
                Returns the default domain used for naming the MBean.
                  The default domain name is used as the domain part in the ObjectName
                  of MBeans if no domain is specified by the user.                
            </javadoc>
            <method name="getDefaultDomain" type="String" line="582"/>
            <method name="getDomains" type="String[]" line="585"/>
            <javadoc line="588">
                Adds a listener to a registered MBean.                
                <param>
                    name The name of the MBean on which the listener should be added.                    
                </param>
                <param>
                    listener The listener object which will handle the
                      notifications emitted by the registered MBean.                    
                </param>
                <param>
                    filter The filter object. If filter is null, no filtering
                      will be performed before handling notifications.                    
                </param>
                <param>
                    handback The context to be sent to the listener when a
                      notification is emitted.                    
                </param>
                <exception>
                    InstanceNotFoundException The MBean name provided does
                      not match any of the registered MBeans.                    
                </exception>
            </javadoc>
            <method name="addNotificationListener" type="void" line="600">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <javadoc line="603">
                Adds a listener to a registered MBean.                
                <param>
                    name The name of the MBean on which the listener should be added.                    
                </param>
                <param>
                    listener The object name of the listener which will handle the
                      notifications emitted by the registered MBean.                    
                </param>
                <param>
                    filter The filter object. If filter is null, no filtering will
                      be performed before handling notifications.                    
                </param>
                <param>
                    handback The context to be sent to the listener when a
                      notification is emitted.                    
                </param>
                <exception>
                    InstanceNotFoundException The MBean name of the
                      notification listener or of the notification broadcaster
                      does not match any of the registered MBeans.                    
                </exception>
            </javadoc>
            <method name="addNotificationListener" type="void" line="616">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="ObjectName"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <method name="removeNotificationListener" type="void" line="619">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                </params>
            </method>
            <method name="removeNotificationListener" type="void" line="622">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <method name="removeNotificationListener" type="void" line="625">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="ObjectName"/>
                </params>
            </method>
            <method name="removeNotificationListener" type="void" line="628">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="ObjectName"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <javadoc line="631">
                This method discovers the attributes and operations that an MBean exposes
                  for management.                
                <param>
                    name The name of the MBean to analyze                    
                </param>
                <return>
                    An instance of <CODE>MBeanInfo</CODE> allowing the retrieval of
                      all attributes and operations of this MBean.                    
                </return>
                <exception>
                    IntrospectionException An exception occurs during
                      introspection.                    
                </exception>
                <exception>
                    InstanceNotFoundException The MBean specified is not found.                    
                </exception>
                <exception>
                    ReflectionException An exception occurred when trying to
                      invoke the getMBeanInfo of a Dynamic MBean.                    
                </exception>
            </javadoc>
            <method name="getMBeanInfo" type="MBeanInfo" line="643">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="646">
                Instantiates an object using the list of all class loaders registered
                  in the MBean server (using its{@link javax.management.loading.ClassLoaderRepository Default Loader Repository}).
                  The object&apos;s class should have a public constructor.
                  It returns a reference to the newly created object.
                  The newly created object is not registered in the MBean server.                
                <param>
                    className The class name of the object to be instantiated.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps the
                      <CODE>{@link java.lang.ClassNotFoundException}</CODE> or the
                      <CODE>{@link java.lang.Exception}</CODE> that
                      occurred when trying to invoke the object's constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has thrown
                      an exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>:
                      The className passed in parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="664">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <javadoc line="668">
                Instantiates an object using the class Loader specified by its
                  &lt;CODE&gt;ObjectName&lt;/CODE&gt;.
                  If the loader name is null, the ClassLoader that loaded the
                  MBean Server will be used.
                  The object&apos;s class should have a public constructor.
                  It returns a reference to the newly created object.
                  The newly created object is not registered in the MBean server.                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps the
                      <CODE>{@link java.lang.ClassNotFoundException}</CODE> or the
                      <CODE>{@link java.lang.Exception}</CODE> that
                      occurred when trying to invoke the object's constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has thrown
                      an exception.                    
                </exception>
                <exception>
                    InstanceNotFoundException The specified class loader
                      is not registered in the MBaenServer.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
                      className passed in parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="691">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                </params>
                <declaration name="myLoader" type="ClassLoader" line="693"/>
            </method>
            <javadoc line="696">
                Instantiates an object using the list of all class loaders registered
                  in the MBean server (using its{@link javax.management.loading.ClassLoaderRepository Default Loader Repository}).
                  The object&apos;s class should have a public constructor.
                  The call returns a reference to the newly created object.
                  The newly created object is not registered in the MBean server.                
                <param>
                    className The class name of the object to be instantiated.                    
                </param>
                <param>
                    params An array containing the parameters of the constructor
                      to be invoked.                    
                </param>
                <param>
                    signature An array containing the signature of the
                      constructor to be invoked.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps the
                      <CODE>{@link java.lang.ClassNotFoundException}</CODE> or the
                      <CODE>{@link java.lang.Exception}</CODE> that
                      occurred when trying to invoke the object's constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has thrown
                      an exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>:
                      The className passed in parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="718">
                <params>
                    <param name="className" type="String"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                </params>
                <declaration name="myLoader" type="ClassLoader" line="720"/>
            </method>
            <javadoc line="723">
                Instantiates an object. The class loader to be used is identified
                  by its object name. If the object name of the loader is null,
                  the ClassLoader that loaded the MBean server will be used.
                  The object&apos;s class should have a public constructor.
                  The call returns a reference to the newly created object.
                  The newly created object is not registered in the MBean server.                
                <param>
                    className The class name of the object to be instantiated.                    
                </param>
                <param>
                    params An array containing the parameters of the constructor
                      to be invoked.                    
                </param>
                <param>
                    signature An array containing the signature of the constructor
                      to be invoked.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps the
                      <CODE>{@link java.lang.ClassNotFoundException}</CODE> or the
                      <CODE>{@link java.lang.Exception}</CODE> that
                      occurred when trying to invoke the object's constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has thrown
                      an exception.                    
                </exception>
                <exception>
                    InstanceNotFoundException The specified class loader
                      is not registered in the MBean server.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      <CODE>{@link java.lang.IllegalArgumentException}</CODE>:
                      The className passed in parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="749">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                </params>
                <declaration name="myLoader" type="ClassLoader" line="751"/>
            </method>
            <javadoc line="754">
                Returns true if the MBean specified is an instance of the specified
                  class, false otherwise.                
                <param>
                    name The <CODE>ObjectName</CODE> of the MBean.                    
                </param>
                <param>
                    className The name of the class.                    
                </param>
                <return>
                    true if the MBean specified is an instance of the specified
                      class, false otherwise.                    
                </return>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
            </javadoc>
            <method name="isInstanceOf" type="boolean" line="764">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="className" type="String"/>
                </params>
            </method>
            <javadoc line="767">
                De-serializes a byte array in the context of the class loader
                  of an MBean.                
                <param>
                    name The name of the MBean whose class loader should
                      be used for the de-serialization.                    
                </param>
                <param>
                    data The byte array to be de-sererialized.                    
                </param>
                <return>
                    The de-serialized object stream.                    
                </return>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      found.                    
                </exception>
                <exception>
                    OperationsException Any of the usual Input/Output
                      related exceptions.                    
                </exception>
            </javadoc>
            <method name="deserialize" type="ObjectInputStream" line="779">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="loader" type="ClassLoader" line="780"/>
            </method>
            <javadoc line="783">
                De-serializes a byte array in the context of a given MBean class loader.
                  The class loader is the one that loaded the class with name &quot;className&quot;.                
                <param>
                    className The name of the class whose class loader should be
                      used for the de-serialization.                    
                </param>
                <param>
                    data The byte array to be de-sererialized.                    
                </param>
                <return>
                    The de-serialized object stream.                    
                </return>
                <exception>
                    OperationsException Any of the usual Input/Output
                      related exceptions.                    
                </exception>
                <exception>
                    ReflectionException The specified class could not be
                      loaded by the default loader repository                    
                </exception>
            </javadoc>
            <method name="deserialize" type="ObjectInputStream" line="795">
                <params>
                    <param name="className" type="String"/>
                    <param name="data" type="byte[]"/>
                </params>
                <scope line="796"/>
                <declaration name="clr" type="ClassLoaderRepository" line="799"/>
                <declaration name="theClass" type="Class&lt;?&gt;" line="800"/>
                <scope line="801"/>
                <scope line="805"/>
            </method>
            <javadoc line="810">
                De-serializes a byte array in the context of a given MBean class loader.
                  The class loader is the one that loaded the class with name &quot;className&quot;.
                  The name of the class loader to be used for loading the specified
                  class is specified.
                  If null, the MBean Server&apos;s class loader will be used.                
                <param>
                    className The name of the class whose class loader should be
                      used for the de-serialization.                    
                </param>
                <param>
                    data The byte array to be de-sererialized.                    
                </param>
                <param>
                    loaderName The name of the class loader to be used for
                      loading the specified class.
                      If null, the MBean Server's class loader will be used.                    
                </param>
                <return>
                    The de-serialized object stream.                    
                </return>
                <exception>
                    InstanceNotFoundException The specified class loader
                      MBean is not found.                    
                </exception>
                <exception>
                    OperationsException Any of the usual Input/Output
                      related exceptions.                    
                </exception>
                <exception>
                    ReflectionException The specified class could not
                      be loaded by the specified class loader.                    
                </exception>
            </javadoc>
            <method name="deserialize" type="ObjectInputStream" line="830">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="data" type="byte[]"/>
                </params>
                <scope line="832"/>
                <scope line="835"/>
                <scope line="838"/>
                <declaration name="myLoader" type="ClassLoader" line="840"/>
            </method>
            <javadoc line="843">
                Initializes this MBeanServer, registering the MBeanServerDelegate.
                  &lt;p&gt;This method must be called once, before using the MBeanServer.                
            </javadoc>
            <method name="initialize" type="void" line="847">
                <scope line="849">
                    <anonymous_class line="850">
                        <method name="run" type="Object" line="851"/>
                    </anonymous_class>
                </scope>
                <scope line="858">
                    <scope line="859"/>
                </scope>
                <scope line="864">
                    <scope line="865"/>
                </scope>
                <declaration name="myLoader" type="ClassLoader" line="870"/>
                <declaration name="loaders" type="ModifiableClassLoaderRepository" line="871"/>
                <scope line="872">
                    <declaration name="systemLoader" type="ClassLoader" line="874"/>
                </scope>
            </method>
            <javadoc line="878">
                Return the MBeanServerInterceptor.                
                <exception>
                    UnsupportedOperationException if{@link MBeanServerInterceptor}s
                      are not enabled on this object.                    
                </exception>
                <see>
                    #interceptorsEnabled                    
                </see>
            </javadoc>
            <method name="getMBeanServerInterceptor" type="MBeanServer" line="884"/>
            <javadoc line="888">
                Set the MBeanServerInterceptor.                
                <exception>
                    UnsupportedOperationException if{@link MBeanServerInterceptor}s
                      are not enabled on this object.                    
                </exception>
                <see>
                    #interceptorsEnabled                    
                </see>
            </javadoc>
            <method name="setMBeanServerInterceptor" type="void" line="894">
                <params>
                    <param name="interceptor" type="MBeanServer"/>
                </params>
            </method>
            <javadoc line="899">
                &lt;p&gt;Return the {@link java.lang.ClassLoader} that was used for
                  loading the class of the named MBean.                
                <param>
                    mbeanName The ObjectName of the MBean.                    
                </param>
                <return>
                    The ClassLoader used for that MBean.                    
                </return>
                <exception>
                    InstanceNotFoundException if the named MBean is not found.                    
                </exception>
            </javadoc>
            <method name="getClassLoaderFor" type="ClassLoader" line="906">
                <params>
                    <param name="mbeanName" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="909">
                &lt;p&gt;Return the named {@link java.lang.ClassLoader}.                
                <param>
                    loaderName The ObjectName of the ClassLoader.                    
                </param>
                <return>
                    The named ClassLoader.                    
                </return>
                <exception>
                    InstanceNotFoundException if the named ClassLoader
                      is not found.                    
                </exception>
            </javadoc>
            <method name="getClassLoader" type="ClassLoader" line="916">
                <params>
                    <param name="loaderName" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="919">
                &lt;p&gt;Return the ClassLoaderRepository for that MBeanServer.                
                <return>
                    The ClassLoaderRepository for that MBeanServer.                    
                </return>
            </javadoc>
            <method name="getClassLoaderRepository" type="ClassLoaderRepository" line="923"/>
            <method name="getMBeanServerDelegate" type="MBeanServerDelegate" line="927"/>
            <javadoc line="931">
                This method creates a new MBeanServerDelegate for a new MBeanServer.
                  When creating a new MBeanServer the{@link javax.management.MBeanServerBuilder} first calls this method
                  in order to create a new MBeanServerDelegate.
                  &lt;br&gt;Then it calls
                  &lt;code&gt;newMBeanServer(defaultDomain,outer,delegate,interceptors)&lt;/code&gt;
                  passing the &lt;var&gt;delegate&lt;/var&gt; that should be used by the MBeanServer
                  implementation.
                  &lt;p&gt;Note that the passed &lt;var&gt;delegate&lt;/var&gt; might not be directly the
                  MBeanServerDelegate that was returned by this method. It could
                  be, for instance, a new object wrapping the previously
                  returned object.                
                <return>
                    A new {@link javax.management.MBeanServerDelegate}.                    
                </return>
            </javadoc>
            <method name="newMBeanServerDelegate" type="MBeanServerDelegate" line="945"/>
            <javadoc line="948">
                This method creates a new MBeanServer implementation object.
                  When creating a new MBeanServer the{@link javax.management.MBeanServerBuilder} first calls
                  &lt;code&gt;newMBeanServerDelegate()&lt;/code&gt; in order to obtain a new{@link javax.management.MBeanServerDelegate} for the new
                  MBeanServer. Then it calls
                  &lt;code&gt;newMBeanServer(defaultDomain,outer,delegate)&lt;/code&gt;
                  passing the &lt;var&gt;delegate&lt;/var&gt; that should be used by the
                  MBeanServer  implementation.
                  &lt;p&gt;Note that the passed &lt;var&gt;delegate&lt;/var&gt; might not be directly the
                  MBeanServerDelegate that was returned by this implementation. It could
                  be, for instance, a new object wrapping the previously
                  returned delegate.
                  &lt;p&gt;The &lt;var&gt;outer&lt;/var&gt; parameter is a pointer to the MBeanServer that
                  should be passed to the {@link javax.management.MBeanRegistration}interface when registering MBeans inside the MBeanServer.
                  If &lt;var&gt;outer&lt;/var&gt; is &lt;code&gt;null&lt;/code&gt;, then the MBeanServer
                  implementation is free to use its own &lt;code&gt;this&lt;/code&gt; pointer when
                  invoking the {@link javax.management.MBeanRegistration} interface.
                  &lt;p&gt;This makes it possible for a MBeanServer implementation to wrap
                  another MBeanServer implementation, in order to implement, e.g,
                  security checks, or to prevent access to the actual MBeanServer
                  implementation by returning a pointer to a wrapping object.                
                <param>
                    defaultDomain Default domain of the new MBeanServer.                    
                </param>
                <param>
                    outer A pointer to the MBeanServer object that must be
                      passed to the MBeans when invoking their{@link javax.management.MBeanRegistration} interface.                    
                </param>
                <param>
                    delegate A pointer to the MBeanServerDelegate associated
                      with the new MBeanServer. The new MBeanServer must register
                      this MBean in its MBean repository.                    
                </param>
                <param>
                    interceptors If <code>true</code>,{@link MBeanServerInterceptor}s will be enabled (default is
                      <code>false</code>).
                      Note: this parameter is not taken into account by this
                      implementation - the default value <code>false</code> is
                      always used.                    
                </param>
                <return>
                    A new private implementation of an MBeanServer.                    
                </return>
                <see>
                    #interceptorsEnabled                    
                </see>
                <see>
                    javax.management.MBeanServerBuilder                    
                </see>
                <see>
                    com.sun.jmx.mbeanserver.JmxMBeanServerBuilder                    
                </see>
            </javadoc>
            <method name="newMBeanServer" type="MBeanServer" line="985">
                <params>
                    <param name="defaultDomain" type="String"/>
                    <param name="outer" type="MBeanServer"/>
                    <param name="delegate" type="MBeanServerDelegate"/>
                    <param name="interceptors" type="boolean"/>
                </params>
                <declaration name="fairLock" type="boolean" line="986"/>
            </method>
            <javadoc line="989">
                Clone object name.                
            </javadoc>
            <method name="cloneObjectName" type="ObjectName" line="992">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="993"/>
            </method>
            <javadoc line="998">
                Clone attribute.                
            </javadoc>
            <method name="cloneAttribute" type="Attribute" line="1001">
                <params>
                    <param name="attribute" type="Attribute"/>
                </params>
                <scope line="1002">
                    <scope line="1003"/>
                </scope>
            </method>
            <javadoc line="1009">
                Clone attribute list.                
            </javadoc>
            <method name="cloneAttributeList" type="AttributeList" line="1012">
                <params>
                    <param name="list" type="AttributeList"/>
                </params>
                <scope line="1013">
                    <declaration name="alist" type="List&lt;Attribute&gt;" line="1014"/>
                    <scope line="1015">
                        <declaration name="newList" type="AttributeList" line="1016"/>
                    </scope>
                    <scope line="1020">
                        <scope line="1021">
                            <declaration name="attribute" type="Attribute" line="1022"/>
                            <scope line="1023"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="checkMBeanPermission" type="void" line="1032">
                <params>
                    <param name="classname" type="String"/>
                    <param name="member" type="String"/>
                    <param name="objectName" type="ObjectName"/>
                    <param name="actions" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="1033"/>
                <scope line="1034">
                    <declaration name="perm" type="Permission" line="1035"/>
                </scope>
            </method>
        </class>
    </source>