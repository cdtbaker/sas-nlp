<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="java.lang.annotation.Annotation"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.lang.reflect.AnnotatedElement"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.lang.reflect.UndeclaredThrowableException"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <import package="javax.management.Descriptor"/>
        <import package="javax.management.DescriptorKey"/>
        <import package="javax.management.DynamicMBean"/>
        <import package="javax.management.ImmutableDescriptor"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <import package="java.beans.BeanInfo"/>
        <import package="java.beans.PropertyDescriptor"/>
        <import package="java.lang.reflect.Array"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.openmbean.CompositeData"/>
        <class name="Introspector" line="60">
            <comment line="70">
                ------------------------------------------
                  PRIVATE CONSTRUCTORS
                 ------------------------------------------                
            </comment>
            <comment line="76">
                private constructor defined to &quot;hide&quot; the default public constructor                
            </comment>
            <comment line="84">
                ------------------------------------------
                  PUBLIC METHODS
                 ------------------------------------------                
            </comment>
            <comment line="335">
                ------------------------------------------
                  PRIVATE METHODS
                 ------------------------------------------                
            </comment>
            <comment line="440">
                Convert a value from an annotation element to a descriptor field value
                 E.g. with @interface Foo {class value()} an annotation @Foo(String.class)
                 will produce a Descriptor field value &quot;java.lang.String&quot;                
            </comment>
            <comment line="479">
                This must be consistent with the check for duplicate field values in
                 ImmutableDescriptor.union.  But we don&apos;t expect to be called very
                 often so this inefficient check should be enough.                
            </comment>
            <javadoc line="60">
                This class contains the methods for performing all the tests needed to verify
                  that a class represents a JMX compliant MBean.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="Introspector" type="constructor" line="76">
                <comment line="79">
                    ------------------------------
                     ------------------------------                    
                </comment>
            </method>
            <javadoc line="89">
                Tell whether a MBean of the given class is a Dynamic MBean.
                  This method does nothing more than returning
                  &lt;pre&gt;
                  javax.management.DynamicMBean.class.isAssignableFrom(c)
                  &lt;/pre&gt;
                  This method does not check for any JMX MBean compliance:
                  &lt;ul&gt;&lt;li&gt;If &lt;code&gt;true&lt;/code&gt; is returned, then instances of
                  &lt;code&gt;c&lt;/code&gt; are DynamicMBean.&lt;/li&gt;
                  &lt;li&gt;If &lt;code&gt;false&lt;/code&gt; is returned, then no further
                  assumption can be made on instances of &lt;code&gt;c&lt;/code&gt;.
                  In particular, instances of &lt;code&gt;c&lt;/code&gt; may, or may not
                  be JMX standard MBeans.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    c The class of the MBean under examination.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if instances of &lt;code&gt;c&lt;/code&gt; are
                      Dynamic MBeans, &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isDynamic" type="boolean" line="108">
                <params>
                    <param name="c" type="Class<?>"/>
                </params>
                <comment line="110">
                    Check if the MBean implements the DynamicMBean interface                    
                </comment>
            </method>
            <javadoc line="113">
                Basic method for testing that a MBean of a given class can be
                  instantiated by the MBean server.&lt;p&gt;
                  This method checks that:
                  &lt;ul&gt;&lt;li&gt;The given class is a concrete class.&lt;/li&gt;
                  &lt;li&gt;The given class exposes at least one public constructor.&lt;/li&gt;
                  &lt;/ul&gt;
                  If these conditions are not met, throws a NotCompliantMBeanException.                
                <param>
                    c The class of the MBean we want to create.                    
                </param>
                <exception>
                    NotCompliantMBeanException if the MBean class makes it
                      impossible to instantiate the MBean from within the
                      MBeanServer.                    
                </exception>
            </javadoc>
            <method name="testCreation" type="void" line="128">
                <params>
                    <param name="c" type="Class<?>"/>
                </params>
                <comment line="130">
                    Check if the class is a concrete class                    
                </comment>
                <comment line="136">
                    Check if the MBean has a public constructor                    
                </comment>
                <declaration name="mods" type="int" line="130"/>
                <scope line="131"/>
                <declaration name="consList" type="Constructor&lt;?&gt;[]" line="136"/>
                <scope line="137"/>
            </method>
            <method name="checkCompliance" type="void" line="143">
                <params>
                    <param name="mbeanClass" type="Class<?>"/>
                </params>
                <comment line="145">
                    Is DynamicMBean?                    
                </comment>
                <comment line="149">
                    Is Standard MBean?                    
                </comment>
                <comment line="158">
                    Is MXBean?                    
                </comment>
                <declaration name="mbeanException" type="Exception" line="150"/>
                <scope line="151"/>
                <scope line="154"/>
                <declaration name="mxbeanException" type="Exception" line="159"/>
                <scope line="160"/>
                <scope line="163"/>
                <declaration name="msg" type="String" line="166"/>
            </method>
            <method name="makeDynamicMBean" type="DynamicMBean" line="175">
                <params>
                    <param name="mbean" type="T"/>
                </params>
                <comment line="184">
                    Ignore exception - we need to check whether
                     mbean is an MXBean first.                    
                </comment>
                <comment line="193">
                    Ignore exception - we cannot decide whether mbean was supposed
                     to be an MBean or an MXBean. We will call checkCompliance()
                     to generate the appropriate exception.                    
                </comment>
                <comment line="200">
                    not reached                    
                </comment>
                <declaration name="mbeanClass" type="Class&lt;?&gt;" line="178"/>
                <declaration name="c" type="Class&lt;? super T&gt;" line="179"/>
                <scope line="180"/>
                <scope line="182"/>
                <scope line="189"/>
                <scope line="191"/>
            </method>
            <javadoc line="202">
                Basic method for testing if a given class is a JMX compliant MBean.                
                <param>
                    baseClass The class to be tested                    
                </param>
                <return>
                    &lt;code&gt;null&lt;/code&gt; if the MBean is a DynamicMBean,
                      the computed {@link javax.management.MBeanInfo} otherwise.                    
                </return>
                <exception>
                    NotCompliantMBeanException The specified class is not a
                      JMX compliant MBean                    
                </exception>
            </javadoc>
            <method name="testCompliance" type="MBeanInfo" line="213">
                <params>
                    <param name="baseClass" type="Class<?>"/>
                </params>
                <comment line="216">
                    ------------------------------
                     ------------------------------                    
                </comment>
                <comment line="219">
                    Check if the MBean implements the MBean or the Dynamic
                     MBean interface                    
                </comment>
            </method>
            <method name="testComplianceMXBeanInterface" type="void" line="227">
                <params>
                    <param name="interfaceClass" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="231">
                Basic method for testing if a given class is a JMX compliant
                  Standard MBean.  This method is only called by the legacy code
                  in com.sun.management.jmx.                
                <param>
                    baseClass The class to be tested.                    
                </param>
                <param>
                    mbeanInterface the MBean interface that the class implements,
                      or null if the interface must be determined by introspection.                    
                </param>
                <return>
                    the computed {@link javax.management.MBeanInfo}.                    
                </return>
                <exception>
                    NotCompliantMBeanException The specified class is not a
                      JMX compliant Standard MBean                    
                </exception>
            </javadoc>
            <method name="testCompliance" type="MBeanInfo" line="248">
                <params>
                    <param name="baseClass" type="Class<?>"/>
                    <param name="mbeanInterface" type="Class<?>"/>
                </params>
                <declaration name="introspector" type="MBeanIntrospector&lt;?&gt;" line="251"/>
            </method>
            <method name="getClassMBeanInfo" type="MBeanInfo" line="258">
                <params>
                    <param name="introspector" type="MBeanIntrospector<M>"/>
                    <param name="baseClass" type="Class<?>"/>
                    <param name="mbeanInterface" type="Class<?>"/>
                </params>
                <declaration name="perInterface" type="PerInterface&lt;M&gt;" line="259"/>
            </method>
            <javadoc line="263">
                Get the MBean interface implemented by a JMX Standard
                  MBean class. This method is only called by the legacy
                  code in &quot;com.sun.management.jmx&quot;.                
                <param>
                    baseClass The class to be tested.                    
                </param>
                <return>
                    The MBean interface implemented by the MBean.
                      Return &lt;code&gt;null&lt;/code&gt; if the MBean is a DynamicMBean,
                      or if no MBean interface is found.                    
                </return>
            </javadoc>
            <method name="getMBeanInterface" type="Class<?>" line="274">
                <params>
                    <param name="baseClass" type="Class<?>"/>
                </params>
                <comment line="276">
                    Check if the given class implements the MBean interface
                     or the Dynamic MBean interface                    
                </comment>
                <scope line="278"/>
                <scope line="280"/>
            </method>
            <javadoc line="285">
                Get the MBean interface implemented by a JMX Standard MBean class.                
                <param>
                    baseClass The class to be tested.                    
                </param>
                <return>
                    The MBean interface implemented by the Standard MBean.                    
                </return>
                <throws>
                    NotCompliantMBeanException The specified class is
                      not a JMX compliant Standard MBean.                    
                </throws>
            </javadoc>
            <method name="getStandardMBeanInterface" type="Class<? super T>" line="296">
                <params>
                    <param name="baseClass" type="Class<T>"/>
                </params>
                <declaration name="current" type="Class&lt;? super T&gt;" line="297"/>
                <declaration name="mbeanInterface" type="Class&lt;? super T&gt;" line="298"/>
                <scope line="299"/>
                <scope line="305"/>
                <scope line="307">
                    <declaration name="msg" type="String" line="308"/>
                </scope>
            </method>
            <javadoc line="315">
                Get the MXBean interface implemented by a JMX MXBean class.                
                <param>
                    baseClass The class to be tested.                    
                </param>
                <return>
                    The MXBean interface implemented by the MXBean.                    
                </return>
                <throws>
                    NotCompliantMBeanException The specified class is
                      not a JMX compliant MXBean.                    
                </throws>
            </javadoc>
            <method name="getMXBeanInterface" type="Class<? super T>" line="326">
                <params>
                    <param name="baseClass" type="Class<T>"/>
                </params>
                <scope line="327"/>
                <scope line="329"/>
            </method>
            <javadoc line="341">
                Try to find the MBean interface corresponding to the class aName
                  - i.e. &lt;i&gt;aName&lt;/i&gt;MBean, from within aClass and its superclasses.                
            </javadoc>
            <method name="findMBeanInterface" type="Class<? super T>" line="346">
                <params>
                    <param name="aClass" type="Class<T>"/>
                    <param name="aName" type="String"/>
                </params>
                <declaration name="current" type="Class&lt;? super T&gt;" line="347"/>
                <scope line="348">
                    <declaration name="interfaces" type="Class&lt;?&gt;[]" line="349"/>
                    <declaration name="len" type="int" line="350"/>
                    <scope line="351">
                        <declaration name="inter" type="Class&lt;? super T&gt;" line="352"/>
                    </scope>
                </scope>
            </method>
            <method name="descriptorForElement" type="Descriptor" line="361">
                <params>
                    <param name="elmt" type="AnnotatedElement"/>
                </params>
                <declaration name="annots" type="Annotation[]" line="364"/>
            </method>
            <method name="descriptorForAnnotations" type="Descriptor" line="368">
                <params>
                    <param name="annots" type="Annotation[]"/>
                </params>
                <comment line="384">
                    we don&apos;t expect this - except for possibly
                     security exceptions?
                     RuntimeExceptions shouldn&apos;t be &quot;UndeclaredThrowable&quot;.
                     anyway...                    
                </comment>
                <comment line="391">
                    we don&apos;t expect this                    
                </comment>
                <declaration name="descriptorMap" type="Map&lt;String,Object&gt;" line="371"/>
                <scope line="372">
                    <declaration name="c" type="Class&lt;? extends Annotation&gt;" line="373"/>
                    <declaration name="elements" type="Method[]" line="374"/>
                    <scope line="375">
                        <declaration name="key" type="DescriptorKey" line="376"/>
                        <scope line="377">
                            <declaration name="name" type="String" line="378"/>
                            <declaration name="value" type="Object" line="379"/>
                            <scope line="380"/>
                            <scope line="382"/>
                            <scope line="389"/>
                            <declaration name="oldValue" type="Object" line="394"/>
                            <scope line="395">
                                <declaration name="msg" type="String" line="396"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="411">
                Throws a NotCompliantMBeanException or a SecurityException.                
                <param>
                    notCompliant the class which was under examination                    
                </param>
                <param>
                    cause the raeson why NotCompliantMBeanException should
                      be thrown.                    
                </param>
                <return>
                    nothing - this method always throw an exception.
                      The return type makes it possible to write
                      &lt;pre&gt; throw throwException(clazz,cause); &lt;/pre&gt;                    
                </return>
                <throws>
                    SecurityException - if cause is a SecurityException                    
                </throws>
                <throws>
                    NotCompliantMBeanException otherwise.                    
                </throws>
            </javadoc>
            <method name="throwException" type="NotCompliantMBeanException" line="424">
                <params>
                    <param name="notCompliant" type="Class<?>"/>
                    <param name="cause" type="Throwable"/>
                </params>
                <declaration name="classname" type="String" line="429"/>
                <declaration name="reason" type="String" line="431"/>
                <declaration name="res" type="NotCompliantMBeanException" line="433"/>
            </method>
            <method name="annotationToField" type="Object" line="442">
                <params>
                    <param name="x" type="Object"/>
                </params>
                <comment line="444">
                    An annotation element cannot have a null value but never mind                    
                </comment>
                <comment line="451">
                    Remaining possibilities: array of primitive (e.g. int[]),
                     enum, class, array of enum or class.                    
                </comment>
                <comment line="467">
                    The only other possibility is that the value is another
                     annotation, or that the language has evolved since this code
                     was written.  We don&apos;t allow for either of those currently.
                     If it is indeed another annotation, then x will be a proxy
                     with an unhelpful name like $Proxy2.  So we extract the
                     proxy&apos;s interface to use that in the exception message.                    
                </comment>
                <comment line="474">
                    array &quot;can&apos;t be empty&quot;                    
                </comment>
                <declaration name="c" type="Class&lt;?&gt;" line="452"/>
                <scope line="453">
                    <declaration name="xx" type="Object[]" line="456"/>
                    <declaration name="ss" type="String[]" line="457"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="481">
                <params>
                    <param name="x" type="Object"/>
                    <param name="y" type="Object"/>
                </params>
            </method>
            <javadoc line="485">
                Returns the XXMBean interface or null if no such interface exists                
                <param>
                    c The interface to be tested                    
                </param>
                <param>
                    clName The name of the class implementing this interface                    
                </param>
            </javadoc>
            <method name="implementsMBean" type="Class<? super T>" line="491">
                <params>
                    <param name="c" type="Class<T>"/>
                    <param name="clName" type="String"/>
                </params>
                <declaration name="clMBeanName" type="String" line="492"/>
                <scope line="493"/>
                <declaration name="interfaces" type="Class&lt;?&gt;[]" line="496"/>
                <scope line="497"/>
            </method>
            <method name="elementFromComplex" type="Object" line="506">
                <params>
                    <param name="complex" type="Object"/>
                    <param name="element" type="String"/>
                </params>
                <comment line="514">
                    Java Beans introspection                    
                </comment>
                <comment line="528">
                    Java Beans not available so use simple introspection
                     to locate method                    
                </comment>
                <scope line="507">
                    <scope line="508"/>
                    <scope line="510"/>
                    <scope line="512">
                        <declaration name="clazz" type="Class&lt;?&gt;" line="515"/>
                        <declaration name="readMethod" type="Method" line="516"/>
                        <scope line="517">
                            <declaration name="bi" type="Object" line="518"/>
                            <declaration name="pds" type="Object[]" line="519"/>
                            <scope line="520">
                                <scope line="521"/>
                            </scope>
                        </scope>
                        <scope line="526"/>
                    </scope>
                </scope>
                <scope line="538"/>
                <scope line="540"/>
                <scope line="542"/>
            </method>
            <class name="SimpleIntrospector" line="548">
                <comment line="561">
                    cache to avoid repeated lookups                    
                </comment>
                <javadoc line="548">
                    A simple introspector that uses reflection to analyze a class and
                      identify its &quot;getter&quot; methods. This class is intended for use only when
                      Java Beans is not present (which implies that there isn&apos;t explicit
                      information about the bean available).                    
                </javadoc>
                <method name="SimpleIntrospector" type="constructor" line="555"/>
                <declaration name="GET_METHOD_PREFIX" type="String" line="557"/>
                <declaration name="IS_METHOD_PREFIX" type="String" line="558"/>
                <declaration name="cache" type="Map&lt;Class&lt;?&gt;,SoftReference&lt;List&lt;Method&gt;&gt;&gt;" line="561"/>
                <javadoc line="565">
                    Returns the list of methods cached for the given class, or {@code null}if not cached.                    
                </javadoc>
                <method name="getCachedMethods" type="List<Method>" line="569">
                    <params>
                        <param name="clazz" type="Class<?>"/>
                    </params>
                    <comment line="571">
                        return cached methods if possible                        
                    </comment>
                    <declaration name="ref" type="SoftReference&lt;List&lt;Method&gt;&gt;" line="571"/>
                    <scope line="572">
                        <declaration name="cached" type="List&lt;Method&gt;" line="573"/>
                    </scope>
                </method>
                <javadoc line="580">
                    Returns {@code true} if the given method is a &quot;getter&quot; method (where
                      &quot;getter&quot; method is a public method of the form getXXX or &quot;boolean
                      isXXX&quot;)                    
                </javadoc>
                <method name="isReadMethod" type="boolean" line="585">
                    <params>
                        <param name="method" type="Method"/>
                    </params>
                    <comment line="587">
                        ignore static methods                        
                    </comment>
                    <comment line="597">
                        boolean isXXX()                        
                    </comment>
                    <comment line="600">
                        getXXX()                        
                    </comment>
                    <declaration name="modifiers" type="int" line="587"/>
                    <declaration name="name" type="String" line="591"/>
                    <declaration name="paramTypes" type="Class&lt;?&gt;[]" line="592"/>
                    <declaration name="paramCount" type="int" line="593"/>
                    <scope line="595"/>
                </method>
                <javadoc line="606">
                    Returns the list of &quot;getter&quot; methods for the given class. The list
                      is ordered so that isXXX methods appear before getXXX methods - this
                      is for compatability with the JavaBeans Introspector.                    
                </javadoc>
                <method name="getReadMethods" type="List<Method>" line="611">
                    <params>
                        <param name="clazz" type="Class<?>"/>
                    </params>
                    <comment line="613">
                        return cached result if available                        
                    </comment>
                    <comment line="618">
                        get list of public methods, filtering out methods that have
                         been overridden to return a more specific type.                        
                    </comment>
                    <comment line="624">
                        filter out the non-getter methods                        
                    </comment>
                    <comment line="628">
                        favor isXXX over getXXX                        
                    </comment>
                    <comment line="637">
                        add result to cache                        
                    </comment>
                    <declaration name="cachedResult" type="List&lt;Method&gt;" line="613"/>
                    <declaration name="methods" type="List&lt;Method&gt;" line="619"/>
                    <declaration name="result" type="List&lt;Method&gt;" line="624"/>
                    <scope line="625">
                        <scope line="626">
                            <scope line="628"/>
                            <scope line="630"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="642">
                    Returns the &quot;getter&quot; to read the given property from the given class or{@code null} if no method is found.                    
                </javadoc>
                <method name="getReadMethod" type="Method" line="646">
                    <params>
                        <param name="clazz" type="Class<?>"/>
                        <param name="property" type="String"/>
                    </params>
                    <comment line="648">
                        first character in uppercase (compatability with JavaBeans)                        
                    </comment>
                    <declaration name="getMethod" type="String" line="650"/>
                    <declaration name="isMethod" type="String" line="651"/>
                    <scope line="652">
                        <declaration name="name" type="String" line="653"/>
                        <scope line="654"/>
                    </scope>
                </method>
            </class>
            <class name="BeansHelper" line="662">
                <comment line="561">
                    cache to avoid repeated lookups                    
                </comment>
                <javadoc line="662">
                    A class that provides access to the JavaBeans Introspector and
                      PropertyDescriptors without creating a static dependency on java.beans.                    
                </javadoc>
                <declaration name="introspectorClass" type="Class&lt;?&gt;" line="667"/>
                <declaration name="beanInfoClass" type="Class&lt;?&gt;" line="669"/>
                <declaration name="getPropertyDescriptorClass" type="Class&lt;?&gt;" line="671"/>
                <declaration name="getBeanInfo" type="Method" line="674"/>
                <declaration name="getPropertyDescriptors" type="Method" line="676"/>
                <declaration name="getPropertyName" type="Method" line="678"/>
                <declaration name="getReadMethod" type="Method" line="680"/>
                <method name="getClass" type="Class<?>" line="683">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="684"/>
                    <scope line="686"/>
                </method>
                <method name="getMethod" type="Method" line="693">
                    <params>
                        <param name="clazz" type="Class<?>"/>
                        <param name="name" type="String"/>
                        <param name="paramTypes" type="Class<?>"/>
                    </params>
                    <scope line="694">
                        <scope line="695"/>
                        <scope line="697"/>
                    </scope>
                    <scope line="700"/>
                </method>
                <method name="BeansHelper" type="constructor" line="705"/>
                <javadoc line="707">
                    Returns {@code true} if java.beans is available.                    
                </javadoc>
                <method name="isAvailable" type="boolean" line="710"/>
                <javadoc line="714">
                    Invokes java.beans.Introspector.getBeanInfo(Class)                    
                </javadoc>
                <method name="getBeanInfo" type="Object" line="717">
                    <params>
                        <param name="clazz" type="Class<?>"/>
                    </params>
                    <scope line="718"/>
                    <scope line="720">
                        <declaration name="cause" type="Throwable" line="721"/>
                    </scope>
                    <scope line="725"/>
                </method>
                <javadoc line="730">
                    Invokes java.beans.BeanInfo.getPropertyDescriptors()                    
                </javadoc>
                <method name="getPropertyDescriptors" type="Object[]" line="733">
                    <params>
                        <param name="bi" type="Object"/>
                    </params>
                    <scope line="734"/>
                    <scope line="736">
                        <declaration name="cause" type="Throwable" line="737"/>
                    </scope>
                    <scope line="741"/>
                </method>
                <javadoc line="746">
                    Invokes java.beans.PropertyDescriptor.getName()                    
                </javadoc>
                <method name="getPropertyName" type="String" line="749">
                    <params>
                        <param name="pd" type="Object"/>
                    </params>
                    <scope line="750"/>
                    <scope line="752">
                        <declaration name="cause" type="Throwable" line="753"/>
                    </scope>
                    <scope line="757"/>
                </method>
                <javadoc line="762">
                    Invokes java.beans.PropertyDescriptor.getReadMethod()                    
                </javadoc>
                <method name="getReadMethod" type="Method" line="765">
                    <params>
                        <param name="pd" type="Object"/>
                    </params>
                    <scope line="766"/>
                    <scope line="768">
                        <declaration name="cause" type="Throwable" line="769"/>
                    </scope>
                    <scope line="773"/>
                </method>
            </class>
        </class>
    </source>