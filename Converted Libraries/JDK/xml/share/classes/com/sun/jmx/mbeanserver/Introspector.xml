<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="java.lang.annotation.Annotation"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.lang.reflect.AnnotatedElement"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.lang.reflect.UndeclaredThrowableException"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <import package="javax.management.Descriptor"/>
        <import package="javax.management.DescriptorKey"/>
        <import package="javax.management.DynamicMBean"/>
        <import package="javax.management.ImmutableDescriptor"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <import package="java.beans.BeanInfo"/>
        <import package="java.beans.PropertyDescriptor"/>
        <import package="java.lang.reflect.Array"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.openmbean.CompositeData"/>
        <class name="Introspector" line="31">
            <javadoc line="31">
                This class contains the methods for performing all the tests needed to verify
                  that a class represents a JMX compliant MBean.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="Introspector" type="constructor" line="37"/>
            <javadoc line="39">
                Tell whether a MBean of the given class is a Dynamic MBean.
                  This method does nothing more than returning
                  &lt;pre&gt;
                  javax.management.DynamicMBean.class.isAssignableFrom(c)
                  &lt;/pre&gt;
                  This method does not check for any JMX MBean compliance:
                  &lt;ul&gt;&lt;li&gt;If &lt;code&gt;true&lt;/code&gt; is returned, then instances of
                  &lt;code&gt;c&lt;/code&gt; are DynamicMBean.&lt;/li&gt;
                  &lt;li&gt;If &lt;code&gt;false&lt;/code&gt; is returned, then no further
                  assumption can be made on instances of &lt;code&gt;c&lt;/code&gt;.
                  In particular, instances of &lt;code&gt;c&lt;/code&gt; may, or may not
                  be JMX standard MBeans.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    c The class of the MBean under examination.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if instances of &lt;code&gt;c&lt;/code&gt; are
                      Dynamic MBeans, &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isDynamic" type="boolean" line="57">
                <params>
                    <param name="c" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="60">
                Basic method for testing that a MBean of a given class can be
                  instantiated by the MBean server.&lt;p&gt;
                  This method checks that:
                  &lt;ul&gt;&lt;li&gt;The given class is a concrete class.&lt;/li&gt;
                  &lt;li&gt;The given class exposes at least one public constructor.&lt;/li&gt;
                  &lt;/ul&gt;
                  If these conditions are not met, throws a NotCompliantMBeanException.                
                <param>
                    c The class of the MBean we want to create.                    
                </param>
                <exception>
                    NotCompliantMBeanException if the MBean class makes it
                      impossible to instantiate the MBean from within the
                      MBeanServer.                    
                </exception>
            </javadoc>
            <method name="testCreation" type="void" line="73">
                <params>
                    <param name="c" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="mods" type="int" line="74"/>
                <scope line="75"/>
                <declaration name="consList" type="Constructor&amp;lt;?&amp;gt;[]" line="78"/>
                <scope line="79"/>
            </method>
            <method name="checkCompliance" type="void" line="83">
                <params>
                    <param name="mbeanClass" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="mbeanException" type="Exception" line="85"/>
                <scope line="86"/>
                <scope line="90"/>
                <declaration name="mxbeanException" type="Exception" line="93"/>
                <scope line="94"/>
                <scope line="98"/>
                <declaration name="msg" type="String" line="101"/>
            </method>
            <method name="makeDynamicMBean" type="DynamicMBean" line="104">
                <params>
                    <param name="mbean" type="T"/>
                </params>
                <declaration name="mbeanClass" type="Class&amp;lt;?&amp;gt;" line="106"/>
                <declaration name="c" type="Class&amp;lt;? super T&amp;gt;" line="107"/>
                <scope line="108"/>
                <scope line="111"/>
                <scope line="114"/>
                <scope line="117"/>
            </method>
            <javadoc line="123">
                Basic method for testing if a given class is a JMX compliant MBean.                
                <param>
                    baseClass The class to be tested                    
                </param>
                <return>
                    &lt;code&gt;null&lt;/code&gt; if the MBean is a DynamicMBean,
                      the computed {@link javax.management.MBeanInfo} otherwise.                    
                </return>
                <exception>
                    NotCompliantMBeanException The specified class is not a
                      JMX compliant MBean                    
                </exception>
            </javadoc>
            <method name="testCompliance" type="MBeanInfo" line="131">
                <params>
                    <param name="baseClass" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <method name="testComplianceMXBeanInterface" type="void" line="135">
                <params>
                    <param name="interfaceClass" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="138">
                Basic method for testing if a given class is a JMX compliant
                  Standard MBean.  This method is only called by the legacy code
                  in com.sun.management.jmx.                
                <param>
                    baseClass The class to be tested.                    
                </param>
                <param>
                    mbeanInterface the MBean interface that the class implements,
                      or null if the interface must be determined by introspection.                    
                </param>
                <return>
                    the computed {@link javax.management.MBeanInfo}.                    
                </return>
                <exception>
                    NotCompliantMBeanException The specified class is not a
                      JMX compliant Standard MBean                    
                </exception>
            </javadoc>
            <method name="testCompliance" type="MBeanInfo" line="149">
                <params>
                    <param name="baseClass" type="Class&lt;?&gt;"/>
                    <param name="mbeanInterface" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="introspector" type="MBeanIntrospector&amp;lt;?&amp;gt;" line="151"/>
            </method>
            <method name="getClassMBeanInfo" type="MBeanInfo" line="154">
                <params>
                    <param name="introspector" type="MBeanIntrospector&lt;M&gt;"/>
                    <param name="baseClass" type="Class&lt;?&gt;"/>
                    <param name="mbeanInterface" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="perInterface" type="PerInterface&amp;lt;M&amp;gt;" line="155"/>
            </method>
            <javadoc line="158">
                Get the MBean interface implemented by a JMX Standard
                  MBean class. This method is only called by the legacy
                  code in &quot;com.sun.management.jmx&quot;.                
                <param>
                    baseClass The class to be tested.                    
                </param>
                <return>
                    The MBean interface implemented by the MBean.
                      Return &lt;code&gt;null&lt;/code&gt; if the MBean is a DynamicMBean,
                      or if no MBean interface is found.                    
                </return>
            </javadoc>
            <method name="getMBeanInterface" type="Class&lt;?&gt;" line="167">
                <params>
                    <param name="baseClass" type="Class&lt;?&gt;"/>
                </params>
                <scope line="169"/>
                <scope line="172"/>
            </method>
            <javadoc line="176">
                Get the MBean interface implemented by a JMX Standard MBean class.                
                <param>
                    baseClass The class to be tested.                    
                </param>
                <return>
                    The MBean interface implemented by the Standard MBean.                    
                </return>
                <throws>
                    NotCompliantMBeanException The specified class is
                      not a JMX compliant Standard MBean.                    
                </throws>
            </javadoc>
            <method name="getStandardMBeanInterface" type="Class&lt;? super T&gt;" line="183">
                <params>
                    <param name="baseClass" type="Class&lt;T&gt;"/>
                </params>
                <declaration name="current" type="Class&amp;lt;? super T&amp;gt;" line="184"/>
                <declaration name="mbeanInterface" type="Class&amp;lt;? super T&amp;gt;" line="185"/>
                <scope line="186"/>
                <scope line="191"/>
                <scope line="194">
                    <declaration name="msg" type="String" line="195"/>
                </scope>
            </method>
            <javadoc line="199">
                Get the MXBean interface implemented by a JMX MXBean class.                
                <param>
                    baseClass The class to be tested.                    
                </param>
                <return>
                    The MXBean interface implemented by the MXBean.                    
                </return>
                <throws>
                    NotCompliantMBeanException The specified class is
                      not a JMX compliant MXBean.                    
                </throws>
            </javadoc>
            <method name="getMXBeanInterface" type="Class&lt;? super T&gt;" line="206">
                <params>
                    <param name="baseClass" type="Class&lt;T&gt;"/>
                </params>
                <scope line="207"/>
                <scope line="210"/>
            </method>
            <javadoc line="214">
                Try to find the MBean interface corresponding to the class aName
                  - i.e. &lt;i&gt;aName&lt;/i&gt;MBean, from within aClass and its superclasses.                
            </javadoc>
            <method name="findMBeanInterface" type="Class&lt;? super T&gt;" line="218">
                <params>
                    <param name="aClass" type="Class&lt;T&gt;"/>
                    <param name="aName" type="String"/>
                </params>
                <declaration name="current" type="Class&amp;lt;? super T&amp;gt;" line="219"/>
                <scope line="220">
                    <declaration name="interfaces" type="Class&amp;lt;?&amp;gt;[]" line="221"/>
                    <declaration name="len" type="int" line="222"/>
                    <scope line="223">
                        <declaration name="inter" type="Class&amp;lt;? super T&amp;gt;" line="224"/>
                    </scope>
                </scope>
            </method>
            <method name="descriptorForElement" type="Descriptor" line="232">
                <params>
                    <param name="elmt" type="AnnotatedElement"/>
                </params>
                <declaration name="annots" type="Annotation[]" line="234"/>
            </method>
            <method name="descriptorForAnnotations" type="Descriptor" line="237">
                <params>
                    <param name="annots" type="Annotation[]"/>
                </params>
                <declaration name="descriptorMap" type="Map&amp;lt;String,Object&amp;gt;" line="239"/>
                <scope line="240">
                    <declaration name="c" type="Class&amp;lt;? extends Annotation&amp;gt;" line="241"/>
                    <declaration name="elements" type="Method[]" line="242"/>
                    <scope line="243">
                        <declaration name="key" type="DescriptorKey" line="244"/>
                        <scope line="245">
                            <declaration name="name" type="String" line="246"/>
                            <declaration name="value" type="Object" line="247"/>
                            <scope line="248"/>
                            <scope line="251"/>
                            <scope line="254"/>
                            <declaration name="oldValue" type="Object" line="258"/>
                            <scope line="259">
                                <declaration name="msg" type="String" line="260"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="269">
                Throws a NotCompliantMBeanException or a SecurityException.                
                <param>
                    notCompliant the class which was under examination                    
                </param>
                <param>
                    cause the raeson why NotCompliantMBeanException should
                      be thrown.                    
                </param>
                <return>
                    nothing - this method always throw an exception.
                      The return type makes it possible to write
                      &lt;pre&gt; throw throwException(clazz,cause); &lt;/pre&gt;                    
                </return>
                <throws>
                    SecurityException - if cause is a SecurityException                    
                </throws>
                <throws>
                    NotCompliantMBeanException otherwise.                    
                </throws>
            </javadoc>
            <method name="throwException" type="NotCompliantMBeanException" line="280">
                <params>
                    <param name="notCompliant" type="Class&lt;?&gt;"/>
                    <param name="cause" type="Throwable"/>
                </params>
                <declaration name="classname" type="String" line="283"/>
                <declaration name="reason" type="String" line="284"/>
                <declaration name="res" type="NotCompliantMBeanException" line="285"/>
            </method>
            <method name="annotationToField" type="Object" line="289">
                <params>
                    <param name="x" type="Object"/>
                </params>
                <declaration name="c" type="Class&amp;lt;?&amp;gt;" line="292"/>
                <scope line="293">
                    <declaration name="xx" type="Object[]" line="295"/>
                    <declaration name="ss" type="String[]" line="296"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="305">
                <params>
                    <param name="x" type="Object"/>
                    <param name="y" type="Object"/>
                </params>
            </method>
            <javadoc line="308">
                Returns the XXMBean interface or null if no such interface exists                
                <param>
                    c The interface to be tested                    
                </param>
                <param>
                    clName The name of the class implementing this interface                    
                </param>
            </javadoc>
            <method name="implementsMBean" type="Class&lt;? super T&gt;" line="313">
                <params>
                    <param name="c" type="Class&lt;T&gt;"/>
                    <param name="clName" type="String"/>
                </params>
                <declaration name="clMBeanName" type="String" line="314"/>
                <scope line="315"/>
                <declaration name="interfaces" type="Class&amp;lt;?&amp;gt;[]" line="318"/>
                <scope line="319"/>
            </method>
            <method name="elementFromComplex" type="Object" line="324">
                <params>
                    <param name="complex" type="Object"/>
                    <param name="element" type="String"/>
                </params>
                <scope line="325">
                    <scope line="326"/>
                    <scope line="329"/>
                    <scope line="332">
                        <declaration name="clazz" type="Class&amp;lt;?&amp;gt;" line="333"/>
                        <declaration name="readMethod" type="Method" line="334"/>
                        <scope line="335">
                            <declaration name="bi" type="Object" line="336"/>
                            <declaration name="pds" type="Object[]" line="337"/>
                            <scope line="338">
                                <scope line="339"/>
                            </scope>
                        </scope>
                        <scope line="345"/>
                    </scope>
                </scope>
                <scope line="352"/>
                <scope line="355"/>
                <scope line="358"/>
            </method>
            <class name="SimpleIntrospector" line="362">
                <javadoc line="362">
                    A simple introspector that uses reflection to analyze a class and
                      identify its &quot;getter&quot; methods. This class is intended for use only when
                      Java Beans is not present (which implies that there isn&apos;t explicit
                      information about the bean available).                    
                </javadoc>
                <method name="SimpleIntrospector" type="constructor" line="369"/>
                <declaration name="GET_METHOD_PREFIX" type="String" line="371"/>
                <declaration name="IS_METHOD_PREFIX" type="String" line="372"/>
                <declaration name="cache" type="Map&amp;lt;Class&amp;lt;?&amp;gt;,SoftReference&amp;lt;List&amp;lt;Method&amp;gt;&amp;gt;&amp;gt;" line="373"/>
                <javadoc line="374">
                    Returns the list of methods cached for the given class, or {@code null}if not cached.                    
                </javadoc>
                <method name="getCachedMethods" type="List&lt;Method&gt;" line="377">
                    <params>
                        <param name="clazz" type="Class&lt;?&gt;"/>
                    </params>
                    <declaration name="ref" type="SoftReference&amp;lt;List&amp;lt;Method&amp;gt;&amp;gt;" line="378"/>
                    <scope line="379">
                        <declaration name="cached" type="List&amp;lt;Method&amp;gt;" line="380"/>
                    </scope>
                </method>
                <javadoc line="385">
                    Returns {@code true} if the given method is a &quot;getter&quot; method (where
                      &quot;getter&quot; method is a public method of the form getXXX or &quot;boolean
                      isXXX&quot;)                    
                </javadoc>
                <method name="isReadMethod" type="boolean" line="390">
                    <params>
                        <param name="method" type="Method"/>
                    </params>
                    <declaration name="modifiers" type="int" line="391"/>
                    <declaration name="name" type="String" line="393"/>
                    <declaration name="paramTypes" type="Class&amp;lt;?&amp;gt;[]" line="394"/>
                    <declaration name="paramCount" type="int" line="395"/>
                    <scope line="396"/>
                </method>
                <javadoc line="402">
                    Returns the list of &quot;getter&quot; methods for the given class. The list
                      is ordered so that isXXX methods appear before getXXX methods - this
                      is for compatability with the JavaBeans Introspector.                    
                </javadoc>
                <method name="getReadMethods" type="List&lt;Method&gt;" line="407">
                    <params>
                        <param name="clazz" type="Class&lt;?&gt;"/>
                    </params>
                    <declaration name="cachedResult" type="List&amp;lt;Method&amp;gt;" line="408"/>
                    <declaration name="methods" type="List&amp;lt;Method&amp;gt;" line="410"/>
                    <declaration name="result" type="List&amp;lt;Method&amp;gt;" line="412"/>
                    <scope line="413">
                        <scope line="414">
                            <scope line="415"/>
                            <scope line="418"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="426">
                    Returns the &quot;getter&quot; to read the given property from the given class or{@code null} if no method is found.                    
                </javadoc>
                <method name="getReadMethod" type="Method" line="429">
                    <params>
                        <param name="clazz" type="Class&lt;?&gt;"/>
                        <param name="property" type="String"/>
                    </params>
                    <declaration name="getMethod" type="String" line="431"/>
                    <declaration name="isMethod" type="String" line="432"/>
                    <scope line="433">
                        <declaration name="name" type="String" line="434"/>
                        <scope line="435"/>
                    </scope>
                </method>
            </class>
            <class name="BeansHelper" line="442">
                <javadoc line="442">
                    A class that provides access to the JavaBeans Introspector and
                      PropertyDescriptors without creating a static dependency on java.beans.                    
                </javadoc>
                <declaration name="introspectorClass" type="Class&amp;lt;?&amp;gt;" line="447"/>
                <declaration name="beanInfoClass" type="Class&amp;lt;?&amp;gt;" line="448"/>
                <declaration name="getPropertyDescriptorClass" type="Class&amp;lt;?&amp;gt;" line="449"/>
                <declaration name="getBeanInfo" type="Method" line="450"/>
                <declaration name="getPropertyDescriptors" type="Method" line="451"/>
                <declaration name="getPropertyName" type="Method" line="452"/>
                <declaration name="getReadMethod" type="Method" line="453"/>
                <method name="getClass" type="Class&lt;?&gt;" line="454">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="455"/>
                    <scope line="458"/>
                </method>
                <method name="getMethod" type="Method" line="462">
                    <params>
                        <param name="clazz" type="Class&lt;?&gt;"/>
                        <param name="name" type="String"/>
                        <param name="paramTypes" type="Class&lt;?&gt;"/>
                    </params>
                    <scope line="463">
                        <scope line="464"/>
                        <scope line="467"/>
                    </scope>
                    <scope line="471"/>
                </method>
                <method name="BeansHelper" type="constructor" line="475"/>
                <javadoc line="477">
                    Returns {@code true} if java.beans is available.                    
                </javadoc>
                <method name="isAvailable" type="boolean" line="480"/>
                <javadoc line="483">
                    Invokes java.beans.Introspector.getBeanInfo(Class)                    
                </javadoc>
                <method name="getBeanInfo" type="Object" line="486">
                    <params>
                        <param name="clazz" type="Class&lt;?&gt;"/>
                    </params>
                    <scope line="487"/>
                    <scope line="490">
                        <declaration name="cause" type="Throwable" line="491"/>
                    </scope>
                    <scope line="495"/>
                </method>
                <javadoc line="499">
                    Invokes java.beans.BeanInfo.getPropertyDescriptors()                    
                </javadoc>
                <method name="getPropertyDescriptors" type="Object[]" line="502">
                    <params>
                        <param name="bi" type="Object"/>
                    </params>
                    <scope line="503"/>
                    <scope line="506">
                        <declaration name="cause" type="Throwable" line="507"/>
                    </scope>
                    <scope line="511"/>
                </method>
                <javadoc line="515">
                    Invokes java.beans.PropertyDescriptor.getName()                    
                </javadoc>
                <method name="getPropertyName" type="String" line="518">
                    <params>
                        <param name="pd" type="Object"/>
                    </params>
                    <scope line="519"/>
                    <scope line="522">
                        <declaration name="cause" type="Throwable" line="523"/>
                    </scope>
                    <scope line="527"/>
                </method>
                <javadoc line="531">
                    Invokes java.beans.PropertyDescriptor.getReadMethod()                    
                </javadoc>
                <method name="getReadMethod" type="Method" line="534">
                    <params>
                        <param name="pd" type="Object"/>
                    </params>
                    <scope line="535"/>
                    <scope line="538">
                        <declaration name="cause" type="Throwable" line="539"/>
                    </scope>
                    <scope line="543"/>
                </method>
            </class>
        </class>
    </source>