<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.agent">
        <import package="java.io.Serializable"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.Vector"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MalformedObjectNameException"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.MBeanRegistrationException"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="com.sun.jmx.defaults.JmxProperties.SNMP_ADAPTOR_LOGGER"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpDefinitions"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.SnmpEngine"/>
        <import package="com.sun.jmx.snmp.SnmpUnknownModelException"/>
        <import package="com.sun.jmx.snmp.internal.SnmpAccessControlModel"/>
        <import package="com.sun.jmx.snmp.internal.SnmpEngineImpl"/>
        <class name="LongList" line="50">
            <comment line="368">
                --------------------------------------------------------------------
                 POLYMORHIC METHODS
                 --------------------------------------------------------------------                
            </comment>
            <comment line="524">
                --------------------------------------------------------------------
                 PUBLIC METHODS
                 --------------------------------------------------------------------                
            </comment>
            <comment line="772">
                --------------------------------------------------------------------
                 PRIVATE METHODS
                ---------------------------------------------------------------------                
            </comment>
            <comment line="1008">
                --------------------------------------------------------------------
                 PROTECTED VARIABLES
                 --------------------------------------------------------------------                
            </comment>
            <comment line="1019">
                --------------------------------------------------------------------
                 PRIVATE VARIABLES
                 --------------------------------------------------------------------                
            </comment>
            <javadoc line="50">
                This list is used in order to construct the OID during the getnext.
                  The constructed oid is checked by the checker AcmChecker.                
            </javadoc>
            <declaration name="DEFAULT_CAPACITY" type="int" line="56"/>
            <declaration name="DEFAULT_INCREMENT" type="int" line="58"/>
            <declaration name="DELTA" type="int" line="61"/>
            <declaration name="size" type="int" line="62"/>
            <declaration name="list" type="long[]" line="64"/>
            <javadoc line="64">
                The list content. Any access to this variable must be protected
                  by a synchronized block on the LongList object.
                  Only read-only action should be performed on this object.                
            </javadoc>
            <method name="LongList" type="constructor" line="71"/>
            <method name="LongList" type="constructor" line="75">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <method name="LongList" type="constructor" line="79">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="delta" type="int"/>
                </params>
            </method>
            <javadoc line="85">
                Same behaviour than size() in {@link java.util.List}.                
            </javadoc>
            <method name="size" type="int" line="88"/>
            <javadoc line="90">
                Same behaviour than add(long o) in {@link java.util.List}.
                  Any access to this method should be protected in a synchronized
                  block on the LongList object.                
            </javadoc>
            <method name="add" type="boolean" line="95">
                <params>
                    <param name="o" type="long"/>
                </params>
            </method>
            <javadoc line="102">
                Same behaviour than add(int index, long o) in{@link java.util.List}.
                  Any access to this method should be protected in a synchronized
                  block on the LongList object.                
            </javadoc>
            <method name="add" type="void" line="108">
                <params>
                    <param name="index" type="int"/>
                    <param name="o" type="long"/>
                </params>
                <scope line="111"/>
            </method>
            <javadoc line="121">
                Adds &lt;var&gt;count&lt;/var&gt; elements to the list.                
                <param>
                    at index at which the elements must be inserted. The
                      first element will be inserted at this index.                    
                </param>
                <param>
                    src  An array containing the elements we want to insert.                    
                </param>
                <param>
                    from Index of the first element from &lt;var&gt;src&lt;/var&gt; that
                      must be inserted.                    
                </param>
                <param>
                    count number of elements to insert.
                      Any access to this method should be protected in a synchronized
                      block on the LongList object.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="133">
                <params>
                    <param name="at" type="int"/>
                    <param name="src" type="long[]"/>
                    <param name="from" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="137"/>
            </method>
            <javadoc line="144">
                Any access to this method should be protected in a synchronized
                  block on the LongList object.                
            </javadoc>
            <method name="remove" type="long" line="148">
                <params>
                    <param name="from" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <declaration name="o" type="long" line="152"/>
                <declaration name="oldsize" type="int" line="153"/>
            </method>
            <javadoc line="163">
                Same behaviour than remove(int index) in {@link java.util.List}.
                  Any access to this method should be protected in a synchronized
                  block on the LongList object.                
            </javadoc>
            <method name="remove" type="long" line="168">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="o" type="long" line="170"/>
            </method>
            <javadoc line="179">
                Same behaviour than the toArray(long[] a) method in{@link java.util.List}.
                  Any access to this method should be protected in a synchronized
                  block on the LongList object.                
            </javadoc>
            <method name="toArray" type="long[]" line="185">
                <params>
                    <param name="a" type="long[]"/>
                </params>
            </method>
            <javadoc line="190">
                Same behaviour than the toArray() method in{@link java.util.List}.
                  Any access to this method should be protected in a synchronized
                  block on the LongList object.                
            </javadoc>
            <method name="toArray" type="long[]" line="196"/>
            <javadoc line="200">
                Resize the list. Increase its capacity by DELTA elements.
                  Any call to this method must be protected by a synchronized
                  block on this LongList.                
            </javadoc>
            <method name="resize" type="void" line="205">
                <declaration name="newlist" type="long[]" line="206"/>
            </method>
            <javadoc line="211">
                Resize the list. Insure that the new length will be at
                  least equal to &lt;var&gt;length&lt;/var&gt;.                
                <param>
                    length new minimal length requested.
                      Any call to this method must be protected by a synchronized
                      block on this LongList.                    
                </param>
            </javadoc>
            <method name="ensure" type="void" line="218">
                <params>
                    <param name="length" type="int"/>
                </params>
                <scope line="219">
                    <declaration name="min" type="int" line="220"/>
                    <declaration name="newlist" type="long[]" line="222"/>
                </scope>
            </method>
            <javadoc line="228">
                Allocate a new array of object of specified length.                
            </javadoc>
            <method name="allocate" type="long[]" line="231">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
        </class>
        <class name="AcmChecker" line="237">
            <comment line="368">
                --------------------------------------------------------------------
                 POLYMORHIC METHODS
                 --------------------------------------------------------------------                
            </comment>
            <comment line="524">
                --------------------------------------------------------------------
                 PUBLIC METHODS
                 --------------------------------------------------------------------                
            </comment>
            <comment line="772">
                --------------------------------------------------------------------
                 PRIVATE METHODS
                ---------------------------------------------------------------------                
            </comment>
            <comment line="1008">
                --------------------------------------------------------------------
                 PROTECTED VARIABLES
                 --------------------------------------------------------------------                
            </comment>
            <comment line="1019">
                --------------------------------------------------------------------
                 PRIVATE VARIABLES
                 --------------------------------------------------------------------                
            </comment>
            <javadoc line="237">
                Oid Checker makes use of ACM to check each OID during the getnext process.                
            </javadoc>
            <declaration name="model" type="SnmpAccessControlModel" line="243"/>
            <declaration name="principal" type="String" line="244"/>
            <declaration name="securityLevel" type="int" line="245"/>
            <declaration name="version" type="int" line="246"/>
            <declaration name="pduType" type="int" line="247"/>
            <declaration name="securityModel" type="int" line="248"/>
            <declaration name="contextName" type="byte[]" line="249"/>
            <declaration name="engine" type="SnmpEngineImpl" line="250"/>
            <declaration name="l" type="LongList" line="251"/>
            <method name="AcmChecker" type="constructor" line="252">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                </params>
                <comment line="255">
                    We are in V3 architecture, ACM is in the picture.                    
                </comment>
                <scope line="255">
                    <scope line="256">
                        <scope line="257">
                            <scope line="258"/>
                            <scope line="274">
                                <declaration name="strb" type="StringBuilder" line="275"/>
                            </scope>
                        </scope>
                        <scope line="288">
                            <scope line="289"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="add" type="void" line="300">
                <params>
                    <param name="index" type="int"/>
                    <param name="arc" type="long"/>
                </params>
            </method>
            <method name="remove" type="void" line="305">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="add" type="void" line="311">
                <params>
                    <param name="at" type="int"/>
                    <param name="src" type="long[]"/>
                    <param name="from" type="int"/>
                    <param name="count" type="int"/>
                </params>
            </method>
            <method name="remove" type="void" line="316">
                <params>
                    <param name="from" type="int"/>
                    <param name="count" type="int"/>
                </params>
            </method>
            <method name="checkCurrentOid" type="void" line="321">
                <scope line="322">
                    <declaration name="oid" type="SnmpOid" line="323"/>
                    <scope line="324"/>
                </scope>
            </method>
        </class>
        <class name="SnmpMib" line="340">
            <extends class="SnmpMibAgent"/>
            <comment line="368">
                --------------------------------------------------------------------
                 POLYMORHIC METHODS
                 --------------------------------------------------------------------                
            </comment>
            <comment line="524">
                --------------------------------------------------------------------
                 PUBLIC METHODS
                 --------------------------------------------------------------------                
            </comment>
            <comment line="772">
                --------------------------------------------------------------------
                 PRIVATE METHODS
                ---------------------------------------------------------------------                
            </comment>
            <comment line="1008">
                --------------------------------------------------------------------
                 PROTECTED VARIABLES
                 --------------------------------------------------------------------                
            </comment>
            <comment line="1019">
                --------------------------------------------------------------------
                 PRIVATE VARIABLES
                 --------------------------------------------------------------------                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="340">
                Abstract class for representing an SNMP MIB.
                  &lt;P&gt;
                  When compiling a SNMP MIB, among all the classes generated by
                  &lt;CODE&gt;mibgen&lt;/CODE&gt;, there is one which extends &lt;CODE&gt;SnmpMib&lt;/CODE&gt;
                  for representing a whole MIB.
                  &lt;BR&gt;The class is used by the SNMP protocol adaptor as the entry point in
                  the MIB.
                  &lt;p&gt;This generated class can be subclassed in your code in order to
                  plug in your own specific behaviour.
                  &lt;/p&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <javadoc line="358">
                Default constructor.
                  Initializes the OID tree.                
            </javadoc>
            <method name="SnmpMib" type="constructor" line="362"/>
            <javadoc line="371">
                &lt;p&gt;
                  This callback should return the OID associated to the group
                  identified by the given &lt;code&gt;groupName&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method is provided as a hook to plug-in some custom
                  specific behavior. Although doing so is discouraged you might
                  want to subclass this method in order to store &amp; provide more metadata
                  information (mapping OID &lt;-&gt; symbolic name) within the agent,
                  or to &quot;change&quot; the root of the MIB OID by prefixing the
                  defaultOid by an application dependant OID string, for instance.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The default implementation of this method is to return the given
                  &lt;code&gt;defaultOid&lt;/code&gt;
                  &lt;/p&gt;                
                <param>
                    groupName   The java-ized name of the SNMP group.                    
                </param>
                <param>
                    defaultOid  The OID defined in the MIB for that group
                      (in dot notation).                    
                </param>
                <return>
                    The OID of the group identified by &lt;code&gt;groupName&lt;/code&gt;,
                      in dot-notation.                    
                </return>
            </javadoc>
            <method name="getGroupOid" type="String" line="398">
                <params>
                    <param name="groupName" type="String"/>
                    <param name="defaultOid" type="String"/>
                </params>
            </method>
            <javadoc line="402">
                &lt;p&gt;
                  This callback should return the ObjectName associated to the
                  group identified by the given &lt;code&gt;groupName&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method is provided as a hook to plug-in some custom
                  specific behavior. You might want to override this method
                  in order to provide a different object naming scheme than
                  that proposed by default by &lt;code&gt;mibgen&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method is only meaningful if the MIB is registered
                  in the MBeanServer, otherwise, it will not be called.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The default implementation of this method is to return an ObjectName
                  built from the given &lt;code&gt;defaultName&lt;/code&gt;.
                  &lt;/p&gt;                
                <param>
                    name  The java-ized name of the SNMP group.                    
                </param>
                <param>
                    oid   The OID returned by getGroupOid() - in dot notation.                    
                </param>
                <param>
                    defaultName The name by default generated by &lt;code&gt;
                      mibgen&lt;/code&gt;                    
                </param>
                <return>
                    The ObjectName of the group identified by &lt;code&gt;name&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getGroupObjectName" type="ObjectName" line="434">
                <params>
                    <param name="name" type="String"/>
                    <param name="oid" type="String"/>
                    <param name="defaultName" type="String"/>
                </params>
            </method>
            <javadoc line="438">
                &lt;p&gt;
                  Register an SNMP group and its metadata node in the MIB.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method is provided as a hook to plug-in some custom
                  specific behavior. You might want to override this method
                  if you want to set special links between the MBean, its metadata
                  node, its OID or ObjectName etc..
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the MIB is not registered in the MBeanServer, the &lt;code&gt;
                  server&lt;/code&gt; and &lt;code&gt;groupObjName&lt;/code&gt; parameters will be
                  &lt;code&gt;null&lt;/code&gt;.&lt;br&gt;
                  If the given group MBean is not &lt;code&gt;null&lt;/code&gt;, and if the
                  &lt;code&gt;server&lt;/code&gt; and &lt;code&gt;groupObjName&lt;/code&gt; parameters are
                  not null, then this method will also automatically register the
                  group MBean with the given MBeanServer &lt;code&gt;server&lt;/code&gt;.
                  &lt;/p&gt;                
                <param>
                    groupName  The java-ized name of the SNMP group.                    
                </param>
                <param>
                    groupOid   The OID as returned by getGroupOid() - in dot
                      notation.                    
                </param>
                <param>
                    groupObjName The ObjectName as returned by getGroupObjectName().
                      This parameter may be &lt;code&gt;null&lt;/code&gt; if the
                      MIB is not registered in the MBeanServer.                    
                </param>
                <param>
                    node       The metadata node, as returned by the metadata
                      factory method for this group.                    
                </param>
                <param>
                    group      The MBean for this group, as returned by the
                      MBean factory method for this group.                    
                </param>
                <param>
                    server     The MBeanServer in which the groups are to be
                      registered. This parameter will be &lt;code&gt;null&lt;/code&gt;
                      if the MIB is not registered, otherwise it is a
                      reference to the MBeanServer in which the MIB is
                      registered.                    
                </param>
            </javadoc>
            <method name="registerGroupNode" type="void" line="481">
                <params>
                    <param name="groupName" type="String"/>
                    <param name="groupOid" type="String"/>
                    <param name="groupObjName" type="ObjectName"/>
                    <param name="node" type="SnmpMibNode"/>
                    <param name="group" type="Object"/>
                    <param name="server" type="MBeanServer"/>
                </params>
            </method>
            <method name="registerTableMeta" type="void" line="487"/>
            <javadoc line="487">
                &lt;p&gt;
                  Register an SNMP Table metadata node in the MIB.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;b&gt;&lt;i&gt;
                  This method is used internally and you should never need to
                  call it directly.&lt;/i&gt;&lt;/b&gt;&lt;br&gt; It is used to establish the link
                  between an SNMP table metadata node and its bean-like counterpart.
                  &lt;br&gt;
                  The group metadata nodes will create and register their
                  underlying table metadata nodes in the MIB using this
                  method. &lt;br&gt;
                  The metadata nodes will be later retrieved from the MIB by the
                  bean-like table objects using the getRegisterTableMeta() method.
                  &lt;/p&gt;                
                <param>
                    name      The java-ized name of the SNMP table.                    
                </param>
                <param>
                    table     The SNMP table metadata node - usually this
                      corresponds to a &lt;code&gt;mibgen&lt;/code&gt; generated
                      object.                    
                </param>
            </javadoc>
            <method name="getRegisteredTableMeta" type="SnmpMibTable" line="512"/>
            <javadoc line="512">
                Returns a registered SNMP Table metadata node.
                  &lt;p&gt;&lt;b&gt;&lt;i&gt;
                  This method is used internally and you should never need to
                  call it directly.
                  &lt;/i&gt;&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <javadoc line="527">
                Processes a &lt;CODE&gt;get&lt;/CODE&gt; operation.                
            </javadoc>
            <method name="get" type="void" line="534">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                </params>
                <comment line="532">
                    Implements the method defined in SnmpMibAgent. See SnmpMibAgent
                     for java-doc                    
                </comment>
                <comment line="537">
                    Builds the request tree: creation is not allowed, operation
                     is not atomic.                    
                </comment>
                <comment line="551">
                    For each sub-request stored in the request-tree, invoke the
                     get() method.                    
                </comment>
                <comment line="556">
                    Gets the Meta node. It can be either a Group Meta or a
                     Table Meta.                    
                </comment>
                <comment line="561">
                    Gets the depth of the Meta node in the OID tree                    
                </comment>
                <comment line="567">
                    Invoke the get() operation.                    
                </comment>
                <declaration name="reqType" type="int" line="539"/>
                <declaration name="handlers" type="SnmpRequestTree" line="540"/>
                <declaration name="h" type="SnmpRequestTree.Handler" line="542"/>
                <declaration name="meta" type="SnmpMibNode" line="543"/>
                <scope line="545"/>
                <scope line="552">
                    <declaration name="depth" type="int" line="561"/>
                    <scope line="564"/>
                </scope>
            </method>
            <javadoc line="572">
                Processes a &lt;CODE&gt;set&lt;/CODE&gt; operation.                
            </javadoc>
            <method name="set" type="void" line="579">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                </params>
                <comment line="577">
                    Implements the method defined in SnmpMibAgent. See SnmpMibAgent
                     for java-doc                    
                </comment>
                <comment line="584">
                    Optimization: we&apos;re going to get the whole SnmpRequestTree
                     built in the &quot;check&quot; method, so that we don&apos;t have to rebuild
                     it here.                    
                </comment>
                <comment line="591">
                    Optimization didn&apos;t work: we have to rebuild the tree.
                    
                     Builds the request tree: creation is not allowed, operation
                     is atomic.                    
                </comment>
                <comment line="609">
                    For each sub-request stored in the request-tree, invoke the
                     get() method.                    
                </comment>
                <comment line="614">
                    Gets the Meta node. It can be either a Group Meta or a
                     Table Meta.                    
                </comment>
                <comment line="619">
                    Gets the depth of the Meta node in the OID tree                    
                </comment>
                <comment line="625">
                    Invoke the set() operation                    
                </comment>
                <declaration name="handlers" type="SnmpRequestTree" line="581"/>
                <declaration name="reqType" type="int" line="595"/>
                <declaration name="h" type="SnmpRequestTree.Handler" line="600"/>
                <declaration name="meta" type="SnmpMibNode" line="601"/>
                <scope line="603"/>
                <scope line="610">
                    <declaration name="depth" type="int" line="619"/>
                    <scope line="622"/>
                </scope>
            </method>
            <javadoc line="630">
                Checks if a &lt;CODE&gt;set&lt;/CODE&gt; operation can be performed.
                  If the operation cannot be performed, the method will raise a
                  &lt;CODE&gt;SnmpStatusException&lt;/CODE&gt;.                
            </javadoc>
            <method name="check" type="void" line="639">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                </params>
                <comment line="637">
                    Implements the method defined in SnmpMibAgent. See SnmpMibAgent
                     for java-doc                    
                </comment>
                <comment line="643">
                    Builds the request tree: creation is allowed, operation
                     is atomic.                    
                </comment>
                <comment line="655">
                    For each sub-request stored in the request-tree, invoke the
                     check() method.                    
                </comment>
                <comment line="660">
                    Gets the Meta node. It can be either a Group Meta or a
                     Table Meta.                    
                </comment>
                <comment line="665">
                    Gets the depth of the Meta node in the OID tree                    
                </comment>
                <comment line="671">
                    Invoke the check() operation                    
                </comment>
                <comment line="676">
                    Optimization: we&apos;re going to pass the whole SnmpRequestTree
                     to the &quot;set&quot; method, so that we don&apos;t have to rebuild it there.                    
                </comment>
                <declaration name="reqType" type="int" line="641"/>
                <declaration name="handlers" type="SnmpRequestTree" line="644"/>
                <declaration name="h" type="SnmpRequestTree.Handler" line="646"/>
                <declaration name="meta" type="SnmpMibNode" line="647"/>
                <scope line="649"/>
                <scope line="656">
                    <declaration name="depth" type="int" line="665"/>
                    <scope line="668"/>
                </scope>
                <scope line="678"/>
            </method>
            <javadoc line="684">
                Processes a &lt;CODE&gt;getNext&lt;/CODE&gt; operation.                
            </javadoc>
            <method name="getNext" type="void" line="691">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                </params>
                <comment line="689">
                    Implements the method defined in SnmpMibAgent. See SnmpMibAgent
                     for java-doc                    
                </comment>
                <comment line="693">
                    Build the request tree for the operation
                     The subrequest stored in the request tree are valid GET requests                    
                </comment>
                <comment line="705">
                    Now invoke get() for each subrequest of the request tree.                    
                </comment>
                <comment line="709">
                    Gets the Meta node. It can be either a Group Meta or a
                     Table Meta.                    
                </comment>
                <comment line="714">
                    Gets the depth of the Meta node in the OID tree                    
                </comment>
                <comment line="720">
                    Invoke the get() operation                    
                </comment>
                <declaration name="handlers" type="SnmpRequestTree" line="694"/>
                <declaration name="h" type="SnmpRequestTree.Handler" line="696"/>
                <declaration name="meta" type="SnmpMibNode" line="697"/>
                <scope line="699"/>
                <scope line="705">
                    <declaration name="depth" type="int" line="714"/>
                    <scope line="717"/>
                </scope>
            </method>
            <javadoc line="726">
                Processes a &lt;CODE&gt;getBulk&lt;/CODE&gt; operation.
                  The method implements the &lt;CODE&gt;getBulk&lt;/CODE&gt; operation by calling
                  appropriately the &lt;CODE&gt;getNext&lt;/CODE&gt; method.                
            </javadoc>
            <method name="getBulk" type="void" line="736">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                    <param name="nonRepeat" type="int"/>
                    <param name="maxRepeat" type="int"/>
                </params>
                <comment line="733">
                    Implements the method defined in SnmpMibAgent. See SnmpMibAgent
                     for java-doc                    
                </comment>
            </method>
            <javadoc line="741">
                Gets the root object identifier of the MIB.
                  &lt;P&gt;In order to be accurate, the method should be called once the
                  MIB is fully initialized (that is, after a call to &lt;CODE&gt;init&lt;/CODE&gt;
                  or &lt;CODE&gt;preRegister&lt;/CODE&gt;).                
                <return>
                    The root object identifier.                    
                </return>
            </javadoc>
            <method name="getRootOid" type="long[]" line="749">
                <comment line="755">
                    Ask the tree to do the job !                    
                </comment>
                <comment line="759">
                    Now format the result                    
                </comment>
                <scope line="751">
                    <declaration name="list" type="Vector&lt;Integer&gt;" line="752"/>
                    <declaration name="i" type="int" line="761"/>
                    <scope line="762">
                        <declaration name="val" type="Integer" line="763"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="775">
                This method builds the temporary request-tree that will be used to
                  perform the SNMP request associated with the given vector of varbinds
                  `list&apos;.                
                <param>
                    req The SnmpMibRequest object holding the varbind list
                      concerning this MIB.                    
                </param>
                <param>
                    createflag Indicates whether the operation allow for creation
                      of new instances (ie: it is a SET).                    
                </param>
                <param>
                    atomic Indicates whether the operation is atomic or not.                    
                </param>
                <param>
                    type Request type (from SnmpDefinitions).                    
                </param>
                <return>
                    The request-tree where the original varbind list has been
                      dispatched to the appropriate nodes.                    
                </return>
            </javadoc>
            <method name="getHandlers" type="SnmpRequestTree" line="793">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                    <param name="createflag" type="boolean"/>
                    <param name="atomic" type="boolean"/>
                    <param name="type" type="int"/>
                </params>
                <comment line="796">
                    Build an empty request tree                    
                </comment>
                <comment line="804">
                    For each varbind in the list finds its handling node.                    
                </comment>
                <comment line="810">
                    Find the handling node for this varbind.                    
                </comment>
                <comment line="823">
                    If the operation is atomic (Check/Set) or the version
                     is V1 we must generate an exception.                    
                </comment>
                <comment line="834">
                    The index in the exception must correspond to the
                     SNMP index ...                    
                </comment>
                <comment line="858">
                    Should never come here...                    
                </comment>
                <declaration name="handlers" type="SnmpRequestTree" line="796"/>
                <declaration name="index" type="int" line="799"/>
                <declaration name="var" type="SnmpVarBind" line="800"/>
                <declaration name="ver" type="int" line="801"/>
                <scope line="804">
                    <scope line="808"/>
                    <scope line="812">
                        <scope line="814"/>
                        <scope line="825">
                            <scope line="827"/>
                            <declaration name="sse" type="SnmpStatusException" line="836"/>
                        </scope>
                        <scope line="841">
                            <declaration name="status" type="int" line="842"/>
                            <scope line="845"/>
                            <declaration name="sse" type="SnmpStatusException" line="851"/>
                        </scope>
                        <scope line="855">
                            <scope line="858"/>
                            <declaration name="sse" type="SnmpStatusException" line="864"/>
                        </scope>
                        <declaration name="status" type="int" line="870"/>
                        <scope line="873">
                            <scope line="875"/>
                        </scope>
                        <scope line="884">
                            <scope line="885"/>
                        </scope>
                        <scope line="894">
                            <scope line="896"/>
                            <declaration name="sse" type="SnmpStatusException" line="903"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="913">
                This method builds the temporary request-tree that will be used to
                  perform the SNMP GET-NEXT request associated with the given vector
                  of varbinds `list&apos;.                
                <param>
                    req The SnmpMibRequest object holding the varbind list
                      concerning this MIB.                    
                </param>
                <return>
                    The request-tree where the original varbind list has been
                      dispatched to the appropriate nodes, and where the original
                      OIDs have been replaced with the correct &quot;next&quot; OID.                    
                </return>
            </javadoc>
            <method name="getGetNextHandlers" type="SnmpRequestTree" line="926">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                </params>
                <comment line="929">
                    Creates an empty request tree, no entry creation is allowed (false)                    
                </comment>
                <comment line="933">
                    Sets the getNext flag: if version=V2, status exception are
                     transformed in  endOfMibView                    
                </comment>
                <comment line="946">
                    For each varbind, finds the handling node.
                     This function has the side effect of transforming a GET-NEXT
                     request into a valid GET request, replacing the OIDs in the
                     original GET-NEXT request with the OID of the first leaf that
                     follows.                    
                </comment>
                <comment line="956">
                    Find the node handling the OID that follows the varbind
                     OID. `result&apos; contains this next leaf OID.
                    ACM loop.                    
                </comment>
                <comment line="973">
                    We replace the varbind original OID with the OID of the
                     leaf object we have to return.                    
                </comment>
                <comment line="978">
                    if (isDebugOn())
                        debug(&quot;getGetNextHandlers&quot;,
                            &quot;Couldn&apos;t find a handling node for &quot;
                            + var.oid.toString());                    
                </comment>
                <comment line="990">
                    The index in the exception must correspond to the
                     SNMP index ...                    
                </comment>
                <declaration name="handlers" type="SnmpRequestTree" line="929"/>
                <scope line="936"/>
                <declaration name="checker" type="AcmChecker" line="940"/>
                <declaration name="index" type="int" line="941"/>
                <declaration name="var" type="SnmpVarBind" line="942"/>
                <declaration name="ver" type="int" line="943"/>
                <declaration name="original" type="SnmpOid" line="944"/>
                <scope line="950">
                    <declaration name="result" type="SnmpOid" line="953"/>
                    <scope line="954">
                        <scope line="958"/>
                        <scope line="967"/>
                    </scope>
                    <scope line="975">
                        <scope line="982">
                            <scope line="983"/>
                        </scope>
                        <scope line="994"/>
                    </scope>
                </scope>
            </method>
            <declaration name="root" type="SnmpMibOid" line="1011"/>
            <javadoc line="1011">
                The top element in the Mib tree.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="rootOid" type="long[]" line="1022"/>
            <javadoc line="1022">
                The root object identifier of the MIB.                
            </javadoc>
        </class>
    </source>