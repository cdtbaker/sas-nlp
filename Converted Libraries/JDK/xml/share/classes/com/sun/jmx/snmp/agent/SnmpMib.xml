<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.agent">
        <import package="java.io.Serializable"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.Vector"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MalformedObjectNameException"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.MBeanRegistrationException"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="com.sun.jmx.defaults.JmxProperties.SNMP_ADAPTOR_LOGGER"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpDefinitions"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.SnmpEngine"/>
        <import package="com.sun.jmx.snmp.SnmpUnknownModelException"/>
        <import package="com.sun.jmx.snmp.internal.SnmpAccessControlModel"/>
        <import package="com.sun.jmx.snmp.internal.SnmpEngineImpl"/>
        <class name="LongList" line="21">
            <javadoc line="21">
                This list is used in order to construct the OID during the getnext.
                  The constructed oid is checked by the checker AcmChecker.                
            </javadoc>
            <declaration name="DEFAULT_CAPACITY" type="int" line="26"/>
            <declaration name="DEFAULT_INCREMENT" type="int" line="27"/>
            <declaration name="DELTA" type="int" line="28"/>
            <declaration name="size" type="int" line="29"/>
            <declaration name="list" type="long[]" line="30"/>
            <javadoc line="30">
                The list content. Any access to this variable must be protected
                  by a synchronized block on the LongList object.
                  Only read-only action should be performed on this object.                
            </javadoc>
            <method name="LongList" type="constructor" line="36"/>
            <method name="LongList" type="constructor" line="39">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <method name="LongList" type="constructor" line="42">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="delta" type="int"/>
                </params>
            </method>
            <javadoc line="47">
                Same behaviour than size() in {@link java.util.List}.                
            </javadoc>
            <method name="size" type="int" line="50"/>
            <javadoc line="53">
                Same behaviour than add(long o) in {@link java.util.List}.
                  Any access to this method should be protected in a synchronized
                  block on the LongList object.                
            </javadoc>
            <method name="add" type="boolean" line="58">
                <params>
                    <param name="o" type="long"/>
                </params>
            </method>
            <javadoc line="63">
                Same behaviour than add(int index, long o) in{@link java.util.List}.
                  Any access to this method should be protected in a synchronized
                  block on the LongList object.                
            </javadoc>
            <method name="add" type="void" line="68">
                <params>
                    <param name="index" type="int"/>
                    <param name="o" type="long"/>
                </params>
                <scope line="71"/>
            </method>
            <javadoc line="79">
                Adds &lt;var&gt;count&lt;/var&gt; elements to the list.                
                <param>
                    at index at which the elements must be inserted. The
                      first element will be inserted at this index.                    
                </param>
                <param>
                    src  An array containing the elements we want to insert.                    
                </param>
                <param>
                    from Index of the first element from &lt;var&gt;src&lt;/var&gt; that
                      must be inserted.                    
                </param>
                <param>
                    count number of elements to insert.
                      Any access to this method should be protected in a synchronized
                      block on the LongList object.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="90">
                <params>
                    <param name="at" type="int"/>
                    <param name="src" type="long[]"/>
                    <param name="from" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="94"/>
            </method>
            <javadoc line="100">
                Any access to this method should be protected in a synchronized
                  block on the LongList object.                
            </javadoc>
            <method name="remove" type="long" line="104">
                <params>
                    <param name="from" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <declaration name="o" type="long" line="107"/>
                <declaration name="oldsize" type="int" line="108"/>
            </method>
            <javadoc line="114">
                Same behaviour than remove(int index) in {@link java.util.List}.
                  Any access to this method should be protected in a synchronized
                  block on the LongList object.                
            </javadoc>
            <method name="remove" type="long" line="119">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="o" type="long" line="121"/>
            </method>
            <javadoc line="127">
                Same behaviour than the toArray(long[] a) method in{@link java.util.List}.
                  Any access to this method should be protected in a synchronized
                  block on the LongList object.                
            </javadoc>
            <method name="toArray" type="long[]" line="132">
                <params>
                    <param name="a" type="long[]"/>
                </params>
            </method>
            <javadoc line="136">
                Same behaviour than the toArray() method in{@link java.util.List}.
                  Any access to this method should be protected in a synchronized
                  block on the LongList object.                
            </javadoc>
            <method name="toArray" type="long[]" line="141"/>
            <javadoc line="144">
                Resize the list. Increase its capacity by DELTA elements.
                  Any call to this method must be protected by a synchronized
                  block on this LongList.                
            </javadoc>
            <method name="resize" type="void" line="149">
                <declaration name="newlist" type="long[]" line="150"/>
            </method>
            <javadoc line="154">
                Resize the list. Insure that the new length will be at
                  least equal to &lt;var&gt;length&lt;/var&gt;.                
                <param>
                    length new minimal length requested.
                      Any call to this method must be protected by a synchronized
                      block on this LongList.                    
                </param>
            </javadoc>
            <method name="ensure" type="void" line="161">
                <params>
                    <param name="length" type="int"/>
                </params>
                <scope line="162">
                    <declaration name="min" type="int" line="163"/>
                    <declaration name="newlist" type="long[]" line="165"/>
                </scope>
            </method>
            <javadoc line="170">
                Allocate a new array of object of specified length.                
            </javadoc>
            <method name="allocate" type="long[]" line="173">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
        </class>
        <class name="AcmChecker" line="177">
            <javadoc line="177">
                Oid Checker makes use of ACM to check each OID during the getnext process.                
            </javadoc>
            <declaration name="model" type="SnmpAccessControlModel" line="181"/>
            <declaration name="principal" type="String" line="182"/>
            <declaration name="securityLevel" type="int" line="183"/>
            <declaration name="version" type="int" line="184"/>
            <declaration name="pduType" type="int" line="185"/>
            <declaration name="securityModel" type="int" line="186"/>
            <declaration name="contextName" type="byte[]" line="187"/>
            <declaration name="engine" type="SnmpEngineImpl" line="188"/>
            <declaration name="l" type="LongList" line="189"/>
            <method name="AcmChecker" type="constructor" line="190">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                </params>
                <scope line="192">
                    <scope line="193">
                        <scope line="194">
                            <scope line="195"/>
                            <scope line="206">
                                <declaration name="strb" type="StringBuilder" line="207"/>
                            </scope>
                        </scope>
                        <scope line="211">
                            <scope line="212"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="add" type="void" line="219">
                <params>
                    <param name="index" type="int"/>
                    <param name="arc" type="long"/>
                </params>
            </method>
            <method name="remove" type="void" line="222">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="add" type="void" line="225">
                <params>
                    <param name="at" type="int"/>
                    <param name="src" type="long[]"/>
                    <param name="from" type="int"/>
                    <param name="count" type="int"/>
                </params>
            </method>
            <method name="remove" type="void" line="228">
                <params>
                    <param name="from" type="int"/>
                    <param name="count" type="int"/>
                </params>
            </method>
            <method name="checkCurrentOid" type="void" line="231">
                <scope line="232">
                    <declaration name="oid" type="SnmpOid" line="233"/>
                    <scope line="234"/>
                </scope>
            </method>
        </class>
        <class name="SnmpMib" line="241">
            <extends class="SnmpMibAgent"/>
            <implements interface="Serializable"/>
            <javadoc line="241">
                Abstract class for representing an SNMP MIB.
                  &lt;P&gt;
                  When compiling a SNMP MIB, among all the classes generated by
                  &lt;CODE&gt;mibgen&lt;/CODE&gt;, there is one which extends &lt;CODE&gt;SnmpMib&lt;/CODE&gt;
                  for representing a whole MIB.
                  &lt;BR&gt;The class is used by the SNMP protocol adaptor as the entry point in
                  the MIB.
                  &lt;p&gt;This generated class can be subclassed in your code in order to
                  plug in your own specific behaviour.
                  &lt;/p&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <javadoc line="256">
                Default constructor.
                  Initializes the OID tree.                
            </javadoc>
            <method name="SnmpMib" type="constructor" line="260"/>
            <javadoc line="263">
                &lt;p&gt;
                  This callback should return the OID associated to the group
                  identified by the given &lt;code&gt;groupName&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method is provided as a hook to plug-in some custom
                  specific behavior. Although doing so is discouraged you might
                  want to subclass this method in order to store &amp; provide more metadata
                  information (mapping OID &lt;-&gt; symbolic name) within the agent,
                  or to &quot;change&quot; the root of the MIB OID by prefixing the
                  defaultOid by an application dependant OID string, for instance.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The default implementation of this method is to return the given
                  &lt;code&gt;defaultOid&lt;/code&gt;
                  &lt;/p&gt;                
                <param>
                    groupName   The java-ized name of the SNMP group.                    
                </param>
                <param>
                    defaultOid  The OID defined in the MIB for that group
                      (in dot notation).                    
                </param>
                <return>
                    The OID of the group identified by &lt;code&gt;groupName&lt;/code&gt;,
                      in dot-notation.                    
                </return>
            </javadoc>
            <method name="getGroupOid" type="String" line="286">
                <params>
                    <param name="groupName" type="String"/>
                    <param name="defaultOid" type="String"/>
                </params>
            </method>
            <javadoc line="289">
                &lt;p&gt;
                  This callback should return the ObjectName associated to the
                  group identified by the given &lt;code&gt;groupName&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method is provided as a hook to plug-in some custom
                  specific behavior. You might want to override this method
                  in order to provide a different object naming scheme than
                  that proposed by default by &lt;code&gt;mibgen&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method is only meaningful if the MIB is registered
                  in the MBeanServer, otherwise, it will not be called.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The default implementation of this method is to return an ObjectName
                  built from the given &lt;code&gt;defaultName&lt;/code&gt;.
                  &lt;/p&gt;                
                <param>
                    name  The java-ized name of the SNMP group.                    
                </param>
                <param>
                    oid   The OID returned by getGroupOid() - in dot notation.                    
                </param>
                <param>
                    defaultName The name by default generated by &lt;code&gt;
                      mibgen&lt;/code&gt;                    
                </param>
                <return>
                    The ObjectName of the group identified by &lt;code&gt;name&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getGroupObjectName" type="ObjectName" line="314">
                <params>
                    <param name="name" type="String"/>
                    <param name="oid" type="String"/>
                    <param name="defaultName" type="String"/>
                </params>
            </method>
            <javadoc line="317">
                &lt;p&gt;
                  Register an SNMP group and its metadata node in the MIB.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method is provided as a hook to plug-in some custom
                  specific behavior. You might want to override this method
                  if you want to set special links between the MBean, its metadata
                  node, its OID or ObjectName etc..
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the MIB is not registered in the MBeanServer, the &lt;code&gt;
                  server&lt;/code&gt; and &lt;code&gt;groupObjName&lt;/code&gt; parameters will be
                  &lt;code&gt;null&lt;/code&gt;.&lt;br&gt;
                  If the given group MBean is not &lt;code&gt;null&lt;/code&gt;, and if the
                  &lt;code&gt;server&lt;/code&gt; and &lt;code&gt;groupObjName&lt;/code&gt; parameters are
                  not null, then this method will also automatically register the
                  group MBean with the given MBeanServer &lt;code&gt;server&lt;/code&gt;.
                  &lt;/p&gt;                
                <param>
                    groupName  The java-ized name of the SNMP group.                    
                </param>
                <param>
                    groupOid   The OID as returned by getGroupOid() - in dot
                      notation.                    
                </param>
                <param>
                    groupObjName The ObjectName as returned by getGroupObjectName().
                      This parameter may be &lt;code&gt;null&lt;/code&gt; if the
                      MIB is not registered in the MBeanServer.                    
                </param>
                <param>
                    node       The metadata node, as returned by the metadata
                      factory method for this group.                    
                </param>
                <param>
                    group      The MBean for this group, as returned by the
                      MBean factory method for this group.                    
                </param>
                <param>
                    server     The MBeanServer in which the groups are to be
                      registered. This parameter will be &lt;code&gt;null&lt;/code&gt;
                      if the MIB is not registered, otherwise it is a
                      reference to the MBeanServer in which the MIB is
                      registered.                    
                </param>
            </javadoc>
            <method name="registerGroupNode" type="void" line="352">
                <params>
                    <param name="groupName" type="String"/>
                    <param name="groupOid" type="String"/>
                    <param name="groupObjName" type="ObjectName"/>
                    <param name="node" type="SnmpMibNode"/>
                    <param name="group" type="Object"/>
                    <param name="server" type="MBeanServer"/>
                </params>
            </method>
            <method name="registerTableMeta" type="void" line="356"/>
            <javadoc line="356">
                &lt;p&gt;
                  Register an SNMP Table metadata node in the MIB.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;b&gt;&lt;i&gt;
                  This method is used internally and you should never need to
                  call it directly.&lt;/i&gt;&lt;/b&gt;&lt;br&gt; It is used to establish the link
                  between an SNMP table metadata node and its bean-like counterpart.
                  &lt;br&gt;
                  The group metadata nodes will create and register their
                  underlying table metadata nodes in the MIB using this
                  method. &lt;br&gt;
                  The metadata nodes will be later retrieved from the MIB by the
                  bean-like table objects using the getRegisterTableMeta() method.
                  &lt;/p&gt;                
                <param>
                    name      The java-ized name of the SNMP table.                    
                </param>
                <param>
                    table     The SNMP table metadata node - usually this
                      corresponds to a &lt;code&gt;mibgen&lt;/code&gt; generated
                      object.                    
                </param>
            </javadoc>
            <method name="getRegisteredTableMeta" type="SnmpMibTable" line="378"/>
            <javadoc line="378">
                Returns a registered SNMP Table metadata node.
                  &lt;p&gt;&lt;b&gt;&lt;i&gt;
                  This method is used internally and you should never need to
                  call it directly.
                  &lt;/i&gt;&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <javadoc line="386">
                Processes a &lt;CODE&gt;get&lt;/CODE&gt; operation.                
            </javadoc>
            <method name="get" type="void" line="389">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                </params>
                <declaration name="reqType" type="int" line="390"/>
                <declaration name="handlers" type="SnmpRequestTree" line="391"/>
                <declaration name="h" type="SnmpRequestTree.Handler" line="392"/>
                <declaration name="meta" type="SnmpMibNode" line="393"/>
                <scope line="394"/>
                <scope line="397">
                    <declaration name="depth" type="int" line="400"/>
                    <scope line="401"/>
                </scope>
            </method>
            <javadoc line="406">
                Processes a &lt;CODE&gt;set&lt;/CODE&gt; operation.                
            </javadoc>
            <method name="set" type="void" line="409">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                </params>
                <declaration name="handlers" type="SnmpRequestTree" line="410"/>
                <declaration name="reqType" type="int" line="412"/>
                <declaration name="h" type="SnmpRequestTree.Handler" line="416"/>
                <declaration name="meta" type="SnmpMibNode" line="417"/>
                <scope line="418"/>
                <scope line="421">
                    <declaration name="depth" type="int" line="424"/>
                    <scope line="425"/>
                </scope>
            </method>
            <javadoc line="430">
                Checks if a &lt;CODE&gt;set&lt;/CODE&gt; operation can be performed.
                  If the operation cannot be performed, the method will raise a
                  &lt;CODE&gt;SnmpStatusException&lt;/CODE&gt;.                
            </javadoc>
            <method name="check" type="void" line="435">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                </params>
                <declaration name="reqType" type="int" line="436"/>
                <declaration name="handlers" type="SnmpRequestTree" line="437"/>
                <declaration name="h" type="SnmpRequestTree.Handler" line="438"/>
                <declaration name="meta" type="SnmpMibNode" line="439"/>
                <scope line="440"/>
                <scope line="443">
                    <declaration name="depth" type="int" line="446"/>
                    <scope line="447"/>
                </scope>
                <scope line="451"/>
            </method>
            <javadoc line="455">
                Processes a &lt;CODE&gt;getNext&lt;/CODE&gt; operation.                
            </javadoc>
            <method name="getNext" type="void" line="458">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                </params>
                <declaration name="handlers" type="SnmpRequestTree" line="459"/>
                <declaration name="h" type="SnmpRequestTree.Handler" line="460"/>
                <declaration name="meta" type="SnmpMibNode" line="461"/>
                <scope line="462"/>
                <scope line="465">
                    <declaration name="depth" type="int" line="468"/>
                    <scope line="469"/>
                </scope>
            </method>
            <javadoc line="474">
                Processes a &lt;CODE&gt;getBulk&lt;/CODE&gt; operation.
                  The method implements the &lt;CODE&gt;getBulk&lt;/CODE&gt; operation by calling
                  appropriately the &lt;CODE&gt;getNext&lt;/CODE&gt; method.                
            </javadoc>
            <method name="getBulk" type="void" line="479">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                    <param name="nonRepeat" type="int"/>
                    <param name="maxRepeat" type="int"/>
                </params>
            </method>
            <javadoc line="482">
                Gets the root object identifier of the MIB.
                  &lt;P&gt;In order to be accurate, the method should be called once the
                  MIB is fully initialized (that is, after a call to &lt;CODE&gt;init&lt;/CODE&gt;
                  or &lt;CODE&gt;preRegister&lt;/CODE&gt;).                
                <return>
                    The root object identifier.                    
                </return>
            </javadoc>
            <method name="getRootOid" type="long[]" line="489">
                <scope line="490">
                    <declaration name="list" type="Vector&amp;lt;Integer&amp;gt;" line="491"/>
                    <declaration name="i" type="int" line="494"/>
                    <scope line="495">
                        <declaration name="val" type="Integer" line="496"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="502">
                This method builds the temporary request-tree that will be used to
                  perform the SNMP request associated with the given vector of varbinds
                  `list&apos;.                
                <param>
                    req The SnmpMibRequest object holding the varbind list
                      concerning this MIB.                    
                </param>
                <param>
                    createflag Indicates whether the operation allow for creation
                      of new instances (ie: it is a SET).                    
                </param>
                <param>
                    atomic Indicates whether the operation is atomic or not.                    
                </param>
                <param>
                    type Request type (from SnmpDefinitions).                    
                </param>
                <return>
                    The request-tree where the original varbind list has been
                      dispatched to the appropriate nodes.                    
                </return>
            </javadoc>
            <method name="getHandlers" type="SnmpRequestTree" line="515">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                    <param name="createflag" type="boolean"/>
                    <param name="atomic" type="boolean"/>
                    <param name="type" type="int"/>
                </params>
                <declaration name="handlers" type="SnmpRequestTree" line="516"/>
                <declaration name="index" type="int" line="517"/>
                <declaration name="var" type="SnmpVarBind" line="518"/>
                <declaration name="ver" type="int" line="519"/>
                <scope line="520">
                    <scope line="522"/>
                    <scope line="525">
                        <scope line="526"/>
                        <scope line="529">
                            <scope line="530"/>
                            <declaration name="sse" type="SnmpStatusException" line="533"/>
                        </scope>
                        <scope line="537">
                            <declaration name="status" type="int" line="538"/>
                            <scope line="539"/>
                            <declaration name="sse" type="SnmpStatusException" line="542"/>
                        </scope>
                        <scope line="546">
                            <scope line="547"/>
                            <declaration name="sse" type="SnmpStatusException" line="550"/>
                        </scope>
                        <declaration name="status" type="int" line="554"/>
                        <scope line="555">
                            <scope line="556"/>
                        </scope>
                        <scope line="561">
                            <scope line="562"/>
                        </scope>
                        <scope line="567">
                            <scope line="568"/>
                            <declaration name="sse" type="SnmpStatusException" line="571"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="579">
                This method builds the temporary request-tree that will be used to
                  perform the SNMP GET-NEXT request associated with the given vector
                  of varbinds `list&apos;.                
                <param>
                    req The SnmpMibRequest object holding the varbind list
                      concerning this MIB.                    
                </param>
                <return>
                    The request-tree where the original varbind list has been
                      dispatched to the appropriate nodes, and where the original
                      OIDs have been replaced with the correct &quot;next&quot; OID.                    
                </return>
            </javadoc>
            <method name="getGetNextHandlers" type="SnmpRequestTree" line="589">
                <params>
                    <param name="req" type="SnmpMibRequest"/>
                </params>
                <declaration name="handlers" type="SnmpRequestTree" line="590"/>
                <scope line="592"/>
                <declaration name="checker" type="AcmChecker" line="595"/>
                <declaration name="index" type="int" line="596"/>
                <declaration name="var" type="SnmpVarBind" line="597"/>
                <declaration name="ver" type="int" line="598"/>
                <declaration name="original" type="SnmpOid" line="599"/>
                <scope line="600">
                    <declaration name="result" type="SnmpOid" line="602"/>
                    <scope line="603">
                        <scope line="604"/>
                        <scope line="608"/>
                    </scope>
                    <scope line="613">
                        <scope line="614">
                            <scope line="615"/>
                        </scope>
                        <scope line="620"/>
                    </scope>
                </scope>
            </method>
            <declaration name="root" type="SnmpMibOid" line="628"/>
            <javadoc line="628">
                The top element in the Mib tree.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="rootOid" type="long[]" line="633"/>
            <javadoc line="633">
                The root object identifier of the MIB.                
            </javadoc>
        </class>
    </source>