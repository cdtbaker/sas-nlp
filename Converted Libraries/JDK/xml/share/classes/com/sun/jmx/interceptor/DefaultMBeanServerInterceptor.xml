<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.interceptor">
        <import package="com.sun.jmx.defaults.JmxProperties.MBEANSERVER_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.DynamicMBean2"/>
        <import package="com.sun.jmx.mbeanserver.Introspector"/>
        <import package="com.sun.jmx.mbeanserver.MBeanInstantiator"/>
        <import package="com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository"/>
        <import package="com.sun.jmx.mbeanserver.NamedObject"/>
        <import package="com.sun.jmx.mbeanserver.Repository"/>
        <import package="com.sun.jmx.mbeanserver.Repository.RegistrationContext"/>
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.ProtectionDomain"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.WeakHashMap"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.Attribute"/>
        <import package="javax.management.AttributeList"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.DynamicMBean"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.IntrospectionException"/>
        <import package="javax.management.InvalidAttributeValueException"/>
        <import package="javax.management.JMRuntimeException"/>
        <import package="javax.management.ListenerNotFoundException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.MBeanPermission"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.MBeanRegistrationException"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanServerDelegate"/>
        <import package="javax.management.MBeanServerNotification"/>
        <import package="javax.management.MBeanTrustPermission"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationBroadcaster"/>
        <import package="javax.management.NotificationEmitter"/>
        <import package="javax.management.NotificationFilter"/>
        <import package="javax.management.NotificationListener"/>
        <import package="javax.management.ObjectInstance"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.OperationsException"/>
        <import package="javax.management.QueryEval"/>
        <import package="javax.management.QueryExp"/>
        <import package="javax.management.ReflectionException"/>
        <import package="javax.management.RuntimeErrorException"/>
        <import package="javax.management.RuntimeMBeanException"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <import package="javax.management.loading.ClassLoaderRepository"/>
        <class name="DefaultMBeanServerInterceptor" line="92">
            <comment line="142">
                                
            </comment>
            <comment line="143">
                Now sequence number is handled by MBeanServerDelegate.
                 private int sequenceNumber=0;                
            </comment>
            <comment line="827">
                Centralize some of the tedious exception wrapping demanded by the JMX                
            </comment>
            <comment line="1128">
                Notification handling.
                
                 This is not trivial, because the MBeanServer translates the
                 source of a received notification from a reference to an MBean
                 into the ObjectName of that MBean.  While that does make
                 notification sending easier for MBean writers, it comes at a
                 considerable cost.  We need to replace the source of a
                 notification, which is basically wrong if there are also
                 listeners registered directly with the MBean (without going
                 through the MBean server).  We also need to wrap the listener
                 supplied by the client of the MBeanServer with a listener that
                 performs the substitution before forwarding.  This is why we
                 strongly discourage people from putting MBean references in the
                 source of their notifications.  Instead they should arrange to
                 put the ObjectName there themselves.
                
                 However, existing code relies on the substitution, so we are
                 stuck with it.
                
                 Here&apos;s how we handle it.  When you add a listener, we make a
                 ListenerWrapper around it.  We look that up in the
                 listenerWrappers map, and if there was already a wrapper for
                 that listener with the given ObjectName, we reuse it.  This map
                 is a WeakHashMap, so a listener that is no longer registered
                 with any MBean can be garbage collected.
                
                 We cannot use simpler solutions such as always creating a new
                 wrapper or always registering the same listener with the MBean
                 and using the handback to find the client&apos;s original listener.
                 The reason is that we need to support the removeListener
                 variant that removes all (listener,filter,handback) triples on
                 a broadcaster that have a given listener.  And we do not have
                 any way to inspect a broadcaster&apos;s internal list of triples.
                 So the same client listener must always map to the same
                 listener registered with the broadcaster.
                
                 Another possible solution would be to map from ObjectName to
                 list of listener wrappers (or IdentityHashMap of listener
                 wrappers), making this list the first time a listener is added
                 on a given MBean, and removing it when the MBean is removed.
                 This is probably more costly in memory, but could be useful if
                 some day we don&apos;t want to rely on weak references.                
            </comment>
            <comment line="1650">
                Get the existing wrapper for this listener, name, and mbean, if
                 there is one.  Otherwise, if &quot;create&quot; is true, create and
                 return one.  Otherwise, return null.
                
                 We use a WeakHashMap so that if the only reference to a user
                 listener is in listenerWrappers, it can be garbage collected.
                 This requires a certain amount of care, because only the key in
                 a WeakHashMap is weak; the value is strong.  We need to recover
                 the existing wrapper object (not just an object that is equal
                 to it), so we would like listenerWrappers to map any
                 ListenerWrapper to the canonical ListenerWrapper for that
                 (listener,name,mbean) set.  But we do not want this canonical
                 wrapper to be referenced strongly.  Therefore we put it inside
                 a WeakReference and that is the value in the WeakHashMap.                
            </comment>
            <comment line="1798">
                SECURITY CHECKS
                ----------------                
            </comment>
            <comment line="1853">
                ------------------------------------------------------------------
                
                 Dealing with registration of special MBeans in the repository.
                
                 ------------------------------------------------------------------                
            </comment>
            <implements interface="MBeanServerInterceptor"/>
            <javadoc line="92">
                This is the default class for MBean manipulation on the agent side. It
                  contains the methods necessary for the creation, registration, and
                  deletion of MBeans as well as the access methods for registered MBeans.
                  This is the core component of the JMX infrastructure.
                  &lt;P&gt;
                  Every MBean which is added to the MBean server becomes manageable: its attributes and operations
                  become remotely accessible through the connectors/adaptors connected to that MBean server.
                  A Java object cannot be registered in the MBean server unless it is a JMX compliant MBean.
                  &lt;P&gt;
                  When an MBean is registered or unregistered in the MBean server an{@link javax.management.MBeanServerNotification MBeanServerNotification}Notification is emitted. To register an object as listener to MBeanServerNotifications
                  you should call the MBean server method {@link #addNotificationListener addNotificationListener} with &lt;CODE&gt;ObjectName&lt;/CODE&gt;
                  the &lt;CODE&gt;ObjectName&lt;/CODE&gt; of the {@link javax.management.MBeanServerDelegate MBeanServerDelegate}.
                  This &lt;CODE&gt;ObjectName&lt;/CODE&gt; is:
                  &lt;BR&gt;
                  &lt;CODE&gt;JMImplementation:type=MBeanServerDelegate&lt;/CODE&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="instantiator" type="MBeanInstantiator" line="115"/>
            <javadoc line="115">
                The MBeanInstantiator object used by the
                  DefaultMBeanServerInterceptor                
            </javadoc>
            <declaration name="server" type="MBeanServer" line="119"/>
            <javadoc line="119">
                The MBean server object that is associated to the
                  DefaultMBeanServerInterceptor                
            </javadoc>
            <declaration name="delegate" type="MBeanServerDelegate" line="123"/>
            <javadoc line="123">
                The MBean server delegate object that is associated to the
                  DefaultMBeanServerInterceptor                
            </javadoc>
            <declaration name="repository" type="Repository" line="127"/>
            <javadoc line="127">
                The Repository object used by the DefaultMBeanServerInterceptor                
            </javadoc>
            <declaration name="listenerWrappers" type="WeakHashMap&lt;ListenerWrapper,WeakReference&lt;ListenerWrapper&gt;&gt;" line="130"/>
            <javadoc line="130">
                Wrappers for client listeners.                
            </javadoc>
            <declaration name="domain" type="String" line="138"/>
            <javadoc line="138">
                The default domain of the object names                
            </javadoc>
            <javadoc line="145">
                Creates a DefaultMBeanServerInterceptor with the specified
                  repository instance.
                  &lt;p&gt;Do not forget to call &lt;code&gt;initialize(outer,delegate)&lt;/code&gt;
                  before using this object.                
                <param>
                    outer A pointer to the MBeanServer object that must be
                      passed to the MBeans when invoking their{@link javax.management.MBeanRegistration} interface.                    
                </param>
                <param>
                    delegate A pointer to the MBeanServerDelegate associated
                      with the new MBeanServer. The new MBeanServer must register
                      this MBean in its MBean repository.                    
                </param>
                <param>
                    instantiator The MBeanInstantiator that will be used to
                      instantiate MBeans and take care of class loading issues.                    
                </param>
                <param>
                    repository The repository to use for this MBeanServer.                    
                </param>
            </javadoc>
            <method name="DefaultMBeanServerInterceptor" type="constructor" line="163">
                <params>
                    <param name="outer" type="MBeanServer"/>
                    <param name="delegate" type="MBeanServerDelegate"/>
                    <param name="instantiator" type="MBeanInstantiator"/>
                    <param name="repository" type="Repository"/>
                </params>
            </method>
            <method name="createMBean" type="ObjectInstance" line="183">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <method name="createMBean" type="ObjectInstance" line="193">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="loaderName" type="ObjectName"/>
                </params>
            </method>
            <method name="createMBean" type="ObjectInstance" line="203">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="params" type="Object[]"/>
                    <param name="signature" type="String[]"/>
                </params>
                <comment line="210">
                    Can only happen if loaderName doesn&apos;t exist, but we just                    
                </comment>
                <scope line="205"/>
                <scope line="208"/>
            </method>
            <method name="createMBean" type="ObjectInstance" line="221">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="params" type="Object[]"/>
                    <param name="signature" type="String[]"/>
                </params>
            </method>
            <method name="createMBean" type="ObjectInstance" line="233">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="withDefaultLoaderRepository" type="boolean"/>
                    <param name="params" type="Object[]"/>
                    <param name="signature" type="String[]"/>
                </params>
                <comment line="260">
                                        
                </comment>
                <comment line="296">
                    Check that the MBean can be instantiated by the MBeanServer.                    
                </comment>
                <comment line="299">
                    Check the JMX MBean compliance of the class                    
                </comment>
                <declaration name="theClass" type="Class&lt;?&gt;" line="235"/>
                <scope line="237">
                    <declaration name="wrapped" type="RuntimeException" line="238"/>
                </scope>
                <scope line="244">
                    <scope line="245">
                        <declaration name="wrapped" type="RuntimeException" line="246"/>
                        <declaration name="msg" type="String" line="249"/>
                    </scope>
                </scope>
                <scope line="260">
                    <scope line="261"/>
                </scope>
                <scope line="269">
                    <scope line="270"/>
                </scope>
                <scope line="279">
                    <scope line="282"/>
                </scope>
                <declaration name="moi" type="Object" line="301"/>
                <declaration name="infoClassName" type="String" line="304"/>
            </method>
            <method name="registerMBean" type="ObjectInstance" line="311">
                <params>
                    <param name="object" type="Object"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="314">
                    ------------------------------
                     ------------------------------                    
                </comment>
                <declaration name="theClass" type="Class&lt;?&gt;" line="315"/>
                <declaration name="infoClassName" type="String" line="319"/>
            </method>
            <method name="getNewMBeanClassName" type="String" line="328">
                <params>
                    <param name="mbeanToRegister" type="Object"/>
                </params>
                <comment line="336">
                    Includes case where getMBeanInfo() returns null                    
                </comment>
                <scope line="329">
                    <declaration name="mbean" type="DynamicMBean" line="330"/>
                    <declaration name="name" type="String" line="331"/>
                    <scope line="332"/>
                    <scope line="334">
                        <declaration name="ncmbe" type="NotCompliantMBeanException" line="336"/>
                    </scope>
                    <scope line="341">
                        <declaration name="msg" type="String" line="342"/>
                    </scope>
                </scope>
            </method>
            <declaration name="beingUnregistered" type="Set&lt;ObjectName&gt;" line="350"/>
            <method name="unregisterMBean" type="void" line="354">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="366">
                    The semantics of preDeregister are tricky.  If it throws an
                    exception, then the unregisterMBean fails.  This allows an
                    MBean to refuse to be unregistered.  If it returns
                    successfully, then the unregisterMBean can proceed.  In
                    this case the preDeregister may have cleaned up some state,
                    and will not expect to be called a second time.  So if two
                    threads try to unregister the same MBean at the same time
                    then one of them must wait for the other one to either (a)
                    call preDeregister and get an exception or (b) call
                    preDeregister successfully and unregister the MBean.
                    Suppose thread T1 is unregistering an MBean and thread T2
                    is trying to unregister the same MBean, so waiting for T1.
                    Then a deadlock is possible if the preDeregister for T1
                    ends up needing a lock held by T2.  Given the semantics
                    just described, there does not seem to be any way to avoid
                    this.  This will not happen to code where it is clear for
                    any given MBean what thread may unregister that MBean.
                    
                    On the other hand we clearly do not want a thread that is
                    unregistering MBean A to have to wait for another thread
                    that is unregistering another MBean B (see bug 6318664).  A
                    deadlock in this situation could reasonably be considered
                    gratuitous.  So holding a global lock across the
                    preDeregister call would be bad.
                    
                    So we have a set of ObjectNames that some thread is
                    currently unregistering.  When a thread wants to unregister
                    a name, it must first check if the name is in the set, and
                    if so it must wait.  When a thread successfully unregisters
                    a name it removes the name from the set and notifies any
                    waiting threads that the set has changed.
                    
                    This implies that we must be very careful to ensure that
                    the name is removed from the set and waiters notified, no                    
                </comment>
                <comment line="408">
                    pretend the exception came from preDeregister;
                     in another execution sequence it could have                    
                </comment>
                <scope line="356">
                    <declaration name="wrapped" type="RuntimeException" line="357"/>
                </scope>
                <scope line="401">
                    <scope line="402">
                        <scope line="403"/>
                        <scope line="405"/>
                    </scope>
                </scope>
                <scope line="414"/>
                <scope line="416">
                    <scope line="417"/>
                </scope>
            </method>
            <method name="exclusiveUnregisterMBean" type="void" line="425">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="429">
                    may throw InstanceNotFoundException                    
                </comment>
                <comment line="438">
                    Unregisters the MBean from the repository.
                     Returns the resource context that was used.
                     The returned context does nothing for regular MBeans.
                     For ClassLoader MBeans and JMXNamespace (and JMXDomain)
                     MBeans - the context makes it possible to unregister these
                     objects from the appropriate framework artifacts, such as
                     the CLR or the dispatcher, from within the repository lock.
                     In case of success, we also need to call context.done() at the
                     end of this method.                    
                </comment>
                <declaration name="instance" type="DynamicMBean" line="427"/>
                <declaration name="resource" type="Object" line="435"/>
                <declaration name="context" type="ResourceContext" line="447"/>
                <scope line="450"/>
                <scope line="453"/>
            </method>
            <method name="getObjectInstance" type="ObjectInstance" line="459">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="instance" type="DynamicMBean" line="462"/>
                <declaration name="className" type="String" line="466"/>
            </method>
            <method name="queryMBeans" type="Set<ObjectInstance>" line="471">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <comment line="475">
                    Check if the caller has the right to invoke &apos;queryMBeans&apos;                    
                </comment>
                <comment line="479">
                    Perform query without &quot;query&quot;.                    
                </comment>
                <comment line="483">
                    Check if the caller has the right to invoke &apos;queryMBeans&apos;
                     on each specific classname/objectname in the list.                    
                </comment>
                <comment line="494">
                    OK: Do not add this ObjectInstance to the list                    
                </comment>
                <comment line="498">
                    Apply query to allowed MBeans only.                    
                </comment>
                <comment line="502">
                    Perform query.                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="472"/>
                <scope line="473">
                    <declaration name="list" type="Set&lt;ObjectInstance&gt;" line="480"/>
                    <declaration name="allowedList" type="Set&lt;ObjectInstance&gt;" line="485"/>
                    <scope line="487">
                        <scope line="488"/>
                        <scope line="492"/>
                    </scope>
                </scope>
                <scope line="500"/>
            </method>
            <method name="queryMBeansImpl" type="Set<ObjectInstance>" line="508">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <comment line="510">
                    Query the MBeans on the repository                    
                </comment>
                <declaration name="list" type="Set&lt;NamedObject&gt;" line="511"/>
            </method>
            <method name="queryNames" type="Set<ObjectName>" line="516">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <comment line="521">
                    Check if the caller has the right to invoke &apos;queryNames&apos;                    
                </comment>
                <comment line="525">
                    Perform query without &quot;query&quot;.                    
                </comment>
                <comment line="529">
                    Check if the caller has the right to invoke &apos;queryNames&apos;
                     on each specific classname/objectname in the list.                    
                </comment>
                <comment line="540">
                    OK: Do not add this ObjectInstance to the list                    
                </comment>
                <comment line="544">
                    Apply query to allowed MBeans only.                    
                </comment>
                <comment line="553">
                    Perform query.                    
                </comment>
                <declaration name="queryList" type="Set&lt;ObjectName&gt;" line="517"/>
                <declaration name="sm" type="SecurityManager" line="518"/>
                <scope line="519">
                    <declaration name="list" type="Set&lt;ObjectInstance&gt;" line="526"/>
                    <declaration name="allowedList" type="Set&lt;ObjectInstance&gt;" line="531"/>
                    <scope line="533">
                        <scope line="534"/>
                        <scope line="538"/>
                    </scope>
                    <declaration name="queryObjectInstanceList" type="Set&lt;ObjectInstance&gt;" line="545"/>
                    <scope line="548"/>
                </scope>
                <scope line="551"/>
            </method>
            <method name="queryNamesImpl" type="Set<ObjectName>" line="559">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <comment line="561">
                    Query the MBeans on the repository                    
                </comment>
                <declaration name="list" type="Set&lt;NamedObject&gt;" line="562"/>
            </method>
            <method name="isRegistered" type="boolean" line="567">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="577">
                                        
                </comment>
                <comment line="578">
                    isRegistered is always unchecked as per JMX spec.                    
                </comment>
                <scope line="568"/>
            </method>
            <method name="getDomains" type="String[]" line="582">
                <comment line="586">
                    Check if the caller has the right to invoke &apos;getDomains&apos;                    
                </comment>
                <comment line="590">
                    Return domains                    
                </comment>
                <comment line="594">
                    Check if the caller has the right to invoke &apos;getDomains&apos;
                     on each specific domain in the list.                    
                </comment>
                <comment line="604">
                    OK: Do not add this domain to the list                    
                </comment>
                <comment line="608">
                    Make an array from result.                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="583"/>
                <scope line="584">
                    <declaration name="domains" type="String[]" line="591"/>
                    <declaration name="result" type="List&lt;String&gt;" line="596"/>
                    <scope line="597">
                        <scope line="598">
                            <declaration name="dom" type="ObjectName" line="599"/>
                        </scope>
                        <scope line="602"/>
                    </scope>
                </scope>
                <scope line="610"/>
            </method>
            <method name="getMBeanCount" type="Integer" line="615"/>
            <method name="getAttribute" type="Object" line="621">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                </params>
                <comment line="653">
                    not reached                    
                </comment>
                <scope line="623"/>
                <scope line="628"/>
                <scope line="636"/>
                <declaration name="instance" type="DynamicMBean" line="643"/>
                <scope line="646"/>
                <scope line="648"/>
                <scope line="650"/>
            </method>
            <method name="getAttributes" type="AttributeList" line="657">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attributes" type="String[]"/>
                </params>
                <comment line="688">
                    Check if the caller has the right to invoke &apos;getAttribute&apos;                    
                </comment>
                <comment line="692">
                    Check if the caller has the right to invoke &apos;getAttribute&apos;
                     on each specific attribute                    
                </comment>
                <comment line="702">
                    OK: Do not add this attribute to the list                    
                </comment>
                <scope line="659"/>
                <scope line="665"/>
                <scope line="673"/>
                <declaration name="instance" type="DynamicMBean" line="679"/>
                <declaration name="allowedAttributes" type="String[]" line="680"/>
                <declaration name="sm" type="SecurityManager" line="681"/>
                <scope line="684">
                    <declaration name="classname" type="String" line="685"/>
                    <declaration name="allowedList" type="List&lt;String&gt;" line="694"/>
                    <scope line="696">
                        <scope line="697"/>
                        <scope line="700"/>
                    </scope>
                </scope>
                <scope line="708"/>
                <scope line="710"/>
            </method>
            <method name="setAttribute" type="void" line="719">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attribute" type="Attribute"/>
                </params>
                <scope line="721"/>
                <scope line="727"/>
                <scope line="735"/>
                <declaration name="instance" type="DynamicMBean" line="742"/>
                <scope line="745"/>
                <scope line="747"/>
                <scope line="749"/>
                <scope line="751"/>
            </method>
            <method name="setAttributes" type="AttributeList" line="759">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attributes" type="AttributeList"/>
                </params>
                <comment line="784">
                    Check if the caller has the right to invoke &apos;setAttribute&apos;                    
                </comment>
                <comment line="788">
                    Check if the caller has the right to invoke &apos;setAttribute&apos;
                     on each specific attribute                    
                </comment>
                <comment line="798">
                    OK: Do not add this attribute to the list                    
                </comment>
                <scope line="761"/>
                <scope line="767"/>
                <declaration name="instance" type="DynamicMBean" line="775"/>
                <declaration name="allowedAttributes" type="AttributeList" line="776"/>
                <declaration name="sm" type="SecurityManager" line="777"/>
                <scope line="780">
                    <declaration name="classname" type="String" line="781"/>
                    <scope line="791">
                        <scope line="792"/>
                        <scope line="796"/>
                    </scope>
                </scope>
                <scope line="801"/>
                <scope line="803"/>
            </method>
            <method name="invoke" type="Object" line="812">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="operationName" type="String"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                </params>
                <declaration name="instance" type="DynamicMBean" line="816"/>
                <scope line="818"/>
                <scope line="820"/>
            </method>
            <method name="rethrow" type="void" line="829">
                <params>
                    <param name="t" type="Throwable"/>
                </params>
                <comment line="844">
                    should not happen                    
                </comment>
                <scope line="830"/>
                <scope line="832"/>
                <scope line="834"/>
                <scope line="836"/>
                <scope line="838"/>
                <scope line="840"/>
                <scope line="842"/>
            </method>
            <method name="rethrowMaybeMBeanException" type="void" line="849">
                <params>
                    <param name="t" type="Throwable"/>
                </params>
            </method>
            <javadoc line="855">
                Register &lt;code&gt;object&lt;/code&gt; in the repository, with the
                  given &lt;code&gt;name&lt;/code&gt;.
                  This method is called by the various createMBean() flavours
                  and by registerMBean() after all MBean compliance tests
                  have been performed.
                  &lt;p&gt;
                  This method does not performed any kind of test compliance,
                  and the caller should make sure that the given &lt;code&gt;object&lt;/code&gt;
                  is MBean compliant.
                  &lt;p&gt;
                  This methods performed all the basic steps needed for object
                  registration:
                  &lt;ul&gt;
                  &lt;li&gt;If the &lt;code&gt;object&lt;/code&gt; implements the MBeanRegistration
                  interface, it invokes preRegister() on the object.&lt;/li&gt;
                  &lt;li&gt;Then the object is added to the repository with the given
                  &lt;code&gt;name&lt;/code&gt;.&lt;/li&gt;
                  &lt;li&gt;Finally, if the &lt;code&gt;object&lt;/code&gt; implements the
                  MBeanRegistration interface, it invokes postRegister()
                  on the object.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    object A reference to a MBean compliant object.                    
                </param>
                <param>
                    name   The ObjectName of the <code>object</code> MBean.                    
                </param>
                <return>
                    the actual ObjectName with which the object was registered.                    
                </return>
                <exception>
                    InstanceAlreadyExistsException if an object is already
                      registered with that name.                    
                </exception>
                <exception>
                    MBeanRegistrationException if an exception occurs during
                      registration.                    
                </exception>
            </javadoc>
            <method name="registerObject" type="ObjectInstance" line="889">
                <params>
                    <param name="classname" type="String"/>
                    <param name="object" type="Object"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="891">
                    <declaration name="wrapped" type="RuntimeException" line="892"/>
                </scope>
                <declaration name="mbean" type="DynamicMBean" line="898"/>
            </method>
            <method name="registerDynamicMBean" type="ObjectInstance" line="908">
                <params>
                    <param name="classname" type="String"/>
                    <param name="mbean" type="DynamicMBean"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="922">
                    preRegister returned successfully, so from this point on we
                     must call postRegister(false) if there is any problem.                    
                </comment>
                <comment line="932">
                    until we succeed                    
                </comment>
                <comment line="958">
                    Register the MBean with the repository.
                     Returns the resource context that was used.
                     The returned context does nothing for regular MBeans.
                     For ClassLoader MBeans the context makes it possible to register these
                     objects with the appropriate framework artifacts, such as
                     the CLR, from within the repository lock.
                     In case of success, we also need to call context.done() at the
                     end of this method.                    
                </comment>
                <scope line="913"/>
                <declaration name="logicalName" type="ObjectName" line="919"/>
                <declaration name="registered" type="boolean" line="923"/>
                <declaration name="registerFailed" type="boolean" line="924"/>
                <declaration name="context" type="ResourceContext" line="925"/>
                <scope line="927">
                    <scope line="928">
                        <scope line="929"/>
                        <scope line="932"/>
                    </scope>
                    <scope line="941"/>
                    <scope line="948">
                        <declaration name="wrapped" type="RuntimeException" line="949"/>
                    </scope>
                    <declaration name="resource" type="Object" line="955"/>
                </scope>
                <scope line="972">
                    <scope line="973"/>
                    <scope line="975"/>
                </scope>
            </method>
            <method name="throwMBeanRegistrationException" type="void" line="983">
                <params>
                    <param name="t" type="Throwable"/>
                    <param name="where" type="String"/>
                </params>
                <comment line="996">
                    neither Error nor Exception??                    
                </comment>
                <scope line="984"/>
                <scope line="987"/>
                <scope line="990"/>
                <scope line="992"/>
            </method>
            <method name="preRegister" type="ObjectName" line="1001">
                <params>
                    <param name="mbean" type="DynamicMBean"/>
                    <param name="mbs" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="newName" type="ObjectName" line="1003"/>
                <scope line="1005"/>
                <scope line="1008"/>
            </method>
            <method name="postRegister" type="void" line="1018">
                <params>
                    <param name="logicalName" type="ObjectName"/>
                    <param name="mbean" type="DynamicMBean"/>
                    <param name="registrationDone" type="boolean"/>
                    <param name="registerFailed" type="boolean"/>
                </params>
                <scope line="1022"/>
                <scope line="1025"/>
                <scope line="1032"/>
            </method>
            <method name="preDeregisterInvoke" type="void" line="1043">
                <params>
                    <param name="moi" type="MBeanRegistration"/>
                </params>
                <scope line="1044"/>
                <scope line="1046"/>
            </method>
            <method name="postDeregisterInvoke" type="void" line="1052">
                <params>
                    <param name="mbean" type="ObjectName"/>
                    <param name="moi" type="MBeanRegistration"/>
                </params>
                <scope line="1053"/>
                <scope line="1055"/>
                <scope line="1064"/>
            </method>
            <javadoc line="1076">
                Gets a specific MBean controlled by the DefaultMBeanServerInterceptor.
                  The name must have a non-default domain.                
            </javadoc>
            <method name="getMBean" type="DynamicMBean" line="1081">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="1083"/>
                <declaration name="obj" type="DynamicMBean" line="1088"/>
                <scope line="1089">
                    <scope line="1090"/>
                </scope>
            </method>
            <method name="getResource" type="Object" line="1100">
                <params>
                    <param name="mbean" type="DynamicMBean"/>
                </params>
            </method>
            <method name="nonDefaultDomain" type="ObjectName" line="1107">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="1112">
                    The ObjectName looks like &quot;:a=b&quot;, and that&apos;s what its
                    toString() will return in this implementation.  So
                    we can just stick the default domain in front of it
                    to get a non-default-domain name.  We depend on the
                    fact that toString() works like that and that it
                    leaves wildcards in place (so we can detect an error                    
                </comment>
                <declaration name="completeName" type="String" line="1118"/>
            </method>
            <method name="getDefaultDomain" type="String" line="1123"/>
            <method name="addNotificationListener" type="void" line="1175">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <comment line="1178">
                    ------------------------------
                     ------------------------------                    
                </comment>
                <comment line="1193">
                    ------------------
                     Check listener
                     ------------------                    
                </comment>
                <scope line="1179"/>
                <declaration name="instance" type="DynamicMBean" line="1185"/>
                <declaration name="broadcaster" type="NotificationBroadcaster" line="1188"/>
                <scope line="1195"/>
                <declaration name="listenerWrapper" type="NotificationListener" line="1200"/>
            </method>
            <method name="addNotificationListener" type="void" line="1209">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="ObjectName"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <comment line="1212">
                    ------------------------------
                     ------------------------------                    
                </comment>
                <comment line="1215">
                    ----------------
                     Get listener object
                     ----------------                    
                </comment>
                <comment line="1227">
                    ----------------
                     Add a listener on an MBean
                     ----------------                    
                </comment>
                <declaration name="instance" type="DynamicMBean" line="1217"/>
                <declaration name="resource" type="Object" line="1218"/>
                <scope line="1219"/>
                <scope line="1229"/>
            </method>
            <method name="removeNotificationListener" type="void" line="1241">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                </params>
            </method>
            <method name="removeNotificationListener" type="void" line="1249">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <method name="removeNotificationListener" type="void" line="1255">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="ObjectName"/>
                </params>
                <declaration name="instance" type="NotificationListener" line="1256"/>
                <scope line="1258"/>
            </method>
            <method name="removeNotificationListener" type="void" line="1271">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="ObjectName"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <declaration name="instance" type="NotificationListener" line="1273"/>
                <scope line="1275"/>
            </method>
            <method name="getListener" type="NotificationListener" line="1285">
                <params>
                    <param name="listener" type="ObjectName"/>
                </params>
                <comment line="1287">
                    ----------------
                     Get listener object
                     ----------------                    
                </comment>
                <declaration name="instance" type="DynamicMBean" line="1289"/>
                <scope line="1290"/>
                <scope line="1292"/>
                <declaration name="resource" type="Object" line="1297"/>
                <scope line="1298">
                    <declaration name="exc" type="RuntimeException" line="1299"/>
                    <declaration name="msg" type="String" line="1301"/>
                </scope>
            </method>
            <method name="removeNotificationListener" type="void" line="1314">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                    <param name="removeAll" type="boolean"/>
                </params>
                <comment line="1326">
                    We could simplify the code by assigning broadcaster after
                    assigning listenerWrapper, but that would change the error
                    behavior when both the broadcaster and the listener are                    
                </comment>
                <scope line="1316"/>
                <declaration name="instance" type="DynamicMBean" line="1322"/>
                <declaration name="reqClass" type="Class&lt;? extends NotificationBroadcaster&gt;" line="1330"/>
                <declaration name="broadcaster" type="NotificationBroadcaster" line="1332"/>
                <declaration name="listenerWrapper" type="NotificationListener" line="1335"/>
                <scope line="1343">
                    <declaration name="emitter" type="NotificationEmitter" line="1344"/>
                </scope>
            </method>
            <method name="getNotificationBroadcaster" type="T" line="1353">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="instance" type="Object"/>
                    <param name="reqClass" type="Class<T>"/>
                </params>
                <declaration name="exc" type="RuntimeException" line="1360"/>
                <declaration name="msg" type="String" line="1362"/>
            </method>
            <method name="getMBeanInfo" type="MBeanInfo" line="1370">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="1373">
                    ------------------------------
                     ------------------------------                    
                </comment>
                <declaration name="moi" type="DynamicMBean" line="1375"/>
                <declaration name="mbi" type="MBeanInfo" line="1376"/>
                <scope line="1377"/>
                <scope line="1379"/>
                <scope line="1381"/>
                <scope line="1383"/>
                <scope line="1386"/>
            </method>
            <method name="isInstanceOf" type="boolean" line="1399">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="className" type="String"/>
                </params>
                <comment line="1424">
                                        
                </comment>
                <declaration name="instance" type="DynamicMBean" line="1401"/>
                <scope line="1404">
                    <declaration name="resource" type="Object" line="1405"/>
                    <declaration name="resourceClassName" type="String" line="1407"/>
                    <declaration name="cl" type="ClassLoader" line="1414"/>
                    <declaration name="classNameClass" type="Class&lt;?&gt;" line="1416"/>
                    <declaration name="resourceClass" type="Class&lt;?&gt;" line="1420"/>
                </scope>
                <scope line="1422">
                    <scope line="1424"/>
                </scope>
            </method>
            <javadoc line="1434">
                &lt;p&gt;Return the {@link java.lang.ClassLoader} that was used for
                  loading the class of the named MBean.                
                <param>
                    mbeanName The ObjectName of the MBean.                    
                </param>
                <return>
                    The ClassLoader used for that MBean.                    
                </return>
                <exception>
                    InstanceNotFoundException if the named MBean is not found.                    
                </exception>
            </javadoc>
            <method name="getClassLoaderFor" type="ClassLoader" line="1442">
                <params>
                    <param name="mbeanName" type="ObjectName"/>
                </params>
                <declaration name="instance" type="DynamicMBean" line="1444"/>
            </method>
            <javadoc line="1449">
                &lt;p&gt;Return the named {@link java.lang.ClassLoader}.                
                <param>
                    loaderName The ObjectName of the ClassLoader.                    
                </param>
                <return>
                    The named ClassLoader.                    
                </return>
                <exception>
                    InstanceNotFoundException if the named ClassLoader
                      is not found.                    
                </exception>
            </javadoc>
            <method name="getClassLoader" type="ClassLoader" line="1457">
                <params>
                    <param name="loaderName" type="ObjectName"/>
                </params>
                <comment line="1470">
                                        
                </comment>
                <scope line="1459"/>
                <declaration name="instance" type="DynamicMBean" line="1464"/>
                <declaration name="resource" type="Object" line="1467"/>
            </method>
            <javadoc line="1477">
                Sends an MBeanServerNotifications with the specified type for the
                  MBean with the specified ObjectName                
            </javadoc>
            <method name="sendNotification" type="void" line="1481">
                <params>
                    <param name="NotifType" type="String"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="1484">
                    ------------------------------
                     ------------------------------                    
                </comment>
                <comment line="1487">
                    ---------------------
                     Create notification
                     ---------------------                    
                </comment>
                <declaration name="notif" type="MBeanServerNotification" line="1489"/>
                <scope line="1492"/>
            </method>
            <javadoc line="1501">
                Applies the specified queries to the set of NamedObjects.                
            </javadoc>
            <method name="objectNamesFromFilteredNamedObjects" type="Set<ObjectName>" line="1506">
                <params>
                    <param name="list" type="Set<NamedObject>"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <comment line="1509">
                    No query ...                    
                </comment>
                <comment line="1515">
                    Access the filter                    
                </comment>
                <comment line="1531">
                    query.setMBeanServer is probably
                     QueryEval.setMBeanServer so put back the old
                     value.  Since that method uses a ThreadLocal
                     variable, this code is only needed for the
                     unusual case where the user creates a custom
                     QueryExp that calls a nested query on another
                     MBeanServer.                    
                </comment>
                <declaration name="result" type="Set&lt;ObjectName&gt;" line="1507"/>
                <scope line="1509">
                    <scope line="1510"/>
                </scope>
                <scope line="1513">
                    <declaration name="oldServer" type="MBeanServer" line="1515"/>
                    <scope line="1517">
                        <scope line="1518">
                            <declaration name="res" type="boolean" line="1519"/>
                            <scope line="1520"/>
                            <scope line="1522"/>
                            <scope line="1525"/>
                        </scope>
                    </scope>
                    <scope line="1529"/>
                </scope>
            </method>
            <javadoc line="1545">
                Applies the specified queries to the set of NamedObjects.                
            </javadoc>
            <method name="objectInstancesFromFilteredNamedObjects" type="Set<ObjectInstance>" line="1550">
                <params>
                    <param name="list" type="Set<NamedObject>"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <comment line="1553">
                    No query ...                    
                </comment>
                <comment line="1561">
                    Access the filter                    
                </comment>
                <comment line="1579">
                    query.setMBeanServer is probably
                     QueryEval.setMBeanServer so put back the old
                     value.  Since that method uses a ThreadLocal
                     variable, this code is only needed for the
                     unusual case where the user creates a custom
                     QueryExp that calls a nested query on another
                     MBeanServer.                    
                </comment>
                <declaration name="result" type="Set&lt;ObjectInstance&gt;" line="1551"/>
                <scope line="1553">
                    <scope line="1554">
                        <declaration name="obj" type="DynamicMBean" line="1555"/>
                        <declaration name="className" type="String" line="1556"/>
                    </scope>
                </scope>
                <scope line="1559">
                    <declaration name="oldServer" type="MBeanServer" line="1561"/>
                    <scope line="1563">
                        <scope line="1564">
                            <declaration name="obj" type="DynamicMBean" line="1565"/>
                            <declaration name="res" type="boolean" line="1566"/>
                            <scope line="1567"/>
                            <scope line="1569"/>
                            <scope line="1572">
                                <declaration name="className" type="String" line="1573"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1577"/>
                </scope>
            </method>
            <method name="safeGetClassName" type="String" line="1593">
                <params>
                    <param name="mbean" type="DynamicMBean"/>
                </params>
                <scope line="1594"/>
                <scope line="1596">
                    <scope line="1597"/>
                </scope>
            </method>
            <javadoc line="1607">
                Applies the specified queries to the set of ObjectInstances.                
            </javadoc>
            <method name="filterListOfObjectInstances" type="Set<ObjectInstance>" line="1612">
                <params>
                    <param name="list" type="Set<ObjectInstance>"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <comment line="1614">
                    Null query.                    
                </comment>
                <comment line="1620">
                    Access the filter.                    
                </comment>
                <comment line="1631">
                    query.setMBeanServer is probably
                     QueryEval.setMBeanServer so put back the old
                     value.  Since that method uses a ThreadLocal
                     variable, this code is only needed for the
                     unusual case where the user creates a custom
                     QueryExp that calls a nested query on another
                     MBeanServer.                    
                </comment>
                <scope line="1615"/>
                <scope line="1617">
                    <declaration name="result" type="Set&lt;ObjectInstance&gt;" line="1618"/>
                    <scope line="1621">
                        <declaration name="res" type="boolean" line="1622"/>
                        <declaration name="oldServer" type="MBeanServer" line="1623"/>
                        <scope line="1625"/>
                        <scope line="1627"/>
                        <scope line="1629"/>
                        <scope line="1641"/>
                    </scope>
                </scope>
            </method>
            <method name="getListenerWrapper" type="NotificationListener" line="1668">
                <params>
                    <param name="l" type="NotificationListener"/>
                    <param name="name" type="ObjectName"/>
                    <param name="mbean" type="DynamicMBean"/>
                    <param name="create" type="boolean"/>
                </params>
                <declaration name="resource" type="Object" line="1669"/>
                <declaration name="wrapper" type="ListenerWrapper" line="1670"/>
                <scope line="1671">
                    <declaration name="ref" type="WeakReference&lt;ListenerWrapper&gt;" line="1672"/>
                    <scope line="1673">
                        <declaration name="existing" type="NotificationListener" line="1674"/>
                    </scope>
                    <scope line="1678"/>
                </scope>
            </method>
            <method name="instantiate" type="Object" line="1688">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <method name="instantiate" type="Object" line="1694">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                </params>
            </method>
            <method name="instantiate" type="Object" line="1699">
                <params>
                    <param name="className" type="String"/>
                    <param name="params" type="Object[]"/>
                    <param name="signature" type="String[]"/>
                </params>
            </method>
            <method name="instantiate" type="Object" line="1706">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="params" type="Object[]"/>
                    <param name="signature" type="String[]"/>
                </params>
            </method>
            <method name="deserialize" type="ObjectInputStream" line="1711">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="deserialize" type="ObjectInputStream" line="1716">
                <params>
                    <param name="className" type="String"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="deserialize" type="ObjectInputStream" line="1722">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="getClassLoaderRepository" type="ClassLoaderRepository" line="1726"/>
            <class name="ListenerWrapper" line="1730">
                <comment line="132">
                                        
                </comment>
                <implements interface="NotificationListener"/>
                <method name="ListenerWrapper" type="constructor" line="1732">
                    <params>
                        <param name="l" type="NotificationListener"/>
                        <param name="name" type="ObjectName"/>
                        <param name="mbean" type="Object"/>
                    </params>
                </method>
                <method name="handleNotification" type="void" line="1739">
                    <params>
                        <param name="notification" type="Notification"/>
                        <param name="handback" type="Object"/>
                    </params>
                    <comment line="1746">
                        Listeners are not supposed to throw exceptions.  If
                         this one does, we could remove it from the MBean.  It
                         might indicate that a connector has stopped working,
                         for instance, and there is no point in sending future
                         notifications over that connection.  However, this
                         seems rather drastic, so instead we propagate the
                         exception and let the broadcaster handle it.                        
                    </comment>
                    <scope line="1740"/>
                </method>
                <method name="equals" type="boolean" line="1758">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <comment line="1765">
                        We compare all three, in case the same MBean object
                         gets unregistered and then reregistered under a
                         different name, or the same name gets assigned to two
                         different MBean objects at different times.  We do the
                         comparisons in this order to avoid the slow
                         ObjectName.equals when possible.                        
                    </comment>
                    <declaration name="w" type="ListenerWrapper" line="1761"/>
                </method>
                <method name="hashCode" type="int" line="1775">
                    <comment line="1779">
                        We do not include name.hashCode() in the hash because
                         computing it is slow and usually we will not have two
                         instances of ListenerWrapper with the same mbean but
                         different ObjectNames.  That can happen if the MBean is
                         unregistered from one name and reregistered with
                         another, and there is no garbage collection between; or
                         if the same object is registered under two names (which
                         is not recommended because MBeanRegistration will
                         break).  But even in these unusual cases the hash code
                         does not have to be unique.                        
                    </comment>
                </method>
                <declaration name="listener" type="NotificationListener" line="1792"/>
                <declaration name="name" type="ObjectName" line="1793"/>
                <declaration name="mbean" type="Object" line="1794"/>
            </class>
            <method name="getClassName" type="String" line="1800">
                <params>
                    <param name="mbean" type="DynamicMBean"/>
                </params>
            </method>
            <method name="checkMBeanPermission" type="void" line="1810">
                <params>
                    <param name="mbean" type="DynamicMBean"/>
                    <param name="member" type="String"/>
                    <param name="objectName" type="ObjectName"/>
                    <param name="actions" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="1811"/>
                <scope line="1812"/>
            </method>
            <method name="checkMBeanPermission" type="void" line="1823">
                <params>
                    <param name="classname" type="String"/>
                    <param name="member" type="String"/>
                    <param name="objectName" type="ObjectName"/>
                    <param name="actions" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="1824"/>
                <scope line="1825">
                    <declaration name="perm" type="Permission" line="1826"/>
                </scope>
            </method>
            <method name="checkMBeanTrustPermission" type="void" line="1835">
                <params>
                    <param name="theClass" type="Class<?>"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="1836"/>
                <scope line="1837">
                    <declaration name="perm" type="Permission" line="1838"/>
                    <anonymous_class line="1840">
                        <method name="run" type="ProtectionDomain" line="1841"/>
                    </anonymous_class>
                    <declaration name="act" type="PrivilegedAction&lt;ProtectionDomain&gt;" line="1839"/>
                    <declaration name="pd" type="ProtectionDomain" line="1845"/>
                    <declaration name="acc" type="AccessControlContext" line="1846"/>
                </scope>
            </method>
            <interface name="ResourceContext">
                <implements interface="RegistrationContext"/>
                <comment line="132">
                                        
                </comment>
                <javadoc line="1858">
                    A RegistrationContext that makes it possible to perform additional
                      post registration actions (or post unregistration actions) outside
                      of the repository lock, once postRegister (or postDeregister) has
                      been called.
                      The method {@code done()} will be called in registerMBean or
                      unregisterMBean, at the end.                    
                </javadoc>
                <method name="done" type="void" line="1867"/>
                <declaration name="NONE" type="ResourceContext" line="1868"/>
                <javadoc line="1868">
                    An empty ResourceContext which does nothing                    
                </javadoc>
                <anonymous_class line="1869">
                    <method name="done" type="void" line="1870"/>
                    <method name="registering" type="void" line="1871"/>
                    <method name="unregistered" type="void" line="1872"/>
                </anonymous_class>
            </interface>
            <javadoc line="1876">
                Adds a MBean in the repository,
                  sends MBeanServerNotification.REGISTRATION_NOTIFICATION,
                  returns ResourceContext for special resources such as ClassLoaders
                  or JMXNamespaces. For regular MBean this method returns
                  ResourceContext.NONE.                
                <return>
                    a ResourceContext for special resources such as ClassLoaders
                      or JMXNamespaces.                    
                </return>
            </javadoc>
            <method name="registerWithRepository" type="ResourceContext" line="1890">
                <params>
                    <param name="resource" type="Object"/>
                    <param name="object" type="DynamicMBean"/>
                    <param name="logicalName" type="ObjectName"/>
                </params>
                <comment line="1893">
                    Creates a registration context, if needed.                    
                </comment>
                <comment line="1900">
                    May throw InstanceAlreadyExistsException                    
                </comment>
                <comment line="1902">
                    ---------------------
                     Send create event
                     ---------------------                    
                </comment>
                <declaration name="context" type="ResourceContext" line="1894"/>
                <scope line="1904"/>
            </method>
            <javadoc line="1918">
                Removes a MBean in the repository,
                  sends MBeanServerNotification.UNREGISTRATION_NOTIFICATION,
                  returns ResourceContext for special resources such as ClassLoaders
                  or JMXNamespaces, or null. For regular MBean this method returns
                  ResourceContext.NONE.                
                <return>
                    a ResourceContext for special resources such as ClassLoaders
                      or JMXNamespaces.                    
                </return>
            </javadoc>
            <method name="unregisterFromRepository" type="ResourceContext" line="1932">
                <params>
                    <param name="resource" type="Object"/>
                    <param name="object" type="DynamicMBean"/>
                    <param name="logicalName" type="ObjectName"/>
                </params>
                <comment line="1935">
                    Creates a registration context, if needed.                    
                </comment>
                <comment line="1943">
                    ---------------------
                     Send deletion event
                     ---------------------                    
                </comment>
                <declaration name="context" type="ResourceContext" line="1936"/>
                <scope line="1945"/>
            </method>
            <javadoc line="1958">
                Registers a ClassLoader with the CLR.
                  This method is called by the ResourceContext from within the
                  repository lock.                
                <param>
                    loader       The ClassLoader.                    
                </param>
                <param>
                    logicalName  The ClassLoader MBean ObjectName.                    
                </param>
            </javadoc>
            <method name="addClassLoader" type="void" line="1966">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="logicalName" type="ObjectName"/>
                </params>
                <comment line="1968">
                    Called when the newly registered MBean is a ClassLoader
                     If so, tell the ClassLoaderRepository (CLR) about it.  We do
                     this even if the loader is a PrivateClassLoader.  In that
                     case, the CLR remembers the loader for use when it is
                     explicitly named (e.g. as the loader in createMBean) but
                     does not add it to the list that is consulted by
                     ClassLoaderRepository.loadClass.                    
                </comment>
                <declaration name="clr" type="ModifiableClassLoaderRepository" line="1967"/>
                <scope line="1978">
                    <declaration name="wrapped" type="RuntimeException" line="1979"/>
                </scope>
            </method>
            <javadoc line="1990">
                Unregisters a ClassLoader from the CLR.
                  This method is called by the ResourceContext from within the
                  repository lock.                
                <param>
                    loader       The ClassLoader.                    
                </param>
                <param>
                    logicalName  The ClassLoader MBean ObjectName.                    
                </param>
            </javadoc>
            <method name="removeClassLoader" type="void" line="1998">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="logicalName" type="ObjectName"/>
                </params>
                <comment line="2000">
                    Removes the  MBean from the default loader repository.                    
                </comment>
                <scope line="2002">
                    <declaration name="clr" type="ModifiableClassLoaderRepository" line="2003"/>
                    <scope line="2005"/>
                </scope>
            </method>
            <javadoc line="2012">
                Creates a ResourceContext for a ClassLoader MBean.
                  The resource context makes it possible to add the ClassLoader to
                  (ResourceContext.registering) or resp. remove the ClassLoader from
                  (ResourceContext.unregistered) the CLR
                  when the associated MBean is added to or resp. removed from the
                  repository.                
                <param>
                    loader       The ClassLoader MBean being registered or
                      unregistered.                    
                </param>
                <param>
                    logicalName  The name of the ClassLoader MBean.                    
                </param>
                <return>
                    a ResourceContext that takes in charge the addition or removal
                      of the loader to or from the CLR.                    
                </return>
            </javadoc>
            <method name="createClassLoaderContext" type="ResourceContext" line="2028">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="logicalName" type="ObjectName"/>
                </params>
                <anonymous_class line="2029">
                    <method name="registering" type="void" line="2031"/>
                    <method name="unregistered" type="void" line="2035"/>
                    <method name="done" type="void" line="2039"/>
                </anonymous_class>
            </method>
            <javadoc line="2044">
                Creates a ResourceContext for the given resource.
                  If the resource does not need a ResourceContext, returns
                  ResourceContext.NONE.
                  At this time, only ClassLoaders need a ResourceContext.                
                <param>
                    resource     The resource being registered or unregistered.                    
                </param>
                <param>
                    logicalName  The name of the associated MBean.                    
                </param>
                <return>
                                        
                </return>
            </javadoc>
            <method name="makeResourceContextFor" type="ResourceContext" line="2055">
                <params>
                    <param name="resource" type="Object"/>
                    <param name="logicalName" type="ObjectName"/>
                </params>
                <scope line="2056"/>
            </method>
        </class>
    </source>