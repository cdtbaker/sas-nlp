<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.interceptor">
        <import package="com.sun.jmx.defaults.JmxProperties.MBEANSERVER_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.DynamicMBean2"/>
        <import package="com.sun.jmx.mbeanserver.Introspector"/>
        <import package="com.sun.jmx.mbeanserver.MBeanInstantiator"/>
        <import package="com.sun.jmx.mbeanserver.ModifiableClassLoaderRepository"/>
        <import package="com.sun.jmx.mbeanserver.NamedObject"/>
        <import package="com.sun.jmx.mbeanserver.Repository"/>
        <import package="com.sun.jmx.mbeanserver.Repository.RegistrationContext"/>
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.ProtectionDomain"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.WeakHashMap"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.Attribute"/>
        <import package="javax.management.AttributeList"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.DynamicMBean"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.IntrospectionException"/>
        <import package="javax.management.InvalidAttributeValueException"/>
        <import package="javax.management.JMRuntimeException"/>
        <import package="javax.management.ListenerNotFoundException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.MBeanPermission"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.MBeanRegistrationException"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanServerDelegate"/>
        <import package="javax.management.MBeanServerNotification"/>
        <import package="javax.management.MBeanTrustPermission"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationBroadcaster"/>
        <import package="javax.management.NotificationEmitter"/>
        <import package="javax.management.NotificationFilter"/>
        <import package="javax.management.NotificationListener"/>
        <import package="javax.management.ObjectInstance"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.OperationsException"/>
        <import package="javax.management.QueryEval"/>
        <import package="javax.management.QueryExp"/>
        <import package="javax.management.ReflectionException"/>
        <import package="javax.management.RuntimeErrorException"/>
        <import package="javax.management.RuntimeMBeanException"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <import package="javax.management.loading.ClassLoaderRepository"/>
        <class name="DefaultMBeanServerInterceptor" line="60">
            <implements interface="MBeanServerInterceptor"/>
            <javadoc line="60">
                This is the default class for MBean manipulation on the agent side. It
                  contains the methods necessary for the creation, registration, and
                  deletion of MBeans as well as the access methods for registered MBeans.
                  This is the core component of the JMX infrastructure.
                  &lt;P&gt;
                  Every MBean which is added to the MBean server becomes manageable: its attributes and operations
                  become remotely accessible through the connectors/adaptors connected to that MBean server.
                  A Java object cannot be registered in the MBean server unless it is a JMX compliant MBean.
                  &lt;P&gt;
                  When an MBean is registered or unregistered in the MBean server an{@link javax.management.MBeanServerNotification MBeanServerNotification}Notification is emitted. To register an object as listener to MBeanServerNotifications
                  you should call the MBean server method {@link #addNotificationListener addNotificationListener} with &lt;CODE&gt;ObjectName&lt;/CODE&gt;
                  the &lt;CODE&gt;ObjectName&lt;/CODE&gt; of the {@link javax.management.MBeanServerDelegate MBeanServerDelegate}.
                  This &lt;CODE&gt;ObjectName&lt;/CODE&gt; is:
                  &lt;BR&gt;
                  &lt;CODE&gt;JMImplementation:type=MBeanServerDelegate&lt;/CODE&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="instantiator" type="MBeanInstantiator" line="79"/>
            <javadoc line="79">
                The MBeanInstantiator object used by the
                  DefaultMBeanServerInterceptor                
            </javadoc>
            <declaration name="server" type="MBeanServer" line="84"/>
            <javadoc line="84">
                The MBean server object that is associated to the
                  DefaultMBeanServerInterceptor                
            </javadoc>
            <declaration name="delegate" type="MBeanServerDelegate" line="89"/>
            <javadoc line="89">
                The MBean server delegate object that is associated to the
                  DefaultMBeanServerInterceptor                
            </javadoc>
            <declaration name="repository" type="Repository" line="94"/>
            <javadoc line="94">
                The Repository object used by the DefaultMBeanServerInterceptor                
            </javadoc>
            <declaration name="listenerWrappers" type="WeakHashMap&lt;ListenerWrapper,WeakReference&lt;ListenerWrapper&gt;&gt;" line="98"/>
            <javadoc line="98">
                Wrappers for client listeners.                
            </javadoc>
            <declaration name="domain" type="String" line="102"/>
            <javadoc line="102">
                The default domain of the object names                
            </javadoc>
            <javadoc line="106">
                Creates a DefaultMBeanServerInterceptor with the specified
                  repository instance.
                  &lt;p&gt;Do not forget to call &lt;code&gt;initialize(outer,delegate)&lt;/code&gt;
                  before using this object.                
                <param>
                    outer A pointer to the MBeanServer object that must be
                      passed to the MBeans when invoking their{@link javax.management.MBeanRegistration} interface.                    
                </param>
                <param>
                    delegate A pointer to the MBeanServerDelegate associated
                      with the new MBeanServer. The new MBeanServer must register
                      this MBean in its MBean repository.                    
                </param>
                <param>
                    instantiator The MBeanInstantiator that will be used to
                      instantiate MBeans and take care of class loading issues.                    
                </param>
                <param>
                    repository The repository to use for this MBeanServer.                    
                </param>
            </javadoc>
            <method name="DefaultMBeanServerInterceptor" type="constructor" line="120">
                <params>
                    <param name="outer" type="MBeanServer"/>
                    <param name="delegate" type="MBeanServerDelegate"/>
                    <param name="instantiator" type="MBeanInstantiator"/>
                    <param name="repository" type="Repository"/>
                </params>
            </method>
            <method name="createMBean" type="ObjectInstance" line="131">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <method name="createMBean" type="ObjectInstance" line="134">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="loaderName" type="ObjectName"/>
                </params>
            </method>
            <method name="createMBean" type="ObjectInstance" line="137">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="params" type="Object[]"/>
                    <param name="signature" type="String[]"/>
                </params>
                <scope line="138"/>
                <scope line="141"/>
            </method>
            <method name="createMBean" type="ObjectInstance" line="145">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="params" type="Object[]"/>
                    <param name="signature" type="String[]"/>
                </params>
            </method>
            <method name="createMBean" type="ObjectInstance" line="148">
                <params>
                    <param name="className" type="String"/>
                    <param name="name" type="ObjectName"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="withDefaultLoaderRepository" type="boolean"/>
                    <param name="params" type="Object[]"/>
                    <param name="signature" type="String[]"/>
                </params>
                <declaration name="theClass" type="Class&lt;?&gt;" line="149"/>
                <scope line="150">
                    <declaration name="wrapped" type="RuntimeException" line="151"/>
                </scope>
                <scope line="154">
                    <scope line="155">
                        <declaration name="wrapped" type="RuntimeException" line="156"/>
                        <declaration name="msg" type="String" line="157"/>
                    </scope>
                </scope>
                <scope line="164">
                    <scope line="165"/>
                </scope>
                <scope line="170">
                    <scope line="171"/>
                </scope>
                <scope line="176">
                    <scope line="178"/>
                </scope>
                <declaration name="moi" type="Object" line="186"/>
                <declaration name="infoClassName" type="String" line="187"/>
            </method>
            <method name="registerMBean" type="ObjectInstance" line="190">
                <params>
                    <param name="object" type="Object"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="theClass" type="Class&lt;?&gt;" line="191"/>
                <declaration name="infoClassName" type="String" line="193"/>
            </method>
            <method name="getNewMBeanClassName" type="String" line="198">
                <params>
                    <param name="mbeanToRegister" type="Object"/>
                </params>
                <scope line="199">
                    <declaration name="mbean" type="DynamicMBean" line="200"/>
                    <declaration name="name" type="String" line="201"/>
                    <scope line="202"/>
                    <scope line="205">
                        <declaration name="ncmbe" type="NotCompliantMBeanException" line="206"/>
                    </scope>
                    <scope line="210">
                        <declaration name="msg" type="String" line="211"/>
                    </scope>
                </scope>
            </method>
            <declaration name="beingUnregistered" type="Set&lt;ObjectName&gt;" line="218"/>
            <method name="unregisterMBean" type="void" line="219">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="220">
                    <declaration name="wrapped" type="RuntimeException" line="221"/>
                </scope>
                <scope line="225">
                    <scope line="226">
                        <scope line="227"/>
                        <scope line="230"/>
                    </scope>
                </scope>
                <scope line="236"/>
                <scope line="239">
                    <scope line="240"/>
                </scope>
            </method>
            <method name="exclusiveUnregisterMBean" type="void" line="246">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="instance" type="DynamicMBean" line="247"/>
                <declaration name="resource" type="Object" line="250"/>
                <declaration name="context" type="ResourceContext" line="251"/>
                <scope line="252"/>
                <scope line="255"/>
            </method>
            <method name="getObjectInstance" type="ObjectInstance" line="259">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="instance" type="DynamicMBean" line="261"/>
                <declaration name="className" type="String" line="263"/>
            </method>
            <method name="queryMBeans" type="Set<ObjectInstance>" line="266">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="267"/>
                <scope line="268">
                    <declaration name="list" type="Set&lt;ObjectInstance&gt;" line="270"/>
                    <declaration name="allowedList" type="Set&lt;ObjectInstance&gt;" line="271"/>
                    <scope line="272">
                        <scope line="273"/>
                        <scope line="277"/>
                    </scope>
                </scope>
                <scope line="282"/>
            </method>
            <method name="queryMBeansImpl" type="Set<ObjectInstance>" line="286">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <declaration name="list" type="Set&lt;NamedObject&gt;" line="287"/>
            </method>
            <method name="queryNames" type="Set<ObjectName>" line="290">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <declaration name="queryList" type="Set&lt;ObjectName&gt;" line="291"/>
                <declaration name="sm" type="SecurityManager" line="292"/>
                <scope line="293">
                    <declaration name="list" type="Set&lt;ObjectInstance&gt;" line="295"/>
                    <declaration name="allowedList" type="Set&lt;ObjectInstance&gt;" line="296"/>
                    <scope line="297">
                        <scope line="298"/>
                        <scope line="302"/>
                    </scope>
                    <declaration name="queryObjectInstanceList" type="Set&lt;ObjectInstance&gt;" line="305"/>
                    <scope line="307"/>
                </scope>
                <scope line="311"/>
            </method>
            <method name="queryNamesImpl" type="Set<ObjectName>" line="316">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <declaration name="list" type="Set&lt;NamedObject&gt;" line="317"/>
            </method>
            <method name="isRegistered" type="boolean" line="320">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="321"/>
            </method>
            <method name="getDomains" type="String[]" line="327">
                <declaration name="sm" type="SecurityManager" line="328"/>
                <scope line="329">
                    <declaration name="domains" type="String[]" line="331"/>
                    <declaration name="result" type="List&lt;String&gt;" line="332"/>
                    <scope line="333">
                        <scope line="334">
                            <declaration name="dom" type="ObjectName" line="335"/>
                        </scope>
                        <scope line="339"/>
                    </scope>
                </scope>
                <scope line="344"/>
            </method>
            <method name="getMBeanCount" type="Integer" line="348"/>
            <method name="getAttribute" type="Object" line="351">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                </params>
                <scope line="352"/>
                <scope line="355"/>
                <scope line="359"/>
                <declaration name="instance" type="DynamicMBean" line="362"/>
                <scope line="364"/>
                <scope line="367"/>
                <scope line="370"/>
            </method>
            <method name="getAttributes" type="AttributeList" line="375">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attributes" type="String[]"/>
                </params>
                <scope line="376"/>
                <scope line="379"/>
                <scope line="383"/>
                <declaration name="instance" type="DynamicMBean" line="386"/>
                <declaration name="allowedAttributes" type="String[]" line="387"/>
                <declaration name="sm" type="SecurityManager" line="388"/>
                <scope line="390">
                    <declaration name="classname" type="String" line="391"/>
                    <declaration name="allowedList" type="List&lt;String&gt;" line="393"/>
                    <scope line="394">
                        <scope line="395"/>
                        <scope line="399"/>
                    </scope>
                </scope>
                <scope line="404"/>
                <scope line="407"/>
            </method>
            <method name="setAttribute" type="void" line="412">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attribute" type="Attribute"/>
                </params>
                <scope line="413"/>
                <scope line="416"/>
                <scope line="420"/>
                <declaration name="instance" type="DynamicMBean" line="423"/>
                <scope line="425"/>
                <scope line="428"/>
                <scope line="431"/>
                <scope line="434"/>
            </method>
            <method name="setAttributes" type="AttributeList" line="439">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="attributes" type="AttributeList"/>
                </params>
                <scope line="440"/>
                <scope line="443"/>
                <declaration name="instance" type="DynamicMBean" line="447"/>
                <declaration name="allowedAttributes" type="AttributeList" line="448"/>
                <declaration name="sm" type="SecurityManager" line="449"/>
                <scope line="451">
                    <declaration name="classname" type="String" line="452"/>
                    <scope line="455">
                        <scope line="456"/>
                        <scope line="460"/>
                    </scope>
                </scope>
                <scope line="464"/>
                <scope line="467"/>
            </method>
            <method name="invoke" type="Object" line="472">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="operationName" type="String"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                </params>
                <declaration name="instance" type="DynamicMBean" line="474"/>
                <scope line="476"/>
                <scope line="479"/>
            </method>
            <method name="rethrow" type="void" line="484">
                <params>
                    <param name="t" type="Throwable"/>
                </params>
                <scope line="485"/>
                <scope line="488"/>
                <scope line="491"/>
                <scope line="494"/>
                <scope line="497"/>
                <scope line="500"/>
                <scope line="503"/>
            </method>
            <method name="rethrowMaybeMBeanException" type="void" line="507">
                <params>
                    <param name="t" type="Throwable"/>
                </params>
            </method>
            <javadoc line="511">
                Register &lt;code&gt;object&lt;/code&gt; in the repository, with the
                  given &lt;code&gt;name&lt;/code&gt;.
                  This method is called by the various createMBean() flavours
                  and by registerMBean() after all MBean compliance tests
                  have been performed.
                  &lt;p&gt;
                  This method does not performed any kind of test compliance,
                  and the caller should make sure that the given &lt;code&gt;object&lt;/code&gt;
                  is MBean compliant.
                  &lt;p&gt;
                  This methods performed all the basic steps needed for object
                  registration:
                  &lt;ul&gt;
                  &lt;li&gt;If the &lt;code&gt;object&lt;/code&gt; implements the MBeanRegistration
                  interface, it invokes preRegister() on the object.&lt;/li&gt;
                  &lt;li&gt;Then the object is added to the repository with the given
                  &lt;code&gt;name&lt;/code&gt;.&lt;/li&gt;
                  &lt;li&gt;Finally, if the &lt;code&gt;object&lt;/code&gt; implements the
                  MBeanRegistration interface, it invokes postRegister()
                  on the object.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    object A reference to a MBean compliant object.                    
                </param>
                <param>
                    name   The ObjectName of the <code>object</code> MBean.                    
                </param>
                <return>
                    the actual ObjectName with which the object was registered.                    
                </return>
                <exception>
                    InstanceAlreadyExistsException if an object is already
                      registered with that name.                    
                </exception>
                <exception>
                    MBeanRegistrationException if an exception occurs during
                      registration.                    
                </exception>
            </javadoc>
            <method name="registerObject" type="ObjectInstance" line="541">
                <params>
                    <param name="classname" type="String"/>
                    <param name="object" type="Object"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="542">
                    <declaration name="wrapped" type="RuntimeException" line="543"/>
                </scope>
                <declaration name="mbean" type="DynamicMBean" line="546"/>
            </method>
            <method name="registerDynamicMBean" type="ObjectInstance" line="549">
                <params>
                    <param name="classname" type="String"/>
                    <param name="mbean" type="DynamicMBean"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="551"/>
                <declaration name="logicalName" type="ObjectName" line="554"/>
                <declaration name="registered" type="boolean" line="555"/>
                <declaration name="registerFailed" type="boolean" line="556"/>
                <declaration name="context" type="ResourceContext" line="557"/>
                <scope line="558">
                    <scope line="559">
                        <scope line="560"/>
                        <scope line="564"/>
                    </scope>
                    <scope line="570"/>
                    <scope line="574">
                        <declaration name="wrapped" type="RuntimeException" line="575"/>
                    </scope>
                    <declaration name="resource" type="Object" line="578"/>
                </scope>
                <scope line="583">
                    <scope line="584"/>
                    <scope line="587"/>
                </scope>
            </method>
            <method name="throwMBeanRegistrationException" type="void" line="593">
                <params>
                    <param name="t" type="Throwable"/>
                    <param name="where" type="String"/>
                </params>
                <scope line="594"/>
                <scope line="597"/>
                <scope line="600"/>
                <scope line="603"/>
            </method>
            <method name="preRegister" type="ObjectName" line="608">
                <params>
                    <param name="mbean" type="DynamicMBean"/>
                    <param name="mbs" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="newName" type="ObjectName" line="609"/>
                <scope line="610"/>
                <scope line="613"/>
            </method>
            <method name="postRegister" type="void" line="619">
                <params>
                    <param name="logicalName" type="ObjectName"/>
                    <param name="mbean" type="DynamicMBean"/>
                    <param name="registrationDone" type="boolean"/>
                    <param name="registerFailed" type="boolean"/>
                </params>
                <scope line="621"/>
                <scope line="624"/>
                <scope line="628"/>
            </method>
            <method name="preDeregisterInvoke" type="void" line="633">
                <params>
                    <param name="moi" type="MBeanRegistration"/>
                </params>
                <scope line="634"/>
                <scope line="637"/>
            </method>
            <method name="postDeregisterInvoke" type="void" line="641">
                <params>
                    <param name="mbean" type="ObjectName"/>
                    <param name="moi" type="MBeanRegistration"/>
                </params>
                <scope line="642"/>
                <scope line="645"/>
                <scope line="649"/>
            </method>
            <javadoc line="654">
                Gets a specific MBean controlled by the DefaultMBeanServerInterceptor.
                  The name must have a non-default domain.                
            </javadoc>
            <method name="getMBean" type="DynamicMBean" line="658">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="659"/>
                <declaration name="obj" type="DynamicMBean" line="662"/>
                <scope line="663">
                    <scope line="664"/>
                </scope>
            </method>
            <method name="getResource" type="Object" line="671">
                <params>
                    <param name="mbean" type="DynamicMBean"/>
                </params>
            </method>
            <method name="nonDefaultDomain" type="ObjectName" line="675">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="completeName" type="String" line="677"/>
            </method>
            <method name="getDefaultDomain" type="String" line="680"/>
            <method name="addNotificationListener" type="void" line="683">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <scope line="684"/>
                <declaration name="instance" type="DynamicMBean" line="687"/>
                <declaration name="broadcaster" type="NotificationBroadcaster" line="689"/>
                <scope line="690"/>
                <declaration name="listenerWrapper" type="NotificationListener" line="693"/>
            </method>
            <method name="addNotificationListener" type="void" line="696">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="ObjectName"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <declaration name="instance" type="DynamicMBean" line="697"/>
                <declaration name="resource" type="Object" line="698"/>
                <scope line="699"/>
                <scope line="702"/>
            </method>
            <method name="removeNotificationListener" type="void" line="707">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                </params>
            </method>
            <method name="removeNotificationListener" type="void" line="710">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <method name="removeNotificationListener" type="void" line="713">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="ObjectName"/>
                </params>
                <declaration name="instance" type="NotificationListener" line="714"/>
                <scope line="715"/>
            </method>
            <method name="removeNotificationListener" type="void" line="720">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="ObjectName"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <declaration name="instance" type="NotificationListener" line="721"/>
                <scope line="722"/>
            </method>
            <method name="getListener" type="NotificationListener" line="727">
                <params>
                    <param name="listener" type="ObjectName"/>
                </params>
                <declaration name="instance" type="DynamicMBean" line="728"/>
                <scope line="729"/>
                <scope line="732"/>
                <declaration name="resource" type="Object" line="735"/>
                <scope line="736">
                    <declaration name="exc" type="RuntimeException" line="737"/>
                    <declaration name="msg" type="String" line="738"/>
                </scope>
            </method>
            <method name="removeNotificationListener" type="void" line="743">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                    <param name="removeAll" type="boolean"/>
                </params>
                <scope line="744"/>
                <declaration name="instance" type="DynamicMBean" line="747"/>
                <declaration name="reqClass" type="Class&lt;? extends NotificationBroadcaster&gt;" line="749"/>
                <declaration name="broadcaster" type="NotificationBroadcaster" line="750"/>
                <declaration name="listenerWrapper" type="NotificationListener" line="751"/>
                <scope line="754">
                    <declaration name="emitter" type="NotificationEmitter" line="755"/>
                </scope>
            </method>
            <method name="getNotificationBroadcaster" type="T" line="759">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="instance" type="Object"/>
                    <param name="reqClass" type="Class<T>"/>
                </params>
                <declaration name="exc" type="RuntimeException" line="763"/>
                <declaration name="msg" type="String" line="764"/>
            </method>
            <method name="getMBeanInfo" type="MBeanInfo" line="767">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="moi" type="DynamicMBean" line="768"/>
                <declaration name="mbi" type="MBeanInfo" line="769"/>
                <scope line="770"/>
                <scope line="773"/>
                <scope line="776"/>
                <scope line="779"/>
                <scope line="782"/>
            </method>
            <method name="isInstanceOf" type="boolean" line="789">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="className" type="String"/>
                </params>
                <declaration name="instance" type="DynamicMBean" line="790"/>
                <scope line="792">
                    <declaration name="resource" type="Object" line="793"/>
                    <declaration name="resourceClassName" type="String" line="794"/>
                    <declaration name="cl" type="ClassLoader" line="796"/>
                    <declaration name="classNameClass" type="Class&lt;?&gt;" line="797"/>
                    <declaration name="resourceClass" type="Class&lt;?&gt;" line="799"/>
                </scope>
                <scope line="802">
                    <scope line="803"/>
                </scope>
            </method>
            <javadoc line="809">
                &lt;p&gt;Return the {@link java.lang.ClassLoader} that was used for
                  loading the class of the named MBean.                
                <param>
                    mbeanName The ObjectName of the MBean.                    
                </param>
                <return>
                    The ClassLoader used for that MBean.                    
                </return>
                <exception>
                    InstanceNotFoundException if the named MBean is not found.                    
                </exception>
            </javadoc>
            <method name="getClassLoaderFor" type="ClassLoader" line="816">
                <params>
                    <param name="mbeanName" type="ObjectName"/>
                </params>
                <declaration name="instance" type="DynamicMBean" line="817"/>
            </method>
            <javadoc line="821">
                &lt;p&gt;Return the named {@link java.lang.ClassLoader}.                
                <param>
                    loaderName The ObjectName of the ClassLoader.                    
                </param>
                <return>
                    The named ClassLoader.                    
                </return>
                <exception>
                    InstanceNotFoundException if the named ClassLoader
                      is not found.                    
                </exception>
            </javadoc>
            <method name="getClassLoader" type="ClassLoader" line="828">
                <params>
                    <param name="loaderName" type="ObjectName"/>
                </params>
                <scope line="829"/>
                <declaration name="instance" type="DynamicMBean" line="833"/>
                <declaration name="resource" type="Object" line="835"/>
            </method>
            <javadoc line="839">
                Sends an MBeanServerNotifications with the specified type for the
                  MBean with the specified ObjectName                
            </javadoc>
            <method name="sendNotification" type="void" line="843">
                <params>
                    <param name="NotifType" type="String"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="notif" type="MBeanServerNotification" line="844"/>
                <scope line="845"/>
            </method>
            <javadoc line="850">
                Applies the specified queries to the set of NamedObjects.                
            </javadoc>
            <method name="objectNamesFromFilteredNamedObjects" type="Set<ObjectName>" line="853">
                <params>
                    <param name="list" type="Set<NamedObject>"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <declaration name="result" type="Set&lt;ObjectName&gt;" line="854"/>
                <scope line="855">
                    <scope line="856"/>
                </scope>
                <scope line="860">
                    <declaration name="oldServer" type="MBeanServer" line="861"/>
                    <scope line="863">
                        <scope line="864">
                            <declaration name="res" type="boolean" line="865"/>
                            <scope line="866"/>
                            <scope line="869"/>
                            <scope line="872"/>
                        </scope>
                    </scope>
                    <scope line="877"/>
                </scope>
            </method>
            <javadoc line="883">
                Applies the specified queries to the set of NamedObjects.                
            </javadoc>
            <method name="objectInstancesFromFilteredNamedObjects" type="Set<ObjectInstance>" line="886">
                <params>
                    <param name="list" type="Set<NamedObject>"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <declaration name="result" type="Set&lt;ObjectInstance&gt;" line="887"/>
                <scope line="888">
                    <scope line="889">
                        <declaration name="obj" type="DynamicMBean" line="890"/>
                        <declaration name="className" type="String" line="891"/>
                    </scope>
                </scope>
                <scope line="895">
                    <declaration name="oldServer" type="MBeanServer" line="896"/>
                    <scope line="898">
                        <scope line="899">
                            <declaration name="obj" type="DynamicMBean" line="900"/>
                            <declaration name="res" type="boolean" line="901"/>
                            <scope line="902"/>
                            <scope line="905"/>
                            <scope line="908">
                                <declaration name="className" type="String" line="909"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="914"/>
                </scope>
            </method>
            <method name="safeGetClassName" type="String" line="920">
                <params>
                    <param name="mbean" type="DynamicMBean"/>
                </params>
                <scope line="921"/>
                <scope line="924">
                    <scope line="925"/>
                </scope>
            </method>
            <javadoc line="931">
                Applies the specified queries to the set of ObjectInstances.                
            </javadoc>
            <method name="filterListOfObjectInstances" type="Set<ObjectInstance>" line="934">
                <params>
                    <param name="list" type="Set<ObjectInstance>"/>
                    <param name="query" type="QueryExp"/>
                </params>
                <scope line="935"/>
                <scope line="938">
                    <declaration name="result" type="Set&lt;ObjectInstance&gt;" line="939"/>
                    <scope line="940">
                        <declaration name="res" type="boolean" line="941"/>
                        <declaration name="oldServer" type="MBeanServer" line="942"/>
                        <scope line="944"/>
                        <scope line="947"/>
                        <scope line="950"/>
                        <scope line="953"/>
                    </scope>
                </scope>
            </method>
            <method name="getListenerWrapper" type="NotificationListener" line="960">
                <params>
                    <param name="l" type="NotificationListener"/>
                    <param name="name" type="ObjectName"/>
                    <param name="mbean" type="DynamicMBean"/>
                    <param name="create" type="boolean"/>
                </params>
                <declaration name="resource" type="Object" line="961"/>
                <declaration name="wrapper" type="ListenerWrapper" line="962"/>
                <scope line="963">
                    <declaration name="ref" type="WeakReference&lt;ListenerWrapper&gt;" line="964"/>
                    <scope line="965">
                        <declaration name="existing" type="NotificationListener" line="966"/>
                    </scope>
                    <scope line="969"/>
                </scope>
            </method>
            <method name="instantiate" type="Object" line="977">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <method name="instantiate" type="Object" line="980">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                </params>
            </method>
            <method name="instantiate" type="Object" line="983">
                <params>
                    <param name="className" type="String"/>
                    <param name="params" type="Object[]"/>
                    <param name="signature" type="String[]"/>
                </params>
            </method>
            <method name="instantiate" type="Object" line="986">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="params" type="Object[]"/>
                    <param name="signature" type="String[]"/>
                </params>
            </method>
            <method name="deserialize" type="ObjectInputStream" line="989">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="deserialize" type="ObjectInputStream" line="992">
                <params>
                    <param name="className" type="String"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="deserialize" type="ObjectInputStream" line="995">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="getClassLoaderRepository" type="ClassLoaderRepository" line="998"/>
            <class name="ListenerWrapper" line="1001">
                <implements interface="NotificationListener"/>
                <method name="ListenerWrapper" type="constructor" line="1002">
                    <params>
                        <param name="l" type="NotificationListener"/>
                        <param name="name" type="ObjectName"/>
                        <param name="mbean" type="Object"/>
                    </params>
                </method>
                <method name="handleNotification" type="void" line="1007">
                    <params>
                        <param name="notification" type="Notification"/>
                        <param name="handback" type="Object"/>
                    </params>
                    <scope line="1008"/>
                </method>
                <method name="equals" type="boolean" line="1013">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="w" type="ListenerWrapper" line="1015"/>
                </method>
                <method name="hashCode" type="int" line="1018"/>
                <declaration name="listener" type="NotificationListener" line="1021"/>
                <declaration name="name" type="ObjectName" line="1022"/>
                <declaration name="mbean" type="Object" line="1023"/>
            </class>
            <method name="getClassName" type="String" line="1025">
                <params>
                    <param name="mbean" type="DynamicMBean"/>
                </params>
            </method>
            <method name="checkMBeanPermission" type="void" line="1029">
                <params>
                    <param name="mbean" type="DynamicMBean"/>
                    <param name="member" type="String"/>
                    <param name="objectName" type="ObjectName"/>
                    <param name="actions" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="1030"/>
                <scope line="1031"/>
            </method>
            <method name="checkMBeanPermission" type="void" line="1035">
                <params>
                    <param name="classname" type="String"/>
                    <param name="member" type="String"/>
                    <param name="objectName" type="ObjectName"/>
                    <param name="actions" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="1036"/>
                <scope line="1037">
                    <declaration name="perm" type="Permission" line="1038"/>
                </scope>
            </method>
            <method name="checkMBeanTrustPermission" type="void" line="1042">
                <params>
                    <param name="theClass" type="Class<?>"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="1043"/>
                <scope line="1044">
                    <declaration name="perm" type="Permission" line="1045"/>
                    <anonymous_class line="1046">
                        <method name="run" type="ProtectionDomain" line="1047"/>
                    </anonymous_class>
                    <declaration name="act" type="PrivilegedAction&lt;ProtectionDomain&gt;" line="1046"/>
                    <declaration name="pd" type="ProtectionDomain" line="1052"/>
                    <declaration name="acc" type="AccessControlContext" line="1053"/>
                </scope>
            </method>
            <interface name="ResourceContext">
                <implements interface="RegistrationContext"/>
                <javadoc line="1057">
                    A RegistrationContext that makes it possible to perform additional
                      post registration actions (or post unregistration actions) outside
                      of the repository lock, once postRegister (or postDeregister) has
                      been called.
                      The method {@code done()} will be called in registerMBean or
                      unregisterMBean, at the end.                    
                </javadoc>
                <method name="done" type="void" line="1066"/>
                <declaration name="NONE" type="ResourceContext" line="1067"/>
                <javadoc line="1067">
                    An empty ResourceContext which does nothing                    
                </javadoc>
                <anonymous_class line="1070">
                    <method name="done" type="void" line="1071"/>
                    <method name="registering" type="void" line="1073"/>
                    <method name="unregistered" type="void" line="1075"/>
                </anonymous_class>
            </interface>
            <javadoc line="1080">
                Adds a MBean in the repository,
                  sends MBeanServerNotification.REGISTRATION_NOTIFICATION,
                  returns ResourceContext for special resources such as ClassLoaders
                  or JMXNamespaces. For regular MBean this method returns
                  ResourceContext.NONE.                
                <return>
                    a ResourceContext for special resources such as ClassLoaders
                      or JMXNamespaces.                    
                </return>
            </javadoc>
            <method name="registerWithRepository" type="ResourceContext" line="1089">
                <params>
                    <param name="resource" type="Object"/>
                    <param name="object" type="DynamicMBean"/>
                    <param name="logicalName" type="ObjectName"/>
                </params>
                <declaration name="context" type="ResourceContext" line="1090"/>
                <scope line="1092"/>
            </method>
            <javadoc line="1098">
                Removes a MBean in the repository,
                  sends MBeanServerNotification.UNREGISTRATION_NOTIFICATION,
                  returns ResourceContext for special resources such as ClassLoaders
                  or JMXNamespaces, or null. For regular MBean this method returns
                  ResourceContext.NONE.                
                <return>
                    a ResourceContext for special resources such as ClassLoaders
                      or JMXNamespaces.                    
                </return>
            </javadoc>
            <method name="unregisterFromRepository" type="ResourceContext" line="1107">
                <params>
                    <param name="resource" type="Object"/>
                    <param name="object" type="DynamicMBean"/>
                    <param name="logicalName" type="ObjectName"/>
                </params>
                <declaration name="context" type="ResourceContext" line="1108"/>
                <scope line="1110"/>
            </method>
            <javadoc line="1116">
                Registers a ClassLoader with the CLR.
                  This method is called by the ResourceContext from within the
                  repository lock.                
                <param>
                    loader       The ClassLoader.                    
                </param>
                <param>
                    logicalName  The ClassLoader MBean ObjectName.                    
                </param>
            </javadoc>
            <method name="addClassLoader" type="void" line="1123">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="logicalName" type="ObjectName"/>
                </params>
                <declaration name="clr" type="ModifiableClassLoaderRepository" line="1124"/>
                <scope line="1125">
                    <declaration name="wrapped" type="RuntimeException" line="1126"/>
                </scope>
            </method>
            <javadoc line="1131">
                Unregisters a ClassLoader from the CLR.
                  This method is called by the ResourceContext from within the
                  repository lock.                
                <param>
                    loader       The ClassLoader.                    
                </param>
                <param>
                    logicalName  The ClassLoader MBean ObjectName.                    
                </param>
            </javadoc>
            <method name="removeClassLoader" type="void" line="1138">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="logicalName" type="ObjectName"/>
                </params>
                <scope line="1139">
                    <declaration name="clr" type="ModifiableClassLoaderRepository" line="1140"/>
                    <scope line="1141"/>
                </scope>
            </method>
            <javadoc line="1146">
                Creates a ResourceContext for a ClassLoader MBean.
                  The resource context makes it possible to add the ClassLoader to
                  (ResourceContext.registering) or resp. remove the ClassLoader from
                  (ResourceContext.unregistered) the CLR
                  when the associated MBean is added to or resp. removed from the
                  repository.                
                <param>
                    loader       The ClassLoader MBean being registered or
                      unregistered.                    
                </param>
                <param>
                    logicalName  The name of the ClassLoader MBean.                    
                </param>
                <return>
                    a ResourceContext that takes in charge the addition or removal
                      of the loader to or from the CLR.                    
                </return>
            </javadoc>
            <method name="createClassLoaderContext" type="ResourceContext" line="1159">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="logicalName" type="ObjectName"/>
                </params>
                <anonymous_class line="1160">
                    <method name="registering" type="void" line="1161"/>
                    <method name="unregistered" type="void" line="1164"/>
                    <method name="done" type="void" line="1167"/>
                </anonymous_class>
            </method>
            <javadoc line="1172">
                Creates a ResourceContext for the given resource.
                  If the resource does not need a ResourceContext, returns
                  ResourceContext.NONE.
                  At this time, only ClassLoaders need a ResourceContext.                
                <param>
                    resource     The resource being registered or unregistered.                    
                </param>
                <param>
                    logicalName  The name of the associated MBean.                    
                </param>
                <return>
                                        
                </return>
            </javadoc>
            <method name="makeResourceContextFor" type="ResourceContext" line="1181">
                <params>
                    <param name="resource" type="Object"/>
                    <param name="logicalName" type="ObjectName"/>
                </params>
                <scope line="1182"/>
            </method>
        </class>
    </source>