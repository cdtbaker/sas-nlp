<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <class name="SnmpIpAddress" line="32">
            <extends class="SnmpOid"/>
            <comment line="43">
                CONSTRUCTORS
                -------------                
            </comment>
            <comment line="105">
                PUBLIC METHODS
                ---------------                
            </comment>
            <comment line="195">
                PRIVATE METHODS
                ----------------                
            </comment>
            <comment line="212">
                VARIABLES
                ----------                
            </comment>
            <javadoc line="32">
                Represents an SNMP IpAddress.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="40"/>
            <javadoc line="44">
                Constructs a new &lt;CODE&gt;SnmpIpAddress&lt;/CODE&gt; from the specified bytes array.                
                <param>
                    bytes The four bytes composing the address.                    
                </param>
                <exception>
                    IllegalArgumentException The length of the array is not equal to four.                    
                </exception>
            </javadoc>
            <method name="SnmpIpAddress" type="constructor" line="49">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
            </method>
            <javadoc line="53">
                Constructs a new &lt;CODE&gt;SnmpIpAddress&lt;/CODE&gt; from the specified long value.                
                <param>
                    addr The initialization value.                    
                </param>
            </javadoc>
            <method name="SnmpIpAddress" type="constructor" line="57">
                <params>
                    <param name="addr" type="long"/>
                </params>
                <declaration name="address" type="int" line="58"/>
                <declaration name="ipaddr" type="byte[]" line="59"/>
            </method>
            <javadoc line="69">
                Constructs a new &lt;CODE&gt;SnmpIpAddress&lt;/CODE&gt; from a dot-formatted &lt;CODE&gt;String&lt;/CODE&gt;.
                  The dot-formatted &lt;CODE&gt;String&lt;/CODE&gt; is formulated x.x.x.x .                
                <param>
                    dotAddress The initialization value.                    
                </param>
                <exception>
                    IllegalArgumentException The string does not correspond to an ip address.                    
                </exception>
            </javadoc>
            <method name="SnmpIpAddress" type="constructor" line="75">
                <params>
                    <param name="dotAddress" type="String"/>
                </params>
                <scope line="81"/>
            </method>
            <javadoc line="86">
                Constructs a new &lt;CODE&gt;SnmpIpAddress&lt;/CODE&gt; from four long values.                
                <param>
                    b1 Byte 1.                    
                </param>
                <param>
                    b2 Byte 2.                    
                </param>
                <param>
                    b3 Byte 3.                    
                </param>
                <param>
                    b4 Byte 4.                    
                </param>
                <exception>
                    IllegalArgumentException A value is outside of [0-255].                    
                </exception>
            </javadoc>
            <method name="SnmpIpAddress" type="constructor" line="94">
                <params>
                    <param name="b1" type="long"/>
                    <param name="b2" type="long"/>
                    <param name="b3" type="long"/>
                    <param name="b4" type="long"/>
                </params>
                <scope line="99"/>
            </method>
            <javadoc line="106">
                Converts the address value to its byte array form.                
                <return>
                    The byte array representation of the value.                    
                </return>
            </javadoc>
            <method name="byteValue" type="byte[]" line="110">
                <declaration name="result" type="byte[]" line="111"/>
            </method>
            <javadoc line="120">
                Converts the address to its &lt;CODE&gt;String&lt;/CODE&gt; form.
                  Same as &lt;CODE&gt;toString()&lt;/CODE&gt;. Exists only to follow a naming scheme.                
                <return>
                    The &lt;CODE&gt;String&lt;/CODE&gt; representation of the value.                    
                </return>
            </javadoc>
            <method name="stringValue" type="String" line="125"/>
            <javadoc line="129">
                Extracts the ip address from an index OID and returns its
                  value converted as an &lt;CODE&gt;SnmpOid&lt;/CODE&gt;.                
                <param>
                    index The index array.                    
                </param>
                <param>
                    start The position in the index array.                    
                </param>
                <return>
                    The OID representing the ip address value.                    
                </return>
                <exception>
                    SnmpStatusException There is no ip address value
                      available at the start position.                    
                </exception>
            </javadoc>
            <method name="toOid" type="SnmpOid" line="138">
                <params>
                    <param name="index" type="long[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="139">
                    <scope line="140"/>
                    <scope line="147"/>
                </scope>
                <scope line="151"/>
            </method>
            <javadoc line="156">
                Scans an index OID, skips the address value and returns the position
                  of the next value.                
                <param>
                    index The index array.                    
                </param>
                <param>
                    start The position in the index array.                    
                </param>
                <return>
                    The position of the next value.                    
                </return>
                <exception>
                    SnmpStatusException There is no address value
                      available at the start position.                    
                </exception>
            </javadoc>
            <method name="nextOid" type="int" line="165">
                <params>
                    <param name="index" type="long[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="166"/>
                <scope line="169"/>
            </method>
            <javadoc line="174">
                Appends an &lt;CODE&gt;SnmpOid&lt;/CODE&gt; representing an &lt;CODE&gt;SnmpIpAddress&lt;/CODE&gt; to another OID.                
                <param>
                    source An OID representing an &lt;CODE&gt;SnmpIpAddress&lt;/CODE&gt; value.                    
                </param>
                <param>
                    dest Where source should be appended.                    
                </param>
            </javadoc>
            <method name="appendToOid" type="void" line="179">
                <params>
                    <param name="source" type="SnmpOid"/>
                    <param name="dest" type="SnmpOid"/>
                </params>
                <scope line="180"/>
            </method>
            <javadoc line="186">
                Returns a textual description of the type object.                
                <return>
                    ASN.1 textual description.                    
                </return>
            </javadoc>
            <method name="getTypeName" type="String" line="190"/>
            <javadoc line="196">
                Build Ip address from byte array.                
            </javadoc>
            <method name="buildFromByteArray" type="void" line="199">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <scope line="200"/>
            </method>
            <declaration name="name" type="String" line="213"/>
            <javadoc line="213">
                Name of the type.                
            </javadoc>
        </class>
    </source>