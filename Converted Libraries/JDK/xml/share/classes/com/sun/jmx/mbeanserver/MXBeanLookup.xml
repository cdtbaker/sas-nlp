<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.util.Map"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.InvocationHandler"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.security.AccessController"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.JMX"/>
        <import package="javax.management.MBeanServerConnection"/>
        <import package="javax.management.MBeanServerInvocationHandler"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.openmbean.OpenDataException"/>
        <class name="MXBeanLookup" line="41">
            <comment line="46">
                This class handles the mapping between MXBean references and
                 ObjectNames.  Consider an MXBean interface like this:
                
                 public interface ModuleMXBean {
                     ProductMXBean getProduct();
                     void setProduct(ProductMXBean product);
                 }
                
                 This defines an attribute called &quot;Product&quot; whose originalType will
                 be ProductMXBean and whose openType will be ObjectName.  The
                 mapping happens as follows.
                
                 When the MXBean&apos;s getProduct method is called, it is supposed to
                 return a reference to another MXBean, or a proxy for another
                 MXBean.  The MXBean layer has to convert this into an ObjectName.
                 If it&apos;s a reference to another MXBean, it needs to be able to look
                 up the name under which that MXBean has been registered in this
                 MBeanServer; this is the purpose of the mxbeanToObjectName map.  If
                 it&apos;s a proxy, it can check that the MBeanServer matches and if so
                 extract the ObjectName from the proxy.
                
                 When the setProduct method is called on a proxy for this MXBean,
                 the argument can be either an MXBean reference (only really logical
                 if the proxy has a local MBeanServer) or another proxy.  So the
                 mapping logic is the same as for getProduct on the MXBean.
                
                 When the MXBean&apos;s setProduct method is called, it needs to convert
                 the ObjectName into an object implementing the ProductMXBean
                 interface.  We could have a lookup table that reverses
                 mxbeanToObjectName, but this could violate the general JMX property
                 that you cannot obtain a reference to an MBean object.  So we
                 always use a proxy for this.  However we do have an
                 objectNameToProxy map that allows us to reuse proxy instances.
                
                 When the getProduct method is called on a proxy for this MXBean, it
                 must convert the returned ObjectName into an instance of
                 ProductMXBean.  Again it can do this by making a proxy.
                
                 From the above, it is clear that the logic for getX on an MXBean is
                 the same as for setX on a proxy, and vice versa.                
            </comment>
            <javadoc line="41">
                @since 1.6                
            </javadoc>
            <method name="MXBeanLookup" type="constructor" line="88">
                <params>
                    <param name="mbsc" type="MBeanServerConnection"/>
                </params>
            </method>
            <method name="lookupFor" type="MXBeanLookup" line="92">
                <params>
                    <param name="mbsc" type="MBeanServerConnection"/>
                </params>
                <scope line="93">
                    <declaration name="weakLookup" type="WeakReference&lt;MXBeanLookup&gt;" line="94"/>
                    <declaration name="lookup" type="MXBeanLookup" line="95"/>
                    <scope line="96"/>
                </scope>
            </method>
            <method name="objectNameToMXBean" type="T" line="104">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="type" type="Class<T>"/>
                </params>
                <declaration name="wr" type="WeakReference&lt;Object&gt;" line="105"/>
                <scope line="106">
                    <declaration name="proxy" type="Object" line="107"/>
                </scope>
                <declaration name="proxy" type="T" line="111"/>
            </method>
            <method name="mxbeanToObjectName" type="ObjectName" line="117">
                <params>
                    <param name="mxbean" type="Object"/>
                </params>
                <comment line="140">
                    Message will be strange if mxbean is null but it is not                    
                </comment>
                <comment line="141">
                    supposed to be.                    
                </comment>
                <declaration name="wrong" type="String" line="118"/>
                <scope line="119">
                    <declaration name="ih" type="InvocationHandler" line="120"/>
                    <scope line="121">
                        <declaration name="mbsih" type="MBeanServerInvocationHandler" line="122"/>
                    </scope>
                </scope>
                <scope line="130">
                    <declaration name="name" type="ObjectName" line="131"/>
                </scope>
                <declaration name="s" type="String" line="136"/>
            </method>
            <method name="addReference" type="void" line="145">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="mxbean" type="Object"/>
                </params>
                <declaration name="existing" type="ObjectName" line="146"/>
                <scope line="147">
                    <declaration name="multiname" type="String" line="148"/>
                    <scope line="150"/>
                </scope>
            </method>
            <method name="removeReference" type="boolean" line="158">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="mxbean" type="Object"/>
                </params>
                <comment line="164">
                    removeReference can be called when the above condition fails,
                     notably if you try to register the same MXBean twice.                    
                </comment>
                <scope line="159"/>
            </method>
            <method name="getLookup" type="MXBeanLookup" line="169"/>
            <method name="setLookup" type="void" line="173">
                <params>
                    <param name="lookup" type="MXBeanLookup"/>
                </params>
            </method>
            <declaration name="currentLookup" type="ThreadLocal&lt;MXBeanLookup&gt;" line="177"/>
            <declaration name="mbsc" type="MBeanServerConnection" line="180"/>
            <declaration name="mxbeanToObjectName" type="WeakIdentityHashMap&lt;Object,ObjectName&gt;" line="181"/>
            <declaration name="objectNameToProxy" type="Map&lt;ObjectName,WeakReference&lt;Object&gt;&gt;" line="183"/>
            <declaration name="mbscToLookup" type="WeakIdentityHashMap&lt;MBeanServerConnection,WeakReference&lt;MXBeanLookup&gt;&gt;" line="185"/>
        </class>
    </source>