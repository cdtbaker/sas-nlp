<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="java.security.AccessController"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.InvalidAttributeValueException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.ReflectionException"/>
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <class name="PerInterface" line="41">
            <type_params>
                <type_param name="M"/>
            </type_params>
            <comment line="142">
                This method is called when invoke doesn&apos;t find the named method.
                 Before throwing an exception, we check to see whether the
                 jmx.invoke.getters property is set, and if so whether the method
                 being invoked might be a getter or a setter.  If so we invoke it
                 and return the result.  This is for compatibility
                 with code based on JMX RI 1.0 or 1.1 which allowed invoking getters
                 and setters.  It is not recommended that new code use this feature.
                
                 Since this method is either going to throw an exception or use
                 functionality that is strongly discouraged, we consider that its
                 performance is not very important.
                
                 A simpler way to implement the functionality would be to add the getters
                 and setters to the operations map when jmx.invoke.getters is set.
                 However, that means that the property is consulted when an MBean
                 interface is being introspected and not thereafter.  Previously,
                 the property was consulted on every invocation.  So this simpler
                 implementation could potentially break code that sets and unsets
                 the property at different times.                
            </comment>
            <javadoc line="41">
                Per-MBean-interface behavior.  A single instance of this class can be shared
                  by all MBeans of the same kind (Standard MBean or MXBean) that have the same
                  MBean interface.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="PerInterface" type="constructor" line="50">
                <params>
                    <param name="mbeanInterface" type="Class<?>"/>
                    <param name="introspector" type="MBeanIntrospector<M>"/>
                    <param name="analyzer" type="MBeanAnalyzer<M>"/>
                    <param name="mbeanInfo" type="MBeanInfo"/>
                </params>
            </method>
            <method name="getMBeanInterface" type="Class<?>" line="57"/>
            <method name="getMBeanInfo" type="MBeanInfo" line="61"/>
            <method name="isMXBean" type="boolean" line="65"/>
            <method name="getAttribute" type="Object" line="72">
                <params>
                    <param name="resource" type="Object"/>
                    <param name="attribute" type="String"/>
                    <param name="cookie" type="Object"/>
                </params>
                <declaration name="cm" type="M" line="74"/>
                <scope line="75">
                    <declaration name="msg" type="String" line="76"/>
                </scope>
            </method>
            <method name="setAttribute" type="void" line="91">
                <params>
                    <param name="resource" type="Object"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Object"/>
                    <param name="cookie" type="Object"/>
                </params>
                <declaration name="cm" type="M" line="93"/>
                <scope line="94">
                    <declaration name="msg" type="String" line="95"/>
                </scope>
            </method>
            <method name="invoke" type="Object" line="107">
                <params>
                    <param name="resource" type="Object"/>
                    <param name="operation" type="String"/>
                    <param name="params" type="Object[]"/>
                    <param name="signature" type="String[]"/>
                    <param name="cookie" type="Object"/>
                </params>
                <comment line="127">
                    helpful exception message                    
                </comment>
                <declaration name="list" type="List&lt;MethodAndSig&gt;" line="109"/>
                <scope line="110">
                    <declaration name="msg" type="String" line="111"/>
                </scope>
                <declaration name="found" type="MethodAndSig" line="117"/>
                <scope line="118">
                    <scope line="119"/>
                </scope>
                <scope line="124">
                    <declaration name="badSig" type="String" line="125"/>
                    <declaration name="msg" type="String" line="126"/>
                    <scope line="127"/>
                    <scope line="131"/>
                </scope>
            </method>
            <method name="noSuchMethod" type="Object" line="165">
                <params>
                    <param name="msg" type="String"/>
                    <param name="resource" type="Object"/>
                    <param name="operation" type="String"/>
                    <param name="params" type="Object[]"/>
                    <param name="signature" type="String[]"/>
                    <param name="cookie" type="Object"/>
                </params>
                <comment line="167">
                    Construct the exception that we will probably throw                    
                </comment>
                <comment line="174">
                    No compatibility requirement here                    
                </comment>
                <comment line="176">
                    Is the compatibility property set?                    
                </comment>
                <comment line="182">
                    We don&apos;t expect an exception here but if we get one then                    
                </comment>
                <comment line="183">
                    we&apos;ll simply assume that the property is not set.                    
                </comment>
                <declaration name="nsme" type="NoSuchMethodException" line="168"/>
                <declaration name="exception" type="ReflectionException" line="170"/>
                <declaration name="act" type="GetPropertyAction" line="177"/>
                <declaration name="invokeGettersS" type="String" line="178"/>
                <scope line="179"/>
                <scope line="181"/>
                <declaration name="rest" type="int" line="189"/>
                <declaration name="methods" type="Map&lt;String,M&gt;" line="190"/>
                <scope line="191"/>
                <scope line="199"/>
                <scope line="204">
                    <declaration name="attrName" type="String" line="205"/>
                    <declaration name="method" type="M" line="206"/>
                    <scope line="207">
                        <declaration name="msig" type="String[]" line="208"/>
                        <scope line="210"/>
                    </scope>
                </scope>
            </method>
            <method name="sigString" type="String" line="219">
                <params>
                    <param name="signature" type="String[]"/>
                </params>
                <declaration name="b" type="StringBuilder" line="220"/>
                <scope line="221">
                    <scope line="222"/>
                </scope>
            </method>
            <class name="InitMaps" line="231">
                <implements interface="MBeanAnalyzer.MBeanVisitor">
                    <type_params>
                        <type_param name="M"/>
                    </type_params>
                </implements>
                <javadoc line="231">
                    Visitor that sets up the method maps (operations, getters, setters).                    
                </javadoc>
                <method name="visitAttribute" type="void" line="237">
                    <params>
                        <param name="attributeName" type="String"/>
                        <param name="getter" type="M"/>
                        <param name="setter" type="M"/>
                    </params>
                    <scope line="238">
                        <declaration name="old" type="Object" line="240"/>
                    </scope>
                    <scope line="243">
                        <declaration name="old" type="Object" line="245"/>
                    </scope>
                </method>
                <method name="visitOperation" type="void" line="251">
                    <params>
                        <param name="operationName" type="String"/>
                        <param name="operation" type="M"/>
                    </params>
                    <declaration name="sig" type="String[]" line="253"/>
                    <declaration name="mas" type="MethodAndSig" line="254"/>
                    <declaration name="list" type="List&lt;MethodAndSig&gt;" line="257"/>
                    <scope line="260"/>
                </method>
            </class>
            <class name="MethodAndSig" line="269">
                <declaration name="method" type="M" line="270"/>
                <declaration name="signature" type="String[]" line="271"/>
            </class>
            <declaration name="mbeanInterface" type="Class&lt;?&gt;" line="274"/>
            <declaration name="introspector" type="MBeanIntrospector&lt;M&gt;" line="275"/>
            <declaration name="mbeanInfo" type="MBeanInfo" line="276"/>
            <declaration name="getters" type="Map&lt;String,M&gt;" line="277"/>
            <declaration name="setters" type="Map&lt;String,M&gt;" line="278"/>
            <declaration name="ops" type="Map&lt;String,List&lt;MethodAndSig&gt;&gt;" line="279"/>
        </class>
    </source>