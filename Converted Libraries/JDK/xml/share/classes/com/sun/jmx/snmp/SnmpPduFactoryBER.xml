<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <import package="java.io.Serializable"/>
        <import package="com.sun.jmx.snmp.SnmpPduFactory"/>
        <import package="com.sun.jmx.snmp.SnmpMessage"/>
        <import package="com.sun.jmx.snmp.SnmpPduPacket"/>
        <import package="com.sun.jmx.snmp.SnmpPdu"/>
        <import package="com.sun.jmx.snmp.SnmpMsg"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.SnmpTooBigException"/>
        <import package="com.sun.jmx.snmp.SnmpDefinitions"/>
        <import package="com.sun.jmx.snmp.SnmpV3Message"/>
        <class name="SnmpPduFactoryBER" line="12">
            <implements interface="SnmpPduFactory"/>
            <implements interface="Serializable"/>
            <javadoc line="12">
                Default implementation of the {@link com.sun.jmx.snmp.SnmpPduFactory SnmpPduFactory} interface.
                  &lt;BR&gt;It uses the BER (basic encoding rules) standardized encoding scheme associated with ASN.1.
                  &lt;P&gt;
                  This implementation of the &lt;CODE&gt;SnmpPduFactory&lt;/CODE&gt; is very
                  basic: it simply calls encoding and decoding methods from{@link com.sun.jmx.snmp.SnmpMsg}.
                  &lt;BLOCKQUOTE&gt;
                  &lt;PRE&gt;
                  public SnmpPdu decodeSnmpPdu(SnmpMsg msg)
                  throws SnmpStatusException {
                  return msg.decodeSnmpPdu() ;
                  }
                  public SnmpMsg encodeSnmpPdu(SnmpPdu pdu, int maxPktSize)
                  throws SnmpStatusException, SnmpTooBigException {
                  SnmpMsg result = new SnmpMessage() ;       // for SNMP v1/v2
                  &lt;I&gt;or&lt;/I&gt;
                  SnmpMsg result = new SnmpV3Message() ;     // for SNMP v3
                  result.encodeSnmpPdu(pdu, maxPktSize) ;
                  return result ;
                  }
                  &lt;/PRE&gt;
                  &lt;/BLOCKQUOTE&gt;
                  To implement your own object, you can implement &lt;CODE&gt;SnmpPduFactory&lt;/CODE&gt;
                  or extend &lt;CODE&gt;SnmpPduFactoryBER&lt;/CODE&gt;.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="40"/>
            <javadoc line="41">
                Calls {@link com.sun.jmx.snmp.SnmpMsg#decodeSnmpPdu SnmpMsg.decodeSnmpPdu}on the specified message and returns the resulting &lt;CODE&gt;SnmpPdu&lt;/CODE&gt;.                
                <param>
                    msg The SNMP message to be decoded.                    
                </param>
                <return>
                    The resulting SNMP PDU packet.                    
                </return>
                <exception>
                    SnmpStatusException If the encoding is invalid.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="decodeSnmpPdu" type="SnmpPdu" line="48">
                <params>
                    <param name="msg" type="SnmpMsg"/>
                </params>
            </method>
            <javadoc line="51">
                Encodes the specified &lt;CODE&gt;SnmpPdu&lt;/CODE&gt; and
                  returns the resulting &lt;CODE&gt;SnmpMsg&lt;/CODE&gt;. If this
                  method returns null, the specified &lt;CODE&gt;SnmpPdu&lt;/CODE&gt;
                  will be dropped and the current SNMP request will be
                  aborted.                
                <param>
                    p The <CODE>SnmpPdu</CODE> to be encoded.                    
                </param>
                <param>
                    maxDataLength The size limit of the resulting encoding.                    
                </param>
                <return>
                    Null or a fully encoded <CODE>SnmpMsg</CODE>.                    
                </return>
                <exception>
                    SnmpStatusException If <CODE>pdu</CODE> contains
                      illegal values and cannot be encoded.                    
                </exception>
                <exception>
                    SnmpTooBigException If the resulting encoding does not
                      fit into <CODE>maxPktSize</CODE> bytes.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="encodeSnmpPdu" type="SnmpMsg" line="66">
                <params>
                    <param name="p" type="SnmpPdu"/>
                    <param name="maxDataLength" type="int"/>
                </params>
                <scope line="70">
                    <declaration name="result" type="SnmpMessage" line="71"/>
                </scope>
                <scope line="76">
                    <declaration name="result" type="SnmpV3Message" line="77"/>
                </scope>
            </method>
        </class>
    </source>