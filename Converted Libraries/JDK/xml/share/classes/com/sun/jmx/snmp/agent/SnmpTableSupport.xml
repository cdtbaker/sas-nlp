<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.agent">
        <import package="java.io.Serializable"/>
        <import package="java.util.Date"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.NotificationFilter"/>
        <import package="javax.management.NotificationListener"/>
        <import package="javax.management.NotificationBroadcaster"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.ListenerNotFoundException"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpValue"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <class name="SnmpTableSupport" line="19">
            <implements interface="SnmpTableEntryFactory"/>
            <implements interface="SnmpTableCallbackHandler"/>
            <implements interface="Serializable"/>
            <javadoc line="19">
                This class is an abstraction for an SNMP table.
                  It is the base class for implementing SNMP tables in the
                  MBean world.
                  &lt;p&gt;
                  Its responsibility is to synchronize the MBean view of the table
                  (Table of entries) with the MIB view (array of OID indexes). Each
                  object of this class will be bound to the Metadata object which
                  manages the same SNMP Table within the MIB.
                  &lt;/p&gt;
                  &lt;p&gt;
                  For each table defined in a MIB, mibgen will generate a specific
                  class called Table&lt;i&gt;TableName&lt;/i&gt; that will subclass this class, and
                  a corresponding &lt;i&gt;TableName&lt;/i&gt;Meta class extending SnmpMibTable
                  and corresponding to the MIB view of the same table.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Objects of this class are instantiated by MBeans representing
                  the SNMP Group to which the table belong.
                  &lt;/p&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <see>
                    com.sun.jmx.snmp.agent.SnmpTableEntryFactory                    
                </see>
                <see>
                    com.sun.jmx.snmp.agent.SnmpMibTable                    
                </see>
            </javadoc>
            <declaration name="entries" type="List&amp;lt;Object&amp;gt;" line="45"/>
            <javadoc line="45">
                The list of entries                
            </javadoc>
            <declaration name="meta" type="SnmpMibTable" line="49"/>
            <javadoc line="49">
                The associated metadata object                
            </javadoc>
            <declaration name="theMib" type="SnmpMib" line="53"/>
            <javadoc line="53">
                The MIB to which this table belongs                
            </javadoc>
            <declaration name="registrationRequired" type="boolean" line="57"/>
            <javadoc line="57">
                This variable is initialized while binding this object to its
                  corresponding meta object.                
            </javadoc>
            <javadoc line="62">
                Initializes the table.
                  The steps are these:
                  &lt;ul&gt;&lt;li&gt; allocate an array for storing entry object,&lt;/li&gt;
                  &lt;li&gt; retrieve the corresponding metadata object
                  from the MIB,
                  &lt;li&gt; bind this object to the corresponding metadata object
                  from the MIB.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    mib The MIB to which this table belong.                    
                </param>
            </javadoc>
            <method name="SnmpTableSupport" type="constructor" line="73">
                <params>
                    <param name="mib" type="SnmpMib"/>
                </params>
            </method>
            <method name="createNewEntry" type="void" line="79"/>
            <javadoc line="79">
                Creates a new entry in the table.
                  This factory method is generated by mibgen and used internally.
                  It is part of the{@link com.sun.jmx.snmp.agent.SnmpTableEntryFactory} interface.
                  You may subclass this method to implement any specific behaviour
                  your application requires.                
                <exception>
                    SnmpStatusException if the entry cannot be created.                    
                </exception>
            </javadoc>
            <javadoc line="88">
                Returns the entry located at the given position in the table.                
                <return>
                    The entry located at the given position, &lt;code&gt;null&lt;/code&gt;
                      if no entry can be found at this position.                    
                </return>
            </javadoc>
            <method name="getEntry" type="Object" line="93">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <javadoc line="97">
                Returns the number of entries registered in the table.                
                <return>
                    The number of entries registered in the table.                    
                </return>
            </javadoc>
            <method name="getSize" type="int" line="101"/>
            <javadoc line="104">
                This method lets you dynamically switch the creation policy.
                  &lt;CODE&gt;setCreationEnabled()&lt;/CODE&gt; will switch the policy of
                  remote entry creation via SET operations, by calling
                  &lt;code&gt;setCreationEnabled()&lt;/code&gt; on the metadata object
                  associated with this table.
                  &lt;BR&gt; By default remote entry creation via SET operation is disabled.                
                <param>
                    remoteCreationFlag Tells whether remote entry creation must
                      be enabled or disabled.
                      &lt;li&gt;
                      &lt;CODE&gt;setCreationEnabled(true)&lt;/CODE&gt; will enable remote entry
                      creation via SET operations.&lt;/li&gt;
                      &lt;li&gt;
                      &lt;CODE&gt;setCreationEnabled(false)&lt;/CODE&gt; will disable remote entry
                      creation via SET operations.&lt;/li&gt;
                      &lt;p&gt; By default remote entry creation via SET operation is disabled.
                      &lt;/p&gt;                    
                </param>
                <see>
                    com.sun.jmx.snmp.agent.SnmpMibTable                    
                </see>
            </javadoc>
            <method name="setCreationEnabled" type="void" line="123">
                <params>
                    <param name="remoteCreationFlag" type="boolean"/>
                </params>
            </method>
            <javadoc line="126">
                Tells whether a new entry should be created when a SET operation
                  is received for an entry that does not exist yet.
                  This method calls &lt;code&gt;isCreationEnabled()&lt;/code&gt; on the metadata
                  object associated with this table.                
                <return>
                    true if a new entry must be created, false otherwise.&lt;br&gt;
                      [default: returns &lt;CODE&gt;false&lt;/CODE&gt;]                    
                </return>
                <see>
                    com.sun.jmx.snmp.agent.SnmpMibTable                    
                </see>
            </javadoc>
            <method name="isCreationEnabled" type="boolean" line="135"/>
            <javadoc line="138">
                Tells whether the metadata object to which this table is linked
                  requires entries to be registered. In this case passing an
                  ObjectName when registering entries will be mandatory.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the associated metadata requires entries
                      to be registered (mibgen generated generic metadata).                    
                </return>
            </javadoc>
            <method name="isRegistrationRequired" type="boolean" line="145"/>
            <javadoc line="148">
                Builds an entry SnmpIndex from its row OID.
                  This method is generated by mibgen and used internally.                
                <param>
                    rowOid The SnmpOid object identifying a table entry.                    
                </param>
                <return>
                    The SnmpIndex of the entry identified by &lt;code&gt;rowOid&lt;/code&gt;.                    
                </return>
                <exception>
                    SnmpStatusException if the index cannot be built from the
                      given OID.                    
                </exception>
            </javadoc>
            <method name="buildSnmpIndex" type="SnmpIndex" line="156">
                <params>
                    <param name="rowOid" type="SnmpOid"/>
                </params>
            </method>
            <method name="buildOidFromIndex" type="SnmpOid" line="159"/>
            <javadoc line="159">
                Builds an SnmpOid from an SnmpIndex object.
                  This method is generated by mibgen and used internally.                
                <param>
                    index An SnmpIndex object identifying a table entry.                    
                </param>
                <return>
                    The SnmpOid form of the given entry index.                    
                </return>
                <exception>
                    SnmpStatusException if the given index is not valid.                    
                </exception>
            </javadoc>
            <method name="buildNameFromIndex" type="ObjectName" line="167"/>
            <javadoc line="167">
                Builds the default ObjectName of an entry from the SnmpIndex
                  identifying this entry. No access is made on the entry itself.
                  This method is generated by mibgen and used internally.
                  You can subclass this method if you want to change the default
                  ObjectName policy. This is only meaningfull when entries
                  are registered MBeans.                
                <param>
                    index The SnmpIndex identifying the entry from which we
                      want to build the default ObjectName.                    
                </param>
                <return>
                    The default ObjectName for the entry identified by
                      the given index.                    
                </return>
                <exception>
                    SnmpStatusException if the given index is not valid.                    
                </exception>
            </javadoc>
            <javadoc line="181">
                This callback is called by  the associated metadata object
                  when a new table entry has been registered in the
                  table metadata.
                  This method will update the &lt;code&gt;entries&lt;/code&gt; list.                
                <param>
                    pos   The position at which the new entry was inserted
                      in the table.                    
                </param>
                <param>
                    row   The row OID of the new entry                    
                </param>
                <param>
                    name  The ObjectName of the new entry (as specified by the
                      factory)                    
                </param>
                <param>
                    entry The new entry (as returned by the factory)                    
                </param>
                <param>
                    meta  The table metadata object.                    
                </param>
            </javadoc>
            <method name="addEntryCb" type="void" line="194">
                <params>
                    <param name="pos" type="int"/>
                    <param name="row" type="SnmpOid"/>
                    <param name="name" type="ObjectName"/>
                    <param name="entry" type="Object"/>
                    <param name="meta" type="SnmpMibTable"/>
                </params>
                <scope line="195"/>
                <scope line="198"/>
            </method>
            <javadoc line="202">
                This callback is called by  the associated metadata object
                  when a new table entry has been removed from the
                  table metadata.
                  This method will update the &lt;code&gt;entries&lt;/code&gt; list.                
                <param>
                    pos   The position from which the entry was deleted                    
                </param>
                <param>
                    row   The row OID of the deleted entry                    
                </param>
                <param>
                    name  The ObjectName of the deleted entry (may be null if
                      ObjectName&apos;s were not required)                    
                </param>
                <param>
                    entry The deleted entry (may be null if only ObjectName&apos;s
                      were required)                    
                </param>
                <param>
                    meta  The table metadata object.                    
                </param>
            </javadoc>
            <method name="removeEntryCb" type="void" line="215">
                <params>
                    <param name="pos" type="int"/>
                    <param name="row" type="SnmpOid"/>
                    <param name="name" type="ObjectName"/>
                    <param name="entry" type="Object"/>
                    <param name="meta" type="SnmpMibTable"/>
                </params>
                <scope line="216"/>
                <scope line="219"/>
            </method>
            <javadoc line="222">
                Enables to add an SNMP entry listener to this
                  &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt;.                
                <param>
                    listener The listener object which will handle the
                      notifications emitted by the registered MBean.                    
                </param>
                <param>
                    filter The filter object. If filter is null, no filtering
                      will be performed before handling notifications.                    
                </param>
                <param>
                    handback The context to be sent to the listener when a
                      notification is emitted.                    
                </param>
                <exception>
                    IllegalArgumentException Listener parameter is null.                    
                </exception>
            </javadoc>
            <method name="addNotificationListener" type="void" line="233">
                <params>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <javadoc line="236">
                Enables to remove an SNMP entry listener from this
                  &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt;.                
                <param>
                    listener The listener object which will handle the
                      notifications emitted by the registered MBean.
                      This method will remove all the information related to this
                      listener.                    
                </param>
                <exception>
                    ListenerNotFoundException The listener is not registered
                      in the MBean.                    
                </exception>
            </javadoc>
            <method name="removeNotificationListener" type="void" line="246">
                <params>
                    <param name="listener" type="NotificationListener"/>
                </params>
            </method>
            <javadoc line="249">
                Returns a &lt;CODE&gt;NotificationInfo&lt;/CODE&gt; object containing the
                  notification class and the notification type sent by the
                  &lt;CODE&gt;SnmpMibTable&lt;/CODE&gt;.                
            </javadoc>
            <method name="getNotificationInfo" type="MBeanNotificationInfo[]" line="254"/>
            <method name="buildSnmpIndex" type="SnmpIndex" line="257"/>
            <javadoc line="257">
                Builds an SnmpIndex object from the index part of an OID.
                  This method is generated by mibgen and used internally.                
                <param>
                    oid The OID from which to build the index, represented
                      as an array of long.                    
                </param>
                <param>
                    start The position where to start from in the OID array.                    
                </param>
                <return>
                    The SnmpOid form of the given entry index.                    
                </return>
                <exception>
                    SnmpStatusException if the given index is not valid.                    
                </exception>
            </javadoc>
            <method name="getRegisteredTableMeta" type="SnmpMibTable" line="267"/>
            <javadoc line="267">
                Returns the metadata object associated with this table.
                  This method is generated by mibgen and used internally.                
                <param>
                    mib The SnmpMib object holding the Metadata corresponding
                      to this table.                    
                </param>
                <return>
                    The metadata object associated with this table.
                      Returns &lt;code&gt;null&lt;/code&gt; if this implementation of the
                      MIB doesn&apos;t support this table.                    
                </return>
            </javadoc>
            <javadoc line="277">
                Allocates an ArrayList for storing table entries.
                  This method is called within the constructor at object creation.
                  Any object implementing the {@link java.util.List} interface can
                  be used.                
                <return>
                    A new list in which to store entries. If &lt;code&gt;null&lt;/code&gt;
                      is returned then no entry will be stored in the list
                      and getEntry() will always return null.                    
                </return>
            </javadoc>
            <method name="allocateTable" type="List&lt;Object&gt;" line="286"/>
            <javadoc line="289">
                Add an entry in this table.
                  This method registers an entry in the table and perform
                  synchronization with the associated table metadata object.
                  This method assumes that the given entry will not be registered,
                  or will be registered with its default ObjectName built from the
                  associated  SnmpIndex.
                  &lt;p&gt;
                  If the entry is going to be registered, then{@link com.sun.jmx.snmp.agent.SnmpTableSupport#addEntry(SnmpIndex,ObjectName,Object)} should be prefered.
                  &lt;br&gt; This function is mainly provided for backward compatibility.                
                <param>
                    index The SnmpIndex built from the given entry.                    
                </param>
                <param>
                    entry The entry that should be added in the table.                    
                </param>
                <exception>
                    SnmpStatusException if the entry cannot be registered with
                      the given index.                    
                </exception>
            </javadoc>
            <method name="addEntry" type="void" line="304">
                <params>
                    <param name="index" type="SnmpIndex"/>
                    <param name="entry" type="Object"/>
                </params>
                <declaration name="oid" type="SnmpOid" line="305"/>
                <declaration name="name" type="ObjectName" line="306"/>
                <scope line="307"/>
            </method>
            <javadoc line="312">
                Add an entry in this table.
                  This method registers an entry in the table and performs
                  synchronization with the associated table metadata object.                
                <param>
                    index The SnmpIndex built from the given entry.                    
                </param>
                <param>
                    name  The ObjectName with which this entry will be registered.                    
                </param>
                <param>
                    entry The entry that should be added in the table.                    
                </param>
                <exception>
                    SnmpStatusException if the entry cannot be registered with
                      the given index.                    
                </exception>
            </javadoc>
            <method name="addEntry" type="void" line="322">
                <params>
                    <param name="index" type="SnmpIndex"/>
                    <param name="name" type="ObjectName"/>
                    <param name="entry" type="Object"/>
                </params>
                <declaration name="oid" type="SnmpOid" line="323"/>
            </method>
            <javadoc line="326">
                Remove an entry from this table.
                  This method unregisters an entry from the table and performs
                  synchronization with the associated table metadata object.                
                <param>
                    index The SnmpIndex identifying the entry.                    
                </param>
                <param>
                    entry The entry that should be removed in the table. This
                      parameter is optional and can be omitted if it doesn&apos;t
                      need to be passed along to the
                      &lt;code&gt;removeEntryCb()&lt;/code&gt; callback defined in the{@link com.sun.jmx.snmp.agent.SnmpTableCallbackHandler}interface.                    
                </param>
                <exception>
                    SnmpStatusException if the entry cannot be unregistered.                    
                </exception>
            </javadoc>
            <method name="removeEntry" type="void" line="337">
                <params>
                    <param name="index" type="SnmpIndex"/>
                    <param name="entry" type="Object"/>
                </params>
                <declaration name="oid" type="SnmpOid" line="338"/>
            </method>
            <javadoc line="341">
                Returns the entries in the table.                
                <return>
                    An Object[] array containing the entries registered in the
                      table.                    
                </return>
            </javadoc>
            <method name="getBasicEntries" type="Object[]" line="346">
                <declaration name="array" type="Object[]" line="348"/>
            </method>
            <javadoc line="352">
                Binds this table with its associated metadata, registering itself
                  as an SnmpTableEntryFactory.                
            </javadoc>
            <method name="bindWithTableMeta" type="void" line="356"/>
        </class>
    </source>