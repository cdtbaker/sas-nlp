<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.agent">
        <import package="java.io.Serializable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Enumeration"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpValue"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpDefinitions"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <class name="SnmpMibNode" line="11">
            <implements interface="Serializable"/>
            <javadoc line="11">
                The &lt;CODE&gt;SnmpMibNode&lt;/CODE&gt; class represents a node in an SNMP MIB.
                  &lt;P&gt;
                  This class is used internally and by the class generated by
                  &lt;CODE&gt;mibgen&lt;/CODE&gt;.
                  You should not need to use this class directly.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <javadoc line="21">
                Get the next OID arc corresponding to a readable scalar variable,
                  a branch leading to a subgroub, or a table.                
                <param>
                    id Id we start from looking for the next.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the <code>{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}</code>
                      for each incoming SNMP request.                    
                </param>
                <return>
                    The next id in this group.                    
                </return>
                <exception>
                    SnmpStatusException If no id is found after the given id.                    
                </exception>
            </javadoc>
            <method name="getNextVarId" type="long" line="31">
                <params>
                    <param name="id" type="long"/>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <javadoc line="34">
                Get the next OID arc corresponding to a readable scalar variable,
                  a branch leading to a subgroub, or a table, possibly skipping over
                  those arcs that must not or cannot be returned.
                  Calls {@link #getNextVarId(long,java.lang.Object)} until{@link #skipVariable(long,java.lang.Object,int)} returns false.                
                <param>
                    id Id we start from looking for the next.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the <code>{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}</code>
                      for each incoming SNMP request.                    
                </param>
                <param>
                    pduVersion Protocol version of the original request PDU.                    
                </param>
                <return>
                    The next id in this group which can be returned using
                      the given PDU's protocol version.                    
                </return>
                <exception>
                    SnmpStatusException If no id is found after the given id.                    
                </exception>
            </javadoc>
            <method name="getNextVarId" type="long" line="48">
                <params>
                    <param name="id" type="long"/>
                    <param name="userData" type="Object"/>
                    <param name="pduVersion" type="int"/>
                </params>
                <declaration name="varid" type="long" line="49"/>
                <scope line="50"/>
            </method>
            <javadoc line="56">
                Hook for subclasses.
                  The default implementation of this method is to always return
                  false. Subclasses should redefine this method so that it returns
                  true when:
                  &lt;ul&gt;&lt;li&gt;the variable is a leaf that is not instantiated,&lt;/li&gt;
                  &lt;li&gt;or the variable is a leaf whose type cannot be returned by that
                  version of the protocol (e.g. an Counter64 with SNMPv1).&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    id Id we start from looking for the next.                    
                </param>
                <param>
                    userData A contextual object containing user-data.
                      This object is allocated through the <code>{@link com.sun.jmx.snmp.agent.SnmpUserDataFactory}</code>
                      for each incoming SNMP request.                    
                </param>
                <param>
                    pduVersion Protocol version of the original request PDU.                    
                </param>
                <return>
                    true if the variable must be skipped by the get-next
                      algorithm.                    
                </return>
            </javadoc>
            <method name="skipVariable" type="boolean" line="73">
                <params>
                    <param name="id" type="long"/>
                    <param name="userData" type="Object"/>
                    <param name="pduVersion" type="int"/>
                </params>
            </method>
            <javadoc line="76">
                Find the node which handles a varbind, and register it in the
                  SnmpRequestTree. This method is a pure internal method. You should
                  never try to call it directly.                
                <param>
                    varbind  The varbind to be handled                    
                </param>
                <param>
                    oid      The OID array extracted from the varbind                    
                </param>
                <param>
                    depth    The depth reached in the OID at this step of the
                      processing.                    
                </param>
                <param>
                    handlers The Hashtable in which the varbind will be registered
                      with its handling node. This hashtable contains
                      <CODE>SnmpRequestTree.Handler</CODE> items.                    
                </param>
                <exception>
                    SnmpStatusException No handling node was found.                    
                </exception>
            </javadoc>
            <method name="findHandlingNode" type="void" line="89">
                <params>
                    <param name="varbind" type="SnmpVarBind"/>
                    <param name="oid" type="long[]"/>
                    <param name="depth" type="int"/>
                    <param name="handlers" type="SnmpRequestTree"/>
                </params>
            </method>
            <javadoc line="92">
                Find the node which handles the leaf that immediately follows the
                  given varbind OID, and register the it in the SnmpRequestTree.
                  This method is a pure internal method. You should never try to call
                  it directly.                
                <param>
                    varbind  The varbind to be handled                    
                </param>
                <param>
                    oid      The OID array extracted from the varbind                    
                </param>
                <param>
                    depth    The depth reached in the OID at this step of the
                      processing.                    
                </param>
                <param>
                    handlers The Hashtable in which the varbind will be registered
                      with its handling node. This hashtable contains
                      SnmpRequestTree.Handler items.                    
                </param>
                <return>
                    The SnmpOid of the next leaf.                    
                </return>
                <exception>
                    SnmpStatusException No handling node was found.                    
                </exception>
            </javadoc>
            <method name="findNextHandlingNode" type="long[]" line="107">
                <params>
                    <param name="varbind" type="SnmpVarBind"/>
                    <param name="oid" type="long[]"/>
                    <param name="pos" type="int"/>
                    <param name="depth" type="int"/>
                    <param name="handlers" type="SnmpRequestTree"/>
                    <param name="checker" type="AcmChecker"/>
                </params>
            </method>
            <method name="get" type="void" line="110"/>
            <javadoc line="110">
                Generic handling of the &lt;CODE&gt;get&lt;/CODE&gt; operation.
                  &lt;p&gt; You can override this method if you need to implement some
                  specific policies for minimizing the accesses made to some remote
                  underlying resources.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException An error occurred while accessing
                      the MIB node.                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="122"/>
            <javadoc line="122">
                Generic handling of the &lt;CODE&gt;set&lt;/CODE&gt; operation.
                  &lt;p&gt; You can override this method if you need to implement some
                  specific policies for minimizing the accesses made to some remote
                  underlying resources.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException An error occurred while accessing
                      the MIB node.                    
                </exception>
            </javadoc>
            <method name="check" type="void" line="134"/>
            <javadoc line="134">
                Generic handling of the &lt;CODE&gt;check&lt;/CODE&gt; operation.
                  &lt;p&gt; You can override this method if you need to implement some
                  specific policies for minimizing the accesses made to some remote
                  underlying resources, or if you need to implement some consistency
                  checks between the different values provided in the varbind list.
                  &lt;p&gt;                
                <param>
                    req   The sub-request that must be handled by this node.                    
                </param>
                <param>
                    depth The depth reached in the OID tree.                    
                </param>
                <exception>
                    SnmpStatusException An error occurred while accessing
                      the MIB node.                    
                </exception>
            </javadoc>
            <javadoc line="147">
                Sorts the specified integer array.                
                <param>
                    array An integer array.                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="151">
                <params>
                    <param name="array" type="int"/>
                </params>
            </method>
            <javadoc line="154">
                Computes the root OID of the MIB.                
            </javadoc>
            <method name="getRootOid" type="void" line="157">
                <params>
                    <param name="result" type="Vector<Integer>"/>
                </params>
            </method>
            <javadoc line="160">
                This is a generic version of C.A.R Hoare&apos;s Quick Sort
                  algorithm.  This will handle arrays that are already
                  sorted, and arrays with duplicate keys.
                  If you think of a one dimensional array as going from
                  the lowest index on the left to the highest index on the right
                  then the parameters to this function are lowest index or
                  left and highest index or right.  The first time you call
                  this function it will be with the parameters 0, a.length - 1.                
                <param>
                    a An integer array.                    
                </param>
                <param>
                    lo0 Left boundary of array partition.                    
                </param>
                <param>
                    hi0 Right boundary of array partition.                    
                </param>
            </javadoc>
            <method name="QuickSort" type="void" line="173">
                <params>
                    <param name="a" type="int"/>
                    <param name="lo0" type="int"/>
                    <param name="hi0" type="int"/>
                </params>
                <declaration name="lo" type="int" line="174"/>
                <declaration name="hi" type="int" line="175"/>
                <declaration name="mid" type="int" line="176"/>
                <scope line="177">
                    <scope line="179">
                        <scope line="182"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="192">
                This will give the first element greater than &lt;CODE&gt;value&lt;/CODE&gt;
                  in a sorted array.
                  If there is no element of the array greater than &lt;CODE&gt;value&lt;/CODE&gt;,
                  the method will throw a &lt;CODE&gt;SnmpStatusException&lt;/CODE&gt;.                
                <param>
                    table A sorted integer array.                    
                </param>
                <param>
                    value The greatest value.                    
                </param>
                <exception>
                    SnmpStatusException If there is no element greater than
                      <CODE>value</CODE>.                    
                </exception>
            </javadoc>
            <method name="getNextIdentifier" type="int" line="202">
                <params>
                    <param name="table" type="int"/>
                    <param name="value" type="long"/>
                </params>
                <declaration name="a" type="int[]" line="203"/>
                <declaration name="val" type="int" line="204"/>
                <declaration name="low" type="int" line="206"/>
                <declaration name="max" type="int" line="207"/>
                <declaration name="curr" type="int" line="208"/>
                <declaration name="elmt" type="int" line="209"/>
                <scope line="212">
                    <scope line="214"/>
                    <scope line="218"/>
                    <scope line="221"/>
                </scope>
            </method>
            <method name="swap" type="void" line="228">
                <params>
                    <param name="a" type="int"/>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
                <declaration name="T" type="int" line="229"/>
            </method>
            <declaration name="varList" type="int[]" line="234"/>
            <javadoc line="234">
                Contains the list of variable identifiers.                
            </javadoc>
            <declaration name="noSuchInstanceException" type="SnmpStatusException" line="238"/>
            <javadoc line="238">
                Contains a predefined exception that is often fired when an
                  object is not found in the MIB.                
            </javadoc>
            <declaration name="noSuchObjectException" type="SnmpStatusException" line="243"/>
            <declaration name="noSuchNameException" type="SnmpStatusException" line="244"/>
        </class>
    </source>