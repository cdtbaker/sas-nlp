<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <class name="BerEncoder" line="2">
            <javadoc line="2">
                The &lt;CODE&gt;BerEncoder&lt;/CODE&gt; class is used for encoding data using BER.
                  A &lt;CODE&gt;BerEncoder&lt;/CODE&gt; needs to be set up with a byte buffer. The encoded
                  data are stored in this byte buffer.
                  &lt;P&gt;
                  NOTE : the buffer is filled from end to start. This means the caller
                  needs to encode its data in the reverse order.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="14">
                Constructs a new encoder and attaches it to the specified byte string.                
                <param>
                    b The byte string containing the encoded data.                    
                </param>
            </javadoc>
            <method name="BerEncoder" type="constructor" line="18">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="23">
                Trim the encoding data and returns the length of the encoding.
                  The encoder does backward encoding : so the bytes buffer is
                  filled from end to start. The encoded data must be shift before
                  the buffer can be used. This is the purpose of the &lt;CODE&gt;trim&lt;/CODE&gt; method.
                  After a call to the &lt;CODE&gt;trim&lt;/CODE&gt; method, the encoder is reinitialized and &lt;CODE&gt;putXXX&lt;/CODE&gt;
                  overwrite any existing encoded data.                
                <return>
                    The length of the encoded data.                    
                </return>
            </javadoc>
            <method name="trim" type="int" line="32">
                <declaration name="result" type="int" line="33"/>
            </method>
            <javadoc line="39">
                Put an integer.                
                <param>
                    v The integer to encode.                    
                </param>
            </javadoc>
            <method name="putInteger" type="void" line="43">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="46">
                Put an integer with the specified tag.                
                <param>
                    v The integer to encode.                    
                </param>
                <param>
                    tag The tag to encode.                    
                </param>
            </javadoc>
            <method name="putInteger" type="void" line="51">
                <params>
                    <param name="v" type="int"/>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <javadoc line="55">
                Put an integer expressed as a long.                
                <param>
                    v The long to encode.                    
                </param>
            </javadoc>
            <method name="putInteger" type="void" line="59">
                <params>
                    <param name="v" type="long"/>
                </params>
            </method>
            <javadoc line="62">
                Put an integer expressed as a long with the specified tag.                
                <param>
                    v The long to encode                    
                </param>
                <param>
                    tag The tag to encode.                    
                </param>
            </javadoc>
            <method name="putInteger" type="void" line="67">
                <params>
                    <param name="v" type="long"/>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <javadoc line="71">
                Put an octet string.                
                <param>
                    s The bytes to encode                    
                </param>
            </javadoc>
            <method name="putOctetString" type="void" line="75">
                <params>
                    <param name="s" type="byte[]"/>
                </params>
            </method>
            <javadoc line="78">
                Put an octet string with a specified tag.                
                <param>
                    s The bytes to encode                    
                </param>
                <param>
                    tag The tag to encode.                    
                </param>
            </javadoc>
            <method name="putOctetString" type="void" line="83">
                <params>
                    <param name="s" type="byte[]"/>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <javadoc line="87">
                Put an object identifier.                
                <param>
                    s The oid to encode.                    
                </param>
            </javadoc>
            <method name="putOid" type="void" line="91">
                <params>
                    <param name="s" type="long[]"/>
                </params>
            </method>
            <javadoc line="94">
                Put an object identifier with a specified tag.                
                <param>
                    s The integer to encode.                    
                </param>
                <param>
                    tag The tag to encode.                    
                </param>
            </javadoc>
            <method name="putOid" type="void" line="99">
                <params>
                    <param name="s" type="long[]"/>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <javadoc line="103">
                Put a &lt;CODE&gt;NULL&lt;/CODE&gt; value.                
            </javadoc>
            <method name="putNull" type="void" line="106"/>
            <javadoc line="109">
                Put a &lt;CODE&gt;NULL&lt;/CODE&gt; value with a specified tag.                
                <param>
                    tag The tag to encode.                    
                </param>
            </javadoc>
            <method name="putNull" type="void" line="113">
                <params>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <javadoc line="117">
                Put an &lt;CODE&gt;ANY&lt;/CODE&gt; value. In fact, this method does not encode anything.
                  It simply copies the specified bytes into the encoding.                
                <param>
                    s The encoding of the &lt;CODE&gt;ANY&lt;/CODE&gt; value.                    
                </param>
            </javadoc>
            <method name="putAny" type="void" line="122">
                <params>
                    <param name="s" type="byte[]"/>
                </params>
            </method>
            <javadoc line="125">
                Put an &lt;CODE&gt;ANY&lt;/CODE&gt; value. Only the first &lt;CODE&gt;byteCount&lt;/CODE&gt; are considered.                
                <param>
                    s The encoding of the &lt;CODE&gt;ANY&lt;/CODE&gt; value.                    
                </param>
                <param>
                    byteCount The number of bytes of the encoding.                    
                </param>
            </javadoc>
            <method name="putAny" type="void" line="130">
                <params>
                    <param name="s" type="byte[]"/>
                    <param name="byteCount" type="int"/>
                </params>
            </method>
            <javadoc line="134">
                Open a sequence.
                  The encoder push the current position on its stack.                
            </javadoc>
            <method name="openSequence" type="void" line="138"/>
            <javadoc line="141">
                Close a sequence.
                  The decode pull the stack to know the end of the current sequence.                
            </javadoc>
            <method name="closeSequence" type="void" line="145"/>
            <javadoc line="148">
                Close a sequence with the specified tag.                
            </javadoc>
            <method name="closeSequence" type="void" line="151">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="end" type="int" line="152"/>
            </method>
            <declaration name="BooleanTag" type="int" line="156"/>
            <declaration name="IntegerTag" type="int" line="157"/>
            <declaration name="OctetStringTag" type="int" line="158"/>
            <declaration name="NullTag" type="int" line="159"/>
            <declaration name="OidTag" type="int" line="160"/>
            <declaration name="SequenceTag" type="int" line="161"/>
            <javadoc line="162">
                Put a tag and move the current position backward.                
                <param>
                    tag The tag to encode.                    
                </param>
            </javadoc>
            <method name="putTag" type="void" line="166">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <scope line="167"/>
                <scope line="170">
                    <scope line="171"/>
                </scope>
            </method>
            <javadoc line="177">
                Put a length and move the current position backward.                
                <param>
                    length The length to encode.                    
                </param>
            </javadoc>
            <method name="putLength" type="void" line="181">
                <params>
                    <param name="length" type="int"/>
                </params>
                <scope line="182"/>
                <scope line="185"/>
                <scope line="188"/>
                <scope line="192"/>
                <scope line="197"/>
                <scope line="203"/>
            </method>
            <javadoc line="211">
                Put an integer value and move the current position backward.                
                <param>
                    v The integer to encode.                    
                </param>
            </javadoc>
            <method name="putIntegerValue" type="void" line="215">
                <params>
                    <param name="v" type="int"/>
                </params>
                <declaration name="end" type="int" line="216"/>
                <declaration name="mask" type="int" line="217"/>
                <declaration name="byteNeeded" type="int" line="218"/>
                <scope line="219">
                    <scope line="220"/>
                </scope>
                <scope line="225">
                    <scope line="226"/>
                </scope>
                <scope line="231"/>
            </method>
            <javadoc line="237">
                Put an integer value expressed as a long.                
                <param>
                    v The integer to encode.                    
                </param>
            </javadoc>
            <method name="putIntegerValue" type="void" line="241">
                <params>
                    <param name="v" type="long"/>
                </params>
                <declaration name="end" type="int" line="242"/>
                <declaration name="mask" type="long" line="243"/>
                <declaration name="byteNeeded" type="int" line="244"/>
                <scope line="245">
                    <scope line="246"/>
                </scope>
                <scope line="251">
                    <scope line="252"/>
                </scope>
                <scope line="257"/>
            </method>
            <javadoc line="263">
                Put a byte string and move the current position backward.                
                <param>
                    s The byte string to encode.                    
                </param>
            </javadoc>
            <method name="putStringValue" type="void" line="267">
                <params>
                    <param name="s" type="byte[]"/>
                </params>
                <declaration name="datalen" type="int" line="268"/>
            </method>
            <javadoc line="273">
                Put an oid and move the current position backward.                
                <param>
                    s The oid to encode.                    
                </param>
            </javadoc>
            <method name="putOidValue" type="void" line="277">
                <params>
                    <param name="s" type="long[]"/>
                </params>
                <declaration name="end" type="int" line="278"/>
                <declaration name="slength" type="int" line="279"/>
                <scope line="280"/>
                <scope line="283">
                    <declaration name="c" type="long" line="284"/>
                    <scope line="285"/>
                    <scope line="288"/>
                    <scope line="291">
                        <scope line="294"/>
                    </scope>
                </scope>
            </method>
            <declaration name="bytes" type="byte" line="303"/>
            <declaration name="start" type="int" line="304"/>
            <declaration name="stackBuf" type="int" line="305"/>
            <declaration name="stackTop" type="int" line="306"/>
        </class>
    </source>