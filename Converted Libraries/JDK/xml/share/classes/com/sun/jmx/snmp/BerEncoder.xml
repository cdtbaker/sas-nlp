<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <class name="BerEncoder" line="30">
            <comment line="269">
                Some standard tags                
            </comment>
            <comment line="282">
                //////////////////////// PROTECTED ///////////////////////////////                
            </comment>
            <comment line="457">
                This is the byte array containing the encoding.                
            </comment>
            <comment line="462">
                This is the index of the first byte of the encoding.
                 It is initialized to &lt;CODE&gt;bytes.length&lt;/CODE&gt; and decrease each time
                 an value is put in the encoder.                
            </comment>
            <comment line="469">
                This is the stack where end of sequences are kept.
                 A value is computed and pushed in it each time the &lt;CODE&gt;openSequence&lt;/CODE&gt; method
                 is invoked.
                 A value is pulled and checked each time the &lt;CODE&gt;closeSequence&lt;/CODE&gt; method is called.                
            </comment>
            <javadoc line="30">
                The &lt;CODE&gt;BerEncoder&lt;/CODE&gt; class is used for encoding data using BER.
                  A &lt;CODE&gt;BerEncoder&lt;/CODE&gt; needs to be set up with a byte buffer. The encoded
                  data are stored in this byte buffer.
                  &lt;P&gt;
                  NOTE : the buffer is filled from end to start. This means the caller
                  needs to encode its data in the reverse order.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="48">
                Constructs a new encoder and attaches it to the specified byte string.                
                <param>
                    b The byte string containing the encoded data.                    
                </param>
            </javadoc>
            <method name="BerEncoder" type="constructor" line="54">
                <params>
                    <param name="b" type="byte"/>
                </params>
            </method>
            <javadoc line="61">
                Trim the encoding data and returns the length of the encoding.
                  The encoder does backward encoding : so the bytes buffer is
                  filled from end to start. The encoded data must be shift before
                  the buffer can be used. This is the purpose of the &lt;CODE&gt;trim&lt;/CODE&gt; method.
                  After a call to the &lt;CODE&gt;trim&lt;/CODE&gt; method, the encoder is reinitialized and &lt;CODE&gt;putXXX&lt;/CODE&gt;
                  overwrite any existing encoded data.                
                <return>
                    The length of the encoded data.                    
                </return>
            </javadoc>
            <method name="trim" type="int" line="74">
                <comment line="78">
                    for (int i = start ; i &lt; bytes.length ; i++) {
                      bytes[i-start] = bytes[i] ;
                     }                    
                </comment>
                <declaration name="result" type="int" line="75"/>
            </method>
            <javadoc line="89">
                Put an integer.                
                <param>
                    v The integer to encode.                    
                </param>
            </javadoc>
            <method name="putInteger" type="void" line="95">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <javadoc line="100">
                Put an integer with the specified tag.                
                <param>
                    v The integer to encode.                    
                </param>
                <param>
                    tag The tag to encode.                    
                </param>
            </javadoc>
            <method name="putInteger" type="void" line="107">
                <params>
                    <param name="v" type="int"/>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <javadoc line="114">
                Put an integer expressed as a long.                
                <param>
                    v The long to encode.                    
                </param>
            </javadoc>
            <method name="putInteger" type="void" line="120">
                <params>
                    <param name="v" type="long"/>
                </params>
            </method>
            <javadoc line="125">
                Put an integer expressed as a long with the specified tag.                
                <param>
                    v The long to encode                    
                </param>
                <param>
                    tag The tag to encode.                    
                </param>
            </javadoc>
            <method name="putInteger" type="void" line="132">
                <params>
                    <param name="v" type="long"/>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <javadoc line="139">
                Put an octet string.                
                <param>
                    s The bytes to encode                    
                </param>
            </javadoc>
            <method name="putOctetString" type="void" line="145">
                <params>
                    <param name="s" type="byte[]"/>
                </params>
            </method>
            <javadoc line="150">
                Put an octet string with a specified tag.                
                <param>
                    s The bytes to encode                    
                </param>
                <param>
                    tag The tag to encode.                    
                </param>
            </javadoc>
            <method name="putOctetString" type="void" line="157">
                <params>
                    <param name="s" type="byte[]"/>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <javadoc line="163">
                Put an object identifier.                
                <param>
                    s The oid to encode.                    
                </param>
            </javadoc>
            <method name="putOid" type="void" line="169">
                <params>
                    <param name="s" type="long[]"/>
                </params>
            </method>
            <javadoc line="174">
                Put an object identifier with a specified tag.                
                <param>
                    s The integer to encode.                    
                </param>
                <param>
                    tag The tag to encode.                    
                </param>
            </javadoc>
            <method name="putOid" type="void" line="181">
                <params>
                    <param name="s" type="long[]"/>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <javadoc line="187">
                Put a &lt;CODE&gt;NULL&lt;/CODE&gt; value.                
            </javadoc>
            <method name="putNull" type="void" line="191"/>
            <javadoc line="196">
                Put a &lt;CODE&gt;NULL&lt;/CODE&gt; value with a specified tag.                
                <param>
                    tag The tag to encode.                    
                </param>
            </javadoc>
            <method name="putNull" type="void" line="202">
                <params>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <javadoc line="209">
                Put an &lt;CODE&gt;ANY&lt;/CODE&gt; value. In fact, this method does not encode anything.
                  It simply copies the specified bytes into the encoding.                
                <param>
                    s The encoding of the <CODE>ANY</CODE> value.                    
                </param>
            </javadoc>
            <method name="putAny" type="void" line="216">
                <params>
                    <param name="s" type="byte[]"/>
                </params>
            </method>
            <javadoc line="221">
                Put an &lt;CODE&gt;ANY&lt;/CODE&gt; value. Only the first &lt;CODE&gt;byteCount&lt;/CODE&gt; are considered.                
                <param>
                    s The encoding of the <CODE>ANY</CODE> value.                    
                </param>
                <param>
                    byteCount The number of bytes of the encoding.                    
                </param>
            </javadoc>
            <method name="putAny" type="void" line="228">
                <params>
                    <param name="s" type="byte[]"/>
                    <param name="byteCount" type="int"/>
                </params>
                <comment line="232">
                    for (int i = byteCount - 1 ; i &gt;= 0 ; i--) {
                          bytes[--start] = s[i] ;
                        }                    
                </comment>
            </method>
            <javadoc line="237">
                Open a sequence.
                  The encoder push the current position on its stack.                
            </javadoc>
            <method name="openSequence" type="void" line="242"/>
            <javadoc line="247">
                Close a sequence.
                  The decode pull the stack to know the end of the current sequence.                
            </javadoc>
            <method name="closeSequence" type="void" line="252"/>
            <javadoc line="257">
                Close a sequence with the specified tag.                
            </javadoc>
            <method name="closeSequence" type="void" line="261">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="end" type="int" line="262"/>
            </method>
            <declaration name="BooleanTag" type="int" line="271"/>
            <declaration name="IntegerTag" type="int" line="272"/>
            <declaration name="OctetStringTag" type="int" line="273"/>
            <declaration name="NullTag" type="int" line="274"/>
            <declaration name="OidTag" type="int" line="275"/>
            <declaration name="SequenceTag" type="int" line="276"/>
            <javadoc line="285">
                Put a tag and move the current position backward.                
                <param>
                    tag The tag to encode.                    
                </param>
            </javadoc>
            <method name="putTag" type="void" line="291">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <scope line="292"/>
                <scope line="295">
                    <scope line="296"/>
                </scope>
            </method>
            <javadoc line="304">
                Put a length and move the current position backward.                
                <param>
                    length The length to encode.                    
                </param>
            </javadoc>
            <method name="putLength" type="void" line="310">
                <params>
                    <param name="length" type="int"/>
                </params>
                <scope line="311"/>
                <scope line="314"/>
                <scope line="317"/>
                <scope line="321"/>
                <scope line="326"/>
                <scope line="332"/>
            </method>
            <javadoc line="342">
                Put an integer value and move the current position backward.                
                <param>
                    v The integer to encode.                    
                </param>
            </javadoc>
            <method name="putIntegerValue" type="void" line="348">
                <params>
                    <param name="v" type="int"/>
                </params>
                <declaration name="end" type="int" line="349"/>
                <declaration name="mask" type="int" line="350"/>
                <declaration name="byteNeeded" type="int" line="351"/>
                <scope line="352">
                    <scope line="353"/>
                </scope>
                <scope line="358">
                    <scope line="359"/>
                </scope>
                <scope line="364"/>
            </method>
            <javadoc line="372">
                Put an integer value expressed as a long.                
                <param>
                    v The integer to encode.                    
                </param>
            </javadoc>
            <method name="putIntegerValue" type="void" line="378">
                <params>
                    <param name="v" type="long"/>
                </params>
                <declaration name="end" type="int" line="379"/>
                <declaration name="mask" type="long" line="380"/>
                <declaration name="byteNeeded" type="int" line="381"/>
                <scope line="382">
                    <scope line="383"/>
                </scope>
                <scope line="388">
                    <scope line="389"/>
                </scope>
                <scope line="394"/>
            </method>
            <javadoc line="402">
                Put a byte string and move the current position backward.                
                <param>
                    s The byte string to encode.                    
                </param>
            </javadoc>
            <method name="putStringValue" type="void" line="408">
                <params>
                    <param name="s" type="byte[]"/>
                </params>
                <comment line="413">
                    for (int i = s.length - 1 ; i &gt;= 0 ; i--) {
                       bytes[--start] = s[i] ;
                     }                    
                </comment>
                <declaration name="datalen" type="int" line="409"/>
            </method>
            <javadoc line="420">
                Put an oid and move the current position backward.                
                <param>
                    s The oid to encode.                    
                </param>
            </javadoc>
            <method name="putOidValue" type="void" line="426">
                <params>
                    <param name="s" type="long[]"/>
                </params>
                <comment line="431">
                    bugId 4641746: 0, 1, and 2 are legal values.                    
                </comment>
                <declaration name="end" type="int" line="427"/>
                <declaration name="slength" type="int" line="428"/>
                <scope line="431"/>
                <scope line="434">
                    <declaration name="c" type="long" line="435"/>
                    <scope line="436"/>
                    <scope line="439"/>
                    <scope line="442">
                        <scope line="445"/>
                    </scope>
                </scope>
            </method>
            <declaration name="bytes" type="byte" line="459"/>
            <declaration name="start" type="int" line="466"/>
            <declaration name="stackBuf" type="int" line="474"/>
            <declaration name="stackTop" type="int" line="475"/>
        </class>
    </source>