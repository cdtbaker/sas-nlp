<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.internal">
        <import package="java.net.InetAddress"/>
        <import package="com.sun.jmx.snmp.SnmpSecurityException"/>
        <import package="com.sun.jmx.snmp.SnmpTooBigException"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.SnmpPdu"/>
        <import package="com.sun.jmx.snmp.SnmpMsg"/>
        <import package="com.sun.jmx.snmp.internal.SnmpSecurityCache"/>
        <import package="com.sun.jmx.snmp.SnmpUnknownSecModelException"/>
        <import package="com.sun.jmx.snmp.SnmpBadSecurityLevelException"/>
        <interface name="SnmpOutgoingRequest">
            <javadoc line="39">
                &lt;P&gt; An &lt;CODE&gt;SnmpOutgoingRequest&lt;/CODE&gt; handles the marshalling of the message to send.&lt;/P&gt;
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getSecurityCache" type="SnmpSecurityCache" line="47"/>
            <javadoc line="47">
                Returns the cached security data used when marshalling the call as a secure one.                
                <return>
                    The cached data.                    
                </return>
            </javadoc>
            <method name="encodeMessage" type="int" line="52"/>
            <javadoc line="52">
                Encodes the message to send and puts the result in the specified byte array.                
                <param>
                    outputBytes An array to receive the resulting encoding.                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException If the result does not fit
                      into the specified array.                    
                </exception>
            </javadoc>
            <method name="encodeSnmpPdu" type="SnmpMsg" line="64"/>
            <javadoc line="64">
                Initializes the message to send with the passed Pdu.
                  &lt;P&gt;
                  If the encoding length exceeds &lt;CODE&gt;maxDataLength&lt;/CODE&gt;,
                  the method throws an exception.&lt;/P&gt;                
                <param>
                    p The PDU to be encoded.                    
                </param>
                <param>
                    maxDataLength The maximum length permitted for the data field.                    
                </param>
                <exception>
                    SnmpStatusException If the specified PDU &lt;CODE&gt;p&lt;/CODE&gt; is
                      not valid.                    
                </exception>
                <exception>
                    SnmpTooBigException If the resulting encoding does not fit
                      into &lt;CODE&gt;maxDataLength&lt;/CODE&gt; bytes.                    
                </exception>
                <exception>
                    ArrayIndexOutOfBoundsException If the encoding exceeds
                      &lt;CODE&gt;maxDataLength&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="printMessage" type="String" line="83"/>
            <javadoc line="83">
                Returns a stringified form of the message to send.                
                <return>
                    The message state string.                    
                </return>
            </javadoc>
        </interface>
    </source>