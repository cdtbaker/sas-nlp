<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="com.sun.jmx.defaults.JmxProperties.MBEANSERVER_LOGGER"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.Map"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.OperationsException"/>
        <import package="javax.management.ReflectionException"/>
        <import package="javax.management.RuntimeErrorException"/>
        <import package="javax.management.RuntimeMBeanException"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <import package="sun.reflect.misc.ReflectUtil"/>
        <class name="MBeanInstantiator" line="20">
            <javadoc line="20">
                Implements the MBeanInstantiator interface. Provides methods for
                  instantiating objects, finding the class given its name and using
                  different class loaders, deserializing objects in the context of a
                  given class loader.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="clr" type="ModifiableClassLoaderRepository" line="28"/>
            <method name="MBeanInstantiator" type="constructor" line="29">
                <params>
                    <param name="clr" type="ModifiableClassLoaderRepository"/>
                </params>
            </method>
            <javadoc line="32">
                This methods tests if the MBean class makes it possible to
                  instantiate an MBean of this class in the MBeanServer.
                  e.g. it must have a public constructor, be a concrete class...                
            </javadoc>
            <method name="testCreation" type="void" line="37">
                <params>
                    <param name="c" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="40">
                Loads the class with the specified name using this object&apos;s
                  Default Loader Repository.                
            </javadoc>
            <method name="findClassWithDefaultLoaderRepository" type="Class&lt;?&gt;" line="44">
                <params>
                    <param name="className" type="String"/>
                </params>
                <declaration name="theClass" type="Class&amp;lt;?&amp;gt;" line="45"/>
                <scope line="46"/>
                <scope line="49"/>
                <scope line="53"/>
            </method>
            <javadoc line="58">
                Gets the class for the specified class name using the MBean
                  Interceptor&apos;s classloader                
            </javadoc>
            <method name="findClass" type="Class&lt;?&gt;" line="62">
                <params>
                    <param name="className" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="65">
                Gets the class for the specified class name using the specified
                  class loader                
            </javadoc>
            <method name="findClass" type="Class&lt;?&gt;" line="69">
                <params>
                    <param name="className" type="String"/>
                    <param name="aLoader" type="ObjectName"/>
                </params>
                <declaration name="loader" type="ClassLoader" line="71"/>
                <scope line="72"/>
                <scope line="75"/>
            </method>
            <javadoc line="80">
                Return an array of Class corresponding to the given signature, using
                  the specified class loader.                
            </javadoc>
            <method name="findSignatureClasses" type="Class&lt;?&gt;[]" line="84">
                <params>
                    <param name="signature" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="aLoader" type="ClassLoader" line="86"/>
                <declaration name="length" type="int" line="87"/>
                <declaration name="tab" type="Class&amp;lt;?&amp;gt;" line="88"/>
                <scope line="90">
                    <scope line="91">
                        <declaration name="primCla" type="Class&amp;lt;?&amp;gt;" line="92"/>
                        <scope line="93"/>
                        <scope line="97"/>
                        <scope line="100"/>
                    </scope>
                </scope>
                <scope line="105">
                    <scope line="106"/>
                </scope>
                <scope line="111">
                    <scope line="112"/>
                </scope>
            </method>
            <javadoc line="119">
                Instantiates an object given its class, using its empty constructor.
                  The call returns a reference to the newly created object.                
            </javadoc>
            <method name="instantiate" type="Object" line="123">
                <params>
                    <param name="theClass" type="Class&lt;?&gt;"/>
                </params>
                <declaration name="moi" type="Object" line="124"/>
                <declaration name="cons" type="Constructor&amp;lt;?&amp;gt;" line="125"/>
                <scope line="126"/>
                <scope line="129"/>
                <scope line="133">
                    <declaration name="t" type="Throwable" line="134"/>
                    <scope line="135"/>
                    <scope line="138"/>
                    <scope line="141"/>
                </scope>
                <scope line="145"/>
                <scope line="148"/>
                <scope line="151"/>
                <scope line="154"/>
            </method>
            <javadoc line="159">
                Instantiates an object given its class, the parameters and
                  signature of its constructor The call returns a reference to
                  the newly created object.                
            </javadoc>
            <method name="instantiate" type="Object" line="164">
                <params>
                    <param name="theClass" type="Class&lt;?&gt;"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="tab" type="Class&amp;lt;?&amp;gt;[]" line="165"/>
                <declaration name="moi" type="Object" line="166"/>
                <scope line="167">
                    <declaration name="aLoader" type="ClassLoader" line="168"/>
                </scope>
                <scope line="171"/>
                <declaration name="cons" type="Constructor&amp;lt;?&amp;gt;" line="174"/>
                <scope line="175"/>
                <scope line="178"/>
                <scope line="182"/>
                <scope line="185"/>
                <scope line="188"/>
                <scope line="191">
                    <declaration name="th" type="Throwable" line="192"/>
                    <scope line="193"/>
                    <scope line="196"/>
                    <scope line="199"/>
                </scope>
            </method>
            <javadoc line="205">
                De-serializes a byte array in the context of a classloader.                
                <param>
                    loader the classloader to use for de-serialization                    
                </param>
                <param>
                    data The byte array to be de-sererialized.                    
                </param>
                <return>
                    The de-serialized object stream.                    
                </return>
                <exception>
                    OperationsException Any of the usual Input/Output related
                      exceptions.                    
                </exception>
            </javadoc>
            <method name="deserialize" type="ObjectInputStream" line="213">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="data" type="byte[]"/>
                </params>
                <scope line="214"/>
                <scope line="217"/>
                <declaration name="bIn" type="ByteArrayInputStream" line="220"/>
                <declaration name="objIn" type="ObjectInputStream" line="221"/>
                <scope line="223"/>
                <scope line="226"/>
            </method>
            <javadoc line="231">
                De-serializes a byte array in the context of a given MBean class loader.
                  &lt;P&gt;The class loader is the one that loaded the class with name
                  &quot;className&quot;.
                  &lt;P&gt;The name of the class loader to be used for loading the specified
                  class is specified. If null, a default one has to be provided (for a
                  MBean Server, its own class loader will be used).                
                <param>
                    className The name of the class whose class loader should
                      be used for the de-serialization.                    
                </param>
                <param>
                    data The byte array to be de-sererialized.                    
                </param>
                <param>
                    loaderName The name of the class loader to be used for loading
                      the specified class. If null, a default one has to be provided (for a
                      MBean Server, its own class loader will be used).                    
                </param>
                <return>
                    The de-serialized object stream.                    
                </return>
                <exception>
                    InstanceNotFoundException The specified class loader MBean is
                      not found.                    
                </exception>
                <exception>
                    OperationsException Any of the usual Input/Output related
                      exceptions.                    
                </exception>
                <exception>
                    ReflectionException The specified class could not be loaded
                      by the specified class loader.                    
                </exception>
            </javadoc>
            <method name="deserialize" type="ObjectInputStream" line="252">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="data" type="byte[]"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <scope line="253"/>
                <scope line="256"/>
                <scope line="259"/>
                <declaration name="theClass" type="Class&amp;lt;?&amp;gt;" line="262"/>
                <scope line="263"/>
                <scope line="266">
                    <scope line="267">
                        <declaration name="instance" type="ClassLoader" line="268"/>
                    </scope>
                    <scope line="273"/>
                </scope>
                <declaration name="bIn" type="ByteArrayInputStream" line="277"/>
                <declaration name="objIn" type="ObjectInputStream" line="278"/>
                <scope line="280"/>
                <scope line="283"/>
            </method>
            <javadoc line="288">
                Instantiates an object using the list of all class loaders registered
                  in the MBean Interceptor
                  (using its {@link javax.management.loading.ClassLoaderRepository}).
                  &lt;P&gt;The object&apos;s class should have a public constructor.
                  &lt;P&gt;It returns a reference to the newly created object.
                  &lt;P&gt;The newly created object is not registered in the MBean Interceptor.                
                <param>
                    className The class name of the object to be instantiated.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      &lt;CODE&gt;java.lang.ClassNotFoundException&lt;/CODE&gt; or the
                      &lt;CODE&gt;java.lang.Exception&lt;/CODE&gt; that occurred when trying to invoke the
                      object&apos;s constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has thrown an
                      exception                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      &lt;CODE&gt;java.lang.IllegalArgumentException&lt;/CODE&gt;: the className passed in
                      parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="307">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <javadoc line="310">
                Instantiates an object using the class Loader specified by its
                  &lt;CODE&gt;ObjectName&lt;/CODE&gt;.
                  &lt;P&gt;If the loader name is null, a default one has to be provided (for a
                  MBean Server, the ClassLoader that loaded it will be used).
                  &lt;P&gt;The object&apos;s class should have a public constructor.
                  &lt;P&gt;It returns a reference to the newly created object.
                  &lt;P&gt;The newly created object is not registered in the MBean Interceptor.                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      &lt;CODE&gt;java.lang.ClassNotFoundException&lt;/CODE&gt; or the
                      &lt;CODE&gt;java.lang.Exception&lt;/CODE&gt; that occurred when trying to invoke the
                      object&apos;s constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has thrown an
                      exception.                    
                </exception>
                <exception>
                    InstanceNotFoundException The specified class loader is not
                      registered in the MBeanServerInterceptor.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      &lt;CODE&gt;java.lang.IllegalArgumentException&lt;/CODE&gt;: the className passed in
                      parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="333">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="336">
                Instantiates an object using the list of all class loaders registered
                  in the MBean server
                  (using its {@link javax.management.loading.ClassLoaderRepository}).
                  &lt;P&gt;The object&apos;s class should have a public constructor.
                  &lt;P&gt;The call returns a reference to the newly created object.
                  &lt;P&gt;The newly created object is not registered in the MBean Interceptor.                
                <param>
                    className The class name of the object to be instantiated.                    
                </param>
                <param>
                    params An array containing the parameters of the constructor to
                      be invoked.                    
                </param>
                <param>
                    signature An array containing the signature of the constructor to
                      be invoked.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      &lt;CODE&gt;java.lang.ClassNotFoundException&lt;/CODE&gt; or the
                      &lt;CODE&gt;java.lang.Exception&lt;/CODE&gt; that occurred when trying to invoke the
                      object&apos;s constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has thrown an
                      exception                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      &lt;CODE&gt;java.lang.IllegalArgumentException&lt;/CODE&gt;: the className passed in
                      parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="359">
                <params>
                    <param name="className" type="String"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="theClass" type="Class&amp;lt;?&amp;gt;" line="360"/>
            </method>
            <javadoc line="363">
                Instantiates an object. The class loader to be used is identified by its
                  object name.
                  &lt;P&gt;If the object name of the loader is null, a default has to be
                  provided (for example, for a MBean Server, the ClassLoader that loaded
                  it will be used).
                  &lt;P&gt;The object&apos;s class should have a public constructor.
                  &lt;P&gt;The call returns a reference to the newly created object.
                  &lt;P&gt;The newly created object is not registered in the MBean server.                
                <param>
                    className The class name of the object to be instantiated.                    
                </param>
                <param>
                    params An array containing the parameters of the constructor to
                      be invoked.                    
                </param>
                <param>
                    signature An array containing the signature of the constructor to
                      be invoked.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      &lt;CODE&gt;java.lang.ClassNotFoundException&lt;/CODE&gt; or the
                      &lt;CODE&gt;java.lang.Exception&lt;/CODE&gt; that occurred when trying to invoke the
                      object&apos;s constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has thrown an
                      exception                    
                </exception>
                <exception>
                    InstanceNotFoundException The specified class loader is not
                      registered in the MBean Interceptor.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      &lt;CODE&gt;java.lang.IllegalArgumentException&lt;/CODE&gt;: the className passed in
                      parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="391">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="theClass" type="Class&amp;lt;?&amp;gt;" line="392"/>
                <scope line="393"/>
                <scope line="396"/>
            </method>
            <javadoc line="401">
                Return the Default Loader Repository used by this instantiator object.                
            </javadoc>
            <method name="getClassLoaderRepository" type="ModifiableClassLoaderRepository" line="404"/>
            <javadoc line="407">
                Load a class with the specified loader, or with this object
                  class loader if the specified loader is null.                
            </javadoc>
            <method name="loadClass" type="Class&lt;?&gt;" line="411">
                <params>
                    <param name="className" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="theClass" type="Class&amp;lt;?&amp;gt;" line="412"/>
                <scope line="413"/>
                <scope line="416">
                    <scope line="418"/>
                    <scope line="421"/>
                </scope>
                <scope line="425"/>
            </method>
            <javadoc line="430">
                Load the classes specified in the signature with the given loader,
                  or with this object class loader.                
            </javadoc>
            <method name="loadSignatureClasses" type="Class&lt;?&gt;[]" line="434">
                <params>
                    <param name="signature" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="aLoader" type="ClassLoader" line="436"/>
                <declaration name="length" type="int" line="437"/>
                <declaration name="tab" type="Class&amp;lt;?&amp;gt;" line="438"/>
                <scope line="440">
                    <scope line="441">
                        <declaration name="primCla" type="Class&amp;lt;?&amp;gt;" line="442"/>
                        <scope line="443"/>
                    </scope>
                </scope>
                <scope line="450">
                    <scope line="451"/>
                </scope>
                <scope line="456">
                    <scope line="457"/>
                </scope>
            </method>
            <method name="findConstructor" type="Constructor&lt;?&gt;" line="464">
                <params>
                    <param name="c" type="Class&lt;?&gt;"/>
                    <param name="params" type="Class&lt;?&gt;[]"/>
                </params>
                <scope line="465"/>
                <scope line="468"/>
            </method>
            <declaration name="primitiveClasses" type="Map&amp;lt;String,Class&amp;lt;?&amp;gt;&amp;gt;" line="472"/>
            <scope line="473"/>
        </class>
    </source>