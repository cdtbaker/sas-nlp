<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="com.sun.jmx.defaults.JmxProperties.MBEANSERVER_LOGGER"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.Map"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.OperationsException"/>
        <import package="javax.management.ReflectionException"/>
        <import package="javax.management.RuntimeErrorException"/>
        <import package="javax.management.RuntimeMBeanException"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <import package="sun.reflect.misc.ReflectUtil"/>
        <class name="MBeanInstantiator" line="50">
            <comment line="62">
                private MetaData meta = null;                
            </comment>
            <javadoc line="50">
                Implements the MBeanInstantiator interface. Provides methods for
                  instantiating objects, finding the class given its name and using
                  different class loaders, deserializing objects in the context of a
                  given class loader.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="clr" type="ModifiableClassLoaderRepository" line="60"/>
            <method name="MBeanInstantiator" type="constructor" line="63">
                <params>
                    <param name="clr" type="ModifiableClassLoaderRepository"/>
                </params>
            </method>
            <javadoc line="68">
                This methods tests if the MBean class makes it possible to
                  instantiate an MBean of this class in the MBeanServer.
                  e.g. it must have a public constructor, be a concrete class...                
            </javadoc>
            <method name="testCreation" type="void" line="73">
                <params>
                    <param name="c" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="77">
                Loads the class with the specified name using this object&apos;s
                  Default Loader Repository.                
            </javadoc>
            <method name="findClassWithDefaultLoaderRepository" type="Class<?>" line="82">
                <params>
                    <param name="className" type="String"/>
                </params>
                <declaration name="theClass" type="Class&lt;?&gt;" line="84"/>
                <scope line="85"/>
                <scope line="91"/>
                <scope line="95"/>
            </method>
            <javadoc line="104">
                Gets the class for the specified class name using the MBean
                  Interceptor&apos;s classloader                
            </javadoc>
            <method name="findClass" type="Class<?>" line="109">
                <params>
                    <param name="className" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="114">
                Gets the class for the specified class name using the specified
                  class loader                
            </javadoc>
            <method name="findClass" type="Class<?>" line="119">
                <params>
                    <param name="className" type="String"/>
                    <param name="aLoader" type="ObjectName"/>
                </params>
                <comment line="126">
                    Retrieve the class loader from the repository                    
                </comment>
                <declaration name="loader" type="ClassLoader" line="126"/>
                <scope line="127"/>
                <scope line="131"/>
            </method>
            <javadoc line="139">
                Return an array of Class corresponding to the given signature, using
                  the specified class loader.                
            </javadoc>
            <method name="findSignatureClasses" type="Class<?>[]" line="145">
                <params>
                    <param name="signature" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <comment line="156">
                    Start handling primitive types (int. boolean and so
                     forth)                    
                </comment>
                <comment line="166">
                    Ok we do not have a primitive type ! We need to build
                     the signature of the method                    
                </comment>
                <comment line="170">
                    We need to load the class through the class
                     loader of the target object.                    
                </comment>
                <comment line="175">
                    Load through the default class loader                    
                </comment>
                <declaration name="aLoader" type="ClassLoader" line="148"/>
                <declaration name="length" type="int" line="149"/>
                <declaration name="tab" type="Class&lt;?&gt;" line="150"/>
                <scope line="153">
                    <scope line="154">
                        <declaration name="primCla" type="Class&lt;?&gt;" line="159"/>
                        <scope line="160"/>
                        <scope line="168"/>
                        <scope line="173"/>
                    </scope>
                </scope>
                <scope line="180">
                    <scope line="181"/>
                </scope>
                <scope line="189">
                    <scope line="190"/>
                </scope>
            </method>
            <javadoc line="202">
                Instantiates an object given its class, using its empty constructor.
                  The call returns a reference to the newly created object.                
            </javadoc>
            <method name="instantiate" type="Object" line="207">
                <params>
                    <param name="theClass" type="Class<?>"/>
                </params>
                <comment line="212">
                    ------------------------------
                     ------------------------------                    
                </comment>
                <comment line="219">
                    Instantiate the new object                    
                </comment>
                <comment line="224">
                    Wrap the exception.                    
                </comment>
                <declaration name="moi" type="Object" line="208"/>
                <declaration name="cons" type="Constructor&lt;?&gt;" line="213"/>
                <scope line="214"/>
                <scope line="219"/>
                <scope line="222">
                    <declaration name="t" type="Throwable" line="224"/>
                    <scope line="225"/>
                    <scope line="228"/>
                    <scope line="231"/>
                </scope>
                <scope line="235"/>
                <scope line="239"/>
                <scope line="242"/>
                <scope line="245"/>
            </method>
            <javadoc line="255">
                Instantiates an object given its class, the parameters and
                  signature of its constructor The call returns a reference to
                  the newly created object.                
            </javadoc>
            <method name="instantiate" type="Object" line="262">
                <params>
                    <param name="theClass" type="Class<?>"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <comment line="264">
                    Instantiate the new object                    
                </comment>
                <comment line="266">
                    ------------------------------
                     ------------------------------                    
                </comment>
                <comment line="271">
                    Build the signature of the method                    
                </comment>
                <comment line="274">
                    Build the signature of the method                    
                </comment>
                <comment line="280">
                    Exception IllegalArgumentException raised in Jdk1.1.8                    
                </comment>
                <comment line="286">
                    Query the metadata service to get the right constructor                    
                </comment>
                <comment line="311">
                    Wrap the exception.                    
                </comment>
                <declaration name="tab" type="Class&lt;?&gt;[]" line="267"/>
                <declaration name="moi" type="Object" line="268"/>
                <scope line="269">
                    <declaration name="aLoader" type="ClassLoader" line="272"/>
                </scope>
                <scope line="280"/>
                <declaration name="cons" type="Constructor&lt;?&gt;" line="286"/>
                <scope line="288"/>
                <scope line="292"/>
                <scope line="296"/>
                <scope line="301"/>
                <scope line="305"/>
                <scope line="309">
                    <declaration name="th" type="Throwable" line="311"/>
                    <scope line="312"/>
                    <scope line="315"/>
                    <scope line="318"/>
                </scope>
            </method>
            <javadoc line="326">
                De-serializes a byte array in the context of a classloader.                
                <param>
                    loader the classloader to use for de-serialization                    
                </param>
                <param>
                    data The byte array to be de-sererialized.                    
                </param>
                <return>
                    The de-serialized object stream.                    
                </return>
                <exception>
                    OperationsException Any of the usual Input/Output related
                      exceptions.                    
                </exception>
            </javadoc>
            <method name="deserialize" type="ObjectInputStream" line="338">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="data" type="byte[]"/>
                </params>
                <comment line="341">
                    Check parameter validity                    
                </comment>
                <comment line="351">
                    Object deserialization                    
                </comment>
                <scope line="341"/>
                <scope line="345"/>
                <declaration name="bIn" type="ByteArrayInputStream" line="351"/>
                <declaration name="objIn" type="ObjectInputStream" line="352"/>
                <scope line="355"/>
                <scope line="357"/>
            </method>
            <javadoc line="365">
                De-serializes a byte array in the context of a given MBean class loader.
                  &lt;P&gt;The class loader is the one that loaded the class with name
                  &quot;className&quot;.
                  &lt;P&gt;The name of the class loader to be used for loading the specified
                  class is specified. If null, a default one has to be provided (for a
                  MBean Server, its own class loader will be used).                
                <param>
                    className The name of the class whose class loader should
                      be used for the de-serialization.                    
                </param>
                <param>
                    data The byte array to be de-sererialized.                    
                </param>
                <param>
                    loaderName The name of the class loader to be used for loading
                      the specified class. If null, a default one has to be provided (for a
                      MBean Server, its own class loader will be used).                    
                </param>
                <return>
                    The de-serialized object stream.                    
                </return>
                <exception>
                    InstanceNotFoundException The specified class loader MBean is
                      not found.                    
                </exception>
                <exception>
                    OperationsException Any of the usual Input/Output related
                      exceptions.                    
                </exception>
                <exception>
                    ReflectionException The specified class could not be loaded
                      by the specified class loader.                    
                </exception>
            </javadoc>
            <method name="deserialize" type="ObjectInputStream" line="395">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="data" type="byte[]"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <comment line="398">
                    Check parameter validity                    
                </comment>
                <comment line="413">
                    Load the class using the agent class loader                    
                </comment>
                <comment line="417">
                    Get the class loader MBean                    
                </comment>
                <comment line="434">
                    Object deserialization                    
                </comment>
                <scope line="398"/>
                <scope line="402"/>
                <scope line="406"/>
                <declaration name="theClass" type="Class&lt;?&gt;" line="410"/>
                <scope line="411"/>
                <scope line="415">
                    <scope line="417">
                        <declaration name="instance" type="ClassLoader" line="418"/>
                    </scope>
                    <scope line="426"/>
                </scope>
                <declaration name="bIn" type="ByteArrayInputStream" line="434"/>
                <declaration name="objIn" type="ObjectInputStream" line="435"/>
                <scope line="438"/>
                <scope line="441"/>
            </method>
            <javadoc line="450">
                Instantiates an object using the list of all class loaders registered
                  in the MBean Interceptor
                  (using its {@link javax.management.loading.ClassLoaderRepository}).
                  &lt;P&gt;The object&apos;s class should have a public constructor.
                  &lt;P&gt;It returns a reference to the newly created object.
                  &lt;P&gt;The newly created object is not registered in the MBean Interceptor.                
                <param>
                    className The class name of the object to be instantiated.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      &lt;CODE&gt;java.lang.ClassNotFoundException&lt;/CODE&gt; or the
                      &lt;CODE&gt;java.lang.Exception&lt;/CODE&gt; that occurred when trying to invoke the
                      object&apos;s constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has thrown an
                      exception                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      &lt;CODE&gt;java.lang.IllegalArgumentException&lt;/CODE&gt;: the className passed in
                      parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="474">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <javadoc line="481">
                Instantiates an object using the class Loader specified by its
                  &lt;CODE&gt;ObjectName&lt;/CODE&gt;.
                  &lt;P&gt;If the loader name is null, a default one has to be provided (for a
                  MBean Server, the ClassLoader that loaded it will be used).
                  &lt;P&gt;The object&apos;s class should have a public constructor.
                  &lt;P&gt;It returns a reference to the newly created object.
                  &lt;P&gt;The newly created object is not registered in the MBean Interceptor.                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      &lt;CODE&gt;java.lang.ClassNotFoundException&lt;/CODE&gt; or the
                      &lt;CODE&gt;java.lang.Exception&lt;/CODE&gt; that occurred when trying to invoke the
                      object&apos;s constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has thrown an
                      exception.                    
                </exception>
                <exception>
                    InstanceNotFoundException The specified class loader is not
                      registered in the MBeanServerInterceptor.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      &lt;CODE&gt;java.lang.IllegalArgumentException&lt;/CODE&gt;: the className passed in
                      parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="510">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="517">
                Instantiates an object using the list of all class loaders registered
                  in the MBean server
                  (using its {@link javax.management.loading.ClassLoaderRepository}).
                  &lt;P&gt;The object&apos;s class should have a public constructor.
                  &lt;P&gt;The call returns a reference to the newly created object.
                  &lt;P&gt;The newly created object is not registered in the MBean Interceptor.                
                <param>
                    className The class name of the object to be instantiated.                    
                </param>
                <param>
                    params An array containing the parameters of the constructor to
                      be invoked.                    
                </param>
                <param>
                    signature An array containing the signature of the constructor to
                      be invoked.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      &lt;CODE&gt;java.lang.ClassNotFoundException&lt;/CODE&gt; or the
                      &lt;CODE&gt;java.lang.Exception&lt;/CODE&gt; that occurred when trying to invoke the
                      object&apos;s constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has thrown an
                      exception                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      &lt;CODE&gt;java.lang.IllegalArgumentException&lt;/CODE&gt;: the className passed in
                      parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="548">
                <params>
                    <param name="className" type="String"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="theClass" type="Class&lt;?&gt;" line="550"/>
            </method>
            <javadoc line="556">
                Instantiates an object. The class loader to be used is identified by its
                  object name.
                  &lt;P&gt;If the object name of the loader is null, a default has to be
                  provided (for example, for a MBean Server, the ClassLoader that loaded
                  it will be used).
                  &lt;P&gt;The object&apos;s class should have a public constructor.
                  &lt;P&gt;The call returns a reference to the newly created object.
                  &lt;P&gt;The newly created object is not registered in the MBean server.                
                <param>
                    className The class name of the object to be instantiated.                    
                </param>
                <param>
                    params An array containing the parameters of the constructor to
                      be invoked.                    
                </param>
                <param>
                    signature An array containing the signature of the constructor to
                      be invoked.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      &lt;CODE&gt;java.lang.ClassNotFoundException&lt;/CODE&gt; or the
                      &lt;CODE&gt;java.lang.Exception&lt;/CODE&gt; that occurred when trying to invoke the
                      object&apos;s constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has thrown an
                      exception                    
                </exception>
                <exception>
                    InstanceNotFoundException The specified class loader is not
                      registered in the MBean Interceptor.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      &lt;CODE&gt;java.lang.IllegalArgumentException&lt;/CODE&gt;: the className passed in
                      parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="594">
                <params>
                    <param name="className" type="String"/>
                    <param name="loaderName" type="ObjectName"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <comment line="597">
                    ------------------------------
                     ------------------------------                    
                </comment>
                <declaration name="theClass" type="Class&lt;?&gt;" line="598"/>
                <scope line="600"/>
                <scope line="602"/>
            </method>
            <javadoc line="609">
                Return the Default Loader Repository used by this instantiator object.                
            </javadoc>
            <method name="getClassLoaderRepository" type="ModifiableClassLoaderRepository" line="612"/>
            <javadoc line="616">
                Load a class with the specified loader, or with this object
                  class loader if the specified loader is null.                
            </javadoc>
            <method name="loadClass" type="Class<?>" line="621">
                <params>
                    <param name="className" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="theClass" type="Class&lt;?&gt;" line="623"/>
                <scope line="624"/>
                <scope line="629">
                    <scope line="632"/>
                    <scope line="634"/>
                </scope>
                <scope line="637"/>
            </method>
            <javadoc line="646">
                Load the classes specified in the signature with the given loader,
                  or with this object class loader.                
            </javadoc>
            <method name="loadSignatureClasses" type="Class<?>[]" line="652">
                <params>
                    <param name="signature" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <comment line="664">
                    Start handling primitive types (int. boolean and so
                     forth)                    
                </comment>
                <comment line="674">
                    Ok we do not have a primitive type ! We need to build
                     the signature of the method
                    
                     We need to load the class through the class
                     loader of the target object.                    
                </comment>
                <declaration name="aLoader" type="ClassLoader" line="655"/>
                <declaration name="length" type="int" line="657"/>
                <declaration name="tab" type="Class&lt;?&gt;" line="658"/>
                <scope line="661">
                    <scope line="662">
                        <declaration name="primCla" type="Class&lt;?&gt;" line="667"/>
                        <scope line="668"/>
                    </scope>
                </scope>
                <scope line="681">
                    <scope line="682"/>
                </scope>
                <scope line="690">
                    <scope line="691"/>
                </scope>
            </method>
            <method name="findConstructor" type="Constructor<?>" line="702">
                <params>
                    <param name="c" type="Class<?>"/>
                    <param name="params" type="Class<?>[]"/>
                </params>
                <scope line="703"/>
                <scope line="705"/>
            </method>
            <declaration name="primitiveClasses" type="Map&lt;String,Class&lt;?&gt;&gt;" line="711"/>
            <scope line="712"/>
        </class>
    </source>