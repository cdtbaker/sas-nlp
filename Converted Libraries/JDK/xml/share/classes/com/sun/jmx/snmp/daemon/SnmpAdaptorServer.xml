<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.daemon">
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.logging.Level"/>
        <import package="java.net.DatagramSocket"/>
        <import package="java.net.DatagramPacket"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.SocketException"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InterruptedIOException"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="com.sun.jmx.defaults.JmxProperties.SNMP_ADAPTOR_LOGGER"/>
        <import package="com.sun.jmx.snmp.SnmpIpAddress"/>
        <import package="com.sun.jmx.snmp.SnmpMessage"/>
        <import package="com.sun.jmx.snmp.SnmpOid"/>
        <import package="com.sun.jmx.snmp.SnmpPduFactory"/>
        <import package="com.sun.jmx.snmp.SnmpPduPacket"/>
        <import package="com.sun.jmx.snmp.SnmpPduRequest"/>
        <import package="com.sun.jmx.snmp.SnmpPduTrap"/>
        <import package="com.sun.jmx.snmp.SnmpTimeticks"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpVarBindList"/>
        <import package="com.sun.jmx.snmp.SnmpDefinitions"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.SnmpTooBigException"/>
        <import package="com.sun.jmx.snmp.InetAddressAcl"/>
        <import package="com.sun.jmx.snmp.SnmpPeer"/>
        <import package="com.sun.jmx.snmp.SnmpParameters"/>
        <import package="com.sun.jmx.snmp.SnmpPduFactoryBER"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibAgent"/>
        <import package="com.sun.jmx.snmp.agent.SnmpMibHandler"/>
        <import package="com.sun.jmx.snmp.agent.SnmpUserDataFactory"/>
        <import package="com.sun.jmx.snmp.agent.SnmpErrorHandlerAgent"/>
        <import package="com.sun.jmx.snmp.IPAcl.SnmpAcl"/>
        <import package="com.sun.jmx.snmp.tasks.ThreadService"/>
        <class name="SnmpAdaptorServer" line="41">
            <extends class="CommunicatorServer"/>
            <implements interface="SnmpAdaptorServerMBean"/>
            <implements interface="MBeanRegistration"/>
            <implements interface="SnmpDefinitions"/>
            <implements interface="SnmpMibHandler"/>
            <javadoc line="41">
                Implements an adaptor on top of the SNMP protocol.
                  &lt;P&gt;
                  When this SNMP protocol adaptor is started it creates a datagram socket
                  and is able to receive requests and send traps or inform requests.
                  When it is stopped, the socket is closed and neither requests
                  and nor traps/inform request are processed.
                  &lt;P&gt;
                  The default port number of the socket is 161. This default value can be
                  changed by specifying a port number:
                  &lt;UL&gt;
                  &lt;LI&gt;in the object constructor&lt;/LI&gt;
                  &lt;LI&gt;using the {@link com.sun.jmx.snmp.daemon.CommunicatorServer#setPortsetPort} method before starting the adaptor&lt;/LI&gt;
                  &lt;/UL&gt;
                  The default object name is defined by {@link com.sun.jmx.snmp.ServiceName#DOMAIN com.sun.jmx.snmp.ServiceName.DOMAIN}and {@link com.sun.jmx.snmp.ServiceName#SNMP_ADAPTOR_SERVERcom}.
                  &lt;P&gt;
                  The SNMP protocol adaptor supports versions 1 and 2 of the SNMP protocol
                  in a stateless way: when it receives a v1 request, it replies with a v1
                  response, when it receives a v2 request it replies with a v2 response.
                  &lt;BR&gt;The method {@link #snmpV1Trap snmpV1Trap} sends traps using SNMP v1
                  format.
                  The method {@link #snmpV2Trap snmpV2Trap} sends traps using SNMP v2 format.
                  The method {@link #snmpInformRequest snmpInformRequest} sends inform
                  requests using SNMP v2 format.
                  &lt;P&gt;
                  To receive data packets, the SNMP protocol adaptor uses a buffer
                  which size can be configured using the property &lt;CODE&gt;bufferSize&lt;/CODE&gt;
                  (default value is 1024).
                  Packets which do not fit into the buffer are rejected.
                  Increasing &lt;CODE&gt;bufferSize&lt;/CODE&gt; allows the exchange of bigger packets.
                  However, the underlying networking system may impose a limit on the size
                  of UDP packets.
                  Packets which size exceed this limit will be rejected, no matter what
                  the value of &lt;CODE&gt;bufferSize&lt;/CODE&gt; actually is.
                  &lt;P&gt;
                  An SNMP protocol adaptor may serve several managers concurrently. The
                  number of concurrent managers can be limited using the property
                  &lt;CODE&gt;maxActiveClientCount&lt;/CODE&gt;.
                  &lt;p&gt;
                  The SNMP protocol adaptor specifies a default value (10) for the
                  &lt;CODE&gt;maxActiveClientCount&lt;/CODE&gt; property. When the adaptor is stopped,
                  the active requests are interrupted and an error result is sent to
                  the managers.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="trapPort" type="int" line="88"/>
            <javadoc line="88">
                Port number for sending SNMP traps.
                  &lt;BR&gt;The default value is 162.                
            </javadoc>
            <declaration name="informPort" type="int" line="93"/>
            <javadoc line="93">
                Port number for sending SNMP inform requests.
                  &lt;BR&gt;The default value is 162.                
            </javadoc>
            <declaration name="address" type="InetAddress" line="98"/>
            <javadoc line="98">
                The &lt;CODE&gt;InetAddress&lt;/CODE&gt; used when creating the datagram socket.
                  &lt;BR&gt;It is specified when creating the SNMP protocol adaptor.
                  If not specified, the local host machine is used.                
            </javadoc>
            <declaration name="ipacl" type="Object" line="104"/>
            <javadoc line="104">
                The IP address based ACL used by this SNMP protocol adaptor.                
            </javadoc>
            <declaration name="pduFactory" type="SnmpPduFactory" line="108"/>
            <javadoc line="108">
                The factory object.                
            </javadoc>
            <declaration name="userDataFactory" type="SnmpUserDataFactory" line="112"/>
            <javadoc line="112">
                The user-data factory object.                
            </javadoc>
            <declaration name="authRespEnabled" type="boolean" line="116"/>
            <javadoc line="116">
                Indicates if the SNMP protocol adaptor sends a response in case
                  of authentication failure                
            </javadoc>
            <declaration name="authTrapEnabled" type="boolean" line="121"/>
            <javadoc line="121">
                Indicates if authentication traps are enabled.                
            </javadoc>
            <declaration name="enterpriseOid" type="SnmpOid" line="125"/>
            <javadoc line="125">
                The enterprise OID.
                  &lt;BR&gt;The default value is &quot;1.3.6.1.4.1.42&quot;.                
            </javadoc>
            <declaration name="bufferSize" type="int" line="130"/>
            <javadoc line="130">
                The buffer size of the SNMP protocol adaptor.
                  This buffer size is used for both incoming request and outgoing
                  inform requests.
                  &lt;BR&gt;The default value is 1024.                
            </javadoc>
            <declaration name="startUpTime" type="long" line="137"/>
            <declaration name="socket" type="DatagramSocket" line="138"/>
            <declaration name="trapSocket" type="DatagramSocket" line="139"/>
            <declaration name="informSession" type="SnmpSession" line="140"/>
            <declaration name="packet" type="DatagramPacket" line="141"/>
            <declaration name="mibs" type="Vector&amp;lt;SnmpMibAgent&amp;gt;" line="142"/>
            <declaration name="root" type="SnmpMibTree" line="143"/>
            <declaration name="useAcl" type="boolean" line="144"/>
            <javadoc line="144">
                Whether ACL must be used.                
            </javadoc>
            <declaration name="maxTries" type="int" line="148"/>
            <javadoc line="148">
                Number of times to try an inform request before giving up.
                  The default number is 3.                
            </javadoc>
            <declaration name="timeout" type="int" line="153"/>
            <javadoc line="153">
                The amount of time to wait for an inform response from the manager.
                  The default amount of time is 3000 millisec.                
            </javadoc>
            <declaration name="snmpOutTraps" type="int" line="158"/>
            <javadoc line="158">
                The &lt;CODE&gt;snmpOutTraps&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpOutGetResponses" type="int" line="162"/>
            <javadoc line="162">
                The &lt;CODE&gt;snmpOutGetResponses&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpOutGenErrs" type="int" line="166"/>
            <javadoc line="166">
                The &lt;CODE&gt;snmpOutGenErrs&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpOutBadValues" type="int" line="170"/>
            <javadoc line="170">
                The &lt;CODE&gt;snmpOutBadValues&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpOutNoSuchNames" type="int" line="174"/>
            <javadoc line="174">
                The &lt;CODE&gt;snmpOutNoSuchNames&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpOutTooBigs" type="int" line="178"/>
            <javadoc line="178">
                The &lt;CODE&gt;snmpOutTooBigs&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpOutPkts" type="int" line="182"/>
            <javadoc line="182">
                The &lt;CODE&gt;snmpOutPkts&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpInASNParseErrs" type="int" line="186"/>
            <javadoc line="186">
                The &lt;CODE&gt;snmpInASNParseErrs&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpInBadCommunityUses" type="int" line="190"/>
            <javadoc line="190">
                The &lt;CODE&gt;snmpInBadCommunityUses&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpInBadCommunityNames" type="int" line="194"/>
            <javadoc line="194">
                The &lt;CODE&gt;snmpInBadCommunityNames&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpInBadVersions" type="int" line="198"/>
            <javadoc line="198">
                The &lt;CODE&gt;snmpInBadVersions&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpInGetRequests" type="int" line="202"/>
            <javadoc line="202">
                The &lt;CODE&gt;snmpInGetRequests&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpInGetNexts" type="int" line="206"/>
            <javadoc line="206">
                The &lt;CODE&gt;snmpInGetNexts&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpInSetRequests" type="int" line="210"/>
            <javadoc line="210">
                The &lt;CODE&gt;snmpInSetRequests&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpInPkts" type="int" line="214"/>
            <javadoc line="214">
                The &lt;CODE&gt;snmpInPkts&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpInTotalReqVars" type="int" line="218"/>
            <javadoc line="218">
                The &lt;CODE&gt;snmpInTotalReqVars&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpInTotalSetVars" type="int" line="222"/>
            <javadoc line="222">
                The &lt;CODE&gt;snmpInTotalSetVars&lt;/CODE&gt; value defined in MIB-II.                
            </javadoc>
            <declaration name="snmpSilentDrops" type="int" line="226"/>
            <javadoc line="226">
                The &lt;CODE&gt;snmpInTotalSetVars&lt;/CODE&gt; value defined in rfc 1907 MIB-II.                
            </javadoc>
            <declaration name="InterruptSysCallMsg" type="String" line="230"/>
            <declaration name="sysUpTimeOid" type="SnmpOid" line="231"/>
            <declaration name="snmpTrapOidOid" type="SnmpOid" line="232"/>
            <declaration name="threadService" type="ThreadService" line="233"/>
            <declaration name="threadNumber" type="int" line="234"/>
            <scope line="235">
                <declaration name="s" type="String" line="236"/>
                <scope line="237">
                    <scope line="238"/>
                    <scope line="241"/>
                </scope>
            </scope>
            <javadoc line="246">
                Initializes this SNMP protocol adaptor using the default port (161).
                  Use the {@link com.sun.jmx.snmp.IPAcl.SnmpAcl} default
                  implementation of the &lt;CODE&gt;InetAddressAcl&lt;/CODE&gt; interface.                
            </javadoc>
            <method name="SnmpAdaptorServer" type="constructor" line="251"/>
            <javadoc line="254">
                Initializes this SNMP protocol adaptor using the specified port.
                  Use the {@link com.sun.jmx.snmp.IPAcl.SnmpAcl} default
                  implementation of the &lt;CODE&gt;InetAddressAcl&lt;/CODE&gt; interface.                
                <param>
                    port The port number for sending SNMP responses.                    
                </param>
            </javadoc>
            <method name="SnmpAdaptorServer" type="constructor" line="260">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="263">
                Initializes this SNMP protocol adaptor using the default port (161)
                  and the specified IP address based ACL implementation.                
                <param>
                    acl The &lt;CODE&gt;InetAddressAcl&lt;/CODE&gt; implementation.
                      &lt;code&gt;null&lt;/code&gt; means no ACL - everybody is authorized.                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="SnmpAdaptorServer" type="constructor" line="270">
                <params>
                    <param name="acl" type="InetAddressAcl"/>
                </params>
            </method>
            <javadoc line="273">
                Initializes this SNMP protocol adaptor using the default port (161)
                  and the
                  specified &lt;CODE&gt;InetAddress&lt;/CODE&gt;.
                  Use the {@link com.sun.jmx.snmp.IPAcl.SnmpAcl} default
                  implementation of the &lt;CODE&gt;InetAddressAcl&lt;/CODE&gt; interface.                
                <param>
                    addr The IP address to bind.                    
                </param>
            </javadoc>
            <method name="SnmpAdaptorServer" type="constructor" line="281">
                <params>
                    <param name="addr" type="InetAddress"/>
                </params>
            </method>
            <javadoc line="284">
                Initializes this SNMP protocol adaptor using the specified port and the
                  specified IP address based ACL implementation.                
                <param>
                    acl The &lt;CODE&gt;InetAddressAcl&lt;/CODE&gt; implementation.
                      &lt;code&gt;null&lt;/code&gt; means no ACL - everybody is authorized.                    
                </param>
                <param>
                    port The port number for sending SNMP responses.                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="SnmpAdaptorServer" type="constructor" line="292">
                <params>
                    <param name="acl" type="InetAddressAcl"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="295">
                Initializes this SNMP protocol adaptor using the specified port and the
                  specified &lt;CODE&gt;InetAddress&lt;/CODE&gt;.
                  Use the {@link com.sun.jmx.snmp.IPAcl.SnmpAcl} default
                  implementation of the &lt;CODE&gt;InetAddressAcl&lt;/CODE&gt; interface.                
                <param>
                    port The port number for sending SNMP responses.                    
                </param>
                <param>
                    addr The IP address to bind.                    
                </param>
            </javadoc>
            <method name="SnmpAdaptorServer" type="constructor" line="303">
                <params>
                    <param name="port" type="int"/>
                    <param name="addr" type="InetAddress"/>
                </params>
            </method>
            <javadoc line="306">
                Initializes this SNMP protocol adaptor using the specified IP
                  address based ACL implementation and the specified
                  &lt;CODE&gt;InetAddress&lt;/CODE&gt;.                
                <param>
                    acl The &lt;CODE&gt;InetAddressAcl&lt;/CODE&gt; implementation.                    
                </param>
                <param>
                    addr The IP address to bind.                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="SnmpAdaptorServer" type="constructor" line="314">
                <params>
                    <param name="acl" type="InetAddressAcl"/>
                    <param name="addr" type="InetAddress"/>
                </params>
            </method>
            <javadoc line="317">
                Initializes this SNMP protocol adaptor using the specified port, the
                  specified  address based ACL implementation and the specified
                  &lt;CODE&gt;InetAddress&lt;/CODE&gt;.                
                <param>
                    acl The &lt;CODE&gt;InetAddressAcl&lt;/CODE&gt; implementation.                    
                </param>
                <param>
                    port The port number for sending SNMP responses.                    
                </param>
                <param>
                    addr The IP address to bind.                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="SnmpAdaptorServer" type="constructor" line="326">
                <params>
                    <param name="acl" type="InetAddressAcl"/>
                    <param name="port" type="int"/>
                    <param name="addr" type="InetAddress"/>
                </params>
            </method>
            <javadoc line="329">
                Initializes this SNMP protocol adaptor using the specified port and the
                  specified &lt;CODE&gt;InetAddress&lt;/CODE&gt;.
                  This constructor allows to initialize an SNMP adaptor without using
                  the ACL mechanism (by setting the &lt;CODE&gt;useAcl&lt;/CODE&gt; parameter to
                  false).
                  &lt;br&gt;This constructor must be used in particular with a platform that
                  does not support the &lt;CODE&gt;java.security.acl&lt;/CODE&gt; package like pJava.                
                <param>
                    useAcl Specifies if this new SNMP adaptor uses the ACL mechanism.
                      If the specified parameter is set to &lt;CODE&gt;true&lt;/CODE&gt;, this
                      constructor is equivalent to
                      &lt;CODE&gt;SnmpAdaptorServer((int)port,(InetAddress)addr)&lt;/CODE&gt;.                    
                </param>
                <param>
                    port The port number for sending SNMP responses.                    
                </param>
                <param>
                    addr The IP address to bind.                    
                </param>
            </javadoc>
            <method name="SnmpAdaptorServer" type="constructor" line="344">
                <params>
                    <param name="useAcl" type="boolean"/>
                    <param name="port" type="int"/>
                    <param name="addr" type="InetAddress"/>
                </params>
            </method>
            <method name="SnmpAdaptorServer" type="constructor" line="347">
                <params>
                    <param name="forceAcl" type="boolean"/>
                    <param name="acl" type="InetAddressAcl"/>
                    <param name="port" type="int"/>
                    <param name="addr" type="InetAddress"/>
                </params>
                <scope line="349">
                    <scope line="350"/>
                    <scope line="353">
                        <scope line="354"/>
                    </scope>
                </scope>
                <scope line="359"/>
            </method>
            <javadoc line="364">
                Gets the number of managers that have been processed by this
                  SNMP protocol adaptor  since its creation.                
                <return>
                    The number of managers handled by this SNMP protocol adaptor
                      since its creation. This counter is not reset by the &lt;CODE&gt;stop&lt;/CODE&gt;
                      method.                    
                </return>
            </javadoc>
            <method name="getServedClientCount" type="int" line="371"/>
            <javadoc line="374">
                Gets the number of managers currently being processed by this
                  SNMP protocol adaptor.                
                <return>
                    The number of managers currently being processed by this
                      SNMP protocol adaptor.                    
                </return>
            </javadoc>
            <method name="getActiveClientCount" type="int" line="380"/>
            <javadoc line="383">
                Gets the maximum number of managers that this SNMP protocol adaptor can
                  process concurrently.                
                <return>
                    The maximum number of managers that this SNMP protocol adaptor
                      can process concurrently.                    
                </return>
            </javadoc>
            <method name="getMaxActiveClientCount" type="int" line="389"/>
            <javadoc line="392">
                Sets the maximum number of managers this SNMP protocol adaptor can
                  process concurrently.                
                <param>
                    c The number of managers.                    
                </param>
                <exception>
                    java.lang.IllegalStateException This method has been invoked
                      while the communicator was &lt;CODE&gt;ONLINE&lt;/CODE&gt; or &lt;CODE&gt;STARTING&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="setMaxActiveClientCount" type="void" line="399">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <javadoc line="402">
                Returns the Ip address based ACL used by this SNMP protocol adaptor.                
                <return>
                    The &lt;CODE&gt;InetAddressAcl&lt;/CODE&gt; implementation.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getInetAddressAcl" type="InetAddressAcl" line="407"/>
            <javadoc line="410">
                Returns the port used by this SNMP protocol adaptor for sending traps.
                  By default, port 162 is used.                
                <return>
                    The port number for sending SNMP traps.                    
                </return>
            </javadoc>
            <method name="getTrapPort" type="Integer" line="415"/>
            <javadoc line="418">
                Sets the port used by this SNMP protocol adaptor for sending traps.                
                <param>
                    port The port number for sending SNMP traps.                    
                </param>
            </javadoc>
            <method name="setTrapPort" type="void" line="422">
                <params>
                    <param name="port" type="Integer"/>
                </params>
            </method>
            <javadoc line="425">
                Sets the port used by this SNMP protocol adaptor for sending traps.                
                <param>
                    port The port number for sending SNMP traps.                    
                </param>
            </javadoc>
            <method name="setTrapPort" type="void" line="429">
                <params>
                    <param name="port" type="int"/>
                </params>
                <declaration name="val" type="int" line="430"/>
            </method>
            <javadoc line="434">
                Returns the port used by this SNMP protocol adaptor for sending
                  inform requests. By default, port 162 is used.                
                <return>
                    The port number for sending SNMP inform requests.                    
                </return>
            </javadoc>
            <method name="getInformPort" type="int" line="439"/>
            <javadoc line="442">
                Sets the port used by this SNMP protocol adaptor for sending
                  inform requests.                
                <param>
                    port The port number for sending SNMP inform requests.                    
                </param>
            </javadoc>
            <method name="setInformPort" type="void" line="447">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="451">
                Returns the protocol of this SNMP protocol adaptor.                
                <return>
                    The string &quot;snmp&quot;.                    
                </return>
            </javadoc>
            <method name="getProtocol" type="String" line="455"/>
            <javadoc line="458">
                Returns the buffer size of this SNMP protocol adaptor.
                  This buffer size is used for both incoming request and outgoing
                  inform requests.
                  By default, buffer size 1024 is used.                
                <return>
                    The buffer size.                    
                </return>
            </javadoc>
            <method name="getBufferSize" type="Integer" line="465"/>
            <javadoc line="468">
                Sets the buffer size of this SNMP protocol adaptor.
                  This buffer size is used for both incoming request and outgoing
                  inform requests.                
                <param>
                    s The buffer size.                    
                </param>
                <exception>
                    java.lang.IllegalStateException This method has been invoked
                      while the communicator was &lt;CODE&gt;ONLINE&lt;/CODE&gt; or &lt;CODE&gt;STARTING&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="setBufferSize" type="void" line="476">
                <params>
                    <param name="s" type="Integer"/>
                </params>
                <scope line="477"/>
            </method>
            <javadoc line="482">
                Gets the number of times to try sending an inform request before
                  giving up.
                  By default, a maximum of 3 tries is used.                
                <return>
                    The maximun number of tries.                    
                </return>
            </javadoc>
            <method name="getMaxTries" type="int" line="488"/>
            <javadoc line="491">
                Changes the maximun number of times to try sending an inform
                  request before giving up.                
                <param>
                    newMaxTries The maximun number of tries.                    
                </param>
            </javadoc>
            <method name="setMaxTries" type="void" line="496">
                <params>
                    <param name="newMaxTries" type="int"/>
                </params>
            </method>
            <javadoc line="500">
                Gets the timeout to wait for an inform response from the manager.
                  By default, a timeout of 3 seconds is used.                
                <return>
                    The value of the timeout property.                    
                </return>
            </javadoc>
            <method name="getTimeout" type="int" line="505"/>
            <javadoc line="508">
                Changes the timeout to wait for an inform response from the manager.                
                <param>
                    newTimeout The timeout (in milliseconds).                    
                </param>
            </javadoc>
            <method name="setTimeout" type="void" line="512">
                <params>
                    <param name="newTimeout" type="int"/>
                </params>
            </method>
            <javadoc line="516">
                Returns the message factory of this SNMP protocol adaptor.                
                <return>
                    The factory object.                    
                </return>
            </javadoc>
            <method name="getPduFactory" type="SnmpPduFactory" line="520"/>
            <javadoc line="523">
                Sets the message factory of this SNMP protocol adaptor.                
                <param>
                    factory The factory object (null means the default factory).                    
                </param>
            </javadoc>
            <method name="setPduFactory" type="void" line="527">
                <params>
                    <param name="factory" type="SnmpPduFactory"/>
                </params>
            </method>
            <javadoc line="531">
                Set the user-data factory of this SNMP protocol adaptor.                
                <param>
                    factory The factory object (null means no factory).                    
                </param>
                <see>
                    com.sun.jmx.snmp.agent.SnmpUserDataFactory                    
                </see>
            </javadoc>
            <method name="setUserDataFactory" type="void" line="536">
                <params>
                    <param name="factory" type="SnmpUserDataFactory"/>
                </params>
            </method>
            <javadoc line="539">
                Get the user-data factory associated with this SNMP protocol adaptor.                
                <return>
                    The factory object (null means no factory).                    
                </return>
                <see>
                    com.sun.jmx.snmp.agent.SnmpUserDataFactory                    
                </see>
            </javadoc>
            <method name="getUserDataFactory" type="SnmpUserDataFactory" line="544"/>
            <javadoc line="547">
                Returns &lt;CODE&gt;true&lt;/CODE&gt; if authentication traps are enabled.
                  &lt;P&gt;
                  When this feature is enabled, the SNMP protocol adaptor sends
                  an &lt;CODE&gt;authenticationFailure&lt;/CODE&gt; trap each time an
                  authentication fails.
                  &lt;P&gt;
                  The default behaviour is to send authentication traps.                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if authentication traps are enabled,
                      &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="getAuthTrapEnabled" type="boolean" line="558"/>
            <javadoc line="561">
                Sets the flag indicating if traps need to be sent in case of
                  authentication failure.                
                <param>
                    enabled Flag indicating if traps need to be sent.                    
                </param>
            </javadoc>
            <method name="setAuthTrapEnabled" type="void" line="566">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
            </method>
            <javadoc line="569">
                Returns &lt;code&gt;true&lt;/code&gt; if this SNMP protocol adaptor sends a
                  response in case of authentication failure.
                  &lt;P&gt;
                  When this feature is enabled, the SNMP protocol adaptor sends a
                  response with &lt;CODE&gt;noSuchName&lt;/CODE&gt; or &lt;CODE&gt;readOnly&lt;/CODE&gt; when
                  the authentication failed. If the flag is disabled, the
                  SNMP protocol adaptor trashes the PDU silently.
                  &lt;P&gt;
                  The default behavior is to send responses.                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if responses are sent.                    
                </return>
            </javadoc>
            <method name="getAuthRespEnabled" type="boolean" line="581"/>
            <javadoc line="584">
                Sets the flag indicating if responses need to be sent in case of
                  authentication failure.                
                <param>
                    enabled Flag indicating if responses need to be sent.                    
                </param>
            </javadoc>
            <method name="setAuthRespEnabled" type="void" line="589">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
            </method>
            <javadoc line="592">
                Returns the enterprise OID. It is used by{@link #snmpV1Trap snmpV1Trap} to fill the &apos;enterprise&apos; field of the
                  trap request.                
                <return>
                    The OID in string format &quot;x.x.x.x&quot;.                    
                </return>
            </javadoc>
            <method name="getEnterpriseOid" type="String" line="597"/>
            <javadoc line="600">
                Sets the enterprise OID.                
                <param>
                    oid The OID in string format &quot;x.x.x.x&quot;.                    
                </param>
                <exception>
                    IllegalArgumentException The string format is incorrect                    
                </exception>
            </javadoc>
            <method name="setEnterpriseOid" type="void" line="605">
                <params>
                    <param name="oid" type="String"/>
                </params>
            </method>
            <javadoc line="608">
                Returns the names of the MIBs available in this SNMP protocol adaptor.                
                <return>
                    An array of MIB names.                    
                </return>
            </javadoc>
            <method name="getMibs" type="String[]" line="612">
                <declaration name="result" type="String[]" line="613"/>
                <declaration name="i" type="int" line="614"/>
                <scope line="615">
                    <declaration name="mib" type="SnmpMibAgent" line="616"/>
                </scope>
            </method>
            <javadoc line="621">
                Returns the &lt;CODE&gt;snmpOutTraps&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutTraps&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpOutTraps" type="Long" line="625"/>
            <javadoc line="628">
                Returns the &lt;CODE&gt;snmpOutGetResponses&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutGetResponses&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpOutGetResponses" type="Long" line="632"/>
            <javadoc line="635">
                Returns the &lt;CODE&gt;snmpOutGenErrs&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutGenErrs&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpOutGenErrs" type="Long" line="639"/>
            <javadoc line="642">
                Returns the &lt;CODE&gt;snmpOutBadValues&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutBadValues&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpOutBadValues" type="Long" line="646"/>
            <javadoc line="649">
                Returns the &lt;CODE&gt;snmpOutNoSuchNames&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutNoSuchNames&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpOutNoSuchNames" type="Long" line="653"/>
            <javadoc line="656">
                Returns the &lt;CODE&gt;snmpOutTooBigs&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutTooBigs&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpOutTooBigs" type="Long" line="660"/>
            <javadoc line="663">
                Returns the &lt;CODE&gt;snmpInASNParseErrs&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInASNParseErrs&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInASNParseErrs" type="Long" line="667"/>
            <javadoc line="670">
                Returns the &lt;CODE&gt;snmpInBadCommunityUses&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInBadCommunityUses&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInBadCommunityUses" type="Long" line="674"/>
            <javadoc line="677">
                Returns the &lt;CODE&gt;snmpInBadCommunityNames&lt;/CODE&gt; value defined in
                  MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInBadCommunityNames&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInBadCommunityNames" type="Long" line="682"/>
            <javadoc line="685">
                Returns the &lt;CODE&gt;snmpInBadVersions&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInBadVersions&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInBadVersions" type="Long" line="689"/>
            <javadoc line="692">
                Returns the &lt;CODE&gt;snmpOutPkts&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpOutPkts&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpOutPkts" type="Long" line="696"/>
            <javadoc line="699">
                Returns the &lt;CODE&gt;snmpInPkts&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInPkts&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInPkts" type="Long" line="703"/>
            <javadoc line="706">
                Returns the &lt;CODE&gt;snmpInGetRequests&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInGetRequests&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInGetRequests" type="Long" line="710"/>
            <javadoc line="713">
                Returns the &lt;CODE&gt;snmpInGetNexts&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInGetNexts&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInGetNexts" type="Long" line="717"/>
            <javadoc line="720">
                Returns the &lt;CODE&gt;snmpInSetRequests&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInSetRequests&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInSetRequests" type="Long" line="724"/>
            <javadoc line="727">
                Returns the &lt;CODE&gt;snmpInTotalSetVars&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInTotalSetVars&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInTotalSetVars" type="Long" line="731"/>
            <javadoc line="734">
                Returns the &lt;CODE&gt;snmpInTotalReqVars&lt;/CODE&gt; value defined in MIB-II.                
                <return>
                    The &lt;CODE&gt;snmpInTotalReqVars&lt;/CODE&gt; value.                    
                </return>
            </javadoc>
            <method name="getSnmpInTotalReqVars" type="Long" line="738"/>
            <javadoc line="741">
                Returns the &lt;CODE&gt;snmpSilentDrops&lt;/CODE&gt; value defined in RFC
                  1907 NMPv2-MIB .                
                <return>
                    The &lt;CODE&gt;snmpSilentDrops&lt;/CODE&gt; value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getSnmpSilentDrops" type="Long" line="747"/>
            <javadoc line="750">
                Returns the &lt;CODE&gt;snmpProxyDrops&lt;/CODE&gt; value defined in RFC
                  1907 NMPv2-MIB .                
                <return>
                    The &lt;CODE&gt;snmpProxyDrops&lt;/CODE&gt; value.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getSnmpProxyDrops" type="Long" line="756"/>
            <javadoc line="759">
                Allows the MBean to perform any operations it needs before being
                  registered in the MBean server.
                  If the name of the SNMP protocol adaptor MBean is not specified,
                  it is initialized with the default value:{@link com.sun.jmx.snmp.ServiceName#DOMAINcom}:{@link com.sun.jmx.snmp.ServiceName#SNMP_ADAPTOR_SERVERcom}.
                  If any exception is raised, the SNMP protocol adaptor MBean will
                  not be registered in the MBean server.                
                <param>
                    server The MBean server to register the service with.                    
                </param>
                <param>
                    name The object name.                    
                </param>
                <return>
                    The name of the SNMP protocol adaptor registered.                    
                </return>
                <exception>
                    java.lang.Exception                    
                </exception>
            </javadoc>
            <method name="preRegister" type="ObjectName" line="771">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="772"/>
            </method>
            <javadoc line="777">
                Not used in this context.                
            </javadoc>
            <method name="postRegister" type="void" line="780">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
            </method>
            <javadoc line="783">
                Not used in this context.                
            </javadoc>
            <method name="preDeregister" type="void" line="786"/>
            <javadoc line="789">
                Not used in this context.                
            </javadoc>
            <method name="postDeregister" type="void" line="792"/>
            <javadoc line="795">
                Adds a new MIB in the SNMP MIB handler.                
                <param>
                    mib The MIB to add.                    
                </param>
                <return>
                    A reference to the SNMP MIB handler.                    
                </return>
                <exception>
                    IllegalArgumentException If the parameter is null.                    
                </exception>
            </javadoc>
            <method name="addMib" type="SnmpMibHandler" line="801">
                <params>
                    <param name="mib" type="SnmpMibAgent"/>
                </params>
                <scope line="802"/>
            </method>
            <javadoc line="809">
                Adds a new MIB in the SNMP MIB handler.
                  This method is to be called to set a specific agent to a specific OID.
                  This can be useful when dealing with MIB overlapping.
                  Some OID can be implemented in more than one MIB. In this case,
                  the OID nearer agent will be used on SNMP operations.                
                <param>
                    mib The MIB to add.                    
                </param>
                <param>
                    oids The set of OIDs this agent implements.                    
                </param>
                <return>
                    A reference to the SNMP MIB handler.                    
                </return>
                <exception>
                    IllegalArgumentException If the parameter is null.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="addMib" type="SnmpMibHandler" line="821">
                <params>
                    <param name="mib" type="SnmpMibAgent"/>
                    <param name="oids" type="SnmpOid[]"/>
                </params>
                <scope line="822"/>
                <scope line="827"/>
            </method>
            <javadoc line="832">
                Adds a new MIB in the SNMP MIB handler. In SNMP V1 and V2 the
                  &lt;CODE&gt;contextName&lt;/CODE&gt; is useless and this method
                  is equivalent to &lt;CODE&gt;addMib(SnmpMibAgent mib)&lt;/CODE&gt;.                
                <param>
                    mib The MIB to add.                    
                </param>
                <param>
                    contextName The MIB context name.                    
                </param>
                <return>
                    A reference on the SNMP MIB handler.                    
                </return>
                <exception>
                    IllegalArgumentException If the parameter is null.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="addMib" type="SnmpMibHandler" line="842">
                <params>
                    <param name="mib" type="SnmpMibAgent"/>
                    <param name="contextName" type="String"/>
                </params>
            </method>
            <javadoc line="845">
                Adds a new MIB in the SNMP MIB handler. In SNMP V1 and V2 the
                  &lt;CODE&gt;contextName&lt;/CODE&gt; is useless and this method
                  is equivalent to &lt;CODE&gt;addMib(SnmpMibAgent mib, SnmpOid[] oids)&lt;/CODE&gt;.                
                <param>
                    mib The MIB to add.                    
                </param>
                <param>
                    contextName The MIB context. If null is passed, will be
                      registered in the default context.                    
                </param>
                <param>
                    oids The set of OIDs this agent implements.                    
                </param>
                <return>
                    A reference to the SNMP MIB handler.                    
                </return>
                <exception>
                    IllegalArgumentException If the parameter is null.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="addMib" type="SnmpMibHandler" line="857">
                <params>
                    <param name="mib" type="SnmpMibAgent"/>
                    <param name="contextName" type="String"/>
                    <param name="oids" type="SnmpOid[]"/>
                </params>
            </method>
            <javadoc line="860">
                Removes the specified MIB from the SNMP protocol adaptor.
                  In SNMP V1 and V2 the &lt;CODE&gt;contextName&lt;/CODE&gt; is useless and this
                  method is equivalent to &lt;CODE&gt;removeMib(SnmpMibAgent mib)&lt;/CODE&gt;.                
                <param>
                    mib The MIB to be removed.                    
                </param>
                <param>
                    contextName The context name used at registration time.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the specified &lt;CODE&gt;mib&lt;/CODE&gt; was
                      a MIB included in the SNMP MIB handler, &lt;CODE&gt;false&lt;/CODE&gt;
                      otherwise.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="removeMib" type="boolean" line="871">
                <params>
                    <param name="mib" type="SnmpMibAgent"/>
                    <param name="contextName" type="String"/>
                </params>
            </method>
            <javadoc line="874">
                Removes the specified MIB from the SNMP protocol adaptor.                
                <param>
                    mib The MIB to be removed.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the specified &lt;CODE&gt;mib&lt;/CODE&gt; was a MIB
                      included in the SNMP MIB handler, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="removeMib" type="boolean" line="880">
                <params>
                    <param name="mib" type="SnmpMibAgent"/>
                </params>
            </method>
            <javadoc line="884">
                Removes the specified MIB from the SNMP protocol adaptor.                
                <param>
                    mib The MIB to be removed.                    
                </param>
                <param>
                    oids The oid the MIB was previously registered for.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the specified &lt;CODE&gt;mib&lt;/CODE&gt; was
                      a MIB included in the SNMP MIB handler, &lt;CODE&gt;false&lt;/CODE&gt;
                      otherwise.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="removeMib" type="boolean" line="893">
                <params>
                    <param name="mib" type="SnmpMibAgent"/>
                    <param name="oids" type="SnmpOid[]"/>
                </params>
            </method>
            <javadoc line="897">
                Removes the specified MIB from the SNMP protocol adaptor.                
                <param>
                    mib The MIB to be removed.                    
                </param>
                <param>
                    contextName The context name used at registration time.                    
                </param>
                <param>
                    oids The oid the MIB was previously registered for.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the specified &lt;CODE&gt;mib&lt;/CODE&gt; was
                      a MIB included in the SNMP MIB handler, &lt;CODE&gt;false&lt;/CODE&gt;
                      otherwise.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="removeMib" type="boolean" line="907">
                <params>
                    <param name="mib" type="SnmpMibAgent"/>
                    <param name="contextName" type="String"/>
                    <param name="oids" type="SnmpOid[]"/>
                </params>
            </method>
            <javadoc line="910">
                Creates the datagram socket.                
            </javadoc>
            <method name="doBind" type="void" line="913">
                <scope line="914">
                    <scope line="915"/>
                </scope>
                <scope line="920">
                    <scope line="922">
                        <scope line="923"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="930">
                Return the actual port to which the adaptor is bound.
                  Can be different from the port given at construction time if
                  that port number was 0.                
                <return>
                    the actual port to which the adaptor is bound.                    
                </return>
            </javadoc>
            <method name="getPort" type="int" line="936">
                <scope line="937"/>
            </method>
            <javadoc line="942">
                Closes the datagram socket.                
            </javadoc>
            <method name="doUnbind" type="void" line="945">
                <scope line="946"/>
                <scope line="949">
                    <scope line="950"/>
                </scope>
            </method>
            <method name="createSnmpRequestHandler" type="void" line="958">
                <params>
                    <param name="server" type="SnmpAdaptorServer"/>
                    <param name="id" type="int"/>
                    <param name="s" type="DatagramSocket"/>
                    <param name="p" type="DatagramPacket"/>
                    <param name="tree" type="SnmpMibTree"/>
                    <param name="m" type="Vector"/>
                    <param name="a" type="Object"/>
                    <param name="factory" type="SnmpPduFactory"/>
                    <param name="dataFactory" type="SnmpUserDataFactory"/>
                    <param name="f" type="MBeanServer"/>
                    <param name="n" type="ObjectName"/>
                </params>
                <declaration name="handler" type="SnmpRequestHandler" line="959"/>
            </method>
            <javadoc line="962">
                Reads a packet from the datagram socket and creates a request
                  handler which decodes and processes the request.                
            </javadoc>
            <method name="doReceive" type="void" line="966">
                <scope line="967">
                    <declaration name="state" type="int" line="970"/>
                    <scope line="971">
                        <scope line="972"/>
                    </scope>
                </scope>
                <scope line="979"/>
                <scope line="983"/>
                <scope line="986"/>
                <scope line="989"/>
                <scope line="992"/>
            </method>
            <method name="doError" type="void" line="996">
                <params>
                    <param name="e" type="Exception"/>
                </params>
            </method>
            <javadoc line="999">
                Not used in this context.                
            </javadoc>
            <method name="doProcess" type="void" line="1002"/>
            <javadoc line="1004">
                The number of times the communicator server will attempt
                  to bind before giving up.
                  We attempt only once...                
                <return>
                    1                    
                </return>
            </javadoc>
            <method name="getBindTries" type="int" line="1010"/>
            <javadoc line="1013">
                Stops this SNMP protocol adaptor.
                  Closes the datagram socket.
                  &lt;p&gt;
                  Has no effect if this SNMP protocol adaptor is &lt;CODE&gt;OFFLINE&lt;/CODE&gt; or
                  &lt;CODE&gt;STOPPING&lt;/CODE&gt;.                
            </javadoc>
            <method name="stop" type="void" line="1020">
                <declaration name="port" type="int" line="1021"/>
                <scope line="1022"/>
                <scope line="1025">
                    <scope line="1027">
                        <declaration name="sn" type="DatagramSocket" line="1028"/>
                        <scope line="1029">
                            <declaration name="ob" type="byte[]" line="1030"/>
                            <declaration name="pk" type="DatagramPacket" line="1031"/>
                            <scope line="1034"/>
                        </scope>
                        <scope line="1039"/>
                    </scope>
                    <scope line="1043">
                        <scope line="1044"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1050">
                Sends a trap using SNMP V1 trap format.
                  &lt;BR&gt;The trap is sent to each destination defined in the ACL file
                  (if available).
                  If no ACL file or no destinations are available, the trap is sent
                  to the local host.                
                <param>
                    generic The generic number of the trap.                    
                </param>
                <param>
                    specific The specific number of the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit defined
                      by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="snmpV1Trap" type="void" line="1063">
                <params>
                    <param name="generic" type="int"/>
                    <param name="specific" type="int"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                </params>
                <scope line="1064"/>
                <declaration name="pdu" type="SnmpPduTrap" line="1067"/>
                <scope line="1077"/>
                <scope line="1082"/>
                <scope line="1086">
                    <declaration name="zeroedAddr" type="byte[]" line="1087"/>
                </scope>
            </method>
            <method name="handleMultipleIpVersion" type="SnmpIpAddress" line="1092">
                <params>
                    <param name="address" type="byte[]"/>
                </params>
                <scope line="1094">
                    <scope line="1095"/>
                </scope>
            </method>
            <javadoc line="1101">
                Sends a trap using SNMP V1 trap format.
                  &lt;BR&gt;The trap is sent to the specified &lt;CODE&gt;InetAddress&lt;/CODE&gt;
                  destination using the specified community string (and the ACL file
                  is not used).                
                <param>
                    addr The &lt;CODE&gt;InetAddress&lt;/CODE&gt; destination of the trap.                    
                </param>
                <param>
                    cs The community string to be used for the trap.                    
                </param>
                <param>
                    generic The generic number of the trap.                    
                </param>
                <param>
                    specific The specific number of the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit defined
                      by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="snmpV1Trap" type="void" line="1115">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="cs" type="String"/>
                    <param name="generic" type="int"/>
                    <param name="specific" type="int"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                </params>
                <scope line="1116"/>
                <declaration name="pdu" type="SnmpPduTrap" line="1119"/>
                <scope line="1130"/>
                <scope line="1135"/>
                <scope line="1139">
                    <declaration name="zeroedAddr" type="byte[]" line="1140"/>
                </scope>
            </method>
            <javadoc line="1146">
                Sends a trap using SNMP V1 trap format.
                  &lt;BR&gt;The trap is sent to the specified &lt;CODE&gt;InetAddress&lt;/CODE&gt;
                  destination using the specified parameters (and the ACL file is not
                  used).
                  Note that if the specified &lt;CODE&gt;InetAddress&lt;/CODE&gt; destination is null,
                  then the ACL file mechanism is used.                
                <param>
                    addr The &lt;CODE&gt;InetAddress&lt;/CODE&gt; destination of the trap.                    
                </param>
                <param>
                    agentAddr The agent address to be used for the trap.                    
                </param>
                <param>
                    cs The community string to be used for the trap.                    
                </param>
                <param>
                    enterpOid The enterprise OID to be used for the trap.                    
                </param>
                <param>
                    generic The generic number of the trap.                    
                </param>
                <param>
                    specific The specific number of the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <param>
                    time The time stamp (overwrite the current time).                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit defined
                      by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="snmpV1Trap" type="void" line="1166">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="agentAddr" type="SnmpIpAddress"/>
                    <param name="cs" type="String"/>
                    <param name="enterpOid" type="SnmpOid"/>
                    <param name="generic" type="int"/>
                    <param name="specific" type="int"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                    <param name="time" type="SnmpTimeticks"/>
                </params>
            </method>
            <javadoc line="1169">
                Sends a trap using SNMP V1 trap format.
                  &lt;BR&gt;The trap is sent to the specified &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; destination.
                  The community string used is the one located in the
                  &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; parameters
                  (&lt;CODE&gt;SnmpParameters.getRdCommunity() &lt;/CODE&gt;).                
                <param>
                    peer The &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; destination of the trap.                    
                </param>
                <param>
                    agentAddr The agent address to be used for the trap.                    
                </param>
                <param>
                    enterpOid The enterprise OID to be used for the trap.                    
                </param>
                <param>
                    generic The generic number of the trap.                    
                </param>
                <param>
                    specific The specific number of the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <param>
                    time The time stamp (overwrite the current time).                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit
                      defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="snmpV1Trap" type="void" line="1187">
                <params>
                    <param name="peer" type="SnmpPeer"/>
                    <param name="agentAddr" type="SnmpIpAddress"/>
                    <param name="enterpOid" type="SnmpOid"/>
                    <param name="generic" type="int"/>
                    <param name="specific" type="int"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                    <param name="time" type="SnmpTimeticks"/>
                </params>
                <declaration name="p" type="SnmpParameters" line="1188"/>
            </method>
            <method name="snmpV1Trap" type="void" line="1191">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="port" type="int"/>
                    <param name="agentAddr" type="SnmpIpAddress"/>
                    <param name="cs" type="String"/>
                    <param name="enterpOid" type="SnmpOid"/>
                    <param name="generic" type="int"/>
                    <param name="specific" type="int"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                    <param name="time" type="SnmpTimeticks"/>
                </params>
                <scope line="1192"/>
                <declaration name="pdu" type="SnmpPduTrap" line="1195"/>
                <scope line="1208"/>
                <scope line="1213">
                    <scope line="1214">
                        <declaration name="inetAddr" type="InetAddress" line="1215"/>
                    </scope>
                    <scope line="1218">
                        <declaration name="zeroedAddr" type="byte[]" line="1219"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1227">
                Sends a trap using SNMP V2 trap format.
                  &lt;BR&gt;The trap is sent to the specified &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; destination.
                  &lt;BR&gt;The community string used is the one located in the
                  &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; parameters
                  (&lt;CODE&gt;SnmpParameters.getRdCommunity() &lt;/CODE&gt;).
                  &lt;BR&gt;The variable list included in the outgoing trap is composed of
                  the following items:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;sysUpTime.0&lt;/CODE&gt; with the value specified by
                  &lt;CODE&gt;time&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;snmpTrapOid.0&lt;/CODE&gt; with the value specified by
                  &lt;CODE&gt;trapOid&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;all the (oid,values)&lt;/CODE&gt; from the specified
                  &lt;CODE&gt;varBindList&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;/UL&gt;                
                <param>
                    peer The &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; destination of the trap.                    
                </param>
                <param>
                    trapOid The OID identifying the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <param>
                    time The time stamp (overwrite the current time).                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit
                      defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="snmpV2Trap" type="void" line="1252">
                <params>
                    <param name="peer" type="SnmpPeer"/>
                    <param name="trapOid" type="SnmpOid"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                    <param name="time" type="SnmpTimeticks"/>
                </params>
                <declaration name="p" type="SnmpParameters" line="1253"/>
            </method>
            <javadoc line="1256">
                Sends a trap using SNMP V2 trap format.
                  &lt;BR&gt;The trap is sent to each destination defined in the ACL file
                  (if available). If no ACL file or no destinations are available,
                  the trap is sent to the local host.
                  &lt;BR&gt;The variable list included in the outgoing trap is composed of
                  the following items:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;sysUpTime.0&lt;/CODE&gt; with its current value&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;snmpTrapOid.0&lt;/CODE&gt; with the value specified by
                  &lt;CODE&gt;trapOid&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;all the (oid,values)&lt;/CODE&gt; from the specified
                  &lt;CODE&gt;varBindList&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;/UL&gt;                
                <param>
                    trapOid The OID identifying the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit defined
                      by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="snmpV2Trap" type="void" line="1276">
                <params>
                    <param name="trapOid" type="SnmpOid"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                </params>
                <scope line="1277"/>
                <declaration name="pdu" type="SnmpPduRequest" line="1280"/>
                <declaration name="fullVbl" type="SnmpVarBindList" line="1286"/>
                <declaration name="sysUpTimeValue" type="SnmpTimeticks" line="1289"/>
            </method>
            <javadoc line="1296">
                Sends a trap using SNMP V2 trap format.
                  &lt;BR&gt;The trap is sent to the specified &lt;CODE&gt;InetAddress&lt;/CODE&gt;
                  destination using the specified community string (and the ACL file
                  is not used).
                  &lt;BR&gt;The variable list included in the outgoing trap is composed of
                  the following items:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;sysUpTime.0&lt;/CODE&gt; with its current value&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;snmpTrapOid.0&lt;/CODE&gt; with the value specified by
                  &lt;CODE&gt;trapOid&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;all the (oid,values)&lt;/CODE&gt; from the specified
                  &lt;CODE&gt;varBindList&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;/UL&gt;                
                <param>
                    addr The &lt;CODE&gt;InetAddress&lt;/CODE&gt; destination of the trap.                    
                </param>
                <param>
                    cs The community string to be used for the trap.                    
                </param>
                <param>
                    trapOid The OID identifying the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit
                      defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="snmpV2Trap" type="void" line="1318">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="cs" type="String"/>
                    <param name="trapOid" type="SnmpOid"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                </params>
                <scope line="1319"/>
                <declaration name="pdu" type="SnmpPduRequest" line="1322"/>
                <declaration name="fullVbl" type="SnmpVarBindList" line="1329"/>
                <declaration name="sysUpTimeValue" type="SnmpTimeticks" line="1332"/>
            </method>
            <javadoc line="1340">
                Sends a trap using SNMP V2 trap format.
                  &lt;BR&gt;The trap is sent to the specified &lt;CODE&gt;InetAddress&lt;/CODE&gt;
                  destination using the specified parameters (and the ACL file is not
                  used).
                  Note that if the specified &lt;CODE&gt;InetAddress&lt;/CODE&gt; destination is null,
                  then the ACL file mechanism is used.
                  &lt;BR&gt;The variable list included in the outgoing trap is composed of the
                  following items:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;sysUpTime.0&lt;/CODE&gt; with the value specified by
                  &lt;CODE&gt;time&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;snmpTrapOid.0&lt;/CODE&gt; with the value specified by
                  &lt;CODE&gt;trapOid&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;all the (oid,values)&lt;/CODE&gt; from the specified
                  &lt;CODE&gt;varBindList&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;/UL&gt;                
                <param>
                    addr The &lt;CODE&gt;InetAddress&lt;/CODE&gt; destination of the trap.                    
                </param>
                <param>
                    cs The community string to be used for the trap.                    
                </param>
                <param>
                    trapOid The OID identifying the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <param>
                    time The time stamp (overwrite the current time).                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit
                      defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="snmpV2Trap" type="void" line="1367">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="cs" type="String"/>
                    <param name="trapOid" type="SnmpOid"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                    <param name="time" type="SnmpTimeticks"/>
                </params>
            </method>
            <method name="snmpV2Trap" type="void" line="1370">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="port" type="int"/>
                    <param name="cs" type="String"/>
                    <param name="trapOid" type="SnmpOid"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                    <param name="time" type="SnmpTimeticks"/>
                </params>
                <scope line="1371">
                    <declaration name="strb" type="StringBuilder" line="1372"/>
                </scope>
                <declaration name="pdu" type="SnmpPduRequest" line="1375"/>
                <declaration name="fullVbl" type="SnmpVarBindList" line="1382"/>
                <declaration name="sysUpTimeValue" type="SnmpTimeticks" line="1385"/>
            </method>
            <javadoc line="1395">
                Send the specified trap PDU to the passed &lt;CODE&gt;InetAddress&lt;/CODE&gt;.                
                <param>
                    address The destination address.                    
                </param>
                <param>
                    pdu The pdu to send.                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit
                      defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="snmpPduTrap" type="void" line="1404">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="pdu" type="SnmpPduPacket"/>
                </params>
            </method>
            <javadoc line="1408">
                Send the specified trap PDU to the passed &lt;CODE&gt;SnmpPeer&lt;/CODE&gt;.                
                <param>
                    peer The destination peer. The Read community string is used of
                      &lt;CODE&gt;SnmpParameters&lt;/CODE&gt; is used as the trap community string.                    
                </param>
                <param>
                    pdu The pdu to send.                    
                </param>
                <exception>
                    IOException An I/O error occurred while sending the trap.                    
                </exception>
                <exception>
                    SnmpStatusException If the trap exceeds the limit defined
                      by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="snmpPduTrap" type="void" line="1418">
                <params>
                    <param name="peer" type="SnmpPeer"/>
                    <param name="pdu" type="SnmpPduPacket"/>
                </params>
                <scope line="1419"/>
                <scope line="1423"/>
            </method>
            <javadoc line="1428">
                Send the specified trap PDU to every destinations from the ACL file.                
            </javadoc>
            <method name="sendTrapPdu" type="void" line="1431">
                <params>
                    <param name="pdu" type="SnmpPduPacket"/>
                </params>
                <declaration name="msg" type="SnmpMessage" line="1432"/>
                <scope line="1433">
                    <scope line="1435"/>
                </scope>
                <scope line="1439">
                    <scope line="1440"/>
                </scope>
                <declaration name="sendingCount" type="int" line="1445"/>
                <scope line="1447">
                    <declaration name="ed" type="Enumeration" line="1448"/>
                    <scope line="1449">
                        <declaration name="ec" type="Enumeration" line="1451"/>
                        <scope line="1452">
                            <scope line="1454"/>
                            <scope line="1458">
                                <scope line="1459"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1466">
                    <scope line="1467"/>
                    <scope line="1471">
                        <scope line="1472"/>
                    </scope>
                    <scope line="1476">
                        <scope line="1477"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1484">
                Send the specified trap PDU to the specified destination.                
            </javadoc>
            <method name="sendTrapPdu" type="void" line="1487">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="pdu" type="SnmpPduPacket"/>
                </params>
                <declaration name="msg" type="SnmpMessage" line="1488"/>
                <scope line="1489">
                    <scope line="1491"/>
                </scope>
                <scope line="1495">
                    <scope line="1496"/>
                </scope>
                <scope line="1502">
                    <scope line="1504"/>
                    <scope line="1507">
                        <scope line="1508"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1515">
                Send the specified message on trapSocket.                
            </javadoc>
            <method name="sendTrapMessage" type="void" line="1518">
                <params>
                    <param name="msg" type="SnmpMessage"/>
                </params>
                <declaration name="buffer" type="byte[]" line="1519"/>
                <declaration name="packet" type="DatagramPacket" line="1520"/>
                <declaration name="encodingLength" type="int" line="1521"/>
                <scope line="1525"/>
                <scope line="1529"/>
            </method>
            <javadoc line="1535">
                Open trapSocket if it&apos;s not already done.                
            </javadoc>
            <method name="openTrapSocketIfNeeded" type="void" line="1538">
                <scope line="1539">
                    <scope line="1541"/>
                </scope>
            </method>
            <javadoc line="1546">
                Close trapSocket if the SNMP protocol adaptor is not ONLINE.                
            </javadoc>
            <method name="closeTrapSocketIfNeeded" type="void" line="1549">
                <scope line="1550"/>
            </method>
            <javadoc line="1555">
                Sends an inform using SNMP V2 inform request format.
                  &lt;BR&gt;The inform request is sent to each destination defined in the ACL
                  file (if available).
                  If no ACL file or no destinations are available, the inform request is
                  sent to the local host.
                  &lt;BR&gt;The variable list included in the outgoing inform is composed of
                  the following items:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;sysUpTime.0&lt;/CODE&gt; with its current value&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;snmpTrapOid.0&lt;/CODE&gt; with the value specified by
                  &lt;CODE&gt;trapOid&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;all the (oid,values)&lt;/CODE&gt; from the specified
                  &lt;CODE&gt;varBindList&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;/UL&gt;
                  To send an inform request, the SNMP adaptor server must be active.                
                <param>
                    cb The callback that is invoked when a request is complete.                    
                </param>
                <param>
                    trapOid The OID identifying the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <return>
                    A vector of {@link com.sun.jmx.snmp.daemon.SnmpInformRequest}objects.
                      &lt;P&gt;If there is no destination host for this inform request,
                      the returned vector will be empty.                    
                </return>
                <exception>
                    IllegalStateException  This method has been invoked while
                      the SNMP adaptor server was not active.                    
                </exception>
                <exception>
                    IOException An I/O error occurred while sending the
                      inform request.                    
                </exception>
                <exception>
                    SnmpStatusException If the inform request exceeds the
                      limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="snmpInformRequest" type="Vector" line="1584">
                <params>
                    <param name="cb" type="SnmpInformHandler"/>
                    <param name="trapOid" type="SnmpOid"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                </params>
                <scope line="1585"/>
                <scope line="1588"/>
                <declaration name="fullVbl" type="SnmpVarBindList" line="1591"/>
                <declaration name="sysUpTimeValue" type="SnmpTimeticks" line="1594"/>
                <declaration name="informReqList" type="Vector&amp;lt;SnmpInformRequest&amp;gt;" line="1598"/>
                <declaration name="addr" type="InetAddress" line="1599"/>
                <declaration name="cs" type="String" line="1600"/>
                <scope line="1601">
                    <declaration name="ed" type="Enumeration" line="1602"/>
                    <scope line="1603">
                        <declaration name="ec" type="Enumeration" line="1605"/>
                        <scope line="1606"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1614">
                Sends an inform using SNMP V2 inform request format.
                  &lt;BR&gt;The inform is sent to the specified &lt;CODE&gt;InetAddress&lt;/CODE&gt;
                  destination
                  using the specified community string.
                  &lt;BR&gt;The variable list included in the outgoing inform is composed
                  of the following items:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;sysUpTime.0&lt;/CODE&gt; with its current value&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;snmpTrapOid.0&lt;/CODE&gt; with the value specified by
                  &lt;CODE&gt;trapOid&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;all the (oid,values)&lt;/CODE&gt; from the specified
                  &lt;CODE&gt;varBindList&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;/UL&gt;
                  To send an inform request, the SNMP adaptor server must be active.                
                <param>
                    addr The &lt;CODE&gt;InetAddress&lt;/CODE&gt; destination for this inform
                      request.                    
                </param>
                <param>
                    cs The community string to be used for the inform request.                    
                </param>
                <param>
                    cb The callback that is invoked when a request is complete.                    
                </param>
                <param>
                    trapOid The OID identifying the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <return>
                    The inform request object.                    
                </return>
                <exception>
                    IllegalStateException  This method has been invoked
                      while the SNMP adaptor server was not active.                    
                </exception>
                <exception>
                    IOException An I/O error occurred while sending the
                      inform request.                    
                </exception>
                <exception>
                    SnmpStatusException If the inform request exceeds the
                      limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="snmpInformRequest" type="SnmpInformRequest" line="1643">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="cs" type="String"/>
                    <param name="cb" type="SnmpInformHandler"/>
                    <param name="trapOid" type="SnmpOid"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                </params>
            </method>
            <javadoc line="1646">
                Sends an inform using SNMP V2 inform request format.
                  &lt;BR&gt;The inform is sent to the specified &lt;CODE&gt;SnmpPeer&lt;/CODE&gt;
                  destination.
                  &lt;BR&gt;The community string used is the one located in the
                  &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; parameters
                  (&lt;CODE&gt;SnmpParameters.getInformCommunity() &lt;/CODE&gt;).
                  &lt;BR&gt;The variable list included in the outgoing inform is composed
                  of the following items:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;CODE&gt;sysUpTime.0&lt;/CODE&gt; with its current value&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;snmpTrapOid.0&lt;/CODE&gt; with the value specified by
                  &lt;CODE&gt;trapOid&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;LI&gt;&lt;CODE&gt;all the (oid,values)&lt;/CODE&gt; from the specified
                  &lt;CODE&gt;varBindList&lt;/CODE&gt;&lt;/LI&gt;
                  &lt;/UL&gt;
                  To send an inform request, the SNMP adaptor server must be active.                
                <param>
                    peer The &lt;CODE&gt;SnmpPeer&lt;/CODE&gt; destination for this inform
                      request.                    
                </param>
                <param>
                    cb The callback that is invoked when a request is complete.                    
                </param>
                <param>
                    trapOid The OID identifying the trap.                    
                </param>
                <param>
                    varBindList A list of &lt;CODE&gt;SnmpVarBind&lt;/CODE&gt; instances or null.                    
                </param>
                <return>
                    The inform request object.                    
                </return>
                <exception>
                    IllegalStateException  This method has been invoked while
                      the SNMP adaptor server was not active.                    
                </exception>
                <exception>
                    IOException An I/O error occurred while sending the
                      inform request.                    
                </exception>
                <exception>
                    SnmpStatusException If the inform request exceeds the
                      limit defined by &lt;CODE&gt;bufferSize&lt;/CODE&gt;.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="snmpInformRequest" type="SnmpInformRequest" line="1677">
                <params>
                    <param name="peer" type="SnmpPeer"/>
                    <param name="cb" type="SnmpInformHandler"/>
                    <param name="trapOid" type="SnmpOid"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                </params>
                <declaration name="p" type="SnmpParameters" line="1678"/>
            </method>
            <javadoc line="1681">
                Method that maps an SNMP error status in the passed protocolVersion
                  according to the provided pdu type.                
                <param>
                    errorStatus The error status to convert.                    
                </param>
                <param>
                    protocolVersion The protocol version.                    
                </param>
                <param>
                    reqPduType The pdu type.                    
                </param>
            </javadoc>
            <method name="mapErrorStatus" type="int" line="1688">
                <params>
                    <param name="errorStatus" type="int"/>
                    <param name="protocolVersion" type="int"/>
                    <param name="reqPduType" type="int"/>
                </params>
            </method>
            <method name="snmpInformRequest" type="SnmpInformRequest" line="1691">
                <params>
                    <param name="addr" type="InetAddress"/>
                    <param name="port" type="int"/>
                    <param name="cs" type="String"/>
                    <param name="cb" type="SnmpInformHandler"/>
                    <param name="trapOid" type="SnmpOid"/>
                    <param name="varBindList" type="SnmpVarBindList"/>
                </params>
                <scope line="1692"/>
                <scope line="1695"/>
                <declaration name="fullVbl" type="SnmpVarBindList" line="1698"/>
                <declaration name="sysUpTimeValue" type="SnmpTimeticks" line="1701"/>
            </method>
            <javadoc line="1707">
                Open informSocket if it&apos;s not already done.                
            </javadoc>
            <method name="openInformSocketIfNeeded" type="void" line="1710">
                <scope line="1711">
                    <scope line="1713"/>
                </scope>
            </method>
            <javadoc line="1718">
                Close informSocket if the SNMP protocol adaptor is not ONLINE.                
            </javadoc>
            <method name="closeInformSocketIfNeeded" type="void" line="1721">
                <scope line="1722"/>
            </method>
            <javadoc line="1727">
                Gets the IP address to bind.
                  This getter is used to initialize the DatagramSocket in the
                  SnmpSocket object created for the inform request stuff.                
            </javadoc>
            <method name="getAddress" type="InetAddress" line="1732"/>
            <javadoc line="1735">
                Finalizer of the SNMP protocol adaptor objects.
                  This method is called by the garbage collector on an object
                  when garbage collection determines that there are no more
                  references to the object.
                  &lt;P&gt;Closes the datagram socket associated to this SNMP protocol adaptor.                
            </javadoc>
            <method name="finalize" type="void" line="1742">
                <scope line="1743">
                    <scope line="1744"/>
                </scope>
                <scope line="1750">
                    <scope line="1751"/>
                </scope>
            </method>
            <javadoc line="1756">
                Returns the string used in debug traces.                
            </javadoc>
            <method name="makeDebugTag" type="String" line="1759"/>
            <method name="updateRequestCounters" type="void" line="1762">
                <params>
                    <param name="pduType" type="int"/>
                </params>
            </method>
            <method name="updateErrorCounters" type="void" line="1778">
                <params>
                    <param name="errorStatus" type="int"/>
                </params>
            </method>
            <method name="updateVarCounters" type="void" line="1800">
                <params>
                    <param name="pduType" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="incSnmpInASNParseErrs" type="void" line="1812">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="incSnmpInBadVersions" type="void" line="1815">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="incSnmpInBadCommunityUses" type="void" line="1818">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="incSnmpInBadCommunityNames" type="void" line="1821">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="incSnmpSilentDrops" type="void" line="1824">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="1827">
                Returns the time (in hundreths of second) elapsed since the SNMP
                  protocol adaptor startup.                
            </javadoc>
            <method name="getSysUpTime" type="long" line="1831"/>
            <javadoc line="1834">
                Control the way the SnmpAdaptorServer service is deserialized.                
            </javadoc>
            <method name="readObject" type="void" line="1837">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="1841">
                Common initializations.                
            </javadoc>
            <method name="init" type="void" line="1844">
                <params>
                    <param name="acl" type="Object"/>
                    <param name="p" type="int"/>
                    <param name="a" type="InetAddress"/>
                </params>
            </method>
            <method name="getAgentMib" type="SnmpMibAgent" line="1856">
                <params>
                    <param name="oid" type="SnmpOid"/>
                </params>
            </method>
            <method name="createMainThread" type="Thread" line="1859">
                <declaration name="t" type="Thread" line="1860"/>
            </method>
        </class>
    </source>