<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.remote.util">
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.List"/>
        <import package="java.util.WeakHashMap"/>
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <class name="CacheMap" line="36">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <extends class="WeakHashMap">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </extends>
            <comment line="78">
                We don&apos;t override remove(Object) or try to do something with
                the map&apos;s iterators to detect removal.  So we may keep useless
                entries in the soft reference list for keys that have since
                been removed.  The assumption is that entries are added to the
                cache but never removed.  But the behavior is not wrong if
                they are in fact removed -- the caching is just less                
            </comment>
            <comment line="111">
                List of soft references for the most-recently referenced keys.
                The list is in most-recently-used order, i.e. the first element
                is the most-recently referenced key.  There are never more than
                nSoftReferences elements of this list.
                
                If we didn&apos;t care about J2SE 1.3 compatibility, we could use
                LinkedHashSet in conjunction with a subclass of SoftReference                
            </comment>
            <javadoc line="36">
                &lt;p&gt;Like WeakHashMap, except that the keys of the &lt;em&gt;n&lt;/em&gt; most
                  recently-accessed entries are kept as {@link SoftReference soft
                  references}.  Accessing an element means creating it, or retrieving
                  it with {@link #get(Object) get}.  Because these entries are kept
                  with soft references, they will tend to remain even if their keys
                  are not referenced elsewhere.  But if memory is short, they will
                  be removed.&lt;/p&gt;                
            </javadoc>
            <javadoc line="46">
                &lt;p&gt;Create a &lt;code&gt;CacheMap&lt;/code&gt; that can keep up to
                  &lt;code&gt;nSoftReferences&lt;/code&gt; as soft references.&lt;/p&gt;                
                <param>
                    nSoftReferences Maximum number of keys to keep as soft
                      references.  Access times for {@link #get(Object) get} and{@link #put(Object,Object) put} have a component that scales
                      linearly with <code>nSoftReferences</code>, so this value
                      should not be too great.                    
                </param>
                <throws>
                    IllegalArgumentException if
                      <code>nSoftReferences</code> is negative.                    
                </throws>
            </javadoc>
            <method name="CacheMap" type="constructor" line="59">
                <params>
                    <param name="nSoftReferences" type="int"/>
                </params>
                <scope line="60"/>
            </method>
            <method name="put" type="V" line="67">
                <params>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                </params>
            </method>
            <method name="get" type="V" line="72">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="cache" type="void" line="85">
                <params>
                    <param name="key" type="K"/>
                </params>
                <comment line="93">
                    Move this element to the head of the LRU list                    
                </comment>
                <comment line="103">
                    degenerate case, equivalent to WeakHashMap                    
                </comment>
                <declaration name="it" type="Iterator&lt;SoftReference&lt;K&gt;&gt;" line="86"/>
                <scope line="87">
                    <declaration name="sref" type="SoftReference&lt;K&gt;" line="88"/>
                    <declaration name="key1" type="K" line="89"/>
                    <scope line="92"/>
                </scope>
                <declaration name="size" type="int" line="100"/>
                <scope line="101"/>
            </method>
            <declaration name="cache" type="LinkedList&lt;SoftReference&lt;K&gt;&gt;" line="118"/>
            <declaration name="nSoftReferences" type="int" line="120"/>
        </class>
    </source>