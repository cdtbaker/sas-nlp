<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.remote.util">
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.List"/>
        <import package="java.util.WeakHashMap"/>
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <class name="CacheMap" line="8">
            <type_params>
                <type_param name="K"/>
                <type_param name="V"/>
            </type_params>
            <extends class="WeakHashMap">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
            </extends>
            <javadoc line="8">
                &lt;p&gt;Like WeakHashMap, except that the keys of the &lt;em&gt;n&lt;/em&gt; most
                  recently-accessed entries are kept as {@link SoftReference soft
                  references}.  Accessing an element means creating it, or retrieving
                  it with {@link #get(Object) get}.  Because these entries are kept
                  with soft references, they will tend to remain even if their keys
                  are not referenced elsewhere.  But if memory is short, they will
                  be removed.&lt;/p&gt;                
            </javadoc>
            <javadoc line="18">
                &lt;p&gt;Create a &lt;code&gt;CacheMap&lt;/code&gt; that can keep up to
                  &lt;code&gt;nSoftReferences&lt;/code&gt; as soft references.&lt;/p&gt;                
                <param>
                    nSoftReferences Maximum number of keys to keep as soft
                      references.  Access times for {@link #get(Object) get} and{@link #put(Object,Object) put} have a component that scales
                      linearly with &lt;code&gt;nSoftReferences&lt;/code&gt;, so this value
                      should not be too great.                    
                </param>
                <throws>
                    IllegalArgumentException if
                      &lt;code&gt;nSoftReferences&lt;/code&gt; is negative.                    
                </throws>
            </javadoc>
            <method name="CacheMap" type="constructor" line="28">
                <params>
                    <param name="nSoftReferences" type="int"/>
                </params>
                <scope line="29"/>
            </method>
            <method name="put" type="V" line="34">
                <params>
                    <param name="key" type="K"/>
                    <param name="value" type="V"/>
                </params>
            </method>
            <method name="get" type="V" line="38">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="cache" type="void" line="42">
                <params>
                    <param name="key" type="K"/>
                </params>
                <declaration name="it" type="Iterator&amp;lt;SoftReference&amp;lt;K&amp;gt;&amp;gt;" line="43"/>
                <scope line="44">
                    <declaration name="sref" type="SoftReference&amp;lt;K&amp;gt;" line="45"/>
                    <declaration name="key1" type="K" line="46"/>
                    <scope line="48"/>
                </scope>
                <declaration name="size" type="int" line="54"/>
                <scope line="55"/>
            </method>
            <declaration name="cache" type="LinkedList&amp;lt;SoftReference&amp;lt;K&amp;gt;&amp;gt;" line="61"/>
            <declaration name="nSoftReferences" type="int" line="62"/>
        </class>
    </source>