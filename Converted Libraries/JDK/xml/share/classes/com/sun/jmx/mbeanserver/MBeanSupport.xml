<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="javax.management.Attribute"/>
        <import package="javax.management.AttributeList"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.InvalidAttributeValueException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.ReflectionException"/>
        <import package="com.sun.jmx.mbeanserver.MXBeanMappingFactory"/>
        <class name="MBeanSupport" line="42">
            <type_params>
                <type_param name="M"/>
            </type_params>
            <comment line="54">
                We maintain a couple of caches to increase sharing between
                 different MBeans of the same type and also to reduce creation time
                 for the second and subsequent instances of the same type.
                
                 The first cache maps from an MBean interface to a PerInterface
                 object containing information parsed out of the interface.  The
                 interface is either a Standard MBean interface or an MXBean
                 interface, and there is one cache for each case.
                
                 The PerInterface includes an MBeanInfo.  This contains the
                 attributes and operations parsed out of the interface&apos;s methods,
                 plus a basic Descriptor for the interface containing at least the
                 interfaceClassName field and any fields derived from annotations on
                 the interface.  This MBeanInfo can never be the MBeanInfo for any
                 actual MBean, because an MBeanInfo&apos;s getClassName() is the name of
                 a concrete class and we don&apos;t know what the class will be.
                 Furthermore a real MBeanInfo may need to add constructors andor
                 notifications to the MBeanInfo.
                
                 The PerInterface also contains an MBeanDispatcher which is able to
                 route getAttribute, setAttribute, and invoke to the appropriate
                 method of the interface, including doing any necessary translation
                 of parameters and return values for MXBeans.
                
                 The PerInterface also contains the original Class for the interface.
                
                 We need to be careful about references.  When there are no MBeans
                 with a given interface, there must not be any strong references to
                 the interface Class.  Otherwise it could never be garbage collected,
                 and neither could its ClassLoader or any other classes loaded by
                 its ClassLoader.  Therefore the cache must wrap the PerInterface
                 in a WeakReference.  Each instance of MBeanSupport has a strong
                 reference to its PerInterface, which prevents PerInterface instances
                 from being garbage-collected prematurely.
                
                 The second cache maps from a concrete class and an MBean interface
                 that that class implements to the MBeanInfo for that class and
                 interface.  (The ability to specify an interface separately comes
                 from the class StandardMBean.  MBeans registered directly in the
                 MBean Server will always have the same interface here.)
                
                 The MBeanInfo in this second cache will be the MBeanInfo from the
                 PerInterface cache for the given itnerface, but with the
                 getClassName() having the concrete class&apos;s name, and the public
                 constructors based on the concrete class&apos;s constructors.  This
                 MBeanInfo can be shared between all instances of the concrete class
                 specifying the same interface, except instances that are
                 NotificationBroadcasters.  NotificationBroadcasters supply the
                 MBeanNotificationInfo[] in the MBeanInfo based on the instance
                 method NotificationBroadcaster.getNotificationInfo(), so two
                 instances of the same concrete class do not necessarily have the
                 same MBeanNotificationInfo[].  Currently we do not try to detect
                 when they do, although it would probably be worthwhile doing that
                 since it is a very common case.
                
                 Standard MBeans additionally have the property that
                 getNotificationInfo() must in principle be called every time
                 getMBeanInfo() is called for the MBean, since the returned array is
                 allowed to change over time.  We attempt to reduce the cost of
                 doing this by detecting when the Standard MBean is a subclass of
                 NotificationBroadcasterSupport that does not override
                 getNotificationInfo(), meaning that the MBeanNotificationInfo[] is
                 the one that was supplied to the constructor.  MXBeans do not have
                 this problem because their getNotificationInfo() method is called
                 only once.                
            </comment>
            <comment line="156">
                Methods that javax.management.StandardMBean should call from its
                 preRegister and postRegister, given that it is not supposed to
                 call the contained object&apos;s preRegister etc methods even if it has them                
            </comment>
            <comment line="255">
                Overridden by StandardMBeanSupport                
            </comment>
            <implements interface="DynamicMBean2"/>
            <implements interface="MBeanRegistration"/>
            <javadoc line="42">
                Base class for MBeans.  There is one instance of this class for
                  every Standard MBean and every MXBean.  We try to limit the amount
                  of information per instance so we can handle very large numbers of
                  MBeans comfortably.                
                <param>
                    <M>
                       either Method or ConvertingMethod, for Standard MBeans
                      and MXBeans respectively.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="MBeanSupport" type="constructor" line="125">
                <params>
                    <param name="resource" type="T"/>
                    <param name="mbeanInterfaceType" type="Class<T>"/>
                </params>
                <scope line="128">
                    <declaration name="msg" type="String" line="129"/>
                </scope>
                <declaration name="introspector" type="MBeanIntrospector&lt;M&gt;" line="135"/>
            </method>
            <method name="getMBeanIntrospector" type="MBeanIntrospector<M>" line="140"/>
            <javadoc line="140">
                Return the appropriate introspector for this type of MBean.                
            </javadoc>
            <method name="getCookie" type="Object" line="143"/>
            <javadoc line="143">
                Return a cookie for this MBean.  This cookie will be passed to
                  MBean method invocations where it can supply additional information
                  to the invocation.  For example, with MXBeans it can be used to
                  supply the MXBeanLookup context for resolving inter-MXBean references.                
            </javadoc>
            <method name="isMXBean" type="boolean" line="151"/>
            <method name="register" type="void" line="158"/>
            <method name="unregister" type="void" line="160"/>
            <method name="preRegister" type="ObjectName" line="163">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <method name="preRegister2" type="void" line="170">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <method name="registerFailed" type="void" line="174"/>
            <method name="postRegister" type="void" line="178">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
            </method>
            <method name="preDeregister" type="void" line="183"/>
            <method name="postDeregister" type="void" line="188">
                <comment line="190">
                    Undo any work from registration.  We do this in postDeregister
                     not preDeregister, because if the user preDeregister throws an
                     exception then the MBean is not unregistered.                    
                </comment>
                <scope line="192"/>
                <scope line="194"/>
            </method>
            <method name="getAttribute" type="Object" line="203">
                <params>
                    <param name="attribute" type="String"/>
                </params>
            </method>
            <method name="getAttributes" type="AttributeList" line="207">
                <params>
                    <param name="attributes" type="String[]"/>
                </params>
                <comment line="215">
                    OK: attribute is not included in returned list, per spec
                     XXX: log the exception                    
                </comment>
                <declaration name="result" type="AttributeList" line="208"/>
                <scope line="209">
                    <scope line="210">
                        <declaration name="attrValue" type="Object" line="211"/>
                    </scope>
                    <scope line="213"/>
                </scope>
            </method>
            <method name="setAttribute" type="void" line="225">
                <params>
                    <param name="attribute" type="Attribute"/>
                </params>
                <declaration name="name" type="String" line="226"/>
                <declaration name="value" type="Object" line="227"/>
            </method>
            <method name="setAttributes" type="AttributeList" line="231">
                <params>
                    <param name="attributes" type="AttributeList"/>
                </params>
                <comment line="235">
                    We can&apos;t use AttributeList.asList because it has side-effects                    
                </comment>
                <comment line="241">
                    OK: attribute is not included in returned list, per spec
                     XXX: log the exception                    
                </comment>
                <declaration name="result" type="AttributeList" line="232"/>
                <scope line="233">
                    <declaration name="attr" type="Attribute" line="235"/>
                    <scope line="236"/>
                    <scope line="239"/>
                </scope>
            </method>
            <method name="invoke" type="Object" line="249">
                <params>
                    <param name="operation" type="String"/>
                    <param name="params" type="Object[]"/>
                    <param name="signature" type="String[]"/>
                </params>
            </method>
            <method name="getMBeanInfo" type="MBeanInfo" line="255"/>
            <method name="getClassName" type="String" line="259"/>
            <method name="getResource" type="Object" line="263"/>
            <method name="getMBeanInterface" type="Class<?>" line="267"/>
            <declaration name="mbeanInfo" type="MBeanInfo" line="271"/>
            <declaration name="resource" type="Object" line="272"/>
            <declaration name="perInterface" type="PerInterface&lt;M&gt;" line="273"/>
        </class>
    </source>