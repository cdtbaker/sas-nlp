<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.IPAcl">
        <class name="ParseException" line="29">
            <extends class="Exception"/>
            <javadoc line="29">
                This exception is thrown when parse errors are encountered.
                  You can explicitly create objects of this exception type by
                  calling the method generateParseException in the generated
                  parser.
                  You can modify this class to customize your error reporting
                  mechanisms so long as you retain the public fields.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="39"/>
            <javadoc line="41">
                This constructor is used by the method &quot;generateParseException&quot;
                  in the generated parser.  Calling this constructor generates
                  a new object of this type with the fields &quot;currentToken&quot;,
                  &quot;expectedTokenSequences&quot;, and &quot;tokenImage&quot; set.  The boolean
                  flag &quot;specialConstructor&quot; is also set to true to indicate that
                  this constructor was used to create this object.
                  This constructor calls its super class with the empty string
                  to force the &quot;toString&quot; method of parent class &quot;Throwable&quot; to
                  print the error message in the form:
                  ParseException: &lt;result of getMessage&gt;                
            </javadoc>
            <method name="ParseException" type="constructor" line="57">
                <params>
                    <param name="currentTokenVal" type="Token"/>
                    <param name="expectedTokenSequencesVal" type="int[][]"/>
                    <param name="tokenImageVal" type="String[]"/>
                </params>
            </method>
            <javadoc line="65">
                The following constructors are for use by you for whatever
                  purpose you can think of.  Constructing the exception in this
                  manner makes the exception behave in the normal way - i.e., as
                  documented in the class &quot;Throwable&quot;.  The fields &quot;errorToken&quot;,
                  &quot;expectedTokenSequences&quot;, and &quot;tokenImage&quot; do not contain
                  relevant information.  The JavaCC generated code does not use
                  these constructors.                
            </javadoc>
            <method name="ParseException" type="constructor" line="75"/>
            <method name="ParseException" type="constructor" line="80">
                <params>
                    <param name="message" type="String"/>
                </params>
            </method>
            <declaration name="specialConstructor" type="boolean" line="85"/>
            <javadoc line="85">
                This variable determines which constructor was used to create
                  this object and thereby affects the semantics of the
                  &quot;getMessage&quot; method (see below).                
            </javadoc>
            <declaration name="currentToken" type="Token" line="92"/>
            <javadoc line="92">
                This is the last token that has been consumed successfully.  If
                  this object has been created due to a parse error, the token
                  followng this token will (therefore) be the first error token.                
            </javadoc>
            <declaration name="expectedTokenSequences" type="int[][]" line="99"/>
            <javadoc line="99">
                Each entry in this array is an array of integers.  Each array
                  of integers represents a sequence of tokens (by their ordinal
                  values) that is expected at this point of the parse.                
            </javadoc>
            <declaration name="tokenImage" type="String[]" line="106"/>
            <javadoc line="106">
                This is a reference to the &quot;tokenImage&quot; array of the generated
                  parser within which the parse error occurred.  This array is
                  defined in the generated ...Constants interface.                
            </javadoc>
            <javadoc line="113">
                This method has the standard behavior when this object has been
                  created using the standard constructors.  Otherwise, it uses
                  &quot;currentToken&quot; and &quot;expectedTokenSequences&quot; to generate a parse
                  error message and returns it.  If this object has been created
                  due to a parse error, and you do not catch it (it gets thrown
                  from the parser), then this method is called during the printing
                  of the final stack trace, and hence the correct error message
                  gets displayed.                
            </javadoc>
            <method name="getMessage" type="String" line="123">
                <scope line="124"/>
                <declaration name="expected" type="String" line="127"/>
                <declaration name="maxSize" type="int" line="128"/>
                <scope line="129">
                    <scope line="130"/>
                    <scope line="133"/>
                    <scope line="136"/>
                </scope>
                <declaration name="retval" type="String" line="141"/>
                <declaration name="tok" type="Token" line="142"/>
                <scope line="143">
                    <scope line="145"/>
                </scope>
                <scope line="153"/>
                <scope line="155"/>
            </method>
            <declaration name="eol" type="String" line="162"/>
            <javadoc line="162">
                The end of line string for this machine.                
            </javadoc>
            <javadoc line="167">
                Used to convert raw characters to their escaped version
                  when these raw version cannot be used as part of an ASCII
                  string literal.                
            </javadoc>
            <method name="add_escapes" type="String" line="172">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="retval" type="StringBuffer" line="173"/>
                <declaration name="ch" type="char" line="174"/>
                <scope line="175">
                    <scope line="205">
                        <declaration name="s" type="String" line="206"/>
                    </scope>
                    <scope line="208"/>
                </scope>
            </method>
        </class>
    </source>