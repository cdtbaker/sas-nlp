<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <import package="com.sun.jmx.snmp.Enumerated"/>
        <class name="SnmpInt" line="3">
            <extends class="SnmpValue"/>
            <javadoc line="3">
                Represents an SNMP integer.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="9"/>
            <javadoc line="10">
                Constructs a new &lt;CODE&gt;SnmpInt&lt;/CODE&gt; from the specified integer value.                
                <param>
                    v The initialization value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified value is smaller than <CODE>Integer.MIN_VALUE</CODE>
                      or larger than <CODE>Integer.MAX_VALUE</CODE>.                    
                </exception>
            </javadoc>
            <method name="SnmpInt" type="constructor" line="16">
                <params>
                    <param name="v" type="int"/>
                </params>
                <scope line="17"/>
            </method>
            <javadoc line="22">
                Constructs a new &lt;CODE&gt;SnmpInt&lt;/CODE&gt; from the specified &lt;CODE&gt;Integer&lt;/CODE&gt; value.                
                <param>
                    v The initialization value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified value is smaller than <CODE>Integer.MIN_VALUE</CODE>
                      or larger than <CODE>Integer.MAX_VALUE</CODE>.                    
                </exception>
            </javadoc>
            <method name="SnmpInt" type="constructor" line="28">
                <params>
                    <param name="v" type="Integer"/>
                </params>
            </method>
            <javadoc line="31">
                Constructs a new &lt;CODE&gt;SnmpInt&lt;/CODE&gt; from the specified long value.                
                <param>
                    v The initialization value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified value is smaller than <CODE>Integer.MIN_VALUE</CODE>
                      or larger than <CODE>Integer.MAX_VALUE</CODE>.                    
                </exception>
            </javadoc>
            <method name="SnmpInt" type="constructor" line="37">
                <params>
                    <param name="v" type="long"/>
                </params>
                <scope line="38"/>
            </method>
            <javadoc line="43">
                Constructs a new &lt;CODE&gt;SnmpInt&lt;/CODE&gt; from the specified &lt;CODE&gt;Long&lt;/CODE&gt; value.                
                <param>
                    v The initialization value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified value is smaller than <CODE>Integer.MIN_VALUE</CODE>
                      or larger than <CODE>Integer.MAX_VALUE</CODE>.                    
                </exception>
            </javadoc>
            <method name="SnmpInt" type="constructor" line="49">
                <params>
                    <param name="v" type="Long"/>
                </params>
            </method>
            <javadoc line="52">
                Constructs a new &lt;CODE&gt;SnmpInt&lt;/CODE&gt; from the specified &lt;CODE&gt;Enumerated&lt;/CODE&gt; value.                
                <param>
                    v The initialization value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified value is smaller than <CODE>Integer.MIN_VALUE</CODE>
                      or larger than <CODE>Integer.MAX_VALUE</CODE>.                    
                </exception>
                <see>
                    Enumerated                    
                </see>
            </javadoc>
            <method name="SnmpInt" type="constructor" line="59">
                <params>
                    <param name="v" type="Enumerated"/>
                </params>
            </method>
            <javadoc line="62">
                Constructs a new &lt;CODE&gt;SnmpInt&lt;/CODE&gt; from the specified boolean value.
                  This constructor applies rfc1903 rule:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  TruthValue ::= TEXTUAL-CONVENTION
                  STATUS       current
                  DESCRIPTION
                  &quot;Represents a boolean value.&quot;
                  SYNTAX       INTEGER { true(1), false(2) }
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    v The initialization value.                    
                </param>
            </javadoc>
            <method name="SnmpInt" type="constructor" line="74">
                <params>
                    <param name="v" type="boolean"/>
                </params>
            </method>
            <javadoc line="77">
                Returns the long value of this &lt;CODE&gt;SnmpInt&lt;/CODE&gt;.                
                <return>
                    The value.                    
                </return>
            </javadoc>
            <method name="longValue" type="long" line="81"/>
            <javadoc line="84">
                Converts the integer value to its &lt;CODE&gt;Long&lt;/CODE&gt; form.                
                <return>
                    The <CODE>Long</CODE> representation of the value.                    
                </return>
            </javadoc>
            <method name="toLong" type="Long" line="88"/>
            <javadoc line="91">
                Converts the integer value to its integer form.                
                <return>
                    The integer representation of the value.                    
                </return>
            </javadoc>
            <method name="intValue" type="int" line="95"/>
            <javadoc line="98">
                Converts the integer value to its &lt;CODE&gt;Integer&lt;/CODE&gt; form.                
                <return>
                    The <CODE>Integer</CODE> representation of the value.                    
                </return>
            </javadoc>
            <method name="toInteger" type="Integer" line="102"/>
            <javadoc line="105">
                Converts the integer value to its &lt;CODE&gt;String&lt;/CODE&gt; form.                
                <return>
                    The <CODE>String</CODE> representation of the value.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="109"/>
            <javadoc line="112">
                Converts the integer value to its &lt;CODE&gt;SnmpOid&lt;/CODE&gt; form.                
                <return>
                    The OID representation of the value.                    
                </return>
            </javadoc>
            <method name="toOid" type="SnmpOid" line="116"/>
            <javadoc line="119">
                Extracts the integer from an index OID and returns its
                  value converted as an &lt;CODE&gt;SnmpOid&lt;/CODE&gt;.                
                <param>
                    index The index array.                    
                </param>
                <param>
                    start The position in the index array.                    
                </param>
                <return>
                    The OID representing the integer value.                    
                </return>
                <exception>
                    SnmpStatusException There is no integer value
                      available at the start position.                    
                </exception>
            </javadoc>
            <method name="toOid" type="SnmpOid" line="128">
                <params>
                    <param name="index" type="long[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="129"/>
                <scope line="132"/>
            </method>
            <javadoc line="136">
                Scans an index OID, skips the integer value and returns the position
                  of the next value.                
                <param>
                    index The index array.                    
                </param>
                <param>
                    start The position in the index array.                    
                </param>
                <return>
                    The position of the next value.                    
                </return>
                <exception>
                    SnmpStatusException There is no integer value
                      available at the start position.                    
                </exception>
            </javadoc>
            <method name="nextOid" type="int" line="145">
                <params>
                    <param name="index" type="long[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="146"/>
                <scope line="149"/>
            </method>
            <javadoc line="153">
                Appends an &lt;CODE&gt;SnmpOid&lt;/CODE&gt; representing an &lt;CODE&gt;SnmpInt&lt;/CODE&gt; to another OID.                
                <param>
                    source An OID representing an <CODE>SnmpInt</CODE> value.                    
                </param>
                <param>
                    dest Where source should be appended.                    
                </param>
            </javadoc>
            <method name="appendToOid" type="void" line="158">
                <params>
                    <param name="source" type="SnmpOid"/>
                    <param name="dest" type="SnmpOid"/>
                </params>
                <scope line="159"/>
            </method>
            <javadoc line="164">
                Performs a clone action. This provides a workaround for the
                  &lt;CODE&gt;SnmpValue&lt;/CODE&gt; interface.                
                <return>
                    The <CODE>SnmpValue</CODE> clone.                    
                </return>
            </javadoc>
            <method name="duplicate" type="SnmpValue" line="169"/>
            <javadoc line="172">
                Clones the &lt;CODE&gt;SnmpInt&lt;/CODE&gt; object, making a copy of its data.                
                <return>
                    The object clone.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="176">
                <declaration name="newclone" type="SnmpInt" line="177"/>
                <scope line="178"/>
                <scope line="182"/>
            </method>
            <javadoc line="187">
                Returns a textual description of the type object.                
                <return>
                    ASN.1 textual description.                    
                </return>
            </javadoc>
            <method name="getTypeName" type="String" line="191"/>
            <javadoc line="194">
                This method has been defined to allow the sub-classes
                  of SnmpInt to perform their own control at intialization time.                
            </javadoc>
            <method name="isInitValueValid" type="boolean" line="198">
                <params>
                    <param name="v" type="int"/>
                </params>
                <scope line="199"/>
            </method>
            <javadoc line="204">
                This method has been defined to allow the sub-classes
                  of SnmpInt to perform their own control at intialization time.                
            </javadoc>
            <method name="isInitValueValid" type="boolean" line="208">
                <params>
                    <param name="v" type="long"/>
                </params>
                <scope line="209"/>
            </method>
            <declaration name="name" type="String" line="214"/>
            <javadoc line="214">
                Name of the type.                
            </javadoc>
            <declaration name="value" type="long" line="218"/>
            <javadoc line="218">
                This is where the value is stored. This long is signed.                
                <serial>
                                        
                </serial>
            </javadoc>
        </class>
    </source>