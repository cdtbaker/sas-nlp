<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <import package="com.sun.jmx.snmp.Enumerated"/>
        <class name="SnmpInt" line="33">
            <extends class="SnmpValue"/>
            <comment line="44">
                CONSTRUCTORS
                -------------                
            </comment>
            <comment line="119">
                PUBLIC METHODS
                ---------------                
            </comment>
            <comment line="271">
                VARIABLES
                ----------                
            </comment>
            <javadoc line="33">
                Represents an SNMP integer.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="41"/>
            <javadoc line="45">
                Constructs a new &lt;CODE&gt;SnmpInt&lt;/CODE&gt; from the specified integer value.                
                <param>
                    v The initialization value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified value is smaller than &lt;CODE&gt;Integer.MIN_VALUE&lt;/CODE&gt;
                      or larger than &lt;CODE&gt;Integer.MAX_VALUE&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="SnmpInt" type="constructor" line="51">
                <params>
                    <param name="v" type="int"/>
                </params>
                <scope line="52"/>
            </method>
            <javadoc line="58">
                Constructs a new &lt;CODE&gt;SnmpInt&lt;/CODE&gt; from the specified &lt;CODE&gt;Integer&lt;/CODE&gt; value.                
                <param>
                    v The initialization value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified value is smaller than &lt;CODE&gt;Integer.MIN_VALUE&lt;/CODE&gt;
                      or larger than &lt;CODE&gt;Integer.MAX_VALUE&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="SnmpInt" type="constructor" line="64">
                <params>
                    <param name="v" type="Integer"/>
                </params>
            </method>
            <javadoc line="68">
                Constructs a new &lt;CODE&gt;SnmpInt&lt;/CODE&gt; from the specified long value.                
                <param>
                    v The initialization value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified value is smaller than &lt;CODE&gt;Integer.MIN_VALUE&lt;/CODE&gt;
                      or larger than &lt;CODE&gt;Integer.MAX_VALUE&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="SnmpInt" type="constructor" line="74">
                <params>
                    <param name="v" type="long"/>
                </params>
                <scope line="75"/>
            </method>
            <javadoc line="81">
                Constructs a new &lt;CODE&gt;SnmpInt&lt;/CODE&gt; from the specified &lt;CODE&gt;Long&lt;/CODE&gt; value.                
                <param>
                    v The initialization value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified value is smaller than &lt;CODE&gt;Integer.MIN_VALUE&lt;/CODE&gt;
                      or larger than &lt;CODE&gt;Integer.MAX_VALUE&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="SnmpInt" type="constructor" line="87">
                <params>
                    <param name="v" type="Long"/>
                </params>
            </method>
            <javadoc line="91">
                Constructs a new &lt;CODE&gt;SnmpInt&lt;/CODE&gt; from the specified &lt;CODE&gt;Enumerated&lt;/CODE&gt; value.                
                <param>
                    v The initialization value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified value is smaller than &lt;CODE&gt;Integer.MIN_VALUE&lt;/CODE&gt;
                      or larger than &lt;CODE&gt;Integer.MAX_VALUE&lt;/CODE&gt;.                    
                </exception>
                <see>
                    Enumerated                    
                </see>
            </javadoc>
            <method name="SnmpInt" type="constructor" line="98">
                <params>
                    <param name="v" type="Enumerated"/>
                </params>
            </method>
            <javadoc line="102">
                Constructs a new &lt;CODE&gt;SnmpInt&lt;/CODE&gt; from the specified boolean value.
                  This constructor applies rfc1903 rule:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  TruthValue ::= TEXTUAL-CONVENTION
                  STATUS       current
                  DESCRIPTION
                  &quot;Represents a boolean value.&quot;
                  SYNTAX       INTEGER { true(1), false(2) }
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    v The initialization value.                    
                </param>
            </javadoc>
            <method name="SnmpInt" type="constructor" line="114">
                <params>
                    <param name="v" type="boolean"/>
                </params>
            </method>
            <javadoc line="120">
                Returns the long value of this &lt;CODE&gt;SnmpInt&lt;/CODE&gt;.                
                <return>
                    The value.                    
                </return>
            </javadoc>
            <method name="longValue" type="long" line="124"/>
            <javadoc line="128">
                Converts the integer value to its &lt;CODE&gt;Long&lt;/CODE&gt; form.                
                <return>
                    The &lt;CODE&gt;Long&lt;/CODE&gt; representation of the value.                    
                </return>
            </javadoc>
            <method name="toLong" type="Long" line="132"/>
            <javadoc line="136">
                Converts the integer value to its integer form.                
                <return>
                    The integer representation of the value.                    
                </return>
            </javadoc>
            <method name="intValue" type="int" line="140"/>
            <javadoc line="144">
                Converts the integer value to its &lt;CODE&gt;Integer&lt;/CODE&gt; form.                
                <return>
                    The &lt;CODE&gt;Integer&lt;/CODE&gt; representation of the value.                    
                </return>
            </javadoc>
            <method name="toInteger" type="Integer" line="148"/>
            <javadoc line="152">
                Converts the integer value to its &lt;CODE&gt;String&lt;/CODE&gt; form.                
                <return>
                    The &lt;CODE&gt;String&lt;/CODE&gt; representation of the value.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="156"/>
            <javadoc line="160">
                Converts the integer value to its &lt;CODE&gt;SnmpOid&lt;/CODE&gt; form.                
                <return>
                    The OID representation of the value.                    
                </return>
            </javadoc>
            <method name="toOid" type="SnmpOid" line="164"/>
            <javadoc line="168">
                Extracts the integer from an index OID and returns its
                  value converted as an &lt;CODE&gt;SnmpOid&lt;/CODE&gt;.                
                <param>
                    index The index array.                    
                </param>
                <param>
                    start The position in the index array.                    
                </param>
                <return>
                    The OID representing the integer value.                    
                </return>
                <exception>
                    SnmpStatusException There is no integer value
                      available at the start position.                    
                </exception>
            </javadoc>
            <method name="toOid" type="SnmpOid" line="177">
                <params>
                    <param name="index" type="long[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="178"/>
                <scope line="181"/>
            </method>
            <javadoc line="186">
                Scans an index OID, skips the integer value and returns the position
                  of the next value.                
                <param>
                    index The index array.                    
                </param>
                <param>
                    start The position in the index array.                    
                </param>
                <return>
                    The position of the next value.                    
                </return>
                <exception>
                    SnmpStatusException There is no integer value
                      available at the start position.                    
                </exception>
            </javadoc>
            <method name="nextOid" type="int" line="195">
                <params>
                    <param name="index" type="long[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="196"/>
                <scope line="199"/>
            </method>
            <javadoc line="204">
                Appends an &lt;CODE&gt;SnmpOid&lt;/CODE&gt; representing an &lt;CODE&gt;SnmpInt&lt;/CODE&gt; to another OID.                
                <param>
                    source An OID representing an &lt;CODE&gt;SnmpInt&lt;/CODE&gt; value.                    
                </param>
                <param>
                    dest Where source should be appended.                    
                </param>
            </javadoc>
            <method name="appendToOid" type="void" line="209">
                <params>
                    <param name="source" type="SnmpOid"/>
                    <param name="dest" type="SnmpOid"/>
                </params>
                <scope line="210"/>
            </method>
            <javadoc line="216">
                Performs a clone action. This provides a workaround for the
                  &lt;CODE&gt;SnmpValue&lt;/CODE&gt; interface.                
                <return>
                    The &lt;CODE&gt;SnmpValue&lt;/CODE&gt; clone.                    
                </return>
            </javadoc>
            <method name="duplicate" type="SnmpValue" line="221"/>
            <javadoc line="225">
                Clones the &lt;CODE&gt;SnmpInt&lt;/CODE&gt; object, making a copy of its data.                
                <return>
                    The object clone.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="229">
                <comment line="236">
                    vm bug.                    
                </comment>
                <declaration name="newclone" type="SnmpInt" line="230"/>
                <scope line="231"/>
                <scope line="234"/>
            </method>
            <javadoc line="240">
                Returns a textual description of the type object.                
                <return>
                    ASN.1 textual description.                    
                </return>
            </javadoc>
            <method name="getTypeName" type="String" line="244"/>
            <javadoc line="248">
                This method has been defined to allow the sub-classes
                  of SnmpInt to perform their own control at intialization time.                
            </javadoc>
            <method name="isInitValueValid" type="boolean" line="252">
                <params>
                    <param name="v" type="int"/>
                </params>
                <scope line="253"/>
            </method>
            <javadoc line="259">
                This method has been defined to allow the sub-classes
                  of SnmpInt to perform their own control at intialization time.                
            </javadoc>
            <method name="isInitValueValid" type="boolean" line="263">
                <params>
                    <param name="v" type="long"/>
                </params>
                <scope line="264"/>
            </method>
            <declaration name="name" type="String" line="272"/>
            <javadoc line="272">
                Name of the type.                
            </javadoc>
            <declaration name="value" type="long" line="277"/>
            <javadoc line="277">
                This is where the value is stored. This long is signed.                
                <serial>
                                        
                </serial>
            </javadoc>
        </class>
    </source>