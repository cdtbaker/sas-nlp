<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="com.sun.jmx.mbeanserver.MBeanIntrospector.MBeanInfoMap"/>
        <import package="com.sun.jmx.mbeanserver.MBeanIntrospector.PerInterfaceMap"/>
        <import package="java.lang.annotation.Annotation"/>
        <import package="java.lang.reflect.GenericArrayType"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.ParameterizedType"/>
        <import package="java.lang.reflect.Type"/>
        <import package="javax.management.Descriptor"/>
        <import package="javax.management.ImmutableDescriptor"/>
        <import package="javax.management.MBeanAttributeInfo"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanOperationInfo"/>
        <import package="javax.management.MBeanParameterInfo"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.openmbean.OpenMBeanAttributeInfoSupport"/>
        <import package="javax.management.openmbean.OpenMBeanOperationInfoSupport"/>
        <import package="javax.management.openmbean.OpenMBeanParameterInfo"/>
        <import package="javax.management.openmbean.OpenMBeanParameterInfoSupport"/>
        <import package="javax.management.openmbean.OpenType"/>
        <class name="MXBeanIntrospector" line="49">
            <extends class="MBeanIntrospector">
                <type_params>
                    <type_param name="ConvertingMethod"/>
                </type_params>
            </extends>
            <javadoc line="49">
                Introspector for MXBeans.  There is exactly one instance of this class.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="instance" type="MXBeanIntrospector" line="55"/>
            <method name="getInstance" type="MXBeanIntrospector" line="57"/>
            <method name="getPerInterfaceMap" type="PerInterfaceMap<ConvertingMethod>" line="62"/>
            <method name="getMBeanInfoMap" type="MBeanInfoMap" line="67"/>
            <method name="getAnalyzer" type="MBeanAnalyzer<ConvertingMethod>" line="73">
                <params>
                    <param name="mbeanInterface" type="Class<?>"/>
                </params>
            </method>
            <method name="isMXBean" type="boolean" line="78"/>
            <method name="mFrom" type="ConvertingMethod" line="83">
                <params>
                    <param name="m" type="Method"/>
                </params>
            </method>
            <method name="getName" type="String" line="88">
                <params>
                    <param name="m" type="ConvertingMethod"/>
                </params>
            </method>
            <method name="getGenericReturnType" type="Type" line="93">
                <params>
                    <param name="m" type="ConvertingMethod"/>
                </params>
            </method>
            <method name="getGenericParameterTypes" type="Type[]" line="98">
                <params>
                    <param name="m" type="ConvertingMethod"/>
                </params>
            </method>
            <method name="getSignature" type="String[]" line="103">
                <params>
                    <param name="m" type="ConvertingMethod"/>
                </params>
            </method>
            <method name="checkMethod" type="void" line="108">
                <params>
                    <param name="m" type="ConvertingMethod"/>
                </params>
            </method>
            <method name="invokeM2" type="Object" line="116">
                <params>
                    <param name="m" type="ConvertingMethod"/>
                    <param name="target" type="Object"/>
                    <param name="args" type="Object[]"/>
                    <param name="cookie" type="Object"/>
                </params>
            </method>
            <method name="validParameter" type="boolean" line="122">
                <params>
                    <param name="m" type="ConvertingMethod"/>
                    <param name="value" type="Object"/>
                    <param name="paramNo" type="int"/>
                    <param name="cookie" type="Object"/>
                </params>
                <comment line="125">
                    Null is a valid value for all OpenTypes, even though
                     OpenType.isValue(null) will return false.  It can always be
                     matched to the corresponding Java type, except when that
                     type is primitive.                    
                </comment>
                <comment line="136">
                    Ignore the exception and let MBeanIntrospector.invokeSetter()
                     throw the initial exception.                    
                </comment>
                <scope line="123">
                    <declaration name="t" type="Type" line="128"/>
                </scope>
                <scope line="130">
                    <declaration name="v" type="Object" line="131"/>
                    <scope line="132"/>
                    <scope line="134"/>
                </scope>
            </method>
            <method name="getMBeanAttributeInfo" type="MBeanAttributeInfo" line="145">
                <params>
                    <param name="attributeName" type="String"/>
                    <param name="getter" type="ConvertingMethod"/>
                    <param name="setter" type="ConvertingMethod"/>
                </params>
                <comment line="191">
                    could also consult annotations for defaultValue,
                     minValue, maxValue, legalValues                    
                </comment>
                <declaration name="isReadable" type="boolean" line="147"/>
                <declaration name="isWritable" type="boolean" line="148"/>
                <declaration name="isIs" type="boolean" line="149"/>
                <declaration name="description" type="String" line="151"/>
                <declaration name="openType" type="OpenType&lt;?&gt;" line="153"/>
                <declaration name="originalType" type="Type" line="154"/>
                <scope line="155"/>
                <scope line="158"/>
                <declaration name="descriptor" type="Descriptor" line="162"/>
                <scope line="163"/>
                <scope line="167"/>
                <declaration name="ai" type="MBeanAttributeInfo" line="172"/>
                <scope line="173"/>
                <scope line="181"/>
            </method>
            <method name="getMBeanOperationInfo" type="MBeanOperationInfo" line="198">
                <params>
                    <param name="operationName" type="String"/>
                    <param name="operation" type="ConvertingMethod"/>
                </params>
                <comment line="202">
                    Ideally this would be an empty string, but
                    OMBOperationInfo constructor forbids that.  Also, we
                    could consult an annotation to get a useful                    
                </comment>
                <comment line="250">
                    If the return value and all the parameters can be faithfully
                     represented as OpenType then we return an OpenMBeanOperationInfo.
                     If any of them is a primitive type, we can&apos;t.  Compatibility
                     with JSR 174 means that we must return an MBeanInfo where
                     the getType() is the primitive type, not its wrapped type as
                     we would get with an OpenMBeanInfo.  The OpenType is available
                     in the Descriptor in either case.                    
                </comment>
                <declaration name="method" type="Method" line="199"/>
                <declaration name="description" type="String" line="200"/>
                <declaration name="impact" type="int" line="206"/>
                <declaration name="returnType" type="OpenType&lt;?&gt;" line="208"/>
                <declaration name="originalReturnType" type="Type" line="209"/>
                <declaration name="paramTypes" type="OpenType&lt;?&gt;[]" line="210"/>
                <declaration name="originalParamTypes" type="Type[]" line="211"/>
                <declaration name="params" type="MBeanParameterInfo[]" line="212"/>
                <declaration name="openReturnType" type="boolean" line="214"/>
                <declaration name="openParameterTypes" type="boolean" line="215"/>
                <declaration name="annots" type="Annotation[][]" line="216"/>
                <scope line="217">
                    <declaration name="paramName" type="String" line="218"/>
                    <declaration name="paramDescription" type="String" line="219"/>
                    <declaration name="openType" type="OpenType&lt;?&gt;" line="220"/>
                    <declaration name="originalType" type="Type" line="221"/>
                    <declaration name="descriptor" type="Descriptor" line="222"/>
                    <declaration name="pi" type="MBeanParameterInfo" line="226"/>
                    <scope line="227"/>
                    <scope line="232"/>
                </scope>
                <declaration name="descriptor" type="Descriptor" line="243"/>
                <declaration name="oi" type="MBeanOperationInfo" line="247"/>
                <scope line="248">
                    <declaration name="oparams" type="OpenMBeanParameterInfo[]" line="257"/>
                </scope>
                <scope line="266"/>
            </method>
            <method name="getBasicMBeanDescriptor" type="Descriptor" line="281"/>
            <method name="getMBeanDescriptor" type="Descriptor" line="287">
                <params>
                    <param name="resourceClass" type="Class<?>"/>
                </params>
                <comment line="289">
                    We already have immutableInfo=true in the Descriptor
                     included in the MBeanInfo for the MXBean interface.  This
                     method is being called for the MXBean class to add any
                     new items beyond those in the interface Descriptor, which
                     currently it does not.                    
                </comment>
            </method>
            <method name="typeDescriptor" type="Descriptor" line="298">
                <params>
                    <param name="openType" type="OpenType<?>"/>
                    <param name="originalType" type="Type"/>
                </params>
            </method>
            <javadoc line="306">
                &lt;p&gt;True if this type can be faithfully represented in an
                  OpenMBeanInfo.&lt;/p&gt;
                  &lt;p&gt;Compatibility with JSR 174 means that primitive types must be
                  represented by an MBeanInfo whose getType() is the primitive type
                  string, e.g. &quot;int&quot;.  If we used an OpenMBeanInfo then this string
                  would be the wrapped type, e.g. &quot;java.lang.Integer&quot;.&lt;/p&gt;
                  &lt;p&gt;Compatibility with JMX 1.2 (including J2SE 5.0) means that arrays
                  of primitive types cannot use an ArrayType representing an array of
                  primitives, because that didn&apos;t exist in JMX 1.2.&lt;/p&gt;                
            </javadoc>
            <method name="canUseOpenInfo" type="boolean" line="319">
                <params>
                    <param name="type" type="Type"/>
                </params>
                <scope line="320"/>
                <scope line="323"/>
            </method>
            <method name="originalTypeString" type="String" line="330">
                <params>
                    <param name="type" type="Type"/>
                </params>
            </method>
            <method name="typeName" type="String" line="337">
                <params>
                    <param name="type" type="Type"/>
                </params>
                <scope line="338">
                    <declaration name="c" type="Class&lt;?&gt;" line="339"/>
                </scope>
                <scope line="344">
                    <declaration name="gat" type="GenericArrayType" line="345"/>
                </scope>
                <scope line="347">
                    <declaration name="pt" type="ParameterizedType" line="348"/>
                    <declaration name="sb" type="StringBuilder" line="349"/>
                    <declaration name="sep" type="String" line="351"/>
                    <scope line="352"/>
                </scope>
            </method>
            <declaration name="perInterfaceMap" type="PerInterfaceMap&lt;ConvertingMethod&gt;" line="361"/>
            <declaration name="mbeanInfoMap" type="MBeanInfoMap" line="364"/>
        </class>
    </source>