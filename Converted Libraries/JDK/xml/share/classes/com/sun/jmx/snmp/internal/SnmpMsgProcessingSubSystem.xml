<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.internal">
        <import package="java.util.Vector"/>
        <import package="com.sun.jmx.snmp.SnmpMsg"/>
        <import package="com.sun.jmx.snmp.SnmpParams"/>
        <import package="com.sun.jmx.snmp.SnmpPdu"/>
        <import package="com.sun.jmx.snmp.SnmpVarBind"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <import package="com.sun.jmx.snmp.SnmpTooBigException"/>
        <import package="com.sun.jmx.snmp.SnmpPduFactory"/>
        <import package="com.sun.jmx.snmp.SnmpSecurityParameters"/>
        <import package="com.sun.jmx.snmp.SnmpUnknownMsgProcModelException"/>
        <interface name="SnmpMsgProcessingSubSystem">
            <implements interface="SnmpSubSystem"/>
            <javadoc line="12">
                Message processing sub system interface. To allow engine integration, a message processing sub system must implement this interface. This sub system is called by the dispatcher when receiving or sending calls.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setSecuritySubSystem" type="void" line="19"/>
            <javadoc line="19">
                Attaches the security sub system to this sub system. Message processing model are making usage of various security sub systems. This direct attachement avoid the need of accessing the engine to retrieve the Security sub system.                
                <param>
                    security The security sub system.                    
                </param>
            </javadoc>
            <method name="getSecuritySubSystem" type="SnmpSecuritySubSystem" line="24"/>
            <javadoc line="24">
                Gets the attached security sub system.                
                <return>
                    The security sub system.                    
                </return>
            </javadoc>
            <method name="getIncomingRequest" type="SnmpIncomingRequest" line="29"/>
            <javadoc line="29">
                This method is called when a call is received from the network.                
                <param>
                    model The model ID.                    
                </param>
                <param>
                    factory The pdu factory to use to encode and decode pdu.                    
                </param>
                <return>
                    The object that will handle every steps of the receiving (mainly unmarshalling and security).                    
                </return>
            </javadoc>
            <method name="getOutgoingRequest" type="SnmpOutgoingRequest" line="36"/>
            <javadoc line="36">
                This method is called when a call is to be sent to the network. The sub system routes the call to the dedicated model according to the model ID.                
                <param>
                    model The model ID.                    
                </param>
                <param>
                    factory The pdu factory to use to encode and decode pdu.                    
                </param>
                <return>
                    The object that will handle every steps of the sending (mainly marshalling and security).                    
                </return>
            </javadoc>
            <method name="getRequestPdu" type="SnmpPdu" line="43"/>
            <javadoc line="43">
                This method is called to instantiate a pdu according to the passed pdu type and parameters. The sub system routes the call to the dedicated model according to the model ID.                
                <param>
                    model The model ID.                    
                </param>
                <param>
                    p The request parameters.                    
                </param>
                <param>
                    type The pdu type.                    
                </param>
                <return>
                    The pdu.                    
                </return>
            </javadoc>
            <method name="getIncomingResponse" type="SnmpIncomingResponse" line="51"/>
            <javadoc line="51">
                This method is called when a call is received from the network. The sub system routes the call to the dedicated model according to the model ID.                
                <param>
                    model The model ID.                    
                </param>
                <param>
                    factory The pdu factory to use to decode pdu.                    
                </param>
                <return>
                    The object that will handle every steps of the receiving (mainly marshalling and security).                    
                </return>
            </javadoc>
            <method name="encode" type="int" line="58"/>
            <javadoc line="58">
                This method is called to encode a full scoped pdu that as not been encrypted. &lt;CODE&gt;contextName&lt;/CODE&gt;, &lt;CODE&gt;contextEngineID&lt;/CODE&gt; and data are known. It will be routed to the dedicated model according to the version value.
                  &lt;BR&gt;The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).                
                <param>
                    version The SNMP protocol version.                    
                </param>
                <param>
                    msgID The SNMP message ID.                    
                </param>
                <param>
                    msgMaxSize The max message size.                    
                </param>
                <param>
                    msgFlags The message flags.                    
                </param>
                <param>
                    msgSecurityModel The message security model.                    
                </param>
                <param>
                    params The security parameters.                    
                </param>
                <param>
                    contextEngineID The context engine ID.                    
                </param>
                <param>
                    contextName The context name.                    
                </param>
                <param>
                    data The encoded data.                    
                </param>
                <param>
                    dataLength The encoded data length.                    
                </param>
                <param>
                    outputBytes The buffer containing the encoded message.                    
                </param>
                <return>
                    The encoded bytes number.                    
                </return>
            </javadoc>
            <method name="encodePriv" type="int" line="75"/>
            <javadoc line="75">
                This method is called to encode a full scoped pdu that as been encrypted. &lt;CODE&gt;contextName&lt;/CODE&gt;, &lt;CODE&gt;contextEngineID&lt;/CODE&gt; and data are not known. It will be routed to the dedicated model according to the version value.
                  &lt;BR&gt;The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).                
                <param>
                    version The SNMP protocol version.                    
                </param>
                <param>
                    msgID The SNMP message ID.                    
                </param>
                <param>
                    msgMaxSize The max message size.                    
                </param>
                <param>
                    msgFlags The message flags.                    
                </param>
                <param>
                    msgSecurityModel The message security model.                    
                </param>
                <param>
                    params The security parameters.                    
                </param>
                <param>
                    encryptedPdu The encrypted pdu.                    
                </param>
                <param>
                    outputBytes The buffer containing the encoded message.                    
                </param>
                <return>
                    The encoded bytes number.                    
                </return>
            </javadoc>
            <method name="decode" type="SnmpDecryptedPdu" line="89"/>
            <javadoc line="89">
                This method returns a decoded scoped pdu. This method decodes only the &lt;CODE&gt;contextEngineID&lt;/CODE&gt;, &lt;CODE&gt;contextName&lt;/CODE&gt; and data. It is needed by the &lt;CODE&gt;SnmpSecurityModel&lt;/CODE&gt; after decryption. It will be routed to the dedicated model according to the version value.                
                <param>
                    version The SNMP protocol version.                    
                </param>
                <param>
                    pdu The encoded pdu.                    
                </param>
                <return>
                    the partialy scoped pdu.                    
                </return>
            </javadoc>
            <method name="encode" type="int" line="96"/>
            <javadoc line="96">
                This method returns an encoded scoped pdu. This method encodes only the &lt;CODE&gt;contextEngineID&lt;/CODE&gt;, &lt;CODE&gt;contextName&lt;/CODE&gt; and data. It is needed by the &lt;CODE&gt;SnmpSecurityModel&lt;/CODE&gt; for decryption. It will be routed to the dedicated model according to the version value.                
                <param>
                    version The SNMP protocol version.                    
                </param>
                <param>
                    pdu The pdu to encode.                    
                </param>
                <param>
                    outputBytes The partialy scoped pdu.                    
                </param>
                <return>
                    The encoded bytes number.                    
                </return>
            </javadoc>
        </interface>
    </source>