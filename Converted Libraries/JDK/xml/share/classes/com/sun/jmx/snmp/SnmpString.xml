<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <import package="java.net.InetAddress"/>
        <import package="java.net.UnknownHostException"/>
        <class name="SnmpString" line="4">
            <extends class="SnmpValue"/>
            <javadoc line="4">
                Represents an SNMP string.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="10"/>
            <javadoc line="11">
                Constructs a new empty &lt;CODE&gt;SnmpString&lt;/CODE&gt;.                
            </javadoc>
            <method name="SnmpString" type="constructor" line="14"/>
            <javadoc line="17">
                Constructs a new &lt;CODE&gt;SnmpString&lt;/CODE&gt; from the specified bytes array.                
                <param>
                    v The bytes composing the string value.                    
                </param>
            </javadoc>
            <method name="SnmpString" type="constructor" line="21">
                <params>
                    <param name="v" type="byte[]"/>
                </params>
            </method>
            <javadoc line="24">
                Constructs a new &lt;CODE&gt;SnmpString&lt;/CODE&gt; from the specified &lt;CODE&gt;Bytes&lt;/CODE&gt; array.                
                <param>
                    v The <CODE>Bytes</CODE> composing the string value.                    
                </param>
            </javadoc>
            <method name="SnmpString" type="constructor" line="28">
                <params>
                    <param name="v" type="Byte[]"/>
                </params>
                <scope line="30"/>
            </method>
            <javadoc line="34">
                Constructs a new &lt;CODE&gt;SnmpString&lt;/CODE&gt; from the specified &lt;CODE&gt;String&lt;/CODE&gt; value.                
                <param>
                    v The initialization value.                    
                </param>
            </javadoc>
            <method name="SnmpString" type="constructor" line="38">
                <params>
                    <param name="v" type="String"/>
                </params>
            </method>
            <javadoc line="41">
                Constructs a new &lt;CODE&gt;SnmpString&lt;/CODE&gt; from the specified &lt;CODE&gt; InetAddress &lt;/Code&gt;.                
                <param>
                    address The <CODE>InetAddress </CODE>.                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="SnmpString" type="constructor" line="46">
                <params>
                    <param name="address" type="InetAddress"/>
                </params>
            </method>
            <javadoc line="49">
                Converts the string value to its &lt;CODE&gt; InetAddress &lt;/CODE&gt; form.                
                <return>
                    an {@link InetAddress} defined by the string value.                    
                </return>
                <exception>
                    UnknownHostException If string value is not a legal address format.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="inetAddressValue" type="InetAddress" line="55"/>
            <javadoc line="58">
                Converts the specified binary string into a character string.                
                <param>
                    bin The binary string value to convert.                    
                </param>
                <return>
                    The character string representation.                    
                </return>
            </javadoc>
            <method name="BinToChar" type="String" line="63">
                <params>
                    <param name="bin" type="String"/>
                </params>
                <declaration name="value" type="char" line="64"/>
                <declaration name="binLength" type="int" line="65"/>
            </method>
            <javadoc line="69">
                Converts the specified hexadecimal string into a character string.                
                <param>
                    hex The hexadecimal string value to convert.                    
                </param>
                <return>
                    The character string representation.                    
                </return>
            </javadoc>
            <method name="HexToChar" type="String" line="74">
                <params>
                    <param name="hex" type="String"/>
                </params>
                <declaration name="value" type="char" line="75"/>
                <declaration name="hexLength" type="int" line="76"/>
            </method>
            <javadoc line="80">
                Returns the bytes array of this &lt;CODE&gt;SnmpString&lt;/CODE&gt;.                
                <return>
                    The value.                    
                </return>
            </javadoc>
            <method name="byteValue" type="byte[]" line="84"/>
            <javadoc line="87">
                Converts the string value to its array of &lt;CODE&gt;Bytes&lt;/CODE&gt; form.                
                <return>
                    The array of <CODE>Bytes</CODE> representation of the value.                    
                </return>
            </javadoc>
            <method name="toByte" type="Byte[]" line="91">
                <declaration name="result" type="Byte[]" line="92"/>
                <scope line="93"/>
            </method>
            <javadoc line="98">
                Converts the string value to its &lt;CODE&gt;String&lt;/CODE&gt; form.                
                <return>
                    The <CODE>String</CODE> representation of the value.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="102"/>
            <javadoc line="105">
                Converts the string value to its &lt;CODE&gt;SnmpOid&lt;/CODE&gt; form.                
                <return>
                    The OID representation of the value.                    
                </return>
            </javadoc>
            <method name="toOid" type="SnmpOid" line="109">
                <declaration name="ids" type="long[]" line="110"/>
                <scope line="111"/>
            </method>
            <javadoc line="116">
                Extracts the string from an index OID and returns its
                  value converted as an &lt;CODE&gt;SnmpOid&lt;/CODE&gt;.                
                <param>
                    index The index array.                    
                </param>
                <param>
                    start The position in the index array.                    
                </param>
                <return>
                    The OID representing the string value.                    
                </return>
                <exception>
                    SnmpStatusException There is no string value
                      available at the start position.                    
                </exception>
            </javadoc>
            <method name="toOid" type="SnmpOid" line="125">
                <params>
                    <param name="index" type="long[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="126">
                    <scope line="127"/>
                    <declaration name="strLen" type="int" line="130"/>
                    <declaration name="ids" type="long[]" line="131"/>
                    <scope line="132"/>
                </scope>
                <scope line="137"/>
            </method>
            <javadoc line="141">
                Scans an index OID, skips the string value and returns the position
                  of the next value.                
                <param>
                    index The index array.                    
                </param>
                <param>
                    start The position in the index array.                    
                </param>
                <return>
                    The position of the next value.                    
                </return>
                <exception>
                    SnmpStatusException There is no string value
                      available at the start position.                    
                </exception>
            </javadoc>
            <method name="nextOid" type="int" line="150">
                <params>
                    <param name="index" type="long[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="151">
                    <scope line="152"/>
                    <declaration name="strLen" type="int" line="155"/>
                    <scope line="157"/>
                    <scope line="160"/>
                </scope>
                <scope line="164"/>
            </method>
            <javadoc line="168">
                Appends an &lt;CODE&gt;SnmpOid&lt;/CODE&gt; representing an &lt;CODE&gt;SnmpString&lt;/CODE&gt; to another OID.                
                <param>
                    source An OID representing an <CODE>SnmpString</CODE> value.                    
                </param>
                <param>
                    dest Where source should be appended.                    
                </param>
            </javadoc>
            <method name="appendToOid" type="void" line="173">
                <params>
                    <param name="source" type="SnmpOid"/>
                    <param name="dest" type="SnmpOid"/>
                </params>
            </method>
            <javadoc line="177">
                Performs a clone action. This provides a workaround for the
                  &lt;CODE&gt;SnmpValue&lt;/CODE&gt; interface.                
                <return>
                    The SnmpValue clone.                    
                </return>
            </javadoc>
            <method name="duplicate" type="SnmpValue" line="182"/>
            <javadoc line="185">
                Clones the &lt;CODE&gt;SnmpString&lt;/CODE&gt; object, making a copy of its data.                
                <return>
                    The object clone.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="189">
                <declaration name="newclone" type="SnmpString" line="190"/>
                <scope line="191"/>
                <scope line="196"/>
            </method>
            <javadoc line="201">
                Returns a textual description of the type object.                
                <return>
                    ASN.1 textual description.                    
                </return>
            </javadoc>
            <method name="getTypeName" type="String" line="205"/>
            <declaration name="name" type="String" line="208"/>
            <javadoc line="208">
                Name of the type.                
            </javadoc>
            <declaration name="value" type="byte[]" line="212"/>
            <javadoc line="212">
                This is the bytes array of the string value.                
                <serial>
                                        
                </serial>
            </javadoc>
        </class>
    </source>