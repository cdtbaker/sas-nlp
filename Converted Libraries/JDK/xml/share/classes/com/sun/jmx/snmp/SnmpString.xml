<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <import package="java.net.InetAddress"/>
        <import package="java.net.UnknownHostException"/>
        <class name="SnmpString" line="32">
            <extends class="SnmpValue"/>
            <comment line="43">
                CONSTRUCTORS                
            </comment>
            <comment line="44">
                -------------                
            </comment>
            <comment line="89">
                PUBLIC METHODS                
            </comment>
            <comment line="90">
                ---------------                
            </comment>
            <comment line="267">
                VARIABLES                
            </comment>
            <comment line="268">
                ----------                
            </comment>
            <javadoc line="32">
                Represents an SNMP string.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="40"/>
            <javadoc line="44">
                Constructs a new empty &lt;CODE&gt;SnmpString&lt;/CODE&gt;.                
            </javadoc>
            <method name="SnmpString" type="constructor" line="47"/>
            <javadoc line="51">
                Constructs a new &lt;CODE&gt;SnmpString&lt;/CODE&gt; from the specified bytes array.                
                <param>
                    v The bytes composing the string value.                    
                </param>
            </javadoc>
            <method name="SnmpString" type="constructor" line="55">
                <params>
                    <param name="v" type="byte[]"/>
                </params>
            </method>
            <javadoc line="59">
                Constructs a new &lt;CODE&gt;SnmpString&lt;/CODE&gt; from the specified &lt;CODE&gt;Bytes&lt;/CODE&gt; array.                
                <param>
                    v The <CODE>Bytes</CODE> composing the string value.                    
                </param>
            </javadoc>
            <method name="SnmpString" type="constructor" line="63">
                <params>
                    <param name="v" type="Byte[]"/>
                </params>
                <scope line="65"/>
            </method>
            <javadoc line="70">
                Constructs a new &lt;CODE&gt;SnmpString&lt;/CODE&gt; from the specified &lt;CODE&gt;String&lt;/CODE&gt; value.                
                <param>
                    v The initialization value.                    
                </param>
            </javadoc>
            <method name="SnmpString" type="constructor" line="74">
                <params>
                    <param name="v" type="String"/>
                </params>
            </method>
            <javadoc line="78">
                Constructs a new &lt;CODE&gt;SnmpString&lt;/CODE&gt; from the specified &lt;CODE&gt; InetAddress &lt;/Code&gt;.                
                <param>
                    address The <CODE>InetAddress </CODE>.                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="SnmpString" type="constructor" line="84">
                <params>
                    <param name="address" type="InetAddress"/>
                </params>
            </method>
            <javadoc line="91">
                Converts the string value to its &lt;CODE&gt; InetAddress &lt;/CODE&gt; form.                
                <return>
                    an {@link InetAddress} defined by the string value.                    
                </return>
                <exception>
                    UnknownHostException If string value is not a legal address format.                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="inetAddressValue" type="InetAddress" line="98"/>
            <javadoc line="102">
                Converts the specified binary string into a character string.                
                <param>
                    bin The binary string value to convert.                    
                </param>
                <return>
                    The character string representation.                    
                </return>
            </javadoc>
            <method name="BinToChar" type="String" line="107">
                <params>
                    <param name="bin" type="String"/>
                </params>
                <declaration name="value" type="char" line="108"/>
                <declaration name="binLength" type="int" line="109"/>
            </method>
            <javadoc line="115">
                Converts the specified hexadecimal string into a character string.                
                <param>
                    hex The hexadecimal string value to convert.                    
                </param>
                <return>
                    The character string representation.                    
                </return>
            </javadoc>
            <method name="HexToChar" type="String" line="120">
                <params>
                    <param name="hex" type="String"/>
                </params>
                <declaration name="value" type="char" line="121"/>
                <declaration name="hexLength" type="int" line="122"/>
            </method>
            <javadoc line="128">
                Returns the bytes array of this &lt;CODE&gt;SnmpString&lt;/CODE&gt;.                
                <return>
                    The value.                    
                </return>
            </javadoc>
            <method name="byteValue" type="byte[]" line="132"/>
            <javadoc line="136">
                Converts the string value to its array of &lt;CODE&gt;Bytes&lt;/CODE&gt; form.                
                <return>
                    The array of <CODE>Bytes</CODE> representation of the value.                    
                </return>
            </javadoc>
            <method name="toByte" type="Byte[]" line="140">
                <declaration name="result" type="Byte[]" line="141"/>
                <scope line="142"/>
            </method>
            <javadoc line="148">
                Converts the string value to its &lt;CODE&gt;String&lt;/CODE&gt; form.                
                <return>
                    The <CODE>String</CODE> representation of the value.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="152"/>
            <javadoc line="156">
                Converts the string value to its &lt;CODE&gt;SnmpOid&lt;/CODE&gt; form.                
                <return>
                    The OID representation of the value.                    
                </return>
            </javadoc>
            <method name="toOid" type="SnmpOid" line="160">
                <declaration name="ids" type="long[]" line="161"/>
                <scope line="162"/>
            </method>
            <javadoc line="168">
                Extracts the string from an index OID and returns its
                  value converted as an &lt;CODE&gt;SnmpOid&lt;/CODE&gt;.                
                <param>
                    index The index array.                    
                </param>
                <param>
                    start The position in the index array.                    
                </param>
                <return>
                    The OID representing the string value.                    
                </return>
                <exception>
                    SnmpStatusException There is no string value
                      available at the start position.                    
                </exception>
            </javadoc>
            <method name="toOid" type="SnmpOid" line="177">
                <params>
                    <param name="index" type="long[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="178">
                    <scope line="179"/>
                    <declaration name="strLen" type="int" line="182"/>
                    <declaration name="ids" type="long[]" line="183"/>
                    <scope line="184"/>
                </scope>
                <scope line="189"/>
            </method>
            <javadoc line="194">
                Scans an index OID, skips the string value and returns the position
                  of the next value.                
                <param>
                    index The index array.                    
                </param>
                <param>
                    start The position in the index array.                    
                </param>
                <return>
                    The position of the next value.                    
                </return>
                <exception>
                    SnmpStatusException There is no string value
                      available at the start position.                    
                </exception>
            </javadoc>
            <method name="nextOid" type="int" line="203">
                <params>
                    <param name="index" type="long[]"/>
                    <param name="start" type="int"/>
                </params>
                <scope line="204">
                    <scope line="205"/>
                    <declaration name="strLen" type="int" line="208"/>
                    <scope line="210"/>
                    <scope line="213"/>
                </scope>
                <scope line="217"/>
            </method>
            <javadoc line="222">
                Appends an &lt;CODE&gt;SnmpOid&lt;/CODE&gt; representing an &lt;CODE&gt;SnmpString&lt;/CODE&gt; to another OID.                
                <param>
                    source An OID representing an <CODE>SnmpString</CODE> value.                    
                </param>
                <param>
                    dest Where source should be appended.                    
                </param>
            </javadoc>
            <method name="appendToOid" type="void" line="227">
                <params>
                    <param name="source" type="SnmpOid"/>
                    <param name="dest" type="SnmpOid"/>
                </params>
            </method>
            <javadoc line="232">
                Performs a clone action. This provides a workaround for the
                  &lt;CODE&gt;SnmpValue&lt;/CODE&gt; interface.                
                <return>
                    The SnmpValue clone.                    
                </return>
            </javadoc>
            <method name="duplicate" type="SnmpValue" line="237"/>
            <javadoc line="241">
                Clones the &lt;CODE&gt;SnmpString&lt;/CODE&gt; object, making a copy of its data.                
                <return>
                    The object clone.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="245">
                <comment line="253">
                    vm bug.                    
                </comment>
                <declaration name="newclone" type="SnmpString" line="246"/>
                <scope line="248"/>
                <scope line="252"/>
            </method>
            <javadoc line="258">
                Returns a textual description of the type object.                
                <return>
                    ASN.1 textual description.                    
                </return>
            </javadoc>
            <method name="getTypeName" type="String" line="262"/>
            <declaration name="name" type="String" line="268"/>
            <javadoc line="268">
                Name of the type.                
            </javadoc>
            <declaration name="value" type="byte[]" line="273"/>
            <javadoc line="273">
                This is the bytes array of the string value.                
                <serial>
                                        
                </serial>
            </javadoc>
        </class>
    </source>