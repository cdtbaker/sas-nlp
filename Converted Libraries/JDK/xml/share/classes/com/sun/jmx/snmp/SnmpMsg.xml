<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <import package="com.sun.jmx.snmp.SnmpSecurityParameters"/>
        <import package="java.util.Vector"/>
        <import package="java.net.InetAddress"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <class name="SnmpMsg" line="36">
            <implements interface="SnmpDefinitions"/>
            <javadoc line="36">
                A partially decoded representation of an SNMP packet. It contains
                  the information contained in any SNMP message (SNMPv1, SNMPv2 or
                  SNMPv3).
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="version" type="int" line="45"/>
            <javadoc line="45">
                The protocol version.
                  &lt;P&gt;&lt;CODE&gt;decodeMessage&lt;/CODE&gt; and &lt;CODE&gt;encodeMessage&lt;/CODE&gt; do not
                  perform any check on this value.
                  &lt;BR&gt;&lt;CODE&gt;decodeSnmpPdu&lt;/CODE&gt; and &lt;CODE&gt;encodeSnmpPdu&lt;/CODE&gt; only
                  accept  the values 0 (for SNMPv1), 1 (for SNMPv2) and 3 (for SNMPv3).                
            </javadoc>
            <declaration name="data" type="byte[]" line="54"/>
            <javadoc line="54">
                Encoding of the PDU.
                  &lt;P&gt;This is usually the BER encoding of the PDU&apos;s syntax
                  defined in RFC1157 and RFC1902. However, this can be authenticated
                  or encrypted data (but you need to implemented your own
                  &lt;CODE&gt;SnmpPduFactory&lt;/CODE&gt; class).                
            </javadoc>
            <declaration name="dataLength" type="int" line="63"/>
            <javadoc line="63">
                Number of useful bytes in the &lt;CODE&gt;data&lt;/CODE&gt; field.                
            </javadoc>
            <declaration name="address" type="InetAddress" line="68"/>
            <javadoc line="68">
                Source or destination address.
                  &lt;BR&gt;For an incoming message it&apos;s the source.
                  For an outgoing message it&apos;s the destination.                
            </javadoc>
            <declaration name="port" type="int" line="75"/>
            <javadoc line="75">
                Source or destination port.
                  &lt;BR&gt;For an incoming message it&apos;s the source.
                  For an outgoing message it&apos;s the destination.                
            </javadoc>
            <declaration name="securityParameters" type="SnmpSecurityParameters" line="81"/>
            <javadoc line="81">
                Security parameters. Contain informations according to Security Model (Usm, community string based, ...).                
            </javadoc>
            <javadoc line="85">
                Returns the encoded SNMP version present in the passed byte array.                
                <param>
                    data The unmarshalled SNMP message.                    
                </param>
                <return>
                    The SNMP version (0, 1 or 3).                    
                </return>
            </javadoc>
            <method name="getProtocolVersion" type="int" line="91">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="version" type="int" line="92"/>
                <declaration name="bdec" type="BerDecoder" line="93"/>
                <scope line="94"/>
                <scope line="99"/>
                <scope line="102"/>
                <scope line="105"/>
            </method>
            <method name="getRequestId" type="int" line="110"/>
            <javadoc line="110">
                Returns the associated request ID.                
                <param>
                    data The flat message.                    
                </param>
                <return>
                    The request ID.                    
                </return>
            </javadoc>
            <method name="encodeMessage" type="int" line="117"/>
            <javadoc line="117">
                Encodes this message and puts the result in the specified byte array.
                  For internal use only.                
                <param>
                    outputBytes An array to receive the resulting encoding.                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException If the result does not fit
                      into the specified array.                    
                </exception>
            </javadoc>
            <method name="decodeMessage" type="void" line="129"/>
            <javadoc line="129">
                Decodes the specified bytes and initializes this message.
                  For internal use only.                
                <param>
                    inputBytes The bytes to be decoded.                    
                </param>
                <exception>
                    SnmpStatusException If the specified bytes are not a valid encoding.                    
                </exception>
            </javadoc>
            <method name="encodeSnmpPdu" type="void" line="140"/>
            <javadoc line="140">
                Initializes this message with the specified &lt;CODE&gt;pdu&lt;/CODE&gt;.
                  &lt;P&gt;
                  This method initializes the data field with an array of
                  &lt;CODE&gt;maxDataLength&lt;/CODE&gt; bytes. It encodes the &lt;CODE&gt;pdu&lt;/CODE&gt;.
                  The resulting encoding is stored in the data field
                  and the length of the encoding is stored in &lt;CODE&gt;dataLength&lt;/CODE&gt;.
                  &lt;p&gt;
                  If the encoding length exceeds &lt;CODE&gt;maxDataLength&lt;/CODE&gt;,
                  the method throws an exception.                
                <param>
                    pdu The PDU to be encoded.                    
                </param>
                <param>
                    maxDataLength The maximum length permitted for the data field.                    
                </param>
                <exception>
                    SnmpStatusException If the specified <CODE>pdu</CODE> is not valid.                    
                </exception>
                <exception>
                    SnmpTooBigException If the resulting encoding does not fit
                      into <CODE>maxDataLength</CODE> bytes.                    
                </exception>
                <exception>
                    ArrayIndexOutOfBoundsException If the encoding exceeds <CODE>maxDataLength</CODE>.                    
                </exception>
            </javadoc>
            <method name="decodeSnmpPdu" type="SnmpPdu" line="163"/>
            <javadoc line="163">
                Gets the PDU encoded in this message.
                  &lt;P&gt;
                  This method decodes the data field and returns the resulting PDU.                
                <return>
                    The resulting PDU.                    
                </return>
                <exception>
                    SnmpStatusException If the encoding is not valid.                    
                </exception>
            </javadoc>
            <javadoc line="174">
                Dumps the content of a byte buffer using hexadecimal form.                
                <param>
                    b The buffer to dump.                    
                </param>
                <param>
                    offset The position of the first byte to be dumped.                    
                </param>
                <param>
                    len The number of bytes to be dumped starting from offset.                    
                </param>
                <return>
                    The string containing the dump.                    
                </return>
            </javadoc>
            <method name="dumpHexBuffer" type="String" line="183">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="184"/>
                <declaration name="k" type="int" line="185"/>
                <declaration name="flen" type="int" line="186"/>
                <scope line="188">
                    <declaration name="j" type="int" line="189"/>
                    <scope line="193"/>
                </scope>
            </method>
            <javadoc line="202">
                Dumps this message in a string.                
                <return>
                    The string containing the dump.                    
                </return>
            </javadoc>
            <method name="printMessage" type="String" line="207">
                <declaration name="sb" type="StringBuffer" line="208"/>
                <scope line="212"/>
                <scope line="215"/>
            </method>
            <javadoc line="224">
                For SNMP Runtime private use only.                
            </javadoc>
            <method name="encodeVarBindList" type="void" line="229">
                <params>
                    <param name="benc" type="BerEncoder"/>
                    <param name="varBindList" type="SnmpVarBind[]"/>
                </params>
                <comment line="230">
                                        
                </comment>
                <comment line="231">
                    Remember: the encoder does backward encoding                    
                </comment>
                <comment line="232">
                                        
                </comment>
                <declaration name="encodedVarBindCount" type="int" line="233"/>
                <scope line="234">
                    <scope line="236">
                        <scope line="237">
                            <declaration name="bind" type="SnmpVarBind" line="238"/>
                            <scope line="239"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="250"/>
            </method>
            <javadoc line="255">
                For SNMP Runtime private use only.                
            </javadoc>
            <method name="encodeVarBindValue" type="void" line="259">
                <params>
                    <param name="benc" type="BerEncoder"/>
                    <param name="v" type="SnmpValue"/>
                </params>
                <scope line="260"/>
                <scope line="263"/>
                <scope line="266"/>
                <scope line="269"/>
                <scope line="272"/>
                <scope line="275"/>
                <scope line="278"/>
                <scope line="281"/>
                <scope line="284"/>
                <scope line="287">
                    <scope line="288"/>
                </scope>
                <scope line="293">
                    <declaration name="tag" type="int" line="294"/>
                    <scope line="295"/>
                    <scope line="302"/>
                </scope>
                <scope line="307"/>
            </method>
            <javadoc line="314">
                For SNMP Runtime private use only.                
            </javadoc>
            <method name="decodeVarBindList" type="SnmpVarBind[]" line="318">
                <params>
                    <param name="bdec" type="BerDecoder"/>
                </params>
                <declaration name="tmp" type="Vector&lt;SnmpVarBind&gt;" line="320"/>
                <scope line="321">
                    <declaration name="bind" type="SnmpVarBind" line="322"/>
                </scope>
                <declaration name="varBindList" type="SnmpVarBind[]" line="330"/>
            </method>
            <javadoc line="336">
                For SNMP Runtime private use only.                
            </javadoc>
            <method name="decodeVarBindValue" type="SnmpValue" line="340">
                <params>
                    <param name="bdec" type="BerDecoder"/>
                </params>
                <comment line="344">
                    bugId 4641696 : RuntimeExceptions must be transformed in                    
                </comment>
                <comment line="345">
                    BerException.                    
                </comment>
                <comment line="348">
                                        
                </comment>
                <comment line="349">
                    Simple syntax                    
                </comment>
                <comment line="350">
                                        
                </comment>
                <comment line="356">
                    BerException(&quot;Can&apos;t build SnmpInt from decoded value.&quot;);                    
                </comment>
                <comment line="364">
                    BerException(&quot;Can&apos;t build SnmpString from decoded value.&quot;);                    
                </comment>
                <comment line="372">
                    BerException(&quot;Can&apos;t build SnmpOid from decoded value.&quot;);                    
                </comment>
                <comment line="381">
                    BerException(&quot;Can&apos;t build SnmpNull from decoded value.&quot;);                    
                </comment>
                <comment line="385">
                                        
                </comment>
                <comment line="386">
                    Application syntax                    
                </comment>
                <comment line="387">
                                        
                </comment>
                <comment line="393">
                    BerException(&quot;Can&apos;t build SnmpIpAddress from decoded value.&quot;);                    
                </comment>
                <comment line="401">
                    BerException(&quot;Can&apos;t build SnmpCounter from decoded value.&quot;);                    
                </comment>
                <comment line="409">
                    BerException(&quot;Can&apos;t build SnmpGauge from decoded value.&quot;);                    
                </comment>
                <comment line="417">
                    BerException(&quot;Can&apos;t build SnmpTimeticks from decoded value.&quot;);                    
                </comment>
                <comment line="425">
                    BerException(&quot;Can&apos;t build SnmpOpaque from decoded value.&quot;);                    
                </comment>
                <comment line="429">
                                        
                </comment>
                <comment line="430">
                    V2 syntaxes                    
                </comment>
                <comment line="431">
                                        
                </comment>
                <comment line="440">
                    BerException(&quot;Can&apos;t build SnmpCounter64 from decoded value.&quot;);                    
                </comment>
                <declaration name="result" type="SnmpValue" line="341"/>
                <declaration name="tag" type="int" line="342"/>
                <scope line="352"/>
                <scope line="354"/>
                <scope line="360"/>
                <scope line="362"/>
                <scope line="368"/>
                <scope line="370"/>
                <scope line="377"/>
                <scope line="379"/>
                <scope line="389"/>
                <scope line="391"/>
                <scope line="397"/>
                <scope line="399"/>
                <scope line="405"/>
                <scope line="407"/>
                <scope line="413"/>
                <scope line="415"/>
                <scope line="421"/>
                <scope line="423"/>
                <scope line="433"/>
                <scope line="436"/>
                <scope line="438"/>
                <scope line="445"/>
                <scope line="453"/>
                <scope line="461"/>
            </method>
        </class>
    </source>