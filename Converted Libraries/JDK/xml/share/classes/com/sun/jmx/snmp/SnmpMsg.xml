<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp">
        <import package="com.sun.jmx.snmp.SnmpSecurityParameters"/>
        <import package="java.util.Vector"/>
        <import package="java.net.InetAddress"/>
        <import package="com.sun.jmx.snmp.SnmpStatusException"/>
        <class name="SnmpMsg" line="6">
            <implements interface="SnmpDefinitions"/>
            <javadoc line="6">
                A partially decoded representation of an SNMP packet. It contains
                  the information contained in any SNMP message (SNMPv1, SNMPv2 or
                  SNMPv3).
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="version" type="int" line="15"/>
            <javadoc line="15">
                The protocol version.
                  &lt;P&gt;&lt;CODE&gt;decodeMessage&lt;/CODE&gt; and &lt;CODE&gt;encodeMessage&lt;/CODE&gt; do not
                  perform any check on this value.
                  &lt;BR&gt;&lt;CODE&gt;decodeSnmpPdu&lt;/CODE&gt; and &lt;CODE&gt;encodeSnmpPdu&lt;/CODE&gt; only
                  accept  the values 0 (for SNMPv1), 1 (for SNMPv2) and 3 (for SNMPv3).                
            </javadoc>
            <declaration name="data" type="byte[]" line="23"/>
            <javadoc line="23">
                Encoding of the PDU.
                  &lt;P&gt;This is usually the BER encoding of the PDU&apos;s syntax
                  defined in RFC1157 and RFC1902. However, this can be authenticated
                  or encrypted data (but you need to implemented your own
                  &lt;CODE&gt;SnmpPduFactory&lt;/CODE&gt; class).                
            </javadoc>
            <declaration name="dataLength" type="int" line="31"/>
            <javadoc line="31">
                Number of useful bytes in the &lt;CODE&gt;data&lt;/CODE&gt; field.                
            </javadoc>
            <declaration name="address" type="InetAddress" line="35"/>
            <javadoc line="35">
                Source or destination address.
                  &lt;BR&gt;For an incoming message it&apos;s the source.
                  For an outgoing message it&apos;s the destination.                
            </javadoc>
            <declaration name="port" type="int" line="41"/>
            <javadoc line="41">
                Source or destination port.
                  &lt;BR&gt;For an incoming message it&apos;s the source.
                  For an outgoing message it&apos;s the destination.                
            </javadoc>
            <declaration name="securityParameters" type="SnmpSecurityParameters" line="47"/>
            <javadoc line="47">
                Security parameters. Contain informations according to Security Model (Usm, community string based, ...).                
            </javadoc>
            <javadoc line="51">
                Returns the encoded SNMP version present in the passed byte array.                
                <param>
                    data The unmarshalled SNMP message.                    
                </param>
                <return>
                    The SNMP version (0, 1 or 3).                    
                </return>
            </javadoc>
            <method name="getProtocolVersion" type="int" line="56">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="version" type="int" line="57"/>
                <declaration name="bdec" type="BerDecoder" line="58"/>
                <scope line="59"/>
                <scope line="64"/>
                <scope line="67"/>
                <scope line="70"/>
            </method>
            <method name="getRequestId" type="int" line="74"/>
            <javadoc line="74">
                Returns the associated request ID.                
                <param>
                    data The flat message.                    
                </param>
                <return>
                    The request ID.                    
                </return>
            </javadoc>
            <method name="encodeMessage" type="int" line="80"/>
            <javadoc line="80">
                Encodes this message and puts the result in the specified byte array.
                  For internal use only.                
                <param>
                    outputBytes An array to receive the resulting encoding.                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException If the result does not fit
                      into the specified array.                    
                </exception>
            </javadoc>
            <method name="decodeMessage" type="void" line="88"/>
            <javadoc line="88">
                Decodes the specified bytes and initializes this message.
                  For internal use only.                
                <param>
                    inputBytes The bytes to be decoded.                    
                </param>
                <exception>
                    SnmpStatusException If the specified bytes are not a valid encoding.                    
                </exception>
            </javadoc>
            <method name="encodeSnmpPdu" type="void" line="95"/>
            <javadoc line="95">
                Initializes this message with the specified &lt;CODE&gt;pdu&lt;/CODE&gt;.
                  &lt;P&gt;
                  This method initializes the data field with an array of
                  &lt;CODE&gt;maxDataLength&lt;/CODE&gt; bytes. It encodes the &lt;CODE&gt;pdu&lt;/CODE&gt;.
                  The resulting encoding is stored in the data field
                  and the length of the encoding is stored in &lt;CODE&gt;dataLength&lt;/CODE&gt;.
                  &lt;p&gt;
                  If the encoding length exceeds &lt;CODE&gt;maxDataLength&lt;/CODE&gt;,
                  the method throws an exception.                
                <param>
                    pdu The PDU to be encoded.                    
                </param>
                <param>
                    maxDataLength The maximum length permitted for the data field.                    
                </param>
                <exception>
                    SnmpStatusException If the specified <CODE>pdu</CODE> is not valid.                    
                </exception>
                <exception>
                    SnmpTooBigException If the resulting encoding does not fit
                      into <CODE>maxDataLength</CODE> bytes.                    
                </exception>
                <exception>
                    ArrayIndexOutOfBoundsException If the encoding exceeds <CODE>maxDataLength</CODE>.                    
                </exception>
            </javadoc>
            <method name="decodeSnmpPdu" type="SnmpPdu" line="113"/>
            <javadoc line="113">
                Gets the PDU encoded in this message.
                  &lt;P&gt;
                  This method decodes the data field and returns the resulting PDU.                
                <return>
                    The resulting PDU.                    
                </return>
                <exception>
                    SnmpStatusException If the encoding is not valid.                    
                </exception>
            </javadoc>
            <javadoc line="121">
                Dumps the content of a byte buffer using hexadecimal form.                
                <param>
                    b The buffer to dump.                    
                </param>
                <param>
                    offset The position of the first byte to be dumped.                    
                </param>
                <param>
                    len The number of bytes to be dumped starting from offset.                    
                </param>
                <return>
                    The string containing the dump.                    
                </return>
            </javadoc>
            <method name="dumpHexBuffer" type="String" line="128">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="129"/>
                <declaration name="k" type="int" line="130"/>
                <declaration name="flen" type="int" line="131"/>
                <scope line="132">
                    <declaration name="j" type="int" line="133"/>
                    <scope line="137"/>
                </scope>
            </method>
            <javadoc line="145">
                Dumps this message in a string.                
                <return>
                    The string containing the dump.                    
                </return>
            </javadoc>
            <method name="printMessage" type="String" line="149">
                <declaration name="sb" type="StringBuffer" line="150"/>
                <scope line="154"/>
                <scope line="157"/>
            </method>
            <javadoc line="164">
                For SNMP Runtime private use only.                
            </javadoc>
            <method name="encodeVarBindList" type="void" line="167">
                <params>
                    <param name="benc" type="BerEncoder"/>
                    <param name="varBindList" type="SnmpVarBind[]"/>
                </params>
                <declaration name="encodedVarBindCount" type="int" line="168"/>
                <scope line="169">
                    <scope line="171">
                        <scope line="172">
                            <declaration name="bind" type="SnmpVarBind" line="173"/>
                            <scope line="174"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="185"/>
            </method>
            <javadoc line="189">
                For SNMP Runtime private use only.                
            </javadoc>
            <method name="encodeVarBindValue" type="void" line="192">
                <params>
                    <param name="benc" type="BerEncoder"/>
                    <param name="v" type="SnmpValue"/>
                </params>
                <scope line="193"/>
                <scope line="196"/>
                <scope line="199"/>
                <scope line="202"/>
                <scope line="205"/>
                <scope line="208"/>
                <scope line="211"/>
                <scope line="214"/>
                <scope line="217"/>
                <scope line="220">
                    <scope line="221"/>
                </scope>
                <scope line="226">
                    <declaration name="tag" type="int" line="227"/>
                    <scope line="228"/>
                    <scope line="231"/>
                </scope>
                <scope line="236"/>
            </method>
            <javadoc line="240">
                For SNMP Runtime private use only.                
            </javadoc>
            <method name="decodeVarBindList" type="SnmpVarBind[]" line="243">
                <params>
                    <param name="bdec" type="BerDecoder"/>
                </params>
                <declaration name="tmp" type="Vector&lt;SnmpVarBind&gt;" line="245"/>
                <scope line="246">
                    <declaration name="bind" type="SnmpVarBind" line="247"/>
                </scope>
                <declaration name="varBindList" type="SnmpVarBind[]" line="255"/>
            </method>
            <javadoc line="259">
                For SNMP Runtime private use only.                
            </javadoc>
            <method name="decodeVarBindValue" type="SnmpValue" line="262">
                <params>
                    <param name="bdec" type="BerDecoder"/>
                </params>
                <declaration name="result" type="SnmpValue" line="263"/>
                <declaration name="tag" type="int" line="264"/>
                <scope line="267"/>
                <scope line="270"/>
                <scope line="275"/>
                <scope line="278"/>
                <scope line="283"/>
                <scope line="286"/>
                <scope line="292"/>
                <scope line="295"/>
                <scope line="300"/>
                <scope line="303"/>
                <scope line="308"/>
                <scope line="311"/>
                <scope line="316"/>
                <scope line="319"/>
                <scope line="324"/>
                <scope line="327"/>
                <scope line="332"/>
                <scope line="335"/>
                <scope line="340"/>
                <scope line="343"/>
                <scope line="346"/>
                <scope line="351"/>
                <scope line="358"/>
                <scope line="365"/>
            </method>
        </class>
    </source>