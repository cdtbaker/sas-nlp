<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.snmp.daemon">
        <interface name="CommunicatorServerMBean">
            <javadoc line="31">
                Defines generic behaviour for the server
                  part of a connector or an adaptor. Most connectors or adaptors extend &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt;
                  and inherit this behaviour. Connectors or adaptors that do not fit into this model do not extend
                  &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt;.
                  &lt;p&gt;
                  An &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt; is an active object, it listens for client requests
                  and processes them in its own thread. When necessary, a &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt;
                  creates other threads to process multiple requests concurrently.
                  &lt;p&gt;
                  A &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt; object can be stopped by calling the &lt;CODE&gt;stop&lt;/CODE&gt;
                  method. When it is stopped, the &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt; no longer listens to client
                  requests and no longer holds any thread or communication resources.
                  It can be started again by calling the &lt;CODE&gt;start&lt;/CODE&gt; method.
                  &lt;p&gt;
                  A &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt; has a &lt;CODE&gt;state&lt;/CODE&gt; property which reflects its
                  activity.
                  &lt;p&gt;
                  &lt;TABLE&gt;
                  &lt;TR&gt;&lt;TH&gt;CommunicatorServer&lt;/TH&gt;            &lt;TH&gt;State&lt;/TH&gt;&lt;/TR&gt;
                  &lt;TR&gt;&lt;TD&gt;&lt;CODE&gt;stopped&lt;/CODE&gt;&lt;/TD&gt;          &lt;TD&gt;&lt;CODE&gt;OFFLINE&lt;/CODE&gt;&lt;/TD&gt;&lt;/TR&gt;
                  &lt;TR&gt;&lt;TD&gt;&lt;CODE&gt;starting&lt;/CODE&gt;&lt;/TD&gt;         &lt;TD&gt;&lt;CODE&gt;STARTING&lt;/CODE&gt;&lt;/TD&gt;&lt;/TR&gt;
                  &lt;TR&gt;&lt;TD&gt;&lt;CODE&gt;running&lt;/CODE&gt;&lt;/TD&gt;          &lt;TD&gt;&lt;CODE&gt;ONLINE&lt;/CODE&gt;&lt;/TD&gt;&lt;/TR&gt;
                  &lt;TR&gt;&lt;TD&gt;&lt;CODE&gt;stopping&lt;/CODE&gt;&lt;/TD&gt;         &lt;TD&gt;&lt;CODE&gt;STOPPING&lt;/CODE&gt;&lt;/TD&gt;&lt;/TR&gt;
                  &lt;/TABLE&gt;
                  &lt;p&gt;
                  The &lt;CODE&gt;STARTING&lt;/CODE&gt; state marks the transition from &lt;CODE&gt;OFFLINE&lt;/CODE&gt; to
                  &lt;CODE&gt;ONLINE&lt;/CODE&gt;.
                  &lt;p&gt;
                  The &lt;CODE&gt;STOPPING&lt;/CODE&gt; state marks the transition from &lt;CODE&gt;ONLINE&lt;/CODE&gt; to
                  &lt;CODE&gt;OFFLINE&lt;/CODE&gt;. This occurs when the &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt; is
                  finishing or interrupting active requests.
                  &lt;p&gt;
                  A &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt; may serve several clients concurrently. The
                  number of concurrent clients can be limited using the property
                  &lt;CODE&gt;maxActiveClientCount&lt;/CODE&gt;. The default value of this property is
                  defined by the subclasses.
                  &lt;p&gt;
                  When a &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt; is unregistered from the MBeanServer,
                  it is stopped automatically.
                  &lt;p&gt;&lt;b&gt;This API is a Sun Microsystems internal API  and is subject
                  to change without notice.&lt;/b&gt;&lt;/p&gt;                
            </javadoc>
            <method name="start" type="void" line="78"/>
            <javadoc line="78">
                Starts this &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt;.
                  &lt;p&gt;
                  Has no effect if this &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt; is &lt;CODE&gt;ONLINE&lt;/CODE&gt; or
                  &lt;CODE&gt;STOPPING&lt;/CODE&gt;.                
            </javadoc>
            <method name="stop" type="void" line="86"/>
            <javadoc line="86">
                Stops this &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt;.
                  &lt;p&gt;
                  Has no effect if this &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt; is &lt;CODE&gt;OFFLINE&lt;/CODE&gt; or
                  &lt;CODE&gt;STOPPING&lt;/CODE&gt;.                
            </javadoc>
            <method name="isActive" type="boolean" line="94"/>
            <javadoc line="94">
                Tests if the &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt; is active.                
                <return>
                    True if connector is <CODE>ONLINE</CODE>; false otherwise.                    
                </return>
            </javadoc>
            <method name="waitState" type="boolean" line="101"/>
            <javadoc line="101">
                Waits untill either the State attribute of this MBean equals the specified &lt;VAR&gt;state&lt;/VAR&gt; parameter,
                  or the specified  &lt;VAR&gt;timeOut&lt;/VAR&gt; has elapsed. The method &lt;CODE&gt;waitState&lt;/CODE&gt; returns with a boolean value indicating whether
                  the specified &lt;VAR&gt;state&lt;/VAR&gt; parameter equals the value of this MBean&apos;s State attribute at the time the method terminates.
                  Two special cases for the &lt;VAR&gt;timeOut&lt;/VAR&gt; parameter value are:
                  &lt;UL&gt;&lt;LI&gt; if &lt;VAR&gt;timeOut&lt;/VAR&gt; is negative then &lt;CODE&gt;waitState&lt;/CODE&gt; returns immediately (i.e. does not wait at all),&lt;/LI&gt;
                  &lt;LI&gt; if &lt;VAR&gt;timeOut&lt;/VAR&gt; equals zero then &lt;CODE&gt;waitState&lt;/CODE&gt; waits untill the value of this MBean&apos;s State attribute
                  is the same as the &lt;VAR&gt;state&lt;/VAR&gt; parameter (i.e. will wait indefinitely if this condition is never met).&lt;/LI&gt;&lt;/UL&gt;                
                <param>
                    state The value of this MBean's State attribute
                      to wait for. <VAR>state</VAR> can be one of:
                      <ul>
                      <li><CODE>CommunicatorServer.OFFLINE</CODE>,</li>
                      <li><CODE>CommunicatorServer.ONLINE</CODE>,</li>
                      <li><CODE>CommunicatorServer.STARTING</CODE>,</li>
                      <li><CODE>CommunicatorServer.STOPPING</CODE>.</li>
                      </ul>                    
                </param>
                <param>
                    timeOut The maximum time to wait for, in
                      milliseconds, if positive.
                      Infinite time out if 0, or no waiting at all if negative.                    
                </param>
                <return>
                    true if the value of this MBean's State attribute is the
                      same as the <VAR>state</VAR> parameter; false otherwise.                    
                </return>
            </javadoc>
            <method name="getState" type="int" line="128"/>
            <javadoc line="128">
                Gets the state of this &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt; as an integer.                
                <return>
                    <CODE>ONLINE</CODE>, <CODE>OFFLINE</CODE>, <CODE>STARTING</CODE> or <CODE>STOPPING</CODE>.                    
                </return>
            </javadoc>
            <method name="getStateString" type="String" line="135"/>
            <javadoc line="135">
                Gets the state of this &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt; as a string.                
                <return>
                    One of the strings "ONLINE", "OFFLINE", "STARTING" or "STOPPING".                    
                </return>
            </javadoc>
            <method name="getHost" type="String" line="142"/>
            <javadoc line="142">
                Gets the host name used by this &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt;.                
                <return>
                    The host name used by this <CODE>CommunicatorServer</CODE>.                    
                </return>
            </javadoc>
            <method name="getPort" type="int" line="149"/>
            <javadoc line="149">
                Gets the port number used by this &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt;.                
                <return>
                    The port number used by this <CODE>CommunicatorServer</CODE>.                    
                </return>
            </javadoc>
            <method name="setPort" type="void" line="156"/>
            <javadoc line="156">
                Sets the port number used by this &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt;.                
                <param>
                    port The port number used by this <CODE>CommunicatorServer</CODE>.                    
                </param>
                <exception>
                    java.lang.IllegalStateException This method has been invoked
                      while the communicator was ONLINE or STARTING.                    
                </exception>
            </javadoc>
            <method name="getProtocol" type="String" line="166"/>
            <javadoc line="166">
                Gets the protocol being used by this &lt;CODE&gt;CommunicatorServer&lt;/CODE&gt;.                
                <return>
                    The protocol as a string.                    
                </return>
            </javadoc>
        </interface>
    </source>