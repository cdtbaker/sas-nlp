<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.mbeanserver">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Set"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.JMX"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.ObjectName"/>
        <class name="MXBeanSupport" line="39">
            <extends class="MBeanSupport">
                <type_params>
                    <type_param name="ConvertingMethod"/>
                </type_params>
            </extends>
            <comment line="116">
                Return all interfaces inherited by this class, directly or
                 indirectly through the parent class and interfaces.                
            </comment>
            <comment line="134">
                The sequence of events for tracking inter-MXBean references is
                 relatively complicated.  We use the magical preRegister2 method
                 which the MBeanServer knows about.  The steps during registration
                 are:
                 (1) Call user preRegister, if any.  If exception, abandon.
                 (2) Call preRegister2 and hence this register method.  If exception,
                 call postRegister(false) and abandon.
                 (3) Try to register the MBean.  If exception, call registerFailed()
                 which will call the unregister method.  (Also call postRegister(false).)
                 (4) If we get this far, we can call postRegister(true).
                
                 When we are wrapped in an instance of javax.management.StandardMBean,
                 things are simpler.  That class calls this method from its preRegister,
                 and propagates any exception.  There is no user preRegister in this case.
                 If this method succeeds but registration subsequently fails,
                 StandardMBean calls unregister from its postRegister(false) method.                
            </comment>
            <comment line="175">
                for mxbeanLookup and objectName                
            </comment>
            <javadoc line="39">
                Base class for MXBeans.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <javadoc line="46">
                &lt;p&gt;Construct an MXBean that wraps the given resource using the
                  given MXBean interface.&lt;/p&gt;                
                <param>
                    resource the underlying resource for the new MXBean.                    
                </param>
                <param>
                    mxbeanInterface the interface to be used to determine
                      the MXBean&apos;s management interface.                    
                </param>
                <param>
                    &lt;T&gt;
                       a type parameter that allows the compiler to check
                      that {@code resource} implements {@code mxbeanInterface},
                      provided that {@code mxbeanInterface} is a class constant like{@code SomeMXBean.class}.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code resource} is null or
                      if it does not implement the class {@code mxbeanInterface} or if
                      that class is not a valid MXBean interface.                    
                </throws>
            </javadoc>
            <method name="MXBeanSupport" type="constructor" line="65">
                <params>
                    <param name="resource" type="T"/>
                    <param name="mxbeanInterface" type="Class<T>"/>
                </params>
            </method>
            <method name="getMBeanIntrospector" type="MBeanIntrospector<ConvertingMethod>" line="70"/>
            <method name="getCookie" type="Object" line="75"/>
            <method name="findMXBeanInterface" type="Class<? super T>" line="79">
                <params>
                    <param name="resourceClass" type="Class<T>"/>
                </params>
                <declaration name="intfs" type="Set&lt;Class&lt;?&gt;&gt;" line="82"/>
                <declaration name="candidates" type="Set&lt;Class&lt;?&gt;&gt;" line="83"/>
                <scope line="84"/>
                <scope line="89">
                    <scope line="90">
                        <scope line="92">
                            <declaration name="intf2" type="Class&lt;?&gt;" line="93"/>
                            <scope line="94"/>
                        </scope>
                    </scope>
                    <declaration name="msg" type="String" line="100"/>
                </scope>
                <scope line="105"/>
                <scope line="107">
                    <declaration name="msg" type="String" line="108"/>
                </scope>
            </method>
            <method name="transitiveInterfaces" type="Set<Class<?>>" line="118">
                <params>
                    <param name="c" type="Class<?>"/>
                </params>
                <declaration name="set" type="Set&lt;Class&lt;?&gt;&gt;" line="119"/>
            </method>
            <method name="transitiveInterfaces" type="void" line="123">
                <params>
                    <param name="c" type="Class<?>"/>
                    <param name="intfs" type="Set<Class<?>>"/>
                </params>
            </method>
            <method name="register" type="void" line="153">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="157">
                    eventually we could have some logic to supply a default name                    
                </comment>
                <scope line="158"/>
            </method>
            <method name="unregister" type="void" line="166">
                <scope line="167">
                    <scope line="168"/>
                </scope>
            </method>
            <declaration name="lock" type="Object" line="174"/>
            <declaration name="mxbeanLookup" type="MXBeanLookup" line="176"/>
            <declaration name="objectName" type="ObjectName" line="177"/>
        </class>
    </source>