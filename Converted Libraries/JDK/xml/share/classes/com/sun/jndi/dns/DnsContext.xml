<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.dns">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="javax.naming"/>
        <import package="javax.naming.directory"/>
        <import package="javax.naming.spi.DirectoryManager"/>
        <import package="com.sun.jndi.toolkit.ctx"/>
        <class name="DnsContext" line="39">
            <extends class="ComponentDirContext"/>
            <comment line="49">
                fully-qualified domain name of this context,                
            </comment>
            <comment line="50">
                with a root (empty) label at position 0                
            </comment>
            <comment line="52">
                true if environment is possibly shared                
            </comment>
            <comment line="53">
                and so must be copied on write                
            </comment>
            <comment line="54">
                was this DnsContext created by                
            </comment>
            <comment line="55">
                another?  see composeName()                
            </comment>
            <comment line="59">
                must all responses be authoritative?                
            </comment>
            <comment line="60">
                request recursion on queries?                
            </comment>
            <comment line="61">
                initial timeout on UDP queries in ms                
            </comment>
            <comment line="62">
                number of UDP retries                
            </comment>
            <comment line="66">
                Timeouts for UDP queries use exponential backoff:  each retry                
            </comment>
            <comment line="67">
                is for twice as long as the last.  The following constants set                
            </comment>
            <comment line="68">
                the defaults for the initial timeout (in ms) and the number of                
            </comment>
            <comment line="69">
                retries, and name the environment properties used to override                
            </comment>
            <comment line="70">
                these defaults.                
            </comment>
            <comment line="77">
                The resource record type and class to use for lookups, and the                
            </comment>
            <comment line="78">
                property used to modify them                
            </comment>
            <comment line="82">
                Property used to disallow recursion on queries                
            </comment>
            <comment line="85">
                ANY == ResourceRecord.QCLASS_STAR == ResourceRecord.QTYPE_STAR                
            </comment>
            <comment line="88">
                The zone tree used for list operations                
            </comment>
            <comment line="114">
                Returns a clone of a DNS context, just like DnsContext(DnsContext)
                 but with a different domain name and with parentIsDns set to true.                
            </comment>
            <comment line="124">
                Returns a clone of a DNS context.  The context&apos;s modifiable
                 private state is independent of the original&apos;s (so closing one
                 context, for example, won&apos;t close the other).  The two contexts
                 share &lt;tt&gt;environment&lt;tt&gt;, but it&apos;s copy-on-write so there&apos;s
                 no conflict.                
            </comment>
            <comment line="153">
                ---------- Environment operations                
            </comment>
            <comment line="155">
                Override default with a noncloning version.                
            </comment>
            <comment line="234">
                Update PROVIDER_URL property.  Call this only when environment
                 is not being shared.                
            </comment>
            <comment line="243">
                Read environment properties and set parameters.                
            </comment>
            <comment line="273">
                ---------- Naming operations                
            </comment>
            <comment line="390">
                ---------- Directory operations                
            </comment>
            <comment line="501">
                ---------- Name-related operations                
            </comment>
            <comment line="563">
                ---------- Helper methods                
            </comment>
            <comment line="565">
                Resolver is not created until needed, to allow time for updates
                 to the environment.                
            </comment>
            <comment line="576">
                Returns the fully-qualified domain name of a name given
                 relative to this context.  Result includes a root label (an
                 empty component at position 0).                
            </comment>
            <comment line="601">
                Converts resource records to an attribute set.  Only resource
                 records in the answer section are used, and only those that
                 match the classes and types in cts (see classAndTypeMatch()
                 for matching rules).                
            </comment>
            <comment line="631">
                Returns true if rrclass and rrtype match some element of cts.
                 A match occurs if corresponding classes and types are equal,
                 or if the array value is ANY.  If cts is null, then any class
                 and type match.                
            </comment>
            <comment line="655">
                Returns the attribute ID for a resource record given its class
                 and type.  If the record is in the internet class, the
                 corresponding attribute ID is the record&apos;s type name (or the
                 integer type value if the name is not known).  If the record is
                 not in the internet class, the class name (or integer class
                 value) is prepended to the attribute ID, separated by a space.
                
                 A class or type value of ANY represents an indeterminate class
                 or type, and is represented within the attribute ID by &quot;&quot;.
                 For example, the attribute ID &quot;IN &quot; represents
                 any type in the internet class, and &quot; NS&quot; represents an NS
                 record of any class.                
            </comment>
            <comment line="677">
                Returns the class and type values corresponding to an attribute
                 ID.  An indeterminate class or type is represented by ANY.  See
                 toAttrId() for the format of attribute IDs.
                
                 @throws InvalidAttributeIdentifierException
                          if class or type is unknown                
            </comment>
            <comment line="719">
                Returns an array of the classes and types corresponding to a
                 set of attribute IDs.  See toAttrId() for the format of
                 attribute IDs, and classAndTypeMatch() for the format of the
                 array returned.                
            </comment>
            <comment line="738">
                Returns the most restrictive resource record class and type
                 that may be used to query for records matching cts.
                 See classAndTypeMatch() for matching rules.                
            </comment>
            <comment line="771">
                ---------- Support for list operations                
            </comment>
            <comment line="773">
                Synchronization notes:
                
                 Any access to zoneTree that walks the tree, whether it modifies
                 the tree or not, is synchronized on zoneTree.
                 [%%% Note:  a readwrite lock would allow increased concurrency.]
                 The depth of a ZoneNode can thereafter be accessed without
                 further synchronization.  Access to other fields and methods
                 should be synchronized on the node itself.
                
                 A zone&apos;s contents is a NameNode tree that, once created, is never
                 modified.  The only synchronization needed is to ensure that it
                 gets flushed into shared memory after being created, which is
                 accomplished by ZoneNode.populate().  The contents are accessed
                 via a soft reference, so a ZoneNode may be seen to be populated
                 one moment and unpopulated the next.                
            </comment>
            <comment line="791">
                Returns the node in the zone tree corresponding to a
                 fully-qualified domain name.  If the desired portion of the
                 tree has not yet been populated or has been outdated, a zone
                 transfer is done to populate the tree.                
            </comment>
            <comment line="877">
                Does a zone transfer to [re]populate a zone in the zone tree.
                 Returns the zone&apos;s new contents.                
            </comment>
            <comment line="892">
                Determine if a ZoneNode&apos;s data is current.
                 We base this on a comparison between the cached serial
                 number and the latest SOA record.
                
                 If there is no SOA record, znode is not (or is no longer) a zone:
                 depopulate znode and return false.
                
                 Since this method may perform a network operation, it is best
                 to call it with znode unlocked.  Caller must then note that the
                 result may be outdated by the time this method returns.                
            </comment>
            <comment line="924">
                ---------- Debugging                
            </comment>
            <comment line="965">
                nodes to be enumerated, or null if none                
            </comment>
            <comment line="966">
                context being enumerated                
            </comment>
            <comment line="975">
                ctx will be set to null when no longer needed by the enumeration.                
            </comment>
            <comment line="1034">
                Finalizer not needed since it&apos;s safe to leave ctx unclosed.                
            </comment>
            <comment line="1035">
                protected void finalize() {                
            </comment>
            <comment line="1036">
                close();                
            </comment>
            <comment line="1037">
                }                
            </comment>
            <javadoc line="39">
                A DnsContext is a directory context representing a DNS node.                
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="domain" type="DnsName" line="48"/>
            <declaration name="environment" type="Hashtable" line="50"/>
            <declaration name="envShared" type="boolean" line="51"/>
            <declaration name="parentIsDns" type="boolean" line="53"/>
            <declaration name="servers" type="String[]" line="55"/>
            <declaration name="resolver" type="Resolver" line="56"/>
            <declaration name="authoritative" type="boolean" line="58"/>
            <declaration name="recursion" type="boolean" line="59"/>
            <declaration name="timeout" type="int" line="60"/>
            <declaration name="retries" type="int" line="61"/>
            <declaration name="nameParser" type="NameParser" line="63"/>
            <declaration name="DEFAULT_INIT_TIMEOUT" type="int" line="70"/>
            <declaration name="DEFAULT_RETRIES" type="int" line="71"/>
            <declaration name="INIT_TIMEOUT" type="String" line="72"/>
            <declaration name="RETRIES" type="String" line="74"/>
            <declaration name="lookupCT" type="CT" line="78"/>
            <declaration name="LOOKUP_ATTR" type="String" line="79"/>
            <declaration name="RECURSION" type="String" line="82"/>
            <declaration name="ANY" type="int" line="85"/>
            <declaration name="zoneTree" type="ZoneNode" line="88"/>
            <javadoc line="91">
                Returns a DNS context for a given domain and servers.
                  Each server is of the form &quot;server[:port]&quot;.
                  IPv6 literal host names include delimiting brackets.
                  There must be at least one server.
                  The environment must not be null; it is cloned before being stored.                
            </javadoc>
            <method name="DnsContext" type="constructor" line="99">
                <params>
                    <param name="domain" type="String"/>
                    <param name="servers" type="String[]"/>
                    <param name="environment" type="Hashtable"/>
                </params>
            </method>
            <method name="DnsContext" type="constructor" line="117">
                <params>
                    <param name="ctx" type="DnsContext"/>
                    <param name="domain" type="DnsName"/>
                </params>
            </method>
            <method name="DnsContext" type="constructor" line="130">
                <params>
                    <param name="ctx" type="DnsContext"/>
                </params>
            </method>
            <method name="close" type="void" line="144">
                <scope line="145"/>
            </method>
            <method name="p_getEnvironment" type="Hashtable" line="157"/>
            <method name="getEnvironment" type="Hashtable" line="161"/>
            <method name="addToEnvironment" type="Object" line="166">
                <params>
                    <param name="propName" type="String"/>
                    <param name="propVal" type="Object"/>
                </params>
                <comment line="191">
                    copy on write                    
                </comment>
                <scope line="168"/>
                <scope line="170"/>
                <scope line="172"/>
                <scope line="174">
                    <declaration name="val" type="int" line="175"/>
                    <scope line="176"/>
                </scope>
                <scope line="180">
                    <declaration name="val" type="int" line="181"/>
                    <scope line="182"/>
                </scope>
                <scope line="188"/>
                <scope line="190"/>
                <scope line="195"/>
            </method>
            <method name="removeFromEnvironment" type="Object" line="201">
                <params>
                    <param name="propName" type="String"/>
                </params>
                <comment line="224">
                    copy-on-write                    
                </comment>
                <scope line="203"/>
                <scope line="205"/>
                <scope line="207"/>
                <scope line="209">
                    <scope line="210"/>
                </scope>
                <scope line="214">
                    <scope line="215"/>
                </scope>
                <scope line="221"/>
                <scope line="223"/>
                <scope line="228"/>
            </method>
            <method name="setProviderUrl" type="void" line="237">
                <params>
                    <param name="url" type="String"/>
                </params>
                <comment line="238">
                    assert !envShared;                    
                </comment>
            </method>
            <method name="initFromEnvironment" type="void" line="246">
                <declaration name="val" type="String" line="251"/>
            </method>
            <method name="getLookupCT" type="CT" line="265">
                <params>
                    <param name="attrId" type="String"/>
                </params>
            </method>
            <method name="c_lookup" type="Object" line="275">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="281">
                    clone for parallelism                    
                </comment>
                <scope line="278">
                    <declaration name="ctx" type="DnsContext" line="279"/>
                </scope>
                <scope line="284">
                    <declaration name="fqdn" type="DnsName" line="285"/>
                    <declaration name="rrs" type="ResourceRecords" line="286"/>
                    <declaration name="attrs" type="Attributes" line="289"/>
                    <declaration name="ctx" type="DnsContext" line="290"/>
                </scope>
                <scope line="293"/>
                <scope line="296">
                    <declaration name="ne" type="NamingException" line="298"/>
                </scope>
            </method>
            <method name="c_lookupLink" type="Object" line="306">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_list" type="NamingEnumeration" line="311">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <scope line="313">
                    <declaration name="fqdn" type="DnsName" line="314"/>
                    <declaration name="nnode" type="NameNode" line="315"/>
                    <declaration name="ctx" type="DnsContext" line="316"/>
                </scope>
                <scope line="319"/>
            </method>
            <method name="c_listBindings" type="NamingEnumeration" line="326">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <scope line="328">
                    <declaration name="fqdn" type="DnsName" line="329"/>
                    <declaration name="nnode" type="NameNode" line="330"/>
                    <declaration name="ctx" type="DnsContext" line="331"/>
                </scope>
                <scope line="334"/>
            </method>
            <method name="c_bind" type="void" line="341">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_rebind" type="void" line="348">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_unbind" type="void" line="355">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_rename" type="void" line="362">
                <params>
                    <param name="oldname" type="Name"/>
                    <param name="newname" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_createSubcontext" type="Context" line="369">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_destroySubcontext" type="void" line="376">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_getNameParser" type="NameParser" line="383">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_bind" type="void" line="395">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                    <param name="attrs" type="Attributes"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_rebind" type="void" line="405">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                    <param name="attrs" type="Attributes"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_createSubcontext" type="DirContext" line="414">
                <params>
                    <param name="name" type="Name"/>
                    <param name="attrs" type="Attributes"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_getAttributes" type="Attributes" line="423">
                <params>
                    <param name="name" type="Name"/>
                    <param name="attrIds" type="String[]"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <scope line="426">
                    <declaration name="fqdn" type="DnsName" line="427"/>
                    <declaration name="cts" type="CT[]" line="428"/>
                    <declaration name="ct" type="CT" line="429"/>
                    <declaration name="rrs" type="ResourceRecords" line="430"/>
                </scope>
                <scope line="435"/>
            </method>
            <method name="c_modifyAttributes" type="void" line="445">
                <params>
                    <param name="name" type="Name"/>
                    <param name="mod_op" type="int"/>
                    <param name="attrs" type="Attributes"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_modifyAttributes" type="void" line="454">
                <params>
                    <param name="name" type="Name"/>
                    <param name="mods" type="ModificationItem[]"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_search" type="NamingEnumeration" line="464">
                <params>
                    <param name="name" type="Name"/>
                    <param name="matchingAttributes" type="Attributes"/>
                    <param name="attributesToReturn" type="String[]"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_search" type="NamingEnumeration" line="472">
                <params>
                    <param name="name" type="Name"/>
                    <param name="filter" type="String"/>
                    <param name="cons" type="SearchControls"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_search" type="NamingEnumeration" line="481">
                <params>
                    <param name="name" type="Name"/>
                    <param name="filterExpr" type="String"/>
                    <param name="filterArgs" type="Object[]"/>
                    <param name="cons" type="SearchControls"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_getSchema" type="DirContext" line="486">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_getSchemaClassDefinition" type="DirContext" line="493">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="getNameInNamespace" type="String" line="502"/>
            <method name="composeName" type="Name" line="506">
                <params>
                    <param name="name" type="Name"/>
                    <param name="prefix" type="Name"/>
                </params>
                <comment line="509">
                    Any name that&apos;s not a CompositeName is assumed to be a DNS                    
                </comment>
                <comment line="510">
                    compound name.  Convert each to a DnsName for syntax checking.                    
                </comment>
                <comment line="518">
                    Each of prefix and name is now either a DnsName or a CompositeName.                    
                </comment>
                <comment line="520">
                    If we have two DnsNames, simply join them together.                    
                </comment>
                <comment line="527">
                    Wrap compound names in composite names.                    
                </comment>
                <comment line="536">
                    Let toolkit do the work at namespace boundaries.                    
                </comment>
                <comment line="544">
                    prefixC is already a clone                    
                </comment>
                <declaration name="result" type="Name" line="507"/>
                <scope line="511"/>
                <scope line="514"/>
                <scope line="521"/>
                <declaration name="prefixC" type="Name" line="528"/>
                <declaration name="nameC" type="Name" line="531"/>
                <declaration name="prefixLast" type="int" line="534"/>
                <scope line="538"/>
                <scope line="547">
                    <declaration name="dnsComp" type="DnsName" line="548"/>
                </scope>
            </method>
            <method name="getResolver" type="Resolver" line="568">
                <scope line="569"/>
            </method>
            <method name="fullyQualify" type="DnsName" line="580">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <comment line="585">
                    parse name                    
                </comment>
                <comment line="586">
                    clone &amp; check syntax                    
                </comment>
                <comment line="589">
                    Be overly generous and allow root label if we&apos;re in root domain.                    
                </comment>
                <scope line="581"/>
                <declaration name="dnsName" type="DnsName" line="584"/>
                <scope line="588">
                    <scope line="590"/>
                    <scope line="592"/>
                </scope>
            </method>
            <method name="rrsToAttrs" type="Attributes" line="606">
                <params>
                    <param name="rrs" type="ResourceRecords"/>
                    <param name="cts" type="CT[]"/>
                </params>
                <declaration name="attrs" type="BasicAttributes" line="608"/>
                <scope line="610">
                    <declaration name="rr" type="ResourceRecord" line="611"/>
                    <declaration name="rrtype" type="int" line="612"/>
                    <declaration name="rrclass" type="int" line="613"/>
                    <scope line="615"/>
                    <declaration name="attrId" type="String" line="619"/>
                    <declaration name="attr" type="Attribute" line="620"/>
                    <scope line="621"/>
                </scope>
            </method>
            <method name="classAndTypeMatch" type="boolean" line="637">
                <params>
                    <param name="rrclass" type="int"/>
                    <param name="rrtype" type="int"/>
                    <param name="cts" type="CT[]"/>
                </params>
                <scope line="638"/>
                <scope line="641">
                    <declaration name="ct" type="CT" line="642"/>
                    <declaration name="classMatch" type="boolean" line="643"/>
                    <declaration name="typeMatch" type="boolean" line="645"/>
                    <scope line="647"/>
                </scope>
            </method>
            <method name="toAttrId" type="String" line="668">
                <params>
                    <param name="rrclass" type="int"/>
                    <param name="rrtype" type="int"/>
                </params>
                <declaration name="attrId" type="String" line="669"/>
                <scope line="670"/>
            </method>
            <method name="fromAttrId" type="CT" line="685">
                <params>
                    <param name="attrId" type="String"/>
                </params>
                <comment line="695">
                    class                    
                </comment>
                <comment line="707">
                    type                    
                </comment>
                <scope line="687"/>
                <declaration name="rrclass" type="int" line="691"/>
                <declaration name="rrtype" type="int" line="692"/>
                <declaration name="space" type="int" line="693"/>
                <scope line="696"/>
                <scope line="698">
                    <declaration name="className" type="String" line="699"/>
                    <scope line="701"/>
                </scope>
                <declaration name="typeName" type="String" line="708"/>
                <scope line="710"/>
            </method>
            <method name="attrIdsToClassesAndTypes" type="CT[]" line="725">
                <params>
                    <param name="attrIds" type="String[]"/>
                </params>
                <scope line="726"/>
                <declaration name="cts" type="CT[]" line="729"/>
                <scope line="731"/>
            </method>
            <method name="getClassAndTypeToQuery" type="CT" line="742">
                <params>
                    <param name="cts" type="CT[]"/>
                </params>
                <comment line="747">
                    Query all records.                    
                </comment>
                <comment line="751">
                    No records are requested, but we need to ask for something.                    
                </comment>
                <declaration name="rrclass" type="int" line="743"/>
                <declaration name="rrtype" type="int" line="744"/>
                <scope line="746"/>
                <scope line="750"/>
                <scope line="754">
                    <scope line="757">
                        <scope line="758"/>
                        <scope line="761"/>
                    </scope>
                </scope>
            </method>
            <method name="getNameNode" type="NameNode" line="796">
                <params>
                    <param name="fqdn" type="DnsName"/>
                </params>
                <comment line="799">
                    Find deepest related zone in zone tree.                    
                </comment>
                <comment line="815">
                    If fqdn is in znode&apos;s zone, is not at a zone cut, and                    
                </comment>
                <comment line="816">
                    is current, we&apos;re done.                    
                </comment>
                <comment line="818">
                    +1 for root                    
                </comment>
                <comment line="823">
                    +1 for root                    
                </comment>
                <comment line="829">
                    Zone was modified while we were examining it.                    
                </comment>
                <comment line="830">
                    All bets are off.                    
                </comment>
                <comment line="835">
                    cache hit!                    
                </comment>
                <comment line="846">
                    Cache miss...  do it the expensive way.                    
                </comment>
                <comment line="849">
                    Find fqdn&apos;s zone and add it to the tree.                    
                </comment>
                <comment line="854">
                    &quot;1&quot; to skip root                    
                </comment>
                <comment line="857">
                    If znode is now populated we know -- because the first half of                    
                </comment>
                <comment line="858">
                    getNodeName() didn&apos;t find it -- that it was populated by another                    
                </comment>
                <comment line="859">
                    thread during this method call.  Assume then that it&apos;s current.                    
                </comment>
                <comment line="866">
                    Desired node should now be in znode&apos;s populated zone.  Find it.                    
                </comment>
                <declaration name="znode" type="ZoneNode" line="800"/>
                <declaration name="zone" type="DnsName" line="801"/>
                <scope line="802"/>
                <declaration name="topOfZone" type="NameNode" line="808"/>
                <declaration name="nnode" type="NameNode" line="809"/>
                <scope line="811">
                    <scope line="812"/>
                    <scope line="817">
                        <scope line="820">
                            <declaration name="current" type="boolean" line="824"/>
                            <declaration name="restart" type="boolean" line="825"/>
                            <scope line="827">
                                <scope line="828"/>
                                <scope line="832"/>
                                <scope line="834"/>
                            </scope>
                            <scope line="839"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="853"/>
                <scope line="861"/>
                <scope line="868"/>
            </method>
            <method name="populateZone" type="NameNode" line="881">
                <params>
                    <param name="znode" type="ZoneNode"/>
                    <param name="zone" type="DnsName"/>
                </params>
                <comment line="883">
                    assert Thread.holdsLock(znode);                    
                </comment>
                <declaration name="rrs" type="ResourceRecords" line="884"/>
            </method>
            <method name="isZoneCurrent" type="boolean" line="904">
                <params>
                    <param name="znode" type="ZoneNode"/>
                    <param name="zone" type="DnsName"/>
                </params>
                <comment line="905">
                    former version:  return !znode.isExpired();                    
                </comment>
                <scope line="907"/>
                <declaration name="soa" type="ResourceRecord" line="910"/>
                <scope line="913">
                    <scope line="914"/>
                </scope>
            </method>
            <declaration name="debug" type="boolean" line="925"/>
            <method name="dprint" type="void" line="927">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="928"/>
            </method>
        </class>
        <class name="CT" line="941">
            <comment line="49">
                fully-qualified domain name of this context,                
            </comment>
            <comment line="50">
                with a root (empty) label at position 0                
            </comment>
            <comment line="52">
                true if environment is possibly shared                
            </comment>
            <comment line="53">
                and so must be copied on write                
            </comment>
            <comment line="54">
                was this DnsContext created by                
            </comment>
            <comment line="55">
                another?  see composeName()                
            </comment>
            <comment line="59">
                must all responses be authoritative?                
            </comment>
            <comment line="60">
                request recursion on queries?                
            </comment>
            <comment line="61">
                initial timeout on UDP queries in ms                
            </comment>
            <comment line="62">
                number of UDP retries                
            </comment>
            <comment line="66">
                Timeouts for UDP queries use exponential backoff:  each retry                
            </comment>
            <comment line="67">
                is for twice as long as the last.  The following constants set                
            </comment>
            <comment line="68">
                the defaults for the initial timeout (in ms) and the number of                
            </comment>
            <comment line="69">
                retries, and name the environment properties used to override                
            </comment>
            <comment line="70">
                these defaults.                
            </comment>
            <comment line="77">
                The resource record type and class to use for lookups, and the                
            </comment>
            <comment line="78">
                property used to modify them                
            </comment>
            <comment line="82">
                Property used to disallow recursion on queries                
            </comment>
            <comment line="85">
                ANY == ResourceRecord.QCLASS_STAR == ResourceRecord.QTYPE_STAR                
            </comment>
            <comment line="88">
                The zone tree used for list operations                
            </comment>
            <comment line="114">
                Returns a clone of a DNS context, just like DnsContext(DnsContext)
                 but with a different domain name and with parentIsDns set to true.                
            </comment>
            <comment line="124">
                Returns a clone of a DNS context.  The context&apos;s modifiable
                 private state is independent of the original&apos;s (so closing one
                 context, for example, won&apos;t close the other).  The two contexts
                 share &lt;tt&gt;environment&lt;tt&gt;, but it&apos;s copy-on-write so there&apos;s
                 no conflict.                
            </comment>
            <comment line="153">
                ---------- Environment operations                
            </comment>
            <comment line="155">
                Override default with a noncloning version.                
            </comment>
            <comment line="234">
                Update PROVIDER_URL property.  Call this only when environment
                 is not being shared.                
            </comment>
            <comment line="243">
                Read environment properties and set parameters.                
            </comment>
            <comment line="273">
                ---------- Naming operations                
            </comment>
            <comment line="390">
                ---------- Directory operations                
            </comment>
            <comment line="501">
                ---------- Name-related operations                
            </comment>
            <comment line="563">
                ---------- Helper methods                
            </comment>
            <comment line="565">
                Resolver is not created until needed, to allow time for updates
                 to the environment.                
            </comment>
            <comment line="576">
                Returns the fully-qualified domain name of a name given
                 relative to this context.  Result includes a root label (an
                 empty component at position 0).                
            </comment>
            <comment line="601">
                Converts resource records to an attribute set.  Only resource
                 records in the answer section are used, and only those that
                 match the classes and types in cts (see classAndTypeMatch()
                 for matching rules).                
            </comment>
            <comment line="631">
                Returns true if rrclass and rrtype match some element of cts.
                 A match occurs if corresponding classes and types are equal,
                 or if the array value is ANY.  If cts is null, then any class
                 and type match.                
            </comment>
            <comment line="655">
                Returns the attribute ID for a resource record given its class
                 and type.  If the record is in the internet class, the
                 corresponding attribute ID is the record&apos;s type name (or the
                 integer type value if the name is not known).  If the record is
                 not in the internet class, the class name (or integer class
                 value) is prepended to the attribute ID, separated by a space.
                
                 A class or type value of ANY represents an indeterminate class
                 or type, and is represented within the attribute ID by &quot;&quot;.
                 For example, the attribute ID &quot;IN &quot; represents
                 any type in the internet class, and &quot; NS&quot; represents an NS
                 record of any class.                
            </comment>
            <comment line="677">
                Returns the class and type values corresponding to an attribute
                 ID.  An indeterminate class or type is represented by ANY.  See
                 toAttrId() for the format of attribute IDs.
                
                 @throws InvalidAttributeIdentifierException
                          if class or type is unknown                
            </comment>
            <comment line="719">
                Returns an array of the classes and types corresponding to a
                 set of attribute IDs.  See toAttrId() for the format of
                 attribute IDs, and classAndTypeMatch() for the format of the
                 array returned.                
            </comment>
            <comment line="738">
                Returns the most restrictive resource record class and type
                 that may be used to query for records matching cts.
                 See classAndTypeMatch() for matching rules.                
            </comment>
            <comment line="771">
                ---------- Support for list operations                
            </comment>
            <comment line="773">
                Synchronization notes:
                
                 Any access to zoneTree that walks the tree, whether it modifies
                 the tree or not, is synchronized on zoneTree.
                 [%%% Note:  a readwrite lock would allow increased concurrency.]
                 The depth of a ZoneNode can thereafter be accessed without
                 further synchronization.  Access to other fields and methods
                 should be synchronized on the node itself.
                
                 A zone&apos;s contents is a NameNode tree that, once created, is never
                 modified.  The only synchronization needed is to ensure that it
                 gets flushed into shared memory after being created, which is
                 accomplished by ZoneNode.populate().  The contents are accessed
                 via a soft reference, so a ZoneNode may be seen to be populated
                 one moment and unpopulated the next.                
            </comment>
            <comment line="791">
                Returns the node in the zone tree corresponding to a
                 fully-qualified domain name.  If the desired portion of the
                 tree has not yet been populated or has been outdated, a zone
                 transfer is done to populate the tree.                
            </comment>
            <comment line="877">
                Does a zone transfer to [re]populate a zone in the zone tree.
                 Returns the zone&apos;s new contents.                
            </comment>
            <comment line="892">
                Determine if a ZoneNode&apos;s data is current.
                 We base this on a comparison between the cached serial
                 number and the latest SOA record.
                
                 If there is no SOA record, znode is not (or is no longer) a zone:
                 depopulate znode and return false.
                
                 Since this method may perform a network operation, it is best
                 to call it with znode unlocked.  Caller must then note that the
                 result may be outdated by the time this method returns.                
            </comment>
            <comment line="924">
                ---------- Debugging                
            </comment>
            <comment line="965">
                nodes to be enumerated, or null if none                
            </comment>
            <comment line="966">
                context being enumerated                
            </comment>
            <comment line="975">
                ctx will be set to null when no longer needed by the enumeration.                
            </comment>
            <comment line="1034">
                Finalizer not needed since it&apos;s safe to leave ctx unclosed.                
            </comment>
            <comment line="1035">
                protected void finalize() {                
            </comment>
            <comment line="1036">
                close();                
            </comment>
            <comment line="1037">
                }                
            </comment>
            <declaration name="rrclass" type="int" line="942"/>
            <declaration name="rrtype" type="int" line="943"/>
            <method name="CT" type="constructor" line="945">
                <params>
                    <param name="rrclass" type="int"/>
                    <param name="rrtype" type="int"/>
                </params>
            </method>
        </class>
        <class name="NameClassPairEnumeration" line="962">
            <comment line="49">
                fully-qualified domain name of this context,                
            </comment>
            <comment line="50">
                with a root (empty) label at position 0                
            </comment>
            <comment line="52">
                true if environment is possibly shared                
            </comment>
            <comment line="53">
                and so must be copied on write                
            </comment>
            <comment line="54">
                was this DnsContext created by                
            </comment>
            <comment line="55">
                another?  see composeName()                
            </comment>
            <comment line="59">
                must all responses be authoritative?                
            </comment>
            <comment line="60">
                request recursion on queries?                
            </comment>
            <comment line="61">
                initial timeout on UDP queries in ms                
            </comment>
            <comment line="62">
                number of UDP retries                
            </comment>
            <comment line="66">
                Timeouts for UDP queries use exponential backoff:  each retry                
            </comment>
            <comment line="67">
                is for twice as long as the last.  The following constants set                
            </comment>
            <comment line="68">
                the defaults for the initial timeout (in ms) and the number of                
            </comment>
            <comment line="69">
                retries, and name the environment properties used to override                
            </comment>
            <comment line="70">
                these defaults.                
            </comment>
            <comment line="77">
                The resource record type and class to use for lookups, and the                
            </comment>
            <comment line="78">
                property used to modify them                
            </comment>
            <comment line="82">
                Property used to disallow recursion on queries                
            </comment>
            <comment line="85">
                ANY == ResourceRecord.QCLASS_STAR == ResourceRecord.QTYPE_STAR                
            </comment>
            <comment line="88">
                The zone tree used for list operations                
            </comment>
            <comment line="114">
                Returns a clone of a DNS context, just like DnsContext(DnsContext)
                 but with a different domain name and with parentIsDns set to true.                
            </comment>
            <comment line="124">
                Returns a clone of a DNS context.  The context&apos;s modifiable
                 private state is independent of the original&apos;s (so closing one
                 context, for example, won&apos;t close the other).  The two contexts
                 share &lt;tt&gt;environment&lt;tt&gt;, but it&apos;s copy-on-write so there&apos;s
                 no conflict.                
            </comment>
            <comment line="153">
                ---------- Environment operations                
            </comment>
            <comment line="155">
                Override default with a noncloning version.                
            </comment>
            <comment line="234">
                Update PROVIDER_URL property.  Call this only when environment
                 is not being shared.                
            </comment>
            <comment line="243">
                Read environment properties and set parameters.                
            </comment>
            <comment line="273">
                ---------- Naming operations                
            </comment>
            <comment line="390">
                ---------- Directory operations                
            </comment>
            <comment line="501">
                ---------- Name-related operations                
            </comment>
            <comment line="563">
                ---------- Helper methods                
            </comment>
            <comment line="565">
                Resolver is not created until needed, to allow time for updates
                 to the environment.                
            </comment>
            <comment line="576">
                Returns the fully-qualified domain name of a name given
                 relative to this context.  Result includes a root label (an
                 empty component at position 0).                
            </comment>
            <comment line="601">
                Converts resource records to an attribute set.  Only resource
                 records in the answer section are used, and only those that
                 match the classes and types in cts (see classAndTypeMatch()
                 for matching rules).                
            </comment>
            <comment line="631">
                Returns true if rrclass and rrtype match some element of cts.
                 A match occurs if corresponding classes and types are equal,
                 or if the array value is ANY.  If cts is null, then any class
                 and type match.                
            </comment>
            <comment line="655">
                Returns the attribute ID for a resource record given its class
                 and type.  If the record is in the internet class, the
                 corresponding attribute ID is the record&apos;s type name (or the
                 integer type value if the name is not known).  If the record is
                 not in the internet class, the class name (or integer class
                 value) is prepended to the attribute ID, separated by a space.
                
                 A class or type value of ANY represents an indeterminate class
                 or type, and is represented within the attribute ID by &quot;&quot;.
                 For example, the attribute ID &quot;IN &quot; represents
                 any type in the internet class, and &quot; NS&quot; represents an NS
                 record of any class.                
            </comment>
            <comment line="677">
                Returns the class and type values corresponding to an attribute
                 ID.  An indeterminate class or type is represented by ANY.  See
                 toAttrId() for the format of attribute IDs.
                
                 @throws InvalidAttributeIdentifierException
                          if class or type is unknown                
            </comment>
            <comment line="719">
                Returns an array of the classes and types corresponding to a
                 set of attribute IDs.  See toAttrId() for the format of
                 attribute IDs, and classAndTypeMatch() for the format of the
                 array returned.                
            </comment>
            <comment line="738">
                Returns the most restrictive resource record class and type
                 that may be used to query for records matching cts.
                 See classAndTypeMatch() for matching rules.                
            </comment>
            <comment line="771">
                ---------- Support for list operations                
            </comment>
            <comment line="773">
                Synchronization notes:
                
                 Any access to zoneTree that walks the tree, whether it modifies
                 the tree or not, is synchronized on zoneTree.
                 [%%% Note:  a readwrite lock would allow increased concurrency.]
                 The depth of a ZoneNode can thereafter be accessed without
                 further synchronization.  Access to other fields and methods
                 should be synchronized on the node itself.
                
                 A zone&apos;s contents is a NameNode tree that, once created, is never
                 modified.  The only synchronization needed is to ensure that it
                 gets flushed into shared memory after being created, which is
                 accomplished by ZoneNode.populate().  The contents are accessed
                 via a soft reference, so a ZoneNode may be seen to be populated
                 one moment and unpopulated the next.                
            </comment>
            <comment line="791">
                Returns the node in the zone tree corresponding to a
                 fully-qualified domain name.  If the desired portion of the
                 tree has not yet been populated or has been outdated, a zone
                 transfer is done to populate the tree.                
            </comment>
            <comment line="877">
                Does a zone transfer to [re]populate a zone in the zone tree.
                 Returns the zone&apos;s new contents.                
            </comment>
            <comment line="892">
                Determine if a ZoneNode&apos;s data is current.
                 We base this on a comparison between the cached serial
                 number and the latest SOA record.
                
                 If there is no SOA record, znode is not (or is no longer) a zone:
                 depopulate znode and return false.
                
                 Since this method may perform a network operation, it is best
                 to call it with znode unlocked.  Caller must then note that the
                 result may be outdated by the time this method returns.                
            </comment>
            <comment line="924">
                ---------- Debugging                
            </comment>
            <comment line="965">
                nodes to be enumerated, or null if none                
            </comment>
            <comment line="966">
                context being enumerated                
            </comment>
            <comment line="975">
                ctx will be set to null when no longer needed by the enumeration.                
            </comment>
            <comment line="1034">
                Finalizer not needed since it&apos;s safe to leave ctx unclosed.                
            </comment>
            <comment line="1035">
                protected void finalize() {                
            </comment>
            <comment line="1036">
                close();                
            </comment>
            <comment line="1037">
                }                
            </comment>
            <implements interface="NamingEnumeration"/>
            <declaration name="nodes" type="Enumeration" line="964"/>
            <declaration name="ctx" type="DnsContext" line="965"/>
            <method name="NameClassPairEnumeration" type="constructor" line="967">
                <params>
                    <param name="ctx" type="DnsContext"/>
                    <param name="nodes" type="Hashtable"/>
                </params>
            </method>
            <method name="close" type="void" line="977"/>
            <method name="hasMore" type="boolean" line="982">
                <declaration name="more" type="boolean" line="983"/>
                <scope line="984"/>
            </method>
            <method name="next" type="Object" line="990">
                <scope line="991"/>
                <declaration name="nnode" type="NameNode" line="994"/>
                <declaration name="className" type="String" line="995"/>
                <declaration name="label" type="String" line="1000"/>
                <declaration name="compName" type="Name" line="1001"/>
                <declaration name="cname" type="Name" line="1002"/>
                <declaration name="ncp" type="NameClassPair" line="1004"/>
            </method>
            <method name="hasMoreElements" type="boolean" line="1009"/>
            <method name="nextElement" type="Object" line="1013">
                <scope line="1014"/>
                <scope line="1016"/>
            </method>
        </class>
        <class name="BindingEnumeration" line="1027">
            <extends class="NameClassPairEnumeration"/>
            <comment line="49">
                fully-qualified domain name of this context,                
            </comment>
            <comment line="50">
                with a root (empty) label at position 0                
            </comment>
            <comment line="52">
                true if environment is possibly shared                
            </comment>
            <comment line="53">
                and so must be copied on write                
            </comment>
            <comment line="54">
                was this DnsContext created by                
            </comment>
            <comment line="55">
                another?  see composeName()                
            </comment>
            <comment line="59">
                must all responses be authoritative?                
            </comment>
            <comment line="60">
                request recursion on queries?                
            </comment>
            <comment line="61">
                initial timeout on UDP queries in ms                
            </comment>
            <comment line="62">
                number of UDP retries                
            </comment>
            <comment line="66">
                Timeouts for UDP queries use exponential backoff:  each retry                
            </comment>
            <comment line="67">
                is for twice as long as the last.  The following constants set                
            </comment>
            <comment line="68">
                the defaults for the initial timeout (in ms) and the number of                
            </comment>
            <comment line="69">
                retries, and name the environment properties used to override                
            </comment>
            <comment line="70">
                these defaults.                
            </comment>
            <comment line="77">
                The resource record type and class to use for lookups, and the                
            </comment>
            <comment line="78">
                property used to modify them                
            </comment>
            <comment line="82">
                Property used to disallow recursion on queries                
            </comment>
            <comment line="85">
                ANY == ResourceRecord.QCLASS_STAR == ResourceRecord.QTYPE_STAR                
            </comment>
            <comment line="88">
                The zone tree used for list operations                
            </comment>
            <comment line="114">
                Returns a clone of a DNS context, just like DnsContext(DnsContext)
                 but with a different domain name and with parentIsDns set to true.                
            </comment>
            <comment line="124">
                Returns a clone of a DNS context.  The context&apos;s modifiable
                 private state is independent of the original&apos;s (so closing one
                 context, for example, won&apos;t close the other).  The two contexts
                 share &lt;tt&gt;environment&lt;tt&gt;, but it&apos;s copy-on-write so there&apos;s
                 no conflict.                
            </comment>
            <comment line="153">
                ---------- Environment operations                
            </comment>
            <comment line="155">
                Override default with a noncloning version.                
            </comment>
            <comment line="234">
                Update PROVIDER_URL property.  Call this only when environment
                 is not being shared.                
            </comment>
            <comment line="243">
                Read environment properties and set parameters.                
            </comment>
            <comment line="273">
                ---------- Naming operations                
            </comment>
            <comment line="390">
                ---------- Directory operations                
            </comment>
            <comment line="501">
                ---------- Name-related operations                
            </comment>
            <comment line="563">
                ---------- Helper methods                
            </comment>
            <comment line="565">
                Resolver is not created until needed, to allow time for updates
                 to the environment.                
            </comment>
            <comment line="576">
                Returns the fully-qualified domain name of a name given
                 relative to this context.  Result includes a root label (an
                 empty component at position 0).                
            </comment>
            <comment line="601">
                Converts resource records to an attribute set.  Only resource
                 records in the answer section are used, and only those that
                 match the classes and types in cts (see classAndTypeMatch()
                 for matching rules).                
            </comment>
            <comment line="631">
                Returns true if rrclass and rrtype match some element of cts.
                 A match occurs if corresponding classes and types are equal,
                 or if the array value is ANY.  If cts is null, then any class
                 and type match.                
            </comment>
            <comment line="655">
                Returns the attribute ID for a resource record given its class
                 and type.  If the record is in the internet class, the
                 corresponding attribute ID is the record&apos;s type name (or the
                 integer type value if the name is not known).  If the record is
                 not in the internet class, the class name (or integer class
                 value) is prepended to the attribute ID, separated by a space.
                
                 A class or type value of ANY represents an indeterminate class
                 or type, and is represented within the attribute ID by &quot;&quot;.
                 For example, the attribute ID &quot;IN &quot; represents
                 any type in the internet class, and &quot; NS&quot; represents an NS
                 record of any class.                
            </comment>
            <comment line="677">
                Returns the class and type values corresponding to an attribute
                 ID.  An indeterminate class or type is represented by ANY.  See
                 toAttrId() for the format of attribute IDs.
                
                 @throws InvalidAttributeIdentifierException
                          if class or type is unknown                
            </comment>
            <comment line="719">
                Returns an array of the classes and types corresponding to a
                 set of attribute IDs.  See toAttrId() for the format of
                 attribute IDs, and classAndTypeMatch() for the format of the
                 array returned.                
            </comment>
            <comment line="738">
                Returns the most restrictive resource record class and type
                 that may be used to query for records matching cts.
                 See classAndTypeMatch() for matching rules.                
            </comment>
            <comment line="771">
                ---------- Support for list operations                
            </comment>
            <comment line="773">
                Synchronization notes:
                
                 Any access to zoneTree that walks the tree, whether it modifies
                 the tree or not, is synchronized on zoneTree.
                 [%%% Note:  a readwrite lock would allow increased concurrency.]
                 The depth of a ZoneNode can thereafter be accessed without
                 further synchronization.  Access to other fields and methods
                 should be synchronized on the node itself.
                
                 A zone&apos;s contents is a NameNode tree that, once created, is never
                 modified.  The only synchronization needed is to ensure that it
                 gets flushed into shared memory after being created, which is
                 accomplished by ZoneNode.populate().  The contents are accessed
                 via a soft reference, so a ZoneNode may be seen to be populated
                 one moment and unpopulated the next.                
            </comment>
            <comment line="791">
                Returns the node in the zone tree corresponding to a
                 fully-qualified domain name.  If the desired portion of the
                 tree has not yet been populated or has been outdated, a zone
                 transfer is done to populate the tree.                
            </comment>
            <comment line="877">
                Does a zone transfer to [re]populate a zone in the zone tree.
                 Returns the zone&apos;s new contents.                
            </comment>
            <comment line="892">
                Determine if a ZoneNode&apos;s data is current.
                 We base this on a comparison between the cached serial
                 number and the latest SOA record.
                
                 If there is no SOA record, znode is not (or is no longer) a zone:
                 depopulate znode and return false.
                
                 Since this method may perform a network operation, it is best
                 to call it with znode unlocked.  Caller must then note that the
                 result may be outdated by the time this method returns.                
            </comment>
            <comment line="924">
                ---------- Debugging                
            </comment>
            <comment line="965">
                nodes to be enumerated, or null if none                
            </comment>
            <comment line="966">
                context being enumerated                
            </comment>
            <comment line="975">
                ctx will be set to null when no longer needed by the enumeration.                
            </comment>
            <comment line="1034">
                Finalizer not needed since it&apos;s safe to leave ctx unclosed.                
            </comment>
            <comment line="1035">
                protected void finalize() {                
            </comment>
            <comment line="1036">
                close();                
            </comment>
            <comment line="1037">
                }                
            </comment>
            <method name="BindingEnumeration" type="constructor" line="1029">
                <params>
                    <param name="ctx" type="DnsContext"/>
                    <param name="nodes" type="Hashtable"/>
                </params>
            </method>
            <method name="next" type="Object" line="1038">
                <comment line="1052">
                    Clone ctx to create the child context.                    
                </comment>
                <scope line="1039"/>
                <declaration name="nnode" type="NameNode" line="1042"/>
                <declaration name="label" type="String" line="1044"/>
                <declaration name="compName" type="Name" line="1045"/>
                <declaration name="compNameStr" type="String" line="1046"/>
                <declaration name="cname" type="Name" line="1047"/>
                <declaration name="cnameStr" type="String" line="1048"/>
                <declaration name="fqdn" type="DnsName" line="1050"/>
                <declaration name="child" type="DnsContext" line="1053"/>
                <scope line="1055">
                    <declaration name="obj" type="Object" line="1056"/>
                    <declaration name="binding" type="Binding" line="1058"/>
                </scope>
                <scope line="1061">
                    <declaration name="ne" type="NamingException" line="1062"/>
                </scope>
            </method>
        </class>
    </source>