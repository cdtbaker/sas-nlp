<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.rmi.registry">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="javax.naming"/>
        <import package="javax.naming.spi"/>
        <import package="com.sun.jndi.url.rmi.rmiURLContextFactory"/>
        <class name="RegistryContextFactory" line="37">
            <implements interface="ObjectFactory"/>
            <implements interface="InitialContextFactory"/>
            <javadoc line="37">
                A RegistryContextFactory takes an RMI registry reference, and
                  creates the corresponding RMI object or registry context.  In
                  addition, it serves as the initial context factory when using an
                  RMI registry as an initial context.
                  &lt;p&gt;
                  When an initial context is being created, the environment
                  property &quot;java.naming.provider.url&quot; should contain the RMI URL of
                  the appropriate registry.  Otherwise, the default URL &quot;rmi:&quot; is used.
                  &lt;p&gt;
                  An RMI registry reference contains one or more StringRefAddrs of
                  type &quot;URL&quot;, each containing a single RMI URL.  Other addresses
                  are ignored.  Multiple URLs represent alternative addresses for the
                  same logical resource.  The order of the addresses is not significant.                
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="ADDRESS_TYPE" type="String" line="59"/>
            <javadoc line="59">
                The type of each address in an RMI registry reference.                
            </javadoc>
            <method name="getInitialContext" type="Context" line="64">
                <params>
                    <param name="env" type="Hashtable<?,?>"/>
                </params>
                <scope line="66"/>
            </method>
            <method name="getObjectInstance" type="Object" line="75">
                <params>
                    <param name="ref" type="Object"/>
                    <param name="name" type="Name"/>
                    <param name="nameCtx" type="Context"/>
                    <param name="env" type="Hashtable<?,?>"/>
                </params>
                <comment line="79">
                    No need to clone env here.  If getObjectInstance()
                     returns something other than a RegistryContext (which
                     happens if you&apos;re looking up an object bound in the
                     registry, as opposed to looking up the registry itself),
                     then the context is GCed right away and there&apos;s no need to
                     clone the environment.  If getObjectInstance() returns a
                     RegistryContext, then it still goes through
                     GenericURLContext, which calls RegistryContext.lookup()
                     with an empty name, which clones the environment.                    
                </comment>
                <scope line="76"/>
                <declaration name="obj" type="Object" line="90"/>
                <scope line="91">
                    <declaration name="ctx" type="RegistryContext" line="92"/>
                </scope>
            </method>
            <method name="URLToContext" type="Context" line="100">
                <params>
                    <param name="url" type="String"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <declaration name="factory" type="rmiURLContextFactory" line="101"/>
                <declaration name="obj" type="Object" line="102"/>
                <scope line="104"/>
                <scope line="106"/>
            </method>
            <method name="URLsToObject" type="Object" line="113">
                <params>
                    <param name="urls" type="String[]"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <declaration name="factory" type="rmiURLContextFactory" line="114"/>
            </method>
            <javadoc line="118">
                Reads environment to find URL of initial context.
                  The default URL is &quot;rmi:&quot;.                
            </javadoc>
            <method name="getInitCtxURL" type="String" line="122">
                <params>
                    <param name="env" type="Hashtable"/>
                </params>
                <declaration name="defaultURL" type="String" line="124"/>
                <declaration name="url" type="String" line="126"/>
                <scope line="127"/>
            </method>
            <javadoc line="133">
                Returns true if argument is an RMI registry reference.                
            </javadoc>
            <method name="isRegistryRef" type="boolean" line="136">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="138"/>
                <declaration name="thisClassName" type="String" line="141"/>
                <declaration name="ref" type="Reference" line="142"/>
            </method>
            <javadoc line="147">
                Returns the URLs contained within an RMI registry reference.                
            </javadoc>
            <method name="getURLs" type="String[]" line="150">
                <params>
                    <param name="ref" type="Reference"/>
                </params>
                <comment line="152">
                    number of URLs                    
                </comment>
                <comment line="170">
                    Trim URL array down to size.                    
                </comment>
                <declaration name="size" type="int" line="152"/>
                <declaration name="urls" type="String[]" line="153"/>
                <declaration name="addrs" type="Enumeration" line="155"/>
                <scope line="156">
                    <declaration name="addr" type="RefAddr" line="157"/>
                    <scope line="160"/>
                </scope>
                <scope line="165"/>
                <scope line="171"/>
                <declaration name="urls2" type="String[]" line="174"/>
            </method>
        </class>
    </source>