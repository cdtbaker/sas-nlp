<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="javax.naming"/>
        <import package="javax.naming.directory"/>
        <import package="javax.naming.spi.DirectoryManager"/>
        <import package="javax.naming.spi.DirStateFactory"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamClass"/>
        <import package="java.io.InputStream"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.StringTokenizer"/>
        <import package="sun.misc.BASE64Encoder"/>
        <import package="sun.misc.BASE64Decoder"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.lang.reflect.Modifier"/>
        <class name="Obj" line="20">
            <javadoc line="20">
                Class containing static methods and constants for dealing with
                  encoding/decoding JNDI References and Serialized Objects
                  in LDAP.                
                <author>
                    Vincent Ryan                    
                </author>
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <method name="Obj" type="constructor" line="28"/>
            <declaration name="helper" type="VersionHelper" line="30"/>
            <declaration name="JAVA_ATTRIBUTES" type="String[]" line="31"/>
            <declaration name="OBJECT_CLASS" type="int" line="32"/>
            <declaration name="SERIALIZED_DATA" type="int" line="33"/>
            <declaration name="CLASSNAME" type="int" line="34"/>
            <declaration name="FACTORY" type="int" line="35"/>
            <declaration name="CODEBASE" type="int" line="36"/>
            <declaration name="REF_ADDR" type="int" line="37"/>
            <declaration name="TYPENAME" type="int" line="38"/>
            <declaration name="REMOTE_LOC" type="int" line="39"/>
            <javadoc line="39">
                @deprecated                
            </javadoc>
            <declaration name="JAVA_OBJECT_CLASSES" type="String[]" line="43"/>
            <declaration name="JAVA_OBJECT_CLASSES_LOWER" type="String[]" line="44"/>
            <declaration name="STRUCTURAL" type="int" line="45"/>
            <declaration name="BASE_OBJECT" type="int" line="46"/>
            <declaration name="REF_OBJECT" type="int" line="47"/>
            <declaration name="SER_OBJECT" type="int" line="48"/>
            <declaration name="MAR_OBJECT" type="int" line="49"/>
            <javadoc line="50">
                Encode an object in LDAP attributes.
                  Supports binding Referenceable or Reference, Serializable,
                  and DirContext.
                  If the object supports the Referenceable interface then encode
                  the reference to the object. See encodeReference() for details.
                  &lt;p&gt;
                  If the object is serializable, it is stored as follows:
                  javaClassName
                  value: Object.getClass();
                  javaSerializedData
                  value: serialized form of Object (in binary form).
                  javaTypeName
                  value: getTypeNames(Object.getClass());                
            </javadoc>
            <method name="encodeObject" type="Attributes" line="65">
                <params>
                    <param name="separator" type="char"/>
                    <param name="obj" type="Object"/>
                    <param name="attrs" type="Attributes"/>
                    <param name="objectClass" type="Attribute"/>
                    <param name="cloned" type="boolean"/>
                </params>
                <declaration name="structural" type="boolean" line="66"/>
                <scope line="67"/>
                <scope line="70">
                    <scope line="73"/>
                </scope>
                <scope line="79">
                    <scope line="82"/>
                </scope>
                <scope line="88">
                    <scope line="90"/>
                    <scope line="93"/>
                    <scope line="98"/>
                    <scope line="101">
                        <declaration name="tAttr" type="Attribute" line="102"/>
                        <scope line="103"/>
                    </scope>
                </scope>
                <scope line="108"/>
                <scope line="110"/>
            </method>
            <javadoc line="115">
                Each value in javaCodebase contains a list of space-separated
                  URLs. Each value is independent; we can pick any of the values
                  so we just use the first one.                
                <return>
                    an array of URL strings for the codebase                    
                </return>
            </javadoc>
            <method name="getCodebases" type="String[]" line="121">
                <params>
                    <param name="codebaseAttr" type="Attribute"/>
                </params>
                <scope line="122"/>
                <scope line="125">
                    <declaration name="parser" type="StringTokenizer" line="126"/>
                    <declaration name="vec" type="Vector" line="127"/>
                    <scope line="128"/>
                    <declaration name="answer" type="String[]" line="131"/>
                    <scope line="132"/>
                </scope>
            </method>
            <method name="decodeObject" type="Object" line="138">
                <params>
                    <param name="attrs" type="Attributes"/>
                </params>
                <declaration name="attr" type="Attribute" line="139"/>
                <declaration name="codebases" type="String[]" line="140"/>
                <scope line="141">
                    <scope line="142">
                        <declaration name="cl" type="ClassLoader" line="143"/>
                    </scope>
                    <scope line="146"/>
                    <scope line="150"/>
                </scope>
                <scope line="155">
                    <declaration name="ne" type="NamingException" line="156"/>
                </scope>
            </method>
            <javadoc line="161">
                Convert a Reference object into several LDAP attributes.
                  A Reference is stored as into the following attributes:
                  javaClassName
                  value: Reference.getClassName();
                  javaFactory
                  value: Reference.getFactoryClassName();
                  javaCodeBase
                  value: Reference.getFactoryClassLocation();
                  javaReferenceAddress
                  value: #0#typeA#valA
                  value: #1#typeB#valB
                  value: #2#typeC##[serialized RefAddr C]
                  value: #3#typeD#valD
                  where
                  -  the first character denotes the separator
                  -  the number following the first separator denotes the position
                  of the RefAddr within the Reference
                  -  &quot;typeA&quot; is RefAddr.getType()
                  -  ## denotes that the Base64-encoded form of the non-StringRefAddr
                  is to follow; otherwise the value that follows is
                  StringRefAddr.getContents()
                  The default separator is the hash character (#).
                  May provide property for this in future.                
            </javadoc>
            <method name="encodeReference" type="Attributes" line="186">
                <params>
                    <param name="separator" type="char"/>
                    <param name="ref" type="Reference"/>
                    <param name="attrs" type="Attributes"/>
                    <param name="orig" type="Object"/>
                </params>
                <declaration name="s" type="String" line="188"/>
                <scope line="189"/>
                <scope line="192"/>
                <scope line="195"/>
                <scope line="198">
                    <declaration name="tAttr" type="Attribute" line="199"/>
                    <scope line="200"/>
                </scope>
                <declaration name="count" type="int" line="204"/>
                <scope line="205">
                    <declaration name="refAttr" type="Attribute" line="206"/>
                    <declaration name="refAddr" type="RefAddr" line="207"/>
                    <declaration name="encoder" type="BASE64Encoder" line="208"/>
                    <scope line="209">
                        <scope line="211"/>
                        <scope line="214"/>
                    </scope>
                </scope>
            </method>
            <method name="decodeRmiObject" type="Object" line="223">
                <params>
                    <param name="className" type="String"/>
                    <param name="rmiName" type="String"/>
                    <param name="codebases" type="String[]"/>
                </params>
            </method>
            <method name="decodeReference" type="Reference" line="226">
                <params>
                    <param name="attrs" type="Attributes"/>
                    <param name="codebases" type="String[]"/>
                </params>
                <declaration name="attr" type="Attribute" line="227"/>
                <declaration name="className" type="String" line="228"/>
                <declaration name="factory" type="String" line="229"/>
                <scope line="230"/>
                <scope line="233"/>
                <scope line="236"/>
                <declaration name="ref" type="Reference" line="239"/>
                <scope line="240">
                    <declaration name="val" type="String" line="241"/>
                    <declaration name="separator" type="char" line="242"/>
                    <declaration name="start" type="int" line="243"/>
                    <declaration name="decoder" type="BASE64Decoder" line="244"/>
                    <declaration name="cl" type="ClassLoader" line="245"/>
                    <declaration name="refAddrList" type="Vector" line="246"/>
                    <scope line="248">
                        <scope line="250"/>
                        <scope line="255"/>
                        <scope line="258"/>
                        <scope line="261"/>
                        <scope line="264"/>
                        <scope line="268"/>
                        <scope line="271"/>
                        <scope line="275"/>
                        <scope line="278">
                            <declaration name="ra" type="RefAddr" line="281"/>
                        </scope>
                        <scope line="284"/>
                    </scope>
                    <scope line="288"/>
                </scope>
            </method>
            <method name="serializeObject" type="byte[]" line="294">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="295">
                    <declaration name="bytes" type="ByteArrayOutputStream" line="296"/>
                    <declaration name="serial" type="ObjectOutputStream" line="297"/>
                </scope>
                <scope line="302">
                    <declaration name="ne" type="NamingException" line="303"/>
                </scope>
            </method>
            <method name="deserializeObject" type="Object" line="308">
                <params>
                    <param name="obj" type="byte[]"/>
                    <param name="cl" type="ClassLoader"/>
                </params>
                <scope line="309">
                    <declaration name="bytes" type="ByteArrayInputStream" line="310"/>
                    <declaration name="deserial" type="ObjectInputStream" line="311"/>
                    <scope line="312"/>
                    <scope line="315">
                        <declaration name="ne" type="NamingException" line="316"/>
                    </scope>
                    <scope line="320"/>
                </scope>
                <scope line="324">
                    <declaration name="ne" type="NamingException" line="325"/>
                </scope>
            </method>
            <javadoc line="330">
                Returns the attributes to bind given an object and its attributes.                
            </javadoc>
            <method name="determineBindAttrs" type="Attributes" line="333">
                <params>
                    <param name="separator" type="char"/>
                    <param name="obj" type="Object"/>
                    <param name="attrs" type="Attributes"/>
                    <param name="cloned" type="boolean"/>
                    <param name="name" type="Name"/>
                    <param name="ctx" type="Context"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <declaration name="res" type="DirStateFactory.Result" line="334"/>
                <scope line="337"/>
                <scope line="340"/>
                <declaration name="ocNeedsCloning" type="boolean" line="344"/>
                <declaration name="objectClass" type="Attribute" line="345"/>
                <scope line="346"/>
                <scope line="351">
                    <scope line="353"/>
                    <scope line="356"/>
                    <scope line="359"/>
                </scope>
            </method>
            <class name="LoaderInputStream" line="366">
                <extends class="ObjectInputStream"/>
                <javadoc line="366">
                    An ObjectInputStream that uses a class loader to find classes.                    
                </javadoc>
                <declaration name="classLoader" type="ClassLoader" line="370"/>
                <method name="LoaderInputStream" type="constructor" line="371">
                    <params>
                        <param name="in" type="InputStream"/>
                        <param name="cl" type="ClassLoader"/>
                    </params>
                </method>
                <method name="resolveClass" type="Class" line="375">
                    <params>
                        <param name="desc" type="ObjectStreamClass"/>
                    </params>
                    <scope line="376"/>
                    <scope line="379"/>
                </method>
                <method name="resolveProxyClass" type="Class" line="383">
                    <params>
                        <param name="interfaces" type="String[]"/>
                    </params>
                    <declaration name="nonPublicLoader" type="ClassLoader" line="384"/>
                    <declaration name="hasNonPublicInterface" type="boolean" line="385"/>
                    <declaration name="classObjs" type="Class[]" line="386"/>
                    <scope line="387">
                        <declaration name="cl" type="Class" line="388"/>
                        <scope line="389">
                            <scope line="390">
                                <scope line="391"/>
                            </scope>
                            <scope line="395"/>
                        </scope>
                    </scope>
                    <scope line="402"/>
                    <scope line="405"/>
                </method>
            </class>
        </class>
    </source>