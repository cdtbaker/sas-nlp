<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <import package="javax.naming"/>
        <import package="javax.naming.directory.Attributes"/>
        <import package="javax.naming.directory.Attribute"/>
        <import package="javax.naming.directory.BasicAttributes"/>
        <class name="LdapName" line="8">
            <implements interface="Name"/>
            <javadoc line="8">
                &lt;code&gt;LdapName&lt;/code&gt; implements compound names for LDAP v3 as
                  specified by RFC 2253.
                  &lt;p&gt;
                  RFC 2253 has a few ambiguities and outright inconsistencies.  These
                  are resolved as follows:
                  &lt;ul&gt;
                  &lt;li&gt; RFC 2253 leaves the term &quot;whitespace&quot; undefined.  The
                  definition of &quot;optional-space&quot; given in RFC 1779 is used in
                  its place:  either a space character or a carriage return (&quot;\r&quot;).
                  &lt;li&gt; Whitespace is allowed on either side of &apos;,&apos;, &apos;;&apos;, &apos;=&apos;, and &apos;+&apos;.
                  Such whitespace is accepted but not generated by this code,
                  and is ignored when comparing names.
                  &lt;li&gt; AttributeValue strings containing &apos;=&apos; or non-leading &apos;#&apos;
                  characters (unescaped) are accepted.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  String names passed to &lt;code&gt;LdapName&lt;/code&gt; or returned by it
                  use the full 16-bit Unicode character set.  They may also contain
                  characters encoded into UTF-8 with each octet represented by a
                  three-character substring such as &quot;\\B4&quot;.
                  They may not, however, contain characters encoded into UTF-8 with
                  each octet represented by a single character in the string:  the
                  meaning would be ambiguous.
                  &lt;p&gt;
                  &lt;code&gt;LdapName&lt;/code&gt; will properly parse all valid names, but
                  does not attempt to detect all possible violations when parsing
                  invalid names.  It&apos;s &quot;generous&quot;.
                  &lt;p&gt;
                  When names are tested for equality, attribute types and binary
                  values are case-insensitive, and string values are by default
                  case-insensitive.
                  String values with different but equivalent usage of quoting,
                  escaping, or UTF8-hex-encoding are considered equal.  The order of
                  components in multi-valued RDNs (such as &quot;ou=Sales+cn=Bob&quot;) is not
                  significant.                
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="unparsed" type="String" line="47"/>
            <declaration name="rdns" type="Vector" line="48"/>
            <declaration name="valuesCaseSensitive" type="boolean" line="49"/>
            <javadoc line="50">
                Constructs an LDAP name from the given DN.                
                <param>
                    name      An LDAP DN.  To JNDI, a compound name.                    
                </param>
                <throws>
                    InvalidNameException if a syntax violation is detected.                    
                </throws>
            </javadoc>
            <method name="LdapName" type="constructor" line="55">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="LdapName" type="constructor" line="59">
                <params>
                    <param name="name" type="String"/>
                    <param name="rdns" type="Vector"/>
                </params>
            </method>
            <method name="LdapName" type="constructor" line="63">
                <params>
                    <param name="name" type="String"/>
                    <param name="rdns" type="Vector"/>
                    <param name="beg" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="66"/>
            </method>
            <method name="clone" type="Object" line="70"/>
            <method name="toString" type="String" line="73">
                <scope line="74"/>
                <declaration name="buf" type="StringBuffer" line="77"/>
                <scope line="78">
                    <scope line="79"/>
                    <declaration name="rdn" type="Rdn" line="82"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="88">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="compareTo" type="int" line="91">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="LdapName" line="92"/>
                <scope line="93"/>
                <declaration name="minSize" type="int" line="96"/>
                <scope line="97">
                    <declaration name="rdn1" type="Rdn" line="98"/>
                    <declaration name="rdn2" type="Rdn" line="99"/>
                    <declaration name="diff" type="int" line="100"/>
                    <scope line="101"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="107">
                <declaration name="hash" type="int" line="108"/>
                <scope line="109">
                    <declaration name="rdn" type="Rdn" line="110"/>
                </scope>
            </method>
            <method name="size" type="int" line="115"/>
            <method name="isEmpty" type="boolean" line="118"/>
            <method name="getAll" type="Enumeration" line="121">
                <declaration name="enum_" type="Enumeration" line="122"/>
                <anonymous_class line="123">
                    <method name="hasMoreElements" type="boolean" line="124"/>
                    <method name="nextElement" type="Object" line="127"/>
                </anonymous_class>
            </method>
            <method name="get" type="String" line="133">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="getPrefix" type="Name" line="136">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="getSuffix" type="Name" line="139">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="startsWith" type="boolean" line="142">
                <params>
                    <param name="n" type="Name"/>
                </params>
                <declaration name="len1" type="int" line="143"/>
                <declaration name="len2" type="int" line="144"/>
            </method>
            <method name="endsWith" type="boolean" line="147">
                <params>
                    <param name="n" type="Name"/>
                </params>
                <declaration name="len1" type="int" line="148"/>
                <declaration name="len2" type="int" line="149"/>
            </method>
            <javadoc line="152">
                Controls whether string-values are treated as case-sensitive
                  when the string values within names are compared.  The default
                  behavior is case-insensitive comparison.                
            </javadoc>
            <method name="setValuesCaseSensitive" type="void" line="157">
                <params>
                    <param name="caseSensitive" type="boolean"/>
                </params>
                <scope line="160"/>
                <scope line="163"/>
            </method>
            <method name="matches" type="boolean" line="168">
                <params>
                    <param name="beg" type="int"/>
                    <param name="end" type="int"/>
                    <param name="n" type="Name"/>
                </params>
                <scope line="169">
                    <declaration name="rdn" type="Rdn" line="170"/>
                    <scope line="171">
                        <declaration name="ln" type="LdapName" line="172"/>
                    </scope>
                    <scope line="175">
                        <declaration name="rdnString" type="String" line="176"/>
                        <scope line="177"/>
                        <scope line="180"/>
                    </scope>
                    <scope line="184"/>
                </scope>
            </method>
            <method name="addAll" type="Name" line="190">
                <params>
                    <param name="suffix" type="Name"/>
                </params>
            </method>
            <method name="addAll" type="Name" line="193">
                <params>
                    <param name="pos" type="int"/>
                    <param name="suffix" type="Name"/>
                </params>
                <scope line="194">
                    <declaration name="s" type="LdapName" line="195"/>
                    <scope line="196"/>
                </scope>
                <scope line="200">
                    <declaration name="comps" type="Enumeration" line="201"/>
                    <scope line="202">
                        <declaration name="p" type="DnParser" line="203"/>
                    </scope>
                </scope>
            </method>
            <method name="add" type="Name" line="210">
                <params>
                    <param name="comp" type="String"/>
                </params>
            </method>
            <method name="add" type="Name" line="213">
                <params>
                    <param name="pos" type="int"/>
                    <param name="comp" type="String"/>
                </params>
                <declaration name="rdn" type="Rdn" line="214"/>
            </method>
            <method name="remove" type="Object" line="219">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="comp" type="String" line="220"/>
            </method>
            <method name="parse" type="void" line="225"/>
            <method name="isWhitespace" type="boolean" line="228">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="231">
                Given the value of an attribute, returns a string suitable
                  for inclusion in a DN.  If the value is a string, this is
                  accomplished by using backslash (\) to escape the following
                  characters:
                  &lt;ul&gt;
                  &lt;li&gt;leading and trailing whitespace
                  &lt;li&gt;&lt;pre&gt;, = + &lt; &gt; # ; &quot; \&lt;/pre&gt;
                  &lt;/ul&gt;
                  If the value is a byte array, it is converted to hex
                  notation (such as &quot;#CEB1DF80&quot;).                
            </javadoc>
            <method name="escapeAttributeValue" type="String" line="243">
                <params>
                    <param name="val" type="Object"/>
                </params>
            </method>
            <javadoc line="246">
                Given an attribute value formated according to RFC 2253,
                  returns the unformated value.  Returns a string value as
                  a string, and a binary value as a byte array.                
            </javadoc>
            <method name="unescapeAttributeValue" type="Object" line="251">
                <params>
                    <param name="val" type="String"/>
                </params>
            </method>
            <javadoc line="254">
                Serializes only the unparsed DN, for compactness and to avoid
                  any implementation dependency.                
                <serialdata>
                    The DN string and a boolean indicating whether
                      the values are case sensitive.                    
                </serialdata>
            </javadoc>
            <method name="writeObject" type="void" line="260">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <method name="readObject" type="void" line="264">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <scope line="267"/>
                <scope line="270"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="274"/>
            <class name="DnParser" line="275">
                <declaration name="name" type="String" line="276"/>
                <declaration name="chars" type="char[]" line="277"/>
                <declaration name="len" type="int" line="278"/>
                <declaration name="cur" type="int" line="279"/>
                <declaration name="valuesCaseSensitive" type="boolean" line="280"/>
                <method name="DnParser" type="constructor" line="281">
                    <params>
                        <param name="name" type="String"/>
                        <param name="valuesCaseSensitive" type="boolean"/>
                    </params>
                </method>
                <method name="getDn" type="Vector" line="287">
                    <declaration name="rdns" type="Vector" line="289"/>
                    <scope line="290"/>
                    <scope line="294">
                        <scope line="295"/>
                        <scope line="299"/>
                    </scope>
                </method>
                <method name="getRdn" type="Rdn" line="305">
                    <declaration name="rdn" type="Rdn" line="306"/>
                    <scope line="307"/>
                </method>
                <method name="parseRdn" type="Rdn" line="312">
                    <declaration name="rdn" type="Rdn" line="313"/>
                    <scope line="314">
                        <declaration name="attrType" type="String" line="316"/>
                        <scope line="318"/>
                        <declaration name="value" type="String" line="323"/>
                        <scope line="326"/>
                    </scope>
                </method>
                <method name="parseAttrType" type="String" line="333">
                    <declaration name="beg" type="int" line="334"/>
                    <scope line="335">
                        <declaration name="c" type="char" line="336"/>
                        <scope line="337"/>
                        <scope line="340"/>
                    </scope>
                    <scope line="344"/>
                    <scope line="347"/>
                </method>
                <method name="parseAttrValue" type="String" line="352">
                    <scope line="353"/>
                    <scope line="356"/>
                    <scope line="359"/>
                </method>
                <method name="parseBinaryAttrValue" type="String" line="363">
                    <declaration name="beg" type="int" line="364"/>
                    <scope line="366"/>
                </method>
                <method name="parseQuotedAttrValue" type="String" line="371">
                    <declaration name="beg" type="int" line="372"/>
                    <scope line="374">
                        <scope line="375"/>
                    </scope>
                    <scope line="380"/>
                </method>
                <method name="parseStringAttrValue" type="String" line="386">
                    <declaration name="beg" type="int" line="387"/>
                    <declaration name="esc" type="int" line="388"/>
                    <scope line="389">
                        <scope line="390"/>
                    </scope>
                    <scope line="396"/>
                    <declaration name="end" type="int" line="399"/>
                    <scope line="400">
                        <scope line="401"/>
                    </scope>
                </method>
                <method name="consumeWhitespace" type="void" line="407">
                    <scope line="408"/>
                </method>
                <method name="atTerminator" type="boolean" line="412"/>
            </class>
            <class name="Rdn" line="416">
                <declaration name="tvs" type="Vector" line="417"/>
                <method name="add" type="void" line="418">
                    <params>
                        <param name="tv" type="TypeAndValue"/>
                    </params>
                    <declaration name="i" type="int" line="419"/>
                    <scope line="420">
                        <declaration name="diff" type="int" line="421"/>
                        <scope line="422"/>
                        <scope line="425"/>
                    </scope>
                </method>
                <method name="toString" type="String" line="431">
                    <declaration name="buf" type="StringBuffer" line="432"/>
                    <scope line="433">
                        <scope line="434"/>
                    </scope>
                </method>
                <method name="equals" type="boolean" line="441">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="444">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Rdn" line="445"/>
                    <declaration name="minSize" type="int" line="446"/>
                    <scope line="447">
                        <declaration name="tv" type="TypeAndValue" line="448"/>
                        <declaration name="diff" type="int" line="449"/>
                        <scope line="450"/>
                    </scope>
                </method>
                <method name="hashCode" type="int" line="456">
                    <declaration name="hash" type="int" line="457"/>
                    <scope line="458"/>
                </method>
                <method name="toAttributes" type="Attributes" line="463">
                    <declaration name="attrs" type="Attributes" line="464"/>
                    <declaration name="tv" type="TypeAndValue" line="465"/>
                    <declaration name="attr" type="Attribute" line="466"/>
                    <scope line="467">
                        <scope line="469"/>
                        <scope line="472"/>
                    </scope>
                </method>
            </class>
            <class name="TypeAndValue" line="479">
                <declaration name="type" type="String" line="480"/>
                <declaration name="value" type="String" line="481"/>
                <declaration name="binary" type="boolean" line="482"/>
                <declaration name="valueCaseSensitive" type="boolean" line="483"/>
                <declaration name="comparable" type="String" line="484"/>
                <method name="TypeAndValue" type="constructor" line="485">
                    <params>
                        <param name="type" type="String"/>
                        <param name="value" type="String"/>
                        <param name="valueCaseSensitive" type="boolean"/>
                    </params>
                </method>
                <method name="toString" type="String" line="491"/>
                <method name="compareTo" type="int" line="494">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="TypeAndValue" line="495"/>
                    <declaration name="diff" type="int" line="496"/>
                    <scope line="497"/>
                    <scope line="500"/>
                </method>
                <method name="equals" type="boolean" line="505">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="506"/>
                    <declaration name="that" type="TypeAndValue" line="509"/>
                </method>
                <method name="hashCode" type="int" line="512"/>
                <method name="getType" type="String" line="515"/>
                <method name="getUnescapedValue" type="Object" line="518"/>
                <method name="getValueComparable" type="String" line="521">
                    <scope line="522"/>
                    <scope line="525"/>
                    <scope line="528">
                        <scope line="530"/>
                    </scope>
                </method>
                <method name="escapeValue" type="String" line="536">
                    <params>
                        <param name="val" type="Object"/>
                    </params>
                </method>
                <method name="escapeStringValue" type="String" line="539">
                    <params>
                        <param name="val" type="String"/>
                    </params>
                    <declaration name="escapees" type="String" line="540"/>
                    <declaration name="chars" type="char[]" line="541"/>
                    <declaration name="buf" type="StringBuffer" line="542"/>
                    <declaration name="lead" type="int" line="543"/>
                    <scope line="544">
                        <scope line="545"/>
                    </scope>
                    <declaration name="trail" type="int" line="549"/>
                    <scope line="550">
                        <scope line="551"/>
                    </scope>
                    <scope line="555">
                        <declaration name="c" type="char" line="556"/>
                        <scope line="557"/>
                    </scope>
                </method>
                <method name="escapeBinaryValue" type="String" line="564">
                    <params>
                        <param name="val" type="byte[]"/>
                    </params>
                    <declaration name="buf" type="StringBuffer" line="565"/>
                    <scope line="567">
                        <declaration name="b" type="byte" line="568"/>
                    </scope>
                </method>
                <method name="unescapeValue" type="Object" line="574">
                    <params>
                        <param name="val" type="String"/>
                    </params>
                    <declaration name="chars" type="char[]" line="575"/>
                    <declaration name="beg" type="int" line="576"/>
                    <declaration name="end" type="int" line="577"/>
                    <scope line="578"/>
                    <scope line="581"/>
                    <scope line="584"/>
                    <scope line="587"/>
                    <scope line="590"/>
                    <scope line="593"/>
                    <declaration name="buf" type="StringBuffer" line="597"/>
                    <declaration name="esc" type="int" line="598"/>
                    <scope line="599">
                        <scope line="600">
                            <scope line="601"/>
                            <scope line="606">
                                <declaration name="utf8" type="byte[]" line="607"/>
                                <scope line="608">
                                    <scope line="609"/>
                                    <scope line="612"/>
                                </scope>
                                <scope line="616"/>
                            </scope>
                        </scope>
                        <scope line="621"/>
                    </scope>
                    <declaration name="len" type="int" line="625"/>
                    <scope line="626"/>
                </method>
                <method name="decodeHexPairs" type="byte[]" line="631">
                    <params>
                        <param name="chars" type="char[]"/>
                        <param name="beg" type="int"/>
                        <param name="end" type="int"/>
                    </params>
                    <declaration name="bytes" type="byte[]" line="632"/>
                    <scope line="633">
                        <declaration name="hi" type="int" line="634"/>
                        <declaration name="lo" type="int" line="635"/>
                        <scope line="636"/>
                    </scope>
                    <scope line="642"/>
                </method>
                <method name="getUtf8Octets" type="byte[]" line="647">
                    <params>
                        <param name="chars" type="char[]"/>
                        <param name="beg" type="int"/>
                        <param name="end" type="int"/>
                    </params>
                    <declaration name="utf8" type="byte[]" line="648"/>
                    <declaration name="len" type="int" line="649"/>
                    <scope line="650">
                        <declaration name="hi" type="int" line="651"/>
                        <declaration name="lo" type="int" line="652"/>
                        <scope line="653"/>
                    </scope>
                    <scope line="658"/>
                    <scope line="661">
                        <declaration name="res" type="byte[]" line="662"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>