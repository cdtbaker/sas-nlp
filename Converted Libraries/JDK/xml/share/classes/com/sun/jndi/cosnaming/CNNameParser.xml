<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.cosnaming">
        <import package="javax.naming"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="org.omg.CosNaming.NameComponent"/>
        <class name="CNNameParser" line="7">
            <implements interface="NameParser"/>
            <javadoc line="7">
                Parsing routines for NameParser as well as COS Naming stringified names.
                  This is used by CNCtx to create a NameComponent[] object and vice versa.
                  It follows Section 4.5 of Interoperable Naming Service (INS) 98-10-11.
                  In summary, the stringified form is a left-to-right, forward-slash
                  separated name. id and kinds are separated by &apos;.&apos;. backslash is the
                  escape character.                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="mySyntax" type="Properties" line="17"/>
            <declaration name="kindSeparator" type="char" line="18"/>
            <declaration name="compSeparator" type="char" line="19"/>
            <declaration name="escapeChar" type="char" line="20"/>
            <scope line="21"/>
            <javadoc line="26">
                Constructs a new name parser for parsing names in INS syntax.                
            </javadoc>
            <method name="CNNameParser" type="constructor" line="29"/>
            <javadoc line="31">
                Returns a CompoundName given a string in INS syntax.                
                <param>
                    name The non-null string representation of the name.                    
                </param>
                <return>
                    a non-null CompoundName                    
                </return>
            </javadoc>
            <method name="parse" type="Name" line="36">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="comps" type="Vector" line="37"/>
            </method>
            <javadoc line="40">
                Creates a NameComponent[] from a Name structure.
                  Used by CNCtx to convert the input Name arg into a NameComponent[].                
                <param>
                    a CompoundName or a CompositeName;
                      each component must be the stringified form of a NameComponent.                    
                </param>
            </javadoc>
            <method name="nameToCosName" type="NameComponent[]" line="46">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <declaration name="len" type="int" line="47"/>
                <scope line="48"/>
                <declaration name="answer" type="NameComponent[]" line="51"/>
                <scope line="52"/>
            </method>
            <javadoc line="57">
                Returns the INS stringified form of a NameComponent[].
                  Used by CNCtx.getNameInNamespace(), CNCompoundName.toString().                
            </javadoc>
            <method name="cosNameToInsString" type="String" line="61">
                <params>
                    <param name="cname" type="NameComponent[]"/>
                </params>
                <declaration name="str" type="StringBuffer" line="62"/>
                <scope line="63">
                    <scope line="64"/>
                </scope>
            </method>
            <javadoc line="71">
                Creates a CompositeName from a NameComponent[].
                  Used by ExceptionMapper and CNBindingEnumeration to convert
                  a NameComponent[] into a composite name.                
            </javadoc>
            <method name="cosNameToName" type="Name" line="76">
                <params>
                    <param name="cname" type="NameComponent[]"/>
                </params>
                <declaration name="nm" type="Name" line="77"/>
                <scope line="78">
                    <scope line="79"/>
                    <scope line="82"/>
                </scope>
            </method>
            <javadoc line="87">
                Converts an INS-syntax string name into a Vector in which
                  each element of the vector contains a stringified form of
                  a NameComponent.                
            </javadoc>
            <method name="insStringToStringifiedComps" type="Vector" line="92">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="len" type="int" line="93"/>
                <declaration name="components" type="Vector" line="94"/>
                <declaration name="id" type="char[]" line="95"/>
                <declaration name="kind" type="char[]" line="96"/>
                <declaration name="idCount" type="int" line="97"/>
                <declaration name="idMode" type="boolean" line="98"/>
                <scope line="99">
                    <scope line="102">
                        <scope line="103"/>
                        <scope line="106">
                            <scope line="107"/>
                            <scope line="110">
                                <scope line="112"/>
                                <scope line="115"/>
                            </scope>
                            <scope line="119"/>
                        </scope>
                        <scope line="123"/>
                        <scope line="127">
                            <scope line="128"/>
                            <scope line="131"/>
                        </scope>
                    </scope>
                    <scope line="137"/>
                </scope>
            </method>
            <javadoc line="143">
                Return a NameComponent given its stringified form.                
            </javadoc>
            <method name="parseComponent" type="NameComponent" line="146">
                <params>
                    <param name="compStr" type="String"/>
                </params>
                <declaration name="comp" type="NameComponent" line="147"/>
                <declaration name="kindSep" type="int" line="148"/>
                <declaration name="len" type="int" line="149"/>
                <declaration name="j" type="int" line="150"/>
                <declaration name="newStr" type="char[]" line="151"/>
                <declaration name="escaped" type="boolean" line="152"/>
                <scope line="153">
                    <scope line="154"/>
                    <scope line="158">
                        <scope line="159"/>
                        <scope line="162"/>
                        <scope line="165"/>
                    </scope>
                    <scope line="169"/>
                    <scope line="172"/>
                </scope>
                <scope line="177"/>
                <scope line="180">
                    <scope line="183">
                        <scope line="184"/>
                        <scope line="188">
                            <scope line="189"/>
                            <scope line="192"/>
                            <scope line="195"/>
                        </scope>
                        <scope line="199"/>
                    </scope>
                </scope>
            </method>
            <method name="stringifyComponent" type="String" line="207">
                <params>
                    <param name="comp" type="NameComponent"/>
                </params>
                <declaration name="one" type="StringBuffer" line="208"/>
                <scope line="209"/>
                <scope line="212"/>
                <scope line="215"/>
            </method>
            <javadoc line="219">
                Returns a string with &apos;.&apos;, &apos;\&apos;, &apos;/&apos; escaped. Used when
                  stringifying the name into its INS stringified form.                
            </javadoc>
            <method name="escape" type="String" line="223">
                <params>
                    <param name="str" type="String"/>
                </params>
                <scope line="224"/>
                <scope line="227">
                    <declaration name="len" type="int" line="228"/>
                    <declaration name="j" type="int" line="229"/>
                    <declaration name="newStr" type="char[]" line="230"/>
                    <scope line="231">
                        <scope line="232"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="240">
                In INS, there are three meta characters: &apos;.&apos;, &apos;/&apos; and &apos;\&apos;.                
            </javadoc>
            <method name="isMeta" type="boolean" line="243">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <class name="CNCompoundName" line="252">
                <extends class="CompoundName"/>
                <javadoc line="252">
                    An implementation of CompoundName that bypasses the parsing
                      and stringifying code of the default CompoundName.                    
                </javadoc>
                <method name="CNCompoundName" type="constructor" line="257">
                    <params>
                        <param name="enum_" type="Enumeration"/>
                    </params>
                </method>
                <method name="clone" type="Object" line="260"/>
                <method name="getPrefix" type="Name" line="263">
                    <params>
                        <param name="posn" type="int"/>
                    </params>
                    <declaration name="comps" type="Enumeration" line="264"/>
                </method>
                <method name="getSuffix" type="Name" line="267">
                    <params>
                        <param name="posn" type="int"/>
                    </params>
                    <declaration name="comps" type="Enumeration" line="268"/>
                </method>
                <method name="toString" type="String" line="271">
                    <scope line="272"/>
                    <scope line="275"/>
                </method>
                <declaration name="serialVersionUID" type="long" line="279"/>
            </class>
        </class>
    </source>