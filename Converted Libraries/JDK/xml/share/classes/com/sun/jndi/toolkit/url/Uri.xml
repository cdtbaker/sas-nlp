<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.toolkit.url">
        <import package="java.net.MalformedURLException"/>
        <class name="Uri" line="3">
            <javadoc line="3">
                A Uri object represents an absolute Uniform Resource Identifier
                  (URI) as defined by RFC 2396 and updated by RFC 2373 and RFC 2732.
                  The most commonly used form of URI is the Uniform Resource Locator (URL).
                  &lt;p&gt; The java.net.URL class cannot be used to parse URIs since it
                  requires the installation of URL stream handlers that may not be
                  available.  The hack of getting around this by temporarily
                  replacing the scheme part of a URI is not appropriate here: JNDI
                  service providers must work on older Java platforms, and we want
                  new features and bug fixes that are not available in old versions
                  of the URL class.
                  &lt;p&gt; It may be appropriate to drop this code in favor of the
                  java.net.URI class.  The changes would need to be written so as to
                  still run on pre-1.4 platforms not containing that class.
                  &lt;p&gt; The format of an absolute URI (see the RFCs mentioned above) is:
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  absoluteURI   = scheme &quot;:&quot; ( hier_part | opaque_part )
                  scheme        = alpha ( alpha | digit | &quot;+&quot; | &quot;-&quot; | &quot;.&quot; )
                  hier_part     = ( net_path | abs_path ) [ &quot;?&quot; query ]
                  opaque_part   = uric_no_slash uric
                  net_path      = &quot;//&quot; authority [ abs_path ]
                  abs_path      = &quot;/&quot;  path_segments
                  authority     = server | reg_name
                  reg_name      = 1( unreserved | escaped | &quot;$&quot; | &quot;,&quot; |
                  &quot;;&quot; | &quot;:&quot; | &quot;@&quot; | &quot;&amp;&quot; | &quot;=&quot; | &quot;+&quot; )
                  server        = [ [ userinfo &quot;@&quot; ] hostport ]
                  userinfo      = ( unreserved | escaped |
                  &quot;;&quot; | &quot;:&quot; | &quot;&amp;&quot; | &quot;=&quot; | &quot;+&quot; | &quot;$&quot; | &quot;,&quot; )
                  hostport      = host [ &quot;:&quot; port ]
                  host          = hostname | IPv4address | IPv6reference
                  port          = digit
                  IPv6reference = &quot;[&quot; IPv6address &quot;]&quot;
                  IPv6address   = hexpart [ &quot;:&quot; IPv4address ]
                  IPv4address   = 13digit &quot;.&quot; 13digit &quot;.&quot; 13digit &quot;.&quot; 13digit
                  hexpart       = hexseq | hexseq &quot;::&quot; [ hexseq ] | &quot;::&quot; [ hexseq ]
                  hexseq        = hex4 ( &quot;:&quot; hex4)
                  hex4          = 14hex
                  path          = [ abs_path | opaque_part ]
                  path_segments = segment ( &quot;/&quot; segment )
                  segment       = pchar ( &quot;;&quot; param )
                  param         = pchar
                  pchar         = unreserved | escaped |
                  &quot;:&quot; | &quot;@&quot; | &quot;&amp;&quot; | &quot;=&quot; | &quot;+&quot; | &quot;$&quot; | &quot;,&quot;
                  query         = uric
                  uric          = reserved | unreserved | escaped
                  uric_no_slash = unreserved | escaped | &quot;;&quot; | &quot;?&quot; | &quot;:&quot; | &quot;@&quot; |
                  &quot;&amp;&quot; | &quot;=&quot; | &quot;+&quot; | &quot;$&quot; | &quot;,&quot;
                  reserved      = &quot;;&quot; | &quot;/&quot; | &quot;?&quot; | &quot;:&quot; | &quot;@&quot; | &quot;&amp;&quot; | &quot;=&quot; | &quot;+&quot; |
                  &quot;$&quot; | &quot;,&quot; | &quot;[&quot; | &quot;]&quot;
                  unreserved    = alphanum | mark
                  mark          = &quot;-&quot; | &quot;_&quot; | &quot;.&quot; | &quot;!&quot; | &quot;~&quot; | &quot;&quot; | &quot;&apos;&quot; | &quot;(&quot; | &quot;)&quot;
                  escaped       = &quot;%&quot; hex hex
                  unwise        = &quot;{&quot; | &quot;}&quot; | &quot;|&quot; | &quot;\&quot; | &quot;^&quot; | &quot;`&quot;
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; Currently URIs containing &lt;tt&gt;userinfo&lt;/tt&gt; or &lt;tt&gt;reg_name&lt;/tt&gt;
                  are not supported.
                  The &lt;tt&gt;opaque_part&lt;/tt&gt; of a non-hierarchical URI is treated as if
                  if were a &lt;tt&gt;path&lt;/tt&gt; without a leading slash.                
            </javadoc>
            <declaration name="uri" type="String" line="63"/>
            <declaration name="scheme" type="String" line="64"/>
            <declaration name="host" type="String" line="65"/>
            <declaration name="port" type="int" line="66"/>
            <declaration name="hasAuthority" type="boolean" line="67"/>
            <declaration name="path" type="String" line="68"/>
            <declaration name="query" type="String" line="69"/>
            <javadoc line="70">
                Creates a Uri object given a URI string.                
            </javadoc>
            <method name="Uri" type="constructor" line="73">
                <params>
                    <param name="uri" type="String"/>
                </params>
            </method>
            <javadoc line="76">
                Creates an uninitialized Uri object. The init() method must
                  be called before any other Uri methods.                
            </javadoc>
            <method name="Uri" type="constructor" line="80"/>
            <javadoc line="82">
                Initializes a Uri object given a URI string.
                  This method must be called exactly once, and before any other Uri
                  methods.                
            </javadoc>
            <method name="init" type="void" line="87">
                <params>
                    <param name="uri" type="String"/>
                </params>
            </method>
            <javadoc line="91">
                Returns the URI&apos;s scheme.                
            </javadoc>
            <method name="getScheme" type="String" line="94"/>
            <javadoc line="97">
                Returns the host from the URI&apos;s authority part, or null
                  if no host is provided.  If the host is an IPv6 literal, the
                  delimiting brackets are part of the returned value (see{@link java.net.URI#getHost}).                
            </javadoc>
            <method name="getHost" type="String" line="102"/>
            <javadoc line="105">
                Returns the port from the URI&apos;s authority part, or -1 if
                  no port is provided.                
            </javadoc>
            <method name="getPort" type="int" line="109"/>
            <javadoc line="112">
                Returns the URI&apos;s path.  The path is never null.  Note that a
                  slash following the authority part (or the scheme if there is
                  no authority part) is part of the path.  For example, the path
                  of &quot;http://host/a/b&quot; is &quot;/a/b&quot;.                
            </javadoc>
            <method name="getPath" type="String" line="118"/>
            <javadoc line="121">
                Returns the URI&apos;s query part, or null if no query is provided.
                  Note that a query always begins with a leading &quot;?&quot;.                
            </javadoc>
            <method name="getQuery" type="String" line="125"/>
            <javadoc line="128">
                Returns the URI as a string.                
            </javadoc>
            <method name="toString" type="String" line="131"/>
            <method name="parse" type="void" line="134">
                <params>
                    <param name="uri" type="String"/>
                </params>
                <declaration name="i" type="int" line="135"/>
                <scope line="137"/>
                <scope line="143">
                    <declaration name="slash" type="int" line="145"/>
                    <scope line="146"/>
                    <scope line="149">
                        <declaration name="brac" type="int" line="150"/>
                        <scope line="151"/>
                    </scope>
                    <scope line="157">
                        <declaration name="colon" type="int" line="158"/>
                        <declaration name="hostEnd" type="int" line="159"/>
                        <scope line="160"/>
                    </scope>
                    <scope line="165"/>
                </scope>
                <declaration name="qmark" type="int" line="171"/>
                <scope line="172"/>
                <scope line="175"/>
            </method>
        </class>
    </source>