<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="java.io.PrintStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.StringTokenizer"/>
        <import package="javax.naming.ldap.Control"/>
        <import package="javax.naming.NamingException"/>
        <import package="javax.naming.CommunicationException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="com.sun.jndi.ldap.pool.PoolCleaner"/>
        <import package="com.sun.jndi.ldap.pool.Pool"/>
        <class name="LdapPoolManager" line="13">
            <javadoc line="13">
                Contains utilities for managing connection pools of LdapClient.
                  Contains method for
                  - checking whether attempted connection creation may be pooled
                  - creating a pooled connection
                  - closing idle connections.
                  If a timeout period has been configured, then it will automatically
                  close and remove idle connections (those that have not been
                  used for the duration of the timeout period).                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="DEBUG" type="String" line="25"/>
            <declaration name="debug" type="boolean" line="26"/>
            <declaration name="trace" type="boolean" line="27"/>
            <declaration name="POOL_AUTH" type="String" line="28"/>
            <declaration name="POOL_PROTOCOL" type="String" line="29"/>
            <declaration name="MAX_POOL_SIZE" type="String" line="30"/>
            <declaration name="PREF_POOL_SIZE" type="String" line="31"/>
            <declaration name="INIT_POOL_SIZE" type="String" line="32"/>
            <declaration name="POOL_TIMEOUT" type="String" line="33"/>
            <declaration name="SASL_CALLBACK" type="String" line="34"/>
            <declaration name="DEFAULT_MAX_POOL_SIZE" type="int" line="35"/>
            <declaration name="DEFAULT_PREF_POOL_SIZE" type="int" line="36"/>
            <declaration name="DEFAULT_INIT_POOL_SIZE" type="int" line="37"/>
            <declaration name="DEFAULT_TIMEOUT" type="int" line="38"/>
            <declaration name="DEFAULT_AUTH_MECHS" type="String" line="39"/>
            <declaration name="DEFAULT_PROTOCOLS" type="String" line="40"/>
            <declaration name="NONE" type="int" line="41"/>
            <declaration name="SIMPLE" type="int" line="42"/>
            <declaration name="DIGEST" type="int" line="43"/>
            <declaration name="idleTimeout" type="long" line="44"/>
            <declaration name="maxSize" type="int" line="45"/>
            <declaration name="prefSize" type="int" line="46"/>
            <declaration name="initSize" type="int" line="47"/>
            <declaration name="supportPlainProtocol" type="boolean" line="48"/>
            <declaration name="supportSslProtocol" type="boolean" line="49"/>
            <declaration name="pools" type="Pool[]" line="50"/>
            <scope line="51">
                <declaration name="str" type="String" line="56"/>
                <declaration name="parser" type="StringTokenizer" line="57"/>
                <declaration name="count" type="int" line="58"/>
                <declaration name="mech" type="String" line="59"/>
                <declaration name="p" type="int" line="60"/>
                <scope line="61">
                    <scope line="63"/>
                    <scope line="67"/>
                </scope>
                <declaration name="proto" type="String" line="74"/>
                <scope line="75">
                    <scope line="77"/>
                    <scope line="80"/>
                    <scope line="83"/>
                </scope>
                <scope line="86"/>
                <scope line="89"/>
            </scope>
            <method name="LdapPoolManager" type="constructor" line="93"/>
            <javadoc line="95">
                Find the index of the pool for the specified mechanism. If not
                  one of &quot;none&quot;, &quot;simple&quot;, &quot;DIGEST-MD5&quot;, or &quot;GSSAPI&quot;,
                  return -1.                
                <param>
                    mech mechanism type                    
                </param>
            </javadoc>
            <method name="findPool" type="int" line="101">
                <params>
                    <param name="mech" type="String"/>
                </params>
                <scope line="102"/>
                <scope line="105"/>
                <scope line="108"/>
            </method>
            <javadoc line="113">
                Determines whether pooling is allowed given information on how
                  the connection will be used.
                  Non-configurable rejections:
                  - nonstandard socketFactory has been specified: the pool manager
                  cannot track input or parameters used by the socket factory and
                  thus has no way of determining whether two connection requests
                  are equivalent. Maybe in the future it might add a list of allowed
                  socket factories to be configured
                  - trace enabled (except when debugging)
                  - for Digest authentication, if a callback handler has been specified:
                  the pool manager cannot track input collected by the handler
                  and thus has no way of determining whether two connection requests are
                  equivalent. Maybe in the future it might add a list of allowed
                  callback handlers.
                  Configurable tests:
                  - Pooling for the requested protocol (plain or ssl) is supported
                  - Pooling for the requested authentication mechanism is supported                
            </javadoc>
            <method name="isPoolingAllowed" type="boolean" line="132">
                <params>
                    <param name="socketFactory" type="String"/>
                    <param name="trace" type="OutputStream"/>
                    <param name="authMech" type="String"/>
                    <param name="protocol" type="String"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <scope line="133"/>
                <declaration name="COMPARATOR" type="String" line="137"/>
                <declaration name="foundSockCmp" type="boolean" line="138"/>
                <scope line="139">
                    <scope line="140">
                        <declaration name="socketFactoryClass" type="Class" line="141"/>
                        <declaration name="interfaces" type="Class[]" line="142"/>
                        <scope line="143">
                            <scope line="144"/>
                        </scope>
                    </scope>
                    <scope line="149">
                        <declaration name="ce" type="CommunicationException" line="150"/>
                    </scope>
                    <scope line="154"/>
                </scope>
                <declaration name="p" type="int" line="158"/>
                <scope line="159"/>
            </method>
            <javadoc line="173">
                Obtains a pooled connection that either already exists or is
                  newly created using the parameters supplied. If it is newly
                  created, it needs to go through the authentication checks to
                  determine whether an LDAP bind is necessary.
                  Caller needs to invoke ldapClient.authenticateCalled() to
                  determine whether ldapClient.authenticate() needs to be invoked.
                  Caller has that responsibility because caller needs to deal
                  with the LDAP bind response, which might involve referrals,
                  response controls, errors, etc. This method is responsible only
                  for establishing the connection.                
                <return>
                    an LdapClient that is pooled.                    
                </return>
            </javadoc>
            <method name="getLdapClient" type="LdapClient" line="186">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="socketFactory" type="String"/>
                    <param name="connTimeout" type="int"/>
                    <param name="readTimeout" type="int"/>
                    <param name="trace" type="OutputStream"/>
                    <param name="version" type="int"/>
                    <param name="authMech" type="String"/>
                    <param name="ctls" type="Control[]"/>
                    <param name="protocol" type="String"/>
                    <param name="user" type="String"/>
                    <param name="passwd" type="Object"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <declaration name="id" type="ClientId" line="187"/>
                <declaration name="pool" type="Pool" line="188"/>
                <declaration name="p" type="int" line="189"/>
                <scope line="190"/>
            </method>
            <method name="showStats" type="void" line="206">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <scope line="214">
                    <scope line="215"/>
                </scope>
            </method>
            <javadoc line="222">
                Closes idle connections idle since specified time.                
                <param>
                    threshold Close connections idle since this time, as
                      specified in milliseconds since "the epoch".                    
                </param>
                <see>
                    java.util.Date                    
                </see>
            </javadoc>
            <method name="expire" type="void" line="228">
                <params>
                    <param name="threshold" type="long"/>
                </params>
                <scope line="229">
                    <scope line="230"/>
                </scope>
            </method>
            <method name="d" type="void" line="235">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="236"/>
            </method>
            <method name="d" type="void" line="240">
                <params>
                    <param name="msg" type="String"/>
                    <param name="o" type="String"/>
                </params>
                <scope line="241"/>
            </method>
            <method name="getProperty" type="String" line="245">
                <params>
                    <param name="propName" type="String"/>
                    <param name="defVal" type="String"/>
                </params>
                <anonymous_class line="246">
                    <method name="run" type="Object" line="247">
                        <scope line="248"/>
                        <scope line="251"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="getInteger" type="int" line="258">
                <params>
                    <param name="propName" type="String"/>
                    <param name="defVal" type="int"/>
                </params>
                <anonymous_class line="259">
                    <method name="run" type="Object" line="260">
                        <scope line="261"/>
                        <scope line="264"/>
                    </method>
                </anonymous_class>
                <declaration name="val" type="Integer" line="259"/>
            </method>
            <method name="getLong" type="long" line="272">
                <params>
                    <param name="propName" type="String"/>
                    <param name="defVal" type="long"/>
                </params>
                <anonymous_class line="273">
                    <method name="run" type="Object" line="274">
                        <scope line="275"/>
                        <scope line="278"/>
                    </method>
                </anonymous_class>
                <declaration name="val" type="Long" line="273"/>
            </method>
        </class>
    </source>