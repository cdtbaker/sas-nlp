<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.toolkit.ctx">
        <import package="javax.naming"/>
        <import package="javax.naming.spi.ResolveResult"/>
        <import package="java.util.Hashtable"/>
        <class name="Continuation" line="5">
            <extends class="ResolveResult"/>
            <javadoc line="5">
                This class contains information required to continue
                  the method (place where it left off, and remaining name to
                  continue).                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="starter" type="Name" line="12"/>
            <javadoc line="12">
                The name that we started out with. It is initialized by the constructor
                  and used to calculate to &quot;resolved name&quot; in NamingException in
                  fillInException().
                  %%% Note that this approach does not always do the calculation
                  correctly with respect to absence or presence of the trailing slash
                  for resolved name.                
            </javadoc>
            <declaration name="followingLink" type="Object" line="21"/>
            <javadoc line="21">
                Whether links were encountered.                
            </javadoc>
            <declaration name="environment" type="Hashtable" line="25"/>
            <javadoc line="25">
                The environment used by the caller. Initialized by constructor and
                  used when filling out a CannotProceedException.                
            </javadoc>
            <declaration name="continuing" type="boolean" line="30"/>
            <javadoc line="30">
                Indicates whether the Continuation instance indicates that the operation
                  should be continued using the data in the Continuation.
                  Typically, this is only false if an error has been encountered or if
                  the operation has succeeded.                
            </javadoc>
            <declaration name="resolvedContext" type="Context" line="37"/>
            <javadoc line="37">
                The last resolved context. Used to set the &quot;AltNameCtx&quot; in a
                  CannotProceedException.                
            </javadoc>
            <declaration name="relativeResolvedName" type="Name" line="42"/>
            <javadoc line="42">
                The resolved name relative to resolvedContext. Used to set the
                  &quot;AltName&quot; in a CannotProceedException.                
            </javadoc>
            <javadoc line="47">
                Constructs a new instance of Continuation.
                  Used as dummy for contexts that do not do federation (e.g. for schema ops)                
            </javadoc>
            <method name="Continuation" type="constructor" line="51"/>
            <javadoc line="53">
                Constructs a new instance of Continuation.                
                <param>
                    top The name of the object that is to be resolved/operated upon.
                      This becomes the Continuation's 'starter' and is used to
                      calculate the "resolved name" when filling  in a NamingException.                    
                </param>
                <param>
                    environment The environment used by the caller. It is used
                      when setting the "environment" of a CannotProceedException.                    
                </param>
            </javadoc>
            <method name="Continuation" type="constructor" line="61">
                <params>
                    <param name="top" type="Name"/>
                    <param name="environment" type="Hashtable"/>
                </params>
            </method>
            <javadoc line="66">
                Determines whether this Continuation contains data that should be
                  used to continue the operation.                
                <return>
                    true if operation should continue; false if operation has
                      completed (successfully or unsuccessfully).                    
                </return>
            </javadoc>
            <method name="isContinue" type="boolean" line="72"/>
            <javadoc line="75">
                Sets this Continuation to indicate successful completion.
                  Subsequent calls to isContinue() will return false.
                  This method is different from the setError() methods only from
                  the standpoint that this method does not set any of the other
                  fields such as resolved object or resolved context. This is because
                  this method is typically called when the context recognizes that
                  the operation has successfully completed and that the continuation
                  already contains the appropriately set fields.                
                <see>
                    setError                    
                </see>
                <see>
                    setErrorNNS                    
                </see>
            </javadoc>
            <method name="setSuccess" type="void" line="87"/>
            <javadoc line="90">
                Fills in an exception&apos;s fields using data from this Continuation.
                  The resolved name is set by subtracting remainingName from starter.
                  %%% This might not not always produce the correct answer wrt trailing &quot;/&quot;.
                  If the exception is a CannotProceedException, its environment,
                  altName, and altNameCtx fields are set using this continuation&apos;s
                  environment, relativeResolvedName, and resolvedContext.                
                <param>
                    e The non-null naming exception to fill.                    
                </param>
                <return>
                    The non-null naming exception with its fields set using
                      data from this Continuation.                    
                </return>
            </javadoc>
            <method name="fillInException" type="NamingException" line="101">
                <params>
                    <param name="e" type="NamingException"/>
                </params>
                <scope line="107">
                    <declaration name="cpe" type="CannotProceedException" line="108"/>
                    <declaration name="env" type="Hashtable" line="109"/>
                </scope>
            </method>
            <javadoc line="116">
                Sets this Continuation to indicated that an error has occurred,
                  and that the remaining name is rename + &quot;/&quot;.
                  This method is typically called by _nns methods that have been
                  given a name to process. It might process part of that name but
                  encountered some error. Consequenetly, it would call setErrorNNS()
                  with the remaining name. Since the _nns method was expected to
                  operate upon the &quot;nns&quot; of the original name, the remaining name
                  must include the &quot;nns&quot;. That&apos;s why this method adds a trailing &quot;/&quot;.
                  &lt;p&gt;
                  After this method is called, isContinuing() returns false.                
                <param>
                    resObj The possibly null object that was resolved to.                    
                </param>
                <param>
                    remain The non-null remaining name.                    
                </param>
            </javadoc>
            <method name="setErrorNNS" type="void" line="130">
                <params>
                    <param name="resObj" type="Object"/>
                    <param name="remain" type="Name"/>
                </params>
                <declaration name="nm" type="Name" line="131"/>
                <scope line="132"/>
                <scope line="135"/>
            </method>
            <javadoc line="139">
                Form that accepts a String name instead of a Name name.                
                <param>
                    resObj The possibly null object that was resolved to.                    
                </param>
                <param>
                    remain The possibly String remaining name.                    
                </param>
                <see>
                    #setErrorNNS(java.lang.Object,javax.naming.Name)                    
                </see>
            </javadoc>
            <method name="setErrorNNS" type="void" line="145">
                <params>
                    <param name="resObj" type="Object"/>
                    <param name="remain" type="String"/>
                </params>
                <declaration name="rname" type="CompositeName" line="146"/>
                <scope line="147"/>
                <scope line="151"/>
            </method>
            <javadoc line="155">
                Sets this Continuation to indicated that an error has occurred
                  and supply resolved information.
                  This method is typically called by methods that have been
                  given a name to process. It might process part of that name but
                  encountered some error. Consequenetly, it would call setError()
                  with the resolved object and the remaining name.
                  &lt;p&gt;
                  After this method is called, isContinuing() returns false.                
                <param>
                    resObj The possibly null object that was resolved to.                    
                </param>
                <param>
                    remain The possibly null remaining name.                    
                </param>
            </javadoc>
            <method name="setError" type="void" line="167">
                <params>
                    <param name="resObj" type="Object"/>
                    <param name="remain" type="Name"/>
                </params>
            </method>
            <javadoc line="172">
                Form that accepts a String name instead of a Name name.                
                <param>
                    resObj The possibly null object that was resolved to.                    
                </param>
                <param>
                    remain The possibly String remaining name.                    
                </param>
                <see>
                    #setError(java.lang.Object,javax.naming.Name)                    
                </see>
            </javadoc>
            <method name="setError" type="void" line="178">
                <params>
                    <param name="resObj" type="Object"/>
                    <param name="remain" type="String"/>
                </params>
                <declaration name="rname" type="CompositeName" line="179"/>
                <scope line="180">
                    <scope line="181"/>
                    <scope line="184"/>
                </scope>
            </method>
            <method name="setErrorAux" type="void" line="189">
                <params>
                    <param name="resObj" type="Object"/>
                    <param name="rname" type="Name"/>
                </params>
            </method>
            <method name="setContinueAux" type="void" line="194">
                <params>
                    <param name="resObj" type="Object"/>
                    <param name="relResName" type="Name"/>
                    <param name="currCtx" type="Context"/>
                    <param name="remain" type="Name"/>
                </params>
                <scope line="195"/>
                <scope line="198"/>
            </method>
            <javadoc line="206">
                Sets this Continuation with the supplied data, and set remaining name
                  to be &quot;/&quot;.
                  This method is typically called by _nns methods that have been
                  given a name to process. It might the name (without the nns) and
                  continue process of the nns elsewhere.
                  Consequently, it would call this form of the setContinueNNS().
                  This method supplies &quot;/&quot; as the remaining name.
                  &lt;p&gt;
                  After this method is called, isContinuing() returns true.                
                <param>
                    resObj The possibly null resolved object.                    
                </param>
                <param>
                    relResName The non-null resolved name relative to currCtx.                    
                </param>
                <param>
                    currCtx The non-null context from which relResName is to be resolved.                    
                </param>
            </javadoc>
            <method name="setContinueNNS" type="void" line="220">
                <params>
                    <param name="resObj" type="Object"/>
                    <param name="relResName" type="Name"/>
                    <param name="currCtx" type="Context"/>
                </params>
                <declaration name="rname" type="CompositeName" line="221"/>
            </method>
            <javadoc line="224">
                Overloaded form that accesses String names.                
                <param>
                    resObj The possibly null resolved object.                    
                </param>
                <param>
                    relResName The non-null resolved name relative to currCtx.                    
                </param>
                <param>
                    currCtx The non-null context from which relResName is to be resolved.                    
                </param>
                <see>
                    #setContinueNNS(java.lang.Object,javax.naming.Name,javax.naming.Context)                    
                </see>
            </javadoc>
            <method name="setContinueNNS" type="void" line="231">
                <params>
                    <param name="resObj" type="Object"/>
                    <param name="relResName" type="String"/>
                    <param name="currCtx" type="Context"/>
                </params>
                <declaration name="relname" type="CompositeName" line="232"/>
                <scope line="233"/>
                <scope line="236"/>
            </method>
            <javadoc line="240">
                Sets this Continuation with the supplied data, and set remaining name
                  to be the empty name.
                  This method is typically called by list-style methods
                  in which the target context implementing list() expects an
                  empty name. For example when c_list() is given a non-empty name to
                  process, it would resolve that name, and then call setContinue()
                  with the resolved object so that the target context to be listed
                  would be called with the empty name (i.e. list the target context itself).
                  &lt;p&gt;
                  After this method is called, isContinuing() returns true.                
                <param>
                    resObj The possibly null resolved object.                    
                </param>
                <param>
                    relResName The non-null resolved name relative to currCtx.                    
                </param>
                <param>
                    currCtx The non-null context from which relResName is to be resolved.                    
                </param>
            </javadoc>
            <method name="setContinue" type="void" line="255">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="relResName" type="Name"/>
                    <param name="currCtx" type="Context"/>
                </params>
            </method>
            <javadoc line="258">
                Sets this Continuation with the supplied data.
                  This method is typically called by a method that has been asked
                  to operate on a name. The method resolves part of the name
                  (relResName) to obj and sets the unprocessed part to rename.
                  It calls setContinue() so that the operation can be continued
                  using this data.
                  &lt;p&gt;
                  After this method is called, isContinuing() returns true.                
                <param>
                    resObj The possibly null resolved object.                    
                </param>
                <param>
                    relResName The non-null resolved name relative to currCtx.                    
                </param>
                <param>
                    currCtx The non-null context from which relResName is to be resolved.                    
                </param>
                <param>
                    remain The non-null remaining name.                    
                </param>
            </javadoc>
            <method name="setContinue" type="void" line="272">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="relResName" type="Name"/>
                    <param name="currCtx" type="Context"/>
                    <param name="remain" type="Name"/>
                </params>
            </method>
            <javadoc line="277">
                String overload.                
                <param>
                    resObj The possibly null resolved object.                    
                </param>
                <param>
                    relResName The non-null resolved name relative to currCtx.                    
                </param>
                <param>
                    currCtx The non-null context from which relResName is to be resolved.                    
                </param>
                <param>
                    remain The non-null remaining name.                    
                </param>
                <see>
                    #setContinue(java.lang.Object,java.lang.String,javax.naming.Context,java.lang.String)                    
                </see>
            </javadoc>
            <method name="setContinue" type="void" line="285">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="relResName" type="String"/>
                    <param name="currCtx" type="Context"/>
                    <param name="remain" type="String"/>
                </params>
                <declaration name="relname" type="CompositeName" line="286"/>
                <scope line="287">
                    <scope line="288"/>
                    <scope line="291"/>
                </scope>
                <declaration name="rname" type="CompositeName" line="294"/>
                <scope line="295">
                    <scope line="296"/>
                    <scope line="299"/>
                </scope>
            </method>
            <javadoc line="304">
                %%% This method is kept only for backward compatibility. Delete when
                  old implementations updated.
                  Replaced by setContinue(obj, relResName, (Context)currCtx);                
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="setContinue" type="void" line="310">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="currCtx" type="Object"/>
                </params>
            </method>
            <javadoc line="313">
                Sets this Continuation to process a linkRef.
                  %%% Not working yet.                
            </javadoc>
            <method name="setContinueLink" type="void" line="317">
                <params>
                    <param name="linkRef" type="Object"/>
                    <param name="relResName" type="Name"/>
                    <param name="resolvedCtx" type="Context"/>
                    <param name="rname" type="Name"/>
                </params>
            </method>
            <method name="toString" type="String" line="325"/>
            <method name="toString" type="String" line="329">
                <params>
                    <param name="detail" type="boolean"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="333"/>
        </class>
    </source>