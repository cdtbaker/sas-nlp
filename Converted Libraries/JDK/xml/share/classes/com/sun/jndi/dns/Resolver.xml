<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.dns">
        <import package="javax.naming"/>
        <class name="Resolver" line="32">
            <comment line="46">
                initial timeout on UDP queries in ms                
            </comment>
            <comment line="47">
                number of UDP retries                
            </comment>
            <comment line="50">
                Constructs a new Resolver given its servers and timeout parameters.
                 Each server is of the form &quot;server[:port]&quot;.
                 IPv6 literal host names include delimiting brackets.
                 There must be at least one server.
                 &quot;timeout&quot; is the initial timeout interval (in ms) for UDP queries,
                 and &quot;retries&quot; gives the number of retries per server.                
            </comment>
            <comment line="71">
                Queries resource records of a particular class and type for a
                 given domain name.
                 Useful values of rrclass are ResourceRecord.[Q]CLASS_xxx.
                 Useful values of rrtype are ResourceRecord.[Q]TYPE_xxx.
                 If recursion is true, recursion is requested on the query.
                 If auth is true, only authoritative responses are accepted.                
            </comment>
            <comment line="85">
                Queries all resource records of a zone given its domain name and class.
                 If recursion is true, recursion is requested on the query to find
                 the name server (and also on the zone transfer, but it won&apos;t matter).                
            </comment>
            <comment line="102">
                Finds the zone of a given domain name.  The method is to look
                 for the first SOA record on the path from the given domain to
                 the root.  This search may be partially bypassed if the zone&apos;s
                 SOA record is received in the authority section of a response.
                 If recursion is true, recursion is requested on any queries.                
            </comment>
            <comment line="145">
                Finds a zone&apos;s SOA record.  Returns null if no SOA is found (in
                 which case &quot;zone&quot; is not actually a zone).
                 If recursion is true, recursion is requested on the query.                
            </comment>
            <comment line="164">
                Finds the name servers of a zone.  &lt;tt&gt;zone&lt;tt&gt; is a fully-qualified
                 domain name at the top of a zone.
                 If recursion is true, recursion is requested on the query.                
            </comment>
            <javadoc line="32">
                The Resolver class performs DNS client operations in support of DnsContext.
                  &lt;p&gt; Every DnsName instance passed to or returned from a method of
                  this class should be fully-qualified and contain a root label (an
                  empty component at position 0).                
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="dnsClient" type="DnsClient" line="44"/>
            <declaration name="timeout" type="int" line="45"/>
            <declaration name="retries" type="int" line="46"/>
            <method name="Resolver" type="constructor" line="58">
                <params>
                    <param name="servers" type="String[]"/>
                    <param name="timeout" type="int"/>
                    <param name="retries" type="int"/>
                </params>
            </method>
            <method name="close" type="void" line="64"/>
            <method name="query" type="ResourceRecords" line="80">
                <params>
                    <param name="fqdn" type="DnsName"/>
                    <param name="rrclass" type="int"/>
                    <param name="rrtype" type="int"/>
                    <param name="recursion" type="boolean"/>
                    <param name="auth" type="boolean"/>
                </params>
            </method>
            <method name="queryZone" type="ResourceRecords" line="90">
                <params>
                    <param name="zone" type="DnsName"/>
                    <param name="rrclass" type="int"/>
                    <param name="recursion" type="boolean"/>
                </params>
                <declaration name="cl" type="DnsClient" line="92"/>
                <scope line="94"/>
                <scope line="96"/>
            </method>
            <method name="findZoneName" type="DnsName" line="109">
                <params>
                    <param name="fqdn" type="DnsName"/>
                    <param name="rrclass" type="int"/>
                    <param name="recursion" type="boolean"/>
                </params>
                <comment line="112">
                    while below root                    
                </comment>
                <comment line="120">
                    Ignore error and keep searching up the tree.                    
                </comment>
                <comment line="123">
                    found zone&apos;s SOA                    
                </comment>
                <comment line="126">
                    Look for an SOA record giving the zone&apos;s top node.                    
                </comment>
                <comment line="138">
                    one step rootward                    
                </comment>
                <comment line="140">
                    no SOA found below root, so                    
                </comment>
                <comment line="141">
                    return root                    
                </comment>
                <scope line="112">
                    <declaration name="rrs" type="ResourceRecords" line="113"/>
                    <scope line="114"/>
                    <scope line="117"/>
                    <scope line="119"/>
                    <scope line="122">
                        <scope line="123"/>
                        <scope line="127">
                            <declaration name="rr" type="ResourceRecord" line="128"/>
                            <scope line="130">
                                <declaration name="zone" type="DnsName" line="131"/>
                                <scope line="132"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="findSoa" type="ResourceRecord" line="150">
                <params>
                    <param name="zone" type="DnsName"/>
                    <param name="rrclass" type="int"/>
                    <param name="recursion" type="boolean"/>
                </params>
                <declaration name="rrs" type="ResourceRecords" line="152"/>
                <scope line="154">
                    <declaration name="rr" type="ResourceRecord" line="155"/>
                    <scope line="156"/>
                </scope>
            </method>
            <method name="findNameServers" type="String[]" line="169">
                <params>
                    <param name="zone" type="DnsName"/>
                    <param name="recursion" type="boolean"/>
                </params>
                <comment line="171">
                    %%% As an optimization, could look in authority section of                    
                </comment>
                <comment line="172">
                    findZoneName() response first.                    
                </comment>
                <comment line="185">
                    Server name will be passed to InetAddress.getByName(), which                    
                </comment>
                <comment line="186">
                    may not be able to handle a trailing dot.                    
                </comment>
                <comment line="187">
                    assert ns[i].endsWith(&quot;.&quot;);                    
                </comment>
                <declaration name="rrs" type="ResourceRecords" line="173"/>
                <declaration name="ns" type="String[]" line="176"/>
                <scope line="177">
                    <declaration name="rr" type="ResourceRecord" line="178"/>
                    <scope line="180"/>
                </scope>
            </method>
        </class>
    </source>