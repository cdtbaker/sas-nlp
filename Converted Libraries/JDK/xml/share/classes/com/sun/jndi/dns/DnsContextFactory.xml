<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.dns">
        <import package="java.net.MalformedURLException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.List"/>
        <import package="javax.naming"/>
        <import package="javax.naming.spi"/>
        <import package="com.sun.jndi.toolkit.url.UrlUtil"/>
        <import package="sun.net.dns.ResolverConfiguration"/>
        <class name="DnsContextFactory" line="41">
            <comment line="74">
                &quot;urls&quot; are used to determine the servers, but any domain
                 components are overridden by &quot;domain&quot;.                
            </comment>
            <comment line="90">
                Public for use by product test suite.                
            </comment>
            <comment line="124">
                Returns all the servers specified in a set of URLs.
                 If a URL has no host (or port), the servers configured on the
                 underlying platform are used if possible.  If no configured
                 servers can be found, then fall back to the old behavior of
                 using &quot;localhost&quot;.
                 There must be at least one URL.                
            </comment>
            <comment line="167">
                Returns true if serversForUrls(urls) would make use of servers
                 from the underlying platform.                
            </comment>
            <comment line="184">
                Returns a value for the PROVIDER_URL property (space-separated URL
                 Strings) that reflects the given domain and servers.
                 Each server is of the form &quot;server[:port]&quot;.
                 There must be at least one server.
                 IPv6 literal host names include delimiting brackets.                
            </comment>
            <comment line="212">
                Reads environment to find URL(s) of initial context.
                 Default URL is &quot;dns:&quot;.                
            </comment>
            <implements interface="InitialContextFactory"/>
            <javadoc line="41">
                A DnsContextFactory serves as the initial context factory for DNS.
                  &lt;p&gt; When an initial context is being created, the environment
                  property &quot;java.naming.provider.url&quot; should contain a DNS pseudo-URL
                  (see DnsUrl) or a space-separated list of them.  Multiple URLs must
                  all have the same domain value.
                  If the property is not set, the default &quot;dns:&quot; is used.                
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="DEFAULT_URL" type="String" line="56"/>
            <declaration name="DEFAULT_PORT" type="int" line="57"/>
            <method name="getInitialContext" type="Context" line="60">
                <params>
                    <param name="env" type="Hashtable<?,?>"/>
                </params>
                <scope line="61"/>
            </method>
            <method name="getContext" type="DnsContext" line="69">
                <params>
                    <param name="domain" type="String"/>
                    <param name="servers" type="String[]"/>
                    <param name="env" type="Hashtable<?,?>"/>
                </params>
            </method>
            <method name="getContext" type="DnsContext" line="79">
                <params>
                    <param name="domain" type="String"/>
                    <param name="urls" type="DnsUrl[]"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <declaration name="servers" type="String[]" line="81"/>
                <declaration name="ctx" type="DnsContext" line="82"/>
                <scope line="83"/>
            </method>
            <method name="platformServersAvailable" type="boolean" line="92"/>
            <method name="urlToContext" type="Context" line="99">
                <params>
                    <param name="url" type="String"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <comment line="114">
                    If multiple urls, all must have the same domain.                    
                </comment>
                <declaration name="urls" type="DnsUrl[]" line="101"/>
                <scope line="102"/>
                <scope line="104"/>
                <scope line="107"/>
                <declaration name="domain" type="String" line="111"/>
                <scope line="114">
                    <scope line="115"/>
                </scope>
            </method>
            <method name="serversForUrls" type="String[]" line="132">
                <params>
                    <param name="urls" type="DnsUrl[]"/>
                </params>
                <comment line="146">
                    No server or port given, so look to underlying platform.
                     ResolverConfiguration does some limited caching, so the
                     following is reasonably efficient even if called rapid-fire.                    
                </comment>
                <comment line="153">
                    on to next URL (if any, which is unlikely)                    
                </comment>
                <scope line="134"/>
                <declaration name="servers" type="List&lt;String&gt;" line="138"/>
                <scope line="140">
                    <declaration name="server" type="String" line="141"/>
                    <declaration name="port" type="int" line="142"/>
                    <scope line="144">
                        <declaration name="platformServers" type="List&lt;String&gt;" line="148"/>
                        <scope line="150"/>
                    </scope>
                    <scope line="156"/>
                </scope>
            </method>
            <method name="platformServersUsed" type="boolean" line="170">
                <params>
                    <param name="urls" type="DnsUrl[]"/>
                </params>
                <scope line="171"/>
                <scope line="174">
                    <scope line="176"/>
                </scope>
            </method>
            <method name="constructProviderUrl" type="String" line="191">
                <params>
                    <param name="domain" type="String"/>
                    <param name="servers" type="String[]"/>
                </params>
                <comment line="198">
                    assert false : &quot;ISO-Latin-1 charset unavailable&quot;;                    
                </comment>
                <declaration name="path" type="String" line="192"/>
                <scope line="193">
                    <scope line="194"/>
                    <scope line="196"/>
                </scope>
                <declaration name="buf" type="StringBuffer" line="201"/>
                <scope line="202">
                    <scope line="203"/>
                </scope>
            </method>
            <method name="getInitCtxUrl" type="String" line="215">
                <params>
                    <param name="env" type="Hashtable"/>
                </params>
                <declaration name="url" type="String" line="216"/>
            </method>
            <javadoc line="220">
                Removes any DNS server that&apos;s not permitted to access                
                <param>
                    input the input server[:port] list, must not be null                    
                </param>
                <param>
                    oneIsEnough return output once there exists one ok                    
                </param>
                <return>
                    the filtered list, all non-permitted input removed                    
                </return>
            </javadoc>
            <method name="filterNameServers" type="List" line="226">
                <params>
                    <param name="input" type="List"/>
                    <param name="oneIsEnough" type="boolean"/>
                </params>
                <declaration name="security" type="SecurityManager" line="227"/>
                <scope line="228"/>
                <scope line="230">
                    <declaration name="output" type="List" line="231"/>
                    <scope line="232">
                        <scope line="233">
                            <declaration name="platformServer" type="String" line="234"/>
                            <declaration name="colon" type="int" line="235"/>
                            <declaration name="p" type="int" line="238"/>
                            <declaration name="s" type="String" line="242"/>
                            <scope line="245">
                                <scope line="248"/>
                            </scope>
                            <scope line="251"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>