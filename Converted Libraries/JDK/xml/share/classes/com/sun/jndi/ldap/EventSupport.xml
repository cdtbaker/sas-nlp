<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.EventObject"/>
        <import package="javax.naming"/>
        <import package="javax.naming.directory"/>
        <import package="javax.naming.event"/>
        <import package="javax.naming.directory.SearchControls"/>
        <import package="javax.naming.ldap.UnsolicitedNotificationListener"/>
        <import package="javax.naming.ldap.UnsolicitedNotificationEvent"/>
        <import package="javax.naming.ldap.UnsolicitedNotification"/>
        <class name="EventSupport" line="13">
            <javadoc line="13">
                This is a utility class that can be used by a context that supports
                  event notification.  You can use an instance of this class as a member field
                  of your context and delegate various work to it.
                  It is currently structured so that each context should have its own
                  EventSupport (instead of static version shared by all contexts
                  of a service provider).
                  &lt;p&gt;
                  This class supports two types of listeners: those that register for
                  NamingEvents, and those for UnsolicitedNotificationEvents (they can be mixed
                  into the same listener).
                  For NamingEvent listeners, it maintains a hashtable that maps
                  registration requests--the key--to
                  &lt;em&gt;notifiers&lt;/em&gt;--the value. Each registration request consists of:
                  &lt;ul&gt;
                  &lt;li&gt;The name argument of the registration.
                  &lt;li&gt;The filter (default is &quot;(objectclass=)&quot;).
                  &lt;li&gt;The search controls (default is null SearchControls).
                  &lt;li&gt;The events that the listener is interested in. This is determined by
                  finding out which &lt;tt&gt;NamingListener&lt;/tt&gt; interface the listener supports.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  A notifier (&lt;tt&gt;NamingEventNotifier&lt;/tt&gt;) is a worker thread that is responsible
                  for gathering information for generating events requested by its listeners.
                  Each notifier maintains its own list of listeners; these listeners have
                  all made the same registration request (at different times) and implements
                  the same &lt;tt&gt;NamingListener&lt;/tt&gt; interfaces.
                  &lt;p&gt;
                  For unsolicited listeners, this class maintains a vector, unsolicited.
                  When an unsolicited listener is registered, this class adds itself
                  to the context&apos;s LdapClient. When LdapClient receives an unsolicited
                  notification, it notifies this EventSupport to fire an event to the
                  the listeners. Special handling in LdapClient is done for the DISCONNECT
                  notification. [It results in the EventSupport firing also a
                  NamingExceptionEvent to the unsolicited listeners.]
                  &lt;p&gt;
                  When a context no longer needs this EventSupport, it should invoke
                  cleanup() on it.
                  &lt;p&gt;
                  &lt;h4&gt;Registration&lt;/h4&gt;
                  When a registration request is made, this class attempts to find an
                  existing notifier that&apos;s already working on the request. If one is
                  found, the listener is added to the notifier&apos;s list. If one is not found,
                  a new notifier is created for the listener.
                  &lt;h4&gt;Deregistration&lt;/h4&gt;
                  When a deregistration request is made, this class attemps to find its
                  corresponding notifier. If the notifier is found, the listener is removed
                  from the notifier&apos;s list. If the listener is the last listener on the list,
                  the notifier&apos;s thread is terminated and removed from this class&apos;s hashtable.
                  Nothing happens if the notifier is not found.
                  &lt;h4&gt;Event Dispatching&lt;/h4&gt;
                  The notifiers are responsible for gather information for generating events
                  requested by their respective listeners. When a notifier gets sufficient
                  information to generate an event, it creates invokes the
                  appropriate &lt;tt&gt;fireXXXEvent&lt;/tt&gt; on this class with the information and list of
                  listeners. This causes an event and the list of listeners to be added
                  to the &lt;em&gt;event queue&lt;/em&gt;.
                  This class maintains an event queue and a dispatching thread that dequeues
                  events from the queue and dispatches them to the listeners.
                  &lt;h4&gt;Synchronization&lt;/h4&gt;
                  This class is used by the main thread (LdapCtx) to add/remove listeners.
                  It is also used asynchronously by NamingEventNotifiers threads and
                  the context&apos;s Connection thread. It is used by the notifier threads to
                  queue events and to update the notifiers list when the notifiers exit.
                  It is used by the Connection thread to fire unsolicited notifications.
                  Methods that access/update the &apos;unsolicited&apos; and &apos;notifiers&apos; lists are
                  thread-safe.                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="debug" type="boolean" line="83"/>
            <declaration name="ctx" type="LdapCtx" line="84"/>
            <declaration name="notifiers" type="Hashtable" line="85"/>
            <javadoc line="85">
                NamingEventNotifiers; hashed by search arguments;                
            </javadoc>
            <declaration name="unsolicited" type="Vector" line="89"/>
            <javadoc line="89">
                List of unsolicited notification listeners.                
            </javadoc>
            <javadoc line="93">
                Constructs EventSupport for ctx.
                  &lt;em&gt;Do we need to record the name of the target context?
                  Or can we assume that EventSupport is called on a resolved
                  context? Do we need other add/remove-NamingListener methods?
                  package private;                
            </javadoc>
            <method name="EventSupport" type="constructor" line="100">
                <params>
                    <param name="ctx" type="LdapCtx"/>
                </params>
            </method>
            <javadoc line="103">
                Adds &lt;tt&gt;l&lt;/tt&gt; to list of listeners interested in &lt;tt&gt;nm&lt;/tt&gt;.                
            </javadoc>
            <method name="addNamingListener" type="void" line="106">
                <params>
                    <param name="nm" type="String"/>
                    <param name="scope" type="int"/>
                    <param name="l" type="NamingListener"/>
                </params>
                <scope line="107">
                    <declaration name="args" type="NotifierArgs" line="108"/>
                    <declaration name="notifier" type="NamingEventNotifier" line="109"/>
                    <scope line="110"/>
                    <scope line="114"/>
                </scope>
                <scope line="118">
                    <scope line="119"/>
                </scope>
            </method>
            <javadoc line="125">
                Adds &lt;tt&gt;l&lt;/tt&gt; to list of listeners interested in &lt;tt&gt;nm&lt;/tt&gt;
                  and filter.                
            </javadoc>
            <method name="addNamingListener" type="void" line="129">
                <params>
                    <param name="nm" type="String"/>
                    <param name="filter" type="String"/>
                    <param name="ctls" type="SearchControls"/>
                    <param name="l" type="NamingListener"/>
                </params>
                <scope line="130">
                    <declaration name="args" type="NotifierArgs" line="131"/>
                    <declaration name="notifier" type="NamingEventNotifier" line="132"/>
                    <scope line="133"/>
                    <scope line="137"/>
                </scope>
                <scope line="141">
                    <scope line="142"/>
                </scope>
            </method>
            <javadoc line="148">
                Removes &lt;tt&gt;l&lt;/tt&gt; from all notifiers in this context.                
            </javadoc>
            <method name="removeNamingListener" type="void" line="151">
                <params>
                    <param name="l" type="NamingListener"/>
                </params>
                <declaration name="allnotifiers" type="Enumeration" line="152"/>
                <declaration name="notifier" type="NamingEventNotifier" line="153"/>
                <scope line="155">
                    <scope line="157">
                        <scope line="160"/>
                    </scope>
                </scope>
                <scope line="168"/>
            </method>
            <method name="hasUnsolicited" type="boolean" line="172"/>
            <javadoc line="175">
                package private;
                  Called by NamingEventNotifier to remove itself when it encounters
                  a NamingException.                
            </javadoc>
            <method name="removeDeadNotifier" type="void" line="180">
                <params>
                    <param name="info" type="NotifierArgs"/>
                </params>
                <scope line="181"/>
            </method>
            <javadoc line="186">
                Fire an event to unsolicited listeners.
                  package private;
                  Called by LdapCtx when its clnt receives an unsolicited notification.                
            </javadoc>
            <method name="fireUnsolicited" type="void" line="191">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="192"/>
                <scope line="195"/>
                <scope line="198">
                    <declaration name="evt" type="UnsolicitedNotificationEvent" line="199"/>
                </scope>
                <scope line="202">
                    <declaration name="evt" type="NamingExceptionEvent" line="203"/>
                </scope>
            </method>
            <javadoc line="208">
                Stops notifier threads that are collecting event data and
                  stops the event queue from dispatching events.
                  Package private; used by LdapCtx.                
            </javadoc>
            <method name="cleanup" type="void" line="213">
                <scope line="215">
                    <scope line="216"/>
                </scope>
                <scope line="221"/>
            </method>
            <declaration name="eventQueue" type="EventQueue" line="226"/>
            <javadoc line="227">
                Add the event and vector of listeners to the queue to be delivered.
                  An event dispatcher thread dequeues events from the queue and dispatches
                  them to the registered listeners.
                  Package private; used by NamingEventNotifier to fire events                
            </javadoc>
            <method name="queueEvent" type="void" line="233">
                <params>
                    <param name="event" type="EventObject"/>
                    <param name="vector" type="Vector"/>
                </params>
                <declaration name="v" type="Vector" line="235"/>
            </method>
        </class>
    </source>