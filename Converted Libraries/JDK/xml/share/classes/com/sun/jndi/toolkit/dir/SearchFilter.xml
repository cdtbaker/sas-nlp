<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.toolkit.dir">
        <import package="javax.naming"/>
        <import package="javax.naming.directory"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Vector"/>
        <class name="SearchFilter" line="7">
            <implements interface="AttrFilter"/>
            <javadoc line="7">
                A class for parsing LDAP search filters (defined in RFC 1960, 2254)                
                <author>
                    Jon Ruiz                    
                </author>
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <interface name="StringFilter">
                <implements interface="AttrFilter"/>
                <method name="parse" type="void" line="14"/>
            </interface>
            <declaration name="filter" type="String" line="16"/>
            <declaration name="pos" type="int" line="17"/>
            <declaration name="rootFilter" type="StringFilter" line="18"/>
            <declaration name="debug" type="boolean" line="19"/>
            <declaration name="BEGIN_FILTER_TOKEN" type="char" line="20"/>
            <declaration name="END_FILTER_TOKEN" type="char" line="21"/>
            <declaration name="AND_TOKEN" type="char" line="22"/>
            <declaration name="OR_TOKEN" type="char" line="23"/>
            <declaration name="NOT_TOKEN" type="char" line="24"/>
            <declaration name="EQUAL_TOKEN" type="char" line="25"/>
            <declaration name="APPROX_TOKEN" type="char" line="26"/>
            <declaration name="LESS_TOKEN" type="char" line="27"/>
            <declaration name="GREATER_TOKEN" type="char" line="28"/>
            <declaration name="EXTEND_TOKEN" type="char" line="29"/>
            <declaration name="WILDCARD_TOKEN" type="char" line="30"/>
            <method name="SearchFilter" type="constructor" line="31">
                <params>
                    <param name="filter" type="String"/>
                </params>
            </method>
            <method name="check" type="boolean" line="37">
                <params>
                    <param name="targetAttrs" type="Attributes"/>
                </params>
            </method>
            <method name="normalizeFilter" type="void" line="41">
                <scope line="43"/>
                <scope line="46"/>
            </method>
            <method name="skipWhiteSpace" type="void" line="50">
                <scope line="51"/>
            </method>
            <method name="createNextFilter" type="StringFilter" line="55">
                <declaration name="filter" type="StringFilter" line="56"/>
                <scope line="58">
                    <scope line="59"/>
                    <scope line="66"/>
                    <scope line="73"/>
                    <scope line="80"/>
                    <scope line="87"/>
                    <scope line="95"/>
                </scope>
                <scope line="100">
                    <scope line="101"/>
                </scope>
                <scope line="106">
                    <scope line="107"/>
                </scope>
            </method>
            <method name="getCurrentChar" type="char" line="115"/>
            <method name="relCharAt" type="char" line="118">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="consumeChar" type="void" line="121"/>
            <method name="consumeChars" type="void" line="124">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="relIndexOf" type="int" line="127">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <method name="relSubstring" type="String" line="130">
                <params>
                    <param name="beginIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <scope line="131"/>
            </method>
            <class name="CompoundFilter" line="136">
                <implements interface="StringFilter"/>
                <javadoc line="136">
                    A class for dealing with compound filters (&quot;and&quot; &amp; &quot;or&quot; filters).                    
                </javadoc>
                <declaration name="subFilters" type="Vector" line="140"/>
                <declaration name="polarity" type="boolean" line="141"/>
                <method name="CompoundFilter" type="constructor" line="142">
                    <params>
                        <param name="polarity" type="boolean"/>
                    </params>
                </method>
                <method name="parse" type="void" line="146">
                    <scope line="148">
                        <scope line="149"/>
                        <declaration name="filter" type="StringFilter" line="152"/>
                    </scope>
                </method>
                <method name="check" type="boolean" line="157">
                    <params>
                        <param name="targetAttrs" type="Attributes"/>
                    </params>
                    <scope line="158">
                        <declaration name="filter" type="StringFilter" line="159"/>
                        <scope line="160"/>
                    </scope>
                </method>
            </class>
            <class name="NotFilter" line="167">
                <implements interface="StringFilter"/>
                <javadoc line="167">
                    A class for dealing with NOT filters                    
                </javadoc>
                <declaration name="filter" type="StringFilter" line="171"/>
                <method name="parse" type="void" line="172"/>
                <method name="check" type="boolean" line="176">
                    <params>
                        <param name="targetAttrs" type="Attributes"/>
                    </params>
                </method>
            </class>
            <declaration name="EQUAL_MATCH" type="int" line="180"/>
            <declaration name="APPROX_MATCH" type="int" line="181"/>
            <declaration name="GREATER_MATCH" type="int" line="182"/>
            <declaration name="LESS_MATCH" type="int" line="183"/>
            <class name="AtomicFilter" line="184">
                <implements interface="StringFilter"/>
                <javadoc line="184">
                    A class for dealing wtih atomic filters                    
                </javadoc>
                <declaration name="attrID" type="String" line="188"/>
                <declaration name="value" type="String" line="189"/>
                <declaration name="matchType" type="int" line="190"/>
                <method name="parse" type="void" line="191">
                    <scope line="193">
                        <declaration name="endPos" type="int" line="194"/>
                        <declaration name="i" type="int" line="195"/>
                        <scope line="196"/>
                        <declaration name="qualifier" type="int" line="199"/>
                        <scope line="202"/>
                        <scope line="210"/>
                        <scope line="218"/>
                        <scope line="226"/>
                        <scope line="231"/>
                    </scope>
                    <scope line="243">
                        <scope line="244"/>
                        <declaration name="sfe" type="InvalidSearchFilterException" line="248"/>
                    </scope>
                    <scope line="252"/>
                </method>
                <method name="check" type="boolean" line="256">
                    <params>
                        <param name="targetAttrs" type="Attributes"/>
                    </params>
                    <declaration name="candidates" type="Enumeration" line="257"/>
                    <scope line="258">
                        <declaration name="attr" type="Attribute" line="259"/>
                        <scope line="260"/>
                    </scope>
                    <scope line="265">
                        <scope line="266"/>
                    </scope>
                    <scope line="271">
                        <declaration name="val" type="String" line="272"/>
                        <scope line="273"/>
                        <scope line="279">
                            <scope line="280"/>
                        </scope>
                        <scope line="287"/>
                        <scope line="290"/>
                        <scope line="295"/>
                        <scope line="298"/>
                        <scope line="303"/>
                    </scope>
                </method>
                <method name="substringMatch" type="boolean" line="310">
                    <params>
                        <param name="proto" type="String"/>
                        <param name="value" type="String"/>
                    </params>
                    <scope line="311">
                        <scope line="312"/>
                    </scope>
                    <scope line="317"/>
                    <scope line="320"/>
                    <declaration name="currentPos" type="int" line="323"/>
                    <declaration name="subStrs" type="StringTokenizer" line="324"/>
                    <scope line="325">
                        <scope line="326"/>
                    </scope>
                    <scope line="331">
                        <declaration name="currentStr" type="String" line="332"/>
                        <scope line="333"/>
                        <scope line="337"/>
                    </scope>
                    <scope line="342">
                        <scope line="343"/>
                    </scope>
                </method>
            </class>
            <javadoc line="351">
                Creates an LDAP filter as a conjuction of the attributes supplied.                
            </javadoc>
            <method name="format" type="String" line="354">
                <params>
                    <param name="attrs" type="Attributes"/>
                </params>
                <scope line="355"/>
                <declaration name="answer" type="String" line="358"/>
                <declaration name="attr" type="Attribute" line="360"/>
                <scope line="361">
                    <scope line="363"/>
                    <scope line="366">
                        <scope line="367">
                            <declaration name="val" type="String" line="368"/>
                            <scope line="369"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="hexDigit" type="void" line="378">
                <params>
                    <param name="buf" type="StringBuffer"/>
                    <param name="x" type="byte"/>
                </params>
                <declaration name="c" type="char" line="379"/>
            </method>
            <javadoc line="389">
                Returns the string representation of an object (such as an attr value).
                  If obj is a byte array, encode each item as \xx, where xx is hex encoding
                  of the byte value.
                  Else, if obj is not a String, use its string representation (toString()).
                  Special characters in obj (or its string representation) are then
                  encoded appropriately according to RFC 2254.
                         \2a
                  (       \28
                  )       \29
                  \       \5c
                  NUL     \00                
            </javadoc>
            <method name="getEncodedStringRep" type="String" line="402">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="str" type="String" line="403"/>
                <scope line="405">
                    <declaration name="bytes" type="byte[]" line="406"/>
                    <declaration name="b1" type="StringBuffer" line="407"/>
                    <scope line="408"/>
                </scope>
                <scope line="414"/>
                <scope line="417"/>
                <declaration name="len" type="int" line="420"/>
                <declaration name="buf" type="StringBuffer" line="421"/>
                <declaration name="ch" type="char" line="422"/>
                <scope line="423"/>
            </method>
            <javadoc line="446">
                Finds the first occurrence of &lt;tt&gt;ch&lt;/tt&gt; in &lt;tt&gt;val&lt;/tt&gt; starting
                  from position &lt;tt&gt;start&lt;/tt&gt;. It doesn&apos;t count if &lt;tt&gt;ch&lt;/tt&gt;
                  has been escaped by a backslash (\)                
            </javadoc>
            <method name="findUnescaped" type="int" line="451">
                <params>
                    <param name="ch" type="char"/>
                    <param name="val" type="String"/>
                    <param name="start" type="int"/>
                </params>
                <declaration name="len" type="int" line="452"/>
                <scope line="453">
                    <declaration name="where" type="int" line="454"/>
                </scope>
            </method>
            <javadoc line="460">
                Formats the expression &lt;tt&gt;expr&lt;/tt&gt; using arguments from the array
                  &lt;tt&gt;args&lt;/tt&gt;.
                  &lt;code&gt;{i}&lt;/code&gt; specifies the &lt;code&gt;i&lt;/code&gt;&apos;th element from
                  the array &lt;code&gt;args&lt;/code&gt; is to be substituted for the
                  string &quot;&lt;code&gt;{i}&lt;/code&gt;&quot;.
                  To escape &apos;{&apos; or &apos;}&apos; (or any other character), use &apos;\&apos;.
                  Uses getEncodedStringRep() to do encoding.                
            </javadoc>
            <method name="format" type="String" line="469">
                <params>
                    <param name="expr" type="String"/>
                    <param name="args" type="Object[]"/>
                </params>
                <declaration name="param" type="int" line="470"/>
                <declaration name="where" type="int" line="471"/>
                <declaration name="answer" type="StringBuffer" line="472"/>
                <scope line="473">
                    <declaration name="pstart" type="int" line="474"/>
                    <declaration name="pend" type="int" line="475"/>
                    <scope line="476"/>
                    <scope line="479"/>
                    <scope line="482"/>
                    <scope line="485"/>
                </scope>
            </method>
            <method name="selectAttributes" type="Attributes" line="494">
                <params>
                    <param name="originals" type="Attributes"/>
                    <param name="attrIDs" type="String[]"/>
                </params>
                <declaration name="result" type="Attributes" line="496"/>
                <scope line="497">
                    <declaration name="attr" type="Attribute" line="498"/>
                    <scope line="499"/>
                </scope>
            </method>
        </class>
    </source>