<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.dns">
        <import package="java.io.IOException"/>
        <import package="java.net.DatagramSocket"/>
        <import package="java.net.DatagramPacket"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.Socket"/>
        <import package="javax.naming"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <class name="DnsClient" line="46">
            <comment line="54">
                DNS packet header field offsets                
            </comment>
            <comment line="63">
                DNS response codes                
            </comment>
            <comment line="83">
                initial timeout on UDP queries in ms                
            </comment>
            <comment line="84">
                number of UDP retries                
            </comment>
            <comment line="88">
                Requests sent                
            </comment>
            <comment line="91">
                Responses received                
            </comment>
            <comment line="94">
                -------------------------------------------------------------------------                
            </comment>
            <comment line="96">
                Each server is of the form &quot;server[:port]&quot;.  IPv6 literal host names
                 include delimiting brackets.
                 &quot;timeout&quot; is the initial timeout interval (in ms) for UDP queries,
                 and &quot;retries&quot; gives the number of retries per server.                
            </comment>
            <comment line="146">
                A lock to access the request and response queues in tandem.                
            </comment>
            <comment line="158">
                used to set the msg ID field                
            </comment>
            <comment line="161">
                If recursion is true, recursion is requested on the query.
                 If auth is true, only authoritative responses are accepted; other
                 responses throw NameNotFoundException.                
            </comment>
            <comment line="430">
                Sends a TCP query, and returns the first DNS message in the response.                
            </comment>
            <comment line="449">
                Returns the next DNS message from the TCP socket, or null on EOF.                
            </comment>
            <comment line="498">
                Builds a query name in pkt according to the RFC spec.                
            </comment>
            <comment line="516">
                -------------------------------------------------------------------------                
            </comment>
            <comment line="543">
                Checks the header of an incoming DNS response.
                 Returns true if it matches the given xid and throws a naming
                 exception, if appropriate, based on the response code.                
            </comment>
            <comment line="595">
                Throws an exception if appropriate for the response code of a
                 given header.                
            </comment>
            <comment line="624">
                -------------------------------------------------------------------------                
            </comment>
            <javadoc line="46">
                The DnsClient class performs DNS client operations in support of DnsContext.                
            </javadoc>
            <declaration name="IDENT_OFFSET" type="int" line="54"/>
            <declaration name="FLAGS_OFFSET" type="int" line="55"/>
            <declaration name="NUMQ_OFFSET" type="int" line="56"/>
            <declaration name="NUMANS_OFFSET" type="int" line="57"/>
            <declaration name="NUMAUTH_OFFSET" type="int" line="58"/>
            <declaration name="NUMADD_OFFSET" type="int" line="59"/>
            <declaration name="DNS_HDR_SIZE" type="int" line="60"/>
            <declaration name="NO_ERROR" type="int" line="63"/>
            <declaration name="FORMAT_ERROR" type="int" line="64"/>
            <declaration name="SERVER_FAILURE" type="int" line="65"/>
            <declaration name="NAME_ERROR" type="int" line="66"/>
            <declaration name="NOT_IMPL" type="int" line="67"/>
            <declaration name="REFUSED" type="int" line="68"/>
            <declaration name="rcodeDescription" type="String[]" line="70"/>
            <declaration name="DEFAULT_PORT" type="int" line="79"/>
            <declaration name="servers" type="InetAddress[]" line="80"/>
            <declaration name="serverPorts" type="int[]" line="81"/>
            <declaration name="timeout" type="int" line="82"/>
            <declaration name="retries" type="int" line="83"/>
            <declaration name="udpSocket" type="DatagramSocket" line="85"/>
            <declaration name="reqs" type="Set&lt;Integer&gt;" line="88"/>
            <declaration name="resps" type="Map&lt;Integer,byte[]&gt;" line="91"/>
            <method name="DnsClient" type="constructor" line="102">
                <params>
                    <param name="servers" type="String[]"/>
                    <param name="timeout" type="int"/>
                    <param name="retries" type="int"/>
                </params>
                <comment line="118">
                    Is optional port given?                    
                </comment>
                <scope line="105"/>
                <scope line="107">
                    <declaration name="ne" type="NamingException" line="108"/>
                </scope>
                <scope line="116">
                    <declaration name="colon" type="int" line="119"/>
                    <declaration name="server" type="String" line="125"/>
                    <scope line="128"/>
                    <scope line="130">
                        <declaration name="ne" type="NamingException" line="131"/>
                    </scope>
                </scope>
            </method>
            <method name="finalize" type="void" line="141"/>
            <declaration name="queuesLock" type="Object" line="146"/>
            <method name="close" type="void" line="148">
                <scope line="150"/>
            </method>
            <declaration name="ident" type="int" line="157"/>
            <declaration name="identLock" type="Object" line="158"/>
            <method name="query" type="ResourceRecords" line="167">
                <params>
                    <param name="fqdn" type="DnsName"/>
                    <param name="qclass" type="int"/>
                    <param name="qtype" type="int"/>
                    <param name="recursion" type="boolean"/>
                    <param name="auth" type="boolean"/>
                </params>
                <comment line="175">
                    enqueue the outstanding request                    
                </comment>
                <comment line="183">
                                        
                </comment>
                <comment line="184">
                    The UDP retry strategy is to try the 1st server, and then                    
                </comment>
                <comment line="185">
                    each server in order. If no answer, double the timeout                    
                </comment>
                <comment line="186">
                    and try each server again.                    
                </comment>
                <comment line="187">
                                        
                </comment>
                <comment line="190">
                    Try each name server.                    
                </comment>
                <comment line="196">
                    send the request packet and wait for a response.                    
                </comment>
                <comment line="205">
                                        
                </comment>
                <comment line="206">
                    If the matching response is not got within the                    
                </comment>
                <comment line="207">
                    given timeout, check if the response was enqueued                    
                </comment>
                <comment line="208">
                    by some other thread, if not proceed with the next                    
                </comment>
                <comment line="209">
                    server or retry.                    
                </comment>
                <comment line="210">
                                        
                </comment>
                <comment line="215">
                    try next server or retry                    
                </comment>
                <comment line="227">
                    message is truncated -- try TCP                    
                </comment>
                <comment line="229">
                    Try each server, starting with the one that just                    
                </comment>
                <comment line="230">
                    provided the truncated message.                    
                </comment>
                <comment line="253">
                    Got a valid response                    
                </comment>
                <comment line="261">
                    Try next server, or use UDP response                    
                </comment>
                <comment line="263">
                    servers                    
                </comment>
                <comment line="274">
                    Use reflection to allow pre-1.4 compilation.                    
                </comment>
                <comment line="275">
                    This won&apos;t be needed much longer.                    
                </comment>
                <comment line="292">
                    servers                    
                </comment>
                <comment line="293">
                    retries                    
                </comment>
                <comment line="299">
                    A network timeout or other error occurred.                    
                </comment>
                <declaration name="xid" type="int" line="169"/>
                <scope line="170"/>
                <declaration name="pkt" type="Packet" line="178"/>
                <declaration name="caughtException" type="Exception" line="180"/>
                <declaration name="doNotRetry" type="boolean[]" line="181"/>
                <scope line="188">
                    <scope line="191">
                        <scope line="192"/>
                        <scope line="197">
                            <scope line="198"/>
                            <declaration name="msg" type="byte[]" line="202"/>
                            <scope line="211">
                                <scope line="212"/>
                                <scope line="215"/>
                            </scope>
                            <declaration name="hdr" type="Header" line="219"/>
                            <scope line="221"/>
                            <scope line="227">
                                <scope line="231">
                                    <declaration name="ij" type="int" line="232"/>
                                    <scope line="233"/>
                                    <scope line="236">
                                        <declaration name="tcp" type="Tcp" line="237"/>
                                        <declaration name="msg2" type="byte[]" line="239"/>
                                        <scope line="240"/>
                                        <scope line="242"/>
                                        <declaration name="hdr2" type="Header" line="245"/>
                                        <scope line="246"/>
                                        <scope line="252"/>
                                        <scope line="257"/>
                                    </scope>
                                    <scope line="260"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="267">
                            <scope line="268"/>
                            <scope line="271"/>
                            <scope line="277"/>
                        </scope>
                        <scope line="280"/>
                        <scope line="282">
                            <scope line="283"/>
                        </scope>
                        <scope line="286">
                            <scope line="287"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="296"/>
                <declaration name="ne" type="NamingException" line="300"/>
            </method>
            <method name="queryZone" type="ResourceRecords" line="306">
                <params>
                    <param name="zone" type="DnsName"/>
                    <param name="qclass" type="int"/>
                    <param name="recursion" type="boolean"/>
                </params>
                <comment line="317">
                    Try each name server.                    
                </comment>
                <comment line="325">
                    Check only rcode as per                    
                </comment>
                <comment line="326">
                    draft-ietf-dnsext-axfr-clarify-04                    
                </comment>
                <comment line="337">
                    The response is split into multiple DNS messages.                    
                </comment>
                <comment line="351">
                    Delete the duplicate SOA record.                    
                </comment>
                <declaration name="xid" type="int" line="308"/>
                <scope line="309"/>
                <declaration name="pkt" type="Packet" line="313"/>
                <declaration name="caughtException" type="Exception" line="315"/>
                <scope line="318">
                    <scope line="319">
                        <declaration name="tcp" type="Tcp" line="320"/>
                        <declaration name="msg" type="byte[]" line="321"/>
                        <scope line="322">
                            <declaration name="hdr" type="Header" line="324"/>
                            <declaration name="rrs" type="ResourceRecords" line="328"/>
                            <scope line="330"/>
                            <scope line="336">
                                <scope line="338">
                                    <scope line="340"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="355"/>
                    </scope>
                    <scope line="359"/>
                    <scope line="361"/>
                    <scope line="363"/>
                </scope>
                <scope line="367"/>
                <declaration name="ne" type="NamingException" line="370"/>
            </method>
            <javadoc line="377">
                Tries to retreive an UDP packet matching the given xid
                  received within the timeout.
                  If a packet with different xid is received, the received packet
                  is enqueued with the corresponding xid in &apos;resps&apos;.                
            </javadoc>
            <method name="doUdpQuery" type="byte[]" line="385">
                <params>
                    <param name="pkt" type="Packet"/>
                    <param name="server" type="InetAddress"/>
                    <param name="port" type="int"/>
                    <param name="retry" type="int"/>
                    <param name="xid" type="int"/>
                </params>
                <comment line="387">
                    msec after which there are no retries.                    
                </comment>
                <comment line="398">
                    timeout remaining after successive &apos;receive()&apos;                    
                </comment>
                <comment line="425">
                    no matching packet received within the timeout                    
                </comment>
                <declaration name="minTimeout" type="int" line="387"/>
                <scope line="389">
                    <declaration name="opkt" type="DatagramPacket" line="390"/>
                    <declaration name="ipkt" type="DatagramPacket" line="392"/>
                    <declaration name="pktTimeout" type="int" line="394"/>
                    <scope line="395">
                        <declaration name="timeoutLeft" type="int" line="399"/>
                        <declaration name="cnt" type="int" line="400"/>
                        <scope line="401">
                            <scope line="402"/>
                            <declaration name="start" type="long" line="410"/>
                            <declaration name="end" type="long" line="412"/>
                            <declaration name="data" type="byte[]" line="414"/>
                            <scope line="416"/>
                        </scope>
                    </scope>
                    <scope line="422"/>
                </scope>
            </method>
            <method name="doTcpQuery" type="byte[]" line="432">
                <params>
                    <param name="tcp" type="Tcp"/>
                    <param name="pkt" type="Packet"/>
                </params>
                <comment line="435">
                    Send 2-byte message length, then send message.                    
                </comment>
                <declaration name="len" type="int" line="434"/>
                <declaration name="msg" type="byte[]" line="441"/>
                <scope line="442"/>
            </method>
            <method name="continueTcpQuery" type="byte[]" line="451">
                <params>
                    <param name="tcp" type="Tcp"/>
                </params>
                <comment line="453">
                    high-order byte of response length                    
                </comment>
                <comment line="455">
                    EOF                    
                </comment>
                <comment line="457">
                    low-order byte of response length                    
                </comment>
                <comment line="463">
                    next unfilled position in msg                    
                </comment>
                <declaration name="lenHi" type="int" line="453"/>
                <scope line="454"/>
                <declaration name="lenLo" type="int" line="457"/>
                <scope line="458"/>
                <declaration name="len" type="int" line="461"/>
                <declaration name="msg" type="byte[]" line="462"/>
                <declaration name="pos" type="int" line="463"/>
                <scope line="464">
                    <declaration name="n" type="int" line="465"/>
                    <scope line="466"/>
                </scope>
            </method>
            <method name="makeQueryPacket" type="Packet" line="477">
                <params>
                    <param name="fqdn" type="DnsName"/>
                    <param name="xid" type="int"/>
                    <param name="qclass" type="int"/>
                    <param name="qtype" type="int"/>
                    <param name="recursion" type="boolean"/>
                </params>
                <declaration name="qnameLen" type="int" line="478"/>
                <declaration name="pktLen" type="int" line="479"/>
                <declaration name="pkt" type="Packet" line="480"/>
                <declaration name="flags" type="short" line="482"/>
            </method>
            <method name="makeQueryName" type="void" line="498">
                <params>
                    <param name="fqdn" type="DnsName"/>
                    <param name="pkt" type="Packet"/>
                    <param name="off" type="int"/>
                </params>
                <comment line="500">
                    Loop through labels, least-significant first.                    
                </comment>
                <scope line="501">
                    <declaration name="label" type="String" line="502"/>
                    <declaration name="len" type="int" line="503"/>
                    <scope line="506"/>
                </scope>
                <scope line="510"/>
            </method>
            <method name="lookupResponse" type="byte[]" line="517">
                <params>
                    <param name="xid" type="Integer"/>
                </params>
                <comment line="518">
                                        
                </comment>
                <comment line="519">
                    Check the queued responses: some other thread in between                    
                </comment>
                <comment line="520">
                    received the response for this request.                    
                </comment>
                <comment line="521">
                                        
                </comment>
                <scope line="522"/>
                <declaration name="pkt" type="byte[]" line="526"/>
                <scope line="527">
                    <scope line="529"/>
                    <scope line="534"/>
                </scope>
            </method>
            <method name="isMatchResponse" type="boolean" line="548">
                <params>
                    <param name="pkt" type="byte[]"/>
                    <param name="xid" type="int"/>
                </params>
                <comment line="555">
                    already received, ignore the response                    
                </comment>
                <comment line="559">
                    common case- the request sent matches the subsequent response read                    
                </comment>
                <comment line="566">
                    remove the response for the xid if received by some other thread.                    
                </comment>
                <comment line="574">
                                        
                </comment>
                <comment line="575">
                    xid mis-match: enqueue the response, it may belong to some other                    
                </comment>
                <comment line="576">
                    thread that has not yet had a chance to read its response.                    
                </comment>
                <comment line="577">
                    enqueue only the first response, responses for retries are ignored.                    
                </comment>
                <comment line="578">
                                        
                </comment>
                <comment line="580">
                    enqueue only the first response                    
                </comment>
                <declaration name="hdr" type="Header" line="550"/>
                <scope line="551"/>
                <scope line="555"/>
                <scope line="560">
                    <scope line="561"/>
                    <scope line="567"/>
                </scope>
                <scope line="579">
                    <scope line="580"/>
                </scope>
                <scope line="585"/>
            </method>
            <method name="checkResponseCode" type="void" line="598">
                <params>
                    <param name="hdr" type="Header"/>
                </params>
                <declaration name="rcode" type="int" line="600"/>
                <scope line="601"/>
                <declaration name="msg" type="String" line="604"/>
            </method>
            <declaration name="debug" type="boolean" line="625"/>
            <method name="setDebug" type="void" line="627">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <method name="dprint" type="void" line="631">
                <params>
                    <param name="mess" type="String"/>
                </params>
                <scope line="632"/>
            </method>
        </class>
        <class name="Tcp" line="639">
            <comment line="54">
                DNS packet header field offsets                
            </comment>
            <comment line="63">
                DNS response codes                
            </comment>
            <comment line="83">
                initial timeout on UDP queries in ms                
            </comment>
            <comment line="84">
                number of UDP retries                
            </comment>
            <comment line="88">
                Requests sent                
            </comment>
            <comment line="91">
                Responses received                
            </comment>
            <comment line="94">
                -------------------------------------------------------------------------                
            </comment>
            <comment line="96">
                Each server is of the form &quot;server[:port]&quot;.  IPv6 literal host names
                 include delimiting brackets.
                 &quot;timeout&quot; is the initial timeout interval (in ms) for UDP queries,
                 and &quot;retries&quot; gives the number of retries per server.                
            </comment>
            <comment line="146">
                A lock to access the request and response queues in tandem.                
            </comment>
            <comment line="158">
                used to set the msg ID field                
            </comment>
            <comment line="161">
                If recursion is true, recursion is requested on the query.
                 If auth is true, only authoritative responses are accepted; other
                 responses throw NameNotFoundException.                
            </comment>
            <comment line="430">
                Sends a TCP query, and returns the first DNS message in the response.                
            </comment>
            <comment line="449">
                Returns the next DNS message from the TCP socket, or null on EOF.                
            </comment>
            <comment line="498">
                Builds a query name in pkt according to the RFC spec.                
            </comment>
            <comment line="516">
                -------------------------------------------------------------------------                
            </comment>
            <comment line="543">
                Checks the header of an incoming DNS response.
                 Returns true if it matches the given xid and throws a naming
                 exception, if appropriate, based on the response code.                
            </comment>
            <comment line="595">
                Throws an exception if appropriate for the response code of a
                 given header.                
            </comment>
            <comment line="624">
                -------------------------------------------------------------------------                
            </comment>
            <declaration name="sock" type="Socket" line="641"/>
            <declaration name="in" type="java.io.InputStream" line="642"/>
            <declaration name="out" type="java.io.OutputStream" line="643"/>
            <method name="Tcp" type="constructor" line="645">
                <params>
                    <param name="server" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <method name="close" type="void" line="652"/>
        </class>
        <class name="Packet" line="660">
            <comment line="54">
                DNS packet header field offsets                
            </comment>
            <comment line="63">
                DNS response codes                
            </comment>
            <comment line="83">
                initial timeout on UDP queries in ms                
            </comment>
            <comment line="84">
                number of UDP retries                
            </comment>
            <comment line="88">
                Requests sent                
            </comment>
            <comment line="91">
                Responses received                
            </comment>
            <comment line="94">
                -------------------------------------------------------------------------                
            </comment>
            <comment line="96">
                Each server is of the form &quot;server[:port]&quot;.  IPv6 literal host names
                 include delimiting brackets.
                 &quot;timeout&quot; is the initial timeout interval (in ms) for UDP queries,
                 and &quot;retries&quot; gives the number of retries per server.                
            </comment>
            <comment line="146">
                A lock to access the request and response queues in tandem.                
            </comment>
            <comment line="158">
                used to set the msg ID field                
            </comment>
            <comment line="161">
                If recursion is true, recursion is requested on the query.
                 If auth is true, only authoritative responses are accepted; other
                 responses throw NameNotFoundException.                
            </comment>
            <comment line="430">
                Sends a TCP query, and returns the first DNS message in the response.                
            </comment>
            <comment line="449">
                Returns the next DNS message from the TCP socket, or null on EOF.                
            </comment>
            <comment line="498">
                Builds a query name in pkt according to the RFC spec.                
            </comment>
            <comment line="516">
                -------------------------------------------------------------------------                
            </comment>
            <comment line="543">
                Checks the header of an incoming DNS response.
                 Returns true if it matches the given xid and throws a naming
                 exception, if appropriate, based on the response code.                
            </comment>
            <comment line="595">
                Throws an exception if appropriate for the response code of a
                 given header.                
            </comment>
            <comment line="624">
                -------------------------------------------------------------------------                
            </comment>
            <declaration name="buf" type="byte" line="661"/>
            <method name="Packet" type="constructor" line="663">
                <params>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="Packet" type="constructor" line="667">
                <params>
                    <param name="data" type="byte"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="putInt" type="void" line="672">
                <params>
                    <param name="x" type="int"/>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="putShort" type="void" line="679">
                <params>
                    <param name="x" type="int"/>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="putByte" type="void" line="684">
                <params>
                    <param name="x" type="int"/>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="putBytes" type="void" line="688">
                <params>
                    <param name="src" type="byte"/>
                    <param name="src_offset" type="int"/>
                    <param name="dst_offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="length" type="int" line="692"/>
            <method name="getData" type="byte[]" line="696"/>
        </class>
    </source>