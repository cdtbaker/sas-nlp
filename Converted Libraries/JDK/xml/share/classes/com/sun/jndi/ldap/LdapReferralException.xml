<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="javax.naming"/>
        <import package="javax.naming.spi"/>
        <import package="javax.naming.ldap.Control"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <class name="LdapReferralException" line="35">
            <extends class="javax.naming.ldap.LdapReferralException"/>
            <comment line="72">
                ----------- fields initialized in constructor ---------------                
            </comment>
            <comment line="78">
                ----------- fields that have defaults -----------------------                
            </comment>
            <comment line="79">
                alternatives,set by setReferralInfo()                
            </comment>
            <comment line="80">
                index into referrals                
            </comment>
            <comment line="81">
                count of referrals                
            </comment>
            <comment line="82">
                will stop when entry is found                
            </comment>
            <comment line="88">
                referral ex. chain                
            </comment>
            <javadoc line="35">
                This exception is raised when a referral to an alternative context
                  is encountered.
                  &lt;p&gt;
                  An &lt;tt&gt;LdapReferralException&lt;/tt&gt; object contains one or more referrals.
                  Each referral is an alternative location for the same target entry.
                  For example, a referral may be an LDAP URL.
                  The referrals are attempted in sequence until one is successful or
                  all have failed. In the case of the latter then the exception generated
                  by the final referral is recorded and presented later.
                  &lt;p&gt;
                  A referral may be skipped or may be retried. For example, in the case
                  of an authentication error, a referral may be retried with different
                  environment properties.
                  &lt;p&gt;
                  An &lt;tt&gt;LdapReferralException&lt;/tt&gt; object may also contain a reference
                  to a chain of unprocessed &lt;tt&gt;LdapReferralException&lt;/tt&gt; objects.
                  Once the current set of referrals have been exhausted and unprocessed
                  &lt;tt&gt;LdapReferralException&lt;/tt&gt; objects remain, then the
                  &lt;tt&gt;LdapReferralException&lt;/tt&gt; object referenced by the current
                  object is thrown and the cycle continues.
                  &lt;p&gt;
                  If new &lt;tt&gt;LdapReferralException&lt;/tt&gt; objects are generated while
                  following an existing referral then these new objects are appended
                  to the end of the chain of unprocessed &lt;tt&gt;LdapReferralException&lt;/tt&gt;
                  objects.
                  &lt;p&gt;
                  If an exception was recorded while processing a chain of
                  &lt;tt&gt;LdapReferralException&lt;/tt&gt; objects then is is throw once
                  processing has completed.                
                <author>
                    Vincent Ryan                    
                </author>
            </javadoc>
            <declaration name="handleReferrals" type="int" line="72"/>
            <declaration name="envprops" type="Hashtable" line="73"/>
            <declaration name="nextName" type="String" line="74"/>
            <declaration name="reqCtls" type="Control[]" line="75"/>
            <declaration name="referrals" type="Vector" line="78"/>
            <declaration name="referralIndex" type="int" line="79"/>
            <declaration name="referralCount" type="int" line="80"/>
            <declaration name="foundEntry" type="boolean" line="81"/>
            <declaration name="skipThisReferral" type="boolean" line="82"/>
            <declaration name="hopCount" type="int" line="83"/>
            <declaration name="errorEx" type="NamingException" line="84"/>
            <declaration name="newRdn" type="String" line="85"/>
            <declaration name="debug" type="boolean" line="86"/>
            <declaration name="nextReferralEx" type="LdapReferralException" line="87"/>
            <javadoc line="89">
                Constructs a new instance of LdapReferralException.                
                <param>
                    resolvedName    The part of the name that has been successfully
                      resolved.                    
                </param>
                <param>
                    resolvedObj     The object to which resolution was successful.                    
                </param>
                <param>
                    remainingName   The remaining unresolved portion of the name.                    
                </param>
                <param>
                    explanation     Additional detail about this exception.                    
                </param>
            </javadoc>
            <method name="LdapReferralException" type="constructor" line="104">
                <params>
                    <param name="resolvedName" type="Name"/>
                    <param name="resolvedObj" type="Object"/>
                    <param name="remainingName" type="Name"/>
                    <param name="explanation" type="String"/>
                    <param name="envprops" type="Hashtable"/>
                    <param name="nextName" type="String"/>
                    <param name="handleReferrals" type="int"/>
                    <param name="reqCtls" type="Control[]"/>
                </params>
                <comment line="119">
                    If following referral, request controls are passed to referral ctx                    
                </comment>
            </method>
            <javadoc line="123">
                Gets a context at which to continue processing.
                  The current environment properties are re-used.                
            </javadoc>
            <method name="getReferralContext" type="Context" line="127"/>
            <javadoc line="131">
                Gets a context at which to continue processing.
                  The supplied environment properties are used.                
            </javadoc>
            <method name="getReferralContext" type="Context" line="136">
                <params>
                    <param name="newProps" type="Hashtable<?,?>"/>
                </params>
            </method>
            <javadoc line="140">
                Gets a context at which to continue processing.
                  The supplied environment properties and connection controls are used.                
            </javadoc>
            <method name="getReferralContext" type="Context" line="145">
                <params>
                    <param name="newProps" type="Hashtable<?,?>"/>
                    <param name="connCtls" type="Control[]"/>
                </params>
                <comment line="158">
                    reset                    
                </comment>
                <declaration name="refCtx" type="LdapReferralContext" line="150"/>
                <scope line="156"/>
            </method>
            <javadoc line="162">
                Gets referral information.                
            </javadoc>
            <method name="getReferralInfo" type="Object" line="165">
                <scope line="166"/>
                <scope line="171"/>
                <scope line="173"/>
            </method>
            <javadoc line="178">
                Marks the current referral as one to be retried.                
            </javadoc>
            <method name="retryReferral" type="void" line="181">
                <comment line="187">
                    decrement index                    
                </comment>
            </method>
            <javadoc line="189">
                Marks the current referral as one to be ignored.
                  Returns false when there are no referrals remaining to be processed.                
            </javadoc>
            <method name="skipReferral" type="boolean" line="193">
                <comment line="200">
                    advance to next referral                    
                </comment>
                <comment line="204">
                    mask the referral exception                    
                </comment>
                <scope line="200"/>
                <scope line="202"/>
            </method>
            <javadoc line="210">
                Sets referral information.                
            </javadoc>
            <method name="setReferralInfo" type="void" line="213">
                <params>
                    <param name="referrals" type="Vector"/>
                    <param name="continuationRef" type="boolean"/>
                </params>
                <comment line="215">
                    %%% continuationRef is currently ignored                    
                </comment>
                <scope line="220"/>
                <scope line="224">
                    <scope line="225"/>
                </scope>
            </method>
            <javadoc line="231">
                Gets the next referral. When the current set of referrals have
                  been exhausted then the next referral exception is thrown, if available.                
            </javadoc>
            <method name="getNextReferral" type="String" line="235">
                <scope line="240"/>
                <scope line="242"/>
                <scope line="244"/>
            </method>
            <javadoc line="249">
                Appends the supplied (chain of) referral exception onto the end of
                  the current (chain of) referral exception. Spent referral exceptions
                  are trimmed off.                
            </javadoc>
            <method name="appendUnprocessedReferrals" type="LdapReferralException" line="255">
                <params>
                    <param name="back" type="LdapReferralException"/>
                </params>
                <comment line="270">
                    trim                    
                </comment>
                <comment line="273">
                    advance the saved exception                    
                </comment>
                <comment line="277">
                    don&apos;t append onto itself                    
                </comment>
                <comment line="283">
                    trim                    
                </comment>
                <comment line="290">
                    Locate the end of the current chain                    
                </comment>
                <comment line="295">
                    append                    
                </comment>
                <scope line="257">
                    <scope line="261"/>
                </scope>
                <declaration name="front" type="LdapReferralException" line="266"/>
                <scope line="268">
                    <scope line="271"/>
                </scope>
                <scope line="277"/>
                <scope line="281"/>
                <scope line="285"/>
                <declaration name="ptr" type="LdapReferralException" line="290"/>
                <scope line="291"/>
            </method>
            <javadoc line="299">
                Tests if there are any referrals remaining to be processed.
                  If name resolution has already completed then any remaining
                  referrals (in the current referral exception) will be ignored.                
            </javadoc>
            <method name="hasMoreReferrals" type="boolean" line="304"/>
            <javadoc line="311">
                Tests if there are any referral exceptions remaining to be processed.                
            </javadoc>
            <method name="hasMoreReferralExceptions" type="boolean" line="314"/>
            <javadoc line="322">
                Sets the counter which records the number of hops that result
                  from following a sequence of referrals.                
            </javadoc>
            <method name="setHopCount" type="void" line="326">
                <params>
                    <param name="hopCount" type="int"/>
                </params>
            </method>
            <javadoc line="333">
                Sets the flag to indicate that the target name has been resolved.                
            </javadoc>
            <method name="setNameResolved" type="void" line="336">
                <params>
                    <param name="resolved" type="boolean"/>
                </params>
            </method>
            <javadoc line="343">
                Sets the exception generated while processing a referral.
                  Only the first exception is recorded.                
            </javadoc>
            <method name="setNamingException" type="void" line="347">
                <params>
                    <param name="e" type="NamingException"/>
                </params>
                <comment line="353">
                    record the referral exception that caused it                    
                </comment>
                <scope line="351"/>
            </method>
            <javadoc line="357">
                Gets the new RDN name.                
            </javadoc>
            <method name="getNewRdn" type="String" line="360"/>
            <javadoc line="367">
                Sets the new RDN name so that the rename operation can be completed
                  (when a referral is being followed).                
            </javadoc>
            <method name="setNewRdn" type="void" line="371">
                <params>
                    <param name="newRdn" type="String"/>
                </params>
            </method>
            <javadoc line="378">
                Gets the exception generated while processing a referral.                
            </javadoc>
            <method name="getNamingException" type="NamingException" line="381"/>
            <javadoc line="388">
                Display the state of each element in a chain of LdapReferralException
                  objects.                
            </javadoc>
            <method name="dump" type="void" line="392">
                <declaration name="ptr" type="LdapReferralException" line="396"/>
                <scope line="397"/>
            </method>
            <javadoc line="403">
                Display the state of this LdapReferralException object.                
            </javadoc>
            <method name="dumpState" type="void" line="406">
                <scope line="413">
                    <scope line="415"/>
                </scope>
                <scope line="418"/>
                <scope line="424"/>
                <scope line="426"/>
            </method>
        </class>
    </source>