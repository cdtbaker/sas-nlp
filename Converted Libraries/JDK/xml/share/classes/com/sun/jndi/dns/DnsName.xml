<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.dns">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="javax.naming"/>
        <class name="DnsName" line="37">
            <comment line="109">
                If non-null, the domain name represented by this DnsName.                
            </comment>
            <comment line="112">
                The labels of this domain name, as a list of strings.  Index 0
                 corresponds to the leftmost (least significant) label:  note that
                 this is the reverse of the ordering used by the Name interface.                
            </comment>
            <comment line="117">
                The number of octets needed to carry this domain name in a DNS
                 packet.  Equal to the sum of the lengths of each label, plus the
                 number of non-root labels, plus 1.  Must remain less than 256.                
            </comment>
            <comment line="140">
                Returns a new DnsName with its name components initialized to
                 the components of &quot;n&quot; in the range [beg,end).  Indexing is as
                 for the Name interface, with 0 being the most significant.                
            </comment>
            <comment line="381">
                Helper method for public comparison methods.  Lexicographically
                 compares components of this name in the range [beg,end) with
                 all components of &quot;n&quot;.  Indexing is as for the Name interface,
                 with 0 being the most significant.  Returns negative, zero, or
                 positive as these name components are less than, equal to, or
                 greater than those of &quot;n&quot;.                
            </comment>
            <comment line="410">
                Returns a key suitable for hashing the label at index i.
                 Indexing is as for the Name interface, with 0 being the most
                 significant.                
            </comment>
            <comment line="420">
                Parses a domain name, setting the values of instance vars accordingly.                
            </comment>
            <comment line="459">
                Returns (as a char) the octet indicated by the escape sequence
                 at a given position within a domain name.
                 @throws InvalidNameException if a valid escape sequence is not found.                
            </comment>
            <comment line="488">
                Checks that this label is valid.
                 @throws InvalidNameException if label is not valid.                
            </comment>
            <comment line="507">
                Does this label conform to host name syntax?                
            </comment>
            <comment line="531">
                Append a label to buf, escaping as needed.                
            </comment>
            <comment line="544">
                Compares two labels, ignoring case for ASCII values.
                 Returns negative, zero, or positive as the first label
                 is less than, equal to, or greater than the second.
                 See keyForLabel().                
            </comment>
            <comment line="568">
                Returns a key suitable for hashing a label.  Two labels map to
                 the same key iff they are equal, taking possible case-folding
                 into account.  See compareLabels().                
            </comment>
            <implements interface="Name"/>
            <javadoc line="37">
                &lt;tt&gt;DnsName&lt;/tt&gt; implements compound names for DNS as specified by
                  RFCs 1034 and 1035, and as updated and clarified by RFCs 1123 and 2181.
                  &lt;p&gt; The labels in a domain name correspond to JNDI atomic names.
                  Each label must be less than 64 octets in length, and only the
                  optional root label at the end of the name may be 0 octets long.
                  The sum of the lengths of all labels in a name, plus the number of
                  non-root labels plus 1, must be less than 256.  The textual
                  representation of a domain name consists of the labels, escaped as
                  needed, dot-separated, and ordered right-to-left.
                  &lt;p&gt; A label consists of a sequence of octets, each of which may
                  have any value from 0 to 255.
                  &lt;p&gt; &lt;em&gt;Host names&lt;/em&gt; are a subset of domain names.
                  Their labels contain only ASCII letters, digits, and hyphens, and
                  none may begin or end with a hyphen.  While names not conforming to
                  these rules may be valid domain names, they will not be usable by a
                  number of DNS applications, and should in most cases be avoided.
                  &lt;p&gt; DNS does not specify an encoding (such as UTF-8) to use for
                  octets with non-ASCII values.  As of this writing there is some
                  work going on in this area, but it is not yet finalized.
                  &lt;tt&gt;DnsName&lt;/tt&gt; currently converts any non-ASCII octets into
                  characters using ISO-LATIN-1 encoding, in effect taking the
                  value of each octet and storing it directly into the low-order byte
                  of a Java character and &lt;i&gt;vice versa&lt;/i&gt;.  As a consequence, no
                  character in a DNS name will ever have a non-zero high-order byte.
                  When the work on internationalizing domain names has stabilized
                  (see for example &lt;i&gt;draft-ietf-idn-idna-10.txt&lt;/i&gt;), &lt;tt&gt;DnsName&lt;/tt&gt;
                  may be updated to conform to that work.
                  &lt;p&gt; Backslash (&lt;tt&gt;\&lt;/tt&gt;) is used as the escape character in the
                  textual representation of a domain name.  The character sequence
                  `&lt;tt&gt;\DDD&lt;/tt&gt;&apos;, where &lt;tt&gt;DDD&lt;/tt&gt; is a 3-digit decimal number
                  (with leading zeros if needed), represents the octet whose value
                  is &lt;tt&gt;DDD&lt;/tt&gt;.  The character sequence `&lt;tt&gt;\C&lt;/tt&gt;&apos;, where
                  &lt;tt&gt;C&lt;/tt&gt; is a character other than &lt;tt&gt;&apos;0&apos;&lt;/tt&gt; through
                  &lt;tt&gt;&apos;9&apos;&lt;/tt&gt;, represents the octet whose value is that of
                  &lt;tt&gt;C&lt;/tt&gt; (again using ISO-LATIN-1 encoding); this is particularly
                  useful for escaping &lt;tt&gt;&apos;.&apos;&lt;/tt&gt; or backslash itself.  Backslash is
                  otherwise not allowed in a domain name.  Note that escape characters
                  are interpreted when a name is parsed.  So, for example, the character
                  sequences `&lt;tt&gt;S&lt;/tt&gt;&apos;, `&lt;tt&gt;\S&lt;/tt&gt;&apos;, and `&lt;tt&gt;\083&lt;/tt&gt;&apos; each
                  represent the same one-octet name.  The &lt;tt&gt;toString()&lt;/tt&gt; method
                  does not generally insert escape sequences except where necessary.
                  If, however, the &lt;tt&gt;DnsName&lt;/tt&gt; was constructed using unneeded
                  escapes, those escapes may appear in the &lt;tt&gt;toString&lt;/tt&gt; result.
                  &lt;p&gt; Atomic names passed as parameters to methods of
                  &lt;tt&gt;DnsName&lt;/tt&gt;, and those returned by them, are unescaped.  So,
                  for example, &lt;tt&gt;(new&amp;nbsp;DnsName()).add(&quot;a.b&quot;)&lt;/tt&gt; creates an
                  object representing the one-label domain name &lt;tt&gt;a\.b&lt;/tt&gt;, and
                  calling &lt;tt&gt;get(0)&lt;/tt&gt; on this object returns &lt;tt&gt;&quot;a.b&quot;&lt;/tt&gt;.
                  &lt;p&gt; While DNS names are case-preserving, comparisons between them
                  are case-insensitive.  When comparing names containing non-ASCII
                  octets, &lt;tt&gt;DnsName&lt;/tt&gt; uses case-insensitive comparison
                  between pairs of ASCII values, and exact binary comparison
                  otherwise.
                  &lt;p&gt; A &lt;tt&gt;DnsName&lt;/tt&gt; instance is not synchronized against
                  concurrent access by multiple threads.                
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="domain" type="String" line="109"/>
            <declaration name="labels" type="ArrayList" line="114"/>
            <declaration name="octets" type="short" line="119"/>
            <javadoc line="122">
                Constructs a &lt;tt&gt;DnsName&lt;/tt&gt; representing the empty domain name.                
            </javadoc>
            <method name="DnsName" type="constructor" line="125"/>
            <javadoc line="128">
                Constructs a &lt;tt&gt;DnsName&lt;/tt&gt; representing a given domain name.                
                <param>
                    name    the domain name to parse                    
                </param>
                <throws>
                    InvalidNameException if <tt>name</tt> does not conform
                      to DNS syntax.                    
                </throws>
            </javadoc>
            <method name="DnsName" type="constructor" line="135">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="DnsName" type="constructor" line="144">
                <params>
                    <param name="n" type="DnsName"/>
                    <param name="beg" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <comment line="146">
                    Compute indexes into &quot;labels&quot;, which has least-significant label
                     at index 0 (opposite to the convention used for &quot;beg&quot; and &quot;end&quot;).                    
                </comment>
                <declaration name="b" type="int" line="147"/>
                <declaration name="e" type="int" line="148"/>
                <scope line="151"/>
                <scope line="154">
                    <declaration name="iter" type="Iterator" line="155"/>
                    <scope line="156">
                        <declaration name="label" type="String" line="157"/>
                        <scope line="158"/>
                    </scope>
                </scope>
            </method>
            <method name="toString" type="String" line="166">
                <scope line="167">
                    <declaration name="buf" type="StringBuffer" line="168"/>
                    <declaration name="iter" type="Iterator" line="169"/>
                    <scope line="170">
                        <declaration name="label" type="String" line="171"/>
                        <scope line="172"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="182">
                Does this domain name follow &lt;em&gt;host name&lt;/em&gt; syntax?                
            </javadoc>
            <method name="isHostName" type="boolean" line="185">
                <declaration name="iter" type="Iterator" line="186"/>
                <scope line="187">
                    <scope line="188"/>
                </scope>
            </method>
            <method name="getOctets" type="short" line="195"/>
            <method name="size" type="int" line="199"/>
            <method name="isEmpty" type="boolean" line="203"/>
            <method name="hashCode" type="int" line="207">
                <declaration name="h" type="int" line="208"/>
                <scope line="209"/>
            </method>
            <method name="equals" type="boolean" line="215">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="221">
                    shortcut:  do sizes differ?                    
                </comment>
                <scope line="216"/>
                <declaration name="n" type="Name" line="219"/>
            </method>
            <method name="compareTo" type="int" line="224">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="227">
                    never 0 if sizes differ                    
                </comment>
                <declaration name="n" type="Name" line="225"/>
            </method>
            <method name="startsWith" type="boolean" line="229">
                <params>
                    <param name="n" type="Name"/>
                </params>
            </method>
            <method name="endsWith" type="boolean" line="234">
                <params>
                    <param name="n" type="Name"/>
                </params>
            </method>
            <method name="get" type="String" line="239">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <comment line="244">
                    index of &quot;pos&quot; component in &quot;labels&quot;                    
                </comment>
                <scope line="240"/>
                <declaration name="i" type="int" line="243"/>
            </method>
            <method name="getAll" type="Enumeration" line="247">
                <anonymous_class line="248">
                    <declaration name="pos" type="int" line="249"/>
                    <method name="hasMoreElements" type="boolean" line="250"/>
                    <method name="nextElement" type="Object" line="253">
                        <scope line="254"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="getPrefix" type="Name" line="262">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="getSuffix" type="Name" line="266">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="clone" type="Object" line="270"/>
            <method name="remove" type="Object" line="274">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <comment line="279">
                    index of element to remove in &quot;labels&quot;                    
                </comment>
                <comment line="285">
                    invalidate &quot;domain&quot;                    
                </comment>
                <scope line="275"/>
                <declaration name="i" type="int" line="278"/>
                <declaration name="label" type="String" line="279"/>
                <declaration name="len" type="int" line="280"/>
                <scope line="281"/>
            </method>
            <method name="add" type="Name" line="288">
                <params>
                    <param name="comp" type="String"/>
                </params>
            </method>
            <method name="add" type="Name" line="292">
                <params>
                    <param name="pos" type="int"/>
                    <param name="comp" type="String"/>
                </params>
                <comment line="297">
                    Check for empty labels:  may have only one, and only at end.                    
                </comment>
                <comment line="304">
                    Check total name length.                    
                </comment>
                <comment line="312">
                    index for insertion into &quot;labels&quot;                    
                </comment>
                <comment line="316">
                    invalidate &quot;domain&quot;                    
                </comment>
                <scope line="293"/>
                <declaration name="len" type="int" line="297"/>
                <scope line="299"/>
                <scope line="304">
                    <scope line="305"/>
                </scope>
                <declaration name="i" type="int" line="311"/>
            </method>
            <method name="addAll" type="Name" line="319">
                <params>
                    <param name="suffix" type="Name"/>
                </params>
            </method>
            <method name="addAll" type="Name" line="323">
                <params>
                    <param name="pos" type="int"/>
                    <param name="n" type="Name"/>
                </params>
                <comment line="326">
                    &quot;n&quot; is a DnsName so we can insert it as a whole, rather than
                     verifying and inserting it component-by-component.
                     More code, but less work.                    
                </comment>
                <comment line="334">
                    Check for empty labels:  may have only one, and only at end.                    
                </comment>
                <comment line="346">
                    index for insertion into &quot;labels&quot;                    
                </comment>
                <comment line="349">
                    Preserve &quot;domain&quot; if we&apos;re appending or prepending,
                     otherwise invalidate it.                    
                </comment>
                <comment line="364">
                    force ClassCastException                    
                </comment>
                <comment line="366">
                    &quot;n&quot; is a compound name, but not a DnsName.                    
                </comment>
                <comment line="367">
                    Add labels least-significant first:  sometimes more efficient.                    
                </comment>
                <scope line="324">
                    <declaration name="dn" type="DnsName" line="328"/>
                    <scope line="330"/>
                    <scope line="335"/>
                    <declaration name="newOctets" type="short" line="340"/>
                    <scope line="341"/>
                    <declaration name="i" type="int" line="345"/>
                    <scope line="350"/>
                    <scope line="352"/>
                    <scope line="354"/>
                    <scope line="356"/>
                    <scope line="358"/>
                </scope>
                <scope line="362"/>
                <scope line="365">
                    <scope line="367"/>
                </scope>
            </method>
            <method name="hasRootLabel" type="boolean" line="375"/>
            <method name="compareRange" type="int" line="388">
                <params>
                    <param name="beg" type="int"/>
                    <param name="end" type="int"/>
                    <param name="n" type="Name"/>
                </params>
                <comment line="391">
                    force ClassCastException                    
                </comment>
                <comment line="393">
                    Loop through labels, starting with most significant.                    
                </comment>
                <comment line="399">
                    index of label1 in &quot;labels&quot;                    
                </comment>
                <comment line="400">
                    assert (label1 == labels.get(j));                    
                </comment>
                <comment line="407">
                    longer range wins                    
                </comment>
                <scope line="389"/>
                <declaration name="minSize" type="int" line="393"/>
                <scope line="394">
                    <declaration name="label1" type="String" line="395"/>
                    <declaration name="label2" type="String" line="396"/>
                    <declaration name="j" type="int" line="398"/>
                    <declaration name="c" type="int" line="401"/>
                    <scope line="402"/>
                </scope>
            </method>
            <method name="getKey" type="String" line="414">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="parse" type="void" line="422">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="425">
                    label being parsed                    
                </comment>
                <comment line="430">
                    found an escape sequence                    
                </comment>
                <comment line="432">
                    sequence is \DDD                    
                </comment>
                <comment line="433">
                    consume remaining digits                    
                </comment>
                <comment line="437">
                    an unescaped octet                    
                </comment>
                <comment line="440">
                    found &apos;.&apos; separator                    
                </comment>
                <comment line="441">
                    check syntax, then add label
                       to end of name                    
                </comment>
                <comment line="443">
                    clear buffer for next label                    
                </comment>
                <comment line="447">
                    If name is neither &quot;.&quot; nor &quot;&quot;, the octets (zero or more)
                     from the rightmost dot onward are now added as the final
                     label of the name.  Those two are special cases in that for
                     all other domain names, the number of labels is one greater
                     than the number of dot separators.                    
                </comment>
                <comment line="456">
                    do this last, since add() sets it to null                    
                </comment>
                <declaration name="label" type="StringBuffer" line="424"/>
                <scope line="426">
                    <declaration name="c" type="char" line="427"/>
                    <scope line="429">
                        <scope line="431"/>
                    </scope>
                    <scope line="436"/>
                    <scope line="439"/>
                </scope>
                <scope line="451"/>
            </method>
            <method name="getEscapedOctet" type="char" line="464">
                <params>
                    <param name="name" type="String"/>
                    <param name="pos" type="int"/>
                </params>
                <comment line="467">
                    assert (name.charAt(pos) == &apos;\\&apos;);                    
                </comment>
                <comment line="469">
                    sequence is `\DDD&apos;                    
                </comment>
                <comment line="479">
                    sequence is `\C&apos;                    
                </comment>
                <scope line="465">
                    <declaration name="c1" type="char" line="467"/>
                    <scope line="468">
                        <declaration name="c2" type="char" line="469"/>
                        <declaration name="c3" type="char" line="470"/>
                        <scope line="471"/>
                        <scope line="474"/>
                    </scope>
                    <scope line="478"/>
                </scope>
                <scope line="481"/>
            </method>
            <method name="verifyLabel" type="void" line="491">
                <params>
                    <param name="label" type="String"/>
                </params>
                <comment line="497">
                    Check for two-byte characters.                    
                </comment>
                <scope line="492"/>
                <scope line="497">
                    <declaration name="c" type="char" line="498"/>
                    <scope line="499"/>
                </scope>
            </method>
            <method name="isHostNameLabel" type="boolean" line="509">
                <params>
                    <param name="label" type="String"/>
                </params>
                <scope line="510">
                    <declaration name="c" type="char" line="511"/>
                    <scope line="512"/>
                </scope>
            </method>
            <method name="isHostNameChar" type="boolean" line="519">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="isDigit" type="boolean" line="526">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="escape" type="void" line="533">
                <params>
                    <param name="buf" type="StringBuffer"/>
                    <param name="label" type="String"/>
                </params>
                <scope line="534">
                    <declaration name="c" type="char" line="535"/>
                    <scope line="536"/>
                </scope>
            </method>
            <method name="compareLabels" type="int" line="549">
                <params>
                    <param name="label1" type="String"/>
                    <param name="label2" type="String"/>
                </params>
                <comment line="556">
                    to lower case                    
                </comment>
                <comment line="559">
                    to lower case                    
                </comment>
                <comment line="565">
                    the longer one wins                    
                </comment>
                <declaration name="min" type="int" line="550"/>
                <scope line="551">
                    <declaration name="c1" type="char" line="552"/>
                    <declaration name="c2" type="char" line="553"/>
                    <scope line="554"/>
                    <scope line="557"/>
                    <scope line="560"/>
                </scope>
            </method>
            <method name="keyForLabel" type="String" line="572">
                <params>
                    <param name="label" type="String"/>
                </params>
                <comment line="578">
                    to lower case                    
                </comment>
                <declaration name="buf" type="StringBuffer" line="573"/>
                <scope line="574">
                    <declaration name="c" type="char" line="575"/>
                    <scope line="576"/>
                </scope>
            </method>
            <javadoc line="585">
                Serializes only the domain name string, for compactness and to avoid
                  any implementation dependency.                
                <serialdata>
                    The domain name string.                    
                </serialdata>
            </javadoc>
            <method name="writeObject" type="void" line="592">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <method name="readObject" type="void" line="597">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="602">
                    shouldn&apos;t happen                    
                </comment>
                <scope line="598"/>
                <scope line="600"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="607"/>
        </class>
    </source>