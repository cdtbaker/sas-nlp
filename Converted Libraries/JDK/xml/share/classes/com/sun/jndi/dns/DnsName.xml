<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.dns">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="javax.naming"/>
        <class name="DnsName" line="7">
            <implements interface="Name"/>
            <javadoc line="7">
                &lt;tt&gt;DnsName&lt;/tt&gt; implements compound names for DNS as specified by
                  RFCs 1034 and 1035, and as updated and clarified by RFCs 1123 and 2181.
                  &lt;p&gt; The labels in a domain name correspond to JNDI atomic names.
                  Each label must be less than 64 octets in length, and only the
                  optional root label at the end of the name may be 0 octets long.
                  The sum of the lengths of all labels in a name, plus the number of
                  non-root labels plus 1, must be less than 256.  The textual
                  representation of a domain name consists of the labels, escaped as
                  needed, dot-separated, and ordered right-to-left.
                  &lt;p&gt; A label consists of a sequence of octets, each of which may
                  have any value from 0 to 255.
                  &lt;p&gt; &lt;em&gt;Host names&lt;/em&gt; are a subset of domain names.
                  Their labels contain only ASCII letters, digits, and hyphens, and
                  none may begin or end with a hyphen.  While names not conforming to
                  these rules may be valid domain names, they will not be usable by a
                  number of DNS applications, and should in most cases be avoided.
                  &lt;p&gt; DNS does not specify an encoding (such as UTF-8) to use for
                  octets with non-ASCII values.  As of this writing there is some
                  work going on in this area, but it is not yet finalized.
                  &lt;tt&gt;DnsName&lt;/tt&gt; currently converts any non-ASCII octets into
                  characters using ISO-LATIN-1 encoding, in effect taking the
                  value of each octet and storing it directly into the low-order byte
                  of a Java character and &lt;i&gt;vice versa&lt;/i&gt;.  As a consequence, no
                  character in a DNS name will ever have a non-zero high-order byte.
                  When the work on internationalizing domain names has stabilized
                  (see for example &lt;i&gt;draft-ietf-idn-idna-10.txt&lt;/i&gt;), &lt;tt&gt;DnsName&lt;/tt&gt;
                  may be updated to conform to that work.
                  &lt;p&gt; Backslash (&lt;tt&gt;\&lt;/tt&gt;) is used as the escape character in the
                  textual representation of a domain name.  The character sequence
                  `&lt;tt&gt;\DDD&lt;/tt&gt;&apos;, where &lt;tt&gt;DDD&lt;/tt&gt; is a 3-digit decimal number
                  (with leading zeros if needed), represents the octet whose value
                  is &lt;tt&gt;DDD&lt;/tt&gt;.  The character sequence `&lt;tt&gt;\C&lt;/tt&gt;&apos;, where
                  &lt;tt&gt;C&lt;/tt&gt; is a character other than &lt;tt&gt;&apos;0&apos;&lt;/tt&gt; through
                  &lt;tt&gt;&apos;9&apos;&lt;/tt&gt;, represents the octet whose value is that of
                  &lt;tt&gt;C&lt;/tt&gt; (again using ISO-LATIN-1 encoding); this is particularly
                  useful for escaping &lt;tt&gt;&apos;.&apos;&lt;/tt&gt; or backslash itself.  Backslash is
                  otherwise not allowed in a domain name.  Note that escape characters
                  are interpreted when a name is parsed.  So, for example, the character
                  sequences `&lt;tt&gt;S&lt;/tt&gt;&apos;, `&lt;tt&gt;\S&lt;/tt&gt;&apos;, and `&lt;tt&gt;\083&lt;/tt&gt;&apos; each
                  represent the same one-octet name.  The &lt;tt&gt;toString()&lt;/tt&gt; method
                  does not generally insert escape sequences except where necessary.
                  If, however, the &lt;tt&gt;DnsName&lt;/tt&gt; was constructed using unneeded
                  escapes, those escapes may appear in the &lt;tt&gt;toString&lt;/tt&gt; result.
                  &lt;p&gt; Atomic names passed as parameters to methods of
                  &lt;tt&gt;DnsName&lt;/tt&gt;, and those returned by them, are unescaped.  So,
                  for example, &lt;tt&gt;(new&amp;nbsp;DnsName()).add(&quot;a.b&quot;)&lt;/tt&gt; creates an
                  object representing the one-label domain name &lt;tt&gt;a\.b&lt;/tt&gt;, and
                  calling &lt;tt&gt;get(0)&lt;/tt&gt; on this object returns &lt;tt&gt;&quot;a.b&quot;&lt;/tt&gt;.
                  &lt;p&gt; While DNS names are case-preserving, comparisons between them
                  are case-insensitive.  When comparing names containing non-ASCII
                  octets, &lt;tt&gt;DnsName&lt;/tt&gt; uses case-insensitive comparison
                  between pairs of ASCII values, and exact binary comparison
                  otherwise.
                  &lt;p&gt; A &lt;tt&gt;DnsName&lt;/tt&gt; instance is not synchronized against
                  concurrent access by multiple threads.                
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="domain" type="String" line="66"/>
            <declaration name="labels" type="ArrayList" line="67"/>
            <declaration name="octets" type="short" line="68"/>
            <javadoc line="69">
                Constructs a &lt;tt&gt;DnsName&lt;/tt&gt; representing the empty domain name.                
            </javadoc>
            <method name="DnsName" type="constructor" line="72"/>
            <javadoc line="74">
                Constructs a &lt;tt&gt;DnsName&lt;/tt&gt; representing a given domain name.                
                <param>
                    name    the domain name to parse                    
                </param>
                <throws>
                    InvalidNameException if &lt;tt&gt;name&lt;/tt&gt; does not conform
                      to DNS syntax.                    
                </throws>
            </javadoc>
            <method name="DnsName" type="constructor" line="80">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="DnsName" type="constructor" line="83">
                <params>
                    <param name="n" type="DnsName"/>
                    <param name="beg" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="b" type="int" line="84"/>
                <declaration name="e" type="int" line="85"/>
                <scope line="87"/>
                <scope line="91">
                    <declaration name="iter" type="Iterator" line="92"/>
                    <scope line="93">
                        <declaration name="label" type="String" line="94"/>
                        <scope line="95"/>
                    </scope>
                </scope>
            </method>
            <method name="toString" type="String" line="101">
                <scope line="102">
                    <declaration name="buf" type="StringBuffer" line="103"/>
                    <declaration name="iter" type="Iterator" line="104"/>
                    <scope line="105">
                        <declaration name="label" type="String" line="106"/>
                        <scope line="107"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="116">
                Does this domain name follow &lt;em&gt;host name&lt;/em&gt; syntax?                
            </javadoc>
            <method name="isHostName" type="boolean" line="119">
                <declaration name="iter" type="Iterator" line="120"/>
                <scope line="121">
                    <scope line="122"/>
                </scope>
            </method>
            <method name="getOctets" type="short" line="128"/>
            <method name="size" type="int" line="131"/>
            <method name="isEmpty" type="boolean" line="134"/>
            <method name="hashCode" type="int" line="137">
                <declaration name="h" type="int" line="138"/>
                <scope line="139"/>
            </method>
            <method name="equals" type="boolean" line="144">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="145"/>
                <declaration name="n" type="Name" line="148"/>
            </method>
            <method name="compareTo" type="int" line="151">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="n" type="Name" line="152"/>
            </method>
            <method name="startsWith" type="boolean" line="155">
                <params>
                    <param name="n" type="Name"/>
                </params>
            </method>
            <method name="endsWith" type="boolean" line="158">
                <params>
                    <param name="n" type="Name"/>
                </params>
            </method>
            <method name="get" type="String" line="161">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <scope line="162"/>
                <declaration name="i" type="int" line="165"/>
            </method>
            <method name="getAll" type="Enumeration" line="168">
                <anonymous_class line="169">
                    <declaration name="pos" type="int" line="170"/>
                    <method name="hasMoreElements" type="boolean" line="171"/>
                    <method name="nextElement" type="Object" line="174">
                        <scope line="175"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="getPrefix" type="Name" line="183">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="getSuffix" type="Name" line="186">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="clone" type="Object" line="189"/>
            <method name="remove" type="Object" line="192">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <scope line="193"/>
                <declaration name="i" type="int" line="196"/>
                <declaration name="label" type="String" line="197"/>
                <declaration name="len" type="int" line="198"/>
                <scope line="199"/>
            </method>
            <method name="add" type="Name" line="205">
                <params>
                    <param name="comp" type="String"/>
                </params>
            </method>
            <method name="add" type="Name" line="208">
                <params>
                    <param name="pos" type="int"/>
                    <param name="comp" type="String"/>
                </params>
                <scope line="209"/>
                <declaration name="len" type="int" line="212"/>
                <scope line="213"/>
                <scope line="216">
                    <scope line="217"/>
                </scope>
                <declaration name="i" type="int" line="222"/>
            </method>
            <method name="addAll" type="Name" line="228">
                <params>
                    <param name="suffix" type="Name"/>
                </params>
            </method>
            <method name="addAll" type="Name" line="231">
                <params>
                    <param name="pos" type="int"/>
                    <param name="n" type="Name"/>
                </params>
                <scope line="232">
                    <declaration name="dn" type="DnsName" line="233"/>
                    <scope line="234"/>
                    <scope line="237"/>
                    <declaration name="newOctets" type="short" line="240"/>
                    <scope line="241"/>
                    <declaration name="i" type="int" line="245"/>
                    <scope line="247"/>
                    <scope line="250"/>
                    <scope line="253"/>
                    <scope line="256"/>
                    <scope line="259"/>
                </scope>
                <scope line="263"/>
                <scope line="266">
                    <scope line="267"/>
                </scope>
            </method>
            <method name="hasRootLabel" type="boolean" line="273"/>
            <method name="compareRange" type="int" line="276">
                <params>
                    <param name="beg" type="int"/>
                    <param name="end" type="int"/>
                    <param name="n" type="Name"/>
                </params>
                <scope line="277"/>
                <declaration name="minSize" type="int" line="280"/>
                <scope line="281">
                    <declaration name="label1" type="String" line="282"/>
                    <declaration name="label2" type="String" line="283"/>
                    <declaration name="j" type="int" line="284"/>
                    <declaration name="c" type="int" line="285"/>
                    <scope line="286"/>
                </scope>
            </method>
            <method name="getKey" type="String" line="292">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="parse" type="void" line="295">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="label" type="StringBuffer" line="296"/>
                <scope line="297">
                    <declaration name="c" type="char" line="298"/>
                    <scope line="299">
                        <scope line="301"/>
                    </scope>
                    <scope line="306"/>
                    <scope line="309"/>
                </scope>
                <scope line="314"/>
            </method>
            <method name="getEscapedOctet" type="char" line="319">
                <params>
                    <param name="name" type="String"/>
                    <param name="pos" type="int"/>
                </params>
                <scope line="320">
                    <declaration name="c1" type="char" line="321"/>
                    <scope line="322">
                        <declaration name="c2" type="char" line="323"/>
                        <declaration name="c3" type="char" line="324"/>
                        <scope line="325"/>
                        <scope line="328"/>
                    </scope>
                    <scope line="332"/>
                </scope>
                <scope line="336"/>
            </method>
            <method name="verifyLabel" type="void" line="340">
                <params>
                    <param name="label" type="String"/>
                </params>
                <scope line="341"/>
                <scope line="344">
                    <declaration name="c" type="char" line="345"/>
                    <scope line="346"/>
                </scope>
            </method>
            <method name="isHostNameLabel" type="boolean" line="351">
                <params>
                    <param name="label" type="String"/>
                </params>
                <scope line="352">
                    <declaration name="c" type="char" line="353"/>
                    <scope line="354"/>
                </scope>
            </method>
            <method name="isHostNameChar" type="boolean" line="360">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="isDigit" type="boolean" line="363">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="escape" type="void" line="366">
                <params>
                    <param name="buf" type="StringBuffer"/>
                    <param name="label" type="String"/>
                </params>
                <scope line="367">
                    <declaration name="c" type="char" line="368"/>
                    <scope line="369"/>
                </scope>
            </method>
            <method name="compareLabels" type="int" line="375">
                <params>
                    <param name="label1" type="String"/>
                    <param name="label2" type="String"/>
                </params>
                <declaration name="min" type="int" line="376"/>
                <scope line="377">
                    <declaration name="c1" type="char" line="378"/>
                    <declaration name="c2" type="char" line="379"/>
                    <scope line="380"/>
                    <scope line="383"/>
                    <scope line="386"/>
                </scope>
            </method>
            <method name="keyForLabel" type="String" line="392">
                <params>
                    <param name="label" type="String"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="393"/>
                <scope line="394">
                    <declaration name="c" type="char" line="395"/>
                    <scope line="396"/>
                </scope>
            </method>
            <javadoc line="403">
                Serializes only the domain name string, for compactness and to avoid
                  any implementation dependency.                
                <serialdata>
                    The domain name string.                    
                </serialdata>
            </javadoc>
            <method name="writeObject" type="void" line="408">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <method name="readObject" type="void" line="411">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <scope line="412"/>
                <scope line="415"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="419"/>
        </class>
    </source>