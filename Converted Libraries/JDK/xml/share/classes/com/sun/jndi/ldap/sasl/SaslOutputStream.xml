<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap.sasl">
        <import package="javax.security.sasl.Sasl"/>
        <import package="javax.security.sasl.SaslClient"/>
        <import package="javax.security.sasl.SaslException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FilterOutputStream"/>
        <import package="java.io.OutputStream"/>
        <class name="SaslOutputStream" line="35">
            <extends class="FilterOutputStream"/>
            <comment line="39">
                buffer for storing length                
            </comment>
            <comment line="62">
                Override this method to call write(byte[], int, int) counterpart                
            </comment>
            <comment line="63">
                super.write(int) simply calls out.write(int)                
            </comment>
            <comment line="120">
                Copied from com.sun.security.sasl.util.SaslImpl                
            </comment>
            <declaration name="debug" type="boolean" line="36"/>
            <declaration name="lenBuf" type="byte[]" line="38"/>
            <declaration name="rawSendSize" type="int" line="39"/>
            <declaration name="sc" type="SaslClient" line="40"/>
            <method name="SaslOutputStream" type="constructor" line="42">
                <params>
                    <param name="sc" type="SaslClient"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <scope line="46"/>
                <declaration name="str" type="String" line="50"/>
                <scope line="51">
                    <scope line="52"/>
                    <scope line="54"/>
                </scope>
            </method>
            <method name="write" type="void" line="64">
                <params>
                    <param name="b" type="int"/>
                </params>
                <declaration name="buffer" type="byte[]" line="65"/>
            </method>
            <javadoc line="70">
                Override this method to &quot;wrap&quot; the outgoing buffer before
                  writing it to the underlying output stream.                
            </javadoc>
            <method name="write" type="void" line="74">
                <params>
                    <param name="buffer" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="total" type="int"/>
                </params>
                <comment line="78">
                    &quot;Packetize&quot; buffer to be within rawSendSize                    
                </comment>
                <comment line="85">
                    Calculate length of current &quot;packet&quot;                    
                </comment>
                <comment line="88">
                    Generate wrapped token                    
                </comment>
                <comment line="91">
                    Write out length                    
                </comment>
                <comment line="99">
                    Write out wrapped token                    
                </comment>
                <declaration name="count" type="int" line="75"/>
                <declaration name="wrappedToken" type="byte[]" line="76"/>
                <scope line="79"/>
                <scope line="83">
                    <scope line="94"/>
                </scope>
            </method>
            <method name="close" type="void" line="104">
                <comment line="107">
                    Dispose of SaslClient&apos;s state                    
                </comment>
                <comment line="109">
                    Save exception for throwing after closing &apos;in&apos;                    
                </comment>
                <comment line="112">
                    Close underlying output stream                    
                </comment>
                <declaration name="save" type="SaslException" line="105"/>
                <scope line="106"/>
                <scope line="108"/>
                <scope line="114"/>
            </method>
            <javadoc line="120">
                Encodes an integer into 4 bytes in network byte order in the buffer
                  supplied.                
            </javadoc>
            <method name="intToNetworkByteOrder" type="void" line="125">
                <params>
                    <param name="num" type="int"/>
                    <param name="buf" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="126"/>
                <scope line="130"/>
            </method>
        </class>
    </source>