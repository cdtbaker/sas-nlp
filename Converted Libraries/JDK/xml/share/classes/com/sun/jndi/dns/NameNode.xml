<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.dns">
        <import package="java.util.Hashtable"/>
        <class name="NameNode" line="32">
            <comment line="54">
                name of this node relative to its
                 parent, or null for root of a tree                
            </comment>
            <comment line="56">
                child nodes                
            </comment>
            <comment line="57">
                true if this node is a zone cut                
            </comment>
            <comment line="58">
                depth in tree (0 for root)                
            </comment>
            <comment line="64">
                Returns a newly-allocated NameNode.  Used to allocate new nodes
                 in a tree.  Should be overridden in a subclass to return an object
                 of the subclass&apos;s type.                
            </comment>
            <comment line="73">
                Returns the name of this node relative to its parent, or null for
                 the root of a tree.                
            </comment>
            <comment line="81">
                Returns the depth of this node in the tree.  The depth of the root
                 is 0.                
            </comment>
            <comment line="97">
                Returns the children of this node, or null if there are none.
                 The caller must not modify the Hashtable returned.                
            </comment>
            <comment line="105">
                Returns the child node given the hash key (the down-cased label)
                 for its name relative to this node, or null if there is no such
                 child.                
            </comment>
            <comment line="116">
                Returns the node at the end of a path, or null if the
                 node does not exist.
                 The path is specified by the labels of &lt;tt&gt;name&lt;tt&gt;, beginning
                 at index idx.                
            </comment>
            <comment line="130">
                Returns the node at the end of a path, creating it and any
                 intermediate nodes as needed.
                 The path is specified by the labels of &lt;tt&gt;name&lt;tt&gt;, beginning
                 at index idx.                
            </comment>
            <javadoc line="32">
                A NameNode represents a node in the DNS namespace.  Each node
                  has a label, which is its name relative to its parent (so the
                  node at Sun.COM has label &quot;Sun&quot;).  Each node has a hashtable of
                  children indexed by their labels converted to lower-case.
                  &lt;p&gt; A node may be addressed from another by giving a DnsName
                  consisting of the sequence of labels from one node to the other.
                  &lt;p&gt; Each node also has an &lt;tt&gt;isZoneCut&lt;/tt&gt; flag, used to indicate
                  if the node is a zone cut.  A zone cut is a node with an NS record
                  that is contained in one zone, but that actually belongs to a child zone.
                  &lt;p&gt; All access is unsynchronized.                
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="label" type="String" line="53"/>
            <declaration name="children" type="Hashtable" line="55"/>
            <declaration name="isZoneCut" type="boolean" line="56"/>
            <declaration name="depth" type="int" line="57"/>
            <method name="NameNode" type="constructor" line="59">
                <params>
                    <param name="label" type="String"/>
                </params>
            </method>
            <method name="newNameNode" type="NameNode" line="68">
                <params>
                    <param name="label" type="String"/>
                </params>
            </method>
            <method name="getLabel" type="String" line="76"/>
            <method name="depth" type="int" line="84"/>
            <method name="isZoneCut" type="boolean" line="88"/>
            <method name="setZoneCut" type="void" line="92">
                <params>
                    <param name="isZoneCut" type="boolean"/>
                </params>
            </method>
            <method name="getChildren" type="Hashtable" line="100"/>
            <method name="get" type="NameNode" line="109">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <method name="get" type="NameNode" line="121">
                <params>
                    <param name="name" type="DnsName"/>
                    <param name="idx" type="int"/>
                </params>
                <declaration name="node" type="NameNode" line="122"/>
                <scope line="123"/>
            </method>
            <method name="add" type="NameNode" line="135">
                <params>
                    <param name="name" type="DnsName"/>
                    <param name="idx" type="int"/>
                </params>
                <declaration name="node" type="NameNode" line="136"/>
                <scope line="137">
                    <declaration name="label" type="String" line="138"/>
                    <declaration name="key" type="String" line="139"/>
                    <declaration name="child" type="NameNode" line="141"/>
                    <scope line="142"/>
                    <scope line="144"/>
                    <scope line="147"/>
                </scope>
            </method>
        </class>
    </source>