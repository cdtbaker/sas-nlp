<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="java.io.UnsupportedEncodingException"/>
        <class name="BerEncoder" line="30">
            <extends class="Ber"/>
            <comment line="45">
                When buf is full, expand its size by the following factor.                
            </comment>
            <comment line="82">
                ------------------ Accessor methods ------------                
            </comment>
            <comment line="119">
                -------------- encoding methods -------------                
            </comment>
            <comment line="204">
                private void deleteByte() {
                offset--;
                }                
            </comment>
            <comment line="211">
                Encodes an int.
                &lt;blockquote&gt;&lt;pre&gt;
                 BER integer ::= 0x02 berlength byte {byte}
                &lt;pre&gt;&lt;blockquote&gt;                
            </comment>
            <comment line="239">
                                
            </comment>
            <comment line="240">
                encodes an int using numbytes for the actual encoding.                
            </comment>
            <comment line="241">
                                
            </comment>
            <comment line="399">
                private void encodeNull() {
                
                
                 NULL ::= 0x05 0x00
                
                encodeByte(0x05);
                encodeByte(0x00);
                }                
            </comment>
            <javadoc line="30">
                A BER encoder.                
                <author>
                    Jagane Sundar                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <author>
                    Vincent Ryan                    
                </author>
            </javadoc>
            <declaration name="curSeqIndex" type="int" line="39"/>
            <declaration name="seqOffset" type="int" line="40"/>
            <declaration name="INITIAL_SEQUENCES" type="int" line="41"/>
            <declaration name="DEFAULT_BUFSIZE" type="int" line="42"/>
            <declaration name="BUF_GROWTH_FACTOR" type="int" line="45"/>
            <javadoc line="47">
                Creates a BER buffer for encoding.                
            </javadoc>
            <method name="BerEncoder" type="constructor" line="50"/>
            <javadoc line="54">
                Creates a BER buffer of a specified size for encoding.
                  Specify the initial bufsize.  Buffer will be expanded as needed.                
                <param>
                    bufsize The number of bytes for the buffer.                    
                </param>
            </javadoc>
            <method name="BerEncoder" type="constructor" line="59">
                <params>
                    <param name="bufsize" type="int"/>
                </params>
            </method>
            <javadoc line="68">
                Resets encoder to state when newly constructed.  Zeros out
                  internal data structures.                
            </javadoc>
            <method name="reset" type="void" line="72">
                <scope line="73"/>
                <scope line="76"/>
            </method>
            <javadoc line="83">
                Gets the number of encoded bytes in this BER buffer.                
            </javadoc>
            <method name="getDataLen" type="int" line="86"/>
            <javadoc line="90">
                Gets the buffer that contains the BER encoding. Throws an
                  exception if unmatched beginSeq() and endSeq() pairs were
                  encountered. Not entire buffer contains encoded bytes.
                  Use getDataLen() to determine number of encoded bytes.
                  Use getBuffer(true) to get rid of excess bytes in array.                
                <throws>
                    IllegalStateException If buffer contains unbalanced sequence.                    
                </throws>
            </javadoc>
            <method name="getBuf" type="byte[]" line="98">
                <scope line="99"/>
            </method>
            <javadoc line="105">
                Gets the buffer that contains the BER encoding, trimming unused bytes.                
                <throws>
                    IllegalStateException If buffer contains unbalanced sequence.                    
                </throws>
            </javadoc>
            <method name="getTrimmedBuf" type="byte[]" line="110">
                <declaration name="len" type="int" line="111"/>
                <declaration name="trimBuf" type="byte[]" line="112"/>
            </method>
            <javadoc line="120">
                Begin encoding a sequence with a tag.                
            </javadoc>
            <method name="beginSeq" type="void" line="123">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <comment line="125">
                    Double the size of the SEQUENCE array if it overflows                    
                </comment>
                <comment line="138">
                    Save space for sequence length.                    
                </comment>
                <comment line="139">
                    %%% Currently we save enough space for sequences up to 64k.                    
                </comment>
                <comment line="140">
                    For larger sequences we&apos;ll need to shift the data to the right                    
                </comment>
                <comment line="141">
                    in endSeq().  If we could instead pad the length field with                    
                </comment>
                <comment line="142">
                    zeros, it would be a big win.                    
                </comment>
                <scope line="126">
                    <declaration name="seqOffsetTmp" type="int[]" line="127"/>
                    <scope line="129"/>
                </scope>
            </method>
            <javadoc line="149">
                Terminate a BER sequence.                
            </javadoc>
            <method name="endSeq" type="void" line="152">
                <comment line="158">
                    index beyond length field                    
                </comment>
                <scope line="154"/>
                <declaration name="start" type="int" line="158"/>
                <declaration name="len" type="int" line="159"/>
                <scope line="161"/>
                <scope line="164"/>
                <scope line="168"/>
                <scope line="172"/>
                <scope line="178"/>
            </method>
            <javadoc line="183">
                Shifts contents of buf in the range [start,start+len) a specified amount.
                  Positive shift value means shift to the right.                
            </javadoc>
            <method name="shiftSeqData" type="void" line="187">
                <params>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                    <param name="shift" type="int"/>
                </params>
                <scope line="188"/>
            </method>
            <javadoc line="195">
                Encode a single byte.                
            </javadoc>
            <method name="encodeByte" type="void" line="198">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="encodeInt" type="void" line="216">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="220">
                Encodes an int and a tag.
                  &lt;blockquote&gt;&lt;pre&gt;
                  BER integer w tag ::= tag berlength byte {byte}
                  &lt;/pre&gt;&lt;/blockquote&gt;                
            </javadoc>
            <method name="encodeInt" type="void" line="226">
                <params>
                    <param name="i" type="int"/>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="mask" type="int" line="227"/>
                <declaration name="intsize" type="int" line="228"/>
                <scope line="230"/>
            </method>
            <method name="encodeInt" type="void" line="241">
                <params>
                    <param name="i" type="int"/>
                    <param name="tag" type="int"/>
                    <param name="intsize" type="int"/>
                </params>
                <comment line="243">
                                        
                </comment>
                <comment line="244">
                    integer ::= 0x02 asnlength byte {byte}*                    
                </comment>
                <comment line="245">
                                        
                </comment>
                <scope line="247"/>
                <declaration name="mask" type="int" line="256"/>
                <scope line="258"/>
            </method>
            <javadoc line="264">
                Encodes a boolean.
                  &lt;blockquote&gt;&lt;pre&gt;
                  BER boolean ::= 0x01 0x01 {0xff|0x00}
                  &lt;/pre&gt;&lt;/blockquote&gt;                
            </javadoc>
            <method name="encodeBoolean" type="void" line="270">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="275">
                Encodes a boolean and a tag
                  &lt;blockquote&gt;&lt;pre&gt;
                  BER boolean w TAG ::= tag 0x01 {0xff|0x00}
                  &lt;/pre&gt;&lt;/blockquote&gt;                
            </javadoc>
            <method name="encodeBoolean" type="void" line="281">
                <params>
                    <param name="b" type="boolean"/>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <javadoc line="289">
                Encodes a string.
                  &lt;blockquote&gt;&lt;pre&gt;
                  BER string ::= 0x04 strlen byte1 byte2...
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  The string is converted into bytes using UTF-8 or ISO-Latin-1.                
            </javadoc>
            <method name="encodeString" type="void" line="297">
                <params>
                    <param name="str" type="String"/>
                    <param name="encodeUTF8" type="boolean"/>
                </params>
            </method>
            <javadoc line="301">
                Encodes a string and a tag.
                  &lt;blockquote&gt;&lt;pre&gt;
                  BER string w TAG ::= tag strlen byte1 byte2...
                  &lt;/pre&gt;&lt;/blockquote&gt;                
            </javadoc>
            <method name="encodeString" type="void" line="308">
                <params>
                    <param name="str" type="String"/>
                    <param name="tag" type="int"/>
                    <param name="encodeUTF8" type="boolean"/>
                </params>
                <declaration name="i" type="int" line="312"/>
                <declaration name="count" type="int" line="313"/>
                <declaration name="bytes" type="byte[]" line="314"/>
                <scope line="316"/>
                <scope line="318">
                    <scope line="319"/>
                    <scope line="322"/>
                </scope>
                <scope line="325">
                    <scope line="326"/>
                    <scope line="329"/>
                </scope>
                <scope line="337"/>
            </method>
            <javadoc line="342">
                Encodes a portion of an octet string and a tag.                
            </javadoc>
            <method name="encodeOctetString" type="void" line="346">
                <params>
                    <param name="tb" type="byte"/>
                    <param name="tag" type="int"/>
                    <param name="tboffset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="351"/>
            </method>
            <javadoc line="358">
                Encodes an octet string and a tag.                
            </javadoc>
            <method name="encodeOctetString" type="void" line="361">
                <params>
                    <param name="tb" type="byte"/>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <method name="encodeLength" type="void" line="365">
                <params>
                    <param name="len" type="int"/>
                </params>
                <comment line="366">
                    worst case                    
                </comment>
                <scope line="368"/>
                <scope line="370"/>
                <scope line="373"/>
                <scope line="377"/>
                <scope line="382"/>
            </method>
            <javadoc line="387">
                Encodes an array of strings.                
            </javadoc>
            <method name="encodeStringArray" type="void" line="391">
                <params>
                    <param name="strs" type="String"/>
                    <param name="encodeUTF8" type="boolean"/>
                </params>
                <scope line="394"/>
            </method>
            <javadoc line="409">
                Ensures that there are at least &quot;len&quot; unused bytes in &quot;buf&quot;.
                  When more space is needed &quot;buf&quot; is expanded by a factor of
                  BUF_GROWTH_FACTOR, then &quot;len&quot; bytes are added if &quot;buf&quot; still
                  isn&apos;t large enough.                
            </javadoc>
            <method name="ensureFreeBytes" type="void" line="415">
                <params>
                    <param name="len" type="int"/>
                </params>
                <comment line="422">
                    Only copy bytes in the range [0, offset)                    
                </comment>
                <scope line="416">
                    <declaration name="newsize" type="int" line="417"/>
                    <scope line="418"/>
                    <declaration name="newbuf" type="byte" line="421"/>
                </scope>
            </method>
        </class>
    </source>