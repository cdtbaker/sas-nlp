<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.url.rmi">
        <import package="java.util.Hashtable"/>
        <import package="java.rmi.registry.LocateRegistry"/>
        <import package="javax.naming"/>
        <import package="javax.naming.spi.ResolveResult"/>
        <import package="com.sun.jndi.toolkit.url.GenericURLContext"/>
        <import package="com.sun.jndi.rmi.registry.RegistryContext"/>
        <class name="rmiURLContext" line="37">
            <extends class="GenericURLContext"/>
            <javadoc line="37">
                An RMI URL context resolves names that are URLs of the form
                  &lt;pre&gt;
                  rmi://[host][:port][/[object]]
                  or
                  rmi:[/][object]
                  &lt;/pre&gt;
                  If an object is specified, the URL resolves to the named object.
                  Otherwise, the URL resolves to the specified RMI registry.                
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <method name="rmiURLContext" type="constructor" line="51">
                <params>
                    <param name="env" type="Hashtable"/>
                </params>
            </method>
            <javadoc line="55">
                Resolves the registry portion of &quot;url&quot; to the corresponding
                  RMI registry, and returns the atomic object name as the
                  remaining name.                
            </javadoc>
            <method name="getRootURLContext" type="ResolveResult" line="62">
                <params>
                    <param name="url" type="String"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <comment line="69">
                    Parse the URL.                    
                </comment>
                <comment line="75">
                    index into url, following the &quot;rmi:&quot;                    
                </comment>
                <comment line="77">
                    &quot;, i)) {          // parse &quot;//host:port&quot;                    
                </comment>
                <comment line="78">
                    skip past &quot;//&quot;                    
                </comment>
                <comment line="83">
                    at IPv6 literal                    
                </comment>
                <comment line="89">
                    include brackets                    
                </comment>
                <comment line="90">
                    skip past &quot;[...]&quot;                    
                </comment>
                <comment line="91">
                    at host name or IPv4                    
                </comment>
                <comment line="99">
                    skip past host                    
                </comment>
                <comment line="102">
                    parse port                    
                </comment>
                <comment line="103">
                    skip past &quot;:&quot;                    
                </comment>
                <comment line="115">
                    skip &quot;/&quot; before object name                    
                </comment>
                <comment line="122">
                    Represent object name as empty or single-component composite name.                    
                </comment>
                <comment line="128">
                    Debug
                    System.out.println(&quot;host=&quot; + host + &quot; port=&quot; + port +
                                     &quot; objName=&quot; + remaining.toString() + &quot;\n&quot;);                    
                </comment>
                <comment line="132">
                    Create a registry context.                    
                </comment>
                <scope line="63"/>
                <declaration name="host" type="String" line="70"/>
                <declaration name="port" type="int" line="71"/>
                <declaration name="objName" type="String" line="72"/>
                <declaration name="i" type="int" line="74"/>
                <scope line="76">
                    <declaration name="slash" type="int" line="78"/>
                    <scope line="79"/>
                    <scope line="82">
                        <declaration name="brac" type="int" line="83"/>
                        <scope line="84"/>
                    </scope>
                    <scope line="90">
                        <declaration name="colon" type="int" line="91"/>
                        <declaration name="hostEnd" type="int" line="92"/>
                        <scope line="95"/>
                    </scope>
                    <scope line="100">
                        <scope line="101"/>
                        <scope line="104"/>
                    </scope>
                </scope>
                <scope line="111"/>
                <scope line="114"/>
                <scope line="117"/>
                <declaration name="remaining" type="CompositeName" line="122"/>
                <scope line="123"/>
                <declaration name="regCtx" type="Context" line="132"/>
            </method>
        </class>
    </source>