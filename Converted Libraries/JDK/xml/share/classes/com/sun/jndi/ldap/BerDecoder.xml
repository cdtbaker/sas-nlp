<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="java.io.UnsupportedEncodingException"/>
        <class name="BerDecoder" line="30">
            <extends class="Ber"/>
            <comment line="39">
                The start point in buf to decode                
            </comment>
            <javadoc line="30">
                A BER decoder. Contains methods to parse a BER buffer.                
                <author>
                    Jagane Sundar                    
                </author>
                <author>
                    Vincent Ryan                    
                </author>
            </javadoc>
            <declaration name="origOffset" type="int" line="38"/>
            <javadoc line="40">
                Creates a BER decoder that reads bytes from the specified buffer.                
            </javadoc>
            <method name="BerDecoder" type="constructor" line="43">
                <params>
                    <param name="buf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="bufsize" type="int"/>
                </params>
            </method>
            <javadoc line="52">
                Resets this decode to start parsing from the initial offset
                  (ie., same state as after calling the constructor).                
            </javadoc>
            <method name="reset" type="void" line="56"/>
            <javadoc line="60">
                Returns the current parse position.
                  It points to the byte that will be parsed next.
                  Useful for parsing sequences.                
            </javadoc>
            <method name="getParsePosition" type="int" line="65"/>
            <javadoc line="69">
                Parses a possibly variable length field.                
            </javadoc>
            <method name="parseLength" type="int" line="72">
                <declaration name="lengthbyte" type="int" line="74"/>
                <scope line="76">
                    <scope line="80"/>
                    <scope line="85"/>
                    <scope line="89"/>
                    <declaration name="retval" type="int" line="93"/>
                    <scope line="95"/>
                </scope>
                <scope line="99"/>
            </method>
            <javadoc line="104">
                Parses the next sequence in this BER buffer.                
                <param>
                    rlen An array for returning size of the sequence in bytes. If null,
                      the size is not returned.                    
                </param>
                <return>
                    The sequence's tag.                    
                </return>
            </javadoc>
            <method name="parseSeq" type="int" line="110">
                <params>
                    <param name="rlen" type="int"/>
                </params>
                <declaration name="seq" type="int" line="112"/>
                <declaration name="len" type="int" line="113"/>
                <scope line="114"/>
            </method>
            <javadoc line="120">
                Used to skip bytes. Usually used when trying to recover from parse error.
                  Don&apos;t need to be public right now?                
                <param>
                    i The number of bytes to skip                    
                </param>
            </javadoc>
            <method name="seek" type="void" line="125">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="126"/>
            </method>
            <javadoc line="132">
                Parses the next byte in this BER buffer.                
                <return>
                    The byte parsed.                    
                </return>
            </javadoc>
            <method name="parseByte" type="int" line="136">
                <scope line="137"/>
            </method>
            <javadoc line="144">
                Returns the next byte in this BER buffer without consuming it.                
                <return>
                    The next byte.                    
                </return>
            </javadoc>
            <method name="peekByte" type="int" line="148">
                <scope line="149"/>
            </method>
            <javadoc line="155">
                Parses an ASN_BOOLEAN tagged integer from this BER buffer.                
                <return>
                    true if the tagged integer is 0; false otherwise.                    
                </return>
            </javadoc>
            <method name="parseBoolean" type="boolean" line="159"/>
            <javadoc line="163">
                Parses an ASN_ENUMERATED tagged integer from this BER buffer.                
                <return>
                    The tag of enumeration.                    
                </return>
            </javadoc>
            <method name="parseEnumeration" type="int" line="167"/>
            <javadoc line="171">
                Parses an ASN_INTEGER tagged integer from this BER buffer.                
                <return>
                    The value of the integer.                    
                </return>
            </javadoc>
            <method name="parseInt" type="int" line="175"/>
            <javadoc line="179">
                Parses an integer that&apos;s preceded by a tag.
                  &lt;blockquote&gt;&lt;pre&gt;
                  BER integer ::= tag length byte {byte}
                  &lt;/pre&gt;&lt;/blockquote&gt;                
            </javadoc>
            <method name="parseIntWithTag" type="int" line="185">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <comment line="207">
                                        
                </comment>
                <scope line="188"/>
                <declaration name="len" type="int" line="194"/>
                <scope line="196"/>
                <scope line="198"/>
                <declaration name="fb" type="byte" line="202"/>
                <declaration name="value" type="int" line="203"/>
                <scope line="206"/>
                <scope line="211"/>
            </method>
            <javadoc line="218">
                Parses a string.                
            </javadoc>
            <method name="parseString" type="String" line="221">
                <params>
                    <param name="decodeUTF8" type="boolean"/>
                </params>
            </method>
            <javadoc line="225">
                Parses a string of a given tag from this BER buffer.
                  &lt;blockquote&gt;&lt;pre&gt;
                  BER simple string ::= tag length {byte}
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    rlen An array for holding the relative parsed offset; if null
                      offset not set.                    
                </param>
                <param>
                    decodeUTF8 If true, use UTF-8 when decoding the string; otherwise
                      use ISO-Latin-1 (8859_1). Use true for LDAPv3; false for LDAPv2.                    
                </param>
                <param>
                    tag The tag that precedes the string.                    
                </param>
                <return>
                    The non-null parsed string.                    
                </return>
            </javadoc>
            <method name="parseStringWithTag" type="String" line="238">
                <params>
                    <param name="tag" type="int"/>
                    <param name="decodeUTF8" type="boolean"/>
                    <param name="rlen" type="int"/>
                </params>
                <declaration name="st" type="int" line="240"/>
                <declaration name="origOffset" type="int" line="241"/>
                <scope line="243"/>
                <declaration name="len" type="int" line="248"/>
                <scope line="250"/>
                <declaration name="retstr" type="String" line="254"/>
                <scope line="255"/>
                <scope line="257">
                    <declaration name="buf2" type="byte[]" line="258"/>
                    <scope line="261">
                        <scope line="262"/>
                        <scope line="264"/>
                    </scope>
                    <scope line="267">
                        <scope line="268"/>
                        <scope line="270"/>
                    </scope>
                </scope>
                <scope line="277"/>
            </method>
            <javadoc line="284">
                Parses an octet string of a given type(tag) from this BER buffer.
                  &lt;blockquote&gt;&lt;pre&gt;
                  BER Binary Data of type &quot;tag&quot; ::= tag length {byte}
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    tag The tag to look for.                    
                </param>
                <param>
                    rlen An array for returning the relative parsed position. If null,
                      the relative parsed position is not returned.                    
                </param>
                <return>
                    A non-null array containing the octet string.                    
                </return>
                <throws>
                    DecodeException If the next byte in the BER buffer is not
                      <tt>tag</tt>, or if length specified in the BER buffer exceeds the
                      number of bytes left in the buffer.                    
                </throws>
            </javadoc>
            <method name="parseOctetString" type="byte[]" line="298">
                <params>
                    <param name="tag" type="int"/>
                    <param name="rlen" type="int"/>
                </params>
                <declaration name="origOffset" type="int" line="300"/>
                <declaration name="st" type="int" line="301"/>
                <scope line="302"/>
                <declaration name="len" type="int" line="309"/>
                <scope line="311"/>
                <declaration name="retarr" type="byte" line="315"/>
                <scope line="316"/>
                <scope line="321"/>
            </method>
            <javadoc line="328">
                Returns the number of unparsed bytes in this BER buffer.                
            </javadoc>
            <method name="bytesLeft" type="int" line="331"/>
        </class>
    </source>