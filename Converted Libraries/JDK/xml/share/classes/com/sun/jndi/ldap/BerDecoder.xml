<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="java.io.UnsupportedEncodingException"/>
        <class name="BerDecoder" line="3">
            <extends class="Ber"/>
            <javadoc line="3">
                A BER decoder. Contains methods to parse a BER buffer.                
                <author>
                    Jagane Sundar                    
                </author>
                <author>
                    Vincent Ryan                    
                </author>
            </javadoc>
            <declaration name="origOffset" type="int" line="9"/>
            <javadoc line="10">
                Creates a BER decoder that reads bytes from the specified buffer.                
            </javadoc>
            <method name="BerDecoder" type="constructor" line="13">
                <params>
                    <param name="buf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="bufsize" type="int"/>
                </params>
            </method>
            <javadoc line="19">
                Resets this decode to start parsing from the initial offset
                  (ie., same state as after calling the constructor).                
            </javadoc>
            <method name="reset" type="void" line="23"/>
            <javadoc line="26">
                Returns the current parse position.
                  It points to the byte that will be parsed next.
                  Useful for parsing sequences.                
            </javadoc>
            <method name="getParsePosition" type="int" line="31"/>
            <javadoc line="34">
                Parses a possibly variable length field.                
            </javadoc>
            <method name="parseLength" type="int" line="37">
                <declaration name="lengthbyte" type="int" line="38"/>
                <scope line="39">
                    <scope line="41"/>
                    <scope line="44"/>
                    <scope line="47"/>
                    <declaration name="retval" type="int" line="50"/>
                    <scope line="51"/>
                </scope>
                <scope line="56"/>
            </method>
            <javadoc line="60">
                Parses the next sequence in this BER buffer.                
                <param>
                    rlen An array for returning size of the sequence in bytes. If null,
                      the size is not returned.                    
                </param>
                <return>
                    The sequence&apos;s tag.                    
                </return>
            </javadoc>
            <method name="parseSeq" type="int" line="66">
                <params>
                    <param name="rlen" type="int"/>
                </params>
                <declaration name="seq" type="int" line="67"/>
                <declaration name="len" type="int" line="68"/>
                <scope line="69"/>
            </method>
            <javadoc line="74">
                Used to skip bytes. Usually used when trying to recover from parse error.
                  Don&apos;t need to be public right now?                
                <param>
                    i The number of bytes to skip                    
                </param>
            </javadoc>
            <method name="seek" type="void" line="79">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="80"/>
            </method>
            <javadoc line="85">
                Parses the next byte in this BER buffer.                
                <return>
                    The byte parsed.                    
                </return>
            </javadoc>
            <method name="parseByte" type="int" line="89">
                <scope line="90"/>
            </method>
            <javadoc line="95">
                Returns the next byte in this BER buffer without consuming it.                
                <return>
                    The next byte.                    
                </return>
            </javadoc>
            <method name="peekByte" type="int" line="99">
                <scope line="100"/>
            </method>
            <javadoc line="105">
                Parses an ASN_BOOLEAN tagged integer from this BER buffer.                
                <return>
                    true if the tagged integer is 0; false otherwise.                    
                </return>
            </javadoc>
            <method name="parseBoolean" type="boolean" line="109"/>
            <javadoc line="112">
                Parses an ASN_ENUMERATED tagged integer from this BER buffer.                
                <return>
                    The tag of enumeration.                    
                </return>
            </javadoc>
            <method name="parseEnumeration" type="int" line="116"/>
            <javadoc line="119">
                Parses an ASN_INTEGER tagged integer from this BER buffer.                
                <return>
                    The value of the integer.                    
                </return>
            </javadoc>
            <method name="parseInt" type="int" line="123"/>
            <javadoc line="126">
                Parses an integer that&apos;s preceded by a tag.
                  &lt;blockquote&gt;&lt;pre&gt;
                  BER integer ::= tag length byte {byte}
                  &lt;/pre&gt;&lt;/blockquote&gt;                
            </javadoc>
            <method name="parseIntWithTag" type="int" line="132">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <scope line="133"/>
                <declaration name="len" type="int" line="136"/>
                <scope line="137"/>
                <scope line="140"/>
                <declaration name="fb" type="byte" line="143"/>
                <declaration name="value" type="int" line="144"/>
                <scope line="146"/>
                <scope line="150"/>
            </method>
            <javadoc line="155">
                Parses a string.                
            </javadoc>
            <method name="parseString" type="String" line="158">
                <params>
                    <param name="decodeUTF8" type="boolean"/>
                </params>
            </method>
            <javadoc line="161">
                Parses a string of a given tag from this BER buffer.
                  &lt;blockquote&gt;&lt;pre&gt;
                  BER simple string ::= tag length {byte}
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    rlen An array for holding the relative parsed offset; if null
                      offset not set.                    
                </param>
                <param>
                    decodeUTF8 If true, use UTF-8 when decoding the string; otherwise
                      use ISO-Latin-1 (8859_1). Use true for LDAPv3; false for LDAPv2.                    
                </param>
                <param>
                    tag The tag that precedes the string.                    
                </param>
                <return>
                    The non-null parsed string.                    
                </return>
            </javadoc>
            <method name="parseStringWithTag" type="String" line="173">
                <params>
                    <param name="tag" type="int"/>
                    <param name="decodeUTF8" type="boolean"/>
                    <param name="rlen" type="int"/>
                </params>
                <declaration name="st" type="int" line="174"/>
                <declaration name="origOffset" type="int" line="175"/>
                <scope line="176"/>
                <declaration name="len" type="int" line="179"/>
                <scope line="180"/>
                <declaration name="retstr" type="String" line="183"/>
                <scope line="184"/>
                <scope line="187">
                    <declaration name="buf2" type="byte[]" line="188"/>
                    <scope line="190">
                        <scope line="191"/>
                        <scope line="194"/>
                    </scope>
                    <scope line="198">
                        <scope line="199"/>
                        <scope line="202"/>
                    </scope>
                </scope>
                <scope line="208"/>
            </method>
            <javadoc line="213">
                Parses an octet string of a given type(tag) from this BER buffer.
                  &lt;blockquote&gt;&lt;pre&gt;
                  BER Binary Data of type &quot;tag&quot; ::= tag length {byte}
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    tag The tag to look for.                    
                </param>
                <param>
                    rlen An array for returning the relative parsed position. If null,
                      the relative parsed position is not returned.                    
                </param>
                <return>
                    A non-null array containing the octet string.                    
                </return>
                <throws>
                    DecodeException If the next byte in the BER buffer is not
                      &lt;tt&gt;tag&lt;/tt&gt;, or if length specified in the BER buffer exceeds the
                      number of bytes left in the buffer.                    
                </throws>
            </javadoc>
            <method name="parseOctetString" type="byte[]" line="226">
                <params>
                    <param name="tag" type="int"/>
                    <param name="rlen" type="int"/>
                </params>
                <declaration name="origOffset" type="int" line="227"/>
                <declaration name="st" type="int" line="228"/>
                <scope line="229"/>
                <declaration name="len" type="int" line="232"/>
                <scope line="233"/>
                <declaration name="retarr" type="byte" line="236"/>
                <scope line="237"/>
                <scope line="241"/>
            </method>
            <javadoc line="246">
                Returns the number of unparsed bytes in this BER buffer.                
            </javadoc>
            <method name="bytesLeft" type="int" line="249"/>
        </class>
    </source>