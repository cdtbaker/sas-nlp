<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="java.io"/>
        <import package="java.util.Vector"/>
        <import package="java.util.EventObject"/>
        <import package="javax.naming.event.NamingEvent"/>
        <import package="javax.naming.event.NamingExceptionEvent"/>
        <import package="javax.naming.event.NamingListener"/>
        <import package="javax.naming.ldap.UnsolicitedNotificationEvent"/>
        <import package="javax.naming.ldap.UnsolicitedNotificationListener"/>
        <class name="EventQueue" line="38">
            <comment line="68">
                package private                
            </comment>
            <comment line="75">
                package private;                
            </comment>
            <comment line="168">
                package private; used by EventSupport;                
            </comment>
            <implements interface="Runnable"/>
            <javadoc line="38">
                Package private class used by EventSupport to dispatch events.
                  This class implements an event queue, and a dispatcher thread that
                  dequeues and dispatches events from the queue.
                  Pieces stolen from sun.misc.Queue.                
                <author>
                    Bill Shannon (from javax.mail.event)                    
                </author>
                <author>
                    Rosanna Lee (modified for JNDI-related events)                    
                </author>
            </javadoc>
            <declaration name="debug" type="boolean" line="49"/>
            <class name="QueueElement" line="51">
                <declaration name="next" type="QueueElement" line="52"/>
                <declaration name="prev" type="QueueElement" line="53"/>
                <declaration name="event" type="EventObject" line="54"/>
                <declaration name="vector" type="Vector" line="55"/>
                <method name="QueueElement" type="constructor" line="57">
                    <params>
                        <param name="event" type="EventObject"/>
                        <param name="vector" type="Vector"/>
                    </params>
                </method>
            </class>
            <declaration name="head" type="QueueElement" line="63"/>
            <declaration name="tail" type="QueueElement" line="64"/>
            <declaration name="qThread" type="Thread" line="65"/>
            <method name="EventQueue" type="constructor" line="68">
                <comment line="70">
                    not a user thread                    
                </comment>
            </method>
            <javadoc line="75">
                Enqueue an event.                
                <param>
                    event Either a <tt>NamingExceptionEvent</tt> or a subclass
                      of <tt>NamingEvent</tt> or
                      <tt>UnsolicitedNotificatoniEvent</tt>.
                      If it is a subclass of <tt>NamingEvent</tt>, all listeners must implement
                      the corresponding subinterface of <tt>NamingListener</tt>.
                      For example, for a <tt>ObjectAddedEvent</tt>, all listeners <em>must</em>
                      implement the <tt>ObjectAddedListener</tt> interface.
                      <em>The current implementation does not check this before dispatching
                      the event.</em>
                      If the event is a <tt>NamingExceptionEvent</tt>, then all listeners
                      are notified.                    
                </param>
                <param>
                    vector List of NamingListeners that will be notified of event.                    
                </param>
            </javadoc>
            <method name="enqueue" type="void" line="90">
                <params>
                    <param name="event" type="EventObject"/>
                    <param name="vector" type="Vector"/>
                </params>
                <declaration name="newElt" type="QueueElement" line="91"/>
                <scope line="93"/>
                <scope line="96"/>
            </method>
            <javadoc line="104">
                Dequeue the oldest object on the queue.
                  Used only by the run() method.                
                <return>
                    the oldest object on the queue.                    
                </return>
                <exception>
                    java.lang.InterruptedException if any thread has
                      interrupted this thread.                    
                </exception>
            </javadoc>
            <method name="dequeue" type="QueueElement" line="113">
                <declaration name="elt" type="QueueElement" line="116"/>
                <scope line="118"/>
                <scope line="120"/>
            </method>
            <javadoc line="127">
                Pull events off the queue and dispatch them.                
            </javadoc>
            <method name="run" type="void" line="130">
                <comment line="140">
                    Dispatch to corresponding NamingListener                    
                </comment>
                <comment line="141">
                    The listener should only be getting the event that                    
                </comment>
                <comment line="142">
                    it is interested in. (No need to check mask or                    
                </comment>
                <comment line="143">
                    instanceof subinterfaces.)                    
                </comment>
                <comment line="144">
                    It is the responsibility of the enqueuer to                    
                </comment>
                <comment line="145">
                    only enqueue events with listseners of the correct type.                    
                </comment>
                <comment line="150">
                    An exception occurred: if notify all naming listeners                    
                </comment>
                <comment line="163">
                    just die                    
                </comment>
                <declaration name="qe" type="QueueElement" line="131"/>
                <scope line="133">
                    <scope line="134">
                        <declaration name="e" type="EventObject" line="135"/>
                        <declaration name="v" type="Vector" line="136"/>
                        <scope line="138">
                            <scope line="147"/>
                            <scope line="151"/>
                            <scope line="154"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="162"/>
            </method>
            <javadoc line="168">
                Stop the dispatcher so we can be destroyed.                
            </javadoc>
            <method name="stop" type="void" line="171">
                <comment line="174">
                    kill our thread                    
                </comment>
                <scope line="173"/>
            </method>
        </class>
    </source>