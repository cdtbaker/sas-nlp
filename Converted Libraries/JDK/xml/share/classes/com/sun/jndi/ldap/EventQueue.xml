<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="java.io"/>
        <import package="java.util.Vector"/>
        <import package="java.util.EventObject"/>
        <import package="javax.naming.event.NamingEvent"/>
        <import package="javax.naming.event.NamingExceptionEvent"/>
        <import package="javax.naming.event.NamingListener"/>
        <import package="javax.naming.ldap.UnsolicitedNotificationEvent"/>
        <import package="javax.naming.ldap.UnsolicitedNotificationListener"/>
        <class name="EventQueue" line="10">
            <implements interface="Runnable"/>
            <javadoc line="10">
                Package private class used by EventSupport to dispatch events.
                  This class implements an event queue, and a dispatcher thread that
                  dequeues and dispatches events from the queue.
                  Pieces stolen from sun.misc.Queue.                
                <author>
                    Bill Shannon (from javax.mail.event)                    
                </author>
                <author>
                    Rosanna Lee (modified for JNDI-related events)                    
                </author>
            </javadoc>
            <declaration name="debug" type="boolean" line="19"/>
            <class name="QueueElement" line="20">
                <declaration name="next" type="QueueElement" line="21"/>
                <declaration name="prev" type="QueueElement" line="22"/>
                <declaration name="event" type="EventObject" line="23"/>
                <declaration name="vector" type="Vector" line="24"/>
                <method name="QueueElement" type="constructor" line="25">
                    <params>
                        <param name="event" type="EventObject"/>
                        <param name="vector" type="Vector"/>
                    </params>
                </method>
            </class>
            <declaration name="head" type="QueueElement" line="30"/>
            <declaration name="tail" type="QueueElement" line="31"/>
            <declaration name="qThread" type="Thread" line="32"/>
            <method name="EventQueue" type="constructor" line="33"/>
            <javadoc line="38">
                Enqueue an event.                
                <param>
                    event Either a <tt>NamingExceptionEvent</tt> or a subclass
                      of <tt>NamingEvent</tt> or
                      <tt>UnsolicitedNotificatoniEvent</tt>.
                      If it is a subclass of <tt>NamingEvent</tt>, all listeners must implement
                      the corresponding subinterface of <tt>NamingListener</tt>.
                      For example, for a <tt>ObjectAddedEvent</tt>, all listeners <em>must</em>
                      implement the <tt>ObjectAddedListener</tt> interface.
                      <em>The current implementation does not check this before dispatching
                      the event.</em>
                      If the event is a <tt>NamingExceptionEvent</tt>, then all listeners
                      are notified.                    
                </param>
                <param>
                    vector List of NamingListeners that will be notified of event.                    
                </param>
            </javadoc>
            <method name="enqueue" type="void" line="53">
                <params>
                    <param name="event" type="EventObject"/>
                    <param name="vector" type="Vector"/>
                </params>
                <declaration name="newElt" type="QueueElement" line="54"/>
                <scope line="55"/>
                <scope line="59"/>
            </method>
            <javadoc line="66">
                Dequeue the oldest object on the queue.
                  Used only by the run() method.                
                <return>
                    the oldest object on the queue.                    
                </return>
                <exception>
                    java.lang.InterruptedException if any thread has
                      interrupted this thread.                    
                </exception>
            </javadoc>
            <method name="dequeue" type="QueueElement" line="73">
                <declaration name="elt" type="QueueElement" line="75"/>
                <scope line="77"/>
                <scope line="80"/>
            </method>
            <javadoc line="86">
                Pull events off the queue and dispatch them.                
            </javadoc>
            <method name="run" type="void" line="89">
                <declaration name="qe" type="QueueElement" line="90"/>
                <scope line="91">
                    <scope line="92">
                        <declaration name="e" type="EventObject" line="93"/>
                        <declaration name="v" type="Vector" line="94"/>
                        <scope line="95">
                            <scope line="96"/>
                            <scope line="99"/>
                            <scope line="102"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="111"/>
            </method>
            <javadoc line="114">
                Stop the dispatcher so we can be destroyed.                
            </javadoc>
            <method name="stop" type="void" line="117">
                <scope line="119"/>
            </method>
        </class>
    </source>