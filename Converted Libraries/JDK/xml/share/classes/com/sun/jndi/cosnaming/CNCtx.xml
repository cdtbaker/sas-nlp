<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.cosnaming">
        <import package="javax.naming"/>
        <import package="javax.naming.spi.NamingManager"/>
        <import package="javax.naming.spi.ResolveResult"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URL"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="org.omg.CosNaming"/>
        <import package="org.omg.CosNaming.NamingContextPackage"/>
        <import package="org.omg.CORBA"/>
        <import package="com.sun.jndi.toolkit.corba.CorbaUtils"/>
        <import package="java.applet.Applet"/>
        <class name="CNCtx" line="18">
            <implements interface="javax.naming.Context"/>
            <javadoc line="18">
                Provides a bridge to the CosNaming server provided by
                  JavaIDL. This class provides the InitialContext from CosNaming.                
                <author>
                    Raj Krishnamurthy                    
                </author>
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="debug" type="boolean" line="25"/>
            <declaration name="_orb" type="ORB" line="26"/>
            <declaration name="_nc" type="NamingContext" line="27"/>
            <declaration name="_name" type="NameComponent[]" line="28"/>
            <declaration name="_env" type="Hashtable" line="29"/>
            <declaration name="parser" type="CNNameParser" line="30"/>
            <declaration name="FED_PROP" type="String" line="31"/>
            <declaration name="federation" type="boolean" line="32"/>
            <declaration name="orbTracker" type="OrbReuseTracker" line="33"/>
            <declaration name="enumCount" type="int" line="34"/>
            <declaration name="isCloseCalled" type="boolean" line="35"/>
            <javadoc line="36">
                Create a CNCtx object. Gets the initial naming
                  reference for the COS Naming Service from the ORB.
                  The ORB can be passed in via the java.naming.corba.orb property
                  or be created using properties in the environment properties.                
                <param>
                    env Environment properties for initializing name service.                    
                </param>
                <exception>
                    NamingException Cannot initialize ORB or naming context.                    
                </exception>
            </javadoc>
            <method name="CNCtx" type="constructor" line="44">
                <params>
                    <param name="env" type="Hashtable"/>
                </params>
                <scope line="45"/>
            </method>
            <method name="CNCtx" type="constructor" line="52"/>
            <javadoc line="54">
                This method is used by the iiop and iiopname URL Context factories.                
            </javadoc>
            <method name="createUsingURL" type="ResolveResult" line="57">
                <params>
                    <param name="url" type="String"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <declaration name="ctx" type="CNCtx" line="58"/>
                <scope line="59"/>
                <declaration name="rest" type="String" line="63"/>
            </method>
            <javadoc line="66">
                Creates a CNCtx object which supports the javax.naming
                  apis given a COS Naming Context object.                
                <param>
                    orb The ORB used by this context                    
                </param>
                <param>
                    tracker The ORB reuse tracker for tracking references to the
                      orb object                    
                </param>
                <param>
                    nctx The COS NamingContext object associated with this context                    
                </param>
                <param>
                    name The name of this context relative to the root                    
                </param>
            </javadoc>
            <method name="CNCtx" type="constructor" line="75">
                <params>
                    <param name="orb" type="ORB"/>
                    <param name="tracker" type="OrbReuseTracker"/>
                    <param name="nctx" type="NamingContext"/>
                    <param name="env" type="Hashtable"/>
                    <param name="name" type="NameComponent[]"/>
                </params>
                <scope line="79"/>
            </method>
            <method name="makeFullName" type="NameComponent[]" line="87">
                <params>
                    <param name="child" type="NameComponent[]"/>
                </params>
                <scope line="88"/>
                <declaration name="answer" type="NameComponent[]" line="91"/>
            </method>
            <method name="getNameInNamespace" type="String" line="96">
                <scope line="97"/>
            </method>
            <javadoc line="102">
                These are the URL schemes that need to be processed.
                  IOR and corbaloc URLs can be passed directly to ORB.string_to_object()                
            </javadoc>
            <method name="isCorbaUrl" type="boolean" line="106">
                <params>
                    <param name="url" type="String"/>
                </params>
            </method>
            <javadoc line="109">
                Initializes the COS Naming Service.
                  This method initializes the three instance fields:
                  _nc : The root naming context.
                  _orb: The ORB to use for connecting RMI/IIOP stubs and for
                  getting the naming context (_nc) if one was not specified
                  explicitly via PROVIDER_URL.
                  _name: The name of the root naming context.
                  &lt;p&gt;
                  _orb is obtained from java.naming.corba.orb if it has been set.
                  Otherwise, _orb is created using the host/port from PROVIDER_URL
                  (if it contains an &quot;iiop&quot; or &quot;iiopname&quot; URL), or from initialization
                  properties specified in env.
                  &lt;p&gt;
                  _nc is obtained from the IOR stored in PROVIDER_URL if it has been
                  set and does not contain an &quot;iiop&quot; or &quot;iiopname&quot; URL. It can be
                  a stringified IOR, &quot;corbaloc&quot; URL, &quot;corbaname&quot; URL,
                  or a URL (such as file/http/ftp) to a location
                  containing a stringified IOR. If PROVIDER_URL has not been
                  set in this way, it is obtained from the result of
                  ORB.resolve_initial_reference(&quot;NameService&quot;);
                  &lt;p&gt;
                  _name is obtained from the &quot;iiop&quot;, &quot;iiopname&quot;, or &quot;corbaname&quot; URL.
                  It is the empty name by default.                
                <param>
                    env Environment The possibly null environment.                    
                </param>
                <exception>
                    NamingException When an error occurs while initializing the
                      ORB or the naming context.                    
                </exception>
            </javadoc>
            <method name="initOrbAndRootContext" type="void" line="137">
                <params>
                    <param name="env" type="Hashtable"/>
                </params>
                <declaration name="inOrb" type="org.omg.CORBA.ORB" line="138"/>
                <declaration name="ncIor" type="String" line="139"/>
                <scope line="140"/>
                <declaration name="provUrl" type="String" line="143"/>
                <scope line="144"/>
                <scope line="147">
                    <scope line="149"/>
                </scope>
                <scope line="155">
                    <declaration name="insName" type="String" line="156"/>
                    <scope line="157">
                        <scope line="159">
                            <declaration name="obj" type="org.omg.CORBA.Object" line="160"/>
                            <scope line="162"/>
                        </scope>
                        <scope line="166"/>
                        <scope line="169"/>
                    </scope>
                </scope>
                <scope line="174">
                    <scope line="175">
                        <scope line="178"/>
                    </scope>
                </scope>
            </method>
            <method name="initUsingUrl" type="String" line="185">
                <params>
                    <param name="orb" type="ORB"/>
                    <param name="url" type="String"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <scope line="186"/>
                <scope line="189"/>
            </method>
            <javadoc line="193">
                Handles &quot;iiop&quot; and &quot;iiopname&quot; URLs (INS 98-10-11)                
            </javadoc>
            <method name="initUsingIiopUrl" type="String" line="196">
                <params>
                    <param name="defOrb" type="ORB"/>
                    <param name="url" type="String"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <scope line="197">
                    <declaration name="parsedUrl" type="IiopUrl" line="198"/>
                    <declaration name="addrs" type="Vector" line="199"/>
                    <declaration name="addr" type="IiopUrl.Address" line="200"/>
                    <declaration name="savedException" type="NamingException" line="201"/>
                    <scope line="202">
                        <scope line="204">
                            <scope line="205">
                                <scope line="206">
                                    <declaration name="tmpUrl" type="String" line="207"/>
                                    <scope line="208"/>
                                    <declaration name="rootCtx" type="org.omg.CORBA.Object" line="211"/>
                                </scope>
                                <scope line="215"/>
                            </scope>
                            <scope line="218"/>
                            <declaration name="orb" type="ORB" line="221"/>
                        </scope>
                        <scope line="226"/>
                    </scope>
                    <scope line="230"/>
                    <scope line="233"/>
                </scope>
                <scope line="237"/>
            </method>
            <javadoc line="241">
                Initializes using &quot;corbaname&quot; URL (INS 99-12-03)                
            </javadoc>
            <method name="initUsingCorbanameUrl" type="String" line="244">
                <params>
                    <param name="orb" type="ORB"/>
                    <param name="url" type="String"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <scope line="245">
                    <declaration name="parsedUrl" type="CorbanameUrl" line="246"/>
                    <declaration name="corbaloc" type="String" line="247"/>
                    <declaration name="cosName" type="String" line="248"/>
                    <scope line="249"/>
                </scope>
                <scope line="256"/>
            </method>
            <method name="setOrbAndRootContext" type="void" line="260">
                <params>
                    <param name="orb" type="ORB"/>
                    <param name="ncIor" type="String"/>
                </params>
                <scope line="262">
                    <declaration name="ncRef" type="org.omg.CORBA.Object" line="263"/>
                    <scope line="264">
                        <scope line="265"/>
                    </scope>
                    <scope line="270"/>
                    <scope line="273"/>
                    <scope line="277">
                        <scope line="278"/>
                        <scope line="281"/>
                    </scope>
                </scope>
                <scope line="286">
                    <declaration name="ne" type="NamingException" line="287"/>
                </scope>
                <scope line="291">
                    <declaration name="ne" type="NamingException" line="292"/>
                </scope>
                <scope line="296">
                    <declaration name="ne" type="NamingException" line="297"/>
                </scope>
                <scope line="301">
                    <declaration name="ne" type="NamingException" line="302"/>
                </scope>
            </method>
            <method name="setOrbAndRootContext" type="void" line="307">
                <params>
                    <param name="orb" type="ORB"/>
                    <param name="ncRef" type="org.omg.CORBA.Object"/>
                </params>
                <scope line="309">
                    <scope line="311"/>
                </scope>
                <scope line="315">
                    <declaration name="ne" type="NamingException" line="316"/>
                </scope>
            </method>
            <method name="getStringifiedIor" type="String" line="321">
                <params>
                    <param name="url" type="String"/>
                </params>
                <scope line="322"/>
                <scope line="325">
                    <declaration name="in" type="InputStream" line="326"/>
                    <scope line="327">
                        <declaration name="u" type="URL" line="328"/>
                        <scope line="330">
                            <declaration name="bufin" type="BufferedReader" line="331"/>
                            <declaration name="str" type="String" line="332"/>
                            <scope line="333">
                                <scope line="334"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="340">
                        <declaration name="ne" type="NamingException" line="341"/>
                    </scope>
                    <scope line="345">
                        <scope line="346">
                            <scope line="347"/>
                        </scope>
                        <scope line="351">
                            <declaration name="ne" type="NamingException" line="352"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="360">
                Does the job of calling the COS Naming API,
                  resolve, and performs the exception mapping. If the resolved
                  object is a COS Naming Context (sub-context), then this function
                  returns a new JNDI naming context object.                
                <param>
                    path the NameComponent[] object.                    
                </param>
                <exception>
                    NotFound No objects under the name.                    
                </exception>
                <exception>
                    CannotProceed Unable to obtain a continuation context                    
                </exception>
                <exception>
                    InvalidName Name not understood.                    
                </exception>
                <return>
                    Resolved object returned by the COS Name Server.                    
                </return>
            </javadoc>
            <method name="callResolve" type="java.lang.Object" line="371">
                <params>
                    <param name="path" type="NameComponent[]"/>
                </params>
                <scope line="372">
                    <declaration name="obj" type="org.omg.CORBA.Object" line="373"/>
                    <scope line="374">
                        <declaration name="nc" type="NamingContext" line="375"/>
                        <scope line="376"/>
                        <scope line="379"/>
                    </scope>
                    <scope line="383"/>
                </scope>
                <scope line="387"/>
            </method>
            <javadoc line="391">
                Converts the &quot;String&quot; name into a CompositeName
                  returns the object resolved by the COS Naming api,
                  resolve. Returns the current context if the name is empty.
                  Returns either an org.omg.CORBA.Object or javax.naming.Context object.                
                <param>
                    name string used to resolve the object.                    
                </param>
                <exception>
                    NamingException See callResolve.                    
                </exception>
                <return>
                    the resolved object                    
                </return>
            </javadoc>
            <method name="lookup" type="java.lang.Object" line="400">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="401"/>
            </method>
            <javadoc line="406">
                Converts the &quot;Name&quot; name into a NameComponent[] object and
                  returns the object resolved by the COS Naming api,
                  resolve. Returns the current context if the name is empty.
                  Returns either an org.omg.CORBA.Object or javax.naming.Context object.                
                <param>
                    name JNDI Name used to resolve the object.                    
                </param>
                <exception>
                    NamingException See callResolve.                    
                </exception>
                <return>
                    the resolved object                    
                </return>
            </javadoc>
            <method name="lookup" type="java.lang.Object" line="415">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <declaration name="path" type="NameComponent[]" line="418"/>
                <scope line="419">
                    <declaration name="answer" type="java.lang.Object" line="420"/>
                    <scope line="421"/>
                    <scope line="424"/>
                    <scope line="427">
                        <declaration name="ne" type="NamingException" line="428"/>
                    </scope>
                </scope>
                <scope line="433">
                    <declaration name="cctx" type="javax.naming.Context" line="434"/>
                </scope>
            </method>
            <javadoc line="438">
                Performs bind or rebind in the context depending on whether the
                  flag rebind is set. The only objects allowed to be bound are of
                  types org.omg.CORBA.Object, org.omg.CosNaming.NamingContext.
                  You can use a state factory to turn other objects (such as
                  Remote) into these acceptable forms.
                  Uses the COS Naming apis bind/rebind or
                  bind_context/rebind_context.                
                <param>
                    pth NameComponent[] object                    
                </param>
                <param>
                    obj Object to be bound.                    
                </param>
                <param>
                    rebind perform rebind ? if true performs a rebind.                    
                </param>
                <exception>
                    NotFound No objects under the name.                    
                </exception>
                <exception>
                    CannotProceed Unable to obtain a continuation context                    
                </exception>
                <exception>
                    AlreadyBound An object is already bound to this name.                    
                </exception>
            </javadoc>
            <method name="callBindOrRebind" type="void" line="453">
                <params>
                    <param name="pth" type="NameComponent[]"/>
                    <param name="name" type="Name"/>
                    <param name="obj" type="java.lang.Object"/>
                    <param name="rebind" type="boolean"/>
                </params>
                <scope line="455">
                    <scope line="457"/>
                    <scope line="460">
                        <declaration name="nobj" type="NamingContext" line="461"/>
                    </scope>
                    <scope line="465"/>
                </scope>
                <scope line="471">
                    <declaration name="ne" type="NamingException" line="472"/>
                </scope>
                <scope line="476"/>
            </method>
            <javadoc line="480">
                Converts the &quot;Name&quot; name into a NameComponent[] object and
                  performs the bind operation. Uses callBindOrRebind. Throws an
                  invalid name exception if the name is empty. We need a name to
                  bind the object even when we work within the current context.                
                <param>
                    name JNDI Name object                    
                </param>
                <param>
                    obj Object to be bound.                    
                </param>
                <exception>
                    NamingException See callBindOrRebind                    
                </exception>
            </javadoc>
            <method name="bind" type="void" line="489">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="java.lang.Object"/>
                </params>
                <scope line="490"/>
                <scope line="493"/>
                <declaration name="path" type="NameComponent[]" line="496"/>
                <scope line="497"/>
                <scope line="500">
                    <declaration name="cctx" type="javax.naming.Context" line="501"/>
                </scope>
            </method>
            <method name="getContinuationContext" type="javax.naming.Context" line="505">
                <params>
                    <param name="cpe" type="CannotProceedException"/>
                </params>
                <scope line="506"/>
                <scope line="509">
                    <declaration name="resObj" type="java.lang.Object" line="510"/>
                    <scope line="511">
                        <declaration name="ref" type="Reference" line="512"/>
                        <declaration name="addr" type="RefAddr" line="513"/>
                        <scope line="514">
                            <declaration name="ne" type="NamingException" line="515"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="524">
                Converts the &quot;String&quot; name into a CompositeName object and
                  performs the bind operation. Uses callBindOrRebind. Throws an
                  invalid name exception if the name is empty.                
                <param>
                    name string                    
                </param>
                <param>
                    obj Object to be bound.                    
                </param>
                <exception>
                    NamingException See callBindOrRebind                    
                </exception>
            </javadoc>
            <method name="bind" type="void" line="532">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="java.lang.Object"/>
                </params>
            </method>
            <javadoc line="535">
                Converts the &quot;Name&quot; name into a NameComponent[] object and
                  performs the rebind operation. Uses callBindOrRebind. Throws an
                  invalid name exception if the name is empty. We must have a name
                  to rebind the object to even if we are working within the current
                  context.                
                <param>
                    name string                    
                </param>
                <param>
                    obj Object to be bound.                    
                </param>
                <exception>
                    NamingException See callBindOrRebind                    
                </exception>
            </javadoc>
            <method name="rebind" type="void" line="545">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="java.lang.Object"/>
                </params>
                <scope line="546"/>
                <declaration name="path" type="NameComponent[]" line="549"/>
                <scope line="550"/>
                <scope line="553">
                    <declaration name="cctx" type="javax.naming.Context" line="554"/>
                </scope>
            </method>
            <javadoc line="558">
                Converts the &quot;String&quot; name into a CompositeName object and
                  performs the rebind operation. Uses callBindOrRebind. Throws an
                  invalid name exception if the name is an empty string.                
                <param>
                    name string                    
                </param>
                <param>
                    obj Object to be bound.                    
                </param>
                <exception>
                    NamingException See callBindOrRebind                    
                </exception>
            </javadoc>
            <method name="rebind" type="void" line="566">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="java.lang.Object"/>
                </params>
            </method>
            <javadoc line="569">
                Calls the unbind api of COS Naming and uses the exception mapper
                  class  to map the exceptions                
                <param>
                    path NameComponent[] object                    
                </param>
                <exception>
                    NotFound No objects under the name. If leaf
                      is not found, that&apos;s OK according to the JNDI spec                    
                </exception>
                <exception>
                    CannotProceed Unable to obtain a continuation context                    
                </exception>
                <exception>
                    InvalidName Name not understood.                    
                </exception>
            </javadoc>
            <method name="callUnbind" type="void" line="578">
                <params>
                    <param name="path" type="NameComponent[]"/>
                </params>
                <scope line="580"/>
                <scope line="583">
                    <scope line="584"/>
                    <scope line="587"/>
                </scope>
                <scope line="591"/>
            </method>
            <method name="leafNotFound" type="boolean" line="595">
                <params>
                    <param name="e" type="NotFound"/>
                    <param name="leaf" type="NameComponent"/>
                </params>
                <declaration name="rest" type="NameComponent" line="596"/>
            </method>
            <javadoc line="599">
                Converts the &quot;String&quot; name into a CompositeName object and
                  performs the unbind operation. Uses callUnbind. If the name is
                  empty, throws an invalid name exception. Do we unbind the
                  current context (JNDI spec says work with the current context if
                  the name is empty) ?                
                <param>
                    name string                    
                </param>
                <exception>
                    NamingException See callUnbind                    
                </exception>
            </javadoc>
            <method name="unbind" type="void" line="608">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="611">
                Converts the &quot;Name&quot; name into a NameComponent[] object and
                  performs the unbind operation. Uses callUnbind. Throws an
                  invalid name exception if the name is empty.                
                <param>
                    name string                    
                </param>
                <exception>
                    NamingException See callUnbind                    
                </exception>
            </javadoc>
            <method name="unbind" type="void" line="618">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <declaration name="path" type="NameComponent[]" line="620"/>
                <scope line="621"/>
                <scope line="624">
                    <declaration name="cctx" type="javax.naming.Context" line="625"/>
                </scope>
            </method>
            <javadoc line="629">
                Renames an object. Since COS Naming does not support a rename
                  api, this method unbinds the object with the &quot;oldName&quot; and
                  creates a new binding.                
                <param>
                    oldName string, existing name for the binding.                    
                </param>
                <param>
                    newName string, name used to replace.                    
                </param>
                <exception>
                    NamingException See bind                    
                </exception>
            </javadoc>
            <method name="rename" type="void" line="637">
                <params>
                    <param name="oldName" type="String"/>
                    <param name="newName" type="String"/>
                </params>
            </method>
            <javadoc line="640">
                Renames an object. Since COS Naming does not support a rename
                  api, this method unbinds the object with the &quot;oldName&quot; and
                  creates a new binding.                
                <param>
                    oldName JNDI Name, existing name for the binding.                    
                </param>
                <param>
                    newName JNDI Name, name used to replace.                    
                </param>
                <exception>
                    NamingException See bind                    
                </exception>
            </javadoc>
            <method name="rename" type="void" line="648">
                <params>
                    <param name="oldName" type="Name"/>
                    <param name="newName" type="Name"/>
                </params>
                <declaration name="obj" type="java.lang.Object" line="651"/>
            </method>
            <javadoc line="655">
                Returns a NameClassEnumeration object which has a list of name
                  class pairs. Lists the current context if the name is empty.                
                <param>
                    name string                    
                </param>
                <exception>
                    NamingException All exceptions thrown by lookup
                      with a non-null argument                    
                </exception>
                <return>
                    a list of name-class objects as a NameClassEnumeration.                    
                </return>
            </javadoc>
            <method name="list" type="NamingEnumeration" line="663">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="666">
                Returns a NameClassEnumeration object which has a list of name
                  class pairs. Lists the current context if the name is empty.                
                <param>
                    name JNDI Name                    
                </param>
                <exception>
                    NamingException All exceptions thrown by lookup                    
                </exception>
                <return>
                    a list of name-class objects as a NameClassEnumeration.                    
                </return>
            </javadoc>
            <method name="list" type="NamingEnumeration" line="673">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <javadoc line="676">
                Returns a BindingEnumeration object which has a list of name
                  object pairs. Lists the current context if the name is empty.                
                <param>
                    name string                    
                </param>
                <exception>
                    NamingException all exceptions returned by lookup                    
                </exception>
                <return>
                    a list of bindings as a BindingEnumeration.                    
                </return>
            </javadoc>
            <method name="listBindings" type="NamingEnumeration" line="683">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="686">
                Returns a BindingEnumeration object which has a list of name
                  class pairs. Lists the current context if the name is empty.                
                <param>
                    name JNDI Name                    
                </param>
                <exception>
                    NamingException all exceptions returned by lookup.                    
                </exception>
                <return>
                    a list of bindings as a BindingEnumeration.                    
                </return>
            </javadoc>
            <method name="listBindings" type="NamingEnumeration" line="693">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <scope line="695">
                    <scope line="696">
                        <declaration name="obj" type="java.lang.Object" line="697"/>
                        <scope line="698"/>
                        <scope line="701"/>
                    </scope>
                    <scope line="705"/>
                    <scope line="708">
                        <declaration name="ne" type="NamingException" line="709"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="716">
                Calls the destroy on the COS Naming Server                
                <param>
                    nc The NamingContext object to use.                    
                </param>
                <exception>
                    NotEmpty when the context is not empty and cannot be destroyed.                    
                </exception>
            </javadoc>
            <method name="callDestroy" type="void" line="721">
                <params>
                    <param name="nc" type="NamingContext"/>
                </params>
                <scope line="723"/>
                <scope line="726"/>
            </method>
            <javadoc line="730">
                Uses the callDestroy function to destroy the context. If name is
                  empty destroys the current context.                
                <param>
                    name string                    
                </param>
                <exception>
                    OperationNotSupportedException when list is invoked
                      with a non-null argument                    
                </exception>
            </javadoc>
            <method name="destroySubcontext" type="void" line="737">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="740">
                Uses the callDestroy function to destroy the context. Destroys
                  the current context if name is empty.                
                <param>
                    name JNDI Name                    
                </param>
                <exception>
                    OperationNotSupportedException when list is invoked
                      with a non-null argument                    
                </exception>
            </javadoc>
            <method name="destroySubcontext" type="void" line="747">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <declaration name="the_nc" type="NamingContext" line="749"/>
                <declaration name="path" type="NameComponent[]" line="750"/>
                <scope line="751">
                    <scope line="752">
                        <declaration name="ctx" type="javax.naming.Context" line="753"/>
                        <declaration name="cnc" type="CNCtx" line="754"/>
                    </scope>
                    <scope line="758"/>
                    <scope line="761">
                        <declaration name="cctx" type="javax.naming.Context" line="762"/>
                    </scope>
                    <scope line="766">
                        <scope line="767"/>
                    </scope>
                    <scope line="772"/>
                </scope>
            </method>
            <javadoc line="779">
                Calls the bind_new_context COS naming api to create a new subcontext.                
                <param>
                    path NameComponent[] object                    
                </param>
                <exception>
                    NotFound No objects under the name.                    
                </exception>
                <exception>
                    CannotProceed Unable to obtain a continuation context                    
                </exception>
                <exception>
                    InvalidName Name not understood.                    
                </exception>
                <exception>
                    AlreadyBound An object is already bound to this name.                    
                </exception>
                <return>
                    the new context object.                    
                </return>
            </javadoc>
            <method name="callBindNewContext" type="javax.naming.Context" line="788">
                <params>
                    <param name="path" type="NameComponent[]"/>
                </params>
                <scope line="790">
                    <declaration name="nctx" type="NamingContext" line="791"/>
                </scope>
                <scope line="794"/>
            </method>
            <javadoc line="798">
                Uses the callBindNewContext convenience function to create a new
                  context. Throws an invalid name exception if the name is empty.                
                <param>
                    name string                    
                </param>
                <exception>
                    NamingException See callBindNewContext                    
                </exception>
                <return>
                    the new context object.                    
                </return>
            </javadoc>
            <method name="createSubcontext" type="javax.naming.Context" line="805">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="808">
                Uses the callBindNewContext convenience function to create a new
                  context. Throws an invalid name exception if the name is empty.                
                <param>
                    name string                    
                </param>
                <exception>
                    NamingException See callBindNewContext                    
                </exception>
                <return>
                    the new context object.                    
                </return>
            </javadoc>
            <method name="createSubcontext" type="javax.naming.Context" line="815">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <declaration name="path" type="NameComponent[]" line="817"/>
                <scope line="818"/>
                <scope line="821">
                    <declaration name="cctx" type="javax.naming.Context" line="822"/>
                </scope>
            </method>
            <javadoc line="826">
                Is mapped to resolve in the COS Naming api.                
                <param>
                    name string                    
                </param>
                <exception>
                    NamingException See lookup.                    
                </exception>
                <return>
                    the resolved object.                    
                </return>
            </javadoc>
            <method name="lookupLink" type="java.lang.Object" line="832">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="835">
                Is mapped to resolve in the COS Naming api.                
                <param>
                    name string                    
                </param>
                <exception>
                    NamingException See lookup.                    
                </exception>
                <return>
                    the resolved object.                    
                </return>
            </javadoc>
            <method name="lookupLink" type="java.lang.Object" line="841">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <javadoc line="844">
                Allow access to the name parser object.                
                <param>
                    String JNDI name, is ignored since there is only one Name
                      Parser object.                    
                </param>
                <exception>
                    NamingException --                    
                </exception>
                <return>
                    NameParser object                    
                </return>
            </javadoc>
            <method name="getNameParser" type="NameParser" line="851">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="854">
                Allow access to the name parser object.                
                <param>
                    Name JNDI name, is ignored since there is only one Name
                      Parser object.                    
                </param>
                <exception>
                    NamingException --                    
                </exception>
                <return>
                    NameParser object                    
                </return>
            </javadoc>
            <method name="getNameParser" type="NameParser" line="861">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <javadoc line="864">
                Returns the current environment.                
                <return>
                    Environment.                    
                </return>
            </javadoc>
            <method name="getEnvironment" type="Hashtable" line="868">
                <scope line="869"/>
                <scope line="872"/>
            </method>
            <method name="composeName" type="String" line="876">
                <params>
                    <param name="name" type="String"/>
                    <param name="prefix" type="String"/>
                </params>
            </method>
            <method name="composeName" type="Name" line="879">
                <params>
                    <param name="name" type="Name"/>
                    <param name="prefix" type="Name"/>
                </params>
                <declaration name="result" type="Name" line="880"/>
            </method>
            <javadoc line="883">
                Adds to the environment for the current context.
                  Record change but do not reinitialize ORB.                
                <param>
                    propName The property name.                    
                </param>
                <param>
                    propVal  The ORB.                    
                </param>
                <return>
                    the previous value of this property if any.                    
                </return>
            </javadoc>
            <method name="addToEnvironment" type="java.lang.Object" line="890">
                <params>
                    <param name="propName" type="String"/>
                    <param name="propValue" type="java.lang.Object"/>
                </params>
                <scope line="891"/>
                <scope line="894"/>
            </method>
            <method name="removeFromEnvironment" type="java.lang.Object" line="899">
                <params>
                    <param name="propName" type="String"/>
                </params>
                <scope line="900"/>
            </method>
            <method name="incEnumCount" type="void" line="906">
                <scope line="907"/>
                <scope line="911"/>
            </method>
            <method name="decEnumCount" type="void" line="915">
                <scope line="916"/>
                <scope line="920"/>
                <scope line="923"/>
            </method>
            <method name="close" type="void" line="927">
                <scope line="928"/>
                <scope line="931"/>
            </method>
            <method name="finalize" type="void" line="937">
                <scope line="938"/>
                <scope line="941"/>
            </method>
        </class>
    </source>