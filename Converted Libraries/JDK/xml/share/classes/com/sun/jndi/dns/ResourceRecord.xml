<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.dns">
        <import package="javax.naming.InvalidNameException"/>
        <class name="ResourceRecord" line="31">
            <comment line="43">
                Resource record type codes                
            </comment>
            <comment line="57">
                zone transfer                
            </comment>
            <comment line="58">
                query type &quot;*&quot;                
            </comment>
            <comment line="60">
                Mapping from resource record type codes to type name strings.                
            </comment>
            <comment line="74">
                Resource record class codes                
            </comment>
            <comment line="79">
                query class &quot;*&quot;                
            </comment>
            <comment line="81">
                Mapping from resource record type codes to class name strings.                
            </comment>
            <comment line="89">
                DNS message                
            </comment>
            <comment line="90">
                msg size (in octets)                
            </comment>
            <comment line="91">
                true if this RR is part of question section
                 and therefore has no ttl or rdata                
            </comment>
            <comment line="93">
                offset of RR w/in msg                
            </comment>
            <comment line="94">
                number of octets in encoded RR                
            </comment>
            <comment line="95">
                name field of RR, including root label                
            </comment>
            <comment line="96">
                type field of RR                
            </comment>
            <comment line="97">
                name of of rrtype                
            </comment>
            <comment line="98">
                class field of RR                
            </comment>
            <comment line="99">
                name of rrclass                
            </comment>
            <comment line="100">
                ttl field of RR                
            </comment>
            <comment line="101">
                number of octets of rdata                
            </comment>
            <comment line="102">
                rdata -- most are String, unknown are byte[]                
            </comment>
            <comment line="105">
                Constructs a new ResourceRecord.  The encoded data of the DNS
                 message is contained in msg; data for this RR begins at msg[offset].
                 If qSection is true this RR is part of a question section.  It&apos;s
                 not a true resource record in that case, but is treated as if it
                 were a shortened one (with no ttl or rdata).  If decodeRdata is
                 false, the rdata is not decoded (and getRdata() will return null)
                 unless this is an SOA record.
                
                 @throws InvalidNameException if a decoded domain name isn&apos;t valid.
                 @throws ArrayIndexOutOfBoundsException given certain other corrupt data.                
            </comment>
            <comment line="137">
                Returns the name field of this RR, including the root label.                
            </comment>
            <comment line="144">
                Returns the number of octets in the encoded RR.                
            </comment>
            <comment line="214">
                Compares two SOA record serial numbers using 32-bit serial number
                 arithmetic as defined in RFC 1982.  Serial numbers are unsigned
                 32-bit quantities.  Returns a negative, zero, or positive value
                 as the first serial number is less than, equal to, or greater
                 than the second.  If the serial numbers are not comparable the
                 result is undefined.  Note that the relation is not transitive.                
            </comment>
            <comment line="235">
                Decodes the binary format of the RR.
                 May throw ArrayIndexOutOfBoundsException given corrupt data.                
            </comment>
            <comment line="285">
                Returns the 1-byte unsigned value at msg[pos].                
            </comment>
            <comment line="292">
                Returns the 2-byte unsigned value at msg[pos].  The high
                 order byte comes first.                
            </comment>
            <comment line="301">
                Returns the 4-byte signed value at msg[pos].  The high
                 order byte comes first.                
            </comment>
            <comment line="309">
                Returns the 4-byte unsigned value at msg[pos].  The high
                 order byte comes first.                
            </comment>
            <comment line="317">
                Returns the name encoded at msg[pos], including the root label.                
            </comment>
            <comment line="326">
                Prepends to &quot;n&quot; the domain name encoded at msg[pos], including the root
                 label.  Returns the index into &quot;msg&quot; following the name.                
            </comment>
            <comment line="348">
                Returns the rdata encoded at msg[pos].  The format is dependent
                 on the rrtype and rrclass values, which have already been set.
                 The length of the encoded data is rdlen, which has already been
                 set.
                 The rdata of records with unknown typeclass combinations is
                 returned in a newly-allocated byte array.                
            </comment>
            <comment line="387">
                Returns the rdata of an MX record that is encoded at msg[pos].                
            </comment>
            <comment line="397">
                Returns the rdata of an SOA record that is encoded at msg[pos].                
            </comment>
            <comment line="421">
                Returns the rdata of an SRV record that is encoded at msg[pos].
                 See RFC 2782.                
            </comment>
            <comment line="436">
                Returns the rdata of an NAPTR record that is encoded at msg[pos].
                 See RFC 2915.                
            </comment>
            <comment line="457">
                Returns the rdata of a TXT record that is encoded at msg[pos].
                 The rdata consists of one or more &lt;character-string&gt;s.                
            </comment>
            <comment line="473">
                Returns the rdata of an HINFO record that is encoded at msg[pos].
                 The rdata consists of two &lt;character-string&gt;s.                
            </comment>
            <comment line="485">
                Decodes the &lt;character-string&gt; at msg[pos] and adds it to buf.
                 If the string contains one of the meta-characters &apos; &apos;, &apos;\\&apos;, or
                 &apos;&quot;&apos;, then the result is quoted and any embedded &apos;\\&apos; or &apos;&quot;&apos;
                 chars are escaped with &apos;\\&apos;.  Empty strings are also quoted.
                 Returns the size of the encoded string, including the initial
                 length octet.                
            </comment>
            <comment line="513">
                Returns the rdata of an A record, in dotted-decimal format,
                 that is encoded at msg[pos].                
            </comment>
            <comment line="524">
                Returns the rdata of an AAAA record, in colon-separated format,
                 that is encoded at msg[pos].  For example:  4321:0:1:2:3:4:567:89ab.
                 See RFCs 1886 and 2373.                
            </comment>
            <javadoc line="31">
                The ResourceRecord class represents a DNS resource record.
                  The string format is based on the master file representation in
                  RFC 1035.                
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="TYPE_A" type="int" line="45"/>
            <declaration name="TYPE_NS" type="int" line="46"/>
            <declaration name="TYPE_CNAME" type="int" line="47"/>
            <declaration name="TYPE_SOA" type="int" line="48"/>
            <declaration name="TYPE_PTR" type="int" line="49"/>
            <declaration name="TYPE_HINFO" type="int" line="50"/>
            <declaration name="TYPE_MX" type="int" line="51"/>
            <declaration name="TYPE_TXT" type="int" line="52"/>
            <declaration name="TYPE_AAAA" type="int" line="53"/>
            <declaration name="TYPE_SRV" type="int" line="54"/>
            <declaration name="TYPE_NAPTR" type="int" line="55"/>
            <declaration name="QTYPE_AXFR" type="int" line="56"/>
            <declaration name="QTYPE_STAR" type="int" line="57"/>
            <declaration name="rrTypeNames" type="String" line="62"/>
            <declaration name="CLASS_INTERNET" type="int" line="76"/>
            <declaration name="CLASS_HESIOD" type="int" line="77"/>
            <declaration name="QCLASS_STAR" type="int" line="78"/>
            <declaration name="rrClassNames" type="String" line="83"/>
            <declaration name="msg" type="byte[]" line="88"/>
            <declaration name="msgLen" type="int" line="89"/>
            <declaration name="qSection" type="boolean" line="90"/>
            <declaration name="offset" type="int" line="92"/>
            <declaration name="rrlen" type="int" line="93"/>
            <declaration name="name" type="DnsName" line="94"/>
            <declaration name="rrtype" type="int" line="95"/>
            <declaration name="rrtypeName" type="String" line="96"/>
            <declaration name="rrclass" type="int" line="97"/>
            <declaration name="rrclassName" type="String" line="98"/>
            <declaration name="ttl" type="int" line="99"/>
            <declaration name="rdlen" type="int" line="100"/>
            <declaration name="rdata" type="Object" line="101"/>
            <method name="ResourceRecord" type="constructor" line="118">
                <params>
                    <param name="msg" type="byte[]"/>
                    <param name="msgLen" type="int"/>
                    <param name="offset" type="int"/>
                    <param name="qSection" type="boolean"/>
                    <param name="decodeRdata" type="boolean"/>
                </params>
            </method>
            <method name="toString" type="String" line="127">
                <declaration name="text" type="String" line="128"/>
                <scope line="129"/>
            </method>
            <method name="getName" type="DnsName" line="139"/>
            <method name="size" type="int" line="146"/>
            <method name="getType" type="int" line="150"/>
            <method name="getRrclass" type="int" line="154"/>
            <method name="getRdata" type="Object" line="158"/>
            <method name="getTypeName" type="String" line="163">
                <params>
                    <param name="rrtype" type="int"/>
                </params>
            </method>
            <method name="getType" type="int" line="167">
                <params>
                    <param name="typeName" type="String"/>
                </params>
            </method>
            <method name="getRrclassName" type="String" line="171">
                <params>
                    <param name="rrclass" type="int"/>
                </params>
            </method>
            <method name="getRrclass" type="int" line="175">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <method name="valueToName" type="String" line="179">
                <params>
                    <param name="val" type="int"/>
                    <param name="names" type="String[]"/>
                </params>
                <comment line="184">
                    QTYPE_STAR == QCLASS_STAR                    
                </comment>
                <declaration name="name" type="String" line="180"/>
                <scope line="181"/>
                <scope line="183"/>
                <scope line="186"/>
            </method>
            <method name="nameToValue" type="int" line="192">
                <params>
                    <param name="name" type="String"/>
                    <param name="names" type="String[]"/>
                </params>
                <comment line="195">
                    invalid name                    
                </comment>
                <comment line="197">
                    QTYPE_STAR == QCLASS_STAR                    
                </comment>
                <comment line="211">
                    unknown name                    
                </comment>
                <scope line="193"/>
                <scope line="195"/>
                <scope line="198">
                    <scope line="199"/>
                    <scope line="201"/>
                </scope>
                <scope line="204">
                    <scope line="206"/>
                </scope>
            </method>
            <method name="compareSerialNumbers" type="int" line="221">
                <params>
                    <param name="s1" type="long"/>
                    <param name="s2" type="long"/>
                </params>
                <declaration name="diff" type="long" line="222"/>
                <scope line="223"/>
                <scope line="226"/>
                <scope line="228"/>
            </method>
            <method name="decode" type="void" line="238">
                <params>
                    <param name="decodeRdata" type="boolean"/>
                </params>
                <comment line="240">
                    index of next unread octet                    
                </comment>
                <comment line="242">
                    NAME                    
                </comment>
                <comment line="245">
                    TYPE                    
                </comment>
                <comment line="254">
                    CLASS                    
                </comment>
                <comment line="264">
                    TTL                    
                </comment>
                <comment line="267">
                    RDLENGTH                    
                </comment>
                <comment line="270">
                    RDATA                    
                </comment>
                <comment line="282">
                    free up for GC                    
                </comment>
                <declaration name="pos" type="int" line="239"/>
                <scope line="248"/>
                <scope line="257"/>
                <scope line="262">
                    <scope line="273"/>
                </scope>
            </method>
            <method name="getUByte" type="int" line="287">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="getUShort" type="int" line="295">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="getInt" type="int" line="304">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="getUInt" type="long" line="312">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="decodeName" type="DnsName" line="319">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="n" type="DnsName" line="320"/>
            </method>
            <method name="decodeName" type="int" line="329">
                <params>
                    <param name="pos" type="int"/>
                    <param name="n" type="DnsName"/>
                </params>
                <comment line="331">
                    end of name                    
                </comment>
                <comment line="334">
                    name compression                    
                </comment>
                <comment line="337">
                    append a label                    
                </comment>
                <comment line="342">
                    assert false : &quot;ISO-Latin-1 charset unavailable&quot;;                    
                </comment>
                <scope line="330"/>
                <scope line="333"/>
                <scope line="336">
                    <declaration name="len" type="int" line="337"/>
                    <scope line="338"/>
                    <scope line="340"/>
                </scope>
            </method>
            <method name="decodeRdata" type="Object" line="355">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <comment line="381">
                    Unknown RR type/class                    
                </comment>
                <scope line="356"/>
                <declaration name="rd" type="byte[]" line="381"/>
            </method>
            <method name="decodeMx" type="String" line="389">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="preference" type="int" line="390"/>
                <declaration name="name" type="DnsName" line="392"/>
            </method>
            <method name="decodeSoa" type="String" line="399">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <comment line="414">
                    now used as negative TTL                    
                </comment>
                <declaration name="mname" type="DnsName" line="400"/>
                <declaration name="rname" type="DnsName" line="402"/>
                <declaration name="serial" type="long" line="405"/>
                <declaration name="refresh" type="long" line="407"/>
                <declaration name="retry" type="long" line="409"/>
                <declaration name="expire" type="long" line="411"/>
                <declaration name="minimum" type="long" line="413"/>
            </method>
            <method name="decodeSrv" type="String" line="424">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="priority" type="int" line="425"/>
                <declaration name="weight" type="int" line="427"/>
                <declaration name="port" type="int" line="429"/>
                <declaration name="target" type="DnsName" line="431"/>
            </method>
            <method name="decodeNaptr" type="String" line="439">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="order" type="int" line="440"/>
                <declaration name="preference" type="int" line="442"/>
                <declaration name="flags" type="StringBuffer" line="444"/>
                <declaration name="services" type="StringBuffer" line="446"/>
                <declaration name="regexp" type="StringBuffer" line="448"/>
                <declaration name="replacement" type="DnsName" line="450"/>
            </method>
            <method name="decodeTxt" type="String" line="460">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="461"/>
                <declaration name="end" type="int" line="462"/>
                <scope line="463">
                    <scope line="465"/>
                </scope>
            </method>
            <method name="decodeHinfo" type="String" line="476">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="477"/>
            </method>
            <method name="decodeCharString" type="int" line="492">
                <params>
                    <param name="pos" type="int"/>
                    <param name="buf" type="StringBuffer"/>
                </params>
                <comment line="494">
                    starting index of this string                    
                </comment>
                <comment line="495">
                    encoded string length                    
                </comment>
                <comment line="496">
                    quote string if empty                    
                </comment>
                <comment line="510">
                    size includes initial octet                    
                </comment>
                <declaration name="start" type="int" line="493"/>
                <declaration name="len" type="int" line="494"/>
                <declaration name="quoted" type="boolean" line="495"/>
                <scope line="496">
                    <declaration name="c" type="int" line="497"/>
                    <scope line="499"/>
                </scope>
                <scope line="505"/>
            </method>
            <method name="decodeA" type="String" line="516">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="decodeAAAA" type="String" line="528">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <comment line="530">
                    the unsigned 16-bit words of the address                    
                </comment>
                <comment line="536">
                    Find longest sequence of two or more zeros, to compress them.                    
                </comment>
                <comment line="543">
                    new sequence                    
                </comment>
                <comment line="546">
                    extend sequence                    
                </comment>
                <comment line="553">
                    not in sequence                    
                </comment>
                <comment line="558">
                    If addr begins with at least 6 zeros and is not :: or ::1,
                     or with 5 zeros followed by 0xffff, use the text format for
                     IPv4-compatible or IPv4-mapped addresses.                    
                </comment>
                <comment line="570">
                    If bestBase != -1, compress zeros in [bestBase, bestBase+bestLen)                    
                </comment>
                <comment line="583">
                    first compressed zero                    
                </comment>
                <declaration name="addr6" type="int[]" line="529"/>
                <scope line="530"/>
                <declaration name="curBase" type="int" line="536"/>
                <declaration name="curLen" type="int" line="537"/>
                <declaration name="bestBase" type="int" line="538"/>
                <declaration name="bestLen" type="int" line="539"/>
                <scope line="540">
                    <scope line="541">
                        <scope line="542"/>
                        <scope line="545">
                            <scope line="547"/>
                        </scope>
                    </scope>
                    <scope line="552"/>
                </scope>
                <scope line="560">
                    <scope line="562"/>
                    <scope line="564"/>
                </scope>
                <declaration name="compress" type="boolean" line="570"/>
                <declaration name="buf" type="StringBuffer" line="572"/>
                <scope line="573"/>
                <scope line="576">
                    <scope line="577">
                        <scope line="579"/>
                    </scope>
                    <scope line="582"/>
                </scope>
            </method>
        </class>
    </source>