<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.toolkit.dir">
        <import package="javax.naming"/>
        <import package="javax.naming.directory"/>
        <import package="javax.naming.spi"/>
        <import package="java.util"/>
        <class name="HierMemDirCtx" line="32">
            <comment line="700">
                This function is called whenever a new object needs to be created.
                 this is used so that if anyone subclasses us, they can override this
                 and return object of their own kind.                
            </comment>
            <comment line="707">
                If the supplied name is a composite name, return the name that
                 is its first component.                
            </comment>
            <comment line="751">
                Set context in readonly mode; throw e when update operation attempted.                
            </comment>
            <comment line="756">
                Set context to support case-insensitive names                
            </comment>
            <comment line="765">
                Class for enumerating name/class pairs                
            </comment>
            <comment line="804">
                Class for enumerating bindings                
            </comment>
            <comment line="874">
                Creates an empty name                
            </comment>
            <comment line="891">
                just like String.hashCode, only it pays no attention to length                
            </comment>
            <implements interface="DirContext"/>
            <javadoc line="32">
                A sample service provider that implements a hierarchical directory in memory.
                  Every operation begins by doing a lookup on the name passed to it and then
                  calls a corresponding &quot;do&lt;OperationName&gt;&quot; on the result of the lookup. The
                  &quot;do&lt;OperationName&gt;&quot; does the work without any further resolution (it assumes
                  that it is the target context).                
            </javadoc>
            <declaration name="debug" type="boolean" line="42"/>
            <declaration name="defaultParser" type="NameParser" line="43"/>
            <declaration name="myEnv" type="Hashtable" line="45"/>
            <declaration name="bindings" type="Hashtable" line="46"/>
            <declaration name="attrs" type="Attributes" line="47"/>
            <declaration name="ignoreCase" type="boolean" line="48"/>
            <declaration name="readOnlyEx" type="NamingException" line="49"/>
            <declaration name="myParser" type="NameParser" line="50"/>
            <declaration name="alwaysUseFactory" type="boolean" line="52"/>
            <method name="close" type="void" line="54"/>
            <method name="getNameInNamespace" type="String" line="60"/>
            <method name="HierMemDirCtx" type="constructor" line="65"/>
            <method name="HierMemDirCtx" type="constructor" line="69">
                <params>
                    <param name="ignoreCase" type="boolean"/>
                </params>
            </method>
            <method name="HierMemDirCtx" type="constructor" line="73">
                <params>
                    <param name="environment" type="Hashtable"/>
                    <param name="ignoreCase" type="boolean"/>
                </params>
            </method>
            <method name="HierMemDirCtx" type="constructor" line="78">
                <params>
                    <param name="environment" type="Hashtable"/>
                    <param name="ignoreCase" type="boolean"/>
                    <param name="useFac" type="boolean"/>
                </params>
            </method>
            <method name="init" type="void" line="85"/>
            <method name="lookup" type="Object" line="90">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="lookup" type="Object" line="94">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="doLookup" type="Object" line="99">
                <params>
                    <param name="name" type="Name"/>
                    <param name="useFactory" type="boolean"/>
                </params>
                <comment line="107">
                    name is empty, caller wants this object                    
                </comment>
                <comment line="112">
                    name is atomic, caller wants one of this object&apos;s bindings                    
                </comment>
                <comment line="117">
                    name is compound, delegate to child context                    
                </comment>
                <declaration name="target" type="Object" line="101"/>
                <declaration name="ctx" type="HierMemDirCtx" line="117"/>
                <scope line="118"/>
                <scope line="120"/>
                <scope line="126"/>
                <scope line="130">
                    <scope line="131"/>
                    <scope line="136"/>
                    <scope line="138">
                        <declaration name="e2" type="NamingException" line="139"/>
                    </scope>
                </scope>
                <scope line="144"/>
            </method>
            <method name="bind" type="void" line="149">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="bind" type="void" line="153">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="bind" type="void" line="158">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                    <param name="attrs" type="Attributes"/>
                </params>
            </method>
            <method name="bind" type="void" line="163">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                    <param name="attrs" type="Attributes"/>
                </params>
            </method>
            <method name="doBind" type="void" line="168">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                    <param name="attrs" type="Attributes"/>
                    <param name="useFactory" type="boolean"/>
                </params>
                <scope line="169"/>
                <scope line="173">
                    <declaration name="res" type="DirStateFactory.Result" line="174"/>
                </scope>
                <declaration name="ctx" type="HierMemDirCtx" line="180"/>
                <scope line="183"/>
            </method>
            <method name="doBindAux" type="void" line="188">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="189"/>
                <scope line="193"/>
                <scope line="196"/>
                <scope line="198"/>
            </method>
            <method name="rebind" type="void" line="204">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="rebind" type="void" line="208">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="rebind" type="void" line="213">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                    <param name="attrs" type="Attributes"/>
                </params>
            </method>
            <method name="rebind" type="void" line="218">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                    <param name="attrs" type="Attributes"/>
                </params>
            </method>
            <method name="doRebind" type="void" line="223">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                    <param name="attrs" type="Attributes"/>
                    <param name="useFactory" type="boolean"/>
                </params>
                <comment line="239">
                    attrs == null -&gt; use attrs from obj
                     attrs != null -&gt; use attrs
                    
                     %%% Strictly speaking, when attrs is non-null, we should
                     take the explicit step of removing obj&apos;s attrs.
                     We don&apos;t do that currently.                    
                </comment>
                <scope line="224"/>
                <scope line="228">
                    <declaration name="res" type="DirStateFactory.Result" line="229"/>
                </scope>
                <declaration name="ctx" type="HierMemDirCtx" line="235"/>
                <scope line="246"/>
            </method>
            <method name="doRebindAux" type="void" line="251">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="252"/>
                <scope line="255"/>
                <scope line="258"/>
            </method>
            <method name="unbind" type="void" line="264">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="unbind" type="void" line="268">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <scope line="269"/>
                <scope line="271">
                    <declaration name="ctx" type="HierMemDirCtx" line="272"/>
                </scope>
            </method>
            <method name="doUnbind" type="void" line="278">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <comment line="284">
                    attrs will also be removed along with ctx                    
                </comment>
                <scope line="279"/>
            </method>
            <method name="rename" type="void" line="287">
                <params>
                    <param name="oldname" type="String"/>
                    <param name="newname" type="String"/>
                </params>
            </method>
            <method name="rename" type="void" line="292">
                <params>
                    <param name="oldname" type="Name"/>
                    <param name="newname" type="Name"/>
                </params>
                <scope line="294"/>
                <scope line="298"/>
                <declaration name="ctx" type="HierMemDirCtx" line="302"/>
            </method>
            <method name="doRename" type="void" line="307">
                <params>
                    <param name="oldname" type="Name"/>
                    <param name="newname" type="Name"/>
                </params>
                <comment line="316">
                    Check if new name exists                    
                </comment>
                <comment line="321">
                    Check if old name is bound                    
                </comment>
                <scope line="308"/>
                <scope line="316"/>
                <declaration name="oldBinding" type="Object" line="321"/>
                <scope line="322"/>
            </method>
            <method name="list" type="NamingEnumeration" line="329">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="list" type="NamingEnumeration" line="333">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <declaration name="ctx" type="HierMemDirCtx" line="334"/>
            </method>
            <method name="doList" type="NamingEnumeration" line="338"/>
            <method name="listBindings" type="NamingEnumeration" line="343">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="listBindings" type="NamingEnumeration" line="347">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <declaration name="ctx" type="HierMemDirCtx" line="348"/>
            </method>
            <method name="doListBindings" type="NamingEnumeration" line="353">
                <params>
                    <param name="useFactory" type="boolean"/>
                </params>
            </method>
            <method name="destroySubcontext" type="void" line="357">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="destroySubcontext" type="void" line="361">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <declaration name="ctx" type="HierMemDirCtx" line="362"/>
            </method>
            <method name="doDestroySubcontext" type="void" line="367">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <scope line="369"/>
            </method>
            <method name="createSubcontext" type="Context" line="376">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="createSubcontext" type="Context" line="380">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="createSubcontext" type="DirContext" line="385">
                <params>
                    <param name="name" type="String"/>
                    <param name="attrs" type="Attributes"/>
                </params>
            </method>
            <method name="createSubcontext" type="DirContext" line="390">
                <params>
                    <param name="name" type="Name"/>
                    <param name="attrs" type="Attributes"/>
                </params>
                <declaration name="ctx" type="HierMemDirCtx" line="391"/>
            </method>
            <method name="doCreateSubcontext" type="DirContext" line="397">
                <params>
                    <param name="name" type="Name"/>
                    <param name="attrs" type="Attributes"/>
                </params>
                <scope line="398"/>
                <scope line="404"/>
                <declaration name="newCtx" type="HierMemDirCtx" line="407"/>
                <scope line="409"/>
            </method>
            <method name="lookupLink" type="Object" line="416">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="418">
                    This context does not treat links specially                    
                </comment>
            </method>
            <method name="lookupLink" type="Object" line="421">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <comment line="423">
                    Flat namespace; no federation; just call string version                    
                </comment>
            </method>
            <method name="getNameParser" type="NameParser" line="426">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getNameParser" type="NameParser" line="430">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="composeName" type="String" line="435">
                <params>
                    <param name="name" type="String"/>
                    <param name="prefix" type="String"/>
                </params>
                <declaration name="result" type="Name" line="436"/>
            </method>
            <method name="composeName" type="Name" line="442">
                <params>
                    <param name="name" type="Name"/>
                    <param name="prefix" type="Name"/>
                </params>
                <declaration name="result" type="Name" line="445"/>
            </method>
            <method name="addToEnvironment" type="Object" line="451">
                <params>
                    <param name="propName" type="String"/>
                    <param name="propVal" type="Object"/>
                </params>
            </method>
            <method name="removeFromEnvironment" type="Object" line="459">
                <params>
                    <param name="propName" type="String"/>
                </params>
            </method>
            <method name="getEnvironment" type="Hashtable" line="467">
                <scope line="468"/>
                <scope line="470"/>
            </method>
            <method name="getAttributes" type="Attributes" line="476">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getAttributes" type="Attributes" line="481">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <declaration name="ctx" type="HierMemDirCtx" line="482"/>
            </method>
            <method name="doGetAttributes" type="Attributes" line="486"/>
            <method name="getAttributes" type="Attributes" line="491">
                <params>
                    <param name="name" type="String"/>
                    <param name="attrIds" type="String[]"/>
                </params>
            </method>
            <method name="getAttributes" type="Attributes" line="496">
                <params>
                    <param name="name" type="Name"/>
                    <param name="attrIds" type="String[]"/>
                </params>
                <declaration name="ctx" type="HierMemDirCtx" line="497"/>
            </method>
            <method name="doGetAttributes" type="Attributes" line="502">
                <params>
                    <param name="attrIds" type="String[]"/>
                </params>
                <scope line="504"/>
                <declaration name="attrs" type="Attributes" line="507"/>
                <declaration name="attr" type="Attribute" line="508"/>
                <scope line="509">
                    <scope line="511"/>
                </scope>
            </method>
            <method name="modifyAttributes" type="void" line="519">
                <params>
                    <param name="name" type="String"/>
                    <param name="mod_op" type="int"/>
                    <param name="attrs" type="Attributes"/>
                </params>
            </method>
            <method name="modifyAttributes" type="void" line="524">
                <params>
                    <param name="name" type="Name"/>
                    <param name="mod_op" type="int"/>
                    <param name="attrs" type="Attributes"/>
                </params>
                <comment line="532">
                    turn it into a modification Enumeration and pass it on                    
                </comment>
                <scope line="526"/>
                <declaration name="attrEnum" type="NamingEnumeration" line="532"/>
                <declaration name="mods" type="ModificationItem[]" line="533"/>
                <scope line="534"/>
            </method>
            <method name="modifyAttributes" type="void" line="542">
                <params>
                    <param name="name" type="String"/>
                    <param name="mods" type="ModificationItem[]"/>
                </params>
            </method>
            <method name="modifyAttributes" type="void" line="547">
                <params>
                    <param name="name" type="Name"/>
                    <param name="mods" type="ModificationItem[]"/>
                </params>
                <declaration name="ctx" type="HierMemDirCtx" line="548"/>
            </method>
            <method name="doModifyAttributes" type="void" line="553">
                <params>
                    <param name="mods" type="ModificationItem[]"/>
                </params>
                <scope line="555"/>
            </method>
            <method name="applyMods" type="Attributes" line="563">
                <params>
                    <param name="mods" type="ModificationItem[]"/>
                    <param name="orig" type="Attributes"/>
                </params>
                <comment line="584">
                    Add new attribute values to existing attribute                    
                </comment>
                <comment line="604">
                    Remove attribute values from existing attribute                    
                </comment>
                <declaration name="mod" type="ModificationItem" line="565"/>
                <declaration name="existingAttr" type="Attribute" line="566"/>
                <declaration name="modVals" type="NamingEnumeration" line="567"/>
                <scope line="569">
                    <scope line="575"/>
                    <scope line="580"/>
                    <scope line="582">
                        <scope line="585"/>
                    </scope>
                    <scope line="591"/>
                    <scope line="593"/>
                    <scope line="599">
                        <scope line="600"/>
                        <scope line="602">
                            <scope line="605"/>
                            <scope line="608"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="search" type="NamingEnumeration" line="624">
                <params>
                    <param name="name" type="String"/>
                    <param name="matchingAttributes" type="Attributes"/>
                </params>
            </method>
            <method name="search" type="NamingEnumeration" line="630">
                <params>
                    <param name="name" type="Name"/>
                    <param name="matchingAttributes" type="Attributes"/>
                </params>
            </method>
            <method name="search" type="NamingEnumeration" line="637">
                <params>
                    <param name="name" type="String"/>
                    <param name="matchingAttributes" type="Attributes"/>
                    <param name="attributesToReturn" type="String[]"/>
                </params>
            </method>
            <method name="search" type="NamingEnumeration" line="645">
                <params>
                    <param name="name" type="Name"/>
                    <param name="matchingAttributes" type="Attributes"/>
                    <param name="attributesToReturn" type="String[]"/>
                </params>
                <comment line="657">
                    alwaysUseFactory ignored because objReturnFlag == false                    
                </comment>
                <declaration name="target" type="HierMemDirCtx" line="647"/>
                <declaration name="cons" type="SearchControls" line="649"/>
            </method>
            <method name="search" type="NamingEnumeration" line="662">
                <params>
                    <param name="name" type="Name"/>
                    <param name="filter" type="String"/>
                    <param name="cons" type="SearchControls"/>
                </params>
                <declaration name="target" type="DirContext" line="663"/>
                <declaration name="stringfilter" type="SearchFilter" line="665"/>
            </method>
            <method name="search" type="NamingEnumeration" line="678">
                <params>
                    <param name="name" type="Name"/>
                    <param name="filterExpr" type="String"/>
                    <param name="filterArgs" type="Object[]"/>
                    <param name="cons" type="SearchControls"/>
                </params>
                <declaration name="strfilter" type="String" line="680"/>
            </method>
            <method name="search" type="NamingEnumeration" line="687">
                <params>
                    <param name="name" type="String"/>
                    <param name="filter" type="String"/>
                    <param name="cons" type="SearchControls"/>
                </params>
            </method>
            <method name="search" type="NamingEnumeration" line="695">
                <params>
                    <param name="name" type="String"/>
                    <param name="filterExpr" type="String"/>
                    <param name="filterArgs" type="Object[]"/>
                    <param name="cons" type="SearchControls"/>
                </params>
            </method>
            <method name="createNewCtx" type="HierMemDirCtx" line="702"/>
            <method name="canonizeName" type="Name" line="708">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <comment line="713">
                    If name is not of the correct type, make copy                    
                </comment>
                <declaration name="canonicalName" type="Name" line="709"/>
                <scope line="711">
                    <declaration name="n" type="int" line="714"/>
                    <scope line="715"/>
                </scope>
            </method>
            <method name="getInternalName" type="Name" line="723">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="getLeafName" type="Name" line="727">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="getSchema" type="DirContext" line="732">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getSchema" type="DirContext" line="736">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="getSchemaClassDefinition" type="DirContext" line="741">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getSchemaClassDefinition" type="DirContext" line="746">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="setReadOnly" type="void" line="751">
                <params>
                    <param name="e" type="NamingException"/>
                </params>
            </method>
            <method name="setIgnoreCase" type="void" line="756">
                <params>
                    <param name="ignoreCase" type="boolean"/>
                </params>
            </method>
            <method name="setNameParser" type="void" line="760">
                <params>
                    <param name="parser" type="NameParser"/>
                </params>
            </method>
            <class name="FlatNames" line="765">
                <implements interface="NamingEnumeration"/>
                <declaration name="names" type="Enumeration" line="766"/>
                <method name="FlatNames" type="constructor" line="768">
                    <params>
                        <param name="names" type="Enumeration"/>
                    </params>
                </method>
                <method name="hasMoreElements" type="boolean" line="772">
                    <scope line="773"/>
                    <scope line="775"/>
                </method>
                <method name="hasMore" type="boolean" line="780"/>
                <method name="nextElement" type="Object" line="784">
                    <scope line="785"/>
                    <scope line="787"/>
                </method>
                <method name="next" type="Object" line="792">
                    <declaration name="name" type="Name" line="793"/>
                    <declaration name="className" type="String" line="794"/>
                </method>
                <method name="close" type="void" line="798"/>
            </class>
            <class name="FlatBindings" line="804">
                <extends class="FlatNames"/>
                <declaration name="bds" type="Hashtable" line="805"/>
                <declaration name="env" type="Hashtable" line="806"/>
                <declaration name="useFactory" type="boolean" line="807"/>
                <method name="FlatBindings" type="constructor" line="809">
                    <params>
                        <param name="bindings" type="Hashtable"/>
                        <param name="env" type="Hashtable"/>
                        <param name="useFactory" type="boolean"/>
                    </params>
                </method>
                <method name="next" type="Object" line="816">
                    <comment line="824">
                        only method available                        
                    </comment>
                    <declaration name="name" type="Name" line="817"/>
                    <declaration name="obj" type="HierMemDirCtx" line="819"/>
                    <declaration name="answer" type="Object" line="821"/>
                    <scope line="822">
                        <declaration name="attrs" type="Attributes" line="823"/>
                        <scope line="824"/>
                        <scope line="827"/>
                        <scope line="829">
                            <declaration name="e2" type="NamingException" line="830"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="HierContextEnumerator" line="841">
                <extends class="ContextEnumerator"/>
                <method name="HierContextEnumerator" type="constructor" line="843">
                    <params>
                        <param name="context" type="Context"/>
                        <param name="scope" type="int"/>
                    </params>
                </method>
                <method name="HierContextEnumerator" type="constructor" line="848">
                    <params>
                        <param name="context" type="Context"/>
                        <param name="scope" type="int"/>
                        <param name="contextName" type="String"/>
                        <param name="returnSelf" type="boolean"/>
                    </params>
                </method>
                <method name="getImmediateChildren" type="NamingEnumeration" line="853">
                    <params>
                        <param name="ctx" type="Context"/>
                    </params>
                </method>
                <method name="newEnumerator" type="ContextEnumerator" line="858">
                    <params>
                        <param name="ctx" type="Context"/>
                        <param name="scope" type="int"/>
                        <param name="contextName" type="String"/>
                        <param name="returnSelf" type="boolean"/>
                    </params>
                </method>
            </class>
        </class>
        <class name="HierarchicalName" line="870">
            <extends class="CompoundName"/>
            <comment line="700">
                This function is called whenever a new object needs to be created.
                 this is used so that if anyone subclasses us, they can override this
                 and return object of their own kind.                
            </comment>
            <comment line="707">
                If the supplied name is a composite name, return the name that
                 is its first component.                
            </comment>
            <comment line="751">
                Set context in readonly mode; throw e when update operation attempted.                
            </comment>
            <comment line="756">
                Set context to support case-insensitive names                
            </comment>
            <comment line="765">
                Class for enumerating name/class pairs                
            </comment>
            <comment line="804">
                Class for enumerating bindings                
            </comment>
            <comment line="874">
                Creates an empty name                
            </comment>
            <comment line="891">
                just like String.hashCode, only it pays no attention to length                
            </comment>
            <declaration name="hashValue" type="int" line="871"/>
            <method name="HierarchicalName" type="constructor" line="874">
                <anonymous_class line="875">
                    <method name="hasMoreElements" type="boolean" line="876"/>
                    <method name="nextElement" type="Object" line="877"/>
                </anonymous_class>
            </method>
            <method name="HierarchicalName" type="constructor" line="882">
                <params>
                    <param name="comps" type="Enumeration"/>
                    <param name="syntax" type="Properties"/>
                </params>
            </method>
            <method name="HierarchicalName" type="constructor" line="886">
                <params>
                    <param name="n" type="String"/>
                    <param name="syntax" type="Properties"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="891">
                <scope line="892">
                    <declaration name="name" type="String" line="894"/>
                    <declaration name="len" type="int" line="895"/>
                    <declaration name="off" type="int" line="896"/>
                    <declaration name="val" type="char" line="897"/>
                    <scope line="901"/>
                </scope>
            </method>
            <method name="getPrefix" type="Name" line="909">
                <params>
                    <param name="posn" type="int"/>
                </params>
                <declaration name="comps" type="Enumeration" line="910"/>
            </method>
            <method name="getSuffix" type="Name" line="914">
                <params>
                    <param name="posn" type="int"/>
                </params>
                <declaration name="comps" type="Enumeration" line="915"/>
            </method>
            <method name="clone" type="Object" line="919"/>
            <declaration name="serialVersionUID" type="long" line="923"/>
        </class>
        <class name="HierarchicalNameParser" line="927">
            <comment line="700">
                This function is called whenever a new object needs to be created.
                 this is used so that if anyone subclasses us, they can override this
                 and return object of their own kind.                
            </comment>
            <comment line="707">
                If the supplied name is a composite name, return the name that
                 is its first component.                
            </comment>
            <comment line="751">
                Set context in readonly mode; throw e when update operation attempted.                
            </comment>
            <comment line="756">
                Set context to support case-insensitive names                
            </comment>
            <comment line="765">
                Class for enumerating name/class pairs                
            </comment>
            <comment line="804">
                Class for enumerating bindings                
            </comment>
            <comment line="874">
                Creates an empty name                
            </comment>
            <comment line="891">
                just like String.hashCode, only it pays no attention to length                
            </comment>
            <implements interface="NameParser"/>
            <declaration name="mySyntax" type="Properties" line="928"/>
            <scope line="929"/>
            <method name="parse" type="Name" line="940">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
        </class>
    </source>