<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.toolkit.corba">
        <import package="java.rmi.Remote"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Enumeration"/>
        <import package="org.omg.CORBA.ORB"/>
        <import package="javax.naming.Context"/>
        <import package="javax.naming.ConfigurationException"/>
        <class name="CorbaUtils" line="11">
            <javadoc line="11">
                Contains utilities for performing CORBA-related tasks:
                  1. Get the org.omg.CORBA.Object for a java.rmi.Remote object.
                  2. Create an ORB to use for a given host/port, and environment properties.                
                <author>
                    Simon Nash                    
                </author>
                <author>
                    Bryan Atsatt                    
                </author>
            </javadoc>
            <javadoc line="19">
                Returns the CORBA object reference associated with a Remote
                  object by using the javax.rmi.CORBA package.
                  &lt;p&gt;
                  Use reflection to avoid hard dependencies on javax.rmi.CORBA package.
                  This method effective does the following:
                  &lt;blockquote&gt;&lt;pre&gt;
                  java.lang.Object stub;
                  try {
                  stub = PortableRemoteObject.toStub(remoteObj);
                  } catch (Exception e) {
                  throw new ConfigurationException(&quot;Object not exported or not found&quot;);
                  }
                  if (!(stub instanceof javax.rmi.CORBA.Stub)) {
                  return null; // JRMP impl or JRMP stub
                  }
                  try {
                  ((javax.rmi.CORBA.Stub)stub).connect(orb);  // try to connect IIOP stub
                  } catch (RemoteException e) {
                  // ignore &apos;already connected&apos; error
                  }
                  return (javax.rmi.CORBA.Stub)stub;                
                <param>
                    remoteObj The non-null remote object for                    
                </param>
                <param>
                    orb       The non-null ORB to connect the remote object to                    
                </param>
                <return>
                    The CORBA Object for remoteObj; null if <tt>remoteObj</tt>
                      is a JRMP implementation or JRMP stub.                    
                </return>
                <exception>
                    ClassNotFoundException The RMI-IIOP package is not available                    
                </exception>
                <exception>
                    ConfigurationException The CORBA Object cannot be obtained
                      because of configuration problems.                    
                </exception>
            </javadoc>
            <method name="remoteToCorba" type="org.omg.CORBA.Object" line="49">
                <params>
                    <param name="remoteObj" type="Remote"/>
                    <param name="orb" type="ORB"/>
                </params>
                <scope line="50">
                    <scope line="51"/>
                </scope>
                <declaration name="stub" type="java.lang.Object" line="55"/>
                <scope line="56"/>
                <scope line="59">
                    <declaration name="realException" type="Throwable" line="60"/>
                    <declaration name="ce" type="ConfigurationException" line="61"/>
                </scope>
                <scope line="65">
                    <declaration name="ce" type="ConfigurationException" line="66"/>
                </scope>
                <scope line="70"/>
                <scope line="73"/>
                <scope line="76">
                    <declaration name="realException" type="Throwable" line="77"/>
                    <scope line="78">
                        <declaration name="ce" type="ConfigurationException" line="79"/>
                    </scope>
                </scope>
                <scope line="84">
                    <declaration name="ce" type="ConfigurationException" line="85"/>
                </scope>
            </method>
            <javadoc line="91">
                Get ORB using given server and port number, and properties from environment.                
                <param>
                    server Possibly null server; if null means use default;
                      For applet, it is the applet host; for app, it is localhost.                    
                </param>
                <param>
                    port   Port number, -1 means default port                    
                </param>
                <param>
                    env    Possibly null environment. Contains environment properties.
                      Could contain ORB itself; or applet used for initializing ORB.
                      Use all String properties from env for initializing ORB                    
                </param>
                <return>
                    A non-null ORB.                    
                </return>
            </javadoc>
            <method name="getOrb" type="ORB" line="101">
                <params>
                    <param name="server" type="String"/>
                    <param name="port" type="int"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <declaration name="orbProp" type="Properties" line="102"/>
                <scope line="103">
                    <scope line="104"/>
                    <scope line="107">
                        <declaration name="envProp" type="Enumeration" line="108"/>
                        <scope line="110">
                            <declaration name="key" type="String" line="111"/>
                            <declaration name="val" type="Object" line="112"/>
                            <scope line="113"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="119"/>
                <scope line="122"/>
                <scope line="125"/>
                <scope line="128">
                    <declaration name="applet" type="Object" line="129"/>
                    <scope line="130"/>
                </scope>
            </method>
            <javadoc line="136">
                This method returns a new ORB instance for the given applet
                  without creating a static dependency on java.applet.                
            </javadoc>
            <method name="initAppletORB" type="ORB" line="140">
                <params>
                    <param name="applet" type="Object"/>
                    <param name="orbProp" type="Properties"/>
                </params>
                <scope line="141">
                    <declaration name="appletClass" type="Class&lt;?&gt;" line="142"/>
                    <scope line="143"/>
                    <declaration name="method" type="Method" line="146"/>
                </scope>
                <scope line="149"/>
                <scope line="152"/>
                <scope line="155">
                    <declaration name="cause" type="Throwable" line="156"/>
                    <scope line="157"/>
                    <scope line="160"/>
                </scope>
                <scope line="165"/>
            </method>
            <declaration name="toStubMethod" type="Method" line="169"/>
            <declaration name="connectMethod" type="Method" line="170"/>
            <declaration name="corbaStubClass" type="Class" line="171"/>
            <javadoc line="172">
                Initializes reflection method handles for RMI-IIOP.                
                <exception>
                    ClassNotFoundException javax.rmi.CORBA. not available                    
                </exception>
            </javadoc>
            <method name="initMethodHandles" type="void" line="176">
                <scope line="178"/>
                <scope line="181"/>
                <declaration name="proClass" type="Class" line="184"/>
                <scope line="185"/>
                <scope line="188"/>
            </method>
        </class>
    </source>