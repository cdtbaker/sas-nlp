<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.toolkit.corba">
        <import package="java.rmi.Remote"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Enumeration"/>
        <import package="org.omg.CORBA.ORB"/>
        <import package="javax.naming.Context"/>
        <import package="javax.naming.ConfigurationException"/>
        <class name="CorbaUtils" line="42">
            <comment line="240">
                Fields used for reflection of RMI-IIOP                
            </comment>
            <javadoc line="42">
                Contains utilities for performing CORBA-related tasks:
                  1. Get the org.omg.CORBA.Object for a java.rmi.Remote object.
                  2. Create an ORB to use for a given host/port, and environment properties.                
                <author>
                    Simon Nash                    
                </author>
                <author>
                    Bryan Atsatt                    
                </author>
            </javadoc>
            <javadoc line="52">
                Returns the CORBA object reference associated with a Remote
                  object by using the javax.rmi.CORBA package.
                  &lt;p&gt;
                  Use reflection to avoid hard dependencies on javax.rmi.CORBA package.
                  This method effective does the following:
                  &lt;blockquote&gt;&lt;pre&gt;
                  java.lang.Object stub;
                  try {
                  stub = PortableRemoteObject.toStub(remoteObj);
                  } catch (Exception e) {
                  throw new ConfigurationException(&quot;Object not exported or not found&quot;);
                  }
                  if (!(stub instanceof javax.rmi.CORBA.Stub)) {
                  return null; // JRMP impl or JRMP stub
                  }
                  try {
                  ((javax.rmi.CORBA.Stub)stub).connect(orb);  // try to connect IIOP stub
                  } catch (RemoteException e) {
                  // ignore &apos;already connected&apos; error
                  }
                  return (javax.rmi.CORBA.Stub)stub;                
                <param>
                    remoteObj The non-null remote object for                    
                </param>
                <param>
                    orb       The non-null ORB to connect the remote object to                    
                </param>
                <return>
                    The CORBA Object for remoteObj; null if &lt;tt&gt;remoteObj&lt;/tt&gt;
                      is a JRMP implementation or JRMP stub.                    
                </return>
                <exception>
                    ClassNotFoundException The RMI-IIOP package is not available                    
                </exception>
                <exception>
                    ConfigurationException The CORBA Object cannot be obtained
                      because of configuration problems.                    
                </exception>
            </javadoc>
            <method name="remoteToCorba" type="org.omg.CORBA.Object" line="84">
                <params>
                    <param name="remoteObj" type="Remote"/>
                    <param name="orb" type="ORB"/>
                </params>
                <comment line="92">
                    First, get remoteObj&apos;s stub                    
                </comment>
                <comment line="94">
                    javax.rmi.CORBA.Stub stub = PortableRemoteObject.toStub(remoteObj);                    
                </comment>
                <comment line="103">
                    realException.printStackTrace();                    
                </comment>
                <comment line="118">
                    Next, make sure that the stub is javax.rmi.CORBA.Stub                    
                </comment>
                <comment line="121">
                    JRMP implementation or JRMP stub                    
                </comment>
                <comment line="124">
                    Next, make sure that the stub is connected                    
                </comment>
                <comment line="125">
                    Invoke stub.connect(orb)                    
                </comment>
                <comment line="131">
                    realException.printStackTrace();                    
                </comment>
                <comment line="139">
                    ignore RemoteException because stub might have already
                     been connected                    
                </comment>
                <comment line="147">
                    Finally, return stub                    
                </comment>
                <scope line="85">
                    <scope line="86"/>
                </scope>
                <declaration name="stub" type="java.lang.Object" line="95"/>
                <scope line="97"/>
                <scope line="100">
                    <declaration name="realException" type="Throwable" line="101"/>
                    <declaration name="ce" type="ConfigurationException" line="104"/>
                </scope>
                <scope line="109">
                    <declaration name="ce" type="ConfigurationException" line="110"/>
                </scope>
                <scope line="119"/>
                <scope line="125"/>
                <scope line="128">
                    <declaration name="realException" type="Throwable" line="129"/>
                    <scope line="132">
                        <declaration name="ce" type="ConfigurationException" line="133"/>
                    </scope>
                </scope>
                <scope line="140">
                    <declaration name="ce" type="ConfigurationException" line="141"/>
                </scope>
            </method>
            <javadoc line="150">
                Get ORB using given server and port number, and properties from environment.                
                <param>
                    server Possibly null server; if null means use default;
                      For applet, it is the applet host; for app, it is localhost.                    
                </param>
                <param>
                    port   Port number, -1 means default port                    
                </param>
                <param>
                    env    Possibly null environment. Contains environment properties.
                      Could contain ORB itself; or applet used for initializing ORB.
                      Use all String properties from env for initializing ORB                    
                </param>
                <return>
                    A non-null ORB.                    
                </return>
            </javadoc>
            <method name="getOrb" type="ORB" line="161">
                <params>
                    <param name="server" type="String"/>
                    <param name="port" type="int"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <comment line="163">
                    See if we can get info from environment                    
                </comment>
                <comment line="166">
                    Extract any org.omg.CORBA properties from environment                    
                </comment>
                <comment line="169">
                    Already a Properties, just clone                    
                </comment>
                <comment line="172">
                    Get all String properties                    
                </comment>
                <comment line="194">
                    Get Applet from environment                    
                </comment>
                <comment line="198">
                    Create ORBs for an applet                    
                </comment>
                <comment line="203">
                    Create ORBs using orbProp for a standalone application                    
                </comment>
                <declaration name="orbProp" type="Properties" line="163"/>
                <scope line="166">
                    <scope line="167"/>
                    <scope line="170">
                        <declaration name="envProp" type="Enumeration" line="172"/>
                        <scope line="174">
                            <declaration name="key" type="String" line="175"/>
                            <declaration name="val" type="Object" line="176"/>
                            <scope line="177"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="182"/>
                <scope line="186"/>
                <scope line="189"/>
                <scope line="194">
                    <declaration name="applet" type="Object" line="195"/>
                    <scope line="196"/>
                </scope>
            </method>
            <javadoc line="206">
                This method returns a new ORB instance for the given applet
                  without creating a static dependency on java.applet.                
            </javadoc>
            <method name="initAppletORB" type="ORB" line="210">
                <params>
                    <param name="applet" type="Object"/>
                    <param name="orbProp" type="Properties"/>
                </params>
                <comment line="218">
                    invoke the static method ORB.init(applet, orbProp);                    
                </comment>
                <comment line="222">
                    java.applet.Applet doesn&apos;t exist and the applet parameter is
                     non-null; so throw CCE                    
                </comment>
                <scope line="211">
                    <declaration name="appletClass" type="Class&lt;?&gt;" line="212"/>
                    <scope line="213"/>
                    <declaration name="method" type="Method" line="218"/>
                </scope>
                <scope line="220"/>
                <scope line="224"/>
                <scope line="226">
                    <declaration name="cause" type="Throwable" line="227"/>
                    <scope line="228"/>
                    <scope line="230"/>
                </scope>
                <scope line="234"/>
            </method>
            <declaration name="toStubMethod" type="Method" line="240"/>
            <declaration name="connectMethod" type="Method" line="241"/>
            <declaration name="corbaStubClass" type="Class" line="242"/>
            <javadoc line="243">
                Initializes reflection method handles for RMI-IIOP.                
                <exception>
                    ClassNotFoundException javax.rmi.CORBA. not available                    
                </exception>
            </javadoc>
            <method name="initMethodHandles" type="void" line="247">
                <comment line="249">
                    Get javax.rmi.CORBA.Stub class                    
                </comment>
                <comment line="252">
                    Get javax.rmi.CORBA.Stub.connect(org.omg.CORBA.ORB) method                    
                </comment>
                <comment line="262">
                    Get javax.rmi.PortableRemoteObject method                    
                </comment>
                <comment line="265">
                    Get javax.rmi.PortableRemoteObject(java.rmi.Remote) method                    
                </comment>
                <scope line="253"/>
                <scope line="256"/>
                <declaration name="proClass" type="Class" line="262"/>
                <scope line="265"/>
                <scope line="269"/>
            </method>
        </class>
    </source>