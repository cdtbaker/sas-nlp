<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap.sasl">
        <import package="java.io"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.StringTokenizer"/>
        <import package="javax.naming.AuthenticationException"/>
        <import package="javax.naming.AuthenticationNotSupportedException"/>
        <import package="javax.naming.NamingException"/>
        <import package="javax.naming.ldap.Control"/>
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <import package="javax.security.sasl"/>
        <import package="com.sun.jndi.ldap.Connection"/>
        <import package="com.sun.jndi.ldap.LdapClient"/>
        <import package="com.sun.jndi.ldap.LdapResult"/>
        <class name="LdapSasl" line="15">
            <javadoc line="15">
                Handles SASL support.                
                <author>
                    Vincent Ryan                    
                </author>
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="SASL_CALLBACK" type="String" line="21"/>
            <declaration name="SASL_AUTHZ_ID" type="String" line="22"/>
            <declaration name="SASL_REALM" type="String" line="23"/>
            <declaration name="LDAP_SUCCESS" type="int" line="24"/>
            <declaration name="LDAP_SASL_BIND_IN_PROGRESS" type="int" line="25"/>
            <method name="LdapSasl" type="constructor" line="26"/>
            <javadoc line="28">
                Performs SASL bind.
                  Creates a SaslClient by using a default CallbackHandler
                  that uses the Context.SECURITY_PRINCIPAL and Context.SECURITY_CREDENTIALS
                  properties to satisfy the callbacks, and by using the
                  SASL_AUTHZ_ID property as the authorization id. If the SASL_AUTHZ_ID
                  property has not been set, Context.SECURITY_PRINCIPAL is used.
                  If SASL_CALLBACK has been set, use that instead of the default
                  CallbackHandler.
                  &lt;p&gt;
                  If bind is successful and the selected SASL mechanism has a security
                  layer, set inStream and outStream to be filter streams that use
                  the security layer. These will be used for subsequent communication
                  with the server.
                  &lt;p&gt;                
                <param>
                    conn The non-null connection to use for sending an LDAP BIND                    
                </param>
                <param>
                    server Non-null string name of host to connect to                    
                </param>
                <param>
                    dn Non-null DN to bind as; also used as authentication ID                    
                </param>
                <param>
                    pw Possibly null password; can be byte[], char[] or String                    
                </param>
                <param>
                    authMech A non-null space-separated list of SASL authentication
                      mechanisms.                    
                </param>
                <param>
                    env The possibly null environment of the context, possibly containing
                      properties for used by SASL mechanisms                    
                </param>
                <param>
                    bindCtls The possibly null controls to accompany the bind                    
                </param>
                <return>
                    LdapResult containing status of the bind                    
                </return>
            </javadoc>
            <method name="saslBind" type="LdapResult" line="54">
                <params>
                    <param name="clnt" type="LdapClient"/>
                    <param name="conn" type="Connection"/>
                    <param name="server" type="String"/>
                    <param name="dn" type="String"/>
                    <param name="pw" type="Object"/>
                    <param name="authMech" type="String"/>
                    <param name="env" type="Hashtable"/>
                    <param name="bindCtls" type="Control[]"/>
                </params>
                <declaration name="saslClnt" type="SaslClient" line="55"/>
                <declaration name="cleanupHandler" type="boolean" line="56"/>
                <declaration name="cbh" type="CallbackHandler" line="57"/>
                <scope line="58"/>
                <declaration name="authzId" type="String" line="62"/>
                <declaration name="mechs" type="String[]" line="63"/>
                <scope line="64">
                    <scope line="66"/>
                    <declaration name="res" type="LdapResult" line="69"/>
                    <declaration name="mechName" type="String" line="70"/>
                    <declaration name="response" type="byte[]" line="71"/>
                    <scope line="73">
                        <scope line="75">
                            <scope line="76"/>
                        </scope>
                    </scope>
                    <scope line="83">
                        <scope line="84"/>
                        <declaration name="qop" type="String" line="87"/>
                        <scope line="88">
                            <declaration name="newIn" type="InputStream" line="89"/>
                            <declaration name="newOut" type="OutputStream" line="90"/>
                        </scope>
                        <scope line="93"/>
                    </scope>
                </scope>
                <scope line="99">
                    <declaration name="ne" type="NamingException" line="100"/>
                </scope>
                <scope line="104">
                    <scope line="105"/>
                </scope>
            </method>
            <javadoc line="110">
                Returns an array of SASL mechanisms given a string of space
                  separated SASL mechanism names.                
                <param>
                    The non-null string containing the mechanism names                    
                </param>
                <return>
                    A non-null array of String; each element of the array
                      contains a single mechanism name.                    
                </return>
            </javadoc>
            <method name="getSaslMechanismNames" type="String[]" line="117">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="parser" type="StringTokenizer" line="118"/>
                <declaration name="mechs" type="Vector" line="119"/>
                <scope line="120"/>
                <declaration name="mechNames" type="String[]" line="123"/>
                <scope line="124"/>
            </method>
            <declaration name="NO_BYTES" type="byte[]" line="129"/>
        </class>
    </source>