<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.dns">
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.util.Date"/>
        <import package="java.util.Vector"/>
        <class name="ZoneNode" line="34">
            <extends class="NameNode"/>
            <comment line="59">
                the zone&apos;s namespace                
            </comment>
            <comment line="60">
                the zone data&apos;s serial number                
            </comment>
            <comment line="61">
                time when the zone&apos;s data expires                
            </comment>
            <comment line="71">
                Clears the contents of this node.  If the node was flagged as
                 expired, it remains so.                
            </comment>
            <comment line="80">
                Is this node currently populated?                
            </comment>
            <comment line="87">
                Returns the zone&apos;s contents, or null if the zone is not populated.                
            </comment>
            <comment line="96">
                Has this zone&apos;s data expired?                
            </comment>
            <comment line="103">
                Returns the deepest populated zone on the path specified by a
                 fully-qualified domain name, or null if there is no populated
                 zone on that path.  Note that a node may be depopulated after
                 being returned.                
            </comment>
            <comment line="123">
                Populates (or repopulates) a zone given its own fully-qualified
                 name and its resource records.  Returns the zone&apos;s new contents.                
            </comment>
            <comment line="157">
                Set this zone&apos;s data to expire in &lt;tt&gt;secsToExpiration&lt;tt&gt; seconds.                
            </comment>
            <comment line="165">
                Returns an SOA record&apos;s minimum TTL field.                
            </comment>
            <comment line="174">
                Compares this zone&apos;s serial number with that of an SOA record.
                 Zone must be populated.
                 Returns a negative, zero, or positive integer as this zone&apos;s
                 serial number is less than, equal to, or greater than the SOA
                 record&apos;s.
                 See ResourceRecord.compareSerialNumbers() for a description of
                 serial number arithmetic.                
            </comment>
            <comment line="189">
                Returns an SOA record&apos;s serial number.                
            </comment>
            <javadoc line="34">
                ZoneNode extends NameNode to represent a tree of the zones in the
                  DNS namespace, along with any intermediate nodes between zones.
                  A ZoneNode that represents a zone may be &quot;populated&quot; with a
                  NameNode tree containing the zone&apos;s contents.
                  &lt;p&gt; A populated zone&apos;s contents will be flagged as having expired after
                  the time specified by the minimum TTL value in the zone&apos;s SOA record.
                  &lt;p&gt; Since zone cuts aren&apos;t directly modeled by a tree of ZoneNodes,
                  ZoneNode.isZoneCut() always returns false.
                  &lt;p&gt; The synchronization strategy is documented in DnsContext.java.
                  &lt;p&gt; The zone&apos;s contents are accessed via a soft reference, so its
                  heap space may be reclaimed when necessary.  The zone may be
                  repopulated later.                
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="contentsRef" type="SoftReference" line="58"/>
            <declaration name="serialNumber" type="long" line="59"/>
            <declaration name="expiration" type="Date" line="60"/>
            <method name="ZoneNode" type="constructor" line="62">
                <params>
                    <param name="label" type="String"/>
                </params>
            </method>
            <method name="newNameNode" type="NameNode" line="66">
                <params>
                    <param name="label" type="String"/>
                </params>
            </method>
            <method name="depopulate" type="void" line="74"/>
            <method name="isPopulated" type="boolean" line="82"/>
            <method name="getContents" type="NameNode" line="89"/>
            <method name="isExpired" type="boolean" line="98"/>
            <method name="getDeepestPopulated" type="ZoneNode" line="108">
                <params>
                    <param name="fqdn" type="DnsName"/>
                </params>
                <comment line="111">
                    &quot;i=1&quot; to skip root label                    
                </comment>
                <declaration name="znode" type="ZoneNode" line="109"/>
                <declaration name="popNode" type="ZoneNode" line="110"/>
                <scope line="111">
                    <scope line="113"/>
                    <scope line="115"/>
                </scope>
            </method>
            <method name="populate" type="NameNode" line="126">
                <params>
                    <param name="zone" type="DnsName"/>
                    <param name="rrs" type="ResourceRecords"/>
                </params>
                <comment line="127">
                    assert zone.get(0).equals(&quot;&quot;);               // zone has root label                    
                </comment>
                <comment line="128">
                    assert (zone.size() == (depth() + 1));       // +1 due to root label                    
                </comment>
                <comment line="136">
                    Ignore resource records whose names aren&apos;t within the zone&apos;s                    
                </comment>
                <comment line="137">
                    domain.  Also skip records of the zone&apos;s top node, since                    
                </comment>
                <comment line="138">
                    the zone&apos;s root NameNode is already in place.                    
                </comment>
                <comment line="146">
                    The zone&apos;s SOA record is the first record in the answer section.                    
                </comment>
                <declaration name="newContents" type="NameNode" line="130"/>
                <scope line="132">
                    <declaration name="rr" type="ResourceRecord" line="133"/>
                    <declaration name="n" type="DnsName" line="134"/>
                    <scope line="139">
                        <declaration name="nnode" type="NameNode" line="140"/>
                        <scope line="141"/>
                    </scope>
                </scope>
                <declaration name="soa" type="ResourceRecord" line="147"/>
                <scope line="148"/>
            </method>
            <method name="setExpiration" type="void" line="159">
                <params>
                    <param name="secsToExpiration" type="long"/>
                </params>
            </method>
            <method name="getMinimumTtl" type="long" line="167">
                <params>
                    <param name="soa" type="ResourceRecord"/>
                </params>
                <declaration name="rdata" type="String" line="168"/>
                <declaration name="pos" type="int" line="169"/>
            </method>
            <method name="compareSerialNumberTo" type="int" line="182">
                <params>
                    <param name="soa" type="ResourceRecord"/>
                </params>
                <comment line="183">
                    assert isPopulated();                    
                </comment>
            </method>
            <method name="getSerialNumber" type="long" line="191">
                <params>
                    <param name="soa" type="ResourceRecord"/>
                </params>
                <comment line="194">
                    An SOA record ends with:  serial refresh retry expire minimum.                    
                </comment>
                <comment line="195">
                    Set &quot;beg&quot; to the space before serial, and &quot;end&quot; to the space after.                    
                </comment>
                <comment line="196">
                    We go &quot;backward&quot; to avoid dealing with escaped spaces in names.                    
                </comment>
                <declaration name="rdata" type="String" line="192"/>
                <declaration name="beg" type="int" line="197"/>
                <declaration name="end" type="int" line="198"/>
                <scope line="199"/>
            </method>
        </class>
    </source>