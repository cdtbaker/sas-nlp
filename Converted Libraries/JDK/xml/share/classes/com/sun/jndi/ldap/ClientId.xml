<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="java.util.Arrays"/>
        <import package="java.io.OutputStream"/>
        <import package="javax.naming.ldap.Control"/>
        <import package="java.lang.reflect.Method"/>
        <import package="javax.net.SocketFactory"/>
        <class name="ClientId" line="34">
            <comment line="186">
                delegate the comparison work to the SocketFactory class
                 as there is no enough information here, to do the comparison                
            </comment>
            <javadoc line="34">
                Represents identity information about an anonymous LDAP connection.
                  This base class contains the following information:
                  - protocol version number
                  - server&apos;s hostname (case-insensitive)
                  - server&apos;s port number
                  - prototype type (plain or ssl)
                  - controls to be sent with the LDAP bind request
                  All other identity classes must be a subclass of ClientId.
                  Identity subclasses would add more distinguishing information, depending
                  on the type of authentication that the connection is to have.
                  The equals() and hashCode() methods of this class and its subclasses are
                  important because they are used to determine whether two requests for
                  the same connection are identical, and thus whether the same connection
                  may be shared. This is especially important for authenticated connections
                  because a mistake would result in a serious security violation.                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="version" type="int" line="56"/>
            <declaration name="hostname" type="String" line="57"/>
            <declaration name="port" type="int" line="58"/>
            <declaration name="protocol" type="String" line="59"/>
            <declaration name="bindCtls" type="Control[]" line="60"/>
            <declaration name="trace" type="OutputStream" line="61"/>
            <declaration name="socketFactory" type="String" line="62"/>
            <declaration name="myHash" type="int" line="63"/>
            <declaration name="ctlHash" type="int" line="64"/>
            <declaration name="factory" type="SocketFactory" line="66"/>
            <declaration name="sockComparator" type="Method" line="67"/>
            <declaration name="isDefaultSockFactory" type="boolean" line="68"/>
            <declaration name="debug" type="boolean" line="69"/>
            <method name="ClientId" type="constructor" line="72">
                <params>
                    <param name="version" type="int"/>
                    <param name="hostname" type="String"/>
                    <param name="port" type="int"/>
                    <param name="protocol" type="String"/>
                    <param name="bindCtls" type="Control[]"/>
                    <param name="trace" type="OutputStream"/>
                    <param name="socketFactory" type="String"/>
                </params>
                <comment line="75">
                    ignore case                    
                </comment>
                <comment line="80">
                    Needed for custom socket factory pooling                    
                </comment>
                <comment line="95">
                    Ignore it here, the same exceptions are/will be handled by
                     LdapPoolManager and Connection classes.                    
                </comment>
                <comment line="106">
                    The SocketFactory field is not used in the myHash
                     computation as there is no right way to compute the hash code
                     for this field. There is no harm in skipping it from the hash
                     computation                    
                </comment>
                <scope line="84">
                    <scope line="85">
                        <declaration name="socketFactoryClass" type="Class" line="86"/>
                        <declaration name="objClass" type="Class" line="87"/>
                        <declaration name="getDefault" type="Method" line="90"/>
                    </scope>
                    <scope line="93">
                        <scope line="96"/>
                    </scope>
                </scope>
                <scope line="101"/>
            </method>
            <method name="equals" type="boolean" line="116">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="128">
                    null OK                    
                </comment>
                <comment line="130">
                    null OK                    
                </comment>
                <scope line="117"/>
                <declaration name="other" type="ClientId" line="121"/>
            </method>
            <method name="hashCode" type="int" line="136"/>
            <method name="hashCodeControls" type="int" line="140">
                <params>
                    <param name="c" type="Control[]"/>
                </params>
                <scope line="141"/>
                <declaration name="code" type="int" line="145"/>
                <scope line="146"/>
            </method>
            <method name="equalsControls" type="boolean" line="152">
                <params>
                    <param name="a" type="Control[]"/>
                    <param name="b" type="Control[]"/>
                </params>
                <comment line="155">
                    both null or same                    
                </comment>
                <comment line="158">
                    one is non-null                    
                </comment>
                <scope line="153"/>
                <scope line="156"/>
                <scope line="159"/>
                <scope line="163">
                    <scope line="167"/>
                </scope>
            </method>
            <method name="equalsSockFactory" type="boolean" line="174">
                <params>
                    <param name="other" type="ClientId"/>
                </params>
                <scope line="175"/>
                <scope line="178"/>
                <scope line="180"/>
            </method>
            <method name="invokeComparator" type="boolean" line="187">
                <params>
                    <param name="c1" type="ClientId"/>
                    <param name="c2" type="ClientId"/>
                </params>
                <comment line="198">
                    Failed to invoke the comparator; flag unequality                    
                </comment>
                <declaration name="ret" type="Object" line="188"/>
                <scope line="189"/>
                <scope line="192">
                    <scope line="193"/>
                </scope>
                <scope line="200"/>
            </method>
            <method name="toStringControls" type="String" line="206">
                <params>
                    <param name="ctls" type="Control[]"/>
                </params>
                <scope line="207"/>
                <declaration name="str" type="StringBuffer" line="210"/>
                <scope line="211"/>
            </method>
            <method name="toString" type="String" line="218"/>
        </class>
    </source>