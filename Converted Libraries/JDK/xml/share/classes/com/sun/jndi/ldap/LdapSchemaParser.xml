<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="javax.naming"/>
        <import package="javax.naming.directory"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <class name="LdapSchemaParser" line="33">
            <comment line="43">
                do debugging                
            </comment>
            <comment line="47">
                names of attribute IDs in the LDAP schema entry                
            </comment>
            <comment line="53">
                information for creating internal nodes in JNDI schema tree                
            </comment>
            <comment line="71">
                special tokens used in LDAP schema descriptions                
            </comment>
            <comment line="78">
                common IDs                
            </comment>
            <comment line="86">
                Object Class specific IDs                
            </comment>
            <comment line="93">
                Attribute Type specific IDs                
            </comment>
            <comment line="103">
                The string value we give to boolean variables                
            </comment>
            <comment line="106">
                To get around writing schemas that crash Netscape server                
            </comment>
            <comment line="305">
                returns the index of the first whitespace char of a linear whitspace                
            </comment>
            <comment line="306">
                sequince ending at the given position.                
            </comment>
            <comment line="596">
                oids            = woid  ( &quot;(&quot; oidlist &quot;)&quot; )
                 oidlist         = woid ( &quot;$&quot; woid )                
            </comment>
            <comment line="672">
                ----------------- &quot;unparser&quot; methods                
            </comment>
            <comment line="673">
                Methods that are used for translating a node in the schema tree                
            </comment>
            <comment line="674">
                into RFC2252 format for storage back into the LDAP directory                
            </comment>
            <comment line="675">
                static Attributes JNDI2LDAPSchema(DirContext schemaRoot)
                throws NamingException {
                
                Attribute objDescAttr = new BasicAttribute(OBJECTCLASSDESC_ATTR_ID);
                Attribute attrDescAttr = new BasicAttribute(ATTRIBUTEDESC_ATTR_ID);
                Attribute syntaxDescAttr = new BasicAttribute(SYNTAXDESC_ATTR_ID);
                Attributes attrs = new BasicAttributes(LdapClient.caseIgnore);
                DirContext classDefs, attributeDefs, syntaxDefs;
                Attributes classDefsAttrs, attributeDefsAttrs, syntaxDefsAttrs;
                NamingEnumeration defs;
                Object obj;
                int i = 0;
                
                try {
                obj = schemaRoot.lookup(OBJECTCLASS_DEFINITION_NAME);
                if(obj != null &amp;&amp; obj instanceof DirContext) {
                classDefs = (DirContext)obj;
                defs = classDefs.listBindings(&quot;&quot;);
                while(defs.hasMoreElements()) {
                i++;
                DirContext classDef = (DirContext)
                ((Binding)(defs.next())).getObject();
                classDefAttrs = classDef.getAttributes(&quot;&quot;);
                objDescAttr.add(classDef2ObjectDesc(classDefAttrs));
                }
                if (debug)
                System.err.println(i + &quot; total object classes&quot;);
                attrs.put(objDescAttr);
                } else {
                throw new NamingException(
                &quot;Problem with Schema tree: the object named &quot; +
                OBJECTCLASS_DEFINITION_NAME + &quot; is not a &quot; +
                &quot;DirContext&quot;);
                }
                } catch (NameNotFoundException e) {}  ignore
                
                i=0;
                try {
                obj = schemaRoot.lookup(ATTRIBUTE_DEFINITION_NAME);
                if(obj instanceof DirContext) {
                attributeDefs = (DirContext)obj;
                defs = attributeDefs.listBindings(&quot;&quot;);
                while(defs.hasMoreElements()) {
                i++;
                DirContext attrDef = (DirContext)
                ((Binding)defs.next()).getObject();
                attrDefAttrs = attrDef.getAttributes(&quot;&quot;);
                attrDescAttr.add(attrDef2AttrDesc(attrDefAttrs));
                }
                if (debug)
                System.err.println(i + &quot; attribute definitions&quot;);
                attrs.put(attrDescAttr);
                } else {
                throw new NamingException(
                &quot;Problem with schema tree: the object named &quot; +
                ATTRIBUTE_DEFINITION_NAME + &quot; is not a &quot; +
                &quot;DirContext&quot;);
                }
                } catch (NameNotFoundException e) {}  ignore
                
                i=0;
                try {
                obj = schemaRoot.lookup(SYNTAX_DEFINITION_NAME);
                if(obj instanceof DirContext) {
                syntaxDefs = (DirContext)obj;
                defs =syntaxDefs.listBindings(&quot;&quot;);
                while(defs.hasMoreElements()) {
                i++;
                DirContext syntaxDef = (DirContext)
                ((Binding)defs.next()).getObject();
                syntaxDefAttrs = syntaxDef.getAttributes(&quot;&quot;);
                syntaxDescAttr.add(syntaxDef2SyntaxDesc(syntaxDefAttrs));
                }
                if (debug)
                System.err.println(i + &quot; total syntax definitions&quot;);
                attrs.put(syntaxDescAttr);
                } else {
                throw new NamingException(
                &quot;Problem with schema tree: the object named &quot; +
                SYNTAX_DEFINITION_NAME + &quot; is not a &quot; +
                &quot;DirContext&quot;);
                }
                } catch (NameNotFoundException e) {}  ignore
                
                return attrs;
                }                
            </comment>
            <comment line="1162">
                                
            </comment>
            <javadoc line="33">
                Netscape&apos;s 3.1 servers have some schema bugs:
                  - It puts quotes around OIDs (such as those for SUP, SYNTAX).
                  - When you try to write out the MUST/MAY list (such as &quot;MUST cn&quot;),
                  it wants (&quot;MUST (cn)&quot;) instead                
            </javadoc>
            <declaration name="debug" type="boolean" line="43"/>
            <declaration name="OBJECTCLASSDESC_ATTR_ID" type="String" line="47"/>
            <declaration name="ATTRIBUTEDESC_ATTR_ID" type="String" line="48"/>
            <declaration name="SYNTAXDESC_ATTR_ID" type="String" line="49"/>
            <declaration name="MATCHRULEDESC_ATTR_ID" type="String" line="50"/>
            <declaration name="OBJECTCLASS_DEFINITION_NAME" type="String" line="53"/>
            <declaration name="CLASS_DEF_ATTRS" type="String[]" line="55"/>
            <declaration name="ATTRIBUTE_DEFINITION_NAME" type="String" line="57"/>
            <declaration name="ATTR_DEF_ATTRS" type="String[]" line="59"/>
            <declaration name="SYNTAX_DEFINITION_NAME" type="String" line="61"/>
            <declaration name="SYNTAX_DEF_ATTRS" type="String[]" line="63"/>
            <declaration name="MATCHRULE_DEFINITION_NAME" type="String" line="65"/>
            <declaration name="MATCHRULE_DEF_ATTRS" type="String[]" line="67"/>
            <declaration name="SINGLE_QUOTE" type="char" line="71"/>
            <declaration name="WHSP" type="char" line="72"/>
            <declaration name="OID_LIST_BEGIN" type="char" line="73"/>
            <declaration name="OID_LIST_END" type="char" line="74"/>
            <declaration name="OID_SEPARATOR" type="char" line="75"/>
            <declaration name="NUMERICOID_ID" type="String" line="78"/>
            <declaration name="NAME_ID" type="String" line="79"/>
            <declaration name="DESC_ID" type="String" line="80"/>
            <declaration name="OBSOLETE_ID" type="String" line="81"/>
            <declaration name="SUP_ID" type="String" line="82"/>
            <declaration name="PRIVATE_ID" type="String" line="83"/>
            <declaration name="ABSTRACT_ID" type="String" line="86"/>
            <declaration name="STRUCTURAL_ID" type="String" line="87"/>
            <declaration name="AUXILARY_ID" type="String" line="88"/>
            <declaration name="MUST_ID" type="String" line="89"/>
            <declaration name="MAY_ID" type="String" line="90"/>
            <declaration name="EQUALITY_ID" type="String" line="93"/>
            <declaration name="ORDERING_ID" type="String" line="94"/>
            <declaration name="SUBSTR_ID" type="String" line="95"/>
            <declaration name="SYNTAX_ID" type="String" line="96"/>
            <declaration name="SINGLE_VAL_ID" type="String" line="97"/>
            <declaration name="COLLECTIVE_ID" type="String" line="98"/>
            <declaration name="NO_USER_MOD_ID" type="String" line="99"/>
            <declaration name="USAGE_ID" type="String" line="100"/>
            <declaration name="SCHEMA_TRUE_VALUE" type="String" line="103"/>
            <declaration name="netscapeBug" type="boolean" line="106"/>
            <method name="LdapSchemaParser" type="constructor" line="108">
                <params>
                    <param name="netscapeBug" type="boolean"/>
                </params>
            </method>
            <method name="LDAP2JNDISchema" type="void" line="113">
                <params>
                    <param name="schemaAttrs" type="Attributes"/>
                    <param name="schemaRoot" type="LdapSchemaCtx"/>
                </params>
                <declaration name="objectClassesAttr" type="Attribute" line="114"/>
                <declaration name="attributeDefAttr" type="Attribute" line="115"/>
                <declaration name="syntaxDefAttr" type="Attribute" line="116"/>
                <declaration name="matchRuleDefAttr" type="Attribute" line="117"/>
                <scope line="120"/>
                <scope line="125"/>
                <scope line="130"/>
                <scope line="135"/>
            </method>
            <method name="objectDescs2ClassDefs" type="DirContext" line="142">
                <params>
                    <param name="objDescsAttr" type="Attribute"/>
                    <param name="schemaRoot" type="LdapSchemaCtx"/>
                </params>
                <comment line="148">
                    create the class def subtree                    
                </comment>
                <comment line="165">
                    error occurred while parsing, ignore current entry                    
                </comment>
                <declaration name="objDescs" type="NamingEnumeration" line="144"/>
                <declaration name="objDef" type="Attributes" line="145"/>
                <declaration name="classDefTree" type="LdapSchemaCtx" line="146"/>
                <declaration name="attrs" type="Attributes" line="149"/>
                <declaration name="currentName" type="String" line="155"/>
                <scope line="156">
                    <declaration name="objDesc" type="String" line="157"/>
                    <scope line="158">
                        <declaration name="def" type="Object[]" line="159"/>
                    </scope>
                    <scope line="164"/>
                </scope>
            </method>
            <method name="attrDescs2AttrDefs" type="DirContext" line="174">
                <params>
                    <param name="attributeDescAttr" type="Attribute"/>
                    <param name="schemaRoot" type="LdapSchemaCtx"/>
                </params>
                <comment line="180">
                    create the AttributeDef subtree                    
                </comment>
                <comment line="197">
                    error occurred while parsing, ignore current entry                    
                </comment>
                <declaration name="attrDescs" type="NamingEnumeration" line="176"/>
                <declaration name="attrDef" type="Attributes" line="177"/>
                <declaration name="attrDefTree" type="LdapSchemaCtx" line="178"/>
                <declaration name="attrs" type="Attributes" line="181"/>
                <declaration name="currentName" type="String" line="187"/>
                <scope line="188">
                    <declaration name="attrDesc" type="String" line="189"/>
                    <scope line="190">
                        <declaration name="def" type="Object[]" line="191"/>
                    </scope>
                    <scope line="196"/>
                </scope>
            </method>
            <method name="syntaxDescs2SyntaxDefs" type="DirContext" line="207">
                <params>
                    <param name="syntaxDescAttr" type="Attribute"/>
                    <param name="schemaRoot" type="LdapSchemaCtx"/>
                </params>
                <comment line="213">
                    create the SyntaxDef subtree                    
                </comment>
                <comment line="230">
                    error occurred while parsing, ignore current entry                    
                </comment>
                <declaration name="syntaxDescs" type="NamingEnumeration" line="209"/>
                <declaration name="syntaxDef" type="Attributes" line="210"/>
                <declaration name="syntaxDefTree" type="LdapSchemaCtx" line="211"/>
                <declaration name="attrs" type="Attributes" line="214"/>
                <declaration name="currentName" type="String" line="220"/>
                <scope line="221">
                    <declaration name="syntaxDesc" type="String" line="222"/>
                    <scope line="223">
                        <declaration name="def" type="Object[]" line="224"/>
                    </scope>
                    <scope line="229"/>
                </scope>
            </method>
            <method name="matchRuleDescs2MatchRuleDefs" type="DirContext" line="240">
                <params>
                    <param name="matchRuleDescAttr" type="Attribute"/>
                    <param name="schemaRoot" type="LdapSchemaCtx"/>
                </params>
                <comment line="246">
                    create the MatchRuleDef subtree                    
                </comment>
                <comment line="263">
                    error occurred while parsing, ignore current entry                    
                </comment>
                <declaration name="matchRuleDescs" type="NamingEnumeration" line="242"/>
                <declaration name="matchRuleDef" type="Attributes" line="243"/>
                <declaration name="matchRuleDefTree" type="LdapSchemaCtx" line="244"/>
                <declaration name="attrs" type="Attributes" line="247"/>
                <declaration name="currentName" type="String" line="253"/>
                <scope line="254">
                    <declaration name="matchRuleDesc" type="String" line="255"/>
                    <scope line="256">
                        <declaration name="def" type="Object[]" line="257"/>
                    </scope>
                    <scope line="262"/>
                </scope>
            </method>
            <method name="desc2Def" type="Object[]" line="271">
                <params>
                    <param name="desc" type="String"/>
                </params>
                <comment line="272">
                    System.err.println(desc);                    
                </comment>
                <comment line="276">
                    tolerate missing leading space                    
                </comment>
                <comment line="279">
                    Always begins with &lt;whsp numericoid whsp&gt;                    
                </comment>
                <comment line="281">
                    name is OID by default                    
                </comment>
                <comment line="291">
                    use NAME attribute as name                    
                </comment>
                <declaration name="attrs" type="Attributes" line="274"/>
                <declaration name="attr" type="Attribute" line="275"/>
                <declaration name="pos" type="int[]" line="276"/>
                <declaration name="moreTags" type="boolean" line="277"/>
                <declaration name="currentName" type="String" line="281"/>
                <scope line="286">
                    <scope line="290"/>
                    <scope line="296"/>
                </scope>
            </method>
            <method name="findTrailingWhitespace" type="int" line="306">
                <params>
                    <param name="string" type="String"/>
                    <param name="pos" type="int"/>
                </params>
                <scope line="307">
                    <scope line="308"/>
                </scope>
            </method>
            <method name="skipWhitespace" type="void" line="315">
                <params>
                    <param name="string" type="String"/>
                    <param name="pos" type="int[]"/>
                </params>
                <scope line="316">
                    <scope line="317">
                        <scope line="319"/>
                    </scope>
                </scope>
            </method>
            <method name="readNumericOID" type="Attribute" line="328">
                <params>
                    <param name="string" type="String"/>
                    <param name="pos" type="int[]"/>
                </params>
                <scope line="330"/>
                <declaration name="begin" type="int" line="334"/>
                <declaration name="value" type="String" line="335"/>
                <scope line="342"/>
            </method>
            <method name="readNextTag" type="Attribute" line="355">
                <params>
                    <param name="string" type="String"/>
                    <param name="pos" type="int[]"/>
                </params>
                <comment line="367">
                    get the name and values of the attribute to return                    
                </comment>
                <comment line="370">
                    tolerate a schema that omits the trailing space                    
                </comment>
                <comment line="379">
                    make sure at least one value was returned                    
                </comment>
                <comment line="386">
                    create the attribute, using the first value                    
                </comment>
                <comment line="389">
                    add other values if there are any                    
                </comment>
                <declaration name="attr" type="Attribute" line="357"/>
                <declaration name="tagName" type="String" line="358"/>
                <declaration name="values" type="String[]" line="359"/>
                <scope line="363"/>
                <declaration name="trailingSpace" type="int" line="368"/>
                <scope line="371"/>
                <scope line="373"/>
                <scope line="380"/>
                <scope line="390"/>
            </method>
            <method name="readTag" type="String[]" line="398">
                <params>
                    <param name="tag" type="String"/>
                    <param name="string" type="String"/>
                    <param name="pos" type="int[]"/>
                </params>
                <comment line="404">
                    move parser past tag name                    
                </comment>
                <comment line="409">
                    names[0] is NAME                    
                </comment>
                <comment line="434">
                    oid list for object class; WOID for attribute                    
                </comment>
                <comment line="441">
                    otherwise it&apos;s a schema element with a quoted string value                    
                </comment>
                <scope line="400"/>
                <scope line="408"/>
                <scope line="412"/>
                <scope line="420"/>
                <scope line="430"/>
                <scope line="437"/>
            </method>
            <method name="readQDString" type="String[]" line="446">
                <params>
                    <param name="string" type="String"/>
                    <param name="pos" type="int[]"/>
                </params>
                <comment line="464">
                    make sure the qdstring end symbol is there                    
                </comment>
                <declaration name="begin" type="int" line="448"/>
                <scope line="453"/>
                <scope line="458"/>
                <scope line="465"/>
            </method>
            <javadoc line="475">
                dstring         = 1utf8
                  qdstring        = whsp &quot;&apos;&quot; dstring &quot;&apos;&quot; whsp
                  qdstringlist    = [ qdstring ( qdstring ) ]
                  qdstrings       = qdstring / ( whsp &quot;(&quot; qdstringlist &quot;)&quot; whsp )                
            </javadoc>
            <method name="readQDStrings" type="String[]" line="482">
                <params>
                    <param name="string" type="String"/>
                    <param name="pos" type="int[]"/>
                </params>
            </method>
            <javadoc line="487">
                ; object descriptors used as schema element names
                  qdescrs         = qdescr / ( whsp &quot;(&quot; qdescrlist &quot;)&quot; whsp )
                  qdescrlist      = [ qdescr ( qdescr ) ]
                  qdescr          = whsp &quot;&apos;&quot; descr &quot;&apos;&quot; whsp
                  descr           = keystring                
            </javadoc>
            <method name="readQDescrs" type="String[]" line="495">
                <params>
                    <param name="string" type="String"/>
                    <param name="pos" type="int[]"/>
                </params>
                <scope line="497"/>
            </method>
            <javadoc line="514">
                qdescrlist      = [ qdescr ( qdescr ) ]
                  qdescr          = whsp &quot;&apos;&quot; descr &quot;&apos;&quot; whsp
                  descr           = keystring                
            </javadoc>
            <method name="readQDescrList" type="String[]" line="520">
                <params>
                    <param name="string" type="String"/>
                    <param name="pos" type="int[]"/>
                </params>
                <comment line="529">
                    skip &apos;(&apos;                    
                </comment>
                <comment line="552">
                    skip &apos;)&apos;                    
                </comment>
                <declaration name="begin" type="int" line="522"/>
                <declaration name="values" type="Vector" line="523"/>
                <scope line="525"/>
                <scope line="534"/>
                <scope line="539">
                    <declaration name="one" type="String[]" line="540"/>
                    <scope line="542"/>
                </scope>
                <declaration name="answer" type="String[]" line="554"/>
                <scope line="555"/>
            </method>
            <method name="readWOID" type="String[]" line="562">
                <params>
                    <param name="string" type="String"/>
                    <param name="pos" type="int[]"/>
                </params>
                <comment line="571">
                    %%% workaround for Netscape schema bug                    
                </comment>
                <scope line="564"/>
                <scope line="570"/>
                <declaration name="begin" type="int" line="575"/>
                <scope line="580"/>
                <scope line="585"/>
            </method>
            <method name="readOIDs" type="String[]" line="600">
                <params>
                    <param name="string" type="String"/>
                    <param name="pos" type="int[]"/>
                </params>
                <comment line="608">
                    Single OID                    
                </comment>
                <comment line="613">
                    Multiple OIDs                    
                </comment>
                <scope line="602"/>
                <scope line="609"/>
                <declaration name="begin" type="int" line="615"/>
                <declaration name="oidName" type="String" line="616"/>
                <declaration name="values" type="Vector" line="617"/>
                <scope line="619"/>
                <scope line="629"/>
                <scope line="634"/>
                <scope line="638">
                    <declaration name="wsBegin" type="int" line="639"/>
                    <scope line="641"/>
                    <scope line="650"/>
                </scope>
                <scope line="653"/>
                <declaration name="wsBegin" type="int" line="658"/>
                <declaration name="answer" type="String[]" line="664"/>
                <scope line="665"/>
            </method>
            <javadoc line="764">
                Translate attributes that describe an object class into the
                  string description as defined in RFC 2252.                
            </javadoc>
            <method name="classDef2ObjectDesc" type="String" line="769">
                <params>
                    <param name="attrs" type="Attributes"/>
                </params>
                <comment line="776">
                    extract attributes by ID to guarantee ordering                    
                </comment>
                <comment line="841">
                    process any remaining attributes                    
                </comment>
                <comment line="845">
                    use enumeration because attribute ID is not known                    
                </comment>
                <comment line="852">
                    skip those already processed                    
                </comment>
                <declaration name="objectDesc" type="StringBuffer" line="771"/>
                <declaration name="attr" type="Attribute" line="773"/>
                <declaration name="count" type="int" line="774"/>
                <scope line="779"/>
                <scope line="782"/>
                <scope line="788"/>
                <scope line="794"/>
                <scope line="800"/>
                <scope line="806"/>
                <scope line="812"/>
                <scope line="818"/>
                <scope line="824"/>
                <scope line="830"/>
                <scope line="836"/>
                <scope line="842">
                    <declaration name="attrId" type="String" line="843"/>
                    <scope line="847">
                        <scope line="862"/>
                        <scope line="865"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="876">
                Translate attributes that describe an attribute definition into the
                  string description as defined in RFC 2252.                
            </javadoc>
            <method name="attrDef2AttrDesc" type="String" line="881">
                <params>
                    <param name="attrs" type="Attributes"/>
                </params>
                <comment line="883">
                    opening parens                    
                </comment>
                <comment line="888">
                    extract attributes by ID to guarantee ordering                    
                </comment>
                <comment line="971">
                    process any remaining attributes                    
                </comment>
                <comment line="975">
                    use enumeration because attribute ID is not known                    
                </comment>
                <comment line="982">
                    skip those already processed                    
                </comment>
                <comment line="1004">
                    add closing parens                    
                </comment>
                <declaration name="attrDesc" type="StringBuffer" line="883"/>
                <declaration name="attr" type="Attribute" line="885"/>
                <declaration name="count" type="int" line="886"/>
                <scope line="891"/>
                <scope line="894"/>
                <scope line="900"/>
                <scope line="906"/>
                <scope line="912"/>
                <scope line="918"/>
                <scope line="924"/>
                <scope line="930"/>
                <scope line="936"/>
                <scope line="942"/>
                <scope line="948"/>
                <scope line="954"/>
                <scope line="960"/>
                <scope line="966"/>
                <scope line="972">
                    <declaration name="attrId" type="String" line="973"/>
                    <scope line="977">
                        <scope line="995"/>
                        <scope line="998"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1009">
                Translate attributes that describe an attribute syntax definition into the
                  string description as defined in RFC 2252.                
            </javadoc>
            <method name="syntaxDef2SyntaxDesc" type="String" line="1014">
                <params>
                    <param name="attrs" type="Attributes"/>
                </params>
                <comment line="1016">
                    opening parens                    
                </comment>
                <comment line="1021">
                    extract attributes by ID to guarantee ordering                    
                </comment>
                <comment line="1038">
                    process any remaining attributes                    
                </comment>
                <comment line="1042">
                    use enumeration because attribute ID is not known                    
                </comment>
                <comment line="1049">
                    skip those already processed                    
                </comment>
                <declaration name="syntaxDesc" type="StringBuffer" line="1016"/>
                <declaration name="attr" type="Attribute" line="1018"/>
                <declaration name="count" type="int" line="1019"/>
                <scope line="1024"/>
                <scope line="1027"/>
                <scope line="1033"/>
                <scope line="1039">
                    <declaration name="attrId" type="String" line="1040"/>
                    <scope line="1044">
                        <scope line="1051"/>
                        <scope line="1054"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1065">
                Translate attributes that describe an attribute matching rule
                  definition into the string description as defined in RFC 2252.                
            </javadoc>
            <method name="matchRuleDef2MatchRuleDesc" type="String" line="1070">
                <params>
                    <param name="attrs" type="Attributes"/>
                </params>
                <comment line="1072">
                    opening parens                    
                </comment>
                <comment line="1077">
                    extract attributes by ID to guarantee ordering                    
                </comment>
                <comment line="1115">
                    process any remaining attributes                    
                </comment>
                <comment line="1119">
                    use enumeration because attribute ID is not known                    
                </comment>
                <comment line="1126">
                    skip those already processed                    
                </comment>
                <declaration name="matchRuleDesc" type="StringBuffer" line="1072"/>
                <declaration name="attr" type="Attribute" line="1074"/>
                <declaration name="count" type="int" line="1075"/>
                <scope line="1080"/>
                <scope line="1083"/>
                <scope line="1089"/>
                <scope line="1095"/>
                <scope line="1101"/>
                <scope line="1107"/>
                <scope line="1110"/>
                <scope line="1116">
                    <declaration name="attrId" type="String" line="1117"/>
                    <scope line="1121">
                        <scope line="1131"/>
                        <scope line="1134"/>
                    </scope>
                </scope>
            </method>
            <method name="writeNumericOID" type="String" line="1146">
                <params>
                    <param name="nOIDAttr" type="Attribute"/>
                </params>
                <scope line="1147"/>
            </method>
            <method name="writeWOID" type="String" line="1154">
                <params>
                    <param name="attr" type="Attribute"/>
                </params>
            </method>
            <method name="writeQDString" type="String" line="1163">
                <params>
                    <param name="qdStringAttr" type="Attribute"/>
                </params>
                <scope line="1164"/>
            </method>
            <javadoc line="1173">
                dstring         = 1utf8
                  qdstring        = whsp &quot;&apos;&quot; dstring &quot;&apos;&quot; whsp
                  qdstringlist    = [ qdstring ( qdstring ) ]
                  qdstrings       = qdstring / ( whsp &quot;(&quot; qdstringlist &quot;)&quot; whsp )                
            </javadoc>
            <method name="writeQDStrings" type="String" line="1179">
                <params>
                    <param name="attr" type="Attribute"/>
                </params>
            </method>
            <javadoc line="1183">
                qdescrs         = qdescr / ( whsp &quot;(&quot; qdescrlist &quot;)&quot; whsp )
                  qdescrlist      = [ qdescr ( qdescr ) ]
                  qdescr          = whsp &quot;&apos;&quot; descr &quot;&apos;&quot; whsp
                  descr           = keystring                
            </javadoc>
            <method name="writeQDescrs" type="String" line="1189">
                <params>
                    <param name="attr" type="Attribute"/>
                </params>
                <comment line="1198">
                    write QDList                    
                </comment>
                <declaration name="qdList" type="StringBuffer" line="1200"/>
                <declaration name="values" type="NamingEnumeration" line="1204"/>
                <scope line="1206"/>
            </method>
            <method name="writeOIDs" type="String" line="1221">
                <params>
                    <param name="oidsAttr" type="Attribute"/>
                </params>
                <comment line="1230">
                    %%% write out as list to avoid crashing server                    
                </comment>
                <comment line="1235">
                    write OID List                    
                </comment>
                <scope line="1229"/>
                <declaration name="oidList" type="StringBuffer" line="1237"/>
                <declaration name="values" type="NamingEnumeration" line="1241"/>
                <scope line="1245"/>
            </method>
            <method name="writeBoolean" type="String" line="1260">
                <params>
                    <param name="booleanAttr" type="Attribute"/>
                </params>
            </method>
            <javadoc line="1264">
                Returns an attribute for updating the Object Class Definition schema
                  attribute                
            </javadoc>
            <method name="stringifyObjDesc" type="Attribute" line="1269">
                <params>
                    <param name="classDefAttrs" type="Attributes"/>
                </params>
                <declaration name="objDescAttr" type="Attribute" line="1270"/>
            </method>
            <javadoc line="1275">
                Returns an attribute for updating the Attribute Definition schema attribute                
            </javadoc>
            <method name="stringifyAttrDesc" type="Attribute" line="1279">
                <params>
                    <param name="attrDefAttrs" type="Attributes"/>
                </params>
                <declaration name="attrDescAttr" type="Attribute" line="1280"/>
            </method>
            <javadoc line="1285">
                Returns an attribute for updating the Syntax schema attribute                
            </javadoc>
            <method name="stringifySyntaxDesc" type="Attribute" line="1289">
                <params>
                    <param name="syntaxDefAttrs" type="Attributes"/>
                </params>
                <declaration name="syntaxDescAttr" type="Attribute" line="1290"/>
            </method>
            <javadoc line="1295">
                Returns an attribute for updating the Matching Rule schema attribute                
            </javadoc>
            <method name="stringifyMatchRuleDesc" type="Attribute" line="1299">
                <params>
                    <param name="matchRuleDefAttrs" type="Attributes"/>
                </params>
                <declaration name="matchRuleDescAttr" type="Attribute" line="1300"/>
            </method>
        </class>
    </source>