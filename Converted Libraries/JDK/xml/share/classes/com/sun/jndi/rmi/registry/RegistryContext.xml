<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.rmi.registry">
        <import package="java.util.Hashtable"/>
        <import package="java.util.Properties"/>
        <import package="java.rmi"/>
        <import package="java.rmi.server"/>
        <import package="java.rmi.registry.Registry"/>
        <import package="java.rmi.registry.LocateRegistry"/>
        <import package="javax.naming"/>
        <import package="javax.naming.spi.NamingManager"/>
        <class name="RegistryContext" line="40">
            <comment line="57">
                ref used to create this context, if any                
            </comment>
            <comment line="59">
                Environment property that, if set, indicates that a security
                 manager should be installed (if none is already in place).                
            </comment>
            <comment line="493">
                index into &quot;names&quot;                
            </comment>
            <comment line="548">
                index into &quot;names&quot;                
            </comment>
            <implements interface="Context"/>
            <implements interface="Referenceable"/>
            <javadoc line="40">
                A RegistryContext is a context representing a remote RMI registry.                
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="environment" type="Hashtable" line="49"/>
            <declaration name="registry" type="Registry" line="50"/>
            <declaration name="host" type="String" line="51"/>
            <declaration name="port" type="int" line="52"/>
            <declaration name="nameParser" type="NameParser" line="53"/>
            <declaration name="SOCKET_FACTORY" type="String" line="54"/>
            <declaration name="reference" type="Reference" line="56"/>
            <declaration name="SECURITY_MGR" type="String" line="60"/>
            <javadoc line="63">
                Returns a context for the registry at a given host and port.
                  If &quot;host&quot; is null, uses default host.
                  If &quot;port&quot; is non-positive, uses default port.
                  Cloning of &quot;env&quot; is handled by caller; see comments within
                  RegistryContextFactory.getObjectInstance(), for example.                
            </javadoc>
            <method name="RegistryContext" type="constructor" line="72">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="env" type="Hashtable"/>
                </params>
                <comment line="79">
                    chop off &apos;[&apos; and &apos;]&apos; in an IPv6 literal address                    
                </comment>
                <scope line="74"/>
                <scope line="79"/>
                <declaration name="socketFactory" type="RMIClientSocketFactory" line="83"/>
            </method>
            <javadoc line="90">
                Returns a clone of a registry context.  The context&apos;s private state
                  is independent of the original&apos;s (so closing one context, for example,
                  won&apos;t close the other).                
            </javadoc>
            <method name="RegistryContext" type="constructor" line="96">
                <params>
                    <param name="ctx" type="RegistryContext"/>
                </params>
                <comment line="96">
                    %%% Alternatively, this could be done with a clone() method.                    
                </comment>
            </method>
            <method name="finalize" type="void" line="104"/>
            <method name="lookup" type="Object" line="108">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <scope line="109"/>
                <declaration name="obj" type="Remote" line="112"/>
                <scope line="113"/>
                <scope line="115"/>
                <scope line="117"/>
            </method>
            <method name="lookup" type="Object" line="123">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="127">
                If the object to be bound is both Remote and Referenceable, binds the
                  object itself, not its Reference.                
            </javadoc>
            <method name="bind" type="void" line="131">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="132"/>
                <scope line="136"/>
                <scope line="138">
                    <declaration name="ne" type="NamingException" line="139"/>
                </scope>
                <scope line="142"/>
            </method>
            <method name="bind" type="void" line="147">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="rebind" type="void" line="151">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="152"/>
                <scope line="156"/>
                <scope line="158"/>
            </method>
            <method name="rebind" type="void" line="163">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="unbind" type="void" line="167">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <comment line="176">
                    method is idempotent                    
                </comment>
                <scope line="168"/>
                <scope line="172"/>
                <scope line="174"/>
                <scope line="176"/>
            </method>
            <method name="unbind" type="void" line="181">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="185">
                Rename is implemented by this sequence of operations:
                  lookup, bind, unbind.  The sequence is not performed atomically.                
            </javadoc>
            <method name="rename" type="void" line="189">
                <params>
                    <param name="oldName" type="Name"/>
                    <param name="newName" type="Name"/>
                </params>
            </method>
            <method name="rename" type="void" line="194">
                <params>
                    <param name="name" type="String"/>
                    <param name="newName" type="String"/>
                </params>
            </method>
            <method name="list" type="NamingEnumeration" line="198">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <scope line="199"/>
                <scope line="203">
                    <declaration name="names" type="String[]" line="204"/>
                </scope>
                <scope line="206"/>
            </method>
            <method name="list" type="NamingEnumeration" line="211">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="listBindings" type="NamingEnumeration" line="217">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <scope line="218"/>
                <scope line="222">
                    <declaration name="names" type="String[]" line="223"/>
                </scope>
                <scope line="225"/>
            </method>
            <method name="listBindings" type="NamingEnumeration" line="230">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="destroySubcontext" type="void" line="234">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="destroySubcontext" type="void" line="238">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="createSubcontext" type="Context" line="242">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="createSubcontext" type="Context" line="246">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="lookupLink" type="Object" line="250">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="lookupLink" type="Object" line="254">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getNameParser" type="NameParser" line="258">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="getNameParser" type="NameParser" line="262">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="composeName" type="Name" line="266">
                <params>
                    <param name="name" type="Name"/>
                    <param name="prefix" type="Name"/>
                </params>
                <declaration name="result" type="Name" line="267"/>
            </method>
            <method name="composeName" type="String" line="273">
                <params>
                    <param name="name" type="String"/>
                    <param name="prefix" type="String"/>
                </params>
            </method>
            <method name="removeFromEnvironment" type="Object" line="280">
                <params>
                    <param name="propName" type="String"/>
                </params>
            </method>
            <method name="addToEnvironment" type="Object" line="286">
                <params>
                    <param name="propName" type="String"/>
                    <param name="propVal" type="Object"/>
                </params>
                <scope line="287"/>
            </method>
            <method name="getEnvironment" type="Hashtable" line="293"/>
            <method name="close" type="void" line="297">
                <comment line="301">
                    &amp;&amp;&amp; If we were caching registry connections, we would probably
                     uncache this one now.                    
                </comment>
            </method>
            <method name="getNameInNamespace" type="String" line="304">
                <comment line="306">
                    Registry has an empty name                    
                </comment>
            </method>
            <javadoc line="308">
                Returns an RMI registry reference for this context.
                  &lt;p&gt;
                  If this context was created from a reference, that reference is
                  returned.  Otherwise, an exception is thrown if the registry&apos;s
                  host is &quot;localhost&quot; or the default (null).  Although this could
                  possibly make for a valid reference, it&apos;s far more likely to be
                  an easily made error.                
                <see>
                    RegistryContextFactory                    
                </see>
            </javadoc>
            <method name="getReference" type="Reference" line="319">
                <comment line="322">
                    %%% clone the addrs too?                    
                </comment>
                <comment line="331">
                    Enclose IPv6 literal address in &apos;[&apos; and &apos;]&apos;                    
                </comment>
                <scope line="320"/>
                <scope line="323"/>
                <declaration name="url" type="String" line="328"/>
                <scope line="333"/>
                <declaration name="addr" type="RefAddr" line="336"/>
            </method>
            <javadoc line="345">
                Wrap a RemoteException inside a NamingException.                
            </javadoc>
            <method name="wrapRemoteException" type="NamingException" line="348">
                <params>
                    <param name="re" type="RemoteException"/>
                </params>
                <declaration name="ne" type="NamingException" line="350"/>
                <scope line="352"/>
                <scope line="355"/>
                <scope line="360"/>
                <scope line="367"/>
                <scope line="371"/>
                <scope line="374"/>
            </method>
            <javadoc line="381">
                Returns the registry at a given host, port and socket factory.
                  If &quot;host&quot; is null, uses default host.
                  If &quot;port&quot; is non-positive, uses default port.
                  If &quot;socketFactory&quot; is null, uses the default socket.                
            </javadoc>
            <method name="getRegistry" type="Registry" line="390">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="socketFactory" type="RMIClientSocketFactory"/>
                </params>
                <comment line="392">
                    %%% We could cache registry connections here.  The transport layer
                     may already reuse connections.                    
                </comment>
                <scope line="393">
                    <scope line="394"/>
                    <scope line="396"/>
                </scope>
                <scope line="399"/>
            </method>
            <javadoc line="404">
                Attempts to install a security manager if none is currently in
                  place.                
            </javadoc>
            <method name="installSecurityMgr" type="void" line="408">
                <scope line="410"/>
                <scope line="412"/>
            </method>
            <javadoc line="416">
                Encodes an object prior to binding it in the registry.  First,
                  NamingManager.getStateToBind() is invoked.  If the resulting
                  object is Remote, it is returned.  If it is a Reference or
                  Referenceable, the reference is wrapped in a Remote object.
                  Otherwise, an exception is thrown.                
                <param>
                    name      The object's name relative to this context.                    
                </param>
            </javadoc>
            <method name="encodeObject" type="Remote" line="427">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="name" type="Name"/>
                </params>
                <scope line="430"/>
                <scope line="433"/>
                <scope line="436"/>
            </method>
            <javadoc line="444">
                Decodes an object that has been retrieved from the registry.
                  First, if the object is a RemoteReference, the Reference is
                  unwrapped.  Then, NamingManager.getObjectInstance() is invoked.                
                <param>
                    name      The object's name relative to this context.                    
                </param>
            </javadoc>
            <method name="decodeObject" type="Object" line="451">
                <params>
                    <param name="r" type="Remote"/>
                    <param name="name" type="Name"/>
                </params>
                <scope line="452">
                    <declaration name="obj" type="Object" line="453"/>
                </scope>
                <scope line="458"/>
                <scope line="460"/>
                <scope line="463">
                    <declaration name="ne" type="NamingException" line="464"/>
                </scope>
            </method>
        </class>
        <class name="AtomicNameParser" line="473">
            <comment line="57">
                ref used to create this context, if any                
            </comment>
            <comment line="59">
                Environment property that, if set, indicates that a security
                 manager should be installed (if none is already in place).                
            </comment>
            <comment line="493">
                index into &quot;names&quot;                
            </comment>
            <comment line="548">
                index into &quot;names&quot;                
            </comment>
            <implements interface="NameParser"/>
            <javadoc line="473">
                A name parser for case-sensitive atomic names.                
            </javadoc>
            <declaration name="syntax" type="Properties" line="477"/>
            <method name="parse" type="Name" line="479">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
        </class>
        <class name="NameClassPairEnumeration" line="485">
            <comment line="57">
                ref used to create this context, if any                
            </comment>
            <comment line="59">
                Environment property that, if set, indicates that a security
                 manager should be installed (if none is already in place).                
            </comment>
            <comment line="493">
                index into &quot;names&quot;                
            </comment>
            <comment line="548">
                index into &quot;names&quot;                
            </comment>
            <implements interface="NamingEnumeration"/>
            <javadoc line="485">
                An enumeration of name / class-name pairs.  Since we don&apos;t know anything
                  about the classes, each class name is returned as the generic
                  &quot;java.lang.Object&quot;.                
            </javadoc>
            <declaration name="names" type="String[]" line="491"/>
            <declaration name="nextName" type="int" line="492"/>
            <method name="NameClassPairEnumeration" type="constructor" line="494">
                <params>
                    <param name="names" type="String[]"/>
                </params>
            </method>
            <method name="hasMore" type="boolean" line="499"/>
            <method name="next" type="Object" line="503">
                <comment line="508">
                    Convert name to a one-element composite name, so embedded
                     meta-characters are properly escaped.                    
                </comment>
                <scope line="504"/>
                <declaration name="name" type="String" line="509"/>
                <declaration name="cname" type="Name" line="510"/>
                <declaration name="ncp" type="NameClassPair" line="511"/>
            </method>
            <method name="hasMoreElements" type="boolean" line="517"/>
            <method name="nextElement" type="Object" line="521">
                <comment line="525">
                    should never happen                    
                </comment>
                <scope line="522"/>
                <scope line="524"/>
            </method>
            <method name="close" type="void" line="530"/>
        </class>
        <class name="BindingEnumeration" line="536">
            <comment line="57">
                ref used to create this context, if any                
            </comment>
            <comment line="59">
                Environment property that, if set, indicates that a security
                 manager should be installed (if none is already in place).                
            </comment>
            <comment line="493">
                index into &quot;names&quot;                
            </comment>
            <comment line="548">
                index into &quot;names&quot;                
            </comment>
            <implements interface="NamingEnumeration"/>
            <javadoc line="536">
                An enumeration of Bindings.
                  The actual registry lookups are performed when next() is called.  It would
                  be nicer to defer this until the object (or its class name) is actually
                  requested.  The problem with that approach is that Binding.getObject()
                  cannot throw NamingException.                
            </javadoc>
            <declaration name="ctx" type="RegistryContext" line="545"/>
            <declaration name="names" type="String[]" line="546"/>
            <declaration name="nextName" type="int" line="547"/>
            <method name="BindingEnumeration" type="constructor" line="549">
                <params>
                    <param name="ctx" type="RegistryContext"/>
                    <param name="names" type="String[]"/>
                </params>
                <comment line="551">
                    Clone ctx in case someone closes it before we&apos;re through.                    
                </comment>
            </method>
            <method name="finalize" type="void" line="556"/>
            <method name="hasMore" type="boolean" line="560">
                <scope line="561"/>
            </method>
            <method name="next" type="Object" line="567">
                <comment line="572">
                    Convert name to a one-element composite name, so embedded
                     meta-characters are properly escaped.                    
                </comment>
                <scope line="568"/>
                <declaration name="name" type="String" line="573"/>
                <declaration name="cname" type="Name" line="574"/>
                <declaration name="obj" type="Object" line="576"/>
                <declaration name="cnameStr" type="String" line="577"/>
                <declaration name="binding" type="Binding" line="578"/>
            </method>
            <method name="hasMoreElements" type="boolean" line="583"/>
            <method name="nextElement" type="Object" line="587">
                <scope line="588"/>
                <scope line="590"/>
            </method>
            <method name="close" type="void" line="596"/>
        </class>
    </source>