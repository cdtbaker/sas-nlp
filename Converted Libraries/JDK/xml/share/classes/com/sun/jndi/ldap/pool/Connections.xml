<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap.pool">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.util.Iterator"/>
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="javax.naming.NamingException"/>
        <import package="javax.naming.InterruptedNamingException"/>
        <import package="javax.naming.CommunicationException"/>
        <class name="Connections" line="10">
            <implements interface="PoolCallback"/>
            <javadoc line="10">
                Represents a list of PooledConnections (actually, ConnectionDescs) with the
                  same pool id.
                  The list starts out with an initial number of connections.
                  Additional PooledConnections are created lazily upon demand.
                  The list has a maximum size. When the number of connections
                  reaches the maximum size, a request for a PooledConnection blocks until
                  a connection is returned to the list. A maximum size of zero means that
                  there is no maximum: connection creation will be attempted when
                  no idle connection is available.
                  The list may also have a preferred size. If the current list size
                  is less than the preferred size, a request for a connection will result in
                  a PooledConnection being created (even if an idle connection is available).
                  If the current list size is greater than the preferred size,
                  a connection being returned to the list will be closed and removed from
                  the list. A preferred size of zero means that there is no preferred size:
                  connections are created only when no idle connection is available and
                  a connection being returned to the list is not closed. Regardless of the
                  preferred size, connection creation always observes the maximum size:
                  a connection won&apos;t be created if the list size is at or exceeds the
                  maximum size.                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="debug" type="boolean" line="34"/>
            <declaration name="trace" type="boolean" line="35"/>
            <declaration name="DEFAULT_SIZE" type="int" line="36"/>
            <declaration name="maxSize" type="int" line="37"/>
            <declaration name="prefSize" type="int" line="38"/>
            <declaration name="conns" type="List" line="39"/>
            <declaration name="closed" type="boolean" line="40"/>
            <declaration name="ref" type="Reference" line="41"/>
            <javadoc line="42">
                @param id the identity (connection request) of the connections in the list                
                <param>
                    initSize the number of connections to create initially                    
                </param>
                <param>
                    prefSize the preferred size of the pool. The pool will try
                      to maintain a pool of this size by creating and closing connections
                      as needed.                    
                </param>
                <param>
                    maxSize the maximum size of the pool. The pool will not exceed
                      this size. If the pool is at this size, a request for a connection
                      will block until an idle connection is released to the pool or
                      when one is removed.                    
                </param>
                <param>
                    factory The factory responsible for creating a connection                    
                </param>
            </javadoc>
            <method name="Connections" type="constructor" line="54">
                <params>
                    <param name="id" type="Object"/>
                    <param name="initSize" type="int"/>
                    <param name="prefSize" type="int"/>
                    <param name="maxSize" type="int"/>
                    <param name="factory" type="PooledConnectionFactory"/>
                </params>
                <scope line="56"/>
                <scope line="60"/>
                <declaration name="conn" type="PooledConnection" line="68"/>
                <scope line="69"/>
            </method>
            <javadoc line="75">
                Retrieves a PooledConnection from this list of connections.
                  Use an existing one if one is idle, or create one if the list&apos;s
                  max size hasn&apos;t been reached. If max size has been reached, wait
                  for a PooledConnection to be returned, or one to be removed (thus
                  not reaching the max size any longer).                
                <param>
                    timeout if > 0, msec to wait until connection is available                    
                </param>
                <param>
                    factory creates the PooledConnection if one needs to be created                    
                </param>
                <return>
                    A non-null PooledConnection                    
                </return>
                <throws>
                    NamingException PooledConnection cannot be created, because this
                      thread was interrupted while it waited for an available connection,
                      or if it timed out while waiting, or the creation of a connection
                      resulted in an error.                    
                </throws>
            </javadoc>
            <method name="get" type="PooledConnection" line="89">
                <params>
                    <param name="timeout" type="long"/>
                    <param name="factory" type="PooledConnectionFactory"/>
                </params>
                <declaration name="conn" type="PooledConnection" line="90"/>
                <declaration name="start" type="long" line="91"/>
                <declaration name="waittime" type="long" line="92"/>
                <scope line="94">
                    <scope line="95"/>
                    <scope line="98">
                        <scope line="100"/>
                        <scope line="103"/>
                    </scope>
                    <scope line="107"/>
                    <scope line="110">
                        <declaration name="now" type="long" line="111"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="118">
                Retrieves an idle connection from this list if one is available.
                  If none is available, create a new one if maxSize hasn&apos;t been reached.
                  If maxSize has been reached, return null.
                  Always called from a synchronized method.                
            </javadoc>
            <method name="getOrCreateConnection" type="PooledConnection" line="124">
                <params>
                    <param name="factory" type="PooledConnectionFactory"/>
                </params>
                <declaration name="size" type="int" line="125"/>
                <declaration name="conn" type="PooledConnection" line="126"/>
                <scope line="127">
                    <declaration name="entry" type="ConnectionDesc" line="128"/>
                    <scope line="129">
                        <scope line="131"/>
                    </scope>
                </scope>
                <scope line="138"/>
            </method>
            <javadoc line="146">
                Releases connection back into list.
                  If the list size is below prefSize, the connection may be reused.
                  If the list size exceeds prefSize, then the connection is closed
                  and removed from the list.
                  public because implemented as part of PoolCallback.                
            </javadoc>
            <method name="releasePooledConnection" type="boolean" line="153">
                <params>
                    <param name="conn" type="PooledConnection"/>
                </params>
                <declaration name="entry" type="ConnectionDesc" line="154"/>
                <declaration name="loc" type="int" line="155"/>
                <scope line="157">
                    <scope line="158"/>
                    <scope line="164"/>
                </scope>
                <scope line="174"/>
            </method>
            <javadoc line="178">
                Removes PooledConnection from list of connections.
                  The closing of the connection is separate from this method.
                  This method is called usually when the caller encouters an error
                  when using the connection and wants it removed from the pool.                
                <return>
                    true if conn removed; false if it was not in pool
                      public because implemented as part of PoolCallback.                    
                </return>
            </javadoc>
            <method name="removePooledConnection" type="boolean" line="186">
                <params>
                    <param name="conn" type="PooledConnection"/>
                </params>
                <scope line="187">
                    <scope line="192"/>
                </scope>
                <scope line="197"/>
            </method>
            <javadoc line="202">
                Goes through all entries in list, removes and closes ones that have been
                  idle before threshold.                
                <param>
                    threshold an entry idle since this time has expired.                    
                </param>
                <return>
                    true if no more connections in list                    
                </return>
            </javadoc>
            <method name="expire" type="boolean" line="208">
                <params>
                    <param name="threshold" type="long"/>
                </params>
                <declaration name="iter" type="Iterator" line="209"/>
                <declaration name="entry" type="ConnectionDesc" line="210"/>
                <scope line="211">
                    <scope line="213"/>
                </scope>
            </method>
            <javadoc line="221">
                Called when this instance of Connections has been removed from Pool.
                  This means that no one can get any pooled connections from this
                  Connections any longer. Expire all idle connections as of &apos;now&apos;
                  and leave indicator so that any in-use connections will be closed upon
                  their return.                
            </javadoc>
            <method name="close" type="void" line="228"/>
            <method name="getStats" type="String" line="232">
                <declaration name="idle" type="int" line="233"/>
                <declaration name="busy" type="int" line="234"/>
                <declaration name="expired" type="int" line="235"/>
                <declaration name="use" type="long" line="236"/>
                <declaration name="len" type="int" line="237"/>
                <scope line="238">
                    <declaration name="entry" type="ConnectionDesc" line="240"/>
                    <scope line="241"/>
                </scope>
            </method>
            <method name="d" type="void" line="258">
                <params>
                    <param name="msg" type="String"/>
                    <param name="o1" type="Object"/>
                </params>
                <scope line="259"/>
            </method>
            <method name="d" type="void" line="263">
                <params>
                    <param name="msg" type="String"/>
                    <param name="i" type="int"/>
                </params>
                <scope line="264"/>
            </method>
            <method name="d" type="void" line="268">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="269"/>
            </method>
            <method name="td" type="void" line="273">
                <params>
                    <param name="msg" type="String"/>
                    <param name="o1" type="Object"/>
                    <param name="o2" type="Object"/>
                </params>
                <scope line="274"/>
            </method>
            <method name="td" type="void" line="278">
                <params>
                    <param name="msg" type="String"/>
                    <param name="o1" type="Object"/>
                </params>
                <scope line="279"/>
            </method>
            <method name="td" type="void" line="283">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="284"/>
            </method>
        </class>
    </source>