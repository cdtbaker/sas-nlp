<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap.ext">
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.net.Socket"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.security.Principal"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="javax.net.ssl.SSLSession"/>
        <import package="javax.net.ssl.SSLSocket"/>
        <import package="javax.net.ssl.SSLSocketFactory"/>
        <import package="javax.net.ssl.SSLPeerUnverifiedException"/>
        <import package="javax.net.ssl.SSLContext"/>
        <import package="javax.net.ssl.HostnameVerifier"/>
        <import package="sun.security.util.HostnameChecker"/>
        <import package="javax.naming"/>
        <import package="javax.naming.ldap"/>
        <import package="com.sun.jndi.ldap.Connection"/>
        <class name="StartTlsResponseImpl" line="56">
            <extends class="StartTlsResponse"/>
            <comment line="78">
                The dNSName type in a subjectAltName extension of an X.509 certificate                
            </comment>
            <comment line="83">
                The server&apos;s hostname.                
            </comment>
            <comment line="88">
                The LDAP socket.                
            </comment>
            <comment line="93">
                The original input stream.                
            </comment>
            <comment line="98">
                The original output stream.                
            </comment>
            <comment line="103">
                The SSL socket.                
            </comment>
            <comment line="108">
                The SSL socket factories.                
            </comment>
            <comment line="114">
                The list of cipher suites to be enabled.                
            </comment>
            <comment line="119">
                The hostname verifier callback.                
            </comment>
            <comment line="124">
                The flag to indicate that the TLS connection is closed.                
            </comment>
            <comment line="131">
                public no-arg constructor required by JDK&apos;s Service Provider API.                
            </comment>
            <comment line="305">
                Returns the default SSL socket factory.
                
                 @return The default SSL socket factory.
                 @throw IOException If TLS is not supported.                
            </comment>
            <comment line="321">
                Start the TLS handshake and manipulate the input and output streams.
                
                 @param factory The SSL socket factory to use.
                 @return The SSL socket.
                 @throw IOException If an exception occurred while performing the
                 TLS handshake.                
            </comment>
            <comment line="389">
                Verifies that the hostname in the server&apos;s certificate matches the
                 hostname of the server.
                 The server&apos;s first certificate is examined. If it has a subjectAltName
                 that contains a dNSName then that is used as the server&apos;s hostname.
                 The server&apos;s hostname may contain a wildcard for its left-most name part.
                 Otherwise, if the certificate has no subjectAltName then the value of
                 the common name attribute of the subject name is used.
                
                 @param hostname The hostname of the server.
                 @param session the SSLSession used on the connection to host.
                 @return true if the hostname is verified, false otherwise.                
            </comment>
            <comment line="464">
                Get the peer principal from the session                
            </comment>
            <javadoc line="56">
                This class implements the LDAPv3 Extended Response for StartTLS as
                  defined in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2830.txt&quot;&gt;Lightweight Directory
                  Access Protocol (v3): Extension for Transport Layer Security&lt;/a&gt;
                  The object identifier for StartTLS is 1.3.6.1.4.1.1466.20037
                  and no extended response value is defined.
                  &lt;p&gt;
                  The Start TLS extended request and response are used to establish
                  a TLS connection over the existing LDAP connection associated with
                  the JNDI context on which &lt;tt&gt;extendedOperation()&lt;/tt&gt; is invoked.                
                <see>
                    StartTlsRequest                    
                </see>
                <author>
                    Vincent Ryan                    
                </author>
            </javadoc>
            <declaration name="debug" type="boolean" line="75"/>
            <declaration name="DNSNAME_TYPE" type="int" line="80"/>
            <declaration name="hostname" type="String" line="85"/>
            <declaration name="ldapConnection" type="Connection" line="90"/>
            <declaration name="originalInputStream" type="InputStream" line="95"/>
            <declaration name="originalOutputStream" type="OutputStream" line="100"/>
            <declaration name="sslSocket" type="SSLSocket" line="105"/>
            <declaration name="defaultFactory" type="SSLSocketFactory" line="110"/>
            <declaration name="currentFactory" type="SSLSocketFactory" line="111"/>
            <declaration name="suites" type="String[]" line="116"/>
            <declaration name="verifier" type="HostnameVerifier" line="121"/>
            <declaration name="isClosed" type="boolean" line="126"/>
            <declaration name="serialVersionUID" type="long" line="128"/>
            <method name="StartTlsResponseImpl" type="constructor" line="132"/>
            <javadoc line="134">
                Overrides the default list of cipher suites enabled for use on the
                  TLS connection. The cipher suites must have already been listed by
                  &lt;tt&gt;SSLSocketFactory.getSupportedCipherSuites()&lt;/tt&gt; as being supported.
                  Even if a suite has been enabled, it still might not be used because
                  the peer does not support it, or because the requisite certificates
                  (and private keys) are not available.                
                <param>
                    suites The non-null list of names of all the cipher suites to
                      enable.                    
                </param>
                <see>
                    #negotiate                    
                </see>
            </javadoc>
            <method name="setEnabledCipherSuites" type="void" line="146">
                <params>
                    <param name="suites" type="String[]"/>
                </params>
            </method>
            <javadoc line="150">
                Overrides the default hostname verifier used by &lt;tt&gt;negotiate()&lt;/tt&gt;
                  after the TLS handshake has completed. If
                  &lt;tt&gt;setHostnameVerifier()&lt;/tt&gt; has not been called before
                  &lt;tt&gt;negotiate()&lt;/tt&gt; is invoked, &lt;tt&gt;negotiate()&lt;/tt&gt;
                  will perform a simple case ignore match. If called after
                  &lt;tt&gt;negotiate()&lt;/tt&gt;, this method does not do anything.                
                <param>
                    verifier The non-null hostname verifier callback.                    
                </param>
                <see>
                    #negotiate                    
                </see>
            </javadoc>
            <method name="setHostnameVerifier" type="void" line="161">
                <params>
                    <param name="verifier" type="HostnameVerifier"/>
                </params>
            </method>
            <javadoc line="165">
                Negotiates a TLS session using the default SSL socket factory.
                  &lt;p&gt;
                  This method is equivalent to &lt;tt&gt;negotiate(null)&lt;/tt&gt;.                
                <return>
                    The negotiated SSL session                    
                </return>
                <throw>
                    IOException If an IO error was encountered while establishing
                      the TLS session.                    
                </throw>
                <see>
                    #setEnabledCipherSuites                    
                </see>
                <see>
                    #setHostnameVerifier                    
                </see>
            </javadoc>
            <method name="negotiate" type="SSLSession" line="176"/>
            <javadoc line="181">
                Negotiates a TLS session using an SSL socket factory.
                  &lt;p&gt;
                  Creates an SSL socket using the supplied SSL socket factory and
                  attaches it to the existing connection. Performs the TLS handshake
                  and returns the negotiated session information.
                  &lt;p&gt;
                  If cipher suites have been set via &lt;tt&gt;setEnabledCipherSuites&lt;/tt&gt;
                  then they are enabled before the TLS handshake begins.
                  &lt;p&gt;
                  Hostname verification is performed after the TLS handshake completes.
                  The default check performs a case insensitive match of the server&apos;s
                  hostname against that in the server&apos;s certificate. The server&apos;s
                  hostname is extracted from the subjectAltName in the server&apos;s
                  certificate (if present). Otherwise the value of the common name
                  attribute of the subject name is used. If a callback has
                  been set via &lt;tt&gt;setHostnameVerifier&lt;/tt&gt; then that verifier is used if
                  the default check fails.
                  &lt;p&gt;
                  If an error occurs then the SSL socket is closed and an IOException
                  is thrown. The underlying connection remains intact.                
                <param>
                    factory The possibly null SSL socket factory to use.
                      If null, the default SSL socket factory is used.                    
                </param>
                <return>
                    The negotiated SSL session                    
                </return>
                <throw>
                    IOException If an IO error was encountered while establishing
                      the TLS session.                    
                </throw>
                <see>
                    #setEnabledCipherSuites                    
                </see>
                <see>
                    #setHostnameVerifier                    
                </see>
            </javadoc>
            <method name="negotiate" type="SSLSession" line="211">
                <params>
                    <param name="factory" type="SSLSocketFactory"/>
                </params>
                <comment line="239">
                    Save to return the cause                    
                </comment>
                <comment line="248">
                    Verification failed                    
                </comment>
                <scope line="213"/>
                <scope line="217"/>
                <scope line="221"/>
                <declaration name="sslSession" type="SSLSession" line="225"/>
                <scope line="227"/>
                <declaration name="verifExcep" type="SSLPeerUnverifiedException" line="231"/>
                <scope line="232">
                    <scope line="233"/>
                </scope>
                <scope line="237"/>
                <scope line="242"/>
                <scope line="250"/>
            </method>
            <javadoc line="259">
                Closes the TLS connection gracefully and reverts back to the underlying
                  connection.                
                <throw>
                    IOException If an IO error was encountered while closing the
                      TLS connection                    
                </throw>
            </javadoc>
            <method name="close" type="void" line="266">
                <comment line="278">
                    Replace SSL streams with the original streams                    
                </comment>
                <scope line="268"/>
                <scope line="272"/>
                <scope line="281"/>
            </method>
            <javadoc line="289">
                Sets the connection for TLS to use. The TLS connection will be attached
                  to this connection.                
                <param>
                    ldapConnection The non-null connection to use.                    
                </param>
                <param>
                    hostname The server's hostname. If null, the hostname used to
                      open the connection will be used instead.                    
                </param>
            </javadoc>
            <method name="setConnection" type="void" line="297">
                <params>
                    <param name="ldapConnection" type="Connection"/>
                    <param name="hostname" type="String"/>
                </params>
            </method>
            <method name="getDefaultFactory" type="SSLSocketFactory" line="310">
                <scope line="312"/>
            </method>
            <method name="startHandshake" type="SSLSocket" line="329">
                <params>
                    <param name="factory" type="SSLSocketFactory"/>
                </params>
                <comment line="338">
                    Create SSL socket layered over the existing connection                    
                </comment>
                <comment line="355">
                    Connection must be quite for handshake to proceed                    
                </comment>
                <comment line="368">
                    Replace original streams with the new SSL streams                    
                </comment>
                <comment line="383">
                    pass up exception                    
                </comment>
                <scope line="331"/>
                <scope line="336">
                    <scope line="342"/>
                </scope>
                <scope line="347">
                    <scope line="349"/>
                </scope>
                <scope line="356">
                    <scope line="357"/>
                    <scope line="362"/>
                    <scope line="370"/>
                </scope>
                <scope line="374">
                    <scope line="375"/>
                </scope>
            </method>
            <method name="verify" type="boolean" line="403">
                <params>
                    <param name="hostname" type="String"/>
                    <param name="session" type="SSLSession"/>
                </params>
                <comment line="408">
                    if IPv6 strip off the &quot;[]&quot;                    
                </comment>
                <comment line="416">
                    Use ciphersuite to determine whether Kerberos is active.                    
                </comment>
                <comment line="424">
                    X.509                    
                </comment>
                <comment line="426">
                    get the subject&apos;s certificate                    
                </comment>
                <comment line="438">
                    no exception means verification passed                    
                </comment>
                <comment line="442">
                    The application may enable an anonymous SSL cipher suite, and
                     hostname verification is not done for anonymous ciphers                    
                </comment>
                <comment line="453">
                    Pass up the cause of the failure                    
                </comment>
                <declaration name="certs" type="java.security.cert.Certificate[]" line="405"/>
                <scope line="409"/>
                <scope line="412">
                    <declaration name="checker" type="HostnameChecker" line="413"/>
                    <scope line="416">
                        <declaration name="principal" type="Principal" line="417"/>
                        <scope line="418"/>
                    </scope>
                    <scope line="423">
                        <declaration name="peerCert" type="X509Certificate" line="427"/>
                        <scope line="428"/>
                        <scope line="430"/>
                    </scope>
                </scope>
                <scope line="439">
                    <declaration name="cipher" type="String" line="445"/>
                    <scope line="446"/>
                </scope>
                <scope line="450"/>
            </method>
            <method name="getPeerPrincipal" type="Principal" line="467">
                <params>
                    <param name="session" type="SSLSession"/>
                </params>
                <comment line="473">
                    if the JSSE provider does not support it, return null, since
                     we need it only for Kerberos.                    
                </comment>
                <declaration name="principal" type="Principal" line="468"/>
                <scope line="469"/>
                <scope line="471"/>
            </method>
        </class>
    </source>