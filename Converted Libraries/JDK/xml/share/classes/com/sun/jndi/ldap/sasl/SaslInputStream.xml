<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap.sasl">
        <import package="javax.security.sasl.Sasl"/>
        <import package="javax.security.sasl.SaslClient"/>
        <import package="javax.security.sasl.SaslException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.EOFException"/>
        <import package="java.io.InputStream"/>
        <class name="SaslInputStream" line="8">
            <extends class="InputStream"/>
            <javadoc line="8">
                This class is used by clients of Java SASL that need to create an input stream
                  that uses SaslClient&apos;s unwrap() method to decode the SASL buffers
                  sent by the SASL server.
                  Extend from InputStream instead of FilterInputStream because
                  we need to override less methods in InputStream. That is, the
                  behavior of the default implementations in InputStream matches
                  more closely with the behavior we want in SaslInputStream.                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="debug" type="boolean" line="19"/>
            <declaration name="saslBuffer" type="byte[]" line="20"/>
            <declaration name="lenBuf" type="byte[]" line="21"/>
            <declaration name="buf" type="byte[]" line="22"/>
            <declaration name="bufPos" type="int" line="23"/>
            <declaration name="in" type="InputStream" line="24"/>
            <declaration name="sc" type="SaslClient" line="25"/>
            <declaration name="recvMaxBufSize" type="int" line="26"/>
            <method name="SaslInputStream" type="constructor" line="27">
                <params>
                    <param name="sc" type="SaslClient"/>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="str" type="String" line="31"/>
                <scope line="32">
                    <scope line="33"/>
                    <scope line="36"/>
                </scope>
            </method>
            <method name="read" type="int" line="42">
                <declaration name="inBuf" type="byte[]" line="43"/>
                <declaration name="count" type="int" line="44"/>
                <scope line="45"/>
                <scope line="48"/>
            </method>
            <method name="read" type="int" line="52">
                <params>
                    <param name="inBuf" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="53">
                    <declaration name="actual" type="int" line="54"/>
                    <scope line="55"/>
                    <scope line="58"/>
                </scope>
                <declaration name="avail" type="int" line="62"/>
                <scope line="63"/>
                <scope line="68"/>
            </method>
            <javadoc line="74">
                Fills the buf with more data by reading a SASL buffer, unwrapping it,
                  and leaving the bytes in buf for read() to return.                
                <return>
                    The number of unwrapped bytes available                    
                </return>
            </javadoc>
            <method name="fill" type="int" line="79">
                <declaration name="actual" type="int" line="80"/>
                <scope line="81"/>
                <declaration name="len" type="int" line="84"/>
                <scope line="85"/>
                <scope line="88"/>
                <scope line="92"/>
            </method>
            <javadoc line="99">
                Read requested number of bytes before returning.                
                <return>
                    The number of bytes actually read; -1 if none read                    
                </return>
            </javadoc>
            <method name="readFully" type="int" line="103">
                <params>
                    <param name="inBuf" type="byte[]"/>
                    <param name="total" type="int"/>
                </params>
                <declaration name="count" type="int" line="104"/>
                <scope line="105"/>
                <scope line="108">
                    <scope line="110"/>
                    <scope line="113"/>
                </scope>
            </method>
            <method name="available" type="int" line="121"/>
            <method name="close" type="void" line="124">
                <declaration name="save" type="SaslException" line="125"/>
                <scope line="126"/>
                <scope line="129"/>
                <scope line="133"/>
            </method>
            <javadoc line="137">
                Returns the integer represented by  4 bytes in network byte order.                
            </javadoc>
            <method name="networkByteOrderToInt" type="int" line="140">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="141"/>
                <declaration name="answer" type="int" line="144"/>
                <scope line="145"/>
            </method>
        </class>
    </source>