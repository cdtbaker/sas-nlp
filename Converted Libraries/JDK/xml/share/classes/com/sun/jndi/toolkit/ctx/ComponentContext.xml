<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.toolkit.ctx">
        <import package="java.util.Hashtable"/>
        <import package="javax.naming"/>
        <import package="javax.naming.spi.ResolveResult"/>
        <class name="ComponentContext" line="33">
            <extends class="PartialCompositeContext"/>
            <comment line="53">
                ------ Abstract methods whose implementation are provided by subclass                
            </comment>
            <comment line="55">
                                
            </comment>
            <comment line="80">
                ------ Methods that may need to be overridden by subclass                
            </comment>
            <comment line="82">
                                
            </comment>
            <comment line="136">
                                
            </comment>
            <comment line="217">
                                
            </comment>
            <comment line="219">
                The following methods are called when the Context methods
                 are invoked with a name that has a trailing slash.
                 For naming systems that support implicit nns,
                 the trailing slash signifies the implicit nns.
                 For such naming systems, override these c_*_nns methods.
                
                 For naming systems that do not support implicit nns, the
                 default implementations here throw an exception.  See
                 c_processJunction_nns() for details.                
            </comment>
            <comment line="291">
                ------ internal method used by ComponentContext                
            </comment>
            <comment line="462">
                When c_resolveIntermediate_nns() or c_lookup_nns() sets up
                 its continuation, to indicate &quot;nns&quot;, it appends an empty
                 component to the remaining name (e.g. &quot;eng/&quot;). If last
                 component of remaining name is empty; delete empty component
                 before appending tail so that composition of the names work
                 correctly. For example, when merging &quot;eng/&quot; and &quot;c.b.a&quot;, we want
                 the result to be &quot;eng/c.b.a&quot; because the trailing slash in eng
                 is extraneous.  When merging &quot;&quot; and &quot;c.b.a&quot;, we want the result
                 to be &quot;/c.b.a&quot; and so must keep the trailing slash (empty name).                
            </comment>
            <comment line="479">
                Returns true if n contains only empty components                
            </comment>
            <comment line="492">
                ------ implementations of p_ Resolver and Context methods using
                 ------ corresponding c_ and c_*_nns methods                
            </comment>
            <comment line="496">
                                
            </comment>
            <comment line="530">
                                
            </comment>
            <javadoc line="33">
                Provides implementation of p_ operations using
                  c_ operations provided by subclasses.
                  Clients: deal only with names for its own naming service.  Must
                  provide implementations for c_ methods, and for p_parseComponent()
                  and the c__nns methods if the defaults are not appropriate.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="debug" type="int" line="46"/>
            <method name="ComponentContext" type="constructor" line="48"/>
            <method name="c_lookup" type="Object" line="55"/>
            <method name="c_lookupLink" type="Object" line="57"/>
            <method name="c_list" type="NamingEnumeration" line="60"/>
            <method name="c_listBindings" type="NamingEnumeration" line="62"/>
            <method name="c_bind" type="void" line="64"/>
            <method name="c_rebind" type="void" line="66"/>
            <method name="c_unbind" type="void" line="68"/>
            <method name="c_destroySubcontext" type="void" line="70"/>
            <method name="c_createSubcontext" type="Context" line="72"/>
            <method name="c_rename" type="void" line="74"/>
            <method name="c_getNameParser" type="NameParser" line="76"/>
            <javadoc line="82">
                Determines which of the first components of &apos;name&apos; belong
                  to this naming system.
                  If no components belong to this naming system, return
                  the empty name (new CompositeName()) as the head,
                  and the entire name as the tail.
                  The default implementation supports strong separation.
                  If the name is empty or if the first component is empty,
                  head is the empty name and tail is the entire name.
                  (This means that this context does not have any name to work with).
                  Otherwise, it returns the first component as head, and the rest of
                  the components as tail.
                  Subclass should override this method according its own policies.
                  For example, a weakly separated system with dynamic boundary
                  determination would simply return as head &apos;name&apos;.
                  A weakly separated with static boundary
                  determination would select the components in the front of &apos;name&apos;
                  that conform to some syntax rules.  (e.g. in X.500 syntax, perhaps
                  select front components that have a equal sign).
                  If none conforms, return an empty name.                
            </javadoc>
            <method name="p_parseComponent" type="HeadTail" line="107">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="110">
                    if no name to parse, or if we&apos;re already at boundary                    
                </comment>
                <comment line="122">
                    treat like compound name                    
                </comment>
                <declaration name="separator" type="int" line="108"/>
                <scope line="110"/>
                <scope line="112"/>
                <declaration name="head" type="Name" line="115"/>
                <scope line="117"/>
                <scope line="120"/>
                <scope line="126"/>
            </method>
            <javadoc line="137">
                Resolves the nns for &apos;name&apos; when the named context is acting
                  as an intermediate context.
                  For a system that supports only junctions, this would be
                  equilvalent to
                  c_lookup(name, cont);
                  because for junctions, an intermediate slash simply signifies
                  a syntactic separator.
                  For a system that supports only implicit nns, this would be
                  equivalent to
                  c_lookup_nns(name, cont);
                  because for implicit nns, a slash always signifies the implicit nns,
                  regardless of whether it is intermediate or trailing.
                  By default this method supports junctions, and also allows for an
                  implicit nns to be dynamically determined through the use of the
                  &quot;nns&quot; reference (see c_processJunction_nns()).
                  Contexts that implement implicit nns directly should provide an
                  appropriate override.
                  A junction, by definition, is a binding of a name in one
                  namespace to an object in another.  The default implementation
                  of this method detects the crossover into another namespace
                  using the following heuristic:  there is a junction when &quot;name&quot;
                  resolves to a context that is not an instance of
                  this.getClass().  Contexts supporting junctions for which this
                  heuristic is inappropriate should override this method.                
            </javadoc>
            <method name="c_resolveIntermediate_nns" type="Object" line="168">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="173">
                    Do not append &quot;&quot; to Continuation &apos;cont&apos; even if set
                     because the intention is to ignore the nns                    
                </comment>
                <comment line="177">
                    If &quot;obj&quot; is in the same type as this object, it must
                     not be a junction. Continue the lookup with &quot;/&quot;.                    
                </comment>
                <comment line="184">
                    obj is not even a context, so try to find its nns
                     dynamically by constructing a Reference containing obj.                    
                </comment>
                <comment line="195">
                    Resolved name has trailing slash to indicate nns                    
                </comment>
                <comment line="197">
                    add trailing slash                    
                </comment>
                <comment line="199">
                    Set continuation leave it to
                     PartialCompositeContext.getPCContext() to throw CPE.
                     Do not use setContinueNNS() because we&apos;ve already
                     consumed &quot;/&quot; (i.e., moved it to resName).                    
                </comment>
                <comment line="207">
                    Consume &quot;/&quot; and continue                    
                </comment>
                <comment line="212">
                    add nns back                    
                </comment>
                <scope line="169">
                    <declaration name="obj" type="Object" line="170"/>
                    <scope line="175"/>
                    <scope line="182">
                        <anonymous_class line="185">
                            <method name="getContent" type="Object" line="186"/>
                            <declaration name="serialVersionUID" type="long" line="189"/>
                        </anonymous_class>
                        <declaration name="addr" type="RefAddr" line="185"/>
                        <declaration name="ref" type="Reference" line="192"/>
                        <declaration name="resName" type="CompositeName" line="195"/>
                    </scope>
                    <scope line="205"/>
                </scope>
                <scope line="210"/>
            </method>
            <method name="c_lookup_nns" type="Object" line="229">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_lookupLink_nns" type="Object" line="235">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_list_nns" type="NamingEnumeration" line="241">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_listBindings_nns" type="NamingEnumeration" line="247">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_bind_nns" type="void" line="253">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_rebind_nns" type="void" line="258">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_unbind_nns" type="void" line="263">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_createSubcontext_nns" type="Context" line="268">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_destroySubcontext_nns" type="void" line="274">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_rename_nns" type="void" line="280">
                <params>
                    <param name="oldname" type="Name"/>
                    <param name="newname" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <method name="c_getNameParser_nns" type="NameParser" line="285">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
            </method>
            <javadoc line="292">
                Locates the nns using the default policy.  This policy fully
                  handles junctions, but otherwise throws an exception when an
                  attempt is made to resolve an implicit nns.
                  The default policy is as follows:  If there is a junction in
                  the namespace, then resolve to the junction and continue the
                  operation there (thus deferring to that context to find its own
                  nns).  Otherwise, resolve as far as possible and then throw
                  CannotProceedException with the resolved object being a reference:
                  the address type is &quot;nns&quot;, and the address contents is this
                  context.
                  For example, when c_bind_nns(name, obj, ...) is invoked, the
                  caller is attempting to bind the object &quot;obj&quot; to the nns of
                  &quot;name&quot;.  If &quot;name&quot; is a junction, it names an object in another
                  naming system that (presumably) has an nns.  c_bind_nns() will
                  first resolve &quot;name&quot; to a context and then attempt to continue
                  the bind operation there, (thus binding to the nns of the
                  context named by &quot;name&quot;).  If &quot;name&quot; is empty then throw an
                  exception, since this context does not by default support an
                  implicit nns.
                  To implement a context that does support an implicit nns, it is
                  necessary to override this default policy.  This is done by
                  overriding the c__nns() methods (which each call this method
                  by default).                
            </javadoc>
            <method name="c_processJunction_nns" type="void" line="322">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="325">
                    Construct a new Reference that contains this context.                    
                </comment>
                <comment line="335">
                    Set continuation leave it to PartialCompositeContext.getPCContext()
                     to throw the exception.
                     Do not use setContinueNNS() because we&apos;ve are
                     setting relativeResolvedName to &quot;/&quot;.                    
                </comment>
                <comment line="344">
                    lookup name to continue operation in nns                    
                </comment>
                <comment line="352">
                    add nns back                    
                </comment>
                <scope line="323">
                    <anonymous_class line="325">
                        <method name="getContent" type="Object" line="326"/>
                        <declaration name="serialVersionUID" type="long" line="329"/>
                    </anonymous_class>
                    <declaration name="addr" type="RefAddr" line="325"/>
                    <declaration name="ref" type="Reference" line="332"/>
                </scope>
                <scope line="342">
                    <declaration name="target" type="Object" line="344"/>
                    <scope line="347"/>
                </scope>
                <scope line="350"/>
            </method>
            <declaration name="USE_CONTINUATION" type="byte" line="356"/>
            <declaration name="TERMINAL_COMPONENT" type="byte" line="357"/>
            <declaration name="TERMINAL_NNS_COMPONENT" type="byte" line="358"/>
            <javadoc line="360">
                Determine whether &apos;name&apos; is a terminal component in
                  this naming system.
                  If so, return status indicating so, so that caller
                  can perform context operation on this name.
                  If not, then the first component(s) of &apos;name&apos; names
                  an intermediate context.  In that case, resolve these components
                  and set Continuation to be the object named.
                  see test cases at bottom of file.                
            </javadoc>
            <method name="p_resolveIntermediate" type="HeadTail" line="374">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="377">
                    initialize                    
                </comment>
                <comment line="383">
                    System.out.println(&quot;terminal : &quot; + head);                    
                </comment>
                <comment line="386">
                    tail does not begin with &quot;/&quot;                    
                </comment>
                <comment line="387">
                    if (head.isEmpty()) {
                     Context could not find name that it can use
                     illegal syntax error or name not found
                    System.out.println(&quot;nnf exception : &quot; + head);
                    NamingException e = new NameNotFoundException();
                    cont.setError(this, name);
                    throw cont.fillInException(e);
                    } else  {                    
                </comment>
                <comment line="397">
                    head is being used as intermediate context,
                     resolve head and set Continuation with tail                    
                </comment>
                <comment line="401">
                    System.out.println(&quot;resInter : &quot; + head + &quot;=&quot; + obj);                    
                </comment>
                <comment line="413">
                    }                    
                </comment>
                <comment line="417">
                    tail begins with &quot;/&quot;                    
                </comment>
                <comment line="420">
                    System.out.println(&quot;terminal_nns : &quot; + head);                    
                </comment>
                <comment line="422">
                    resolve nns of head and continue with tail.getSuffix(1)                    
                </comment>
                <comment line="426">
                    System.out.println(&quot;lookup_nns : &quot; + head + &quot;=&quot; + obj);                    
                </comment>
                <comment line="431">
                    Name rname = cont.getRemainingName();
                    System.out.println(&quot;cont.rname&quot; + rname);                    
                </comment>
                <comment line="439">
                    head is being used as intermediate context
                     resolve and set continuation to tail                    
                </comment>
                <comment line="443">
                    System.out.println(&quot;resInter2 : &quot; + head + &quot;=&quot; + obj);                    
                </comment>
                <declaration name="ret" type="int" line="375"/>
                <declaration name="p" type="HeadTail" line="377"/>
                <declaration name="tail" type="Name" line="378"/>
                <declaration name="head" type="Name" line="379"/>
                <scope line="381"/>
                <scope line="384">
                    <scope line="398">
                        <declaration name="obj" type="Object" line="399"/>
                        <scope line="403"/>
                    </scope>
                    <scope line="407"/>
                </scope>
                <scope line="415">
                    <scope line="417"/>
                    <scope line="420">
                        <declaration name="newTail" type="Name" line="422"/>
                        <scope line="423">
                            <declaration name="obj" type="Object" line="424"/>
                            <scope line="428"/>
                        </scope>
                        <scope line="433"/>
                    </scope>
                    <scope line="437">
                        <scope line="440">
                            <declaration name="obj" type="Object" line="441"/>
                            <scope line="445"/>
                        </scope>
                        <scope line="449"/>
                    </scope>
                </scope>
            </method>
            <method name="checkAndAdjustRemainingName" type="void" line="470">
                <params>
                    <param name="rname" type="Name"/>
                </params>
                <declaration name="count" type="int" line="471"/>
                <scope line="473"/>
            </method>
            <method name="isAllEmpty" type="boolean" line="479">
                <params>
                    <param name="n" type="Name"/>
                </params>
                <declaration name="count" type="int" line="480"/>
                <scope line="481">
                    <scope line="482"/>
                </scope>
            </method>
            <method name="p_resolveToClass" type="ResolveResult" line="500">
                <params>
                    <param name="name" type="Name"/>
                    <param name="contextType" type="Class"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="519">
                    no contextType found; return null                    
                </comment>
                <comment line="523">
                                        
                </comment>
                <comment line="524">
                                        
                </comment>
                <scope line="502"/>
                <declaration name="ret" type="ResolveResult" line="507"/>
                <declaration name="res" type="HeadTail" line="508"/>
                <declaration name="obj" type="Object" line="511"/>
                <scope line="512"/>
            </method>
            <method name="p_lookup" type="Object" line="531">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="553">
                                        
                </comment>
                <comment line="554">
                                        
                </comment>
                <declaration name="ret" type="Object" line="532"/>
                <declaration name="res" type="HeadTail" line="533"/>
                <scope line="537"/>
                <scope line="545"/>
            </method>
            <method name="p_list" type="NamingEnumeration" line="560">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="578">
                                        
                </comment>
                <comment line="579">
                                        
                </comment>
                <declaration name="ret" type="NamingEnumeration" line="561"/>
                <declaration name="res" type="HeadTail" line="562"/>
            </method>
            <method name="p_listBindings" type="NamingEnumeration" line="585">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="599">
                                        
                </comment>
                <comment line="600">
                                        
                </comment>
                <declaration name="ret" type="NamingEnumeration" line="586"/>
                <declaration name="res" type="HeadTail" line="587"/>
            </method>
            <method name="p_bind" type="void" line="606">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="619">
                                        
                </comment>
                <comment line="620">
                                        
                </comment>
                <declaration name="res" type="HeadTail" line="607"/>
            </method>
            <method name="p_rebind" type="void" line="625">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="638">
                                        
                </comment>
                <comment line="639">
                                        
                </comment>
                <declaration name="res" type="HeadTail" line="626"/>
            </method>
            <method name="p_unbind" type="void" line="644">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="657">
                                        
                </comment>
                <comment line="658">
                                        
                </comment>
                <declaration name="res" type="HeadTail" line="645"/>
            </method>
            <method name="p_destroySubcontext" type="void" line="663">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="676">
                                        
                </comment>
                <comment line="677">
                                        
                </comment>
                <declaration name="res" type="HeadTail" line="664"/>
            </method>
            <method name="p_createSubcontext" type="Context" line="682">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="696">
                                        
                </comment>
                <comment line="697">
                                        
                </comment>
                <declaration name="ret" type="Context" line="683"/>
                <declaration name="res" type="HeadTail" line="684"/>
            </method>
            <method name="p_rename" type="void" line="703">
                <params>
                    <param name="oldName" type="Name"/>
                    <param name="newName" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="716">
                                        
                </comment>
                <comment line="717">
                                        
                </comment>
                <declaration name="res" type="HeadTail" line="704"/>
            </method>
            <method name="p_getNameParser" type="NameParser" line="722">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="736">
                                        
                </comment>
                <comment line="737">
                                        
                </comment>
                <declaration name="ret" type="NameParser" line="723"/>
                <declaration name="res" type="HeadTail" line="724"/>
            </method>
            <method name="p_lookupLink" type="Object" line="743">
                <params>
                    <param name="name" type="Name"/>
                    <param name="cont" type="Continuation"/>
                </params>
                <comment line="757">
                                        
                </comment>
                <comment line="758">
                                        
                </comment>
                <declaration name="ret" type="Object" line="744"/>
                <declaration name="res" type="HeadTail" line="745"/>
            </method>
        </class>
    </source>