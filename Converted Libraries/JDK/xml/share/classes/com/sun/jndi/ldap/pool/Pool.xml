<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap.pool">
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Set"/>
        <import package="java.util.LinkedList"/>
        <import package="java.io.PrintStream"/>
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="javax.naming.NamingException"/>
        <class name="Pool" line="13">
            <javadoc line="13">
                A map of pool ids to Connections.
                  Key is an object that uniquely identifies a PooledConnection request
                  (typically information needed to create the connection).
                  The definitions of the key&apos;s equals() and hashCode() methods are
                  vital to its unique identification in a Pool.
                  Value is a ConnectionsRef, which is a reference to Connections,
                  a list of equivalent connections.
                  Supports methods that
                  - retrieves (or creates as necessary) a connection from the pool
                  - removes expired connections from the pool
                  Connections cleanup:
                  A WeakHashMap is used for mapping the pool ids and Connections.
                  A SoftReference from the value to the key is kept to hold the map
                  entry as long as possible. This allows the GC to remove Connections
                  from the Pool under situations of VM running out of resources.
                  To take an appropriate action of &apos;closing the connections&apos; before the GC
                  reclaims the ConnectionsRef objects, the ConnectionsRef objects are made
                  weakly reachable through a list of weak references registered with
                  a reference queue.
                  Upon an entry gets removed from the WeakHashMap, the ConnectionsRef (value
                  in the map) object is weakly reachable. When another sweep of
                  clearing the weak references is made by the GC it puts the corresponding
                  ConnectionsWeakRef object into the reference queue.
                  The reference queue is monitored lazily for reclaimable Connections
                  whenever a pooled connection is requested or a call to remove the expired
                  connections is made. The monitoring is done regularly when idle connection
                  timeout is set as the PoolCleaner removes expired connections periodically.
                  As determined by the experiements, cleanup of resources using the
                  ReferenceQueue mechanism is reliable and has immidiate effect than the
                  finalizer approach.                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="debug" type="boolean" line="47"/>
            <declaration name="queue" type="ReferenceQueue" line="48"/>
            <declaration name="weakRefs" type="Collection" line="49"/>
            <declaration name="maxSize" type="int" line="50"/>
            <declaration name="prefSize" type="int" line="51"/>
            <declaration name="initSize" type="int" line="52"/>
            <declaration name="map" type="Map" line="53"/>
            <method name="Pool" type="constructor" line="54">
                <params>
                    <param name="initSize" type="int"/>
                    <param name="prefSize" type="int"/>
                    <param name="maxSize" type="int"/>
                </params>
            </method>
            <javadoc line="60">
                Gets a pooled connection for id. The pooled connection might be
                  newly created, as governed by the maxSize and prefSize settings.
                  If a pooled connection is unavailable and cannot be created due
                  to the maxSize constraint, this call blocks until the constraint
                  is removed or until &apos;timeout&apos; ms has elapsed.                
                <param>
                    id identity of the connection to get                    
                </param>
                <param>
                    timeout the number of milliseconds to wait before giving up                    
                </param>
                <param>
                    factory the factory to use for creating the connection if
                      creation is necessary                    
                </param>
                <return>
                    a pooled connection                    
                </return>
                <throws>
                    NamingException the connection could not be created due to
                      an error.                    
                </throws>
            </javadoc>
            <method name="getPooledConnection" type="PooledConnection" line="74">
                <params>
                    <param name="id" type="Object"/>
                    <param name="timeout" type="long"/>
                    <param name="factory" type="PooledConnectionFactory"/>
                </params>
                <declaration name="conns" type="Connections" line="78"/>
                <scope line="79">
                    <scope line="81">
                        <declaration name="connsRef" type="ConnectionsRef" line="84"/>
                        <declaration name="weakRef" type="Reference" line="86"/>
                    </scope>
                </scope>
            </method>
            <method name="getConnections" type="Connections" line="93">
                <params>
                    <param name="id" type="Object"/>
                </params>
                <declaration name="ref" type="ConnectionsRef" line="94"/>
            </method>
            <javadoc line="97">
                Goes through the connections in this Pool and expires ones that
                  have been idle before &apos;threshold&apos;. An expired connection is closed
                  and then removed from the pool (removePooledConnection() will eventually
                  be called, and the list of pools itself removed if it becomes empty).                
                <param>
                    threshold connections idle before 'threshold' should be closed
                      and removed.                    
                </param>
            </javadoc>
            <method name="expire" type="void" line="105">
                <params>
                    <param name="threshold" type="long"/>
                </params>
                <scope line="106">
                    <declaration name="coll" type="Collection" line="107"/>
                    <declaration name="iter" type="Iterator" line="108"/>
                    <declaration name="conns" type="Connections" line="109"/>
                    <scope line="110">
                        <scope line="112"/>
                    </scope>
                </scope>
            </method>
            <method name="expungeStaleConnections" type="void" line="120">
                <declaration name="releaseRef" type="ConnectionsWeakRef" line="121"/>
                <scope line="122">
                    <declaration name="conns" type="Connections" line="123"/>
                    <scope line="124"/>
                </scope>
            </method>
            <method name="showStats" type="void" line="132">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <declaration name="entry" type="Map.Entry" line="133"/>
                <declaration name="id" type="Object" line="134"/>
                <declaration name="conns" type="Connections" line="135"/>
                <declaration name="entries" type="Set" line="141"/>
                <declaration name="iter" type="Iterator" line="142"/>
                <scope line="143"/>
            </method>
            <method name="toString" type="String" line="151"/>
            <method name="d" type="void" line="154">
                <params>
                    <param name="msg" type="String"/>
                    <param name="i" type="int"/>
                </params>
                <scope line="155"/>
            </method>
            <method name="d" type="void" line="159">
                <params>
                    <param name="msg" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="160"/>
            </method>
        </class>
    </source>