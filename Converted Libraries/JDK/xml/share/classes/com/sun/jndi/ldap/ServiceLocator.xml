<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="java.util.Arrays"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Random"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.List"/>
        <import package="javax.naming"/>
        <import package="javax.naming.directory"/>
        <import package="javax.naming.spi.NamingManager"/>
        <import package="javax.naming.ldap.LdapName"/>
        <import package="javax.naming.ldap.Rdn"/>
        <import package="com.sun.jndi.ldap.LdapURL"/>
        <class name="ServiceLocator" line="44">
            <comment line="218">
                Randomly select a service record in the range [head, tail] and return
                 its hostport value. Follows the algorithm in RFC 2782.                
            </comment>
            <javadoc line="44">
                This class discovers the location of LDAP services by querying DNS.
                  See http://www.ietf.org/internet-drafts/draft-ietf-ldapext-locate-07.txt                
            </javadoc>
            <declaration name="SRV_RR" type="String" line="51"/>
            <declaration name="SRV_RR_ATTR" type="String[]" line="53"/>
            <declaration name="random" type="Random" line="55"/>
            <method name="ServiceLocator" type="constructor" line="57"/>
            <javadoc line="60">
                Maps a distinguished name (RFC 2253) to a fully qualified domain name.
                  Processes a sequence of RDNs having a DC attribute.
                  The special RDN &quot;DC=.&quot; denotes the root of the domain tree.
                  Multi-valued RDNs, non-DC attributes, binary-valued attributes and the
                  RDN &quot;DC=.&quot; all reset the domain name and processing continues.                
                <param>
                    dn A string distinguished name (RFC 2253).                    
                </param>
                <return>
                    A domain name or null if none can be derived.                    
                </return>
                <throw>
                    InvalidNameException If the distinugished name is invalid.                    
                </throw>
            </javadoc>
            <method name="mapDnToDomainName" type="String" line="71">
                <params>
                    <param name="dn" type="String"/>
                </params>
                <comment line="78">
                    process RDNs left-to-right                    
                </comment>
                <comment line="79">
                    List&lt;Rdn&gt; rdnList = ldapName.getRdns();                    
                </comment>
                <comment line="83">
                    Rdn rdn = rdnList.get(i);                    
                </comment>
                <comment line="86">
                    single-valued RDN with a DC attribute                    
                </comment>
                <comment line="93">
                    reset (when current or previous                    
                </comment>
                <comment line="94">
                    RDN value is &quot;DC=.&quot;)                    
                </comment>
                <comment line="101">
                    reset (when binary-valued attribute)                    
                </comment>
                <comment line="104">
                    reset (when multi-valued RDN or non-DC)                    
                </comment>
                <scope line="72"/>
                <declaration name="domain" type="StringBuffer" line="75"/>
                <declaration name="ldapName" type="LdapName" line="76"/>
                <declaration name="rdnList" type="List" line="81"/>
                <scope line="82">
                    <declaration name="rdn" type="Rdn" line="84"/>
                    <scope line="88">
                        <declaration name="attrval" type="Object" line="89"/>
                        <scope line="90">
                            <scope line="92"/>
                            <scope line="96"/>
                        </scope>
                        <scope line="100"/>
                    </scope>
                    <scope line="103"/>
                </scope>
            </method>
            <javadoc line="110">
                Locates the LDAP service for a given domain.
                  Queries DNS for a list of LDAP Service Location Records (SRV) for a
                  given domain name.                
                <param>
                    domainName A string domain name.                    
                </param>
                <param>
                    environment The possibly null environment of the context.                    
                </param>
                <return>
                    An ordered list of hostports for the LDAP service or null if
                      the service has not been located.                    
                </return>
            </javadoc>
            <method name="getLdapService" type="String[]" line="120">
                <params>
                    <param name="domainName" type="String"/>
                    <param name="environment" type="Hashtable"/>
                </params>
                <comment line="130">
                    Create the DNS context using NamingManager rather than using                    
                </comment>
                <comment line="131">
                    the initial context constructor. This avoids having the initial                    
                </comment>
                <comment line="132">
                    context constructor call itself (when processing the URL                    
                </comment>
                <comment line="133">
                    argument in the getAttributes call).                    
                </comment>
                <comment line="136">
                    cannot create a DNS context                    
                </comment>
                <comment line="147">
                    create the service records                    
                </comment>
                <comment line="155">
                    ignore bad value                    
                </comment>
                <comment line="161">
                    trim                    
                </comment>
                <comment line="168">
                    Sort the service records in ascending order of their                    
                </comment>
                <comment line="169">
                    priority value. For records with equal priority, move                    
                </comment>
                <comment line="170">
                    those with weight 0 to the top of the list.                    
                </comment>
                <comment line="175">
                    extract the host and port number from each service record                    
                </comment>
                <comment line="179">
                    ignore                    
                </comment>
                <scope line="122"/>
                <declaration name="dnsUrl" type="String" line="126"/>
                <declaration name="hostports" type="String[]" line="127"/>
                <scope line="129">
                    <declaration name="ctx" type="Context" line="134"/>
                    <scope line="135"/>
                    <declaration name="attrs" type="Attributes" line="138"/>
                    <declaration name="attr" type="Attribute" line="140"/>
                    <scope line="142">
                        <declaration name="numValues" type="int" line="143"/>
                        <declaration name="numRecords" type="int" line="144"/>
                        <declaration name="srvRecords" type="SrvRecord[]" line="145"/>
                        <declaration name="i" type="int" line="148"/>
                        <declaration name="j" type="int" line="149"/>
                        <scope line="150">
                            <scope line="151"/>
                            <scope line="154"/>
                        </scope>
                        <scope line="162">
                            <declaration name="trimmed" type="SrvRecord[]" line="163"/>
                        </scope>
                        <scope line="171"/>
                    </scope>
                </scope>
                <scope line="178"/>
            </method>
            <javadoc line="184">
                Extract hosts and port numbers from a list of SRV records.
                  An array of hostports is returned or null if none were found.                
            </javadoc>
            <method name="extractHostports" type="String[]" line="188">
                <params>
                    <param name="srvRecords" type="SrvRecord[]"/>
                </params>
                <comment line="199">
                    find the head and tail of the list of records having the same                    
                </comment>
                <comment line="200">
                    priority value.                    
                </comment>
                <comment line="208">
                    select hostports from the sublist                    
                </comment>
                <declaration name="hostports" type="String[]" line="189"/>
                <declaration name="head" type="int" line="191"/>
                <declaration name="tail" type="int" line="192"/>
                <declaration name="sublistLength" type="int" line="193"/>
                <declaration name="k" type="int" line="194"/>
                <scope line="195">
                    <scope line="196"/>
                    <scope line="203"/>
                    <scope line="210"/>
                </scope>
            </method>
            <method name="selectHostport" type="String" line="222">
                <params>
                    <param name="srvRecords" type="SrvRecord[]"/>
                    <param name="head" type="int"/>
                    <param name="tail" type="int"/>
                </params>
                <comment line="227">
                    compute the running sum for records between head and tail                    
                </comment>
                <comment line="237">
                    If all records have zero weight, select first available one;                    
                </comment>
                <comment line="238">
                    otherwise, randomly select a record according to its weight                    
                </comment>
                <comment line="243">
                    make this record unavailable                    
                </comment>
                <scope line="223"/>
                <declaration name="sum" type="int" line="228"/>
                <scope line="229">
                    <scope line="230"/>
                </scope>
                <declaration name="hostport" type="String" line="235"/>
                <declaration name="target" type="int" line="239"/>
                <scope line="240">
                    <scope line="241"/>
                </scope>
            </method>
            <class name="SrvRecord" line="250">
                <comment line="284">
                    Sort records in ascending order of priority value. For records with
                     equal priority move those with weight 0 to the top of the list.                    
                </comment>
                <implements interface="Comparable"/>
                <javadoc line="250">
                    This class holds a DNS service (SRV) record.
                      See http://www.ietf.org/rfc/rfc2782.txt                    
                </javadoc>
                <declaration name="priority" type="int" line="257"/>
                <declaration name="weight" type="int" line="258"/>
                <declaration name="sum" type="int" line="259"/>
                <declaration name="hostport" type="String" line="260"/>
                <javadoc line="262">
                    Creates a service record object from a string record.
                      DNS supplies the string record in the following format:
                      &lt;pre&gt;
                      &lt;Priority&gt; &quot; &quot; &lt;Weight&gt; &quot; &quot; &lt;Port&gt; &quot; &quot; &lt;Host&gt;
                      &lt;/pre&gt;                    
                </javadoc>
                <method name="SrvRecord" type="constructor" line="269">
                    <params>
                        <param name="srvRecord" type="String"/>
                    </params>
                    <declaration name="tokenizer" type="StringTokenizer" line="270"/>
                    <declaration name="port" type="String" line="271"/>
                    <scope line="273"/>
                    <scope line="278"/>
                </method>
                <method name="compareTo" type="int" line="287">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <comment line="290">
                        this &gt; that                        
                    </comment>
                    <comment line="292">
                        this &lt; that                        
                    </comment>
                    <comment line="294">
                        this &lt; that                        
                    </comment>
                    <comment line="296">
                        this &gt; that                        
                    </comment>
                    <comment line="298">
                        this == that                        
                    </comment>
                    <declaration name="that" type="SrvRecord" line="288"/>
                    <scope line="289"/>
                    <scope line="291"/>
                    <scope line="293"/>
                    <scope line="295"/>
                    <scope line="297"/>
                </method>
            </class>
        </class>
    </source>