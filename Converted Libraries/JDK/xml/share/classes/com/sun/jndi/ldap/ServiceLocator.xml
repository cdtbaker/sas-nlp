<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="java.util.Arrays"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Random"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.List"/>
        <import package="javax.naming"/>
        <import package="javax.naming.directory"/>
        <import package="javax.naming.spi.NamingManager"/>
        <import package="javax.naming.ldap.LdapName"/>
        <import package="javax.naming.ldap.Rdn"/>
        <import package="com.sun.jndi.ldap.LdapURL"/>
        <class name="ServiceLocator" line="15">
            <javadoc line="15">
                This class discovers the location of LDAP services by querying DNS.
                  See http://www.ietf.org/internet-drafts/draft-ietf-ldapext-locate-07.txt                
            </javadoc>
            <declaration name="SRV_RR" type="String" line="20"/>
            <declaration name="SRV_RR_ATTR" type="String[]" line="21"/>
            <declaration name="random" type="Random" line="22"/>
            <method name="ServiceLocator" type="constructor" line="23"/>
            <javadoc line="25">
                Maps a distinguished name (RFC 2253) to a fully qualified domain name.
                  Processes a sequence of RDNs having a DC attribute.
                  The special RDN &quot;DC=.&quot; denotes the root of the domain tree.
                  Multi-valued RDNs, non-DC attributes, binary-valued attributes and the
                  RDN &quot;DC=.&quot; all reset the domain name and processing continues.                
                <param>
                    dn A string distinguished name (RFC 2253).                    
                </param>
                <return>
                    A domain name or null if none can be derived.                    
                </return>
                <throw>
                    InvalidNameException If the distinugished name is invalid.                    
                </throw>
            </javadoc>
            <method name="mapDnToDomainName" type="String" line="35">
                <params>
                    <param name="dn" type="String"/>
                </params>
                <scope line="36"/>
                <declaration name="domain" type="StringBuffer" line="39"/>
                <declaration name="ldapName" type="LdapName" line="40"/>
                <declaration name="rdnList" type="List" line="41"/>
                <scope line="42">
                    <declaration name="rdn" type="Rdn" line="43"/>
                    <scope line="44">
                        <declaration name="attrval" type="Object" line="45"/>
                        <scope line="46">
                            <scope line="47"/>
                            <scope line="50"/>
                        </scope>
                        <scope line="55"/>
                    </scope>
                    <scope line="59"/>
                </scope>
            </method>
            <javadoc line="65">
                Locates the LDAP service for a given domain.
                  Queries DNS for a list of LDAP Service Location Records (SRV) for a
                  given domain name.                
                <param>
                    domainName A string domain name.                    
                </param>
                <param>
                    environment The possibly null environment of the context.                    
                </param>
                <return>
                    An ordered list of hostports for the LDAP service or null if
                      the service has not been located.                    
                </return>
            </javadoc>
            <method name="getLdapService" type="String[]" line="74">
                <params>
                    <param name="domainName" type="String"/>
                    <param name="environment" type="Hashtable"/>
                </params>
                <scope line="75"/>
                <declaration name="dnsUrl" type="String" line="78"/>
                <declaration name="hostports" type="String[]" line="79"/>
                <scope line="80">
                    <declaration name="ctx" type="Context" line="81"/>
                    <scope line="82"/>
                    <declaration name="attrs" type="Attributes" line="85"/>
                    <declaration name="attr" type="Attribute" line="86"/>
                    <scope line="87">
                        <declaration name="numValues" type="int" line="88"/>
                        <declaration name="numRecords" type="int" line="89"/>
                        <declaration name="srvRecords" type="SrvRecord[]" line="90"/>
                        <declaration name="i" type="int" line="91"/>
                        <declaration name="j" type="int" line="92"/>
                        <scope line="93">
                            <scope line="94"/>
                            <scope line="98"/>
                        </scope>
                        <scope line="103">
                            <declaration name="trimmed" type="SrvRecord[]" line="104"/>
                        </scope>
                        <scope line="108"/>
                    </scope>
                </scope>
                <scope line="114"/>
            </method>
            <javadoc line="118">
                Extract hosts and port numbers from a list of SRV records.
                  An array of hostports is returned or null if none were found.                
            </javadoc>
            <method name="extractHostports" type="String[]" line="122">
                <params>
                    <param name="srvRecords" type="SrvRecord[]"/>
                </params>
                <declaration name="hostports" type="String[]" line="123"/>
                <declaration name="head" type="int" line="124"/>
                <declaration name="tail" type="int" line="125"/>
                <declaration name="sublistLength" type="int" line="126"/>
                <declaration name="k" type="int" line="127"/>
                <scope line="128">
                    <scope line="129"/>
                    <scope line="133"/>
                    <scope line="138"/>
                </scope>
            </method>
            <method name="selectHostport" type="String" line="144">
                <params>
                    <param name="srvRecords" type="SrvRecord[]"/>
                    <param name="head" type="int"/>
                    <param name="tail" type="int"/>
                </params>
                <scope line="145"/>
                <declaration name="sum" type="int" line="148"/>
                <scope line="149">
                    <scope line="150"/>
                </scope>
                <declaration name="hostport" type="String" line="155"/>
                <declaration name="target" type="int" line="156"/>
                <scope line="157">
                    <scope line="158"/>
                </scope>
            </method>
            <class name="SrvRecord" line="166">
                <implements interface="Comparable"/>
                <javadoc line="166">
                    This class holds a DNS service (SRV) record.
                      See http://www.ietf.org/rfc/rfc2782.txt                    
                </javadoc>
                <declaration name="priority" type="int" line="171"/>
                <declaration name="weight" type="int" line="172"/>
                <declaration name="sum" type="int" line="173"/>
                <declaration name="hostport" type="String" line="174"/>
                <javadoc line="175">
                    Creates a service record object from a string record.
                      DNS supplies the string record in the following format:
                      &lt;pre&gt;
                      &lt;Priority&gt; &quot; &quot; &lt;Weight&gt; &quot; &quot; &lt;Port&gt; &quot; &quot; &lt;Host&gt;
                      &lt;/pre&gt;                    
                </javadoc>
                <method name="SrvRecord" type="constructor" line="182">
                    <params>
                        <param name="srvRecord" type="String"/>
                    </params>
                    <declaration name="tokenizer" type="StringTokenizer" line="183"/>
                    <declaration name="port" type="String" line="184"/>
                    <scope line="185"/>
                    <scope line="191"/>
                </method>
                <method name="compareTo" type="int" line="195">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="that" type="SrvRecord" line="196"/>
                    <scope line="197"/>
                    <scope line="200"/>
                    <scope line="203"/>
                    <scope line="206"/>
                    <scope line="209"/>
                </method>
            </class>
        </class>
    </source>