<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.InterruptedIOException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.net.Socket"/>
        <import package="javax.naming.CommunicationException"/>
        <import package="javax.naming.ServiceUnavailableException"/>
        <import package="javax.naming.NamingException"/>
        <import package="javax.naming.InterruptedNamingException"/>
        <import package="javax.naming.ldap.Control"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.Arrays"/>
        <import package="sun.misc.IOUtils"/>
        <class name="Connection" line="19">
            <implements interface="Runnable"/>
            <javadoc line="19">
                A thread that creates a connection to an LDAP server.
                  After the connection, the thread reads from the connection.
                  A caller can invoke methods on the instance to read LDAP responses
                  and to send LDAP requests.
                  &lt;p&gt;
                  There is a one-to-one correspondence between an LdapClient and
                  a Connection. Access to Connection and its methods is only via
                  LdapClient with two exceptions: SASL authentication and StartTLS.
                  SASL needs to access Connection&apos;s socket IO streams (in order to do encryption
                  of the security layer). StartTLS needs to do replace IO streams
                  and close the IO  streams on nonfatal close. The code for SASL
                  authentication can be treated as being the same as from LdapClient
                  because the SASL code is only ever called from LdapClient, from
                  inside LdapClient&apos;s synchronized authenticate() method. StartTLS is called
                  directly by the application but should only occur when the underlying
                  connection is quiet.
                  &lt;p&gt;
                  In terms of synchronization, worry about data structures
                  used by the Connection thread because that usage might contend
                  with calls by the main threads (i.e., those that call LdapClient).
                  Main threads need to worry about contention with each other.
                  Fields that Connection thread uses:
                  inStream - synced access and update; initialized in constructor;
                  referenced outside class unsync&apos;ed (by LdapSasl) only
                  when connection is quiet
                  traceFile, traceTagIn, traceTagOut - no sync; debugging only
                  parent - no sync; initialized in constructor; no updates
                  pendingRequests - sync
                  pauseLock - per-instance lock;
                  paused - sync via pauseLock (pauseReader())
                  Members used by main threads (LdapClient):
                  host, port - unsync; read-only access for StartTLS and debug messages
                  setBound(), setV3() - no sync; called only by LdapClient.authenticate(),
                  which is a sync method called only when connection is &quot;quiet&quot;
                  getMsgId() - sync
                  writeRequest(), removeRequest(),findRequest(), abandonOutstandingReqs() -
                  access to shared pendingRequests is sync
                  writeRequest(),  abandonRequest(), ldapUnbind() - access to outStream sync
                  cleanup() - sync
                  readReply() - access to sock sync
                  unpauseReader() - (indirectly via writeRequest) sync on pauseLock
                  Members used by SASL auth (main thread):
                  inStream, outStream - no sync; used to construct new stream; accessed
                  only when conn is &quot;quiet&quot; and not shared
                  replaceStreams() - sync method
                  Members used by StartTLS:
                  inStream, outStream - no sync; used to record the existing streams;
                  accessed only when conn is &quot;quiet&quot; and not shared
                  replaceStreams() - sync method
                  &lt;p&gt;
                  Handles anonymous, simple, and SASL bind for v3; anonymous and simple
                  for v2.
                  %%% made public for access by LdapSasl %%%                
                <author>
                    Vincent Ryan                    
                </author>
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Jagane Sundar                    
                </author>
            </javadoc>
            <declaration name="debug" type="boolean" line="78"/>
            <declaration name="dump" type="int" line="79"/>
            <declaration name="worker" type="Thread" line="80"/>
            <declaration name="v3" type="boolean" line="81"/>
            <declaration name="host" type="String" line="82"/>
            <declaration name="port" type="int" line="83"/>
            <declaration name="bound" type="boolean" line="84"/>
            <declaration name="traceFile" type="OutputStream" line="85"/>
            <declaration name="traceTagIn" type="String" line="86"/>
            <declaration name="traceTagOut" type="String" line="87"/>
            <declaration name="inStream" type="InputStream" line="88"/>
            <declaration name="outStream" type="OutputStream" line="89"/>
            <declaration name="sock" type="Socket" line="90"/>
            <declaration name="parent" type="LdapClient" line="91"/>
            <declaration name="outMsgId" type="int" line="92"/>
            <declaration name="pendingRequests" type="LdapRequest" line="93"/>
            <declaration name="closureReason" type="IOException" line="94"/>
            <declaration name="useable" type="boolean" line="95"/>
            <declaration name="readTimeout" type="int" line="96"/>
            <method name="setV3" type="void" line="97">
                <params>
                    <param name="v" type="boolean"/>
                </params>
            </method>
            <method name="setBound" type="void" line="100"/>
            <method name="Connection" type="constructor" line="103">
                <params>
                    <param name="parent" type="LdapClient"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="socketFactory" type="String"/>
                    <param name="connectTimeout" type="int"/>
                    <param name="readTimeout" type="int"/>
                    <param name="trace" type="OutputStream"/>
                </params>
                <scope line="108"/>
                <scope line="113">
                    <scope line="115"/>
                </scope>
                <scope line="121">
                    <declaration name="realException" type="Throwable" line="122"/>
                    <declaration name="ce" type="CommunicationException" line="123"/>
                </scope>
                <scope line="127">
                    <declaration name="ce" type="CommunicationException" line="128"/>
                </scope>
            </method>
            <method name="createInetSocketAddress" type="Object" line="136">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="137">
                    <declaration name="inetSocketAddressClass" type="Class" line="138"/>
                    <declaration name="inetSocketAddressCons" type="Constructor" line="139"/>
                </scope>
                <scope line="142"/>
                <scope line="145"/>
                <scope line="148"/>
                <scope line="151"/>
            </method>
            <method name="createSocket" type="Socket" line="155">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="socketFactory" type="String"/>
                    <param name="connectTimeout" type="int"/>
                </params>
                <declaration name="socket" type="Socket" line="156"/>
                <scope line="157">
                    <declaration name="socketFactoryClass" type="Class" line="158"/>
                    <declaration name="getDefault" type="Method" line="159"/>
                    <declaration name="factory" type="Object" line="160"/>
                    <declaration name="createSocket" type="Method" line="161"/>
                    <scope line="162">
                        <scope line="163">
                            <declaration name="connect" type="Method" line="165"/>
                            <declaration name="endpoint" type="Object" line="166"/>
                            <scope line="168"/>
                        </scope>
                        <scope line="173"/>
                    </scope>
                    <scope line="176">
                        <scope line="178"/>
                    </scope>
                </scope>
                <scope line="184">
                    <scope line="185">
                        <scope line="186">
                            <declaration name="socketCons" type="Constructor" line="187"/>
                            <declaration name="connect" type="Method" line="188"/>
                            <declaration name="endpoint" type="Object" line="189"/>
                            <scope line="191"/>
                        </scope>
                        <scope line="196"/>
                    </scope>
                    <scope line="199">
                        <scope line="200"/>
                    </scope>
                </scope>
            </method>
            <method name="getMsgId" type="int" line="208"/>
            <method name="writeRequest" type="LdapRequest" line="211">
                <params>
                    <param name="ber" type="BerEncoder"/>
                    <param name="msgId" type="int"/>
                </params>
            </method>
            <method name="writeRequest" type="LdapRequest" line="214">
                <params>
                    <param name="ber" type="BerEncoder"/>
                    <param name="msgId" type="int"/>
                    <param name="pauseAfterReceipt" type="boolean"/>
                </params>
            </method>
            <method name="writeRequest" type="LdapRequest" line="217">
                <params>
                    <param name="ber" type="BerEncoder"/>
                    <param name="msgId" type="int"/>
                    <param name="pauseAfterReceipt" type="boolean"/>
                    <param name="replyQueueCapacity" type="int"/>
                </params>
                <declaration name="req" type="LdapRequest" line="218"/>
                <scope line="220"/>
                <scope line="224"/>
                <scope line="227">
                    <scope line="228"/>
                </scope>
                <scope line="233"/>
            </method>
            <javadoc line="239">
                Reads a reply; waits until one is ready.                
            </javadoc>
            <method name="readReply" type="BerDecoder" line="242">
                <params>
                    <param name="ldr" type="LdapRequest"/>
                </params>
                <declaration name="rber" type="BerDecoder" line="243"/>
                <declaration name="waited" type="boolean" line="244"/>
                <scope line="245">
                    <scope line="246">
                        <scope line="247">
                            <scope line="248"/>
                        </scope>
                        <scope line="252">
                            <scope line="254">
                                <scope line="255"/>
                                <scope line="259"/>
                            </scope>
                            <scope line="263"/>
                        </scope>
                    </scope>
                    <scope line="268"/>
                </scope>
                <scope line="272"/>
            </method>
            <method name="addRequest" type="void" line="278">
                <params>
                    <param name="ldapRequest" type="LdapRequest"/>
                </params>
                <declaration name="ldr" type="LdapRequest" line="279"/>
                <scope line="280"/>
                <scope line="284"/>
            </method>
            <method name="findRequest" type="LdapRequest" line="289">
                <params>
                    <param name="msgId" type="int"/>
                </params>
                <declaration name="ldr" type="LdapRequest" line="290"/>
                <scope line="291">
                    <scope line="292"/>
                </scope>
            </method>
            <method name="removeRequest" type="void" line="299">
                <params>
                    <param name="req" type="LdapRequest"/>
                </params>
                <declaration name="ldr" type="LdapRequest" line="300"/>
                <declaration name="ldrprev" type="LdapRequest" line="301"/>
                <scope line="302">
                    <scope line="303">
                        <scope line="305"/>
                        <scope line="308"/>
                    </scope>
                </scope>
            </method>
            <method name="abandonRequest" type="void" line="317">
                <params>
                    <param name="ldr" type="LdapRequest"/>
                    <param name="reqCtls" type="Control[]"/>
                </params>
                <declaration name="ber" type="BerEncoder" line="319"/>
                <declaration name="abandonMsgId" type="int" line="320"/>
                <scope line="321">
                    <scope line="325"/>
                    <scope line="329"/>
                    <scope line="332"/>
                </scope>
                <scope line="337"/>
            </method>
            <method name="abandonOutstandingReqs" type="void" line="340">
                <params>
                    <param name="reqCtls" type="Control[]"/>
                </params>
                <declaration name="ldr" type="LdapRequest" line="341"/>
                <scope line="342"/>
            </method>
            <method name="ldapUnbind" type="void" line="347">
                <params>
                    <param name="reqCtls" type="Control[]"/>
                </params>
                <declaration name="ber" type="BerEncoder" line="348"/>
                <declaration name="unbindMsgId" type="int" line="349"/>
                <scope line="350">
                    <scope line="355"/>
                    <scope line="359"/>
                    <scope line="362"/>
                </scope>
                <scope line="367"/>
            </method>
            <javadoc line="370">
                @param reqCtls Possibly null request controls that accompanies the
                  abandon and unbind LDAP request.                
                <param>
                    notifyParent true means to call parent LdapClient back, notifying
                      it that the connection has been closed; false means not to notify
                      parent. If LdapClient invokes cleanup(), notifyParent should be set to
                      false because LdapClient already knows that it is closing
                      the connection. If Connection invokes cleanup(), notifyParent should be
                      set to true because LdapClient needs to know about the closure.                    
                </param>
            </javadoc>
            <method name="cleanup" type="void" line="380">
                <params>
                    <param name="reqCtls" type="Control[]"/>
                    <param name="notifyParent" type="boolean"/>
                </params>
                <declaration name="nparent" type="boolean" line="381"/>
                <scope line="382">
                    <scope line="384">
                        <scope line="385"/>
                        <scope line="388">
                            <scope line="389"/>
                            <scope line="392"/>
                        </scope>
                        <scope line="396">
                            <scope line="397"/>
                            <scope line="402"/>
                            <scope line="405">
                                <declaration name="ldr" type="LdapRequest" line="406"/>
                                <scope line="407"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="416">
                        <declaration name="ldr" type="LdapRequest" line="417"/>
                        <scope line="418">
                            <scope line="419"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="replaceStreams" type="void" line="428">
                <params>
                    <param name="newIn" type="InputStream"/>
                    <param name="newOut" type="OutputStream"/>
                </params>
                <scope line="429"/>
                <scope line="434"/>
                <scope line="437"/>
            </method>
            <javadoc line="442">
                Used by Connection thread to read inStream into a local variable.
                  This ensures that there is no contention between the main thread
                  and the Connection thread when the main thread updates inStream.                
            </javadoc>
            <method name="getInputStream" type="InputStream" line="447"/>
            <declaration name="pauseLock" type="Object" line="450"/>
            <declaration name="paused" type="boolean" line="451"/>
            <method name="unpauseReader" type="void" line="452">
                <scope line="453">
                    <scope line="454">
                        <scope line="455"/>
                    </scope>
                </scope>
            </method>
            <method name="pauseReader" type="void" line="463">
                <scope line="464"/>
                <scope line="468">
                    <scope line="469"/>
                </scope>
                <scope line="473"/>
            </method>
            <method name="run" type="void" line="477">
                <declaration name="inbuf" type="byte" line="478"/>
                <declaration name="inMsgId" type="int" line="479"/>
                <declaration name="bytesread" type="int" line="480"/>
                <declaration name="br" type="int" line="481"/>
                <declaration name="offset" type="int" line="482"/>
                <declaration name="seqlen" type="int" line="483"/>
                <declaration name="seqlenlen" type="int" line="484"/>
                <declaration name="eos" type="boolean" line="485"/>
                <declaration name="retBer" type="BerDecoder" line="486"/>
                <declaration name="in" type="InputStream" line="487"/>
                <scope line="488">
                    <scope line="489">
                        <scope line="490">
                            <scope line="497">
                                <scope line="498"/>
                                <scope line="501"/>
                            </scope>
                            <scope line="509">
                                <scope line="513">
                                    <scope line="515"/>
                                </scope>
                                <scope line="523"/>
                            </scope>
                            <declaration name="left" type="byte[]" line="528"/>
                            <scope line="532">
                                <scope line="534"/>
                                <declaration name="needPause" type="boolean" line="540"/>
                                <scope line="541"/>
                                <scope line="544">
                                    <declaration name="ldr" type="LdapRequest" line="545"/>
                                    <scope line="546">
                                        <scope line="547">
                                            <scope line="549"/>
                                        </scope>
                                    </scope>
                                    <scope line="554"/>
                                </scope>
                            </scope>
                            <scope line="558"/>
                        </scope>
                        <scope line="561">
                            <scope line="562"/>
                            <scope line="566"/>
                            <scope line="568">
                                <scope line="569"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="576"/>
                </scope>
                <scope line="580">
                    <scope line="581"/>
                </scope>
                <scope line="586"/>
                <scope line="589"/>
            </method>
        </class>
    </source>