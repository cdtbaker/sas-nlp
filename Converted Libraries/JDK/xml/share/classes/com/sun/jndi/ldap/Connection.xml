<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.InterruptedIOException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.net.Socket"/>
        <import package="javax.naming.CommunicationException"/>
        <import package="javax.naming.ServiceUnavailableException"/>
        <import package="javax.naming.NamingException"/>
        <import package="javax.naming.InterruptedNamingException"/>
        <import package="javax.naming.ldap.Control"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.Arrays"/>
        <import package="sun.misc.IOUtils"/>
        <class name="Connection" line="50">
            <comment line="113">
                &gt; 0 r, &gt; 1 rw                
            </comment>
            <comment line="116">
                Initialized in constructor                
            </comment>
            <comment line="118">
                Set in setV3()                
            </comment>
            <comment line="120">
                used by LdapClient for generating exception messages                
            </comment>
            <comment line="121">
                used by StartTlsResponse when creating an SSL socket                
            </comment>
            <comment line="122">
                used by LdapClient for generating exception messages                
            </comment>
            <comment line="123">
                used by StartTlsResponse when creating an SSL socket                
            </comment>
            <comment line="125">
                Set in setBound()                
            </comment>
            <comment line="127">
                All three are initialized in constructor and read-only afterwards                
            </comment>
            <comment line="132">
                Initialized in constructor; read and used externally (LdapSasl);                
            </comment>
            <comment line="133">
                Updated in replaceStreams() during &quot;quiet&quot;, unshared, period                
            </comment>
            <comment line="134">
                must be public; used by LdapSasl                
            </comment>
            <comment line="136">
                Initialized in constructor; read and used externally (LdapSasl);                
            </comment>
            <comment line="137">
                Updated in replaceOutputStream() during &quot;quiet&quot;, unshared, period                
            </comment>
            <comment line="138">
                must be public; used by LdapSasl                
            </comment>
            <comment line="140">
                Initialized in constructor; read and used externally (TLS) to                
            </comment>
            <comment line="141">
                get new IO streams; closed during cleanup                
            </comment>
            <comment line="142">
                for TLS                
            </comment>
            <comment line="144">
                For processing &quot;disconnect&quot; unsolicited notification                
            </comment>
            <comment line="145">
                Initialized in constructor                
            </comment>
            <comment line="148">
                Incremented and returned in sync getMsgId()                
            </comment>
            <comment line="151">
                                
            </comment>
            <comment line="152">
                The list of ldapRequests pending on this binding                
            </comment>
            <comment line="153">
                                
            </comment>
            <comment line="154">
                Accessed only within sync methods                
            </comment>
            <comment line="158">
                is Connection still useable                
            </comment>
            <comment line="162">
                true means v3; false means v2                
            </comment>
            <comment line="163">
                Called in LdapClient.authenticate() (which is synchronized)                
            </comment>
            <comment line="164">
                when connection is &quot;quiet&quot; and not shared; no need to synchronize                
            </comment>
            <comment line="169">
                A BIND request has been successfully made on this connection                
            </comment>
            <comment line="170">
                When cleaning up, remember to do an UNBIND                
            </comment>
            <comment line="171">
                Called in LdapClient.authenticate() (which is synchronized)                
            </comment>
            <comment line="172">
                when connection is &quot;quiet&quot; and not shared; no need to synchronize                
            </comment>
            <comment line="177">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="178">
                                
            </comment>
            <comment line="179">
                Create an LDAP Binding object and bind to a particular server                
            </comment>
            <comment line="180">
                                
            </comment>
            <comment line="181">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="235">
                Create an InetSocketAddress using the specified hostname and port number.                
            </comment>
            <comment line="266">
                Create a Socket object using the specified socket factory and time limit.
                
                 If a timeout is supplied and unconnected sockets are supported then
                 an unconnected socket is created and the timeout is applied when
                 connecting the socket. If a timeout is supplied but unconnected sockets
                 are not supported then the timeout is ignored and a connected socket
                 is created.                
            </comment>
            <comment line="373">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="374">
                                
            </comment>
            <comment line="375">
                Methods to IO to the LDAP server                
            </comment>
            <comment line="376">
                                
            </comment>
            <comment line="377">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="476">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="477">
                                
            </comment>
            <comment line="478">
                Methods to add, find, delete, and abandon requests made to server                
            </comment>
            <comment line="479">
                                
            </comment>
            <comment line="480">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="573">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="574">
                                
            </comment>
            <comment line="575">
                Methods to unbind from server and clear up resources when object is                
            </comment>
            <comment line="576">
                destroyed.                
            </comment>
            <comment line="577">
                                
            </comment>
            <comment line="578">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="681">
                Assume everything is &quot;quiet&quot;                
            </comment>
            <comment line="682">
                &quot;synchronize&quot; might lead to deadlock so don&apos;t synchronize method                
            </comment>
            <comment line="683">
                Use streamLock instead for synchronizing update to stream                
            </comment>
            <comment line="715">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="716">
                                
            </comment>
            <comment line="717">
                Code for pausing/unpausing the reader thread (&apos;worker&apos;)                
            </comment>
            <comment line="718">
                                
            </comment>
            <comment line="719">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="721">
                The main idea is to mark requests that need the reader thread to
                 pause after getting the response. When the reader thread gets the response,
                 it waits on a lock instead of returning to the read(). The next time a
                 request is sent, the reader is automatically unblocked if necessary.
                 Note that the reader must be unblocked BEFORE the request is sent.
                 Otherwise, there is a race condition where the request is sent and
                 the reader thread might read the response and be unblocked
                 by writeRequest().
                
                 This pause gives the main thread (StartTLS or SASL) an opportunity to
                 update the reader&apos;s state (e.g., its streams) if necessary.
                 The assumption is that the connection will remain quiet during this pause
                 (i.e., no intervening requests being sent).
                &lt;p&gt;
                 For dealing with StartTLS close,
                 when the read() exits either due to EOF or an exception,
                 the reader thread checks whether there is a new stream to read from.
                 If so, then it reattempts the read. Otherwise, the EOF or exception
                 is processed and the reader thread terminates.
                 In a StartTLS close, the client first replaces the SSL IO streams with
                 plain ones and then closes the SSL socket.
                 If the reader thread attempts to read, or was reading, from
                 the SSL socket (that is, it got to the read BEFORE replaceStreams()),
                 the SSL socket close will cause the reader thread to
                 get an EOFexception and reexamine the input stream.
                 If the reader thread sees a new stream, it reattempts the read.
                 If the underlying socket is still alive, then the new read will succeed.
                 If the underlying socket has been closed also, then the new read will
                 fail and the reader thread exits.
                 If the reader thread attempts to read, or was reading, from the plain
                 socket (that is, it got to the read AFTER replaceStreams()), the
                 SSL socket close will have no effect on the reader thread.
                
                 The check for new stream is made only
                 in the first attempt at reading a BER buffer; the reader should
                 never be in midst of reading a buffer when a nonfatal close occurs.
                 If this occurs, then the connection is in an inconsistent state and
                 the safest thing to do is to shut it down.                
            </comment>
            <comment line="762">
                lock for reader to wait on while paused                
            </comment>
            <comment line="763">
                paused state of reader                
            </comment>
            <comment line="765">
                Unpauses reader thread if it was paused                
            </comment>
            <comment line="781">
                Pauses reader so that it stops reading from the input stream.
                 Reader blocks on pauseLock instead of read().
                 MUST be called from within synchronized (pauseLock) clause.                
            </comment>
            <comment line="803">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="804">
                                
            </comment>
            <comment line="805">
                The LDAP Binding thread. It does the mux/demux of multiple requests                
            </comment>
            <comment line="806">
                on the same TCP connection.                
            </comment>
            <comment line="807">
                                
            </comment>
            <comment line="808">
                //////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="983">
                This code must be uncommented to run the LdapAbandonTest.                
            </comment>
            <comment line="984">
                public void sendSearchReqs(String dn, int numReqs) {
                int i;
                String attrs[] = null;
                for(i = 1; i &lt;= numReqs; i++) {
                BerEncoder ber = new BerEncoder(2048);
                
                try {
                ber.beginSeq(Ber.ASN_SEQUENCE | Ber.ASN_CONSTRUCTOR);
                ber.encodeInt(i);
                ber.beginSeq(LdapClient.LDAP_REQ_SEARCH);
                ber.encodeString(dn == null ? &quot;&quot; : dn);
                ber.encodeInt(0, LdapClient.LBER_ENUMERATED);
                ber.encodeInt(3, LdapClient.LBER_ENUMERATED);
                ber.encodeInt(0);
                ber.encodeInt(0);
                ber.encodeBoolean(true);
                LdapClient.encodeFilter(ber, &quot;&quot;);
                ber.beginSeq(Ber.ASN_SEQUENCE | Ber.ASN_CONSTRUCTOR);
                ber.encodeStringArray(attrs);
                ber.endSeq();
                ber.endSeq();
                ber.endSeq();
                writeRequest(ber, i);
                System.err.println(&quot;wrote request &quot; + i);
                } catch (Exception ex) {
                System.err.println(&quot;ldap.search: Caught &quot; + ex + &quot; building req&quot;);
                }
                
                }                
            </comment>
            <implements interface="Runnable"/>
            <javadoc line="50">
                A thread that creates a connection to an LDAP server.
                  After the connection, the thread reads from the connection.
                  A caller can invoke methods on the instance to read LDAP responses
                  and to send LDAP requests.
                  &lt;p&gt;
                  There is a one-to-one correspondence between an LdapClient and
                  a Connection. Access to Connection and its methods is only via
                  LdapClient with two exceptions: SASL authentication and StartTLS.
                  SASL needs to access Connection&apos;s socket IO streams (in order to do encryption
                  of the security layer). StartTLS needs to do replace IO streams
                  and close the IO  streams on nonfatal close. The code for SASL
                  authentication can be treated as being the same as from LdapClient
                  because the SASL code is only ever called from LdapClient, from
                  inside LdapClient&apos;s synchronized authenticate() method. StartTLS is called
                  directly by the application but should only occur when the underlying
                  connection is quiet.
                  &lt;p&gt;
                  In terms of synchronization, worry about data structures
                  used by the Connection thread because that usage might contend
                  with calls by the main threads (i.e., those that call LdapClient).
                  Main threads need to worry about contention with each other.
                  Fields that Connection thread uses:
                  inStream - synced access and update; initialized in constructor;
                  referenced outside class unsync&apos;ed (by LdapSasl) only
                  when connection is quiet
                  traceFile, traceTagIn, traceTagOut - no sync; debugging only
                  parent - no sync; initialized in constructor; no updates
                  pendingRequests - sync
                  pauseLock - per-instance lock;
                  paused - sync via pauseLock (pauseReader())
                  Members used by main threads (LdapClient):
                  host, port - unsync; read-only access for StartTLS and debug messages
                  setBound(), setV3() - no sync; called only by LdapClient.authenticate(),
                  which is a sync method called only when connection is &quot;quiet&quot;
                  getMsgId() - sync
                  writeRequest(), removeRequest(),findRequest(), abandonOutstandingReqs() -
                  access to shared pendingRequests is sync
                  writeRequest(),  abandonRequest(), ldapUnbind() - access to outStream sync
                  cleanup() - sync
                  readReply() - access to sock sync
                  unpauseReader() - (indirectly via writeRequest) sync on pauseLock
                  Members used by SASL auth (main thread):
                  inStream, outStream - no sync; used to construct new stream; accessed
                  only when conn is &quot;quiet&quot; and not shared
                  replaceStreams() - sync method
                  Members used by StartTLS:
                  inStream, outStream - no sync; used to record the existing streams;
                  accessed only when conn is &quot;quiet&quot; and not shared
                  replaceStreams() - sync method
                  &lt;p&gt;
                  Handles anonymous, simple, and SASL bind for v3; anonymous and simple
                  for v2.
                  %%% made public for access by LdapSasl %%%                
                <author>
                    Vincent Ryan                    
                </author>
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Jagane Sundar                    
                </author>
            </javadoc>
            <declaration name="debug" type="boolean" line="111"/>
            <declaration name="dump" type="int" line="112"/>
            <declaration name="worker" type="Thread" line="115"/>
            <declaration name="v3" type="boolean" line="117"/>
            <declaration name="host" type="String" line="119"/>
            <declaration name="port" type="int" line="121"/>
            <declaration name="bound" type="boolean" line="124"/>
            <declaration name="traceFile" type="OutputStream" line="127"/>
            <declaration name="traceTagIn" type="String" line="128"/>
            <declaration name="traceTagOut" type="String" line="129"/>
            <declaration name="inStream" type="InputStream" line="133"/>
            <declaration name="outStream" type="OutputStream" line="137"/>
            <declaration name="sock" type="Socket" line="141"/>
            <declaration name="parent" type="LdapClient" line="145"/>
            <declaration name="outMsgId" type="int" line="148"/>
            <declaration name="pendingRequests" type="LdapRequest" line="154"/>
            <declaration name="closureReason" type="IOException" line="156"/>
            <declaration name="useable" type="boolean" line="157"/>
            <declaration name="readTimeout" type="int" line="159"/>
            <method name="setV3" type="void" line="164">
                <params>
                    <param name="v" type="boolean"/>
                </params>
            </method>
            <method name="setBound" type="void" line="172"/>
            <method name="Connection" type="constructor" line="183">
                <params>
                    <param name="parent" type="LdapClient"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="socketFactory" type="String"/>
                    <param name="connectTimeout" type="int"/>
                    <param name="readTimeout" type="int"/>
                    <param name="trace" type="OutputStream"/>
                </params>
                <comment line="196">
                                        
                </comment>
                <comment line="197">
                    Connect to server                    
                </comment>
                <comment line="198">
                                        
                </comment>
                <comment line="211">
                    realException.printStackTrace();                    
                </comment>
                <comment line="218">
                    Class.forName() seems to do more error checking                    
                </comment>
                <comment line="219">
                    and will throw IllegalArgumentException and such.                    
                </comment>
                <comment line="220">
                    That&apos;s why we need to have a catch all here and                    
                </comment>
                <comment line="221">
                    ignore generic exceptions.                    
                </comment>
                <comment line="222">
                    Also catches all IO errors generated by socket creation.                    
                </comment>
                <scope line="190"/>
                <scope line="199">
                    <scope line="202"/>
                </scope>
                <scope line="209">
                    <declaration name="realException" type="Throwable" line="210"/>
                    <declaration name="ce" type="CommunicationException" line="213"/>
                </scope>
                <scope line="217">
                    <declaration name="ce" type="CommunicationException" line="223"/>
                </scope>
            </method>
            <method name="createInetSocketAddress" type="Object" line="238">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <scope line="240">
                    <declaration name="inetSocketAddressClass" type="Class" line="241"/>
                    <declaration name="inetSocketAddressCons" type="Constructor" line="244"/>
                </scope>
                <scope line="251"/>
                <scope line="254"/>
                <scope line="257"/>
                <scope line="260"/>
            </method>
            <method name="createSocket" type="Socket" line="275">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="socketFactory" type="String"/>
                    <param name="connectTimeout" type="int"/>
                </params>
                <comment line="281">
                    create the factory                    
                </comment>
                <comment line="288">
                    create the socket                    
                </comment>
                <comment line="303">
                    unconnected socket                    
                </comment>
                <comment line="312">
                    connected socket                    
                </comment>
                <comment line="317">
                    continue (but ignore connectTimeout)                    
                </comment>
                <comment line="329">
                    connected socket                    
                </comment>
                <comment line="356">
                    continue (but ignore connectTimeout)                    
                </comment>
                <comment line="364">
                    connected socket                    
                </comment>
                <declaration name="socket" type="Socket" line="277"/>
                <scope line="279">
                    <declaration name="socketFactoryClass" type="Class" line="283"/>
                    <declaration name="getDefault" type="Method" line="284"/>
                    <declaration name="factory" type="Object" line="286"/>
                    <declaration name="createSocket" type="Method" line="290"/>
                    <scope line="292">
                        <scope line="294">
                            <declaration name="connect" type="Method" line="298"/>
                            <declaration name="endpoint" type="Object" line="301"/>
                            <scope line="307"/>
                        </scope>
                        <scope line="316"/>
                    </scope>
                    <scope line="321">
                        <scope line="325"/>
                    </scope>
                </scope>
                <scope line="333">
                    <scope line="335">
                        <scope line="337">
                            <declaration name="socketCons" type="Constructor" line="338"/>
                            <declaration name="connect" type="Method" line="341"/>
                            <declaration name="endpoint" type="Object" line="344"/>
                            <scope line="348"/>
                        </scope>
                        <scope line="355"/>
                    </scope>
                    <scope line="360">
                        <scope line="361"/>
                    </scope>
                </scope>
            </method>
            <method name="getMsgId" type="int" line="378"/>
            <method name="writeRequest" type="LdapRequest" line="382">
                <params>
                    <param name="ber" type="BerEncoder"/>
                    <param name="msgId" type="int"/>
                </params>
                <comment line="383">
                                        
                </comment>
            </method>
            <method name="writeRequest" type="LdapRequest" line="387">
                <params>
                    <param name="ber" type="BerEncoder"/>
                    <param name="msgId" type="int"/>
                    <param name="pauseAfterReceipt" type="boolean"/>
                </params>
            </method>
            <method name="writeRequest" type="LdapRequest" line="392">
                <params>
                    <param name="ber" type="BerEncoder"/>
                    <param name="msgId" type="int"/>
                    <param name="pauseAfterReceipt" type="boolean"/>
                    <param name="replyQueueCapacity" type="int"/>
                </params>
                <comment line="403">
                    unpause reader so that it can get response                    
                </comment>
                <comment line="404">
                    NOTE: Must do this before writing request, otherwise might                    
                </comment>
                <comment line="405">
                    create a race condition where the writer unblocks its own response                    
                </comment>
                <comment line="419">
                    rethrow                    
                </comment>
                <declaration name="req" type="LdapRequest" line="394"/>
                <scope line="398"/>
                <scope line="408"/>
                <scope line="412">
                    <scope line="413"/>
                </scope>
                <scope line="417"/>
            </method>
            <javadoc line="425">
                Reads a reply; waits until one is ready.                
            </javadoc>
            <method name="readReply" type="BerDecoder" line="429">
                <params>
                    <param name="ldr" type="LdapRequest"/>
                </params>
                <comment line="435">
                    If socket closed, don&apos;t even try                    
                </comment>
                <comment line="443">
                    check if condition has changed since our last check                    
                </comment>
                <comment line="446">
                    Socket read timeout is specified                    
                </comment>
                <comment line="448">
                    will be woken up before readTimeout only if reply is                    
                </comment>
                <comment line="449">
                    available                    
                </comment>
                <comment line="453">
                    15 second timeout                    
                </comment>
                <declaration name="rber" type="BerDecoder" line="430"/>
                <declaration name="waited" type="boolean" line="431"/>
                <scope line="433">
                    <scope line="434">
                        <scope line="436">
                            <scope line="437"/>
                        </scope>
                        <scope line="442">
                            <scope line="445">
                                <scope line="446"/>
                                <scope line="452"/>
                            </scope>
                            <scope line="455"/>
                        </scope>
                    </scope>
                    <scope line="459"/>
                </scope>
                <scope line="465"/>
            </method>
            <method name="addRequest" type="void" line="481">
                <params>
                    <param name="ldapRequest" type="LdapRequest"/>
                </params>
                <declaration name="ldr" type="LdapRequest" line="483"/>
                <scope line="484"/>
                <scope line="487"/>
            </method>
            <method name="findRequest" type="LdapRequest" line="493">
                <params>
                    <param name="msgId" type="int"/>
                </params>
                <declaration name="ldr" type="LdapRequest" line="495"/>
                <scope line="496">
                    <scope line="497"/>
                </scope>
            </method>
            <method name="removeRequest" type="void" line="506">
                <params>
                    <param name="req" type="LdapRequest"/>
                </params>
                <declaration name="ldr" type="LdapRequest" line="507"/>
                <declaration name="ldrprev" type="LdapRequest" line="508"/>
                <scope line="510">
                    <scope line="511">
                        <scope line="514"/>
                        <scope line="516"/>
                    </scope>
                </scope>
            </method>
            <method name="abandonRequest" type="void" line="526">
                <params>
                    <param name="ldr" type="LdapRequest"/>
                    <param name="reqCtls" type="Control[]"/>
                </params>
                <comment line="527">
                    Remove from queue                    
                </comment>
                <comment line="533">
                                        
                </comment>
                <comment line="534">
                    build the abandon request.                    
                </comment>
                <comment line="535">
                                        
                </comment>
                <comment line="557">
                    System.err.println(&quot;ldap.abandon: &quot; + ex);                    
                </comment>
                <comment line="560">
                    Dont expect any response for the abandon request.                    
                </comment>
                <declaration name="ber" type="BerEncoder" line="530"/>
                <declaration name="abandonMsgId" type="int" line="531"/>
                <scope line="536">
                    <scope line="541"/>
                    <scope line="546"/>
                    <scope line="551"/>
                </scope>
                <scope line="556"/>
            </method>
            <method name="abandonOutstandingReqs" type="void" line="563">
                <params>
                    <param name="reqCtls" type="Control[]"/>
                </params>
                <declaration name="ldr" type="LdapRequest" line="564"/>
                <scope line="566"/>
            </method>
            <method name="ldapUnbind" type="void" line="579">
                <params>
                    <param name="reqCtls" type="Control[]"/>
                </params>
                <comment line="584">
                                        
                </comment>
                <comment line="585">
                    build the unbind request.                    
                </comment>
                <comment line="586">
                                        
                </comment>
                <comment line="592">
                    IMPLICIT TAGS                    
                </comment>
                <comment line="612">
                    System.err.println(&quot;ldap.unbind: &quot; + ex);                    
                </comment>
                <comment line="615">
                    Dont expect any response for the unbind request.                    
                </comment>
                <declaration name="ber" type="BerEncoder" line="581"/>
                <declaration name="unbindMsgId" type="int" line="582"/>
                <scope line="588">
                    <scope line="596"/>
                    <scope line="601"/>
                    <scope line="606"/>
                </scope>
                <scope line="611"/>
            </method>
            <javadoc line="618">
                @param reqCtls Possibly null request controls that accompanies the
                  abandon and unbind LDAP request.                
                <param>
                    notifyParent true means to call parent LdapClient back, notifying
                      it that the connection has been closed; false means not to notify
                      parent. If LdapClient invokes cleanup(), notifyParent should be set to
                      false because LdapClient already knows that it is closing
                      the connection. If Connection invokes cleanup(), notifyParent should be
                      set to true because LdapClient needs to know about the closure.                    
                </param>
            </javadoc>
            <method name="cleanup" type="void" line="628">
                <params>
                    <param name="reqCtls" type="Control[]"/>
                    <param name="notifyParent" type="boolean"/>
                </params>
                <declaration name="nparent" type="boolean" line="629"/>
                <scope line="631">
                    <scope line="634">
                        <scope line="635"/>
                        <scope line="638">
                            <scope line="639"/>
                            <scope line="642"/>
                        </scope>
                        <scope line="645">
                            <scope line="646"/>
                            <scope line="650"/>
                            <scope line="654">
                                <declaration name="ldr" type="LdapRequest" line="655"/>
                                <scope line="656"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="665">
                        <declaration name="ldr" type="LdapRequest" line="666"/>
                        <scope line="667">
                            <scope line="669"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="replaceStreams" type="void" line="684">
                <params>
                    <param name="newIn" type="InputStream"/>
                    <param name="newOut" type="OutputStream"/>
                </params>
                <comment line="692">
                    Cleanup old stream                    
                </comment>
                <comment line="700">
                    Replace stream                    
                </comment>
                <scope line="685"/>
                <scope line="693"/>
                <scope line="695"/>
            </method>
            <javadoc line="704">
                Used by Connection thread to read inStream into a local variable.
                  This ensures that there is no contention between the main thread
                  and the Connection thread when the main thread updates inStream.                
            </javadoc>
            <method name="getInputStream" type="InputStream" line="709"/>
            <declaration name="pauseLock" type="Object" line="761"/>
            <declaration name="paused" type="boolean" line="762"/>
            <method name="unpauseReader" type="void" line="767">
                <scope line="768">
                    <scope line="769">
                        <scope line="770"/>
                    </scope>
                </scope>
            </method>
            <method name="pauseReader" type="void" line="785">
                <comment line="793">
                    notified by unpauseReader                    
                </comment>
                <scope line="786"/>
                <scope line="791">
                    <scope line="792"/>
                </scope>
                <scope line="795"/>
            </method>
            <method name="run" type="void" line="810">
                <comment line="811">
                    Buffer for reading incoming bytes                    
                </comment>
                <comment line="812">
                    Message id of incoming response                    
                </comment>
                <comment line="813">
                    Number of bytes in inbuf                    
                </comment>
                <comment line="814">
                    Temp; number of bytes read from stream                    
                </comment>
                <comment line="815">
                    Offset of where to store bytes in inbuf                    
                </comment>
                <comment line="816">
                    Length of ASN sequence                    
                </comment>
                <comment line="817">
                    Number of sequence length bytes                    
                </comment>
                <comment line="818">
                    End of stream                    
                </comment>
                <comment line="819">
                    Decoder for ASN.1 BER data from inbuf                    
                </comment>
                <comment line="825">
                    type and length (at most 128 octets for long form)                    
                </comment>
                <comment line="834">
                    check that it is the beginning of a sequence                    
                </comment>
                <comment line="838">
                    a new stream to try                    
                </comment>
                <comment line="840">
                    EOF                    
                </comment>
                <comment line="847">
                    get length of sequence                    
                </comment>
                <comment line="850">
                    EOF                    
                </comment>
                <comment line="853">
                    if high bit is on, length is encoded in the                    
                </comment>
                <comment line="854">
                    subsequent length bytes and the number of length bytes                    
                </comment>
                <comment line="855">
                    is equal to &amp; 0x80 (i.e. length byte with high bit off).                    
                </comment>
                <comment line="857">
                    number of length bytes                    
                </comment>
                <comment line="862">
                    Read all length bytes                    
                </comment>
                <comment line="868">
                    EOF                    
                </comment>
                <comment line="873">
                    end-of-stream reached before length bytes are read                    
                </comment>
                <comment line="875">
                    EOF                    
                </comment>
                <comment line="877">
                    Add contents of length bytes to determine length                    
                </comment>
                <comment line="885">
                    read in seqlen bytes                    
                </comment>
                <comment line="890">
                    if (dump &gt; 0) {
                    System.err.println(&quot;seqlen: &quot; + seqlen);
                    System.err.println(&quot;bufsize: &quot; + offset);
                    System.err.println(&quot;bytesleft: &quot; + bytesleft);
                    System.err.println(&quot;bytesread: &quot; + bytesread);
                    }                    
                </comment>
                <comment line="909">
                    reset offset                    
                </comment>
                <comment line="914">
                    Unsolicited Notification                    
                </comment>
                <comment line="921">
                    Grab pauseLock before making reply available
                     to ensure that reader goes into paused state
                     before writer can attempt to unpause reader                    
                </comment>
                <comment line="929">
                    Go into paused state; release
                     pauseLock                    
                </comment>
                <comment line="936">
                    else release pauseLock                    
                </comment>
                <comment line="939">
                    System.err.println(&quot;Cannot find&quot; +                    
                </comment>
                <comment line="940">
                    &quot;LdapRequest for &quot; + inMsgId);                    
                </comment>
                <comment line="944">
                    System.err.println(&quot;Cannot parse Ber&quot;);                    
                </comment>
                <comment line="953">
                    A new stream to try                    
                </comment>
                <comment line="954">
                    Go to top of loop and continue                    
                </comment>
                <comment line="959">
                    rethrow exception                    
                </comment>
                <comment line="974">
                    cleanup                    
                </comment>
                <declaration name="inbuf" type="byte" line="811"/>
                <declaration name="inMsgId" type="int" line="812"/>
                <declaration name="bytesread" type="int" line="813"/>
                <declaration name="br" type="int" line="814"/>
                <declaration name="offset" type="int" line="815"/>
                <declaration name="seqlen" type="int" line="816"/>
                <declaration name="seqlenlen" type="int" line="817"/>
                <declaration name="eos" type="boolean" line="818"/>
                <declaration name="retBer" type="BerDecoder" line="819"/>
                <declaration name="in" type="InputStream" line="820"/>
                <scope line="822">
                    <scope line="823">
                        <scope line="824">
                            <scope line="836">
                                <scope line="837"/>
                                <scope line="839"/>
                            </scope>
                            <scope line="856">
                                <scope line="863">
                                    <scope line="866"/>
                                </scope>
                                <scope line="879"/>
                            </scope>
                            <declaration name="left" type="byte[]" line="886"/>
                            <scope line="900">
                                <scope line="903"/>
                                <declaration name="needPause" type="boolean" line="911"/>
                                <scope line="913"/>
                                <scope line="916">
                                    <declaration name="ldr" type="LdapRequest" line="917"/>
                                    <scope line="919">
                                        <scope line="926">
                                            <scope line="928"/>
                                        </scope>
                                    </scope>
                                    <scope line="938"/>
                                </scope>
                            </scope>
                            <scope line="943"/>
                        </scope>
                        <scope line="946">
                            <scope line="947"/>
                            <scope line="952"/>
                            <scope line="955">
                                <scope line="956"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="964"/>
                </scope>
                <scope line="968">
                    <scope line="969"/>
                </scope>
                <scope line="973"/>
                <scope line="976"/>
            </method>
        </class>
    </source>