<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jndi.ldap">
        <import package="javax.naming"/>
        <import package="javax.naming.directory"/>
        <import package="javax.naming.spi"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.util.StringTokenizer"/>
        <import package="com.sun.jndi.toolkit.url.Uri"/>
        <import package="com.sun.jndi.toolkit.url.UrlUtil"/>
        <class name="LdapURL" line="68">
            <extends class="Uri"/>
            <comment line="172">
                Assembles an LDAP or LDAPS URL string from its components.
                 If &quot;host&quot; is an IPv6 literal, it may optionally include delimiting
                 brackets.                
            </comment>
            <comment line="195">
                Parses the path and query components of an URL and sets this
                 object&apos;s fields accordingly.                
            </comment>
            <comment line="255">
                public static void main(String[] args) throws Exception {
                
                LdapURL url = new LdapURL(args[0]);
                
                System.out.println(&quot;Example LDAP URL: &quot; + url.toString());
                System.out.println(&quot;  scheme: &quot; + url.getScheme());
                System.out.println(&quot;    host: &quot; + url.getHost());
                System.out.println(&quot;    port: &quot; + url.getPort());
                System.out.println(&quot;      DN: &quot; + url.getDN());
                System.out.println(&quot;   attrs: &quot; + url.getAttributes());
                System.out.println(&quot;   scope: &quot; + url.getScope());
                System.out.println(&quot;  filter: &quot; + url.getFilter());
                System.out.println(&quot;  extens: &quot; + url.getExtensions());
                System.out.println(&quot;&quot;);
                }                
            </comment>
            <declaration name="useSsl" type="boolean" line="70"/>
            <declaration name="DN" type="String" line="71"/>
            <declaration name="attributes" type="String" line="72"/>
            <declaration name="scope" type="String" line="73"/>
            <declaration name="filter" type="String" line="74"/>
            <declaration name="extensions" type="String" line="75"/>
            <javadoc line="77">
                Creates an LdapURL object from an LDAP URL string.                
            </javadoc>
            <method name="LdapURL" type="constructor" line="80">
                <params>
                    <param name="url" type="String"/>
                </params>
                <comment line="85">
                    scheme, host, port, path, query                    
                </comment>
                <comment line="92">
                    DN, attributes, scope, filter, extensions                    
                </comment>
                <scope line="84">
                    <scope line="88"/>
                </scope>
                <scope line="94">
                    <declaration name="ne" type="NamingException" line="95"/>
                </scope>
                <scope line="98">
                    <declaration name="ne" type="NamingException" line="99"/>
                </scope>
            </method>
            <javadoc line="105">
                Returns true if the URL is an LDAPS URL.                
            </javadoc>
            <method name="useSsl" type="boolean" line="108"/>
            <javadoc line="112">
                Returns the LDAP URL&apos;s distinguished name.                
            </javadoc>
            <method name="getDN" type="String" line="115"/>
            <javadoc line="119">
                Returns the LDAP URL&apos;s attributes.                
            </javadoc>
            <method name="getAttributes" type="String" line="122"/>
            <javadoc line="126">
                Returns the LDAP URL&apos;s scope.                
            </javadoc>
            <method name="getScope" type="String" line="129"/>
            <javadoc line="133">
                Returns the LDAP URL&apos;s filter.                
            </javadoc>
            <method name="getFilter" type="String" line="136"/>
            <javadoc line="140">
                Returns the LDAP URL&apos;s extensions.                
            </javadoc>
            <method name="getExtensions" type="String" line="143"/>
            <javadoc line="147">
                Given a space-separated list of LDAP URLs, returns an array of strings.                
            </javadoc>
            <method name="fromList" type="String[]" line="150">
                <params>
                    <param name="urlList" type="String"/>
                </params>
                <comment line="153">
                    next available index in urls                    
                </comment>
                <declaration name="urls" type="String[]" line="152"/>
                <declaration name="i" type="int" line="153"/>
                <declaration name="st" type="StringTokenizer" line="154"/>
                <scope line="156"/>
                <declaration name="trimmed" type="String[]" line="159"/>
            </method>
            <javadoc line="164">
                Derermines whether an LDAP URL has query components.                
            </javadoc>
            <method name="hasQueryComponents" type="boolean" line="167">
                <params>
                    <param name="url" type="String"/>
                </params>
            </method>
            <method name="toUrlString" type="String" line="177">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="dn" type="String"/>
                    <param name="useSsl" type="boolean"/>
                </params>
                <comment line="182">
                    IPv6 literal                    
                </comment>
                <comment line="189">
                    UTF8 should always be supported                    
                </comment>
                <scope line="179">
                    <declaration name="h" type="String" line="180"/>
                    <scope line="181"/>
                    <declaration name="p" type="String" line="184"/>
                    <declaration name="d" type="String" line="185"/>
                </scope>
                <scope line="188"/>
            </method>
            <method name="parsePathAndQuery" type="void" line="199">
                <comment line="201">
                    path begins with a &apos;/&apos; or is empty                    
                </comment>
                <comment line="212">
                    query begins with a &apos;?&apos; or is null                    
                </comment>
                <scope line="203"/>
                <scope line="208"/>
                <scope line="214"/>
                <declaration name="qmark2" type="int" line="218"/>
                <scope line="220"/>
                <scope line="223"/>
                <declaration name="qmark3" type="int" line="227"/>
                <scope line="229"/>
                <scope line="232"/>
                <declaration name="qmark4" type="int" line="236"/>
                <scope line="238"/>
                <scope line="240">
                    <scope line="241"/>
                    <scope line="245"/>
                </scope>
                <scope line="249"/>
            </method>
        </class>
    </source>