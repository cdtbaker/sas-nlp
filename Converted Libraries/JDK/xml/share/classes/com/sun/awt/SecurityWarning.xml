<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.awt">
        <import package="java.awt"/>
        <import package="java.awt.geom"/>
        <import package="sun.awt.AWTAccessor"/>
        <class name="SecurityWarning" line="34">
            <javadoc line="34">
                Security Warning control interface.
                  This class provides a couple of methods that help a developer relocate
                  the AWT security warning to an appropriate position relative to the current
                  window size. A &quot;top-level window&quot; is an instance of the {@code Window}class (or its descendant, such as {@code JFrame}). The security warning
                  is applied to all windows created by an untrusted code. All such windows
                  have a non-null &quot;warning string&quot; (see {@link Window#getWarningString()}).
                  &lt;p&gt;
                  &lt;b&gt;WARNING&lt;/b&gt;: This class is an implementation detail and only meant
                  for limited use outside of the core platform. This API may change
                  drastically between update release, and it may even be
                  removed or be moved to some other packages or classes.                
            </javadoc>
            <javadoc line="51">
                The SecurityWarning class should not be instantiated                
            </javadoc>
            <method name="SecurityWarning" type="constructor" line="54"/>
            <javadoc line="57">
                Gets the size of the security warning.
                  The returned value is not valid until the peer has been created. Before
                  invoking this method a developer must call the {@link Window#pack()},{@link Window#setVisible()}, or some other method that creates the peer.                
                <param>
                    window the window to get the security warning size for                    
                </param>
                <throws>
                    NullPointerException if the window argument is null                    
                </throws>
                <throws>
                    IllegalArgumentException if the window is trusted (i.e.
                      the {@code getWarningString()} returns null)                    
                </throws>
            </javadoc>
            <method name="getSize" type="Dimension" line="70">
                <params>
                    <param name="window" type="Window"/>
                </params>
                <comment line="79">
                    We don&apos;t check for a non-null peer since it may be destroyed                    
                </comment>
                <comment line="80">
                    after assigning a valid value to the security warning size.                    
                </comment>
                <scope line="71"/>
                <scope line="75"/>
            </method>
            <javadoc line="85">
                Sets the position of the security warning.
                  &lt;p&gt;
                  The {@code alignmentX} and {@code alignmentY} arguments specify the
                  origin of the coordinate system used to calculate the position of the
                  security warning. The values must be in the range [0.0f...1.0f].  The{@code 0.0f} value represents the left (top) edge of the rectangular
                  bounds of the window. The {@code 1.0f} value represents the right
                  (bottom) edge of the bounds. Whenever the size of the window changes,
                  the origin of the coordinate system gets relocated accordingly. For
                  convenience a developer may use the {@code Component._ALIGNMENT}constants to pass predefined values for these arguments.
                  &lt;p&gt;
                  The {@code point} argument specifies the location of the security
                  warning in the coordinate system described above. If both {@code x} and{@code y} coordinates of the point are equal to zero, the warning will
                  be located right in the origin of the coordinate system. On the other
                  hand, if both {@code alignmentX} and {@code alignmentY} are equal to
                  zero (i.e. the origin of the coordinate system is placed at the top-left
                  corner of the window), then the {@code point} argument represents the
                  absolute location of the security warning relative to the location of
                  the window. The &quot;absolute&quot; in this case means that the position of the
                  security warning is not effected by resizing of the window.
                  &lt;p&gt;
                  Note that the security warning managment code guarantees that:
                  &lt;ul&gt;
                  &lt;li&gt;The security warning cannot be located farther than two pixels from
                  the rectangular bounds of the window (see {@link Window#getBounds}), and
                  &lt;li&gt;The security warning is always visible on the screen.
                  &lt;/ul&gt;
                  If either of the conditions is violated, the calculated position of the
                  security warning is adjusted by the system to meet both these
                  conditions.
                  &lt;p&gt;
                  The default position of the security warning is in the upper-right
                  corner of the window, two pixels to the right from the right edge. This
                  corresponds to the following arguments passed to this method:
                  &lt;ul&gt;
                  &lt;li&gt;{@code alignmentX = Component.RIGHT_ALIGNMENT}&lt;li&gt;{@code alignmentY = Component.TOP_ALIGNMENT}&lt;li&gt;{@code point = (2, 0)}&lt;/ul&gt;                
                <param>
                    window the window to set the position of the security warning for                    
                </param>
                <param>
                    alignmentX the horizontal origin of the coordinate system                    
                </param>
                <param>
                    alignmentY the vertical origin of the coordinate system                    
                </param>
                <param>
                    point the position of the security warning in the specified
                      coordinate system                    
                </param>
                <throws>
                    NullPointerException if the window argument is null                    
                </throws>
                <throws>
                    NullPointerException if the point argument is null                    
                </throws>
                <throws>
                    IllegalArgumentException if the window is trusted (i.e.
                      the {@code getWarningString()} returns null                    
                </throws>
                <throws>
                    IllegalArgumentException if the alignmentX or alignmentY
                      arguments are not within the range [0.0f ... 1.0f]                    
                </throws>
            </javadoc>
            <method name="setPosition" type="void" line="143">
                <params>
                    <param name="window" type="Window"/>
                    <param name="point" type="Point2D"/>
                    <param name="alignmentX" type="float"/>
                    <param name="alignmentY" type="float"/>
                </params>
                <scope line="144"/>
                <scope line="148"/>
                <scope line="152"/>
                <scope line="156"/>
                <scope line="160"/>
            </method>
        </class>
    </source>