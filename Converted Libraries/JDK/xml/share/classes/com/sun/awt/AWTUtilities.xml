<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.awt">
        <import package="java.awt"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="sun.awt.SunToolkit"/>
        <class name="AWTUtilities" line="5">
            <javadoc line="5">
                A collection of utility methods for AWT.
                  The functionality provided by the static methods of the class includes:
                  &lt;ul&gt;
                  &lt;li&gt;Setting shapes on top-level windows
                  &lt;li&gt;Setting a constant alpha value for each pixel of a top-level window
                  &lt;li&gt;Making a window non-opaque, after that it paints only explicitly
                  painted pixels on the screen, with arbitrary alpha values for every pixel.
                  &lt;li&gt;Setting a &apos;mixing-cutout&apos; shape for a component.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  A &quot;top-level window&quot; is an instance of the {@code Window} class (or its
                  descendant, such as {@code JFrame}).
                  &lt;p&gt;
                  Some of the mentioned features may not be supported by the native platform.
                  To determine whether a particular feature is supported, the user must use
                  the {@code isTranslucencySupported()} method of the class passing a desired
                  translucency kind (a member of the {@code Translucency} enum) as an
                  argument.
                  &lt;p&gt;
                  The per-pixel alpha feature also requires the user to create her/his
                  windows using a translucency-capable graphics configuration.
                  The {@code isTranslucencyCapable()} method must
                  be used to verify whether any given GraphicsConfiguration supports
                  the trasnlcency effects.
                  &lt;p&gt;
                  &lt;b&gt;WARNING&lt;/b&gt;: This class is an implementation detail and only meant
                  for limited use outside of the core platform. This API may change
                  drastically between update release, and it may even be
                  removed or be moved in some other package(s)/class(es).                
            </javadoc>
            <javadoc line="37">
                The AWTUtilities class should not be instantiated                
            </javadoc>
            <method name="AWTUtilities" type="constructor" line="40"/>
            <declaration name="Translucency" type="enum" line="42"/>
            <javadoc line="42">
                Kinds of translucency supported by the underlying system.                
                <see>
                    #isTranslucencySupported                    
                </see>
            </javadoc>
            <scope line="46"/>
            <javadoc line="63">
                Returns whether the given level of translucency is supported by
                  the underlying system.
                  Note that this method may sometimes return the value
                  indicating that the particular level is supported, but
                  the native windowing system may still not support the
                  given level of translucency (due to the bugs in
                  the windowing system).                
                <param>
                    translucencyKind a kind of translucency support
                      (either PERPIXEL_TRANSPARENT,
                      TRANSLUCENT, or PERPIXEL_TRANSLUCENT)                    
                </param>
                <return>
                    whether the given translucency kind is supported                    
                </return>
            </javadoc>
            <method name="isTranslucencySupported" type="boolean" line="76">
                <params>
                    <param name="translucencyKind" type="Translucency"/>
                </params>
            </method>
            <javadoc line="87">
                Returns whether the windowing system supports changing the opacity
                  value of top-level windows.
                  Note that this method may sometimes return true, but the native
                  windowing system may still not support the concept of
                  translucency (due to the bugs in the windowing system).                
            </javadoc>
            <method name="isWindowOpacitySupported" type="boolean" line="94">
                <declaration name="curToolkit" type="Toolkit" line="95"/>
                <scope line="96"/>
            </method>
            <javadoc line="101">
                Set the opacity of the window. The opacity is at the range [0..1].
                  Note that setting the opacity level of 0 may or may not disable
                  the mouse event handling on this window. This is
                  a platform-dependent behavior.
                  In order for this method to enable the translucency effect,
                  the isTranslucencySupported() method should indicate that the
                  TRANSLUCENT level of translucency is supported.
                  &lt;p&gt;Also note that the window must not be in the full-screen mode
                  when setting the opacity value &amp;lt; 1.0f. Otherwise
                  the IllegalArgumentException is thrown.                
                <param>
                    window the window to set the opacity level to                    
                </param>
                <param>
                    opacity the opacity level to set to the window                    
                </param>
                <throws>
                    NullPointerException if the window argument is null                    
                </throws>
                <throws>
                    IllegalArgumentException if the opacity is out of
                      the range [0..1]                    
                </throws>
                <throws>
                    IllegalArgumentException if the window is in full screen mode,
                      and the opacity is less than 1.0f                    
                </throws>
                <throws>
                    UnsupportedOperationException if the TRANSLUCENT translucency
                      kind is not supported                    
                </throws>
            </javadoc>
            <method name="setWindowOpacity" type="void" line="122">
                <params>
                    <param name="window" type="Window"/>
                    <param name="opacity" type="float"/>
                </params>
                <scope line="123"/>
            </method>
            <javadoc line="128">
                Get the opacity of the window. If the opacity has not
                  yet being set, this method returns 1.0.                
                <param>
                    window the window to get the opacity level from                    
                </param>
                <throws>
                    NullPointerException if the window argument is null                    
                </throws>
            </javadoc>
            <method name="getWindowOpacity" type="float" line="134">
                <params>
                    <param name="window" type="Window"/>
                </params>
                <scope line="135"/>
            </method>
            <javadoc line="140">
                Returns whether the windowing system supports changing the shape
                  of top-level windows.
                  Note that this method may sometimes return true, but the native
                  windowing system may still not support the concept of
                  shaping (due to the bugs in the windowing system).                
            </javadoc>
            <method name="isWindowShapingSupported" type="boolean" line="147">
                <declaration name="curToolkit" type="Toolkit" line="148"/>
                <scope line="149"/>
            </method>
            <javadoc line="154">
                Returns an object that implements the Shape interface and represents
                  the shape previously set with the call to the setWindowShape() method.
                  If no shape has been set yet, or the shape has been reset to null,
                  this method returns null.                
                <param>
                    window the window to get the shape from                    
                </param>
                <return>
                    the current shape of the window                    
                </return>
                <throws>
                    NullPointerException if the window argument is null                    
                </throws>
            </javadoc>
            <method name="getWindowShape" type="Shape" line="163">
                <params>
                    <param name="window" type="Window"/>
                </params>
                <scope line="164"/>
            </method>
            <javadoc line="169">
                Sets a shape for the given window.
                  If the shape argument is null, this methods restores
                  the default shape making the window rectangular.
                  &lt;p&gt;Note that in order to set a shape, the window must be undecorated.
                  If the window is decorated, this method ignores the {@code shape}argument and resets the shape to null.
                  &lt;p&gt;Also note that the window must not be in the full-screen mode
                  when setting a non-null shape. Otherwise the IllegalArgumentException
                  is thrown.
                  &lt;p&gt;Depending on the platform, the method may return without
                  effecting the shape of the window if the window has a non-null warning
                  string ({@link Window#getWarningString()}). In this case the passed
                  shape object is ignored.                
                <param>
                    window the window to set the shape to                    
                </param>
                <param>
                    shape the shape to set to the window                    
                </param>
                <throws>
                    NullPointerException if the window argument is null                    
                </throws>
                <throws>
                    IllegalArgumentException if the window is in full screen mode,
                      and the shape is not null                    
                </throws>
                <throws>
                    UnsupportedOperationException if the PERPIXEL_TRANSPARENT
                      translucency kind is not supported                    
                </throws>
            </javadoc>
            <method name="setWindowShape" type="void" line="190">
                <params>
                    <param name="window" type="Window"/>
                    <param name="shape" type="Shape"/>
                </params>
                <scope line="191"/>
            </method>
            <method name="isWindowTranslucencySupported" type="boolean" line="196">
                <declaration name="curToolkit" type="Toolkit" line="197"/>
                <scope line="198"/>
                <scope line="201"/>
                <declaration name="env" type="GraphicsEnvironment" line="204"/>
                <scope line="205"/>
                <declaration name="devices" type="GraphicsDevice[]" line="208"/>
                <scope line="209">
                    <declaration name="configs" type="GraphicsConfiguration[]" line="210"/>
                    <scope line="211">
                        <scope line="212"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="219">
                Enables the per-pixel alpha support for the given window.
                  Once the window becomes non-opaque (the isOpaque is set to false),
                  the drawing sub-system is starting to respect the alpha value of each
                  separate pixel. If a pixel gets painted with alpha color component
                  equal to zero, it becomes visually transparent, if the alpha of the
                  pixel is equal to 255, the pixel is fully opaque. Interim values
                  of the alpha color component make the pixel semi-transparent (i.e.
                  translucent).
                  &lt;p&gt;Note that in order for the window to support the per-pixel alpha
                  mode, the window must be created using the GraphicsConfiguration
                  for which the {@link #isTranslucencyCapable}method returns true.
                  &lt;p&gt;Also note that some native systems enable the per-pixel translucency
                  mode for any window created using the translucency-compatible
                  graphics configuration. However, it is highly recommended to always
                  invoke the setWindowOpaque() method for these windows, at least for
                  the sake of cross-platform compatibility reasons.
                  &lt;p&gt;Also note that the window must not be in the full-screen mode
                  when making it non-opaque. Otherwise the IllegalArgumentException
                  is thrown.
                  &lt;p&gt;If the window is a {@code Frame} or a {@code Dialog}, the window must
                  be undecorated prior to enabling the per-pixel translucency effect (see{@link Frame#setUndecorated()} and/or {@link Dialog#setUndecorated()}).
                  If the window becomes decorated through a subsequent call to the
                  corresponding {@code setUndecorated()} method, the per-pixel
                  translucency effect will be disabled and the opaque property reset to{@code true}.
                  &lt;p&gt;Depending on the platform, the method may return without
                  effecting the opaque property of the window if the window has a non-null
                  warning string ({@link Window#getWarningString()}). In this case
                  the passed &apos;isOpaque&apos; value is ignored.                
                <param>
                    window the window to set the shape to                    
                </param>
                <param>
                    isOpaque whether the window must be opaque (true),
                      or translucent (false)                    
                </param>
                <throws>
                    NullPointerException if the window argument is null                    
                </throws>
                <throws>
                    IllegalArgumentException if the window uses
                      a GraphicsConfiguration for which the{@code isTranslucencyCapable()}method returns false                    
                </throws>
                <throws>
                    IllegalArgumentException if the window is in full screen mode,
                      and the isOpaque is false                    
                </throws>
                <throws>
                    IllegalArgumentException if the window is decorated and the
                      isOpaque argument is {@code false}.                    
                </throws>
                <throws>
                    UnsupportedOperationException if the PERPIXEL_TRANSLUCENT
                      translucency kind is not supported                    
                </throws>
            </javadoc>
            <method name="setWindowOpaque" type="void" line="261">
                <params>
                    <param name="window" type="Window"/>
                    <param name="isOpaque" type="boolean"/>
                </params>
                <scope line="262"/>
                <scope line="265"/>
            </method>
            <javadoc line="270">
                Returns whether the window is opaque or translucent.                
                <param>
                    window the window to set the shape to                    
                </param>
                <return>
                    whether the window is currently opaque (true)
                      or translucent (false)                    
                </return>
                <throws>
                    NullPointerException if the window argument is null                    
                </throws>
            </javadoc>
            <method name="isWindowOpaque" type="boolean" line="277">
                <params>
                    <param name="window" type="Window"/>
                </params>
                <scope line="278"/>
            </method>
            <javadoc line="283">
                Verifies whether a given GraphicsConfiguration supports
                  the PERPIXEL_TRANSLUCENT kind of translucency.
                  All windows that are intended to be used with the {@link #setWindowOpaque}method must be created using a GraphicsConfiguration for which this method
                  returns true.
                  &lt;p&gt;Note that some native systems enable the per-pixel translucency
                  mode for any window created using a translucency-capable
                  graphics configuration. However, it is highly recommended to always
                  invoke the setWindowOpaque() method for these windows, at least
                  for the sake of cross-platform compatibility reasons.                
                <param>
                    gc GraphicsConfiguration                    
                </param>
                <throws>
                    NullPointerException if the gc argument is null                    
                </throws>
                <return>
                    whether the given GraphicsConfiguration supports
                      the translucency effects.                    
                </return>
            </javadoc>
            <method name="isTranslucencyCapable" type="boolean" line="298">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <scope line="299"/>
                <declaration name="curToolkit" type="Toolkit" line="302"/>
                <scope line="303"/>
            </method>
            <javadoc line="308">
                Sets a &apos;mixing-cutout&apos; shape for the given component.
                  By default a lightweight component is treated as an opaque rectangle for
                  the purposes of the Heavyweight/Lightweight Components Mixing feature.
                  This method enables developers to set an arbitrary shape to be cut out
                  from heavyweight components positioned underneath the lightweight
                  component in the z-order.
                  &lt;p&gt;
                  The {@code shape} argument may have the following values:
                  &lt;ul&gt;
                  &lt;li&gt;{@code null} - reverts the default cutout shape (the rectangle equal
                  to the component&apos;s {@code getBounds()})
                  &lt;li&gt;&lt;i&gt;empty-shape&lt;/i&gt; - does not cut out anything from heavyweight
                  components. This makes the given lightweight component effectively
                  transparent. Note that descendants of the lightweight component still
                  affect the shapes of heavyweight components.  An example of an
                  &lt;i&gt;empty-shape&lt;/i&gt; is {@code new Rectangle()}.
                  &lt;li&gt;&lt;i&gt;non-empty-shape&lt;/i&gt; - the given shape will be cut out from
                  heavyweight components.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The most common example when the &apos;mixing-cutout&apos; shape is needed is a
                  glass pane component. The {@link JRootPane#setGlassPane()} method
                  automatically sets the &lt;i&gt;empty-shape&lt;/i&gt; as the &apos;mixing-cutout&apos; shape
                  for the given glass pane component.  If a developer needs some other
                  &apos;mixing-cutout&apos; shape for the glass pane (which is rare), this must be
                  changed manually after installing the glass pane to the root pane.
                  &lt;p&gt;
                  Note that the &apos;mixing-cutout&apos; shape neither affects painting, nor the
                  mouse events handling for the given component. It is used exclusively
                  for the purposes of the Heavyweight/Lightweight Components Mixing
                  feature.                
                <param>
                    component the component that needs non-default
                      'mixing-cutout' shape                    
                </param>
                <param>
                    shape the new 'mixing-cutout' shape                    
                </param>
                <throws>
                    NullPointerException if the component argument is {@code null}                    
                </throws>
            </javadoc>
            <method name="setComponentMixingCutoutShape" type="void" line="345">
                <params>
                    <param name="component" type="Component"/>
                    <param name="shape" type="Shape"/>
                </params>
                <scope line="346"/>
            </method>
        </class>
    </source>