<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.beans.decoder">
        <import package="com.sun.beans.finder.ClassFinder"/>
        <import package="java.beans.ExceptionListener"/>
        <import package="java.io.IOException"/>
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="javax.xml.parsers.ParserConfigurationException"/>
        <import package="javax.xml.parsers.SAXParserFactory"/>
        <import package="org.xml.sax.Attributes"/>
        <import package="org.xml.sax.InputSource"/>
        <import package="org.xml.sax.SAXException"/>
        <import package="org.xml.sax.helpers.DefaultHandler"/>
        <class name="DocumentHandler" line="49">
            <extends class="DefaultHandler"/>
            <javadoc line="49">
                The main class to parse JavaBeans XML archive.                
                <since>
                    1.7                    
                </since>
                <author>
                    Sergey A. Malenkov                    
                </author>
                <see>
                    ElementHandler                    
                </see>
            </javadoc>
            <declaration name="handlers" type="Map&lt;String,Class&lt;? extends ElementHandler&gt;&gt;" line="59"/>
            <declaration name="environment" type="Map&lt;String,Object&gt;" line="61"/>
            <declaration name="objects" type="List&lt;Object&gt;" line="63"/>
            <declaration name="loader" type="Reference&lt;ClassLoader&gt;" line="65"/>
            <declaration name="listener" type="ExceptionListener" line="66"/>
            <declaration name="owner" type="Object" line="67"/>
            <declaration name="handler" type="ElementHandler" line="69"/>
            <javadoc line="71">
                Creates new instance of document handler.                
            </javadoc>
            <method name="DocumentHandler" type="constructor" line="74">
                <comment line="75">
                    NON-NLS: the element name                    
                </comment>
                <comment line="76">
                    NON-NLS: the element name                    
                </comment>
                <comment line="77">
                    NON-NLS: the element name                    
                </comment>
                <comment line="78">
                    NON-NLS: the element name                    
                </comment>
                <comment line="79">
                    NON-NLS: the element name                    
                </comment>
                <comment line="80">
                    NON-NLS: the element name                    
                </comment>
                <comment line="82">
                    NON-NLS: the element name                    
                </comment>
                <comment line="83">
                    NON-NLS: the element name                    
                </comment>
                <comment line="84">
                    NON-NLS: the element name                    
                </comment>
                <comment line="85">
                    NON-NLS: the element name                    
                </comment>
                <comment line="86">
                    NON-NLS: the element name                    
                </comment>
                <comment line="87">
                    NON-NLS: the element name                    
                </comment>
                <comment line="88">
                    NON-NLS: the element name                    
                </comment>
                <comment line="89">
                    NON-NLS: the element name                    
                </comment>
                <comment line="90">
                    NON-NLS: the element name                    
                </comment>
                <comment line="92">
                    some handlers for new elements                    
                </comment>
                <comment line="93">
                    NON-NLS: the element name                    
                </comment>
                <comment line="94">
                    NON-NLS: the element name                    
                </comment>
                <comment line="95">
                    NON-NLS: the element name                    
                </comment>
                <comment line="96">
                    NON-NLS: the element name                    
                </comment>
                <comment line="97">
                    NON-NLS: the element name                    
                </comment>
                <comment line="98">
                    NON-NLS: the element name                    
                </comment>
                <comment line="99">
                    NON-NLS: the element name                    
                </comment>
            </method>
            <javadoc line="102">
                Returns the class loader used to instantiate objects.
                  If the class loader has not been explicitly set
                  then {@code null} is returned.                
                <return>
                    the class loader used to instantiate objects                    
                </return>
            </javadoc>
            <method name="getClassLoader" type="ClassLoader" line="109"/>
            <javadoc line="115">
                Sets the class loader used to instantiate objects.
                  If the class loader is not set
                  then default class loader will be used.                
                <param>
                    loader  a classloader to use                    
                </param>
            </javadoc>
            <method name="setClassLoader" type="void" line="122">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="126">
                Returns the exception listener for parsing.
                  The exception listener is notified
                  when handler catches recoverable exceptions.
                  If the exception listener has not been explicitly set
                  then default exception listener is returned.                
                <return>
                    the exception listener for parsing                    
                </return>
            </javadoc>
            <method name="getExceptionListener" type="ExceptionListener" line="135"/>
            <javadoc line="139">
                Sets the exception listener for parsing.
                  The exception listener is notified
                  when handler catches recoverable exceptions.                
                <param>
                    listener  the exception listener for parsing                    
                </param>
            </javadoc>
            <method name="setExceptionListener" type="void" line="146">
                <params>
                    <param name="listener" type="ExceptionListener"/>
                </params>
            </method>
            <javadoc line="150">
                Returns the owner of this document handler.                
                <return>
                    the owner of this document handler                    
                </return>
            </javadoc>
            <method name="getOwner" type="Object" line="155"/>
            <javadoc line="159">
                Sets the owner of this document handler.                
                <param>
                    owner  the owner of this document handler                    
                </param>
            </javadoc>
            <method name="setOwner" type="void" line="164">
                <params>
                    <param name="owner" type="Object"/>
                </params>
            </method>
            <javadoc line="168">
                Returns the handler for the element with specified name.                
                <param>
                    name  the name of the element                    
                </param>
                <return>
                    the corresponding element handler                    
                </return>
            </javadoc>
            <method name="getElementHandler" type="Class<? extends ElementHandler>" line="174">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="type" type="Class&lt;? extends ElementHandler&gt;" line="175"/>
                <scope line="176"/>
            </method>
            <javadoc line="182">
                Sets the handler for the element with specified name.                
                <param>
                    name     the name of the element                    
                </param>
                <param>
                    handler  the corresponding element handler                    
                </param>
            </javadoc>
            <method name="setElementHandler" type="void" line="188">
                <params>
                    <param name="name" type="String"/>
                    <param name="handler" type="Class<? extends ElementHandler>"/>
                </params>
            </method>
            <javadoc line="192">
                Indicates whether the variable with specified identifier is defined.                
                <param>
                    id  the identifier                    
                </param>
                <return>
                    @{code true} if the variable is defined;                    
                </return>
                <{code>
                    false} otherwise                    
                </{code>
            </javadoc>
            <method name="hasVariable" type="boolean" line="199">
                <params>
                    <param name="id" type="String"/>
                </params>
            </method>
            <javadoc line="203">
                Returns the value of the variable with specified identifier.                
                <param>
                    id  the identifier                    
                </param>
                <return>
                    the value of the variable                    
                </return>
            </javadoc>
            <method name="getVariable" type="Object" line="209">
                <params>
                    <param name="id" type="String"/>
                </params>
                <scope line="210"/>
            </method>
            <javadoc line="216">
                Sets new value of the variable with specified identifier.                
                <param>
                    id     the identifier                    
                </param>
                <param>
                    value  new value of the variable                    
                </param>
            </javadoc>
            <method name="setVariable" type="void" line="222">
                <params>
                    <param name="id" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="226">
                Returns the array of readed objects.                
                <return>
                    the array of readed objects                    
                </return>
            </javadoc>
            <method name="getObjects" type="Object[]" line="231"/>
            <javadoc line="235">
                Adds the object to the list of readed objects.                
                <param>
                    object  the object that is readed from XML document                    
                </param>
            </javadoc>
            <method name="addObject" type="void" line="240">
                <params>
                    <param name="object" type="Object"/>
                </params>
            </method>
            <javadoc line="244">
                Prepares this handler to read objects from XML document.                
            </javadoc>
            <method name="startDocument" type="void" line="248"/>
            <javadoc line="253">
                Parses opening tag of XML element
                  using corresponding element handler.                
                <param>
                    uri         the namespace URI, or the empty string
                      if the element has no namespace URI or
                      if namespace processing is not being performed                    
                </param>
                <param>
                    localName   the local name (without prefix), or the empty string
                      if namespace processing is not being performed                    
                </param>
                <param>
                    qName       the qualified name (with prefix), or the empty string
                      if qualified names are not available                    
                </param>
                <param>
                    attributes  the attributes attached to the element                    
                </param>
            </javadoc>
            <method name="startElement" type="void" line="267">
                <params>
                    <param name="uri" type="String"/>
                    <param name="localName" type="String"/>
                    <param name="qName" type="String"/>
                    <param name="attributes" type="Attributes"/>
                </params>
                <declaration name="parent" type="ElementHandler" line="268"/>
                <scope line="269"/>
                <scope line="274"/>
                <scope line="278">
                    <declaration name="name" type="String" line="279"/>
                    <declaration name="value" type="String" line="280"/>
                </scope>
                <scope line="283"/>
            </method>
            <javadoc line="290">
                Parses closing tag of XML element
                  using corresponding element handler.                
                <param>
                    uri        the namespace URI, or the empty string
                      if the element has no namespace URI or
                      if namespace processing is not being performed                    
                </param>
                <param>
                    localName  the local name (without prefix), or the empty string
                      if namespace processing is not being performed                    
                </param>
                <param>
                    qName      the qualified name (with prefix), or the empty string
                      if qualified names are not available                    
                </param>
            </javadoc>
            <method name="endElement" type="void" line="303">
                <params>
                    <param name="uri" type="String"/>
                    <param name="localName" type="String"/>
                    <param name="qName" type="String"/>
                </params>
                <scope line="304"/>
                <scope line="307"/>
                <scope line="310"/>
            </method>
            <javadoc line="315">
                Parses character data inside XML element.                
                <param>
                    chars   the array of characters                    
                </param>
                <param>
                    start   the start position in the character array                    
                </param>
                <param>
                    length  the number of characters to use                    
                </param>
            </javadoc>
            <method name="characters" type="void" line="323">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="324">
                    <scope line="325">
                        <scope line="326"/>
                    </scope>
                    <scope line="330"/>
                </scope>
            </method>
            <javadoc line="336">
                Handles an exception using current exception listener.                
                <param>
                    exception  an exception to handle                    
                </param>
                <see>
                    #setExceptionListener                    
                </see>
            </javadoc>
            <method name="handleException" type="void" line="342">
                <params>
                    <param name="exception" type="Exception"/>
                </params>
                <scope line="343"/>
            </method>
            <javadoc line="349">
                Starts parsing of the specified input source.                
                <param>
                    input  the input source to parse                    
                </param>
            </javadoc>
            <method name="parse" type="void" line="354">
                <params>
                    <param name="input" type="InputSource"/>
                </params>
                <scope line="355"/>
                <scope line="358"/>
                <scope line="361">
                    <declaration name="exception" type="Exception" line="362"/>
                    <scope line="363"/>
                </scope>
                <scope line="368"/>
            </method>
            <javadoc line="373">
                Resolves class by name using current class loader.
                  This method handles exception using current exception listener.                
                <param>
                    name  the name of the class                    
                </param>
                <return>
                    the object that represents the class                    
                </return>
            </javadoc>
            <method name="findClass" type="Class<?>" line="380">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="381"/>
                <scope line="384"/>
            </method>
        </class>
    </source>