<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.beans">
        <import package="java.lang.reflect.Type"/>
        <import package="java.lang.reflect.WildcardType"/>
        <import package="java.util.Arrays"/>
        <class name="WildcardTypeImpl" line="5">
            <implements interface="WildcardType"/>
            <javadoc line="5">
                This class implements {@link WildcardType WildcardType} compatibly with the JDK&apos;s{@link sun.reflect.generics.reflectiveObjects.WildcardTypeImpl WildcardTypeImpl}.
                  Unfortunately we can&apos;t use the JDK&apos;s{@link sun.reflect.generics.reflectiveObjects.WildcardTypeImpl WildcardTypeImpl} here as we do for{@link sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl ParameterizedTypeImpl} and{@link sun.reflect.generics.reflectiveObjects.GenericArrayTypeImpl GenericArrayTypeImpl},
                  because {@link sun.reflect.generics.reflectiveObjects.WildcardTypeImpl WildcardTypeImpl}&apos;s
                  constructor takes parameters representing intermediate structures obtained during class-file parsing.
                  We could reconstruct versions of those structures but it would be more trouble than it&apos;s worth.                
                <since>
                    1.7                    
                </since>
                <author>
                    Eamonn McManus                    
                </author>
                <author>
                    Sergey Malenkov                    
                </author>
            </javadoc>
            <declaration name="upperBounds" type="Type[]" line="16"/>
            <declaration name="lowerBounds" type="Type[]" line="17"/>
            <javadoc line="18">
                Creates a wildcard type with the requested bounds.
                  Note that the array arguments are not cloned
                  because instances of this class are never constructed
                  from outside the containing package.                
                <param>
                    upperBounds  the array of types representing
                      the upper bound(s) of this type variable                    
                </param>
                <param>
                    lowerBounds  the array of types representing
                      the lower bound(s) of this type variable                    
                </param>
            </javadoc>
            <method name="WildcardTypeImpl" type="constructor" line="28">
                <params>
                    <param name="upperBounds" type="Type[]"/>
                    <param name="lowerBounds" type="Type[]"/>
                </params>
            </method>
            <javadoc line="32">
                Returns an array of {@link Type Type} objects
                  representing the upper bound(s) of this type variable.
                  Note that if no upper bound is explicitly declared,
                  the upper bound is {@link Object Object}.                
                <return>
                    an array of types representing
                      the upper bound(s) of this type variable                    
                </return>
            </javadoc>
            <method name="getUpperBounds" type="Type[]" line="40"/>
            <javadoc line="43">
                Returns an array of {@link Type Type} objects
                  representing the lower bound(s) of this type variable.
                  Note that if no lower bound is explicitly declared,
                  the lower bound is the type of {@code null}.
                  In this case, a zero length array is returned.                
                <return>
                    an array of types representing
                      the lower bound(s) of this type variable                    
                </return>
            </javadoc>
            <method name="getLowerBounds" type="Type[]" line="52"/>
            <javadoc line="55">
                Indicates whether some other object is &quot;equal to&quot; this one.
                  It is implemented compatibly with the JDK&apos;s{@link sun.reflect.generics.reflectiveObjects.WildcardTypeImpl WildcardTypeImpl}.                
                <param>
                    object  the reference object with which to compare                    
                </param>
                <return>
                    {@code true} if this object is the same as the object argument;{@code false} otherwise                    
                </return>
                <see>
                    sun.reflect.generics.reflectiveObjects.WildcardTypeImpl#equals                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="62">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="63">
                    <declaration name="type" type="WildcardType" line="64"/>
                </scope>
            </method>
            <javadoc line="69">
                Returns a hash code value for the object.
                  It is implemented compatibly with the JDK&apos;s{@link sun.reflect.generics.reflectiveObjects.WildcardTypeImpl WildcardTypeImpl}.                
                <return>
                    a hash code value for this object                    
                </return>
                <see>
                    sun.reflect.generics.reflectiveObjects.WildcardTypeImpl#hashCode                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="75"/>
            <javadoc line="78">
                Returns a string representation of the object.
                  It is implemented compatibly with the JDK&apos;s{@link sun.reflect.generics.reflectiveObjects.WildcardTypeImpl WildcardTypeImpl}.                
                <return>
                    a string representation of the object                    
                </return>
                <see>
                    sun.reflect.generics.reflectiveObjects.WildcardTypeImpl#toString                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="84">
                <declaration name="sb" type="StringBuilder" line="85"/>
                <declaration name="bounds" type="Type[]" line="86"/>
                <scope line="87">
                    <scope line="88"/>
                </scope>
                <scope line="94"/>
                <scope line="98">
                    <scope line="99"/>
                </scope>
            </method>
        </class>
    </source>