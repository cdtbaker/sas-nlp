<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.beans.finder">
        <class name="ClassFinder" line="27">
            <javadoc line="27">
                This is utility class that provides {@code static} methods
                  to find a class with the specified name using the specified class loader.                
                <since>
                    1.7                    
                </since>
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <javadoc line="37">
                Returns the {@code Class} object associated
                  with the class or interface with the given string name,
                  using the default class loader.
                  &lt;p&gt;
                  The {@code name} can denote an array class
                  (see {@link Class#getName} for details).                
                <param>
                    name  fully qualified name of the desired class                    
                </param>
                <return>
                    class object representing the desired class                    
                </return>
                <throws>
                    ClassNotFoundException  if the class cannot be located
                      by the specified class loader                    
                </throws>
                <see>
                    Class#forName(String)                    
                </see>
                <see>
                    Class#forName(String,boolean,ClassLoader)                    
                </see>
                <see>
                    ClassLoader#getSystemClassLoader()                    
                </see>
                <see>
                    Thread#getContextClassLoader()                    
                </see>
            </javadoc>
            <method name="findClass" type="Class<?>" line="56">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="61">
                    can be null in IE (see 6204697)                    
                </comment>
                <comment line="69">
                    use current class loader instead                    
                </comment>
                <comment line="71">
                    use current class loader instead                    
                </comment>
                <scope line="57">
                    <declaration name="loader" type="ClassLoader" line="58"/>
                    <scope line="59"/>
                    <scope line="63"/>
                </scope>
                <scope line="67"/>
                <scope line="69"/>
            </method>
            <javadoc line="75">
                Returns the {@code Class} object associated with
                  the class or interface with the given string name,
                  using the given class loader.
                  &lt;p&gt;
                  The {@code name} can denote an array class
                  (see {@link Class#getName} for details).
                  &lt;p&gt;
                  If the parameter {@code loader} is null,
                  the class is loaded through the default class loader.                
                <param>
                    name    fully qualified name of the desired class                    
                </param>
                <param>
                    loader  class loader from which the class must be loaded                    
                </param>
                <return>
                    class object representing the desired class                    
                </return>
                <throws>
                    ClassNotFoundException  if the class cannot be located
                      by the specified class loader                    
                </throws>
                <see>
                    #findClass(String,ClassLoader)                    
                </see>
                <see>
                    Class#forName(String,boolean,ClassLoader)                    
                </see>
            </javadoc>
            <method name="findClass" type="Class<?>" line="96">
                <params>
                    <param name="name" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <comment line="102">
                    use default class loader instead                    
                </comment>
                <comment line="104">
                    use default class loader instead                    
                </comment>
                <scope line="97">
                    <scope line="98"/>
                    <scope line="100"/>
                    <scope line="102"/>
                </scope>
            </method>
            <javadoc line="109">
                Returns the {@code Class} object associated
                  with the class or interface with the given string name,
                  using the default class loader.
                  &lt;p&gt;
                  The {@code name} can denote an array class
                  (see {@link Class#getName} for details).
                  &lt;p&gt;
                  This method can be used to obtain
                  any of the {@code Class} objects
                  representing {@code void} or primitive Java types:{@code char}, {@code byte}, {@code short},{@code int}, {@code long}, {@code float},{@code double} and {@code boolean}.                
                <param>
                    name  fully qualified name of the desired class                    
                </param>
                <return>
                    class object representing the desired class                    
                </return>
                <throws>
                    ClassNotFoundException  if the class cannot be located
                      by the specified class loader                    
                </throws>
                <see>
                    #resolveClass(String,ClassLoader)                    
                </see>
            </javadoc>
            <method name="resolveClass" type="Class<?>" line="132">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="136">
                Returns the {@code Class} object associated with
                  the class or interface with the given string name,
                  using the given class loader.
                  &lt;p&gt;
                  The {@code name} can denote an array class
                  (see {@link Class#getName} for details).
                  &lt;p&gt;
                  If the parameter {@code loader} is null,
                  the class is loaded through the default class loader.
                  &lt;p&gt;
                  This method can be used to obtain
                  any of the {@code Class} objects
                  representing {@code void} or primitive Java types:{@code char}, {@code byte}, {@code short},{@code int}, {@code long}, {@code float},{@code double} and {@code boolean}.                
                <param>
                    name    fully qualified name of the desired class                    
                </param>
                <param>
                    loader  class loader from which the class must be loaded                    
                </param>
                <return>
                    class object representing the desired class                    
                </return>
                <throws>
                    ClassNotFoundException  if the class cannot be located
                      by the specified class loader                    
                </throws>
                <see>
                    #findClass(String,ClassLoader)                    
                </see>
                <see>
                    PrimitiveTypeMap#getType(String)                    
                </see>
            </javadoc>
            <method name="resolveClass" type="Class<?>" line="164">
                <params>
                    <param name="name" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="type" type="Class&lt;?&gt;" line="165"/>
            </method>
            <javadoc line="171">
                Disable instantiation.                
            </javadoc>
            <method name="ClassFinder" type="constructor" line="174"/>
        </class>
    </source>