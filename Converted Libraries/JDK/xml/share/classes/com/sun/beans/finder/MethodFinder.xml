<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.beans.finder">
        <import package="com.sun.beans.TypeResolver"/>
        <import package="com.sun.beans.WeakCache"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.lang.reflect.ParameterizedType"/>
        <import package="java.lang.reflect.Type"/>
        <import package="java.util.Arrays"/>
        <class name="MethodFinder" line="36">
            <extends class="AbstractFinder">
                <type_params>
                    <type_param name="Method"/>
                </type_params>
            </extends>
            <javadoc line="36">
                This utility class provides {@code static} methods
                  to find a public method with specified name and parameter types
                  in specified class.                
                <since>
                    1.7                    
                </since>
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <declaration name="CACHE" type="WeakCache&lt;Signature,Method&gt;" line="46"/>
            <javadoc line="48">
                Finds public method (static or non-static)
                  that is accessible from public class.                
                <param>
                    type  the class that can have method                    
                </param>
                <param>
                    name  the name of method to find                    
                </param>
                <param>
                    args  parameter types that is used to find method                    
                </param>
                <return>
                    object that represents found method                    
                </return>
                <throws>
                    NoSuchMethodException if method could not be found
                      or some methods are found                    
                </throws>
            </javadoc>
            <method name="findMethod" type="Method" line="59">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="name" type="String"/>
                    <param name="args" type="Class<?>"/>
                </params>
                <scope line="60"/>
                <declaration name="signature" type="Signature" line="64"/>
                <declaration name="method" type="Method" line="66"/>
                <scope line="67"/>
            </method>
            <javadoc line="75">
                Finds public non-static method
                  that is accessible from public class.                
                <param>
                    type  the class that can have method                    
                </param>
                <param>
                    name  the name of method to find                    
                </param>
                <param>
                    args  parameter types that is used to find method                    
                </param>
                <return>
                    object that represents found method                    
                </return>
                <throws>
                    NoSuchMethodException if method could not be found
                      or some methods are found                    
                </throws>
            </javadoc>
            <method name="findInstanceMethod" type="Method" line="86">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="name" type="String"/>
                    <param name="args" type="Class<?>"/>
                </params>
                <declaration name="method" type="Method" line="87"/>
                <scope line="88"/>
            </method>
            <javadoc line="94">
                Finds public static method
                  that is accessible from public class.                
                <param>
                    type  the class that can have method                    
                </param>
                <param>
                    name  the name of method to find                    
                </param>
                <param>
                    args  parameter types that is used to find method                    
                </param>
                <return>
                    object that represents found method                    
                </return>
                <throws>
                    NoSuchMethodException if method could not be found
                      or some methods are found                    
                </throws>
            </javadoc>
            <method name="findStaticMethod" type="Method" line="105">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="name" type="String"/>
                    <param name="args" type="Class<?>"/>
                </params>
                <declaration name="method" type="Method" line="106"/>
                <scope line="107"/>
            </method>
            <javadoc line="113">
                Finds method that is accessible from public class or interface through class hierarchy.                
                <param>
                    method  object that represents found method                    
                </param>
                <return>
                    object that represents accessible method                    
                </return>
                <throws>
                    NoSuchMethodException if method is not accessible or is not found
                      in specified superclass or interface                    
                </throws>
            </javadoc>
            <method name="findAccessibleMethod" type="Method" line="121">
                <params>
                    <param name="method" type="Method"/>
                </params>
                <comment line="135">
                    try to find in superclass or another interface                    
                </comment>
                <declaration name="type" type="Class&lt;?&gt;" line="122"/>
                <scope line="123"/>
                <scope line="126"/>
                <scope line="129">
                    <scope line="130"/>
                    <scope line="133"/>
                </scope>
            </method>
            <javadoc line="140">
                Finds method that accessible from specified class.                
                <param>
                    method  object that represents found method                    
                </param>
                <param>
                    generic generic type that is used to find accessible method                    
                </param>
                <return>
                    object that represents accessible method                    
                </return>
                <throws>
                    NoSuchMethodException if method is not accessible or is not found
                      in specified superclass or interface                    
                </throws>
            </javadoc>
            <method name="findAccessibleMethod" type="Method" line="149">
                <params>
                    <param name="method" type="Method"/>
                    <param name="generic" type="Type"/>
                </params>
                <declaration name="name" type="String" line="150"/>
                <declaration name="params" type="Class&lt;?&gt;[]" line="151"/>
                <scope line="152">
                    <declaration name="type" type="Class&lt;?&gt;" line="153"/>
                </scope>
                <scope line="156">
                    <declaration name="pt" type="ParameterizedType" line="157"/>
                    <declaration name="type" type="Class&lt;?&gt;" line="158"/>
                    <scope line="159">
                        <scope line="160">
                            <declaration name="pts" type="Class&lt;?&gt;[]" line="161"/>
                            <scope line="162">
                                <scope line="163"/>
                                <declaration name="gpts" type="Type[]" line="166"/>
                                <scope line="167"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="name" type="String" line="178"/>
            <javadoc line="180">
                Creates method finder with specified array of parameter types.                
                <param>
                    name  the name of method to find                    
                </param>
                <param>
                    args  the array of parameter types                    
                </param>
            </javadoc>
            <method name="MethodFinder" type="constructor" line="186">
                <params>
                    <param name="name" type="String"/>
                    <param name="args" type="Class<?>[]"/>
                </params>
            </method>
            <javadoc line="191">
                Returns an array of {@code Class} objects
                  that represent the formal parameter types of the method
                  Returns an empty array if the method takes no parameters.                
                <param>
                    method  the object that represents method                    
                </param>
                <return>
                    the parameter types of the method                    
                </return>
            </javadoc>
            <method name="getParameters" type="Class<?>[]" line="200">
                <params>
                    <param name="method" type="Method"/>
                </params>
            </method>
            <javadoc line="204">
                Returns {@code true} if and only if the method
                  was declared to take a variable number of arguments.                
                <param>
                    method  the object that represents method                    
                </param>
                <return>
                    {@code true} if the method was declared
                      to take a variable number of arguments;{@code false} otherwise                    
                </return>
            </javadoc>
            <method name="isVarArgs" type="boolean" line="214">
                <params>
                    <param name="method" type="Method"/>
                </params>
            </method>
            <javadoc line="218">
                Checks validness of the method.
                  The valid method should be public and
                  should have the specified name.                
                <param>
                    method  the object that represents method                    
                </param>
                <return>
                    {@code true} if the method is valid,{@code false} otherwise                    
                </return>
            </javadoc>
            <method name="isValid" type="boolean" line="228">
                <params>
                    <param name="method" type="Method"/>
                </params>
            </method>
        </class>
    </source>