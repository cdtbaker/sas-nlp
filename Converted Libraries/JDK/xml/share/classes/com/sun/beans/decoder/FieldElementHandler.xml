<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.beans.decoder">
        <import package="com.sun.beans.finder.FieldFinder"/>
        <import package="java.lang.reflect.Field"/>
        <class name="FieldElementHandler" line="4">
            <extends class="AccessorElementHandler"/>
            <javadoc line="4">
                This class is intended to handle &amp;lt;field&amp;gt; element.
                  This element simplifies access to the fields.
                  If the {@code class} attribute is specified
                  this element accesses static field of specified class.
                  This element defines getter if it contains no argument.
                  It returns the value of the field in this case.
                  For example:&lt;pre&gt;
                  &amp;lt;field name=&quot;TYPE&quot; class=&quot;java.lang.Long&quot;/&amp;gt;&lt;/pre&gt;
                  is equivalent to {@code Long.TYPE} in Java code.
                  This element defines setter if it contains one argument.
                  It does not return the value of the field in this case.
                  For example:&lt;pre&gt;
                  &amp;lt;field name=&quot;id&quot;&amp;gt;&amp;lt;int&amp;gt;0&amp;lt;/int&amp;gt;&amp;lt;/field&amp;gt;&lt;/pre&gt;
                  is equivalent to {@code id = 0} in Java code.
                  &lt;p&gt;The following atributes are supported:
                  &lt;dl&gt;
                  &lt;dt&gt;name
                  &lt;dd&gt;the field name
                  &lt;dt&gt;class
                  &lt;dd&gt;the type is used for static fields only
                  &lt;dt&gt;id
                  &lt;dd&gt;the identifier of the variable that is intended to store the result
                  &lt;/dl&gt;                
                <since>
                    1.7                    
                </since>
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <declaration name="type" type="Class&amp;lt;?&amp;gt;" line="32"/>
            <javadoc line="33">
                Parses attributes of the element.
                  The following atributes are supported:
                  &lt;dl&gt;
                  &lt;dt&gt;name
                  &lt;dd&gt;the field name
                  &lt;dt&gt;class
                  &lt;dd&gt;the type is used for static fields only
                  &lt;dt&gt;id
                  &lt;dd&gt;the identifier of the variable that is intended to store the result
                  &lt;/dl&gt;                
                <param>
                    name   the attribute name                    
                </param>
                <param>
                    value  the attribute value                    
                </param>
            </javadoc>
            <method name="addAttribute" type="void" line="47">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="48"/>
                <scope line="51"/>
            </method>
            <javadoc line="55">
                Tests whether the value of this element can be used
                  as an argument of the element that contained in this one.                
                <return>
                    {@code true} if the value of this element should be used
                      as an argument of the element that contained in this one,{@code false} otherwise                    
                </return>
            </javadoc>
            <method name="isArgument" type="boolean" line="61"/>
            <javadoc line="64">
                Returns the context of the field.
                  The context of the static field is the class object.
                  The context of the non-static field is the value of the parent element.                
                <return>
                    the context of the field                    
                </return>
            </javadoc>
            <method name="getContextBean" type="Object" line="70"/>
            <javadoc line="73">
                Returns the value of the field with specified {@code name}.                
                <param>
                    name  the name of the field                    
                </param>
                <return>
                    the value of the specified field                    
                </return>
            </javadoc>
            <method name="getValue" type="Object" line="78">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="79"/>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                Sets the new value for the field with specified {@code name}.                
                <param>
                    name   the name of the field                    
                </param>
                <param>
                    value  the new value for the specified field                    
                </param>
            </javadoc>
            <method name="setValue" type="void" line="92">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="93"/>
                <scope line="96"/>
            </method>
            <javadoc line="100">
                Performs the search of the field with specified {@code name}in specified context and returns its value.                
                <param>
                    bean  the context bean that contains field                    
                </param>
                <param>
                    name  the name of the field                    
                </param>
                <return>
                    the value of the field                    
                </return>
                <throws>
                    IllegalAccessException if the field is not accesible                    
                </throws>
                <throws>
                    NoSuchFieldException   if the field is not found                    
                </throws>
            </javadoc>
            <method name="getFieldValue" type="Object" line="108">
                <params>
                    <param name="bean" type="Object"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="111">
                Performs the search of the field with specified {@code name}in specified context and updates its value.                
                <param>
                    bean   the context bean that contains field                    
                </param>
                <param>
                    name   the name of the field                    
                </param>
                <param>
                    value  the new value for the field                    
                </param>
                <throws>
                    IllegalAccessException if the field is not accesible                    
                </throws>
                <throws>
                    NoSuchFieldException   if the field is not found                    
                </throws>
            </javadoc>
            <method name="setFieldValue" type="void" line="119">
                <params>
                    <param name="bean" type="Object"/>
                    <param name="name" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="122">
                Performs the search of the field
                  with specified {@code name} in specified context.                
                <param>
                    bean  the context bean that contains field                    
                </param>
                <param>
                    name  the name of the field                    
                </param>
                <return>
                    field object that represents found field                    
                </return>
                <throws>
                    NoSuchFieldException if the field is not found                    
                </throws>
            </javadoc>
            <method name="findField" type="Field" line="130">
                <params>
                    <param name="bean" type="Object"/>
                    <param name="name" type="String"/>
                </params>
            </method>
        </class>
    </source>