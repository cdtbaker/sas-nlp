<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.beans.finder">
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <class name="AbstractFinder" line="4">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="4">
                This abstract class provides functionality
                  to find a public method or constructor
                  with specified parameter types.
                  It supports a variable number of parameters.                
                <since>
                    1.7                    
                </since>
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <declaration name="args" type="Class&lt;?&gt;[]" line="13"/>
            <javadoc line="14">
                Creates finder for array of classes of arguments.
                  If a particular element of array equals {@code null},
                  than the appropriate pair of classes
                  does not take into consideration.                
                <param>
                    args  array of classes of arguments                    
                </param>
            </javadoc>
            <method name="AbstractFinder" type="constructor" line="21">
                <params>
                    <param name="args" type="Class<?>[]"/>
                </params>
            </method>
            <method name="getParameters" type="Class<?>[]" line="24"/>
            <javadoc line="24">
                Returns an array of {@code Class} objects
                  that represent the formal parameter types of the method
                  Returns an empty array if the method takes no parameters.                
                <param>
                    method  the object that represents method                    
                </param>
                <return>
                    the parameter types of the method                    
                </return>
            </javadoc>
            <method name="isVarArgs" type="boolean" line="32"/>
            <javadoc line="32">
                Returns {@code true} if and only if the method
                  was declared to take a variable number of arguments.                
                <param>
                    method  the object that represents method                    
                </param>
                <return>
                    {@code true} if the method was declared
                      to take a variable number of arguments;{@code false} otherwise                    
                </return>
            </javadoc>
            <method name="isValid" type="boolean" line="40"/>
            <javadoc line="40">
                Checks validness of the method.
                  At least the valid method should be public.                
                <param>
                    method  the object that represents method                    
                </param>
                <return>
                    {@code true} if the method is valid,{@code false} otherwise                    
                </return>
            </javadoc>
            <javadoc line="47">
                Performs a search in the {@code methods} array.
                  The one method is selected from the array of the valid methods.
                  The list of parameters of the selected method shows
                  the best correlation with the list of arguments
                  specified at class initialization.
                  If more than one method is both accessible and applicable
                  to a method invocation, it is necessary to choose one
                  to provide the descriptor for the run-time method dispatch.
                  The most specific method should be chosen.                
                <param>
                    methods  the array of methods to search within                    
                </param>
                <return>
                    the object that represents found method                    
                </return>
                <throws>
                    NoSuchMethodException if no method was found or several
                      methods meet the search criteria                    
                </throws>
                <see>
                    #isAssignable                    
                </see>
            </javadoc>
            <method name="find" type="T" line="63">
                <params>
                    <param name="methods" type="T[]"/>
                </params>
                <declaration name="map" type="Map&lt;T,Class&lt;?&gt;[]&gt;" line="64"/>
                <declaration name="oldMethod" type="T" line="65"/>
                <declaration name="oldParams" type="Class&lt;?&gt;[]" line="66"/>
                <declaration name="ambiguous" type="boolean" line="67"/>
                <scope line="68">
                    <scope line="69">
                        <declaration name="newParams" type="Class&lt;?&gt;[]" line="70"/>
                        <scope line="71">
                            <scope line="73">
                                <scope line="74"/>
                                <scope line="78">
                                    <declaration name="useNew" type="boolean" line="79"/>
                                    <declaration name="useOld" type="boolean" line="80"/>
                                    <scope line="81"/>
                                    <scope line="84"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="92">
                            <declaration name="length" type="int" line="93"/>
                            <scope line="94">
                                <declaration name="array" type="Class&lt;?&gt;[]" line="95"/>
                                <scope line="97">
                                    <declaration name="type" type="Class&lt;?&gt;" line="98"/>
                                    <scope line="99"/>
                                    <scope line="102"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="111">
                    <declaration name="newParams" type="Class&lt;?&gt;[]" line="112"/>
                    <scope line="113">
                        <scope line="114">
                            <scope line="115"/>
                            <scope line="119">
                                <declaration name="useNew" type="boolean" line="120"/>
                                <declaration name="useOld" type="boolean" line="121"/>
                                <scope line="122">
                                    <scope line="123"/>
                                </scope>
                                <scope line="127"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="136"/>
                <scope line="139"/>
            </method>
            <javadoc line="144">
                Determines if every class in {@code min} array is either the same as,
                  or is a superclass of, the corresponding class in {@code max} array.
                  The length of every array must equal the number of arguments.
                  This comparison is performed in the {@link #find} method
                  before the first call of the isAssignable method.
                  If an argument equals {@code null}the appropriate pair of classes does not take into consideration.                
                <param>
                    min  the array of classes to be checked                    
                </param>
                <param>
                    max  the array of classes that is used to check                    
                </param>
                <return>
                    {@code true} if all classes in {@code min} array
                      are assignable from corresponding classes in {@code max} array,{@code false} otherwise                    
                </return>
                <see>
                    Class#isAssignableFrom                    
                </see>
            </javadoc>
            <method name="isAssignable" type="boolean" line="157">
                <params>
                    <param name="min" type="Class<?>[]"/>
                    <param name="max" type="Class<?>[]"/>
                </params>
                <scope line="158">
                    <scope line="159">
                        <scope line="160"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>