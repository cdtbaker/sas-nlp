<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.beans.decoder">
        <import package="com.sun.beans.finder.ConstructorFinder"/>
        <import package="java.lang.reflect.Array"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <class name="NewElementHandler" line="35">
            <extends class="ElementHandler"/>
            <javadoc line="35">
                This class is intended to handle &amp;lt;new&amp;gt; element.
                  It describes instantiation of the object.
                  The {@code class} attribute denotes
                  the name of the class to instantiate.
                  The inner elements specifies the arguments of the constructor.
                  For example:&lt;pre&gt;
                  &amp;lt;new class=&quot;java.lang.Long&quot;&amp;gt;
                  &amp;lt;string&amp;gt;10&amp;lt;/string&amp;gt;
                  &amp;lt;/new&amp;gt;&lt;/pre&gt;
                  is equivalent to {@code new Long(&quot;10&quot;)} in Java code.
                  &lt;p&gt;The following atributes are supported:
                  &lt;dl&gt;
                  &lt;dt&gt;class
                  &lt;dd&gt;the type of object for instantiation
                  &lt;dt&gt;id
                  &lt;dd&gt;the identifier of the variable that is intended to store the result
                  &lt;/dl&gt;                
                <since>
                    1.7                    
                </since>
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <declaration name="arguments" type="List&lt;Object&gt;" line="59"/>
            <declaration name="value" type="ValueObject" line="60"/>
            <declaration name="type" type="Class&lt;?&gt;" line="62"/>
            <javadoc line="64">
                Parses attributes of the element.
                  The following atributes are supported:
                  &lt;dl&gt;
                  &lt;dt&gt;class
                  &lt;dd&gt;the type of object for instantiation
                  &lt;dt&gt;id
                  &lt;dd&gt;the identifier of the variable that is intended to store the result
                  &lt;/dl&gt;                
                <param>
                    name   the attribute name                    
                </param>
                <param>
                    value  the attribute value                    
                </param>
            </javadoc>
            <method name="addAttribute" type="void" line="78">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <comment line="79">
                    NON-NLS: the attribute name                    
                </comment>
                <scope line="79"/>
                <scope line="81"/>
            </method>
            <javadoc line="86">
                Adds the argument to the list of arguments
                  that is used to calculate the value of this element.                
                <param>
                    argument  the value of the element that contained in this one                    
                </param>
            </javadoc>
            <method name="addArgument" type="void" line="93">
                <params>
                    <param name="argument" type="Object"/>
                </params>
                <scope line="94"/>
            </method>
            <javadoc line="100">
                Returns the context of the method.
                  The context of the static method is the class object.
                  The context of the non-static method is the value of the parent element.                
                <return>
                    the context of the method                    
                </return>
            </javadoc>
            <method name="getContextBean" type="Object" line="108"/>
            <javadoc line="114">
                Returns the value of this element.                
                <return>
                    the value of this element                    
                </return>
            </javadoc>
            <method name="getValueObject" type="ValueObject" line="120">
                <scope line="121">
                    <scope line="122"/>
                    <scope line="125"/>
                    <scope line="128"/>
                </scope>
            </method>
            <javadoc line="135">
                Calculates the value of this element
                  using the base class and the array of arguments.
                  By default, it creates an instance of the base class.
                  This method should be overridden in those handlers
                  that extend behavior of this element.                
                <param>
                    type  the base class                    
                </param>
                <param>
                    args  the array of arguments                    
                </param>
                <return>
                    the value of this element                    
                </return>
                <throws>
                    Exception if calculation is failed                    
                </throws>
            </javadoc>
            <method name="getValueObject" type="ValueObject" line="147">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="args" type="Object[]"/>
                </params>
                <scope line="148"/>
                <declaration name="types" type="Class&lt;?&gt;[]" line="151"/>
                <declaration name="constructor" type="Constructor&lt;?&gt;" line="152"/>
                <scope line="153"/>
            </method>
            <javadoc line="159">
                Converts the array of arguments to the array of corresponding classes.
                  If argument is {@code null} the class is {@code null} too.                
                <param>
                    arguments  the array of arguments                    
                </param>
                <return>
                    the array of corresponding classes                    
                </return>
            </javadoc>
            <method name="getArgumentTypes" type="Class<?>[]" line="166">
                <params>
                    <param name="arguments" type="Object[]"/>
                </params>
                <declaration name="types" type="Class&lt;?&gt;[]" line="167"/>
                <scope line="168">
                    <scope line="169"/>
                </scope>
            </method>
            <javadoc line="176">
                Resolves variable arguments.                
                <param>
                    arguments  the array of arguments                    
                </param>
                <param>
                    types      the array of parameter types                    
                </param>
                <return>
                    the resolved array of arguments                    
                </return>
            </javadoc>
            <method name="getArguments" type="Object[]" line="183">
                <params>
                    <param name="arguments" type="Object[]"/>
                    <param name="types" type="Class<?>[]"/>
                </params>
                <declaration name="index" type="int" line="184"/>
                <scope line="185">
                    <declaration name="argument" type="Object" line="186"/>
                    <scope line="187"/>
                    <declaration name="type" type="Class&lt;?&gt;" line="190"/>
                    <scope line="191"/>
                </scope>
                <declaration name="length" type="int" line="195"/>
                <declaration name="type" type="Class&lt;?&gt;" line="196"/>
                <declaration name="array" type="Object" line="197"/>
                <declaration name="args" type="Object[]" line="200"/>
            </method>
        </class>
    </source>