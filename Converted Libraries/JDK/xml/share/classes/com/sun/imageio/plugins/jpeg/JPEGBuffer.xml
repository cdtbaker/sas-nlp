<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.jpeg">
        <import package="javax.imageio.stream.ImageInputStream"/>
        <import package="javax.imageio.IIOException"/>
        <import package="java.io.IOException"/>
        <class name="JPEGBuffer" line="33">
            <javadoc line="33">
                A class wrapping a buffer and its state.  For efficiency,
                  the members are made visible to other classes in this package.                
            </javadoc>
            <declaration name="debug" type="boolean" line="39"/>
            <declaration name="BUFFER_SIZE" type="int" line="41"/>
            <javadoc line="41">
                The size of the buffer.  This is large enough to hold all
                  known marker segments (other than thumbnails and icc profiles)                
            </javadoc>
            <declaration name="buf" type="byte[]" line="47"/>
            <javadoc line="47">
                The actual buffer.                
            </javadoc>
            <declaration name="bufAvail" type="int" line="52"/>
            <javadoc line="52">
                The number of bytes available for reading from the buffer.
                  Anytime data is read from the buffer, this should be updated.                
            </javadoc>
            <declaration name="bufPtr" type="int" line="58"/>
            <javadoc line="58">
                A pointer to the next available byte in the buffer.  This is
                  used to read data from the buffer and must be updated to
                  move through the buffer.                
            </javadoc>
            <declaration name="iis" type="ImageInputStream" line="65"/>
            <javadoc line="65">
                The ImageInputStream buffered.                
            </javadoc>
            <method name="JPEGBuffer" type="constructor" line="70">
                <params>
                    <param name="iis" type="ImageInputStream"/>
                </params>
            </method>
            <javadoc line="77">
                Ensures that there are at least &lt;code&gt;count&lt;/code&gt; bytes available
                  in the buffer, loading more data and moving any remaining
                  bytes to the front.  A count of 0 means to just fill the buffer.
                  If the count is larger than the buffer size, just fills the buffer.
                  If the end of the stream is encountered before a non-0 count can
                  be satisfied, an &lt;code&gt;IIOException&lt;/code&gt; is thrown with the
                  message &quot;Image Format Error&quot;.                
            </javadoc>
            <method name="loadBuf" type="void" line="86">
                <params>
                    <param name="count" type="int"/>
                </params>
                <comment line="94">
                    have enough                    
                </comment>
                <comment line="98">
                    already full                    
                </comment>
                <comment line="102">
                    First copy any remaining bytes down to the beginning                    
                </comment>
                <comment line="106">
                    Now fill the rest of the buffer                    
                </comment>
                <scope line="87"/>
                <scope line="92">
                    <scope line="93"/>
                </scope>
                <scope line="96">
                    <scope line="97"/>
                </scope>
                <scope line="102"/>
                <declaration name="ret" type="int" line="106"/>
                <scope line="107"/>
                <scope line="110"/>
                <declaration name="minimum" type="int" line="114"/>
                <scope line="115"/>
            </method>
            <javadoc line="120">
                Fills the data array from the stream, starting with
                  the buffer and then reading directly from the stream
                  if necessary.  The buffer is left in an appropriate
                  state.  If the end of the stream is encountered, an
                  &lt;code&gt;IIOException&lt;/code&gt; is thrown with the
                  message &quot;Image Format Error&quot;.                
            </javadoc>
            <method name="readData" type="void" line="128">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <comment line="131">
                    First see what&apos;s left in the buffer.                    
                </comment>
                <comment line="132">
                    It&apos;s enough                    
                </comment>
                <comment line="139">
                    Some there, but not enough                    
                </comment>
                <comment line="146">
                    Now read the rest directly from the stream                    
                </comment>
                <declaration name="count" type="int" line="129"/>
                <scope line="131"/>
                <declaration name="offset" type="int" line="137"/>
                <scope line="138"/>
                <scope line="146"/>
            </method>
            <javadoc line="151">
                Skips &lt;code&gt;count&lt;/code&gt; bytes, leaving the buffer
                  in an appropriate state.  If the end of the stream is
                  encountered, an &lt;code&gt;IIOException&lt;/code&gt; is thrown with the
                  message &quot;Image Format Error&quot;.                
            </javadoc>
            <method name="skipData" type="void" line="157">
                <params>
                    <param name="count" type="int"/>
                </params>
                <comment line="159">
                    First see what&apos;s left in the buffer.                    
                </comment>
                <comment line="160">
                    It&apos;s enough                    
                </comment>
                <comment line="165">
                    Some there, but not enough                    
                </comment>
                <comment line="170">
                    Now read the rest directly from the stream                    
                </comment>
                <scope line="159"/>
                <scope line="164"/>
                <scope line="170"/>
            </method>
            <javadoc line="175">
                Push back the remaining contents of the buffer by
                  repositioning the input stream.                
            </javadoc>
            <method name="pushBack" type="void" line="179"/>
            <javadoc line="185">
                Return the stream position corresponding to the next
                  available byte in the buffer.                
            </javadoc>
            <method name="getStreamPosition" type="long" line="189"/>
            <javadoc line="193">
                Scan the buffer until the next 0xff byte, reloading
                  the buffer as necessary.  The buffer position is left
                  pointing to the first non-0xff byte after a run of
                  0xff bytes.  If the end of the stream is encountered,
                  an EOI marker is inserted into the buffer and &lt;code&gt;true&lt;/code&gt;
                  is returned.  Otherwise returns &lt;code&gt;false&lt;/code&gt;.                
            </javadoc>
            <method name="scanForFF" type="boolean" line="201">
                <params>
                    <param name="reader" type="JPEGImageReader"/>
                </params>
                <comment line="210">
                    out of inner while                    
                </comment>
                <comment line="214">
                    Reload the buffer and keep going                    
                </comment>
                <comment line="216">
                    Skip any remaining pad bytes                    
                </comment>
                <comment line="219">
                    Only if it still is 0xff                    
                </comment>
                <comment line="223">
                    Premature EOF                    
                </comment>
                <comment line="224">
                    send out a warning, but treat it as EOI
                    reader.warningOccurred(JPEGImageReader.WARNING_NO_EOI);                    
                </comment>
                <declaration name="retval" type="boolean" line="202"/>
                <declaration name="foundFF" type="boolean" line="203"/>
                <scope line="204">
                    <scope line="205">
                        <scope line="206"/>
                    </scope>
                    <scope line="216">
                        <scope line="217"/>
                    </scope>
                    <scope line="222"/>
                </scope>
            </method>
            <javadoc line="235">
                Prints the contents of the buffer, in hex.                
                <param>
                    count the number of bytes to print,
                      starting at the current available byte.                    
                </param>
            </javadoc>
            <method name="print" type="void" line="240">
                <params>
                    <param name="count" type="int"/>
                </params>
                <scope line="244"/>
                <scope line="247">
                    <declaration name="val" type="int" line="248"/>
                </scope>
            </method>
        </class>
    </source>