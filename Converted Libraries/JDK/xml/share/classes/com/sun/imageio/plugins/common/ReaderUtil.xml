<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.common">
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.io.IOException"/>
        <import package="javax.imageio.stream.ImageInputStream"/>
        <class name="ReaderUtil" line="33">
            <comment line="43">
                Helper for computeUpdatedPixels method                
            </comment>
            <javadoc line="33">
                This class contains utility methods that may be useful to ImageReader
                  plugins.  Ideally these methods would be in the ImageReader base class
                  so that all subclasses could benefit from them, but that would be an
                  addition to the existing API, and it is not yet clear whether these methods
                  are universally useful, so for now we will leave them here.                
            </javadoc>
            <method name="computeUpdatedPixels" type="void" line="54">
                <params>
                    <param name="sourceOffset" type="int"/>
                    <param name="sourceExtent" type="int"/>
                    <param name="destinationOffset" type="int"/>
                    <param name="dstMin" type="int"/>
                    <param name="dstMax" type="int"/>
                    <param name="sourceSubsampling" type="int"/>
                    <param name="passStart" type="int"/>
                    <param name="passExtent" type="int"/>
                    <param name="passPeriod" type="int"/>
                    <param name="vals" type="int[]"/>
                    <param name="offset" type="int"/>
                </params>
                <comment line="55">
                    We need to satisfy the congruences:                    
                </comment>
                <comment line="56">
                    dst = destinationOffset + (src - sourceOffset)/sourceSubsampling                    
                </comment>
                <comment line="57">
                                        
                </comment>
                <comment line="58">
                    src - passStart == 0 (mod passPeriod)                    
                </comment>
                <comment line="59">
                    src - sourceOffset == 0 (mod sourceSubsampling)                    
                </comment>
                <comment line="60">
                                        
                </comment>
                <comment line="61">
                    subject to the inequalities:                    
                </comment>
                <comment line="62">
                                        
                </comment>
                <comment line="63">
                    src &gt;= passStart                    
                </comment>
                <comment line="64">
                    src &lt; passStart + passExtent                    
                </comment>
                <comment line="65">
                    src &gt;= sourceOffset                    
                </comment>
                <comment line="66">
                    src &lt; sourceOffset + sourceExtent                    
                </comment>
                <comment line="67">
                    dst &gt;= dstMin                    
                </comment>
                <comment line="68">
                    dst &lt;= dstmax                    
                </comment>
                <comment line="69">
                                        
                </comment>
                <comment line="70">
                    where                    
                </comment>
                <comment line="71">
                                        
                </comment>
                <comment line="72">
                    dst = destinationOffset + (src - sourceOffset)/sourceSubsampling                    
                </comment>
                <comment line="73">
                                        
                </comment>
                <comment line="74">
                    For now we use a brute-force approach although we could                    
                </comment>
                <comment line="75">
                    attempt to analyze the congruences.  If passPeriod and                    
                </comment>
                <comment line="76">
                    sourceSubsamling are relatively prime, the period will be                    
                </comment>
                <comment line="77">
                    their product.  If they share a common factor, either the                    
                </comment>
                <comment line="78">
                    period will be equal to the larger value, or the sequences                    
                </comment>
                <comment line="79">
                    will be completely disjoint, depending on the relationship                    
                </comment>
                <comment line="80">
                    between passStart and sourceOffset.  Since we only have to do this                    
                </comment>
                <comment line="81">
                    twice per image (once each for X and Y), it seems cheap enough                    
                </comment>
                <comment line="82">
                    to do it the straightforward way.                    
                </comment>
                <comment line="111">
                    Record smallest valid pixel                    
                </comment>
                <comment line="114">
                    Record second smallest valid pixel                    
                </comment>
                <comment line="116">
                    Record largest valid pixel                    
                </comment>
                <comment line="121">
                    If we never saw a valid pixel, set width to 0                    
                </comment>
                <comment line="128">
                    The period is given by the difference of any two adjacent pixels                    
                </comment>
                <declaration name="gotPixel" type="boolean" line="84"/>
                <declaration name="firstDst" type="int" line="85"/>
                <declaration name="secondDst" type="int" line="86"/>
                <declaration name="lastDst" type="int" line="87"/>
                <scope line="89">
                    <declaration name="src" type="int" line="90"/>
                    <scope line="91"/>
                    <scope line="94"/>
                    <scope line="97"/>
                    <declaration name="dst" type="int" line="101"/>
                    <scope line="103"/>
                    <scope line="106"/>
                    <scope line="110"/>
                    <scope line="113"/>
                </scope>
                <scope line="122"/>
                <scope line="124"/>
            </method>
            <javadoc line="132">
                A utility method that computes the exact set of destination
                  pixels that will be written during a particular decoding pass.
                  The intent is to simplify the work done by readers in combining
                  the source region, source subsampling, and destination offset
                  information obtained from the &lt;code&gt;ImageReadParam&lt;/code&gt; with
                  the offsets and periods of a progressive or interlaced decoding
                  pass.                
                <param>
                    sourceRegion a <code>Rectangle</code> containing the
                      source region being read, offset by the source subsampling
                      offsets, and clipped against the source bounds, as returned by
                      the <code>getSourceRegion</code> method.                    
                </param>
                <param>
                    destinationOffset a <code>Point</code> containing the
                      coordinates of the upper-left pixel to be written in the
                      destination.                    
                </param>
                <param>
                    dstMinX the smallest X coordinate (inclusive) of the
                      destination <code>Raster</code>.                    
                </param>
                <param>
                    dstMinY the smallest Y coordinate (inclusive) of the
                      destination <code>Raster</code>.                    
                </param>
                <param>
                    dstMaxX the largest X coordinate (inclusive) of the destination
                      <code>Raster</code>.                    
                </param>
                <param>
                    dstMaxY the largest Y coordinate (inclusive) of the destination
                      <code>Raster</code>.                    
                </param>
                <param>
                    sourceXSubsampling the X subsampling factor.                    
                </param>
                <param>
                    sourceYSubsampling the Y subsampling factor.                    
                </param>
                <param>
                    passXStart the smallest source X coordinate (inclusive)
                      of the current progressive pass.                    
                </param>
                <param>
                    passYStart the smallest source Y coordinate (inclusive)
                      of the current progressive pass.                    
                </param>
                <param>
                    passWidth the width in pixels of the current progressive
                      pass.                    
                </param>
                <param>
                    passHeight the height in pixels of the current progressive
                      pass.                    
                </param>
                <param>
                    passPeriodX the X period (horizontal spacing between
                      pixels) of the current progressive pass.                    
                </param>
                <param>
                    passPeriodY the Y period (vertical spacing between
                      pixels) of the current progressive pass.                    
                </param>
                <return>
                    an array of 6 <code>int</code>s containing the
                      destination min X, min Y, width, height, X period and Y period
                      of the region that will be updated.                    
                </return>
            </javadoc>
            <method name="computeUpdatedPixels" type="int[]" line="189">
                <params>
                    <param name="sourceRegion" type="Rectangle"/>
                    <param name="destinationOffset" type="Point"/>
                    <param name="dstMinX" type="int"/>
                    <param name="dstMinY" type="int"/>
                    <param name="dstMaxX" type="int"/>
                    <param name="dstMaxY" type="int"/>
                    <param name="sourceXSubsampling" type="int"/>
                    <param name="sourceYSubsampling" type="int"/>
                    <param name="passXStart" type="int"/>
                    <param name="passYStart" type="int"/>
                    <param name="passWidth" type="int"/>
                    <param name="passHeight" type="int"/>
                    <param name="passPeriodX" type="int"/>
                    <param name="passPeriodY" type="int"/>
                </params>
                <declaration name="vals" type="int[]" line="190"/>
            </method>
            <method name="readMultiByteInteger" type="int" line="206">
                <params>
                    <param name="iis" type="ImageInputStream"/>
                </params>
                <declaration name="value" type="int" line="207"/>
                <declaration name="result" type="int" line="208"/>
                <scope line="209"/>
            </method>
        </class>
    </source>