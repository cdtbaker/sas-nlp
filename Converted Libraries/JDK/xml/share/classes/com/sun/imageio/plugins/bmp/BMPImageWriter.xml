<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.bmp">
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ComponentSampleModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferByte"/>
        <import package="java.awt.image.DataBufferInt"/>
        <import package="java.awt.image.DataBufferShort"/>
        <import package="java.awt.image.DataBufferUShort"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.MultiPixelPackedSampleModel"/>
        <import package="java.awt.image.BandedSampleModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.SinglePixelPackedSampleModel"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.nio.ByteOrder"/>
        <import package="java.util.Iterator"/>
        <import package="javax.imageio.IIOImage"/>
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.ImageIO"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.ImageWriteParam"/>
        <import package="javax.imageio.ImageWriter"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.metadata.IIOMetadataNode"/>
        <import package="javax.imageio.metadata.IIOMetadataFormatImpl"/>
        <import package="javax.imageio.metadata.IIOInvalidTreeException"/>
        <import package="javax.imageio.spi.ImageWriterSpi"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="javax.imageio.event.IIOWriteProgressListener"/>
        <import package="javax.imageio.event.IIOWriteWarningListener"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.w3c.dom.NodeList"/>
        <import package="javax.imageio.plugins.bmp.BMPImageWriteParam"/>
        <import package="com.sun.imageio.plugins.common.ImageUtil"/>
        <import package="com.sun.imageio.plugins.common.I18N"/>
        <class name="BMPImageWriter" line="75">
            <extends class="ImageWriter"/>
            <comment line="1414">
                Returns preferred compression type for given image.
                 The default compression type is BI_RGB, but some image types can&apos;t be
                 encodeed with using default compression without cahnge color resolution.
                 For example, TYPE_USHORT_565_RGB may be encodeed only by using BI_BITFIELDS
                 compression type.
                
                 NB: we probably need to extend this method if we encounter other image
                 types which can not be encoded with BI_RGB compression type.                
            </comment>
            <comment line="1436">
                Check whether we can encode image of given type using compression method in question.
                
                 For example, TYPE_USHORT_565_RGB can be encodeed with BI_BITFIELDS compression only.
                
                 NB: method should be extended if other cases when we can not encode
                     with given compression will be discovered.                
            </comment>
            <implements interface="BMPConstants"/>
            <javadoc line="75">
                The Java Image IO plugin writer for encoding a binary RenderedImage into
                  a BMP format.
                  The encoding process may clip, subsample using the parameters
                  specified in the &lt;code&gt;ImageWriteParam&lt;/code&gt;.                
                <see>
                    javax.imageio.plugins.bmp.BMPImageWriteParam                    
                </see>
            </javadoc>
            <declaration name="stream" type="ImageOutputStream" line="85"/>
            <javadoc line="85">
                The output stream to write into                
            </javadoc>
            <declaration name="embedded_stream" type="ByteArrayOutputStream" line="87"/>
            <declaration name="version" type="int" line="88"/>
            <declaration name="compressionType" type="int" line="89"/>
            <declaration name="isTopDown" type="boolean" line="90"/>
            <declaration name="w" type="int" line="91"/>
            <declaration name="compImageSize" type="int" line="92"/>
            <declaration name="bitMasks" type="int[]" line="93"/>
            <declaration name="bitPos" type="int[]" line="94"/>
            <declaration name="bpixels" type="byte[]" line="95"/>
            <declaration name="spixels" type="short[]" line="96"/>
            <declaration name="ipixels" type="int[]" line="97"/>
            <javadoc line="99">
                Constructs &lt;code&gt;BMPImageWriter&lt;/code&gt; based on the provided
                  &lt;code&gt;ImageWriterSpi&lt;/code&gt;.                
            </javadoc>
            <method name="BMPImageWriter" type="constructor" line="102">
                <params>
                    <param name="originator" type="ImageWriterSpi"/>
                </params>
            </method>
            <method name="setOutput" type="void" line="106">
                <params>
                    <param name="output" type="Object"/>
                </params>
                <comment line="108">
                    validates output                    
                </comment>
                <scope line="108"/>
            </method>
            <method name="getDefaultWriteParam" type="ImageWriteParam" line="117"/>
            <method name="getDefaultStreamMetadata" type="IIOMetadata" line="121">
                <params>
                    <param name="param" type="ImageWriteParam"/>
                </params>
            </method>
            <method name="getDefaultImageMetadata" type="IIOMetadata" line="126">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <declaration name="meta" type="BMPMetadata" line="127"/>
                <scope line="131"/>
            </method>
            <method name="convertStreamMetadata" type="IIOMetadata" line="139">
                <params>
                    <param name="inData" type="IIOMetadata"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
            </method>
            <method name="convertImageMetadata" type="IIOMetadata" line="145">
                <params>
                    <param name="metadata" type="IIOMetadata"/>
                    <param name="type" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
            </method>
            <method name="canWriteRasters" type="boolean" line="149"/>
            <method name="write" type="void" line="155">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="image" type="IIOImage"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <comment line="173">
                    Default is using 24 bits per pixel.                    
                </comment>
                <comment line="230">
                    cache the data type;                    
                </comment>
                <comment line="247">
                    Raw data can only handle bytes, everything greater must be ASCII.                    
                </comment>
                <comment line="269">
                    for images with BandedSampleModel we can not work
                      with raster directly and must use writePixels()                    
                </comment>
                <comment line="273">
                    we can work with raster directly only in case of
                     BGR component order.
                     In any other case we must use writePixels()                    
                </comment>
                <comment line="283">
                    BugId 4892214: we can not work with raster directly
                     if image have different color order than RGB.
                     We should use writePixels() for such images.                    
                </comment>
                <comment line="294">
                    we will use getPixels() to extract pixel data for writePixels()
                     Please note that getPixels() provides rgb bands order.                    
                </comment>
                <comment line="305">
                    XXX: check more                    
                </comment>
                <comment line="307">
                    Number of bytes that a scanline for the image written out will have.                    
                </comment>
                <comment line="321">
                    ImageWriteParam.MODE_DISABLED:                    
                </comment>
                <comment line="337">
                    we should use 32bpp images in case of BI_BITFIELD
                     compression to avoid color conversion artefacts                    
                </comment>
                <comment line="341">
                    Setting this flag to false ensures that generic
                     writePixels() will be used to store image data                    
                </comment>
                <comment line="360">
                    NB: canEncodeImage() ensures we have image of
                     either USHORT_565_RGB or USHORT_555_RGB type here.
                     Technically, it should work for other direct color
                     model types but it might be non compatible with win98
                     and friends.                    
                </comment>
                <comment line="372">
                    it is unlikely, but if it happens, we should throw
                     an exception related to unsupported image format                    
                </comment>
                <comment line="384">
                    prepare info for writePixels procedure                    
                </comment>
                <comment line="399">
                    handle BI_RGB compression                    
                </comment>
                <comment line="414">
                    Cannot be written as a Palette image. So write out as
                     24 bit image.                    
                </comment>
                <comment line="435">
                    Grey scale images                    
                </comment>
                <comment line="460">
                    NB: the actual pixel size can be smaller than
                     size of used DataBuffer element.
                     For example: in case of TYPE_INT_RGB actual pixel
                     size is 24 bits, but size of DataBuffere element
                     is 32 bits                    
                </comment>
                <comment line="481">
                    actual writing of image data                    
                </comment>
                <comment line="491">
                    Calculate padding for each scanline                    
                </comment>
                <comment line="498">
                    FileHeader is 14 bytes, BitmapHeader is 40 bytes,
                     add palette size and that is where the data will begin                    
                </comment>
                <comment line="510">
                    According to MSDN description, the top-down image layout
                     is allowed only if compression type is BI_RGB or BI_BITFIELDS.
                     Images with any other compression type must be wrote in the
                     bottom-up layout.                    
                </comment>
                <comment line="525">
                    compression                    
                </comment>
                <comment line="528">
                    imageSize                    
                </comment>
                <comment line="531">
                    xPelsPerMeter                    
                </comment>
                <comment line="534">
                    yPelsPerMeter                    
                </comment>
                <comment line="537">
                    Colors Used                    
                </comment>
                <comment line="540">
                    Colors Important                    
                </comment>
                <comment line="543">
                    palette                    
                </comment>
                <comment line="546">
                    write palette                    
                </comment>
                <comment line="548">
                    write masks for red, green and blue components.                    
                </comment>
                <comment line="563">
                    Writing of actual image data                    
                </comment>
                <comment line="566">
                    Buffer for up to 8 rows of pixels                    
                </comment>
                <comment line="569">
                    Also create a buffer to hold one line of the data
                     to be written to the file, so we can use array writes.                    
                </comment>
                <comment line="578">
                    prepare embedded buffer                    
                </comment>
                <comment line="581">
                    update the file/image Size                    
                </comment>
                <comment line="627">
                    Get the pixels                    
                </comment>
                <comment line="701">
                    byte[] bdata =
                        ((DataBufferByte)src.getDataBuffer()).getData();
                    System.out.println(&quot;bdata.length=&quot;+bdata.length);
                    System.arraycopy(bdata, pos, bpixels, 0, scanlineBytes);                    
                </comment>
                <comment line="726">
                    pixel data is provided here in RGB order                    
                </comment>
                <comment line="740">
                    Write the RLE EOF marker and                    
                </comment>
                <comment line="744">
                    update the file/image Size                    
                </comment>
                <scope line="157"/>
                <scope line="161"/>
                <declaration name="bmpParam" type="BMPImageWriteParam" line="170"/>
                <declaration name="bitsPerPixel" type="int" line="173"/>
                <declaration name="isPalette" type="boolean" line="174"/>
                <declaration name="paletteEntries" type="int" line="175"/>
                <declaration name="icm" type="IndexColorModel" line="176"/>
                <declaration name="input" type="RenderedImage" line="178"/>
                <declaration name="inputRaster" type="Raster" line="179"/>
                <declaration name="writeRaster" type="boolean" line="180"/>
                <declaration name="sourceRegion" type="Rectangle" line="181"/>
                <declaration name="sampleModel" type="SampleModel" line="182"/>
                <declaration name="colorModel" type="ColorModel" line="183"/>
                <scope line="187"/>
                <scope line="195">
                    <declaration name="rect" type="Rectangle" line="199"/>
                </scope>
                <declaration name="imageMetadata" type="IIOMetadata" line="207"/>
                <declaration name="bmpImageMetadata" type="BMPMetadata" line="208"/>
                <scope line="211"/>
                <scope line="213">
                    <declaration name="imageType" type="ImageTypeSpecifier" line="214"/>
                </scope>
                <declaration name="scaleX" type="int" line="224"/>
                <declaration name="scaleY" type="int" line="225"/>
                <declaration name="xOffset" type="int" line="226"/>
                <declaration name="yOffset" type="int" line="227"/>
                <declaration name="dataType" type="int" line="230"/>
                <declaration name="minX" type="int" line="236"/>
                <declaration name="minY" type="int" line="237"/>
                <declaration name="destinationRegion" type="Rectangle" line="243"/>
                <declaration name="noTransform" type="boolean" line="244"/>
                <declaration name="sourceBands" type="int[]" line="247"/>
                <declaration name="noSubband" type="boolean" line="248"/>
                <declaration name="numBands" type="int" line="249"/>
                <scope line="251"/>
                <scope line="256"/>
                <declaration name="bandOffsets" type="int[]" line="262"/>
                <declaration name="bgrOrder" type="boolean" line="263"/>
                <scope line="265">
                    <scope line="267"/>
                    <scope line="271">
                        <scope line="275"/>
                    </scope>
                </scope>
                <scope line="279">
                    <scope line="280">
                        <declaration name="bitOffsets" type="int[]" line="285"/>
                        <scope line="286"/>
                    </scope>
                </scope>
                <scope line="292"/>
                <declaration name="sampleSize" type="int" line="302"/>
                <declaration name="destScanlineBytes" type="int" line="307"/>
                <scope line="324"/>
                <declaration name="r" type="byte" line="329"/>
                <scope line="331">
                    <scope line="335"/>
                    <declaration name="rmask" type="int" line="354"/>
                    <declaration name="gmask" type="int" line="355"/>
                    <declaration name="bmask" type="int" line="356"/>
                    <scope line="358">
                        <scope line="365">
                            <declaration name="dcm" type="DirectColorModel" line="366"/>
                        </scope>
                        <scope line="370"/>
                    </scope>
                    <scope line="382"/>
                    <scope line="395"/>
                </scope>
                <scope line="398">
                    <scope line="399">
                        <scope line="404"/>
                        <scope line="407"/>
                        <scope line="410"/>
                        <scope line="412"/>
                        <scope line="421"/>
                    </scope>
                    <scope line="433">
                        <scope line="435">
                            <scope line="448"/>
                        </scope>
                        <scope line="455">
                            <scope line="458">
                                <declaration name="sample_sizes" type="int[]" line="465"/>
                                <scope line="467"/>
                                <scope line="471"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="fileSize" type="int" line="481"/>
                <declaration name="offset" type="int" line="482"/>
                <declaration name="headerSize" type="int" line="483"/>
                <declaration name="imageSize" type="int" line="484"/>
                <declaration name="xPelsPerMeter" type="int" line="485"/>
                <declaration name="yPelsPerMeter" type="int" line="486"/>
                <declaration name="colorsUsed" type="int" line="487"/>
                <declaration name="colorsImportant" type="int" line="488"/>
                <declaration name="padding" type="int" line="491"/>
                <scope line="492"/>
                <declaration name="headPos" type="long" line="505"/>
                <scope line="516"/>
                <scope line="518"/>
                <scope line="543">
                    <scope line="546">
                        <scope line="548">
                            <declaration name="mask" type="int" line="549"/>
                        </scope>
                    </scope>
                    <scope line="552">
                        <scope line="553"/>
                    </scope>
                </scope>
                <declaration name="scanlineBytes" type="int" line="563"/>
                <declaration name="pixels" type="int[]" line="566"/>
                <declaration name="l" type="int" line="572"/>
                <scope line="575">
                    <declaration name="endPos" type="long" line="584"/>
                    <scope line="594"/>
                    <scope line="596"/>
                </scope>
                <declaration name="maxBandOffset" type="int" line="604"/>
                <declaration name="pixel" type="int[]" line="609"/>
                <declaration name="destScanlineLength" type="int" line="611"/>
                <scope line="613"/>
                <scope line="616">
                    <scope line="617"/>
                    <declaration name="row" type="int" line="621"/>
                    <declaration name="src" type="Raster" line="627"/>
                    <declaration name="srcRect" type="Rectangle" line="629"/>
                    <scope line="637">
                        <declaration name="sm" type="SampleModel" line="638"/>
                        <declaration name="pos" type="int" line="639"/>
                        <declaration name="startX" type="int" line="640"/>
                        <declaration name="startY" type="int" line="641"/>
                        <scope line="642">
                            <declaration name="csm" type="ComponentSampleModel" line="643"/>
                            <scope line="645">
                                <scope line="646"/>
                            </scope>
                        </scope>
                        <scope line="650">
                            <declaration name="mppsm" type="MultiPixelPackedSampleModel" line="651"/>
                        </scope>
                        <scope line="654">
                            <declaration name="sppsm" type="SinglePixelPackedSampleModel" line="655"/>
                        </scope>
                        <scope line="660">
                            <declaration name="bdata" type="byte[]" line="663"/>
                            <declaration name="sdata" type="short[]" line="669"/>
                            <declaration name="usdata" type="short[]" line="675"/>
                            <declaration name="idata" type="int[]" line="681"/>
                            <scope line="687"/>
                        </scope>
                        <scope line="690">
                            <scope line="695"/>
                        </scope>
                        <scope line="699">
                            <scope line="708"/>
                        </scope>
                    </scope>
                    <scope line="714">
                        <scope line="718">
                            <scope line="721">
                                <scope line="724"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="738">
                    <declaration name="endPos" type="long" line="746"/>
                </scope>
                <scope line="754"/>
                <scope line="756"/>
            </method>
            <method name="writePixels" type="void" line="765">
                <params>
                    <param name="l" type="int"/>
                    <param name="scanlineBytes" type="int"/>
                    <param name="bitsPerPixel" type="int"/>
                    <param name="pixels" type="int"/>
                    <param name="padding" type="int"/>
                    <param name="numBands" type="int"/>
                    <param name="icm" type="IndexColorModel"/>
                </params>
                <comment line="784">
                    Partially filled last byte, if any                    
                </comment>
                <comment line="808">
                    Put the last pixel of odd-length lines in the 4 MSBs                    
                </comment>
                <comment line="834">
                    We expect that pixel data comes in RGB order.
                     We will assemble short pixel taking into account
                     the compression type:
                    
                     BI_RGB        - the RGB order should be maintained.
                     BI_BITFIELDS  - use bitPos array that was built
                                     according to bitfields masks.                    
                </comment>
                <comment line="846">
                    please note that despite other cases,
                     the 16bpp BI_RGB requires the RGB data order                    
                </comment>
                <comment line="868">
                    Since BMP needs BGR format                    
                </comment>
                <comment line="876">
                    Case where IndexColorModel had &gt; 256 colors.                    
                </comment>
                <comment line="903">
                    We expect that pixel data comes in RGB order.
                     We will assemble int pixel taking into account
                     the compression type.
                    
                     BI_RGB        - the BGR order should be used.
                     BI_BITFIELDS  - use bitPos array that was built
                                     according to bitfields masks.                    
                </comment>
                <comment line="928">
                    We have two possibilities here:
                     1. we are writing the indexed image with bitfields
                        compression (this covers also the case of BYTE_BINARY)
                        =&gt; use icm to get actual RGB color values.
                     2. we are writing the gray-scaled image with BI_BITFIELDS
                        compression
                        =&gt; just replicate the level of gray to color components.                    
                </comment>
                <comment line="948">
                    Write out the padding                    
                </comment>
                <declaration name="pixel" type="int" line="766"/>
                <declaration name="k" type="int" line="767"/>
                <scope line="772"/>
                <scope line="784">
                    <scope line="786"/>
                </scope>
                <scope line="796">
                    <declaration name="bipixels" type="byte[]" line="797"/>
                    <scope line="798"/>
                </scope>
                <scope line="802">
                    <scope line="803"/>
                    <scope line="808"/>
                </scope>
                <scope line="817">
                    <scope line="818"/>
                </scope>
                <scope line="822">
                    <scope line="823"/>
                </scope>
                <scope line="842">
                    <scope line="844"/>
                    <scope line="854">
                        <scope line="855"/>
                    </scope>
                </scope>
                <scope line="865">
                    <scope line="866"/>
                </scope>
                <scope line="874">
                    <declaration name="entries" type="int" line="876"/>
                    <declaration name="r" type="byte" line="878"/>
                    <declaration name="g" type="byte" line="879"/>
                    <declaration name="b" type="byte" line="880"/>
                    <declaration name="index" type="int" line="885"/>
                    <scope line="887"/>
                </scope>
                <scope line="901">
                    <scope line="911">
                        <scope line="913"/>
                        <scope line="919">
                            <scope line="920"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="926">
                    <scope line="934">
                        <scope line="935"/>
                        <scope line="937"/>
                    </scope>
                </scope>
                <scope line="950">
                    <scope line="951"/>
                </scope>
            </method>
            <method name="encodeRLE8" type="void" line="958">
                <params>
                    <param name="bpixels" type="byte[]"/>
                    <param name="scanlineBytes" type="int"/>
                </params>
                <comment line="971">
                    / Check if there was an existing Absolute Run                    
                </comment>
                <comment line="980">
                    Padding                    
                </comment>
                <comment line="986">
                    / Absolute Encoding for less than 3
                    / treated as regular encoding
                    / Do not include the last element since it will
                    / be inclued in the next encoding/run                    
                </comment>
                <comment line="999">
                    / Only 255 values permitted                    
                </comment>
                <comment line="1008">
                    / If there was an existing run                    
                </comment>
                <comment line="1013">
                    First time..                    
                </comment>
                <comment line="1017">
                    0-254 only                    
                </comment>
                <comment line="1027">
                    padding since 255 elts is not even                    
                </comment>
                <comment line="1036">
                    EOF scanline                    
                </comment>
                <comment line="1037">
                    Write the run                    
                </comment>
                <comment line="1045">
                    write the Absolute Run                    
                </comment>
                <comment line="1055">
                    Padding                    
                </comment>
                <comment line="1069">
                    / EOF scanline                    
                </comment>
                <declaration name="runCount" type="int" line="960"/>
                <declaration name="runVal" type="byte" line="961"/>
                <declaration name="absBuf" type="byte[]" line="964"/>
                <scope line="966">
                    <scope line="968">
                        <scope line="969">
                            <scope line="974"/>
                            <scope line="978"/>
                        </scope>
                        <scope line="984">
                            <scope line="989"/>
                        </scope>
                        <scope line="997"/>
                    </scope>
                    <scope line="1005">
                        <scope line="1006"/>
                        <scope line="1011"/>
                        <scope line="1015"/>
                        <scope line="1018">
                            <scope line="1022"/>
                        </scope>
                    </scope>
                    <scope line="1035">
                        <scope line="1037"/>
                        <scope line="1043">
                            <scope line="1045">
                                <scope line="1049"/>
                                <scope line="1053"/>
                            </scope>
                            <scope line="1060">
                                <scope line="1061"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="encodeRLE4" type="void" line="1078">
                <params>
                    <param name="bipixels" type="byte[]"/>
                    <param name="scanlineBytes" type="int"/>
                </params>
                <comment line="1095">
                    Check if there was an existing Absolute Run                    
                </comment>
                <comment line="1100">
                    we need to exclude  last 2 elts, similarity of
                     which caused to enter this part of the code                    
                </comment>
                <comment line="1107">
                    if # of elts is odd - read the last element                    
                </comment>
                <comment line="1113">
                    Padding to word align absolute encoding                    
                </comment>
                <comment line="1127">
                    Even runlength                    
                </comment>
                <comment line="1143">
                    / Only EOF required now                    
                </comment>
                <comment line="1147">
                    odd runlength and the run ends here
                     runCount wont be &gt; 254 since 256/255 case will
                     be taken care of in above code.                    
                </comment>
                <comment line="1157">
                    If end of scanline                    
                </comment>
                <comment line="1165">
                    / Only EOF required now                    
                </comment>
                <comment line="1170">
                    Check for existing run                    
                </comment>
                <comment line="1176">
                    first time                    
                </comment>
                <comment line="1181">
                    only 255 elements                    
                </comment>
                <comment line="1193">
                    Padding for word align
                     since it will fit into 127 bytes                    
                </comment>
                <comment line="1204">
                    Handle the End of scanline for the last 2 4bits                    
                </comment>
                <comment line="1249">
                    Padding                    
                </comment>
                <declaration name="runCount" type="int" line="1080"/>
                <declaration name="runVal1" type="byte" line="1081"/>
                <declaration name="absBuf" type="byte[]" line="1082"/>
                <scope line="1088">
                    <scope line="1092">
                        <scope line="1095">
                            <scope line="1101"/>
                            <scope line="1107"/>
                            <scope line="1113"/>
                        </scope>
                        <scope line="1117"/>
                        <scope line="1125">
                            <scope line="1128">
                                <scope line="1134"/>
                                <scope line="1137">
                                    <declaration name="r" type="int" line="1139"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1145">
                            <scope line="1157"/>
                            <scope line="1159">
                                <declaration name="r" type="int" line="1161"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1168">
                        <scope line="1170"/>
                        <scope line="1175"/>
                        <scope line="1180"/>
                        <scope line="1183">
                            <scope line="1187"/>
                        </scope>
                    </scope>
                    <scope line="1204">
                        <scope line="1205">
                            <scope line="1206">
                                <scope line="1207"/>
                                <scope line="1213">
                                    <declaration name="n" type="int" line="1220"/>
                                </scope>
                            </scope>
                            <scope line="1223"/>
                        </scope>
                        <scope line="1229">
                            <scope line="1230"/>
                            <scope line="1233">
                                <scope line="1237"/>
                                <scope line="1242"/>
                                <scope line="1249"/>
                            </scope>
                            <scope line="1254">
                                <declaration name="n" type="int" line="1258"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="incCompImageSize" type="void" line="1280">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <method name="isEven" type="boolean" line="1284">
                <params>
                    <param name="number" type="int"/>
                </params>
            </method>
            <method name="writeFileHeader" type="void" line="1288">
                <params>
                    <param name="fileSize" type="int"/>
                    <param name="offset" type="int"/>
                </params>
                <comment line="1290">
                    magic value                    
                </comment>
                <comment line="1294">
                    File size                    
                </comment>
                <comment line="1297">
                    reserved1 and reserved2                    
                </comment>
                <comment line="1300">
                    offset to image data                    
                </comment>
            </method>
            <method name="writeInfoHeader" type="void" line="1305">
                <params>
                    <param name="headerSize" type="int"/>
                    <param name="bitsPerPixel" type="int"/>
                </params>
                <comment line="1307">
                    size of header                    
                </comment>
                <comment line="1310">
                    width                    
                </comment>
                <comment line="1313">
                    height                    
                </comment>
                <comment line="1316">
                    number of planes                    
                </comment>
                <comment line="1319">
                    Bits Per Pixel                    
                </comment>
            </method>
            <method name="writeSize" type="void" line="1322">
                <params>
                    <param name="dword" type="int"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <method name="reset" type="void" line="1327"/>
            <method name="getCompressionType" type="int" line="1332">
                <params>
                    <param name="typeString" type="String"/>
                </params>
            </method>
            <method name="writeEmbedded" type="void" line="1340">
                <params>
                    <param name="image" type="IIOImage"/>
                    <param name="bmpParam" type="ImageWriteParam"/>
                </params>
                <comment line="1367">
                    param.setDestinationBands(bmpParam.getDestinationBands());                    
                </comment>
                <declaration name="format" type="String" line="1341"/>
                <declaration name="iterator" type="Iterator" line="1343"/>
                <declaration name="writer" type="ImageWriter" line="1344"/>
                <scope line="1347">
                    <scope line="1348"/>
                    <anonymous_class line="1352">
                        <method name="imageProgress" type="void" line="1353">
                            <params>
                                <param name="source" type="ImageWriter"/>
                                <param name="percentageDone" type="float"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <anonymous_class line="1358">
                        <method name="warningOccurred" type="void" line="1359">
                            <params>
                                <param name="source" type="ImageWriter"/>
                                <param name="imageIndex" type="int"/>
                                <param name="warning" type="String"/>
                            </params>
                        </method>
                    </anonymous_class>
                    <declaration name="param" type="ImageWriteParam" line="1365"/>
                </scope>
            </method>
            <method name="firstLowBit" type="int" line="1380">
                <params>
                    <param name="num" type="int"/>
                </params>
                <declaration name="count" type="int" line="1381"/>
                <scope line="1382"/>
            </method>
            <class name="IIOWriteProgressAdapter" line="1389">
                <implements interface="IIOWriteProgressListener"/>
                <method name="imageComplete" type="void" line="1391">
                    <params>
                        <param name="source" type="ImageWriter"/>
                    </params>
                </method>
                <method name="imageProgress" type="void" line="1394">
                    <params>
                        <param name="source" type="ImageWriter"/>
                        <param name="percentageDone" type="float"/>
                    </params>
                </method>
                <method name="imageStarted" type="void" line="1397">
                    <params>
                        <param name="source" type="ImageWriter"/>
                        <param name="imageIndex" type="int"/>
                    </params>
                </method>
                <method name="thumbnailComplete" type="void" line="1400">
                    <params>
                        <param name="source" type="ImageWriter"/>
                    </params>
                </method>
                <method name="thumbnailProgress" type="void" line="1403">
                    <params>
                        <param name="source" type="ImageWriter"/>
                        <param name="percentageDone" type="float"/>
                    </params>
                </method>
                <method name="thumbnailStarted" type="void" line="1406">
                    <params>
                        <param name="source" type="ImageWriter"/>
                        <param name="imageIndex" type="int"/>
                        <param name="thumbnailIndex" type="int"/>
                    </params>
                </method>
                <method name="writeAborted" type="void" line="1409">
                    <params>
                        <param name="source" type="ImageWriter"/>
                    </params>
                </method>
            </class>
            <method name="getPreferredCompressionType" type="int" line="1423">
                <params>
                    <param name="cm" type="ColorModel"/>
                    <param name="sm" type="SampleModel"/>
                </params>
                <declaration name="imageType" type="ImageTypeSpecifier" line="1424"/>
            </method>
            <method name="getPreferredCompressionType" type="int" line="1428">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                </params>
                <scope line="1429"/>
            </method>
            <method name="canEncodeImage" type="boolean" line="1443">
                <params>
                    <param name="compression" type="int"/>
                    <param name="cm" type="ColorModel"/>
                    <param name="sm" type="SampleModel"/>
                </params>
                <declaration name="imgType" type="ImageTypeSpecifier" line="1444"/>
            </method>
            <method name="canEncodeImage" type="boolean" line="1448">
                <params>
                    <param name="compression" type="int"/>
                    <param name="imgType" type="ImageTypeSpecifier"/>
                </params>
                <comment line="1457">
                    only 4bpp images can be encoded as BI_RLE4                    
                </comment>
                <comment line="1461">
                    only 8bpp images can be encoded as BI_RLE8                    
                </comment>
                <comment line="1465">
                    Technically we expect that we may be able to
                     encode only some of SinglePixelPackedSampleModel
                     images here.
                    
                     In addition we should take into account following:
                    
                     1. BI_RGB case, according to the MSDN description:
                    
                         The bitmap has a maximum of 2^16 colors. If the
                         biCompression member of the BITMAPINFOHEADER is BI_RGB,
                         the bmiColors member of BITMAPINFO is NULL. Each WORD
                         in the bitmap array represents a single pixel. The
                         relative intensities of red, green, and blue are
                         represented with five bits for each color component.
                    
                     2. BI_BITFIELDS case, according ot the MSDN description:
                    
                         Windows 9598Me: When the biCompression member is
                         BI_BITFIELDS, the system supports only the following
                         16bpp color masks: A 5-5-5 16-bit image, where the blue
                         mask is 0x001F, the green mask is 0x03E0, and the red mask
                         is 0x7C00; and a 5-6-5 16-bit image, where the blue mask
                         is 0x001F, the green mask is 0x07E0, and the red mask is
                         0xF800.                    
                </comment>
                <declaration name="spi" type="ImageWriterSpi" line="1449"/>
                <scope line="1450"/>
                <declaration name="biType" type="int" line="1453"/>
                <declaration name="bpp" type="int" line="1454"/>
                <scope line="1455"/>
                <scope line="1459"/>
                <scope line="1463">
                    <declaration name="canUseRGB" type="boolean" line="1490"/>
                    <declaration name="canUseBITFIELDS" type="boolean" line="1491"/>
                    <declaration name="sm" type="SampleModel" line="1493"/>
                    <scope line="1494">
                        <declaration name="sizes" type="int[]" line="1495"/>
                        <scope line="1500"/>
                    </scope>
                </scope>
            </method>
            <method name="writeMaskToPalette" type="void" line="1514">
                <params>
                    <param name="mask" type="int"/>
                    <param name="i" type="int"/>
                    <param name="r" type="byte[]"/>
                    <param name="g" type="byte[]"/>
                    <param name="b" type="byte[]"/>
                    <param name="a" type="byte[]"/>
                </params>
            </method>
            <method name="roundBpp" type="int" line="1521">
                <params>
                    <param name="x" type="int"/>
                </params>
                <scope line="1522"/>
                <scope line="1524"/>
                <scope line="1526"/>
                <scope line="1528"/>
            </method>
        </class>
    </source>