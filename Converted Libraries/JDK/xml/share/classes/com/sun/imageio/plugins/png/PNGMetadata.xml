<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.png">
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.StringTokenizer"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.metadata.IIOInvalidTreeException"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.metadata.IIOMetadataFormat"/>
        <import package="javax.imageio.metadata.IIOMetadataFormatImpl"/>
        <import package="javax.imageio.metadata.IIOMetadataNode"/>
        <import package="org.w3c.dom.Node"/>
        <class name="PNGMetadata" line="42">
            <extends class="IIOMetadata"/>
            <comment line="45">
                package scope                
            </comment>
            <comment line="52">
                Color types for IHDR chunk                
            </comment>
            <comment line="62">
                Bit depths for IHDR chunk                
            </comment>
            <comment line="67">
                Compression methods for IHDR chunk                
            </comment>
            <comment line="72">
                Filter methods for IHDR chunk                
            </comment>
            <comment line="77">
                Interlace methods for IHDR chunk                
            </comment>
            <comment line="82">
                Compression methods for iCCP chunk                
            </comment>
            <comment line="87">
                Compression methods for zTXt chunk                
            </comment>
            <comment line="92">
                &quot;Unknown&quot; unit for pHYs chunk                
            </comment>
            <comment line="95">
                &quot;Meter&quot; unit for pHYs chunk                
            </comment>
            <comment line="98">
                Unit specifiers for pHYs chunk                
            </comment>
            <comment line="103">
                Rendering intents for sRGB chunk                
            </comment>
            <comment line="112">
                Color space types for Chroma-&gt;ColorSpaceType node                
            </comment>
            <comment line="118">
                IHDR chunk                
            </comment>
            <comment line="126">
                0 == none, 1 == adam7                
            </comment>
            <comment line="128">
                PLTE chunk                
            </comment>
            <comment line="134">
                If non-null, used to reorder palette entries during encoding in
                 order to minimize the size of the tRNS chunk.  Thus an index of
                 &apos;i&apos; in the source should be encoded as index &apos;PLTE_order[i]&apos;.
                 PLTE_order will be null unless &apos;initialize&apos; is called with an
                 IndexColorModel image type.                
            </comment>
            <comment line="141">
                bKGD chunk
                 If external (non-PNG sourced) data has red = green = blue,
                 always store it as gray and promote when writing                
            </comment>
            <comment line="145">
                PNG_COLOR_GRAY, _RGB, or _PALETTE                
            </comment>
            <comment line="152">
                cHRM chunk                
            </comment>
            <comment line="163">
                gAMA chunk                
            </comment>
            <comment line="167">
                hIST chunk                
            </comment>
            <comment line="171">
                iCCP chunk                
            </comment>
            <comment line="177">
                iTXt chunk                
            </comment>
            <comment line="185">
                pHYs chunk                
            </comment>
            <comment line="189">
                0 == unknown, 1 == meter                
            </comment>
            <comment line="191">
                sBIT chunk                
            </comment>
            <comment line="193">
                PNG_COLOR_GRAY, _GRAY_ALPHA, _RGB, _RGB_ALPHA                
            </comment>
            <comment line="200">
                sPLT chunk                
            </comment>
            <comment line="202">
                1-79 characters                
            </comment>
            <comment line="203">
                8 or 16                
            </comment>
            <comment line="210">
                sRGB chunk                
            </comment>
            <comment line="214">
                tEXt chunk                
            </comment>
            <comment line="215">
                1-79 characters                
            </comment>
            <comment line="218">
                tIME chunk                
            </comment>
            <comment line="227">
                tRNS chunk
                 If external (non-PNG sourced) data has red = green = blue,
                 always store it as gray and promote when writing                
            </comment>
            <comment line="231">
                PNG_COLOR_GRAY, _RGB, or _PALETTE                
            </comment>
            <comment line="232">
                May have fewer entries than PLTE_red, etc.                
            </comment>
            <comment line="238">
                zTXt chunk                
            </comment>
            <comment line="243">
                Unknown chunks                
            </comment>
            <comment line="442">
                Deep clone                
            </comment>
            <comment line="1089">
                Shorthand for throwing an IIOInvalidTreeException                
            </comment>
            <comment line="1095">
                Get an integer-valued attribute                
            </comment>
            <comment line="1111">
                Get an integer-valued attribute                
            </comment>
            <comment line="1122">
                Get a float-valued attribute                
            </comment>
            <comment line="1133">
                Get a required integer-valued attribute                
            </comment>
            <comment line="1139">
                Get a required float-valued attribute                
            </comment>
            <comment line="1145">
                Get a boolean-valued attribute                
            </comment>
            <comment line="1170">
                Get a required boolean-valued attribute                
            </comment>
            <comment line="1176">
                Get an enumerated attribute as an index into a String array                
            </comment>
            <comment line="1200">
                Get a required enumerated attribute as an index into a String array                
            </comment>
            <comment line="1207">
                Get a String-valued attribute                
            </comment>
            <comment line="1222">
                Get a required String-valued attribute                
            </comment>
            <comment line="1694">
                Accrding to PNG spec, keywords are restricted to 1 to 79 bytes
                 in length. Keywords shall contain only printable Latin-1 characters
                 and spaces; To reduce the chances for human misreading of a keyword,
                 leading spaces, trailing spaces, and consecutive spaces are not
                 permitted in keywords.
                
                 See: http:www.w3.orgTRPNG#11keywords                
            </comment>
            <comment line="1714">
                According to PNG spec, keyword shall contain only printable
                 Latin-1 [ISO-8859-1] characters and spaces; that is, only
                 character codes 32-126 and 161-255 decimal are allowed.
                 For Latin-1 value fields the 0x10 (linefeed) control
                 character is aloowed too.
                
                 See: http:www.w3.orgTRPNG#11keywords                
            </comment>
            <comment line="2018">
                Reset all instance variables to their initial state                
            </comment>
            <implements interface="Cloneable"/>
            <declaration name="nativeMetadataFormatName" type="String" line="45"/>
            <declaration name="nativeMetadataFormatClassName" type="String" line="48"/>
            <declaration name="IHDR_colorTypeNames" type="String[]" line="52"/>
            <declaration name="IHDR_numChannels" type="int[]" line="57"/>
            <declaration name="IHDR_bitDepths" type="String[]" line="62"/>
            <declaration name="IHDR_compressionMethodNames" type="String[]" line="67"/>
            <declaration name="IHDR_filterMethodNames" type="String[]" line="72"/>
            <declaration name="IHDR_interlaceMethodNames" type="String[]" line="77"/>
            <declaration name="iCCP_compressionMethodNames" type="String[]" line="82"/>
            <declaration name="zTXt_compressionMethodNames" type="String[]" line="87"/>
            <declaration name="PHYS_UNIT_UNKNOWN" type="int" line="92"/>
            <declaration name="PHYS_UNIT_METER" type="int" line="95"/>
            <declaration name="unitSpecifierNames" type="String[]" line="98"/>
            <declaration name="renderingIntentNames" type="String[]" line="103"/>
            <declaration name="colorSpaceTypeNames" type="String[]" line="112"/>
            <declaration name="IHDR_present" type="boolean" line="118"/>
            <declaration name="IHDR_width" type="int" line="119"/>
            <declaration name="IHDR_height" type="int" line="120"/>
            <declaration name="IHDR_bitDepth" type="int" line="121"/>
            <declaration name="IHDR_colorType" type="int" line="122"/>
            <declaration name="IHDR_compressionMethod" type="int" line="123"/>
            <declaration name="IHDR_filterMethod" type="int" line="124"/>
            <declaration name="IHDR_interlaceMethod" type="int" line="125"/>
            <declaration name="PLTE_present" type="boolean" line="128"/>
            <declaration name="PLTE_red" type="byte[]" line="129"/>
            <declaration name="PLTE_green" type="byte[]" line="130"/>
            <declaration name="PLTE_blue" type="byte[]" line="131"/>
            <declaration name="PLTE_order" type="int[]" line="138"/>
            <declaration name="bKGD_present" type="boolean" line="143"/>
            <declaration name="bKGD_colorType" type="int" line="144"/>
            <declaration name="bKGD_index" type="int" line="145"/>
            <declaration name="bKGD_gray" type="int" line="146"/>
            <declaration name="bKGD_red" type="int" line="147"/>
            <declaration name="bKGD_green" type="int" line="148"/>
            <declaration name="bKGD_blue" type="int" line="149"/>
            <declaration name="cHRM_present" type="boolean" line="152"/>
            <declaration name="cHRM_whitePointX" type="int" line="153"/>
            <declaration name="cHRM_whitePointY" type="int" line="154"/>
            <declaration name="cHRM_redX" type="int" line="155"/>
            <declaration name="cHRM_redY" type="int" line="156"/>
            <declaration name="cHRM_greenX" type="int" line="157"/>
            <declaration name="cHRM_greenY" type="int" line="158"/>
            <declaration name="cHRM_blueX" type="int" line="159"/>
            <declaration name="cHRM_blueY" type="int" line="160"/>
            <declaration name="gAMA_present" type="boolean" line="163"/>
            <declaration name="gAMA_gamma" type="int" line="164"/>
            <declaration name="hIST_present" type="boolean" line="167"/>
            <declaration name="hIST_histogram" type="char[]" line="168"/>
            <declaration name="iCCP_present" type="boolean" line="171"/>
            <declaration name="iCCP_profileName" type="String" line="172"/>
            <declaration name="iCCP_compressionMethod" type="int" line="173"/>
            <declaration name="iCCP_compressedProfile" type="byte[]" line="174"/>
            <declaration name="iTXt_keyword" type="ArrayList&lt;String&gt;" line="177"/>
            <declaration name="iTXt_compressionFlag" type="ArrayList&lt;Boolean&gt;" line="178"/>
            <declaration name="iTXt_compressionMethod" type="ArrayList&lt;Integer&gt;" line="179"/>
            <declaration name="iTXt_languageTag" type="ArrayList&lt;String&gt;" line="180"/>
            <declaration name="iTXt_translatedKeyword" type="ArrayList&lt;String&gt;" line="181"/>
            <declaration name="iTXt_text" type="ArrayList&lt;String&gt;" line="182"/>
            <declaration name="pHYs_present" type="boolean" line="185"/>
            <declaration name="pHYs_pixelsPerUnitXAxis" type="int" line="186"/>
            <declaration name="pHYs_pixelsPerUnitYAxis" type="int" line="187"/>
            <declaration name="pHYs_unitSpecifier" type="int" line="188"/>
            <declaration name="sBIT_present" type="boolean" line="191"/>
            <declaration name="sBIT_colorType" type="int" line="192"/>
            <declaration name="sBIT_grayBits" type="int" line="193"/>
            <declaration name="sBIT_redBits" type="int" line="194"/>
            <declaration name="sBIT_greenBits" type="int" line="195"/>
            <declaration name="sBIT_blueBits" type="int" line="196"/>
            <declaration name="sBIT_alphaBits" type="int" line="197"/>
            <declaration name="sPLT_present" type="boolean" line="200"/>
            <declaration name="sPLT_paletteName" type="String" line="201"/>
            <declaration name="sPLT_sampleDepth" type="int" line="202"/>
            <declaration name="sPLT_red" type="int[]" line="203"/>
            <declaration name="sPLT_green" type="int[]" line="204"/>
            <declaration name="sPLT_blue" type="int[]" line="205"/>
            <declaration name="sPLT_alpha" type="int[]" line="206"/>
            <declaration name="sPLT_frequency" type="int[]" line="207"/>
            <declaration name="sRGB_present" type="boolean" line="210"/>
            <declaration name="sRGB_renderingIntent" type="int" line="211"/>
            <declaration name="tEXt_keyword" type="ArrayList&lt;String&gt;" line="214"/>
            <declaration name="tEXt_text" type="ArrayList&lt;String&gt;" line="215"/>
            <declaration name="tIME_present" type="boolean" line="218"/>
            <declaration name="tIME_year" type="int" line="219"/>
            <declaration name="tIME_month" type="int" line="220"/>
            <declaration name="tIME_day" type="int" line="221"/>
            <declaration name="tIME_hour" type="int" line="222"/>
            <declaration name="tIME_minute" type="int" line="223"/>
            <declaration name="tIME_second" type="int" line="224"/>
            <declaration name="tRNS_present" type="boolean" line="229"/>
            <declaration name="tRNS_colorType" type="int" line="230"/>
            <declaration name="tRNS_alpha" type="byte[]" line="231"/>
            <declaration name="tRNS_gray" type="int" line="232"/>
            <declaration name="tRNS_red" type="int" line="233"/>
            <declaration name="tRNS_green" type="int" line="234"/>
            <declaration name="tRNS_blue" type="int" line="235"/>
            <declaration name="zTXt_keyword" type="ArrayList&lt;String&gt;" line="238"/>
            <declaration name="zTXt_compressionMethod" type="ArrayList&lt;Integer&gt;" line="239"/>
            <declaration name="zTXt_text" type="ArrayList&lt;String&gt;" line="240"/>
            <declaration name="unknownChunkType" type="ArrayList&lt;String&gt;" line="243"/>
            <declaration name="unknownChunkData" type="ArrayList&lt;byte[]&gt;" line="244"/>
            <method name="PNGMetadata" type="constructor" line="246"/>
            <method name="PNGMetadata" type="constructor" line="253">
                <params>
                    <param name="metadata" type="IIOMetadata"/>
                </params>
                <comment line="255">
                    TODO -- implement                    
                </comment>
            </method>
            <javadoc line="257">
                Sets the IHDR_bitDepth and IHDR_colorType variables.
                  The &lt;code&gt;numBands&lt;/code&gt; parameter is necessary since
                  we may only be writing a subset of the image bands.                
            </javadoc>
            <method name="initialize" type="void" line="262">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="numBands" type="int"/>
                </params>
                <comment line="267">
                    Initialize IHDR_bitDepth                    
                </comment>
                <comment line="270">
                    Choose max bit depth over all channels
                     Fixes bug 4413109                    
                </comment>
                <comment line="277">
                    Multi-channel images must have a bit depth of 8 or 16                    
                </comment>
                <comment line="282">
                    Round bit depth up to a power of 2                    
                </comment>
                <comment line="294">
                    Initialize IHDR_colorType                    
                </comment>
                <comment line="306">
                    Determine whether the color tables are actually a gray ramp
                     if the color type has not been set previously                    
                </comment>
                <comment line="324">
                    Determine whether transparency exists                    
                </comment>
                <comment line="333">
                    NB: PNG_COLOR_GRAY_ALPHA color type may be not optimal for images
                     contained more than 1024 pixels (or even than 768 pixels in case of
                     single transparent pixel in palette).
                     For such images alpha samples in raster will occupy more space than
                     it is required to store palette so it could be reasonable to
                     use PNG_COLOR_PALETTE color type for large images.                    
                </comment>
                <comment line="360">
                    Reorder the palette so that non-opaque entries
                     come first.  Since the tRNS chunk does not have
                     to store trailing 255&apos;s, this can save a
                     considerable amount of space when encoding
                     images with only one transparent pixel value,
                     e.g., images from GIF sources.                    
                </comment>
                <comment line="369">
                    Scan for non-opaque entries and assign them
                     positions starting at 0.                    
                </comment>
                <comment line="381">
                    Scan for opaque entries and assign them
                     positions following the non-opaque entries.                    
                </comment>
                <comment line="389">
                    Reorder the palettes                    
                </comment>
                <comment line="393">
                    All have the same length                    
                </comment>
                <comment line="403">
                    Copy only the transparent entries into tRNS_alpha                    
                </comment>
                <declaration name="colorModel" type="ColorModel" line="263"/>
                <declaration name="sampleModel" type="SampleModel" line="264"/>
                <declaration name="sampleSize" type="int[]" line="267"/>
                <declaration name="bitDepth" type="int" line="268"/>
                <scope line="271">
                    <scope line="272"/>
                </scope>
                <scope line="277"/>
                <scope line="282"/>
                <scope line="284"/>
                <scope line="286"/>
                <scope line="288"/>
                <scope line="294">
                    <declaration name="icm" type="IndexColorModel" line="295"/>
                    <declaration name="size" type="int" line="296"/>
                    <declaration name="reds" type="byte[]" line="298"/>
                    <declaration name="greens" type="byte[]" line="300"/>
                    <declaration name="blues" type="byte[]" line="302"/>
                    <declaration name="isGray" type="boolean" line="307"/>
                    <scope line="309">
                        <declaration name="scale" type="int" line="311"/>
                        <scope line="312">
                            <declaration name="red" type="byte" line="313"/>
                            <scope line="316"/>
                        </scope>
                    </scope>
                    <declaration name="hasAlpha" type="boolean" line="324"/>
                    <declaration name="alpha" type="byte[]" line="326"/>
                    <scope line="327"/>
                    <scope line="341"/>
                    <scope line="343"/>
                    <scope line="345">
                        <scope line="353">
                            <declaration name="newAlpha" type="byte[]" line="366"/>
                            <declaration name="newIndex" type="int" line="370"/>
                            <scope line="371">
                                <scope line="372"/>
                            </scope>
                            <declaration name="numTransparent" type="int" line="378"/>
                            <scope line="382">
                                <scope line="383"/>
                            </scope>
                            <declaration name="oldRed" type="byte[]" line="389"/>
                            <declaration name="oldGreen" type="byte[]" line="390"/>
                            <declaration name="oldBlue" type="byte[]" line="391"/>
                            <declaration name="len" type="int" line="392"/>
                            <scope line="396"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="408">
                    <scope line="409"/>
                    <scope line="411"/>
                    <scope line="413"/>
                    <scope line="415"/>
                    <scope line="417"/>
                </scope>
            </method>
            <method name="isReadOnly" type="boolean" line="425"/>
            <method name="cloneBytesArrayList" type="ArrayList<byte[]>" line="429">
                <params>
                    <param name="in" type="ArrayList<byte[]>"/>
                </params>
                <scope line="430"/>
                <scope line="432">
                    <declaration name="list" type="ArrayList&lt;byte[]&gt;" line="433"/>
                    <scope line="434"/>
                </scope>
            </method>
            <method name="clone" type="Object" line="442">
                <comment line="451">
                    unknownChunkData needs deep clone                    
                </comment>
                <declaration name="metadata" type="PNGMetadata" line="443"/>
                <scope line="444"/>
                <scope line="446"/>
            </method>
            <method name="getAsTree" type="Node" line="457">
                <params>
                    <param name="formatName" type="String"/>
                </params>
                <scope line="458"/>
                <scope line="461"/>
                <scope line="463"/>
            </method>
            <method name="getNativeTree" type="Node" line="468">
                <comment line="470">
                    scratch node                    
                </comment>
                <comment line="473">
                    IHDR                    
                </comment>
                <comment line="482">
                    IHDR_compressionMethod must be 0 in PNG 1.1                    
                </comment>
                <comment line="485">
                    IHDR_filterMethod must be 0 in PNG 1.1                    
                </comment>
                <comment line="493">
                    PLTE                    
                </comment>
                <comment line="512">
                    bKGD                    
                </comment>
                <comment line="533">
                    cHRM                    
                </comment>
                <comment line="550">
                    gAMA                    
                </comment>
                <comment line="558">
                    hIST                    
                </comment>
                <comment line="574">
                    iCCP                    
                </comment>
                <comment line="590">
                    iTXt                    
                </comment>
                <comment line="612">
                    pHYs                    
                </comment>
                <comment line="625">
                    sBIT                    
                </comment>
                <comment line="671">
                    sPLT                    
                </comment>
                <comment line="695">
                    sRGB                    
                </comment>
                <comment line="704">
                    tEXt                    
                </comment>
                <comment line="718">
                    tIME                    
                </comment>
                <comment line="731">
                    tRNS                    
                </comment>
                <comment line="760">
                    zTXt                    
                </comment>
                <comment line="779">
                    Unknown chunks                    
                </comment>
                <declaration name="node" type="IIOMetadataNode" line="469"/>
                <declaration name="root" type="IIOMetadataNode" line="470"/>
                <scope line="473">
                    <declaration name="IHDR_node" type="IIOMetadataNode" line="474"/>
                </scope>
                <scope line="493">
                    <declaration name="PLTE_node" type="IIOMetadataNode" line="494"/>
                    <declaration name="numEntries" type="int" line="495"/>
                    <scope line="496">
                        <declaration name="entry" type="IIOMetadataNode" line="497"/>
                    </scope>
                </scope>
                <scope line="512">
                    <declaration name="bKGD_node" type="IIOMetadataNode" line="513"/>
                    <scope line="515"/>
                    <scope line="518"/>
                    <scope line="521"/>
                </scope>
                <scope line="533">
                    <declaration name="cHRM_node" type="IIOMetadataNode" line="534"/>
                </scope>
                <scope line="550">
                    <declaration name="gAMA_node" type="IIOMetadataNode" line="551"/>
                </scope>
                <scope line="558">
                    <declaration name="hIST_node" type="IIOMetadataNode" line="559"/>
                    <scope line="561">
                        <declaration name="hist" type="IIOMetadataNode" line="562"/>
                    </scope>
                </scope>
                <scope line="574">
                    <declaration name="iCCP_node" type="IIOMetadataNode" line="575"/>
                    <declaration name="profile" type="Object" line="580"/>
                    <scope line="581"/>
                </scope>
                <scope line="590">
                    <declaration name="iTXt_parent" type="IIOMetadataNode" line="591"/>
                    <scope line="592">
                        <declaration name="iTXt_node" type="IIOMetadataNode" line="593"/>
                    </scope>
                </scope>
                <scope line="612">
                    <declaration name="pHYs_node" type="IIOMetadataNode" line="613"/>
                </scope>
                <scope line="625">
                    <declaration name="sBIT_node" type="IIOMetadataNode" line="626"/>
                    <scope line="628"/>
                    <scope line="632"/>
                    <scope line="638"/>
                    <scope line="646"/>
                    <scope line="656"/>
                </scope>
                <scope line="671">
                    <declaration name="sPLT_node" type="IIOMetadataNode" line="672"/>
                    <declaration name="numEntries" type="int" line="678"/>
                    <scope line="679">
                        <declaration name="entry" type="IIOMetadataNode" line="680"/>
                    </scope>
                </scope>
                <scope line="695">
                    <declaration name="sRGB_node" type="IIOMetadataNode" line="696"/>
                </scope>
                <scope line="704">
                    <declaration name="tEXt_parent" type="IIOMetadataNode" line="705"/>
                    <scope line="706">
                        <declaration name="tEXt_node" type="IIOMetadataNode" line="707"/>
                    </scope>
                </scope>
                <scope line="718">
                    <declaration name="tIME_node" type="IIOMetadataNode" line="719"/>
                </scope>
                <scope line="731">
                    <declaration name="tRNS_node" type="IIOMetadataNode" line="732"/>
                    <scope line="734">
                        <scope line="737">
                            <declaration name="entry" type="IIOMetadataNode" line="738"/>
                        </scope>
                    </scope>
                    <scope line="745"/>
                    <scope line="748"/>
                </scope>
                <scope line="760">
                    <declaration name="zTXt_parent" type="IIOMetadataNode" line="761"/>
                    <scope line="762">
                        <declaration name="zTXt_node" type="IIOMetadataNode" line="763"/>
                        <declaration name="cm" type="int" line="766"/>
                    </scope>
                </scope>
                <scope line="779">
                    <declaration name="unknown_parent" type="IIOMetadataNode" line="780"/>
                    <scope line="782">
                        <declaration name="unknown_node" type="IIOMetadataNode" line="783"/>
                    </scope>
                </scope>
            </method>
            <method name="getNumChannels" type="int" line="798">
                <comment line="800">
                    Determine number of channels
                     Be careful about palette color with transparency                    
                </comment>
                <declaration name="numChannels" type="int" line="801"/>
                <scope line="803"/>
            </method>
            <method name="getStandardChromaNode" type="IIOMetadataNode" line="809">
                <comment line="812">
                    scratch node                    
                </comment>
                <declaration name="chroma_node" type="IIOMetadataNode" line="810"/>
                <declaration name="node" type="IIOMetadataNode" line="811"/>
                <scope line="821"/>
                <scope line="831">
                    <declaration name="hasAlpha" type="boolean" line="832"/>
                    <scope line="836">
                        <declaration name="entry" type="IIOMetadataNode" line="837"/>
                        <scope line="846">
                            <declaration name="alpha" type="int" line="847"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="856">
                    <scope line="857"/>
                    <scope line="860">
                        <declaration name="r" type="int" line="862"/>
                        <scope line="864"/>
                        <scope line="866"/>
                    </scope>
                </scope>
            </method>
            <method name="getStandardCompressionNode" type="IIOMetadataNode" line="881">
                <comment line="884">
                    scratch node                    
                </comment>
                <declaration name="compression_node" type="IIOMetadataNode" line="882"/>
                <declaration name="node" type="IIOMetadataNode" line="883"/>
            </method>
            <method name="repeat" type="String" line="901">
                <params>
                    <param name="s" type="String"/>
                    <param name="times" type="int"/>
                </params>
                <scope line="902"/>
                <declaration name="sb" type="StringBuffer" line="905"/>
                <scope line="907"/>
            </method>
            <method name="getStandardDataNode" type="IIOMetadataNode" line="914">
                <comment line="917">
                    scratch node                    
                </comment>
                <comment line="940">
                    sBIT_colorType == PNGImageReader.PNG_COLOR_RGB ||
                     sBIT_colorType == PNGImageReader.PNG_COLOR_RGB_ALPHA                    
                </comment>
                <comment line="956">
                    SampleMSB                    
                </comment>
                <declaration name="data_node" type="IIOMetadataNode" line="915"/>
                <declaration name="node" type="IIOMetadataNode" line="916"/>
                <declaration name="bitDepth" type="String" line="928"/>
                <scope line="933">
                    <declaration name="sbits" type="String" line="935"/>
                    <scope line="937"/>
                    <scope line="939"/>
                    <scope line="947"/>
                </scope>
            </method>
            <method name="getStandardDimensionNode" type="IIOMetadataNode" line="960">
                <comment line="963">
                    scratch node                    
                </comment>
                <declaration name="dimension_node" type="IIOMetadataNode" line="961"/>
                <declaration name="node" type="IIOMetadataNode" line="962"/>
                <declaration name="ratio" type="float" line="965"/>
                <scope line="974"/>
            </method>
            <method name="getStandardDocumentNode" type="IIOMetadataNode" line="989">
                <comment line="996">
                    scratch node                    
                </comment>
                <scope line="990"/>
                <declaration name="document_node" type="IIOMetadataNode" line="994"/>
                <declaration name="node" type="IIOMetadataNode" line="995"/>
            </method>
            <method name="getStandardTextNode" type="IIOMetadataNode" line="1009">
                <comment line="1018">
                    scratch node                    
                </comment>
                <declaration name="numEntries" type="int" line="1010"/>
                <scope line="1012"/>
                <declaration name="text_node" type="IIOMetadataNode" line="1016"/>
                <declaration name="node" type="IIOMetadataNode" line="1017"/>
                <scope line="1019"/>
                <scope line="1029">
                    <scope line="1035"/>
                    <scope line="1037"/>
                </scope>
                <scope line="1044"/>
            </method>
            <method name="getStandardTransparencyNode" type="IIOMetadataNode" line="1056">
                <comment line="1060">
                    scratch node                    
                </comment>
                <declaration name="transparency_node" type="IIOMetadataNode" line="1057"/>
                <declaration name="node" type="IIOMetadataNode" line="1059"/>
                <declaration name="hasAlpha" type="boolean" line="1062"/>
                <scope line="1072">
                    <scope line="1074"/>
                    <scope line="1079"/>
                </scope>
            </method>
            <method name="fatal" type="void" line="1090">
                <params>
                    <param name="node" type="Node"/>
                    <param name="reason" type="String"/>
                </params>
            </method>
            <method name="getStringAttribute" type="String" line="1097">
                <params>
                    <param name="node" type="Node"/>
                    <param name="name" type="String"/>
                    <param name="defaultValue" type="String"/>
                    <param name="required" type="boolean"/>
                </params>
                <declaration name="attr" type="Node" line="1098"/>
                <scope line="1099">
                    <scope line="1100"/>
                    <scope line="1102"/>
                </scope>
            </method>
            <method name="getIntAttribute" type="int" line="1113">
                <params>
                    <param name="node" type="Node"/>
                    <param name="name" type="String"/>
                    <param name="defaultValue" type="int"/>
                    <param name="required" type="boolean"/>
                </params>
                <declaration name="value" type="String" line="1114"/>
                <scope line="1115"/>
            </method>
            <method name="getFloatAttribute" type="float" line="1124">
                <params>
                    <param name="node" type="Node"/>
                    <param name="name" type="String"/>
                    <param name="defaultValue" type="float"/>
                    <param name="required" type="boolean"/>
                </params>
                <declaration name="value" type="String" line="1125"/>
                <scope line="1126"/>
            </method>
            <method name="getIntAttribute" type="int" line="1134">
                <params>
                    <param name="node" type="Node"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getFloatAttribute" type="float" line="1140">
                <params>
                    <param name="node" type="Node"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getBooleanAttribute" type="boolean" line="1148">
                <params>
                    <param name="node" type="Node"/>
                    <param name="name" type="String"/>
                    <param name="defaultValue" type="boolean"/>
                    <param name="required" type="boolean"/>
                </params>
                <comment line="1159">
                    Allow lower case booleans for backward compatibility, #5082756                    
                </comment>
                <declaration name="attr" type="Node" line="1149"/>
                <scope line="1150">
                    <scope line="1151"/>
                    <scope line="1153"/>
                </scope>
                <declaration name="value" type="String" line="1157"/>
                <scope line="1159"/>
                <scope line="1161"/>
                <scope line="1163"/>
            </method>
            <method name="getBooleanAttribute" type="boolean" line="1171">
                <params>
                    <param name="node" type="Node"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getEnumeratedAttribute" type="int" line="1179">
                <params>
                    <param name="node" type="Node"/>
                    <param name="name" type="String"/>
                    <param name="legalNames" type="String[]"/>
                    <param name="defaultValue" type="int"/>
                    <param name="required" type="boolean"/>
                </params>
                <declaration name="attr" type="Node" line="1180"/>
                <scope line="1181">
                    <scope line="1182"/>
                    <scope line="1184"/>
                </scope>
                <declaration name="value" type="String" line="1188"/>
                <scope line="1189">
                    <scope line="1190"/>
                </scope>
            </method>
            <method name="getEnumeratedAttribute" type="int" line="1202">
                <params>
                    <param name="node" type="Node"/>
                    <param name="name" type="String"/>
                    <param name="legalNames" type="String[]"/>
                </params>
            </method>
            <method name="getAttribute" type="String" line="1209">
                <params>
                    <param name="node" type="Node"/>
                    <param name="name" type="String"/>
                    <param name="defaultValue" type="String"/>
                    <param name="required" type="boolean"/>
                </params>
                <declaration name="attr" type="Node" line="1210"/>
                <scope line="1211">
                    <scope line="1212"/>
                    <scope line="1214"/>
                </scope>
            </method>
            <method name="getAttribute" type="String" line="1223">
                <params>
                    <param name="node" type="Node"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="mergeTree" type="void" line="1228">
                <params>
                    <param name="formatName" type="String"/>
                    <param name="root" type="Node"/>
                </params>
                <scope line="1229">
                    <scope line="1230"/>
                </scope>
                <scope line="1235">
                    <scope line="1236"/>
                </scope>
                <scope line="1240"/>
            </method>
            <method name="mergeNativeTree" type="void" line="1246">
                <params>
                    <param name="root" type="Node"/>
                </params>
                <comment line="1319">
                    Guard against partial overwrite                    
                </comment>
                <comment line="1442">
                    silently skip invalid text entry                    
                </comment>
                <comment line="1457">
                    Guard against partial overwrite                    
                </comment>
                <comment line="1580">
                    Guard against partial overwrite                    
                </comment>
                <declaration name="node" type="Node" line="1247"/>
                <scope line="1248"/>
                <scope line="1253">
                    <declaration name="name" type="String" line="1254"/>
                    <scope line="1256"/>
                    <scope line="1274">
                        <declaration name="red" type="byte[]" line="1275"/>
                        <declaration name="green" type="byte[]" line="1276"/>
                        <declaration name="blue" type="byte[]" line="1277"/>
                        <declaration name="maxindex" type="int" line="1278"/>
                        <declaration name="PLTE_entry" type="Node" line="1280"/>
                        <scope line="1281"/>
                        <scope line="1285">
                            <scope line="1286"/>
                            <declaration name="index" type="int" line="1291"/>
                            <scope line="1292"/>
                            <scope line="1296"/>
                        </scope>
                        <declaration name="numEntries" type="int" line="1309"/>
                    </scope>
                    <scope line="1317">
                        <declaration name="bKGD_node" type="Node" line="1319"/>
                        <scope line="1320"/>
                        <declaration name="bKGD_name" type="String" line="1323"/>
                        <scope line="1324"/>
                        <scope line="1327"/>
                        <scope line="1330"/>
                        <scope line="1335"/>
                        <scope line="1338"/>
                    </scope>
                    <scope line="1343"/>
                    <scope line="1354"/>
                    <scope line="1357">
                        <declaration name="hist" type="char[]" line="1358"/>
                        <declaration name="maxindex" type="int" line="1359"/>
                        <declaration name="hIST_entry" type="Node" line="1361"/>
                        <scope line="1362"/>
                        <scope line="1366">
                            <scope line="1367"/>
                            <declaration name="index" type="int" line="1372"/>
                            <scope line="1373"/>
                            <scope line="1377"/>
                        </scope>
                        <declaration name="numEntries" type="int" line="1386"/>
                    </scope>
                    <scope line="1391">
                        <declaration name="compressedProfile" type="Object" line="1396"/>
                        <scope line="1398"/>
                        <scope line="1401"/>
                    </scope>
                    <scope line="1409">
                        <declaration name="iTXt_node" type="Node" line="1410"/>
                        <scope line="1411">
                            <scope line="1412"/>
                            <declaration name="keyword" type="String" line="1417"/>
                            <scope line="1418">
                                <declaration name="compressionFlag" type="boolean" line="1421"/>
                                <declaration name="compressionMethod" type="String" line="1425"/>
                                <declaration name="languageTag" type="String" line="1429"/>
                                <declaration name="translatedKeyword" type="String" line="1433"/>
                                <declaration name="text" type="String" line="1437"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1445"/>
                    <scope line="1455">
                        <declaration name="sBIT_node" type="Node" line="1457"/>
                        <scope line="1458"/>
                        <declaration name="sBIT_name" type="String" line="1461"/>
                        <scope line="1462"/>
                        <scope line="1465"/>
                        <scope line="1469"/>
                        <scope line="1474"/>
                        <scope line="1480"/>
                        <scope line="1485"/>
                        <scope line="1488"/>
                    </scope>
                    <scope line="1493">
                        <declaration name="red" type="int[]" line="1497"/>
                        <declaration name="green" type="int[]" line="1498"/>
                        <declaration name="blue" type="int[]" line="1499"/>
                        <declaration name="alpha" type="int[]" line="1500"/>
                        <declaration name="frequency" type="int[]" line="1501"/>
                        <declaration name="maxindex" type="int" line="1502"/>
                        <declaration name="sPLT_entry" type="Node" line="1504"/>
                        <scope line="1505"/>
                        <scope line="1509">
                            <scope line="1510"/>
                            <declaration name="index" type="int" line="1515"/>
                            <scope line="1516"/>
                            <scope line="1520"/>
                        </scope>
                        <declaration name="numEntries" type="int" line="1533"/>
                    </scope>
                    <scope line="1547"/>
                    <scope line="1553">
                        <declaration name="tEXt_node" type="Node" line="1554"/>
                        <scope line="1555">
                            <scope line="1556"/>
                            <declaration name="keyword" type="String" line="1561"/>
                            <declaration name="text" type="String" line="1564"/>
                        </scope>
                    </scope>
                    <scope line="1569"/>
                    <scope line="1578">
                        <declaration name="tRNS_node" type="Node" line="1580"/>
                        <scope line="1581"/>
                        <declaration name="tRNS_name" type="String" line="1584"/>
                        <scope line="1585">
                            <declaration name="alpha" type="byte[]" line="1586"/>
                            <declaration name="maxindex" type="int" line="1587"/>
                            <declaration name="tRNS_paletteEntry" type="Node" line="1589"/>
                            <scope line="1590"/>
                            <scope line="1593">
                                <scope line="1595"/>
                                <declaration name="index" type="int" line="1599"/>
                                <scope line="1601"/>
                                <scope line="1605"/>
                            </scope>
                            <declaration name="numEntries" type="int" line="1616"/>
                        </scope>
                        <scope line="1620"/>
                        <scope line="1623"/>
                        <scope line="1628"/>
                        <scope line="1631"/>
                    </scope>
                    <scope line="1636">
                        <declaration name="zTXt_node" type="Node" line="1637"/>
                        <scope line="1638">
                            <scope line="1639"/>
                            <declaration name="keyword" type="String" line="1644"/>
                            <declaration name="compressionMethod" type="int" line="1647"/>
                            <declaration name="text" type="String" line="1652"/>
                        </scope>
                    </scope>
                    <scope line="1657">
                        <declaration name="unknown_node" type="Node" line="1658"/>
                        <scope line="1659">
                            <scope line="1660"/>
                            <declaration name="chunkType" type="String" line="1664"/>
                            <declaration name="chunkData" type="Object" line="1665"/>
                            <scope line="1668"/>
                            <scope line="1672"/>
                            <scope line="1676"/>
                        </scope>
                    </scope>
                    <scope line="1685"/>
                </scope>
            </method>
            <method name="isValidKeyword" type="boolean" line="1702">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="len" type="int" line="1703"/>
                <scope line="1704"/>
                <scope line="1707"/>
            </method>
            <method name="isISOLatin" type="boolean" line="1722">
                <params>
                    <param name="s" type="String"/>
                    <param name="isLineFeedAllowed" type="boolean"/>
                </params>
                <comment line="1728">
                    not printable. Check whether this is an allowed
                     control char                    
                </comment>
                <declaration name="len" type="int" line="1723"/>
                <scope line="1724">
                    <declaration name="c" type="char" line="1725"/>
                    <scope line="1726">
                        <scope line="1729"/>
                    </scope>
                </scope>
            </method>
            <method name="mergeStandardTree" type="void" line="1738">
                <params>
                    <param name="root" type="Node"/>
                </params>
                <comment line="1808">
                    } else if (childName.equals(&quot;ColorSpaceType&quot;)) {
                                      } else if (childName.equals(&quot;NumChannels&quot;)) {                    
                </comment>
                <comment line="1818">
                    Use Adam7 if NumProgressiveScans &gt; 1                    
                </comment>
                <comment line="1821">
                    } else if (childName.equals(&quot;CompressionTypeName&quot;)) {
                                      } else if (childName.equals(&quot;Lossless&quot;)) {
                                      } else if (childName.equals(&quot;BitRate&quot;)) {                    
                </comment>
                <comment line="1880">
                    } else if (childName.equals(&quot;PlanarConfiguration&quot;)) {
                                          } else if (childName.equals(&quot;SampleFormat&quot;)) {
                                          } else if (childName.equals(&quot;SampleMSB&quot;)) {                    
                </comment>
                <comment line="1907">
                    } else if (childName.equals(&quot;ImageOrientation&quot;)) {
                                      } else if
                                          (childName.equals(&quot;HorizontalPhysicalPixelSpacing&quot;)) {
                                      } else if
                                          (childName.equals(&quot;VerticalPhysicalPixelSpacing&quot;)) {
                                      } else if (childName.equals(&quot;HorizontalPosition&quot;)) {
                                      } else if (childName.equals(&quot;VerticalPosition&quot;)) {
                                      } else if (childName.equals(&quot;HorizontalPixelOffset&quot;)) {
                                      } else if (childName.equals(&quot;VerticalPixelOffset&quot;)) {                    
                </comment>
                <comment line="1929">
                    Find a reasonable rational approximation                    
                </comment>
                <comment line="1955">
                    } else if (childName.equals(&quot;SubimageInterpretation&quot;)) {
                                      } else if (childName.equals(&quot;ImageCreationTime&quot;)) {                    
                </comment>
                <comment line="1974">
                    Just ignore this node, PNG requires keywords                    
                </comment>
                <comment line="1977">
                    Use a zTXt node                    
                </comment>
                <comment line="1982">
                    Use a tEXt node                    
                </comment>
                <comment line="1987">
                    Use an iTXt node                    
                </comment>
                <comment line="1992">
                    fake it                    
                </comment>
                <comment line="1998">
                    } else if (name.equals(&quot;Transparency&quot;)) {
                                  Node child = node.getFirstChild();
                                  while (child != null) {
                                      String childName = child.getNodeName();
                                      if (childName.equals(&quot;Alpha&quot;)) {
                                      } else if (childName.equals(&quot;TransparentIndex&quot;)) {
                                      } else if (childName.equals(&quot;TransparentColor&quot;)) {
                                      } else if (childName.equals(&quot;TileTransparencies&quot;)) {
                                      } else if (childName.equals(&quot;TileOpacities&quot;)) {
                                      }
                                      child = child.getNextSibling();
                                  }
                              } else {
                                   fatal(node, &quot;Unknown child of root node!&quot;);                    
                </comment>
                <declaration name="node" type="Node" line="1739"/>
                <scope line="1741"/>
                <scope line="1747">
                    <declaration name="name" type="String" line="1748"/>
                    <scope line="1750">
                        <declaration name="child" type="Node" line="1751"/>
                        <scope line="1752">
                            <declaration name="childName" type="String" line="1753"/>
                            <scope line="1754">
                                <declaration name="gamma" type="float" line="1755"/>
                            </scope>
                            <scope line="1758">
                                <declaration name="red" type="byte[]" line="1759"/>
                                <declaration name="green" type="byte[]" line="1760"/>
                                <declaration name="blue" type="byte[]" line="1761"/>
                                <declaration name="maxindex" type="int" line="1762"/>
                                <declaration name="entry" type="Node" line="1764"/>
                                <scope line="1765">
                                    <declaration name="index" type="int" line="1766"/>
                                    <scope line="1767">
                                        <scope line="1774"/>
                                    </scope>
                                </scope>
                                <declaration name="numEntries" type="int" line="1781"/>
                            </scope>
                            <scope line="1789"/>
                            <scope line="1793">
                                <declaration name="red" type="int" line="1794"/>
                                <declaration name="green" type="int" line="1795"/>
                                <declaration name="blue" type="int" line="1796"/>
                                <scope line="1797"/>
                                <scope line="1800"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1812">
                        <declaration name="child" type="Node" line="1813"/>
                        <scope line="1814">
                            <declaration name="childName" type="String" line="1815"/>
                            <scope line="1816">
                                <declaration name="scans" type="int" line="1818"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1826">
                        <declaration name="child" type="Node" line="1827"/>
                        <scope line="1828">
                            <declaration name="childName" type="String" line="1829"/>
                            <scope line="1830">
                                <declaration name="s" type="String" line="1831"/>
                                <declaration name="t" type="StringTokenizer" line="1832"/>
                                <declaration name="maxBits" type="int" line="1833"/>
                                <scope line="1834">
                                    <declaration name="bits" type="int" line="1835"/>
                                    <scope line="1836"/>
                                </scope>
                                <scope line="1840"/>
                                <scope line="1844"/>
                                <scope line="1847"/>
                            </scope>
                            <scope line="1851">
                                <declaration name="s" type="String" line="1852"/>
                                <declaration name="t" type="StringTokenizer" line="1853"/>
                                <declaration name="numTokens" type="int" line="1854"/>
                                <scope line="1855"/>
                                <scope line="1858"/>
                                <scope line="1863"/>
                                <scope line="1868"/>
                                <scope line="1876"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1885">
                        <declaration name="gotWidth" type="boolean" line="1886"/>
                        <declaration name="gotHeight" type="boolean" line="1887"/>
                        <declaration name="gotAspectRatio" type="boolean" line="1888"/>
                        <declaration name="width" type="float" line="1890"/>
                        <declaration name="height" type="float" line="1891"/>
                        <declaration name="aspectRatio" type="float" line="1892"/>
                        <declaration name="child" type="Node" line="1894"/>
                        <scope line="1895">
                            <declaration name="childName" type="String" line="1896"/>
                            <scope line="1897"/>
                            <scope line="1900"/>
                            <scope line="1903"/>
                        </scope>
                        <scope line="1919"/>
                        <scope line="1924">
                            <declaration name="denom" type="int" line="1929"/>
                            <scope line="1930">
                                <declaration name="num" type="int" line="1931"/>
                                <scope line="1932"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1939">
                        <declaration name="child" type="Node" line="1940"/>
                        <scope line="1941">
                            <declaration name="childName" type="String" line="1942"/>
                            <scope line="1943"/>
                        </scope>
                    </scope>
                    <scope line="1959">
                        <declaration name="child" type="Node" line="1960"/>
                        <scope line="1961">
                            <declaration name="childName" type="String" line="1962"/>
                            <scope line="1963">
                                <declaration name="keyword" type="String" line="1964"/>
                                <declaration name="value" type="String" line="1966"/>
                                <declaration name="language" type="String" line="1967"/>
                                <declaration name="compression" type="String" line="1969"/>
                                <scope line="1972"/>
                                <scope line="1974">
                                    <scope line="1975"/>
                                    <scope line="1980"/>
                                </scope>
                                <scope line="1985"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="reset" type="void" line="2018"/>
        </class>
    </source>