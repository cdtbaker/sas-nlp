<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.bmp">
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.color.ICC_ColorSpace"/>
        <import package="java.awt.color.ICC_Profile"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ComponentColorModel"/>
        <import package="java.awt.image.ComponentSampleModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferByte"/>
        <import package="java.awt.image.DataBufferInt"/>
        <import package="java.awt.image.DataBufferUShort"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.MultiPixelPackedSampleModel"/>
        <import package="java.awt.image.PixelInterleavedSampleModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.SinglePixelPackedSampleModel"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.ImageIO"/>
        <import package="javax.imageio.ImageReader"/>
        <import package="javax.imageio.ImageReadParam"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.spi.ImageReaderSpi"/>
        <import package="javax.imageio.stream.ImageInputStream"/>
        <import package="javax.imageio.event.IIOReadProgressListener"/>
        <import package="javax.imageio.event.IIOReadUpdateListener"/>
        <import package="javax.imageio.event.IIOReadWarningListener"/>
        <import package="java.io"/>
        <import package="java.nio"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.StringTokenizer"/>
        <import package="com.sun.imageio.plugins.common.ImageUtil"/>
        <import package="com.sun.imageio.plugins.common.I18N"/>
        <class name="BMPImageReader" line="74">
            <extends class="ImageReader"/>
            <comment line="84">
                BMP Image types                
            </comment>
            <comment line="109">
                BMP variables                
            </comment>
            <comment line="942">
                Deal with 1 Bit images using IndexColorModels                
            </comment>
            <comment line="1022">
                Method to read a 4 bit BMP image data                
            </comment>
            <comment line="1104">
                Method to read 8 bit BMP image data                
            </comment>
            <comment line="1171">
                Method to read 24 bit BMP image data                
            </comment>
            <implements interface="BMPConstants"/>
            <javadoc line="74">
                This class is the Java Image IO plugin reader for BMP images.
                  It may subsample the image, clip the image, select sub-bands,
                  and shift the decoded image origin if the proper decoding parameter
                  are set in the provided &lt;code&gt;ImageReadParam&lt;/code&gt;.
                  This class supports Microsoft Windows Bitmap Version 3-5,
                  as well as OS/2 Bitmap Version 2.x (for single-image BMP file).                
            </javadoc>
            <declaration name="VERSION_2_1_BIT" type="int" line="84"/>
            <declaration name="VERSION_2_4_BIT" type="int" line="85"/>
            <declaration name="VERSION_2_8_BIT" type="int" line="86"/>
            <declaration name="VERSION_2_24_BIT" type="int" line="87"/>
            <declaration name="VERSION_3_1_BIT" type="int" line="89"/>
            <declaration name="VERSION_3_4_BIT" type="int" line="90"/>
            <declaration name="VERSION_3_8_BIT" type="int" line="91"/>
            <declaration name="VERSION_3_24_BIT" type="int" line="92"/>
            <declaration name="VERSION_3_NT_16_BIT" type="int" line="94"/>
            <declaration name="VERSION_3_NT_32_BIT" type="int" line="95"/>
            <declaration name="VERSION_4_1_BIT" type="int" line="97"/>
            <declaration name="VERSION_4_4_BIT" type="int" line="98"/>
            <declaration name="VERSION_4_8_BIT" type="int" line="99"/>
            <declaration name="VERSION_4_16_BIT" type="int" line="100"/>
            <declaration name="VERSION_4_24_BIT" type="int" line="101"/>
            <declaration name="VERSION_4_32_BIT" type="int" line="102"/>
            <declaration name="VERSION_3_XP_EMBEDDED" type="int" line="104"/>
            <declaration name="VERSION_4_XP_EMBEDDED" type="int" line="105"/>
            <declaration name="VERSION_5_XP_EMBEDDED" type="int" line="106"/>
            <declaration name="bitmapFileSize" type="long" line="109"/>
            <declaration name="bitmapOffset" type="long" line="110"/>
            <declaration name="compression" type="long" line="111"/>
            <declaration name="imageSize" type="long" line="112"/>
            <declaration name="palette" type="byte" line="113"/>
            <declaration name="imageType" type="int" line="114"/>
            <declaration name="numBands" type="int" line="115"/>
            <declaration name="isBottomUp" type="boolean" line="116"/>
            <declaration name="bitsPerPixel" type="int" line="117"/>
            <declaration name="redMask" type="int" line="118"/>
            <declaration name="sampleModel" type="SampleModel" line="120"/>
            <declaration name="colorModel" type="ColorModel" line="121"/>
            <declaration name="iis" type="ImageInputStream" line="123"/>
            <javadoc line="123">
                The input stream where reads from                
            </javadoc>
            <declaration name="gotHeader" type="boolean" line="126"/>
            <javadoc line="126">
                Indicates whether the header is read.                
            </javadoc>
            <declaration name="width" type="int" line="129"/>
            <javadoc line="129">
                The original image width.                
            </javadoc>
            <declaration name="height" type="int" line="132"/>
            <javadoc line="132">
                The original image height.                
            </javadoc>
            <declaration name="destinationRegion" type="Rectangle" line="135"/>
            <javadoc line="135">
                The destination region.                
            </javadoc>
            <declaration name="sourceRegion" type="Rectangle" line="138"/>
            <javadoc line="138">
                The source region.                
            </javadoc>
            <declaration name="metadata" type="BMPMetadata" line="141"/>
            <javadoc line="141">
                The metadata from the stream.                
            </javadoc>
            <declaration name="bi" type="BufferedImage" line="144"/>
            <javadoc line="144">
                The destination image.                
            </javadoc>
            <declaration name="noTransform" type="boolean" line="147"/>
            <javadoc line="147">
                Indicates whether subsampled, subregion is required, and offset is
                  defined                
            </javadoc>
            <declaration name="seleBand" type="boolean" line="152"/>
            <javadoc line="152">
                Indicates whether subband is selected.                
            </javadoc>
            <declaration name="scaleX" type="int" line="155"/>
            <javadoc line="155">
                The scaling factors.                
            </javadoc>
            <declaration name="sourceBands" type="int[]" line="158"/>
            <javadoc line="158">
                source and destination bands.                
            </javadoc>
            <javadoc line="161">
                Constructs &lt;code&gt;BMPImageReader&lt;/code&gt; from the provided
                  &lt;code&gt;ImageReaderSpi&lt;/code&gt;.                
            </javadoc>
            <method name="BMPImageReader" type="constructor" line="164">
                <params>
                    <param name="originator" type="ImageReaderSpi"/>
                </params>
            </method>
            <javadoc line="168">
                Overrides the method defined in the superclass.                
            </javadoc>
            <method name="setInput" type="void" line="171">
                <params>
                    <param name="input" type="Object"/>
                    <param name="seekForwardOnly" type="boolean"/>
                    <param name="ignoreMetadata" type="boolean"/>
                </params>
                <comment line="174">
                    Always works                    
                </comment>
            </method>
            <javadoc line="179">
                Overrides the method defined in the superclass.                
            </javadoc>
            <method name="getNumImages" type="int" line="180">
                <params>
                    <param name="allowSearch" type="boolean"/>
                </params>
                <scope line="181"/>
                <scope line="184"/>
            </method>
            <method name="getWidth" type="int" line="190">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <method name="getHeight" type="int" line="196">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <method name="checkIndex" type="void" line="202">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="203"/>
            </method>
            <method name="readHeader" type="void" line="208">
                <comment line="221">
                    read and check the magic marker                    
                </comment>
                <comment line="227">
                    Read file size                    
                </comment>
                <comment line="229">
                    skip the two reserved fields                    
                </comment>
                <comment line="232">
                    Offset to the bitmap from the beginning                    
                </comment>
                <comment line="234">
                    End File Header                    
                </comment>
                <comment line="236">
                    Start BitmapCoreHeader                    
                </comment>
                <comment line="253">
                    metadata.colorPlane = planes;                    
                </comment>
                <comment line="256">
                    As BMP always has 3 rgb bands, except for Version 5,
                     which is bgra                    
                </comment>
                <comment line="261">
                    Windows 2.x and OS/2 1.x                    
                </comment>
                <comment line="264">
                    Classify the image type                    
                </comment>
                <comment line="275">
                    Read in the palette                    
                </comment>
                <comment line="297">
                    Windows 3.x and Windows NT                    
                </comment>
                <comment line="306">
                    No compression                    
                </comment>
                <comment line="307">
                    8-bit RLE compression                    
                </comment>
                <comment line="308">
                    4-bit RLE compression                    
                </comment>
                <comment line="310">
                    Read in the palette                    
                </comment>
                <comment line="332">
                    0x1F;                    
                </comment>
                <comment line="357">
                    BitsField encoding                    
                </comment>
                <comment line="366">
                    there is a palette                    
                </comment>
                <comment line="382">
                    Windows 4.x BMP                    
                </comment>
                <comment line="388">
                    rgb masks, valid only if comp is BI_BITFIELDS                    
                </comment>
                <comment line="392">
                    Only supported for 32bpp BI_RGB argb                    
                </comment>
                <comment line="418">
                    All the new fields are valid only for this case                    
                </comment>
                <comment line="433">
                    Read in the palette                    
                </comment>
                <comment line="487">
                    bottom up image                    
                </comment>
                <comment line="490">
                    top down image                    
                </comment>
                <comment line="495">
                    Reset Image Layout so there&apos;s only one tile.
                    Define the color space                    
                </comment>
                <comment line="528">
                    the colorModel and sampleModel will be initialzed
                     by the  reader of embedded image                    
                </comment>
                <comment line="533">
                    When number of bitsPerPixel is &lt;= 8, we use IndexColorModel.                    
                </comment>
                <comment line="548">
                    1 and 4 bit pixels can be stored in a packed format.                    
                </comment>
                <comment line="555">
                    Create IndexColorModel from the palette.                    
                </comment>
                <comment line="617">
                    The number of bands in the SampleModel is determined by
                     the length of the mask array passed in.                    
                </comment>
                <comment line="634">
                    Create SampleModel                    
                </comment>
                <comment line="654">
                    Reset to the start of bitmap; then jump to the
                    start of image data                    
                </comment>
                <scope line="212"/>
                <declaration name="profileData" type="int" line="215"/>
                <declaration name="marker" type="byte[]" line="221"/>
                <declaration name="size" type="long" line="236"/>
                <scope line="238"/>
                <scope line="241"/>
                <declaration name="planes" type="int" line="249"/>
                <scope line="259">
                    <scope line="264"/>
                    <scope line="266"/>
                    <scope line="268"/>
                    <scope line="270"/>
                    <declaration name="numberOfEntries" type="int" line="275"/>
                    <declaration name="sizeOfPalette" type="int" line="276"/>
                </scope>
                <scope line="281">
                    <declaration name="xPelsPerMeter" type="long" line="284"/>
                    <declaration name="yPelsPerMeter" type="long" line="285"/>
                    <declaration name="colorsUsed" type="long" line="286"/>
                    <declaration name="colorsImportant" type="long" line="287"/>
                    <scope line="295">
                        <declaration name="numberOfEntries" type="int" line="310"/>
                        <declaration name="sizeOfPalette" type="int" line="311"/>
                        <scope line="318"/>
                        <scope line="320"/>
                        <scope line="322"/>
                        <scope line="324"/>
                        <scope line="326"/>
                        <scope line="335"/>
                        <scope line="350"/>
                        <scope line="352"/>
                        <scope line="364"/>
                    </scope>
                    <scope line="380">
                        <declaration name="csType" type="long" line="393"/>
                        <declaration name="redX" type="int" line="394"/>
                        <declaration name="redY" type="int" line="395"/>
                        <declaration name="redZ" type="int" line="396"/>
                        <declaration name="greenX" type="int" line="397"/>
                        <declaration name="greenY" type="int" line="398"/>
                        <declaration name="greenZ" type="int" line="399"/>
                        <declaration name="blueX" type="int" line="400"/>
                        <declaration name="blueY" type="int" line="401"/>
                        <declaration name="blueZ" type="int" line="402"/>
                        <declaration name="gammaRed" type="long" line="403"/>
                        <declaration name="gammaGreen" type="long" line="404"/>
                        <declaration name="gammaBlue" type="long" line="405"/>
                        <scope line="407"/>
                        <scope line="416"/>
                        <declaration name="numberOfEntries" type="int" line="433"/>
                        <declaration name="sizeOfPalette" type="int" line="434"/>
                        <scope line="443"/>
                        <scope line="445"/>
                        <scope line="450"/>
                        <scope line="452"/>
                        <scope line="454"/>
                        <scope line="456">
                            <scope line="458"/>
                        </scope>
                        <scope line="463"/>
                        <scope line="465">
                            <scope line="467"/>
                        </scope>
                    </scope>
                    <scope line="479"/>
                </scope>
                <scope line="485"/>
                <scope line="488"/>
                <declaration name="colorSpace" type="ColorSpace" line="496"/>
                <scope line="498">
                    <declaration name="profile" type="byte[]" line="502"/>
                    <scope line="506">
                        <scope line="510">
                            <declaration name="path" type="String" line="511"/>
                        </scope>
                        <scope line="515"/>
                    </scope>
                    <scope line="519"/>
                </scope>
                <scope line="526"/>
                <scope line="531">
                    <scope line="535">
                        <declaration name="bandOffsets" type="int[]" line="536"/>
                        <scope line="537"/>
                    </scope>
                    <scope line="546"/>
                    <declaration name="r" type="byte" line="555"/>
                    <scope line="558">
                        <scope line="563"/>
                        <declaration name="off" type="int" line="567"/>
                        <scope line="571"/>
                    </scope>
                    <scope line="577">
                        <scope line="580"/>
                        <declaration name="off" type="int" line="584"/>
                        <scope line="588"/>
                    </scope>
                </scope>
                <scope line="601"/>
                <scope line="613">
                    <declaration name="bitMasks" type="int[]" line="618"/>
                </scope>
                <scope line="631">
                    <declaration name="bandOffsets" type="int[]" line="634"/>
                    <scope line="635"/>
                </scope>
            </method>
            <method name="getImageTypes" type="Iterator" line="661">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <declaration name="list" type="ArrayList" line="664"/>
            </method>
            <method name="getDefaultReadParam" type="ImageReadParam" line="670"/>
            <method name="getImageMetadata" type="IIOMetadata" line="675">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="677"/>
            </method>
            <method name="getStreamMetadata" type="IIOMetadata" line="683"/>
            <method name="isRandomAccessEasy" type="boolean" line="687">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
            </method>
            <method name="read" type="BufferedImage" line="694">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="param" type="ImageReadParam"/>
                </params>
                <comment line="708">
                    read header                    
                </comment>
                <comment line="722">
                    If the destination band is set used it                    
                </comment>
                <comment line="738">
                    If the destination is provided, then use it.  Otherwise, create new one                    
                </comment>
                <comment line="741">
                    Get the image data.                    
                </comment>
                <comment line="764">
                    buffer for byte data                    
                </comment>
                <comment line="765">
                    buffer for short data                    
                </comment>
                <comment line="766">
                    buffer for int data                    
                </comment>
                <comment line="768">
                    the sampleModel can be null in case of embedded image                    
                </comment>
                <comment line="781">
                    There should only be one tile.                    
                </comment>
                <comment line="785">
                    no compression                    
                </comment>
                <comment line="790">
                    no compression                    
                </comment>
                <comment line="795">
                    no compression                    
                </comment>
                <comment line="800">
                    no compression                    
                </comment>
                <comment line="805">
                    1-bit images cannot be compressed.                    
                </comment>
                <comment line="843">
                    24-bit images are not compressed                    
                </comment>
                <scope line="696"/>
                <scope line="730"/>
                <declaration name="raster" type="WritableRaster" line="741"/>
                <scope line="743">
                    <scope line="744"/>
                </scope>
                <scope line="755"/>
                <declaration name="bdata" type="byte" line="763"/>
                <declaration name="sdata" type="short" line="764"/>
                <declaration name="idata" type="int" line="765"/>
                <scope line="768"/>
            </method>
            <method name="canReadRaster" type="boolean" line="918"/>
            <method name="readRaster" type="Raster" line="923">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="param" type="ImageReadParam"/>
                </params>
                <declaration name="bi" type="BufferedImage" line="924"/>
            </method>
            <method name="resetHeaderInfo" type="void" line="928"/>
            <method name="reset" type="void" line="935"/>
            <method name="read1Bit" type="void" line="942">
                <params>
                    <param name="bdata" type="byte[]"/>
                </params>
                <comment line="981">
                    cache the values to avoid duplicated computation                    
                </comment>
                <comment line="1007">
                    get the bit and assign to the data buffer of the raster                    
                </comment>
                <declaration name="bytesPerScanline" type="int" line="943"/>
                <declaration name="padding" type="int" line="944"/>
                <scope line="945"/>
                <declaration name="lineLength" type="int" line="949"/>
                <scope line="951">
                    <declaration name="j" type="int" line="952"/>
                    <scope line="954">
                        <scope line="955"/>
                    </scope>
                </scope>
                <scope line="966">
                    <declaration name="buf" type="byte[]" line="967"/>
                    <declaration name="lineStride" type="int" line="968"/>
                    <scope line="971">
                        <declaration name="lastLine" type="int" line="972"/>
                    </scope>
                    <declaration name="skipLength" type="int" line="978"/>
                    <declaration name="srcOff" type="int[]" line="981"/>
                    <declaration name="destOff" type="int[]" line="982"/>
                    <declaration name="srcPos" type="int[]" line="983"/>
                    <declaration name="destPos" type="int[]" line="984"/>
                    <scope line="988"/>
                    <declaration name="k" type="int" line="995"/>
                    <scope line="1000">
                        <scope line="1005">
                            <declaration name="v" type="int" line="1007"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="read4Bit" type="void" line="1022">
                <params>
                    <param name="bdata" type="byte[]"/>
                </params>
                <comment line="1027">
                    Padding bytes at the end of each scanline                    
                </comment>
                <comment line="1063">
                    cache the values to avoid duplicated computation                    
                </comment>
                <comment line="1089">
                    get the bit and assign to the data buffer of the raster                    
                </comment>
                <declaration name="bytesPerScanline" type="int" line="1024"/>
                <declaration name="padding" type="int" line="1027"/>
                <declaration name="lineLength" type="int" line="1031"/>
                <scope line="1033">
                    <declaration name="j" type="int" line="1034"/>
                    <scope line="1036">
                        <scope line="1037"/>
                    </scope>
                </scope>
                <scope line="1048">
                    <declaration name="buf" type="byte[]" line="1049"/>
                    <declaration name="lineStride" type="int" line="1050"/>
                    <scope line="1053">
                        <declaration name="lastLine" type="int" line="1054"/>
                    </scope>
                    <declaration name="skipLength" type="int" line="1060"/>
                    <declaration name="srcOff" type="int[]" line="1063"/>
                    <declaration name="destOff" type="int[]" line="1064"/>
                    <declaration name="srcPos" type="int[]" line="1065"/>
                    <declaration name="destPos" type="int[]" line="1066"/>
                    <scope line="1070"/>
                    <declaration name="k" type="int" line="1077"/>
                    <scope line="1082">
                        <scope line="1087">
                            <declaration name="v" type="int" line="1089"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="read8Bit" type="void" line="1104">
                <params>
                    <param name="bdata" type="byte[]"/>
                </params>
                <comment line="1107">
                    Padding bytes at the end of each scanline                    
                </comment>
                <comment line="1157">
                    get the bit and assign to the data buffer of the raster                    
                </comment>
                <declaration name="padding" type="int" line="1107"/>
                <scope line="1108"/>
                <declaration name="lineLength" type="int" line="1112"/>
                <scope line="1114">
                    <declaration name="j" type="int" line="1115"/>
                    <scope line="1117">
                        <scope line="1118"/>
                    </scope>
                </scope>
                <scope line="1129">
                    <declaration name="buf" type="byte[]" line="1130"/>
                    <declaration name="lineStride" type="int" line="1131"/>
                    <scope line="1134">
                        <declaration name="lastLine" type="int" line="1135"/>
                    </scope>
                    <declaration name="skipLength" type="int" line="1141"/>
                    <declaration name="k" type="int" line="1143"/>
                    <scope line="1149">
                        <scope line="1155"/>
                    </scope>
                </scope>
            </method>
            <method name="read24Bit" type="void" line="1171">
                <params>
                    <param name="bdata" type="byte[]"/>
                </params>
                <comment line="1173">
                    Padding bytes at the end of each scanline
                     width * bitsPerPixel should be divisible by 32                    
                </comment>
                <comment line="1224">
                    get the bit and assign to the data buffer of the raster                    
                </comment>
                <declaration name="padding" type="int" line="1174"/>
                <declaration name="lineStride" type="int" line="1178"/>
                <declaration name="lineLength" type="int" line="1179"/>
                <scope line="1181">
                    <declaration name="j" type="int" line="1182"/>
                    <scope line="1184">
                        <scope line="1185"/>
                    </scope>
                </scope>
                <scope line="1196">
                    <declaration name="buf" type="byte[]" line="1197"/>
                    <scope line="1201">
                        <declaration name="lastLine" type="int" line="1202"/>
                    </scope>
                    <declaration name="skipLength" type="int" line="1208"/>
                    <declaration name="k" type="int" line="1210"/>
                    <scope line="1216">
                        <scope line="1222">
                            <declaration name="n" type="int" line="1224"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="read16Bit" type="void" line="1239">
                <params>
                    <param name="sdata" type="short"/>
                </params>
                <comment line="1241">
                    Padding bytes at the end of each scanline
                     width * bitsPerPixel should be divisible by 32                    
                </comment>
                <comment line="1293">
                    get the bit and assign to the data buffer of the raster                    
                </comment>
                <declaration name="padding" type="int" line="1242"/>
                <declaration name="lineLength" type="int" line="1247"/>
                <scope line="1249">
                    <declaration name="j" type="int" line="1250"/>
                    <scope line="1251">
                        <scope line="1252"/>
                    </scope>
                </scope>
                <scope line="1265">
                    <declaration name="buf" type="short[]" line="1266"/>
                    <declaration name="lineStride" type="int" line="1267"/>
                    <scope line="1270">
                        <declaration name="lastLine" type="int" line="1271"/>
                    </scope>
                    <declaration name="skipLength" type="int" line="1277"/>
                    <declaration name="k" type="int" line="1279"/>
                    <scope line="1285">
                        <scope line="1291"/>
                    </scope>
                </scope>
            </method>
            <method name="read32Bit" type="void" line="1306">
                <params>
                    <param name="idata" type="int"/>
                </params>
                <comment line="1349">
                    get the bit and assign to the data buffer of the raster                    
                </comment>
                <scope line="1307">
                    <declaration name="j" type="int" line="1308"/>
                    <scope line="1310">
                        <scope line="1311"/>
                    </scope>
                </scope>
                <scope line="1321">
                    <declaration name="buf" type="int[]" line="1322"/>
                    <declaration name="lineStride" type="int" line="1323"/>
                    <scope line="1326">
                        <declaration name="lastLine" type="int" line="1327"/>
                    </scope>
                    <declaration name="skipLength" type="int" line="1333"/>
                    <declaration name="k" type="int" line="1335"/>
                    <scope line="1341">
                        <scope line="1347"/>
                    </scope>
                </scope>
            </method>
            <method name="readRLE8" type="void" line="1362">
                <params>
                    <param name="bdata" type="byte"/>
                </params>
                <comment line="1364">
                    If imageSize field is not provided, calculate it.                    
                </comment>
                <comment line="1371">
                    If width is not 32 bit aligned, then while uncompressing each
                     scanline will have padding bytes, calculate the amount of padding                    
                </comment>
                <comment line="1378">
                    Read till we have the whole image                    
                </comment>
                <comment line="1383">
                    Since data is compressed, decompress it                    
                </comment>
                <declaration name="imSize" type="int" line="1364"/>
                <scope line="1365"/>
                <declaration name="padding" type="int" line="1369"/>
                <declaration name="remainder" type="int" line="1372"/>
                <scope line="1373"/>
                <declaration name="values" type="byte" line="1378"/>
                <declaration name="bytesRead" type="int" line="1379"/>
            </method>
            <method name="decodeRLE8" type="void" line="1389">
                <params>
                    <param name="imSize" type="int"/>
                    <param name="padding" type="int"/>
                    <param name="values" type="byte[]"/>
                    <param name="bdata" type="byte[]"/>
                </params>
                <comment line="1407">
                    End-of-scanline marker                    
                </comment>
                <comment line="1444">
                    End-of-RLE marker                    
                </comment>
                <comment line="1449">
                    delta or vector marker                    
                </comment>
                <comment line="1452">
                    Move to the position xoff, yoff down                    
                </comment>
                <comment line="1462">
                    Whenever end pixels can fit into odd number of bytes,
                     an extra padding byte will be present, so skip that.                    
                </comment>
                <comment line="1476">
                    If End-of-RLE data, then exit the while loop                    
                </comment>
                <declaration name="val" type="byte" line="1391"/>
                <declaration name="count" type="int" line="1392"/>
                <declaration name="value" type="int" line="1393"/>
                <declaration name="flag" type="boolean" line="1394"/>
                <declaration name="lineNo" type="int" line="1395"/>
                <declaration name="lineStride" type="int" line="1396"/>
                <declaration name="finished" type="int" line="1398"/>
                <scope line="1400">
                    <scope line="1402">
                        <scope line="1408">
                            <scope line="1409">
                                <declaration name="pos" type="int" line="1410"/>
                            </scope>
                            <scope line="1417">
                                <declaration name="currentLine" type="int" line="1418"/>
                                <declaration name="pos" type="int" line="1420"/>
                            </scope>
                        </scope>
                        <scope line="1436"/>
                        <declaration name="xoff" type="int" line="1449"/>
                        <declaration name="yoff" type="int" line="1450"/>
                        <declaration name="end" type="int" line="1456"/>
                        <scope line="1457"/>
                        <scope line="1463"/>
                    </scope>
                    <scope line="1467">
                        <scope line="1468"/>
                    </scope>
                    <scope line="1476"/>
                </scope>
            </method>
            <method name="readRLE4" type="void" line="1482">
                <params>
                    <param name="bdata" type="byte[]"/>
                </params>
                <comment line="1485">
                    If imageSize field is not specified, calculate it.                    
                </comment>
                <comment line="1492">
                    If width is not 32 byte aligned, then while uncompressing each
                     scanline will have padding bytes, calculate the amount of padding                    
                </comment>
                <comment line="1499">
                    Read till we have the whole image                    
                </comment>
                <comment line="1503">
                    Decompress the RLE4 compressed data.                    
                </comment>
                <declaration name="imSize" type="int" line="1485"/>
                <scope line="1486"/>
                <declaration name="padding" type="int" line="1490"/>
                <declaration name="remainder" type="int" line="1493"/>
                <scope line="1494"/>
                <declaration name="values" type="byte[]" line="1499"/>
            </method>
            <method name="decodeRLE4" type="void" line="1509">
                <params>
                    <param name="imSize" type="int"/>
                    <param name="padding" type="int"/>
                    <param name="values" type="byte[]"/>
                    <param name="bdata" type="byte[]"/>
                </params>
                <comment line="1526">
                    Absolute mode                    
                </comment>
                <comment line="1530">
                    End-of-scanline marker
                     End-of-scanline marker                    
                </comment>
                <comment line="1579">
                    End-of-RLE marker                    
                </comment>
                <comment line="1584">
                    delta or vector marker                    
                </comment>
                <comment line="1587">
                    Move to the position xoff, yoff down                    
                </comment>
                <comment line="1598">
                    When end is odd, the above for loop does not
                     increment count, so do it now.                    
                </comment>
                <comment line="1604">
                    Whenever end pixels can fit into odd number of bytes,
                     an extra padding byte will be present, so skip that.                    
                </comment>
                <comment line="1612">
                    Encoded mode                    
                </comment>
                <comment line="1622">
                    If End-of-RLE data, then exit the while loop                    
                </comment>
                <declaration name="val" type="byte[]" line="1510"/>
                <declaration name="count" type="int" line="1511"/>
                <declaration name="value" type="int" line="1512"/>
                <declaration name="flag" type="boolean" line="1513"/>
                <declaration name="lineNo" type="int" line="1514"/>
                <declaration name="lineStride" type="int" line="1515"/>
                <declaration name="finished" type="int" line="1517"/>
                <scope line="1519">
                    <scope line="1522">
                        <scope line="1532">
                            <scope line="1533">
                                <declaration name="pos" type="int" line="1534"/>
                            </scope>
                            <scope line="1545">
                                <declaration name="currentLine" type="int" line="1546"/>
                                <declaration name="pos" type="int" line="1548"/>
                                <declaration name="shift" type="int" line="1550"/>
                                <scope line="1553">
                                    <scope line="1556"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1571"/>
                        <declaration name="xoff" type="int" line="1584"/>
                        <declaration name="yoff" type="int" line="1585"/>
                        <declaration name="end" type="int" line="1591"/>
                        <scope line="1592"/>
                        <scope line="1599"/>
                        <scope line="1605"/>
                    </scope>
                    <scope line="1610">
                        <declaration name="alternate" type="int" line="1612"/>
                        <scope line="1614"/>
                    </scope>
                    <scope line="1622"/>
                </scope>
            </method>
            <javadoc line="1628">
                Decodes the jpeg/png image embedded in the bitmap using any jpeg
                  ImageIO-style plugin.                
                <param>
                    bi The destination &lt;code&gt;BufferedImage&lt;/code&gt;.                    
                </param>
                <param>
                    bmpParam The &lt;code&gt;ImageReadParam&lt;/code&gt; for decoding this
                      BMP image.  The parameters for subregion, band selection and
                      subsampling are used in decoding the jpeg image.                    
                </param>
            </javadoc>
            <method name="readEmbedded" type="BufferedImage" line="1639">
                <params>
                    <param name="type" type="int"/>
                    <param name="bi" type="BufferedImage"/>
                    <param name="bmpParam" type="ImageReadParam"/>
                </params>
                <comment line="1659">
                    prepare input                    
                </comment>
                <declaration name="format" type="String" line="1640"/>
                <declaration name="reader" type="ImageReader" line="1652"/>
                <scope line="1654"/>
                <declaration name="buff" type="byte[]" line="1659"/>
                <scope line="1662">
                    <declaration name="embType" type="ImageTypeSpecifier" line="1663"/>
                </scope>
                <anonymous_class line="1670">
                    <method name="imageProgress" type="void" line="1673">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="percentageDone" type="float"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="1678">
                    <method name="imageUpdate" type="void" line="1685">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="theImage" type="BufferedImage"/>
                            <param name="minX" type="int"/>
                            <param name="minY" type="int"/>
                            <param name="width" type="int"/>
                            <param name="height" type="int"/>
                            <param name="periodX" type="int"/>
                            <param name="periodY" type="int"/>
                            <param name="bands" type="int[]"/>
                        </params>
                    </method>
                    <method name="passComplete" type="void" line="1692">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="theImage" type="BufferedImage"/>
                        </params>
                    </method>
                    <method name="passStarted" type="void" line="1702">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="theImage" type="BufferedImage"/>
                            <param name="pass" type="int"/>
                            <param name="minPass" type="int"/>
                            <param name="maxPass" type="int"/>
                            <param name="minX" type="int"/>
                            <param name="minY" type="int"/>
                            <param name="periodX" type="int"/>
                            <param name="periodY" type="int"/>
                            <param name="bands" type="int[]"/>
                        </params>
                    </method>
                    <method name="thumbnailPassComplete" type="void" line="1708">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="thumb" type="BufferedImage"/>
                        </params>
                    </method>
                    <method name="thumbnailPassStarted" type="void" line="1715">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="thumb" type="BufferedImage"/>
                            <param name="pass" type="int"/>
                            <param name="minPass" type="int"/>
                            <param name="maxPass" type="int"/>
                            <param name="minX" type="int"/>
                            <param name="minY" type="int"/>
                            <param name="periodX" type="int"/>
                            <param name="periodY" type="int"/>
                            <param name="bands" type="int[]"/>
                        </params>
                    </method>
                    <method name="thumbnailUpdate" type="void" line="1721">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="theThumbnail" type="BufferedImage"/>
                            <param name="minX" type="int"/>
                            <param name="minY" type="int"/>
                            <param name="width" type="int"/>
                            <param name="height" type="int"/>
                            <param name="periodX" type="int"/>
                            <param name="periodY" type="int"/>
                            <param name="bands" type="int[]"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="1724">
                    <method name="warningOccurred" type="void" line="1726">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="warning" type="String"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="param" type="ImageReadParam" line="1731"/>
            </method>
            <class name="EmbeddedProgressAdapter" line="1745">
                <implements interface="IIOReadProgressListener"/>
                <method name="imageComplete" type="void" line="1746">
                    <params>
                        <param name="src" type="ImageReader"/>
                    </params>
                </method>
                <method name="imageProgress" type="void" line="1747">
                    <params>
                        <param name="src" type="ImageReader"/>
                        <param name="percentageDone" type="float"/>
                    </params>
                </method>
                <method name="imageStarted" type="void" line="1748">
                    <params>
                        <param name="src" type="ImageReader"/>
                        <param name="imageIndex" type="int"/>
                    </params>
                </method>
                <method name="thumbnailComplete" type="void" line="1749">
                    <params>
                        <param name="src" type="ImageReader"/>
                    </params>
                </method>
                <method name="thumbnailProgress" type="void" line="1750">
                    <params>
                        <param name="src" type="ImageReader"/>
                        <param name="percentageDone" type="float"/>
                    </params>
                </method>
                <method name="thumbnailStarted" type="void" line="1751">
                    <params>
                        <param name="src" type="ImageReader"/>
                        <param name="iIdx" type="int"/>
                        <param name="tIdx" type="int"/>
                    </params>
                </method>
                <method name="sequenceComplete" type="void" line="1752">
                    <params>
                        <param name="src" type="ImageReader"/>
                    </params>
                </method>
                <method name="sequenceStarted" type="void" line="1753">
                    <params>
                        <param name="src" type="ImageReader"/>
                        <param name="minIndex" type="int"/>
                    </params>
                </method>
                <method name="readAborted" type="void" line="1754">
                    <params>
                        <param name="src" type="ImageReader"/>
                    </params>
                </method>
            </class>
            <declaration name="isLinkedProfileDisabled" type="Boolean" line="1757"/>
            <method name="isLinkedProfileAllowed" type="boolean" line="1759">
                <scope line="1760">
                    <anonymous_class line="1761">
                        <method name="run" type="Boolean" line="1762"/>
                    </anonymous_class>
                    <declaration name="a" type="PrivilegedAction&lt;Boolean&gt;" line="1761"/>
                </scope>
            </method>
            <declaration name="isWindowsPlatform" type="Boolean" line="1771"/>
            <javadoc line="1773">
                Verifies whether the byte array contans a unc path.
                  Non-UNC path examples:
                  c:\path\to\file  - simple notation
                  \\?\c:\path\to\file - long notation
                  UNC path examples:
                  \\server\share - a UNC path in simple notation
                  \\?\UNC\server\share - a UNC path in long notation
                  \\.\some\device - a path to device.                
            </javadoc>
            <method name="isUncOrDevicePath" type="boolean" line="1784">
                <params>
                    <param name="p" type="byte[]"/>
                </params>
                <comment line="1798">
                                        
                </comment>
                <comment line="1802">
                                        
                </comment>
                <comment line="1810">
                    long path: whether unc or local                    
                </comment>
                <comment line="1815">
                    device path or short unc notation                    
                </comment>
                <scope line="1785">
                    <anonymous_class line="1786">
                        <method name="run" type="Boolean" line="1787">
                            <declaration name="osname" type="String" line="1788"/>
                        </method>
                    </anonymous_class>
                    <declaration name="a" type="PrivilegedAction&lt;Boolean&gt;" line="1786"/>
                </scope>
                <scope line="1796"/>
                <scope line="1807">
                    <scope line="1808"/>
                    <scope line="1813"/>
                </scope>
                <scope line="1817"/>
            </method>
        </class>
    </source>