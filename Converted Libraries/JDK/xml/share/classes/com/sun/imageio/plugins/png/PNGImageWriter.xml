<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.png">
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.DataOutput"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Locale"/>
        <import package="java.util.zip.Deflater"/>
        <import package="java.util.zip.DeflaterOutputStream"/>
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.IIOImage"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.ImageWriteParam"/>
        <import package="javax.imageio.ImageWriter"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.spi.ImageWriterSpi"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="javax.imageio.stream.ImageOutputStreamImpl"/>
        <class name="CRC" line="54">
            <comment line="285">
                Factors from the ImageWriteParam                
            </comment>
            <comment line="302">
                Per-band scaling tables
                
                 After the first call to initializeScaleTables, either scale and scale0
                 will be valid, or scaleh and scalel will be valid, but not both.
                
                 The tables will be designed for use with a set of input but depths
                 given by sampleSize, and an output bit depth given by scalingBitDepth.                
            </comment>
            <comment line="310">
                Sample size per band, in bits                
            </comment>
            <comment line="311">
                Output bit depth of the scaling tables                
            </comment>
            <comment line="313">
                Tables for 1, 2, 4, or 8 bit output                
            </comment>
            <comment line="314">
                8 bit table                
            </comment>
            <comment line="315">
                equivalent to scale[0]                
            </comment>
            <comment line="317">
                Tables for 16 bit output                
            </comment>
            <comment line="318">
                High bytes of output                
            </comment>
            <comment line="319">
                Low bytes of output                
            </comment>
            <comment line="321">
                Total number of pixels to be written by write_IDAT                
            </comment>
            <comment line="322">
                Running count of pixels written by write_IDAT                
            </comment>
            <comment line="927">
                Use sourceXOffset, etc.                
            </comment>
            <comment line="955">
                Check two int arrays for value equality, always returns false
                 if either array is null                
            </comment>
            <comment line="972">
                Initialize the scale/scale0 or scaleh/scalel arrays to
                 hold the results of scaling an input value to the desired
                 output bit depth                
            </comment>
            <declaration name="crcTable" type="int[]" line="56"/>
            <declaration name="crc" type="int" line="57"/>
            <scope line="59">
                <scope line="61">
                    <declaration name="c" type="int" line="62"/>
                    <scope line="63">
                        <scope line="64"/>
                        <scope line="66"/>
                    </scope>
                </scope>
            </scope>
            <method name="CRC" type="constructor" line="75"/>
            <method name="reset" type="void" line="77"/>
            <method name="update" type="void" line="81">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="82"/>
            </method>
            <method name="update" type="void" line="87">
                <params>
                    <param name="data" type="int"/>
                </params>
            </method>
            <method name="getValue" type="int" line="91"/>
        </class>
        <class name="ChunkStream" line="97">
            <extends class="ImageOutputStreamImpl"/>
            <comment line="285">
                Factors from the ImageWriteParam                
            </comment>
            <comment line="302">
                Per-band scaling tables
                
                 After the first call to initializeScaleTables, either scale and scale0
                 will be valid, or scaleh and scalel will be valid, but not both.
                
                 The tables will be designed for use with a set of input but depths
                 given by sampleSize, and an output bit depth given by scalingBitDepth.                
            </comment>
            <comment line="310">
                Sample size per band, in bits                
            </comment>
            <comment line="311">
                Output bit depth of the scaling tables                
            </comment>
            <comment line="313">
                Tables for 1, 2, 4, or 8 bit output                
            </comment>
            <comment line="314">
                8 bit table                
            </comment>
            <comment line="315">
                equivalent to scale[0]                
            </comment>
            <comment line="317">
                Tables for 16 bit output                
            </comment>
            <comment line="318">
                High bytes of output                
            </comment>
            <comment line="319">
                Low bytes of output                
            </comment>
            <comment line="321">
                Total number of pixels to be written by write_IDAT                
            </comment>
            <comment line="322">
                Running count of pixels written by write_IDAT                
            </comment>
            <comment line="927">
                Use sourceXOffset, etc.                
            </comment>
            <comment line="955">
                Check two int arrays for value equality, always returns false
                 if either array is null                
            </comment>
            <comment line="972">
                Initialize the scale/scale0 or scaleh/scalel arrays to
                 hold the results of scaling an input value to the desired
                 output bit depth                
            </comment>
            <declaration name="stream" type="ImageOutputStream" line="99"/>
            <declaration name="startPos" type="long" line="100"/>
            <declaration name="crc" type="CRC" line="101"/>
            <method name="ChunkStream" type="constructor" line="103">
                <params>
                    <param name="type" type="int"/>
                    <param name="stream" type="ImageOutputStream"/>
                </params>
                <comment line="108">
                    length, will backpatch                    
                </comment>
            </method>
            <method name="read" type="int" line="111"/>
            <method name="read" type="int" line="115">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="write" type="void" line="119">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="write" type="void" line="124">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="finish" type="void" line="129">
                <comment line="131">
                    Write CRC                    
                </comment>
                <comment line="134">
                    Write length                    
                </comment>
                <comment line="139">
                    Return to end of chunk and flush to minimize buffering                    
                </comment>
                <declaration name="pos" type="long" line="134"/>
            </method>
            <method name="finalize" type="void" line="143">
                <comment line="145">
                    Empty finalizer (for improved performance; no need to call
                     super.finalize() in this case)                    
                </comment>
            </method>
        </class>
        <class name="IDATOutputStream" line="151">
            <extends class="ImageOutputStreamImpl"/>
            <comment line="285">
                Factors from the ImageWriteParam                
            </comment>
            <comment line="302">
                Per-band scaling tables
                
                 After the first call to initializeScaleTables, either scale and scale0
                 will be valid, or scaleh and scalel will be valid, but not both.
                
                 The tables will be designed for use with a set of input but depths
                 given by sampleSize, and an output bit depth given by scalingBitDepth.                
            </comment>
            <comment line="310">
                Sample size per band, in bits                
            </comment>
            <comment line="311">
                Output bit depth of the scaling tables                
            </comment>
            <comment line="313">
                Tables for 1, 2, 4, or 8 bit output                
            </comment>
            <comment line="314">
                8 bit table                
            </comment>
            <comment line="315">
                equivalent to scale[0]                
            </comment>
            <comment line="317">
                Tables for 16 bit output                
            </comment>
            <comment line="318">
                High bytes of output                
            </comment>
            <comment line="319">
                Low bytes of output                
            </comment>
            <comment line="321">
                Total number of pixels to be written by write_IDAT                
            </comment>
            <comment line="322">
                Running count of pixels written by write_IDAT                
            </comment>
            <comment line="927">
                Use sourceXOffset, etc.                
            </comment>
            <comment line="955">
                Check two int arrays for value equality, always returns false
                 if either array is null                
            </comment>
            <comment line="972">
                Initialize the scale/scale0 or scaleh/scalel arrays to
                 hold the results of scaling an input value to the desired
                 output bit depth                
            </comment>
            <declaration name="chunkType" type="byte[]" line="153"/>
            <declaration name="stream" type="ImageOutputStream" line="157"/>
            <declaration name="chunkLength" type="int" line="158"/>
            <declaration name="startPos" type="long" line="159"/>
            <declaration name="crc" type="CRC" line="160"/>
            <declaration name="def" type="Deflater" line="162"/>
            <declaration name="buf" type="byte[]" line="163"/>
            <declaration name="bytesRemaining" type="int" line="165"/>
            <method name="IDATOutputStream" type="constructor" line="168">
                <params>
                    <param name="stream" type="ImageOutputStream"/>
                    <param name="chunkLength" type="int"/>
                </params>
            </method>
            <method name="startChunk" type="void" line="174">
                <comment line="178">
                    length, will backpatch                    
                </comment>
            </method>
            <method name="finishChunk" type="void" line="185">
                <comment line="187">
                    Write CRC                    
                </comment>
                <comment line="190">
                    Write length                    
                </comment>
                <comment line="195">
                    Return to end of chunk and flush to minimize buffering                    
                </comment>
                <declaration name="pos" type="long" line="190"/>
            </method>
            <method name="read" type="int" line="199"/>
            <method name="read" type="int" line="203">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="write" type="void" line="207">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="208"/>
                <scope line="212">
                    <scope line="214"/>
                </scope>
            </method>
            <method name="deflate" type="void" line="220">
                <declaration name="len" type="int" line="221"/>
                <declaration name="off" type="int" line="222"/>
                <scope line="224">
                    <scope line="225"/>
                    <declaration name="nbytes" type="int" line="230"/>
                </scope>
            </method>
            <method name="write" type="void" line="240">
                <params>
                    <param name="b" type="int"/>
                </params>
                <declaration name="wbuf" type="byte[]" line="241"/>
            </method>
            <method name="finish" type="void" line="246">
                <scope line="247">
                    <scope line="248">
                        <scope line="250"/>
                    </scope>
                </scope>
                <scope line="255"/>
            </method>
            <method name="finalize" type="void" line="260">
                <comment line="262">
                    Empty finalizer (for improved performance; no need to call
                     super.finalize() in this case)                    
                </comment>
            </method>
        </class>
        <class name="PNGImageWriteParam" line="267">
            <extends class="ImageWriteParam"/>
            <comment line="285">
                Factors from the ImageWriteParam                
            </comment>
            <comment line="302">
                Per-band scaling tables
                
                 After the first call to initializeScaleTables, either scale and scale0
                 will be valid, or scaleh and scalel will be valid, but not both.
                
                 The tables will be designed for use with a set of input but depths
                 given by sampleSize, and an output bit depth given by scalingBitDepth.                
            </comment>
            <comment line="310">
                Sample size per band, in bits                
            </comment>
            <comment line="311">
                Output bit depth of the scaling tables                
            </comment>
            <comment line="313">
                Tables for 1, 2, 4, or 8 bit output                
            </comment>
            <comment line="314">
                8 bit table                
            </comment>
            <comment line="315">
                equivalent to scale[0]                
            </comment>
            <comment line="317">
                Tables for 16 bit output                
            </comment>
            <comment line="318">
                High bytes of output                
            </comment>
            <comment line="319">
                Low bytes of output                
            </comment>
            <comment line="321">
                Total number of pixels to be written by write_IDAT                
            </comment>
            <comment line="322">
                Running count of pixels written by write_IDAT                
            </comment>
            <comment line="927">
                Use sourceXOffset, etc.                
            </comment>
            <comment line="955">
                Check two int arrays for value equality, always returns false
                 if either array is null                
            </comment>
            <comment line="972">
                Initialize the scale/scale0 or scaleh/scalel arrays to
                 hold the results of scaling an input value to the desired
                 output bit depth                
            </comment>
            <method name="PNGImageWriteParam" type="constructor" line="269">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
        </class>
        <class name="PNGImageWriter" line="276">
            <extends class="ImageWriter"/>
            <comment line="285">
                Factors from the ImageWriteParam                
            </comment>
            <comment line="302">
                Per-band scaling tables
                
                 After the first call to initializeScaleTables, either scale and scale0
                 will be valid, or scaleh and scalel will be valid, but not both.
                
                 The tables will be designed for use with a set of input but depths
                 given by sampleSize, and an output bit depth given by scalingBitDepth.                
            </comment>
            <comment line="310">
                Sample size per band, in bits                
            </comment>
            <comment line="311">
                Output bit depth of the scaling tables                
            </comment>
            <comment line="313">
                Tables for 1, 2, 4, or 8 bit output                
            </comment>
            <comment line="314">
                8 bit table                
            </comment>
            <comment line="315">
                equivalent to scale[0]                
            </comment>
            <comment line="317">
                Tables for 16 bit output                
            </comment>
            <comment line="318">
                High bytes of output                
            </comment>
            <comment line="319">
                Low bytes of output                
            </comment>
            <comment line="321">
                Total number of pixels to be written by write_IDAT                
            </comment>
            <comment line="322">
                Running count of pixels written by write_IDAT                
            </comment>
            <comment line="927">
                Use sourceXOffset, etc.                
            </comment>
            <comment line="955">
                Check two int arrays for value equality, always returns false
                 if either array is null                
            </comment>
            <comment line="972">
                Initialize the scale/scale0 or scaleh/scalel arrays to
                 hold the results of scaling an input value to the desired
                 output bit depth                
            </comment>
            <javadoc line="276">
                                
            </javadoc>
            <declaration name="stream" type="ImageOutputStream" line="280"/>
            <declaration name="metadata" type="PNGMetadata" line="282"/>
            <declaration name="sourceXOffset" type="int" line="285"/>
            <declaration name="sourceYOffset" type="int" line="286"/>
            <declaration name="sourceWidth" type="int" line="287"/>
            <declaration name="sourceHeight" type="int" line="288"/>
            <declaration name="sourceBands" type="int[]" line="289"/>
            <declaration name="periodX" type="int" line="290"/>
            <declaration name="periodY" type="int" line="291"/>
            <declaration name="numBands" type="int" line="293"/>
            <declaration name="bpp" type="int" line="294"/>
            <declaration name="rowFilter" type="RowFilter" line="296"/>
            <declaration name="prevRow" type="byte[]" line="297"/>
            <declaration name="currRow" type="byte[]" line="298"/>
            <declaration name="filteredRows" type="byte[][]" line="299"/>
            <declaration name="sampleSize" type="int[]" line="309"/>
            <declaration name="scalingBitDepth" type="int" line="310"/>
            <declaration name="scale" type="byte[][]" line="313"/>
            <declaration name="scale0" type="byte[]" line="314"/>
            <declaration name="scaleh" type="byte[][]" line="317"/>
            <declaration name="scalel" type="byte[][]" line="318"/>
            <declaration name="totalPixels" type="int" line="320"/>
            <declaration name="pixelsDone" type="int" line="321"/>
            <method name="PNGImageWriter" type="constructor" line="323">
                <params>
                    <param name="originatingProvider" type="ImageWriterSpi"/>
                </params>
            </method>
            <method name="setOutput" type="void" line="327">
                <params>
                    <param name="output" type="Object"/>
                </params>
                <scope line="329">
                    <scope line="330"/>
                </scope>
                <scope line="334"/>
            </method>
            <declaration name="allowedProgressivePasses" type="int[]" line="339"/>
            <method name="getDefaultWriteParam" type="ImageWriteParam" line="341"/>
            <method name="getDefaultStreamMetadata" type="IIOMetadata" line="345">
                <params>
                    <param name="param" type="ImageWriteParam"/>
                </params>
            </method>
            <method name="getDefaultImageMetadata" type="IIOMetadata" line="350">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <declaration name="m" type="PNGMetadata" line="351"/>
            </method>
            <method name="convertStreamMetadata" type="IIOMetadata" line="357">
                <params>
                    <param name="inData" type="IIOMetadata"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
            </method>
            <method name="convertImageMetadata" type="IIOMetadata" line="363">
                <params>
                    <param name="inData" type="IIOMetadata"/>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <comment line="365">
                    TODO - deal with imageType                    
                </comment>
                <scope line="365"/>
                <scope line="367"/>
            </method>
            <method name="write_magic" type="void" line="372">
                <comment line="374">
                    Write signature                    
                </comment>
                <declaration name="magic" type="byte[]" line="374"/>
            </method>
            <method name="write_IHDR" type="void" line="378">
                <comment line="380">
                    Write IHDR chunk                    
                </comment>
                <declaration name="cs" type="ChunkStream" line="380"/>
                <scope line="385"/>
                <scope line="390"/>
                <scope line="396"/>
            </method>
            <method name="write_cHRM" type="void" line="404">
                <scope line="405">
                    <declaration name="cs" type="ChunkStream" line="406"/>
                </scope>
            </method>
            <method name="write_gAMA" type="void" line="419">
                <scope line="420">
                    <declaration name="cs" type="ChunkStream" line="421"/>
                </scope>
            </method>
            <method name="write_iCCP" type="void" line="427">
                <comment line="432">
                    null terminator                    
                </comment>
                <scope line="428">
                    <declaration name="cs" type="ChunkStream" line="429"/>
                </scope>
            </method>
            <method name="write_sBIT" type="void" line="439">
                <scope line="440">
                    <declaration name="cs" type="ChunkStream" line="441"/>
                    <declaration name="colorType" type="int" line="442"/>
                    <scope line="443"/>
                    <scope line="451"/>
                    <scope line="455"/>
                    <scope line="462"/>
                </scope>
            </method>
            <method name="write_sRGB" type="void" line="469">
                <scope line="470">
                    <declaration name="cs" type="ChunkStream" line="471"/>
                </scope>
            </method>
            <method name="write_PLTE" type="void" line="477">
                <comment line="482">
                    PLTE cannot occur in a gray image                    
                </comment>
                <scope line="478">
                    <scope line="480"/>
                    <declaration name="cs" type="ChunkStream" line="489"/>
                    <declaration name="numEntries" type="int" line="491"/>
                    <declaration name="palette" type="byte[]" line="492"/>
                    <declaration name="index" type="int" line="493"/>
                    <scope line="494"/>
                </scope>
            </method>
            <method name="write_hIST" type="void" line="505">
                <scope line="506">
                    <declaration name="cs" type="ChunkStream" line="507"/>
                    <scope line="509"/>
                </scope>
            </method>
            <method name="write_tRNS" type="void" line="519">
                <comment line="526">
                    Special case: image is RGB and chunk is Gray
                     Promote chunk contents to RGB                    
                </comment>
                <scope line="520">
                    <declaration name="cs" type="ChunkStream" line="521"/>
                    <declaration name="colorType" type="int" line="522"/>
                    <declaration name="chunkType" type="int" line="523"/>
                    <declaration name="chunkRed" type="int" line="527"/>
                    <declaration name="chunkGreen" type="int" line="528"/>
                    <declaration name="chunkBlue" type="int" line="529"/>
                    <scope line="531"/>
                    <scope line="537"/>
                    <scope line="544">
                        <scope line="545"/>
                    </scope>
                    <scope line="549"/>
                    <scope line="551"/>
                    <scope line="555"/>
                </scope>
            </method>
            <method name="write_bKGD" type="void" line="562">
                <comment line="569">
                    Special case: image is RGB(A) and chunk is Gray
                     Promote chunk contents to RGB                    
                </comment>
                <comment line="576">
                    Make a gray bKGD chunk look like RGB                    
                </comment>
                <comment line="582">
                    Ignore status of alpha in colorType                    
                </comment>
                <comment line="595">
                    colorType == PNGImageReader.PNG_COLOR_RGB ||
                     colorType == PNGImageReader.PNG_COLOR_RGB_ALPHA                    
                </comment>
                <scope line="563">
                    <declaration name="cs" type="ChunkStream" line="564"/>
                    <declaration name="colorType" type="int" line="565"/>
                    <declaration name="chunkType" type="int" line="566"/>
                    <declaration name="chunkRed" type="int" line="570"/>
                    <declaration name="chunkGreen" type="int" line="571"/>
                    <declaration name="chunkBlue" type="int" line="572"/>
                    <scope line="574"/>
                    <scope line="582"/>
                    <scope line="589"/>
                    <scope line="592"/>
                    <scope line="594"/>
                </scope>
            </method>
            <method name="write_pHYs" type="void" line="604">
                <scope line="605">
                    <declaration name="cs" type="ChunkStream" line="606"/>
                </scope>
            </method>
            <method name="write_sPLT" type="void" line="614">
                <comment line="620">
                    null terminator                    
                </comment>
                <comment line="633">
                    sampleDepth == 16                    
                </comment>
                <scope line="615">
                    <declaration name="cs" type="ChunkStream" line="616"/>
                    <declaration name="numEntries" type="int" line="622"/>
                    <scope line="624">
                        <scope line="625"/>
                    </scope>
                    <scope line="632">
                        <scope line="633"/>
                    </scope>
                </scope>
            </method>
            <method name="write_tIME" type="void" line="645">
                <scope line="646">
                    <declaration name="cs" type="ChunkStream" line="647"/>
                </scope>
            </method>
            <method name="write_tEXt" type="void" line="658">
                <declaration name="keywordIter" type="Iterator" line="659"/>
                <declaration name="textIter" type="Iterator" line="660"/>
                <scope line="662">
                    <declaration name="cs" type="ChunkStream" line="663"/>
                    <declaration name="keyword" type="String" line="664"/>
                    <declaration name="text" type="String" line="668"/>
                </scope>
            </method>
            <method name="deflate" type="byte[]" line="674">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
                <declaration name="baos" type="ByteArrayOutputStream" line="675"/>
                <declaration name="dos" type="DeflaterOutputStream" line="676"/>
            </method>
            <method name="write_iTXt" type="void" line="682">
                <declaration name="keywordIter" type="Iterator&lt;String&gt;" line="683"/>
                <declaration name="flagIter" type="Iterator&lt;Boolean&gt;" line="684"/>
                <declaration name="methodIter" type="Iterator&lt;Integer&gt;" line="685"/>
                <declaration name="languageIter" type="Iterator&lt;String&gt;" line="686"/>
                <declaration name="translatedKeywordIter" type="Iterator&lt;String&gt;" line="687"/>
                <declaration name="textIter" type="Iterator&lt;String&gt;" line="689"/>
                <scope line="691">
                    <declaration name="cs" type="ChunkStream" line="692"/>
                    <declaration name="compressed" type="Boolean" line="697"/>
                    <declaration name="text" type="String" line="709"/>
                    <scope line="710"/>
                    <scope line="712"/>
                </scope>
            </method>
            <method name="write_zTXt" type="void" line="719">
                <declaration name="keywordIter" type="Iterator" line="720"/>
                <declaration name="methodIter" type="Iterator" line="721"/>
                <declaration name="textIter" type="Iterator" line="722"/>
                <scope line="724">
                    <declaration name="cs" type="ChunkStream" line="725"/>
                    <declaration name="keyword" type="String" line="726"/>
                    <declaration name="compressionMethod" type="int" line="730"/>
                    <declaration name="text" type="String" line="733"/>
                </scope>
            </method>
            <method name="writeUnknownChunks" type="void" line="739">
                <declaration name="typeIter" type="Iterator" line="740"/>
                <declaration name="dataIter" type="Iterator" line="741"/>
                <scope line="743">
                    <declaration name="type" type="String" line="744"/>
                    <declaration name="cs" type="ChunkStream" line="745"/>
                    <declaration name="data" type="byte[]" line="746"/>
                </scope>
            </method>
            <method name="chunkType" type="int" line="752">
                <params>
                    <param name="typeString" type="String"/>
                </params>
                <declaration name="c0" type="char" line="753"/>
                <declaration name="c1" type="char" line="754"/>
                <declaration name="c2" type="char" line="755"/>
                <declaration name="c3" type="char" line="756"/>
                <declaration name="type" type="int" line="758"/>
            </method>
            <method name="encodePass" type="void" line="765">
                <params>
                    <param name="os" type="ImageOutputStream"/>
                    <param name="image" type="RenderedImage"/>
                    <param name="xOffset" type="int"/>
                    <param name="yOffset" type="int"/>
                    <param name="xSkip" type="int"/>
                    <param name="ySkip" type="int"/>
                </params>
                <comment line="772">
                    Adjust offsets and skips based on source subsampling factors                    
                </comment>
                <comment line="778">
                    Early exit if no data for this pass                    
                </comment>
                <comment line="785">
                    Convert X offset and skip from pixels to samples                    
                </comment>
                <comment line="789">
                    Create row buffers                    
                </comment>
                <comment line="805">
                    reserve space for alpha samples                    
                </comment>
                <comment line="808">
                    will be used to calculate alpha value for the pixel                    
                </comment>
                <comment line="839">
                    Reorder palette data if necessary                    
                </comment>
                <comment line="847">
                    leave first &apos;bpp&apos; bytes zero                    
                </comment>
                <comment line="853">
                    Image can only have a single band                    
                </comment>
                <comment line="867">
                    Left shift the last byte                    
                </comment>
                <comment line="902">
                    Perform filtering                    
                </comment>
                <comment line="911">
                    Swap current and previous rows                    
                </comment>
                <comment line="919">
                    If write has been aborted, just return;
                     processWriteAborted will be called later                    
                </comment>
                <declaration name="minX" type="int" line="766"/>
                <declaration name="minY" type="int" line="767"/>
                <declaration name="width" type="int" line="768"/>
                <declaration name="height" type="int" line="769"/>
                <declaration name="hpixels" type="int" line="778"/>
                <declaration name="vpixels" type="int" line="779"/>
                <scope line="780"/>
                <declaration name="samplesPerByte" type="int" line="789"/>
                <declaration name="numSamples" type="int" line="790"/>
                <declaration name="samples" type="int[]" line="791"/>
                <declaration name="bytesPerRow" type="int" line="793"/>
                <scope line="794"/>
                <scope line="796"/>
                <declaration name="icm_gray_alpha" type="IndexColorModel" line="800"/>
                <scope line="803"/>
                <declaration name="bitDepth" type="int" line="815"/>
                <scope line="816">
                    <declaration name="rect" type="Rectangle" line="817"/>
                    <declaration name="ras" type="Raster" line="818"/>
                    <scope line="819"/>
                    <scope line="826">
                        <declaration name="wr" type="WritableRaster" line="827"/>
                    </scope>
                    <declaration name="paletteOrder" type="int[]" line="839"/>
                    <scope line="840">
                        <scope line="841"/>
                    </scope>
                    <declaration name="count" type="int" line="846"/>
                    <declaration name="pos" type="int" line="847"/>
                    <declaration name="tmp" type="int" line="848"/>
                    <declaration name="mask" type="int" line="854"/>
                    <scope line="855">
                        <declaration name="val" type="byte" line="856"/>
                        <scope line="859"/>
                    </scope>
                    <scope line="867"/>
                    <scope line="874">
                        <scope line="875">
                            <scope line="877"/>
                        </scope>
                    </scope>
                    <scope line="882">
                        <scope line="883">
                            <scope line="884"/>
                        </scope>
                    </scope>
                    <scope line="892">
                        <scope line="893"/>
                    </scope>
                    <declaration name="filterType" type="int" line="902"/>
                    <declaration name="swap" type="byte[]" line="911"/>
                    <scope line="920"/>
                </scope>
            </method>
            <method name="write_IDAT" type="void" line="927">
                <params>
                    <param name="image" type="RenderedImage"/>
                </params>
                <declaration name="ios" type="IDATOutputStream" line="928"/>
                <scope line="929">
                    <scope line="930">
                        <scope line="931">
                            <scope line="937"/>
                        </scope>
                    </scope>
                    <scope line="941"/>
                </scope>
                <scope line="944"/>
            </method>
            <method name="writeIEND" type="void" line="949">
                <declaration name="cs" type="ChunkStream" line="950"/>
            </method>
            <method name="equals" type="boolean" line="956">
                <params>
                    <param name="s0" type="int[]"/>
                    <param name="s1" type="int[]"/>
                </params>
                <scope line="957"/>
                <scope line="960"/>
                <scope line="963">
                    <scope line="964"/>
                </scope>
            </method>
            <method name="initializeScaleTables" type="void" line="974">
                <params>
                    <param name="sampleSize" type="int[]"/>
                </params>
                <comment line="978">
                    If the existing tables are still valid, just return                    
                </comment>
                <comment line="984">
                    Compute new tables                    
                </comment>
                <comment line="1001">
                    bitDepth == 16                    
                </comment>
                <comment line="1002">
                    Divide scaling table into high and low bytes                    
                </comment>
                <declaration name="bitDepth" type="int" line="975"/>
                <scope line="979"/>
                <declaration name="maxOutSample" type="int" line="986"/>
                <scope line="987">
                    <scope line="989">
                        <declaration name="maxInSample" type="int" line="990"/>
                        <declaration name="halfMaxInSample" type="int" line="991"/>
                        <scope line="993"/>
                    </scope>
                </scope>
                <scope line="1000">
                    <scope line="1005">
                        <declaration name="maxInSample" type="int" line="1006"/>
                        <declaration name="halfMaxInSample" type="int" line="1007"/>
                        <scope line="1010">
                            <declaration name="val" type="int" line="1011"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="write" type="void" line="1023">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="image" type="IIOImage"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <comment line="1039">
                    Set source region and subsampling to default values                    
                </comment>
                <comment line="1049">
                    Get source region and subsampling factors                    
                </comment>
                <comment line="1056">
                    Clip to actual image bounds                    
                </comment>
                <comment line="1064">
                    Adjust for subsampling offsets                    
                </comment>
                <comment line="1072">
                    Get subsampling factors                    
                </comment>
                <comment line="1083">
                    Compute output dimensions                    
                </comment>
                <comment line="1090">
                    Compute total number of pixels for progress notification                    
                </comment>
                <comment line="1094">
                    Create metadata                    
                </comment>
                <comment line="1105">
                    Use Adam7 interlacing if set in write param                    
                </comment>
                <comment line="1113">
                    MODE_COPY_FROM_METADATA should alreay be taken care of
                     MODE_EXPLICIT is not allowed                    
                </comment>
                <comment line="1118">
                    Initialize bitDepth and colorType                    
                </comment>
                <comment line="1121">
                    Overwrite IHDR width and height values with values from image                    
                </comment>
                <comment line="1127">
                    Initialize scaling tables for this image                    
                </comment>
                <comment line="1164">
                    Finish up and inform the listeners we are done                    
                </comment>
                <scope line="1024"/>
                <scope line="1027"/>
                <scope line="1030"/>
                <declaration name="im" type="RenderedImage" line="1034"/>
                <declaration name="sampleModel" type="SampleModel" line="1035"/>
                <scope line="1047">
                    <declaration name="sourceRegion" type="Rectangle" line="1049"/>
                    <scope line="1050">
                        <declaration name="imageBounds" type="Rectangle" line="1051"/>
                    </scope>
                    <declaration name="gridX" type="int" line="1064"/>
                    <declaration name="gridY" type="int" line="1065"/>
                    <declaration name="sBands" type="int[]" line="1075"/>
                    <scope line="1076"/>
                </scope>
                <declaration name="destWidth" type="int" line="1083"/>
                <declaration name="destHeight" type="int" line="1084"/>
                <scope line="1085"/>
                <declaration name="imd" type="IIOMetadata" line="1094"/>
                <scope line="1095"/>
                <scope line="1099"/>
                <scope line="1103"/>
                <scope line="1133">
                    <scope line="1160"/>
                    <scope line="1162"/>
                </scope>
                <scope line="1167"/>
            </method>
        </class>
    </source>