<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.common">
        <import package="java.io.PrintStream"/>
        <class name="LZWStringTable" line="30">
            <comment line="52">
                after predecessor character                
            </comment>
            <comment line="53">
                predecessor string                
            </comment>
            <comment line="54">
                hash table to find  predecessor + char pairs                
            </comment>
            <comment line="55">
                next code if adding new prestring + char                
            </comment>
            <comment line="57">
                each entry corresponds to a code and contains the length of data
                 that the code expands to when decoded.                
            </comment>
            <comment line="63">
                Constructor allocate memory for string store data                
            </comment>
            <comment line="73">
                @param index value of -1 indicates no predecessor [used in initialisation]
                 @param b the byte [character] to add to the string store which follows
                 the predecessor string specified the index.
                 @return 0xFFFF if no space in table left for addition of predecesor
                 index and byte b. Else return the code allocated for combination index + b.                
            </comment>
            <comment line="105">
                @param index index to prefix string
                 @param b the character that follws the index prefix
                 @return b if param index is HASH_FREE. Else return the code
                 for this prefix and byte successor                
            </comment>
            <comment line="129">
                @param codesize the size of code to be preallocated for the
                 string store.                
            </comment>
            <comment line="150">
                If expanded data doesn&apos;t fit into array only what will fit is written
                 to buf and the return value indicates how much of the expanded code has
                 been written to the buf. The next call to expandCode() should be with
                 the same code and have the skip parameter set the negated value of the
                 previous return. Succesive negative return values should be negated and
                 added together for next skip parameter value with same code.
                
                 @param buf buffer to place expanded data into
                 @param offset offset to place expanded data
                 @param code the code to expand to the byte array it represents.
                 PRECONDITION This code must already be in the LZSS
                 @param skipHead is the number of bytes at the start of the expanded code to
                 be skipped before data is written to buf. It is possible that skipHead is
                 equal to codeLen.
                 @return the length of data expanded into buf. If the expanded code is longer
                 than space left in buf then the value returned is a negative number which when
                 negated is equal to the number of bytes that were used of the code being expanded.
                 This negative value also indicates the buffer is full.                
            </comment>
            <javadoc line="30">
                General purpose LZW String Table.
                  Extracted from GIFEncoder by Adam Doppelt
                  Comments added by Robin Luiten
                  &lt;code&gt;expandCode&lt;/code&gt; added by Robin Luiten
                  The strLen table to give quick access to the lenght of an expanded
                  code for use by the &lt;code&gt;expandCode&lt;/code&gt; method added by Robin.                
            </javadoc>
            <declaration name="RES_CODES" type="int" line="39"/>
            <javadoc line="39">
                codesize + Reserved Codes                
            </javadoc>
            <declaration name="HASH_FREE" type="short" line="42"/>
            <declaration name="NEXT_FIRST" type="short" line="43"/>
            <declaration name="MAXBITS" type="int" line="45"/>
            <declaration name="MAXSTR" type="int" line="46"/>
            <declaration name="HASHSIZE" type="short" line="48"/>
            <declaration name="HASHSTEP" type="short" line="49"/>
            <declaration name="strChr" type="byte[]" line="51"/>
            <declaration name="strNxt" type="short[]" line="52"/>
            <declaration name="strHsh" type="short[]" line="53"/>
            <declaration name="numStrings" type="short" line="54"/>
            <declaration name="strLen" type="int[]" line="60"/>
            <method name="LZWStringTable" type="constructor" line="65"/>
            <method name="addCharString" type="int" line="79">
                <params>
                    <param name="index" type="short"/>
                    <param name="b" type="byte"/>
                </params>
                <comment line="83">
                    if used up all codes                    
                </comment>
                <comment line="102">
                    return the code and inc for next code                    
                </comment>
                <declaration name="hshidx" type="int" line="80"/>
                <scope line="82"/>
                <scope line="87"/>
                <scope line="93"/>
                <scope line="96"/>
            </method>
            <method name="findCharString" type="short" line="110">
                <params>
                    <param name="index" type="short"/>
                    <param name="b" type="byte"/>
                </params>
                <comment line="115">
                    Rob fixed used to sign extend                    
                </comment>
                <comment line="119">
                    search                    
                </comment>
                <declaration name="hshidx" type="int" line="111"/>
                <scope line="113"/>
                <scope line="118">
                    <scope line="119"/>
                </scope>
            </method>
            <method name="clearTable" type="void" line="132">
                <params>
                    <param name="codesize" type="int"/>
                </params>
                <comment line="142">
                    init with no prefix                    
                </comment>
                <scope line="135"/>
                <declaration name="w" type="int" line="139"/>
                <scope line="140"/>
            </method>
            <method name="hash" type="int" line="145">
                <params>
                    <param name="index" type="short"/>
                    <param name="lastbyte" type="byte"/>
                </params>
            </method>
            <method name="expandCode" type="int" line="169">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="code" type="short"/>
                    <param name="skipHead" type="int"/>
                </params>
                <comment line="176">
                    just in case                    
                </comment>
                <comment line="177">
                    DONE no more unpacked                    
                </comment>
                <comment line="182">
                    how much data we are actually expanding                    
                </comment>
                <comment line="183">
                    length of expanded code left                    
                </comment>
                <comment line="184">
                    how much space left                    
                </comment>
                <comment line="186">
                    only got this many to unpack                    
                </comment>
                <comment line="191">
                    only &gt; 0 if codeLen &gt; bufSpace [left overs]                    
                </comment>
                <comment line="193">
                    initialise to exclusive end address of buffer area                    
                </comment>
                <comment line="195">
                    NOTE: data unpacks in reverse direction and we are placing the
                     unpacked data directly into the array in the correct location.                    
                </comment>
                <comment line="198">
                    skip required of expanded data                    
                </comment>
                <comment line="201">
                    to predecessor code                    
                </comment>
                <comment line="205">
                    indicate what part of codeLen used                    
                </comment>
                <comment line="207">
                    indicate length of dat unpacked                    
                </comment>
                <scope line="170">
                    <scope line="171"/>
                </scope>
                <scope line="177"/>
                <declaration name="expandLen" type="int" line="181"/>
                <declaration name="codeLen" type="int" line="182"/>
                <declaration name="bufSpace" type="int" line="183"/>
                <scope line="184"/>
                <scope line="186"/>
                <declaration name="skipTail" type="int" line="190"/>
                <declaration name="idx" type="int" line="192"/>
                <scope line="196">
                    <scope line="197"/>
                </scope>
                <scope line="203"/>
                <scope line="205"/>
            </method>
            <method name="dump" type="void" line="210">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <declaration name="i" type="int" line="211"/>
                <scope line="212"/>
            </method>
        </class>
    </source>