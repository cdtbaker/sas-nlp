<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.jpeg">
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.metadata.IIOInvalidTreeException"/>
        <import package="javax.imageio.metadata.IIOMetadataNode"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="javax.imageio.plugins.jpeg.JPEGQTable"/>
        <import package="java.io.IOException"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.w3c.dom.NodeList"/>
        <import package="org.w3c.dom.NamedNodeMap"/>
        <class name="DQTMarkerSegment" line="43">
            <extends class="MarkerSegment"/>
            <comment line="48">
                Could be 1 to 4                
            </comment>
            <javadoc line="43">
                A DQT (Define Quantization Table) marker segment.                
            </javadoc>
            <declaration name="tables" type="List" line="47"/>
            <method name="DQTMarkerSegment" type="constructor" line="49">
                <params>
                    <param name="quality" type="float"/>
                    <param name="needTwo" type="boolean"/>
                </params>
                <scope line="52"/>
            </method>
            <method name="DQTMarkerSegment" type="constructor" line="57">
                <params>
                    <param name="buffer" type="JPEGBuffer"/>
                </params>
                <declaration name="count" type="int" line="59"/>
                <scope line="60">
                    <declaration name="newGuy" type="Qtable" line="61"/>
                </scope>
            </method>
            <method name="DQTMarkerSegment" type="constructor" line="68">
                <params>
                    <param name="qtables" type="JPEGQTable[]"/>
                </params>
                <scope line="70"/>
            </method>
            <method name="DQTMarkerSegment" type="constructor" line="75">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="children" type="NodeList" line="77"/>
                <declaration name="size" type="int" line="78"/>
                <scope line="79"/>
                <scope line="82"/>
            </method>
            <method name="clone" type="Object" line="87">
                <declaration name="newGuy" type="DQTMarkerSegment" line="88"/>
                <declaration name="iter" type="Iterator" line="90"/>
                <scope line="91">
                    <declaration name="table" type="Qtable" line="92"/>
                </scope>
            </method>
            <method name="getNativeNode" type="IIOMetadataNode" line="98">
                <declaration name="node" type="IIOMetadataNode" line="99"/>
                <scope line="100">
                    <declaration name="table" type="Qtable" line="101"/>
                </scope>
            </method>
            <javadoc line="107">
                Writes the data for this segment to the stream in
                  valid JPEG format.                
            </javadoc>
            <method name="write" type="void" line="111">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                </params>
                <comment line="113">
                    We don&apos;t write DQT segments; the IJG library does.                    
                </comment>
            </method>
            <method name="print" type="void" line="115">
                <scope line="119">
                    <declaration name="table" type="Qtable" line="120"/>
                </scope>
            </method>
            <javadoc line="126">
                Assuming the given table was generated by scaling the &quot;standard&quot;
                  visually lossless luminance table, extract the scale factor that
                  was used.                
            </javadoc>
            <method name="getChromaForLuma" type="Qtable" line="131">
                <params>
                    <param name="luma" type="Qtable"/>
                </params>
                <comment line="134">
                    Determine if the table is all the same values
                     if so, use the same table                    
                </comment>
                <comment line="147">
                    Otherwise, find the largest coefficient less than 255.  This is
                     the largest value that we know did not clamp on scaling.                    
                </comment>
                <comment line="155">
                    Compute the scale factor by dividing it by the value in the
                     same position from the &quot;standard&quot; table.
                     If the given table was not generated by scaling the standard,
                     the resulting table will still be reasonable, as it will reflect
                     a comparable scaling of chrominance frequency response of the
                     eye.                    
                </comment>
                <comment line="163">
                    generate a new table                    
                </comment>
                <declaration name="newGuy" type="Qtable" line="132"/>
                <declaration name="allSame" type="boolean" line="135"/>
                <scope line="136">
                    <scope line="137"/>
                </scope>
                <scope line="142"/>
                <scope line="145">
                    <declaration name="largestPos" type="int" line="148"/>
                    <scope line="149">
                        <scope line="150"/>
                    </scope>
                    <declaration name="scaleFactor" type="float" line="160"/>
                    <declaration name="jpegTable" type="JPEGQTable" line="163"/>
                </scope>
            </method>
            <method name="getQtableFromNode" type="Qtable" line="171">
                <params>
                    <param name="node" type="Node"/>
                </params>
            </method>
            <class name="Qtable" line="175">
                <comment line="183">
                    64 elements, in natural order                    
                </comment>
                <implements interface="Cloneable"/>
                <javadoc line="175">
                    A quantization table within a DQT marker segment.                    
                </javadoc>
                <declaration name="elementPrecision" type="int" line="179"/>
                <declaration name="tableID" type="int" line="180"/>
                <declaration name="QTABLE_SIZE" type="int" line="181"/>
                <declaration name="data" type="int[]" line="182"/>
                <declaration name="zigzag" type="int[]" line="184"/>
                <javadoc line="184">
                    The zigzag-order position of the i&apos;th element
                      of a DCT block read in natural order.                    
                </javadoc>
                <method name="Qtable" type="constructor" line="199">
                    <params>
                        <param name="wantLuma" type="boolean"/>
                        <param name="quality" type="float"/>
                    </params>
                    <declaration name="base" type="JPEGQTable" line="201"/>
                    <scope line="202"/>
                    <scope line="205"/>
                    <scope line="209">
                        <scope line="211"/>
                        <scope line="214"/>
                    </scope>
                </method>
                <method name="Qtable" type="constructor" line="222">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                    </params>
                    <comment line="227">
                        IJG is compiled for 8-bits, so this shouldn&apos;t happen                        
                    </comment>
                    <comment line="231">
                        Read from zig-zag order to natural order                        
                    </comment>
                    <scope line="225"/>
                    <scope line="231"/>
                </method>
                <method name="Qtable" type="constructor" line="237">
                    <params>
                        <param name="table" type="JPEGQTable"/>
                        <param name="id" type="int"/>
                    </params>
                </method>
                <method name="Qtable" type="constructor" line="243">
                    <params>
                        <param name="node" type="Node"/>
                    </params>
                    <scope line="244">
                        <declaration name="attrs" type="NamedNodeMap" line="245"/>
                        <declaration name="count" type="int" line="246"/>
                        <scope line="247"/>
                        <scope line="253">
                            <declaration name="ourNode" type="IIOMetadataNode" line="254"/>
                            <declaration name="table" type="JPEGQTable" line="255"/>
                            <scope line="256"/>
                        </scope>
                        <scope line="261"/>
                    </scope>
                    <scope line="265"/>
                </method>
                <method name="clone" type="Object" line="271">
                    <comment line="276">
                        won&apos;t happen                        
                    </comment>
                    <declaration name="newGuy" type="Qtable" line="272"/>
                    <scope line="273"/>
                    <scope line="275"/>
                    <scope line="276"/>
                </method>
                <method name="getNativeNode" type="IIOMetadataNode" line="282">
                    <declaration name="node" type="IIOMetadataNode" line="283"/>
                </method>
                <method name="print" type="void" line="292">
                    <comment line="299">
                        for (int i = 0; i &lt; 64; i++) {
                        if (i % 8 == 0) {
                        System.out.println();
                        }
                        System.out.print(&quot; &quot; + Integer.toString(data[i]));
                        }
                        System.out.println();                        
                    </comment>
                </method>
            </class>
        </class>
    </source>