<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.common">
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ComponentColorModel"/>
        <import package="java.awt.image.ComponentSampleModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferByte"/>
        <import package="java.awt.image.DataBufferInt"/>
        <import package="java.awt.image.DataBufferShort"/>
        <import package="java.awt.image.DataBufferUShort"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.MultiPixelPackedSampleModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.SinglePixelPackedSampleModel"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.util.Arrays"/>
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.IIOImage"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.ImageWriter"/>
        <import package="javax.imageio.spi.ImageWriterSpi"/>
        <class name="ImageUtil" line="29">
            <javadoc line="30">
                Creates a &lt;code&gt;ColorModel&lt;/code&gt; that may be used with the
                  specified &lt;code&gt;SampleModel&lt;/code&gt;.  If a suitable
                  &lt;code&gt;ColorModel&lt;/code&gt; cannot be found, this method returns
                  &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; Suitable &lt;code&gt;ColorModel&lt;/code&gt;s are guaranteed to exist
                  for all instances of &lt;code&gt;ComponentSampleModel&lt;/code&gt;.
                  For 1- and 3- banded &lt;code&gt;SampleModel&lt;/code&gt;s, the returned
                  &lt;code&gt;ColorModel&lt;/code&gt; will be opaque.  For 2- and 4-banded
                  &lt;code&gt;SampleModel&lt;/code&gt;s, the output will use alpha transparency
                  which is not premultiplied.  1- and 2-banded data will use a
                  grayscale &lt;code&gt;ColorSpace&lt;/code&gt;, and 3- and 4-banded data a sRGB
                  &lt;code&gt;ColorSpace&lt;/code&gt;. Data with 5 or more bands will have a
                  &lt;code&gt;BogusColorSpace&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;An instance of &lt;code&gt;DirectColorModel&lt;/code&gt; will be created for
                  instances of &lt;code&gt;SinglePixelPackedSampleModel&lt;/code&gt; with no more
                  than 4 bands.&lt;/p&gt;
                  &lt;p&gt;An instance of &lt;code&gt;IndexColorModel&lt;/code&gt; will be created for
                  instances of &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt;. The colormap
                  will be a grayscale ramp with &lt;code&gt;1&amp;nbsp;&lt;&lt;&amp;nbsp;numberOfBits&lt;/code&gt;
                  entries ranging from zero to at most 255.&lt;/p&gt;                
                <return>
                    An instance of &lt;code&gt;ColorModel&lt;/code&gt; that is suitable for
                      the supplied &lt;code&gt;SampleModel&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <throws>
                    IllegalArgumentException  If &lt;code&gt;sampleModel&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="createColorModel" type="ColorModel" line="56">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                </params>
                <scope line="57"/>
                <declaration name="dataType" type="int" line="60"/>
                <declaration name="colorModel" type="ColorModel" line="72"/>
                <declaration name="sampleSize" type="int[]" line="73"/>
                <scope line="74">
                    <declaration name="numBands" type="int" line="75"/>
                    <declaration name="colorSpace" type="ColorSpace" line="76"/>
                    <scope line="77"/>
                    <scope line="80"/>
                    <scope line="83"/>
                    <declaration name="hasAlpha" type="boolean" line="86"/>
                    <declaration name="isAlphaPremultiplied" type="boolean" line="87"/>
                    <declaration name="transparency" type="int" line="88"/>
                </scope>
                <scope line="91">
                    <declaration name="sppsm" type="SinglePixelPackedSampleModel" line="92"/>
                    <declaration name="bitMasks" type="int[]" line="93"/>
                    <declaration name="rmask" type="int" line="94"/>
                    <declaration name="gmask" type="int" line="95"/>
                    <declaration name="bmask" type="int" line="96"/>
                    <declaration name="amask" type="int" line="97"/>
                    <declaration name="numBands" type="int" line="98"/>
                    <scope line="99">
                        <scope line="101"/>
                    </scope>
                    <scope line="105">
                        <scope line="109"/>
                    </scope>
                    <declaration name="bits" type="int" line="113"/>
                    <scope line="114"/>
                </scope>
                <scope line="119">
                    <declaration name="bitsPerSample" type="int" line="120"/>
                    <declaration name="numEntries" type="int" line="121"/>
                    <declaration name="map" type="byte[]" line="122"/>
                    <scope line="123"/>
                </scope>
            </method>
            <javadoc line="130">
                For the case of binary data (&lt;code&gt;isBinary()&lt;/code&gt; returns
                  &lt;code&gt;true&lt;/code&gt;), return the binary data as a packed byte array.
                  The data will be packed as eight bits per byte with no bit offset,
                  i.e., the first bit in each image line will be the left-most of the
                  first byte of the line.  The line stride in bytes will be
                  &lt;code&gt;(int)((getWidth()+7)/8)&lt;/code&gt;.  The length of the returned
                  array will be the line stride multiplied by &lt;code&gt;getHeight()&lt;/code&gt;                
                <return>
                    the binary data as a packed array of bytes with zero offset
                      of &lt;code&gt;null&lt;/code&gt; if the data are not binary.                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;isBinary()&lt;/code&gt; returns
                      &lt;code&gt;false&lt;/code&gt; with the &lt;code&gt;SampleModel&lt;/code&gt; of the
                      supplied &lt;code&gt;Raster&lt;/code&gt; as argument.                    
                </throws>
            </javadoc>
            <method name="getPackedBinaryData" type="byte[]" line="144">
                <params>
                    <param name="raster" type="Raster"/>
                    <param name="rect" type="Rectangle"/>
                </params>
                <declaration name="sm" type="SampleModel" line="145"/>
                <scope line="146"/>
                <declaration name="rectX" type="int" line="149"/>
                <declaration name="rectY" type="int" line="150"/>
                <declaration name="rectWidth" type="int" line="151"/>
                <declaration name="rectHeight" type="int" line="152"/>
                <declaration name="dataBuffer" type="DataBuffer" line="153"/>
                <declaration name="dx" type="int" line="154"/>
                <declaration name="dy" type="int" line="155"/>
                <declaration name="mpp" type="MultiPixelPackedSampleModel" line="156"/>
                <declaration name="lineStride" type="int" line="157"/>
                <declaration name="eltOffset" type="int" line="158"/>
                <declaration name="bitOffset" type="int" line="159"/>
                <declaration name="numBytesPerRow" type="int" line="160"/>
                <scope line="161"/>
                <declaration name="binaryDataArray" type="byte[]" line="164"/>
                <declaration name="b" type="int" line="165"/>
                <scope line="166">
                    <scope line="167">
                        <declaration name="data" type="byte[]" line="168"/>
                        <declaration name="stride" type="int" line="169"/>
                        <declaration name="offset" type="int" line="170"/>
                        <scope line="171"/>
                    </scope>
                    <scope line="177">
                        <declaration name="data" type="short[]" line="178"/>
                        <scope line="179">
                            <declaration name="xRemaining" type="int" line="180"/>
                            <declaration name="i" type="int" line="181"/>
                            <scope line="182">
                                <declaration name="datum" type="short" line="183"/>
                            </scope>
                            <scope line="188"/>
                        </scope>
                    </scope>
                    <scope line="194">
                        <declaration name="data" type="int[]" line="195"/>
                        <scope line="196">
                            <declaration name="xRemaining" type="int" line="197"/>
                            <declaration name="i" type="int" line="198"/>
                            <scope line="199">
                                <declaration name="datum" type="int" line="200"/>
                            </scope>
                            <declaration name="shift" type="int" line="207"/>
                            <scope line="208"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="217">
                    <scope line="218">
                        <declaration name="data" type="byte[]" line="219"/>
                        <scope line="220">
                            <declaration name="stride" type="int" line="221"/>
                            <declaration name="offset" type="int" line="222"/>
                            <scope line="223"/>
                        </scope>
                        <scope line="229">
                            <declaration name="leftShift" type="int" line="230"/>
                            <declaration name="rightShift" type="int" line="231"/>
                            <scope line="232">
                                <declaration name="i" type="int" line="233"/>
                                <declaration name="xRemaining" type="int" line="234"/>
                                <scope line="235">
                                    <scope line="236"/>
                                    <scope line="239"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="248">
                        <declaration name="data" type="short[]" line="249"/>
                        <scope line="250">
                            <declaration name="bOffset" type="int" line="251"/>
                            <scope line="252">
                                <declaration name="i" type="int" line="253"/>
                                <declaration name="mod" type="int" line="254"/>
                                <declaration name="left" type="int" line="255"/>
                                <scope line="256"/>
                                <scope line="259">
                                    <declaration name="delta" type="int" line="260"/>
                                    <declaration name="right" type="int" line="261"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="268">
                        <declaration name="data" type="int[]" line="269"/>
                        <scope line="270">
                            <declaration name="bOffset" type="int" line="271"/>
                            <scope line="272">
                                <declaration name="i" type="int" line="273"/>
                                <declaration name="mod" type="int" line="274"/>
                                <declaration name="left" type="int" line="275"/>
                                <scope line="276"/>
                                <scope line="279">
                                    <declaration name="delta" type="int" line="280"/>
                                    <declaration name="right" type="int" line="281"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="291">
                Returns the binary data unpacked into an array of bytes.
                  The line stride will be the width of the &lt;code&gt;Raster&lt;/code&gt;.                
                <throws>
                    IllegalArgumentException if &lt;code&gt;isBinary()&lt;/code&gt; returns
                      &lt;code&gt;false&lt;/code&gt; with the &lt;code&gt;SampleModel&lt;/code&gt; of the
                      supplied &lt;code&gt;Raster&lt;/code&gt; as argument.                    
                </throws>
            </javadoc>
            <method name="getUnpackedBinaryData" type="byte[]" line="298">
                <params>
                    <param name="raster" type="Raster"/>
                    <param name="rect" type="Rectangle"/>
                </params>
                <declaration name="sm" type="SampleModel" line="299"/>
                <scope line="300"/>
                <declaration name="rectX" type="int" line="303"/>
                <declaration name="rectY" type="int" line="304"/>
                <declaration name="rectWidth" type="int" line="305"/>
                <declaration name="rectHeight" type="int" line="306"/>
                <declaration name="dataBuffer" type="DataBuffer" line="307"/>
                <declaration name="dx" type="int" line="308"/>
                <declaration name="dy" type="int" line="309"/>
                <declaration name="mpp" type="MultiPixelPackedSampleModel" line="310"/>
                <declaration name="lineStride" type="int" line="311"/>
                <declaration name="eltOffset" type="int" line="312"/>
                <declaration name="bitOffset" type="int" line="313"/>
                <declaration name="bdata" type="byte[]" line="314"/>
                <declaration name="maxY" type="int" line="315"/>
                <declaration name="maxX" type="int" line="316"/>
                <declaration name="k" type="int" line="317"/>
                <scope line="318">
                    <declaration name="data" type="byte[]" line="319"/>
                    <scope line="320">
                        <declaration name="bOffset" type="int" line="321"/>
                        <scope line="322">
                            <declaration name="b" type="byte" line="323"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="330">
                    <declaration name="data" type="short[]" line="331"/>
                    <scope line="332">
                        <declaration name="bOffset" type="int" line="333"/>
                        <scope line="334">
                            <declaration name="s" type="short" line="335"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="342">
                    <declaration name="data" type="int[]" line="343"/>
                    <scope line="344">
                        <declaration name="bOffset" type="int" line="345"/>
                        <scope line="346">
                            <declaration name="i" type="int" line="347"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="356">
                Sets the supplied &lt;code&gt;Raster&lt;/code&gt;&apos;s data from an array
                  of packed binary data of the form returned by
                  &lt;code&gt;getPackedBinaryData()&lt;/code&gt;.                
                <throws>
                    IllegalArgumentException if &lt;code&gt;isBinary()&lt;/code&gt; returns
                      &lt;code&gt;false&lt;/code&gt; with the &lt;code&gt;SampleModel&lt;/code&gt; of the
                      supplied &lt;code&gt;Raster&lt;/code&gt; as argument.                    
                </throws>
            </javadoc>
            <method name="setPackedBinaryData" type="void" line="364">
                <params>
                    <param name="binaryDataArray" type="byte[]"/>
                    <param name="raster" type="WritableRaster"/>
                    <param name="rect" type="Rectangle"/>
                </params>
                <declaration name="sm" type="SampleModel" line="365"/>
                <scope line="366"/>
                <declaration name="rectX" type="int" line="369"/>
                <declaration name="rectY" type="int" line="370"/>
                <declaration name="rectWidth" type="int" line="371"/>
                <declaration name="rectHeight" type="int" line="372"/>
                <declaration name="dataBuffer" type="DataBuffer" line="373"/>
                <declaration name="dx" type="int" line="374"/>
                <declaration name="dy" type="int" line="375"/>
                <declaration name="mpp" type="MultiPixelPackedSampleModel" line="376"/>
                <declaration name="lineStride" type="int" line="377"/>
                <declaration name="eltOffset" type="int" line="378"/>
                <declaration name="bitOffset" type="int" line="379"/>
                <declaration name="b" type="int" line="380"/>
                <scope line="381">
                    <scope line="382">
                        <declaration name="data" type="byte[]" line="383"/>
                        <scope line="384"/>
                        <declaration name="stride" type="int" line="387"/>
                        <declaration name="offset" type="int" line="388"/>
                        <scope line="389"/>
                    </scope>
                    <scope line="395">
                        <declaration name="data" type="short[]" line="396"/>
                        <scope line="397">
                            <declaration name="xRemaining" type="int" line="398"/>
                            <declaration name="i" type="int" line="399"/>
                            <scope line="400"/>
                            <scope line="404"/>
                        </scope>
                    </scope>
                    <scope line="410">
                        <declaration name="data" type="int[]" line="411"/>
                        <scope line="412">
                            <declaration name="xRemaining" type="int" line="413"/>
                            <declaration name="i" type="int" line="414"/>
                            <scope line="415"/>
                            <declaration name="shift" type="int" line="419"/>
                            <scope line="420"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="429">
                    <declaration name="stride" type="int" line="430"/>
                    <declaration name="offset" type="int" line="431"/>
                    <scope line="432">
                        <declaration name="data" type="byte[]" line="433"/>
                        <scope line="434">
                            <scope line="435"/>
                        </scope>
                        <scope line="441">
                            <declaration name="rightShift" type="int" line="442"/>
                            <declaration name="leftShift" type="int" line="443"/>
                            <declaration name="leftShift8" type="int" line="444"/>
                            <declaration name="mask" type="int" line="445"/>
                            <declaration name="mask1" type="int" line="446"/>
                            <scope line="447">
                                <declaration name="i" type="int" line="448"/>
                                <declaration name="xRemaining" type="int" line="449"/>
                                <scope line="450">
                                    <declaration name="datum" type="byte" line="451"/>
                                    <scope line="452"/>
                                    <scope line="456"/>
                                    <scope line="461">
                                        <declaration name="remainMask" type="int" line="462"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="471">
                        <declaration name="data" type="short[]" line="472"/>
                        <declaration name="rightShift" type="int" line="473"/>
                        <declaration name="leftShift" type="int" line="474"/>
                        <declaration name="leftShift16" type="int" line="475"/>
                        <declaration name="mask" type="int" line="476"/>
                        <declaration name="mask1" type="int" line="477"/>
                        <declaration name="mask2" type="int" line="478"/>
                        <scope line="479">
                            <declaration name="bOffset" type="int" line="480"/>
                            <declaration name="xRemaining" type="int" line="481"/>
                            <scope line="482">
                                <declaration name="i" type="int" line="483"/>
                                <declaration name="mod" type="int" line="484"/>
                                <declaration name="datum" type="int" line="485"/>
                                <scope line="486">
                                    <scope line="487"/>
                                </scope>
                                <scope line="492"/>
                                <scope line="496"/>
                                <scope line="501">
                                    <declaration name="remainMask" type="int" line="502"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="509">
                        <declaration name="data" type="int[]" line="510"/>
                        <declaration name="rightShift" type="int" line="511"/>
                        <declaration name="leftShift" type="int" line="512"/>
                        <declaration name="leftShift32" type="int" line="513"/>
                        <declaration name="mask" type="int" line="514"/>
                        <declaration name="mask1" type="int" line="515"/>
                        <scope line="516">
                            <declaration name="bOffset" type="int" line="517"/>
                            <declaration name="xRemaining" type="int" line="518"/>
                            <scope line="519">
                                <declaration name="i" type="int" line="520"/>
                                <declaration name="mod" type="int" line="521"/>
                                <declaration name="datum" type="int" line="522"/>
                                <scope line="523">
                                    <declaration name="shift" type="int" line="524"/>
                                    <scope line="525"/>
                                </scope>
                                <scope line="530"/>
                                <scope line="534"/>
                                <scope line="539">
                                    <declaration name="remainMask" type="int" line="540"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="549">
                Copies data into the packed array of the &lt;code&gt;Raster&lt;/code&gt;
                  from an array of unpacked data of the form returned by
                  &lt;code&gt;getUnpackedBinaryData()&lt;/code&gt;.
                  &lt;p&gt; If the data are binary, then the target bit will be set if
                  and only if the corresponding byte is non-zero.                
                <throws>
                    IllegalArgumentException if &lt;code&gt;isBinary()&lt;/code&gt; returns
                      &lt;code&gt;false&lt;/code&gt; with the &lt;code&gt;SampleModel&lt;/code&gt; of the
                      supplied &lt;code&gt;Raster&lt;/code&gt; as argument.                    
                </throws>
            </javadoc>
            <method name="setUnpackedBinaryData" type="void" line="559">
                <params>
                    <param name="bdata" type="byte[]"/>
                    <param name="raster" type="WritableRaster"/>
                    <param name="rect" type="Rectangle"/>
                </params>
                <declaration name="sm" type="SampleModel" line="560"/>
                <scope line="561"/>
                <declaration name="rectX" type="int" line="564"/>
                <declaration name="rectY" type="int" line="565"/>
                <declaration name="rectWidth" type="int" line="566"/>
                <declaration name="rectHeight" type="int" line="567"/>
                <declaration name="dataBuffer" type="DataBuffer" line="568"/>
                <declaration name="dx" type="int" line="569"/>
                <declaration name="dy" type="int" line="570"/>
                <declaration name="mpp" type="MultiPixelPackedSampleModel" line="571"/>
                <declaration name="lineStride" type="int" line="572"/>
                <declaration name="eltOffset" type="int" line="573"/>
                <declaration name="bitOffset" type="int" line="574"/>
                <declaration name="k" type="int" line="575"/>
                <scope line="576">
                    <declaration name="data" type="byte[]" line="577"/>
                    <scope line="578">
                        <declaration name="bOffset" type="int" line="579"/>
                        <scope line="580">
                            <scope line="581"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="589">
                    <declaration name="data" type="short[]" line="590"/>
                    <scope line="591">
                        <declaration name="bOffset" type="int" line="592"/>
                        <scope line="593">
                            <scope line="594"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="602">
                    <declaration name="data" type="int[]" line="603"/>
                    <scope line="604">
                        <declaration name="bOffset" type="int" line="605"/>
                        <scope line="606">
                            <scope line="607"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isBinary" type="boolean" line="616">
                <params>
                    <param name="sm" type="SampleModel"/>
                </params>
            </method>
            <method name="createColorModel" type="ColorModel" line="619">
                <params>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="sampleModel" type="SampleModel"/>
                </params>
                <declaration name="colorModel" type="ColorModel" line="620"/>
                <scope line="621"/>
                <declaration name="numBands" type="int" line="624"/>
                <scope line="625"/>
                <declaration name="dataType" type="int" line="628"/>
                <scope line="629">
                    <scope line="630"/>
                    <declaration name="useAlpha" type="boolean" line="634"/>
                    <declaration name="transparency" type="int" line="635"/>
                    <declaration name="premultiplied" type="boolean" line="636"/>
                    <declaration name="dataTypeSize" type="int" line="637"/>
                    <declaration name="bits" type="int[]" line="638"/>
                    <scope line="639"/>
                </scope>
                <scope line="644">
                    <declaration name="sppsm" type="SinglePixelPackedSampleModel" line="645"/>
                    <declaration name="bitMasks" type="int[]" line="646"/>
                    <declaration name="rmask" type="int" line="647"/>
                    <declaration name="gmask" type="int" line="648"/>
                    <declaration name="bmask" type="int" line="649"/>
                    <declaration name="amask" type="int" line="650"/>
                    <scope line="652">
                        <scope line="654"/>
                    </scope>
                    <scope line="658">
                        <scope line="662"/>
                    </scope>
                    <declaration name="sampleSize" type="int[]" line="666"/>
                    <declaration name="bits" type="int" line="667"/>
                    <scope line="668"/>
                </scope>
                <scope line="674">
                    <declaration name="bits" type="int" line="675"/>
                    <declaration name="size" type="int" line="676"/>
                    <declaration name="comp" type="byte[]" line="677"/>
                </scope>
            </method>
            <method name="getElementSize" type="int" line="683">
                <params>
                    <param name="sm" type="SampleModel"/>
                </params>
                <declaration name="elementSize" type="int" line="684"/>
                <scope line="685">
                    <declaration name="mppsm" type="MultiPixelPackedSampleModel" line="686"/>
                </scope>
                <scope line="689"/>
                <scope line="692"/>
            </method>
            <method name="getTileSize" type="long" line="697">
                <params>
                    <param name="sm" type="SampleModel"/>
                </params>
                <declaration name="elementSize" type="int" line="698"/>
                <scope line="699">
                    <declaration name="mppsm" type="MultiPixelPackedSampleModel" line="700"/>
                </scope>
                <scope line="703">
                    <declaration name="csm" type="ComponentSampleModel" line="704"/>
                    <declaration name="bandOffsets" type="int[]" line="705"/>
                    <declaration name="maxBandOff" type="int" line="706"/>
                    <declaration name="size" type="long" line="708"/>
                    <declaration name="pixelStride" type="int" line="709"/>
                    <declaration name="scanlineStride" type="int" line="710"/>
                    <declaration name="bankIndices" type="int[]" line="714"/>
                </scope>
                <scope line="719">
                    <declaration name="sppsm" type="SinglePixelPackedSampleModel" line="720"/>
                    <declaration name="size" type="long" line="721"/>
                </scope>
            </method>
            <method name="getBandSize" type="long" line="726">
                <params>
                    <param name="sm" type="SampleModel"/>
                </params>
                <declaration name="elementSize" type="int" line="727"/>
                <scope line="728">
                    <declaration name="csm" type="ComponentSampleModel" line="729"/>
                    <declaration name="pixelStride" type="int" line="730"/>
                    <declaration name="scanlineStride" type="int" line="731"/>
                    <declaration name="size" type="long" line="732"/>
                </scope>
            </method>
            <javadoc line="739">
                Tests whether the color indices represent a gray-scale image.                
                <param>
                    r The red channel color indices.                    
                </param>
                <param>
                    g The green channel color indices.                    
                </param>
                <param>
                    b The blue channel color indices.                    
                </param>
                <return>
                    If all the indices have 256 entries, and are identical mappings,
                      return &lt;code&gt;true&lt;/code&gt;; otherwise, return &lt;code&gt;false&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="isIndicesForGrayscale" type="boolean" line="747">
                <params>
                    <param name="r" type="byte[]"/>
                    <param name="g" type="byte[]"/>
                    <param name="b" type="byte[]"/>
                </params>
                <declaration name="size" type="int" line="749"/>
                <scope line="751">
                    <declaration name="temp" type="byte" line="752"/>
                </scope>
            </method>
            <javadoc line="757">
                Converts the provided object to &lt;code&gt;String&lt;/code&gt;                
            </javadoc>
            <method name="convertObjectToString" type="String" line="760">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="s" type="String" line="762"/>
                <scope line="763">
                    <declaration name="bArray" type="byte[]" line="764"/>
                </scope>
                <scope line="768">
                    <declaration name="iArray" type="int[]" line="769"/>
                </scope>
                <scope line="773">
                    <declaration name="sArray" type="short[]" line="774"/>
                </scope>
            </method>
            <javadoc line="780">
                Checks that the provided &lt;code&gt;ImageWriter&lt;/code&gt; can encode
                  the provided &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; or not.  If not, an
                  &lt;code&gt;IIOException&lt;/code&gt; will be thrown.                
                <param>
                    writer The provided &lt;code&gt;ImageWriter&lt;/code&gt;.                    
                </param>
                <param>
                    type The image to be tested.                    
                </param>
                <throws>
                    IIOException If the writer cannot encoded the provided image.                    
                </throws>
            </javadoc>
            <method name="canEncodeImage" type="void" line="788">
                <params>
                    <param name="writer" type="ImageWriter"/>
                    <param name="type" type="ImageTypeSpecifier"/>
                </params>
                <declaration name="spi" type="ImageWriterSpi" line="789"/>
                <scope line="790"/>
            </method>
            <javadoc line="794">
                Checks that the provided &lt;code&gt;ImageWriter&lt;/code&gt; can encode
                  the provided &lt;code&gt;ColorModel&lt;/code&gt; and &lt;code&gt;SampleModel&lt;/code&gt;.
                  If not, an &lt;code&gt;IIOException&lt;/code&gt; will be thrown.                
                <param>
                    writer The provided &lt;code&gt;ImageWriter&lt;/code&gt;.                    
                </param>
                <param>
                    colorModel The provided &lt;code&gt;ColorModel&lt;/code&gt;.                    
                </param>
                <param>
                    sampleModel The provided &lt;code&gt;SampleModel&lt;/code&gt;.                    
                </param>
                <throws>
                    IIOException If the writer cannot encoded the provided image.                    
                </throws>
            </javadoc>
            <method name="canEncodeImage" type="void" line="803">
                <params>
                    <param name="writer" type="ImageWriter"/>
                    <param name="colorModel" type="ColorModel"/>
                    <param name="sampleModel" type="SampleModel"/>
                </params>
                <declaration name="type" type="ImageTypeSpecifier" line="804"/>
            </method>
            <javadoc line="808">
                Returns whether the image has contiguous data across rows.                
            </javadoc>
            <method name="imageIsContiguous" type="boolean" line="811">
                <params>
                    <param name="image" type="RenderedImage"/>
                </params>
                <declaration name="sm" type="SampleModel" line="812"/>
                <scope line="813">
                    <declaration name="ras" type="WritableRaster" line="814"/>
                </scope>
                <scope line="817"/>
                <scope line="820">
                    <declaration name="csm" type="ComponentSampleModel" line="821"/>
                    <scope line="822"/>
                    <declaration name="bandOffsets" type="int[]" line="825"/>
                    <scope line="826">
                        <scope line="827"/>
                    </scope>
                    <declaration name="bankIndices" type="int[]" line="831"/>
                    <scope line="832">
                        <scope line="833"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>