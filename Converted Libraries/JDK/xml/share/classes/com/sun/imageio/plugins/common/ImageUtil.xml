<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.common">
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ComponentColorModel"/>
        <import package="java.awt.image.ComponentSampleModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferByte"/>
        <import package="java.awt.image.DataBufferInt"/>
        <import package="java.awt.image.DataBufferShort"/>
        <import package="java.awt.image.DataBufferUShort"/>
        <import package="java.awt.image.DirectColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.MultiPixelPackedSampleModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.SinglePixelPackedSampleModel"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.util.Arrays"/>
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.IIOImage"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.ImageWriter"/>
        <import package="javax.imageio.spi.ImageWriterSpi"/>
        <class name="ImageUtil" line="59">
            <comment line="61">
                XXX testing only
                public static void main(String[] args) {
                ImageTypeSpecifier bilevel =
                ImageTypeSpecifier.createIndexed(new byte[] {(byte)0, (byte)255},
                new byte[] {(byte)0, (byte)255},
                new byte[] {(byte)0, (byte)255},
                null, 1,
                DataBuffer.TYPE_BYTE);
                ImageTypeSpecifier gray =
                ImageTypeSpecifier.createGrayscale(8, DataBuffer.TYPE_BYTE, false);
                ImageTypeSpecifier grayAlpha =
                ImageTypeSpecifier.createGrayscale(8, DataBuffer.TYPE_BYTE, false,
                false);
                ImageTypeSpecifier rgb =
                ImageTypeSpecifier.createInterleaved(ColorSpace.getInstance(ColorSpace.CS_sRGB),
                new int[] {0, 1, 2},
                DataBuffer.TYPE_BYTE,
                false,
                false);
                ImageTypeSpecifier rgba =
                ImageTypeSpecifier.createInterleaved(ColorSpace.getInstance(ColorSpace.CS_sRGB),
                new int[] {0, 1, 2, 3},
                DataBuffer.TYPE_BYTE,
                true,
                false);
                ImageTypeSpecifier packed =
                ImageTypeSpecifier.createPacked(ColorSpace.getInstance(ColorSpace.CS_sRGB),
                0xff000000,
                0x00ff0000,
                0x0000ff00,
                0x000000ff,
                DataBuffer.TYPE_BYTE,
                false);
                
                SampleModel bandedSM =
                new java.awt.image.BandedSampleModel(DataBuffer.TYPE_BYTE,
                1, 1, 15);
                
                System.out.println(createColorModel(bilevel.getSampleModel()));
                System.out.println(createColorModel(gray.getSampleModel()));
                System.out.println(createColorModel(grayAlpha.getSampleModel()));
                System.out.println(createColorModel(rgb.getSampleModel()));
                System.out.println(createColorModel(rgba.getSampleModel()));
                System.out.println(createColorModel(packed.getSampleModel()));
                System.out.println(createColorModel(bandedSM));
                }                
            </comment>
            <javadoc line="108">
                Creates a &lt;code&gt;ColorModel&lt;/code&gt; that may be used with the
                  specified &lt;code&gt;SampleModel&lt;/code&gt;.  If a suitable
                  &lt;code&gt;ColorModel&lt;/code&gt; cannot be found, this method returns
                  &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt; Suitable &lt;code&gt;ColorModel&lt;/code&gt;s are guaranteed to exist
                  for all instances of &lt;code&gt;ComponentSampleModel&lt;/code&gt;.
                  For 1- and 3- banded &lt;code&gt;SampleModel&lt;/code&gt;s, the returned
                  &lt;code&gt;ColorModel&lt;/code&gt; will be opaque.  For 2- and 4-banded
                  &lt;code&gt;SampleModel&lt;/code&gt;s, the output will use alpha transparency
                  which is not premultiplied.  1- and 2-banded data will use a
                  grayscale &lt;code&gt;ColorSpace&lt;/code&gt;, and 3- and 4-banded data a sRGB
                  &lt;code&gt;ColorSpace&lt;/code&gt;. Data with 5 or more bands will have a
                  &lt;code&gt;BogusColorSpace&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;An instance of &lt;code&gt;DirectColorModel&lt;/code&gt; will be created for
                  instances of &lt;code&gt;SinglePixelPackedSampleModel&lt;/code&gt; with no more
                  than 4 bands.&lt;/p&gt;
                  &lt;p&gt;An instance of &lt;code&gt;IndexColorModel&lt;/code&gt; will be created for
                  instances of &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt;. The colormap
                  will be a grayscale ramp with &lt;code&gt;1&amp;nbsp;&lt;&lt;&amp;nbsp;numberOfBits&lt;/code&gt;
                  entries ranging from zero to at most 255.&lt;/p&gt;                
                <return>
                    An instance of <code>ColorModel</code> that is suitable for
                      the supplied <code>SampleModel</code>, or <code>null</code>.                    
                </return>
                <throws>
                    IllegalArgumentException  If <code>sampleModel</code> is
                      <code>null</code>.                    
                </throws>
            </javadoc>
            <method name="createColorModel" type="ColorModel" line="139">
                <params>
                    <param name="sampleModel" type="SampleModel"/>
                </params>
                <comment line="141">
                    Check the parameter.                    
                </comment>
                <comment line="146">
                    Get the data type.                    
                </comment>
                <comment line="149">
                    Check the data type                    
                </comment>
                <comment line="159">
                    Return null for other types.                    
                </comment>
                <comment line="163">
                    The return variable.                    
                </comment>
                <comment line="166">
                    Get the sample size.                    
                </comment>
                <comment line="169">
                    Create a Component ColorModel.                    
                </comment>
                <comment line="171">
                    Get the number of bands.                    
                </comment>
                <comment line="174">
                    Determine the color space.                    
                </comment>
                <comment line="229">
                    Load the colormap with a ramp.                    
                </comment>
                <scope line="141"/>
                <declaration name="dataType" type="int" line="146"/>
                <declaration name="colorModel" type="ColorModel" line="163"/>
                <declaration name="sampleSize" type="int[]" line="166"/>
                <scope line="169">
                    <declaration name="numBands" type="int" line="171"/>
                    <declaration name="colorSpace" type="ColorSpace" line="174"/>
                    <scope line="175"/>
                    <scope line="177"/>
                    <scope line="179"/>
                    <declaration name="hasAlpha" type="boolean" line="183"/>
                    <declaration name="isAlphaPremultiplied" type="boolean" line="184"/>
                    <declaration name="transparency" type="int" line="185"/>
                </scope>
                <scope line="195">
                    <declaration name="sppsm" type="SinglePixelPackedSampleModel" line="196"/>
                    <declaration name="bitMasks" type="int[]" line="199"/>
                    <declaration name="rmask" type="int" line="200"/>
                    <declaration name="gmask" type="int" line="201"/>
                    <declaration name="bmask" type="int" line="202"/>
                    <declaration name="amask" type="int" line="203"/>
                    <declaration name="numBands" type="int" line="205"/>
                    <scope line="206">
                        <scope line="208"/>
                    </scope>
                    <scope line="211">
                        <scope line="215"/>
                    </scope>
                    <declaration name="bits" type="int" line="220"/>
                    <scope line="221"/>
                </scope>
                <scope line="227">
                    <declaration name="bitsPerSample" type="int" line="229"/>
                    <declaration name="numEntries" type="int" line="230"/>
                    <declaration name="map" type="byte[]" line="231"/>
                    <scope line="232"/>
                </scope>
            </method>
            <javadoc line="244">
                For the case of binary data (&lt;code&gt;isBinary()&lt;/code&gt; returns
                  &lt;code&gt;true&lt;/code&gt;), return the binary data as a packed byte array.
                  The data will be packed as eight bits per byte with no bit offset,
                  i.e., the first bit in each image line will be the left-most of the
                  first byte of the line.  The line stride in bytes will be
                  &lt;code&gt;(int)((getWidth()+7)/8)&lt;/code&gt;.  The length of the returned
                  array will be the line stride multiplied by &lt;code&gt;getHeight()&lt;/code&gt;                
                <return>
                    the binary data as a packed array of bytes with zero offset
                      of <code>null</code> if the data are not binary.                    
                </return>
                <throws>
                    IllegalArgumentException if <code>isBinary()</code> returns
                      <code>false</code> with the <code>SampleModel</code> of the
                      supplied <code>Raster</code> as argument.                    
                </throws>
            </javadoc>
            <method name="getPackedBinaryData" type="byte[]" line="260">
                <params>
                    <param name="raster" type="Raster"/>
                    <param name="rect" type="Rectangle"/>
                </params>
                <comment line="351">
                    bitOffset != 0                    
                </comment>
                <comment line="365">
                    bitOffset % 8 != 0                    
                </comment>
                <declaration name="sm" type="SampleModel" line="261"/>
                <scope line="262"/>
                <declaration name="rectX" type="int" line="266"/>
                <declaration name="rectY" type="int" line="267"/>
                <declaration name="rectWidth" type="int" line="268"/>
                <declaration name="rectHeight" type="int" line="269"/>
                <declaration name="dataBuffer" type="DataBuffer" line="271"/>
                <declaration name="dx" type="int" line="273"/>
                <declaration name="dy" type="int" line="274"/>
                <declaration name="mpp" type="MultiPixelPackedSampleModel" line="276"/>
                <declaration name="lineStride" type="int" line="277"/>
                <declaration name="eltOffset" type="int" line="278"/>
                <declaration name="bitOffset" type="int" line="279"/>
                <declaration name="numBytesPerRow" type="int" line="281"/>
                <scope line="286"/>
                <declaration name="binaryDataArray" type="byte[]" line="290"/>
                <declaration name="b" type="int" line="292"/>
                <scope line="294">
                    <scope line="295">
                        <declaration name="data" type="byte[]" line="296"/>
                        <declaration name="stride" type="int" line="297"/>
                        <declaration name="offset" type="int" line="298"/>
                        <scope line="299"/>
                    </scope>
                    <scope line="307">
                        <declaration name="data" type="short[]" line="308"/>
                        <scope line="312">
                            <declaration name="xRemaining" type="int" line="313"/>
                            <declaration name="i" type="int" line="314"/>
                            <scope line="315">
                                <declaration name="datum" type="short" line="316"/>
                            </scope>
                            <scope line="321"/>
                        </scope>
                    </scope>
                    <scope line="326">
                        <declaration name="data" type="int[]" line="327"/>
                        <scope line="329">
                            <declaration name="xRemaining" type="int" line="330"/>
                            <declaration name="i" type="int" line="331"/>
                            <scope line="332">
                                <declaration name="datum" type="int" line="333"/>
                            </scope>
                            <declaration name="shift" type="int" line="340"/>
                            <scope line="341"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="350">
                    <scope line="351">
                        <declaration name="data" type="byte[]" line="352"/>
                        <scope line="354">
                            <declaration name="stride" type="int" line="355"/>
                            <declaration name="offset" type="int" line="356"/>
                            <scope line="357"/>
                        </scope>
                        <scope line="364">
                            <declaration name="leftShift" type="int" line="365"/>
                            <declaration name="rightShift" type="int" line="366"/>
                            <scope line="367">
                                <declaration name="i" type="int" line="368"/>
                                <declaration name="xRemaining" type="int" line="369"/>
                                <scope line="370">
                                    <scope line="371"/>
                                    <scope line="375"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="385">
                        <declaration name="data" type="short[]" line="386"/>
                        <scope line="390">
                            <declaration name="bOffset" type="int" line="391"/>
                            <scope line="392">
                                <declaration name="i" type="int" line="393"/>
                                <declaration name="mod" type="int" line="394"/>
                                <declaration name="left" type="int" line="395"/>
                                <scope line="396"/>
                                <scope line="398">
                                    <declaration name="delta" type="int" line="399"/>
                                    <declaration name="right" type="int" line="400"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="408">
                        <declaration name="data" type="int[]" line="409"/>
                        <scope line="411">
                            <declaration name="bOffset" type="int" line="412"/>
                            <scope line="413">
                                <declaration name="i" type="int" line="414"/>
                                <declaration name="mod" type="int" line="415"/>
                                <declaration name="left" type="int" line="416"/>
                                <scope line="417"/>
                                <scope line="420">
                                    <declaration name="delta" type="int" line="421"/>
                                    <declaration name="right" type="int" line="422"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="436">
                Returns the binary data unpacked into an array of bytes.
                  The line stride will be the width of the &lt;code&gt;Raster&lt;/code&gt;.                
                <throws>
                    IllegalArgumentException if <code>isBinary()</code> returns
                      <code>false</code> with the <code>SampleModel</code> of the
                      supplied <code>Raster</code> as argument.                    
                </throws>
            </javadoc>
            <method name="getUnpackedBinaryData" type="byte[]" line="445">
                <params>
                    <param name="raster" type="Raster"/>
                    <param name="rect" type="Rectangle"/>
                </params>
                <declaration name="sm" type="SampleModel" line="446"/>
                <scope line="447"/>
                <declaration name="rectX" type="int" line="451"/>
                <declaration name="rectY" type="int" line="452"/>
                <declaration name="rectWidth" type="int" line="453"/>
                <declaration name="rectHeight" type="int" line="454"/>
                <declaration name="dataBuffer" type="DataBuffer" line="456"/>
                <declaration name="dx" type="int" line="458"/>
                <declaration name="dy" type="int" line="459"/>
                <declaration name="mpp" type="MultiPixelPackedSampleModel" line="461"/>
                <declaration name="lineStride" type="int" line="462"/>
                <declaration name="eltOffset" type="int" line="463"/>
                <declaration name="bitOffset" type="int" line="464"/>
                <declaration name="bdata" type="byte[]" line="466"/>
                <declaration name="maxY" type="int" line="467"/>
                <declaration name="maxX" type="int" line="468"/>
                <declaration name="k" type="int" line="469"/>
                <scope line="471">
                    <declaration name="data" type="byte[]" line="472"/>
                    <scope line="473">
                        <declaration name="bOffset" type="int" line="474"/>
                        <scope line="475">
                            <declaration name="b" type="byte" line="476"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="484">
                    <declaration name="data" type="short[]" line="485"/>
                    <scope line="488">
                        <declaration name="bOffset" type="int" line="489"/>
                        <scope line="490">
                            <declaration name="s" type="short" line="491"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="499">
                    <declaration name="data" type="int[]" line="500"/>
                    <scope line="501">
                        <declaration name="bOffset" type="int" line="502"/>
                        <scope line="503">
                            <declaration name="i" type="int" line="504"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="517">
                Sets the supplied &lt;code&gt;Raster&lt;/code&gt;&apos;s data from an array
                  of packed binary data of the form returned by
                  &lt;code&gt;getPackedBinaryData()&lt;/code&gt;.                
                <throws>
                    IllegalArgumentException if <code>isBinary()</code> returns
                      <code>false</code> with the <code>SampleModel</code> of the
                      supplied <code>Raster</code> as argument.                    
                </throws>
            </javadoc>
            <method name="setPackedBinaryData" type="void" line="528">
                <params>
                    <param name="binaryDataArray" type="byte[]"/>
                    <param name="raster" type="WritableRaster"/>
                    <param name="rect" type="Rectangle"/>
                </params>
                <comment line="556">
                    Optimal case: simply return.                    
                </comment>
                <comment line="613">
                    bitOffset != 0                    
                </comment>
                <comment line="627">
                    bitOffset % 8 != 0                    
                </comment>
                <comment line="641">
                    when all the bits in this BYTE will be set
                     into the data buffer.                    
                </comment>
                <comment line="647">
                    All the &quot;leftShift&quot; high bits will be set
                     into the data buffer.  But not all the
                     &quot;rightShift&quot; low bits will be set.                    
                </comment>
                <comment line="657">
                    Less than &quot;leftShift&quot; high bits will be set.                    
                </comment>
                <comment line="690">
                    This BYTE is set into one SHORT                    
                </comment>
                <comment line="692">
                    Mask the bits to be set.                    
                </comment>
                <comment line="697">
                    This BYTE will be set into two SHORTs                    
                </comment>
                <comment line="702">
                    This BYTE will be set into two SHORTs;
                     But not all the low bits will be set into SHORT                    
                </comment>
                <comment line="709">
                    Only some of the high bits will be set into
                     SHORTs                    
                </comment>
                <comment line="735">
                    This BYTE is set into one INT                    
                </comment>
                <comment line="738">
                    Mask the bits to be set.                    
                </comment>
                <comment line="743">
                    All the bits of this BYTE will be set into two INTs                    
                </comment>
                <comment line="747">
                    This BYTE will be set into two INTs;
                     But not all the low bits will be set into INT                    
                </comment>
                <comment line="753">
                    Only some of the high bits will be set into INT                    
                </comment>
                <declaration name="sm" type="SampleModel" line="529"/>
                <scope line="530"/>
                <declaration name="rectX" type="int" line="534"/>
                <declaration name="rectY" type="int" line="535"/>
                <declaration name="rectWidth" type="int" line="536"/>
                <declaration name="rectHeight" type="int" line="537"/>
                <declaration name="dataBuffer" type="DataBuffer" line="539"/>
                <declaration name="dx" type="int" line="541"/>
                <declaration name="dy" type="int" line="542"/>
                <declaration name="mpp" type="MultiPixelPackedSampleModel" line="544"/>
                <declaration name="lineStride" type="int" line="545"/>
                <declaration name="eltOffset" type="int" line="546"/>
                <declaration name="bitOffset" type="int" line="547"/>
                <declaration name="b" type="int" line="549"/>
                <scope line="551">
                    <scope line="552">
                        <declaration name="data" type="byte[]" line="553"/>
                        <scope line="554"/>
                        <declaration name="stride" type="int" line="558"/>
                        <declaration name="offset" type="int" line="559"/>
                        <scope line="560"/>
                    </scope>
                    <scope line="568">
                        <declaration name="data" type="short[]" line="569"/>
                        <scope line="573">
                            <declaration name="xRemaining" type="int" line="574"/>
                            <declaration name="i" type="int" line="575"/>
                            <scope line="576"/>
                            <scope line="582"/>
                        </scope>
                    </scope>
                    <scope line="588">
                        <declaration name="data" type="int[]" line="589"/>
                        <scope line="591">
                            <declaration name="xRemaining" type="int" line="592"/>
                            <declaration name="i" type="int" line="593"/>
                            <scope line="594"/>
                            <declaration name="shift" type="int" line="602"/>
                            <scope line="603"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="612">
                    <declaration name="stride" type="int" line="613"/>
                    <declaration name="offset" type="int" line="614"/>
                    <scope line="615">
                        <declaration name="data" type="byte[]" line="616"/>
                        <scope line="618">
                            <scope line="619"/>
                        </scope>
                        <scope line="626">
                            <declaration name="rightShift" type="int" line="627"/>
                            <declaration name="leftShift" type="int" line="628"/>
                            <declaration name="leftShift8" type="int" line="629"/>
                            <declaration name="mask" type="int" line="630"/>
                            <declaration name="mask1" type="int" line="631"/>
                            <scope line="633">
                                <declaration name="i" type="int" line="634"/>
                                <declaration name="xRemaining" type="int" line="635"/>
                                <scope line="636">
                                    <declaration name="datum" type="byte" line="637"/>
                                    <scope line="639"/>
                                    <scope line="645"/>
                                    <scope line="655">
                                        <declaration name="remainMask" type="int" line="657"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="668">
                        <declaration name="data" type="short[]" line="669"/>
                        <declaration name="rightShift" type="int" line="673"/>
                        <declaration name="leftShift" type="int" line="674"/>
                        <declaration name="leftShift16" type="int" line="675"/>
                        <declaration name="mask" type="int" line="676"/>
                        <declaration name="mask1" type="int" line="677"/>
                        <declaration name="mask2" type="int" line="678"/>
                        <scope line="680">
                            <declaration name="bOffset" type="int" line="681"/>
                            <declaration name="xRemaining" type="int" line="682"/>
                            <scope line="684">
                                <declaration name="i" type="int" line="685"/>
                                <declaration name="mod" type="int" line="686"/>
                                <declaration name="datum" type="int" line="687"/>
                                <scope line="688">
                                    <scope line="690"/>
                                </scope>
                                <scope line="695"/>
                                <scope line="700"/>
                                <scope line="707">
                                    <declaration name="remainMask" type="int" line="710"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="717">
                        <declaration name="data" type="int[]" line="718"/>
                        <declaration name="rightShift" type="int" line="719"/>
                        <declaration name="leftShift" type="int" line="720"/>
                        <declaration name="leftShift32" type="int" line="721"/>
                        <declaration name="mask" type="int" line="722"/>
                        <declaration name="mask1" type="int" line="723"/>
                        <scope line="725">
                            <declaration name="bOffset" type="int" line="726"/>
                            <declaration name="xRemaining" type="int" line="727"/>
                            <scope line="729">
                                <declaration name="i" type="int" line="730"/>
                                <declaration name="mod" type="int" line="731"/>
                                <declaration name="datum" type="int" line="732"/>
                                <scope line="733">
                                    <declaration name="shift" type="int" line="735"/>
                                    <scope line="736"/>
                                </scope>
                                <scope line="741"/>
                                <scope line="745"/>
                                <scope line="751">
                                    <declaration name="remainMask" type="int" line="753"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="764">
                Copies data into the packed array of the &lt;code&gt;Raster&lt;/code&gt;
                  from an array of unpacked data of the form returned by
                  &lt;code&gt;getUnpackedBinaryData()&lt;/code&gt;.
                  &lt;p&gt; If the data are binary, then the target bit will be set if
                  and only if the corresponding byte is non-zero.                
                <throws>
                    IllegalArgumentException if <code>isBinary()</code> returns
                      <code>false</code> with the <code>SampleModel</code> of the
                      supplied <code>Raster</code> as argument.                    
                </throws>
            </javadoc>
            <method name="setUnpackedBinaryData" type="void" line="778">
                <params>
                    <param name="bdata" type="byte[]"/>
                    <param name="raster" type="WritableRaster"/>
                    <param name="rect" type="Rectangle"/>
                </params>
                <declaration name="sm" type="SampleModel" line="779"/>
                <scope line="780"/>
                <declaration name="rectX" type="int" line="784"/>
                <declaration name="rectY" type="int" line="785"/>
                <declaration name="rectWidth" type="int" line="786"/>
                <declaration name="rectHeight" type="int" line="787"/>
                <declaration name="dataBuffer" type="DataBuffer" line="789"/>
                <declaration name="dx" type="int" line="791"/>
                <declaration name="dy" type="int" line="792"/>
                <declaration name="mpp" type="MultiPixelPackedSampleModel" line="794"/>
                <declaration name="lineStride" type="int" line="795"/>
                <declaration name="eltOffset" type="int" line="796"/>
                <declaration name="bitOffset" type="int" line="797"/>
                <declaration name="k" type="int" line="799"/>
                <scope line="801">
                    <declaration name="data" type="byte[]" line="802"/>
                    <scope line="803">
                        <declaration name="bOffset" type="int" line="804"/>
                        <scope line="805">
                            <scope line="806"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="815">
                    <declaration name="data" type="short[]" line="816"/>
                    <scope line="819">
                        <declaration name="bOffset" type="int" line="820"/>
                        <scope line="821">
                            <scope line="822"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="831">
                    <declaration name="data" type="int[]" line="832"/>
                    <scope line="833">
                        <declaration name="bOffset" type="int" line="834"/>
                        <scope line="835">
                            <scope line="836"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isBinary" type="boolean" line="848">
                <params>
                    <param name="sm" type="SampleModel"/>
                </params>
            </method>
            <method name="createColorModel" type="ColorModel" line="855">
                <params>
                    <param name="colorSpace" type="ColorSpace"/>
                    <param name="sampleModel" type="SampleModel"/>
                </params>
                <comment line="871">
                    dataType == DataBuffer.TYPE_SHORT ||                    
                </comment>
                <declaration name="colorModel" type="ColorModel" line="856"/>
                <scope line="858"/>
                <declaration name="numBands" type="int" line="862"/>
                <scope line="863"/>
                <declaration name="dataType" type="int" line="867"/>
                <scope line="868">
                    <scope line="871"/>
                    <declaration name="useAlpha" type="boolean" line="881"/>
                    <declaration name="transparency" type="int" line="882"/>
                    <declaration name="premultiplied" type="boolean" line="885"/>
                    <declaration name="dataTypeSize" type="int" line="887"/>
                    <declaration name="bits" type="int[]" line="888"/>
                    <scope line="889"/>
                </scope>
                <scope line="899">
                    <declaration name="sppsm" type="SinglePixelPackedSampleModel" line="900"/>
                    <declaration name="bitMasks" type="int[]" line="903"/>
                    <declaration name="rmask" type="int" line="904"/>
                    <declaration name="gmask" type="int" line="905"/>
                    <declaration name="bmask" type="int" line="906"/>
                    <declaration name="amask" type="int" line="907"/>
                    <scope line="910">
                        <scope line="912"/>
                    </scope>
                    <scope line="915">
                        <scope line="919"/>
                    </scope>
                    <declaration name="sampleSize" type="int[]" line="924"/>
                    <declaration name="bits" type="int" line="925"/>
                    <scope line="926"/>
                </scope>
                <scope line="938">
                    <declaration name="bits" type="int" line="939"/>
                    <declaration name="size" type="int" line="941"/>
                    <declaration name="comp" type="byte[]" line="942"/>
                </scope>
            </method>
            <method name="getElementSize" type="int" line="953">
                <params>
                    <param name="sm" type="SampleModel"/>
                </params>
                <declaration name="elementSize" type="int" line="954"/>
                <scope line="956">
                    <declaration name="mppsm" type="MultiPixelPackedSampleModel" line="957"/>
                </scope>
                <scope line="960"/>
                <scope line="962"/>
            </method>
            <method name="getTileSize" type="long" line="970">
                <params>
                    <param name="sm" type="SampleModel"/>
                </params>
                <declaration name="elementSize" type="int" line="971"/>
                <scope line="973">
                    <declaration name="mppsm" type="MultiPixelPackedSampleModel" line="974"/>
                </scope>
                <scope line="979">
                    <declaration name="csm" type="ComponentSampleModel" line="980"/>
                    <declaration name="bandOffsets" type="int[]" line="981"/>
                    <declaration name="maxBandOff" type="int" line="982"/>
                    <declaration name="size" type="long" line="986"/>
                    <declaration name="pixelStride" type="int" line="987"/>
                    <declaration name="scanlineStride" type="int" line="988"/>
                    <declaration name="bankIndices" type="int[]" line="996"/>
                </scope>
                <scope line="1001">
                    <declaration name="sppsm" type="SinglePixelPackedSampleModel" line="1002"/>
                    <declaration name="size" type="long" line="1004"/>
                </scope>
            </method>
            <method name="getBandSize" type="long" line="1012">
                <params>
                    <param name="sm" type="SampleModel"/>
                </params>
                <declaration name="elementSize" type="int" line="1013"/>
                <scope line="1015">
                    <declaration name="csm" type="ComponentSampleModel" line="1016"/>
                    <declaration name="pixelStride" type="int" line="1017"/>
                    <declaration name="scanlineStride" type="int" line="1018"/>
                    <declaration name="size" type="long" line="1019"/>
                </scope>
            </method>
            <javadoc line="1029">
                Tests whether the color indices represent a gray-scale image.                
                <param>
                    r The red channel color indices.                    
                </param>
                <param>
                    g The green channel color indices.                    
                </param>
                <param>
                    b The blue channel color indices.                    
                </param>
                <return>
                    If all the indices have 256 entries, and are identical mappings,
                      return <code>true</code>; otherwise, return <code>false</code>.                    
                </return>
            </javadoc>
            <method name="isIndicesForGrayscale" type="boolean" line="1038">
                <params>
                    <param name="r" type="byte[]"/>
                    <param name="g" type="byte[]"/>
                    <param name="b" type="byte[]"/>
                </params>
                <declaration name="size" type="int" line="1042"/>
                <scope line="1047">
                    <declaration name="temp" type="byte" line="1048"/>
                </scope>
            </method>
            <javadoc line="1057">
                Converts the provided object to &lt;code&gt;String&lt;/code&gt;                
            </javadoc>
            <method name="convertObjectToString" type="String" line="1058">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="s" type="String" line="1062"/>
                <scope line="1063">
                    <declaration name="bArray" type="byte[]" line="1064"/>
                </scope>
                <scope line="1070">
                    <declaration name="iArray" type="int[]" line="1071"/>
                </scope>
                <scope line="1077">
                    <declaration name="sArray" type="short[]" line="1078"/>
                </scope>
            </method>
            <javadoc line="1088">
                Checks that the provided &lt;code&gt;ImageWriter&lt;/code&gt; can encode
                  the provided &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; or not.  If not, an
                  &lt;code&gt;IIOException&lt;/code&gt; will be thrown.                
                <param>
                    writer The provided <code>ImageWriter</code>.                    
                </param>
                <param>
                    type The image to be tested.                    
                </param>
                <throws>
                    IIOException If the writer cannot encoded the provided image.                    
                </throws>
            </javadoc>
            <method name="canEncodeImage" type="void" line="1097">
                <params>
                    <param name="writer" type="ImageWriter"/>
                    <param name="type" type="ImageTypeSpecifier"/>
                </params>
                <declaration name="spi" type="ImageWriterSpi" line="1098"/>
                <scope line="1100"/>
            </method>
            <javadoc line="1106">
                Checks that the provided &lt;code&gt;ImageWriter&lt;/code&gt; can encode
                  the provided &lt;code&gt;ColorModel&lt;/code&gt; and &lt;code&gt;SampleModel&lt;/code&gt;.
                  If not, an &lt;code&gt;IIOException&lt;/code&gt; will be thrown.                
                <param>
                    writer The provided <code>ImageWriter</code>.                    
                </param>
                <param>
                    colorModel The provided <code>ColorModel</code>.                    
                </param>
                <param>
                    sampleModel The provided <code>SampleModel</code>.                    
                </param>
                <throws>
                    IIOException If the writer cannot encoded the provided image.                    
                </throws>
            </javadoc>
            <method name="canEncodeImage" type="void" line="1117">
                <params>
                    <param name="writer" type="ImageWriter"/>
                    <param name="colorModel" type="ColorModel"/>
                    <param name="sampleModel" type="SampleModel"/>
                </params>
                <declaration name="type" type="ImageTypeSpecifier" line="1118"/>
            </method>
            <javadoc line="1124">
                Returns whether the image has contiguous data across rows.                
            </javadoc>
            <method name="imageIsContiguous" type="boolean" line="1127">
                <params>
                    <param name="image" type="RenderedImage"/>
                </params>
                <comment line="1138">
                    Ensure image rows samples are stored contiguously
                     in a single bank.                    
                </comment>
                <comment line="1163">
                    Otherwise true if and only if it&apos;s a bilevel image with
                     a MultiPixelPackedSampleModel, 1 bit per pixel, and 1 bit
                     pixel stride.                    
                </comment>
                <declaration name="sm" type="SampleModel" line="1128"/>
                <scope line="1129">
                    <declaration name="ras" type="WritableRaster" line="1130"/>
                </scope>
                <scope line="1132"/>
                <scope line="1136">
                    <declaration name="csm" type="ComponentSampleModel" line="1139"/>
                    <scope line="1141"/>
                    <declaration name="bandOffsets" type="int[]" line="1145"/>
                    <scope line="1146">
                        <scope line="1147"/>
                    </scope>
                    <declaration name="bankIndices" type="int[]" line="1152"/>
                    <scope line="1153">
                        <scope line="1154"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>