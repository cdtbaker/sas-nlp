<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.jpeg">
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.ImageReader"/>
        <import package="javax.imageio.ImageReadParam"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.spi.ImageReaderSpi"/>
        <import package="javax.imageio.stream.ImageInputStream"/>
        <import package="javax.imageio.plugins.jpeg.JPEGImageReadParam"/>
        <import package="javax.imageio.plugins.jpeg.JPEGQTable"/>
        <import package="javax.imageio.plugins.jpeg.JPEGHuffmanTable"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.color.ICC_Profile"/>
        <import package="java.awt.color.ICC_ColorSpace"/>
        <import package="java.awt.color.CMMException"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferByte"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.ColorConvertOp"/>
        <import package="java.io.IOException"/>
        <import package="java.util.List"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.DisposerRecord"/>
        <class name="JPEGImageReader" line="33">
            <extends class="ImageReader"/>
            <declaration name="debug" type="boolean" line="34"/>
            <declaration name="structPointer" type="long" line="35"/>
            <javadoc line="35">
                The following variable contains a pointer to the IJG library
                  structure for this reader.  It is assigned in the constructor
                  and then is passed in to every native call.  It is set to 0
                  by dispose to avoid disposing twice.                
            </javadoc>
            <declaration name="iis" type="ImageInputStream" line="42"/>
            <javadoc line="42">
                The input stream we read from                
            </javadoc>
            <declaration name="imagePositions" type="List" line="46"/>
            <javadoc line="46">
                List of stream positions for images, reinitialized every time
                  a new input source is set.                
            </javadoc>
            <declaration name="numImages" type="int" line="51"/>
            <javadoc line="51">
                The number of images in the stream, or 0.                
            </javadoc>
            <scope line="55"/>
            <declaration name="WARNING_NO_EOI" type="int" line="59"/>
            <javadoc line="59">
                Warning code to be passed to warningOccurred to indicate
                  that the EOI marker is missing from the end of the stream.
                  This usually signals that the stream is corrupted, but
                  everything up to the last MCU should be usable.                
            </javadoc>
            <declaration name="WARNING_NO_JFIF_IN_THUMB" type="int" line="66"/>
            <javadoc line="66">
                Warning code to be passed to warningOccurred to indicate
                  that a JFIF segment was encountered inside a JFXX JPEG
                  thumbnail and is being ignored.                
            </javadoc>
            <declaration name="WARNING_IGNORE_INVALID_ICC" type="int" line="72"/>
            <javadoc line="72">
                Warning code to be passed to warningOccurred to indicate
                  that embedded ICC profile is invalid and will be ignored.                
            </javadoc>
            <declaration name="MAX_WARNING" type="int" line="77"/>
            <declaration name="currentImage" type="int" line="78"/>
            <javadoc line="78">
                Image index of image for which header information
                  is available.                
            </javadoc>
            <declaration name="width" type="int" line="83"/>
            <javadoc line="83">
                Set by setImageData native code callback                
            </javadoc>
            <declaration name="height" type="int" line="87"/>
            <javadoc line="87">
                Set by setImageData native code callback                
            </javadoc>
            <declaration name="colorSpaceCode" type="int" line="91"/>
            <javadoc line="91">
                Set by setImageData native code callback.  A modified
                  IJG+NIFTY colorspace code.                
            </javadoc>
            <declaration name="outColorSpaceCode" type="int" line="96"/>
            <javadoc line="96">
                Set by setImageData native code callback.  A modified
                  IJG+NIFTY colorspace code.                
            </javadoc>
            <declaration name="numComponents" type="int" line="101"/>
            <javadoc line="101">
                Set by setImageData native code callback                
            </javadoc>
            <declaration name="iccCS" type="ColorSpace" line="105"/>
            <javadoc line="105">
                Set by setImageData native code callback                
            </javadoc>
            <declaration name="convert" type="ColorConvertOp" line="109"/>
            <javadoc line="109">
                If we need to post-convert in Java, convert with this op                
            </javadoc>
            <declaration name="image" type="BufferedImage" line="113"/>
            <javadoc line="113">
                The image we are going to fill                
            </javadoc>
            <declaration name="raster" type="WritableRaster" line="117"/>
            <javadoc line="117">
                An intermediate Raster to hold decoded data                
            </javadoc>
            <declaration name="target" type="WritableRaster" line="121"/>
            <javadoc line="121">
                A view of our target Raster that we can setRect to                
            </javadoc>
            <declaration name="buffer" type="DataBufferByte" line="125"/>
            <javadoc line="125">
                The databuffer for the above Raster                
            </javadoc>
            <declaration name="destROI" type="Rectangle" line="129"/>
            <javadoc line="129">
                The region in the destination where we will write pixels                
            </javadoc>
            <declaration name="destinationBands" type="int[]" line="133"/>
            <javadoc line="133">
                The list of destination bands, if any                
            </javadoc>
            <declaration name="streamMetadata" type="JPEGMetadata" line="137"/>
            <javadoc line="137">
                Stream metadata, cached, even when the stream is changed.                
            </javadoc>
            <declaration name="imageMetadata" type="JPEGMetadata" line="141"/>
            <javadoc line="141">
                Image metadata, valid for the imageMetadataIndex only.                
            </javadoc>
            <declaration name="imageMetadataIndex" type="int" line="145"/>
            <declaration name="haveSeeked" type="boolean" line="146"/>
            <javadoc line="146">
                Set to true every time we seek in the stream; used to
                  invalidate the native buffer contents in C.                
            </javadoc>
            <declaration name="abbrevQTables" type="JPEGQTable[]" line="151"/>
            <javadoc line="151">
                Tables that have been read from a tables-only image at the
                  beginning of a stream.                
            </javadoc>
            <declaration name="abbrevDCHuffmanTables" type="JPEGHuffmanTable[]" line="156"/>
            <declaration name="abbrevACHuffmanTables" type="JPEGHuffmanTable[]" line="157"/>
            <declaration name="minProgressivePass" type="int" line="158"/>
            <declaration name="maxProgressivePass" type="int" line="159"/>
            <declaration name="UNKNOWN" type="int" line="160"/>
            <javadoc line="160">
                Variables used by progress monitoring.                
            </javadoc>
            <declaration name="MIN_ESTIMATED_PASSES" type="int" line="164"/>
            <declaration name="knownPassCount" type="int" line="165"/>
            <declaration name="pass" type="int" line="166"/>
            <declaration name="percentToDate" type="float" line="167"/>
            <declaration name="previousPassPercentage" type="float" line="168"/>
            <declaration name="progInterval" type="int" line="169"/>
            <declaration name="tablesOnlyChecked" type="boolean" line="170"/>
            <javadoc line="170">
                Set to true once stream has been checked for stream metadata                
            </javadoc>
            <declaration name="disposerReferent" type="Object" line="174"/>
            <javadoc line="174">
                The referent to be registered with the Disposer.                
            </javadoc>
            <declaration name="disposerRecord" type="DisposerRecord" line="178"/>
            <javadoc line="178">
                The DisposerRecord that handles the actual disposal of this reader.                
            </javadoc>
            <method name="initReaderIDs" type="void" line="182"/>
            <javadoc line="182">
                Sets up static C structures.                
            </javadoc>
            <method name="JPEGImageReader" type="constructor" line="186">
                <params>
                    <param name="originator" type="ImageReaderSpi"/>
                </params>
            </method>
            <method name="initJPEGImageReader" type="long" line="192"/>
            <javadoc line="192">
                Sets up per-reader C structure and returns a pointer to it.                
            </javadoc>
            <javadoc line="196">
                Called by the native code or other classes to signal a warning.
                  The code is used to lookup a localized message to be used when
                  sending warnings to listeners.                
            </javadoc>
            <method name="warningOccurred" type="void" line="201">
                <params>
                    <param name="code" type="int"/>
                </params>
                <scope line="202"/>
            </method>
            <javadoc line="207">
                The library has it&apos;s own error facility that emits warning messages.
                  This routine is called by the native code when it has already
                  formatted a string for output.
                  XXX  For truly complete localization of all warning messages,
                  the sun_jpeg_output_message routine in the native code should
                  send only the codes and parameters to a method here in Java,
                  which will then format and send the warnings, using localized
                  strings.  This method will have to deal with all the parameters
                  and formats (%u with possibly large numbers, %02d, %02x, etc.)
                  that actually occur in the JPEG library.  For now, this prevents
                  library warnings from being printed to stderr.                
            </javadoc>
            <method name="warningWithMessage" type="void" line="220">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="setInput" type="void" line="223">
                <params>
                    <param name="input" type="Object"/>
                    <param name="seekForwardOnly" type="boolean"/>
                    <param name="ignoreMetadata" type="boolean"/>
                </params>
                <scope line="225"/>
                <scope line="232"/>
            </method>
            <method name="setSource" type="void" line="236"/>
            <method name="checkTablesOnly" type="void" line="237">
                <scope line="238"/>
                <declaration name="savePos" type="long" line="241"/>
                <scope line="242"/>
                <declaration name="tablesOnly" type="boolean" line="246"/>
                <scope line="247">
                    <scope line="248">
                        <declaration name="pos" type="long" line="250"/>
                    </scope>
                    <scope line="253">
                        <declaration name="pos" type="long" line="257"/>
                        <scope line="258"/>
                    </scope>
                    <scope line="262"/>
                </scope>
                <scope line="266"/>
                <scope line="270">
                    <declaration name="pos" type="Long" line="271"/>
                </scope>
            </method>
            <method name="getNumImages" type="int" line="276">
                <params>
                    <param name="allowSearch" type="boolean"/>
                </params>
                <scope line="278"/>
                <scope line="281"/>
            </method>
            <method name="getNumImagesOnThread" type="int" line="285">
                <params>
                    <param name="allowSearch" type="boolean"/>
                </params>
                <scope line="286"/>
                <scope line="289"/>
                <scope line="292">
                    <scope line="293"/>
                    <scope line="296"/>
                    <declaration name="buffer" type="JPEGBuffer" line="301"/>
                    <declaration name="done" type="boolean" line="303"/>
                    <scope line="304">
                        <declaration name="length" type="int" line="326"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="337">
                Sets the input stream to the start of the requested image.
                  &lt;pre&gt;                
                <exception>
                    IllegalStateException if the input source has not been
                      set.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if the supplied index is
                      out of bounds.
                      &lt;/pre&gt;                    
                </exception>
            </javadoc>
            <method name="gotoImage" type="void" line="346">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="347"/>
                <scope line="350"/>
                <scope line="353"/>
                <scope line="356"/>
                <scope line="359">
                    <declaration name="pos" type="Long" line="360"/>
                    <scope line="363">
                        <scope line="364"/>
                        <scope line="369"/>
                        <scope line="372"/>
                    </scope>
                </scope>
                <scope line="377"/>
            </method>
            <javadoc line="382">
                Skip over a complete image in the stream, leaving the stream
                  positioned such that the next byte to be read is the first
                  byte of the next image.  For JPEG, this means that we read
                  until we encounter an EOI marker or until the end of the stream.
                  If the stream ends before an EOI marker is encountered, an
                  IndexOutOfBoundsException is thrown.                
            </javadoc>
            <method name="skipImage" type="void" line="390">
                <scope line="391"/>
                <declaration name="foundFF" type="boolean" line="394"/>
                <scope line="395">
                    <scope line="396">
                        <scope line="397"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="405">
                Returns &lt;code&gt;true&lt;/code&gt; if there is an image beyond
                  the current stream position.  Does not disturb the
                  stream position.                
            </javadoc>
            <method name="hasNextImage" type="boolean" line="410">
                <scope line="411"/>
                <declaration name="foundFF" type="boolean" line="415"/>
                <scope line="416">
                    <scope line="417">
                        <scope line="418">
                            <scope line="420"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="429"/>
            </method>
            <javadoc line="434">
                Push back the given number of bytes to the input stream.
                  Called by the native code at the end of each image so
                  that the next one can be identified from Java.                
            </javadoc>
            <method name="pushBack" type="void" line="439">
                <params>
                    <param name="num" type="int"/>
                </params>
                <scope line="440"/>
            </method>
            <javadoc line="445">
                Reads header information for the given image, if possible.                
            </javadoc>
            <method name="readHeader" type="void" line="448">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="reset" type="boolean"/>
                </params>
            </method>
            <method name="readNativeHeader" type="boolean" line="453">
                <params>
                    <param name="reset" type="boolean"/>
                </params>
                <declaration name="retval" type="boolean" line="454"/>
            </method>
            <method name="readImageHeader" type="boolean" line="459"/>
            <javadoc line="459">
                Read in the header information starting from the current
                  stream position, returning &lt;code&gt;true&lt;/code&gt; if the
                  header was a tables-only image.  After this call, the
                  native IJG decompression struct will contain the image
                  information required by most query calls below
                  (e.g. getWidth, getHeight, etc.), if the header was not
                  a tables-only image.
                  If reset is &lt;code&gt;true&lt;/code&gt;, the state of the IJG
                  object is reset so that it can read a header again.
                  This happens automatically if the header was a tables-only
                  image.                
            </javadoc>
            <method name="setImageData" type="void" line="473">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="colorSpaceCode" type="int"/>
                    <param name="outColorSpaceCode" type="int"/>
                    <param name="numComponents" type="int"/>
                    <param name="iccData" type="byte[]"/>
                </params>
                <scope line="479"/>
                <declaration name="newProfile" type="ICC_Profile" line="483"/>
                <scope line="484"/>
                <scope line="487"/>
                <declaration name="newData" type="byte[]" line="492"/>
                <declaration name="oldProfile" type="ICC_Profile" line="493"/>
                <scope line="494"/>
                <declaration name="oldData" type="byte[]" line="497"/>
                <scope line="498"/>
                <scope line="501">
                    <scope line="503">
                        <declaration name="colors" type="float[]" line="504"/>
                    </scope>
                    <scope line="506"/>
                </scope>
            </method>
            <method name="getWidth" type="int" line="512">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="514">
                    <scope line="515"/>
                </scope>
                <scope line="520"/>
            </method>
            <method name="getHeight" type="int" line="524">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="526">
                    <scope line="527"/>
                </scope>
                <scope line="532"/>
            </method>
            <javadoc line="536">
                Return an ImageTypeSpecifier corresponding to the given
                  color space code, or null if the color space is unsupported.                
            </javadoc>
            <method name="getImageType" type="ImageTypeProducer" line="540">
                <params>
                    <param name="code" type="int"/>
                </params>
                <declaration name="ret" type="ImageTypeProducer" line="541"/>
                <scope line="542"/>
            </method>
            <method name="getRawImageType" type="ImageTypeSpecifier" line="547">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="549">
                    <scope line="550"/>
                </scope>
                <scope line="555"/>
            </method>
            <method name="getImageTypes" type="Iterator" line="559">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="561"/>
                <scope line="564"/>
            </method>
            <method name="getImageTypesOnThread" type="Iterator" line="568">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="569"/>
                <declaration name="raw" type="ImageTypeProducer" line="572"/>
                <declaration name="list" type="ArrayList&amp;lt;ImageTypeProducer&amp;gt;" line="573"/>
                <scope line="588"/>
                <scope line="594"/>
                <scope line="600">
                    <anonymous_class line="601">
                        <method name="produce" type="ImageTypeSpecifier" line="602"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="617">
                Checks the implied color conversion between the stream and
                  the target image, altering the IJG output color space if necessary.
                  If a java color conversion is required, then this sets up
                  &lt;code&gt;convert&lt;/code&gt;.
                  If bands are being rearranged at all (either source or destination
                  bands are specified in the param), then the default color
                  conversions are assumed to be correct.
                  Throws an IIOException if there is no conversion available.                
            </javadoc>
            <method name="checkColorConversion" type="void" line="627">
                <params>
                    <param name="image" type="BufferedImage"/>
                    <param name="param" type="ImageReadParam"/>
                </params>
                <scope line="628">
                    <scope line="629"/>
                </scope>
                <declaration name="cm" type="ColorModel" line="633"/>
                <scope line="634"/>
                <declaration name="cs" type="ColorSpace" line="637"/>
                <declaration name="csType" type="int" line="638"/>
                <scope line="642"/>
                <scope line="647"/>
                <scope line="652">
                    <scope line="653"/>
                </scope>
                <scope line="659"/>
                <scope line="662"/>
                <scope line="665"/>
                <scope line="670"/>
                <scope line="675">
                    <declaration name="YCC" type="ColorSpace" line="676"/>
                    <scope line="677"/>
                    <scope line="680"/>
                </scope>
                <scope line="686">
                    <declaration name="YCC" type="ColorSpace" line="687"/>
                    <scope line="688"/>
                </scope>
            </method>
            <method name="setOutColorSpace" type="void" line="697"/>
            <javadoc line="697">
                Set the IJG output space to the given value.  The library will
                  perform the appropriate colorspace conversions.                
            </javadoc>
            <method name="getDefaultReadParam" type="ImageReadParam" line="702"/>
            <method name="getStreamMetadata" type="IIOMetadata" line="705">
                <scope line="707">
                    <scope line="708"/>
                </scope>
                <scope line="713"/>
            </method>
            <method name="getImageMetadata" type="IIOMetadata" line="717">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="719">
                    <scope line="720"/>
                </scope>
                <scope line="728"/>
            </method>
            <method name="read" type="BufferedImage" line="732">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="param" type="ImageReadParam"/>
                </params>
                <scope line="734">
                    <scope line="735"/>
                    <scope line="738"/>
                    <scope line="742"/>
                    <declaration name="ret" type="BufferedImage" line="746"/>
                </scope>
                <scope line="750"/>
            </method>
            <method name="readInternal" type="Raster" line="754">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="param" type="ImageReadParam"/>
                    <param name="wantRaster" type="boolean"/>
                </params>
                <declaration name="imRas" type="WritableRaster" line="756"/>
                <declaration name="numImageBands" type="int" line="757"/>
                <scope line="758">
                    <declaration name="imageTypes" type="Iterator" line="759"/>
                    <scope line="760"/>
                </scope>
                <scope line="769"/>
                <declaration name="srcBands" type="int[]" line="773"/>
                <declaration name="numRasterBands" type="int" line="774"/>
                <declaration name="srcROI" type="Rectangle" line="776"/>
                <declaration name="periodX" type="int" line="779"/>
                <declaration name="periodY" type="int" line="780"/>
                <scope line="783">
                    <declaration name="sBands" type="int[]" line="786"/>
                    <scope line="787"/>
                    <scope line="791"/>
                    <scope line="796">
                        <declaration name="jparam" type="JPEGImageReadParam" line="797"/>
                        <scope line="798"/>
                    </scope>
                </scope>
                <declaration name="lineSize" type="int" line="805"/>
                <declaration name="bandOffs" type="int[]" line="807"/>
                <scope line="809"/>
                <scope line="812"/>
                <declaration name="bandSizes" type="int[]" line="815"/>
                <declaration name="callbackUpdates" type="boolean" line="816"/>
                <scope line="818">
                    <scope line="820">
                        <scope line="821"/>
                    </scope>
                </scope>
                <scope line="827"/>
                <scope line="830"/>
                <scope line="833">
                    <scope line="840">
                        <scope line="841"/>
                    </scope>
                </scope>
                <declaration name="aborted" type="boolean" line="855"/>
                <scope line="857"/>
                <scope line="860"/>
            </method>
            <javadoc line="865">
                This method is called back from C when the intermediate Raster
                  is full.  The parameter indicates the scanline in the target
                  Raster to which the intermediate Raster should be copied.
                  After the copy, we notify update listeners.                
            </javadoc>
            <method name="acceptPixels" type="void" line="871">
                <params>
                    <param name="y" type="int"/>
                    <param name="progressive" type="boolean"/>
                </params>
                <scope line="872"/>
                <scope line="877">
                    <declaration name="height" type="int" line="878"/>
                    <declaration name="percentOfPass" type="float" line="879"/>
                    <scope line="880">
                        <scope line="881"/>
                        <scope line="884"/>
                        <scope line="887">
                            <declaration name="remainingPasses" type="int" line="888"/>
                            <declaration name="totalPasses" type="int" line="889"/>
                            <scope line="891">
                                <scope line="893"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="907"/>
                </scope>
            </method>
            <method name="initProgressData" type="void" line="912"/>
            <method name="passStarted" type="void" line="919">
                <params>
                    <param name="pass" type="int"/>
                </params>
            </method>
            <method name="passComplete" type="void" line="924"/>
            <method name="thumbnailStarted" type="void" line="927">
                <params>
                    <param name="thumbnailIndex" type="int"/>
                </params>
            </method>
            <method name="thumbnailProgress" type="void" line="930">
                <params>
                    <param name="percentageDone" type="float"/>
                </params>
            </method>
            <method name="thumbnailComplete" type="void" line="933"/>
            <method name="readImage" type="boolean" line="936"/>
            <javadoc line="936">
                Returns &lt;code&gt;true&lt;/code&gt; if the read was aborted.                
            </javadoc>
            <method name="abort" type="void" line="940">
                <scope line="942"/>
                <scope line="946"/>
            </method>
            <method name="abortRead" type="void" line="950"/>
            <javadoc line="950">
                Set the C level abort flag. Keep it atomic for thread safety.                
            </javadoc>
            <method name="resetLibraryState" type="void" line="954"/>
            <javadoc line="954">
                Resets library state when an exception occurred during a read.                
            </javadoc>
            <method name="canReadRaster" type="boolean" line="958"/>
            <method name="readRaster" type="Raster" line="961">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="param" type="ImageReadParam"/>
                </params>
                <declaration name="retval" type="Raster" line="963"/>
                <scope line="964">
                    <declaration name="saveDestOffset" type="Point" line="965"/>
                    <scope line="966"/>
                    <scope line="971"/>
                </scope>
                <scope line="975"/>
                <scope line="979"/>
                <scope line="983"/>
            </method>
            <method name="readerSupportsThumbnails" type="boolean" line="988"/>
            <method name="getNumThumbnails" type="int" line="991">
                <params>
                    <param name="imageIndex" type="int"/>
                </params>
                <scope line="993">
                    <declaration name="jfif" type="JFIFMarkerSegment" line="995"/>
                    <declaration name="retval" type="int" line="996"/>
                    <scope line="997"/>
                </scope>
                <scope line="1003"/>
            </method>
            <method name="getThumbnailWidth" type="int" line="1007">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="thumbnailIndex" type="int"/>
                </params>
                <scope line="1009">
                    <scope line="1010"/>
                    <declaration name="jfif" type="JFIFMarkerSegment" line="1013"/>
                </scope>
                <scope line="1016"/>
            </method>
            <method name="getThumbnailHeight" type="int" line="1020">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="thumbnailIndex" type="int"/>
                </params>
                <scope line="1022">
                    <scope line="1023"/>
                    <declaration name="jfif" type="JFIFMarkerSegment" line="1026"/>
                </scope>
                <scope line="1029"/>
            </method>
            <method name="readThumbnail" type="BufferedImage" line="1033">
                <params>
                    <param name="imageIndex" type="int"/>
                    <param name="thumbnailIndex" type="int"/>
                </params>
                <scope line="1035">
                    <scope line="1036"/>
                    <declaration name="jfif" type="JFIFMarkerSegment" line="1039"/>
                </scope>
                <scope line="1042"/>
            </method>
            <method name="resetInternalState" type="void" line="1046"/>
            <method name="reset" type="void" line="1065">
                <scope line="1067"/>
                <scope line="1070"/>
            </method>
            <method name="resetReader" type="void" line="1074"/>
            <method name="dispose" type="void" line="1075">
                <scope line="1077">
                    <scope line="1078"/>
                </scope>
                <scope line="1083"/>
            </method>
            <method name="disposeReader" type="void" line="1087"/>
            <class name="JPEGReaderDisposerRecord" line="1088">
                <implements interface="DisposerRecord"/>
                <declaration name="pData" type="long" line="1089"/>
                <method name="JPEGReaderDisposerRecord" type="constructor" line="1090">
                    <params>
                        <param name="pData" type="long"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="1093">
                    <scope line="1094"/>
                </method>
            </class>
            <declaration name="theThread" type="Thread" line="1100"/>
            <declaration name="theLockCount" type="int" line="1101"/>
            <method name="setThreadLock" type="void" line="1102">
                <declaration name="currThread" type="Thread" line="1103"/>
                <scope line="1104">
                    <scope line="1105"/>
                    <scope line="1108"/>
                </scope>
                <scope line="1112"/>
            </method>
            <method name="clearThreadLock" type="void" line="1117">
                <declaration name="currThread" type="Thread" line="1118"/>
                <scope line="1119"/>
                <scope line="1123"/>
            </method>
        </class>
        <class name="ImageTypeIterator" line="1128">
            <implements interface="Iterator">
                <type_params>
                    <type_param name="ImageTypeSpecifier"/>
                </type_params>
            </implements>
            <javadoc line="1128">
                An internal helper class that wraps producer&apos;s iterator
                  and extracts specifier instances on demand.                
            </javadoc>
            <declaration name="producers" type="Iterator&amp;lt;ImageTypeProducer&amp;gt;" line="1133"/>
            <declaration name="theNext" type="ImageTypeSpecifier" line="1134"/>
            <method name="ImageTypeIterator" type="constructor" line="1135">
                <params>
                    <param name="producers" type="Iterator&lt;ImageTypeProducer&gt;"/>
                </params>
            </method>
            <method name="hasNext" type="boolean" line="1138">
                <scope line="1139"/>
                <scope line="1142"/>
                <scope line="1145"/>
            </method>
            <method name="next" type="ImageTypeSpecifier" line="1151">
                <scope line="1152">
                    <declaration name="t" type="ImageTypeSpecifier" line="1153"/>
                </scope>
                <scope line="1157"/>
            </method>
            <method name="remove" type="void" line="1161"/>
        </class>
        <class name="ImageTypeProducer" line="1165">
            <javadoc line="1165">
                An internal helper class that provides means for deferred creation
                  of ImageTypeSpecifier instance required to describe available
                  destination types.
                  This implementation only supports standard
                  jpeg color spaces (defined by corresponding JCS color space code).
                  To support other color spaces one can override produce() method to
                  return custom instance of ImageTypeSpecifier.                
            </javadoc>
            <declaration name="type" type="ImageTypeSpecifier" line="1175"/>
            <declaration name="failed" type="boolean" line="1176"/>
            <declaration name="csCode" type="int" line="1177"/>
            <method name="ImageTypeProducer" type="constructor" line="1178">
                <params>
                    <param name="csCode" type="int"/>
                </params>
            </method>
            <method name="ImageTypeProducer" type="constructor" line="1181"/>
            <method name="getType" type="ImageTypeSpecifier" line="1184">
                <scope line="1185">
                    <scope line="1186"/>
                    <scope line="1189"/>
                </scope>
            </method>
            <declaration name="defaultTypes" type="ImageTypeProducer[]" line="1195"/>
            <method name="getTypeProducer" type="ImageTypeProducer" line="1196">
                <params>
                    <param name="csCode" type="int"/>
                </params>
                <scope line="1197"/>
                <scope line="1200"/>
            </method>
            <method name="produce" type="ImageTypeSpecifier" line="1205">
                <scope line="1214"/>
                <scope line="1217"/>
                <scope line="1221"/>
                <scope line="1224"/>
            </method>
        </class>
    </source>