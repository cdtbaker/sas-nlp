<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.gif">
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.ComponentSampleModel"/>
        <import package="java.awt.image.DataBufferByte"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteOrder"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Locale"/>
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.IIOImage"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.ImageWriteParam"/>
        <import package="javax.imageio.ImageWriter"/>
        <import package="javax.imageio.spi.ImageWriterSpi"/>
        <import package="javax.imageio.metadata.IIOInvalidTreeException"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.metadata.IIOMetadataFormatImpl"/>
        <import package="javax.imageio.metadata.IIOMetadataNode"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.w3c.dom.NodeList"/>
        <import package="com.sun.imageio.plugins.common.LZWCompressor"/>
        <import package="com.sun.imageio.plugins.common.PaletteBuilder"/>
        <import package="sun.awt.image.ByteComponentRaster"/>
        <class name="GIFImageWriter" line="60">
            <extends class="ImageWriter"/>
            <comment line="62">
                XXX false for release!                
            </comment>
            <declaration name="DEBUG" type="boolean" line="61"/>
            <declaration name="STANDARD_METADATA_NAME" type="String" line="63"/>
            <declaration name="STREAM_METADATA_NAME" type="String" line="66"/>
            <declaration name="IMAGE_METADATA_NAME" type="String" line="69"/>
            <declaration name="stream" type="ImageOutputStream" line="72"/>
            <javadoc line="72">
                The &lt;code&gt;output&lt;/code&gt; case to an &lt;code&gt;ImageOutputStream&lt;/code&gt;.                
            </javadoc>
            <declaration name="isWritingSequence" type="boolean" line="77"/>
            <javadoc line="77">
                Whether a sequence is being written.                
            </javadoc>
            <declaration name="wroteSequenceHeader" type="boolean" line="82"/>
            <javadoc line="82">
                Whether the header has been written.                
            </javadoc>
            <declaration name="theStreamMetadata" type="GIFWritableStreamMetadata" line="87"/>
            <javadoc line="87">
                The stream metadata of a sequence.                
            </javadoc>
            <declaration name="imageIndex" type="int" line="92"/>
            <javadoc line="92">
                The index of the image being written.                
            </javadoc>
            <javadoc line="97">
                The number of bits represented by the value which should be a
                  legal length for a color table.                
            </javadoc>
            <method name="getNumBits" type="int" line="101">
                <params>
                    <param name="value" type="int"/>
                </params>
                <declaration name="numBits" type="int" line="102"/>
            </method>
            <javadoc line="135">
                Compute the source region and destination dimensions taking any
                  parameter settings into account.                
            </javadoc>
            <method name="computeRegions" type="void" line="141">
                <params>
                    <param name="sourceBounds" type="Rectangle"/>
                    <param name="destSize" type="Dimension"/>
                    <param name="p" type="ImageWriteParam"/>
                </params>
                <comment line="154">
                    Get source region and subsampling factors                    
                </comment>
                <comment line="157">
                    Clip to actual image bounds                    
                </comment>
                <comment line="162">
                    Adjust for subsampling offsets                    
                </comment>
                <comment line="170">
                    Get subsampling factors                    
                </comment>
                <comment line="175">
                    Compute output dimensions                    
                </comment>
                <declaration name="param" type="ImageWriteParam" line="142"/>
                <declaration name="periodX" type="int" line="143"/>
                <declaration name="periodY" type="int" line="144"/>
                <scope line="145">
                    <declaration name="sourceBands" type="int[]" line="146"/>
                    <scope line="149"/>
                    <declaration name="sourceRegion" type="Rectangle" line="154"/>
                    <scope line="155"/>
                    <declaration name="gridX" type="int" line="162"/>
                    <declaration name="gridY" type="int" line="163"/>
                </scope>
                <scope line="177"/>
            </method>
            <javadoc line="182">
                Create a color table from the image ColorModel and SampleModel.                
            </javadoc>
            <method name="createColorTable" type="byte[]" line="187">
                <params>
                    <param name="colorModel" type="ColorModel"/>
                    <param name="sampleModel" type="SampleModel"/>
                </params>
                <comment line="194">
                    The GIF image format assumes that size of image palette
                     is power of two. We will use closest larger power of two
                     as size of color table.                    
                </comment>
                <comment line="208">
                    fill tail of color component arrays by replica of first color
                     in order to avoid appearance of extra colors in the color table                    
                </comment>
                <comment line="226">
                    create gray-scaled color table for single-banded images                    
                </comment>
                <comment line="237">
                    We do not have enough information here
                     to create well-fit color table for RGB image.                    
                </comment>
                <declaration name="colorTable" type="byte[]" line="188"/>
                <scope line="189">
                    <declaration name="icm" type="IndexColorModel" line="190"/>
                    <declaration name="mapSize" type="int" line="191"/>
                    <declaration name="ctSize" type="int" line="198"/>
                    <declaration name="reds" type="byte[]" line="200"/>
                    <declaration name="greens" type="byte[]" line="201"/>
                    <declaration name="blues" type="byte[]" line="202"/>
                    <scope line="211"/>
                    <declaration name="idx" type="int" line="218"/>
                    <scope line="219"/>
                </scope>
                <scope line="224">
                    <declaration name="numBits" type="int" line="226"/>
                    <scope line="227"/>
                    <declaration name="colorTableLength" type="int" line="230"/>
                    <scope line="232"/>
                </scope>
                <scope line="235"/>
            </method>
            <javadoc line="244">
                According do GIF specification size of clor table (palette here)
                  must be in range from 2 to 256 and must be power of 2.                
            </javadoc>
            <method name="getGifPaletteSize" type="int" line="248">
                <params>
                    <param name="x" type="int"/>
                </params>
                <scope line="249"/>
            </method>
            <method name="GIFImageWriter" type="constructor" line="263">
                <params>
                    <param name="originatingProvider" type="GIFImageWriterSpi"/>
                </params>
                <scope line="265"/>
            </method>
            <method name="canWriteSequence" type="boolean" line="270"/>
            <javadoc line="274">
                Merges &lt;code&gt;inData&lt;/code&gt; into &lt;code&gt;outData&lt;/code&gt;. The supplied
                  metadata format name is attempted first and failing that the standard
                  metadata format name is attempted.                
            </javadoc>
            <method name="convertMetadata" type="void" line="281">
                <params>
                    <param name="metadataFormatName" type="String"/>
                    <param name="inData" type="IIOMetadata"/>
                    <param name="outData" type="IIOMetadata"/>
                </params>
                <comment line="312">
                    ignore                    
                </comment>
                <declaration name="formatName" type="String" line="282"/>
                <declaration name="nativeFormatName" type="String" line="284"/>
                <scope line="286"/>
                <scope line="288">
                    <declaration name="extraFormatNames" type="String[]" line="289"/>
                    <scope line="291">
                        <scope line="292">
                            <scope line="293"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="302"/>
                <scope line="306">
                    <scope line="307">
                        <declaration name="root" type="Node" line="308"/>
                    </scope>
                    <scope line="310"/>
                </scope>
            </method>
            <javadoc line="316">
                Creates a default stream metadata object and merges in the
                  supplied metadata.                
            </javadoc>
            <method name="convertStreamMetadata" type="IIOMetadata" line="321">
                <params>
                    <param name="inData" type="IIOMetadata"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="322"/>
                <declaration name="sm" type="IIOMetadata" line="326"/>
            </method>
            <javadoc line="333">
                Creates a default image metadata object and merges in the
                  supplied metadata.                
            </javadoc>
            <method name="convertImageMetadata" type="IIOMetadata" line="339">
                <params>
                    <param name="inData" type="IIOMetadata"/>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <comment line="352">
                    Save interlace flag state.                    
                </comment>
                <comment line="358">
                    Undo change to interlace flag if not MODE_COPY_FROM_METADATA.                    
                </comment>
                <scope line="340"/>
                <scope line="343"/>
                <declaration name="im" type="GIFWritableImageMetadata" line="347"/>
                <declaration name="isProgressive" type="boolean" line="353"/>
                <scope line="360"/>
            </method>
            <method name="endWriteSequence" type="void" line="367">
                <scope line="368"/>
                <scope line="371"/>
            </method>
            <method name="getDefaultImageMetadata" type="IIOMetadata" line="379">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <comment line="384">
                    Image dimensions                    
                </comment>
                <comment line="396">
                    Interlacing                    
                </comment>
                <comment line="405">
                    Local color table                    
                </comment>
                <comment line="412">
                    Transparency                    
                </comment>
                <declaration name="imageMetadata" type="GIFWritableImageMetadata" line="380"/>
                <declaration name="sampleModel" type="SampleModel" line="385"/>
                <declaration name="sourceBounds" type="Rectangle" line="387"/>
                <declaration name="destSize" type="Dimension" line="389"/>
                <scope line="398"/>
                <scope line="400"/>
                <declaration name="colorModel" type="ColorModel" line="406"/>
                <scope line="413">
                    <declaration name="transparentIndex" type="int" line="414"/>
                    <scope line="416"/>
                </scope>
            </method>
            <method name="getDefaultStreamMetadata" type="IIOMetadata" line="425">
                <params>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <declaration name="streamMetadata" type="GIFWritableStreamMetadata" line="426"/>
            </method>
            <method name="getDefaultWriteParam" type="ImageWriteParam" line="432"/>
            <method name="prepareWriteSequence" type="void" line="437">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                </params>
                <comment line="446">
                    Save the possibly converted stream metadata as an instance variable.                    
                </comment>
                <scope line="439"/>
                <scope line="446"/>
                <scope line="449"/>
            </method>
            <method name="reset" type="void" line="458"/>
            <javadoc line="463">
                Resets locally defined instance variables.                
            </javadoc>
            <method name="resetLocal" type="void" line="466"/>
            <method name="setOutput" type="void" line="473">
                <params>
                    <param name="output" type="Object"/>
                </params>
                <scope line="475">
                    <scope line="476"/>
                </scope>
                <scope line="482"/>
            </method>
            <method name="write" type="void" line="489">
                <params>
                    <param name="sm" type="IIOMetadata"/>
                    <param name="iioimage" type="IIOImage"/>
                    <param name="p" type="ImageWriteParam"/>
                </params>
                <scope line="490"/>
                <scope line="493"/>
                <scope line="496"/>
                <declaration name="streamMetadata" type="GIFWritableStreamMetadata" line="502"/>
                <scope line="503"/>
                <scope line="506"/>
            </method>
            <method name="writeToSequence" type="void" line="515">
                <params>
                    <param name="image" type="IIOImage"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="516"/>
                <scope line="519"/>
                <scope line="522"/>
                <scope line="525"/>
                <scope line="532"/>
            </method>
            <method name="needToCreateIndex" type="boolean" line="540">
                <params>
                    <param name="image" type="RenderedImage"/>
                </params>
                <declaration name="sampleModel" type="SampleModel" line="542"/>
                <declaration name="colorModel" type="ColorModel" line="543"/>
            </method>
            <javadoc line="550">
                Writes any extension blocks, the Image Descriptor, the image data,
                  and optionally the header (Signature and Logical Screen Descriptor)
                  and trailer (Block Terminator).                
                <param>
                    writeHeader Whether to write the header.                    
                </param>
                <param>
                    writeTrailer Whether to write the trailer.                    
                </param>
                <param>
                    sm The stream metadata or <code>null</code> if
                      <code>writeHeader</code> is <code>false</code>.                    
                </param>
                <param>
                    iioimage The image and image metadata.                    
                </param>
                <param>
                    p The write parameters.                    
                </param>
                <throws>
                    IllegalArgumentException if the number of bands is not 1.                    
                </throws>
                <throws>
                    IllegalArgumentException if the number of bits per sample is
                      greater than 8.                    
                </throws>
                <throws>
                    IllegalArgumentException if the color component size is
                      greater than 8.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>writeHeader</code> is
                      <code>true</code> and <code>sm</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>writeHeader</code> is
                      <code>false</code> and a sequence is not being written.                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="576">
                <params>
                    <param name="writeHeader" type="boolean"/>
                    <param name="writeTrailer" type="boolean"/>
                    <param name="sm" type="IIOMetadata"/>
                    <param name="iioimage" type="IIOImage"/>
                    <param name="p" type="ImageWriteParam"/>
                </params>
                <comment line="582">
                    Check for ability to encode image.                    
                </comment>
                <comment line="591">
                    Determine source region and destination dimensions.                    
                </comment>
                <comment line="599">
                    Convert any provided image metadata.                    
                </comment>
                <comment line="605">
                    Converted rgb image can use palette different from global.
                     In order to avoid color artefacts we want to be sure we use
                     appropriate palette. For this we initialize local color table
                     from current color and sample models.
                     At this point we can guarantee that local color table can be
                     build because image was already converted to indexed or
                     gray-scale representations                    
                </comment>
                <comment line="616">
                    in case of indexed image we should take care of
                     transparent pixels                    
                </comment>
                <comment line="626">
                    NB: transparentColorFlag might have not beed reset for
                    greyscale images but explicitly reseting it here
                    is potentially not right thing to do until we have way
                    to find whether current value was explicitly set by
                    the user.                    
                </comment>
                <comment line="636">
                    Global color table values.                    
                </comment>
                <comment line="639">
                    Write the header (Signature+Logical Screen Descriptor+
                     Global Color Table).                    
                </comment>
                <comment line="649">
                    Set the version if not set.                    
                </comment>
                <comment line="654">
                    Set the Logical Screen Desriptor if not set.                    
                </comment>
                <comment line="675">
                    Set the Global Color Table if not set, i.e., if not
                     provided in the stream metadata.                    
                </comment>
                <comment line="680">
                    Writing a sequence and a local color table was
                     provided in the metadata of the first image: use it.                    
                </comment>
                <comment line="686">
                    Create a color table.                    
                </comment>
                <comment line="692">
                    Set the Global Color Table. At this point it should be
                     A) the global color table provided in stream metadata, if any;
                     B) the local color table of the image metadata, if any, if
                        writing a sequence;
                     C) a table created on the basis of the first image ColorModel
                        and SampleModel if no local color table is available; or
                     D) null if none of the foregoing conditions obtain (which
                        should only be if a sequence is not being written and
                        a local color table is provided in image metadata).                    
                </comment>
                <comment line="703">
                    Write the header.                    
                </comment>
                <comment line="721">
                    Write extension blocks, Image Descriptor, and image data.                    
                </comment>
                <comment line="725">
                    Write the trailer.                    
                </comment>
                <declaration name="image" type="RenderedImage" line="579"/>
                <scope line="582"/>
                <declaration name="colorModel" type="ColorModel" line="587"/>
                <declaration name="sampleModel" type="SampleModel" line="588"/>
                <declaration name="sourceBounds" type="Rectangle" line="591"/>
                <declaration name="destSize" type="Dimension" line="595"/>
                <declaration name="imageMetadata" type="GIFWritableImageMetadata" line="599"/>
                <scope line="600">
                    <scope line="611">
                        <scope line="617">
                            <declaration name="icm" type="IndexColorModel" line="618"/>
                            <declaration name="index" type="int" line="620"/>
                            <scope line="622"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="globalColorTable" type="byte[]" line="636"/>
                <scope line="640">
                    <scope line="641"/>
                    <declaration name="streamMetadata" type="GIFWritableStreamMetadata" line="645"/>
                    <scope line="649"/>
                    <scope line="656"/>
                    <scope line="662"/>
                    <scope line="668"/>
                    <scope line="676">
                        <scope line="678"/>
                        <scope line="684"/>
                    </scope>
                    <declaration name="bitsPerPixel" type="int" line="703"/>
                    <scope line="704"/>
                    <scope line="707"/>
                    <scope line="710"/>
                </scope>
                <scope line="714"/>
                <scope line="716"/>
                <scope line="725"/>
            </method>
            <javadoc line="730">
                Writes any extension blocks, the Image Descriptor, and the image data                
                <param>
                    iioimage The image and image metadata.                    
                </param>
                <param>
                    param The write parameters.                    
                </param>
                <param>
                    globalColorTable The Global Color Table.                    
                </param>
                <param>
                    sourceBounds The source region.                    
                </param>
                <param>
                    destSize The destination dimensions.                    
                </param>
            </javadoc>
            <method name="writeImage" type="void" line="743">
                <params>
                    <param name="image" type="RenderedImage"/>
                    <param name="imageMetadata" type="GIFWritableImageMetadata"/>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="globalColorTable" type="byte[]"/>
                    <param name="sourceBounds" type="Rectangle"/>
                    <param name="destSize" type="Dimension"/>
                </params>
                <comment line="750">
                    Create default metadata.                    
                </comment>
                <comment line="754">
                    Set GraphicControlExtension flag only if there is
                     transparency.                    
                </comment>
                <comment line="758">
                    Check for GraphicControlExtension element.                    
                </comment>
                <comment line="765">
                    Should never happen.                    
                </comment>
                <comment line="768">
                    Set GraphicControlExtension flag if element present.                    
                </comment>
                <comment line="772">
                    If progressive mode is not MODE_COPY_FROM_METADATA, ensure
                     the interlacing is set per the ImageWriteParam mode setting.                    
                </comment>
                <comment line="785">
                    Unset local color table if equal to global color table.                    
                </comment>
                <comment line="790">
                    Override dimensions                    
                </comment>
                <comment line="794">
                    Write Graphics Control Extension.                    
                </comment>
                <comment line="799">
                    Write extension blocks.                    
                </comment>
                <comment line="804">
                    Write Image Descriptor                    
                </comment>
                <comment line="813">
                    Write image data                    
                </comment>
                <declaration name="colorModel" type="ColorModel" line="744"/>
                <declaration name="sampleModel" type="SampleModel" line="745"/>
                <declaration name="writeGraphicsControlExtension" type="boolean" line="747"/>
                <scope line="748"/>
                <scope line="756">
                    <declaration name="list" type="NodeList" line="758"/>
                    <scope line="759">
                        <declaration name="root" type="IIOMetadataNode" line="760"/>
                    </scope>
                    <scope line="763"/>
                    <scope line="773">
                        <scope line="775"/>
                        <scope line="778"/>
                    </scope>
                </scope>
                <scope line="785"/>
                <scope line="794"/>
                <declaration name="bitsPerPixel" type="int" line="804"/>
            </method>
            <method name="writeRows" type="void" line="821">
                <params>
                    <param name="image" type="RenderedImage"/>
                    <param name="compressor" type="LZWCompressor"/>
                    <param name="sx" type="int"/>
                    <param name="sdx" type="int"/>
                    <param name="sy" type="int"/>
                    <param name="sdy" type="int"/>
                    <param name="sw" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="ddy" type="int"/>
                    <param name="dw" type="int"/>
                    <param name="dh" type="int"/>
                    <param name="numRowsWritten" type="int"/>
                    <param name="progressReportRowPeriod" type="int"/>
                </params>
                <declaration name="sbuf" type="int[]" line="824"/>
                <declaration name="dbuf" type="byte[]" line="825"/>
                <declaration name="raster" type="Raster" line="827"/>
                <scope line="830">
                    <scope line="831">
                        <scope line="832"/>
                    </scope>
                    <scope line="840"/>
                </scope>
            </method>
            <method name="writeRowsOpt" type="void" line="853">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="lineStride" type="int"/>
                    <param name="compressor" type="LZWCompressor"/>
                    <param name="dy" type="int"/>
                    <param name="ddy" type="int"/>
                    <param name="dw" type="int"/>
                    <param name="dh" type="int"/>
                    <param name="numRowsWritten" type="int"/>
                    <param name="progressReportRowPeriod" type="int"/>
                </params>
                <scope line="858">
                    <scope line="859">
                        <scope line="860"/>
                    </scope>
                </scope>
            </method>
            <method name="writeRasterData" type="void" line="877">
                <params>
                    <param name="image" type="RenderedImage"/>
                    <param name="sourceBounds" type="Rectangle"/>
                    <param name="destSize" type="Dimension"/>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="interlaceFlag" type="boolean"/>
                </params>
                <comment line="910">
                    At this moment we know that input image is indexed image.
                     We can directly copy data iff:
                       - no subsampling required (periodX = 1, periodY = 0)
                       - we can access data directly (image is non-tiled,
                         i.e. image data are in single block)
                       - we can calculate offset in data buffer (next 3 lines)                    
                </comment>
                <comment line="940">
                    take into account the raster data offset                    
                </comment>
                <declaration name="sourceXOffset" type="int" line="879"/>
                <declaration name="sourceYOffset" type="int" line="880"/>
                <declaration name="sourceWidth" type="int" line="881"/>
                <declaration name="sourceHeight" type="int" line="882"/>
                <declaration name="destWidth" type="int" line="884"/>
                <declaration name="destHeight" type="int" line="885"/>
                <declaration name="periodX" type="int" line="887"/>
                <declaration name="periodY" type="int" line="888"/>
                <scope line="889"/>
                <scope line="892"/>
                <declaration name="sampleModel" type="SampleModel" line="897"/>
                <declaration name="bitsPerPixel" type="int" line="898"/>
                <declaration name="initCodeSize" type="int" line="900"/>
                <scope line="901"/>
                <declaration name="compressor" type="LZWCompressor" line="906"/>
                <declaration name="isOptimizedCase" type="boolean" line="916"/>
                <declaration name="numRowsWritten" type="int" line="923"/>
                <declaration name="progressReportRowPeriod" type="int" line="925"/>
                <scope line="929">
                    <scope line="932">
                        <declaration name="tile" type="ByteComponentRaster" line="933"/>
                        <declaration name="data" type="byte[]" line="935"/>
                        <declaration name="csm" type="ComponentSampleModel" line="936"/>
                        <declaration name="offset" type="int" line="938"/>
                        <declaration name="lineStride" type="int" line="941"/>
                        <scope line="947"/>
                        <scope line="957"/>
                        <scope line="967"/>
                    </scope>
                    <scope line="976">
                        <scope line="984"/>
                        <scope line="996"/>
                        <scope line="1008"/>
                    </scope>
                </scope>
                <scope line="1020">
                    <scope line="1023">
                        <declaration name="tile" type="Raster" line="1024"/>
                        <declaration name="data" type="byte[]" line="1025"/>
                        <declaration name="csm" type="ComponentSampleModel" line="1026"/>
                        <declaration name="offset" type="int" line="1028"/>
                        <declaration name="lineStride" type="int" line="1029"/>
                    </scope>
                    <scope line="1034"/>
                </scope>
                <scope line="1044"/>
            </method>
            <method name="writeHeader" type="void" line="1065">
                <params>
                    <param name="version" type="String"/>
                    <param name="logicalScreenWidth" type="int"/>
                    <param name="logicalScreenHeight" type="int"/>
                    <param name="colorResolution" type="int"/>
                    <param name="pixelAspectRatio" type="int"/>
                    <param name="backgroundColorIndex" type="int"/>
                    <param name="sortFlag" type="boolean"/>
                    <param name="bitsPerPixel" type="int"/>
                    <param name="globalColorTable" type="byte[]"/>
                </params>
                <comment line="1068">
                    Signature                    
                </comment>
                <comment line="1071">
                    Screen Descriptor
                     Width                    
                </comment>
                <comment line="1075">
                    Height                    
                </comment>
                <comment line="1078">
                    Global Color Table
                     Packed fields                    
                </comment>
                <comment line="1088">
                    Background color index                    
                </comment>
                <comment line="1091">
                    Pixel aspect ratio                    
                </comment>
                <comment line="1094">
                    Global Color Table                    
                </comment>
                <scope line="1066">
                    <declaration name="packedFields" type="int" line="1079"/>
                    <scope line="1081"/>
                    <scope line="1094"/>
                </scope>
                <scope line="1097"/>
            </method>
            <method name="writeHeader" type="void" line="1103">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="bitsPerPixel" type="int"/>
                </params>
                <declaration name="sm" type="GIFWritableStreamMetadata" line="1105"/>
                <scope line="1106"/>
                <scope line="1108">
                    <declaration name="root" type="Node" line="1110"/>
                </scope>
            </method>
            <method name="writeGraphicControlExtension" type="void" line="1131">
                <params>
                    <param name="disposalMethod" type="int"/>
                    <param name="userInputFlag" type="boolean"/>
                    <param name="transparentColorFlag" type="boolean"/>
                    <param name="delayTime" type="int"/>
                    <param name="transparentColorIndex" type="int"/>
                </params>
                <scope line="1132">
                    <declaration name="packedFields" type="int" line="1138"/>
                    <scope line="1139"/>
                    <scope line="1142"/>
                </scope>
                <scope line="1151"/>
            </method>
            <method name="writeGraphicControlExtension" type="void" line="1157">
                <params>
                    <param name="im" type="GIFWritableImageMetadata"/>
                </params>
            </method>
            <method name="writeBlocks" type="void" line="1165">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <scope line="1166">
                    <declaration name="offset" type="int" line="1167"/>
                    <scope line="1168">
                        <declaration name="len" type="int" line="1169"/>
                    </scope>
                </scope>
            </method>
            <method name="writePlainTextExtension" type="void" line="1178">
                <params>
                    <param name="im" type="GIFWritableImageMetadata"/>
                </params>
                <scope line="1179">
                    <scope line="1180"/>
                    <scope line="1198"/>
                </scope>
            </method>
            <method name="writeApplicationExtension" type="void" line="1205">
                <params>
                    <param name="im" type="GIFWritableImageMetadata"/>
                </params>
                <scope line="1206">
                    <declaration name="iterIDs" type="Iterator" line="1207"/>
                    <declaration name="iterCodes" type="Iterator" line="1208"/>
                    <declaration name="iterData" type="Iterator" line="1209"/>
                    <scope line="1211">
                        <scope line="1212"/>
                        <scope line="1223"/>
                    </scope>
                </scope>
            </method>
            <method name="writeCommentExtension" type="void" line="1231">
                <params>
                    <param name="im" type="GIFWritableImageMetadata"/>
                </params>
                <scope line="1232">
                    <scope line="1233">
                        <declaration name="iter" type="Iterator" line="1234"/>
                        <scope line="1235"/>
                    </scope>
                    <scope line="1241"/>
                </scope>
            </method>
            <method name="writeImageDescriptor" type="void" line="1255">
                <params>
                    <param name="imageLeftPosition" type="int"/>
                    <param name="imageTopPosition" type="int"/>
                    <param name="imageWidth" type="int"/>
                    <param name="imageHeight" type="int"/>
                    <param name="interlaceFlag" type="boolean"/>
                    <param name="sortFlag" type="boolean"/>
                    <param name="bitsPerPixel" type="int"/>
                    <param name="localColorTable" type="byte[]"/>
                </params>
                <scope line="1257">
                    <declaration name="packedFields" type="int" line="1265"/>
                    <scope line="1266"/>
                    <scope line="1269"/>
                    <scope line="1275"/>
                </scope>
                <scope line="1278"/>
            </method>
            <method name="writeImageDescriptor" type="void" line="1285">
                <params>
                    <param name="imageMetadata" type="GIFWritableImageMetadata"/>
                    <param name="bitsPerPixel" type="int"/>
                </params>
            </method>
            <method name="writeTrailer" type="void" line="1297"/>
        </class>
        <class name="GIFImageWriteParam" line="1302">
            <extends class="ImageWriteParam"/>
            <comment line="62">
                XXX false for release!                
            </comment>
            <method name="GIFImageWriteParam" type="constructor" line="1303">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <method name="setCompressionMode" type="void" line="1311">
                <params>
                    <param name="mode" type="int"/>
                </params>
                <scope line="1312"/>
            </method>
        </class>
    </source>