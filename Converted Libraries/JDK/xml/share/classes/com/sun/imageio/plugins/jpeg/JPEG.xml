<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.jpeg">
        <import package="javax.imageio.metadata.IIOMetadataFormatImpl"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.plugins.jpeg.JPEGQTable"/>
        <import package="javax.imageio.plugins.jpeg.JPEGHuffmanTable"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.color.ICC_ColorSpace"/>
        <class name="JPEG" line="11">
            <javadoc line="11">
                A class containing JPEG-related constants, definitions, and
                  static methods.  This class and its constants must be public so that
                  &lt;code&gt;JPEGImageWriteParam&lt;/code&gt; can see it.                
            </javadoc>
            <declaration name="TEM" type="int" line="17"/>
            <javadoc line="17">
                For temporary use in arithmetic coding                
            </javadoc>
            <declaration name="SOF0" type="int" line="21"/>
            <javadoc line="21">
                Baseline DCT                
            </javadoc>
            <declaration name="SOF1" type="int" line="25"/>
            <javadoc line="25">
                Extended Sequential DCT                
            </javadoc>
            <declaration name="SOF2" type="int" line="29"/>
            <javadoc line="29">
                Progressive DCT                
            </javadoc>
            <declaration name="SOF3" type="int" line="33"/>
            <javadoc line="33">
                Lossless Sequential                
            </javadoc>
            <declaration name="DHT" type="int" line="37"/>
            <javadoc line="37">
                Define Huffman Tables                
            </javadoc>
            <declaration name="SOF5" type="int" line="41"/>
            <javadoc line="41">
                Differential Sequential DCT                
            </javadoc>
            <declaration name="SOF6" type="int" line="45"/>
            <javadoc line="45">
                Differential Progressive DCT                
            </javadoc>
            <declaration name="SOF7" type="int" line="49"/>
            <javadoc line="49">
                Differential Lossless                
            </javadoc>
            <declaration name="JPG" type="int" line="53"/>
            <javadoc line="53">
                Reserved for JPEG extensions                
            </javadoc>
            <declaration name="SOF9" type="int" line="57"/>
            <javadoc line="57">
                Extended Sequential DCT, Arithmetic coding                
            </javadoc>
            <declaration name="SOF10" type="int" line="61"/>
            <javadoc line="61">
                Progressive DCT, Arithmetic coding                
            </javadoc>
            <declaration name="SOF11" type="int" line="65"/>
            <javadoc line="65">
                Lossless Sequential, Arithmetic coding                
            </javadoc>
            <declaration name="DAC" type="int" line="69"/>
            <javadoc line="69">
                Define Arithmetic conditioning tables                
            </javadoc>
            <declaration name="SOF13" type="int" line="73"/>
            <javadoc line="73">
                Differential Sequential DCT, Arithmetic coding                
            </javadoc>
            <declaration name="SOF14" type="int" line="77"/>
            <javadoc line="77">
                Differential Progressive DCT, Arithmetic coding                
            </javadoc>
            <declaration name="SOF15" type="int" line="81"/>
            <javadoc line="81">
                Differential Lossless, Arithmetic coding                
            </javadoc>
            <declaration name="RST0" type="int" line="85"/>
            <declaration name="RST1" type="int" line="86"/>
            <declaration name="RST2" type="int" line="87"/>
            <declaration name="RST3" type="int" line="88"/>
            <declaration name="RST4" type="int" line="89"/>
            <declaration name="RST5" type="int" line="90"/>
            <declaration name="RST6" type="int" line="91"/>
            <declaration name="RST7" type="int" line="92"/>
            <declaration name="RESTART_RANGE" type="int" line="93"/>
            <javadoc line="93">
                Number of restart markers                
            </javadoc>
            <declaration name="SOI" type="int" line="97"/>
            <javadoc line="97">
                Start of Image                
            </javadoc>
            <declaration name="EOI" type="int" line="101"/>
            <javadoc line="101">
                End of Image                
            </javadoc>
            <declaration name="SOS" type="int" line="105"/>
            <javadoc line="105">
                Start of Scan                
            </javadoc>
            <declaration name="DQT" type="int" line="109"/>
            <javadoc line="109">
                Define Quantisation Tables                
            </javadoc>
            <declaration name="DNL" type="int" line="113"/>
            <javadoc line="113">
                Define Number of lines                
            </javadoc>
            <declaration name="DRI" type="int" line="117"/>
            <javadoc line="117">
                Define Restart Interval                
            </javadoc>
            <declaration name="DHP" type="int" line="121"/>
            <javadoc line="121">
                Define Heirarchical progression                
            </javadoc>
            <declaration name="EXP" type="int" line="125"/>
            <javadoc line="125">
                Expand reference image(s)                
            </javadoc>
            <declaration name="APP0" type="int" line="129"/>
            <javadoc line="129">
                APP0 used by JFIF                
            </javadoc>
            <declaration name="APP1" type="int" line="133"/>
            <declaration name="APP2" type="int" line="134"/>
            <declaration name="APP3" type="int" line="135"/>
            <declaration name="APP4" type="int" line="136"/>
            <declaration name="APP5" type="int" line="137"/>
            <declaration name="APP6" type="int" line="138"/>
            <declaration name="APP7" type="int" line="139"/>
            <declaration name="APP8" type="int" line="140"/>
            <declaration name="APP9" type="int" line="141"/>
            <declaration name="APP10" type="int" line="142"/>
            <declaration name="APP11" type="int" line="143"/>
            <declaration name="APP12" type="int" line="144"/>
            <declaration name="APP13" type="int" line="145"/>
            <declaration name="APP14" type="int" line="146"/>
            <javadoc line="146">
                APP14 used by Adobe                
            </javadoc>
            <declaration name="APP15" type="int" line="150"/>
            <declaration name="COM" type="int" line="151"/>
            <javadoc line="151">
                Comment marker                
            </javadoc>
            <declaration name="DENSITY_UNIT_ASPECT_RATIO" type="int" line="155"/>
            <javadoc line="155">
                The X and Y units simply indicate the aspect ratio of the pixels.                
            </javadoc>
            <declaration name="DENSITY_UNIT_DOTS_INCH" type="int" line="159"/>
            <javadoc line="159">
                Pixel density is in pixels per inch.                
            </javadoc>
            <declaration name="DENSITY_UNIT_DOTS_CM" type="int" line="163"/>
            <javadoc line="163">
                Pixel density is in pixels per centemeter.                
            </javadoc>
            <declaration name="NUM_DENSITY_UNIT" type="int" line="167"/>
            <javadoc line="167">
                The max known value for DENSITY_UNIT                
            </javadoc>
            <declaration name="ADOBE_IMPOSSIBLE" type="int" line="171"/>
            <declaration name="ADOBE_UNKNOWN" type="int" line="172"/>
            <declaration name="ADOBE_YCC" type="int" line="173"/>
            <declaration name="ADOBE_YCCK" type="int" line="174"/>
            <declaration name="vendor" type="String" line="175"/>
            <declaration name="version" type="String" line="176"/>
            <declaration name="names" type="String[]" line="177"/>
            <declaration name="suffixes" type="String[]" line="178"/>
            <declaration name="MIMETypes" type="String[]" line="179"/>
            <declaration name="nativeImageMetadataFormatName" type="String" line="180"/>
            <declaration name="nativeImageMetadataFormatClassName" type="String" line="181"/>
            <declaration name="nativeStreamMetadataFormatName" type="String" line="182"/>
            <declaration name="nativeStreamMetadataFormatClassName" type="String" line="183"/>
            <declaration name="JCS_UNKNOWN" type="int" line="184"/>
            <declaration name="JCS_GRAYSCALE" type="int" line="185"/>
            <declaration name="JCS_RGB" type="int" line="186"/>
            <declaration name="JCS_YCbCr" type="int" line="187"/>
            <declaration name="JCS_CMYK" type="int" line="188"/>
            <declaration name="JCS_YCC" type="int" line="189"/>
            <declaration name="JCS_RGBA" type="int" line="190"/>
            <declaration name="JCS_YCbCrA" type="int" line="191"/>
            <declaration name="JCS_YCCA" type="int" line="192"/>
            <declaration name="JCS_YCCK" type="int" line="193"/>
            <declaration name="NUM_JCS_CODES" type="int" line="194"/>
            <declaration name="bandOffsets" type="int[][]" line="195"/>
            <javadoc line="195">
                IJG can handle up to 4-channel JPEGs                
            </javadoc>
            <declaration name="bOffsRGB" type="int[]" line="199"/>
            <class name="JCS" line="200">
                <declaration name="sRGB" type="ColorSpace" line="201"/>
                <declaration name="YCC" type="ColorSpace" line="202"/>
                <declaration name="yccInited" type="boolean" line="203"/>
                <method name="getYCC" type="ColorSpace" line="204">
                    <scope line="205">
                        <scope line="206"/>
                        <scope line="209"/>
                        <scope line="211"/>
                    </scope>
                </method>
            </class>
            <declaration name="DEFAULT_QUALITY" type="float" line="218"/>
            <javadoc line="219">
                Returns &lt;code&gt;true&lt;/code&gt; if the given &lt;code&gt;ColorSpace&lt;/code&gt;
                  object is an instance of ICC_ColorSpace but is not one of the
                  standard &lt;code&gt;ColorSpaces&lt;/code&gt; returned by
                  &lt;code&gt;ColorSpace.getInstance()&lt;/code&gt;.                
            </javadoc>
            <method name="isNonStandardICC" type="boolean" line="225">
                <params>
                    <param name="cs" type="ColorSpace"/>
                </params>
                <declaration name="retval" type="boolean" line="226"/>
                <scope line="227"/>
            </method>
            <javadoc line="232">
                Returns &lt;code&gt;true&lt;/code&gt; if the given imageType can be used
                  in a JFIF file.  If &lt;code&gt;input&lt;/code&gt; is true, then the
                  image type is considered before colorspace conversion.                
            </javadoc>
            <method name="isJFIFcompliant" type="boolean" line="237">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="input" type="boolean"/>
                </params>
                <declaration name="cm" type="ColorModel" line="238"/>
                <scope line="239"/>
                <declaration name="numComponents" type="int" line="242"/>
                <scope line="243"/>
                <scope line="246"/>
                <scope line="249">
                    <scope line="250"/>
                </scope>
                <scope line="254">
                    <scope line="255"/>
                </scope>
            </method>
            <javadoc line="261">
                Given an image type, return the Adobe transform corresponding to
                  that type, or ADOBE_IMPOSSIBLE if the image type is incompatible
                  with an Adobe marker segment.  If &lt;code&gt;input&lt;/code&gt; is true, then
                  the image type is considered before colorspace conversion.                
            </javadoc>
            <method name="transformForType" type="int" line="267">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="input" type="boolean"/>
                </params>
                <declaration name="retval" type="int" line="268"/>
                <declaration name="cm" type="ColorModel" line="269"/>
            </method>
            <javadoc line="285">
                Converts an ImageWriteParam (i.e. IJG) non-linear quality value
                  to a float suitable for passing to JPEGQTable.getScaledInstance().                
            </javadoc>
            <method name="convertToLinearQuality" type="float" line="289">
                <params>
                    <param name="quality" type="float"/>
                </params>
                <scope line="290"/>
                <scope line="293"/>
                <scope line="296"/>
                <scope line="299"/>
            </method>
            <javadoc line="304">
                Return an array of default, visually lossless quantization tables.                
            </javadoc>
            <method name="getDefaultQTables" type="JPEGQTable[]" line="307">
                <declaration name="qTables" type="JPEGQTable[]" line="308"/>
            </method>
            <javadoc line="313">
                Return an array of default Huffman tables.                
            </javadoc>
            <method name="getDefaultHuffmanTables" type="JPEGHuffmanTable[]" line="316">
                <params>
                    <param name="wantDC" type="boolean"/>
                </params>
                <declaration name="tables" type="JPEGHuffmanTable[]" line="317"/>
                <scope line="318"/>
                <scope line="322"/>
            </method>
        </class>
    </source>