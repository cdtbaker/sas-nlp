<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.jpeg">
        <import package="javax.imageio.metadata.IIOMetadataFormatImpl"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.plugins.jpeg.JPEGQTable"/>
        <import package="javax.imageio.plugins.jpeg.JPEGHuffmanTable"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.color.ICC_ColorSpace"/>
        <class name="JPEG" line="39">
            <comment line="47">
                List of all the JPEG markers (pre-JPEG2000)                
            </comment>
            <comment line="52">
                Codes 0x02 - 0xBF are reserved                
            </comment>
            <comment line="54">
                SOF markers for Nondifferential Huffman coding                
            </comment>
            <comment line="67">
                SOF markers for Differential Huffman coding                
            </comment>
            <comment line="78">
                SOF markers for Nondifferential arithmetic coding                
            </comment>
            <comment line="89">
                SOF markers for Differential arithmetic coding                
            </comment>
            <comment line="97">
                Restart Markers                
            </comment>
            <comment line="131">
                Application markers                
            </comment>
            <comment line="151">
                codes 0xF0 to 0xFD are reserved                
            </comment>
            <comment line="156">
                JFIF Resolution units                
            </comment>
            <comment line="166">
                Adobe transform values                
            </comment>
            <comment line="172">
                Spi initialization stuff                
            </comment>
            <comment line="175">
                Names of the formats we can read or write                
            </comment>
            <comment line="188">
                IJG Color codes.                
            </comment>
            <comment line="189">
                error/unspecified                
            </comment>
            <comment line="190">
                monochrome                
            </comment>
            <comment line="191">
                red/green/blue                
            </comment>
            <comment line="192">
                Y/Cb/Cr (also known as YUV)                
            </comment>
            <comment line="193">
                C/M/Y/K                
            </comment>
            <comment line="194">
                PhotoYCC                
            </comment>
            <comment line="195">
                RGB-Alpha                
            </comment>
            <comment line="196">
                Y/Cb/Cr/Alpha                
            </comment>
            <comment line="197">
                8 and 9 were old &quot;Legacy&quot; codes which the old code never identified                
            </comment>
            <comment line="198">
                on reading anyway.  Support for writing them is being dropped, too.                
            </comment>
            <comment line="199">
                PhotoYCC-Alpha                
            </comment>
            <comment line="200">
                Y/Cb/Cr/K                
            </comment>
            <comment line="212">
                These are kept in the inner class to avoid static initialization
                 of the CMM class until someone actually needs it.
                 (e.g. do not init CMM on the request for jpeg mime types)                
            </comment>
            <comment line="237">
                Default value for ImageWriteParam                
            </comment>
            <javadoc line="39">
                A class containing JPEG-related constants, definitions, and
                  static methods.  This class and its constants must be public so that
                  &lt;code&gt;JPEGImageWriteParam&lt;/code&gt; can see it.                
            </javadoc>
            <declaration name="TEM" type="int" line="48"/>
            <javadoc line="48">
                For temporary use in arithmetic coding                
            </javadoc>
            <declaration name="SOF0" type="int" line="54"/>
            <javadoc line="54">
                Baseline DCT                
            </javadoc>
            <declaration name="SOF1" type="int" line="56"/>
            <javadoc line="56">
                Extended Sequential DCT                
            </javadoc>
            <declaration name="SOF2" type="int" line="58"/>
            <javadoc line="58">
                Progressive DCT                
            </javadoc>
            <declaration name="SOF3" type="int" line="60"/>
            <javadoc line="60">
                Lossless Sequential                
            </javadoc>
            <declaration name="DHT" type="int" line="63"/>
            <javadoc line="63">
                Define Huffman Tables                
            </javadoc>
            <declaration name="SOF5" type="int" line="67"/>
            <javadoc line="67">
                Differential Sequential DCT                
            </javadoc>
            <declaration name="SOF6" type="int" line="69"/>
            <javadoc line="69">
                Differential Progressive DCT                
            </javadoc>
            <declaration name="SOF7" type="int" line="71"/>
            <javadoc line="71">
                Differential Lossless                
            </javadoc>
            <declaration name="JPG" type="int" line="74"/>
            <javadoc line="74">
                Reserved for JPEG extensions                
            </javadoc>
            <declaration name="SOF9" type="int" line="78"/>
            <javadoc line="78">
                Extended Sequential DCT, Arithmetic coding                
            </javadoc>
            <declaration name="SOF10" type="int" line="80"/>
            <javadoc line="80">
                Progressive DCT, Arithmetic coding                
            </javadoc>
            <declaration name="SOF11" type="int" line="82"/>
            <javadoc line="82">
                Lossless Sequential, Arithmetic coding                
            </javadoc>
            <declaration name="DAC" type="int" line="85"/>
            <javadoc line="85">
                Define Arithmetic conditioning tables                
            </javadoc>
            <declaration name="SOF13" type="int" line="89"/>
            <javadoc line="89">
                Differential Sequential DCT, Arithmetic coding                
            </javadoc>
            <declaration name="SOF14" type="int" line="91"/>
            <javadoc line="91">
                Differential Progressive DCT, Arithmetic coding                
            </javadoc>
            <declaration name="SOF15" type="int" line="93"/>
            <javadoc line="93">
                Differential Lossless, Arithmetic coding                
            </javadoc>
            <declaration name="RST0" type="int" line="97"/>
            <declaration name="RST1" type="int" line="98"/>
            <declaration name="RST2" type="int" line="99"/>
            <declaration name="RST3" type="int" line="100"/>
            <declaration name="RST4" type="int" line="101"/>
            <declaration name="RST5" type="int" line="102"/>
            <declaration name="RST6" type="int" line="103"/>
            <declaration name="RST7" type="int" line="104"/>
            <declaration name="RESTART_RANGE" type="int" line="105"/>
            <javadoc line="105">
                Number of restart markers                
            </javadoc>
            <declaration name="SOI" type="int" line="108"/>
            <javadoc line="108">
                Start of Image                
            </javadoc>
            <declaration name="EOI" type="int" line="110"/>
            <javadoc line="110">
                End of Image                
            </javadoc>
            <declaration name="SOS" type="int" line="112"/>
            <javadoc line="112">
                Start of Scan                
            </javadoc>
            <declaration name="DQT" type="int" line="115"/>
            <javadoc line="115">
                Define Quantisation Tables                
            </javadoc>
            <declaration name="DNL" type="int" line="118"/>
            <javadoc line="118">
                Define Number of lines                
            </javadoc>
            <declaration name="DRI" type="int" line="121"/>
            <javadoc line="121">
                Define Restart Interval                
            </javadoc>
            <declaration name="DHP" type="int" line="124"/>
            <javadoc line="124">
                Define Heirarchical progression                
            </javadoc>
            <declaration name="EXP" type="int" line="127"/>
            <javadoc line="127">
                Expand reference image(s)                
            </javadoc>
            <declaration name="APP0" type="int" line="131"/>
            <javadoc line="131">
                APP0 used by JFIF                
            </javadoc>
            <declaration name="APP1" type="int" line="133"/>
            <declaration name="APP2" type="int" line="134"/>
            <declaration name="APP3" type="int" line="135"/>
            <declaration name="APP4" type="int" line="136"/>
            <declaration name="APP5" type="int" line="137"/>
            <declaration name="APP6" type="int" line="138"/>
            <declaration name="APP7" type="int" line="139"/>
            <declaration name="APP8" type="int" line="140"/>
            <declaration name="APP9" type="int" line="141"/>
            <declaration name="APP10" type="int" line="142"/>
            <declaration name="APP11" type="int" line="143"/>
            <declaration name="APP12" type="int" line="144"/>
            <declaration name="APP13" type="int" line="145"/>
            <declaration name="APP14" type="int" line="146"/>
            <javadoc line="146">
                APP14 used by Adobe                
            </javadoc>
            <declaration name="APP15" type="int" line="148"/>
            <declaration name="COM" type="int" line="152"/>
            <javadoc line="152">
                Comment marker                
            </javadoc>
            <declaration name="DENSITY_UNIT_ASPECT_RATIO" type="int" line="156"/>
            <javadoc line="156">
                The X and Y units simply indicate the aspect ratio of the pixels.                
            </javadoc>
            <declaration name="DENSITY_UNIT_DOTS_INCH" type="int" line="158"/>
            <javadoc line="158">
                Pixel density is in pixels per inch.                
            </javadoc>
            <declaration name="DENSITY_UNIT_DOTS_CM" type="int" line="160"/>
            <javadoc line="160">
                Pixel density is in pixels per centemeter.                
            </javadoc>
            <declaration name="NUM_DENSITY_UNIT" type="int" line="162"/>
            <javadoc line="162">
                The max known value for DENSITY_UNIT                
            </javadoc>
            <declaration name="ADOBE_IMPOSSIBLE" type="int" line="166"/>
            <declaration name="ADOBE_UNKNOWN" type="int" line="167"/>
            <declaration name="ADOBE_YCC" type="int" line="168"/>
            <declaration name="ADOBE_YCCK" type="int" line="169"/>
            <declaration name="vendor" type="String" line="172"/>
            <declaration name="version" type="String" line="173"/>
            <declaration name="names" type="String[]" line="175"/>
            <declaration name="suffixes" type="String[]" line="176"/>
            <declaration name="MIMETypes" type="String[]" line="177"/>
            <declaration name="nativeImageMetadataFormatName" type="String" line="178"/>
            <declaration name="nativeImageMetadataFormatClassName" type="String" line="180"/>
            <declaration name="nativeStreamMetadataFormatName" type="String" line="182"/>
            <declaration name="nativeStreamMetadataFormatClassName" type="String" line="184"/>
            <declaration name="JCS_UNKNOWN" type="int" line="188"/>
            <declaration name="JCS_GRAYSCALE" type="int" line="189"/>
            <declaration name="JCS_RGB" type="int" line="190"/>
            <declaration name="JCS_YCbCr" type="int" line="191"/>
            <declaration name="JCS_CMYK" type="int" line="192"/>
            <declaration name="JCS_YCC" type="int" line="193"/>
            <declaration name="JCS_RGBA" type="int" line="194"/>
            <declaration name="JCS_YCbCrA" type="int" line="195"/>
            <declaration name="JCS_YCCA" type="int" line="198"/>
            <declaration name="JCS_YCCK" type="int" line="199"/>
            <declaration name="NUM_JCS_CODES" type="int" line="201"/>
            <declaration name="bandOffsets" type="int[][]" line="203"/>
            <javadoc line="203">
                IJG can handle up to 4-channel JPEGs                
            </javadoc>
            <declaration name="bOffsRGB" type="int[]" line="209"/>
            <class name="JCS" line="215">
                <declaration name="sRGB" type="ColorSpace" line="216"/>
                <declaration name="YCC" type="ColorSpace" line="219"/>
                <declaration name="yccInited" type="boolean" line="220"/>
                <method name="getYCC" type="ColorSpace" line="222">
                    <comment line="227">
                        PYCC.pf may not always be installed                        
                    </comment>
                    <scope line="223">
                        <scope line="224"/>
                        <scope line="226"/>
                        <scope line="228"/>
                    </scope>
                </method>
            </class>
            <declaration name="DEFAULT_QUALITY" type="float" line="237"/>
            <javadoc line="239">
                Returns &lt;code&gt;true&lt;/code&gt; if the given &lt;code&gt;ColorSpace&lt;/code&gt;
                  object is an instance of ICC_ColorSpace but is not one of the
                  standard &lt;code&gt;ColorSpaces&lt;/code&gt; returned by
                  &lt;code&gt;ColorSpace.getInstance()&lt;/code&gt;.                
            </javadoc>
            <method name="isNonStandardICC" type="boolean" line="245">
                <params>
                    <param name="cs" type="ColorSpace"/>
                </params>
                <declaration name="retval" type="boolean" line="246"/>
                <scope line="253"/>
            </method>
            <javadoc line="260">
                Returns &lt;code&gt;true&lt;/code&gt; if the given imageType can be used
                  in a JFIF file.  If &lt;code&gt;input&lt;/code&gt; is true, then the
                  image type is considered before colorspace conversion.                
            </javadoc>
            <method name="isJFIFcompliant" type="boolean" line="266">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="input" type="boolean"/>
                </params>
                <comment line="268">
                    Can&apos;t have alpha                    
                </comment>
                <comment line="272">
                    Gray is OK, always                    
                </comment>
                <comment line="278">
                    If it isn&apos;t gray, it must have 3 channels                    
                </comment>
                <comment line="284">
                    Must be RGB                    
                </comment>
                <comment line="289">
                    Must be YCbCr                    
                </comment>
                <declaration name="cm" type="ColorModel" line="267"/>
                <scope line="269"/>
                <declaration name="numComponents" type="int" line="273"/>
                <scope line="274"/>
                <scope line="279"/>
                <scope line="283">
                    <scope line="285"/>
                </scope>
                <scope line="288">
                    <scope line="290"/>
                </scope>
            </method>
            <javadoc line="298">
                Given an image type, return the Adobe transform corresponding to
                  that type, or ADOBE_IMPOSSIBLE if the image type is incompatible
                  with an Adobe marker segment.  If &lt;code&gt;input&lt;/code&gt; is true, then
                  the image type is considered before colorspace conversion.                
            </javadoc>
            <method name="transformForType" type="int" line="304">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="input" type="boolean"/>
                </params>
                <declaration name="retval" type="int" line="305"/>
                <declaration name="cm" type="ColorModel" line="306"/>
            </method>
            <javadoc line="323">
                Converts an ImageWriteParam (i.e. IJG) non-linear quality value
                  to a float suitable for passing to JPEGQTable.getScaledInstance().                
            </javadoc>
            <method name="convertToLinearQuality" type="float" line="327">
                <params>
                    <param name="quality" type="float"/>
                </params>
                <comment line="328">
                    The following is converted from the IJG code.                    
                </comment>
                <scope line="329"/>
                <scope line="333"/>
                <scope line="337"/>
                <scope line="339"/>
            </method>
            <javadoc line="346">
                Return an array of default, visually lossless quantization tables.                
            </javadoc>
            <method name="getDefaultQTables" type="JPEGQTable[]" line="349">
                <declaration name="qTables" type="JPEGQTable[]" line="350"/>
            </method>
            <javadoc line="356">
                Return an array of default Huffman tables.                
            </javadoc>
            <method name="getDefaultHuffmanTables" type="JPEGHuffmanTable[]" line="359">
                <params>
                    <param name="wantDC" type="boolean"/>
                </params>
                <declaration name="tables" type="JPEGHuffmanTable[]" line="360"/>
                <scope line="361"/>
                <scope line="364"/>
            </method>
        </class>
    </source>