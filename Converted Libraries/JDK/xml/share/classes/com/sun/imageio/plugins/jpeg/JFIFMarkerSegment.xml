<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.jpeg">
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.IIOImage"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.ImageReader"/>
        <import package="javax.imageio.metadata.IIOInvalidTreeException"/>
        <import package="javax.imageio.metadata.IIOMetadataNode"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.stream.ImageInputStream"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="javax.imageio.stream.MemoryCacheImageOutputStream"/>
        <import package="javax.imageio.event.IIOReadProgressListener"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.color.ICC_Profile"/>
        <import package="java.awt.color.ICC_ColorSpace"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.ComponentColorModel"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferByte"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.w3c.dom.NodeList"/>
        <import package="org.w3c.dom.NamedNodeMap"/>
        <class name="JFIFMarkerSegment" line="63">
            <extends class="MarkerSegment"/>
            <comment line="79">
                If present                
            </comment>
            <comment line="81">
                optional ICC                
            </comment>
            <comment line="410">
                Write out the values in the integer array as a sequence of bytes,
                 reporting progress to the writer argument.                
            </comment>
            <comment line="560">
                Could put reason codes in here to be parsed in writeJFXXSegment
                 in order to provide more meaningful warnings.                
            </comment>
            <javadoc line="63">
                A JFIF (JPEG File Interchange Format) APP0 (Application-Specific)
                  marker segment.  Inner classes are included for JFXX extension
                  marker segments, for different varieties of thumbnails, and for
                  ICC Profile APP2 marker segments.  Any of these secondary types
                  that occur are kept as members of a single JFIFMarkerSegment object.                
            </javadoc>
            <declaration name="majorVersion" type="int" line="71"/>
            <declaration name="minorVersion" type="int" line="72"/>
            <declaration name="resUnits" type="int" line="73"/>
            <declaration name="Xdensity" type="int" line="74"/>
            <declaration name="Ydensity" type="int" line="75"/>
            <declaration name="thumbWidth" type="int" line="76"/>
            <declaration name="thumbHeight" type="int" line="77"/>
            <declaration name="thumb" type="JFIFThumbRGB" line="78"/>
            <declaration name="extSegments" type="ArrayList" line="79"/>
            <declaration name="iccSegment" type="ICCMarkerSegment" line="80"/>
            <declaration name="THUMB_JPEG" type="int" line="81"/>
            <declaration name="THUMB_PALETTE" type="int" line="82"/>
            <declaration name="THUMB_UNASSIGNED" type="int" line="83"/>
            <declaration name="THUMB_RGB" type="int" line="84"/>
            <declaration name="DATA_SIZE" type="int" line="85"/>
            <declaration name="ID_SIZE" type="int" line="86"/>
            <declaration name="MAX_THUMB_WIDTH" type="int" line="87"/>
            <declaration name="MAX_THUMB_HEIGHT" type="int" line="88"/>
            <declaration name="debug" type="boolean" line="90"/>
            <declaration name="inICC" type="boolean" line="92"/>
            <javadoc line="92">
                Set to &lt;code&gt;true&lt;/code&gt; when reading the chunks of an
                  ICC profile.  All chunks are consolidated to create a single
                  &quot;segment&quot; containing all the chunks.  This flag is a state
                  variable identifying whether to construct a new segment or
                  append to an old one.                
            </javadoc>
            <declaration name="tempICCSegment" type="ICCMarkerSegment" line="101"/>
            <javadoc line="101">
                A placeholder for an ICC profile marker segment under
                  construction.  The segment is not added to the list
                  until all chunks have been read.                
            </javadoc>
            <javadoc line="109">
                Default constructor.  Used to create a default JFIF header                
            </javadoc>
            <method name="JFIFMarkerSegment" type="constructor" line="112"/>
            <javadoc line="123">
                Constructs a JFIF header by reading from a stream wrapped
                  in a JPEGBuffer.                
            </javadoc>
            <method name="JFIFMarkerSegment" type="constructor" line="127">
                <params>
                    <param name="buffer" type="JPEGBuffer"/>
                </params>
                <comment line="130">
                    skip the id, we already checked it                    
                </comment>
                <scope line="141"/>
            </method>
            <javadoc line="146">
                Constructs a JFIF header from a DOM Node.                
            </javadoc>
            <method name="JFIFMarkerSegment" type="constructor" line="149">
                <params>
                    <param name="node" type="Node"/>
                </params>
            </method>
            <javadoc line="154">
                Returns a deep-copy clone of this object.                
            </javadoc>
            <method name="clone" type="Object" line="157">
                <comment line="160">
                    Clone the list with a deep copy                    
                </comment>
                <declaration name="newGuy" type="JFIFMarkerSegment" line="158"/>
                <scope line="159">
                    <scope line="161">
                        <declaration name="jfxx" type="JFIFExtensionMarkerSegment" line="162"/>
                    </scope>
                </scope>
                <scope line="167"/>
            </method>
            <javadoc line="173">
                Add an JFXX extension marker segment from the stream wrapped
                  in the JPEGBuffer to the list of extension segments.                
            </javadoc>
            <method name="addJFXX" type="void" line="178">
                <params>
                    <param name="buffer" type="JPEGBuffer"/>
                    <param name="reader" type="JPEGImageReader"/>
                </params>
            </method>
            <javadoc line="182">
                Adds an ICC Profile APP2 segment from the stream wrapped
                  in the JPEGBuffer.                
            </javadoc>
            <method name="addICC" type="void" line="186">
                <params>
                    <param name="buffer" type="JPEGBuffer"/>
                </params>
                <comment line="194">
                    Just one chunk                    
                </comment>
                <scope line="187">
                    <scope line="188"/>
                    <scope line="193"/>
                </scope>
                <scope line="197">
                    <scope line="198"/>
                </scope>
            </method>
            <javadoc line="205">
                Add an ICC Profile APP2 segment by constructing it from
                  the given ICC_ColorSpace object.                
            </javadoc>
            <method name="addICC" type="void" line="209">
                <params>
                    <param name="cs" type="ICC_ColorSpace"/>
                </params>
                <scope line="210"/>
            </method>
            <javadoc line="217">
                Returns a tree of DOM nodes representing this object and any
                  subordinate JFXX extension or ICC Profile segments.                
            </javadoc>
            <method name="getNativeNode" type="IIOMetadataNode" line="221">
                <declaration name="node" type="IIOMetadataNode" line="222"/>
                <scope line="230">
                    <declaration name="JFXXnode" type="IIOMetadataNode" line="231"/>
                    <scope line="233">
                        <declaration name="seg" type="JFIFExtensionMarkerSegment" line="234"/>
                    </scope>
                </scope>
                <scope line="239"/>
            </method>
            <javadoc line="246">
                Updates the data in this object from the given DOM Node tree.
                  If fromScratch is true, this object is being constructed.
                  Otherwise an existing object is being modified.
                  Throws an IIOInvalidTreeException if the tree is invalid in
                  any way.                
            </javadoc>
            <method name="updateFromNativeNode" type="void" line="254">
                <params>
                    <param name="node" type="Node"/>
                    <param name="fromScratch" type="boolean"/>
                </params>
                <comment line="256">
                    none of the attributes are required                    
                </comment>
                <declaration name="attrs" type="NamedNodeMap" line="256"/>
                <scope line="257">
                    <declaration name="value" type="int" line="258"/>
                </scope>
                <scope line="275">
                    <declaration name="children" type="NodeList" line="276"/>
                    <declaration name="count" type="int" line="277"/>
                    <scope line="278"/>
                    <scope line="282">
                        <declaration name="child" type="Node" line="283"/>
                        <declaration name="name" type="String" line="284"/>
                        <scope line="285">
                            <scope line="286"/>
                            <declaration name="exts" type="NodeList" line="290"/>
                            <declaration name="extCount" type="int" line="291"/>
                            <scope line="292">
                                <declaration name="ext" type="Node" line="293"/>
                            </scope>
                        </scope>
                        <scope line="297">
                            <scope line="298"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getThumbnailWidth" type="int" line="308">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="309">
                    <scope line="310"/>
                </scope>
                <declaration name="jfxx" type="JFIFExtensionMarkerSegment" line="315"/>
            </method>
            <method name="getThumbnailHeight" type="int" line="320">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="321">
                    <scope line="322"/>
                </scope>
                <declaration name="jfxx" type="JFIFExtensionMarkerSegment" line="327"/>
            </method>
            <method name="getThumbnail" type="BufferedImage" line="334">
                <params>
                    <param name="iis" type="ImageInputStream"/>
                    <param name="index" type="int"/>
                    <param name="reader" type="JPEGImageReader"/>
                </params>
                <declaration name="ret" type="BufferedImage" line="336"/>
                <scope line="337"/>
                <scope line="339">
                    <scope line="340"/>
                    <declaration name="jfxx" type="JFIFExtensionMarkerSegment" line="343"/>
                </scope>
            </method>
            <javadoc line="352">
                Writes the data for this segment to the stream in
                  valid JPEG format.  Assumes that there will be no thumbnail.                
            </javadoc>
            <method name="write" type="void" line="357">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <comment line="359">
                    No thumbnail                    
                </comment>
            </method>
            <javadoc line="362">
                Writes the data for this segment to the stream in
                  valid JPEG format.  The length written takes the thumbnail
                  width and height into account.  If necessary, the thumbnail
                  is clipped to 255 x 255 and a warning is sent to the writer
                  argument.  Progress updates are sent to the writer argument.                
            </javadoc>
            <method name="write" type="void" line="371">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="thumb" type="BufferedImage"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <comment line="378">
                    Clip if necessary and get the data in thumbData                    
                </comment>
                <declaration name="thumbWidth" type="int" line="372"/>
                <declaration name="thumbHeight" type="int" line="373"/>
                <declaration name="thumbLength" type="int" line="374"/>
                <declaration name="thumbData" type="int[]" line="375"/>
                <scope line="376">
                    <scope line="381"/>
                </scope>
                <declaration name="id" type="byte[]" line="393"/>
                <scope line="402"/>
            </method>
            <method name="writeThumbnailData" type="void" line="415">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="thumbData" type="int[]"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <comment line="417">
                    approx. every 5%                    
                </comment>
                <declaration name="progInterval" type="int" line="416"/>
                <scope line="417"/>
                <scope line="420">
                    <scope line="422"/>
                </scope>
            </method>
            <javadoc line="429">
                Write out this JFIF Marker Segment, including a thumbnail or
                  appending a series of JFXX Marker Segments, as appropriate.
                  Warnings and progress reports are sent to the writer argument.
                  The list of thumbnails is matched to the list of JFXX extension
                  segments, if any, in order to determine how to encode the
                  thumbnails.  If there are more thumbnails than metadata segments,
                  default encoding is used for the extra thumbnails.                
            </javadoc>
            <method name="writeWithThumbs" type="void" line="440">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="thumbnails" type="List"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <comment line="455">
                    All others write as separate JFXX segments                    
                </comment>
                <comment line="456">
                    Just the header without any thumbnail                    
                </comment>
                <comment line="470">
                    No thumbnails                    
                </comment>
                <scope line="441">
                    <declaration name="jfxx" type="JFIFExtensionMarkerSegment" line="442"/>
                    <scope line="443">
                        <scope line="444"/>
                    </scope>
                    <scope line="453">
                        <scope line="456">
                            <scope line="458"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="469"/>
            </method>
            <method name="writeThumb" type="void" line="480">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="thumb" type="BufferedImage"/>
                    <param name="jfxx" type="JFIFExtensionMarkerSegment"/>
                    <param name="index" type="int"/>
                    <param name="onlyOne" type="boolean"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <comment line="486">
                    We never write a palette image into the header
                     So if it&apos;s the only one, we need to write the header first                    
                </comment>
                <comment line="493">
                    default                    
                </comment>
                <comment line="495">
                    Expand to RGB                    
                </comment>
                <comment line="501">
                    Handles clipping if needed                    
                </comment>
                <comment line="507">
                    As part of the header                    
                </comment>
                <comment line="509">
                    default                    
                </comment>
                <comment line="512">
                    If this is the only one, write the header first                    
                </comment>
                <comment line="517">
                    default                    
                </comment>
                <comment line="523">
                    Handles clipping if needed                    
                </comment>
                <comment line="531">
                    As part of the header                    
                </comment>
                <comment line="533">
                    default                    
                </comment>
                <comment line="536">
                    If this is the only one, write the header first                    
                </comment>
                <comment line="546">
                    Handles clipping if needed                    
                </comment>
                <comment line="549">
                    default                    
                </comment>
                <declaration name="cm" type="ColorModel" line="481"/>
                <declaration name="cs" type="ColorSpace" line="482"/>
                <scope line="484">
                    <scope line="487"/>
                    <scope line="491"/>
                    <scope line="493">
                        <declaration name="thumbRGB" type="BufferedImage" line="495"/>
                    </scope>
                </scope>
                <scope line="503">
                    <scope line="504">
                        <scope line="505"/>
                        <scope line="507"/>
                    </scope>
                    <scope line="510">
                        <scope line="512"/>
                        <scope line="515"/>
                        <scope line="519"/>
                    </scope>
                </scope>
                <scope line="526">
                    <scope line="527">
                        <scope line="528">
                            <declaration name="thumbRGB" type="BufferedImage" line="529"/>
                        </scope>
                        <scope line="531"/>
                    </scope>
                    <scope line="534">
                        <scope line="536"/>
                        <scope line="539">
                            <declaration name="thumbRGB" type="BufferedImage" line="540"/>
                        </scope>
                        <scope line="542"/>
                        <scope line="547"/>
                    </scope>
                </scope>
                <scope line="553"/>
            </method>
            <class name="IllegalThumbException" line="561">
                <extends class="Exception"/>
                <comment line="808">
                    Save the thumbnail pos when reading                    
                </comment>
                <comment line="809">
                    When writing                    
                </comment>
                <comment line="1126">
                    Compressed image data, for writing                    
                </comment>
                <comment line="1377">
                    The complete profile when it&apos;s fully read                    
                </comment>
                <comment line="1378">
                    May remain null when writing                    
                </comment>
            </class>
            <javadoc line="563">
                Writes out a new JFXX extension segment, without saving it.                
            </javadoc>
            <method name="writeJFXXSegment" type="void" line="569">
                <params>
                    <param name="index" type="int"/>
                    <param name="thumbnail" type="BufferedImage"/>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <declaration name="jfxx" type="JFIFExtensionMarkerSegment" line="570"/>
                <scope line="571"/>
                <scope line="573"/>
            </method>
            <javadoc line="584">
                Return an RGB image that is the expansion of the given grayscale
                  image.                
            </javadoc>
            <method name="expandGrayThumb" type="BufferedImage" line="588">
                <params>
                    <param name="thumb" type="BufferedImage"/>
                </params>
                <declaration name="ret" type="BufferedImage" line="589"/>
                <declaration name="g" type="Graphics" line="592"/>
            </method>
            <javadoc line="597">
                Writes out a default JFIF marker segment to the given
                  output stream.  If &lt;code&gt;thumbnails&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;,
                  writes out the set of thumbnail images as JFXX marker segments, or
                  incorporated into the JFIF segment if appropriate.
                  If &lt;code&gt;iccProfile&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;,
                  writes out the profile after the JFIF segment using as many APP2
                  marker segments as necessary.                
            </javadoc>
            <method name="writeDefaultJFIF" type="void" line="610">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="thumbnails" type="List"/>
                    <param name="iccProfile" type="ICC_Profile"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <declaration name="jfif" type="JFIFMarkerSegment" line="612"/>
                <scope line="614"/>
            </method>
            <javadoc line="619">
                Prints out the contents of this object to System.out for debugging.                
            </javadoc>
            <method name="print" type="void" line="622">
                <scope line="638">
                    <scope line="639">
                        <declaration name="extSegment" type="JFIFExtensionMarkerSegment" line="640"/>
                    </scope>
                </scope>
                <scope line="645"/>
            </method>
            <class name="JFIFExtensionMarkerSegment" line="650">
                <extends class="MarkerSegment"/>
                <comment line="808">
                    Save the thumbnail pos when reading                    
                </comment>
                <comment line="809">
                    When writing                    
                </comment>
                <comment line="1126">
                    Compressed image data, for writing                    
                </comment>
                <comment line="1377">
                    The complete profile when it&apos;s fully read                    
                </comment>
                <comment line="1378">
                    May remain null when writing                    
                </comment>
                <javadoc line="650">
                    A JFIF extension APP0 marker segment.                    
                </javadoc>
                <declaration name="code" type="int" line="654"/>
                <declaration name="thumb" type="JFIFThumb" line="655"/>
                <declaration name="DATA_SIZE" type="int" line="656"/>
                <declaration name="ID_SIZE" type="int" line="657"/>
                <method name="JFIFExtensionMarkerSegment" type="constructor" line="660">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                        <param name="reader" type="JPEGImageReader"/>
                    </params>
                    <comment line="664">
                        skip the id, we already checked it                        
                    </comment>
                    <comment line="675">
                        following constructors handle bufAvail                        
                    </comment>
                    <scope line="667"/>
                    <scope line="669">
                        <declaration name="thumbX" type="int" line="671"/>
                        <declaration name="thumbY" type="int" line="672"/>
                        <scope line="675"/>
                        <scope line="677"/>
                    </scope>
                </method>
                <method name="JFIFExtensionMarkerSegment" type="constructor" line="683">
                    <params>
                        <param name="node" type="Node"/>
                    </params>
                    <comment line="701">
                        Now the child                        
                    </comment>
                    <declaration name="attrs" type="NamedNodeMap" line="685"/>
                    <scope line="686">
                        <scope line="693"/>
                    </scope>
                    <scope line="697"/>
                    <scope line="701"/>
                    <declaration name="child" type="Node" line="705"/>
                    <declaration name="name" type="String" line="706"/>
                    <scope line="707">
                        <scope line="708"/>
                    </scope>
                    <scope line="712">
                        <scope line="713"/>
                    </scope>
                    <scope line="717">
                        <scope line="718"/>
                    </scope>
                    <scope line="722"/>
                </method>
                <method name="JFIFExtensionMarkerSegment" type="constructor" line="729">
                    <params>
                        <param name="thumbnail" type="BufferedImage"/>
                    </params>
                    <declaration name="cm" type="ColorModel" line="732"/>
                    <declaration name="csType" type="int" line="733"/>
                    <scope line="734"/>
                    <scope line="737"/>
                    <scope line="740"/>
                    <scope line="743"/>
                    <scope line="746"/>
                </method>
                <method name="setThumbnail" type="void" line="751">
                    <params>
                        <param name="thumbnail" type="BufferedImage"/>
                    </params>
                    <comment line="766">
                        Should never happen                        
                    </comment>
                    <scope line="752"/>
                    <scope line="764"/>
                </method>
                <method name="clone" type="Object" line="770">
                    <declaration name="newGuy" type="JFIFExtensionMarkerSegment" line="771"/>
                    <scope line="773"/>
                </method>
                <method name="getNativeNode" type="IIOMetadataNode" line="779">
                    <declaration name="node" type="IIOMetadataNode" line="780"/>
                </method>
                <method name="write" type="void" line="787">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                        <param name="writer" type="JPEGImageWriter"/>
                    </params>
                    <declaration name="id" type="byte[]" line="790"/>
                </method>
                <method name="print" type="void" line="796"/>
            </class>
            <class name="JFIFThumb" line="802">
                <comment line="808">
                    Save the thumbnail pos when reading                    
                </comment>
                <comment line="809">
                    When writing                    
                </comment>
                <comment line="1126">
                    Compressed image data, for writing                    
                </comment>
                <comment line="1377">
                    The complete profile when it&apos;s fully read                    
                </comment>
                <comment line="1378">
                    May remain null when writing                    
                </comment>
                <implements interface="Cloneable"/>
                <javadoc line="802">
                    A superclass for the varieties of thumbnails that can
                      be stored in a JFIF extension marker segment.                    
                </javadoc>
                <declaration name="streamPos" type="long" line="807"/>
                <method name="getLength" type="int" line="808"/>
                <method name="getWidth" type="int" line="809"/>
                <method name="getHeight" type="int" line="810"/>
                <method name="getThumbnail" type="BufferedImage" line="811"/>
                <method name="JFIFThumb" type="constructor" line="815"/>
                <method name="JFIFThumb" type="constructor" line="817">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                    </params>
                    <comment line="819">
                        Save the stream position for reading the thumbnail later                        
                    </comment>
                </method>
                <method name="print" type="void" line="822"/>
                <method name="getNativeNode" type="IIOMetadataNode" line="824"/>
                <method name="write" type="void" line="826"/>
                <method name="clone" type="Object" line="829">
                    <comment line="833">
                        won&apos;t happen                        
                    </comment>
                    <scope line="830"/>
                    <scope line="832"/>
                </method>
            </class>
            <class name="JFIFThumbUncompressed" line="838">
                <extends class="JFIFThumb"/>
                <comment line="808">
                    Save the thumbnail pos when reading                    
                </comment>
                <comment line="809">
                    When writing                    
                </comment>
                <comment line="1126">
                    Compressed image data, for writing                    
                </comment>
                <comment line="1377">
                    The complete profile when it&apos;s fully read                    
                </comment>
                <comment line="1378">
                    May remain null when writing                    
                </comment>
                <declaration name="thumbnail" type="BufferedImage" line="839"/>
                <declaration name="thumbWidth" type="int" line="840"/>
                <declaration name="thumbHeight" type="int" line="841"/>
                <declaration name="name" type="String" line="842"/>
                <method name="JFIFThumbUncompressed" type="constructor" line="849">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                        <param name="skip" type="int"/>
                        <param name="name" type="String"/>
                    </params>
                    <comment line="854">
                        Now skip the thumbnail data                        
                    </comment>
                </method>
                <method name="JFIFThumbUncompressed" type="constructor" line="859">
                    <params>
                        <param name="node" type="Node"/>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="attrs" type="NamedNodeMap" line="864"/>
                    <declaration name="count" type="int" line="865"/>
                    <scope line="866"/>
                    <scope line="870">
                        <declaration name="value" type="int" line="871"/>
                    </scope>
                </method>
                <method name="JFIFThumbUncompressed" type="constructor" line="880">
                    <params>
                        <param name="thumb" type="BufferedImage"/>
                    </params>
                    <comment line="885">
                        not used when writing                        
                    </comment>
                </method>
                <method name="readByteBuffer" type="void" line="891">
                    <params>
                        <param name="iis" type="ImageInputStream"/>
                        <param name="data" type="byte[]"/>
                        <param name="reader" type="JPEGImageReader"/>
                        <param name="workPortion" type="float"/>
                        <param name="workOffset" type="float"/>
                    </params>
                    <declaration name="progInterval" type="int" line="892"/>
                    <scope line="895">
                        <declaration name="len" type="int" line="896"/>
                        <declaration name="percentDone" type="float" line="899"/>
                        <scope line="902"/>
                    </scope>
                </method>
                <method name="getWidth" type="int" line="910"/>
                <method name="getHeight" type="int" line="914"/>
                <method name="getNativeNode" type="IIOMetadataNode" line="918">
                    <declaration name="node" type="IIOMetadataNode" line="919"/>
                </method>
                <method name="write" type="void" line="926">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                        <param name="writer" type="JPEGImageWriter"/>
                    </params>
                    <scope line="928"/>
                </method>
                <method name="writePixels" type="void" line="938">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                        <param name="writer" type="JPEGImageWriter"/>
                    </params>
                    <scope line="940"/>
                    <declaration name="data" type="int[]" line="945"/>
                </method>
                <method name="print" type="void" line="952"/>
            </class>
            <class name="JFIFThumbRGB" line="961">
                <extends class="JFIFThumbUncompressed"/>
                <comment line="808">
                    Save the thumbnail pos when reading                    
                </comment>
                <comment line="809">
                    When writing                    
                </comment>
                <comment line="1126">
                    Compressed image data, for writing                    
                </comment>
                <comment line="1377">
                    The complete profile when it&apos;s fully read                    
                </comment>
                <comment line="1378">
                    May remain null when writing                    
                </comment>
                <javadoc line="961">
                    A JFIF thumbnail stored as RGB, one byte per channel,
                      interleaved.                    
                </javadoc>
                <method name="JFIFThumbRGB" type="constructor" line="968">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                </method>
                <method name="JFIFThumbRGB" type="constructor" line="973">
                    <params>
                        <param name="node" type="Node"/>
                    </params>
                </method>
                <method name="JFIFThumbRGB" type="constructor" line="977">
                    <params>
                        <param name="thumb" type="BufferedImage"/>
                    </params>
                </method>
                <method name="getLength" type="int" line="981"/>
                <method name="getThumbnail" type="BufferedImage" line="987">
                    <params>
                        <param name="iis" type="ImageInputStream"/>
                        <param name="reader" type="JPEGImageReader"/>
                    </params>
                    <declaration name="buffer" type="DataBufferByte" line="990"/>
                    <declaration name="raster" type="WritableRaster" line="998"/>
                    <declaration name="cm" type="ColorModel" line="1006"/>
                </method>
                <method name="write" type="void" line="1018">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                        <param name="writer" type="JPEGImageWriter"/>
                    </params>
                    <comment line="1020">
                        width and height                        
                    </comment>
                </method>
            </class>
            <class name="JFIFThumbPalette" line="1025">
                <extends class="JFIFThumbUncompressed"/>
                <comment line="808">
                    Save the thumbnail pos when reading                    
                </comment>
                <comment line="809">
                    When writing                    
                </comment>
                <comment line="1126">
                    Compressed image data, for writing                    
                </comment>
                <comment line="1377">
                    The complete profile when it&apos;s fully read                    
                </comment>
                <comment line="1378">
                    May remain null when writing                    
                </comment>
                <javadoc line="1025">
                    A JFIF thumbnail stored as an indexed palette image
                      using an RGB palette.                    
                </javadoc>
                <declaration name="PALETTE_SIZE" type="int" line="1030"/>
                <method name="JFIFThumbPalette" type="constructor" line="1033">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                </method>
                <method name="JFIFThumbPalette" type="constructor" line="1041">
                    <params>
                        <param name="node" type="Node"/>
                    </params>
                </method>
                <method name="JFIFThumbPalette" type="constructor" line="1045">
                    <params>
                        <param name="thumb" type="BufferedImage"/>
                    </params>
                    <declaration name="icm" type="IndexColorModel" line="1047"/>
                    <scope line="1048"/>
                </method>
                <method name="getLength" type="int" line="1053"/>
                <method name="getThumbnail" type="BufferedImage" line="1059">
                    <params>
                        <param name="iis" type="ImageInputStream"/>
                        <param name="reader" type="JPEGImageReader"/>
                    </params>
                    <comment line="1063">
                        read the palette                        
                    </comment>
                    <declaration name="palette" type="byte[]" line="1063"/>
                    <declaration name="palettePart" type="float" line="1064"/>
                    <declaration name="buffer" type="DataBufferByte" line="1070"/>
                    <declaration name="cm" type="IndexColorModel" line="1079"/>
                    <declaration name="sm" type="SampleModel" line="1084"/>
                    <declaration name="raster" type="WritableRaster" line="1086"/>
                </method>
                <method name="write" type="void" line="1095">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                        <param name="writer" type="JPEGImageWriter"/>
                    </params>
                    <comment line="1097">
                        width and height                        
                    </comment>
                    <comment line="1098">
                        Write the palette (must be 768 bytes)                        
                    </comment>
                    <declaration name="palette" type="byte[]" line="1098"/>
                    <declaration name="icm" type="IndexColorModel" line="1099"/>
                    <declaration name="reds" type="byte[]" line="1100"/>
                    <declaration name="greens" type="byte[]" line="1101"/>
                    <declaration name="blues" type="byte[]" line="1102"/>
                    <scope line="1106"/>
                </method>
            </class>
            <class name="JFIFThumbJPEG" line="1117">
                <extends class="JFIFThumb"/>
                <comment line="808">
                    Save the thumbnail pos when reading                    
                </comment>
                <comment line="809">
                    When writing                    
                </comment>
                <comment line="1126">
                    Compressed image data, for writing                    
                </comment>
                <comment line="1377">
                    The complete profile when it&apos;s fully read                    
                </comment>
                <comment line="1378">
                    May remain null when writing                    
                </comment>
                <javadoc line="1117">
                    A JFIF thumbnail stored as a JPEG stream.  No JFIF or
                      JFIF extension markers are permitted.  There is no need
                      to clip these, but the entire image must fit into a
                      single JFXX marker segment.                    
                </javadoc>
                <declaration name="thumbMetadata" type="JPEGMetadata" line="1124"/>
                <declaration name="data" type="byte[]" line="1125"/>
                <declaration name="PREAMBLE_SIZE" type="int" line="1126"/>
                <method name="JFIFThumbJPEG" type="constructor" line="1130">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                        <param name="length" type="int"/>
                        <param name="reader" type="JPEGImageReader"/>
                    </params>
                    <comment line="1133">
                        Compute the final stream position                        
                    </comment>
                    <comment line="1135">
                        Set the stream back to the start of the thumbnail
                         and read its metadata (but don&apos;t decode the image)                        
                    </comment>
                    <comment line="1139">
                        Set the stream to the computed final position                        
                    </comment>
                    <comment line="1141">
                        Clear the now invalid buffer                        
                    </comment>
                    <declaration name="finalPos" type="long" line="1133"/>
                </method>
                <method name="JFIFThumbJPEG" type="constructor" line="1145">
                    <params>
                        <param name="node" type="Node"/>
                    </params>
                    <scope line="1146"/>
                    <declaration name="child" type="Node" line="1150"/>
                    <scope line="1151">
                        <declaration name="name" type="String" line="1152"/>
                        <scope line="1153"/>
                    </scope>
                </method>
                <method name="JFIFThumbJPEG" type="constructor" line="1163">
                    <params>
                        <param name="thumb" type="BufferedImage"/>
                    </params>
                    <comment line="1177">
                        get default metadata for the thumb                        
                    </comment>
                    <comment line="1182">
                        Remove the jfif segment, which should be there.                        
                    </comment>
                    <comment line="1191">
                        Use this if removing leaves a hole and causes trouble
                        
                         Get the tree
                        String format = metadata.getNativeMetadataFormatName();
                        IIOMetadataNode tree =
                        (IIOMetadataNode) metadata.getAsTree(format);
                        
                         If there is no app0jfif node, the image is bad
                        NodeList jfifs = tree.getElementsByTagName(&quot;app0JFIF&quot;);
                        if (jfifs.getLength() == 0) {
                        throw new IllegalThumbException();
                        }
                        
                         remove the app0jfif node
                        Node jfif = jfifs.item(0);
                        Node parent = jfif.getParentNode();
                        parent.removeChild(jfif);
                        
                        metadata.setFromTree(format, tree);                        
                    </comment>
                    <comment line="1215">
                        Now check that the size is OK                        
                    </comment>
                    <declaration name="INITIAL_BUFSIZE" type="int" line="1164"/>
                    <declaration name="MAZ_BUFSIZE" type="int" line="1165"/>
                    <scope line="1166">
                        <declaration name="baos" type="ByteArrayOutputStream" line="1167"/>
                        <declaration name="mos" type="MemoryCacheImageOutputStream" line="1169"/>
                        <declaration name="thumbWriter" type="JPEGImageWriter" line="1172"/>
                        <declaration name="metadata" type="JPEGMetadata" line="1177"/>
                        <declaration name="jfif" type="MarkerSegment" line="1182"/>
                        <scope line="1184"/>
                        <scope line="1215"/>
                    </scope>
                    <scope line="1219"/>
                </method>
                <method name="getWidth" type="int" line="1224">
                    <declaration name="retval" type="int" line="1225"/>
                    <declaration name="sof" type="SOFMarkerSegment" line="1226"/>
                    <scope line="1229"/>
                </method>
                <method name="getHeight" type="int" line="1235">
                    <declaration name="retval" type="int" line="1236"/>
                    <declaration name="sof" type="SOFMarkerSegment" line="1237"/>
                    <scope line="1240"/>
                </method>
                <class name="ThumbnailReadListener" line="1246">
                    <implements interface="IIOReadProgressListener"/>
                    <declaration name="reader" type="JPEGImageReader" line="1248"/>
                    <method name="ThumbnailReadListener" type="constructor" line="1249">
                        <params>
                            <param name="reader" type="JPEGImageReader"/>
                        </params>
                    </method>
                    <method name="sequenceStarted" type="void" line="1252">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="minIndex" type="int"/>
                        </params>
                    </method>
                    <method name="sequenceComplete" type="void" line="1253">
                        <params>
                            <param name="source" type="ImageReader"/>
                        </params>
                    </method>
                    <method name="imageStarted" type="void" line="1254">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="imageIndex" type="int"/>
                        </params>
                    </method>
                    <method name="imageProgress" type="void" line="1256">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="percentageDone" type="float"/>
                        </params>
                    </method>
                    <method name="imageComplete" type="void" line="1259">
                        <params>
                            <param name="source" type="ImageReader"/>
                        </params>
                    </method>
                    <method name="thumbnailStarted" type="void" line="1261">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="imageIndex" type="int"/>
                            <param name="thumbnailIndex" type="int"/>
                        </params>
                    </method>
                    <method name="thumbnailProgress" type="void" line="1262">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="percentageDone" type="float"/>
                        </params>
                    </method>
                    <method name="thumbnailComplete" type="void" line="1263">
                        <params>
                            <param name="source" type="ImageReader"/>
                        </params>
                    </method>
                    <method name="readAborted" type="void" line="1264">
                        <params>
                            <param name="source" type="ImageReader"/>
                        </params>
                    </method>
                </class>
                <method name="getThumbnail" type="BufferedImage" line="1269">
                    <params>
                        <param name="iis" type="ImageInputStream"/>
                        <param name="reader" type="JPEGImageReader"/>
                    </params>
                    <declaration name="thumbReader" type="JPEGImageReader" line="1272"/>
                    <declaration name="ret" type="BufferedImage" line="1276"/>
                </method>
                <method name="clone" type="Object" line="1282">
                    <declaration name="newGuy" type="JFIFThumbJPEG" line="1283"/>
                    <scope line="1284"/>
                </method>
                <method name="getNativeNode" type="IIOMetadataNode" line="1290">
                    <declaration name="node" type="IIOMetadataNode" line="1291"/>
                    <scope line="1292"/>
                </method>
                <method name="getLength" type="int" line="1298">
                    <scope line="1299"/>
                    <scope line="1301"/>
                </method>
                <method name="write" type="void" line="1307">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                        <param name="writer" type="JPEGImageWriter"/>
                    </params>
                    <comment line="1309">
                        approx. every 5%                        
                    </comment>
                    <declaration name="progInterval" type="int" line="1308"/>
                    <scope line="1309"/>
                    <scope line="1313">
                        <declaration name="len" type="int" line="1314"/>
                        <declaration name="percentDone" type="float" line="1317"/>
                        <scope line="1318"/>
                    </scope>
                </method>
                <method name="print" type="void" line="1325"/>
            </class>
            <javadoc line="1330">
                Write out the given profile to the stream, embedded in
                  the necessary number of APP2 segments, per the ICC spec.
                  This is the only mechanism for writing an ICC profile
                  to a stream.                
            </javadoc>
            <method name="writeICC" type="void" line="1337">
                <params>
                    <param name="profile" type="ICC_Profile"/>
                    <param name="ios" type="ImageOutputStream"/>
                </params>
                <comment line="1341">
                    spec says it&apos;s null-terminated                    
                </comment>
                <comment line="1361">
                    Null-terminate the string                    
                </comment>
                <declaration name="LENGTH_LENGTH" type="int" line="1338"/>
                <declaration name="ID" type="String" line="1339"/>
                <declaration name="ID_LENGTH" type="int" line="1340"/>
                <declaration name="COUNTS_LENGTH" type="int" line="1341"/>
                <declaration name="MAX_ICC_CHUNK_SIZE" type="int" line="1342"/>
                <declaration name="data" type="byte[]" line="1345"/>
                <declaration name="numChunks" type="int" line="1346"/>
                <scope line="1347"/>
                <declaration name="chunkNum" type="int" line="1350"/>
                <declaration name="offset" type="int" line="1351"/>
                <scope line="1352">
                    <declaration name="dataLength" type="int" line="1353"/>
                    <declaration name="segLength" type="int" line="1354"/>
                    <declaration name="id" type="byte[]" line="1358"/>
                </scope>
            </method>
            <class name="ICCMarkerSegment" line="1368">
                <extends class="MarkerSegment"/>
                <comment line="808">
                    Save the thumbnail pos when reading                    
                </comment>
                <comment line="809">
                    When writing                    
                </comment>
                <comment line="1126">
                    Compressed image data, for writing                    
                </comment>
                <comment line="1377">
                    The complete profile when it&apos;s fully read                    
                </comment>
                <comment line="1378">
                    May remain null when writing                    
                </comment>
                <javadoc line="1368">
                    An APP2 marker segment containing an ICC profile.  In the stream
                      a profile larger than 64K is broken up into a series of chunks.
                      This inner class represents the complete profile as a single objec,
                      combining chunks as necessary.                    
                </javadoc>
                <declaration name="chunks" type="ArrayList" line="1375"/>
                <declaration name="profile" type="byte[]" line="1376"/>
                <declaration name="ID_SIZE" type="int" line="1378"/>
                <declaration name="chunksRead" type="int" line="1379"/>
                <declaration name="numChunks" type="int" line="1380"/>
                <method name="ICCMarkerSegment" type="constructor" line="1382">
                    <params>
                        <param name="cs" type="ICC_ColorSpace"/>
                    </params>
                </method>
                <method name="ICCMarkerSegment" type="constructor" line="1390">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                    </params>
                    <comment line="1392">
                        gets whole segment or fills the buffer                        
                    </comment>
                    <comment line="1396">
                        Skip the id                        
                    </comment>
                    <comment line="1398">
                        Reduce the stored length by the id size.  The stored
                         length is used to store the length of the profile
                         data only.                        
                    </comment>
                    <comment line="1405">
                        get the chunk number                        
                    </comment>
                    <comment line="1407">
                        get the total number of chunks                        
                    </comment>
                    <comment line="1415">
                        if there are no more chunks, set up the data                        
                    </comment>
                    <comment line="1417">
                        reduce the stored length by the two chunk numbering bytes                        
                    </comment>
                    <comment line="1425">
                        If we store them away, include the chunk numbering bytes                        
                    </comment>
                    <comment line="1427">
                        Now reduce the stored length by the
                         two chunk numbering bytes                        
                    </comment>
                    <scope line="1392"/>
                    <declaration name="chunkNum" type="int" line="1405"/>
                    <scope line="1409"/>
                    <scope line="1415"/>
                    <scope line="1423">
                        <declaration name="profileData" type="byte[]" line="1425"/>
                    </scope>
                </method>
                <method name="ICCMarkerSegment" type="constructor" line="1437">
                    <params>
                        <param name="node" type="Node"/>
                    </params>
                    <comment line="1443">
                        May be null                        
                    </comment>
                    <scope line="1439">
                        <declaration name="ourNode" type="IIOMetadataNode" line="1440"/>
                        <declaration name="prof" type="ICC_Profile" line="1441"/>
                        <scope line="1442"/>
                    </scope>
                </method>
                <method name="clone" type="Object" line="1448">
                    <declaration name="newGuy" type="ICCMarkerSegment" line="1449"/>
                    <scope line="1450"/>
                </method>
                <method name="addData" type="boolean" line="1456">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                    </params>
                    <comment line="1461">
                        skip the tag                        
                    </comment>
                    <comment line="1464">
                        Get the length, but not in length                        
                    </comment>
                    <comment line="1468">
                        Don&apos;t include length itself                        
                    </comment>
                    <comment line="1470">
                        skip the id                        
                    </comment>
                    <comment line="1471">
                        Skip the id                        
                    </comment>
                    <comment line="1473">
                        Reduce the stored length by the id size.  The stored
                         length is used to store the length of the profile
                         data only.                        
                    </comment>
                    <comment line="1480">
                        get the chunk number                        
                    </comment>
                    <comment line="1487">
                        get the number of chunks, which should match                        
                    </comment>
                    <comment line="1512">
                        create an array for the whole thing                        
                    </comment>
                    <comment line="1514">
                        copy the existing chunks, releasing them
                         Note that they may be out of order                        
                    </comment>
                    <comment line="1522">
                        Right one                        
                    </comment>
                    <scope line="1457"/>
                    <declaration name="dataLen" type="int" line="1464"/>
                    <declaration name="chunkNum" type="int" line="1480"/>
                    <scope line="1481"/>
                    <declaration name="newNumChunks" type="int" line="1487"/>
                    <scope line="1488"/>
                    <scope line="1493"/>
                    <declaration name="retval" type="boolean" line="1498"/>
                    <declaration name="profileData" type="byte[]" line="1499"/>
                    <scope line="1504"/>
                    <scope line="1506">
                        <scope line="1507"/>
                        <declaration name="index" type="int" line="1516"/>
                        <scope line="1517">
                            <declaration name="foundIt" type="boolean" line="1518"/>
                            <scope line="1519">
                                <declaration name="chunkData" type="byte[]" line="1520"/>
                                <scope line="1521"/>
                            </scope>
                            <scope line="1529"/>
                        </scope>
                    </scope>
                </method>
                <method name="getNativeNode" type="IIOMetadataNode" line="1544">
                    <declaration name="node" type="IIOMetadataNode" line="1545"/>
                    <scope line="1546"/>
                </method>
                <javadoc line="1552">
                    No-op.  Profiles are never written from metadata.
                      They are written from the ColorSpace of the image.                    
                </javadoc>
                <method name="write" type="void" line="1556">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                    </params>
                    <comment line="1558">
                        No-op                        
                    </comment>
                </method>
                <method name="print" type="void" line="1560"/>
            </class>
        </class>
    </source>