<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.jpeg">
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.IIOImage"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.ImageReader"/>
        <import package="javax.imageio.metadata.IIOInvalidTreeException"/>
        <import package="javax.imageio.metadata.IIOMetadataNode"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.stream.ImageInputStream"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="javax.imageio.stream.MemoryCacheImageOutputStream"/>
        <import package="javax.imageio.event.IIOReadProgressListener"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.color.ICC_Profile"/>
        <import package="java.awt.color.ICC_ColorSpace"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.ComponentColorModel"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferByte"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.w3c.dom.NodeList"/>
        <import package="org.w3c.dom.NamedNodeMap"/>
        <class name="JFIFMarkerSegment" line="34">
            <extends class="MarkerSegment"/>
            <javadoc line="34">
                A JFIF (JPEG File Interchange Format) APP0 (Application-Specific)
                  marker segment.  Inner classes are included for JFXX extension
                  marker segments, for different varieties of thumbnails, and for
                  ICC Profile APP2 marker segments.  Any of these secondary types
                  that occur are kept as members of a single JFIFMarkerSegment object.                
            </javadoc>
            <declaration name="majorVersion" type="int" line="42"/>
            <declaration name="minorVersion" type="int" line="43"/>
            <declaration name="resUnits" type="int" line="44"/>
            <declaration name="Xdensity" type="int" line="45"/>
            <declaration name="Ydensity" type="int" line="46"/>
            <declaration name="thumbWidth" type="int" line="47"/>
            <declaration name="thumbHeight" type="int" line="48"/>
            <declaration name="thumb" type="JFIFThumbRGB" line="49"/>
            <declaration name="extSegments" type="ArrayList" line="50"/>
            <declaration name="iccSegment" type="ICCMarkerSegment" line="51"/>
            <declaration name="THUMB_JPEG" type="int" line="52"/>
            <declaration name="THUMB_PALETTE" type="int" line="53"/>
            <declaration name="THUMB_UNASSIGNED" type="int" line="54"/>
            <declaration name="THUMB_RGB" type="int" line="55"/>
            <declaration name="DATA_SIZE" type="int" line="56"/>
            <declaration name="ID_SIZE" type="int" line="57"/>
            <declaration name="MAX_THUMB_WIDTH" type="int" line="58"/>
            <declaration name="MAX_THUMB_HEIGHT" type="int" line="59"/>
            <declaration name="debug" type="boolean" line="60"/>
            <declaration name="inICC" type="boolean" line="61"/>
            <javadoc line="61">
                Set to &lt;code&gt;true&lt;/code&gt; when reading the chunks of an
                  ICC profile.  All chunks are consolidated to create a single
                  &quot;segment&quot; containing all the chunks.  This flag is a state
                  variable identifying whether to construct a new segment or
                  append to an old one.                
            </javadoc>
            <declaration name="tempICCSegment" type="ICCMarkerSegment" line="69"/>
            <javadoc line="69">
                A placeholder for an ICC profile marker segment under
                  construction.  The segment is not added to the list
                  until all chunks have been read.                
            </javadoc>
            <javadoc line="75">
                Default constructor.  Used to create a default JFIF header                
            </javadoc>
            <method name="JFIFMarkerSegment" type="constructor" line="78"/>
            <javadoc line="88">
                Constructs a JFIF header by reading from a stream wrapped
                  in a JPEGBuffer.                
            </javadoc>
            <method name="JFIFMarkerSegment" type="constructor" line="92">
                <params>
                    <param name="buffer" type="JPEGBuffer"/>
                </params>
                <scope line="105"/>
            </method>
            <javadoc line="109">
                Constructs a JFIF header from a DOM Node.                
            </javadoc>
            <method name="JFIFMarkerSegment" type="constructor" line="112">
                <params>
                    <param name="node" type="Node"/>
                </params>
            </method>
            <javadoc line="116">
                Returns a deep-copy clone of this object.                
            </javadoc>
            <method name="clone" type="Object" line="119">
                <declaration name="newGuy" type="JFIFMarkerSegment" line="120"/>
                <scope line="121">
                    <scope line="123">
                        <declaration name="jfxx" type="JFIFExtensionMarkerSegment" line="124"/>
                    </scope>
                </scope>
                <scope line="128"/>
            </method>
            <javadoc line="133">
                Add an JFXX extension marker segment from the stream wrapped
                  in the JPEGBuffer to the list of extension segments.                
            </javadoc>
            <method name="addJFXX" type="void" line="137">
                <params>
                    <param name="buffer" type="JPEGBuffer"/>
                    <param name="reader" type="JPEGImageReader"/>
                </params>
            </method>
            <javadoc line="140">
                Adds an ICC Profile APP2 segment from the stream wrapped
                  in the JPEGBuffer.                
            </javadoc>
            <method name="addICC" type="void" line="144">
                <params>
                    <param name="buffer" type="JPEGBuffer"/>
                </params>
                <scope line="145">
                    <scope line="146"/>
                    <scope line="150"/>
                </scope>
                <scope line="155">
                    <scope line="156"/>
                </scope>
            </method>
            <javadoc line="162">
                Add an ICC Profile APP2 segment by constructing it from
                  the given ICC_ColorSpace object.                
            </javadoc>
            <method name="addICC" type="void" line="166">
                <params>
                    <param name="cs" type="ICC_ColorSpace"/>
                </params>
                <scope line="167"/>
            </method>
            <javadoc line="172">
                Returns a tree of DOM nodes representing this object and any
                  subordinate JFXX extension or ICC Profile segments.                
            </javadoc>
            <method name="getNativeNode" type="IIOMetadataNode" line="176">
                <declaration name="node" type="IIOMetadataNode" line="177"/>
                <scope line="185">
                    <declaration name="JFXXnode" type="IIOMetadataNode" line="186"/>
                    <scope line="188">
                        <declaration name="seg" type="JFIFExtensionMarkerSegment" line="189"/>
                    </scope>
                </scope>
                <scope line="193"/>
            </method>
            <javadoc line="198">
                Updates the data in this object from the given DOM Node tree.
                  If fromScratch is true, this object is being constructed.
                  Otherwise an existing object is being modified.
                  Throws an IIOInvalidTreeException if the tree is invalid in
                  any way.                
            </javadoc>
            <method name="updateFromNativeNode" type="void" line="205">
                <params>
                    <param name="node" type="Node"/>
                    <param name="fromScratch" type="boolean"/>
                </params>
                <declaration name="attrs" type="NamedNodeMap" line="206"/>
                <scope line="207">
                    <declaration name="value" type="int" line="208"/>
                </scope>
                <scope line="223">
                    <declaration name="children" type="NodeList" line="224"/>
                    <declaration name="count" type="int" line="225"/>
                    <scope line="226"/>
                    <scope line="229">
                        <declaration name="child" type="Node" line="230"/>
                        <declaration name="name" type="String" line="231"/>
                        <scope line="232">
                            <scope line="233"/>
                            <declaration name="exts" type="NodeList" line="236"/>
                            <declaration name="extCount" type="int" line="237"/>
                            <scope line="238">
                                <declaration name="ext" type="Node" line="239"/>
                            </scope>
                        </scope>
                        <scope line="243">
                            <scope line="244"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getThumbnailWidth" type="int" line="252">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="253">
                    <scope line="254"/>
                </scope>
                <declaration name="jfxx" type="JFIFExtensionMarkerSegment" line="259"/>
            </method>
            <method name="getThumbnailHeight" type="int" line="262">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="263">
                    <scope line="264"/>
                </scope>
                <declaration name="jfxx" type="JFIFExtensionMarkerSegment" line="269"/>
            </method>
            <method name="getThumbnail" type="BufferedImage" line="272">
                <params>
                    <param name="iis" type="ImageInputStream"/>
                    <param name="index" type="int"/>
                    <param name="reader" type="JPEGImageReader"/>
                </params>
                <declaration name="ret" type="BufferedImage" line="274"/>
                <scope line="275"/>
                <scope line="278">
                    <scope line="279"/>
                    <declaration name="jfxx" type="JFIFExtensionMarkerSegment" line="282"/>
                </scope>
            </method>
            <javadoc line="288">
                Writes the data for this segment to the stream in
                  valid JPEG format.  Assumes that there will be no thumbnail.                
            </javadoc>
            <method name="write" type="void" line="292">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
            </method>
            <javadoc line="295">
                Writes the data for this segment to the stream in
                  valid JPEG format.  The length written takes the thumbnail
                  width and height into account.  If necessary, the thumbnail
                  is clipped to 255 x 255 and a warning is sent to the writer
                  argument.  Progress updates are sent to the writer argument.                
            </javadoc>
            <method name="write" type="void" line="302">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="thumb" type="BufferedImage"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <declaration name="thumbWidth" type="int" line="303"/>
                <declaration name="thumbHeight" type="int" line="304"/>
                <declaration name="thumbLength" type="int" line="305"/>
                <declaration name="thumbData" type="int[]" line="306"/>
                <scope line="307">
                    <scope line="310"/>
                </scope>
                <declaration name="id" type="byte[]" line="320"/>
                <scope line="329"/>
            </method>
            <method name="writeThumbnailData" type="void" line="335">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="thumbData" type="int[]"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <declaration name="progInterval" type="int" line="336"/>
                <scope line="337"/>
                <scope line="340">
                    <scope line="342"/>
                </scope>
            </method>
            <javadoc line="347">
                Write out this JFIF Marker Segment, including a thumbnail or
                  appending a series of JFXX Marker Segments, as appropriate.
                  Warnings and progress reports are sent to the writer argument.
                  The list of thumbnails is matched to the list of JFXX extension
                  segments, if any, in order to determine how to encode the
                  thumbnails.  If there are more thumbnails than metadata segments,
                  default encoding is used for the extra thumbnails.                
            </javadoc>
            <method name="writeWithThumbs" type="void" line="356">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="thumbnails" type="List"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <scope line="357">
                    <declaration name="jfxx" type="JFIFExtensionMarkerSegment" line="358"/>
                    <scope line="359">
                        <scope line="360"/>
                    </scope>
                    <scope line="365">
                        <scope line="367">
                            <scope line="369"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="376"/>
            </method>
            <method name="writeThumb" type="void" line="380">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="thumb" type="BufferedImage"/>
                    <param name="jfxx" type="JFIFExtensionMarkerSegment"/>
                    <param name="index" type="int"/>
                    <param name="onlyOne" type="boolean"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <declaration name="cm" type="ColorModel" line="381"/>
                <declaration name="cs" type="ColorSpace" line="382"/>
                <scope line="383">
                    <scope line="384"/>
                    <scope line="387"/>
                    <scope line="390">
                        <declaration name="thumbRGB" type="BufferedImage" line="391"/>
                    </scope>
                </scope>
                <scope line="398">
                    <scope line="399">
                        <scope line="400"/>
                        <scope line="403"/>
                    </scope>
                    <scope line="407">
                        <scope line="408"/>
                        <scope line="411"/>
                        <scope line="415"/>
                    </scope>
                </scope>
                <scope line="423">
                    <scope line="424">
                        <scope line="425">
                            <declaration name="thumbRGB" type="BufferedImage" line="426"/>
                        </scope>
                        <scope line="429"/>
                    </scope>
                    <scope line="433">
                        <scope line="434"/>
                        <scope line="437">
                            <declaration name="thumbRGB" type="BufferedImage" line="438"/>
                        </scope>
                        <scope line="441"/>
                        <scope line="447"/>
                    </scope>
                </scope>
                <scope line="453"/>
            </method>
            <class name="IllegalThumbException" line="457">
                <extends class="Exception"/>
            </class>
            <javadoc line="459">
                Writes out a new JFXX extension segment, without saving it.                
            </javadoc>
            <method name="writeJFXXSegment" type="void" line="462">
                <params>
                    <param name="index" type="int"/>
                    <param name="thumbnail" type="BufferedImage"/>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <declaration name="jfxx" type="JFIFExtensionMarkerSegment" line="463"/>
                <scope line="464"/>
                <scope line="467"/>
            </method>
            <javadoc line="475">
                Return an RGB image that is the expansion of the given grayscale
                  image.                
            </javadoc>
            <method name="expandGrayThumb" type="BufferedImage" line="479">
                <params>
                    <param name="thumb" type="BufferedImage"/>
                </params>
                <declaration name="ret" type="BufferedImage" line="480"/>
                <declaration name="g" type="Graphics" line="481"/>
            </method>
            <javadoc line="485">
                Writes out a default JFIF marker segment to the given
                  output stream.  If &lt;code&gt;thumbnails&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;,
                  writes out the set of thumbnail images as JFXX marker segments, or
                  incorporated into the JFIF segment if appropriate.
                  If &lt;code&gt;iccProfile&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;,
                  writes out the profile after the JFIF segment using as many APP2
                  marker segments as necessary.                
            </javadoc>
            <method name="writeDefaultJFIF" type="void" line="494">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="thumbnails" type="List"/>
                    <param name="iccProfile" type="ICC_Profile"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <declaration name="jfif" type="JFIFMarkerSegment" line="495"/>
                <scope line="497"/>
            </method>
            <javadoc line="501">
                Prints out the contents of this object to System.out for debugging.                
            </javadoc>
            <method name="print" type="void" line="504">
                <scope line="519">
                    <scope line="520">
                        <declaration name="extSegment" type="JFIFExtensionMarkerSegment" line="521"/>
                    </scope>
                </scope>
                <scope line="525"/>
            </method>
            <class name="JFIFExtensionMarkerSegment" line="529">
                <extends class="MarkerSegment"/>
                <javadoc line="529">
                    A JFIF extension APP0 marker segment.                    
                </javadoc>
                <declaration name="code" type="int" line="533"/>
                <declaration name="thumb" type="JFIFThumb" line="534"/>
                <declaration name="DATA_SIZE" type="int" line="535"/>
                <declaration name="ID_SIZE" type="int" line="536"/>
                <method name="JFIFExtensionMarkerSegment" type="constructor" line="537">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                        <param name="reader" type="JPEGImageReader"/>
                    </params>
                    <scope line="542"/>
                    <scope line="545">
                        <declaration name="thumbX" type="int" line="547"/>
                        <declaration name="thumbY" type="int" line="548"/>
                        <scope line="550"/>
                        <scope line="553"/>
                    </scope>
                </method>
                <method name="JFIFExtensionMarkerSegment" type="constructor" line="558">
                    <params>
                        <param name="node" type="Node"/>
                    </params>
                    <declaration name="attrs" type="NamedNodeMap" line="560"/>
                    <scope line="561">
                        <scope line="563"/>
                    </scope>
                    <scope line="567"/>
                    <scope line="570"/>
                    <declaration name="child" type="Node" line="573"/>
                    <declaration name="name" type="String" line="574"/>
                    <scope line="575">
                        <scope line="576"/>
                    </scope>
                    <scope line="581">
                        <scope line="582"/>
                    </scope>
                    <scope line="587">
                        <scope line="588"/>
                    </scope>
                    <scope line="593"/>
                </method>
                <method name="JFIFExtensionMarkerSegment" type="constructor" line="597">
                    <params>
                        <param name="thumbnail" type="BufferedImage"/>
                    </params>
                    <declaration name="cm" type="ColorModel" line="599"/>
                    <declaration name="csType" type="int" line="600"/>
                    <scope line="601"/>
                    <scope line="604"/>
                    <scope line="608"/>
                    <scope line="612"/>
                    <scope line="616"/>
                </method>
                <method name="setThumbnail" type="void" line="620">
                    <params>
                        <param name="thumbnail" type="BufferedImage"/>
                    </params>
                    <scope line="621"/>
                    <scope line="634"/>
                </method>
                <method name="clone" type="Object" line="638">
                    <declaration name="newGuy" type="JFIFExtensionMarkerSegment" line="639"/>
                    <scope line="640"/>
                </method>
                <method name="getNativeNode" type="IIOMetadataNode" line="645">
                    <declaration name="node" type="IIOMetadataNode" line="646"/>
                </method>
                <method name="write" type="void" line="651">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                        <param name="writer" type="JPEGImageWriter"/>
                    </params>
                    <declaration name="id" type="byte[]" line="654"/>
                </method>
                <method name="print" type="void" line="659"/>
            </class>
            <class name="JFIFThumb" line="664">
                <implements interface="Cloneable"/>
                <javadoc line="664">
                    A superclass for the varieties of thumbnails that can
                      be stored in a JFIF extension marker segment.                    
                </javadoc>
                <declaration name="streamPos" type="long" line="669"/>
                <method name="getLength" type="int" line="670"/>
                <method name="getWidth" type="int" line="671"/>
                <method name="getHeight" type="int" line="672"/>
                <method name="getThumbnail" type="BufferedImage" line="673"/>
                <method name="JFIFThumb" type="constructor" line="674"/>
                <method name="JFIFThumb" type="constructor" line="676">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                    </params>
                </method>
                <method name="print" type="void" line="679"/>
                <method name="getNativeNode" type="IIOMetadataNode" line="680"/>
                <method name="write" type="void" line="681"/>
                <method name="clone" type="Object" line="682">
                    <scope line="683"/>
                    <scope line="686"/>
                </method>
            </class>
            <class name="JFIFThumbUncompressed" line="691">
                <extends class="JFIFThumb"/>
                <declaration name="thumbnail" type="BufferedImage" line="692"/>
                <declaration name="thumbWidth" type="int" line="693"/>
                <declaration name="thumbHeight" type="int" line="694"/>
                <declaration name="name" type="String" line="695"/>
                <method name="JFIFThumbUncompressed" type="constructor" line="696">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                        <param name="skip" type="int"/>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="JFIFThumbUncompressed" type="constructor" line="703">
                    <params>
                        <param name="node" type="Node"/>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="attrs" type="NamedNodeMap" line="707"/>
                    <declaration name="count" type="int" line="708"/>
                    <scope line="709"/>
                    <scope line="712">
                        <declaration name="value" type="int" line="713"/>
                    </scope>
                </method>
                <method name="JFIFThumbUncompressed" type="constructor" line="719">
                    <params>
                        <param name="thumb" type="BufferedImage"/>
                    </params>
                </method>
                <method name="readByteBuffer" type="void" line="725">
                    <params>
                        <param name="iis" type="ImageInputStream"/>
                        <param name="data" type="byte[]"/>
                        <param name="reader" type="JPEGImageReader"/>
                        <param name="workPortion" type="float"/>
                        <param name="workOffset" type="float"/>
                    </params>
                    <declaration name="progInterval" type="int" line="726"/>
                    <scope line="727">
                        <declaration name="len" type="int" line="728"/>
                        <declaration name="percentDone" type="float" line="731"/>
                        <scope line="732"/>
                    </scope>
                </method>
                <method name="getWidth" type="int" line="738"/>
                <method name="getHeight" type="int" line="741"/>
                <method name="getNativeNode" type="IIOMetadataNode" line="744">
                    <declaration name="node" type="IIOMetadataNode" line="745"/>
                </method>
                <method name="write" type="void" line="750">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                        <param name="writer" type="JPEGImageWriter"/>
                    </params>
                    <scope line="751"/>
                </method>
                <method name="writePixels" type="void" line="759">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                        <param name="writer" type="JPEGImageWriter"/>
                    </params>
                    <scope line="760"/>
                    <declaration name="data" type="int[]" line="765"/>
                </method>
                <method name="print" type="void" line="768"/>
            </class>
            <class name="JFIFThumbRGB" line="775">
                <extends class="JFIFThumbUncompressed"/>
                <javadoc line="775">
                    A JFIF thumbnail stored as RGB, one byte per channel,
                      interleaved.                    
                </javadoc>
                <method name="JFIFThumbRGB" type="constructor" line="780">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                </method>
                <method name="JFIFThumbRGB" type="constructor" line="783">
                    <params>
                        <param name="node" type="Node"/>
                    </params>
                </method>
                <method name="JFIFThumbRGB" type="constructor" line="786">
                    <params>
                        <param name="thumb" type="BufferedImage"/>
                    </params>
                </method>
                <method name="getLength" type="int" line="789"/>
                <method name="getThumbnail" type="BufferedImage" line="792">
                    <params>
                        <param name="iis" type="ImageInputStream"/>
                        <param name="reader" type="JPEGImageReader"/>
                    </params>
                    <declaration name="buffer" type="DataBufferByte" line="795"/>
                    <declaration name="raster" type="WritableRaster" line="798"/>
                    <declaration name="cm" type="ColorModel" line="799"/>
                </method>
                <method name="write" type="void" line="802">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                        <param name="writer" type="JPEGImageWriter"/>
                    </params>
                </method>
            </class>
            <class name="JFIFThumbPalette" line="807">
                <extends class="JFIFThumbUncompressed"/>
                <javadoc line="807">
                    A JFIF thumbnail stored as an indexed palette image
                      using an RGB palette.                    
                </javadoc>
                <declaration name="PALETTE_SIZE" type="int" line="812"/>
                <method name="JFIFThumbPalette" type="constructor" line="813">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                </method>
                <method name="JFIFThumbPalette" type="constructor" line="816">
                    <params>
                        <param name="node" type="Node"/>
                    </params>
                </method>
                <method name="JFIFThumbPalette" type="constructor" line="819">
                    <params>
                        <param name="thumb" type="BufferedImage"/>
                    </params>
                    <declaration name="icm" type="IndexColorModel" line="821"/>
                    <scope line="822"/>
                </method>
                <method name="getLength" type="int" line="826"/>
                <method name="getThumbnail" type="BufferedImage" line="829">
                    <params>
                        <param name="iis" type="ImageInputStream"/>
                        <param name="reader" type="JPEGImageReader"/>
                    </params>
                    <declaration name="palette" type="byte[]" line="832"/>
                    <declaration name="palettePart" type="float" line="833"/>
                    <declaration name="buffer" type="DataBufferByte" line="835"/>
                    <declaration name="cm" type="IndexColorModel" line="839"/>
                    <declaration name="sm" type="SampleModel" line="840"/>
                    <declaration name="raster" type="WritableRaster" line="841"/>
                </method>
                <method name="write" type="void" line="844">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                        <param name="writer" type="JPEGImageWriter"/>
                    </params>
                    <declaration name="palette" type="byte[]" line="846"/>
                    <declaration name="icm" type="IndexColorModel" line="847"/>
                    <declaration name="reds" type="byte[]" line="848"/>
                    <declaration name="greens" type="byte[]" line="849"/>
                    <declaration name="blues" type="byte[]" line="850"/>
                    <scope line="854"/>
                </method>
            </class>
            <class name="JFIFThumbJPEG" line="863">
                <extends class="JFIFThumb"/>
                <javadoc line="863">
                    A JFIF thumbnail stored as a JPEG stream.  No JFIF or
                      JFIF extension markers are permitted.  There is no need
                      to clip these, but the entire image must fit into a
                      single JFXX marker segment.                    
                </javadoc>
                <declaration name="thumbMetadata" type="JPEGMetadata" line="870"/>
                <declaration name="data" type="byte[]" line="871"/>
                <declaration name="PREAMBLE_SIZE" type="int" line="872"/>
                <method name="JFIFThumbJPEG" type="constructor" line="873">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                        <param name="length" type="int"/>
                        <param name="reader" type="JPEGImageReader"/>
                    </params>
                    <declaration name="finalPos" type="long" line="875"/>
                </method>
                <method name="JFIFThumbJPEG" type="constructor" line="882">
                    <params>
                        <param name="node" type="Node"/>
                    </params>
                    <scope line="883"/>
                    <declaration name="child" type="Node" line="886"/>
                    <scope line="887">
                        <declaration name="name" type="String" line="888"/>
                        <scope line="889"/>
                    </scope>
                </method>
                <method name="JFIFThumbJPEG" type="constructor" line="896">
                    <params>
                        <param name="thumb" type="BufferedImage"/>
                    </params>
                    <declaration name="INITIAL_BUFSIZE" type="int" line="897"/>
                    <declaration name="MAZ_BUFSIZE" type="int" line="898"/>
                    <scope line="899">
                        <declaration name="baos" type="ByteArrayOutputStream" line="900"/>
                        <declaration name="mos" type="MemoryCacheImageOutputStream" line="901"/>
                        <declaration name="thumbWriter" type="JPEGImageWriter" line="902"/>
                        <declaration name="metadata" type="JPEGMetadata" line="904"/>
                        <declaration name="jfif" type="MarkerSegment" line="905"/>
                        <scope line="906"/>
                        <scope line="912"/>
                    </scope>
                    <scope line="917"/>
                </method>
                <method name="getWidth" type="int" line="921">
                    <declaration name="retval" type="int" line="922"/>
                    <declaration name="sof" type="SOFMarkerSegment" line="923"/>
                    <scope line="924"/>
                </method>
                <method name="getHeight" type="int" line="929">
                    <declaration name="retval" type="int" line="930"/>
                    <declaration name="sof" type="SOFMarkerSegment" line="931"/>
                    <scope line="932"/>
                </method>
                <class name="ThumbnailReadListener" line="937">
                    <implements interface="IIOReadProgressListener"/>
                    <declaration name="reader" type="JPEGImageReader" line="938"/>
                    <method name="ThumbnailReadListener" type="constructor" line="939">
                        <params>
                            <param name="reader" type="JPEGImageReader"/>
                        </params>
                    </method>
                    <method name="sequenceStarted" type="void" line="942">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="minIndex" type="int"/>
                        </params>
                    </method>
                    <method name="sequenceComplete" type="void" line="944">
                        <params>
                            <param name="source" type="ImageReader"/>
                        </params>
                    </method>
                    <method name="imageStarted" type="void" line="946">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="imageIndex" type="int"/>
                        </params>
                    </method>
                    <method name="imageProgress" type="void" line="948">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="percentageDone" type="float"/>
                        </params>
                    </method>
                    <method name="imageComplete" type="void" line="951">
                        <params>
                            <param name="source" type="ImageReader"/>
                        </params>
                    </method>
                    <method name="thumbnailStarted" type="void" line="953">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="imageIndex" type="int"/>
                            <param name="thumbnailIndex" type="int"/>
                        </params>
                    </method>
                    <method name="thumbnailProgress" type="void" line="955">
                        <params>
                            <param name="source" type="ImageReader"/>
                            <param name="percentageDone" type="float"/>
                        </params>
                    </method>
                    <method name="thumbnailComplete" type="void" line="957">
                        <params>
                            <param name="source" type="ImageReader"/>
                        </params>
                    </method>
                    <method name="readAborted" type="void" line="959">
                        <params>
                            <param name="source" type="ImageReader"/>
                        </params>
                    </method>
                </class>
                <method name="getThumbnail" type="BufferedImage" line="962">
                    <params>
                        <param name="iis" type="ImageInputStream"/>
                        <param name="reader" type="JPEGImageReader"/>
                    </params>
                    <declaration name="thumbReader" type="JPEGImageReader" line="965"/>
                    <declaration name="ret" type="BufferedImage" line="968"/>
                </method>
                <method name="clone" type="Object" line="973">
                    <declaration name="newGuy" type="JFIFThumbJPEG" line="974"/>
                    <scope line="975"/>
                </method>
                <method name="getNativeNode" type="IIOMetadataNode" line="980">
                    <declaration name="node" type="IIOMetadataNode" line="981"/>
                    <scope line="982"/>
                </method>
                <method name="getLength" type="int" line="987">
                    <scope line="988"/>
                    <scope line="991"/>
                </method>
                <method name="write" type="void" line="995">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                        <param name="writer" type="JPEGImageWriter"/>
                    </params>
                    <declaration name="progInterval" type="int" line="996"/>
                    <scope line="997"/>
                    <scope line="1000">
                        <declaration name="len" type="int" line="1001"/>
                        <declaration name="percentDone" type="float" line="1004"/>
                        <scope line="1005"/>
                    </scope>
                </method>
                <method name="print" type="void" line="1011"/>
            </class>
            <javadoc line="1015">
                Write out the given profile to the stream, embedded in
                  the necessary number of APP2 segments, per the ICC spec.
                  This is the only mechanism for writing an ICC profile
                  to a stream.                
            </javadoc>
            <method name="writeICC" type="void" line="1021">
                <params>
                    <param name="profile" type="ICC_Profile"/>
                    <param name="ios" type="ImageOutputStream"/>
                </params>
                <declaration name="LENGTH_LENGTH" type="int" line="1022"/>
                <declaration name="ID" type="String" line="1023"/>
                <declaration name="ID_LENGTH" type="int" line="1024"/>
                <declaration name="COUNTS_LENGTH" type="int" line="1025"/>
                <declaration name="MAX_ICC_CHUNK_SIZE" type="int" line="1026"/>
                <declaration name="data" type="byte[]" line="1027"/>
                <declaration name="numChunks" type="int" line="1028"/>
                <scope line="1029"/>
                <declaration name="chunkNum" type="int" line="1032"/>
                <declaration name="offset" type="int" line="1033"/>
                <scope line="1034">
                    <declaration name="dataLength" type="int" line="1035"/>
                    <declaration name="segLength" type="int" line="1036"/>
                    <declaration name="id" type="byte[]" line="1040"/>
                </scope>
            </method>
            <class name="ICCMarkerSegment" line="1049">
                <extends class="MarkerSegment"/>
                <javadoc line="1049">
                    An APP2 marker segment containing an ICC profile.  In the stream
                      a profile larger than 64K is broken up into a series of chunks.
                      This inner class represents the complete profile as a single objec,
                      combining chunks as necessary.                    
                </javadoc>
                <declaration name="chunks" type="ArrayList" line="1056"/>
                <declaration name="profile" type="byte[]" line="1057"/>
                <declaration name="ID_SIZE" type="int" line="1058"/>
                <declaration name="chunksRead" type="int" line="1059"/>
                <declaration name="numChunks" type="int" line="1060"/>
                <method name="ICCMarkerSegment" type="constructor" line="1061">
                    <params>
                        <param name="cs" type="ICC_ColorSpace"/>
                    </params>
                </method>
                <method name="ICCMarkerSegment" type="constructor" line="1068">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                    </params>
                    <scope line="1070"/>
                    <declaration name="chunkNum" type="int" line="1076"/>
                    <scope line="1078"/>
                    <scope line="1081"/>
                    <scope line="1089">
                        <declaration name="profileData" type="byte[]" line="1090"/>
                    </scope>
                </method>
                <method name="ICCMarkerSegment" type="constructor" line="1099">
                    <params>
                        <param name="node" type="Node"/>
                    </params>
                    <scope line="1101">
                        <declaration name="ourNode" type="IIOMetadataNode" line="1102"/>
                        <declaration name="prof" type="ICC_Profile" line="1103"/>
                        <scope line="1104"/>
                    </scope>
                </method>
                <method name="clone" type="Object" line="1109">
                    <declaration name="newGuy" type="ICCMarkerSegment" line="1110"/>
                    <scope line="1111"/>
                </method>
                <method name="addData" type="boolean" line="1116">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                    </params>
                    <scope line="1117"/>
                    <declaration name="dataLen" type="int" line="1122"/>
                    <declaration name="chunkNum" type="int" line="1129"/>
                    <scope line="1130"/>
                    <declaration name="newNumChunks" type="int" line="1133"/>
                    <scope line="1134"/>
                    <scope line="1138"/>
                    <declaration name="retval" type="boolean" line="1141"/>
                    <declaration name="profileData" type="byte[]" line="1142"/>
                    <scope line="1147"/>
                    <scope line="1150">
                        <scope line="1151"/>
                        <declaration name="index" type="int" line="1155"/>
                        <scope line="1156">
                            <declaration name="foundIt" type="boolean" line="1157"/>
                            <scope line="1158">
                                <declaration name="chunkData" type="byte[]" line="1159"/>
                                <scope line="1160"/>
                            </scope>
                            <scope line="1166"/>
                        </scope>
                    </scope>
                </method>
                <method name="getNativeNode" type="IIOMetadataNode" line="1178">
                    <declaration name="node" type="IIOMetadataNode" line="1179"/>
                    <scope line="1180"/>
                </method>
                <javadoc line="1185">
                    No-op.  Profiles are never written from metadata.
                      They are written from the ColorSpace of the image.                    
                </javadoc>
                <method name="write" type="void" line="1189">
                    <params>
                        <param name="ios" type="ImageOutputStream"/>
                    </params>
                </method>
                <method name="print" type="void" line="1191"/>
            </class>
        </class>
    </source>