<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.jpeg">
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.ImageWriteParam"/>
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.stream.ImageInputStream"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.metadata.IIOMetadataNode"/>
        <import package="javax.imageio.metadata.IIOMetadataFormat"/>
        <import package="javax.imageio.metadata.IIOMetadataFormatImpl"/>
        <import package="javax.imageio.metadata.IIOInvalidTreeException"/>
        <import package="javax.imageio.plugins.jpeg.JPEGQTable"/>
        <import package="javax.imageio.plugins.jpeg.JPEGHuffmanTable"/>
        <import package="javax.imageio.plugins.jpeg.JPEGImageWriteParam"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.w3c.dom.NodeList"/>
        <import package="org.w3c.dom.NamedNodeMap"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.ListIterator"/>
        <import package="java.io.IOException"/>
        <import package="java.awt.color.ICC_Profile"/>
        <import package="java.awt.color.ICC_ColorSpace"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.Point"/>
        <class name="JPEGMetadata" line="58">
            <extends class="IIOMetadata"/>
            <comment line="64">
                ////// Private variables                
            </comment>
            <comment line="91">
                ////// end of private variables                
            </comment>
            <comment line="93">
                ///// Package-access variables                
            </comment>
            <comment line="112">
                ///// End of package-access variables                
            </comment>
            <comment line="114">
                ///// Constructors                
            </comment>
            <comment line="134">
                Constructs a &lt;code&gt;JPEGMetadata&lt;code&gt; object by reading the
                 contents of an &lt;code&gt;ImageInputStream&lt;code&gt;.  Has package-only
                 access.
                
                 @param isStream A boolean indicating whether this object will be
                 stream or image metadata.
                 @param isThumb A boolean indicating whether this metadata object
                 is for an image or for a thumbnail stored as JPEG.
                 @param iis An &lt;code&gt;ImageInputStream&lt;code&gt; from which to read
                 the metadata.
                 @param reader The &lt;code&gt;JPEGImageReader&lt;code&gt; calling this
                 constructor, to which warnings should be sent.                
            </comment>
            <comment line="638">
                //// End of constructors                
            </comment>
            <comment line="640">
                Utilities for dealing with the marker sequence.
                 The first ones have package access for access from the writer.                
            </comment>
            <comment line="719">
                Implement Cloneable, but restrict access                
            </comment>
            <comment line="751">
                Tree methods                
            </comment>
            <comment line="806">
                Standard tree node methods                
            </comment>
            <comment line="1057">
                Editing                
            </comment>
            <comment line="1544">
                In general, it could be possible to convert all non-pixel data to some
                 textual form and include it in comments, but then this would create the
                 expectation that these comment forms be recognized by the reader, thus
                 creating a defacto extension to JPEG metadata capabilities.  This is
                 probably best avoided, so the following convert only text nodes to
                 comments, and lose the keywords as well.                
            </comment>
            <comment line="1990">
                Return a pair of integers whose ratio (xy) approximates the given
                 float value.                
            </comment>
            <comment line="2332">
                /// Writer support                
            </comment>
            <comment line="2401">
                // End of writer support                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="58">
                Metadata for the JPEG plug-in.                
            </javadoc>
            <declaration name="debug" type="boolean" line="65"/>
            <declaration name="resetSequence" type="List" line="67"/>
            <javadoc line="67">
                A copy of &lt;code&gt;markerSequence&lt;/code&gt;, created the first time the
                  &lt;code&gt;markerSequence&lt;/code&gt; is modified.  This is used by reset
                  to restore the original state.                
            </javadoc>
            <declaration name="inThumb" type="boolean" line="74"/>
            <javadoc line="74">
                Set to &lt;code&gt;true&lt;/code&gt; when reading a thumbnail stored as
                  JPEG.  This is used to enforce the prohibition of JFIF thumbnails
                  containing any JFIF marker segments, and to ensure generation of
                  a correct native subtree during &lt;code&gt;getAsTree&lt;/code&gt;.                
            </javadoc>
            <declaration name="hasAlpha" type="boolean" line="82"/>
            <javadoc line="82">
                Set by the chroma node construction method to signal the
                  presence or absence of an alpha channel to the transparency
                  node construction method.  Used only when constructing a
                  standard metadata tree.                
            </javadoc>
            <declaration name="markerSequence" type="List" line="94"/>
            <javadoc line="94">
                All data is a list of &lt;code&gt;MarkerSegment&lt;/code&gt; objects.
                  When accessing the list, use the tag to identify the particular
                  subclass.  Any JFIF marker segment must be the first element
                  of the list if it is present, and any JFXX or APP2ICC marker
                  segments are subordinate to the JFIF marker segment.  This
                  list is package visible so that the writer can access it.                
                <see>
                    #MarkerSegment                    
                </see>
            </javadoc>
            <declaration name="isStream" type="boolean" line="105"/>
            <javadoc line="105">
                Indicates whether this object represents stream or image
                  metadata.  Package-visible so the writer can see it.                
            </javadoc>
            <javadoc line="115">
                Constructor containing code shared by other constructors.                
            </javadoc>
            <method name="JPEGMetadata" type="constructor" line="118">
                <params>
                    <param name="isStream" type="boolean"/>
                    <param name="inThumb" type="boolean"/>
                </params>
                <comment line="120">
                    Supports standard format                    
                </comment>
                <comment line="121">
                    and a native format                    
                </comment>
                <comment line="123">
                    No other formats                    
                </comment>
                <comment line="125">
                    But if we are stream metadata, adjust the variables                    
                </comment>
                <scope line="126"/>
            </method>
            <method name="JPEGMetadata" type="constructor" line="150">
                <params>
                    <param name="isStream" type="boolean"/>
                    <param name="isThumb" type="boolean"/>
                    <param name="iis" type="ImageInputStream"/>
                    <param name="reader" type="JPEGImageReader"/>
                </params>
                <comment line="158">
                    The first three bytes should be FF, SOI, FF                    
                </comment>
                <comment line="166">
                    Next byte should be the ff before a marker                    
                </comment>
                <comment line="205">
                    Either JFIF, JFXX, or unknown APP0                    
                </comment>
                <comment line="206">
                    tag, length, id                    
                </comment>
                <comment line="217">
                    Leave newGuy null
                     Read a dummy to skip the segment                    
                </comment>
                <comment line="251">
                    newGuy remains null                    
                </comment>
                <comment line="258">
                    Either an ICC profile or unknown APP2                    
                </comment>
                <comment line="259">
                    tag, length, id                    
                </comment>
                <comment line="286">
                    newGuy remains null                    
                </comment>
                <comment line="293">
                    Either Adobe or unknown APP14                    
                </comment>
                <comment line="294">
                    tag, length, id                    
                </comment>
                <comment line="332">
                    Just skip it                    
                </comment>
                <comment line="355">
                    Now that we&apos;ve read up to the EOI, we need to push back
                     whatever is left in the buffer, so that the next read
                     in the native code will work.                    
                </comment>
                <declaration name="buffer" type="JPEGBuffer" line="153"/>
                <scope line="160"/>
                <declaration name="done" type="boolean" line="164"/>
                <declaration name="newGuy" type="MarkerSegment" line="167"/>
                <scope line="168">
                    <declaration name="buf" type="byte[]" line="169"/>
                    <declaration name="ptr" type="int" line="170"/>
                    <scope line="172"/>
                    <scope line="179"/>
                    <scope line="188"/>
                    <scope line="212">
                        <scope line="213">
                            <declaration name="dummy" type="JFIFMarkerSegment" line="218"/>
                        </scope>
                        <scope line="220"/>
                        <scope line="223"/>
                        <scope line="226"/>
                    </scope>
                    <scope line="233">
                        <scope line="234"/>
                        <scope line="238"/>
                        <declaration name="jfif" type="JFIFMarkerSegment" line="242"/>
                        <scope line="245"/>
                    </scope>
                    <scope line="251"/>
                    <scope line="271">
                        <scope line="272"/>
                        <declaration name="jfif" type="JFIFMarkerSegment" line="277"/>
                        <scope line="280"/>
                    </scope>
                    <scope line="286"/>
                    <scope line="298">
                        <scope line="299"/>
                    </scope>
                    <scope line="304"/>
                    <scope line="314"/>
                    <scope line="328"/>
                    <scope line="345">
                        <scope line="347"/>
                    </scope>
                </scope>
                <scope line="360"/>
            </method>
            <javadoc line="365">
                Constructs a default stream &lt;code&gt;JPEGMetadata&lt;/code&gt; object appropriate
                  for the given write parameters.                
            </javadoc>
            <method name="JPEGMetadata" type="constructor" line="369">
                <params>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <comment line="387">
                    default tables.                    
                </comment>
                <comment line="393">
                    Defensive programming                    
                </comment>
                <declaration name="jparam" type="JPEGImageWriteParam" line="372"/>
                <scope line="374">
                    <scope line="376"/>
                </scope>
                <scope line="380"/>
                <scope line="385"/>
                <scope line="393"/>
            </method>
            <javadoc line="398">
                Constructs a default image &lt;code&gt;JPEGMetadata&lt;/code&gt; object appropriate
                  for the given image type and write parameters.                
            </javadoc>
            <method name="JPEGMetadata" type="constructor" line="404">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <comment line="428">
                    Ignore the destination type.                    
                </comment>
                <comment line="434">
                    The only progressive mode that makes sense here is MODE_DEFAULT                    
                </comment>
                <comment line="436">
                    the param may not be one of ours, so it may return false.
                     If so, the following would throw an exception                    
                </comment>
                <comment line="448">
                    If the param has them, metadata shouldn&apos;t                    
                </comment>
                <comment line="455">
                    Progressive forces optimized, regardless of param setting
                     so consult the param re optimized only if not progressive                    
                </comment>
                <comment line="465">
                    compression quality should determine the q tables.  Note that this
                     will be ignored if we already decided not to create any.
                     Again, the param may not be one of ours, so we must check that it
                     supports compression settings                    
                </comment>
                <comment line="476">
                    We are done with the param, now for the image types                    
                </comment>
                <comment line="489">
                    e.g. alpha                    
                </comment>
                <comment line="505">
                    e.g. K or alpha                    
                </comment>
                <comment line="507">
                    Not alpha, so must be K                    
                </comment>
                <comment line="513">
                    with or without alpha                    
                </comment>
                <comment line="525">
                    Everything else is not subsampled, gets no special marker,
                     and component ids are 1 - N                    
                </comment>
                <comment line="540">
                    e.g. alpha                    
                </comment>
                <comment line="544">
                    with or without alpha                    
                </comment>
                <comment line="545">
                    without alpha we just accept the JFIF defaults                    
                </comment>
                <comment line="565">
                    e.g. K or alpha                    
                </comment>
                <comment line="567">
                    then it must be K                    
                </comment>
                <comment line="580">
                    Everything else is not subsampled, gets no special marker,
                     and component ids are 0 - N                    
                </comment>
                <comment line="588">
                    do we want an ICC profile?                    
                </comment>
                <comment line="593">
                    Now step through the markers, consulting our variables.                    
                </comment>
                <comment line="600">
                    Can&apos;t happen here                    
                </comment>
                <comment line="603">
                    Adobe                    
                </comment>
                <comment line="608">
                    dqt                    
                </comment>
                <comment line="613">
                    dht                    
                </comment>
                <comment line="618">
                    sof                    
                </comment>
                <comment line="625">
                    sos                    
                </comment>
                <comment line="626">
                    Default progression scans are done in the writer                    
                </comment>
                <comment line="632">
                    Defensive programming                    
                </comment>
                <declaration name="wantJFIF" type="boolean" line="407"/>
                <declaration name="wantAdobe" type="boolean" line="408"/>
                <declaration name="transform" type="int" line="409"/>
                <declaration name="willSubsample" type="boolean" line="410"/>
                <declaration name="wantICC" type="boolean" line="411"/>
                <declaration name="wantProg" type="boolean" line="412"/>
                <declaration name="wantOptimized" type="boolean" line="413"/>
                <declaration name="wantExtended" type="boolean" line="414"/>
                <declaration name="wantQTables" type="boolean" line="415"/>
                <declaration name="wantHTables" type="boolean" line="416"/>
                <declaration name="quality" type="float" line="417"/>
                <declaration name="componentIDs" type="byte[]" line="418"/>
                <declaration name="numComponents" type="int" line="419"/>
                <declaration name="destType" type="ImageTypeSpecifier" line="421"/>
                <scope line="423">
                    <scope line="425">
                        <scope line="426"/>
                    </scope>
                    <scope line="434">
                        <scope line="437"/>
                    </scope>
                    <scope line="444">
                        <declaration name="jparam" type="JPEGImageWriteParam" line="445"/>
                        <scope line="446">
                            <scope line="450"/>
                        </scope>
                        <scope line="456">
                            <scope line="458"/>
                        </scope>
                    </scope>
                    <scope line="468">
                        <scope line="469"/>
                    </scope>
                </scope>
                <declaration name="cs" type="ColorSpace" line="477"/>
                <scope line="478">
                    <declaration name="cm" type="ColorModel" line="479"/>
                    <declaration name="hasExtraComponents" type="boolean" line="481"/>
                    <declaration name="hasAlpha" type="boolean" line="482"/>
                    <declaration name="type" type="int" line="484"/>
                    <scope line="488"/>
                    <scope line="493">
                        <scope line="498"/>
                    </scope>
                    <scope line="504">
                        <scope line="506"/>
                    </scope>
                    <scope line="519"/>
                </scope>
                <scope line="529">
                    <declaration name="cm" type="ColorModel" line="530"/>
                    <declaration name="hasExtraComponents" type="boolean" line="532"/>
                    <declaration name="hasAlpha" type="boolean" line="533"/>
                    <declaration name="type" type="int" line="535"/>
                    <scope line="539"/>
                    <scope line="545"/>
                    <scope line="552">
                        <scope line="558"/>
                    </scope>
                    <scope line="564">
                        <scope line="566"/>
                    </scope>
                </scope>
                <scope line="588"/>
                <scope line="593">
                    <declaration name="jfif" type="JFIFMarkerSegment" line="594"/>
                    <scope line="596">
                        <scope line="597"/>
                        <scope line="599"/>
                    </scope>
                </scope>
                <scope line="603"/>
                <scope line="608"/>
                <scope line="613"/>
                <scope line="625"/>
                <scope line="632"/>
            </method>
            <javadoc line="642">
                Returns the first MarkerSegment object in the list
                  with the given tag, or null if none is found.                
            </javadoc>
            <method name="findMarkerSegment" type="MarkerSegment" line="646">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="iter" type="Iterator" line="647"/>
                <scope line="648">
                    <declaration name="seg" type="MarkerSegment" line="649"/>
                    <scope line="650"/>
                </scope>
            </method>
            <javadoc line="657">
                Returns the first or last MarkerSegment object in the list
                  of the given class, or null if none is found.                
            </javadoc>
            <method name="findMarkerSegment" type="MarkerSegment" line="661">
                <params>
                    <param name="cls" type="Class"/>
                    <param name="first" type="boolean"/>
                </params>
                <scope line="662">
                    <declaration name="iter" type="Iterator" line="663"/>
                    <scope line="664">
                        <declaration name="seg" type="MarkerSegment" line="665"/>
                        <scope line="666"/>
                    </scope>
                </scope>
                <scope line="670">
                    <declaration name="iter" type="ListIterator" line="671"/>
                    <scope line="672">
                        <declaration name="seg" type="MarkerSegment" line="673"/>
                        <scope line="674"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="682">
                Returns the index of the first or last MarkerSegment in the list
                  of the given class, or -1 if none is found.                
            </javadoc>
            <method name="findMarkerSegmentPosition" type="int" line="686">
                <params>
                    <param name="cls" type="Class"/>
                    <param name="first" type="boolean"/>
                </params>
                <scope line="687">
                    <declaration name="iter" type="ListIterator" line="688"/>
                    <scope line="689">
                        <declaration name="seg" type="MarkerSegment" line="690"/>
                        <scope line="691"/>
                    </scope>
                </scope>
                <scope line="695">
                    <declaration name="iter" type="ListIterator" line="696"/>
                    <scope line="697">
                        <declaration name="seg" type="MarkerSegment" line="698"/>
                        <scope line="699"/>
                    </scope>
                </scope>
            </method>
            <method name="findLastUnknownMarkerSegmentPosition" type="int" line="707">
                <declaration name="iter" type="ListIterator" line="708"/>
                <scope line="709">
                    <declaration name="seg" type="MarkerSegment" line="710"/>
                    <scope line="711"/>
                </scope>
            </method>
            <method name="clone" type="Object" line="720">
                <comment line="725">
                    won&apos;t happen                    
                </comment>
                <declaration name="newGuy" type="JPEGMetadata" line="721"/>
                <scope line="722"/>
                <scope line="724"/>
                <scope line="725"/>
            </method>
            <javadoc line="732">
                Returns a deep copy of the current marker sequence.                
            </javadoc>
            <method name="cloneSequence" type="List" line="735">
                <scope line="736"/>
                <declaration name="retval" type="List" line="739"/>
                <declaration name="iter" type="Iterator" line="740"/>
                <scope line="741">
                    <declaration name="seg" type="MarkerSegment" line="742"/>
                </scope>
            </method>
            <method name="getAsTree" type="Node" line="752">
                <params>
                    <param name="formatName" type="String"/>
                </params>
                <scope line="753"/>
                <scope line="756">
                    <scope line="757"/>
                </scope>
                <scope line="760">
                    <scope line="761"/>
                    <scope line="765"/>
                </scope>
            </method>
            <method name="getNativeTree" type="IIOMetadataNode" line="773">
                <comment line="790">
                    JFIF must be first, so this skips it                    
                </comment>
                <declaration name="root" type="IIOMetadataNode" line="774"/>
                <declaration name="top" type="IIOMetadataNode" line="775"/>
                <declaration name="iter" type="Iterator" line="776"/>
                <scope line="777"/>
                <scope line="780">
                    <declaration name="sequence" type="IIOMetadataNode" line="781"/>
                    <scope line="782">
                        <declaration name="header" type="IIOMetadataNode" line="784"/>
                        <declaration name="jfif" type="JFIFMarkerSegment" line="786"/>
                        <scope line="788"/>
                    </scope>
                    <scope line="793"/>
                </scope>
                <scope line="798">
                    <declaration name="seg" type="MarkerSegment" line="799"/>
                </scope>
            </method>
            <method name="getStandardChromaNode" type="IIOMetadataNode" line="807">
                <comment line="809">
                    Unless we find otherwise                    
                </comment>
                <comment line="811">
                    Colorspace type - follow the rules in the spec
                     First get the SOF marker segment, if there is one                    
                </comment>
                <comment line="816">
                    No image, so no chroma                    
                </comment>
                <comment line="824">
                    get the number of channels                    
                </comment>
                <comment line="831">
                    is there a JFIF marker segment?                    
                </comment>
                <comment line="841">
                    How about an Adobe marker segment?                    
                </comment>
                <comment line="863">
                    Neither marker.  Check components                    
                </comment>
                <comment line="889">
                    Check against the letters                    
                </comment>
                <comment line="914">
                    Finally, 3-channel subsampled are YCbCr, unsubsampled are RGB
                     4-channel subsampled are YCbCrA, unsubsampled are CMYK                    
                </comment>
                <comment line="938">
                    Not subsampled.  numChannels &lt; 3 is taken care of above                    
                </comment>
                <declaration name="sof" type="SOFMarkerSegment" line="812"/>
                <scope line="814"/>
                <declaration name="chroma" type="IIOMetadataNode" line="819"/>
                <declaration name="csType" type="IIOMetadataNode" line="820"/>
                <declaration name="numChannels" type="int" line="824"/>
                <declaration name="numChanNode" type="IIOMetadataNode" line="826"/>
                <scope line="831">
                    <scope line="832"/>
                    <scope line="834"/>
                </scope>
                <declaration name="adobe" type="AdobeMarkerSegment" line="841"/>
                <scope line="843">
                    <scope line="852"/>
                    <scope line="854"/>
                </scope>
                <scope line="863">
                    <scope line="865"/>
                </scope>
                <declaration name="idsAreJFIF" type="boolean" line="871"/>
                <scope line="873">
                    <declaration name="id" type="int" line="874"/>
                    <scope line="875"/>
                </scope>
                <scope line="880">
                    <scope line="882"/>
                </scope>
                <scope line="891">
                    <scope line="895"/>
                </scope>
                <scope line="903">
                    <scope line="907"/>
                </scope>
                <declaration name="subsampled" type="boolean" line="916"/>
                <declaration name="hfactor" type="int" line="918"/>
                <declaration name="vfactor" type="int" line="919"/>
                <scope line="921">
                    <scope line="923"/>
                </scope>
                <scope line="929">
                    <scope line="931"/>
                </scope>
                <scope line="938"/>
                <scope line="940"/>
            </method>
            <method name="getStandardCompressionNode" type="IIOMetadataNode" line="947">
                <comment line="952">
                    CompressionTypeName                    
                </comment>
                <comment line="957">
                    Lossless - false                    
                </comment>
                <comment line="962">
                    NumProgressiveScans - count sos segments                    
                </comment>
                <declaration name="compression" type="IIOMetadataNode" line="949"/>
                <declaration name="name" type="IIOMetadataNode" line="952"/>
                <declaration name="lossless" type="IIOMetadataNode" line="957"/>
                <declaration name="sosCount" type="int" line="962"/>
                <declaration name="iter" type="Iterator" line="963"/>
                <scope line="964">
                    <declaration name="ms" type="MarkerSegment" line="965"/>
                    <scope line="966"/>
                </scope>
                <scope line="970">
                    <declaration name="prog" type="IIOMetadataNode" line="971"/>
                </scope>
            </method>
            <method name="getStandardDimensionNode" type="IIOMetadataNode" line="979">
                <comment line="981">
                    If we have a JFIF marker segment, we know a little
                     otherwise all we know is the orientation, which is always normal                    
                </comment>
                <comment line="992">
                    Aspect Ratio is width of pixel / height of pixel                    
                </comment>
                <comment line="995">
                    In this case they just encode aspect ratio directly                    
                </comment>
                <comment line="998">
                    They are true densities (e.g. dpi) and must be inverted                    
                </comment>
                <comment line="1005">
                    Pixel size                    
                </comment>
                <comment line="1007">
                    1 == dpi, 2 == dpc                    
                </comment>
                <declaration name="dim" type="IIOMetadataNode" line="982"/>
                <declaration name="orient" type="IIOMetadataNode" line="983"/>
                <declaration name="jfif" type="JFIFMarkerSegment" line="987"/>
                <scope line="989">
                    <declaration name="aspectRatio" type="float" line="992"/>
                    <scope line="993"/>
                    <scope line="996"/>
                    <declaration name="aspect" type="IIOMetadataNode" line="1000"/>
                    <scope line="1005">
                        <declaration name="scale" type="float" line="1007"/>
                        <declaration name="horiz" type="IIOMetadataNode" line="1009"/>
                        <declaration name="vert" type="IIOMetadataNode" line="1015"/>
                    </scope>
                </scope>
            </method>
            <method name="getStandardTextNode" type="IIOMetadataNode" line="1025">
                <comment line="1028">
                    Add a text entry for each COM Marker Segment                    
                </comment>
                <declaration name="text" type="IIOMetadataNode" line="1026"/>
                <scope line="1028">
                    <declaration name="iter" type="Iterator" line="1030"/>
                    <scope line="1031">
                        <declaration name="seg" type="MarkerSegment" line="1032"/>
                        <scope line="1033">
                            <declaration name="com" type="COMMarkerSegment" line="1034"/>
                            <declaration name="entry" type="IIOMetadataNode" line="1035"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getStandardTransparencyNode" type="IIOMetadataNode" line="1045">
                <comment line="1051">
                    Always assume                    
                </comment>
                <declaration name="trans" type="IIOMetadataNode" line="1046"/>
                <scope line="1047">
                    <declaration name="alpha" type="IIOMetadataNode" line="1049"/>
                </scope>
            </method>
            <method name="isReadOnly" type="boolean" line="1058"/>
            <method name="mergeTree" type="void" line="1063">
                <params>
                    <param name="formatName" type="String"/>
                    <param name="root" type="Node"/>
                </params>
                <comment line="1073">
                    Deep copy                    
                </comment>
                <comment line="1074">
                    Avoid cloning twice                    
                </comment>
                <scope line="1064"/>
                <scope line="1067"/>
                <declaration name="copy" type="List" line="1070"/>
                <scope line="1071"/>
                <scope line="1074"/>
                <scope line="1078"/>
                <scope line="1081"/>
                <scope line="1085"/>
                <scope line="1087"/>
                <scope line="1091"/>
            </method>
            <method name="mergeNativeTree" type="void" line="1098">
                <params>
                    <param name="root" type="Node"/>
                </params>
                <comment line="1106">
                    JPEGvariety and markerSequence                    
                </comment>
                <declaration name="name" type="String" line="1099"/>
                <scope line="1101"/>
                <scope line="1105"/>
            </method>
            <javadoc line="1113">
                Merge a JFIF subtree into the marker sequence, if the subtree
                  is non-empty.
                  If a JFIF marker exists, update it from the subtree.
                  If none exists, create one from the subtree and insert it at the
                  beginning of the marker sequence.                
            </javadoc>
            <method name="mergeJFIFsubtree" type="void" line="1121">
                <params>
                    <param name="JPEGvariety" type="Node"/>
                </params>
                <comment line="1125">
                    is there already a jfif marker segment?                    
                </comment>
                <comment line="1131">
                    Add it as the first element in the list.                    
                </comment>
                <scope line="1122">
                    <declaration name="jfifNode" type="Node" line="1123"/>
                    <declaration name="jfifSeg" type="JFIFMarkerSegment" line="1125"/>
                    <scope line="1127"/>
                    <scope line="1129"/>
                </scope>
            </method>
            <method name="mergeSequenceSubtree" type="void" line="1137">
                <params>
                    <param name="sequenceTree" type="Node"/>
                </params>
                <declaration name="children" type="NodeList" line="1138"/>
                <scope line="1139">
                    <declaration name="node" type="Node" line="1140"/>
                    <declaration name="name" type="String" line="1141"/>
                    <scope line="1142"/>
                    <scope line="1144"/>
                    <scope line="1146"/>
                    <scope line="1148"/>
                    <scope line="1150"/>
                    <scope line="1152"/>
                    <scope line="1154"/>
                    <scope line="1156"/>
                    <scope line="1158"/>
                </scope>
            </method>
            <javadoc line="1164">
                Merge the given DQT node into the marker sequence.  If there already
                  exist DQT marker segments in the sequence, then each table in the
                  node replaces the first table, in any DQT segment, with the same
                  table id.  If none of the existing DQT segments contain a table with
                  the same id, then the table is added to the last existing DQT segment.
                  If there are no DQT segments, then a new one is created and added
                  as follows:
                  If there are DHT segments, the new DQT segment is inserted before the
                  first one.
                  If there are no DHT segments, the new DQT segment is inserted before
                  an SOF segment, if there is one.
                  If there is no SOF segment, the new DQT segment is inserted before
                  the first SOS segment, if there is one.
                  If there is no SOS segment, the new DQT segment is added to the end
                  of the sequence.                
            </javadoc>
            <method name="mergeDQTNode" type="void" line="1181">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <comment line="1183">
                    First collect any existing DQT nodes into a local list                    
                </comment>
                <declaration name="oldDQTs" type="ArrayList" line="1183"/>
                <declaration name="iter" type="Iterator" line="1184"/>
                <scope line="1185">
                    <declaration name="seg" type="MarkerSegment" line="1186"/>
                    <scope line="1187"/>
                </scope>
                <scope line="1191">
                    <declaration name="children" type="NodeList" line="1192"/>
                    <scope line="1193">
                        <declaration name="child" type="Node" line="1194"/>
                        <declaration name="childID" type="int" line="1195"/>
                        <declaration name="dqt" type="DQTMarkerSegment" line="1200"/>
                        <declaration name="tableIndex" type="int" line="1201"/>
                        <scope line="1202">
                            <declaration name="testDQT" type="DQTMarkerSegment" line="1203"/>
                            <scope line="1204">
                                <declaration name="testTable" type="DQTMarkerSegment.Qtable" line="1205"/>
                                <scope line="1207"/>
                            </scope>
                        </scope>
                        <scope line="1215"/>
                        <scope line="1217"/>
                    </scope>
                </scope>
                <scope line="1222">
                    <declaration name="newGuy" type="DQTMarkerSegment" line="1223"/>
                    <declaration name="firstDHT" type="int" line="1224"/>
                    <declaration name="firstSOF" type="int" line="1225"/>
                    <declaration name="firstSOS" type="int" line="1226"/>
                    <scope line="1227"/>
                    <scope line="1229"/>
                    <scope line="1231"/>
                    <scope line="1233"/>
                </scope>
            </method>
            <javadoc line="1239">
                Merge the given DHT node into the marker sequence.  If there already
                  exist DHT marker segments in the sequence, then each table in the
                  node replaces the first table, in any DHT segment, with the same
                  table class and table id.  If none of the existing DHT segments contain
                  a table with the same class and id, then the table is added to the last
                  existing DHT segment.
                  If there are no DHT segments, then a new one is created and added
                  as follows:
                  If there are DQT segments, the new DHT segment is inserted immediately
                  following the last DQT segment.
                  If there are no DQT segments, the new DHT segment is inserted before
                  an SOF segment, if there is one.
                  If there is no SOF segment, the new DHT segment is inserted before
                  the first SOS segment, if there is one.
                  If there is no SOS segment, the new DHT segment is added to the end
                  of the sequence.                
            </javadoc>
            <method name="mergeDHTNode" type="void" line="1257">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <comment line="1259">
                    First collect any existing DQT nodes into a local list                    
                </comment>
                <declaration name="oldDHTs" type="ArrayList" line="1259"/>
                <declaration name="iter" type="Iterator" line="1260"/>
                <scope line="1261">
                    <declaration name="seg" type="MarkerSegment" line="1262"/>
                    <scope line="1263"/>
                </scope>
                <scope line="1267">
                    <declaration name="children" type="NodeList" line="1268"/>
                    <scope line="1269">
                        <declaration name="child" type="Node" line="1270"/>
                        <declaration name="attrs" type="NamedNodeMap" line="1271"/>
                        <declaration name="childID" type="int" line="1272"/>
                        <declaration name="childClass" type="int" line="1277"/>
                        <declaration name="dht" type="DHTMarkerSegment" line="1282"/>
                        <declaration name="tableIndex" type="int" line="1283"/>
                        <scope line="1284">
                            <declaration name="testDHT" type="DHTMarkerSegment" line="1285"/>
                            <scope line="1286">
                                <declaration name="testTable" type="DHTMarkerSegment.Htable" line="1287"/>
                                <scope line="1290"/>
                            </scope>
                        </scope>
                        <scope line="1298"/>
                        <scope line="1300"/>
                    </scope>
                </scope>
                <scope line="1305">
                    <declaration name="newGuy" type="DHTMarkerSegment" line="1306"/>
                    <declaration name="lastDQT" type="int" line="1307"/>
                    <declaration name="firstSOF" type="int" line="1308"/>
                    <declaration name="firstSOS" type="int" line="1309"/>
                    <scope line="1310"/>
                    <scope line="1312"/>
                    <scope line="1314"/>
                    <scope line="1316"/>
                </scope>
            </method>
            <javadoc line="1322">
                Merge the given DRI node into the marker sequence.
                  If there already exists a DRI marker segment, the restart interval
                  value is updated.
                  If there is no DRI segment, then a new one is created and added as
                  follows:
                  If there is an SOF segment, the new DRI segment is inserted before
                  it.
                  If there is no SOF segment, the new DRI segment is inserted before
                  the first SOS segment, if there is one.
                  If there is no SOS segment, the new DRI segment is added to the end
                  of the sequence.                
            </javadoc>
            <method name="mergeDRINode" type="void" line="1335">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="dri" type="DRIMarkerSegment" line="1336"/>
                <scope line="1338"/>
                <scope line="1340">
                    <declaration name="newGuy" type="DRIMarkerSegment" line="1341"/>
                    <declaration name="firstSOF" type="int" line="1342"/>
                    <declaration name="firstSOS" type="int" line="1343"/>
                    <scope line="1344"/>
                    <scope line="1346"/>
                    <scope line="1348"/>
                </scope>
            </method>
            <javadoc line="1354">
                Merge the given COM node into the marker sequence.
                  A new COM marker segment is created and added to the sequence
                  using insertCOMMarkerSegment.                
            </javadoc>
            <method name="mergeCOMNode" type="void" line="1359">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="newGuy" type="COMMarkerSegment" line="1360"/>
            </method>
            <javadoc line="1364">
                Insert a new COM marker segment into an appropriate place in the
                  marker sequence, as follows:
                  If there already exist COM marker segments, the new one is inserted
                  after the last one.
                  If there are no COM segments, the new COM segment is inserted after the
                  JFIF segment, if there is one.
                  If there is no JFIF segment, the new COM segment is inserted after the
                  Adobe marker segment, if there is one.
                  If there is no Adobe segment, the new COM segment is inserted
                  at the beginning of the sequence.                
            </javadoc>
            <method name="insertCOMMarkerSegment" type="void" line="1376">
                <params>
                    <param name="newGuy" type="COMMarkerSegment"/>
                </params>
                <comment line="1384">
                    JFIF is always 0                    
                </comment>
                <declaration name="lastCOM" type="int" line="1377"/>
                <declaration name="hasJFIF" type="boolean" line="1378"/>
                <declaration name="firstAdobe" type="int" line="1379"/>
                <scope line="1380"/>
                <scope line="1382"/>
                <scope line="1384"/>
                <scope line="1386"/>
            </method>
            <javadoc line="1391">
                Merge the given Adobe APP14 node into the marker sequence.
                  If there already exists an Adobe marker segment, then its attributes
                  are updated from the node.
                  If there is no Adobe segment, then a new one is created and added
                  using insertAdobeMarkerSegment.                
            </javadoc>
            <method name="mergeAdobeNode" type="void" line="1398">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="adobe" type="AdobeMarkerSegment" line="1399"/>
                <scope line="1401"/>
                <scope line="1403">
                    <declaration name="newGuy" type="AdobeMarkerSegment" line="1404"/>
                </scope>
            </method>
            <javadoc line="1409">
                Insert the given AdobeMarkerSegment into the marker sequence, as
                  follows (we assume there is no Adobe segment yet):
                  If there is a JFIF segment, then the new Adobe segment is inserted
                  after it.
                  If there is no JFIF segment, the new Adobe segment is inserted after the
                  last Unknown segment, if there are any.
                  If there are no Unknown segments, the new Adobe segment is inserted
                  at the beginning of the sequence.                
            </javadoc>
            <method name="insertAdobeMarkerSegment" type="void" line="1419">
                <params>
                    <param name="newGuy" type="AdobeMarkerSegment"/>
                </params>
                <comment line="1425">
                    JFIF is always 0                    
                </comment>
                <declaration name="hasJFIF" type="boolean" line="1420"/>
                <declaration name="lastUnknown" type="int" line="1422"/>
                <scope line="1423"/>
                <scope line="1425"/>
                <scope line="1427"/>
            </method>
            <javadoc line="1432">
                Merge the given Unknown node into the marker sequence.
                  A new Unknown marker segment is created and added to the sequence as
                  follows:
                  If there already exist Unknown marker segments, the new one is inserted
                  after the last one.
                  If there are no Unknown marker segments, the new Unknown marker segment
                  is inserted after the JFIF segment, if there is one.
                  If there is no JFIF segment, the new Unknown segment is inserted before
                  the Adobe marker segment, if there is one.
                  If there is no Adobe segment, the new Unknown segment is inserted
                  at the beginning of the sequence.                
            </javadoc>
            <method name="mergeUnknownNode" type="void" line="1445">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <comment line="1454">
                    JFIF is always 0                    
                </comment>
                <declaration name="newGuy" type="MarkerSegment" line="1446"/>
                <declaration name="lastUnknown" type="int" line="1447"/>
                <declaration name="hasJFIF" type="boolean" line="1448"/>
                <declaration name="firstAdobe" type="int" line="1449"/>
                <scope line="1450"/>
                <scope line="1452"/>
                <scope line="1454"/>
                <scope line="1456"/>
            </method>
            <javadoc line="1461">
                Merge the given SOF node into the marker sequence.
                  If there already exists an SOF marker segment in the sequence, then
                  its values are updated from the node.
                  If there is no SOF segment, then a new one is created and added as
                  follows:
                  If there are any SOS segments, the new SOF segment is inserted before
                  the first one.
                  If there is no SOS segment, the new SOF segment is added to the end
                  of the sequence.                
            </javadoc>
            <method name="mergeSOFNode" type="void" line="1473">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="sof" type="SOFMarkerSegment" line="1474"/>
                <scope line="1476"/>
                <scope line="1478">
                    <declaration name="newGuy" type="SOFMarkerSegment" line="1479"/>
                    <declaration name="firstSOS" type="int" line="1480"/>
                    <scope line="1481"/>
                    <scope line="1483"/>
                </scope>
            </method>
            <javadoc line="1489">
                Merge the given SOS node into the marker sequence.
                  If there already exists a single SOS marker segment, then the values
                  are updated from the node.
                  If there are more than one existing SOS marker segments, then an
                  IIOInvalidTreeException is thrown, as SOS segments cannot be merged
                  into a set of progressive scans.
                  If there are no SOS marker segments, a new one is created and added
                  to the end of the sequence.                
            </javadoc>
            <method name="mergeSOSNode" type="void" line="1499">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="firstSOS" type="SOSMarkerSegment" line="1500"/>
                <declaration name="lastSOS" type="SOSMarkerSegment" line="1502"/>
                <scope line="1504">
                    <scope line="1505"/>
                </scope>
                <scope line="1510"/>
            </method>
            <declaration name="transparencyDone" type="boolean" line="1515"/>
            <method name="mergeStandardTree" type="void" line="1517">
                <params>
                    <param name="root" type="Node"/>
                </params>
                <declaration name="children" type="NodeList" line="1519"/>
                <scope line="1520">
                    <declaration name="node" type="Node" line="1521"/>
                    <declaration name="name" type="String" line="1522"/>
                    <scope line="1523"/>
                    <scope line="1525"/>
                    <scope line="1527"/>
                    <scope line="1529"/>
                    <scope line="1531"/>
                    <scope line="1533"/>
                    <scope line="1535"/>
                    <scope line="1537"/>
                </scope>
            </method>
            <method name="mergeStandardChromaNode" type="void" line="1553">
                <params>
                    <param name="node" type="Node"/>
                    <param name="siblings" type="NodeList"/>
                </params>
                <comment line="1555">
                    ColorSpaceType can change the target colorspace for compression
                     This must take any transparency node into account as well, as
                     that affects the number of channels (if alpha is present).  If
                     a transparency node is dealt with here, set a flag to indicate
                     this to the transparency processor below.  If we discover that
                     the nodes are not in order, throw an exception as the tree is
                     invalid.                    
                </comment>
                <comment line="1570">
                    If there is no ColorSpaceType node, we have nothing to do                    
                </comment>
                <comment line="1581">
                    JFIF compatible                    
                </comment>
                <comment line="1623">
                    We can&apos;t handle them, so don&apos;t modify any metadata                    
                </comment>
                <comment line="1632">
                    out of for                    
                </comment>
                <comment line="1654">
                    If the metadata specifies progressive, then the number of channels
                     must match, so that we can modify all the existing SOS marker segments.
                     If they don&apos;t match, we don&apos;t know what to do with SOS so we can&apos;t do
                     the merge.  We then just return silently.
                     An exception would not be appropriate.  A warning might, but we have
                     nowhere to send it to.                    
                </comment>
                <comment line="1660">
                    Progressive                    
                </comment>
                <comment line="1666">
                    JFIF header might be removed                    
                </comment>
                <comment line="1671">
                    Now add a JFIF if we do want one, but only if it isn&apos;t stream metadata                    
                </comment>
                <comment line="1676">
                    Adobe header might be removed or the transform modified, if it isn&apos;t
                     stream metadata                    
                </comment>
                <comment line="1701">
                    Keep the old componentSpecs array                    
                </comment>
                <comment line="1703">
                    SOF might be modified                    
                </comment>
                <comment line="1707">
                    Now replace the SOF with a new one; it might be the same, but
                     this is easier.                    
                </comment>
                <comment line="1711">
                    we never need extended                    
                </comment>
                <comment line="1716">
                    Now suss out if subsampling changed and set the boolean for
                     updating the q tables
                     if the old componentSpec q table selectors don&apos;t match
                     the new ones, update the qtables.  The new selectors are already
                     in place in the new SOF segment above.                    
                </comment>
                <comment line="1728">
                    if the component ids are different, update all the existing scans
                     ignore Huffman tables                    
                </comment>
                <comment line="1737">
                    update the ids in each SOS marker segment                    
                </comment>
                <comment line="1745">
                    Find the position in the old componentSpecs array
                     of the old component with the old selector
                     and replace the component selector with the
                     new id at the same position, as these match
                     the new component specs array in the SOF created
                     above.                    
                </comment>
                <comment line="1763">
                    htables - if the old htable selectors don&apos;t match the new ones,
                     update the tables.                    
                </comment>
                <comment line="1774">
                    Might be the same as the old one, but this is easier.                    
                </comment>
                <comment line="1782">
                    should be stream metadata if there isn&apos;t an SOF, but check it anyway                    
                </comment>
                <comment line="1784">
                    update tables - routines below check if it&apos;s really necessary                    
                </comment>
                <comment line="1798">
                    If there are no tables, don&apos;t add them, as the metadata encodes an
                     abbreviated stream.
                     If we are not subsampling, we just need one, so don&apos;t do anything                    
                </comment>
                <comment line="1802">
                    Is it really necessary?  There should be at least 2 tables.
                     If there is only one, assume it&apos;s a scaled &quot;standard&quot;
                     luminance table, extract the scaling factor, and generate a
                     scaled &quot;standard&quot; chrominance table.                    
                </comment>
                <comment line="1807">
                    Find the table with selector 1.                    
                </comment>
                <comment line="1821">
                    find the table with selector 0.  There should be one.                    
                </comment>
                <comment line="1835">
                    Assuming that the table with id 0 is a luminance table,
                     compute a new chrominance table of the same quality and
                     add it to the last DQT segment                    
                </comment>
                <comment line="1853">
                    If there are no tables, don&apos;t add them, as the metadata encodes an
                     abbreviated stream.
                     If we are not subsampling, we just need one, so don&apos;t do anything                    
                </comment>
                <comment line="1857">
                    Is it really necessary?  There should be at least 2 dc and 2 ac
                     tables.  If there is only one, add a
                     &quot;standard &quot; chrominance table.                    
                </comment>
                <comment line="1861">
                    find a table with selector 1. AC/DC is irrelevant                    
                </comment>
                <comment line="1875">
                    Create new standard dc and ac chrominance tables and add them
                     to the last DHT segment                    
                </comment>
                <scope line="1562"/>
                <declaration name="csType" type="Node" line="1567"/>
                <scope line="1568"/>
                <declaration name="csName" type="String" line="1573"/>
                <declaration name="numChannels" type="int" line="1575"/>
                <declaration name="wantJFIF" type="boolean" line="1576"/>
                <declaration name="wantAdobe" type="boolean" line="1577"/>
                <declaration name="transform" type="int" line="1578"/>
                <declaration name="willSubsample" type="boolean" line="1579"/>
                <declaration name="ids" type="byte[]" line="1580"/>
                <scope line="1581"/>
                <scope line="1584"/>
                <scope line="1588"/>
                <scope line="1595"/>
                <scope line="1609"/>
                <scope line="1611"/>
                <scope line="1616"/>
                <scope line="1620"/>
                <scope line="1622"/>
                <declaration name="wantAlpha" type="boolean" line="1626"/>
                <scope line="1627">
                    <declaration name="trans" type="Node" line="1628"/>
                    <scope line="1629"/>
                </scope>
                <scope line="1635">
                    <scope line="1638"/>
                </scope>
                <declaration name="jfif" type="JFIFMarkerSegment" line="1644"/>
                <declaration name="adobe" type="AdobeMarkerSegment" line="1646"/>
                <declaration name="sof" type="SOFMarkerSegment" line="1648"/>
                <declaration name="sos" type="SOSMarkerSegment" line="1650"/>
                <scope line="1659">
                    <scope line="1660"/>
                </scope>
                <scope line="1666"/>
                <scope line="1671"/>
                <scope line="1677">
                    <scope line="1678"/>
                    <scope line="1681"/>
                </scope>
                <scope line="1684"/>
                <declaration name="updateQtables" type="boolean" line="1688"/>
                <declaration name="updateHtables" type="boolean" line="1689"/>
                <declaration name="progressive" type="boolean" line="1691"/>
                <declaration name="subsampledSelectors" type="int[]" line="1693"/>
                <declaration name="nonSubsampledSelectors" type="int[]" line="1694"/>
                <declaration name="newTableSelectors" type="int[]" line="1696"/>
                <declaration name="oldCompSpecs" type="SOFMarkerSegment.ComponentSpec[]" line="1701"/>
                <scope line="1703">
                    <scope line="1720">
                        <scope line="1721"/>
                    </scope>
                    <scope line="1726">
                        <declaration name="idsDiffer" type="boolean" line="1729"/>
                        <scope line="1730">
                            <scope line="1731"/>
                        </scope>
                        <scope line="1735">
                            <scope line="1737">
                                <declaration name="seg" type="MarkerSegment" line="1738"/>
                                <scope line="1739">
                                    <declaration name="target" type="SOSMarkerSegment" line="1740"/>
                                    <scope line="1741">
                                        <declaration name="oldSelector" type="int" line="1742"/>
                                        <scope line="1750">
                                            <scope line="1751"/>
                                        </scope>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1760">
                        <scope line="1761">
                            <scope line="1764">
                                <scope line="1768"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1780">
                    <scope line="1782"/>
                </scope>
                <scope line="1789">
                    <declaration name="tableSegments" type="List" line="1790"/>
                    <scope line="1791">
                        <declaration name="seg" type="MarkerSegment" line="1792"/>
                        <scope line="1793"/>
                    </scope>
                    <scope line="1800">
                        <declaration name="found" type="boolean" line="1807"/>
                        <scope line="1808">
                            <declaration name="testdqt" type="DQTMarkerSegment" line="1809"/>
                            <scope line="1811">
                                <declaration name="tab" type="DQTMarkerSegment.Qtable" line="1812"/>
                                <scope line="1814"/>
                            </scope>
                        </scope>
                        <scope line="1819">
                            <declaration name="table0" type="DQTMarkerSegment.Qtable" line="1821"/>
                            <scope line="1822">
                                <declaration name="testdqt" type="DQTMarkerSegment" line="1823"/>
                                <scope line="1825">
                                    <declaration name="tab" type="DQTMarkerSegment.Qtable" line="1826"/>
                                    <scope line="1828"/>
                                </scope>
                            </scope>
                            <declaration name="dqt" type="DQTMarkerSegment" line="1837"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1844">
                    <declaration name="tableSegments" type="List" line="1845"/>
                    <scope line="1846">
                        <declaration name="seg" type="MarkerSegment" line="1847"/>
                        <scope line="1848"/>
                    </scope>
                    <scope line="1855">
                        <declaration name="found" type="boolean" line="1861"/>
                        <scope line="1862">
                            <declaration name="testdht" type="DHTMarkerSegment" line="1863"/>
                            <scope line="1865">
                                <declaration name="tab" type="DHTMarkerSegment.Htable" line="1866"/>
                                <scope line="1868"/>
                            </scope>
                        </scope>
                        <scope line="1873">
                            <declaration name="lastDHT" type="DHTMarkerSegment" line="1876"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="wantAlpha" type="boolean" line="1885">
                <params>
                    <param name="transparency" type="Node"/>
                </params>
                <comment line="1888">
                    Alpha must be first if present                    
                </comment>
                <declaration name="returnValue" type="boolean" line="1886"/>
                <declaration name="alpha" type="Node" line="1887"/>
                <scope line="1888">
                    <scope line="1889">
                        <declaration name="value" type="String" line="1890"/>
                        <scope line="1892"/>
                    </scope>
                </scope>
            </method>
            <method name="mergeStandardCompressionNode" type="void" line="1902">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <comment line="1904">
                    NumProgressiveScans is ignored.  Progression must be enabled on the
                     ImageWriteParam.
                     No-op                    
                </comment>
            </method>
            <method name="mergeStandardDataNode" type="void" line="1909">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <comment line="1911">
                    No-op                    
                </comment>
            </method>
            <method name="mergeStandardDimensionNode" type="void" line="1914">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <comment line="1916">
                    Pixel Aspect Ratio or pixel size can be incorporated if there is,
                     or can be, a JFIF segment                    
                </comment>
                <comment line="1921">
                    Can there be one?
                     Criteria:
                     SOF must be present with 1 or 3 channels, (stream metadata fails this)
                         Component ids must be JFIF compatible.                    
                </comment>
                <comment line="1931">
                    remaining tests are negative                    
                </comment>
                <comment line="1936">
                    if Adobe present, transform = ADOBE_UNKNOWN for 1-channel,
                         ADOBE_YCC for 3-channel.                    
                </comment>
                <comment line="1950">
                    If so, create one and insert it into the sequence.  Note that
                     default is just pixel ratio at 1:1                    
                </comment>
                <comment line="1973">
                    Convert from mm/dot to dots/cm                    
                </comment>
                <comment line="1980">
                    Convert from mm/dot to dots/cm                    
                </comment>
                <declaration name="jfif" type="JFIFMarkerSegment" line="1917"/>
                <scope line="1919">
                    <declaration name="canHaveJFIF" type="boolean" line="1924"/>
                    <declaration name="sof" type="SOFMarkerSegment" line="1925"/>
                    <scope line="1927">
                        <declaration name="numChannels" type="int" line="1928"/>
                        <scope line="1929">
                            <scope line="1931"/>
                            <declaration name="adobe" type="AdobeMarkerSegment" line="1937"/>
                            <scope line="1940">
                                <scope line="1943"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1951"/>
                </scope>
                <scope line="1956">
                    <declaration name="children" type="NodeList" line="1957"/>
                    <scope line="1958">
                        <declaration name="child" type="Node" line="1959"/>
                        <declaration name="attrs" type="NamedNodeMap" line="1960"/>
                        <declaration name="name" type="String" line="1961"/>
                        <scope line="1962">
                            <declaration name="valueString" type="String" line="1963"/>
                            <declaration name="value" type="float" line="1964"/>
                            <declaration name="p" type="Point" line="1965"/>
                        </scope>
                        <scope line="1969">
                            <declaration name="valueString" type="String" line="1970"/>
                            <declaration name="value" type="float" line="1971"/>
                            <declaration name="dpcm" type="int" line="1973"/>
                        </scope>
                        <scope line="1976">
                            <declaration name="valueString" type="String" line="1977"/>
                            <declaration name="value" type="float" line="1978"/>
                            <declaration name="dpcm" type="int" line="1980"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="findIntegerRatio" type="Point" line="1993">
                <params>
                    <param name="value" type="float"/>
                </params>
                <comment line="1997">
                    Normalize                    
                </comment>
                <comment line="2000">
                    Deal with min case                    
                </comment>
                <comment line="2005">
                    Deal with max case                    
                </comment>
                <comment line="2010">
                    Remember if we invert                    
                </comment>
                <comment line="2017">
                    First approximation                    
                </comment>
                <comment line="2023">
                    not close enough                    
                </comment>
                <comment line="2024">
                    Increment y and compute a new x                    
                </comment>
                <declaration name="epsilon" type="float" line="1994"/>
                <scope line="2000"/>
                <scope line="2005"/>
                <declaration name="inverted" type="boolean" line="2010"/>
                <scope line="2011"/>
                <declaration name="y" type="int" line="2017"/>
                <declaration name="x" type="int" line="2018"/>
                <declaration name="ratio" type="float" line="2020"/>
                <declaration name="delta" type="float" line="2021"/>
                <scope line="2022"/>
            </method>
            <method name="mergeStandardDocumentNode" type="void" line="2033">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <comment line="2035">
                    No-op                    
                </comment>
            </method>
            <method name="mergeStandardTextNode" type="void" line="2038">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <comment line="2040">
                    Convert to comments.  For the moment ignore the encoding issue.
                     Ignore keywords, language, and encoding (for the moment).
                     If compression tag is present, use only entries with &quot;none&quot;.                    
                </comment>
                <declaration name="children" type="NodeList" line="2042"/>
                <scope line="2043">
                    <declaration name="child" type="Node" line="2044"/>
                    <declaration name="attrs" type="NamedNodeMap" line="2045"/>
                    <declaration name="comp" type="Node" line="2046"/>
                    <declaration name="copyIt" type="boolean" line="2047"/>
                    <scope line="2048">
                        <declaration name="compString" type="String" line="2049"/>
                        <scope line="2050"/>
                    </scope>
                    <scope line="2054">
                        <declaration name="value" type="String" line="2055"/>
                        <declaration name="com" type="COMMarkerSegment" line="2056"/>
                    </scope>
                </scope>
            </method>
            <method name="mergeStandardTransparencyNode" type="void" line="2063">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <comment line="2065">
                    This might indicate that an alpha channel is being added or removed.
                     The nodes must appear in order, and a Chroma node will process any
                     transparency, so process it here only if there was no Chroma node
                     Do nothing for stream metadata                    
                </comment>
                <comment line="2071">
                    do we have alpha already?  If the number of channels is 2 or 4,
                     we do, as we don&apos;t support CMYK, nor can we add alpha to it
                     The number of channels can be determined from the SOF                    
                </comment>
                <comment line="2083">
                    We can do nothing for progressive, as we don&apos;t know how to
                     modify the scans.                    
                </comment>
                <comment line="2085">
                    Progressive                    
                </comment>
                <comment line="2089">
                    Do we already have alpha?  We can tell by the number of channels
                     We must have an sof, or we can&apos;t do anything further                    
                </comment>
                <comment line="2094">
                    proceed only if the old state and the new state differ                    
                </comment>
                <comment line="2096">
                    Adding alpha                    
                </comment>
                <comment line="2102">
                    If an adobe marker is present, transform must be UNKNOWN                    
                </comment>
                <comment line="2107">
                    Add a component spec with appropriate parameters to SOF                    
                </comment>
                <comment line="2122">
                    Add a component spec with appropriate parameters to SOS                    
                </comment>
                <comment line="2131">
                    Removing alpha                    
                </comment>
                <comment line="2133">
                    Remove a component spec from SOF                    
                </comment>
                <comment line="2141">
                    Remove a component spec from SOS                    
                </comment>
                <scope line="2068">
                    <declaration name="wantAlpha" type="boolean" line="2069"/>
                    <declaration name="jfif" type="JFIFMarkerSegment" line="2073"/>
                    <declaration name="adobe" type="AdobeMarkerSegment" line="2075"/>
                    <declaration name="sof" type="SOFMarkerSegment" line="2077"/>
                    <declaration name="sos" type="SOSMarkerSegment" line="2079"/>
                    <scope line="2084"/>
                    <scope line="2090">
                        <declaration name="numChannels" type="int" line="2091"/>
                        <declaration name="hadAlpha" type="boolean" line="2092"/>
                        <scope line="2094">
                            <scope line="2095">
                                <scope line="2097"/>
                                <scope line="2102"/>
                                <declaration name="newSpecs" type="SOFMarkerSegment.ComponentSpec[]" line="2107"/>
                                <scope line="2109"/>
                                <declaration name="oldFirstID" type="byte" line="2112"/>
                                <declaration name="newID" type="byte" line="2113"/>
                                <declaration name="newScanSpecs" type="SOSMarkerSegment.ScanComponentSpec[]" line="2122"/>
                                <scope line="2124"/>
                            </scope>
                            <scope line="2130">
                                <declaration name="newSpecs" type="SOFMarkerSegment.ComponentSpec[]" line="2133"/>
                                <scope line="2135"/>
                                <declaration name="newScanSpecs" type="SOSMarkerSegment.ScanComponentSpec[]" line="2141"/>
                                <scope line="2143"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="setFromTree" type="void" line="2155">
                <params>
                    <param name="formatName" type="String"/>
                    <param name="root" type="Node"/>
                </params>
                <comment line="2172">
                    In this case a reset followed by a merge is correct                    
                </comment>
                <scope line="2156"/>
                <scope line="2159"/>
                <scope line="2163"/>
                <scope line="2166"/>
                <scope line="2170"/>
                <scope line="2173"/>
            </method>
            <method name="setFromNativeTree" type="void" line="2179">
                <params>
                    <param name="root" type="Node"/>
                </params>
                <comment line="2186">
                    Build a whole new marker sequence from the tree                    
                </comment>
                <comment line="2195">
                    JPEGvariety and markerSequence                    
                </comment>
                <scope line="2180"/>
                <declaration name="name" type="String" line="2187"/>
                <scope line="2189"/>
                <scope line="2193">
                    <scope line="2194"/>
                    <declaration name="JPEGvariety" type="Node" line="2199"/>
                    <scope line="2201"/>
                </scope>
                <declaration name="markerSequenceNode" type="Node" line="2206"/>
            </method>
            <method name="setFromMarkerSequenceNode" type="void" line="2212">
                <params>
                    <param name="markerSequenceNode" type="Node"/>
                </params>
                <comment line="2216">
                    for all the children, add a marker segment                    
                </comment>
                <declaration name="children" type="NodeList" line="2214"/>
                <scope line="2216">
                    <declaration name="node" type="Node" line="2217"/>
                    <declaration name="childName" type="String" line="2218"/>
                    <scope line="2219"/>
                    <scope line="2221"/>
                    <scope line="2223"/>
                    <scope line="2225"/>
                    <scope line="2227"/>
                    <scope line="2229"/>
                    <scope line="2231"/>
                    <scope line="2233"/>
                    <scope line="2235"/>
                </scope>
            </method>
            <javadoc line="2243">
                Check that this metadata object is in a consistent state and
                  return &lt;code&gt;true&lt;/code&gt; if it is or &lt;code&gt;false&lt;/code&gt;
                  otherwise.  All the constructors and modifiers should call
                  this method at the end to guarantee that the data is always
                  consistent, as the writer relies on this.                
            </javadoc>
            <method name="isConsistent" type="boolean" line="2250">
                <comment line="2264">
                    SOF numBands = total scan bands                    
                </comment>
                <comment line="2267">
                    No SOS is OK                    
                </comment>
                <comment line="2272">
                    If JFIF is present, component ids are 1-3, bands are 1 or 3                    
                </comment>
                <comment line="2283">
                    If both JFIF and Adobe are present,
                     Adobe transform == unknown for gray,
                     YCC for 3-chan.                    
                </comment>
                <comment line="2295">
                    stream can&apos;t have jfif, adobe, sof, or sos                    
                </comment>
                <declaration name="sof" type="SOFMarkerSegment" line="2251"/>
                <declaration name="jfif" type="JFIFMarkerSegment" line="2254"/>
                <declaration name="adobe" type="AdobeMarkerSegment" line="2257"/>
                <declaration name="retval" type="boolean" line="2260"/>
                <scope line="2261">
                    <scope line="2262">
                        <declaration name="numSOFBands" type="int" line="2264"/>
                        <declaration name="numScanBands" type="int" line="2265"/>
                        <scope line="2266">
                            <scope line="2267"/>
                        </scope>
                        <scope line="2272">
                            <scope line="2273"/>
                            <scope line="2276">
                                <scope line="2277"/>
                            </scope>
                            <scope line="2289"/>
                        </scope>
                    </scope>
                    <scope line="2293">
                        <declaration name="sos" type="SOSMarkerSegment" line="2295"/>
                        <scope line="2299"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2307">
                Returns the total number of bands referenced in all SOS marker
                  segments, including 0 if there are no SOS marker segments.                
            </javadoc>
            <method name="countScanBands" type="int" line="2311">
                <declaration name="ids" type="List" line="2312"/>
                <declaration name="iter" type="Iterator" line="2313"/>
                <scope line="2314">
                    <declaration name="seg" type="MarkerSegment" line="2315"/>
                    <scope line="2316">
                        <declaration name="sos" type="SOSMarkerSegment" line="2317"/>
                        <declaration name="specs" type="SOSMarkerSegment.ScanComponentSpec[]" line="2318"/>
                        <scope line="2319">
                            <declaration name="id" type="Integer" line="2320"/>
                            <scope line="2321"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="writeToStream" type="void" line="2341">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="ignoreJFIF" type="boolean"/>
                    <param name="forceJFIF" type="boolean"/>
                    <param name="thumbnails" type="List"/>
                    <param name="iccProfile" type="ICC_Profile"/>
                    <param name="ignoreAdobe" type="boolean"/>
                    <param name="newAdobeTransform" type="int"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <comment line="2344">
                    Write a default JFIF segment, including thumbnails
                     This won&apos;t be duplicated below because forceJFIF will be
                     set only if there is no JFIF present already.                    
                </comment>
                <comment line="2355">
                    Not compatible, so ignore Adobe.                    
                </comment>
                <comment line="2362">
                    Iterate over each MarkerSegment                    
                </comment>
                <comment line="2373">
                    Otherwise ignore it, as requested                    
                </comment>
                <comment line="2382">
                    If adobe isn&apos;t JFIF compatible, ignore it                    
                </comment>
                <comment line="2394">
                    Otherwise ignore it, as requested                    
                </comment>
                <scope line="2342">
                    <scope line="2351">
                        <scope line="2353"/>
                    </scope>
                </scope>
                <declaration name="iter" type="Iterator" line="2362"/>
                <scope line="2363">
                    <declaration name="seg" type="MarkerSegment" line="2364"/>
                    <scope line="2365">
                        <scope line="2366">
                            <declaration name="jfif" type="JFIFMarkerSegment" line="2367"/>
                            <scope line="2369"/>
                        </scope>
                    </scope>
                    <scope line="2373">
                        <scope line="2374">
                            <scope line="2375">
                                <declaration name="newAdobe" type="AdobeMarkerSegment" line="2376"/>
                            </scope>
                            <scope line="2380">
                                <declaration name="adobe" type="AdobeMarkerSegment" line="2382"/>
                                <scope line="2384"/>
                                <scope line="2386"/>
                            </scope>
                            <scope line="2390"/>
                        </scope>
                    </scope>
                    <scope line="2394"/>
                </scope>
            </method>
            <method name="reset" type="void" line="2402">
                <comment line="2404">
                    Otherwise no need to reset                    
                </comment>
                <scope line="2403"/>
            </method>
            <method name="print" type="void" line="2409">
                <scope line="2410">
                    <declaration name="seg" type="MarkerSegment" line="2411"/>
                </scope>
            </method>
        </class>
    </source>