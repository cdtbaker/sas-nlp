<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.jpeg">
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.ImageWriteParam"/>
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.stream.ImageInputStream"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.metadata.IIOMetadataNode"/>
        <import package="javax.imageio.metadata.IIOMetadataFormat"/>
        <import package="javax.imageio.metadata.IIOMetadataFormatImpl"/>
        <import package="javax.imageio.metadata.IIOInvalidTreeException"/>
        <import package="javax.imageio.plugins.jpeg.JPEGQTable"/>
        <import package="javax.imageio.plugins.jpeg.JPEGHuffmanTable"/>
        <import package="javax.imageio.plugins.jpeg.JPEGImageWriteParam"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.w3c.dom.NodeList"/>
        <import package="org.w3c.dom.NamedNodeMap"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.ListIterator"/>
        <import package="java.io.IOException"/>
        <import package="java.awt.color.ICC_Profile"/>
        <import package="java.awt.color.ICC_ColorSpace"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.Point"/>
        <class name="JPEGMetadata" line="29">
            <extends class="IIOMetadata"/>
            <implements interface="Cloneable"/>
            <javadoc line="29">
                Metadata for the JPEG plug-in.                
            </javadoc>
            <declaration name="debug" type="boolean" line="33"/>
            <declaration name="resetSequence" type="List" line="34"/>
            <javadoc line="34">
                A copy of &lt;code&gt;markerSequence&lt;/code&gt;, created the first time the
                  &lt;code&gt;markerSequence&lt;/code&gt; is modified.  This is used by reset
                  to restore the original state.                
            </javadoc>
            <declaration name="inThumb" type="boolean" line="40"/>
            <javadoc line="40">
                Set to &lt;code&gt;true&lt;/code&gt; when reading a thumbnail stored as
                  JPEG.  This is used to enforce the prohibition of JFIF thumbnails
                  containing any JFIF marker segments, and to ensure generation of
                  a correct native subtree during &lt;code&gt;getAsTree&lt;/code&gt;.                
            </javadoc>
            <declaration name="hasAlpha" type="boolean" line="47"/>
            <javadoc line="47">
                Set by the chroma node construction method to signal the
                  presence or absence of an alpha channel to the transparency
                  node construction method.  Used only when constructing a
                  standard metadata tree.                
            </javadoc>
            <declaration name="markerSequence" type="List" line="54"/>
            <javadoc line="54">
                All data is a list of &lt;code&gt;MarkerSegment&lt;/code&gt; objects.
                  When accessing the list, use the tag to identify the particular
                  subclass.  Any JFIF marker segment must be the first element
                  of the list if it is present, and any JFXX or APP2ICC marker
                  segments are subordinate to the JFIF marker segment.  This
                  list is package visible so that the writer can access it.                
                <see>
                    #MarkerSegment                    
                </see>
            </javadoc>
            <declaration name="isStream" type="boolean" line="64"/>
            <javadoc line="64">
                Indicates whether this object represents stream or image
                  metadata.  Package-visible so the writer can see it.                
            </javadoc>
            <javadoc line="69">
                Constructor containing code shared by other constructors.                
            </javadoc>
            <method name="JPEGMetadata" type="constructor" line="72">
                <params>
                    <param name="isStream" type="boolean"/>
                    <param name="inThumb" type="boolean"/>
                </params>
                <scope line="76"/>
            </method>
            <method name="JPEGMetadata" type="constructor" line="81">
                <params>
                    <param name="isStream" type="boolean"/>
                    <param name="isThumb" type="boolean"/>
                    <param name="iis" type="ImageInputStream"/>
                    <param name="reader" type="JPEGImageReader"/>
                </params>
                <declaration name="buffer" type="JPEGBuffer" line="83"/>
                <scope line="85"/>
                <declaration name="done" type="boolean" line="88"/>
                <declaration name="newGuy" type="MarkerSegment" line="91"/>
                <scope line="92">
                    <declaration name="buf" type="byte[]" line="93"/>
                    <declaration name="ptr" type="int" line="94"/>
                    <scope line="96"/>
                    <scope line="103"/>
                    <scope line="112"/>
                    <scope line="130">
                        <scope line="131">
                            <declaration name="dummy" type="JFIFMarkerSegment" line="133"/>
                        </scope>
                        <scope line="135"/>
                        <scope line="138"/>
                        <scope line="141"/>
                    </scope>
                    <scope line="145">
                        <scope line="146"/>
                        <scope line="149"/>
                        <declaration name="jfif" type="JFIFMarkerSegment" line="152"/>
                        <scope line="153"/>
                    </scope>
                    <scope line="158"/>
                    <scope line="165">
                        <scope line="166"/>
                        <declaration name="jfif" type="JFIFMarkerSegment" line="169"/>
                        <scope line="170"/>
                    </scope>
                    <scope line="175"/>
                    <scope line="182">
                        <scope line="183"/>
                    </scope>
                    <scope line="188"/>
                    <scope line="197"/>
                    <scope line="210"/>
                    <scope line="227">
                        <scope line="229"/>
                    </scope>
                </scope>
                <scope line="236"/>
            </method>
            <javadoc line="240">
                Constructs a default stream &lt;code&gt;JPEGMetadata&lt;/code&gt; object appropriate
                  for the given write parameters.                
            </javadoc>
            <method name="JPEGMetadata" type="constructor" line="244">
                <params>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <declaration name="jparam" type="JPEGImageWriteParam" line="246"/>
                <scope line="247">
                    <scope line="249"/>
                </scope>
                <scope line="253"/>
                <scope line="257"/>
                <scope line="261"/>
            </method>
            <javadoc line="265">
                Constructs a default image &lt;code&gt;JPEGMetadata&lt;/code&gt; object appropriate
                  for the given image type and write parameters.                
            </javadoc>
            <method name="JPEGMetadata" type="constructor" line="269">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <declaration name="wantJFIF" type="boolean" line="271"/>
                <declaration name="wantAdobe" type="boolean" line="272"/>
                <declaration name="transform" type="int" line="273"/>
                <declaration name="willSubsample" type="boolean" line="274"/>
                <declaration name="wantICC" type="boolean" line="275"/>
                <declaration name="wantProg" type="boolean" line="276"/>
                <declaration name="wantOptimized" type="boolean" line="277"/>
                <declaration name="wantExtended" type="boolean" line="278"/>
                <declaration name="wantQTables" type="boolean" line="279"/>
                <declaration name="wantHTables" type="boolean" line="280"/>
                <declaration name="quality" type="float" line="281"/>
                <declaration name="componentIDs" type="byte[]" line="282"/>
                <declaration name="numComponents" type="int" line="283"/>
                <declaration name="destType" type="ImageTypeSpecifier" line="284"/>
                <scope line="285">
                    <scope line="287">
                        <scope line="288"/>
                    </scope>
                    <scope line="293">
                        <scope line="294"/>
                    </scope>
                    <scope line="300">
                        <declaration name="jparam" type="JPEGImageWriteParam" line="301"/>
                        <scope line="302">
                            <scope line="305"/>
                        </scope>
                        <scope line="309">
                            <scope line="311"/>
                        </scope>
                    </scope>
                    <scope line="316">
                        <scope line="317"/>
                    </scope>
                </scope>
                <declaration name="cs" type="ColorSpace" line="322"/>
                <scope line="323">
                    <declaration name="cm" type="ColorModel" line="324"/>
                    <declaration name="hasExtraComponents" type="boolean" line="326"/>
                    <declaration name="hasAlpha" type="boolean" line="327"/>
                    <declaration name="type" type="int" line="329"/>
                    <scope line="333"/>
                    <scope line="338">
                        <scope line="343"/>
                    </scope>
                    <scope line="349">
                        <scope line="351"/>
                    </scope>
                    <scope line="364"/>
                </scope>
                <scope line="373">
                    <declaration name="cm" type="ColorModel" line="374"/>
                    <declaration name="hasExtraComponents" type="boolean" line="376"/>
                    <declaration name="hasAlpha" type="boolean" line="377"/>
                    <declaration name="type" type="int" line="379"/>
                    <scope line="383"/>
                    <scope line="388"/>
                    <scope line="395">
                        <scope line="401"/>
                    </scope>
                    <scope line="407">
                        <scope line="409"/>
                    </scope>
                </scope>
                <scope line="425"/>
                <scope line="428">
                    <declaration name="jfif" type="JFIFMarkerSegment" line="429"/>
                    <scope line="431">
                        <scope line="432"/>
                        <scope line="435"/>
                    </scope>
                </scope>
                <scope line="439"/>
                <scope line="442"/>
                <scope line="445"/>
                <scope line="449"/>
                <scope line="452"/>
            </method>
            <javadoc line="456">
                Returns the first MarkerSegment object in the list
                  with the given tag, or null if none is found.                
            </javadoc>
            <method name="findMarkerSegment" type="MarkerSegment" line="460">
                <params>
                    <param name="tag" type="int"/>
                </params>
                <declaration name="iter" type="Iterator" line="461"/>
                <scope line="462">
                    <declaration name="seg" type="MarkerSegment" line="463"/>
                    <scope line="464"/>
                </scope>
            </method>
            <javadoc line="470">
                Returns the first or last MarkerSegment object in the list
                  of the given class, or null if none is found.                
            </javadoc>
            <method name="findMarkerSegment" type="MarkerSegment" line="474">
                <params>
                    <param name="cls" type="Class"/>
                    <param name="first" type="boolean"/>
                </params>
                <scope line="475">
                    <declaration name="iter" type="Iterator" line="476"/>
                    <scope line="477">
                        <declaration name="seg" type="MarkerSegment" line="478"/>
                        <scope line="479"/>
                    </scope>
                </scope>
                <scope line="484">
                    <declaration name="iter" type="ListIterator" line="485"/>
                    <scope line="486">
                        <declaration name="seg" type="MarkerSegment" line="487"/>
                        <scope line="488"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="495">
                Returns the index of the first or last MarkerSegment in the list
                  of the given class, or -1 if none is found.                
            </javadoc>
            <method name="findMarkerSegmentPosition" type="int" line="499">
                <params>
                    <param name="cls" type="Class"/>
                    <param name="first" type="boolean"/>
                </params>
                <scope line="500">
                    <declaration name="iter" type="ListIterator" line="501"/>
                    <scope line="502">
                        <declaration name="seg" type="MarkerSegment" line="503"/>
                        <scope line="504"/>
                    </scope>
                </scope>
                <scope line="509">
                    <declaration name="iter" type="ListIterator" line="510"/>
                    <scope line="511">
                        <declaration name="seg" type="MarkerSegment" line="512"/>
                        <scope line="513"/>
                    </scope>
                </scope>
            </method>
            <method name="findLastUnknownMarkerSegmentPosition" type="int" line="520">
                <declaration name="iter" type="ListIterator" line="521"/>
                <scope line="522">
                    <declaration name="seg" type="MarkerSegment" line="523"/>
                    <scope line="524"/>
                </scope>
            </method>
            <method name="clone" type="Object" line="530">
                <declaration name="newGuy" type="JPEGMetadata" line="531"/>
                <scope line="532"/>
                <scope line="535"/>
                <scope line="537"/>
            </method>
            <javadoc line="543">
                Returns a deep copy of the current marker sequence.                
            </javadoc>
            <method name="cloneSequence" type="List" line="546">
                <scope line="547"/>
                <declaration name="retval" type="List" line="550"/>
                <declaration name="iter" type="Iterator" line="551"/>
                <scope line="552">
                    <declaration name="seg" type="MarkerSegment" line="553"/>
                </scope>
            </method>
            <method name="getAsTree" type="Node" line="558">
                <params>
                    <param name="formatName" type="String"/>
                </params>
                <scope line="559"/>
                <scope line="562">
                    <scope line="563"/>
                </scope>
                <scope line="567">
                    <scope line="568"/>
                    <scope line="571"/>
                </scope>
            </method>
            <method name="getNativeTree" type="IIOMetadataNode" line="577">
                <declaration name="root" type="IIOMetadataNode" line="578"/>
                <declaration name="top" type="IIOMetadataNode" line="579"/>
                <declaration name="iter" type="Iterator" line="580"/>
                <scope line="581"/>
                <scope line="585">
                    <declaration name="sequence" type="IIOMetadataNode" line="586"/>
                    <scope line="587">
                        <declaration name="header" type="IIOMetadataNode" line="589"/>
                        <declaration name="jfif" type="JFIFMarkerSegment" line="591"/>
                        <scope line="592"/>
                    </scope>
                    <scope line="598"/>
                </scope>
                <scope line="603">
                    <declaration name="seg" type="MarkerSegment" line="604"/>
                </scope>
            </method>
            <method name="getStandardChromaNode" type="IIOMetadataNode" line="609">
                <declaration name="sof" type="SOFMarkerSegment" line="611"/>
                <scope line="612"/>
                <declaration name="chroma" type="IIOMetadataNode" line="615"/>
                <declaration name="csType" type="IIOMetadataNode" line="616"/>
                <declaration name="numChannels" type="int" line="618"/>
                <declaration name="numChanNode" type="IIOMetadataNode" line="619"/>
                <scope line="622">
                    <scope line="623"/>
                    <scope line="626"/>
                </scope>
                <declaration name="adobe" type="AdobeMarkerSegment" line="631"/>
                <scope line="632">
                    <scope line="641"/>
                    <scope line="644"/>
                </scope>
                <scope line="651">
                    <scope line="653"/>
                </scope>
                <declaration name="idsAreJFIF" type="boolean" line="658"/>
                <scope line="659">
                    <declaration name="id" type="int" line="660"/>
                    <scope line="661"/>
                </scope>
                <scope line="665">
                    <scope line="667"/>
                </scope>
                <scope line="672">
                    <scope line="674"/>
                </scope>
                <scope line="679">
                    <scope line="681"/>
                </scope>
                <declaration name="subsampled" type="boolean" line="686"/>
                <declaration name="hfactor" type="int" line="687"/>
                <declaration name="vfactor" type="int" line="688"/>
                <scope line="689">
                    <scope line="690"/>
                </scope>
                <scope line="695">
                    <scope line="697"/>
                </scope>
                <scope line="702"/>
                <scope line="705"/>
            </method>
            <method name="getStandardCompressionNode" type="IIOMetadataNode" line="710">
                <declaration name="compression" type="IIOMetadataNode" line="711"/>
                <declaration name="name" type="IIOMetadataNode" line="712"/>
                <declaration name="lossless" type="IIOMetadataNode" line="715"/>
                <declaration name="sosCount" type="int" line="718"/>
                <declaration name="iter" type="Iterator" line="719"/>
                <scope line="720">
                    <declaration name="ms" type="MarkerSegment" line="721"/>
                    <scope line="722"/>
                </scope>
                <scope line="726">
                    <declaration name="prog" type="IIOMetadataNode" line="727"/>
                </scope>
            </method>
            <method name="getStandardDimensionNode" type="IIOMetadataNode" line="733">
                <declaration name="dim" type="IIOMetadataNode" line="734"/>
                <declaration name="orient" type="IIOMetadataNode" line="735"/>
                <declaration name="jfif" type="JFIFMarkerSegment" line="738"/>
                <scope line="739">
                    <declaration name="aspectRatio" type="float" line="740"/>
                    <scope line="741"/>
                    <scope line="744"/>
                    <declaration name="aspect" type="IIOMetadataNode" line="747"/>
                    <scope line="750">
                        <declaration name="scale" type="float" line="751"/>
                        <declaration name="horiz" type="IIOMetadataNode" line="752"/>
                        <declaration name="vert" type="IIOMetadataNode" line="755"/>
                    </scope>
                </scope>
            </method>
            <method name="getStandardTextNode" type="IIOMetadataNode" line="762">
                <declaration name="text" type="IIOMetadataNode" line="763"/>
                <scope line="764">
                    <declaration name="iter" type="Iterator" line="766"/>
                    <scope line="767">
                        <declaration name="seg" type="MarkerSegment" line="768"/>
                        <scope line="769">
                            <declaration name="com" type="COMMarkerSegment" line="770"/>
                            <declaration name="entry" type="IIOMetadataNode" line="771"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getStandardTransparencyNode" type="IIOMetadataNode" line="780">
                <declaration name="trans" type="IIOMetadataNode" line="781"/>
                <scope line="782">
                    <declaration name="alpha" type="IIOMetadataNode" line="784"/>
                </scope>
            </method>
            <method name="isReadOnly" type="boolean" line="790"/>
            <method name="mergeTree" type="void" line="793">
                <params>
                    <param name="formatName" type="String"/>
                    <param name="root" type="Node"/>
                </params>
                <scope line="794"/>
                <scope line="797"/>
                <declaration name="copy" type="List" line="800"/>
                <scope line="801"/>
                <scope line="805"/>
                <scope line="808"/>
                <scope line="811"/>
                <scope line="814"/>
                <scope line="817"/>
                <scope line="820"/>
            </method>
            <method name="mergeNativeTree" type="void" line="825">
                <params>
                    <param name="root" type="Node"/>
                </params>
                <declaration name="name" type="String" line="826"/>
                <scope line="827"/>
                <scope line="830"/>
            </method>
            <javadoc line="836">
                Merge a JFIF subtree into the marker sequence, if the subtree
                  is non-empty.
                  If a JFIF marker exists, update it from the subtree.
                  If none exists, create one from the subtree and insert it at the
                  beginning of the marker sequence.                
            </javadoc>
            <method name="mergeJFIFsubtree" type="void" line="843">
                <params>
                    <param name="JPEGvariety" type="Node"/>
                </params>
                <scope line="844">
                    <declaration name="jfifNode" type="Node" line="845"/>
                    <declaration name="jfifSeg" type="JFIFMarkerSegment" line="846"/>
                    <scope line="847"/>
                    <scope line="850"/>
                </scope>
            </method>
            <method name="mergeSequenceSubtree" type="void" line="855">
                <params>
                    <param name="sequenceTree" type="Node"/>
                </params>
                <declaration name="children" type="NodeList" line="856"/>
                <scope line="857">
                    <declaration name="node" type="Node" line="858"/>
                    <declaration name="name" type="String" line="859"/>
                    <scope line="860"/>
                    <scope line="863"/>
                    <scope line="866"/>
                    <scope line="869"/>
                    <scope line="872"/>
                    <scope line="875"/>
                    <scope line="878"/>
                    <scope line="881"/>
                    <scope line="884"/>
                </scope>
            </method>
            <javadoc line="889">
                Merge the given DQT node into the marker sequence.  If there already
                  exist DQT marker segments in the sequence, then each table in the
                  node replaces the first table, in any DQT segment, with the same
                  table id.  If none of the existing DQT segments contain a table with
                  the same id, then the table is added to the last existing DQT segment.
                  If there are no DQT segments, then a new one is created and added
                  as follows:
                  If there are DHT segments, the new DQT segment is inserted before the
                  first one.
                  If there are no DHT segments, the new DQT segment is inserted before
                  an SOF segment, if there is one.
                  If there is no SOF segment, the new DQT segment is inserted before
                  the first SOS segment, if there is one.
                  If there is no SOS segment, the new DQT segment is added to the end
                  of the sequence.                
            </javadoc>
            <method name="mergeDQTNode" type="void" line="906">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="oldDQTs" type="ArrayList" line="907"/>
                <declaration name="iter" type="Iterator" line="908"/>
                <scope line="909">
                    <declaration name="seg" type="MarkerSegment" line="910"/>
                    <scope line="911"/>
                </scope>
                <scope line="915">
                    <declaration name="children" type="NodeList" line="916"/>
                    <scope line="917">
                        <declaration name="child" type="Node" line="918"/>
                        <declaration name="childID" type="int" line="919"/>
                        <declaration name="dqt" type="DQTMarkerSegment" line="920"/>
                        <declaration name="tableIndex" type="int" line="921"/>
                        <scope line="922">
                            <declaration name="testDQT" type="DQTMarkerSegment" line="923"/>
                            <scope line="924">
                                <declaration name="testTable" type="DQTMarkerSegment.Qtable" line="925"/>
                                <scope line="926"/>
                            </scope>
                        </scope>
                        <scope line="934"/>
                        <scope line="937"/>
                    </scope>
                </scope>
                <scope line="943">
                    <declaration name="newGuy" type="DQTMarkerSegment" line="944"/>
                    <declaration name="firstDHT" type="int" line="945"/>
                    <declaration name="firstSOF" type="int" line="946"/>
                    <declaration name="firstSOS" type="int" line="947"/>
                    <scope line="948"/>
                    <scope line="951"/>
                    <scope line="954"/>
                    <scope line="957"/>
                </scope>
            </method>
            <javadoc line="962">
                Merge the given DHT node into the marker sequence.  If there already
                  exist DHT marker segments in the sequence, then each table in the
                  node replaces the first table, in any DHT segment, with the same
                  table class and table id.  If none of the existing DHT segments contain
                  a table with the same class and id, then the table is added to the last
                  existing DHT segment.
                  If there are no DHT segments, then a new one is created and added
                  as follows:
                  If there are DQT segments, the new DHT segment is inserted immediately
                  following the last DQT segment.
                  If there are no DQT segments, the new DHT segment is inserted before
                  an SOF segment, if there is one.
                  If there is no SOF segment, the new DHT segment is inserted before
                  the first SOS segment, if there is one.
                  If there is no SOS segment, the new DHT segment is added to the end
                  of the sequence.                
            </javadoc>
            <method name="mergeDHTNode" type="void" line="980">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="oldDHTs" type="ArrayList" line="981"/>
                <declaration name="iter" type="Iterator" line="982"/>
                <scope line="983">
                    <declaration name="seg" type="MarkerSegment" line="984"/>
                    <scope line="985"/>
                </scope>
                <scope line="989">
                    <declaration name="children" type="NodeList" line="990"/>
                    <scope line="991">
                        <declaration name="child" type="Node" line="992"/>
                        <declaration name="attrs" type="NamedNodeMap" line="993"/>
                        <declaration name="childID" type="int" line="994"/>
                        <declaration name="childClass" type="int" line="995"/>
                        <declaration name="dht" type="DHTMarkerSegment" line="996"/>
                        <declaration name="tableIndex" type="int" line="997"/>
                        <scope line="998">
                            <declaration name="testDHT" type="DHTMarkerSegment" line="999"/>
                            <scope line="1000">
                                <declaration name="testTable" type="DHTMarkerSegment.Htable" line="1001"/>
                                <scope line="1002"/>
                            </scope>
                        </scope>
                        <scope line="1010"/>
                        <scope line="1013"/>
                    </scope>
                </scope>
                <scope line="1019">
                    <declaration name="newGuy" type="DHTMarkerSegment" line="1020"/>
                    <declaration name="lastDQT" type="int" line="1021"/>
                    <declaration name="firstSOF" type="int" line="1022"/>
                    <declaration name="firstSOS" type="int" line="1023"/>
                    <scope line="1024"/>
                    <scope line="1027"/>
                    <scope line="1030"/>
                    <scope line="1033"/>
                </scope>
            </method>
            <javadoc line="1038">
                Merge the given DRI node into the marker sequence.
                  If there already exists a DRI marker segment, the restart interval
                  value is updated.
                  If there is no DRI segment, then a new one is created and added as
                  follows:
                  If there is an SOF segment, the new DRI segment is inserted before
                  it.
                  If there is no SOF segment, the new DRI segment is inserted before
                  the first SOS segment, if there is one.
                  If there is no SOS segment, the new DRI segment is added to the end
                  of the sequence.                
            </javadoc>
            <method name="mergeDRINode" type="void" line="1051">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="dri" type="DRIMarkerSegment" line="1052"/>
                <scope line="1053"/>
                <scope line="1056">
                    <declaration name="newGuy" type="DRIMarkerSegment" line="1057"/>
                    <declaration name="firstSOF" type="int" line="1058"/>
                    <declaration name="firstSOS" type="int" line="1059"/>
                    <scope line="1060"/>
                    <scope line="1063"/>
                    <scope line="1066"/>
                </scope>
            </method>
            <javadoc line="1071">
                Merge the given COM node into the marker sequence.
                  A new COM marker segment is created and added to the sequence
                  using insertCOMMarkerSegment.                
            </javadoc>
            <method name="mergeCOMNode" type="void" line="1076">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="newGuy" type="COMMarkerSegment" line="1077"/>
            </method>
            <javadoc line="1080">
                Insert a new COM marker segment into an appropriate place in the
                  marker sequence, as follows:
                  If there already exist COM marker segments, the new one is inserted
                  after the last one.
                  If there are no COM segments, the new COM segment is inserted after the
                  JFIF segment, if there is one.
                  If there is no JFIF segment, the new COM segment is inserted after the
                  Adobe marker segment, if there is one.
                  If there is no Adobe segment, the new COM segment is inserted
                  at the beginning of the sequence.                
            </javadoc>
            <method name="insertCOMMarkerSegment" type="void" line="1092">
                <params>
                    <param name="newGuy" type="COMMarkerSegment"/>
                </params>
                <declaration name="lastCOM" type="int" line="1093"/>
                <declaration name="hasJFIF" type="boolean" line="1094"/>
                <declaration name="firstAdobe" type="int" line="1095"/>
                <scope line="1096"/>
                <scope line="1099"/>
                <scope line="1102"/>
                <scope line="1105"/>
            </method>
            <javadoc line="1109">
                Merge the given Adobe APP14 node into the marker sequence.
                  If there already exists an Adobe marker segment, then its attributes
                  are updated from the node.
                  If there is no Adobe segment, then a new one is created and added
                  using insertAdobeMarkerSegment.                
            </javadoc>
            <method name="mergeAdobeNode" type="void" line="1116">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="adobe" type="AdobeMarkerSegment" line="1117"/>
                <scope line="1118"/>
                <scope line="1121">
                    <declaration name="newGuy" type="AdobeMarkerSegment" line="1122"/>
                </scope>
            </method>
            <javadoc line="1126">
                Insert the given AdobeMarkerSegment into the marker sequence, as
                  follows (we assume there is no Adobe segment yet):
                  If there is a JFIF segment, then the new Adobe segment is inserted
                  after it.
                  If there is no JFIF segment, the new Adobe segment is inserted after the
                  last Unknown segment, if there are any.
                  If there are no Unknown segments, the new Adobe segment is inserted
                  at the beginning of the sequence.                
            </javadoc>
            <method name="insertAdobeMarkerSegment" type="void" line="1136">
                <params>
                    <param name="newGuy" type="AdobeMarkerSegment"/>
                </params>
                <declaration name="hasJFIF" type="boolean" line="1137"/>
                <declaration name="lastUnknown" type="int" line="1138"/>
                <scope line="1139"/>
                <scope line="1142"/>
                <scope line="1145"/>
            </method>
            <javadoc line="1149">
                Merge the given Unknown node into the marker sequence.
                  A new Unknown marker segment is created and added to the sequence as
                  follows:
                  If there already exist Unknown marker segments, the new one is inserted
                  after the last one.
                  If there are no Unknown marker segments, the new Unknown marker segment
                  is inserted after the JFIF segment, if there is one.
                  If there is no JFIF segment, the new Unknown segment is inserted before
                  the Adobe marker segment, if there is one.
                  If there is no Adobe segment, the new Unknown segment is inserted
                  at the beginning of the sequence.                
            </javadoc>
            <method name="mergeUnknownNode" type="void" line="1162">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="newGuy" type="MarkerSegment" line="1163"/>
                <declaration name="lastUnknown" type="int" line="1164"/>
                <declaration name="hasJFIF" type="boolean" line="1165"/>
                <declaration name="firstAdobe" type="int" line="1166"/>
                <scope line="1167"/>
                <scope line="1170"/>
                <scope line="1173"/>
                <scope line="1176"/>
            </method>
            <javadoc line="1180">
                Merge the given SOF node into the marker sequence.
                  If there already exists an SOF marker segment in the sequence, then
                  its values are updated from the node.
                  If there is no SOF segment, then a new one is created and added as
                  follows:
                  If there are any SOS segments, the new SOF segment is inserted before
                  the first one.
                  If there is no SOS segment, the new SOF segment is added to the end
                  of the sequence.                
            </javadoc>
            <method name="mergeSOFNode" type="void" line="1191">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="sof" type="SOFMarkerSegment" line="1192"/>
                <scope line="1193"/>
                <scope line="1196">
                    <declaration name="newGuy" type="SOFMarkerSegment" line="1197"/>
                    <declaration name="firstSOS" type="int" line="1198"/>
                    <scope line="1199"/>
                    <scope line="1202"/>
                </scope>
            </method>
            <javadoc line="1207">
                Merge the given SOS node into the marker sequence.
                  If there already exists a single SOS marker segment, then the values
                  are updated from the node.
                  If there are more than one existing SOS marker segments, then an
                  IIOInvalidTreeException is thrown, as SOS segments cannot be merged
                  into a set of progressive scans.
                  If there are no SOS marker segments, a new one is created and added
                  to the end of the sequence.                
            </javadoc>
            <method name="mergeSOSNode" type="void" line="1217">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="firstSOS" type="SOSMarkerSegment" line="1218"/>
                <declaration name="lastSOS" type="SOSMarkerSegment" line="1219"/>
                <scope line="1220">
                    <scope line="1221"/>
                </scope>
                <scope line="1226"/>
            </method>
            <declaration name="transparencyDone" type="boolean" line="1230"/>
            <method name="mergeStandardTree" type="void" line="1231">
                <params>
                    <param name="root" type="Node"/>
                </params>
                <declaration name="children" type="NodeList" line="1233"/>
                <scope line="1234">
                    <declaration name="node" type="Node" line="1235"/>
                    <declaration name="name" type="String" line="1236"/>
                    <scope line="1237"/>
                    <scope line="1240"/>
                    <scope line="1243"/>
                    <scope line="1246"/>
                    <scope line="1249"/>
                    <scope line="1252"/>
                    <scope line="1255"/>
                    <scope line="1258"/>
                </scope>
            </method>
            <method name="mergeStandardChromaNode" type="void" line="1263">
                <params>
                    <param name="node" type="Node"/>
                    <param name="siblings" type="NodeList"/>
                </params>
                <scope line="1264"/>
                <declaration name="csType" type="Node" line="1267"/>
                <scope line="1268"/>
                <declaration name="csName" type="String" line="1271"/>
                <declaration name="numChannels" type="int" line="1272"/>
                <declaration name="wantJFIF" type="boolean" line="1273"/>
                <declaration name="wantAdobe" type="boolean" line="1274"/>
                <declaration name="transform" type="int" line="1275"/>
                <declaration name="willSubsample" type="boolean" line="1276"/>
                <declaration name="ids" type="byte[]" line="1277"/>
                <scope line="1278"/>
                <scope line="1282"/>
                <scope line="1287"/>
                <scope line="1295"/>
                <scope line="1303"/>
                <scope line="1306"/>
                <scope line="1312"/>
                <scope line="1317"/>
                <scope line="1320"/>
                <declaration name="wantAlpha" type="boolean" line="1323"/>
                <scope line="1324">
                    <declaration name="trans" type="Node" line="1325"/>
                    <scope line="1326"/>
                </scope>
                <scope line="1331">
                    <scope line="1334"/>
                </scope>
                <declaration name="jfif" type="JFIFMarkerSegment" line="1339"/>
                <declaration name="adobe" type="AdobeMarkerSegment" line="1340"/>
                <declaration name="sof" type="SOFMarkerSegment" line="1341"/>
                <declaration name="sos" type="SOSMarkerSegment" line="1342"/>
                <scope line="1343">
                    <scope line="1344"/>
                </scope>
                <scope line="1348"/>
                <scope line="1351"/>
                <scope line="1354">
                    <scope line="1355"/>
                    <scope line="1359"/>
                </scope>
                <scope line="1363"/>
                <declaration name="updateQtables" type="boolean" line="1366"/>
                <declaration name="updateHtables" type="boolean" line="1367"/>
                <declaration name="progressive" type="boolean" line="1368"/>
                <declaration name="subsampledSelectors" type="int[]" line="1369"/>
                <declaration name="nonSubsampledSelectors" type="int[]" line="1370"/>
                <declaration name="newTableSelectors" type="int[]" line="1371"/>
                <declaration name="oldCompSpecs" type="SOFMarkerSegment.ComponentSpec[]" line="1372"/>
                <scope line="1373">
                    <scope line="1377">
                        <scope line="1378"/>
                    </scope>
                    <scope line="1382">
                        <declaration name="idsDiffer" type="boolean" line="1383"/>
                        <scope line="1384">
                            <scope line="1385"/>
                        </scope>
                        <scope line="1389">
                            <scope line="1390">
                                <declaration name="seg" type="MarkerSegment" line="1391"/>
                                <scope line="1392">
                                    <declaration name="target" type="SOSMarkerSegment" line="1393"/>
                                    <scope line="1394">
                                        <declaration name="oldSelector" type="int" line="1395"/>
                                        <scope line="1396">
                                            <scope line="1397"/>
                                        </scope>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1406">
                        <scope line="1407">
                            <scope line="1408">
                                <scope line="1409"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1417">
                    <scope line="1418"/>
                </scope>
                <scope line="1423">
                    <declaration name="tableSegments" type="List" line="1424"/>
                    <scope line="1425">
                        <declaration name="seg" type="MarkerSegment" line="1426"/>
                        <scope line="1427"/>
                    </scope>
                    <scope line="1431">
                        <declaration name="found" type="boolean" line="1432"/>
                        <scope line="1433">
                            <declaration name="testdqt" type="DQTMarkerSegment" line="1434"/>
                            <scope line="1435">
                                <declaration name="tab" type="DQTMarkerSegment.Qtable" line="1436"/>
                                <scope line="1437"/>
                            </scope>
                        </scope>
                        <scope line="1442">
                            <declaration name="table0" type="DQTMarkerSegment.Qtable" line="1443"/>
                            <scope line="1444">
                                <declaration name="testdqt" type="DQTMarkerSegment" line="1445"/>
                                <scope line="1446">
                                    <declaration name="tab" type="DQTMarkerSegment.Qtable" line="1447"/>
                                    <scope line="1448"/>
                                </scope>
                            </scope>
                            <declaration name="dqt" type="DQTMarkerSegment" line="1453"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1458">
                    <declaration name="tableSegments" type="List" line="1459"/>
                    <scope line="1460">
                        <declaration name="seg" type="MarkerSegment" line="1461"/>
                        <scope line="1462"/>
                    </scope>
                    <scope line="1466">
                        <declaration name="found" type="boolean" line="1467"/>
                        <scope line="1468">
                            <declaration name="testdht" type="DHTMarkerSegment" line="1469"/>
                            <scope line="1470">
                                <declaration name="tab" type="DHTMarkerSegment.Htable" line="1471"/>
                                <scope line="1472"/>
                            </scope>
                        </scope>
                        <scope line="1477">
                            <declaration name="lastDHT" type="DHTMarkerSegment" line="1478"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="wantAlpha" type="boolean" line="1485">
                <params>
                    <param name="transparency" type="Node"/>
                </params>
                <declaration name="returnValue" type="boolean" line="1486"/>
                <declaration name="alpha" type="Node" line="1487"/>
                <scope line="1488">
                    <scope line="1489">
                        <declaration name="value" type="String" line="1490"/>
                        <scope line="1491"/>
                    </scope>
                </scope>
            </method>
            <method name="mergeStandardCompressionNode" type="void" line="1499">
                <params>
                    <param name="node" type="Node"/>
                </params>
            </method>
            <method name="mergeStandardDataNode" type="void" line="1501">
                <params>
                    <param name="node" type="Node"/>
                </params>
            </method>
            <method name="mergeStandardDimensionNode" type="void" line="1503">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="jfif" type="JFIFMarkerSegment" line="1504"/>
                <scope line="1505">
                    <declaration name="canHaveJFIF" type="boolean" line="1506"/>
                    <declaration name="sof" type="SOFMarkerSegment" line="1507"/>
                    <scope line="1508">
                        <declaration name="numChannels" type="int" line="1509"/>
                        <scope line="1510">
                            <scope line="1512"/>
                            <declaration name="adobe" type="AdobeMarkerSegment" line="1515"/>
                            <scope line="1516">
                                <scope line="1517"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1523"/>
                </scope>
                <scope line="1528">
                    <declaration name="children" type="NodeList" line="1529"/>
                    <scope line="1530">
                        <declaration name="child" type="Node" line="1531"/>
                        <declaration name="attrs" type="NamedNodeMap" line="1532"/>
                        <declaration name="name" type="String" line="1533"/>
                        <scope line="1534">
                            <declaration name="valueString" type="String" line="1535"/>
                            <declaration name="value" type="float" line="1536"/>
                            <declaration name="p" type="Point" line="1537"/>
                        </scope>
                        <scope line="1542">
                            <declaration name="valueString" type="String" line="1543"/>
                            <declaration name="value" type="float" line="1544"/>
                            <declaration name="dpcm" type="int" line="1545"/>
                        </scope>
                        <scope line="1549">
                            <declaration name="valueString" type="String" line="1550"/>
                            <declaration name="value" type="float" line="1551"/>
                            <declaration name="dpcm" type="int" line="1552"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="findIntegerRatio" type="Point" line="1559">
                <params>
                    <param name="value" type="float"/>
                </params>
                <declaration name="epsilon" type="float" line="1560"/>
                <scope line="1562"/>
                <scope line="1565"/>
                <declaration name="inverted" type="boolean" line="1568"/>
                <scope line="1569"/>
                <declaration name="y" type="int" line="1573"/>
                <declaration name="x" type="int" line="1574"/>
                <declaration name="ratio" type="float" line="1575"/>
                <declaration name="delta" type="float" line="1576"/>
                <scope line="1577"/>
            </method>
            <method name="mergeStandardDocumentNode" type="void" line="1585">
                <params>
                    <param name="node" type="Node"/>
                </params>
            </method>
            <method name="mergeStandardTextNode" type="void" line="1587">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="children" type="NodeList" line="1588"/>
                <scope line="1589">
                    <declaration name="child" type="Node" line="1590"/>
                    <declaration name="attrs" type="NamedNodeMap" line="1591"/>
                    <declaration name="comp" type="Node" line="1592"/>
                    <declaration name="copyIt" type="boolean" line="1593"/>
                    <scope line="1594">
                        <declaration name="compString" type="String" line="1595"/>
                        <scope line="1596"/>
                    </scope>
                    <scope line="1600">
                        <declaration name="value" type="String" line="1601"/>
                        <declaration name="com" type="COMMarkerSegment" line="1602"/>
                    </scope>
                </scope>
            </method>
            <method name="mergeStandardTransparencyNode" type="void" line="1607">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <scope line="1608">
                    <declaration name="wantAlpha" type="boolean" line="1609"/>
                    <declaration name="jfif" type="JFIFMarkerSegment" line="1610"/>
                    <declaration name="adobe" type="AdobeMarkerSegment" line="1611"/>
                    <declaration name="sof" type="SOFMarkerSegment" line="1612"/>
                    <declaration name="sos" type="SOSMarkerSegment" line="1613"/>
                    <scope line="1614"/>
                    <scope line="1617">
                        <declaration name="numChannels" type="int" line="1618"/>
                        <declaration name="hadAlpha" type="boolean" line="1619"/>
                        <scope line="1620">
                            <scope line="1621">
                                <scope line="1623"/>
                                <scope line="1626"/>
                                <declaration name="newSpecs" type="SOFMarkerSegment.ComponentSpec[]" line="1629"/>
                                <scope line="1630"/>
                                <declaration name="oldFirstID" type="byte" line="1633"/>
                                <declaration name="newID" type="byte" line="1634"/>
                                <declaration name="newScanSpecs" type="SOSMarkerSegment.ScanComponentSpec[]" line="1637"/>
                                <scope line="1638"/>
                            </scope>
                            <scope line="1644">
                                <declaration name="newSpecs" type="SOFMarkerSegment.ComponentSpec[]" line="1646"/>
                                <scope line="1647"/>
                                <declaration name="newScanSpecs" type="SOSMarkerSegment.ScanComponentSpec[]" line="1651"/>
                                <scope line="1652"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="setFromTree" type="void" line="1661">
                <params>
                    <param name="formatName" type="String"/>
                    <param name="root" type="Node"/>
                </params>
                <scope line="1662"/>
                <scope line="1665"/>
                <scope line="1668"/>
                <scope line="1671"/>
                <scope line="1674"/>
                <scope line="1677"/>
            </method>
            <method name="setFromNativeTree" type="void" line="1681">
                <params>
                    <param name="root" type="Node"/>
                </params>
                <scope line="1682"/>
                <declaration name="name" type="String" line="1686"/>
                <scope line="1687"/>
                <scope line="1690">
                    <scope line="1691"/>
                    <declaration name="JPEGvariety" type="Node" line="1694"/>
                    <scope line="1695"/>
                </scope>
                <declaration name="markerSequenceNode" type="Node" line="1699"/>
            </method>
            <method name="setFromMarkerSequenceNode" type="void" line="1702">
                <params>
                    <param name="markerSequenceNode" type="Node"/>
                </params>
                <declaration name="children" type="NodeList" line="1703"/>
                <scope line="1704">
                    <declaration name="node" type="Node" line="1705"/>
                    <declaration name="childName" type="String" line="1706"/>
                    <scope line="1707"/>
                    <scope line="1710"/>
                    <scope line="1713"/>
                    <scope line="1716"/>
                    <scope line="1719"/>
                    <scope line="1722"/>
                    <scope line="1725"/>
                    <scope line="1728"/>
                    <scope line="1731"/>
                </scope>
            </method>
            <javadoc line="1736">
                Check that this metadata object is in a consistent state and
                  return &lt;code&gt;true&lt;/code&gt; if it is or &lt;code&gt;false&lt;/code&gt;
                  otherwise.  All the constructors and modifiers should call
                  this method at the end to guarantee that the data is always
                  consistent, as the writer relies on this.                
            </javadoc>
            <method name="isConsistent" type="boolean" line="1743">
                <declaration name="sof" type="SOFMarkerSegment" line="1744"/>
                <declaration name="jfif" type="JFIFMarkerSegment" line="1745"/>
                <declaration name="adobe" type="AdobeMarkerSegment" line="1746"/>
                <declaration name="retval" type="boolean" line="1747"/>
                <scope line="1748">
                    <scope line="1749">
                        <declaration name="numSOFBands" type="int" line="1750"/>
                        <declaration name="numScanBands" type="int" line="1751"/>
                        <scope line="1752">
                            <scope line="1753"/>
                        </scope>
                        <scope line="1757">
                            <scope line="1758"/>
                            <scope line="1761">
                                <scope line="1762"/>
                            </scope>
                            <scope line="1766"/>
                        </scope>
                    </scope>
                    <scope line="1771">
                        <declaration name="sos" type="SOSMarkerSegment" line="1772"/>
                        <scope line="1773"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1780">
                Returns the total number of bands referenced in all SOS marker
                  segments, including 0 if there are no SOS marker segments.                
            </javadoc>
            <method name="countScanBands" type="int" line="1784">
                <declaration name="ids" type="List" line="1785"/>
                <declaration name="iter" type="Iterator" line="1786"/>
                <scope line="1787">
                    <declaration name="seg" type="MarkerSegment" line="1788"/>
                    <scope line="1789">
                        <declaration name="sos" type="SOSMarkerSegment" line="1790"/>
                        <declaration name="specs" type="SOSMarkerSegment.ScanComponentSpec[]" line="1791"/>
                        <scope line="1792">
                            <declaration name="id" type="Integer" line="1793"/>
                            <scope line="1794"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="writeToStream" type="void" line="1802">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                    <param name="ignoreJFIF" type="boolean"/>
                    <param name="forceJFIF" type="boolean"/>
                    <param name="thumbnails" type="List"/>
                    <param name="iccProfile" type="ICC_Profile"/>
                    <param name="ignoreAdobe" type="boolean"/>
                    <param name="newAdobeTransform" type="int"/>
                    <param name="writer" type="JPEGImageWriter"/>
                </params>
                <scope line="1803">
                    <scope line="1805">
                        <scope line="1806"/>
                    </scope>
                </scope>
                <declaration name="iter" type="Iterator" line="1812"/>
                <scope line="1813">
                    <declaration name="seg" type="MarkerSegment" line="1814"/>
                    <scope line="1815">
                        <scope line="1816">
                            <declaration name="jfif" type="JFIFMarkerSegment" line="1817"/>
                            <scope line="1819"/>
                        </scope>
                    </scope>
                    <scope line="1824">
                        <scope line="1825">
                            <scope line="1826">
                                <declaration name="newAdobe" type="AdobeMarkerSegment" line="1827"/>
                            </scope>
                            <scope line="1831">
                                <declaration name="adobe" type="AdobeMarkerSegment" line="1832"/>
                                <scope line="1833"/>
                                <scope line="1836"/>
                            </scope>
                            <scope line="1840"/>
                        </scope>
                    </scope>
                    <scope line="1845"/>
                </scope>
            </method>
            <method name="reset" type="void" line="1850">
                <scope line="1851"/>
            </method>
            <method name="print" type="void" line="1856">
                <scope line="1857">
                    <declaration name="seg" type="MarkerSegment" line="1858"/>
                </scope>
            </method>
        </class>
    </source>