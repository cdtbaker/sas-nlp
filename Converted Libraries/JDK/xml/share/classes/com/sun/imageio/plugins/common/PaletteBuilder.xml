<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.common">
        <import package="java.awt.Transparency"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.Color"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <class name="PaletteBuilder" line="11">
            <javadoc line="11">
                This class implements the octree quantization method
                  as it is described in the &quot;Graphics Gems&quot;
                  (ISBN 0-12-286166-3, Chapter 4, pages 297-293)                
            </javadoc>
            <declaration name="MAXLEVEL" type="int" line="17"/>
            <javadoc line="17">
                maximum of tree depth                
            </javadoc>
            <declaration name="src" type="RenderedImage" line="21"/>
            <declaration name="srcColorModel" type="ColorModel" line="22"/>
            <declaration name="srcRaster" type="Raster" line="23"/>
            <declaration name="requiredSize" type="int" line="24"/>
            <declaration name="root" type="ColorNode" line="25"/>
            <declaration name="numNodes" type="int" line="26"/>
            <declaration name="maxNodes" type="int" line="27"/>
            <declaration name="currLevel" type="int" line="28"/>
            <declaration name="currSize" type="int" line="29"/>
            <declaration name="reduceList" type="ColorNode[]" line="30"/>
            <declaration name="palette" type="ColorNode[]" line="31"/>
            <declaration name="transparency" type="int" line="32"/>
            <declaration name="transColor" type="ColorNode" line="33"/>
            <javadoc line="34">
                Creates an image representing given image
                  &lt;code&gt;src&lt;/code&gt; using &lt;code&gt;IndexColorModel&lt;/code&gt;.
                  Lossless conversion is not always possible (e.g. if number
                  of colors in the  given image exceeds maximum palette size).
                  Result image then is an approximation constructed by octree
                  quantization method.                
                <exception>
                    IllegalArgumentException if &lt;code&gt;src&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    UnsupportedOperationException if implemented method
                      is unable to create approximation of &lt;code&gt;src&lt;/code&gt;
                      and &lt;code&gt;canCreatePalette&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <see>
                    createIndexColorModel                    
                </see>
                <see>
                    canCreatePalette                    
                </see>
            </javadoc>
            <method name="createIndexedImage" type="RenderedImage" line="49">
                <params>
                    <param name="src" type="RenderedImage"/>
                </params>
                <declaration name="pb" type="PaletteBuilder" line="50"/>
            </method>
            <javadoc line="54">
                Creates an palette representing colors from given image
                  &lt;code&gt;img&lt;/code&gt;. If number of colors in the given image exceeds
                  maximum palette size closest colors would be merged.                
                <exception>
                    IllegalArgumentException if &lt;code&gt;img&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
                <exception>
                    UnsupportedOperationException if implemented method
                      is unable to create approximation of &lt;code&gt;img&lt;/code&gt;
                      and &lt;code&gt;canCreatePalette&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.                    
                </exception>
                <see>
                    createIndexedImage                    
                </see>
                <see>
                    canCreatePalette                    
                </see>
            </javadoc>
            <method name="createIndexColorModel" type="IndexColorModel" line="66">
                <params>
                    <param name="img" type="RenderedImage"/>
                </params>
                <declaration name="pb" type="PaletteBuilder" line="67"/>
            </method>
            <javadoc line="71">
                Returns &lt;code&gt;true&lt;/code&gt; if PaletteBuilder is able to create
                  palette for given image type.                
                <param>
                    type an instance of &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; to be
                      indexed.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;PaletteBuilder&lt;/code&gt;
                      is likely to be able to create palette for this image type.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;type&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="canCreatePalette" type="boolean" line="81">
                <params>
                    <param name="type" type="ImageTypeSpecifier"/>
                </params>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                Returns &lt;code&gt;true&lt;/code&gt; if PaletteBuilder is able to create
                  palette for given rendered image.                
                <param>
                    image an instance of &lt;code&gt;RenderedImage&lt;/code&gt; to be
                      indexed.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;PaletteBuilder&lt;/code&gt;
                      is likely to be able to create palette for this image type.                    
                </return>
                <exception>
                    IllegalArgumentException if &lt;code&gt;image&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="canCreatePalette" type="boolean" line="97">
                <params>
                    <param name="image" type="RenderedImage"/>
                </params>
                <scope line="98"/>
                <declaration name="type" type="ImageTypeSpecifier" line="101"/>
            </method>
            <method name="getIndexedImage" type="RenderedImage" line="104">
                <declaration name="icm" type="IndexColorModel" line="105"/>
                <declaration name="dst" type="BufferedImage" line="106"/>
                <declaration name="wr" type="WritableRaster" line="107"/>
                <scope line="108">
                    <scope line="109">
                        <declaration name="aColor" type="Color" line="110"/>
                    </scope>
                </scope>
            </method>
            <method name="PaletteBuilder" type="constructor" line="116">
                <params>
                    <param name="src" type="RenderedImage"/>
                </params>
            </method>
            <method name="PaletteBuilder" type="constructor" line="119">
                <params>
                    <param name="src" type="RenderedImage"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="getSrcColor" type="Color" line="126">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="argb" type="int" line="127"/>
            </method>
            <method name="findColorIndex" type="int" line="130">
                <params>
                    <param name="aNode" type="ColorNode"/>
                    <param name="aColor" type="Color"/>
                </params>
                <scope line="131"/>
                <scope line="134"/>
                <scope line="137">
                    <declaration name="childIndex" type="int" line="138"/>
                </scope>
            </method>
            <method name="buildPalette" type="void" line="142">
                <scope line="144"/>
                <declaration name="w" type="int" line="152"/>
                <declaration name="h" type="int" line="153"/>
                <scope line="154">
                    <scope line="155">
                        <declaration name="aColor" type="Color" line="156"/>
                        <scope line="157">
                            <scope line="158"/>
                        </scope>
                        <scope line="165"/>
                        <scope line="168"/>
                    </scope>
                </scope>
            </method>
            <method name="insertNode" type="ColorNode" line="174">
                <params>
                    <param name="aNode" type="ColorNode"/>
                    <param name="aColor" type="Color"/>
                    <param name="aLevel" type="int"/>
                </params>
                <scope line="175">
                    <scope line="178"/>
                    <scope line="183"/>
                </scope>
                <scope line="191">
                    <declaration name="branchIndex" type="int" line="192"/>
                    <scope line="193">
                        <scope line="195"/>
                    </scope>
                </scope>
            </method>
            <method name="getIndexColorModel" type="IndexColorModel" line="204">
                <declaration name="size" type="int" line="205"/>
                <scope line="206"/>
                <declaration name="red" type="byte[]" line="209"/>
                <declaration name="green" type="byte[]" line="210"/>
                <declaration name="blue" type="byte[]" line="211"/>
                <declaration name="index" type="int" line="212"/>
                <scope line="214"/>
                <scope line="217"/>
                <declaration name="icm" type="IndexColorModel" line="220"/>
                <scope line="221"/>
                <scope line="224"/>
            </method>
            <method name="findPaletteEntry" type="int" line="229">
                <params>
                    <param name="aNode" type="ColorNode"/>
                    <param name="index" type="int"/>
                    <param name="red" type="byte[]"/>
                    <param name="green" type="byte[]"/>
                    <param name="blue" type="byte[]"/>
                </params>
                <scope line="230"/>
                <scope line="238">
                    <scope line="239">
                        <scope line="240"/>
                    </scope>
                </scope>
            </method>
            <method name="getBranchIndex" type="int" line="247">
                <params>
                    <param name="aColor" type="Color"/>
                    <param name="aLevel" type="int"/>
                </params>
                <scope line="248"/>
                <declaration name="shift" type="int" line="251"/>
                <declaration name="red_index" type="int" line="252"/>
                <declaration name="green_index" type="int" line="253"/>
                <declaration name="blue_index" type="int" line="254"/>
                <declaration name="index" type="int" line="255"/>
            </method>
            <method name="reduceTree" type="void" line="258">
                <declaration name="level" type="int" line="259"/>
                <scope line="260"/>
                <declaration name="thisNode" type="ColorNode" line="263"/>
                <scope line="264"/>
                <declaration name="pList" type="ColorNode" line="267"/>
                <declaration name="minColorCount" type="int" line="268"/>
                <declaration name="cnt" type="int" line="269"/>
                <scope line="270">
                    <scope line="271"/>
                </scope>
                <scope line="278"/>
                <scope line="281"/>
                <scope line="286"/>
                <declaration name="leafChildCount" type="int" line="289"/>
                <declaration name="aDepth" type="int" line="292"/>
                <scope line="293"/>
            </method>
            <method name="freeTree" type="ColorNode" line="298">
                <params>
                    <param name="aNode" type="ColorNode"/>
                </params>
                <scope line="299"/>
                <scope line="302"/>
            </method>
            <class name="ColorNode" line="308">
                <javadoc line="308">
                    The node of color tree.                    
                </javadoc>
                <declaration name="isLeaf" type="boolean" line="312"/>
                <declaration name="childCount" type="int" line="313"/>
                <declaration name="children" type="ColorNode[]" line="314"/>
                <declaration name="colorCount" type="int" line="315"/>
                <declaration name="red" type="long" line="316"/>
                <declaration name="blue" type="long" line="317"/>
                <declaration name="green" type="long" line="318"/>
                <declaration name="paletteIndex" type="int" line="319"/>
                <declaration name="level" type="int" line="320"/>
                <declaration name="nextReducible" type="ColorNode" line="321"/>
                <method name="ColorNode" type="constructor" line="322">
                    <scope line="327"/>
                </method>
                <method name="getLeafChildCount" type="int" line="334">
                    <scope line="335"/>
                    <declaration name="cnt" type="int" line="338"/>
                    <scope line="339">
                        <scope line="340">
                            <scope line="341"/>
                            <scope line="344"/>
                        </scope>
                    </scope>
                </method>
                <method name="getRGB" type="int" line="351">
                    <declaration name="r" type="int" line="352"/>
                    <declaration name="g" type="int" line="353"/>
                    <declaration name="b" type="int" line="354"/>
                    <declaration name="c" type="int" line="355"/>
                </method>
            </class>
        </class>
    </source>