<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.common">
        <import package="java.awt.Transparency"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.Color"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <class name="PaletteBuilder" line="39">
            <javadoc line="39">
                This class implements the octree quantization method
                  as it is described in the &quot;Graphics Gems&quot;
                  (ISBN 0-12-286166-3, Chapter 4, pages 297-293)                
            </javadoc>
            <declaration name="MAXLEVEL" type="int" line="46"/>
            <javadoc line="46">
                maximum of tree depth                
            </javadoc>
            <declaration name="src" type="RenderedImage" line="51"/>
            <declaration name="srcColorModel" type="ColorModel" line="52"/>
            <declaration name="srcRaster" type="Raster" line="53"/>
            <declaration name="requiredSize" type="int" line="55"/>
            <declaration name="root" type="ColorNode" line="57"/>
            <declaration name="numNodes" type="int" line="59"/>
            <declaration name="maxNodes" type="int" line="60"/>
            <declaration name="currLevel" type="int" line="61"/>
            <declaration name="currSize" type="int" line="62"/>
            <declaration name="reduceList" type="ColorNode[]" line="64"/>
            <declaration name="palette" type="ColorNode[]" line="65"/>
            <declaration name="transparency" type="int" line="67"/>
            <declaration name="transColor" type="ColorNode" line="68"/>
            <javadoc line="71">
                Creates an image representing given image
                  &lt;code&gt;src&lt;/code&gt; using &lt;code&gt;IndexColorModel&lt;/code&gt;.
                  Lossless conversion is not always possible (e.g. if number
                  of colors in the  given image exceeds maximum palette size).
                  Result image then is an approximation constructed by octree
                  quantization method.                
                <exception>
                    IllegalArgumentException if <code>src</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    UnsupportedOperationException if implemented method
                      is unable to create approximation of <code>src</code>
                      and <code>canCreatePalette</code> returns <code>false</code>.                    
                </exception>
                <see>
                    createIndexColorModel                    
                </see>
                <see>
                    canCreatePalette                    
                </see>
            </javadoc>
            <method name="createIndexedImage" type="RenderedImage" line="92">
                <params>
                    <param name="src" type="RenderedImage"/>
                </params>
                <declaration name="pb" type="PaletteBuilder" line="93"/>
            </method>
            <javadoc line="98">
                Creates an palette representing colors from given image
                  &lt;code&gt;img&lt;/code&gt;. If number of colors in the given image exceeds
                  maximum palette size closest colors would be merged.                
                <exception>
                    IllegalArgumentException if <code>img</code> is
                      <code>null</code>.                    
                </exception>
                <exception>
                    UnsupportedOperationException if implemented method
                      is unable to create approximation of <code>img</code>
                      and <code>canCreatePalette</code> returns <code>false</code>.                    
                </exception>
                <see>
                    createIndexedImage                    
                </see>
                <see>
                    canCreatePalette                    
                </see>
            </javadoc>
            <method name="createIndexColorModel" type="IndexColorModel" line="115">
                <params>
                    <param name="img" type="RenderedImage"/>
                </params>
                <declaration name="pb" type="PaletteBuilder" line="116"/>
            </method>
            <javadoc line="121">
                Returns &lt;code&gt;true&lt;/code&gt; if PaletteBuilder is able to create
                  palette for given image type.                
                <param>
                    type an instance of <code>ImageTypeSpecifier</code> to be
                      indexed.                    
                </param>
                <return>
                    <code>true</code> if the <code>PaletteBuilder</code>
                      is likely to be able to create palette for this image type.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>type</code>
                      is <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="canCreatePalette" type="boolean" line="134">
                <params>
                    <param name="type" type="ImageTypeSpecifier"/>
                </params>
                <scope line="135"/>
            </method>
            <javadoc line="141">
                Returns &lt;code&gt;true&lt;/code&gt; if PaletteBuilder is able to create
                  palette for given rendered image.                
                <param>
                    image an instance of <code>RenderedImage</code> to be
                      indexed.                    
                </param>
                <return>
                    <code>true</code> if the <code>PaletteBuilder</code>
                      is likely to be able to create palette for this image type.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>image</code>
                      is <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="canCreatePalette" type="boolean" line="154">
                <params>
                    <param name="image" type="RenderedImage"/>
                </params>
                <scope line="155"/>
                <declaration name="type" type="ImageTypeSpecifier" line="158"/>
            </method>
            <method name="getIndexedImage" type="RenderedImage" line="162">
                <declaration name="icm" type="IndexColorModel" line="163"/>
                <declaration name="dst" type="BufferedImage" line="165"/>
                <declaration name="wr" type="WritableRaster" line="169"/>
                <scope line="170">
                    <scope line="171">
                        <declaration name="aColor" type="Color" line="172"/>
                    </scope>
                </scope>
            </method>
            <method name="PaletteBuilder" type="constructor" line="181">
                <params>
                    <param name="src" type="RenderedImage"/>
                </params>
            </method>
            <method name="PaletteBuilder" type="constructor" line="185">
                <params>
                    <param name="src" type="RenderedImage"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="getSrcColor" type="Color" line="196">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="argb" type="int" line="197"/>
            </method>
            <method name="findColorIndex" type="int" line="201">
                <params>
                    <param name="aNode" type="ColorNode"/>
                    <param name="aColor" type="Color"/>
                </params>
                <comment line="206">
                    default transparnt pixel                    
                </comment>
                <scope line="204"/>
                <scope line="208"/>
                <scope line="210">
                    <declaration name="childIndex" type="int" line="211"/>
                </scope>
            </method>
            <method name="buildPalette" type="void" line="217">
                <comment line="230">
                    from the book                    
                </comment>
                <comment line="241">
                    If transparency of given image is not opaque we assume all
                     colors with alpha less than 1.0 as fully transparent.                    
                </comment>
                <comment line="249">
                    one slot for transparent color                    
                </comment>
                <scope line="219"/>
                <declaration name="w" type="int" line="234"/>
                <declaration name="h" type="int" line="235"/>
                <scope line="236">
                    <scope line="237">
                        <declaration name="aColor" type="Color" line="239"/>
                        <scope line="246">
                            <scope line="247"/>
                        </scope>
                        <scope line="254"/>
                        <scope line="257"/>
                    </scope>
                </scope>
            </method>
            <method name="insertNode" type="ColorNode" line="264">
                <params>
                    <param name="aNode" type="ColorNode"/>
                    <param name="aColor" type="Color"/>
                    <param name="aLevel" type="int"/>
                </params>
                <scope line="266">
                    <scope line="269"/>
                    <scope line="274"/>
                </scope>
                <scope line="283">
                    <declaration name="branchIndex" type="int" line="284"/>
                    <scope line="285">
                        <scope line="287"/>
                    </scope>
                </scope>
            </method>
            <method name="getIndexColorModel" type="IndexColorModel" line="298">
                <comment line="302">
                    we need place for transparent color;                    
                </comment>
                <declaration name="size" type="int" line="299"/>
                <scope line="300"/>
                <declaration name="red" type="byte[]" line="304"/>
                <declaration name="green" type="byte[]" line="305"/>
                <declaration name="blue" type="byte[]" line="306"/>
                <declaration name="index" type="int" line="308"/>
                <scope line="310"/>
                <scope line="314"/>
                <declaration name="icm" type="IndexColorModel" line="318"/>
                <scope line="319"/>
                <scope line="321"/>
            </method>
            <method name="findPaletteEntry" type="int" line="329">
                <params>
                    <param name="aNode" type="ColorNode"/>
                    <param name="index" type="int"/>
                    <param name="red" type="byte[]"/>
                    <param name="green" type="byte[]"/>
                    <param name="blue" type="byte[]"/>
                </params>
                <scope line="330"/>
                <scope line="339">
                    <scope line="340">
                        <scope line="341"/>
                    </scope>
                </scope>
            </method>
            <method name="getBranchIndex" type="int" line="350">
                <params>
                    <param name="aColor" type="Color"/>
                    <param name="aLevel" type="int"/>
                </params>
                <scope line="351"/>
                <declaration name="shift" type="int" line="356"/>
                <declaration name="red_index" type="int" line="357"/>
                <declaration name="green_index" type="int" line="358"/>
                <declaration name="blue_index" type="int" line="359"/>
                <declaration name="index" type="int" line="360"/>
            </method>
            <method name="reduceTree" type="void" line="364">
                <comment line="373">
                    nothing to reduce                    
                </comment>
                <comment line="377">
                    look for element with lower color count                    
                </comment>
                <comment line="391">
                    save pointer to first reducible node
                     NB: current color count for node could be changed in future                    
                </comment>
                <comment line="396">
                    we need to process it                    
                </comment>
                <comment line="405">
                    reduce node                    
                </comment>
                <declaration name="level" type="int" line="365"/>
                <scope line="366"/>
                <declaration name="thisNode" type="ColorNode" line="370"/>
                <scope line="371"/>
                <declaration name="pList" type="ColorNode" line="377"/>
                <declaration name="minColorCount" type="int" line="378"/>
                <declaration name="cnt" type="int" line="380"/>
                <scope line="381">
                    <scope line="382"/>
                </scope>
                <scope line="392"/>
                <scope line="394"/>
                <scope line="400"/>
                <declaration name="leafChildCount" type="int" line="405"/>
                <declaration name="aDepth" type="int" line="408"/>
                <scope line="409"/>
            </method>
            <method name="freeTree" type="ColorNode" line="415">
                <params>
                    <param name="aNode" type="ColorNode"/>
                </params>
                <scope line="416"/>
                <scope line="419"/>
            </method>
            <class name="ColorNode" line="427">
                <javadoc line="427">
                    The node of color tree.                    
                </javadoc>
                <declaration name="isLeaf" type="boolean" line="431"/>
                <declaration name="childCount" type="int" line="432"/>
                <declaration name="children" type="ColorNode[]" line="433"/>
                <declaration name="colorCount" type="int" line="435"/>
                <declaration name="red" type="long" line="436"/>
                <declaration name="blue" type="long" line="437"/>
                <declaration name="green" type="long" line="438"/>
                <declaration name="paletteIndex" type="int" line="440"/>
                <declaration name="level" type="int" line="442"/>
                <declaration name="nextReducible" type="ColorNode" line="443"/>
                <method name="ColorNode" type="constructor" line="445">
                    <scope line="450"/>
                </method>
                <method name="getLeafChildCount" type="int" line="460">
                    <scope line="461"/>
                    <declaration name="cnt" type="int" line="464"/>
                    <scope line="465">
                        <scope line="466">
                            <scope line="467"/>
                            <scope line="469"/>
                        </scope>
                    </scope>
                </method>
                <method name="getRGB" type="int" line="477">
                    <declaration name="r" type="int" line="478"/>
                    <declaration name="g" type="int" line="479"/>
                    <declaration name="b" type="int" line="480"/>
                    <declaration name="c" type="int" line="482"/>
                </method>
            </class>
        </class>
    </source>