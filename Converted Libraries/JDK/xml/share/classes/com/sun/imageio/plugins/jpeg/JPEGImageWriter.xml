<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.jpeg">
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.ImageWriter"/>
        <import package="javax.imageio.ImageWriteParam"/>
        <import package="javax.imageio.IIOImage"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.metadata.IIOMetadataFormatImpl"/>
        <import package="javax.imageio.metadata.IIOInvalidTreeException"/>
        <import package="javax.imageio.spi.ImageWriterSpi"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="javax.imageio.plugins.jpeg.JPEGImageWriteParam"/>
        <import package="javax.imageio.plugins.jpeg.JPEGQTable"/>
        <import package="javax.imageio.plugins.jpeg.JPEGHuffmanTable"/>
        <import package="org.w3c.dom.Node"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferByte"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.ColorConvertOp"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.color.ICC_ColorSpace"/>
        <import package="java.awt.color.ICC_Profile"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Transparency"/>
        <import package="java.io.IOException"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.DisposerRecord"/>
        <class name="JPEGImageWriter" line="38">
            <extends class="ImageWriter"/>
            <declaration name="debug" type="boolean" line="39"/>
            <declaration name="structPointer" type="long" line="40"/>
            <javadoc line="40">
                The following variable contains a pointer to the IJG library
                  structure for this reader.  It is assigned in the constructor
                  and then is passed in to every native call.  It is set to 0
                  by dispose to avoid disposing twice.                
            </javadoc>
            <declaration name="ios" type="ImageOutputStream" line="47"/>
            <javadoc line="47">
                The output stream we write to                
            </javadoc>
            <declaration name="srcRas" type="Raster" line="51"/>
            <javadoc line="51">
                The Raster we will write from                
            </javadoc>
            <declaration name="raster" type="WritableRaster" line="55"/>
            <javadoc line="55">
                An intermediate Raster holding compressor-friendly data                
            </javadoc>
            <declaration name="indexed" type="boolean" line="59"/>
            <javadoc line="59">
                Set to true if we are writing an image with an
                  indexed ColorModel                
            </javadoc>
            <declaration name="indexCM" type="IndexColorModel" line="64"/>
            <declaration name="convertTosRGB" type="boolean" line="65"/>
            <declaration name="converted" type="WritableRaster" line="66"/>
            <declaration name="isAlphaPremultiplied" type="boolean" line="67"/>
            <declaration name="srcCM" type="ColorModel" line="68"/>
            <declaration name="thumbnails" type="List" line="69"/>
            <javadoc line="69">
                If there are thumbnails to be written, this is the list.                
            </javadoc>
            <declaration name="iccProfile" type="ICC_Profile" line="73"/>
            <javadoc line="73">
                If metadata should include an icc profile, store it here.                
            </javadoc>
            <declaration name="sourceXOffset" type="int" line="77"/>
            <declaration name="sourceYOffset" type="int" line="78"/>
            <declaration name="sourceWidth" type="int" line="79"/>
            <declaration name="srcBands" type="int[]" line="80"/>
            <declaration name="sourceHeight" type="int" line="81"/>
            <declaration name="currentImage" type="int" line="82"/>
            <javadoc line="82">
                Used when calling listeners                
            </javadoc>
            <declaration name="convertOp" type="ColorConvertOp" line="86"/>
            <declaration name="streamQTables" type="JPEGQTable[]" line="87"/>
            <declaration name="streamDCHuffmanTables" type="JPEGHuffmanTable[]" line="88"/>
            <declaration name="streamACHuffmanTables" type="JPEGHuffmanTable[]" line="89"/>
            <declaration name="ignoreJFIF" type="boolean" line="90"/>
            <declaration name="forceJFIF" type="boolean" line="91"/>
            <declaration name="ignoreAdobe" type="boolean" line="92"/>
            <declaration name="newAdobeTransform" type="int" line="93"/>
            <declaration name="writeDefaultJFIF" type="boolean" line="94"/>
            <declaration name="writeAdobe" type="boolean" line="95"/>
            <declaration name="metadata" type="JPEGMetadata" line="96"/>
            <declaration name="sequencePrepared" type="boolean" line="97"/>
            <declaration name="numScans" type="int" line="98"/>
            <declaration name="disposerReferent" type="Object" line="99"/>
            <javadoc line="99">
                The referent to be registered with the Disposer.                
            </javadoc>
            <declaration name="disposerRecord" type="DisposerRecord" line="103"/>
            <javadoc line="103">
                The DisposerRecord that handles the actual disposal of this writer.                
            </javadoc>
            <declaration name="WARNING_DEST_IGNORED" type="int" line="107"/>
            <declaration name="WARNING_STREAM_METADATA_IGNORED" type="int" line="108"/>
            <declaration name="WARNING_DEST_METADATA_COMP_MISMATCH" type="int" line="109"/>
            <declaration name="WARNING_DEST_METADATA_JFIF_MISMATCH" type="int" line="110"/>
            <declaration name="WARNING_DEST_METADATA_ADOBE_MISMATCH" type="int" line="111"/>
            <declaration name="WARNING_IMAGE_METADATA_JFIF_MISMATCH" type="int" line="112"/>
            <declaration name="WARNING_IMAGE_METADATA_ADOBE_MISMATCH" type="int" line="113"/>
            <declaration name="WARNING_METADATA_NOT_JPEG_FOR_RASTER" type="int" line="114"/>
            <declaration name="WARNING_NO_BANDS_ON_INDEXED" type="int" line="115"/>
            <declaration name="WARNING_ILLEGAL_THUMBNAIL" type="int" line="116"/>
            <declaration name="WARNING_IGNORING_THUMBS" type="int" line="117"/>
            <declaration name="WARNING_FORCING_JFIF" type="int" line="118"/>
            <declaration name="WARNING_THUMB_CLIPPED" type="int" line="119"/>
            <declaration name="WARNING_METADATA_ADJUSTED_FOR_THUMB" type="int" line="120"/>
            <declaration name="WARNING_NO_RGB_THUMB_AS_INDEXED" type="int" line="121"/>
            <declaration name="WARNING_NO_GRAY_THUMB_AS_INDEXED" type="int" line="122"/>
            <declaration name="MAX_WARNING" type="int" line="123"/>
            <scope line="124"/>
            <method name="JPEGImageWriter" type="constructor" line="128">
                <params>
                    <param name="originator" type="ImageWriterSpi"/>
                </params>
            </method>
            <method name="setOutput" type="void" line="134">
                <params>
                    <param name="output" type="Object"/>
                </params>
                <scope line="136"/>
                <scope line="142"/>
            </method>
            <method name="getDefaultWriteParam" type="ImageWriteParam" line="146"/>
            <method name="getDefaultStreamMetadata" type="IIOMetadata" line="149">
                <params>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="151"/>
                <scope line="154"/>
            </method>
            <method name="getDefaultImageMetadata" type="IIOMetadata" line="158">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="160"/>
                <scope line="163"/>
            </method>
            <method name="convertStreamMetadata" type="IIOMetadata" line="167">
                <params>
                    <param name="inData" type="IIOMetadata"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="168">
                    <declaration name="jpegData" type="JPEGMetadata" line="169"/>
                    <scope line="170"/>
                </scope>
            </method>
            <method name="convertImageMetadata" type="IIOMetadata" line="176">
                <params>
                    <param name="inData" type="IIOMetadata"/>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="178"/>
                <scope line="181"/>
            </method>
            <method name="convertImageMetadataOnThread" type="IIOMetadata" line="185">
                <params>
                    <param name="inData" type="IIOMetadata"/>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="186">
                    <declaration name="jpegData" type="JPEGMetadata" line="187"/>
                    <scope line="188"/>
                    <scope line="191"/>
                </scope>
                <scope line="195">
                    <declaration name="formatName" type="String" line="196"/>
                    <declaration name="tree" type="Node" line="197"/>
                    <scope line="198">
                        <declaration name="jpegData" type="JPEGMetadata" line="199"/>
                        <scope line="200"/>
                        <scope line="203"/>
                    </scope>
                </scope>
            </method>
            <method name="getNumThumbnailsSupported" type="int" line="211">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="imageMetadata" type="IIOMetadata"/>
                </params>
                <scope line="212"/>
            </method>
            <declaration name="preferredThumbSizes" type="Dimension[]" line="217"/>
            <method name="getPreferredThumbnailSizes" type="Dimension[]" line="218">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="imageMetadata" type="IIOMetadata"/>
                </params>
                <scope line="219"/>
            </method>
            <method name="jfifOK" type="boolean" line="224">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="imageMetadata" type="IIOMetadata"/>
                </params>
                <scope line="225"/>
                <scope line="228">
                    <declaration name="metadata" type="JPEGMetadata" line="229"/>
                    <scope line="230"/>
                    <scope line="233"/>
                    <scope line="236"/>
                </scope>
            </method>
            <method name="canWriteRasters" type="boolean" line="242"/>
            <method name="write" type="void" line="245">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="image" type="IIOImage"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="247"/>
                <scope line="250"/>
            </method>
            <method name="writeOnThread" type="void" line="254">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="image" type="IIOImage"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="255"/>
                <scope line="258"/>
                <scope line="261"/>
                <declaration name="rasterOnly" type="boolean" line="264"/>
                <declaration name="rimage" type="RenderedImage" line="265"/>
                <scope line="266"/>
                <scope line="269">
                    <scope line="271"/>
                    <scope line="274">
                        <scope line="276"/>
                    </scope>
                    <scope line="280"/>
                </scope>
                <declaration name="numSrcBands" type="int" line="284"/>
                <declaration name="cm" type="ColorModel" line="287"/>
                <declaration name="cs" type="ColorSpace" line="288"/>
                <scope line="291">
                    <scope line="293">
                        <scope line="295"/>
                        <scope line="300"/>
                    </scope>
                </scope>
                <declaration name="numBandsUsed" type="int" line="307"/>
                <scope line="308">
                    <declaration name="sBands" type="int[]" line="309"/>
                    <scope line="310">
                        <scope line="311"/>
                        <scope line="314">
                            <scope line="317"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="usingBandSubset" type="boolean" line="323"/>
                <declaration name="fullImage" type="boolean" line="324"/>
                <declaration name="bandSizes" type="int[]" line="325"/>
                <scope line="326">
                    <scope line="328">
                        <declaration name="temp" type="int[]" line="329"/>
                        <scope line="330"/>
                    </scope>
                </scope>
                <scope line="336">
                    <declaration name="tempSize" type="int[]" line="337"/>
                    <scope line="339"/>
                </scope>
                <scope line="343">
                    <scope line="344"/>
                    <scope line="347"/>
                </scope>
                <scope line="351">
                    <scope line="357"/>
                </scope>
                <declaration name="destType" type="ImageTypeSpecifier" line="362"/>
                <scope line="363">
                    <scope line="365"/>
                </scope>
                <declaration name="imageWidth" type="int" line="372"/>
                <declaration name="imageHeight" type="int" line="373"/>
                <declaration name="periodX" type="int" line="376"/>
                <declaration name="periodY" type="int" line="377"/>
                <declaration name="gridX" type="int" line="378"/>
                <declaration name="gridY" type="int" line="379"/>
                <declaration name="qTables" type="JPEGQTable[]" line="380"/>
                <declaration name="DCHuffmanTables" type="JPEGHuffmanTable[]" line="381"/>
                <declaration name="ACHuffmanTables" type="JPEGHuffmanTable[]" line="382"/>
                <declaration name="optimizeHuffman" type="boolean" line="383"/>
                <declaration name="jparam" type="JPEGImageWriteParam" line="384"/>
                <declaration name="progressiveMode" type="int" line="385"/>
                <scope line="386">
                    <declaration name="sourceRegion" type="Rectangle" line="387"/>
                    <scope line="388">
                        <declaration name="imageBounds" type="Rectangle" line="389"/>
                    </scope>
                    <scope line="396"/>
                    <scope line="399"/>
                    <declaration name="quality" type="float" line="410"/>
                    <scope line="423"/>
                </scope>
                <declaration name="mdata" type="IIOMetadata" line="428"/>
                <scope line="429">
                    <scope line="430">
                        <scope line="432"/>
                    </scope>
                    <scope line="436">
                        <scope line="437">
                            <declaration name="type" type="ImageTypeSpecifier" line="438"/>
                            <scope line="439"/>
                        </scope>
                        <scope line="444"/>
                    </scope>
                </scope>
                <declaration name="inCsType" type="int" line="454"/>
                <declaration name="outCsType" type="int" line="455"/>
                <declaration name="jfif" type="JFIFMarkerSegment" line="456"/>
                <declaration name="adobe" type="AdobeMarkerSegment" line="457"/>
                <declaration name="sof" type="SOFMarkerSegment" line="458"/>
                <scope line="459"/>
                <scope line="467">
                    <scope line="468"/>
                    <scope line="472">
                        <scope line="475">
                            <scope line="476"/>
                        </scope>
                    </scope>
                    <scope line="482">
                        <scope line="483">
                            <scope line="485"/>
                        </scope>
                        <scope line="489">
                            <declaration name="transform" type="int" line="490"/>
                            <scope line="491"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="501">
                    <scope line="502">
                        <scope line="503">
                            <scope line="505">
                                <scope line="507"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="515">
                        <scope line="517">
                            <declaration name="inputType" type="ImageTypeSpecifier" line="518"/>
                            <scope line="520">
                                <declaration name="alpha" type="boolean" line="521"/>
                                <scope line="524"/>
                                <scope line="527">
                                    <scope line="528"/>
                                </scope>
                                <scope line="533"/>
                                <scope line="539">
                                    <scope line="540">
                                        <scope line="542"/>
                                    </scope>
                                    <scope line="546"/>
                                    <scope line="561">
                                        <declaration name="outCS" type="int" line="562"/>
                                        <scope line="563"/>
                                        <scope line="566">
                                            <declaration name="subsampled" type="boolean" line="567"/>
                                            <scope line="568"/>
                                            <scope line="571"/>
                                        </scope>
                                    </scope>
                                </scope>
                                <scope line="577">
                                    <scope line="578"/>
                                    <scope line="582">
                                        <scope line="583"/>
                                    </scope>
                                    <scope line="589">
                                        <declaration name="outCS" type="int" line="590"/>
                                        <scope line="591"/>
                                        <scope line="594">
                                            <declaration name="subsampled" type="boolean" line="595"/>
                                        </scope>
                                    </scope>
                                </scope>
                                <scope line="602">
                                    <scope line="603">
                                        <scope line="604"/>
                                        <scope line="609">
                                            <scope line="610"/>
                                        </scope>
                                        <scope line="616"/>
                                    </scope>
                                    <scope line="620">
                                        <scope line="621"/>
                                        <scope line="625">
                                            <scope line="626"/>
                                        </scope>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="metadataProgressive" type="boolean" line="639"/>
                <declaration name="scans" type="int[]" line="640"/>
                <scope line="641">
                    <scope line="642"/>
                    <scope line="645">
                        <scope line="647"/>
                        <scope line="650"/>
                    </scope>
                    <scope line="654"/>
                </scope>
                <declaration name="numThumbs" type="int" line="659"/>
                <scope line="661">
                    <scope line="662">
                        <scope line="664"/>
                    </scope>
                    <scope line="668">
                        <scope line="669">
                            <scope line="670">
                                <scope line="672"/>
                            </scope>
                        </scope>
                        <scope line="677">
                            <scope line="678">
                                <scope line="679">
                                    <scope line="680"/>
                                </scope>
                                <scope line="685">
                                    <scope line="687"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="haveMetadata" type="boolean" line="695"/>
                <declaration name="writeDQT" type="boolean" line="696"/>
                <declaration name="writeDHT" type="boolean" line="697"/>
                <declaration name="dqt" type="DQTMarkerSegment" line="698"/>
                <declaration name="dht" type="DHTMarkerSegment" line="699"/>
                <declaration name="restartInterval" type="int" line="700"/>
                <scope line="701">
                    <declaration name="dri" type="DRIMarkerSegment" line="704"/>
                    <scope line="705"/>
                    <scope line="708"/>
                    <scope line="711"/>
                </scope>
                <scope line="715">
                    <scope line="716"/>
                    <scope line="719"/>
                    <scope line="722"/>
                    <scope line="725"/>
                </scope>
                <scope line="729">
                    <scope line="730"/>
                    <scope line="734"/>
                    <scope line="738"/>
                    <scope line="742"/>
                </scope>
                <declaration name="componentIds" type="int[]" line="747"/>
                <declaration name="HsamplingFactors" type="int[]" line="748"/>
                <declaration name="VsamplingFactors" type="int[]" line="749"/>
                <declaration name="QtableSelectors" type="int[]" line="750"/>
                <scope line="751"/>
                <scope line="757">
                    <scope line="758">
                        <scope line="759"/>
                    </scope>
                </scope>
                <declaration name="destWidth" type="int" line="771"/>
                <declaration name="destHeight" type="int" line="772"/>
                <declaration name="lineSize" type="int" line="773"/>
                <declaration name="buffer" type="DataBufferByte" line="774"/>
                <declaration name="bandOffs" type="int[]" line="775"/>
                <declaration name="aborted" type="boolean" line="778"/>
                <scope line="779"/>
                <scope line="784"/>
                <scope line="787"/>
            </method>
            <method name="prepareWriteSequence" type="void" line="793">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                </params>
                <scope line="795"/>
                <scope line="798"/>
            </method>
            <method name="prepareWriteSequenceOnThread" type="void" line="802">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                </params>
                <scope line="803"/>
                <scope line="806">
                    <scope line="807">
                        <declaration name="jmeta" type="JPEGMetadata" line="808"/>
                        <scope line="809"/>
                        <scope line="812"/>
                        <scope line="815"/>
                        <scope line="819"/>
                        <scope line="822"/>
                        <scope line="826"/>
                        <scope line="830"/>
                    </scope>
                    <scope line="835"/>
                </scope>
            </method>
            <method name="writeToSequence" type="void" line="841">
                <params>
                    <param name="image" type="IIOImage"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="843">
                    <scope line="844"/>
                </scope>
                <scope line="849"/>
            </method>
            <method name="endWriteSequence" type="void" line="853">
                <scope line="855">
                    <scope line="856"/>
                </scope>
                <scope line="861"/>
            </method>
            <method name="abort" type="void" line="865">
                <scope line="867"/>
                <scope line="871"/>
            </method>
            <method name="resetInternalState" type="void" line="875"/>
            <method name="reset" type="void" line="884">
                <scope line="886"/>
                <scope line="889"/>
            </method>
            <method name="dispose" type="void" line="893">
                <scope line="895">
                    <scope line="896"/>
                </scope>
                <scope line="901"/>
            </method>
            <javadoc line="905">
                Called by the native code or other classes to signal a warning.
                  The code is used to lookup a localized message to be used when
                  sending warnings to listeners.                
            </javadoc>
            <method name="warningOccurred" type="void" line="910">
                <params>
                    <param name="code" type="int"/>
                </params>
                <scope line="911"/>
            </method>
            <javadoc line="916">
                The library has it&apos;s own error facility that emits warning messages.
                  This routine is called by the native code when it has already
                  formatted a string for output.
                  XXX  For truly complete localization of all warning messages,
                  the sun_jpeg_output_message routine in the native code should
                  send only the codes and parameters to a method here in Java,
                  which will then format and send the warnings, using localized
                  strings.  This method will have to deal with all the parameters
                  and formats (%u with possibly large numbers, %02d, %02x, etc.)
                  that actually occur in the JPEG library.  For now, this prevents
                  library warnings from being printed to stderr.                
            </javadoc>
            <method name="warningWithMessage" type="void" line="929">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="thumbnailStarted" type="void" line="932">
                <params>
                    <param name="thumbnailIndex" type="int"/>
                </params>
            </method>
            <method name="thumbnailProgress" type="void" line="935">
                <params>
                    <param name="percentageDone" type="float"/>
                </params>
            </method>
            <method name="thumbnailComplete" type="void" line="938"/>
            <method name="checkSOFBands" type="void" line="941">
                <params>
                    <param name="sof" type="SOFMarkerSegment"/>
                    <param name="numBandsUsed" type="int"/>
                </params>
                <scope line="942">
                    <scope line="943"/>
                </scope>
            </method>
            <method name="checkJFIF" type="void" line="948">
                <params>
                    <param name="jfif" type="JFIFMarkerSegment"/>
                    <param name="type" type="ImageTypeSpecifier"/>
                    <param name="input" type="boolean"/>
                </params>
                <scope line="949">
                    <scope line="950"/>
                </scope>
            </method>
            <method name="checkAdobe" type="void" line="956">
                <params>
                    <param name="adobe" type="AdobeMarkerSegment"/>
                    <param name="type" type="ImageTypeSpecifier"/>
                    <param name="input" type="boolean"/>
                </params>
                <scope line="957">
                    <declaration name="rightTransform" type="int" line="958"/>
                    <scope line="959">
                        <scope line="961"/>
                        <scope line="964"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="970">
                Collect all the scan info from the given metadata, and
                  organize it into the scan info array required by the
                  IJG libray.  It is much simpler to parse out this
                  data in Java and then just copy the data in C.                
            </javadoc>
            <method name="collectScans" type="int[]" line="976">
                <params>
                    <param name="metadata" type="JPEGMetadata"/>
                    <param name="sof" type="SOFMarkerSegment"/>
                </params>
                <declaration name="segments" type="List" line="977"/>
                <declaration name="SCAN_SIZE" type="int" line="978"/>
                <declaration name="MAX_COMPS_PER_SCAN" type="int" line="979"/>
                <scope line="980">
                    <declaration name="seg" type="MarkerSegment" line="981"/>
                    <scope line="982"/>
                </scope>
                <declaration name="retval" type="int[]" line="986"/>
                <scope line="988">
                    <declaration name="index" type="int" line="991"/>
                    <scope line="992">
                        <declaration name="sos" type="SOSMarkerSegment" line="993"/>
                        <scope line="995">
                            <scope line="996">
                                <declaration name="compSel" type="int" line="997"/>
                                <scope line="998">
                                    <scope line="999"/>
                                </scope>
                            </scope>
                            <scope line="1005"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1017">
                Finds all DQT marker segments and returns all the q
                  tables as a single array of JPEGQTables.                
            </javadoc>
            <method name="collectQTablesFromMetadata" type="JPEGQTable[]" line="1021">
                <params>
                    <param name="metadata" type="JPEGMetadata"/>
                </params>
                <declaration name="tables" type="ArrayList" line="1022"/>
                <declaration name="iter" type="Iterator" line="1023"/>
                <scope line="1024">
                    <declaration name="seg" type="MarkerSegment" line="1025"/>
                    <scope line="1026">
                        <declaration name="dqt" type="DQTMarkerSegment" line="1027"/>
                    </scope>
                </scope>
                <declaration name="retval" type="JPEGQTable[]" line="1031"/>
                <scope line="1032">
                    <scope line="1034"/>
                </scope>
            </method>
            <javadoc line="1040">
                Finds all DHT marker segments and returns all the q
                  tables as a single array of JPEGQTables.  The metadata
                  must not be for a progressive image, or an exception
                  will be thrown when two Huffman tables with the same
                  table id are encountered.                
            </javadoc>
            <method name="collectHTablesFromMetadata" type="JPEGHuffmanTable[]" line="1047">
                <params>
                    <param name="metadata" type="JPEGMetadata"/>
                    <param name="wantDC" type="boolean"/>
                </params>
                <declaration name="tables" type="ArrayList" line="1048"/>
                <declaration name="iter" type="Iterator" line="1049"/>
                <scope line="1050">
                    <declaration name="seg" type="MarkerSegment" line="1051"/>
                    <scope line="1052">
                        <declaration name="dht" type="DHTMarkerSegment" line="1053"/>
                        <scope line="1054">
                            <declaration name="htable" type="DHTMarkerSegment.Htable" line="1055"/>
                            <scope line="1056"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="retval" type="JPEGHuffmanTable[]" line="1062"/>
                <scope line="1063">
                    <declaration name="htables" type="DHTMarkerSegment.Htable[]" line="1064"/>
                    <scope line="1067">
                        <scope line="1069">
                            <scope line="1070">
                                <scope line="1071"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getSrcCSType" type="int" line="1081">
                <params>
                    <param name="type" type="ImageTypeSpecifier"/>
                </params>
            </method>
            <method name="getSrcCSType" type="int" line="1084">
                <params>
                    <param name="rimage" type="RenderedImage"/>
                </params>
            </method>
            <method name="getSrcCSType" type="int" line="1087">
                <params>
                    <param name="cm" type="ColorModel"/>
                </params>
                <declaration name="retval" type="int" line="1088"/>
                <scope line="1089">
                    <declaration name="alpha" type="boolean" line="1090"/>
                    <declaration name="cs" type="ColorSpace" line="1091"/>
                    <scope line="1097"/>
                    <scope line="1100"/>
                    <scope line="1105"/>
                    <scope line="1108"/>
                    <scope line="1113">
                        <scope line="1114"/>
                        <scope line="1117"/>
                    </scope>
                </scope>
            </method>
            <method name="getDestCSType" type="int" line="1128">
                <params>
                    <param name="destType" type="ImageTypeSpecifier"/>
                </params>
                <declaration name="cm" type="ColorModel" line="1129"/>
                <declaration name="alpha" type="boolean" line="1130"/>
                <declaration name="cs" type="ColorSpace" line="1131"/>
                <declaration name="retval" type="int" line="1132"/>
                <scope line="1138"/>
                <scope line="1141"/>
                <scope line="1146"/>
                <scope line="1149"/>
                <scope line="1154">
                    <scope line="1155"/>
                    <scope line="1158"/>
                </scope>
            </method>
            <method name="getDefaultDestCSType" type="int" line="1168">
                <params>
                    <param name="type" type="ImageTypeSpecifier"/>
                </params>
            </method>
            <method name="getDefaultDestCSType" type="int" line="1171">
                <params>
                    <param name="rimage" type="RenderedImage"/>
                </params>
            </method>
            <method name="getDefaultDestCSType" type="int" line="1174">
                <params>
                    <param name="cm" type="ColorModel"/>
                </params>
                <declaration name="retval" type="int" line="1175"/>
                <scope line="1176">
                    <declaration name="alpha" type="boolean" line="1177"/>
                    <declaration name="cs" type="ColorSpace" line="1178"/>
                    <scope line="1184"/>
                    <scope line="1187"/>
                    <scope line="1192"/>
                    <scope line="1195"/>
                    <scope line="1200">
                        <scope line="1201"/>
                        <scope line="1204"/>
                    </scope>
                </scope>
            </method>
            <method name="isSubsampled" type="boolean" line="1215">
                <params>
                    <param name="specs" type="SOFMarkerSegment.ComponentSpec[]"/>
                </params>
                <declaration name="hsamp0" type="int" line="1216"/>
                <declaration name="vsamp0" type="int" line="1217"/>
                <scope line="1218"/>
            </method>
            <method name="initWriterIDs" type="void" line="1223"/>
            <javadoc line="1223">
                Sets up static native structures.                
            </javadoc>
            <method name="initJPEGImageWriter" type="long" line="1227"/>
            <javadoc line="1227">
                Sets up per-writer native structure and returns a pointer to it.                
            </javadoc>
            <method name="setDest" type="void" line="1231"/>
            <javadoc line="1231">
                Sets up native structures for output stream                
            </javadoc>
            <method name="writeImage" type="boolean" line="1235"/>
            <javadoc line="1235">
                Returns &lt;code&gt;true&lt;/code&gt; if the write was aborted.                
            </javadoc>
            <javadoc line="1239">
                Writes the metadata out when called by the native code,
                  which will have already written the header to the stream
                  and established the library state.  This is simpler than
                  breaking the write call in two.                
            </javadoc>
            <method name="writeMetadata" type="void" line="1245">
                <scope line="1246">
                    <scope line="1247"/>
                    <scope line="1250"/>
                </scope>
                <scope line="1254"/>
            </method>
            <method name="writeTables" type="void" line="1258"/>
            <javadoc line="1258">
                Write out a tables-only image to the stream.                
            </javadoc>
            <javadoc line="1262">
                Put the scanline y of the source ROI view Raster into the
                  1-line Raster for writing.  This handles ROI and band
                  rearrangements, and expands indexed images.  Subsampling is
                  done in the native code.
                  This is called by the native code.                
            </javadoc>
            <method name="grabPixels" type="void" line="1269">
                <params>
                    <param name="y" type="int"/>
                </params>
                <declaration name="sourceLine" type="Raster" line="1270"/>
                <scope line="1271">
                    <declaration name="forceARGB" type="boolean" line="1273"/>
                    <declaration name="temp" type="BufferedImage" line="1274"/>
                </scope>
                <scope line="1277"/>
                <scope line="1280">
                    <scope line="1281"/>
                </scope>
                <scope line="1287">
                    <declaration name="wr" type="WritableRaster" line="1288"/>
                    <declaration name="data" type="int[]" line="1289"/>
                </scope>
                <scope line="1296"/>
            </method>
            <method name="abortWrite" type="void" line="1300"/>
            <javadoc line="1300">
                Aborts the current write in the native code                
            </javadoc>
            <method name="resetWriter" type="void" line="1304"/>
            <javadoc line="1304">
                Resets native structures                
            </javadoc>
            <method name="disposeWriter" type="void" line="1308"/>
            <javadoc line="1308">
                Releases native structures                
            </javadoc>
            <class name="JPEGWriterDisposerRecord" line="1312">
                <implements interface="DisposerRecord"/>
                <declaration name="pData" type="long" line="1313"/>
                <method name="JPEGWriterDisposerRecord" type="constructor" line="1314">
                    <params>
                        <param name="pData" type="long"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="1317">
                    <scope line="1318"/>
                </method>
            </class>
            <declaration name="theThread" type="Thread" line="1324"/>
            <declaration name="theLockCount" type="int" line="1325"/>
            <method name="setThreadLock" type="void" line="1326">
                <declaration name="currThread" type="Thread" line="1327"/>
                <scope line="1328">
                    <scope line="1329"/>
                    <scope line="1332"/>
                </scope>
                <scope line="1336"/>
            </method>
            <method name="clearThreadLock" type="void" line="1341">
                <declaration name="currThread" type="Thread" line="1342"/>
                <scope line="1343"/>
                <scope line="1347"/>
            </method>
        </class>
    </source>