<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.jpeg">
        <import package="javax.imageio.IIOException"/>
        <import package="javax.imageio.ImageWriter"/>
        <import package="javax.imageio.ImageWriteParam"/>
        <import package="javax.imageio.IIOImage"/>
        <import package="javax.imageio.ImageTypeSpecifier"/>
        <import package="javax.imageio.metadata.IIOMetadata"/>
        <import package="javax.imageio.metadata.IIOMetadataFormatImpl"/>
        <import package="javax.imageio.metadata.IIOInvalidTreeException"/>
        <import package="javax.imageio.spi.ImageWriterSpi"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="javax.imageio.plugins.jpeg.JPEGImageWriteParam"/>
        <import package="javax.imageio.plugins.jpeg.JPEGQTable"/>
        <import package="javax.imageio.plugins.jpeg.JPEGHuffmanTable"/>
        <import package="org.w3c.dom.Node"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.image.SampleModel"/>
        <import package="java.awt.image.DataBuffer"/>
        <import package="java.awt.image.DataBufferByte"/>
        <import package="java.awt.image.ColorModel"/>
        <import package="java.awt.image.IndexColorModel"/>
        <import package="java.awt.image.ColorConvertOp"/>
        <import package="java.awt.image.RenderedImage"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.color.ColorSpace"/>
        <import package="java.awt.color.ICC_ColorSpace"/>
        <import package="java.awt.color.ICC_Profile"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Transparency"/>
        <import package="java.io.IOException"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="sun.java2d.Disposer"/>
        <import package="sun.java2d.DisposerRecord"/>
        <class name="JPEGImageWriter" line="70">
            <extends class="ImageWriter"/>
            <comment line="73">
                /////// Private variables                
            </comment>
            <comment line="102">
                Used by PhotoYCC only                
            </comment>
            <comment line="133">
                Parameters for writing metadata                
            </comment>
            <comment line="134">
                If it&apos;s there, use it                
            </comment>
            <comment line="135">
                Add one for the thumbnails                
            </comment>
            <comment line="136">
                If it&apos;s there, use it                
            </comment>
            <comment line="137">
                Change if needed                
            </comment>
            <comment line="152">
                /////// End of Private variables                
            </comment>
            <comment line="154">
                /////// Protected variables                
            </comment>
            <comment line="175">
                /////// End of Protected variables                
            </comment>
            <comment line="177">
                /////// static initializer                
            </comment>
            <comment line="187">
                ////// Public API                
            </comment>
            <comment line="1240">
                //////// End of public API                
            </comment>
            <comment line="1242">
                /////// Package-access API                
            </comment>
            <comment line="1280">
                Provide access to protected superclass method                
            </comment>
            <comment line="1285">
                Provide access to protected superclass method                
            </comment>
            <comment line="1290">
                /////// End of Package-access API                
            </comment>
            <comment line="1292">
                /////// Private methods                
            </comment>
            <comment line="1294">
                /////// Metadata handling                
            </comment>
            <comment line="1462">
                ///////// End of metadata handling                
            </comment>
            <comment line="1464">
                //////////// ColorSpace conversion                
            </comment>
            <comment line="1609">
                //////////// End of ColorSpace conversion                
            </comment>
            <comment line="1611">
                //////////// Native methods and callbacks                
            </comment>
            <declaration name="debug" type="boolean" line="74"/>
            <declaration name="structPointer" type="long" line="76"/>
            <javadoc line="76">
                The following variable contains a pointer to the IJG library
                  structure for this reader.  It is assigned in the constructor
                  and then is passed in to every native call.  It is set to 0
                  by dispose to avoid disposing twice.                
            </javadoc>
            <declaration name="ios" type="ImageOutputStream" line="85"/>
            <javadoc line="85">
                The output stream we write to                
            </javadoc>
            <declaration name="srcRas" type="Raster" line="88"/>
            <javadoc line="88">
                The Raster we will write from                
            </javadoc>
            <declaration name="raster" type="WritableRaster" line="91"/>
            <javadoc line="91">
                An intermediate Raster holding compressor-friendly data                
            </javadoc>
            <declaration name="indexed" type="boolean" line="94"/>
            <javadoc line="94">
                Set to true if we are writing an image with an
                  indexed ColorModel                
            </javadoc>
            <declaration name="indexCM" type="IndexColorModel" line="99"/>
            <declaration name="convertTosRGB" type="boolean" line="101"/>
            <declaration name="converted" type="WritableRaster" line="102"/>
            <declaration name="isAlphaPremultiplied" type="boolean" line="104"/>
            <declaration name="srcCM" type="ColorModel" line="105"/>
            <declaration name="thumbnails" type="List" line="107"/>
            <javadoc line="107">
                If there are thumbnails to be written, this is the list.                
            </javadoc>
            <declaration name="iccProfile" type="ICC_Profile" line="112"/>
            <javadoc line="112">
                If metadata should include an icc profile, store it here.                
            </javadoc>
            <declaration name="sourceXOffset" type="int" line="117"/>
            <declaration name="sourceYOffset" type="int" line="118"/>
            <declaration name="sourceWidth" type="int" line="119"/>
            <declaration name="srcBands" type="int[]" line="120"/>
            <declaration name="sourceHeight" type="int" line="121"/>
            <declaration name="currentImage" type="int" line="123"/>
            <javadoc line="123">
                Used when calling listeners                
            </javadoc>
            <declaration name="convertOp" type="ColorConvertOp" line="126"/>
            <declaration name="streamQTables" type="JPEGQTable[]" line="128"/>
            <declaration name="streamDCHuffmanTables" type="JPEGHuffmanTable[]" line="129"/>
            <declaration name="streamACHuffmanTables" type="JPEGHuffmanTable[]" line="130"/>
            <declaration name="ignoreJFIF" type="boolean" line="133"/>
            <declaration name="forceJFIF" type="boolean" line="134"/>
            <declaration name="ignoreAdobe" type="boolean" line="135"/>
            <declaration name="newAdobeTransform" type="int" line="136"/>
            <declaration name="writeDefaultJFIF" type="boolean" line="137"/>
            <declaration name="writeAdobe" type="boolean" line="138"/>
            <declaration name="metadata" type="JPEGMetadata" line="139"/>
            <declaration name="sequencePrepared" type="boolean" line="141"/>
            <declaration name="numScans" type="int" line="143"/>
            <declaration name="disposerReferent" type="Object" line="145"/>
            <javadoc line="145">
                The referent to be registered with the Disposer.                
            </javadoc>
            <declaration name="disposerRecord" type="DisposerRecord" line="148"/>
            <javadoc line="148">
                The DisposerRecord that handles the actual disposal of this writer.                
            </javadoc>
            <declaration name="WARNING_DEST_IGNORED" type="int" line="155"/>
            <declaration name="WARNING_STREAM_METADATA_IGNORED" type="int" line="156"/>
            <declaration name="WARNING_DEST_METADATA_COMP_MISMATCH" type="int" line="157"/>
            <declaration name="WARNING_DEST_METADATA_JFIF_MISMATCH" type="int" line="158"/>
            <declaration name="WARNING_DEST_METADATA_ADOBE_MISMATCH" type="int" line="159"/>
            <declaration name="WARNING_IMAGE_METADATA_JFIF_MISMATCH" type="int" line="160"/>
            <declaration name="WARNING_IMAGE_METADATA_ADOBE_MISMATCH" type="int" line="161"/>
            <declaration name="WARNING_METADATA_NOT_JPEG_FOR_RASTER" type="int" line="162"/>
            <declaration name="WARNING_NO_BANDS_ON_INDEXED" type="int" line="163"/>
            <declaration name="WARNING_ILLEGAL_THUMBNAIL" type="int" line="164"/>
            <declaration name="WARNING_IGNORING_THUMBS" type="int" line="165"/>
            <declaration name="WARNING_FORCING_JFIF" type="int" line="166"/>
            <declaration name="WARNING_THUMB_CLIPPED" type="int" line="167"/>
            <declaration name="WARNING_METADATA_ADJUSTED_FOR_THUMB" type="int" line="168"/>
            <declaration name="WARNING_NO_RGB_THUMB_AS_INDEXED" type="int" line="169"/>
            <declaration name="WARNING_NO_GRAY_THUMB_AS_INDEXED" type="int" line="170"/>
            <declaration name="MAX_WARNING" type="int" line="172"/>
            <scope line="178"/>
            <method name="JPEGImageWriter" type="constructor" line="188">
                <params>
                    <param name="originator" type="ImageWriterSpi"/>
                </params>
            </method>
            <method name="setOutput" type="void" line="195">
                <params>
                    <param name="output" type="Object"/>
                </params>
                <comment line="199">
                    validates output                    
                </comment>
                <comment line="201">
                    so this will always work                    
                </comment>
                <comment line="202">
                    Set the native destination                    
                </comment>
                <scope line="197"/>
                <scope line="203"/>
            </method>
            <method name="getDefaultWriteParam" type="ImageWriteParam" line="208"/>
            <method name="getDefaultStreamMetadata" type="IIOMetadata" line="212">
                <params>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="214"/>
                <scope line="216"/>
            </method>
            <method name="getDefaultImageMetadata" type="IIOMetadata" line="223">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="225"/>
                <scope line="227"/>
            </method>
            <method name="convertStreamMetadata" type="IIOMetadata" line="233">
                <params>
                    <param name="inData" type="IIOMetadata"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <comment line="235">
                    There isn&apos;t much we can do.  If it&apos;s one of ours, then
                     return it.  Otherwise just return null.  We use it only
                     for tables, so we can&apos;t get a default and modify it,
                     as this will usually not be what is intended.                    
                </comment>
                <scope line="238">
                    <declaration name="jpegData" type="JPEGMetadata" line="239"/>
                    <scope line="240"/>
                </scope>
            </method>
            <method name="convertImageMetadata" type="IIOMetadata" line="250">
                <params>
                    <param name="inData" type="IIOMetadata"/>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="252"/>
                <scope line="254"/>
            </method>
            <method name="convertImageMetadataOnThread" type="IIOMetadata" line="262">
                <params>
                    <param name="inData" type="IIOMetadata"/>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <comment line="264">
                    If it&apos;s one of ours, just return it                    
                </comment>
                <comment line="270">
                    Can&apos;t convert stream metadata to image metadata
                     XXX Maybe this should put out a warning?                    
                </comment>
                <comment line="275">
                    If it&apos;s not one of ours, create a default and set it from
                     the standard tree from the input, if it exists.                    
                </comment>
                <comment line="288">
                    Other plug-in generates bogus standard tree
                     XXX Maybe this should put out a warning?                    
                </comment>
                <scope line="264">
                    <declaration name="jpegData" type="JPEGMetadata" line="265"/>
                    <scope line="266"/>
                    <scope line="268"/>
                </scope>
                <scope line="276">
                    <declaration name="formatName" type="String" line="277"/>
                    <declaration name="tree" type="Node" line="279"/>
                    <scope line="280">
                        <declaration name="jpegData" type="JPEGMetadata" line="281"/>
                        <scope line="284"/>
                        <scope line="286"/>
                    </scope>
                </scope>
            </method>
            <method name="getNumThumbnailsSupported" type="int" line="301">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="imageMetadata" type="IIOMetadata"/>
                </params>
                <scope line="302"/>
            </method>
            <declaration name="preferredThumbSizes" type="Dimension[]" line="308"/>
            <method name="getPreferredThumbnailSizes" type="Dimension[]" line="314">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="imageMetadata" type="IIOMetadata"/>
                </params>
                <scope line="315"/>
            </method>
            <method name="jfifOK" type="boolean" line="324">
                <params>
                    <param name="imageType" type="ImageTypeSpecifier"/>
                    <param name="param" type="ImageWriteParam"/>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="imageMetadata" type="IIOMetadata"/>
                </params>
                <comment line="326">
                    If the image type and metadata are JFIF compatible, return true                    
                </comment>
                <comment line="340">
                    metadata must have a jfif node                    
                </comment>
                <scope line="327"/>
                <scope line="330">
                    <declaration name="metadata" type="JPEGMetadata" line="331"/>
                    <scope line="332"/>
                    <scope line="334"/>
                    <scope line="341"/>
                </scope>
            </method>
            <method name="canWriteRasters" type="boolean" line="348"/>
            <method name="write" type="void" line="354">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="image" type="IIOImage"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <scope line="356"/>
                <scope line="358"/>
            </method>
            <method name="writeOnThread" type="void" line="365">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                    <param name="image" type="IIOImage"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <comment line="376">
                    if streamMetadata is not null, issue a warning                    
                </comment>
                <comment line="381">
                    Obtain the raster and image, if there is one                    
                </comment>
                <comment line="390">
                    Use the Raster directly.                    
                </comment>
                <comment line="395">
                    Get the unique tile.                    
                </comment>
                <comment line="399">
                    Ensure the Raster has dimensions of the image,
                     as the tile dimensions might differ.                    
                </comment>
                <comment line="413">
                    Image is tiled so get a contiguous raster by copying.                    
                </comment>
                <comment line="418">
                    Now determine if we are using a band subset                    
                </comment>
                <comment line="420">
                    By default, we are using all source bands                    
                </comment>
                <comment line="446">
                    Consult the param to determine if we&apos;re writing a subset                    
                </comment>
                <comment line="470">
                    If this is a subset, we must adjust bandSizes                    
                </comment>
                <comment line="482">
                    All the same                    
                </comment>
                <comment line="487">
                    4450894 part 1: The IJG libraries are compiled so they only
                     handle &lt;= 8-bit samples.  We now check the band sizes and throw
                     an exception for images, such as USHORT_GRAY, with &gt; 8 bits
                     per sample.                    
                </comment>
                <comment line="494">
                    4450894 part 2: We expand IndexColorModel images to full 24-
                     or 32-bit in grabPixels() for each scanline.  For indexed
                     images such as BYTE_BINARY, we need to ensure that we update
                     bandSizes to account for the scaling from 1-bit band sizes
                     to 8-bit.                    
                </comment>
                <comment line="516">
                    Destination type, if there is one                    
                </comment>
                <comment line="520">
                    Ignore dest type if we are writing a complete image                    
                </comment>
                <comment line="527">
                    Examine the param                    
                </comment>
                <comment line="590">
                    We&apos;ll handle the metadata case later                    
                </comment>
                <comment line="601">
                    Now examine the metadata                    
                </comment>
                <comment line="625">
                    First set a default state                    
                </comment>
                <comment line="627">
                    If it&apos;s there, use it                    
                </comment>
                <comment line="628">
                    If it&apos;s there, use it                    
                </comment>
                <comment line="629">
                    Change if needed                    
                </comment>
                <comment line="633">
                    By default we&apos;ll do no conversion:                    
                </comment>
                <comment line="650">
                    By default don&apos;t write one                    
                </comment>
                <comment line="651">
                    PhotoYCC does this                    
                </comment>
                <comment line="660">
                    Check the metadata against the destination type                    
                </comment>
                <comment line="665">
                    Do we want to write an ICC profile?                    
                </comment>
                <comment line="673">
                    no metadata, but there is a dest type                    
                </comment>
                <comment line="674">
                    If we can add a JFIF or an Adobe marker segment, do so                    
                </comment>
                <comment line="677">
                    Do we want to write an ICC profile?                    
                </comment>
                <comment line="688">
                    re-create the metadata                    
                </comment>
                <comment line="693">
                    no destination type                    
                </comment>
                <comment line="695">
                    no dest, no metadata, full image                    
                </comment>
                <comment line="696">
                    Use default metadata matching the image and param                    
                </comment>
                <comment line="710">
                    else no dest, no metadata, not an image,
                     so no special headers, no color conversion                    
                </comment>
                <comment line="712">
                    no dest type, but there is metadata                    
                </comment>
                <comment line="714">
                    no dest, metadata, image                    
                </comment>
                <comment line="715">
                    Check that the metadata and the image match                    
                </comment>
                <comment line="734">
                    out colorspace remains unknown                    
                </comment>
                <comment line="769">
                    consult the ids                    
                </comment>
                <comment line="771">
                    if they don&apos;t resolve it,
                     consult the sampling factors                    
                </comment>
                <comment line="785">
                    RGBA                    
                </comment>
                <comment line="800">
                    consult the ids                    
                </comment>
                <comment line="802">
                    if they don&apos;t resolve it,
                     consult the sampling factors                    
                </comment>
                <comment line="836">
                    PhotoYCCA                    
                </comment>
                <comment line="855">
                    else no dest, metadata, not an image.  Defaults ok                    
                </comment>
                <comment line="870">
                    Might still be null                    
                </comment>
                <comment line="884">
                    determine if thumbnails can be written
                     If we are going to add a default JFIF marker segment,
                     then thumbnails can be written                    
                </comment>
                <comment line="888">
                    If there is no metadata, then we can&apos;t write thumbnails                    
                </comment>
                <comment line="895">
                    There is metadata
                     If we are writing a raster or subbands,
                     then the user must specify JFIF on the metadata                    
                </comment>
                <comment line="900">
                    Or we can&apos;t include thumbnails                    
                </comment>
                <comment line="905">
                    It is a full image, and there is metadata                    
                </comment>
                <comment line="906">
                    Not JFIF                    
                </comment>
                <comment line="907">
                    Can it have JFIF?                    
                </comment>
                <comment line="914">
                    Nope, not JFIF-compatible                    
                </comment>
                <comment line="925">
                    Set up a boolean to indicate whether we need to call back to
                     write metadata                    
                </comment>
                <comment line="930">
                    Now that we have dealt with metadata, finalize our tables set up                    
                </comment>
                <comment line="932">
                    Are we going to write tables?  By default, yes.                    
                </comment>
                <comment line="936">
                    But if the metadata has no tables, no.                    
                </comment>
                <comment line="958">
                    Ignored if optimizeHuffman is true                    
                </comment>
                <comment line="962">
                    Whether we write tables or not, we need to figure out which ones
                     to use                    
                </comment>
                <comment line="964">
                    Get them from metadata, or use defaults                    
                </comment>
                <comment line="977">
                    If we are optimizing, we don&apos;t want any tables.                    
                </comment>
                <comment line="979">
                    If they were for progressive scans, we can&apos;t use them.                    
                </comment>
                <comment line="995">
                    By default, ids are 1 - N, no subsampling                    
                </comment>
                <comment line="1001">
                    JFIF compatible                    
                </comment>
                <comment line="1007">
                    Now override them with the contents of sof, if there is one,                    
                </comment>
                <comment line="1010">
                    else use JFIF-compatible default                    
                </comment>
                <comment line="1027">
                    Create an appropriate 1-line databuffer for writing                    
                </comment>
                <comment line="1032">
                    Create a raster from that                    
                </comment>
                <comment line="1042">
                    Call the writer, who will call back for every scanline                    
                </comment>
                <comment line="1053">
                    Note that getData disables acceleration on buffer, but it is
                     just a 1-line intermediate data transfer buffer that does not
                     affect the acceleration of the source image.                    
                </comment>
                <comment line="1088">
                    After a successful write                    
                </comment>
                <scope line="367"/>
                <scope line="371"/>
                <scope line="376"/>
                <declaration name="rasterOnly" type="boolean" line="381"/>
                <declaration name="rimage" type="RenderedImage" line="383"/>
                <scope line="384"/>
                <scope line="386">
                    <scope line="388"/>
                    <scope line="393">
                        <scope line="402"/>
                    </scope>
                    <scope line="411"/>
                </scope>
                <declaration name="numSrcBands" type="int" line="420"/>
                <declaration name="cm" type="ColorModel" line="423"/>
                <declaration name="cs" type="ColorSpace" line="424"/>
                <scope line="427">
                    <scope line="429">
                        <scope line="431"/>
                        <scope line="436"/>
                    </scope>
                </scope>
                <declaration name="numBandsUsed" type="int" line="444"/>
                <scope line="447">
                    <declaration name="sBands" type="int[]" line="448"/>
                    <scope line="449">
                        <scope line="450"/>
                        <scope line="452">
                            <scope line="455"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="usingBandSubset" type="boolean" line="463"/>
                <declaration name="fullImage" type="boolean" line="464"/>
                <declaration name="bandSizes" type="int[]" line="466"/>
                <scope line="467">
                    <scope line="470">
                        <declaration name="temp" type="int[]" line="471"/>
                        <scope line="472"/>
                    </scope>
                </scope>
                <scope line="477">
                    <declaration name="tempSize" type="int[]" line="478"/>
                    <scope line="480"/>
                </scope>
                <scope line="485">
                    <scope line="490"/>
                    <scope line="498"/>
                </scope>
                <scope line="503">
                    <scope line="509"/>
                </scope>
                <declaration name="destType" type="ImageTypeSpecifier" line="516"/>
                <scope line="517">
                    <scope line="520"/>
                </scope>
                <declaration name="imageWidth" type="int" line="530"/>
                <declaration name="imageHeight" type="int" line="531"/>
                <declaration name="periodX" type="int" line="534"/>
                <declaration name="periodY" type="int" line="535"/>
                <declaration name="gridX" type="int" line="536"/>
                <declaration name="gridY" type="int" line="537"/>
                <declaration name="qTables" type="JPEGQTable[]" line="538"/>
                <declaration name="DCHuffmanTables" type="JPEGHuffmanTable[]" line="539"/>
                <declaration name="ACHuffmanTables" type="JPEGHuffmanTable[]" line="540"/>
                <declaration name="optimizeHuffman" type="boolean" line="541"/>
                <declaration name="jparam" type="JPEGImageWriteParam" line="542"/>
                <declaration name="progressiveMode" type="int" line="543"/>
                <scope line="545">
                    <declaration name="sourceRegion" type="Rectangle" line="547"/>
                    <scope line="548">
                        <declaration name="imageBounds" type="Rectangle" line="549"/>
                    </scope>
                    <scope line="560"/>
                    <scope line="563"/>
                    <declaration name="quality" type="float" line="576"/>
                    <scope line="594"/>
                </scope>
                <declaration name="mdata" type="IIOMetadata" line="601"/>
                <scope line="602">
                    <scope line="603">
                        <scope line="605"/>
                    </scope>
                    <scope line="609">
                        <scope line="610">
                            <declaration name="type" type="ImageTypeSpecifier" line="611"/>
                            <scope line="612"/>
                        </scope>
                        <scope line="618"/>
                    </scope>
                </scope>
                <declaration name="inCsType" type="int" line="633"/>
                <declaration name="outCsType" type="int" line="634"/>
                <declaration name="jfif" type="JFIFMarkerSegment" line="636"/>
                <declaration name="adobe" type="AdobeMarkerSegment" line="637"/>
                <declaration name="sof" type="SOFMarkerSegment" line="638"/>
                <scope line="640"/>
                <scope line="653">
                    <scope line="654"/>
                    <scope line="660">
                        <scope line="665">
                            <scope line="666"/>
                        </scope>
                    </scope>
                    <scope line="672">
                        <scope line="674">
                            <scope line="677"/>
                        </scope>
                        <scope line="680">
                            <declaration name="transform" type="int" line="681"/>
                            <scope line="682"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="692">
                    <scope line="693">
                        <scope line="694">
                            <scope line="699">
                                <scope line="701"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="711">
                        <scope line="713">
                            <declaration name="inputType" type="ImageTypeSpecifier" line="716"/>
                            <scope line="721">
                                <declaration name="alpha" type="boolean" line="722"/>
                                <scope line="725"/>
                                <scope line="727">
                                    <scope line="728"/>
                                </scope>
                                <scope line="736"/>
                                <scope line="743">
                                    <scope line="744">
                                        <scope line="748"/>
                                    </scope>
                                    <scope line="752"/>
                                    <scope line="767">
                                        <declaration name="outCS" type="int" line="769"/>
                                        <scope line="772"/>
                                        <scope line="774">
                                            <declaration name="subsampled" type="boolean" line="775"/>
                                            <scope line="777"/>
                                            <scope line="779"/>
                                        </scope>
                                    </scope>
                                </scope>
                                <scope line="784">
                                    <scope line="785"/>
                                    <scope line="790">
                                        <scope line="792"/>
                                    </scope>
                                    <scope line="798">
                                        <declaration name="outCS" type="int" line="800"/>
                                        <scope line="803"/>
                                        <scope line="805">
                                            <declaration name="subsampled" type="boolean" line="806"/>
                                        </scope>
                                    </scope>
                                </scope>
                                <scope line="815">
                                    <scope line="816">
                                        <scope line="817"/>
                                        <scope line="824">
                                            <scope line="826"/>
                                        </scope>
                                        <scope line="832"/>
                                    </scope>
                                    <scope line="835">
                                        <scope line="836"/>
                                        <scope line="840">
                                            <scope line="842"/>
                                        </scope>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="metadataProgressive" type="boolean" line="858"/>
                <declaration name="scans" type="int[]" line="859"/>
                <scope line="861">
                    <scope line="862"/>
                    <scope line="866">
                        <scope line="868"/>
                        <scope line="870"/>
                    </scope>
                    <scope line="874"/>
                </scope>
                <declaration name="numThumbs" type="int" line="881"/>
                <scope line="886">
                    <scope line="888">
                        <scope line="890"/>
                    </scope>
                    <scope line="893">
                        <scope line="897">
                            <scope line="898">
                                <scope line="900"/>
                            </scope>
                        </scope>
                        <scope line="904">
                            <scope line="905">
                                <scope line="908">
                                    <scope line="909"/>
                                </scope>
                                <scope line="913">
                                    <scope line="915"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="haveMetadata" type="boolean" line="926"/>
                <declaration name="writeDQT" type="boolean" line="932"/>
                <declaration name="writeDHT" type="boolean" line="933"/>
                <declaration name="dqt" type="DQTMarkerSegment" line="936"/>
                <declaration name="dht" type="DHTMarkerSegment" line="937"/>
                <declaration name="restartInterval" type="int" line="939"/>
                <scope line="941">
                    <declaration name="dri" type="DRIMarkerSegment" line="946"/>
                    <scope line="949"/>
                    <scope line="953"/>
                    <scope line="956"/>
                </scope>
                <scope line="963">
                    <scope line="964"/>
                    <scope line="966"/>
                    <scope line="968"/>
                    <scope line="970"/>
                </scope>
                <scope line="977">
                    <scope line="979"/>
                    <scope line="982"/>
                    <scope line="985"/>
                    <scope line="988"/>
                </scope>
                <declaration name="componentIds" type="int[]" line="995"/>
                <declaration name="HsamplingFactors" type="int[]" line="996"/>
                <declaration name="VsamplingFactors" type="int[]" line="997"/>
                <declaration name="QtableSelectors" type="int[]" line="998"/>
                <scope line="999"/>
                <scope line="1007">
                    <scope line="1008">
                        <scope line="1009"/>
                    </scope>
                </scope>
                <declaration name="destWidth" type="int" line="1023"/>
                <declaration name="destHeight" type="int" line="1024"/>
                <declaration name="lineSize" type="int" line="1027"/>
                <declaration name="buffer" type="DataBufferByte" line="1029"/>
                <declaration name="bandOffs" type="int[]" line="1032"/>
                <declaration name="aborted" type="boolean" line="1045"/>
                <scope line="1047"/>
                <scope line="1080"/>
                <scope line="1082"/>
            </method>
            <method name="prepareWriteSequence" type="void" line="1091">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                </params>
                <scope line="1093"/>
                <scope line="1095"/>
            </method>
            <method name="prepareWriteSequenceOnThread" type="void" line="1101">
                <params>
                    <param name="streamMetadata" type="IIOMetadata"/>
                </params>
                <comment line="1107">
                    from jpeg_metadata.html:
                     If no stream metadata is supplied to
                     &lt;code&gt;ImageWriter.prepareWriteSequence&lt;code&gt;, then no
                     tables-only image is written.  If stream metadata containing
                     no tables is supplied to
                     &lt;code&gt;ImageWriter.prepareWriteSequence&lt;code&gt;, then a tables-only
                     image containing default visually lossless tables is written.                    
                </comment>
                <comment line="1118">
                    write a complete tables-only image at the beginning of
                     the stream.                    
                </comment>
                <comment line="1125">
                    Check that we are
                     at the beginning of the stream, or can go there, and haven&apos;t
                     written out the metadata already.                    
                </comment>
                <comment line="1136">
                    Set the tables
                     If the metadata has no tables, use default tables.                    
                </comment>
                <comment line="1158">
                    Now write them out                    
                </comment>
                <scope line="1102"/>
                <scope line="1115">
                    <scope line="1116">
                        <declaration name="jmeta" type="JPEGMetadata" line="1119"/>
                        <scope line="1120"/>
                        <scope line="1127"/>
                        <scope line="1131"/>
                        <scope line="1138"/>
                        <scope line="1143"/>
                        <scope line="1148"/>
                        <scope line="1153"/>
                    </scope>
                    <scope line="1162"/>
                </scope>
            </method>
            <method name="writeToSequence" type="void" line="1170">
                <params>
                    <param name="image" type="IIOImage"/>
                    <param name="param" type="ImageWriteParam"/>
                </params>
                <comment line="1177">
                    In the case of JPEG this does nothing different from write                    
                </comment>
                <scope line="1172">
                    <scope line="1173"/>
                </scope>
                <scope line="1178"/>
            </method>
            <method name="endWriteSequence" type="void" line="1183">
                <scope line="1185">
                    <scope line="1186"/>
                </scope>
                <scope line="1190"/>
            </method>
            <method name="abort" type="void" line="1195">
                <scope line="1197"/>
                <scope line="1200"/>
            </method>
            <method name="resetInternalState" type="void" line="1205">
                <comment line="1207">
                    reset C structures                    
                </comment>
                <comment line="1210">
                    reset local Java structures                    
                </comment>
            </method>
            <method name="reset" type="void" line="1218">
                <scope line="1220"/>
                <scope line="1222"/>
            </method>
            <method name="dispose" type="void" line="1227">
                <scope line="1229">
                    <scope line="1230"/>
                </scope>
                <scope line="1234"/>
            </method>
            <javadoc line="1243">
                Called by the native code or other classes to signal a warning.
                  The code is used to lookup a localized message to be used when
                  sending warnings to listeners.                
            </javadoc>
            <method name="warningOccurred" type="void" line="1248">
                <params>
                    <param name="code" type="int"/>
                </params>
                <scope line="1249"/>
            </method>
            <javadoc line="1258">
                The library has it&apos;s own error facility that emits warning messages.
                  This routine is called by the native code when it has already
                  formatted a string for output.
                  XXX  For truly complete localization of all warning messages,
                  the sun_jpeg_output_message routine in the native code should
                  send only the codes and parameters to a method here in Java,
                  which will then format and send the warnings, using localized
                  strings.  This method will have to deal with all the parameters
                  and formats (%u with possibly large numbers, %02d, %02x, etc.)
                  that actually occur in the JPEG library.  For now, this prevents
                  library warnings from being printed to stderr.                
            </javadoc>
            <method name="warningWithMessage" type="void" line="1271">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <method name="thumbnailStarted" type="void" line="1275">
                <params>
                    <param name="thumbnailIndex" type="int"/>
                </params>
            </method>
            <method name="thumbnailProgress" type="void" line="1280">
                <params>
                    <param name="percentageDone" type="float"/>
                </params>
            </method>
            <method name="thumbnailComplete" type="void" line="1285"/>
            <method name="checkSOFBands" type="void" line="1296">
                <params>
                    <param name="sof" type="SOFMarkerSegment"/>
                    <param name="numBandsUsed" type="int"/>
                </params>
                <comment line="1298">
                    Does the metadata frame header, if any, match numBandsUsed?                    
                </comment>
                <scope line="1298">
                    <scope line="1299"/>
                </scope>
            </method>
            <method name="checkJFIF" type="void" line="1308">
                <params>
                    <param name="jfif" type="JFIFMarkerSegment"/>
                    <param name="type" type="ImageTypeSpecifier"/>
                    <param name="input" type="boolean"/>
                </params>
                <comment line="1312">
                    type overrides metadata                    
                </comment>
                <scope line="1309">
                    <scope line="1310"/>
                </scope>
            </method>
            <method name="checkAdobe" type="void" line="1321">
                <params>
                    <param name="adobe" type="AdobeMarkerSegment"/>
                    <param name="type" type="ImageTypeSpecifier"/>
                    <param name="input" type="boolean"/>
                </params>
                <scope line="1322">
                    <declaration name="rightTransform" type="int" line="1323"/>
                    <scope line="1324">
                        <scope line="1328"/>
                        <scope line="1330"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1337">
                Collect all the scan info from the given metadata, and
                  organize it into the scan info array required by the
                  IJG libray.  It is much simpler to parse out this
                  data in Java and then just copy the data in C.                
            </javadoc>
            <method name="collectScans" type="int[]" line="1344">
                <params>
                    <param name="metadata" type="JPEGMetadata"/>
                    <param name="sof" type="SOFMarkerSegment"/>
                </params>
                <comment line="1364">
                    num comps                    
                </comment>
                <comment line="1371">
                    out of for over sof comps                    
                </comment>
                <declaration name="segments" type="List" line="1345"/>
                <declaration name="SCAN_SIZE" type="int" line="1346"/>
                <declaration name="MAX_COMPS_PER_SCAN" type="int" line="1347"/>
                <scope line="1349">
                    <declaration name="seg" type="MarkerSegment" line="1350"/>
                    <scope line="1351"/>
                </scope>
                <declaration name="retval" type="int[]" line="1355"/>
                <scope line="1357">
                    <declaration name="index" type="int" line="1360"/>
                    <scope line="1361">
                        <declaration name="sos" type="SOSMarkerSegment" line="1362"/>
                        <scope line="1364">
                            <scope line="1365">
                                <declaration name="compSel" type="int" line="1366"/>
                                <scope line="1367">
                                    <scope line="1368"/>
                                </scope>
                            </scope>
                            <scope line="1373"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1386">
                Finds all DQT marker segments and returns all the q
                  tables as a single array of JPEGQTables.                
            </javadoc>
            <method name="collectQTablesFromMetadata" type="JPEGQTable[]" line="1391">
                <params>
                    <param name="metadata" type="JPEGMetadata"/>
                </params>
                <declaration name="tables" type="ArrayList" line="1392"/>
                <declaration name="iter" type="Iterator" line="1393"/>
                <scope line="1394">
                    <declaration name="seg" type="MarkerSegment" line="1395"/>
                    <scope line="1396">
                        <declaration name="dqt" type="DQTMarkerSegment" line="1397"/>
                    </scope>
                </scope>
                <declaration name="retval" type="JPEGQTable[]" line="1402"/>
                <scope line="1403">
                    <scope line="1405"/>
                </scope>
            </method>
            <javadoc line="1413">
                Finds all DHT marker segments and returns all the q
                  tables as a single array of JPEGQTables.  The metadata
                  must not be for a progressive image, or an exception
                  will be thrown when two Huffman tables with the same
                  table id are encountered.                
            </javadoc>
            <method name="collectHTablesFromMetadata" type="JPEGHuffmanTable[]" line="1421">
                <params>
                    <param name="metadata" type="JPEGMetadata"/>
                    <param name="wantDC" type="boolean"/>
                </params>
                <declaration name="tables" type="ArrayList" line="1422"/>
                <declaration name="iter" type="Iterator" line="1423"/>
                <scope line="1424">
                    <declaration name="seg" type="MarkerSegment" line="1425"/>
                    <scope line="1426">
                        <declaration name="dht" type="DHTMarkerSegment" line="1427"/>
                        <scope line="1429">
                            <declaration name="htable" type="DHTMarkerSegment.Htable" line="1430"/>
                            <scope line="1432"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="retval" type="JPEGHuffmanTable[]" line="1438"/>
                <scope line="1439">
                    <declaration name="htables" type="DHTMarkerSegment.Htable[]" line="1440"/>
                    <scope line="1444">
                        <scope line="1446">
                            <scope line="1447">
                                <scope line="1448"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getSrcCSType" type="int" line="1465">
                <params>
                    <param name="type" type="ImageTypeSpecifier"/>
                </params>
            </method>
            <method name="getSrcCSType" type="int" line="1469">
                <params>
                    <param name="rimage" type="RenderedImage"/>
                </params>
            </method>
            <method name="getSrcCSType" type="int" line="1473">
                <params>
                    <param name="cm" type="ColorModel"/>
                </params>
                <declaration name="retval" type="int" line="1474"/>
                <scope line="1475">
                    <declaration name="alpha" type="boolean" line="1476"/>
                    <declaration name="cs" type="ColorSpace" line="1477"/>
                    <scope line="1483"/>
                    <scope line="1485"/>
                    <scope line="1490"/>
                    <scope line="1492"/>
                    <scope line="1497">
                        <scope line="1498"/>
                        <scope line="1500"/>
                    </scope>
                </scope>
            </method>
            <method name="getDestCSType" type="int" line="1512">
                <params>
                    <param name="destType" type="ImageTypeSpecifier"/>
                </params>
                <declaration name="cm" type="ColorModel" line="1513"/>
                <declaration name="alpha" type="boolean" line="1514"/>
                <declaration name="cs" type="ColorSpace" line="1515"/>
                <declaration name="retval" type="int" line="1516"/>
                <scope line="1522"/>
                <scope line="1524"/>
                <scope line="1529"/>
                <scope line="1531"/>
                <scope line="1536">
                    <scope line="1537"/>
                    <scope line="1539"/>
                </scope>
            </method>
            <method name="getDefaultDestCSType" type="int" line="1550">
                <params>
                    <param name="type" type="ImageTypeSpecifier"/>
                </params>
            </method>
            <method name="getDefaultDestCSType" type="int" line="1554">
                <params>
                    <param name="rimage" type="RenderedImage"/>
                </params>
            </method>
            <method name="getDefaultDestCSType" type="int" line="1558">
                <params>
                    <param name="cm" type="ColorModel"/>
                </params>
                <declaration name="retval" type="int" line="1559"/>
                <scope line="1560">
                    <declaration name="alpha" type="boolean" line="1561"/>
                    <declaration name="cs" type="ColorSpace" line="1562"/>
                    <scope line="1568"/>
                    <scope line="1570"/>
                    <scope line="1575"/>
                    <scope line="1577"/>
                    <scope line="1582">
                        <scope line="1583"/>
                        <scope line="1585"/>
                    </scope>
                </scope>
            </method>
            <method name="isSubsampled" type="boolean" line="1597">
                <params>
                    <param name="specs" type="SOFMarkerSegment.ComponentSpec[]"/>
                </params>
                <declaration name="hsamp0" type="int" line="1598"/>
                <declaration name="vsamp0" type="int" line="1599"/>
                <scope line="1600"/>
            </method>
            <method name="initWriterIDs" type="void" line="1612"/>
            <javadoc line="1612">
                Sets up static native structures.                
            </javadoc>
            <method name="initJPEGImageWriter" type="long" line="1617"/>
            <javadoc line="1617">
                Sets up per-writer native structure and returns a pointer to it.                
            </javadoc>
            <method name="setDest" type="void" line="1620"/>
            <javadoc line="1620">
                Sets up native structures for output stream                
            </javadoc>
            <method name="writeImage" type="boolean" line="1624"/>
            <javadoc line="1624">
                Returns &lt;code&gt;true&lt;/code&gt; if the write was aborted.                
            </javadoc>
            <javadoc line="1652">
                Writes the metadata out when called by the native code,
                  which will have already written the header to the stream
                  and established the library state.  This is simpler than
                  breaking the write call in two.                
            </javadoc>
            <method name="writeMetadata" type="void" line="1658">
                <scope line="1659">
                    <scope line="1660"/>
                    <scope line="1666"/>
                </scope>
                <scope line="1669"/>
            </method>
            <method name="writeTables" type="void" line="1681"/>
            <javadoc line="1681">
                Write out a tables-only image to the stream.                
            </javadoc>
            <javadoc line="1689">
                Put the scanline y of the source ROI view Raster into the
                  1-line Raster for writing.  This handles ROI and band
                  rearrangements, and expands indexed images.  Subsampling is
                  done in the native code.
                  This is called by the native code.                
            </javadoc>
            <method name="grabPixels" type="void" line="1696">
                <params>
                    <param name="y" type="int"/>
                </params>
                <comment line="1706">
                    If the image has BITMASK transparency, we need to make sure
                     it gets converted to 32-bit ARGB, because the JPEG encoder
                     relies upon the full 8-bit alpha channel.                    
                </comment>
                <comment line="1725">
                    The first time through, converted is null, so
                     a new raster is allocated.  It is then reused
                     on subsequent lines.                    
                </comment>
                <comment line="1747">
                    Every 8 scanlines                    
                </comment>
                <declaration name="sourceLine" type="Raster" line="1698"/>
                <scope line="1699">
                    <declaration name="forceARGB" type="boolean" line="1708"/>
                    <declaration name="temp" type="BufferedImage" line="1710"/>
                </scope>
                <scope line="1713"/>
                <scope line="1720">
                    <scope line="1721"/>
                </scope>
                <scope line="1730">
                    <declaration name="wr" type="WritableRaster" line="1731"/>
                    <declaration name="data" type="int[]" line="1732"/>
                </scope>
                <scope line="1746"/>
            </method>
            <method name="abortWrite" type="void" line="1751"/>
            <javadoc line="1751">
                Aborts the current write in the native code                
            </javadoc>
            <method name="resetWriter" type="void" line="1754"/>
            <javadoc line="1754">
                Resets native structures                
            </javadoc>
            <method name="disposeWriter" type="void" line="1757"/>
            <javadoc line="1757">
                Releases native structures                
            </javadoc>
            <class name="JPEGWriterDisposerRecord" line="1760">
                <implements interface="DisposerRecord"/>
                <declaration name="pData" type="long" line="1761"/>
                <method name="JPEGWriterDisposerRecord" type="constructor" line="1763">
                    <params>
                        <param name="pData" type="long"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="1767">
                    <scope line="1768"/>
                </method>
            </class>
            <declaration name="theThread" type="Thread" line="1775"/>
            <declaration name="theLockCount" type="int" line="1776"/>
            <method name="setThreadLock" type="void" line="1778">
                <comment line="1783">
                    it looks like that this reader instance is used
                     by multiple threads.                    
                </comment>
                <declaration name="currThread" type="Thread" line="1779"/>
                <scope line="1780">
                    <scope line="1781"/>
                    <scope line="1788"/>
                </scope>
                <scope line="1791"/>
            </method>
            <method name="clearThreadLock" type="void" line="1797">
                <declaration name="currThread" type="Thread" line="1798"/>
                <scope line="1799"/>
                <scope line="1805"/>
            </method>
        </class>
    </source>