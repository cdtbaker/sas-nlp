<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.imageio.plugins.jpeg">
        <import package="javax.imageio.metadata.IIOInvalidTreeException"/>
        <import package="javax.imageio.metadata.IIOMetadataNode"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="javax.imageio.plugins.jpeg.JPEGHuffmanTable"/>
        <import package="java.io.IOException"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.w3c.dom.NodeList"/>
        <import package="org.w3c.dom.NamedNodeMap"/>
        <class name="DHTMarkerSegment" line="42">
            <extends class="MarkerSegment"/>
            <javadoc line="42">
                A DHT (Define Huffman Table) marker segment.                
            </javadoc>
            <declaration name="tables" type="List" line="46"/>
            <method name="DHTMarkerSegment" type="constructor" line="48">
                <params>
                    <param name="needFour" type="boolean"/>
                </params>
                <scope line="51"/>
                <scope line="55"/>
            </method>
            <method name="DHTMarkerSegment" type="constructor" line="60">
                <params>
                    <param name="buffer" type="JPEGBuffer"/>
                </params>
                <declaration name="count" type="int" line="62"/>
                <scope line="63">
                    <declaration name="newGuy" type="Htable" line="64"/>
                </scope>
            </method>
            <method name="DHTMarkerSegment" type="constructor" line="72">
                <params>
                    <param name="dcTables" type="JPEGHuffmanTable[]"/>
                    <param name="acTables" type="JPEGHuffmanTable[]"/>
                </params>
                <scope line="74"/>
                <scope line="77"/>
            </method>
            <method name="DHTMarkerSegment" type="constructor" line="82">
                <params>
                    <param name="node" type="Node"/>
                </params>
                <declaration name="children" type="NodeList" line="84"/>
                <declaration name="size" type="int" line="85"/>
                <scope line="86"/>
                <scope line="89"/>
            </method>
            <method name="clone" type="Object" line="94">
                <declaration name="newGuy" type="DHTMarkerSegment" line="95"/>
                <declaration name="iter" type="Iterator" line="97"/>
                <scope line="98">
                    <declaration name="table" type="Htable" line="99"/>
                </scope>
            </method>
            <method name="getNativeNode" type="IIOMetadataNode" line="105">
                <declaration name="node" type="IIOMetadataNode" line="106"/>
                <scope line="107">
                    <declaration name="table" type="Htable" line="108"/>
                </scope>
            </method>
            <javadoc line="114">
                Writes the data for this segment to the stream in
                  valid JPEG format.                
            </javadoc>
            <method name="write" type="void" line="118">
                <params>
                    <param name="ios" type="ImageOutputStream"/>
                </params>
                <comment line="119">
                    We don&apos;t write DHT segments; the IJG library does.                    
                </comment>
            </method>
            <method name="print" type="void" line="122">
                <scope line="126">
                    <declaration name="table" type="Htable" line="127"/>
                </scope>
            </method>
            <method name="getHtableFromNode" type="Htable" line="134">
                <params>
                    <param name="node" type="Node"/>
                </params>
            </method>
            <method name="addHtable" type="void" line="138">
                <params>
                    <param name="table" type="JPEGHuffmanTable"/>
                    <param name="isDC" type="boolean"/>
                    <param name="id" type="int"/>
                </params>
            </method>
            <class name="Htable" line="142">
                <comment line="147">
                    0 == DC, 1 == AC                    
                </comment>
                <comment line="148">
                    0 - 4                    
                </comment>
                <comment line="150">
                    # of codes of each length                    
                </comment>
                <implements interface="Cloneable"/>
                <javadoc line="142">
                    A Huffman table within a DHT marker segment.                    
                </javadoc>
                <declaration name="tableClass" type="int" line="146"/>
                <declaration name="tableID" type="int" line="147"/>
                <declaration name="NUM_LENGTHS" type="int" line="148"/>
                <declaration name="numCodes" type="short[]" line="150"/>
                <declaration name="values" type="short[]" line="151"/>
                <method name="Htable" type="constructor" line="153">
                    <params>
                        <param name="buffer" type="JPEGBuffer"/>
                    </params>
                    <scope line="156"/>
                    <declaration name="numValues" type="int" line="160"/>
                    <scope line="161"/>
                    <scope line="165"/>
                </method>
                <method name="Htable" type="constructor" line="170">
                    <params>
                        <param name="table" type="JPEGHuffmanTable"/>
                        <param name="isDC" type="boolean"/>
                        <param name="id" type="int"/>
                    </params>
                </method>
                <method name="Htable" type="constructor" line="177">
                    <params>
                        <param name="node" type="Node"/>
                    </params>
                    <scope line="178">
                        <declaration name="attrs" type="NamedNodeMap" line="179"/>
                        <declaration name="count" type="int" line="180"/>
                        <scope line="181"/>
                        <scope line="187">
                            <declaration name="ourNode" type="IIOMetadataNode" line="188"/>
                            <declaration name="table" type="JPEGHuffmanTable" line="189"/>
                            <scope line="191"/>
                        </scope>
                        <scope line="197"/>
                    </scope>
                    <scope line="201"/>
                </method>
                <method name="clone" type="Object" line="208">
                    <comment line="212">
                        won&apos;t happen                        
                    </comment>
                    <declaration name="newGuy" type="Htable" line="209"/>
                    <scope line="210"/>
                    <scope line="212"/>
                    <scope line="213"/>
                    <scope line="216"/>
                </method>
                <method name="getNativeNode" type="IIOMetadataNode" line="222">
                    <declaration name="node" type="IIOMetadataNode" line="223"/>
                </method>
                <method name="print" type="void" line="233">
                    <comment line="240">
                        System.out.print(&quot;Lengths:&quot;);
                        for (int i=0; i&lt;16; i++) {
                        System.out.print(&quot; &quot; + Integer.toString(numCodes[i]));
                        }
                        int count = 0;
                        if (values.length &gt; 16) {
                        System.out.println(&quot;\nFirst 16 Values:&quot;);
                        count = 16;
                        } else {
                        System.out.println(&quot;\nValues:&quot;);
                        count = values.length;
                        }
                        for (int i=0; i&lt;count; i++) {
                        System.out.println(Integer.toString(values[i]&amp;0xff));
                        }                        
                    </comment>
                </method>
            </class>
        </class>
    </source>