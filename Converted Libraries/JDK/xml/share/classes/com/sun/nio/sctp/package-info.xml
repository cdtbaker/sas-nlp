<?xml version="1.0" encoding="UTF-8"?>
    <source package="
 * A Java API for Stream Control Transport Protocol.
 * <P> The Stream Control Transport Protocol (SCTP) is a reliable,
 * message-oriented, transport protocol existing at an equivalent level with UDP
 * (User Datagram Protocol) and TCP (Transmission Control Protocol). SCTP is
 * session oriented and an association between the endpoints must be established
 * before any data can be transmitted.
 * <P> SCTP has direct support for multi-homing, meaning than an endpoint may be
 * represented by more than one address and each address may be used for sending
 * and receiving data, thus providing network redundancy. The connection between
 * two endpoints is referred to as an association between those endpoints.
 * Endpoints can exchange a list of addresses during association setup. One
 * address is designated as the primary address, this is the default address that
 * the peer will use for sending data. A single port number is used across the
 * entire address list at an endpoint for a specific session.
 * <P> SCTP is message based. I/O operations operate upon messages and message
 * boundaries are preserved. Each association may support multiple independant
 * logical streams. Each stream represents a sequence of messages within a single
 * association and streams are independant of one another, meaning that stream
 * identifiers and sequence numbers are included in the data packet to allow
 * sequencing of messages on a per-stream basis.
 * <P> This package provides two programming model styles. The one-to-one style
 * supported by {@link com.sun.nio.sctp.SctpChannel} and {@link com.sun.nio.sctp.SctpServerChannel}, and the one-to-many
 * style supported by {@link com.sun.nio.sctp.SctpMultiChannel}.
 * The semantics of the one-to-one style interface are very similar to TCP.
 * An {@code SctpChannel} can only control one SCTP association. The
 * semantics of the one-to-many style interface are very similar to UDP. An{@code SctpMutliChannel} can control multiple SCTP associations.
 * <P> Applications can send and receive per-message ancillary information through{@link com.sun.nio.sctp.MessageInfo}. For example, the stream number that
 * the message it is to be sent or received from. The SCTP stack is event driven
 * and applications can receive notifications of certain SCTP events by invoking
 * the {@code receive} method of the SCTP channel with an appropriate {@link com.sun.nio.sctp.NotificationHandler notification handler}.
 * <P> The SCTP protocol is defined by
 * <A HREF="http://tools.ietf.org/html/rfc4960">RFC4960</A>, and the optional
 * extension for <I>Dynamic Address Reconfiguration</I> is defined by
 * <A HREF="http://tools.ietf.org/html/rfc5061">RFC5061</A>.
 * @since 1.7
 */
package com.sun.nio.sctp">
        <javadoc line="26">
            A Java API for Stream Control Transport Protocol.
              &lt;P&gt; The Stream Control Transport Protocol (SCTP) is a reliable,
              message-oriented, transport protocol existing at an equivalent level with UDP
              (User Datagram Protocol) and TCP (Transmission Control Protocol). SCTP is
              session oriented and an association between the endpoints must be established
              before any data can be transmitted.
              &lt;P&gt; SCTP has direct support for multi-homing, meaning than an endpoint may be
              represented by more than one address and each address may be used for sending
              and receiving data, thus providing network redundancy. The connection between
              two endpoints is referred to as an association between those endpoints.
              Endpoints can exchange a list of addresses during association setup. One
              address is designated as the primary address, this is the default address that
              the peer will use for sending data. A single port number is used across the
              entire address list at an endpoint for a specific session.
              &lt;P&gt; SCTP is message based. I/O operations operate upon messages and message
              boundaries are preserved. Each association may support multiple independant
              logical streams. Each stream represents a sequence of messages within a single
              association and streams are independant of one another, meaning that stream
              identifiers and sequence numbers are included in the data packet to allow
              sequencing of messages on a per-stream basis.
              &lt;P&gt; This package provides two programming model styles. The one-to-one style
              supported by {@link com.sun.nio.sctp.SctpChannel} and {@link com.sun.nio.sctp.SctpServerChannel}, and the one-to-many
              style supported by {@link com.sun.nio.sctp.SctpMultiChannel}.
              The semantics of the one-to-one style interface are very similar to TCP.
              An {@code SctpChannel} can only control one SCTP association. The
              semantics of the one-to-many style interface are very similar to UDP. An{@code SctpMutliChannel} can control multiple SCTP associations.
              &lt;P&gt; Applications can send and receive per-message ancillary information through{@link com.sun.nio.sctp.MessageInfo}. For example, the stream number that
              the message it is to be sent or received from. The SCTP stack is event driven
              and applications can receive notifications of certain SCTP events by invoking
              the {@code receive} method of the SCTP channel with an appropriate {@link com.sun.nio.sctp.NotificationHandler notification handler}.
              &lt;P&gt; The SCTP protocol is defined by
              &lt;A HREF=&quot;http://tools.ietf.org/html/rfc4960&quot;&gt;RFC4960&lt;/A&gt;, and the optional
              extension for &lt;I&gt;Dynamic Address Reconfiguration&lt;/I&gt; is defined by
              &lt;A HREF=&quot;http://tools.ietf.org/html/rfc5061&quot;&gt;RFC5061&lt;/A&gt;.            
            <since>
                1.7                
            </since>
        </javadoc>
    </source>