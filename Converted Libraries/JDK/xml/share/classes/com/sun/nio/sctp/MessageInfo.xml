<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.nio.sctp">
        <import package="java.net.SocketAddress"/>
        <class name="MessageInfo" line="3">
            <javadoc line="3">
                The {@code MessageInfo} class provides additional ancillary information about
                  messages.
                  &lt;P&gt; Received SCTP messages, returned by{@link SctpChannel#receive SctpChannel.receive} and {@link SctpMultiChannel#receive SctpMultiChannel.receive},
                  return a {@code MessageInfo} instance that can be queried to determine
                  ancillary information about the received message. Messages being sent should
                  use one of the {@link #createOutgoing(java.net.SocketAddress,int)createOutgoing} methods to provide ancillary data for the message being
                  sent, and may use the appropriate setter methods to override the default
                  values provided for {@link #isUnordered() unordered}, {@link #timeToLive()timeToLive}, {@link #isComplete() complete} and {@link #payloadProtocolID()payloadProtocolID}, before sending the message.
                  &lt;P&gt; For out going messages the {@code timeToLive} parameter is a time period
                  that the sending side SCTP stack may expire the message if it has not been
                  sent. This time period is an indication to the stack that the message is no
                  longer required to be sent after the time period expires. It is not a hard
                  timeout and may be influenced by whether the association supports the partial
                  reliability extension, &lt;a href=http://www.ietf.org/rfc/rfc3758.txt&gt;RFC 3758
                  &lt;a&gt;
                  &lt;P&gt; {@code MessageInfo} instances are not safe for use by multiple concurrent
                  threads. If a MessageInfo is to be used by more than one thread then access
                  to the MessageInfo should be controlled by appropriate synchronization.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <javadoc line="25">
                Initializes a new instance of this class.                
            </javadoc>
            <method name="MessageInfo" type="constructor" line="28"/>
            <javadoc line="30">
                Creates a {@code MessageInfo} instance suitable for use when
                  sending a message.
                  &lt;P&gt; The returned instance will have its {@link #isUnordered() unordered}value set to {@code false}, its {@link #timeToLive() timeToLive} value
                  set to {@code 0}, its {@link #isComplete() complete} value set
                  to {@code true}, and its {@link #payloadProtocolID() payloadProtocolID}value set to {@code 0}. These values, if required, can be set through
                  the appropriate setter method before sending the message.                
                <param>
                    addressFor a connected {@code SctpChannel} the address is the
                      preferred peer address of the association to send the message
                      to, or {@code null} to use the peer primary address. For an{@code SctpMultiChannel} the address is used to determine
                      the association, or if no association exists with a peer of that
                      address then one is setup.                    
                </param>
                <param>
                    streamNumberThe stream number that the message will be sent on                    
                </param>
                <return>
                    The outgoing message info                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the streamNumber is negative or greater than {@code 65536}                    
                </throws>
            </javadoc>
            <method name="createOutgoing" type="MessageInfo" line="46">
                <params>
                    <param name="address" type="SocketAddress"/>
                    <param name="streamNumber" type="int"/>
                </params>
            </method>
            <javadoc line="50">
                Creates a {@code MessageInfo} instance suitable for use when
                  sending a message to a given association. Typically used for{@code SctpMultiChannel} when an association has already been setup.
                  &lt;P&gt; The returned instance will have its {@link #isUnordered() unordered}value set to {@code false}, its {@link #timeToLive() timeToLive} value
                  set to {@code 0}, its {@link #isComplete() complete} value set
                  to {@code true}, and its {@link #payloadProtocolID() payloadProtocolID}value set to {@code 0}. These values, if required, can be set through
                  the appropriate setter method before sending the message.                
                <param>
                    associationThe association to send the message on                    
                </param>
                <param>
                    addressThe preferred peer address of the association to send the message
                      to, or {@code null} to use the peer primary address                    
                </param>
                <param>
                    streamNumberThe stream number that the message will be sent on.                    
                </param>
                <return>
                    The outgoing message info                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf {@code association} is {@code null}, or the streamNumber is
                      negative or greater than {@code 65536}                    
                </throws>
            </javadoc>
            <method name="createOutgoing" type="MessageInfo" line="65">
                <params>
                    <param name="association" type="Association"/>
                    <param name="address" type="SocketAddress"/>
                    <param name="streamNumber" type="int"/>
                </params>
            </method>
            <method name="address" type="SocketAddress" line="70"/>
            <javadoc line="70">
                Returns the source socket address if the message has been received,
                  otherwise the preferred destination of the message to be sent.                
                <return>
                    The socket address, or {@code null} if this instance is to be
                      used for sending a message and has been construced without
                      specifying a preferred destination address                    
                </return>
            </javadoc>
            <method name="association" type="Association" line="78"/>
            <javadoc line="78">
                Returns the association that the message was received on, if the message
                  has been received, otherwise the association that the message is to be
                  sent on.                
                <return>
                    The association, or {@code null} if this instance is to be
                      used for sending a message and has been construced using the
                      the {@link #createOutgoing(SocketAddress,int)createOutgoing(SocketAddress,int)} static factory method                    
                </return>
            </javadoc>
            <method name="bytes" type="int" line="87"/>
            <javadoc line="87">
                Returns the number of bytes read for the received message.
                  &lt;P&gt; This method is only appicable for received messages, it has no
                  meaning for messages being sent.                
                <return>
                    The number of bytes read, {@code -1} if the channel is an {@link SctpChannel} that has reached end-of-stream, otherwise{@code 0}                    
                </return>
            </javadoc>
            <method name="isComplete" type="boolean" line="94"/>
            <javadoc line="94">
                Tells whether or not the message is complete.
                  &lt;P&gt; For received messages {@code true} indicates that the message was
                  completely received. For messages being sent {@code true} indicates that
                  the message is complete, {@code false} indicates that the message is not
                  complete. How the send channel interprets this value depends on the value
                  of its {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETESCTP_EXPLICIT_COMPLETE} socket option.                
                <return>
                    {@code true} if, and only if, the message is complete                    
                </return>
            </javadoc>
            <method name="complete" type="MessageInfo" line="104"/>
            <javadoc line="104">
                Sets whether or not the message is complete.
                  &lt;P&gt; For messages being sent {@code true} indicates that
                  the message is complete, {@code false} indicates that the message is not
                  complete. How the send channel interprets this value depends on the value
                  of its {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETESCTP_EXPLICIT_COMPLETE} socket option.                
                <param>
                    complete {@code true} if, and only if, the message is complete                    
                </param>
                <return>
                    This MessageInfo                    
                </return>
                <see>
                    MessageInfo#isComplete()                    
                </see>
            </javadoc>
            <method name="isUnordered" type="boolean" line="115"/>
            <javadoc line="115">
                Tells whether or not the message is unordered. For received messages{@code true} indicates that the message was sent non-ordered. For
                  messages being sent {@code true} requests the un-ordered delivery of the
                  message, {@code false} indicates that the message is ordered.                
                <return>
                    {@code true} if the message is unordered, otherwise{@code false}                    
                </return>
            </javadoc>
            <method name="unordered" type="MessageInfo" line="122"/>
            <javadoc line="122">
                Sets whether or not the message is unordered.                
                <param>
                    unordered {@code true} requests the un-ordered delivery of the message,{@code false} indicates that the message is ordered.                    
                </param>
                <return>
                    This MessageInfo                    
                </return>
                <see>
                    MessageInfo#isUnordered()                    
                </see>
            </javadoc>
            <method name="payloadProtocolID" type="int" line="129"/>
            <javadoc line="129">
                Returns the payload protocol Identifier.
                  &lt;P&gt; A value indicating the type of payload protocol data being
                  transmitted/received. This value is passed as opaque data by SCTP.{@code 0} indicates an unspecified payload protocol identifier.                
                <return>
                    The Payload Protocol Identifier                    
                </return>
            </javadoc>
            <method name="payloadProtocolID" type="MessageInfo" line="136"/>
            <javadoc line="136">
                Sets the payload protocol Identifier.
                  &lt;P&gt; A value indicating the type of payload protocol data being
                  transmitted. This value is passed as opaque data by SCTP.                
                <param>
                    ppidThe Payload Protocol Identifier, or {@code 0} indicate an
                      unspecified payload protocol identifier.                    
                </param>
                <return>
                    This MessageInfo                    
                </return>
                <see>
                    MessageInfo#payloadProtocolID()                    
                </see>
            </javadoc>
            <method name="streamNumber" type="int" line="146"/>
            <javadoc line="146">
                Returns the stream number that the message was received on, if the
                  message has been received, otherwise the stream number that the message
                  is to be sent on.                
                <return>
                    The stream number                    
                </return>
            </javadoc>
            <method name="streamNumber" type="MessageInfo" line="153"/>
            <javadoc line="153">
                Sets the stream number that the message is to be sent on.                
                <param>
                    streamNumberThe stream number                    
                </param>
                <throws>
                    IllegalArgumentExceptionIf the streamNumber is negative or greater than {@code 65536}                    
                </throws>
                <return>
                    This MessageInfo                    
                </return>
            </javadoc>
            <method name="timeToLive" type="long" line="160"/>
            <javadoc line="160">
                The time period that the sending side may expire the message if it has
                  not been sent, or {@code 0} to indicate that no timeout should occur. This
                  value is only applicable for messages being sent, it has no meaning for
                  received messages.                
                <return>
                    The time period in milliseconds, or {@code 0}                    
                </return>
            </javadoc>
            <method name="timeToLive" type="MessageInfo" line="168"/>
            <javadoc line="168">
                Sets the time period that the sending side may expire the message if it
                  has not been sent.                
                <param>
                    millisThe time period in milliseconds, or {@code 0} to indicate that no
                      timeout should occur                    
                </param>
                <return>
                    This MessageInfo                    
                </return>
                <see>
                    MessageInfo#timeToLive()                    
                </see>
            </javadoc>
        </class>
    </source>