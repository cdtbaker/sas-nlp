<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.nio.sctp">
        <import package="java.net.SocketAddress"/>
        <import package="sun.nio.ch.SctpStdSocketOption"/>
        <class name="SctpStandardSocketOptions" line="30">
            <javadoc line="30">
                SCTP channels supports the socket options defined by this class
                  (as well as those listed in the particular channel class) and may support
                  additional Implementation specific socket options.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="SctpStandardSocketOptions" type="constructor" line="38"/>
            <declaration name="SCTP_DISABLE_FRAGMENTS" type="SctpSocketOption&lt;Boolean&gt;" line="39"/>
            <javadoc line="39">
                Enables or disables message fragmentation.
                  &lt;P&gt; The value of this socket option is a {@code Boolean} that represents
                  whether the option is enabled or disabled. If enabled no SCTP message
                  fragmentation will be performed. Instead if a message being sent
                  exceeds the current PMTU size, the message will NOT be sent and
                  an error will be indicated to the user.
                  &lt;P&gt; It is implementation specific whether or not this option is
                  supported.                
            </javadoc>
            <declaration name="SCTP_EXPLICIT_COMPLETE" type="SctpSocketOption&lt;Boolean&gt;" line="55"/>
            <javadoc line="55">
                Enables or disables explicit message completion.
                  &lt;p&gt; The value of this socket option is a {@code Boolean} that represents
                  whether the option is enabled or disabled. When this option is enabled,
                  the {@code send} method may be invoked multiple times to a send message.
                  The {@code isComplete} parameter of the {@link MessageInfo} must only
                  be set to {@code true} for the final send to indicate that the message is
                  complete. If this option is disabled then each individual {@code send}invocation is considered complete.
                  &lt;P&gt; The default value of the option is {@code false} indicating that the
                  option is disabled. It is implementation specific whether or not this
                  option is supported.                
            </javadoc>
            <declaration name="SCTP_FRAGMENT_INTERLEAVE" type="SctpSocketOption&lt;Integer&gt;" line="74"/>
            <javadoc line="74">
                Fragmented interleave controls how the presentation of messages occur
                  for the message receiver. There are three levels of fragment interleave
                  defined. Two of the levels effect {@link SctpChannel}, while{@link SctpMultiChannel} is effected by all three levels.
                  &lt;P&gt; This option takes an {@code Integer} value. It can be set to a value
                  of {@code 0}, {@code 1} or {@code 2}.
                  &lt;P&gt; Setting the three levels provides the following receiver
                  interactions:
                  &lt;P&gt; {@code level 0} - Prevents the interleaving of any messages. This
                  means that when a partial delivery begins, no other messages will be
                  received except the message being partially delivered. If another message
                  arrives on a different stream (or association) that could be delivered,
                  it will be blocked waiting for the user to read all of the partially
                  delivered message.
                  &lt;P&gt; {@code level 1} - Allows interleaving of messages that are from
                  different associations. For {@code SctpChannel}, level 0 and
                  level 1 have the same meaning since an {@code SctpChannel} always
                  receives messages from the same association. Note that setting an {@codeSctpMultiChannel} to this level may cause multiple partial
                  delivers from different associations but for any given association, only
                  one message will be delivered until all parts of a message have been
                  delivered. This means that one large message, being read with an
                  association identification of &quot;X&quot;, will block other messages from
                  association &quot;X&quot; from being delivered.
                  &lt;P&gt; {@code level 2} - Allows complete interleaving of messages. This
                  level requires that the sender carefully observe not only the peer{@code Association} but also must pay careful attention to the stream
                  number. With this option enabled a partially delivered message may begin
                  being delivered for association &quot;X&quot; stream &quot;Y&quot; and the next subsequent
                  receive may return a message from association &quot;X&quot; stream &quot;Z&quot;. Note that
                  no other messages would be delivered for association &quot;X&quot; stream &quot;Y&quot;
                  until all of stream &quot;Y&quot;&apos;s partially delivered message was read.
                  Note that this option effects both channel types.  Also note that
                  for an {@code SctpMultiChannel} not only may another streams
                  message from the same association be delivered from the next receive,
                  some other associations message may be delivered upon the next receive.
                  &lt;P&gt; It is implementation specific whether or not this option is
                  supported.                
            </javadoc>
            <declaration name="SCTP_INIT_MAXSTREAMS" type="SctpSocketOption&lt;SctpStandardSocketOptions.InitMaxStreams&gt;" line="125"/>
            <javadoc line="125">
                The maximum number of streams requested by the local endpoint during
                  association initialization.
                  &lt;P&gt; The value of this socket option is an {@link SctpStandardSocketOptions.InitMaxStreams InitMaxStreams}, that represents
                  the maximum number of inbound and outbound streams that an association
                  on the channel is prepared to support.
                  &lt;P&gt; For an {@link SctpChannel} this option may only be used to
                  change the number of inbound/outbound streams prior to connecting.
                  &lt;P&gt; For an {@link SctpMultiChannel} this option determines
                  the maximum number of inbound/outbound streams new associations setup
                  on the channel will be prepared to support.
                  &lt;P&gt; For an {@link SctpServerChannel} this option determines the
                  maximum number of inbound/outbound streams accepted sockets will
                  negotiate with their connecting peer.
                  &lt;P&gt; In all cases the value set by this option is used in the negotiation
                  of new associations setup on the channel&apos;s socket and the actual
                  maximum number of inbound/outbound streams that have been negotiated
                  with the peer can be retrieved from the appropriate {@link Association}. The {@code Association} can be retrieved from the{@link AssociationChangeNotification.AssocChangeEvent#COMM_UP COMM_UP}{@link AssociationChangeNotification} belonging to that association.
                  &lt;p&gt; This value is bounded by the actual implementation. In other
                  words the user may be able to support more streams than the Operating
                  System. In such a case, the Operating System limit may override the
                  value requested by the user. The default value of 0 indicates to use
                  the endpoints default value.                
            </javadoc>
            <declaration name="SCTP_NODELAY" type="SctpSocketOption&lt;Boolean&gt;" line="164"/>
            <javadoc line="164">
                Enables or disables a Nagle-like algorithm.
                  &lt;P&gt; The value of this socket option is a {@code Boolean} that represents
                  whether the option is enabled or disabled. SCTP uses an algorithm like
                  &lt;em&gt;The Nagle Algorithm&lt;/em&gt; to coalesce short segments and
                  improve network efficiency.                
            </javadoc>
            <declaration name="SCTP_PRIMARY_ADDR" type="SctpSocketOption&lt;SocketAddress&gt;" line="176"/>
            <javadoc line="176">
                Requests that the local SCTP stack use the given peer address as
                  the association primary.
                  &lt;P&gt; The value of this socket option is a {@code SocketAddress}that represents the peer address that the local SCTP stack should use as
                  the association primary. The address must be one of the association
                  peer&apos;s addresses.
                  &lt;P&gt; An {@code SctpMultiChannel} can control more than one
                  association, the association parameter must be given when setting or
                  retrieving this option.
                  &lt;P&gt; Since {@code SctpChannel} only controls one association,
                  the association parameter is not required and this option can be
                  set or queried directly.                
            </javadoc>
            <declaration name="SCTP_SET_PEER_PRIMARY_ADDR" type="SctpSocketOption&lt;SocketAddress&gt;" line="197"/>
            <javadoc line="197">
                Requests that the peer mark the enclosed address as the association
                  primary.
                  &lt;P&gt; The value of this socket option is a {@code SocketAddress}that represents the local address that the peer should use as its
                  primary address. The given address must be one of the association&apos;s
                  locally bound addresses.
                  &lt;P&gt; An {@code SctpMultiChannel} can control more than one
                  association, the association parameter must be given when setting or
                  retrieving this option.
                  &lt;P&gt; Since {@code SctpChannel} only controls one association,
                  the association parameter is not required and this option can be
                  queried directly.
                  &lt;P&gt; Note, this is a set only option and cannot be retrieved by {@codegetOption}. It is implementation specific whether or not this
                  option is supported.                
            </javadoc>
            <declaration name="SO_SNDBUF" type="SctpSocketOption&lt;Integer&gt;" line="222"/>
            <javadoc line="222">
                The size of the socket send buffer.
                  &lt;p&gt; The value of this socket option is an {@code Integer} that is the
                  size of the socket send buffer in bytes. The socket send buffer is an
                  output buffer used by the networking implementation. It may need to be
                  increased for high-volume connections. The value of the socket option is
                  a &lt;em&gt;hint&lt;/em&gt; to the implementation to size the buffer and the actual
                  size may differ. The socket option can be queried to retrieve the actual
                  size.
                  &lt;p&gt; For {@code SctpChannel}, this controls the amount of data
                  the SCTP stack may have waiting in internal buffers to be sent. This
                  option therefore bounds the maximum size of data that can be sent in a
                  single send call.
                  &lt;P&gt; For {@code SctpMultiChannel}, the effect is the same as for {@codeSctpChannel}, except that it applies to all associations. The option
                  applies to each association&apos;s window size separately.
                  &lt;p&gt; An implementation allows this socket option to be set before the
                  socket is bound or connected. Whether an implementation allows the
                  socket send buffer to be changed after the socket is bound is system
                  dependent.                
            </javadoc>
            <declaration name="SO_RCVBUF" type="SctpSocketOption&lt;Integer&gt;" line="251"/>
            <javadoc line="251">
                The size of the socket receive buffer.
                  &lt;P&gt; The value of this socket option is an {@code Integer} that is the
                  size of the socket receive buffer in bytes. The socket receive buffer is
                  an input buffer used by the networking implementation. It may need to be
                  increased for high-volume connections or decreased to limit the possible
                  backlog of incoming data. The value of the socket option is a
                  &lt;em&gt;hint&lt;/em&gt; to the implementation to size the buffer and the actual
                  size may differ.
                  &lt;P&gt; For {@code SctpChannel}, this controls the receiver window size.
                  &lt;P&gt; For {@code SctpMultiChannel}, the meaning is implementation
                  dependent. It might control the receive buffer for each association bound
                  to the socket descriptor or it might control the receive buffer for the
                  whole socket.
                  &lt;p&gt; An implementation allows this socket option to be set before the
                  socket is bound or connected. Whether an implementation allows the
                  socket receive buffer to be changed after the socket is bound is system
                  dependent.                
            </javadoc>
            <declaration name="SO_LINGER" type="SctpSocketOption&lt;Integer&gt;" line="278"/>
            <javadoc line="278">
                Linger on close if data is present.
                  &lt;p&gt; The value of this socket option is an {@code Integer} that controls
                  the action taken when unsent data is queued on the socket and a method
                  to close the socket is invoked. If the value of the socket option is zero
                  or greater, then it represents a timeout value, in seconds, known as the
                  &lt;em&gt;linger interval&lt;/em&gt;. The linger interval is the timeout for the{@code close} method to block while the operating system attempts to
                  transmit the unsent data or it decides that it is unable to transmit the
                  data. If the value of the socket option is less than zero then the option
                  is disabled. In that case the {@code close} method does not wait until
                  unsent data is transmitted; if possible the operating system will transmit
                  any unsent data before the connection is closed.
                  &lt;p&gt; This socket option is intended for use with sockets that are configured
                  in {@link java.nio.channels.SelectableChannel#isBlocking() blocking} mode
                  only. The behavior of the {@code close} method when this option is
                  enabled on a non-blocking socket is not defined.
                  &lt;p&gt; The initial value of this socket option is a negative value, meaning
                  that the option is disabled. The option may be enabled, or the linger
                  interval changed, at any time. The maximum value of the linger interval
                  is system dependent. Setting the linger interval to a value that is
                  greater than its maximum value causes the linger interval to be set to
                  its maximum value.                
            </javadoc>
            <class name="InitMaxStreams" line="309">
                <javadoc line="309">
                    This class is used to set the maximum number of inbound/outbound streams
                      used by the local endpoint during association initialization. An
                      instance of this class is used to set the {@link SctpStandardSocketOptions#SCTP_INIT_MAXSTREAMS SCTP_INIT_MAXSTREAMS}socket option.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="maxInStreams" type="int" line="319"/>
                <declaration name="maxOutStreams" type="int" line="320"/>
                <method name="InitMaxStreams" type="constructor" line="322">
                    <params>
                        <param name="maxInStreams" type="int"/>
                        <param name="maxOutStreams" type="int"/>
                    </params>
                </method>
                <javadoc line="327">
                    Creates an InitMaxStreams instance.                    
                    <param>
                        maxInStreamsThe maximum number of inbound streams, where{@code 0 &lt;= maxInStreams &lt;= 65536}                        
                    </param>
                    <param>
                        maxOutStreamsThe maximum number of outbound streams, where{@code 0 &lt;= maxOutStreams &lt;= 65536}                        
                    </param>
                    <return>
                        An {@code InitMaxStreams} instance                        
                    </return>
                    <throws>
                        IllegalArgumentExceptionIf an argument is outside of specified bounds                        
                    </throws>
                </javadoc>
                <method name="create" type="InitMaxStreams" line="344">
                    <params>
                        <param name="maxInStreams" type="int"/>
                        <param name="maxOutStreams" type="int"/>
                    </params>
                </method>
                <javadoc line="355">
                    Returns the maximum number of inbound streams.                    
                    <return>
                        Maximum inbound streams                        
                    </return>
                </javadoc>
                <method name="maxInStreams" type="int" line="360"/>
                <javadoc line="364">
                    Returns the maximum number of outbound streams.                    
                    <return>
                        Maximum outbound streams                        
                    </return>
                </javadoc>
                <method name="maxOutStreams" type="int" line="369"/>
                <javadoc line="373">
                    Returns a string representation of this init max streams, including
                      the maximum in and out bound streams.                    
                    <return>
                        A string representation of this init max streams                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="380">
                    <declaration name="sb" type="StringBuilder" line="381"/>
                </method>
                <javadoc line="388">
                    Returns true if the specified object is another {@code InitMaxStreams}instance with the same number of in and out bound streams.                    
                    <param>
                        objThe object to be compared with this init max streams                        
                    </param>
                    <return>
                        true if the specified object is another{@code InitMaxStreams} instance with the same number of in
                          and out bound streams                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="400">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="401">
                        <declaration name="that" type="InitMaxStreams" line="402"/>
                    </scope>
                </method>
                <javadoc line="410">
                    Returns a hash code value for this init max streams.                    
                </javadoc>
                <method name="hashCode" type="int" line="414">
                    <declaration name="hash" type="int" line="415"/>
                </method>
            </class>
        </class>
    </source>