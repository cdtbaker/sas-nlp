<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.nio.sctp">
        <import package="java.net.SocketAddress"/>
        <import package="java.net.InetAddress"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Set"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.channels.spi.AbstractSelectableChannel"/>
        <import package="java.nio.channels.spi.SelectorProvider"/>
        <import package="java.nio.channels.ClosedChannelException"/>
        <import package="java.nio.channels.SelectionKey"/>
        <class name="SctpChannel" line="37">
            <extends class="AbstractSelectableChannel"/>
            <javadoc line="37">
                A selectable channel for message-oriented connected SCTP sockets.
                  &lt;P&gt; An SCTP channel can only control one SCTP association.
                  An {@code SCTPChannel} is created by invoking one of the{@link #open open} methods of this class. A newly-created channel is open but
                  not yet connected, that is, there is no association setup with a remote peer.
                  An attempt to invoke an I/O operation upon an unconnected
                  channel will cause a {@link java.nio.channels.NotYetConnectedException} to be
                  thrown. An association can be setup by connecting the channel using one of
                  its {@link #connect connect} methods. Once connected, the channel remains
                  connected until it is closed. Whether or not a channel is connected may be
                  determined by invoking {@link #getRemoteAddresses getRemoteAddresses}.
                  &lt;p&gt; SCTP channels support &lt;i&gt;non-blocking connection:&lt;/i&gt;&amp;nbsp;A
                  channel may be created and the process of establishing the link to
                  the remote socket may be initiated via the {@link #connect connect} method
                  for later completion by the {@link #finishConnect finishConnect} method.
                  Whether or not a connection operation is in progress may be determined by
                  invoking the {@link #isConnectionPending isConnectionPending} method.
                  &lt;p&gt; Socket options are configured using the{@link #setOption(SctpSocketOption,Object) setOption} method. An SCTP
                  channel support the following options:
                  &lt;blockquote&gt;
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Option Name&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_DISABLE_FRAGMENTSSCTP_DISABLE_FRAGMENTS} &lt;/td&gt;
                  &lt;td&gt; Enables or disables message fragmentation &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETESCTP_EXPLICIT_COMPLETE} &lt;/td&gt;
                  &lt;td&gt; Enables or disables explicit message completion &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_FRAGMENT_INTERLEAVESCTP_FRAGMENT_INTERLEAVE} &lt;/td&gt;
                  &lt;td&gt; Controls how the presentation of messages occur for the message
                  receiver &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_INIT_MAXSTREAMSSCTP_INIT_MAXSTREAMS} &lt;/td&gt;
                  &lt;td&gt; The maximum number of streams requested by the local endpoint during
                  association initialization &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_NODELAY SCTP_NODELAY} &lt;/td&gt;
                  &lt;td&gt; Enables or disable a Nagle-like algorithm &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_PRIMARY_ADDRSCTP_PRIMARY_ADDR} &lt;/td&gt;
                  &lt;td&gt; Requests that the local SCTP stack use the given peer address as the
                  association primary &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_SET_PEER_PRIMARY_ADDRSCTP_SET_PEER_PRIMARY_ADDR} &lt;/td&gt;
                  &lt;td&gt; Requests that the peer mark the enclosed address as the association
                  primary &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SO_SNDBUFSO_SNDBUF} &lt;/td&gt;
                  &lt;td&gt; The size of the socket send buffer &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SO_RCVBUFSO_RCVBUF} &lt;/td&gt;
                  &lt;td&gt; The size of the socket receive buffer &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SO_LINGERSO_LINGER} &lt;/td&gt;
                  &lt;td&gt; Linger on close if data is present (when configured in blocking mode
                  only) &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  Additional (implementation specific) options may also be supported. The list
                  of options supported is obtained by invoking the {@link #supportedOptions()supportedOptions}  method.
                  &lt;p&gt; SCTP channels are safe for use by multiple concurrent threads.
                  They support concurrent reading and writing, though at most one thread may be
                  reading and at most one thread may be writing at any given time. The{@link #connect connect} and {@link #finishConnectfinishConnect} methods are mutually synchronized against each other, and
                  an attempt to initiate a send or receive operation while an invocation of one
                  of these methods is in progress will block until that invocation is complete.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <javadoc line="140">
                Initializes a new instance of this class.                
                <param>
                    providerThe selector provider for this channel                    
                </param>
            </javadoc>
            <method name="SctpChannel" type="constructor" line="146">
                <params>
                    <param name="provider" type="SelectorProvider"/>
                </params>
            </method>
            <javadoc line="150">
                Opens an SCTP channel.
                  &lt;P&gt; The new channel is unbound and unconnected.                
                <return>
                    A new SCTP channel                    
                </return>
                <throws>
                    UnsupportedOperationExceptionIf the SCTP protocol is not supported                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="open" type="SctpChannel" line="164"/>
            <javadoc line="168">
                Opens an SCTP channel and connects it to a remote address.
                  &lt;P&gt; This is a convenience method and is equivalent to evaluating the
                  following expression:
                  &lt;blockquote&gt;&lt;pre&gt;
                  open().connect(remote, maxOutStreams, maxInStreams);
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    remoteThe remote address to which the new channel is to be connected                    
                </param>
                <param>
                    maxOutStreamsThe number of streams that the application wishes to be able
                      to send to. Must be non negative and no larger than {@code 65536}.{@code 0} to use the endpoints default value.                    
                </param>
                <param>
                    maxInStreamsThe maximum number of inbound streams the application is prepared
                      to support. Must be non negative and no larger than {@code 65536}.{@code 0} to use the endpoints default value.                    
                </param>
                <return>
                    A new SCTP channel connected to the given address                    
                </return>
                <throws>
                    java.nio.channels.AsynchronousCloseExceptionIf another thread closes this channel
                      while the connect operation is in progress                    
                </throws>
                <throws>
                    java.nio.channels.ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the connect operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    java.nio.channels.UnresolvedAddressExceptionIf the given remote address is not fully resolved                    
                </throws>
                <throws>
                    java.nio.channels.UnsupportedAddressTypeExceptionIf the type of the given remote address is not supported                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed
                      and it does not permit access to the given remote peer                    
                </throws>
                <throws>
                    UnsupportedOperationExceptionIf the SCTP protocol is not supported                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="open" type="SctpChannel" line="219">
                <params>
                    <param name="remote" type="SocketAddress"/>
                    <param name="maxOutStreams" type="int"/>
                    <param name="maxInStreams" type="int"/>
                </params>
                <declaration name="ssc" type="SctpChannel" line="220"/>
            </method>
            <method name="association" type="Association" line="225"/>
            <javadoc line="225">
                Returns the association on this channel&apos;s socket.                
                <return>
                    the association, or {@code null} if the channel's socket is not
                      connected.                    
                </return>
                <throws>
                    ClosedChannelExceptionIf the channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="bind" type="SctpChannel" line="239"/>
            <javadoc line="239">
                Binds the channel&apos;s socket to a local address.
                  &lt;P&gt; This method is used to establish a relationship between the socket
                  and the local addresses. Once a relationship is established then
                  the socket remains bound until the channel is closed. This relationship
                  may not necesssarily be with the address {@code local} as it may be removed
                  by {@link #unbindAddress unbindAddress}, but there will always be at least
                  one local address bound to the channel&apos;s socket once an invocation of
                  this method successfully completes.
                  &lt;P&gt; Once the channel&apos;s socket has been successfully bound to a specific
                  address, that is not automatically assigned, more addresses
                  may be bound to it using {@link #bindAddress bindAddress}, or removed
                  using {@link #unbindAddress unbindAddress}.                
                <param>
                    localThe local address to bind the socket, or {@code null} to
                      bind the socket to an automatically assigned socket address                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    java.nio.channels.AlreadyConnectedExceptionIf this channel is already connected                    
                </throws>
                <throws>
                    java.nio.channels.ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    java.nio.channels.ConnectionPendingExceptionIf a non-blocking connection operation is already in progress on this channel                    
                </throws>
                <throws>
                    java.nio.channels.AlreadyBoundExceptionIf this channel is already bound                    
                </throws>
                <throws>
                    java.nio.channels.UnsupportedAddressTypeExceptionIf the type of the given address is not supported                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="bindAddress" type="SctpChannel" line="282"/>
            <javadoc line="282">
                Adds the given address to the bound addresses for the channel&apos;s
                  socket.
                  &lt;P&gt; The given address must not be the {@link java.net.InetAddress#isAnyLocalAddress wildcard} address.
                  The channel must be first bound using {@link #bind bind} before
                  invoking this method, otherwise {@link java.nio.channels.NotYetBoundException} is thrown. The {@link #bind bind}method takes a {@code SocketAddress} as its argument which typically
                  contains a port number as well as an address. Addresses subquently bound
                  using this method are simply addresses as the SCTP port number remains
                  the same for the lifetime of the channel.
                  &lt;P&gt; Adding addresses to a connected association is optional functionality.
                  If the endpoint supports dynamic address reconfiguration then it may
                  send the appropriate message to the peer to change the peers address
                  lists.                
                <param>
                    addressThe address to add to the bound addresses for the socket                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    java.nio.channels.ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    java.nio.channels.ConnectionPendingExceptionIf a non-blocking connection operation is already in progress on
                      this channel                    
                </throws>
                <throws>
                    java.nio.channels.NotYetBoundExceptionIf this channel is not yet bound                    
                </throws>
                <throws>
                    java.nio.channels.AlreadyBoundExceptionIf this channel is already bound to the given address                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf address is {@code null} or the {@link java.net.InetAddress#isAnyLocalAddress wildcard} address                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="unbindAddress" type="SctpChannel" line="329"/>
            <javadoc line="329">
                Removes the given address from the bound addresses for the channel&apos;s
                  socket.
                  &lt;P&gt; The given address must not be the {@link java.net.InetAddress#isAnyLocalAddress wildcard} address.
                  The channel must be first bound using {@link #bind bind} before
                  invoking this method, otherwise {@link java.nio.channels.NotYetBoundException}is thrown. If this method is invoked on a channel that does not have{@code address} as one of its bound addresses or that has only one
                  local address bound to it, then this method throws{@link IllegalUnbindException}.
                  The initial address that the channel&apos;s socket is bound to using {@link #bind bind} may be removed from the bound addresses for the channel&apos;s socket.
                  &lt;P&gt; Removing addresses from a connected association is optional
                  functionality. If the endpoint supports dynamic address reconfiguration
                  then it may send the appropriate message to the peer to change the peers
                  address lists.                
                <param>
                    addressThe address to remove from the bound addresses for the socket                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    java.nio.channels.ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    java.nio.channels.ConnectionPendingExceptionIf a non-blocking connection operation is already in progress on
                      this channel                    
                </throws>
                <throws>
                    java.nio.channels.NotYetBoundExceptionIf this channel is not yet bound                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf address is {@code null} or the {@link java.net.InetAddress#isAnyLocalAddress wildcard} address                    
                </throws>
                <throws>
                    IllegalUnbindExceptionIf {@code address} is not bound to the channel's socket. or
                      the channel has only one address bound to it                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="connect" type="boolean" line="378"/>
            <javadoc line="378">
                Connects this channel&apos;s socket.
                  &lt;P&gt; If this channel is in non-blocking mode then an invocation of this
                  method initiates a non-blocking connection operation.  If the connection
                  is established immediately, as can happen with a local connection, then
                  this method returns {@code true}.  Otherwise this method returns{@code false} and the connection operation must later be completed by
                  invoking the {@link #finishConnect finishConnect} method.
                  &lt;P&gt; If this channel is in blocking mode then an invocation of this
                  method will block until the connection is established or an I/O error
                  occurs.
                  &lt;P&gt; If a security manager has been installed then this method verifies
                  that its {@link java.lang.SecurityManager#checkConnect checkConnect}method permits connecting to the address and port number of the given
                  remote peer.
                  &lt;p&gt; This method may be invoked at any time. If a {@link #send send} or{@link #receive receive} operation upon this channel is invoked while an
                  invocation of this method is in progress then that operation will first
                  block until this invocation is complete.  If a connection attempt is
                  initiated but fails, that is, if an invocation of this method throws a
                  checked exception, then the channel will be closed.                
                <param>
                    remoteThe remote peer to which this channel is to be connected                    
                </param>
                <return>
                    {@code true} if a connection was established, {@code false} if
                      this channel is in non-blocking mode and the connection
                      operation is in progress                    
                </return>
                <throws>
                    java.nio.channels.AlreadyConnectedExceptionIf this channel is already connected                    
                </throws>
                <throws>
                    java.nio.channels.ConnectionPendingExceptionIf a non-blocking connection operation is already in progress on
                      this channel                    
                </throws>
                <throws>
                    java.nio.channels.ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    java.nio.channels.AsynchronousCloseExceptionIf another thread closes this channel
                      while the connect operation is in progress                    
                </throws>
                <throws>
                    java.nio.channels.ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the connect operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    java.nio.channels.UnresolvedAddressExceptionIf the given remote address is not fully resolved                    
                </throws>
                <throws>
                    java.nio.channels.UnsupportedAddressTypeExceptionIf the type of the given remote address is not supported                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed
                      and it does not permit access to the given remote peer                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="connect" type="boolean" line="446"/>
            <javadoc line="446">
                Connects this channel&apos;s socket.
                  &lt;P&gt; This is a convience method and is equivalent to evaluating the
                  following expression:
                  &lt;blockquote&gt;&lt;pre&gt;
                  setOption(SctpStandardSocketOptions.SCTP_INIT_MAXSTREAMS, SctpStandardSocketOption.InitMaxStreams.create(maxInStreams, maxOutStreams))
                  .connect(remote);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;P&gt; The {@code maxOutStreams} and {@code maxInStreams} parameters
                  represent the maximum number of streams that the application wishes to be
                  able to send to and receive from. They are negotiated with the remote
                  peer and may be limited by the operating system.                
                <param>
                    remoteThe remote peer to which this channel is to be connected                    
                </param>
                <param>
                    maxOutStreamsMust be non negative and no larger than {@code 65536}.{@code 0} to use the endpoints default value.                    
                </param>
                <param>
                    maxInStreamsMust be non negative and no larger than {@code 65536}.{@code 0} to use the endpoints default value.                    
                </param>
                <return>
                    {@code true} if a connection was established, {@code false} if
                      this channel is in non-blocking mode and the connection operation
                      is in progress                    
                </return>
                <throws>
                    java.nio.channels.AlreadyConnectedExceptionIf this channel is already connected                    
                </throws>
                <throws>
                    java.nio.channels.ConnectionPendingExceptionIf a non-blocking connection operation is already in progress on
                      this channel                    
                </throws>
                <throws>
                    java.nio.channels.ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    java.nio.channels.AsynchronousCloseExceptionIf another thread closes this channel
                      while the connect operation is in progress                    
                </throws>
                <throws>
                    java.nio.channels.ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the connect operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    java.nio.channels.UnresolvedAddressExceptionIf the given remote address is not fully resolved                    
                </throws>
                <throws>
                    java.nio.channels.UnsupportedAddressTypeExceptionIf the type of the given remote address is not supported                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed
                      and it does not permit access to the given remote peer                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="isConnectionPending" type="boolean" line="514"/>
            <javadoc line="514">
                Tells whether or not a connection operation is in progress on this channel.                
                <return>
                    {@code true} if, and only if, a connection operation has been initiated
                      on this channel but not yet completed by invoking the{@link #finishConnect} method                    
                </return>
            </javadoc>
            <method name="finishConnect" type="boolean" line="523"/>
            <javadoc line="523">
                Finishes the process of connecting an SCTP channel.
                  &lt;P&gt; A non-blocking connection operation is initiated by placing a socket
                  channel in non-blocking mode and then invoking one of its {@link #connectconnect} methods.  Once the connection is established, or the attempt has
                  failed, the channel will become connectable and this method may
                  be invoked to complete the connection sequence.  If the connection
                  operation failed then invoking this method will cause an appropriate{@link java.io.IOException} to be thrown.
                  &lt;P&gt; If this channel is already connected then this method will not block
                  and will immediately return &lt;tt&gt;true&lt;/tt&gt;.  If this channel is in
                  non-blocking mode then this method will return &lt;tt&gt;false&lt;/tt&gt; if the
                  connection process is not yet complete.  If this channel is in blocking
                  mode then this method will block until the connection either completes
                  or fails, and will always either return &lt;tt&gt;true&lt;/tt&gt; or throw a checked
                  exception describing the failure.
                  &lt;P&gt; This method may be invoked at any time. If a {@link #send send} or {@link #receive receive}operation upon this channel is invoked while an invocation of this
                  method is in progress then that operation will first block until this
                  invocation is complete.  If a connection attempt fails, that is, if an
                  invocation of this method throws a checked exception, then the channel
                  will be closed.                
                <return>
                    {@code true} if, and only if, this channel's socket is now
                      connected                    
                </return>
                <throws>
                    java.nio.channels.NoConnectionPendingExceptionIf this channel is not connected and a connection operation
                      has not been initiated                    
                </throws>
                <throws>
                    java.nio.channels.ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    java.nio.channels.AsynchronousCloseExceptionIf another thread closes this channel
                      while the connect operation is in progress                    
                </throws>
                <throws>
                    java.nio.channels.ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the connect operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="getAllLocalAddresses" type="Set<SocketAddress>" line="574"/>
            <javadoc line="574">
                Returns all of the socket addresses to which this channel&apos;s socket is
                  bound.                
                <return>
                    All the socket addresses that this channel's socket is
                      bound to, or an empty {@code Set} if the channel's socket is not
                      bound                    
                </return>
                <throws>
                    ClosedChannelExceptionIf the channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="getRemoteAddresses" type="Set<SocketAddress>" line="591"/>
            <javadoc line="591">
                Returns all of the remote addresses to which this channel&apos;s socket
                  is connected.
                  &lt;P&gt; If the channel is connected to a remote peer that is bound to
                  multiple addresses then it is these addresses that the channel&apos;s socket
                  is connected.                
                <return>
                    All of the remote addresses to which this channel's socket
                      is connected, or an empty {@code Set} if the channel's socket is
                      not connected                    
                </return>
                <throws>
                    ClosedChannelExceptionIf the channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="shutdown" type="SctpChannel" line="612"/>
            <javadoc line="612">
                Shutdown a connection without closing the channel.
                  &lt;P&gt; Sends a shutdown command to the remote peer, effectively preventing
                  any new data from being written to the socket by either peer. Further
                  sends will throw {@link java.nio.channels.ClosedChannelException}. The
                  channel remains open to allow the for any data (and notifications) to be
                  received that may have been sent by the peer before it received the
                  shutdown command. If the channel is already shutdown then invoking this
                  method has no effect.                
                <return>
                    This channel                    
                </return>
                <throws>
                    java.nio.channels.NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
                <throws>
                    java.nio.channels.ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="getOption" type="T" line="636"/>
            <javadoc line="636">
                Returns the value of a socket option.                
                <param>
                    nameThe socket option                    
                </param>
                <return>
                    The value of the socket option. A value of {@code null} may be
                      a valid value for some socket options.                    
                </return>
                <throws>
                    UnsupportedOperationExceptionIf the socket option is not supported by this channel                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <see>
                    SctpStandardSocketOptions                    
                </see>
            </javadoc>
            <method name="setOption" type="SctpChannel" line="659"/>
            <javadoc line="659">
                Sets the value of a socket option.                
                <param>
                    nameThe socket option                    
                </param>
                <param>
                    valueThe value of the socket option. A value of {@code null} may be
                      a valid value for some socket options.                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    UnsupportedOperationExceptionIf the socket option is not supported by this channel                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf the value is not a valid value for this socket option                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <see>
                    SctpStandardSocketOptions                    
                </see>
            </javadoc>
            <method name="supportedOptions" type="Set<SctpSocketOption<?>>" line="688"/>
            <javadoc line="688">
                Returns a set of the socket options supported by this channel.
                  &lt;P&gt; This method will continue to return the set of options even after the
                  channel has been closed.                
                <return>
                    A set of the socket options supported by this channel                    
                </return>
            </javadoc>
            <javadoc line="698">
                Returns an operation set identifying this channel&apos;s supported operations.
                  &lt;P&gt; SCTP channels support connecting, reading, and writing, so this
                  method returns &lt;tt&gt;(&lt;/tt&gt;{@link SelectionKey#OP_CONNECT}&lt;tt&gt;|&lt;/tt&gt;&amp;nbsp;{@link SelectionKey#OP_READ} &lt;tt&gt;|&lt;/tt&gt;&amp;nbsp;{@link SelectionKey#OP_WRITE}&lt;tt&gt;)&lt;/tt&gt;.  &lt;/p&gt;                
                <return>
                    The valid-operation set                    
                </return>
            </javadoc>
            <method name="validOps" type="int" line="709"/>
            <method name="receive" type="MessageInfo" line="715"/>
            <javadoc line="715">
                Receives a message into the given buffer and/or handles a notification.
                  &lt;P&gt; If a message or notification is immediately available, or if this
                  channel is in blocking mode and one eventually becomes available, then
                  the message or notification is returned or handled, respectively. If this
                  channel is in non-blocking mode and a message or notification is not
                  immediately available then this method immediately returns {@code null}.
                  &lt;P&gt; If this method receives a message it is copied into the given byte
                  buffer. The message is transferred into the given byte buffer starting at
                  its current position and the buffers position is incremented by the
                  number of bytes read. If there are fewer bytes remaining in the buffer
                  than are required to hold the message, or the underlying input buffer
                  does not contain the complete message, then an invocation of {@link MessageInfo#isComplete isComplete} on the returned {@codeMessageInfo} will return {@code false}, and more invocations of this
                  method will be necessary to completely consume the messgae. Only
                  one message at a time will be partially delivered in any stream. The
                  socket option {@link SctpStandardSocketOptions#SCTP_FRAGMENT_INTERLEAVESCTP_FRAGMENT_INTERLEAVE} controls various aspects of what interlacing of
                  messages occurs.
                  &lt;P&gt; If this method receives a notification then the appropriate method of
                  the given handler, if there is one, is invoked. If the handler returns{@link HandlerResult#CONTINUE CONTINUE} then this method will try to
                  receive another message/notification, otherwise, if {@link HandlerResult#RETURN RETURN} is returned this method will return {@codenull}. If an uncaught exception is thrown by the handler it will be
                  propagated up the stack through this method.
                  &lt;P&gt; This method may be invoked at any time. If another thread has
                  already initiated a receive operation upon this channel, then an
                  invocation of this method will block until the first operation is
                  complete. The given handler is invoked without holding any locks used
                  to enforce the above synchronization policy, that way handlers
                  will not stall other threads from receiving. A handler should not invoke
                  the {@code receive} method of this channel, if it does an{@link IllegalReceiveException} will be thrown.                
                <param>
                    dstThe buffer into which message bytes are to be transferred                    
                </param>
                <param>
                    attachmentThe object to attach to the receive operation; can be{@code null}                    
                </param>
                <param>
                    handlerA handler to handle notifications from the SCTP stack, or {@codenull} to ignore any notifications.                    
                </param>
                <return>
                    The {@code MessageInfo}, {@code null} if this channel is in
                      non-blocking mode and no messages are immediately available or
                      the notification handler returns {@link HandlerResult#RETURNRETURN} after handling a notification                    
                </return>
                <throws>
                    java.nio.channels.ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    java.nio.channels.AsynchronousCloseExceptionIf another thread closes this channel
                      while the read operation is in progress                    
                </throws>
                <throws>
                    java.nio.channels.ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the read operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    java.nio.channels.NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
                <throws>
                    IllegalReceiveExceptionIf the given handler invokes the {@code receive} method of this
                      channel                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="send" type="int" line="799"/>
            <javadoc line="799">
                Sends a message via this channel.
                  &lt;P&gt; If this channel is in non-blocking mode and there is sufficient room
                  in the underlying output buffer, or if this channel is in blocking mode
                  and sufficient room becomes available, then the remaining bytes in the
                  given byte buffer are transmitted as a single message. Sending a message
                  is atomic unless explicit message completion {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}socket option is enabled on this channel&apos;s socket.
                  &lt;P&gt; The message is transferred from the byte buffer as if by a regular{@link java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer)write} operation.
                  &lt;P&gt; The bytes will be written to the stream number that is specified by{@link MessageInfo#streamNumber streamNumber} in the given {@codemessageInfo}.
                  &lt;P&gt; This method may be invoked at any time. If another thread has already
                  initiated a send operation upon this channel, then an invocation of
                  this method will block until the first operation is complete.                
                <param>
                    srcThe buffer containing the message to be sent                    
                </param>
                <param>
                    messageInfoAncillary data about the message to be sent                    
                </param>
                <return>
                    The number of bytes sent, which will be either the number of
                      bytes that were remaining in the messages buffer when this method
                      was invoked or, if this channel is non-blocking, may be zero if
                      there was insufficient room for the message in the underlying
                      output buffer                    
                </return>
                <throws>
                    InvalidStreamExceptonIf {@code streamNumner} is negative or greater than or equal to
                      the maximum number of outgoing streams                    
                </throws>
                <throws>
                    java.nio.channels.ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    java.nio.channels.AsynchronousCloseExceptionIf another thread closes this channel
                      while the read operation is in progress                    
                </throws>
                <throws>
                    java.nio.channels.ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the read operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    java.nio.channels.NotYetConnectedExceptionIf this channel is not yet connected                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
        </class>
    </source>