<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.nio.sctp">
        <import package="java.net.SocketAddress"/>
        <import package="java.net.InetAddress"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Set"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.channels.spi.AbstractSelectableChannel"/>
        <import package="java.nio.channels.spi.SelectorProvider"/>
        <import package="java.nio.channels.ClosedChannelException"/>
        <import package="java.nio.channels.NotYetBoundException"/>
        <import package="java.nio.channels.SelectionKey"/>
        <class name="SctpMultiChannel" line="38">
            <extends class="AbstractSelectableChannel"/>
            <javadoc line="38">
                A selectable channel for message-oriented SCTP sockets.
                  &lt;P&gt; An SCTP multi channel supports many associations on a single socket.
                  An {@code SctpMultiChannel} is created by invoking the{@link #open open} method of this class. A newly-created channel is open but
                  not yet bound. An attempt to invoke the {@link #receive receive} method of an
                  unbound channel will cause the {@link NotYetBoundException}to be thrown. An attempt to invoke the {@link #send send} method of an
                  unbound channel will cause it to first invoke the {@link #bind bind} method.
                  The address(es) that the channel&apos;s socket is bound to can be retrieved by
                  calling {@link #getAllLocalAddresses getAllLocalAddresses}.
                  &lt;P&gt; Messages may be sent and received without explicitly setting up an
                  association with the remote peer. The channel will implicitly setup
                  a new association whenever it sends or receives a message from a remote
                  peer if there is not already an association with that peer. Upon successful
                  association setup, an {@link AssociationChangeNotificationassociation changed} notification will be put to the SCTP stack with its{@code event} parameter set to {@link AssociationChangeNotification.AssocChangeEvent#COMM_UPCOMM_UP}. This notification can be received by invoking {@link #receivereceive}.
                  &lt;P&gt; Socket options are configured using the{@link #setOption(SctpSocketOption,Object,Association) setOption} method. An{@code SctpMultiChannel} supports the following options:
                  &lt;blockquote&gt;
                  &lt;table border&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Option Name&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_DISABLE_FRAGMENTSSCTP_DISABLE_FRAGMENTS} &lt;/td&gt;
                  &lt;td&gt; Enables or disables message fragmentation &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETESCTP_EXPLICIT_COMPLETE} &lt;/td&gt;
                  &lt;td&gt; Enables or disables explicit message completion &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_FRAGMENT_INTERLEAVESCTP_FRAGMENT_INTERLEAVE} &lt;/td&gt;
                  &lt;td&gt; Controls how the presentation of messages occur for the message
                  receiver &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_INIT_MAXSTREAMSSCTP_INIT_MAXSTREAMS} &lt;/td&gt;
                  &lt;td&gt; The maximum number of streams requested by the local endpoint during
                  association initialization &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_NODELAY SCTP_NODELAY} &lt;/td&gt;
                  &lt;td&gt; Enables or disable a Nagle-like algorithm &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_PRIMARY_ADDRSCTP_PRIMARY_ADDR} &lt;/td&gt;
                  &lt;td&gt; Requests that the local SCTP stack use the given peer address as the
                  association primary &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SCTP_SET_PEER_PRIMARY_ADDRSCTP_SET_PEER_PRIMARY_ADDR} &lt;/td&gt;
                  &lt;td&gt; Requests that the peer mark the enclosed address as the association
                  primary &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SO_SNDBUFSO_SNDBUF} &lt;/td&gt;
                  &lt;td&gt; The size of the socket send buffer &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SO_RCVBUFSO_RCVBUF} &lt;/td&gt;
                  &lt;td&gt; The size of the socket receive buffer &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@link SctpStandardSocketOptions#SO_LINGERSO_LINGER} &lt;/td&gt;
                  &lt;td&gt; Linger on close if data is present (when configured in blocking mode
                  only) &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  Additional (implementation specific) options may also be supported. The list
                  of options supported is obtained by invoking the {@link #supportedOptions()supportedOptions} method.
                  &lt;p&gt; SCTP multi channels are safe for use by multiple concurrent threads.
                  They support concurrent sending and receiving, though at most one thread may be
                  sending and at most one thread may be receiving at any given time.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <javadoc line="140">
                Initializes a new instance of this class.                
                <param>
                    providerThe selector provider for this channel                    
                </param>
            </javadoc>
            <method name="SctpMultiChannel" type="constructor" line="146">
                <params>
                    <param name="provider" type="SelectorProvider"/>
                </params>
            </method>
            <javadoc line="150">
                Opens an SCTP multi channel.
                  &lt;P&gt; The new channel is unbound.                
                <return>
                    A new SCTP multi channel                    
                </return>
                <throws>
                    UnsupportedOperationExceptionIf the SCTP protocol is not supported                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="open" type="SctpMultiChannel" line="164"/>
            <method name="associations" type="Set<Association>" line="168"/>
            <javadoc line="168">
                Returns the open associations on this channel&apos;s socket.
                  &lt;P&gt; Only associations whose {@link AssociationChangeNotification.AssocChangeEvent#COMM_UPCOMM_UP} association change event has been received are included
                  in the returned set of associations. Associations for which a{@link AssociationChangeNotification.AssocChangeEvent#COMM_LOST COMM_LOST} or {@link AssociationChangeNotification.AssocChangeEvent#SHUTDOWN SHUTDOWN} association change
                  event have been receive are removed from the set of associations.
                  &lt;P&gt; The returned set of associations is a snapshot of the open
                  associations at the time that this method is invoked.                
                <return>
                    A {@code Set} containing the open associations, or an empty{@code Set} if there are none.                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="bind" type="SctpMultiChannel" line="193"/>
            <javadoc line="193">
                Binds the channel&apos;s socket to a local address and configures the socket
                  to listen for connections.
                  &lt;P&gt; This method is used to establish a relationship between the socket
                  and the local address. Once a relationship is established then
                  the socket remains bound until the channel is closed. This relationship
                  may not necesssarily be with the address {@code local} as it may be removed
                  by {@link #unbindAddress unbindAddress}, but there will always be at least one local
                  address bound to the channel&apos;s socket once an invocation of this method
                  successfully completes.
                  &lt;P&gt; Once the channel&apos;s socket has been successfully bound to a specific
                  address, that is not automatically assigned, more addresses
                  may be bound to it using {@link #bindAddress bindAddress}, or removed
                  using {@link #unbindAddress unbindAddress}.
                  &lt;P&gt; The backlog parameter is the maximum number of pending connections on
                  the socket. Its exact semantics are implementation specific. An implementation
                  may impose an implementation specific maximum length or may choose to ignore
                  the parameter. If the backlog parameter has the value {@code 0}, or a negative
                  value, then an implementation specific default is used.                
                <param>
                    localThe local address to bind the socket, or {@code null} to
                      bind the socket to an automatically assigned socket address                    
                </param>
                <param>
                    backlogThe maximum number number of pending connections                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    java.nio.channels.AlreadyBoundExceptionIf this channel is already bound                    
                </throws>
                <throws>
                    java.nio.channels.UnsupportedAddressTypeExceptionIf the type of the given address is not supported                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed and its {@link java.lang.SecurityManager#checkListen(int) checkListen} method
                      denies the operation                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <javadoc line="246">
                Binds the channel&apos;s socket to a local address and configures the socket
                  to listen for connections.
                  &lt;P&gt; This method works as if invoking it were equivalent to evaluating the
                  expression:
                  &lt;blockquote&gt;&lt;pre&gt;
                  bind(local, 0);
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    localThe local address to bind the socket, or {@code null} to
                      bind the socket to an automatically assigned socket address                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    java.nio.channels.AlreadyBoundExceptionIf this channel is already bound                    
                </throws>
                <throws>
                    java.nio.channels.UnsupportedAddressTypeExceptionIf the type of the given address is not supported                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed and its {@link java.lang.SecurityManager#checkListen(int) checkListen} method
                      denies the operation                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="bind" type="SctpMultiChannel" line="280">
                <params>
                    <param name="local" type="SocketAddress"/>
                </params>
            </method>
            <method name="bindAddress" type="SctpMultiChannel" line="284"/>
            <javadoc line="284">
                Adds the given address to the bound addresses for the channel&apos;s
                  socket.
                  &lt;P&gt; The given address must not be the {@link java.net.InetAddress#isAnyLocalAddress wildcard} address.
                  The channel must be first bound using {@link #bind bind} before
                  invoking this method, otherwise {@link NotYetBoundException} is thrown.
                  The {@link #bind bind} method takes a {@code SocketAddress} as its
                  argument which typically contains a port number as well as an address.
                  Addresses subquently bound using this method are simply addresses as the
                  SCTP port number remains the same for the lifetime of the channel.
                  &lt;P&gt; New associations setup after this method successfully completes
                  will be associated with the given address. Adding addresses to existing
                  associations is optional functionality. If the endpoint supports
                  dynamic address reconfiguration then it may send the appropriate message
                  to the peer to change the peers address lists.                
                <param>
                    addressThe address to add to the bound addresses for the socket                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    NotYetBoundExceptionIf this channel is not yet bound                    
                </throws>
                <throws>
                    java.nio.channels.AlreadyBoundExceptionIf this channel is already bound to the given address                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf address is {@code null} or the {@link java.net.InetAddress#isAnyLocalAddress wildcard} address                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="unbindAddress" type="SctpMultiChannel" line="327"/>
            <javadoc line="327">
                Removes the given address from the bound addresses for the channel&apos;s
                  socket.
                  &lt;P&gt; The given address must not be the {@link java.net.InetAddress#isAnyLocalAddress wildcard} address.
                  The channel must be first bound using {@link #bind bind} before
                  invoking this method, otherwise {@link NotYetBoundException} is thrown.
                  &lt;P&gt; If this method is invoked on a channel that does
                  not have {@code address} as one of its bound addresses, or that has only
                  one local address bound to it, then this method throws{@link IllegalUnbindException}.
                  &lt;P&gt; The initial address that the channel&apos;s socket is bound to using{@link #bind bind} may be removed from the bound addresses for the
                  channel&apos;s socket.
                  &lt;P&gt; New associations setup after this method successfully completes
                  will not be associated with the given address. Removing addresses from
                  existing associations is optional functionality. If the endpoint supports
                  dynamic address reconfiguration then it may send the appropriate message
                  to the peer to change the peers address lists.                
                <param>
                    addressThe address to remove from the bound addresses for the socket                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    NotYetBoundExceptionIf this channel is not yet bound                    
                </throws>
                <throws>
                    IllegalUnbindException {@code address} is not bound to the channel's socket, or the
                      channel has only one address  bound to it                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf address is {@code null} or the {@link java.net.InetAddress#isAnyLocalAddress wildcard} address                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="getAllLocalAddresses" type="Set<SocketAddress>" line="376"/>
            <javadoc line="376">
                Returns all of the socket addresses to which this channel&apos;s socket is
                  bound.                
                <return>
                    All the socket addresses that this channel's socket is
                      bound to, or an empty {@code Set} if the channel's socket is not
                      bound                    
                </return>
                <throws>
                    ClosedChannelExceptionIf the channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="getRemoteAddresses" type="Set<SocketAddress>" line="393"/>
            <javadoc line="393">
                Returns all of the remote addresses to which the given association on
                  this channel&apos;s socket is connected.                
                <return>
                    All of the remote addresses for the given association, or
                      an empty {@code Set} if the association has been shutdown                    
                </return>
                <throws>
                    ClosedChannelExceptionIf the channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="shutdown" type="SctpMultiChannel" line="409"/>
            <javadoc line="409">
                Shutdown an association without closing the channel.                
                <param>
                    associationThe association to shutdown                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="getOption" type="T" line="426"/>
            <javadoc line="426">
                Returns the value of a socket option.
                  &lt;P&gt; Note that some options are retrieved on the channel&apos;s socket,
                  therefore the {@code association} parameter is not applicable and will be
                  ignored if given. However, if the option is association specific then the
                  association must be given.                
                <param>
                    nameThe socket option                    
                </param>
                <param>
                    associationThe association whose option should be retrieved, or {@code null}if this option should be retrieved at the channel's socket level.                    
                </param>
                <return>
                    The value of the socket option. A value of {@code null} may be
                      a valid value for some socket options.                    
                </return>
                <throws>
                    UnsupportedOperationExceptionIf the socket option is not supported by this channel                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <see>
                    SctpStandardSocketOptions                    
                </see>
            </javadoc>
            <method name="setOption" type="SctpMultiChannel" line="459"/>
            <javadoc line="459">
                Sets the value of a socket option.
                  &lt;P&gt; Note that some options are retrieved on the channel&apos;s socket,
                  therefore the {@code association} parameter is not applicable and will be
                  ignored if given. However, if the option is association specific then the
                  association must be given.                
                <param>
                    nameThe socket option                    
                </param>
                <param>
                    associationThe association whose option should be set, or {@code null}if this option should be set at the channel's socket level.                    
                </param>
                <param>
                    valueThe value of the socket option. A value of {@code null} may be
                      a valid value for some socket options.                    
                </param>
                <return>
                    This channel                    
                </return>
                <throws>
                    UnsupportedOperationExceptionIf the socket option is not supported by this channel                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf the value is not a valid value for this socket option                    
                </throws>
                <throws>
                    ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs                    
                </throws>
                <see>
                    SctpStandardSocketOptions                    
                </see>
            </javadoc>
            <method name="supportedOptions" type="Set<SctpSocketOption<?>>" line="499"/>
            <javadoc line="499">
                Returns a set of the socket options supported by this channel.
                  &lt;P&gt; This method will continue to return the set of options even after the
                  channel has been closed.                
                <return>
                    A set of the socket options supported by this channel                    
                </return>
            </javadoc>
            <javadoc line="509">
                Returns an operation set identifying this channel&apos;s supported operations.
                  &lt;P&gt; SCTP multi channels support reading, and writing, so this
                  method returns{@code (}{@link SelectionKey#OP_READ} {@code |}&amp;nbsp;{@link SelectionKey#OP_WRITE}{@code )}.  &lt;/p&gt;                
                <return>
                    The valid-operation set                    
                </return>
            </javadoc>
            <method name="validOps" type="int" line="520"/>
            <method name="receive" type="MessageInfo" line="525"/>
            <javadoc line="525">
                Receives a message and/or handles a notification via this channel.
                  &lt;P&gt; If a message or notification is immediately available, or if this
                  channel is in blocking mode and one eventually becomes available, then
                  the message or notification is returned or handled, respectively. If this
                  channel is in non-blocking mode and a message or notification is not
                  immediately available then this method immediately returns {@code null}.
                  &lt;P&gt; If this method receives a message it is copied into the given byte
                  buffer and an {@link MessageInfo} is returned.
                  The message is transferred into the given byte buffer starting at its
                  current position and the buffers position is incremented by the number of
                  bytes read. If there are fewer bytes remaining in the buffer than are
                  required to hold the message, or the underlying input buffer does not
                  contain the complete message, then an invocation of {@link MessageInfo#isComplete isComplete} on the returned {@codeMessageInfo} will return {@code false}, and more invocations of this
                  method will be necessary to completely consume the messgae. Only
                  one message at a time will be partially delivered in any stream. The
                  socket option {@link SctpStandardSocketOptions#SCTP_FRAGMENT_INTERLEAVESCTP_FRAGMENT_INTERLEAVE} controls various aspects of what interlacing of
                  messages occurs.
                  &lt;P&gt; If this method receives a notification then the appropriate method of
                  the given handler, if there is one, is invoked. If the handler returns {@link HandlerResult#CONTINUE CONTINUE} then this method will try to receive another
                  message/notification, otherwise, if {@link HandlerResult#RETURN RETURN} is returned
                  this method will return {@code null}. If an uncaught exception is thrown by the
                  handler it will be propagated up the stack through this method.
                  &lt;P&gt; If a security manager has been installed then for each new association
                  setup this method verifies that the associations source address and port
                  number are permitted by the security manager&apos;s {@link java.lang.SecurityManager#checkAccept(String,int) checkAccept} method.
                  &lt;P&gt; This method may be invoked at any time. If another thread has
                  already initiated a receive operation upon this channel, then an
                  invocation of this method will block until the first operation is
                  complete. The given handler is invoked without holding any locks used
                  to enforce the above synchronization policy, that way handlers
                  will not stall other threads from receiving. A handler should not invoke
                  the {@code receive} method of this channel, if it does an{@link IllegalReceiveException} will be thrown.                
                <param>
                    bufferThe buffer into which bytes are to be transferred                    
                </param>
                <param>
                    attachmentThe object to attach to the receive operation; can be{@code null}                    
                </param>
                <param>
                    handlerA handler to handle notifications from the SCTP stack, or{@code null} to ignore any notifications.                    
                </param>
                <return>
                    The {@code MessageInfo}, {@code null} if this channel is in
                      non-blocking mode and no messages are immediately available or
                      the notification handler returns {@code RETURN} after handling
                      a notification                    
                </return>
                <throws>
                    java.nio.channels.ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    java.nio.channels.AsynchronousCloseExceptionIf another thread closes this channel
                      while the read operation is in progress                    
                </throws>
                <throws>
                    java.nio.channels.ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the read operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    NotYetBoundExceptionIf this channel is not yet bound                    
                </throws>
                <throws>
                    IllegalReceiveExceptionIf the given handler invokes the {@code receive} method of this
                      channel                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed and it does not permit
                      new associations to be accepted from the message's sender                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="send" type="int" line="618"/>
            <javadoc line="618">
                Sends a message via this channel.
                  &lt;P&gt; If this channel is unbound then this method will invoke {@link #bind(SocketAddress,int) bind(null, 0)} before sending any data.
                  &lt;P&gt; If there is no association existing between this channel&apos;s socket
                  and the intended receiver, identified by the address in the given messageInfo, then one
                  will be automatically setup to the intended receiver. This is considered
                  to be Implicit Association Setup. Upon successful association setup, an{@link AssociationChangeNotification association changed}notification will be put to the SCTP stack with its {@code event} parameter set
                  to {@link AssociationChangeNotification.AssocChangeEvent#COMM_UP COMM_UP}. This notification can be received by invoking {@link #receivereceive}.
                  &lt;P&gt; If this channel is in blocking mode, there is sufficient room in the
                  underlying output buffer, then the remaining bytes in the given byte
                  buffer are transmitted as a single message. Sending a message
                  is atomic unless explicit message completion {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}socket option is enabled on this channel&apos;s socket.
                  &lt;P&gt; If this channel is in non-blocking mode, there is sufficient room
                  in the underlying output buffer, and an implicit association setup is
                  required, then the remaining bytes in the given byte buffer are
                  transmitted as a single message, subject to {@link SctpStandardSocketOptions#SCTP_EXPLICIT_COMPLETE SCTP_EXPLICIT_COMPLETE}.
                  If for any reason the message cannot
                  be delivered an {@link AssociationChangeNotification association
                  changed} notification is put on the SCTP stack with its {@code event} parameter set
                  to {@link AssociationChangeNotification.AssocChangeEvent#CANT_START CANT_START}.
                  &lt;P&gt; The message is transferred from the byte buffer as if by a regular{@link java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer)write} operation.
                  &lt;P&gt; If a security manager has been installed then for each new association
                  setup this method verifies that the given remote peers address and port
                  number are permitted by the security manager&apos;s {@link java.lang.SecurityManager#checkConnect(String,int) checkConnect} method.
                  &lt;P&gt; This method may be invoked at any time. If another thread has already
                  initiated a send operation upon this channel, then an invocation of
                  this method will block until the first operation is complete.                
                <param>
                    bufferThe buffer containing the message to be sent                    
                </param>
                <param>
                    messageInfoAncillary data about the message to be sent                    
                </param>
                <return>
                    The number of bytes sent, which will be either the number of
                      bytes that were remaining in the messages buffer when this method
                      was invoked or, if this channel is non-blocking, may be zero if
                      there was insufficient room for the message in the underlying
                      output buffer                    
                </return>
                <throws>
                    InvalidStreamExceptonIf {@code streamNumber} is negative, or if an association already
                      exists and {@code streamNumber} is greater than the maximum number
                      of outgoing streams                    
                </throws>
                <throws>
                    java.nio.channels.ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    java.nio.channels.AsynchronousCloseExceptionIf another thread closes this channel
                      while the read operation is in progress                    
                </throws>
                <throws>
                    java.nio.channels.ClosedByInterruptExceptionIf another thread interrupts the current thread
                      while the read operation is in progress, thereby
                      closing the channel and setting the current thread's
                      interrupt status                    
                </throws>
                <throws>
                    SecurityExceptionIf a security manager has been installed and it does not permit
                      new associations to be setup with the the messages's address                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
            <method name="branch" type="SctpChannel" line="704"/>
            <javadoc line="704">
                Branches off an association.
                  &lt;P&gt; An application can invoke this method to branch off an association
                  into a separate channel. The new bound and connected {@link SctpChannel}will be created for the association. The branched off association will no
                  longer be part of this channel.
                  &lt;P&gt; This is particularly useful when, for instance, the application
                  wishes to have a number of sporadic message senders/receivers remain
                  under the original SCTP multi channel but branch off those
                  associations carrying high volume data traffic into their own
                  separate SCTP channels.                
                <param>
                    associationThe association to branch off                    
                </param>
                <return>
                    The {@code SctpChannel}                    
                </return>
                <throws>
                    java.nio.channels.ClosedChannelExceptionIf this channel is closed                    
                </throws>
                <throws>
                    IOExceptionIf some other I/O error occurs                    
                </throws>
            </javadoc>
        </class>
    </source>