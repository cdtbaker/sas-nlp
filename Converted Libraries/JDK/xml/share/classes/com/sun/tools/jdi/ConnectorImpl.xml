<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.tools.jdi"/>
        <import package="com.sun.jdi"/>
        <import package="com.sun.jdi.connect"/>
        <import package="com.sun.jdi.InternalException"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.io.Serializable"/>
        <class name="ConnectorImpl" line="41">
            <comment line="45">
                Used by BooleanArgument                
            </comment>
            <implements interface="Connector"/>
            <declaration name="defaultArguments" type="Map&lt;String,Argument&gt;" line="42"/>
            <declaration name="trueString" type="String" line="45"/>
            <declaration name="falseString" type="String" line="46"/>
            <method name="defaultArguments" type="Map<String,Argument>" line="48">
                <declaration name="defaults" type="Map&lt;String,Argument&gt;" line="49"/>
                <declaration name="values" type="Collection" line="50"/>
                <declaration name="iter" type="Iterator" line="52"/>
                <scope line="53">
                    <declaration name="argument" type="ArgumentImpl" line="54"/>
                </scope>
            </method>
            <method name="addStringArgument" type="void" line="61">
                <params>
                    <param name="name" type="String"/>
                    <param name="label" type="String"/>
                    <param name="description" type="String"/>
                    <param name="defaultValue" type="String"/>
                    <param name="mustSpecify" type="boolean"/>
                </params>
            </method>
            <method name="addBooleanArgument" type="void" line="70">
                <params>
                    <param name="name" type="String"/>
                    <param name="label" type="String"/>
                    <param name="description" type="String"/>
                    <param name="defaultValue" type="boolean"/>
                    <param name="mustSpecify" type="boolean"/>
                </params>
            </method>
            <method name="addIntegerArgument" type="void" line="80">
                <params>
                    <param name="name" type="String"/>
                    <param name="label" type="String"/>
                    <param name="description" type="String"/>
                    <param name="defaultValue" type="String"/>
                    <param name="mustSpecify" type="boolean"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
            </method>
            <method name="addSelectedArgument" type="void" line="91">
                <params>
                    <param name="name" type="String"/>
                    <param name="label" type="String"/>
                    <param name="description" type="String"/>
                    <param name="defaultValue" type="String"/>
                    <param name="mustSpecify" type="boolean"/>
                    <param name="list" type="List<String>"/>
                </params>
            </method>
            <method name="argument" type="ArgumentImpl" line="100">
                <params>
                    <param name="name" type="String"/>
                    <param name="arguments" type="Map"/>
                </params>
                <declaration name="argument" type="ArgumentImpl" line="102"/>
                <scope line="103"/>
                <declaration name="value" type="String" line="107"/>
                <scope line="108">
                    <scope line="109"/>
                </scope>
                <scope line="113"/>
            </method>
            <declaration name="messages" type="ResourceBundle" line="122"/>
            <method name="getString" type="String" line="124">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="125"/>
            </method>
            <method name="toString" type="String" line="131">
                <declaration name="string" type="String" line="132"/>
                <declaration name="iter" type="Iterator" line="133"/>
                <declaration name="first" type="boolean" line="134"/>
                <scope line="135">
                    <declaration name="argument" type="ArgumentImpl" line="136"/>
                    <scope line="137"/>
                </scope>
            </method>
            <class name="ArgumentImpl" line="147">
                <implements interface="Connector.Argument"/>
                <implements interface="Cloneable"/>
                <implements interface="Serializable"/>
                <declaration name="name" type="String" line="148"/>
                <declaration name="label" type="String" line="149"/>
                <declaration name="description" type="String" line="150"/>
                <declaration name="value" type="String" line="151"/>
                <declaration name="mustSpecify" type="boolean" line="152"/>
                <method name="ArgumentImpl" type="constructor" line="156">
                    <params>
                        <param name="name" type="String"/>
                        <param name="label" type="String"/>
                        <param name="description" type="String"/>
                        <param name="value" type="String"/>
                        <param name="mustSpecify" type="boolean"/>
                    </params>
                </method>
                <method name="isValid" type="boolean" line="164"/>
                <method name="name" type="String" line="166"/>
                <method name="label" type="String" line="170"/>
                <method name="description" type="String" line="174"/>
                <method name="value" type="String" line="178"/>
                <method name="setValue" type="void" line="182">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <scope line="183"/>
                </method>
                <method name="mustSpecify" type="boolean" line="189"/>
                <method name="equals" type="boolean" line="193">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="194">
                        <declaration name="other" type="Connector.Argument" line="195"/>
                    </scope>
                    <scope line="200"/>
                </method>
                <method name="hashCode" type="int" line="205"/>
                <method name="clone" type="Object" line="209">
                    <comment line="213">
                        Object should always support clone                        
                    </comment>
                    <scope line="210"/>
                    <scope line="212"/>
                </method>
                <method name="toString" type="String" line="218"/>
            </class>
            <class name="BooleanArgumentImpl" line="223">
                <extends class="ConnectorImpl.ArgumentImpl"/>
                <implements interface="Connector.BooleanArgument"/>
                <method name="BooleanArgumentImpl" type="constructor" line="228">
                    <params>
                        <param name="name" type="String"/>
                        <param name="label" type="String"/>
                        <param name="description" type="String"/>
                        <param name="value" type="boolean"/>
                        <param name="mustSpecify" type="boolean"/>
                    </params>
                    <scope line="230"/>
                </method>
                <javadoc line="237">
                    Sets the value of the argument.                    
                </javadoc>
                <method name="setValue" type="void" line="240">
                    <params>
                        <param name="value" type="boolean"/>
                    </params>
                </method>
                <javadoc line="244">
                    Performs basic sanity check of argument.                    
                    <return>
                        <code>true</code> if value is a string
                          representation of a boolean value.                        
                    </return>
                    <see>
                        #stringValueOf(boolean)                        
                    </see>
                </javadoc>
                <method name="isValid" type="boolean" line="250">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <javadoc line="254">
                    Return the string representation of the &lt;code&gt;value&lt;/code&gt;
                      parameter.
                      Does not set or examine the value or the argument.                    
                    <return>
                        the localized String representation of the
                          boolean value.                        
                    </return>
                </javadoc>
                <method name="stringValueOf" type="String" line="261">
                    <params>
                        <param name="value" type="boolean"/>
                    </params>
                </method>
                <javadoc line="265">
                    Return the value of the argument as a boolean.  Since
                      the argument may not have been set or may have an invalid
                      value {@link #isValid(String)} should be called on{@link #value()} to check its validity.  If it is invalid
                      the boolean returned by this method is undefined.                    
                    <return>
                        the value of the argument as a boolean.                        
                    </return>
                </javadoc>
                <method name="booleanValue" type="boolean" line="273"/>
            </class>
            <class name="IntegerArgumentImpl" line="278">
                <extends class="ConnectorImpl.ArgumentImpl"/>
                <implements interface="Connector.IntegerArgument"/>
                <declaration name="min" type="int" line="281"/>
                <declaration name="max" type="int" line="282"/>
                <method name="IntegerArgumentImpl" type="constructor" line="286">
                    <params>
                        <param name="name" type="String"/>
                        <param name="label" type="String"/>
                        <param name="description" type="String"/>
                        <param name="value" type="String"/>
                        <param name="mustSpecify" type="boolean"/>
                        <param name="min" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <javadoc line="292">
                    Sets the value of the argument.
                      The value should be checked with {@link #isValid(int)}before setting it; invalid values will throw an exception
                      when the connection is established - for example,
                      on {@link LaunchingConnector#launch}                    
                </javadoc>
                <method name="setValue" type="void" line="299">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
                <javadoc line="303">
                    Performs basic sanity check of argument.                    
                    <return>
                        <code>true</code> if value represents an int that is
                          <code>{@link #min()} &lt;= value &lt;= {@link #max()}</code>                        
                    </return>
                </javadoc>
                <method name="isValid" type="boolean" line="308">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <scope line="309"/>
                    <scope line="312"/>
                    <scope line="314"/>
                </method>
                <javadoc line="319">
                    Performs basic sanity check of argument.                    
                    <return>
                        <code>true</code> if
                          <code>{@link #min()} &lt;= value  &lt;= {@link #max()}</code>                        
                    </return>
                </javadoc>
                <method name="isValid" type="boolean" line="324">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
                <javadoc line="328">
                    Return the string representation of the &lt;code&gt;value&lt;/code&gt;
                      parameter.
                      Does not set or examine the value or the argument.                    
                    <return>
                        the String representation of the
                          int value.                        
                    </return>
                </javadoc>
                <method name="stringValueOf" type="String" line="335">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                    <comment line="336">
                        *** Should this be internationalized????                        
                    </comment>
                    <comment line="337">
                        *** Even Brian Beck was unsure if an Arabic programmer                        
                    </comment>
                    <comment line="338">
                        *** would expect port numbers in Arabic numerals,                        
                    </comment>
                    <comment line="339">
                        *** so punt for now.                        
                    </comment>
                </method>
                <javadoc line="343">
                    Return the value of the argument as a int.  Since
                      the argument may not have been set or may have an invalid
                      value {@link #isValid(String)} should be called on{@link #value()} to check its validity.  If it is invalid
                      the int returned by this method is undefined.                    
                    <return>
                        the value of the argument as a int.                        
                    </return>
                </javadoc>
                <method name="intValue" type="int" line="351">
                    <scope line="352"/>
                    <scope line="355"/>
                    <scope line="357"/>
                </method>
                <javadoc line="362">
                    The upper bound for the value.                    
                    <return>
                        the maximum allowed value for this argument.                        
                    </return>
                </javadoc>
                <method name="max" type="int" line="366"/>
                <javadoc line="370">
                    The lower bound for the value.                    
                    <return>
                        the minimum allowed value for this argument.                        
                    </return>
                </javadoc>
                <method name="min" type="int" line="374"/>
            </class>
            <class name="StringArgumentImpl" line="379">
                <extends class="ConnectorImpl.ArgumentImpl"/>
                <implements interface="Connector.StringArgument"/>
                <method name="StringArgumentImpl" type="constructor" line="384">
                    <params>
                        <param name="name" type="String"/>
                        <param name="label" type="String"/>
                        <param name="description" type="String"/>
                        <param name="value" type="String"/>
                        <param name="mustSpecify" type="boolean"/>
                    </params>
                </method>
                <javadoc line="388">
                    Performs basic sanity check of argument.                    
                    <return>
                        <code>true</code> always                        
                    </return>
                </javadoc>
                <method name="isValid" type="boolean" line="392">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
            </class>
            <class name="SelectedArgumentImpl" line="397">
                <extends class="ConnectorImpl.ArgumentImpl"/>
                <implements interface="Connector.SelectedArgument"/>
                <declaration name="choices" type="List&lt;String&gt;" line="400"/>
                <method name="SelectedArgumentImpl" type="constructor" line="404">
                    <params>
                        <param name="name" type="String"/>
                        <param name="label" type="String"/>
                        <param name="description" type="String"/>
                        <param name="value" type="String"/>
                        <param name="mustSpecify" type="boolean"/>
                        <param name="choices" type="List<String>"/>
                    </params>
                </method>
                <javadoc line="409">
                    Return the possible values for the argument                    
                    <return>
                        {@link List} of {@link String}                        
                    </return>
                </javadoc>
                <method name="choices" type="List<String>" line="413"/>
                <javadoc line="417">
                    Performs basic sanity check of argument.                    
                    <return>
                        <code>true</code> if value is one of {@link #choices()}.                        
                    </return>
                </javadoc>
                <method name="isValid" type="boolean" line="421">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
            </class>
        </class>
    </source>