<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.jdi"/>
        <import package="com.sun.jdi.event.EventQueue"/>
        <import package="com.sun.jdi.event.EventSet"/>
        <import package="java.util"/>
        <class name="EventQueueImpl" line="34">
            <extends class="MirrorImpl"/>
            <comment line="37">
                Note this is not a synchronized list. Iterationupdate should be
                 protected through the &apos;this&apos; monitor.                
            </comment>
            <comment line="52">
                Override superclass back to default equality                
            </comment>
            <implements interface="EventQueue"/>
            <declaration name="eventSets" type="LinkedList&lt;EventSet&gt;" line="40"/>
            <declaration name="target" type="TargetVM" line="42"/>
            <declaration name="closed" type="boolean" line="43"/>
            <method name="EventQueueImpl" type="constructor" line="45">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="target" type="TargetVM"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="54">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="58"/>
            <method name="enqueue" type="void" line="62">
                <params>
                    <param name="eventSet" type="EventSet"/>
                </params>
            </method>
            <method name="size" type="int" line="67"/>
            <method name="close" type="void" line="71">
                <comment line="73">
                    OK for this the be first since synchronized                    
                </comment>
                <comment line="75">
                    place VMDisconnectEvent into queue                    
                </comment>
                <scope line="72"/>
            </method>
            <method name="remove" type="EventSet" line="81"/>
            <javadoc line="85">
                Filter out events not for user&apos;s eyes.
                  Then filter out empty sets.                
            </javadoc>
            <method name="remove" type="EventSet" line="89">
                <params>
                    <param name="timeout" type="long"/>
                </params>
                <comment line="98">
                    timeout                    
                </comment>
                <comment line="101">
                    Remove events from the event set for which
                     there is no corresponding enabled request (
                     this includes our internally requested events.)
                     This never returns null                    
                </comment>
                <scope line="90"/>
                <declaration name="eventSet" type="EventSet" line="94"/>
                <scope line="95">
                    <declaration name="fullEventSet" type="EventSetImpl" line="96"/>
                    <scope line="97"/>
                    <scope line="108"/>
                </scope>
                <scope line="113"/>
            </method>
            <method name="removeInternal" type="EventSet" line="120">
                <comment line="123">
                    Waiting forever, so removeUnfiltered() is never null                    
                </comment>
                <comment line="127">
                    Currently, no internal events are requested with a suspend
                     policy other than none, so we don&apos;t check for notifySuspend()
                     here. If this changes in the future, there is much
                     infrastructure that needs to be updated.                    
                </comment>
                <declaration name="eventSet" type="EventSet" line="121"/>
                <scope line="122"/>
            </method>
            <method name="startTimerThread" type="TimerThread" line="137">
                <params>
                    <param name="timeout" type="long"/>
                </params>
                <declaration name="thread" type="TimerThread" line="138"/>
            </method>
            <method name="shouldWait" type="boolean" line="144">
                <params>
                    <param name="timerThread" type="TimerThread"/>
                </params>
            </method>
            <method name="removeUnfiltered" type="EventSetImpl" line="150">
                <params>
                    <param name="timeout" type="long"/>
                </params>
                <comment line="153">
                    Make sure the VM has completed initialization before
                     trying to build events.                    
                </comment>
                <comment line="161">
                    If there&apos;s already something there, no need
                     for anything elaborate.                    
                </comment>
                <comment line="167">
                    If a timeout was specified, create a thread to
                     notify this one when a timeout
                     occurs. We can&apos;t use the timed version of wait()
                     because it is possible for multiple enqueue() calls
                     before we see something in the eventSet queue
                     (this is possible when multiple threads call
                     remove() concurrently -- not a great idea, but
                     it should be supported). Even if enqueue() did a
                     notify() instead of notifyAll() we are not able to
                     use a timed wait because there&apos;s no way to distinguish
                     a timeout from a notify.  That limitation implies a
                     possible race condition between a timed out thread
                     and a notified thread.                    
                </comment>
                <comment line="207">
                    The build is synchronized on the event set, don&apos;t hold                    
                </comment>
                <comment line="208">
                    the queue lock.                    
                </comment>
                <declaration name="eventSet" type="EventSetImpl" line="151"/>
                <scope line="159">
                    <scope line="160"/>
                    <scope line="166">
                        <declaration name="timerThread" type="TimerThread" line="182"/>
                        <scope line="183">
                            <scope line="184"/>
                            <scope line="188"/>
                        </scope>
                        <scope line="191">
                            <scope line="192"/>
                        </scope>
                        <scope line="197">
                            <scope line="198"/>
                        </scope>
                        <scope line="201"/>
                    </scope>
                </scope>
                <scope line="209"/>
            </method>
            <class name="TimerThread" line="216">
                <extends class="Thread"/>
                <declaration name="timedOut" type="boolean" line="217"/>
                <declaration name="timeout" type="long" line="218"/>
                <method name="TimerThread" type="constructor" line="220">
                    <params>
                        <param name="timeout" type="long"/>
                    </params>
                </method>
                <method name="timedOut" type="boolean" line="225"/>
                <method name="run" type="void" line="229">
                    <comment line="238">
                        Exit without notifying                        
                    </comment>
                    <scope line="230">
                        <declaration name="queue" type="EventQueueImpl" line="232"/>
                        <scope line="233"/>
                    </scope>
                    <scope line="237"/>
                </method>
            </class>
        </class>
    </source>