<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.jdi"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <class name="ArrayTypeImpl" line="35">
            <extends class="ReferenceTypeImpl"/>
            <comment line="73">
                Find the type object, if any, of a component type of this array.
                 The component type does not have to be immediate; e.g. this method
                 can be used to find the component Foo of Foo[][]. This method takes
                 advantage of the property that an array and its component must have
                 the same class loader. Since array set operations don&apos;t have an
                 implicit enclosing type like field and variable set operations,
                 this method is sometimes needed for proper type checking.                
            </comment>
            <comment line="128">
                Return true if an instance of the  given reference type
                 can be assigned to a variable of this type                
            </comment>
            <comment line="188">
                Save a pointless trip over the wire for these methods
                 which have undefined results for arrays.                
            </comment>
            <comment line="198">
                Defined always to be true for arrays                
            </comment>
            <implements interface="ArrayType"/>
            <method name="ArrayTypeImpl" type="constructor" line="38">
                <params>
                    <param name="aVm" type="VirtualMachine"/>
                    <param name="aRef" type="long"/>
                </params>
            </method>
            <method name="newInstance" type="ArrayReference" line="42">
                <params>
                    <param name="length" type="int"/>
                </params>
                <scope line="43"/>
                <scope line="46"/>
            </method>
            <method name="componentSignature" type="String" line="51">
                <comment line="52">
                    Just skip the leading &apos;[&apos;                    
                </comment>
            </method>
            <method name="componentTypeName" type="String" line="55">
                <declaration name="parser" type="JNITypeParser" line="56"/>
            </method>
            <method name="type" type="Type" line="60"/>
            <method name="addVisibleMethods" type="void" line="64">
                <params>
                    <param name="map" type="Map"/>
                </params>
                <comment line="65">
                    arrays don&apos;t have methods                    
                </comment>
            </method>
            <method name="allMethods" type="List<Method>" line="68">
                <comment line="69">
                    arrays don&apos;t have methods                    
                </comment>
            </method>
            <method name="findComponentType" type="Type" line="81">
                <params>
                    <param name="signature" type="String"/>
                </params>
                <comment line="84">
                    It&apos;s a reference type                    
                </comment>
                <comment line="97">
                    Component class has not yet been loaded                    
                </comment>
                <comment line="100">
                    It&apos;s a primitive type                    
                </comment>
                <declaration name="tag" type="byte" line="82"/>
                <scope line="83">
                    <declaration name="parser" type="JNITypeParser" line="85"/>
                    <declaration name="list" type="List" line="86"/>
                    <declaration name="iter" type="Iterator" line="87"/>
                    <scope line="88">
                        <declaration name="type" type="ReferenceType" line="89"/>
                        <declaration name="cl" type="ClassLoaderReference" line="90"/>
                        <scope line="93"/>
                    </scope>
                </scope>
                <scope line="99"/>
            </method>
            <method name="componentType" type="Type" line="105"/>
            <method name="isComponentAssignable" type="boolean" line="109">
                <params>
                    <param name="destination" type="Type"/>
                    <param name="source" type="Type"/>
                </params>
                <comment line="111">
                    Assignment of primitive arrays requires identical                    
                </comment>
                <comment line="112">
                    component types.                    
                </comment>
                <comment line="121">
                    Assignment of object arrays requires availability                    
                </comment>
                <comment line="122">
                    of widening conversion of component types                    
                </comment>
                <scope line="110"/>
                <scope line="114">
                    <scope line="115"/>
                    <declaration name="refSource" type="ReferenceTypeImpl" line="119"/>
                    <declaration name="refDestination" type="ReferenceTypeImpl" line="120"/>
                </scope>
            </method>
            <method name="isAssignableTo" type="boolean" line="131">
                <params>
                    <param name="destType" type="ReferenceType"/>
                </params>
                <comment line="137">
                    One or both component types has not yet been                    
                </comment>
                <comment line="138">
                    loaded =&gt; can&apos;t assign                    
                </comment>
                <comment line="142">
                    Only valid InterfaceType assignee is Cloneable                    
                </comment>
                <comment line="145">
                    Only valid ClassType assignee is Object                    
                </comment>
                <scope line="132">
                    <scope line="133">
                        <declaration name="destComponentType" type="Type" line="134"/>
                    </scope>
                    <scope line="136"/>
                </scope>
                <scope line="141"/>
                <scope line="144"/>
            </method>
            <method name="inheritedTypes" type="List<ReferenceType>" line="150"/>
            <method name="getModifiers" type="void" line="154">
                <comment line="158">
                    For object arrays, the return values for Interface
                     Accessible.isPrivate(), Accessible.isProtected(),
                     etc... are the same as would be returned for the
                     component type.  Fetch the modifier bits from the
                     component type and use those.
                    
                     For primitive arrays, the modifiers are always
                       VMModifiers.FINAL | VMModifiers.PUBLIC
                    
                     Reference com.sun.jdi.Accessible.java.                    
                </comment>
                <scope line="155"/>
                <scope line="170">
                    <declaration name="t" type="Type" line="171"/>
                    <scope line="172"/>
                    <scope line="174">
                        <declaration name="rt" type="ReferenceType" line="175"/>
                    </scope>
                </scope>
                <scope line="178"/>
            </method>
            <method name="toString" type="String" line="183"/>
            <method name="isPrepared" type="boolean" line="191"/>
            <method name="isVerified" type="boolean" line="192"/>
            <method name="isInitialized" type="boolean" line="193"/>
            <method name="failedToInitialize" type="boolean" line="194"/>
            <method name="isAbstract" type="boolean" line="195"/>
            <method name="isFinal" type="boolean" line="200"/>
        </class>
    </source>