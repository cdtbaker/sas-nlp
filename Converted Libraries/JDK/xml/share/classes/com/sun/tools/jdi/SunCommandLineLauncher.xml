<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.tools.jdi"/>
        <import package="com.sun.jdi.connect"/>
        <import package="com.sun.jdi.connect.spi"/>
        <import package="com.sun.jdi.VirtualMachine"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Random"/>
        <import package="java.io.IOException"/>
        <import package="java.io.File"/>
        <class name="SunCommandLineLauncher" line="38">
            <extends class="AbstractLauncher"/>
            <implements interface="LaunchingConnector"/>
            <declaration name="ARG_HOME" type="String" line="40"/>
            <declaration name="ARG_OPTIONS" type="String" line="41"/>
            <declaration name="ARG_MAIN" type="String" line="42"/>
            <declaration name="ARG_INIT_SUSPEND" type="String" line="43"/>
            <declaration name="ARG_QUOTE" type="String" line="44"/>
            <declaration name="ARG_VM_EXEC" type="String" line="45"/>
            <declaration name="transportService" type="TransportService" line="47"/>
            <declaration name="transport" type="Transport" line="48"/>
            <declaration name="usingSharedMemory" type="boolean" line="49"/>
            <method name="transportService" type="TransportService" line="51"/>
            <method name="transport" type="Transport" line="55"/>
            <method name="SunCommandLineLauncher" type="constructor" line="59">
                <comment line="63">
                    By default this connector uses either the shared memory
                     transport or the socket transport                    
                </comment>
                <scope line="66">
                    <declaration name="c" type="Class" line="67"/>
                    <anonymous_class line="69">
                        <method name="name" type="String" line="70"/>
                    </anonymous_class>
                </scope>
                <scope line="75"/>
                <scope line="76"/>
                <scope line="77"/>
                <scope line="78"/>
                <scope line="80">
                    <anonymous_class line="82">
                        <method name="name" type="String" line="83"/>
                    </anonymous_class>
                </scope>
            </method>
            <method name="hasWhitespace" type="boolean" line="129">
                <params>
                    <param name="string" type="String"/>
                </params>
                <declaration name="length" type="int" line="130"/>
                <scope line="131">
                    <scope line="132"/>
                </scope>
            </method>
            <method name="launch" type="VirtualMachine" line="143">
                <params>
                    <param name="arguments" type="Map<String,? extends Connector.Argument>"/>
                </params>
                <comment line="167">
                    Start listening.
                     If we&apos;re using the shared memory transport then we pick a
                     random address rather than using the (fixed) default.
                     Random() uses System.currentTimeMillis() as the seed
                     which can be a problem on windows (many calls to
                     currentTimeMillis can return the same value), so
                     we do a few retries if we get an IOException (we
                     assume the IOException is the filename is already in use.)                    
                </comment>
                <comment line="200">
                    A wrinkle in the environment:
                     64-bit executables are stored under $JAVA_HOMEbinos_arch
                     32-bit executables are stored under $JAVA_HOMEbin                    
                </comment>
                <comment line="216">
                    Quote only if necessary in case the quote arg value is bogus                    
                </comment>
                <comment line="224">
                    Quote only if necessary in case the quote arg value is bogus                    
                </comment>
                <comment line="235">
                    System.err.println(&quot;Command: \&quot;&quot; + command + &apos;&quot;&apos;);                    
                </comment>
                <declaration name="vm" type="VirtualMachine" line="144"/>
                <declaration name="home" type="String" line="146"/>
                <declaration name="options" type="String" line="147"/>
                <declaration name="mainClassAndArgs" type="String" line="148"/>
                <declaration name="wait" type="boolean" line="149"/>
                <declaration name="quote" type="String" line="151"/>
                <declaration name="exe" type="String" line="152"/>
                <declaration name="exePath" type="String" line="153"/>
                <scope line="155"/>
                <scope line="161"/>
                <declaration name="listenKey" type="TransportService.ListenKey" line="176"/>
                <scope line="177">
                    <declaration name="rr" type="Random" line="178"/>
                    <declaration name="failCount" type="int" line="179"/>
                    <scope line="180">
                        <scope line="181">
                            <declaration name="address" type="String" line="182"/>
                        </scope>
                        <scope line="186">
                            <scope line="187"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="192"/>
                <declaration name="address" type="String" line="195"/>
                <scope line="197">
                    <scope line="198">
                        <declaration name="os_arch" type="String" line="204"/>
                        <scope line="206"/>
                        <scope line="209"/>
                    </scope>
                    <scope line="212"/>
                    <scope line="216"/>
                    <declaration name="xrun" type="String" line="220"/>
                    <scope line="224"/>
                    <declaration name="command" type="String" line="228"/>
                </scope>
                <scope line="237"/>
            </method>
            <method name="name" type="String" line="244"/>
            <method name="description" type="String" line="248"/>
        </class>
    </source>