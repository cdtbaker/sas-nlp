<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.attach">
        <import package="com.sun.tools.attach.spi.AttachProvider"/>
        <class name="VirtualMachineDescriptor" line="30">
            <comment line="65">
                0 =&gt; not computed                
            </comment>
            <javadoc line="30">
                Describes a Java virtual machine.
                  &lt;p&gt; A &lt;code&gt;VirtualMachineDescriptor&lt;/code&gt; is a container class used to
                  describe a Java virtual machine. It encapsulates an identifier that identifies
                  a target virtual machine, and a reference to the {@link com.sun.tools.attach.spi.AttachProvider AttachProvider} that should be used
                  when attempting to attach to the virtual machine. The identifier is
                  implementation-dependent but is typically the process identifier (or pid)
                  environments where each Java virtual machine runs in its own operating system
                  process. &lt;/p&gt;
                  &lt;p&gt; A &lt;code&gt;VirtualMachineDescriptor&lt;/code&gt; also has a {@link #displayName() displayName}.
                  The display name is typically a human readable string that a tool might
                  display to a user. For example, a tool that shows a list of Java
                  virtual machines running on a system might use the display name rather
                  than the identifier. A &lt;code&gt;VirtualMachineDescriptor&lt;/code&gt; may be
                  created without a &lt;i&gt;display name&lt;/i&gt;. In that case the identifier is
                  used as the &lt;i&gt;display name&lt;/i&gt;.
                  &lt;p&gt; &lt;code&gt;VirtualMachineDescriptor&lt;/code&gt; instances are typically created by
                  invoking the {@link com.sun.tools.attach.VirtualMachine#list VirtualMachine.list()}method. This returns the complete list of descriptors to describe the
                  Java virtual machines known to all installed {@link com.sun.tools.attach.spi.AttachProvider attach providers}.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="provider" type="AttachProvider" line="60"/>
            <declaration name="id" type="String" line="61"/>
            <declaration name="displayName" type="String" line="62"/>
            <declaration name="hash" type="int" line="64"/>
            <javadoc line="66">
                Creates a virtual machine descriptor from the given components.                
                <param>
                    provider      The AttachProvider to attach to the Java virtual machine.                    
                </param>
                <param>
                    id            The virtual machine identifier.                    
                </param>
                <param>
                    displayName   The display name.                    
                </param>
                <throws>
                    NullPointerExceptionIf any of the arguments are <code>null</code>                    
                </throws>
            </javadoc>
            <method name="VirtualMachineDescriptor" type="constructor" line="76">
                <params>
                    <param name="provider" type="AttachProvider"/>
                    <param name="id" type="String"/>
                    <param name="displayName" type="String"/>
                </params>
                <scope line="77"/>
                <scope line="80"/>
                <scope line="83"/>
            </method>
            <javadoc line="91">
                Creates a virtual machine descriptor from the given components.
                  &lt;p&gt; This convenience constructor works as if by invoking the
                  three-argument constructor as follows:
                  &lt;blockquote&gt;&lt;tt&gt;
                  new&amp;nbsp;{@link #VirtualMachineDescriptor(AttachProvider,String,String)VirtualMachineDescriptor}(provider, &amp;nbsp;id, &amp;nbsp;id);
                  &lt;/tt&gt;&lt;/blockquote&gt;
                  &lt;p&gt; That is, it creates a virtual machine descriptor such that
                  the &lt;i&gt;display name&lt;/i&gt; is the same as the virtual machine
                  identifier.                
                <param>
                    provider      The AttachProvider to attach to the Java virtual machine.                    
                </param>
                <param>
                    id            The virtual machine identifier.                    
                </param>
                <throws>
                    NullPointerExceptionIf <tt>provider</tt> or <tt>id</tt> is <tt>null</tt>.                    
                </throws>
            </javadoc>
            <method name="VirtualMachineDescriptor" type="constructor" line="112">
                <params>
                    <param name="provider" type="AttachProvider"/>
                    <param name="id" type="String"/>
                </params>
            </method>
            <javadoc line="116">
                Return the &lt;code&gt;AttachProvider&lt;/code&gt; that this descriptor references.                
                <return>
                    The <code>AttachProvider</code> that this descriptor references.                    
                </return>
            </javadoc>
            <method name="provider" type="AttachProvider" line="121"/>
            <javadoc line="125">
                Return the identifier component of this descriptor.                
                <return>
                    The identifier component of this descriptor.                    
                </return>
            </javadoc>
            <method name="id" type="String" line="130"/>
            <javadoc line="134">
                Return the &lt;i&gt;display name&lt;/i&gt; component of this descriptor.                
                <return>
                    The display name component of this descriptor.                    
                </return>
            </javadoc>
            <method name="displayName" type="String" line="139"/>
            <javadoc line="143">
                Returns a hash-code value for this VirtualMachineDescriptor. The hash
                  code is based upon the descriptor&apos;s components, and satifies
                  the general contract of the {@link java.lang.Object#hashCode()Object.hashCode} method.                
                <return>
                    A hash-code value for this descriptor.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="151">
                <scope line="152"/>
            </method>
            <javadoc line="159">
                Tests this VirtualMachineDescriptor for equality with another object.
                  &lt;p&gt; If the given object is not a VirtualMachineDescriptor then this
                  method returns &lt;tt&gt;false&lt;/tt&gt;. For two VirtualMachineDescriptors to
                  be considered equal requires that they both reference the same
                  provider, and their {@link #id() identifiers} are equal. &lt;/p&gt;
                  &lt;p&gt; This method satisfies the general contract of the {@link java.lang.Object#equals(Object) Object.equals} method. &lt;/p&gt;                
                <param>
                    ob   The object to which this object is to be compared                    
                </param>
                <return>
                    <tt>true</tt> if, and only if, the given object is
                      a VirtualMachineDescriptor that is equal to this
                      VirtualMachineDescriptor.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="176">
                <params>
                    <param name="ob" type="Object"/>
                </params>
                <declaration name="other" type="VirtualMachineDescriptor" line="181"/>
                <scope line="182"/>
                <scope line="185"/>
            </method>
            <javadoc line="191">
                Returns the string representation of the &lt;code&gt;VirtualMachineDescriptor&lt;/code&gt;.                
            </javadoc>
            <method name="toString" type="String" line="194">
                <declaration name="s" type="String" line="195"/>
                <scope line="196"/>
            </method>
        </class>
    </source>