<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.jdi"/>
        <import package="com.sun.jdi.event"/>
        <import package="com.sun.jdi.request"/>
        <import package="java.util"/>
        <class name="EventSetImpl" line="49">
            <extends class="ArrayList">
                <type_params>
                    <type_param name="Event"/>
                </type_params>
            </extends>
            <comment line="52">
                we implement Mirror                
            </comment>
            <comment line="598">
                Complete the construction of an EventSet.  This is called from
                 an event handler thread.  It upacks the JDWP events inside
                 the packet and creates EventImpls for them.  The EventSet is already
                 on EventQueues when this is called, so it has to be synch.                
            </comment>
            <comment line="855">
                                
            </comment>
            <implements interface="EventSet"/>
            <declaration name="vm" type="VirtualMachineImpl" line="51"/>
            <declaration name="pkt" type="Packet" line="52"/>
            <declaration name="suspendPolicy" type="byte" line="53"/>
            <declaration name="internalEventSet" type="EventSetImpl" line="54"/>
            <method name="toString" type="String" line="56">
                <declaration name="string" type="String" line="57"/>
                <declaration name="first" type="boolean" line="59"/>
                <scope line="60">
                    <scope line="61"/>
                </scope>
            </method>
            <class name="EventImpl" line="71">
                <extends class="MirrorImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="Event"/>
                <declaration name="eventCmd" type="byte" line="73"/>
                <declaration name="requestID" type="int" line="74"/>
                <declaration name="request" type="EventRequest" line="76"/>
                <javadoc line="78">
                    Constructor for events.                    
                </javadoc>
                <method name="EventImpl" type="constructor" line="82">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.EventsCommon"/>
                        <param name="requestID" type="int"/>
                    </params>
                    <declaration name="ermi" type="EventRequestManagerImpl" line="86"/>
                </method>
                <method name="equals" type="boolean" line="94">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="98"/>
                <javadoc line="102">
                    Constructor for VM disconnected events.                    
                </javadoc>
                <method name="EventImpl" type="constructor" line="105">
                    <params>
                        <param name="eventCmd" type="byte"/>
                    </params>
                </method>
                <method name="request" type="EventRequest" line="112"/>
                <method name="requestID" type="int" line="116"/>
                <method name="destination" type="EventDestination" line="120">
                    <comment line="122">
                        We need to decide if this event is for
                         1. an internal request
                         2. a client request that is no longer available, ie
                            it has been deleted, or disabled and re-enabled
                            which gives it a new ID.
                         3. a current client request that is disabled
                         4. a current enabled client request.
                        
                         We will filter this set into a set
                         that contains only 1s for our internal queue
                         and a set that contains only 4s for our client queue.
                         If we get an EventSet that contains only 2 and 3
                         then we have to resume it if it is not SUSPEND_NONE
                         because no one else will.                        
                    </comment>
                    <comment line="139">
                        An unsolicited event.  These have traditionally
                         been treated as client events.                        
                    </comment>
                    <comment line="145">
                        Is this an event for a current client request?                        
                    </comment>
                    <comment line="147">
                        Nope.  Is it an event for an internal request?                        
                    </comment>
                    <comment line="150">
                        Yep                        
                    </comment>
                    <comment line="156">
                        We found a client request                        
                    </comment>
                    <scope line="137"/>
                    <scope line="145">
                        <declaration name="ermi" type="EventRequestManagerImpl" line="147"/>
                        <scope line="148"/>
                    </scope>
                    <scope line="156"/>
                </method>
                <method name="eventName" type="String" line="162"/>
                <method name="toString" type="String" line="164"/>
            </class>
            <class name="ThreadedEventImpl" line="170">
                <extends class="EventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <declaration name="thread" type="ThreadReference" line="171"/>
                <method name="ThreadedEventImpl" type="constructor" line="174">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.EventsCommon"/>
                        <param name="requestID" type="int"/>
                        <param name="thread" type="ThreadReference"/>
                    </params>
                </method>
                <method name="thread" type="ThreadReference" line="179"/>
                <method name="toString" type="String" line="183"/>
            </class>
            <class name="LocatableEventImpl" line="188">
                <extends class="ThreadedEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="Locatable"/>
                <declaration name="location" type="Location" line="190"/>
                <method name="LocatableEventImpl" type="constructor" line="194">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.EventsCommon"/>
                        <param name="requestID" type="int"/>
                        <param name="thread" type="ThreadReference"/>
                        <param name="location" type="Location"/>
                    </params>
                </method>
                <method name="location" type="Location" line="199"/>
                <javadoc line="203">
                    For MethodEntry and MethodExit                    
                </javadoc>
                <method name="method" type="Method" line="206"/>
                <method name="toString" type="String" line="210"/>
            </class>
            <class name="BreakpointEventImpl" line="217">
                <extends class="LocatableEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="BreakpointEvent"/>
                <method name="BreakpointEventImpl" type="constructor" line="219">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.Breakpoint"/>
                    </params>
                </method>
                <method name="eventName" type="String" line="223"/>
            </class>
            <class name="StepEventImpl" line="228">
                <extends class="LocatableEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="StepEvent"/>
                <method name="StepEventImpl" type="constructor" line="229">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.SingleStep"/>
                    </params>
                </method>
                <method name="eventName" type="String" line="233"/>
            </class>
            <class name="MethodEntryEventImpl" line="238">
                <extends class="LocatableEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="MethodEntryEvent"/>
                <method name="MethodEntryEventImpl" type="constructor" line="240">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.MethodEntry"/>
                    </params>
                </method>
                <method name="eventName" type="String" line="244"/>
            </class>
            <class name="MethodExitEventImpl" line="249">
                <extends class="LocatableEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="MethodExitEvent"/>
                <declaration name="returnVal" type="Value" line="251"/>
                <method name="MethodExitEventImpl" type="constructor" line="253">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.MethodExit"/>
                    </params>
                </method>
                <method name="MethodExitEventImpl" type="constructor" line="257">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.MethodExitWithReturnValue"/>
                    </params>
                </method>
                <method name="eventName" type="String" line="262"/>
                <method name="returnValue" type="Value" line="266">
                    <scope line="267"/>
                </method>
            </class>
            <class name="MonitorContendedEnterEventImpl" line="276">
                <extends class="LocatableEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="MonitorContendedEnterEvent"/>
                <declaration name="monitor" type="ObjectReference" line="278"/>
                <method name="MonitorContendedEnterEventImpl" type="constructor" line="280">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.MonitorContendedEnter"/>
                    </params>
                </method>
                <method name="eventName" type="String" line="285"/>
                <method name="monitor" type="ObjectReference" line="289"/>
            </class>
            <class name="MonitorContendedEnteredEventImpl" line="295">
                <extends class="LocatableEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="MonitorContendedEnteredEvent"/>
                <declaration name="monitor" type="ObjectReference" line="297"/>
                <method name="MonitorContendedEnteredEventImpl" type="constructor" line="299">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.MonitorContendedEntered"/>
                    </params>
                </method>
                <method name="eventName" type="String" line="304"/>
                <method name="monitor" type="ObjectReference" line="308"/>
            </class>
            <class name="MonitorWaitEventImpl" line="314">
                <extends class="LocatableEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="MonitorWaitEvent"/>
                <declaration name="monitor" type="ObjectReference" line="316"/>
                <declaration name="timeout" type="long" line="317"/>
                <method name="MonitorWaitEventImpl" type="constructor" line="319">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.MonitorWait"/>
                    </params>
                </method>
                <method name="eventName" type="String" line="325"/>
                <method name="monitor" type="ObjectReference" line="329"/>
                <method name="timeout" type="long" line="333"/>
            </class>
            <class name="MonitorWaitedEventImpl" line="338">
                <extends class="LocatableEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="MonitorWaitedEvent"/>
                <declaration name="monitor" type="ObjectReference" line="340"/>
                <declaration name="timed_out" type="boolean" line="341"/>
                <method name="MonitorWaitedEventImpl" type="constructor" line="343">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.MonitorWaited"/>
                    </params>
                </method>
                <method name="eventName" type="String" line="349"/>
                <method name="monitor" type="ObjectReference" line="353"/>
                <method name="timedout" type="boolean" line="357"/>
            </class>
            <class name="ClassPrepareEventImpl" line="362">
                <extends class="ThreadedEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="ClassPrepareEvent"/>
                <declaration name="referenceType" type="ReferenceType" line="364"/>
                <method name="ClassPrepareEventImpl" type="constructor" line="366">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.ClassPrepare"/>
                    </params>
                </method>
                <method name="referenceType" type="ReferenceType" line="373"/>
                <method name="eventName" type="String" line="377"/>
            </class>
            <class name="ClassUnloadEventImpl" line="382">
                <extends class="EventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="ClassUnloadEvent"/>
                <declaration name="classSignature" type="String" line="383"/>
                <method name="ClassUnloadEventImpl" type="constructor" line="385">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.ClassUnload"/>
                    </params>
                </method>
                <method name="className" type="String" line="390"/>
                <method name="classSignature" type="String" line="395"/>
                <method name="eventName" type="String" line="399"/>
            </class>
            <class name="ExceptionEventImpl" line="404">
                <extends class="LocatableEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="ExceptionEvent"/>
                <declaration name="exception" type="ObjectReference" line="406"/>
                <declaration name="catchLocation" type="Location" line="407"/>
                <method name="ExceptionEventImpl" type="constructor" line="409">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.Exception"/>
                    </params>
                </method>
                <method name="exception" type="ObjectReference" line="415"/>
                <method name="catchLocation" type="Location" line="419"/>
                <method name="eventName" type="String" line="423"/>
            </class>
            <class name="ThreadDeathEventImpl" line="428">
                <extends class="ThreadedEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="ThreadDeathEvent"/>
                <method name="ThreadDeathEventImpl" type="constructor" line="430">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.ThreadDeath"/>
                    </params>
                </method>
                <method name="eventName" type="String" line="434"/>
            </class>
            <class name="ThreadStartEventImpl" line="439">
                <extends class="ThreadedEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="ThreadStartEvent"/>
                <method name="ThreadStartEventImpl" type="constructor" line="441">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.ThreadStart"/>
                    </params>
                </method>
                <method name="eventName" type="String" line="445"/>
            </class>
            <class name="VMStartEventImpl" line="450">
                <extends class="ThreadedEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="VMStartEvent"/>
                <method name="VMStartEventImpl" type="constructor" line="452">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.VMStart"/>
                    </params>
                </method>
                <method name="eventName" type="String" line="456"/>
            </class>
            <class name="VMDeathEventImpl" line="461">
                <extends class="EventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="VMDeathEvent"/>
                <method name="VMDeathEventImpl" type="constructor" line="463">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.VMDeath"/>
                    </params>
                </method>
                <method name="eventName" type="String" line="467"/>
            </class>
            <class name="VMDisconnectEventImpl" line="472">
                <extends class="EventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="VMDisconnectEvent"/>
                <method name="VMDisconnectEventImpl" type="constructor" line="475"/>
                <method name="eventName" type="String" line="479"/>
            </class>
            <class name="WatchpointEventImpl" line="484">
                <extends class="LocatableEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="WatchpointEvent"/>
                <declaration name="refType" type="ReferenceTypeImpl" line="486"/>
                <declaration name="fieldID" type="long" line="487"/>
                <declaration name="object" type="ObjectReference" line="488"/>
                <declaration name="field" type="Field" line="489"/>
                <method name="WatchpointEventImpl" type="constructor" line="495">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.EventsCommon"/>
                        <param name="requestID" type="int"/>
                        <param name="thread" type="ThreadReference"/>
                        <param name="location" type="Location"/>
                        <param name="refTypeTag" type="byte"/>
                        <param name="typeID" type="long"/>
                        <param name="fieldID" type="long"/>
                        <param name="object" type="ObjectReference"/>
                    </params>
                </method>
                <method name="field" type="Field" line="502">
                    <scope line="503"/>
                </method>
                <method name="object" type="ObjectReference" line="509"/>
                <method name="valueCurrent" type="Value" line="513">
                    <scope line="514"/>
                    <scope line="516"/>
                </method>
            </class>
            <class name="AccessWatchpointEventImpl" line="522">
                <extends class="WatchpointEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="AccessWatchpointEvent"/>
                <method name="AccessWatchpointEventImpl" type="constructor" line="525">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.FieldAccess"/>
                    </params>
                </method>
                <method name="eventName" type="String" line="530"/>
            </class>
            <class name="ModificationWatchpointEventImpl" line="535">
                <extends class="WatchpointEventImpl"/>
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="ModificationWatchpointEvent"/>
                <declaration name="newValue" type="Value" line="537"/>
                <method name="ModificationWatchpointEventImpl" type="constructor" line="540">
                    <params>
                        <param name="evt" type="JDWP.Event.Composite.Events.FieldModification"/>
                    </params>
                </method>
                <method name="valueToBe" type="Value" line="546"/>
                <method name="eventName" type="String" line="550"/>
            </class>
            <javadoc line="555">
                Events are constructed on the thread which reads all data from the
                  transport. This means that the packet cannot be converted to real
                  JDI objects as that may involve further communications with the
                  back end which would deadlock.
                  Hence the {@link #build()} method below called by EventQueue.                
            </javadoc>
            <method name="EventSetImpl" type="constructor" line="563">
                <params>
                    <param name="aVm" type="VirtualMachine"/>
                    <param name="pkt" type="Packet"/>
                </params>
                <comment line="567">
                    From &quot;MirrorImpl&quot;:
                     Yes, its a bit of a hack. But by doing it this
                     way, this is the only place we have to change
                     typing to substitute a new impl.                    
                </comment>
            </method>
            <javadoc line="575">
                Constructor for special events like VM disconnected                
            </javadoc>
            <method name="EventSetImpl" type="constructor" line="578">
                <params>
                    <param name="aVm" type="VirtualMachine"/>
                    <param name="eventCmd" type="byte"/>
                </params>
            </method>
            <method name="addEvent" type="void" line="591">
                <params>
                    <param name="evt" type="EventImpl"/>
                </params>
                <comment line="593">
                    Note that this class has a public add method that throws
                     an exception so that clients can&apos;t modify the EventSet                    
                </comment>
            </method>
            <method name="build" type="void" line="603">
                <comment line="634">
                    ignore - see bug 6502716                    
                </comment>
                <comment line="640">
                    Ignore disabled, deleted, unknown events, but
                     save the thread if there is one since we might
                     have to resume it.  Note that events for different
                     threads can&apos;t be in the same event set.                    
                </comment>
                <comment line="662">
                    No longer needed - free it up                    
                </comment>
                <comment line="664">
                    Avoid hangs described in 6296125, 6293795                    
                </comment>
                <comment line="666">
                    This set has no client events.  If we don&apos;t do
                     needed resumes, no one else is going to.                    
                </comment>
                <comment line="671">
                    See bug 6485605.                    
                </comment>
                <comment line="675">
                    apparently, there is nothing to resume.                    
                </comment>
                <scope line="604"/>
                <declaration name="ps" type="PacketStream" line="607"/>
                <declaration name="compEvt" type="JDWP.Event.Composite" line="608"/>
                <scope line="610"/>
                <declaration name="fix6485605" type="ThreadReference" line="626"/>
                <scope line="627">
                    <declaration name="evt" type="EventImpl" line="628"/>
                    <scope line="629">
                        <scope line="630"/>
                        <scope line="632"/>
                    </scope>
                    <scope line="644"/>
                    <scope line="652"/>
                </scope>
                <scope line="664">
                    <scope line="667"/>
                    <scope line="669">
                        <scope line="671"/>
                        <scope line="673"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="683">
                Filter out internal events                
            </javadoc>
            <method name="userFilter" type="EventSet" line="686"/>
            <javadoc line="690">
                Filter out user events.                
            </javadoc>
            <method name="internalFilter" type="EventSet" line="693"/>
            <method name="createEvent" type="EventImpl" line="697">
                <params>
                    <param name="evt" type="JDWP.Event.Composite.Events"/>
                </params>
                <comment line="774">
                    Ignore unknown event types                    
                </comment>
                <declaration name="comm" type="JDWP.Event.Composite.Events.EventsCommon" line="698"/>
            </method>
            <method name="virtualMachine" type="VirtualMachine" line="780"/>
            <method name="suspendPolicy" type="int" line="784"/>
            <method name="eventThread" type="ThreadReference" line="788">
                <scope line="789">
                    <scope line="790"/>
                </scope>
            </method>
            <method name="resume" type="void" line="797">
                <comment line="811">
                    Do nothing                    
                </comment>
                <declaration name="thread" type="ThreadReference" line="803"/>
                <scope line="804"/>
            </method>
            <method name="iterator" type="Iterator<Event>" line="817"/>
            <method name="eventIterator" type="EventIterator" line="821"/>
            <class name="Itr" line="825">
                <comment line="76">
                    This is set only for client requests, not internal requests.                    
                </comment>
                <comment line="92">
                    Override superclass back to default equality                    
                </comment>
                <implements interface="EventIterator"/>
                <declaration name="cursor" type="int" line="826"/>
                <javadoc line="826">
                    Index of element to be returned by subsequent call to next.                    
                </javadoc>
                <method name="hasNext" type="boolean" line="831"/>
                <method name="next" type="Event" line="835">
                    <scope line="836">
                        <declaration name="nxt" type="Event" line="837"/>
                    </scope>
                    <scope line="840"/>
                </method>
                <method name="nextEvent" type="Event" line="845"/>
                <method name="remove" type="void" line="849"/>
            </class>
            <method name="add" type="boolean" line="856">
                <params>
                    <param name="o" type="Event"/>
                </params>
            </method>
            <method name="remove" type="boolean" line="859">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="addAll" type="boolean" line="862">
                <params>
                    <param name="coll" type="Collection<? extends Event>"/>
                </params>
            </method>
            <method name="removeAll" type="boolean" line="865">
                <params>
                    <param name="coll" type="Collection<?>"/>
                </params>
            </method>
            <method name="retainAll" type="boolean" line="868">
                <params>
                    <param name="coll" type="Collection<?>"/>
                </params>
            </method>
            <method name="clear" type="void" line="871"/>
        </class>
    </source>