<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.jdi"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.util"/>
        <class name="VMState" line="33">
            <comment line="37">
                Listeners                
            </comment>
            <comment line="38">
                synchronized (this)                
            </comment>
            <comment line="39">
                synchronized (this)                
            </comment>
            <comment line="41">
                Certain information can be cached only when the entire VM is
                 suspended and there are no pending resumes. The fields below
                 are used to track whether there are pending resumes. (There
                 is an assumption that JDWP command ids are increasing over time.)                
            </comment>
            <comment line="47">
                synchronized (this)                
            </comment>
            <comment line="48">
                synchronized (this)                
            </comment>
            <comment line="50">
                This is cached only while the VM is suspended                
            </comment>
            <comment line="56">
                synchronized (this)                
            </comment>
            <comment line="92">
                A JDWP command has been completed (reply has been received).
                 Update data that tracks pending resume commands.                
            </comment>
            <declaration name="vm" type="VirtualMachineImpl" line="34"/>
            <declaration name="listeners" type="List&lt;WeakReference&gt;" line="37"/>
            <declaration name="notifyingListeners" type="boolean" line="38"/>
            <declaration name="lastCompletedCommandId" type="int" line="46"/>
            <declaration name="lastResumeCommandId" type="int" line="47"/>
            <class name="Cache" line="50">
                <comment line="52">
                    cached Top Level ThreadGroups                    
                </comment>
                <comment line="53">
                    cached Threads                    
                </comment>
                <declaration name="groups" type="List&lt;ThreadGroupReference&gt;" line="51"/>
                <declaration name="threads" type="List&lt;ThreadReference&gt;" line="52"/>
            </class>
            <declaration name="cache" type="Cache" line="55"/>
            <declaration name="markerCache" type="Cache" line="56"/>
            <method name="disableCache" type="void" line="58">
                <scope line="59"/>
            </method>
            <method name="enableCache" type="void" line="64">
                <scope line="65"/>
            </method>
            <method name="getCache" type="Cache" line="70">
                <scope line="71">
                    <scope line="72"/>
                </scope>
            </method>
            <method name="VMState" type="constructor" line="79">
                <params>
                    <param name="vm" type="VirtualMachineImpl"/>
                </params>
            </method>
            <javadoc line="83">
                Is the VM currently suspended, for the purpose of caching?
                  Must be called synchronized on vm.state()                
            </javadoc>
            <method name="isSuspended" type="boolean" line="87"/>
            <method name="notifyCommandComplete" type="void" line="95">
                <params>
                    <param name="id" type="int"/>
                </params>
            </method>
            <method name="freeze" type="void" line="99">
                <comment line="101">
                    No pending resumes to worry about. The VM is suspended
                     and additional state can be cached. Notify all
                     interested listeners.                    
                </comment>
                <scope line="100"/>
            </method>
            <method name="thawCommand" type="PacketStream" line="111">
                <params>
                    <param name="sender" type="CommandSender"/>
                </params>
                <declaration name="stream" type="PacketStream" line="112"/>
            </method>
            <javadoc line="118">
                All threads are resuming                
            </javadoc>
            <method name="thaw" type="void" line="121"/>
            <javadoc line="125">
                Tell listeners to invalidate suspend-sensitive caches.
                  If resumingThread != null, then only that thread is being
                  resumed.                
            </javadoc>
            <method name="thaw" type="void" line="130">
                <params>
                    <param name="resumingThread" type="ThreadReference"/>
                </params>
                <scope line="131">
                    <scope line="132"/>
                </scope>
            </method>
            <method name="processVMAction" type="void" line="140">
                <params>
                    <param name="action" type="VMAction"/>
                </params>
                <comment line="142">
                    Prevent recursion                    
                </comment>
                <comment line="163">
                    Listener is unreachable; clean up                    
                </comment>
                <scope line="141">
                    <declaration name="iter" type="Iterator" line="145"/>
                    <scope line="146">
                        <declaration name="ref" type="WeakReference" line="147"/>
                        <declaration name="listener" type="VMListener" line="148"/>
                        <scope line="149">
                            <declaration name="keep" type="boolean" line="150"/>
                            <scope line="159"/>
                        </scope>
                        <scope line="162"/>
                    </scope>
                </scope>
            </method>
            <method name="addListener" type="void" line="172">
                <params>
                    <param name="listener" type="VMListener"/>
                </params>
            </method>
            <method name="hasListener" type="boolean" line="176">
                <params>
                    <param name="listener" type="VMListener"/>
                </params>
            </method>
            <method name="removeListener" type="void" line="180">
                <params>
                    <param name="listener" type="VMListener"/>
                </params>
                <declaration name="iter" type="Iterator" line="181"/>
                <scope line="182">
                    <declaration name="ref" type="WeakReference" line="183"/>
                    <scope line="184"/>
                </scope>
            </method>
            <method name="allThreads" type="List<ThreadReference>" line="191">
                <comment line="197">
                    may be stale when returned, but not provably so                    
                </comment>
                <declaration name="threads" type="List&lt;ThreadReference&gt;" line="192"/>
                <scope line="193">
                    <declaration name="local" type="Cache" line="194"/>
                    <scope line="196"/>
                    <scope line="200">
                        <scope line="203">
                            <scope line="205"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="211"/>
            </method>
            <method name="topLevelThreadGroups" type="List<ThreadGroupReference>" line="218">
                <declaration name="groups" type="List&lt;ThreadGroupReference&gt;" line="219"/>
                <scope line="220">
                    <declaration name="local" type="Cache" line="221"/>
                    <scope line="223"/>
                    <scope line="226">
                        <scope line="230">
                            <scope line="232"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="239"/>
            </method>
        </class>
    </source>