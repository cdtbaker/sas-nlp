<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.example.trace">
        <import package="com.sun.jdi"/>
        <import package="com.sun.jdi.request"/>
        <import package="com.sun.jdi.event"/>
        <import package="java.util"/>
        <import package="java.io.PrintWriter"/>
        <class name="EventThread" line="35">
            <extends class="Thread"/>
            <comment line="43">
                Running VM                
            </comment>
            <comment line="44">
                Packages to exclude                
            </comment>
            <comment line="45">
                Where output goes                
            </comment>
            <comment line="47">
                Starting indent for next thread                
            </comment>
            <comment line="49">
                Connected to VM                
            </comment>
            <comment line="50">
                VMDeath occurred                
            </comment>
            <comment line="52">
                Maps ThreadReference to ThreadTrace instances                
            </comment>
            <comment line="282">
                Forward event for thread specific processing                
            </comment>
            <comment line="287">
                Forward event for thread specific processing                
            </comment>
            <comment line="292">
                Forward event for thread specific processing                
            </comment>
            <comment line="297">
                Forward event for thread specific processing                
            </comment>
            <javadoc line="35">
                This class processes incoming JDI events and displays them                
                <author>
                    Robert Field                    
                </author>
            </javadoc>
            <declaration name="vm" type="VirtualMachine" line="42"/>
            <declaration name="excludes" type="String[]" line="43"/>
            <declaration name="writer" type="PrintWriter" line="44"/>
            <declaration name="nextBaseIndent" type="String" line="46"/>
            <declaration name="connected" type="boolean" line="48"/>
            <declaration name="vmDied" type="boolean" line="49"/>
            <declaration name="traceMap" type="Map&lt;ThreadReference,ThreadTrace&gt;" line="52"/>
            <method name="EventThread" type="constructor" line="55">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="excludes" type="String[]"/>
                    <param name="writer" type="PrintWriter"/>
                </params>
            </method>
            <javadoc line="62">
                Run the event handling thread.
                  As long as we are connected, get event sets off
                  the queue and dispatch the events within them.                
            </javadoc>
            <method name="run" type="void" line="68">
                <comment line="80">
                    Ignore                    
                </comment>
                <declaration name="queue" type="EventQueue" line="69"/>
                <scope line="70">
                    <scope line="71">
                        <declaration name="eventSet" type="EventSet" line="72"/>
                        <declaration name="it" type="EventIterator" line="73"/>
                        <scope line="74"/>
                    </scope>
                    <scope line="78"/>
                    <scope line="80"/>
                </scope>
            </method>
            <javadoc line="87">
                Create the desired event requests, and enable
                  them so that we will get events.                
                <param>
                    excludes     Class patterns for which we don't want events                    
                </param>
                <param>
                    watchFields  Do we want to watch assignments to fields                    
                </param>
            </javadoc>
            <method name="setEventRequests" type="void" line="93">
                <params>
                    <param name="watchFields" type="boolean"/>
                </params>
                <comment line="97">
                    want all exceptions                    
                </comment>
                <comment line="100">
                    suspend so we can step                    
                </comment>
                <comment line="119">
                    Make sure we sync on thread death                    
                </comment>
                <declaration name="mgr" type="EventRequestManager" line="94"/>
                <declaration name="excReq" type="ExceptionRequest" line="97"/>
                <declaration name="menr" type="MethodEntryRequest" line="103"/>
                <scope line="104"/>
                <declaration name="mexr" type="MethodExitRequest" line="110"/>
                <scope line="111"/>
                <declaration name="tdr" type="ThreadDeathRequest" line="117"/>
                <scope line="122">
                    <declaration name="cpr" type="ClassPrepareRequest" line="123"/>
                    <scope line="124"/>
                </scope>
            </method>
            <class name="ThreadTrace" line="132">
                <comment line="186">
                    Step to exception catch                    
                </comment>
                <javadoc line="132">
                    This class keeps context on events in one thread.
                      In this implementation, context is the indentation prefix.                    
                </javadoc>
                <declaration name="thread" type="ThreadReference" line="137"/>
                <declaration name="baseIndent" type="String" line="138"/>
                <declaration name="threadDelta" type="String" line="139"/>
                <declaration name="indent" type="StringBuffer" line="140"/>
                <method name="ThreadTrace" type="constructor" line="142">
                    <params>
                        <param name="thread" type="ThreadReference"/>
                    </params>
                </method>
                <method name="println" type="void" line="150">
                    <params>
                        <param name="str" type="String"/>
                    </params>
                </method>
                <method name="methodEntryEvent" type="void" line="155">
                    <params>
                        <param name="event" type="MethodEntryEvent"/>
                    </params>
                </method>
                <method name="methodExitEvent" type="void" line="161">
                    <params>
                        <param name="event" type="MethodExitEvent"/>
                    </params>
                </method>
                <method name="fieldWatchEvent" type="void" line="165">
                    <params>
                        <param name="event" type="ModificationWatchpointEvent"/>
                    </params>
                    <declaration name="field" type="Field" line="166"/>
                    <declaration name="value" type="Value" line="167"/>
                </method>
                <method name="exceptionEvent" type="void" line="171">
                    <params>
                        <param name="event" type="ExceptionEvent"/>
                    </params>
                    <comment line="176">
                        Step to the catch                        
                    </comment>
                    <comment line="181">
                        next step only                        
                    </comment>
                    <declaration name="mgr" type="EventRequestManager" line="176"/>
                    <declaration name="req" type="StepRequest" line="177"/>
                </method>
                <method name="stepEvent" type="void" line="186">
                    <params>
                        <param name="event" type="StepEvent"/>
                    </params>
                    <comment line="188">
                        Adjust call depth                        
                    </comment>
                    <declaration name="cnt" type="int" line="188"/>
                    <scope line="190"/>
                    <scope line="192"/>
                    <scope line="194"/>
                    <declaration name="mgr" type="EventRequestManager" line="198"/>
                </method>
                <method name="threadDeathEvent" type="void" line="202">
                    <params>
                        <param name="event" type="ThreadDeathEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="208">
                Returns the ThreadTrace instance for the specified thread,
                  creating one if needed.                
            </javadoc>
            <method name="threadTrace" type="ThreadTrace" line="212">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <declaration name="trace" type="ThreadTrace" line="213"/>
                <scope line="214"/>
            </method>
            <javadoc line="221">
                Dispatch incoming events                
            </javadoc>
            <method name="handleEvent" type="void" line="224">
                <params>
                    <param name="event" type="Event"/>
                </params>
                <scope line="225"/>
                <scope line="227"/>
                <scope line="229"/>
                <scope line="231"/>
                <scope line="233"/>
                <scope line="235"/>
                <scope line="237"/>
                <scope line="239"/>
                <scope line="241"/>
                <scope line="243"/>
                <scope line="245"/>
            </method>
            <javadoc line="250">
                A VMDisconnectedException has happened while dealing with
                  another event. We need to flush the event queue, dealing only
                  with exit events (VMDeath, VMDisconnect) so that we terminate
                  correctly.                
            </javadoc>
            <method name="handleDisconnectedException" type="void" line="256">
                <comment line="271">
                    Resume the VM                    
                </comment>
                <comment line="273">
                    ignore                    
                </comment>
                <declaration name="queue" type="EventQueue" line="257"/>
                <scope line="258">
                    <scope line="259">
                        <declaration name="eventSet" type="EventSet" line="260"/>
                        <declaration name="iter" type="EventIterator" line="261"/>
                        <scope line="262">
                            <declaration name="event" type="Event" line="263"/>
                            <scope line="264"/>
                            <scope line="266"/>
                        </scope>
                    </scope>
                    <scope line="271"/>
                </scope>
            </method>
            <method name="vmStartEvent" type="void" line="277">
                <params>
                    <param name="event" type="VMStartEvent"/>
                </params>
            </method>
            <method name="methodEntryEvent" type="void" line="282">
                <params>
                    <param name="event" type="MethodEntryEvent"/>
                </params>
            </method>
            <method name="methodExitEvent" type="void" line="287">
                <params>
                    <param name="event" type="MethodExitEvent"/>
                </params>
            </method>
            <method name="stepEvent" type="void" line="292">
                <params>
                    <param name="event" type="StepEvent"/>
                </params>
            </method>
            <method name="fieldWatchEvent" type="void" line="297">
                <params>
                    <param name="event" type="ModificationWatchpointEvent"/>
                </params>
            </method>
            <method name="threadDeathEvent" type="void" line="301">
                <params>
                    <param name="event" type="ThreadDeathEvent"/>
                </params>
                <comment line="304">
                    only want threads we care about                    
                </comment>
                <comment line="305">
                    Forward event                    
                </comment>
                <declaration name="trace" type="ThreadTrace" line="302"/>
                <scope line="303"/>
            </method>
            <javadoc line="308">
                A new class has been loaded.
                  Set watchpoints on each of its fields                
            </javadoc>
            <method name="classPrepareEvent" type="void" line="312">
                <params>
                    <param name="event" type="ClassPrepareEvent"/>
                </params>
                <declaration name="mgr" type="EventRequestManager" line="313"/>
                <declaration name="fields" type="List&lt;Field&gt;" line="314"/>
                <scope line="315">
                    <declaration name="req" type="ModificationWatchpointRequest" line="316"/>
                    <scope line="318"/>
                </scope>
            </method>
            <method name="exceptionEvent" type="void" line="326">
                <params>
                    <param name="event" type="ExceptionEvent"/>
                </params>
                <comment line="329">
                    only want threads we care about                    
                </comment>
                <comment line="330">
                    Forward event                    
                </comment>
                <declaration name="trace" type="ThreadTrace" line="327"/>
                <scope line="328"/>
            </method>
            <method name="vmDeathEvent" type="void" line="333">
                <params>
                    <param name="event" type="VMDeathEvent"/>
                </params>
            </method>
            <method name="vmDisconnectEvent" type="void" line="338">
                <params>
                    <param name="event" type="VMDisconnectEvent"/>
                </params>
                <scope line="340"/>
            </method>
        </class>
    </source>