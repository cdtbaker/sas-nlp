<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.example.trace">
        <import package="com.sun.jdi"/>
        <import package="com.sun.jdi.request"/>
        <import package="com.sun.jdi.event"/>
        <import package="java.util"/>
        <import package="java.io.PrintWriter"/>
        <class name="EventThread" line="7">
            <extends class="Thread"/>
            <javadoc line="7">
                This class processes incoming JDI events and displays them                
                <author>
                    Robert Field                    
                </author>
            </javadoc>
            <declaration name="vm" type="VirtualMachine" line="12"/>
            <declaration name="excludes" type="String[]" line="13"/>
            <declaration name="writer" type="PrintWriter" line="14"/>
            <declaration name="nextBaseIndent" type="String" line="15"/>
            <declaration name="connected" type="boolean" line="16"/>
            <declaration name="vmDied" type="boolean" line="17"/>
            <declaration name="traceMap" type="Map&lt;ThreadReference,ThreadTrace&gt;" line="18"/>
            <method name="EventThread" type="constructor" line="19">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="excludes" type="String[]"/>
                    <param name="writer" type="PrintWriter"/>
                </params>
            </method>
            <javadoc line="25">
                Run the event handling thread.
                  As long as we are connected, get event sets off
                  the queue and dispatch the events within them.                
            </javadoc>
            <method name="run" type="void" line="30">
                <declaration name="queue" type="EventQueue" line="31"/>
                <scope line="32">
                    <scope line="33">
                        <declaration name="eventSet" type="EventSet" line="34"/>
                        <declaration name="it" type="EventIterator" line="35"/>
                        <scope line="36"/>
                    </scope>
                    <scope line="41"/>
                    <scope line="43"/>
                </scope>
            </method>
            <javadoc line="49">
                Create the desired event requests, and enable
                  them so that we will get events.                
                <param>
                    excludes     Class patterns for which we don't want events                    
                </param>
                <param>
                    watchFields  Do we want to watch assignments to fields                    
                </param>
            </javadoc>
            <method name="setEventRequests" type="void" line="55">
                <params>
                    <param name="watchFields" type="boolean"/>
                </params>
                <declaration name="mgr" type="EventRequestManager" line="56"/>
                <declaration name="excReq" type="ExceptionRequest" line="57"/>
                <declaration name="menr" type="MethodEntryRequest" line="60"/>
                <scope line="61"/>
                <declaration name="mexr" type="MethodExitRequest" line="66"/>
                <scope line="67"/>
                <declaration name="tdr" type="ThreadDeathRequest" line="72"/>
                <scope line="75">
                    <declaration name="cpr" type="ClassPrepareRequest" line="76"/>
                    <scope line="77"/>
                </scope>
            </method>
            <class name="ThreadTrace" line="84">
                <javadoc line="84">
                    This class keeps context on events in one thread.
                      In this implementation, context is the indentation prefix.                    
                </javadoc>
                <declaration name="thread" type="ThreadReference" line="89"/>
                <declaration name="baseIndent" type="String" line="90"/>
                <declaration name="threadDelta" type="String" line="91"/>
                <declaration name="indent" type="StringBuffer" line="92"/>
                <method name="ThreadTrace" type="constructor" line="93">
                    <params>
                        <param name="thread" type="ThreadReference"/>
                    </params>
                </method>
                <method name="println" type="void" line="100">
                    <params>
                        <param name="str" type="String"/>
                    </params>
                </method>
                <method name="methodEntryEvent" type="void" line="104">
                    <params>
                        <param name="event" type="MethodEntryEvent"/>
                    </params>
                </method>
                <method name="methodExitEvent" type="void" line="108">
                    <params>
                        <param name="event" type="MethodExitEvent"/>
                    </params>
                </method>
                <method name="fieldWatchEvent" type="void" line="111">
                    <params>
                        <param name="event" type="ModificationWatchpointEvent"/>
                    </params>
                    <declaration name="field" type="Field" line="112"/>
                    <declaration name="value" type="Value" line="113"/>
                </method>
                <method name="exceptionEvent" type="void" line="116">
                    <params>
                        <param name="event" type="ExceptionEvent"/>
                    </params>
                    <declaration name="mgr" type="EventRequestManager" line="118"/>
                    <declaration name="req" type="StepRequest" line="119"/>
                </method>
                <method name="stepEvent" type="void" line="124">
                    <params>
                        <param name="event" type="StepEvent"/>
                    </params>
                    <declaration name="cnt" type="int" line="125"/>
                    <scope line="127"/>
                    <scope line="130"/>
                    <scope line="132"/>
                    <declaration name="mgr" type="EventRequestManager" line="135"/>
                </method>
                <method name="threadDeathEvent" type="void" line="138">
                    <params>
                        <param name="event" type="ThreadDeathEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="143">
                Returns the ThreadTrace instance for the specified thread,
                  creating one if needed.                
            </javadoc>
            <method name="threadTrace" type="ThreadTrace" line="147">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <declaration name="trace" type="ThreadTrace" line="148"/>
                <scope line="149"/>
            </method>
            <javadoc line="155">
                Dispatch incoming events                
            </javadoc>
            <method name="handleEvent" type="void" line="158">
                <params>
                    <param name="event" type="Event"/>
                </params>
                <scope line="159"/>
                <scope line="162"/>
                <scope line="165"/>
                <scope line="168"/>
                <scope line="171"/>
                <scope line="174"/>
                <scope line="177"/>
                <scope line="180"/>
                <scope line="183"/>
                <scope line="186"/>
                <scope line="189"/>
            </method>
            <javadoc line="193">
                A VMDisconnectedException has happened while dealing with
                  another event. We need to flush the event queue, dealing only
                  with exit events (VMDeath, VMDisconnect) so that we terminate
                  correctly.                
            </javadoc>
            <method name="handleDisconnectedException" type="void" line="199">
                <declaration name="queue" type="EventQueue" line="200"/>
                <scope line="201">
                    <scope line="202">
                        <declaration name="eventSet" type="EventSet" line="203"/>
                        <declaration name="iter" type="EventIterator" line="204"/>
                        <scope line="205">
                            <declaration name="event" type="Event" line="206"/>
                            <scope line="207"/>
                            <scope line="210"/>
                        </scope>
                    </scope>
                    <scope line="216"/>
                </scope>
            </method>
            <method name="vmStartEvent" type="void" line="220">
                <params>
                    <param name="event" type="VMStartEvent"/>
                </params>
            </method>
            <method name="methodEntryEvent" type="void" line="223">
                <params>
                    <param name="event" type="MethodEntryEvent"/>
                </params>
            </method>
            <method name="methodExitEvent" type="void" line="226">
                <params>
                    <param name="event" type="MethodExitEvent"/>
                </params>
            </method>
            <method name="stepEvent" type="void" line="229">
                <params>
                    <param name="event" type="StepEvent"/>
                </params>
            </method>
            <method name="fieldWatchEvent" type="void" line="232">
                <params>
                    <param name="event" type="ModificationWatchpointEvent"/>
                </params>
            </method>
            <method name="threadDeathEvent" type="void" line="235">
                <params>
                    <param name="event" type="ThreadDeathEvent"/>
                </params>
                <declaration name="trace" type="ThreadTrace" line="236"/>
                <scope line="237"/>
            </method>
            <javadoc line="241">
                A new class has been loaded.
                  Set watchpoints on each of its fields                
            </javadoc>
            <method name="classPrepareEvent" type="void" line="245">
                <params>
                    <param name="event" type="ClassPrepareEvent"/>
                </params>
                <declaration name="mgr" type="EventRequestManager" line="246"/>
                <declaration name="fields" type="List&lt;Field&gt;" line="247"/>
                <scope line="248">
                    <declaration name="req" type="ModificationWatchpointRequest" line="249"/>
                    <scope line="250"/>
                </scope>
            </method>
            <method name="exceptionEvent" type="void" line="257">
                <params>
                    <param name="event" type="ExceptionEvent"/>
                </params>
                <declaration name="trace" type="ThreadTrace" line="258"/>
                <scope line="259"/>
            </method>
            <method name="vmDeathEvent" type="void" line="263">
                <params>
                    <param name="event" type="VMDeathEvent"/>
                </params>
            </method>
            <method name="vmDisconnectEvent" type="void" line="267">
                <params>
                    <param name="event" type="VMDisconnectEvent"/>
                </params>
                <scope line="269"/>
            </method>
        </class>
    </source>