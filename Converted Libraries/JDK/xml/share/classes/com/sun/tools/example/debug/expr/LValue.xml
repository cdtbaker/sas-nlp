<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.example.debug.expr">
        <import package="com.sun.jdi"/>
        <import package="java.util"/>
        <class name="LValue" line="4">
            <declaration name="jdiValue" type="Value" line="5"/>
            <method name="getValue" type="Value" line="6"/>
            <method name="setValue0" type="void" line="7"/>
            <method name="invokeWith" type="void" line="8"/>
            <method name="setValue" type="void" line="9">
                <params>
                    <param name="value" type="Value"/>
                </params>
                <scope line="10"/>
                <scope line="13"/>
                <scope line="16"/>
            </method>
            <method name="setValue" type="void" line="20">
                <params>
                    <param name="lval" type="LValue"/>
                </params>
            </method>
            <method name="memberLValue" type="LValue" line="23">
                <params>
                    <param name="frameGetter" type="ExpressionParser.GetFrame"/>
                    <param name="fieldName" type="String"/>
                </params>
                <scope line="24"/>
                <scope line="27"/>
            </method>
            <method name="memberLValue" type="LValue" line="31">
                <params>
                    <param name="fieldName" type="String"/>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <declaration name="val" type="Value" line="32"/>
                <scope line="33"/>
            </method>
            <method name="getMassagedValue" type="Value" line="38">
                <params>
                    <param name="frameGetter" type="ExpressionParser.GetFrame"/>
                </params>
                <declaration name="vv" type="Value" line="39"/>
                <scope line="40">
                    <declaration name="frame" type="StackFrame" line="41"/>
                    <scope line="42"/>
                    <scope line="45"/>
                    <declaration name="thread" type="ThreadReference" line="48"/>
                    <declaration name="toStringMember" type="LValue" line="49"/>
                </scope>
            </method>
            <method name="interiorGetValue" type="Value" line="55">
                <declaration name="value" type="Value" line="56"/>
                <scope line="57"/>
                <scope line="60"/>
                <scope line="63"/>
                <scope line="66"/>
                <scope line="69"/>
            </method>
            <method name="arrayElementLValue" type="LValue" line="74">
                <params>
                    <param name="lval" type="LValue"/>
                </params>
                <declaration name="indexValue" type="Value" line="75"/>
                <declaration name="index" type="int" line="76"/>
                <scope line="77"/>
                <scope line="80"/>
            </method>
            <method name="toString" type="String" line="85">
                <scope line="86"/>
                <scope line="89"/>
            </method>
            <declaration name="STATIC" type="int" line="93"/>
            <declaration name="INSTANCE" type="int" line="94"/>
            <method name="fieldByName" type="Field" line="95">
                <params>
                    <param name="refType" type="ReferenceType"/>
                    <param name="name" type="String"/>
                    <param name="kind" type="int"/>
                </params>
                <declaration name="field" type="Field" line="96"/>
                <scope line="97">
                    <declaration name="isStatic" type="boolean" line="98"/>
                    <scope line="99"/>
                </scope>
            </method>
            <method name="methodsByName" type="List&lt;Method&gt;" line="105">
                <params>
                    <param name="refType" type="ReferenceType"/>
                    <param name="name" type="String"/>
                    <param name="kind" type="int"/>
                </params>
                <declaration name="list" type="List&amp;lt;Method&amp;gt;" line="106"/>
                <declaration name="iter" type="Iterator&amp;lt;Method&amp;gt;" line="107"/>
                <scope line="108">
                    <declaration name="method" type="Method" line="109"/>
                    <declaration name="isStatic" type="boolean" line="110"/>
                    <scope line="111"/>
                </scope>
            </method>
            <declaration name="primitiveTypeNames" type="List&amp;lt;String&amp;gt;" line="117"/>
            <scope line="118"/>
            <declaration name="SAME" type="int" line="128"/>
            <declaration name="ASSIGNABLE" type="int" line="129"/>
            <declaration name="DIFFERENT" type="int" line="130"/>
            <method name="argumentsMatch" type="int" line="131">
                <params>
                    <param name="argTypes" type="List&lt;Type&gt;"/>
                    <param name="arguments" type="List&lt;Value&gt;"/>
                </params>
                <scope line="132"/>
                <declaration name="typeIter" type="Iterator&amp;lt;Type&amp;gt;" line="135"/>
                <declaration name="valIter" type="Iterator&amp;lt;Value&amp;gt;" line="136"/>
                <declaration name="result" type="int" line="137"/>
                <scope line="138">
                    <declaration name="argType" type="Type" line="139"/>
                    <declaration name="value" type="Value" line="140"/>
                    <scope line="141">
                        <scope line="142"/>
                    </scope>
                    <scope line="146">
                        <scope line="147"/>
                        <scope line="150"/>
                    </scope>
                </scope>
            </method>
            <method name="isComponentAssignable" type="boolean" line="157">
                <params>
                    <param name="fromType" type="Type"/>
                    <param name="toType" type="Type"/>
                </params>
                <scope line="158"/>
                <scope line="161"/>
            </method>
            <method name="isArrayAssignableTo" type="boolean" line="166">
                <params>
                    <param name="fromType" type="ArrayType"/>
                    <param name="toType" type="Type"/>
                </params>
                <scope line="167">
                    <scope line="168">
                        <declaration name="toComponentType" type="Type" line="169"/>
                    </scope>
                    <scope line="172"/>
                </scope>
                <scope line="176"/>
            </method>
            <method name="isAssignableTo" type="boolean" line="181">
                <params>
                    <param name="fromType" type="Type"/>
                    <param name="toType" type="Type"/>
                </params>
                <scope line="182"/>
                <scope line="185">
                    <scope line="186"/>
                </scope>
                <scope line="191"/>
                <scope line="194">
                    <scope line="195"/>
                </scope>
                <scope line="200"/>
                <scope line="203"/>
                <declaration name="interfaces" type="List&amp;lt;InterfaceType&amp;gt;" line="206"/>
                <scope line="207">
                    <declaration name="superclazz" type="ClassType" line="208"/>
                    <scope line="209"/>
                </scope>
                <scope line="214"/>
                <scope line="217">
                    <scope line="218"/>
                </scope>
            </method>
            <method name="resolveOverload" type="Method" line="224">
                <params>
                    <param name="overloads" type="List&lt;Method&gt;"/>
                    <param name="arguments" type="List&lt;Value&gt;"/>
                </params>
                <scope line="225"/>
                <declaration name="retVal" type="Method" line="228"/>
                <declaration name="assignableCount" type="int" line="229"/>
                <scope line="230">
                    <declaration name="argTypes" type="List&amp;lt;Type&amp;gt;" line="231"/>
                    <scope line="232"/>
                    <scope line="235"/>
                    <declaration name="compare" type="int" line="238"/>
                    <scope line="239"/>
                    <scope line="242"/>
                </scope>
                <scope line="248">
                    <scope line="249"/>
                </scope>
            </method>
            <class name="LValueLocal" line="256">
                <extends class="LValue"/>
                <declaration name="frame" type="StackFrame" line="257"/>
                <declaration name="var" type="LocalVariable" line="258"/>
                <method name="LValueLocal" type="constructor" line="259">
                    <params>
                        <param name="frame" type="StackFrame"/>
                        <param name="var" type="LocalVariable"/>
                    </params>
                </method>
                <method name="getValue" type="Value" line="263">
                    <scope line="264"/>
                </method>
                <method name="setValue0" type="void" line="269">
                    <params>
                        <param name="val" type="Value"/>
                    </params>
                </method>
                <method name="invokeWith" type="void" line="273">
                    <params>
                        <param name="arguments" type="List&lt;Value&gt;"/>
                    </params>
                </method>
            </class>
            <class name="LValueInstanceMember" line="277">
                <extends class="LValue"/>
                <declaration name="obj" type="ObjectReference" line="278"/>
                <declaration name="thread" type="ThreadReference" line="279"/>
                <declaration name="matchingField" type="Field" line="280"/>
                <declaration name="overloads" type="List&amp;lt;Method&amp;gt;" line="281"/>
                <declaration name="matchingMethod" type="Method" line="282"/>
                <declaration name="methodArguments" type="List&amp;lt;Value&amp;gt;" line="283"/>
                <method name="LValueInstanceMember" type="constructor" line="284">
                    <params>
                        <param name="value" type="Value"/>
                        <param name="memberName" type="String"/>
                        <param name="thread" type="ThreadReference"/>
                    </params>
                    <scope line="285"/>
                    <declaration name="refType" type="ReferenceType" line="290"/>
                    <scope line="293"/>
                </method>
                <method name="getValue" type="Value" line="297">
                    <scope line="298"/>
                    <scope line="301">
                        <scope line="302"/>
                    </scope>
                    <scope line="307"/>
                </method>
                <method name="setValue0" type="void" line="311">
                    <params>
                        <param name="val" type="Value"/>
                    </params>
                    <scope line="312"/>
                </method>
                <method name="invokeWith" type="void" line="318">
                    <params>
                        <param name="arguments" type="List&lt;Value&gt;"/>
                    </params>
                    <scope line="319"/>
                </method>
            </class>
            <class name="LValueStaticMember" line="326">
                <extends class="LValue"/>
                <declaration name="refType" type="ReferenceType" line="327"/>
                <declaration name="thread" type="ThreadReference" line="328"/>
                <declaration name="matchingField" type="Field" line="329"/>
                <declaration name="overloads" type="List&amp;lt;Method&amp;gt;" line="330"/>
                <declaration name="matchingMethod" type="Method" line="331"/>
                <declaration name="methodArguments" type="List&amp;lt;Value&amp;gt;" line="332"/>
                <method name="LValueStaticMember" type="constructor" line="333">
                    <params>
                        <param name="refType" type="ReferenceType"/>
                        <param name="memberName" type="String"/>
                        <param name="thread" type="ThreadReference"/>
                    </params>
                    <scope line="338"/>
                </method>
                <method name="getValue" type="Value" line="342">
                    <scope line="343"/>
                    <scope line="346"/>
                    <scope line="349">
                        <declaration name="clazz" type="ClassType" line="350"/>
                    </scope>
                    <scope line="353"/>
                </method>
                <method name="setValue0" type="void" line="357">
                    <params>
                        <param name="val" type="Value"/>
                    </params>
                    <scope line="358"/>
                    <scope line="361"/>
                </method>
                <method name="invokeWith" type="void" line="367">
                    <params>
                        <param name="arguments" type="List&lt;Value&gt;"/>
                    </params>
                    <scope line="368"/>
                </method>
            </class>
            <class name="LValueArrayLength" line="375">
                <extends class="LValue"/>
                <declaration name="arrayRef" type="ArrayReference" line="376"/>
                <method name="LValueArrayLength" type="constructor" line="377">
                    <params>
                        <param name="value" type="ArrayReference"/>
                    </params>
                </method>
                <method name="getValue" type="Value" line="380">
                    <scope line="381"/>
                </method>
                <method name="setValue0" type="void" line="386">
                    <params>
                        <param name="value" type="Value"/>
                    </params>
                </method>
                <method name="invokeWith" type="void" line="389">
                    <params>
                        <param name="arguments" type="List&lt;Value&gt;"/>
                    </params>
                </method>
            </class>
            <class name="LValueArrayElement" line="393">
                <extends class="LValue"/>
                <declaration name="array" type="ArrayReference" line="394"/>
                <declaration name="index" type="int" line="395"/>
                <method name="LValueArrayElement" type="constructor" line="396">
                    <params>
                        <param name="value" type="Value"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="397"/>
                </method>
                <method name="getValue" type="Value" line="403">
                    <scope line="404"/>
                </method>
                <method name="setValue0" type="void" line="409">
                    <params>
                        <param name="val" type="Value"/>
                    </params>
                </method>
                <method name="invokeWith" type="void" line="413">
                    <params>
                        <param name="arguments" type="List&lt;Value&gt;"/>
                    </params>
                </method>
            </class>
            <class name="LValueConstant" line="417">
                <extends class="LValue"/>
                <declaration name="value" type="Value" line="418"/>
                <method name="LValueConstant" type="constructor" line="419">
                    <params>
                        <param name="value" type="Value"/>
                    </params>
                </method>
                <method name="getValue" type="Value" line="422">
                    <scope line="423"/>
                </method>
                <method name="setValue0" type="void" line="428">
                    <params>
                        <param name="val" type="Value"/>
                    </params>
                </method>
                <method name="invokeWith" type="void" line="431">
                    <params>
                        <param name="arguments" type="List&lt;Value&gt;"/>
                    </params>
                </method>
            </class>
            <method name="make" type="LValue" line="435">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="val" type="boolean"/>
                </params>
            </method>
            <method name="make" type="LValue" line="438">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="val" type="byte"/>
                </params>
            </method>
            <method name="make" type="LValue" line="441">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="val" type="char"/>
                </params>
            </method>
            <method name="make" type="LValue" line="444">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="val" type="short"/>
                </params>
            </method>
            <method name="make" type="LValue" line="447">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="val" type="int"/>
                </params>
            </method>
            <method name="make" type="LValue" line="450">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="val" type="long"/>
                </params>
            </method>
            <method name="make" type="LValue" line="453">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="val" type="float"/>
                </params>
            </method>
            <method name="make" type="LValue" line="456">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="val" type="double"/>
                </params>
            </method>
            <method name="make" type="LValue" line="459">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="val" type="String"/>
                </params>
            </method>
            <method name="makeBoolean" type="LValue" line="462">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="token" type="Token"/>
                </params>
            </method>
            <method name="makeCharacter" type="LValue" line="465">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="token" type="Token"/>
                </params>
            </method>
            <method name="makeFloat" type="LValue" line="468">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="token" type="Token"/>
                </params>
            </method>
            <method name="makeDouble" type="LValue" line="471">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="token" type="Token"/>
                </params>
            </method>
            <method name="makeInteger" type="LValue" line="474">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="token" type="Token"/>
                </params>
            </method>
            <method name="makeShort" type="LValue" line="477">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="token" type="Token"/>
                </params>
            </method>
            <method name="makeLong" type="LValue" line="480">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="token" type="Token"/>
                </params>
            </method>
            <method name="makeByte" type="LValue" line="483">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="token" type="Token"/>
                </params>
            </method>
            <method name="makeString" type="LValue" line="486">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="token" type="Token"/>
                </params>
                <declaration name="len" type="int" line="487"/>
            </method>
            <method name="makeNull" type="LValue" line="490">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="token" type="Token"/>
                </params>
            </method>
            <method name="makeThisObject" type="LValue" line="493">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="frameGetter" type="ExpressionParser.GetFrame"/>
                    <param name="token" type="Token"/>
                </params>
                <scope line="494"/>
                <scope line="497">
                    <scope line="498">
                        <declaration name="frame" type="StackFrame" line="499"/>
                        <declaration name="thisObject" type="ObjectReference" line="500"/>
                        <scope line="501"/>
                        <scope line="504"/>
                    </scope>
                    <scope line="508"/>
                </scope>
            </method>
            <method name="makeNewObject" type="LValue" line="513">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="frameGetter" type="ExpressionParser.GetFrame"/>
                    <param name="className" type="String"/>
                    <param name="arguments" type="List&lt;Value&gt;"/>
                </params>
                <declaration name="classes" type="List&amp;lt;ReferenceType&amp;gt;" line="514"/>
                <scope line="515"/>
                <scope line="518"/>
                <declaration name="refType" type="ReferenceType" line="521"/>
                <scope line="522"/>
                <declaration name="classType" type="ClassType" line="525"/>
                <declaration name="methods" type="List&amp;lt;Method&amp;gt;" line="526"/>
                <declaration name="iter" type="Iterator&amp;lt;Method&amp;gt;" line="527"/>
                <scope line="528">
                    <declaration name="method" type="Method" line="529"/>
                    <scope line="530"/>
                </scope>
                <declaration name="constructor" type="Method" line="534"/>
                <declaration name="newObject" type="ObjectReference" line="535"/>
                <scope line="536">
                    <declaration name="thread" type="ThreadReference" line="537"/>
                </scope>
                <scope line="540"/>
                <scope line="543"/>
                <scope line="546"/>
            </method>
            <method name="nFields" type="LValue" line="551">
                <params>
                    <param name="lval" type="LValue"/>
                    <param name="izer" type="StringTokenizer"/>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <scope line="552"/>
                <scope line="555"/>
            </method>
            <method name="makeName" type="LValue" line="559">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="frameGetter" type="ExpressionParser.GetFrame"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="izer" type="StringTokenizer" line="560"/>
                <declaration name="first" type="String" line="561"/>
                <scope line="562">
                    <scope line="563">
                        <declaration name="frame" type="StackFrame" line="564"/>
                        <declaration name="thread" type="ThreadReference" line="565"/>
                        <declaration name="var" type="LocalVariable" line="566"/>
                        <scope line="567"/>
                        <scope line="570"/>
                        <scope line="573"/>
                        <scope line="576">
                            <declaration name="thisObject" type="ObjectReference" line="577"/>
                            <scope line="578">
                                <declaration name="thisLValue" type="LValue" line="579"/>
                                <declaration name="fv" type="LValue" line="580"/>
                                <scope line="581"/>
                                <scope line="584"/>
                                <scope line="587"/>
                            </scope>
                        </scope>
                        <scope line="592">
                            <declaration name="classes" type="List&amp;lt;ReferenceType&amp;gt;" line="593"/>
                            <scope line="594">
                                <scope line="595"/>
                                <scope line="598">
                                    <declaration name="refType" type="ReferenceType" line="599"/>
                                    <declaration name="lval" type="LValue" line="600"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="607"/>
                </scope>
            </method>
            <method name="stringValue" type="String" line="613">
                <params>
                    <param name="lval" type="LValue"/>
                    <param name="frameGetter" type="ExpressionParser.GetFrame"/>
                </params>
                <declaration name="val" type="Value" line="614"/>
                <scope line="615"/>
                <scope line="618"/>
            </method>
            <method name="booleanOperation" type="LValue" line="623">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="token" type="Token"/>
                    <param name="rightL" type="LValue"/>
                    <param name="leftL" type="LValue"/>
                </params>
                <declaration name="op" type="String" line="624"/>
                <declaration name="right" type="Value" line="625"/>
                <declaration name="left" type="Value" line="626"/>
                <scope line="627">
                    <scope line="628"/>
                    <scope line="631"/>
                    <scope line="634"/>
                </scope>
                <declaration name="rr" type="double" line="638"/>
                <declaration name="ll" type="double" line="639"/>
                <declaration name="res" type="boolean" line="640"/>
                <scope line="641"/>
                <scope line="644"/>
                <scope line="647"/>
                <scope line="650"/>
                <scope line="653"/>
                <scope line="656"/>
                <scope line="659"/>
            </method>
            <method name="operation" type="LValue" line="664">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="token" type="Token"/>
                    <param name="rightL" type="LValue"/>
                    <param name="leftL" type="LValue"/>
                    <param name="frameGetter" type="ExpressionParser.GetFrame"/>
                </params>
                <declaration name="op" type="String" line="665"/>
                <declaration name="right" type="Value" line="666"/>
                <declaration name="left" type="Value" line="667"/>
                <scope line="668">
                    <scope line="669"/>
                </scope>
                <scope line="673">
                    <scope line="674"/>
                    <scope line="677"/>
                    <scope line="680"/>
                </scope>
                <scope line="684"/>
                <declaration name="primRight" type="PrimitiveValue" line="687"/>
                <declaration name="primLeft" type="PrimitiveValue" line="688"/>
                <scope line="689">
                    <declaration name="rr" type="double" line="690"/>
                    <declaration name="ll" type="double" line="691"/>
                    <declaration name="res" type="double" line="692"/>
                    <scope line="693"/>
                    <scope line="696"/>
                    <scope line="699"/>
                    <scope line="702"/>
                    <scope line="705"/>
                </scope>
                <scope line="710">
                    <declaration name="rr" type="float" line="711"/>
                    <declaration name="ll" type="float" line="712"/>
                    <declaration name="res" type="float" line="713"/>
                    <scope line="714"/>
                    <scope line="717"/>
                    <scope line="720"/>
                    <scope line="723"/>
                    <scope line="726"/>
                </scope>
                <scope line="731">
                    <declaration name="rr" type="long" line="732"/>
                    <declaration name="ll" type="long" line="733"/>
                    <declaration name="res" type="long" line="734"/>
                    <scope line="735"/>
                    <scope line="738"/>
                    <scope line="741"/>
                    <scope line="744"/>
                    <scope line="747"/>
                </scope>
                <scope line="752">
                    <declaration name="rr" type="int" line="753"/>
                    <declaration name="ll" type="int" line="754"/>
                    <declaration name="res" type="int" line="755"/>
                    <scope line="756"/>
                    <scope line="759"/>
                    <scope line="762"/>
                    <scope line="765"/>
                    <scope line="768"/>
                </scope>
            </method>
        </class>
    </source>