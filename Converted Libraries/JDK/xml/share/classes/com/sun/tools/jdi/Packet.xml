<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.jdi"/>
        <import package="java.io.IOException"/>
        <class name="Packet" line="31">
            <extends class="Object"/>
            <comment line="40">
                Note! flags, cmdSet, and cmd are all byte values.                
            </comment>
            <comment line="41">
                We represent them as shorts to make them easier                
            </comment>
            <comment line="42">
                to work with.                
            </comment>
            <declaration name="NoFlags" type="short" line="32"/>
            <declaration name="Reply" type="short" line="33"/>
            <declaration name="ReplyNoError" type="short" line="34"/>
            <declaration name="uID" type="int" line="36"/>
            <declaration name="nullData" type="byte[]" line="37"/>
            <declaration name="id" type="int" line="42"/>
            <declaration name="flags" type="short" line="43"/>
            <declaration name="cmdSet" type="short" line="44"/>
            <declaration name="cmd" type="short" line="45"/>
            <declaration name="errorCode" type="short" line="46"/>
            <declaration name="data" type="byte[]" line="47"/>
            <declaration name="replied" type="boolean" line="48"/>
            <javadoc line="50">
                Return byte representation of the packet                
            </javadoc>
            <method name="toByteArray" type="byte[]" line="53">
                <declaration name="len" type="int" line="54"/>
                <declaration name="b" type="byte" line="55"/>
                <scope line="65"/>
                <scope line="68"/>
                <scope line="72"/>
            </method>
            <javadoc line="78">
                Create a packet from its byte array representation                
            </javadoc>
            <method name="fromByteArray" type="Packet" line="81">
                <params>
                    <param name="b" type="byte"/>
                </params>
                <scope line="82"/>
                <declaration name="b0" type="int" line="86"/>
                <declaration name="b1" type="int" line="87"/>
                <declaration name="b2" type="int" line="88"/>
                <declaration name="b3" type="int" line="89"/>
                <declaration name="len" type="int" line="90"/>
                <scope line="91"/>
                <declaration name="b4" type="int" line="95"/>
                <declaration name="b5" type="int" line="96"/>
                <declaration name="b6" type="int" line="97"/>
                <declaration name="b7" type="int" line="98"/>
                <declaration name="p" type="Packet" line="100"/>
                <scope line="105"/>
                <scope line="108">
                    <declaration name="b9" type="short" line="109"/>
                    <declaration name="b10" type="short" line="110"/>
                </scope>
            </method>
            <method name="Packet" type="constructor" line="120"/>
            <method name="uniqID" type="int" line="127">
                <comment line="128">
                    JDWP spec does not require this id to be sequential and
                     increasing, but our implementation does. See
                     VirtualMachine.notifySuspend, for example.                    
                </comment>
            </method>
        </class>
    </source>