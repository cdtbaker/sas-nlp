<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.script.shell">
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="java.text"/>
        <import package="java.util"/>
        <import package="javax.script"/>
        <class name="Main" line="34">
            <comment line="55">
                Each -e or -f or interactive mode is represented                
            </comment>
            <comment line="56">
                by an instance of Command.                
            </comment>
            <comment line="398">
                input stream from where we will read                
            </comment>
            <comment line="403">
                stream to print error messages                
            </comment>
            <comment line="408">
                get current script engine                
            </comment>
            <comment line="427">
                initialize a given script engine                
            </comment>
            <comment line="555">
                exit codes                
            </comment>
            <comment line="570">
                default scripting language                
            </comment>
            <comment line="572">
                list of scripts to process                
            </comment>
            <comment line="574">
                the script engine manager                
            </comment>
            <comment line="576">
                map of engines we loaded                
            </comment>
            <comment line="578">
                error messages resource                
            </comment>
            <javadoc line="34">
                This is the main class for Java script shell.                
            </javadoc>
            <javadoc line="38">
                main entry point to the command line tool                
                <param>
                    args command line argument array                    
                </param>
            </javadoc>
            <method name="main" type="void" line="42">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="43">
                    parse command line options                    
                </comment>
                <comment line="46">
                    process each script command                    
                </comment>
                <declaration name="scriptArgs" type="String[]" line="44"/>
                <scope line="47"/>
            </method>
            <interface name="Command">
                <method name="run" type="void" line="57"/>
            </interface>
            <javadoc line="60">
                Parses and processes command line options.                
                <param>
                    args command line argument array                    
                </param>
            </javadoc>
            <method name="processOptions" type="String[]" line="64">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="65">
                    current scripting language selected                    
                </comment>
                <comment line="67">
                    current script file encoding selected                    
                </comment>
                <comment line="70">
                    check for -classpath or -cp first                    
                </comment>
                <comment line="73">
                    have we seen -e or -f ?                    
                </comment>
                <comment line="75">
                    have we seen -f - already?                    
                </comment>
                <comment line="81">
                    handled already, just continue                    
                </comment>
                <comment line="86">
                    collect non-option arguments and pass these as script arguments                    
                </comment>
                <comment line="91">
                    if we have seen -e or -f already all non-option arguments                    
                </comment>
                <comment line="92">
                    are passed as script arguments                    
                </comment>
                <comment line="96">
                    if we have not seen -e or -f, first non-option argument                    
                </comment>
                <comment line="97">
                    is treated as script file name and rest of the non-option                    
                </comment>
                <comment line="98">
                    arguments are passed to script as script arguments                    
                </comment>
                <comment line="104">
                    collect script arguments and return to main                    
                </comment>
                <comment line="120">
                    do not allow empty property name                    
                </comment>
                <comment line="164">
                    some unknown option...                    
                </comment>
                <declaration name="currentLanguage" type="String" line="66"/>
                <declaration name="currentEncoding" type="String" line="68"/>
                <declaration name="seenScript" type="boolean" line="74"/>
                <declaration name="seenStdin" type="boolean" line="76"/>
                <scope line="77">
                    <declaration name="arg" type="String" line="78"/>
                    <scope line="80"/>
                    <scope line="87">
                        <declaration name="numScriptArgs" type="int" line="88"/>
                        <declaration name="startScriptArg" type="int" line="89"/>
                        <scope line="90"/>
                        <scope line="95">
                            <declaration name="se" type="ScriptEngine" line="101"/>
                        </scope>
                        <declaration name="result" type="String[]" line="105"/>
                    </scope>
                    <scope line="110">
                        <declaration name="value" type="String" line="111"/>
                        <declaration name="eq" type="int" line="112"/>
                        <scope line="113"/>
                        <scope line="116">
                            <scope line="117"/>
                            <scope line="119"/>
                        </scope>
                    </scope>
                    <scope line="125"/>
                    <scope line="127">
                        <declaration name="se" type="ScriptEngine" line="132"/>
                    </scope>
                    <scope line="135"/>
                    <scope line="140">
                        <declaration name="se" type="ScriptEngine" line="144"/>
                        <scope line="145">
                            <scope line="146"/>
                            <scope line="148"/>
                        </scope>
                        <scope line="152"/>
                    </scope>
                    <scope line="156"/>
                    <scope line="161"/>
                </scope>
                <scope line="168">
                    <declaration name="se" type="ScriptEngine" line="169"/>
                </scope>
            </method>
            <javadoc line="175">
                Adds interactive mode Command                
                <param>
                    se ScriptEngine to use in interactive mode.                    
                </param>
            </javadoc>
            <method name="addInteractiveMode" type="void" line="179">
                <params>
                    <param name="se" type="ScriptEngine"/>
                </params>
                <anonymous_class line="180">
                    <method name="run" type="void" line="181">
                        <params>
                            <param name="args" type="String[]"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="188">
                Adds script source file Command                
                <param>
                    se ScriptEngine used to evaluate the script file                    
                </param>
                <param>
                    fileName script file name                    
                </param>
                <param>
                    encoding script file encoding                    
                </param>
            </javadoc>
            <method name="addFileSource" type="void" line="196">
                <params>
                    <param name="se" type="ScriptEngine"/>
                    <param name="fileName" type="String"/>
                    <param name="encoding" type="String"/>
                </params>
                <anonymous_class line="197">
                    <method name="run" type="void" line="198">
                        <params>
                            <param name="args" type="String[]"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="205">
                Adds script string source Command                
                <param>
                    se ScriptEngine to be used to evaluate the script string                    
                </param>
                <param>
                    source Script source string                    
                </param>
            </javadoc>
            <method name="addStringSource" type="void" line="211">
                <params>
                    <param name="se" type="ScriptEngine"/>
                    <param name="source" type="String"/>
                </params>
                <anonymous_class line="212">
                    <method name="run" type="void" line="213">
                        <params>
                            <param name="args" type="String[]"/>
                        </params>
                        <declaration name="oldFile" type="String" line="215"/>
                        <scope line="216"/>
                        <scope line="218"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="225">
                Prints list of script engines available and exits.                
            </javadoc>
            <method name="listScriptEngines" type="void" line="228">
                <declaration name="factories" type="List&lt;ScriptEngineFactory&gt;" line="229"/>
                <scope line="230"/>
            </method>
            <javadoc line="241">
                Processes a given source file or standard input.                
                <param>
                    se ScriptEngine to be used to evaluate                    
                </param>
                <param>
                    filename file name, can be null                    
                </param>
                <param>
                    encoding script file encoding, can be null                    
                </param>
            </javadoc>
            <method name="processSource" type="void" line="248">
                <params>
                    <param name="se" type="ScriptEngine"/>
                    <param name="filename" type="String"/>
                    <param name="encoding" type="String"/>
                </params>
                <scope line="249">
                    <declaration name="in" type="BufferedReader" line="250"/>
                    <declaration name="hitEOF" type="boolean" line="252"/>
                    <declaration name="prompt" type="String" line="253"/>
                    <scope line="255">
                        <declaration name="source" type="String" line="257"/>
                        <scope line="258"/>
                        <scope line="260"/>
                        <scope line="263"/>
                        <declaration name="res" type="Object" line="267"/>
                        <scope line="268">
                            <scope line="270"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="276">
                    <declaration name="fis" type="FileInputStream" line="277"/>
                    <scope line="278"/>
                    <scope line="280"/>
                </scope>
            </method>
            <javadoc line="289">
                Evaluates given script source                
                <param>
                    se ScriptEngine to evaluate the string                    
                </param>
                <param>
                    script Script source string                    
                </param>
                <param>
                    exitOnError whether to exit the process on script error                    
                </param>
            </javadoc>
            <method name="evaluateString" type="Object" line="296">
                <params>
                    <param name="se" type="ScriptEngine"/>
                    <param name="script" type="String"/>
                    <param name="exitOnError" type="boolean"/>
                </params>
                <scope line="297"/>
                <scope line="299"/>
                <scope line="304"/>
            </method>
            <javadoc line="313">
                Evaluate script string source and exit on script error                
                <param>
                    se ScriptEngine to evaluate the string                    
                </param>
                <param>
                    script Script source string                    
                </param>
            </javadoc>
            <method name="evaluateString" type="void" line="318">
                <params>
                    <param name="se" type="ScriptEngine"/>
                    <param name="script" type="String"/>
                </params>
            </method>
            <javadoc line="322">
                Evaluates script from given reader                
                <param>
                    se ScriptEngine to evaluate the string                    
                </param>
                <param>
                    reader Reader from which is script is read                    
                </param>
                <param>
                    name file name to report in error.                    
                </param>
            </javadoc>
            <method name="evaluateReader" type="Object" line="329">
                <params>
                    <param name="se" type="ScriptEngine"/>
                    <param name="reader" type="Reader"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="oldFilename" type="String" line="330"/>
                <scope line="331"/>
                <scope line="333"/>
                <scope line="337"/>
                <scope line="340"/>
            </method>
            <javadoc line="346">
                Evaluates given input stream                
                <param>
                    se ScriptEngine to evaluate the string                    
                </param>
                <param>
                    is InputStream from which script is read                    
                </param>
                <param>
                    name file name to report in error                    
                </param>
            </javadoc>
            <method name="evaluateStream" type="Object" line="354">
                <params>
                    <param name="se" type="ScriptEngine"/>
                    <param name="is" type="InputStream"/>
                    <param name="name" type="String"/>
                    <param name="encoding" type="String"/>
                </params>
                <declaration name="reader" type="BufferedReader" line="355"/>
                <scope line="356">
                    <scope line="357"/>
                    <scope line="360"/>
                </scope>
                <scope line="365"/>
            </method>
            <javadoc line="371">
                Prints usage message and exits                
                <param>
                    exitCode process exit code                    
                </param>
            </javadoc>
            <method name="usage" type="void" line="375">
                <params>
                    <param name="exitCode" type="int"/>
                </params>
            </method>
            <javadoc line="381">
                Gets prompt for interactive mode                
                <return>
                    prompt string to use                    
                </return>
            </javadoc>
            <method name="getPrompt" type="String" line="385">
                <params>
                    <param name="se" type="ScriptEngine"/>
                </params>
                <declaration name="names" type="List&lt;String&gt;" line="386"/>
            </method>
            <javadoc line="390">
                Get formatted, localized error message                
            </javadoc>
            <method name="getMessage" type="String" line="393">
                <params>
                    <param name="key" type="String"/>
                    <param name="params" type="Object[]"/>
                </params>
            </method>
            <method name="getIn" type="InputStream" line="398"/>
            <method name="getError" type="PrintStream" line="403"/>
            <method name="getScriptEngine" type="ScriptEngine" line="408">
                <params>
                    <param name="lang" type="String"/>
                </params>
                <comment line="418">
                    initialize the engine                    
                </comment>
                <comment line="420">
                    to avoid re-initialization of engine, store it in a map                    
                </comment>
                <declaration name="se" type="ScriptEngine" line="409"/>
                <scope line="410">
                    <scope line="412"/>
                </scope>
            </method>
            <method name="initScriptEngine" type="void" line="427">
                <params>
                    <param name="se" type="ScriptEngine"/>
                </params>
                <comment line="428">
                    put engine global variable                    
                </comment>
                <comment line="431">
                    load init.&lt;ext&gt; file from resource                    
                </comment>
                <declaration name="exts" type="List&lt;String&gt;" line="432"/>
                <declaration name="sysIn" type="InputStream" line="433"/>
                <declaration name="cl" type="ClassLoader" line="434"/>
                <scope line="435"/>
                <scope line="440"/>
            </method>
            <javadoc line="445">
                Checks for -classpath, -cp in command line args. Creates a ClassLoader
                  and sets it as Thread context loader for current thread.                
                <param>
                    args command line argument array                    
                </param>
            </javadoc>
            <method name="checkClassPath" type="void" line="451">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="457">
                    just -classpath or -cp with no value                    
                </comment>
                <comment line="466">
                    We create a class loader, configure it with specified
                     classpath values and set the same as context loader.
                     Note that ScriptEngineManager uses context loader to
                     load script engines. So, this ensures that user defined
                     script engines will be loaded. For classes referred
                     from scripts, Rhino engine uses thread context loader
                     but this is script engine dependent. We don&apos;t have
                     script engine independent solution anyway. Unless we
                     know the class loader used by a specific engine, we
                     can&apos;t configure correct loader.                    
                </comment>
                <comment line="483">
                    now initialize script engine manager. Note that this has to                    
                </comment>
                <comment line="484">
                    be done after setting the context loader so that manager                    
                </comment>
                <comment line="485">
                    will see script engines from user specified classpath                    
                </comment>
                <declaration name="classPath" type="String" line="452"/>
                <scope line="453">
                    <scope line="455">
                        <scope line="456"/>
                        <scope line="459"/>
                    </scope>
                </scope>
                <scope line="465">
                    <declaration name="parent" type="ClassLoader" line="477"/>
                    <declaration name="urls" type="URL[]" line="478"/>
                    <declaration name="loader" type="URLClassLoader" line="479"/>
                </scope>
            </method>
            <javadoc line="489">
                Utility method for converting a search path string to an array
                  of directory and JAR file URLs.                
                <param>
                    path the search path string                    
                </param>
                <return>
                    the resulting array of directory and JAR file URLs                    
                </return>
            </javadoc>
            <method name="pathToURLs" type="URL[]" line="496">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="components" type="String[]" line="497"/>
                <declaration name="urls" type="URL[]" line="498"/>
                <declaration name="count" type="int" line="499"/>
                <scope line="500">
                    <declaration name="url" type="URL" line="501"/>
                    <scope line="502"/>
                </scope>
                <scope line="506">
                    <declaration name="tmp" type="URL[]" line="507"/>
                </scope>
            </method>
            <javadoc line="514">
                Returns the directory or JAR file URL corresponding to the specified
                  local file name.                
                <param>
                    file the File object                    
                </param>
                <return>
                    the resulting directory or JAR file URL, or null if unknown                    
                </return>
            </javadoc>
            <method name="fileToURL" type="URL" line="521">
                <params>
                    <param name="file" type="File"/>
                </params>
                <comment line="532">
                    If the file does not exist, then assume that it&apos;s a directory                    
                </comment>
                <declaration name="name" type="String" line="522"/>
                <scope line="523"/>
                <scope line="525"/>
                <scope line="529"/>
                <scope line="533"/>
                <scope line="536"/>
                <scope line="538"/>
            </method>
            <method name="setScriptArguments" type="void" line="543">
                <params>
                    <param name="se" type="ScriptEngine"/>
                    <param name="args" type="String[]"/>
                </params>
            </method>
            <method name="setScriptFilename" type="String" line="548">
                <params>
                    <param name="se" type="ScriptEngine"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="oldName" type="String" line="549"/>
            </method>
            <declaration name="EXIT_SUCCESS" type="int" line="555"/>
            <declaration name="EXIT_CMD_NO_CLASSPATH" type="int" line="556"/>
            <declaration name="EXIT_CMD_NO_FILE" type="int" line="557"/>
            <declaration name="EXIT_CMD_NO_SCRIPT" type="int" line="558"/>
            <declaration name="EXIT_CMD_NO_LANG" type="int" line="559"/>
            <declaration name="EXIT_CMD_NO_ENCODING" type="int" line="560"/>
            <declaration name="EXIT_CMD_NO_PROPNAME" type="int" line="561"/>
            <declaration name="EXIT_UNKNOWN_OPTION" type="int" line="562"/>
            <declaration name="EXIT_ENGINE_NOT_FOUND" type="int" line="563"/>
            <declaration name="EXIT_NO_ENCODING_FOUND" type="int" line="564"/>
            <declaration name="EXIT_SCRIPT_ERROR" type="int" line="565"/>
            <declaration name="EXIT_FILE_NOT_FOUND" type="int" line="566"/>
            <declaration name="EXIT_MULTIPLE_STDIN" type="int" line="567"/>
            <declaration name="DEFAULT_LANGUAGE" type="String" line="570"/>
            <declaration name="scripts" type="List&lt;Command&gt;" line="572"/>
            <declaration name="engineManager" type="ScriptEngineManager" line="574"/>
            <declaration name="engines" type="Map&lt;String,ScriptEngine&gt;" line="576"/>
            <declaration name="msgRes" type="ResourceBundle" line="578"/>
            <declaration name="BUNDLE_NAME" type="String" line="579"/>
            <declaration name="PROGRAM_NAME" type="String" line="580"/>
            <scope line="582"/>
        </class>
    </source>