<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.example.debug.gui">
        <import package="java.io"/>
        <import package="com.sun.jdi"/>
        <import package="com.sun.tools.example.debug.bdi"/>
        <class name="Environment" line="32">
            <comment line="54">
                Services used by debugging tools.                
            </comment>
            <comment line="76">
                ### TODO:                
            </comment>
            <comment line="77">
                ### Tools should attach/detach from environment                
            </comment>
            <comment line="78">
                ### via a property, which should call an &apos;addTool&apos;                
            </comment>
            <comment line="79">
                ### method when set to maintain a registry of                
            </comment>
            <comment line="80">
                ### tools for exit-time cleanup, etc.  Tool                
            </comment>
            <comment line="81">
                ### class constructors should be argument-free, so                
            </comment>
            <comment line="82">
                ### that they may be instantiated by bean builders.                
            </comment>
            <comment line="83">
                ### Will also need &apos;removeTool&apos; in case property                
            </comment>
            <comment line="84">
                ### value is changed.                
            </comment>
            <comment line="85">
                                
            </comment>
            <comment line="86">
                public void addTool(Tool t);                
            </comment>
            <comment line="87">
                public void removeTool(Tool t);                
            </comment>
            <comment line="93">
                public void refresh();    // notify all tools to refresh their views                
            </comment>
            <comment line="96">
                public void addStatusListener(StatusListener l);                
            </comment>
            <comment line="97">
                public void removeStatusListener(StatusListener l);                
            </comment>
            <comment line="99">
                public void addOutputListener(OutputListener l);                
            </comment>
            <comment line="100">
                public void removeOutputListener(OutputListener l);                
            </comment>
            <comment line="147">
                ### Also in &apos;ContextManager&apos;.  Do we need both?                
            </comment>
            <declaration name="sourceManager" type="SourceManager" line="34"/>
            <declaration name="classManager" type="ClassManager" line="35"/>
            <declaration name="contextManager" type="ContextManager" line="36"/>
            <declaration name="monitorListModel" type="MonitorListModel" line="37"/>
            <declaration name="runtime" type="ExecutionManager" line="38"/>
            <declaration name="typeScript" type="PrintWriter" line="40"/>
            <declaration name="verbose" type="boolean" line="42"/>
            <method name="Environment" type="constructor" line="44">
                <comment line="46">
                    ### Order of the next three lines is important!  (FIX THIS)                    
                </comment>
            </method>
            <method name="getSourceManager" type="SourceManager" line="55"/>
            <method name="getClassManager" type="ClassManager" line="59"/>
            <method name="getContextManager" type="ContextManager" line="63"/>
            <method name="getMonitorListModel" type="MonitorListModel" line="67"/>
            <method name="getExecutionManager" type="ExecutionManager" line="71"/>
            <method name="terminate" type="void" line="88"/>
            <method name="setTypeScript" type="void" line="101">
                <params>
                    <param name="writer" type="PrintWriter"/>
                </params>
            </method>
            <method name="error" type="void" line="105">
                <params>
                    <param name="message" type="String"/>
                </params>
                <scope line="106"/>
                <scope line="108"/>
            </method>
            <method name="failure" type="void" line="113">
                <params>
                    <param name="message" type="String"/>
                </params>
                <scope line="114"/>
                <scope line="116"/>
            </method>
            <method name="notice" type="void" line="121">
                <params>
                    <param name="message" type="String"/>
                </params>
                <scope line="122"/>
                <scope line="124"/>
            </method>
            <method name="getOutputSink" type="OutputSink" line="129"/>
            <method name="viewSource" type="void" line="133">
                <params>
                    <param name="fileName" type="String"/>
                </params>
                <comment line="134">
                    ### HACK ###                    
                </comment>
                <comment line="135">
                    ### Should use listener here.                    
                </comment>
            </method>
            <method name="viewLocation" type="void" line="139">
                <params>
                    <param name="locn" type="Location"/>
                </params>
                <comment line="140">
                    ### HACK ###                    
                </comment>
                <comment line="141">
                    ### Should use listener here.                    
                </comment>
                <comment line="142">
                    ### Should we use sourceForLocation here?                    
                </comment>
            </method>
            <method name="getVerboseFlag" type="boolean" line="148"/>
            <method name="setVerboseFlag" type="void" line="152">
                <params>
                    <param name="verbose" type="boolean"/>
                </params>
            </method>
        </class>
    </source>