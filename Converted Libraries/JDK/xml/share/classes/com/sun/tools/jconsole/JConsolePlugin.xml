<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jconsole">
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="javax.swing.JPanel"/>
        <import package="javax.swing.SwingWorker"/>
        <class name="JConsolePlugin" line="8">
            <javadoc line="8">
                A JConsole plugin class.  JConsole uses the
                  &lt;a href=&quot;{@docRoot}/../../../../api/java/util/ServiceLoader.html&quot;&gt;
                  service provider&lt;/a&gt; mechanism to search the JConsole plugins.
                  Users can provide their JConsole plugins in a jar file
                  containing a file named
                  &lt;blockquote&gt;&lt;pre&gt;
                  META-INF/services/com.sun.tools.jconsole.JConsolePlugin&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; This file contains one line for each plugin, for example,
                  &lt;blockquote&gt;&lt;pre&gt;
                  com.sun.example.JTop&lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; which is the fully qualified class name of the class implementing{@code JConsolePlugin}.
                  &lt;p&gt; To load the JConsole plugins in JConsole, run:
                  &lt;blockquote&gt;&lt;pre&gt;
                  jconsole -pluginpath &amp;lt;plugin-path&amp;gt; &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt; where &lt;tt&gt;&amp;lt;plugin-path&amp;gt;&lt;/tt&gt; specifies the paths of JConsole
                  plugins to look up which can be a directory or a jar file. Multiple
                  paths are separated by the path separator character of the platform.
                  &lt;p&gt; When a new JConsole window is created for a connection,
                  an instance of each {@code JConsolePlugin} will be created.
                  The {@code JConsoleContext} object is not available at its
                  construction time.
                  JConsole will set the {@link JConsoleContext} object for
                  a plugin after the plugin object is created.  It will then
                  call its {@link #getTabs getTabs} method and add the returned
                  tabs to the JConsole window.                
                <see>
                    &lt;a href=&quot;{@docRoot}/../../../../api/java/util/ServiceLoader.html&quot;&gt;
                      java.util.ServiceLoader&lt;/a&gt;                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="context" type="JConsoleContext" line="39"/>
            <declaration name="listeners" type="List&amp;lt;PropertyChangeListener&amp;gt;" line="40"/>
            <javadoc line="41">
                Constructor.                
            </javadoc>
            <method name="JConsolePlugin" type="constructor" line="44"/>
            <javadoc line="46">
                Sets the {@link JConsoleContext JConsoleContext} object representing
                  the connection to an application.  This method will be called
                  only once after the plugin is created and before the {@link #getTabs}is called. The given {@code context} can be in any{@link JConsoleContext#getConnectionState connection state} when
                  this method is called.                
                <param>
                    context a {@code JConsoleContext} object                    
                </param>
            </javadoc>
            <method name="setContext" type="void" line="53">
                <params>
                    <param name="context" type="JConsoleContext"/>
                </params>
                <scope line="55">
                    <scope line="56"/>
                </scope>
            </method>
            <javadoc line="62">
                Returns the {@link JConsoleContext JConsoleContext} object representing
                  the connection to an application.  This method may return &lt;tt&gt;null&lt;/tt&gt;
                  if it is called before the {@link #setContext context} is initialized.                
                <return>
                    the {@link JConsoleContext JConsoleContext} object representing
                      the connection to an application.                    
                </return>
            </javadoc>
            <method name="getContext" type="JConsoleContext" line="69"/>
            <method name="getTabs" type="java.util.Map&lt;String,JPanel&gt;" line="72"/>
            <javadoc line="72">
                Returns the tabs to be added in JConsole window.
                  &lt;p&gt;
                  The returned map contains one entry for each tab
                  to be added in the tabbed pane in a JConsole window with
                  the tab name as the key
                  and the {@link JPanel} object as the value.
                  This method returns an empty map if no tab is added by this plugin.
                  This method will be called from the &lt;i&gt;Event Dispatch Thread&lt;/i&gt;
                  once at the new connection time.                
                <return>
                    a map of a tab name and a {@link JPanel} object
                      representing the tabs to be added in the JConsole window;
                      or an empty map.                    
                </return>
            </javadoc>
            <method name="newSwingWorker" type="SwingWorker&lt;?,?&gt;" line="87"/>
            <javadoc line="87">
                Returns a {@link SwingWorker} to perform
                  the GUI update for this plugin at the same interval
                  as JConsole updates the GUI.
                  &lt;p&gt;
                  JConsole schedules the GUI update at an interval specified
                  for a connection.  This method will be called at every
                  update to obtain a {@code SwingWorker} for each plugin.
                  &lt;p&gt;
                  JConsole will invoke the {@link SwingWorker#execute execute()}method to schedule the returned {@code SwingWorker} for execution
                  if:
                  &lt;ul&gt;
                  &lt;li&gt; the &lt;tt&gt;SwingWorker&lt;/tt&gt; object has not been executed
                  (i.e. the {@link SwingWorker#getState} method
                  returns {@link javax.swing.SwingWorker.StateValue#PENDING PENDING}state); and&lt;/li&gt;
                  &lt;li&gt; the &lt;tt&gt;SwingWorker&lt;/tt&gt; object returned in the previous
                  update has completed the task if it was not &lt;tt&gt;null&lt;/tt&gt;
                  (i.e. the {@link SwingWorker#isDone SwingWorker.isDone} method
                  returns &lt;tt&gt;true&lt;/tt&gt;).&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;br&gt;
                  Otherwise, &lt;tt&gt;SwingWorker&lt;/tt&gt; object will not be scheduled to work.
                  &lt;p&gt;
                  A plugin can schedule its own GUI update and this method
                  will return &lt;tt&gt;null&lt;/tt&gt;.                
                <return>
                    a &lt;tt&gt;SwingWorker&lt;/tt&gt; to perform the GUI update; or
                      &lt;tt&gt;null&lt;/tt&gt;.                    
                </return>
            </javadoc>
            <javadoc line="116">
                Dispose this plugin. This method is called by JConsole to inform
                  that this plugin will be discarded and that it should free
                  any resources that it has allocated.
                  The {@link #getContext JConsoleContext} can be in any{@link JConsoleContext#getConnectionState connection state} when
                  this method is called.                
            </javadoc>
            <method name="dispose" type="void" line="123"/>
            <javadoc line="125">
                Adds a {@link PropertyChangeListener PropertyChangeListener}to the {@link #getContext JConsoleContext} object for this plugin.
                  This method is a convenient method for this plugin to register
                  a listener when the {@code JConsoleContext} object may or
                  may not be available.
                  &lt;p&gt;For example, a plugin constructor can
                  call this method to register a listener to listen to the{@link JConsoleContext.ConnectionState connectionState}property changes and the listener will be added to the{@link JConsoleContext#addPropertyChangeListener JConsoleContext}object when it is available.                
                <param>
                    listener  The {@code PropertyChangeListener} to be added                    
                </param>
                <throws>
                    NullPointerException if {@code listener} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="addContextPropertyChangeListener" type="void" line="135">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="136"/>
                <scope line="139">
                    <scope line="140">
                        <scope line="141">
                            <scope line="142"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="152">
                Removes a {@link PropertyChangeListener PropertyChangeListener}from the listener list of the {@link #getContext JConsoleContext}object for this plugin.
                  If {@code listener} was never added, no exception is
                  thrown and no action is taken.                
                <param>
                    listener the {@code PropertyChangeListener} to be removed                    
                </param>
                <throws>
                    NullPointerException if {@code listener} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="removeContextPropertyChangeListener" type="void" line="159">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="160"/>
                <scope line="163">
                    <scope line="164">
                        <scope line="165">
                            <scope line="166"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>