<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.example.debug.bdi">
        <import package="com.sun.jdi.ThreadGroupReference"/>
        <import package="java.util.List"/>
        <import package="java.util.Stack"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <class name="ThreadGroupIterator" line="34">
            <comment line="53">
                ThreadGroupIterator() {
                this(Env.vm().topLevelThreadGroups());
                }                
            </comment>
            <comment line="97">
                static ThreadGroupReference find(String name) {
                ThreadGroupIterator tgi = new ThreadGroupIterator();
                while (tgi.hasNext()) {
                ThreadGroupReference tg = tgi.nextThreadGroup();
                if (tg.name().equals(name)) {
                return tg;
                }
                }
                return null;
                }                
            </comment>
            <implements interface="Iterator">
                <type_params>
                    <type_param name="ThreadGroupReference"/>
                </type_params>
            </implements>
            <javadoc line="34">
                Descend the tree of thread groups.                
                <author>
                    Robert G. Field                    
                </author>
            </javadoc>
            <declaration name="stack" type="Stack&lt;Iterator&lt;ThreadGroupReference&gt;&gt;" line="39"/>
            <method name="ThreadGroupIterator" type="constructor" line="42">
                <params>
                    <param name="tgl" type="List<ThreadGroupReference>"/>
                </params>
            </method>
            <method name="ThreadGroupIterator" type="constructor" line="46">
                <params>
                    <param name="tg" type="ThreadGroupReference"/>
                </params>
                <declaration name="tgl" type="List&lt;ThreadGroupReference&gt;" line="47"/>
            </method>
            <method name="top" type="Iterator<ThreadGroupReference>" line="58"/>
            <javadoc line="62">
                The invariant in this class is that the top iterator
                  on the stack has more elements.  If the stack is
                  empty, there is no top.  This method assures
                  this invariant.                
            </javadoc>
            <method name="push" type="void" line="68">
                <params>
                    <param name="tgl" type="List<ThreadGroupReference>"/>
                </params>
                <scope line="70"/>
            </method>
            <method name="hasNext" type="boolean" line="76"/>
            <method name="next" type="ThreadGroupReference" line="81"/>
            <method name="nextThreadGroup" type="ThreadGroupReference" line="85">
                <declaration name="tg" type="ThreadGroupReference" line="86"/>
            </method>
            <method name="remove" type="void" line="92"/>
        </class>
    </source>