<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.hat.internal.model">
        <import package="com.sun.tools.hat.internal.util.Misc"/>
        <class name="Root" line="3">
            <javadoc line="3">
                Represents a member of the rootset, that is, one of the objects that
                  the GC starts from when marking reachable objects.                
            </javadoc>
            <declaration name="id" type="long" line="8"/>
            <declaration name="refererId" type="long" line="9"/>
            <declaration name="index" type="int" line="10"/>
            <declaration name="type" type="int" line="11"/>
            <declaration name="description" type="String" line="12"/>
            <declaration name="referer" type="JavaHeapObject" line="13"/>
            <declaration name="stackTrace" type="StackTrace" line="14"/>
            <declaration name="INVALID_TYPE" type="int" line="15"/>
            <declaration name="UNKNOWN" type="int" line="16"/>
            <declaration name="SYSTEM_CLASS" type="int" line="17"/>
            <declaration name="NATIVE_LOCAL" type="int" line="18"/>
            <declaration name="NATIVE_STATIC" type="int" line="19"/>
            <declaration name="THREAD_BLOCK" type="int" line="20"/>
            <declaration name="BUSY_MONITOR" type="int" line="21"/>
            <declaration name="JAVA_LOCAL" type="int" line="22"/>
            <declaration name="NATIVE_STACK" type="int" line="23"/>
            <declaration name="JAVA_STATIC" type="int" line="24"/>
            <method name="Root" type="constructor" line="25">
                <params>
                    <param name="id" type="long"/>
                    <param name="refererId" type="long"/>
                    <param name="type" type="int"/>
                    <param name="description" type="String"/>
                </params>
            </method>
            <method name="Root" type="constructor" line="28">
                <params>
                    <param name="id" type="long"/>
                    <param name="refererId" type="long"/>
                    <param name="type" type="int"/>
                    <param name="description" type="String"/>
                    <param name="stackTrace" type="StackTrace"/>
                </params>
            </method>
            <method name="getId" type="long" line="35"/>
            <method name="getIdString" type="String" line="38"/>
            <method name="getDescription" type="String" line="41">
                <scope line="42"/>
                <scope line="45"/>
            </method>
            <javadoc line="49">
                Return type.  We guarantee that more interesting roots will have
                  a type that is numerically higher.                
            </javadoc>
            <method name="getType" type="int" line="53"/>
            <method name="getTypeName" type="String" line="56"/>
            <javadoc line="82">
                Given two Root instances, return the one that is most interesting.                
            </javadoc>
            <method name="mostInteresting" type="Root" line="85">
                <params>
                    <param name="other" type="Root"/>
                </params>
                <scope line="86"/>
                <scope line="89"/>
            </method>
            <javadoc line="93">
                Get the object that&apos;s responsible for this root, if there is one.
                  This will be null, a Thread object, or a Class object.                
            </javadoc>
            <method name="getReferer" type="JavaHeapObject" line="97"/>
            <javadoc line="100">
                @return the stack trace responsible for this root, or null if there
                  is none.                
            </javadoc>
            <method name="getStackTrace" type="StackTrace" line="104"/>
            <javadoc line="107">
                @return The index of this root in Snapshot.roots                
            </javadoc>
            <method name="getIndex" type="int" line="110"/>
            <method name="resolve" type="void" line="113">
                <params>
                    <param name="ss" type="Snapshot"/>
                </params>
                <scope line="114"/>
                <scope line="117"/>
            </method>
            <method name="setIndex" type="void" line="121">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
        </class>
    </source>