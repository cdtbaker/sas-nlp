<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.hat.internal.model">
        <import package="com.sun.tools.hat.internal.util.Misc"/>
        <class name="Root" line="43">
            <comment line="51">
                ID of the JavaThing we refer to                
            </comment>
            <comment line="52">
                Thread or Class responsible for this, or 0                
            </comment>
            <comment line="53">
                Index in Snapshot.roots                
            </comment>
            <comment line="59">
                Values for type.  Higher values are more interesting -- see getType().
                 See also getTypeName()                
            </comment>
            <javadoc line="43">
                Represents a member of the rootset, that is, one of the objects that
                  the GC starts from when marking reachable objects.                
            </javadoc>
            <declaration name="id" type="long" line="50"/>
            <declaration name="refererId" type="long" line="51"/>
            <declaration name="index" type="int" line="52"/>
            <declaration name="type" type="int" line="53"/>
            <declaration name="description" type="String" line="54"/>
            <declaration name="referer" type="JavaHeapObject" line="55"/>
            <declaration name="stackTrace" type="StackTrace" line="56"/>
            <declaration name="INVALID_TYPE" type="int" line="60"/>
            <declaration name="UNKNOWN" type="int" line="61"/>
            <declaration name="SYSTEM_CLASS" type="int" line="62"/>
            <declaration name="NATIVE_LOCAL" type="int" line="64"/>
            <declaration name="NATIVE_STATIC" type="int" line="65"/>
            <declaration name="THREAD_BLOCK" type="int" line="66"/>
            <declaration name="BUSY_MONITOR" type="int" line="67"/>
            <declaration name="JAVA_LOCAL" type="int" line="68"/>
            <declaration name="NATIVE_STACK" type="int" line="69"/>
            <declaration name="JAVA_STATIC" type="int" line="70"/>
            <method name="Root" type="constructor" line="73">
                <params>
                    <param name="id" type="long"/>
                    <param name="refererId" type="long"/>
                    <param name="type" type="int"/>
                    <param name="description" type="String"/>
                </params>
            </method>
            <method name="Root" type="constructor" line="79">
                <params>
                    <param name="id" type="long"/>
                    <param name="refererId" type="long"/>
                    <param name="type" type="int"/>
                    <param name="description" type="String"/>
                    <param name="stackTrace" type="StackTrace"/>
                </params>
            </method>
            <method name="getId" type="long" line="87"/>
            <method name="getIdString" type="String" line="91"/>
            <method name="getDescription" type="String" line="95">
                <scope line="96"/>
                <scope line="98"/>
            </method>
            <javadoc line="103">
                Return type.  We guarantee that more interesting roots will have
                  a type that is numerically higher.                
            </javadoc>
            <method name="getType" type="int" line="107"/>
            <method name="getTypeName" type="String" line="111"/>
            <javadoc line="127">
                Given two Root instances, return the one that is most interesting.                
            </javadoc>
            <method name="mostInteresting" type="Root" line="130">
                <params>
                    <param name="other" type="Root"/>
                </params>
                <scope line="131"/>
                <scope line="133"/>
            </method>
            <javadoc line="138">
                Get the object that&apos;s responsible for this root, if there is one.
                  This will be null, a Thread object, or a Class object.                
            </javadoc>
            <method name="getReferer" type="JavaHeapObject" line="142"/>
            <javadoc line="146">
                @return the stack trace responsible for this root, or null if there
                  is none.                
            </javadoc>
            <method name="getStackTrace" type="StackTrace" line="150"/>
            <javadoc line="154">
                @return The index of this root in Snapshot.roots                
            </javadoc>
            <method name="getIndex" type="int" line="157"/>
            <method name="resolve" type="void" line="161">
                <params>
                    <param name="ss" type="Snapshot"/>
                </params>
                <scope line="162"/>
                <scope line="165"/>
            </method>
            <method name="setIndex" type="void" line="170">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
        </class>
    </source>