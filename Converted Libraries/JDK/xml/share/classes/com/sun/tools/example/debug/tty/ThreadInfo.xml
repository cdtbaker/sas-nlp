<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.example.debug.tty">
        <import package="com.sun.jdi.ThreadReference"/>
        <import package="com.sun.jdi.ThreadGroupReference"/>
        <import package="com.sun.jdi.IncompatibleThreadStateException"/>
        <import package="com.sun.jdi.StackFrame"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <class name="ThreadInfo" line="36">
            <comment line="38">
                This is a list of all known ThreadInfo objects. It survives
                 ThreadInfo.invalidateAll, unlike the other static fields below.                
            </comment>
            <comment line="226">
                                
            </comment>
            <declaration name="threads" type="List&lt;ThreadInfo&gt;" line="39"/>
            <declaration name="gotInitialThreads" type="boolean" line="40"/>
            <declaration name="current" type="ThreadInfo" line="42"/>
            <declaration name="group" type="ThreadGroupReference" line="43"/>
            <declaration name="thread" type="ThreadReference" line="45"/>
            <declaration name="currentFrameIndex" type="int" line="46"/>
            <method name="ThreadInfo" type="constructor" line="48">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <scope line="50"/>
            </method>
            <method name="initThreads" type="void" line="55">
                <scope line="56">
                    <scope line="57"/>
                </scope>
            </method>
            <method name="addThread" type="void" line="64">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <comment line="69">
                    Guard against duplicates. Duplicates can happen during
                     initialization when a particular thread might be added both
                     by a thread start event and by the initial call to threads()                    
                </comment>
                <scope line="65">
                    <declaration name="ti" type="ThreadInfo" line="67"/>
                    <scope line="71"/>
                </scope>
            </method>
            <method name="removeThread" type="void" line="77">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <comment line="80">
                    Current thread has died.                    
                </comment>
                <comment line="82">
                    Be careful getting the thread name. If its death happens
                     as part of VM termination, it may be too late to get the
                     information, and an exception will be thrown.                    
                </comment>
                <scope line="78">
                    <declaration name="currentThreadName" type="String" line="84"/>
                    <scope line="85"/>
                    <scope line="87"/>
                </scope>
            </method>
            <method name="threads" type="List<ThreadInfo>" line="100">
                <comment line="104">
                    Make a copy to allow iteration without synchronization                    
                </comment>
                <scope line="101"/>
            </method>
            <method name="invalidateAll" type="void" line="108">
                <scope line="111">
                    <scope line="112"/>
                </scope>
            </method>
            <method name="setThreadGroup" type="void" line="118">
                <params>
                    <param name="tg" type="ThreadGroupReference"/>
                </params>
            </method>
            <method name="setCurrentThread" type="void" line="122">
                <params>
                    <param name="tr" type="ThreadReference"/>
                </params>
                <scope line="123"/>
                <scope line="125">
                    <declaration name="tinfo" type="ThreadInfo" line="126"/>
                </scope>
            </method>
            <method name="setCurrentThreadInfo" type="void" line="131">
                <params>
                    <param name="tinfo" type="ThreadInfo"/>
                </params>
                <scope line="133"/>
            </method>
            <javadoc line="138">
                Get the current ThreadInfo object.                
                <return>
                    the ThreadInfo for the current thread.                    
                </return>
            </javadoc>
            <method name="getCurrentThreadInfo" type="ThreadInfo" line="143"/>
            <javadoc line="147">
                Get the thread from this ThreadInfo object.                
                <return>
                    the Thread wrapped by this ThreadInfo.                    
                </return>
            </javadoc>
            <method name="getThread" type="ThreadReference" line="152"/>
            <method name="group" type="ThreadGroupReference" line="156">
                <comment line="159">
                    Current thread group defaults to the first top level
                     thread group.                    
                </comment>
                <scope line="157"/>
            </method>
            <method name="getThreadInfo" type="ThreadInfo" line="165">
                <params>
                    <param name="id" type="long"/>
                </params>
                <declaration name="retInfo" type="ThreadInfo" line="166"/>
                <scope line="168">
                    <scope line="169">
                        <scope line="170"/>
                    </scope>
                </scope>
            </method>
            <method name="getThreadInfo" type="ThreadInfo" line="179">
                <params>
                    <param name="tr" type="ThreadReference"/>
                </params>
            </method>
            <method name="getThreadInfo" type="ThreadInfo" line="183">
                <params>
                    <param name="idToken" type="String"/>
                </params>
                <declaration name="tinfo" type="ThreadInfo" line="184"/>
                <scope line="185"/>
                <scope line="188">
                    <declaration name="threadId" type="long" line="189"/>
                </scope>
                <scope line="191"/>
            </method>
            <javadoc line="197">
                Get the thread stack frames.                
                <return>
                    a &lt;code&gt;List&lt;/code&gt; of the stack frames.                    
                </return>
            </javadoc>
            <method name="getStack" type="List<StackFrame>" line="202"/>
            <javadoc line="206">
                Get the current stackframe.                
                <return>
                    the current stackframe.                    
                </return>
            </javadoc>
            <method name="getCurrentFrame" type="StackFrame" line="211">
                <scope line="212"/>
            </method>
            <javadoc line="218">
                Invalidate the current stackframe index.                
            </javadoc>
            <method name="invalidate" type="void" line="221"/>
            <method name="assureSuspended" type="void" line="226">
                <scope line="227"/>
            </method>
            <javadoc line="232">
                Get the current stackframe index.                
                <return>
                    the number of the current stackframe.  Frame zero is the
                      closest to the current program counter                    
                </return>
            </javadoc>
            <method name="getCurrentFrameIndex" type="int" line="238"/>
            <javadoc line="242">
                Set the current stackframe to a specific frame.                
                <param>
                    nFrame    the number of the desired stackframe.  Frame zero is the
                      closest to the current program counter                    
                </param>
                <exception>
                    IllegalAccessError when the thread isn&apos;t
                      suspended or waiting at a breakpoint                    
                </exception>
                <exception>
                    ArrayIndexOutOfBoundsException when the
                      requested frame is beyond the stack boundary                    
                </exception>
            </javadoc>
            <method name="setCurrentFrameIndex" type="void" line="252">
                <params>
                    <param name="nFrame" type="int"/>
                </params>
                <scope line="254"/>
            </method>
            <javadoc line="260">
                Change the current stackframe to be one or more frames higher
                  (as in, away from the current program counter).                
                <param>
                    nFrames   the number of stackframes                    
                </param>
                <exception>
                    IllegalAccessError when the thread isn&apos;t
                      suspended or waiting at a breakpoint                    
                </exception>
                <exception>
                    ArrayIndexOutOfBoundsException when the
                      requested frame is beyond the stack boundary                    
                </exception>
            </javadoc>
            <method name="up" type="void" line="270">
                <params>
                    <param name="nFrames" type="int"/>
                </params>
            </method>
            <javadoc line="274">
                Change the current stackframe to be one or more frames lower
                  (as in, toward the current program counter).                
                <param>
                    nFrames   the number of stackframes                    
                </param>
                <exception>
                    IllegalAccessError when the thread isn&apos;t
                      suspended or waiting at a breakpoint                    
                </exception>
                <exception>
                    ArrayIndexOutOfBoundsException when the
                      requested frame is beyond the stack boundary                    
                </exception>
            </javadoc>
            <method name="down" type="void" line="283">
                <params>
                    <param name="nFrames" type="int"/>
                </params>
            </method>
        </class>
    </source>