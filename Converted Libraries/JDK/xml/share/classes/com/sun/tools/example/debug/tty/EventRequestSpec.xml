<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.example.debug.tty">
        <import package="com.sun.jdi"/>
        <import package="com.sun.jdi.request.EventRequest"/>
        <import package="com.sun.jdi.request.ExceptionRequest"/>
        <import package="com.sun.jdi.request.ClassPrepareRequest"/>
        <import package="com.sun.jdi.event.ClassPrepareEvent"/>
        <import package="java.util.ArrayList"/>
        <class name="EventRequestSpec" line="35">
            <declaration name="refSpec" type="ReferenceTypeSpec" line="37"/>
            <declaration name="suspendPolicy" type="int" line="39"/>
            <declaration name="resolved" type="EventRequest" line="41"/>
            <declaration name="prepareRequest" type="ClassPrepareRequest" line="42"/>
            <method name="EventRequestSpec" type="constructor" line="44">
                <params>
                    <param name="refSpec" type="ReferenceTypeSpec"/>
                </params>
            </method>
            <method name="resolveEventRequest" type="EventRequest" line="48"/>
            <javadoc line="48">
                The &apos;refType&apos; is known to match, return the EventRequest.                
            </javadoc>
            <javadoc line="54">
                @return If this EventRequestSpec matches the &apos;refType&apos;
                  return the cooresponding EventRequest.  Otherwise
                  return null.                
            </javadoc>
            <method name="resolve" type="EventRequest" line="59">
                <params>
                    <param name="event" type="ClassPrepareEvent"/>
                </params>
                <comment line="72">
                    Class pattern event requests are never
                     considered &quot;resolved&quot;, since future class loads
                     might also match.
                     Create and enable a new ClassPrepareRequest to
                     keep trying to resolve.                    
                </comment>
                <scope line="62">
                    <scope line="69">
                        <declaration name="prs" type="PatternReferenceTypeSpec" line="70"/>
                        <scope line="71"/>
                    </scope>
                </scope>
            </method>
            <method name="remove" type="void" line="88">
                <comment line="95">
                    This is a class pattern.  Track down and delete
                     all EventRequests matching this spec.
                     Note: Class patterns apply only to ExceptionRequests,
                     so that is all we need to examine.                    
                </comment>
                <scope line="89"/>
                <scope line="92">
                    <declaration name="prs" type="PatternReferenceTypeSpec" line="93"/>
                    <scope line="94">
                        <declaration name="deleteList" type="ArrayList&lt;ExceptionRequest&gt;" line="101"/>
                        <scope line="103">
                            <scope line="104"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="resolveAgainstPreparedClasses" type="EventRequest" line="113">
                <scope line="114">
                    <scope line="115"/>
                </scope>
            </method>
            <method name="resolveEagerly" type="EventRequest" line="122">
                <comment line="125">
                    Not resolved.  Schedule a prepare request so we
                     can resolve later.                    
                </comment>
                <comment line="132">
                    Try to resolve in case the class is already loaded.                    
                </comment>
                <comment line="143">
                    Class pattern event requests are never
                     considered &quot;resolved&quot;, since future class loads
                     might also match.  Create a new
                     ClassPrepareRequest if necessary and keep
                     trying to resolve.                    
                </comment>
                <comment line="158">
                    Do nothing. Another resolve will be attempted when the                    
                </comment>
                <comment line="159">
                    VM is started.                    
                </comment>
                <scope line="123">
                    <scope line="124">
                        <scope line="134"/>
                    </scope>
                    <scope line="140">
                        <declaration name="prs" type="PatternReferenceTypeSpec" line="141"/>
                        <scope line="142">
                            <scope line="151"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="157"/>
            </method>
            <javadoc line="164">
                @return the eventRequest this spec has been resolved to,
                  null if so far unresolved.                
            </javadoc>
            <method name="resolved" type="EventRequest" line="168"/>
            <javadoc line="172">
                @return true if this spec has been resolved.                
            </javadoc>
            <method name="isResolved" type="boolean" line="175"/>
            <method name="isJavaIdentifier" type="boolean" line="179">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="180"/>
                <declaration name="cp" type="int" line="184"/>
                <scope line="185"/>
                <scope line="189">
                    <scope line="191"/>
                </scope>
            </method>
            <method name="errorMessageFor" type="String" line="199">
                <params>
                    <param name="e" type="Exception"/>
                </params>
                <comment line="203">
                    A runtime exception that we were not expecting                    
                </comment>
                <scope line="200"/>
                <scope line="202"/>
                <scope line="205"/>
            </method>
        </class>
    </source>