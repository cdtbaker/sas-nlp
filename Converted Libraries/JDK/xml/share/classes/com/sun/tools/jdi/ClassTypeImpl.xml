<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.jdi"/>
        <import package="java.util"/>
        <class name="ClassTypeImpl" line="32">
            <extends class="ReferenceTypeImpl"/>
            <implements interface="ClassType"/>
            <declaration name="cachedSuperclass" type="boolean" line="35"/>
            <declaration name="superclass" type="ClassType" line="36"/>
            <declaration name="lastLine" type="int" line="37"/>
            <declaration name="interfaces" type="List&lt;InterfaceType&gt;" line="38"/>
            <method name="ClassTypeImpl" type="constructor" line="40">
                <params>
                    <param name="aVm" type="VirtualMachine"/>
                    <param name="aRef" type="long"/>
                </params>
            </method>
            <method name="superclass" type="ClassType" line="44">
                <comment line="54">
                    If there is a superclass, cache its
                     ClassType here. Otherwise,
                     leave the cache reference null.                    
                </comment>
                <scope line="45">
                    <declaration name="sup" type="ClassTypeImpl" line="46"/>
                    <scope line="47"/>
                    <scope line="50"/>
                    <scope line="59"/>
                </scope>
            </method>
            <method name="interfaces" type="List<InterfaceType>" line="68">
                <scope line="69"/>
            </method>
            <method name="addInterfaces" type="void" line="75">
                <params>
                    <param name="list" type="List<InterfaceType>"/>
                </params>
                <declaration name="immediate" type="List&lt;InterfaceType&gt;" line="76"/>
                <declaration name="iter" type="Iterator" line="79"/>
                <scope line="80">
                    <declaration name="interfaze" type="InterfaceTypeImpl" line="81"/>
                </scope>
                <declaration name="superclass" type="ClassTypeImpl" line="85"/>
                <scope line="86"/>
            </method>
            <method name="allInterfaces" type="List<InterfaceType>" line="91">
                <declaration name="all" type="List&lt;InterfaceType&gt;" line="92"/>
            </method>
            <method name="subclasses" type="List<ClassType>" line="97">
                <declaration name="subs" type="List&lt;ClassType&gt;" line="98"/>
                <scope line="99">
                    <scope line="100">
                        <declaration name="clazz" type="ClassType" line="101"/>
                        <declaration name="superclass" type="ClassType" line="102"/>
                        <scope line="103"/>
                    </scope>
                </scope>
            </method>
            <method name="isEnum" type="boolean" line="112">
                <declaration name="superclass" type="ClassType" line="113"/>
                <scope line="115"/>
            </method>
            <method name="setValue" type="void" line="122">
                <params>
                    <param name="field" type="Field"/>
                    <param name="value" type="Value"/>
                </params>
                <comment line="128">
                    More validation specific to setting from a ClassType                    
                </comment>
                <comment line="139">
                    validate and convert if necessary                    
                </comment>
                <comment line="148">
                    Since we got this exception,
                     the field type must be a reference type. The value
                     we&apos;re trying to set is null, but if the field&apos;s
                     class has not yet been loaded through the enclosing
                     class loader, then setting to null is essentially a
                     no-op, and we should allow it without an exception.                    
                </comment>
                <scope line="129"/>
                <scope line="134">
                    <declaration name="values" type="JDWP.ClassType.SetValues.FieldValue[]" line="135"/>
                    <scope line="142"/>
                    <scope line="144"/>
                </scope>
                <scope line="147">
                    <scope line="156"/>
                </scope>
            </method>
            <method name="sendInvokeCommand" type="PacketStream" line="165">
                <params>
                    <param name="thread" type="ThreadReferenceImpl"/>
                    <param name="method" type="MethodImpl"/>
                    <param name="args" type="ValueImpl[]"/>
                    <param name="options" type="int"/>
                </params>
                <anonymous_class line="167">
                    <method name="send" type="PacketStream" line="168"/>
                </anonymous_class>
                <declaration name="sender" type="CommandSender" line="166"/>
                <declaration name="stream" type="PacketStream" line="175"/>
                <scope line="176"/>
                <scope line="178"/>
            </method>
            <method name="sendNewInstanceCommand" type="PacketStream" line="187">
                <params>
                    <param name="thread" type="ThreadReferenceImpl"/>
                    <param name="method" type="MethodImpl"/>
                    <param name="args" type="ValueImpl[]"/>
                    <param name="options" type="int"/>
                </params>
                <anonymous_class line="189">
                    <method name="send" type="PacketStream" line="190"/>
                </anonymous_class>
                <declaration name="sender" type="CommandSender" line="188"/>
                <declaration name="stream" type="PacketStream" line="197"/>
                <scope line="198"/>
                <scope line="200"/>
            </method>
            <method name="invokeMethod" type="Value" line="211">
                <params>
                    <param name="threadIntf" type="ThreadReference"/>
                    <param name="methodIntf" type="Method"/>
                    <param name="origArguments" type="List<? extends Value>"/>
                    <param name="options" type="int"/>
                </params>
                <comment line="237">
                    There is an implict VM-wide suspend at the conclusion
                     of a normal (non-single-threaded) method invoke                    
                </comment>
                <declaration name="method" type="MethodImpl" line="216"/>
                <declaration name="thread" type="ThreadReferenceImpl" line="217"/>
                <declaration name="arguments" type="List&lt;? extends Value&gt;" line="221"/>
                <declaration name="args" type="ValueImpl[]" line="223"/>
                <declaration name="ret" type="JDWP.ClassType.InvokeMethod" line="224"/>
                <scope line="225">
                    <declaration name="stream" type="PacketStream" line="226"/>
                </scope>
                <scope line="229">
                    <scope line="230"/>
                    <scope line="232"/>
                </scope>
                <scope line="241"/>
                <scope line="245"/>
                <scope line="247"/>
            </method>
            <method name="newInstance" type="ObjectReference" line="259">
                <params>
                    <param name="threadIntf" type="ThreadReference"/>
                    <param name="methodIntf" type="Method"/>
                    <param name="origArguments" type="List<? extends Value>"/>
                    <param name="options" type="int"/>
                </params>
                <comment line="285">
                    There is an implict VM-wide suspend at the conclusion
                     of a normal (non-single-threaded) method invoke                    
                </comment>
                <declaration name="method" type="MethodImpl" line="264"/>
                <declaration name="thread" type="ThreadReferenceImpl" line="265"/>
                <declaration name="arguments" type="List&lt;Value&gt;" line="269"/>
                <declaration name="args" type="ValueImpl[]" line="271"/>
                <declaration name="ret" type="JDWP.ClassType.NewInstance" line="272"/>
                <scope line="273">
                    <declaration name="stream" type="PacketStream" line="274"/>
                </scope>
                <scope line="277">
                    <scope line="278"/>
                    <scope line="280"/>
                </scope>
                <scope line="289"/>
                <scope line="293"/>
                <scope line="295"/>
            </method>
            <method name="concreteMethodByName" type="Method" line="300">
                <params>
                    <param name="name" type="String"/>
                    <param name="signature" type="String"/>
                </params>
                <declaration name="method" type="Method" line="301"/>
                <scope line="302">
                    <scope line="305"/>
                </scope>
            </method>
            <method name="allMethods" type="List<Method>" line="314">
                <comment line="323">
                    Avoid duplicate checking on each method by iterating through
                     duplicate-free allInterfaces() rather than recursing                    
                </comment>
                <declaration name="list" type="ArrayList&lt;Method&gt;" line="315"/>
                <declaration name="clazz" type="ClassType" line="317"/>
                <scope line="318"/>
                <scope line="327"/>
            </method>
            <method name="inheritedTypes" type="List<ReferenceType>" line="334">
                <comment line="337">
                                        
                </comment>
                <declaration name="inherited" type="List&lt;ReferenceType&gt;" line="335"/>
                <scope line="336"/>
                <scope line="339"/>
            </method>
            <method name="validateMethodInvocation" type="void" line="347">
                <params>
                    <param name="method" type="Method"/>
                </params>
                <comment line="348">
                    Method must be in this class or a superclass.                    
                </comment>
                <comment line="356">
                    Method must be a static and not a static initializer                    
                </comment>
                <declaration name="declType" type="ReferenceTypeImpl" line="351"/>
                <scope line="352"/>
                <scope line="359"/>
                <scope line="361"/>
            </method>
            <method name="validateConstructorInvocation" type="void" line="368">
                <params>
                    <param name="method" type="Method"/>
                </params>
                <comment line="369">
                    Method must be in this class.                    
                </comment>
                <comment line="377">
                    Method must be a constructor                    
                </comment>
                <declaration name="declType" type="ReferenceTypeImpl" line="372"/>
                <scope line="373"/>
                <scope line="380"/>
            </method>
            <method name="addVisibleMethods" type="void" line="385">
                <params>
                    <param name="methodMap" type="Map<String,Method>"/>
                </params>
                <comment line="386">
                    Add methods from
                     parent types first, so that the methods in this class will
                     overwrite them in the hash table                    
                </comment>
                <declaration name="iter" type="Iterator" line="392"/>
                <scope line="393">
                    <declaration name="interfaze" type="InterfaceTypeImpl" line="394"/>
                </scope>
                <declaration name="clazz" type="ClassTypeImpl" line="398"/>
                <scope line="399"/>
            </method>
            <method name="isAssignableTo" type="boolean" line="406">
                <params>
                    <param name="type" type="ReferenceType"/>
                </params>
                <declaration name="superclazz" type="ClassTypeImpl" line="407"/>
                <scope line="408"/>
                <scope line="410"/>
                <scope line="412">
                    <declaration name="interfaces" type="List&lt;InterfaceType&gt;" line="413"/>
                    <declaration name="iter" type="Iterator" line="414"/>
                    <scope line="415">
                        <declaration name="interfaze" type="InterfaceTypeImpl" line="416"/>
                        <scope line="417"/>
                    </scope>
                </scope>
            </method>
            <method name="toString" type="String" line="425"/>
        </class>
    </source>