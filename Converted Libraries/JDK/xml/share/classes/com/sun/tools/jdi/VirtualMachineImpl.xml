<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.jdi"/>
        <import package="com.sun.jdi.connect.spi.Connection"/>
        <import package="com.sun.jdi.request.EventRequestManager"/>
        <import package="com.sun.jdi.request.EventRequest"/>
        <import package="com.sun.jdi.request.BreakpointRequest"/>
        <import package="com.sun.jdi.event.EventQueue"/>
        <import package="java.util"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.lang.ref.WeakReference"/>
        <class name="VirtualMachineImpl" line="42">
            <extends class="MirrorImpl"/>
            <comment line="45">
                VM Level exported variables, these                
            </comment>
            <comment line="46">
                are unique to a given vm                
            </comment>
            <comment line="62">
                Allow direct access to this field so that that tracing code slows down                
            </comment>
            <comment line="63">
                JDI as little as possible when not enabled.                
            </comment>
            <comment line="69">
                pre-compute because of frequency                
            </comment>
            <comment line="71">
                ReferenceType access - updated with class prepare and unload events                
            </comment>
            <comment line="72">
                Protected by &quot;synchronized(this)&quot;. &quot;retrievedAllTypes&quot; may be                
            </comment>
            <comment line="73">
                tested unsynchronized (since once true, it stays true), but must                
            </comment>
            <comment line="74">
                be set synchronously                
            </comment>
            <comment line="79">
                For other languages support                
            </comment>
            <comment line="82">
                ObjectReference cache                
            </comment>
            <comment line="83">
                &quot;objectsByID&quot; protected by &quot;synchronized(this)&quot;.                
            </comment>
            <comment line="90">
                These are cached once for the life of the VM                
            </comment>
            <comment line="96">
                Per-vm singletons for primitive types and for void.                
            </comment>
            <comment line="97">
                singleton-ness protected by &quot;synchronized(this)&quot;.                
            </comment>
            <comment line="111">
                Launched debuggee process                
            </comment>
            <comment line="114">
                coordinates state changes and corresponding listener notifications                
            </comment>
            <comment line="144">
                ThreadListener implementation                
            </comment>
            <comment line="389">
                Sends a command to the back end which is defined to do an
                 implicit vm-wide resume. The VM can no longer be considered
                 suspended, so certain cached data must be invalidated.                
            </comment>
            <comment line="398">
                The VM has been suspended. Additional caching can be done
                 as long as there are no pending resumes.                
            </comment>
            <comment line="1369">
                Implementation of PathSearchingVirtualMachine                
            </comment>
            <implements interface="PathSearchingVirtualMachine"/>
            <implements interface="ThreadListener"/>
            <declaration name="sizeofFieldRef" type="int" line="46"/>
            <declaration name="sizeofMethodRef" type="int" line="47"/>
            <declaration name="sizeofObjectRef" type="int" line="48"/>
            <declaration name="sizeofClassRef" type="int" line="49"/>
            <declaration name="sizeofFrameRef" type="int" line="50"/>
            <declaration name="sequenceNumber" type="int" line="52"/>
            <declaration name="target" type="TargetVM" line="54"/>
            <declaration name="eventQueue" type="EventQueueImpl" line="55"/>
            <declaration name="internalEventRequestManager" type="EventRequestManagerImpl" line="56"/>
            <declaration name="eventRequestManager" type="EventRequestManagerImpl" line="57"/>
            <declaration name="vmManager" type="VirtualMachineManagerImpl" line="58"/>
            <declaration name="threadGroupForJDI" type="ThreadGroup" line="59"/>
            <declaration name="traceFlags" type="int" line="63"/>
            <declaration name="TRACE_RAW_SENDS" type="int" line="65"/>
            <declaration name="TRACE_RAW_RECEIVES" type="int" line="66"/>
            <declaration name="traceReceives" type="boolean" line="68"/>
            <declaration name="typesByID" type="Map&lt;Long,ReferenceType&gt;" line="74"/>
            <declaration name="typesBySignature" type="TreeSet&lt;ReferenceType&gt;" line="75"/>
            <declaration name="retrievedAllTypes" type="boolean" line="76"/>
            <declaration name="defaultStratum" type="String" line="79"/>
            <declaration name="objectsByID" type="Map&lt;Long,SoftObjectReference&gt;" line="83"/>
            <declaration name="referenceQueue" type="ReferenceQueue&lt;ObjectReferenceImpl&gt;" line="84"/>
            <declaration name="DISPOSE_THRESHOLD" type="int" line="85"/>
            <declaration name="batchedDisposeRequests" type="List&lt;SoftObjectReference&gt;" line="86"/>
            <declaration name="versionInfo" type="JDWP.VirtualMachine.Version" line="90"/>
            <declaration name="pathInfo" type="JDWP.VirtualMachine.ClassPaths" line="91"/>
            <declaration name="capabilities" type="JDWP.VirtualMachine.Capabilities" line="92"/>
            <declaration name="capabilitiesNew" type="JDWP.VirtualMachine.CapabilitiesNew" line="93"/>
            <declaration name="theBooleanType" type="BooleanType" line="97"/>
            <declaration name="theByteType" type="ByteType" line="98"/>
            <declaration name="theCharType" type="CharType" line="99"/>
            <declaration name="theShortType" type="ShortType" line="100"/>
            <declaration name="theIntegerType" type="IntegerType" line="101"/>
            <declaration name="theLongType" type="LongType" line="102"/>
            <declaration name="theFloatType" type="FloatType" line="103"/>
            <declaration name="theDoubleType" type="DoubleType" line="104"/>
            <declaration name="theVoidType" type="VoidType" line="106"/>
            <declaration name="voidVal" type="VoidValue" line="108"/>
            <declaration name="process" type="Process" line="111"/>
            <declaration name="state" type="VMState" line="114"/>
            <declaration name="initMonitor" type="Object" line="116"/>
            <declaration name="initComplete" type="boolean" line="117"/>
            <declaration name="shutdown" type="boolean" line="118"/>
            <method name="notifyInitCompletion" type="void" line="120">
                <scope line="121"/>
            </method>
            <method name="waitInitCompletion" type="void" line="127">
                <comment line="133">
                    ignore                    
                </comment>
                <scope line="128">
                    <scope line="129">
                        <scope line="130"/>
                        <scope line="132"/>
                    </scope>
                </scope>
            </method>
            <method name="state" type="VMState" line="139"/>
            <method name="threadResumable" type="boolean" line="146">
                <params>
                    <param name="action" type="ThreadAction"/>
                </params>
                <comment line="147">
                    If any thread is resumed, the VM is considered not suspended.
                     Just one thread is being resumed so pass it to thaw.                    
                </comment>
            </method>
            <method name="VirtualMachineImpl" type="constructor" line="157">
                <params>
                    <param name="manager" type="VirtualMachineManager"/>
                    <param name="connection" type="Connection"/>
                    <param name="process" type="Process"/>
                    <param name="sequenceNumber" type="int"/>
                </params>
                <comment line="158">
                    Can&apos;t use super(this)                    
                </comment>
                <comment line="165">
                    Create ThreadGroup to be used by all threads servicing
                     this VM.                    
                </comment>
                <comment line="172">
                    Set up a thread to communicate with the target VM over
                     the specified transport.                    
                </comment>
                <comment line="178">
                    Set up a thread to handle events processed internally
                     the JDI implementation.                    
                </comment>
                <comment line="184">
                    Initialize client access to event setting and handling                    
                </comment>
                <comment line="192">
                    Many ids are variably sized, depending on target VM.
                     Find out the sizes right away.                    
                </comment>
                <comment line="208">
                    Set up requests needed by internal event handler.
                     Make sure they are distinguished by creating them with
                     an internal event request manager.
                    
                     Warning: create events only with SUSPEND_NONE policy.
                     In the current implementation other policies will not
                     be handled correctly when the event comes in. (notfiySuspend()
                     will not be properly called, and if the event is combined
                     with external events in the same set, suspend policy is not
                     correctly determined for the internal vs. external event sets)                    
                </comment>
                <comment line="228">
                    Tell other threads, notably TargetVM, that initialization
                     is complete.                    
                </comment>
                <declaration name="internalEventQueue" type="EventQueueImpl" line="182"/>
                <declaration name="idSizes" type="JDWP.VirtualMachine.IDSizes" line="196"/>
                <scope line="197"/>
                <scope line="199"/>
                <declaration name="er" type="EventRequest" line="221"/>
            </method>
            <method name="getInternalEventRequestManager" type="EventRequestManagerImpl" line="235"/>
            <method name="validateVM" type="void" line="239">
                <comment line="240">
                    We no longer need to do this.  The spec now says
                     that a VMDisconnected _may_ be thrown in these
                     cases, not that it _will_ be thrown.
                     So, to simplify things we will just let the
                     caller&apos;s of this method proceed with their business.
                     If the debuggee is disconnected, either because it
                     crashed or finished or something, or because the
                     debugger called exit() or dispose(), then if
                     we end up trying to communicate with the debuggee,
                     code in TargetVM will throw a VMDisconnectedException.
                     This means that if we can satisfy a request without
                     talking to the debuggee, (eg, with cached data) then
                     VMDisconnectedException will _not_ be thrown.
                     if (shutdown) {
                        throw new VMDisconnectedException();
                     }                    
                </comment>
            </method>
            <method name="equals" type="boolean" line="260">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="264"/>
            <method name="classesByName" type="List<ReferenceType>" line="268">
                <params>
                    <param name="className" type="String"/>
                </params>
                <declaration name="signature" type="String" line="270"/>
                <declaration name="list" type="List&lt;ReferenceType&gt;" line="271"/>
                <scope line="272"/>
                <scope line="274"/>
            </method>
            <method name="allClasses" type="List<ReferenceType>" line="280">
                <scope line="283"/>
                <declaration name="a" type="ArrayList&lt;ReferenceType&gt;" line="286"/>
                <scope line="287"/>
            </method>
            <method name="redefineClasses" type="void" line="295">
                <params>
                    <param name="classToBytes" type="Map<? extends ReferenceType,byte[]>"/>
                </params>
                <comment line="312">
                    flush caches and disable caching until the next suspend                    
                </comment>
                <comment line="358">
                    Delete any record of the breakpoints                    
                </comment>
                <comment line="370">
                    Invalidate any information cached for the classes just redefined.                    
                </comment>
                <declaration name="cnt" type="int" line="296"/>
                <declaration name="defs" type="JDWP.VirtualMachine.RedefineClasses.ClassDef[]" line="297"/>
                <scope line="300"/>
                <declaration name="it" type="Iterator" line="303"/>
                <scope line="304">
                    <declaration name="entry" type="Map.Entry" line="305"/>
                    <declaration name="refType" type="ReferenceTypeImpl" line="306"/>
                </scope>
                <scope line="315"/>
                <scope line="318"/>
                <declaration name="toDelete" type="List&lt;BreakpointRequest&gt;" line="359"/>
                <declaration name="erm" type="EventRequestManager" line="360"/>
                <scope line="362">
                    <declaration name="req" type="BreakpointRequest" line="363"/>
                    <scope line="364"/>
                </scope>
                <scope line="372">
                    <declaration name="rti" type="ReferenceTypeImpl" line="373"/>
                </scope>
            </method>
            <method name="allThreads" type="List<ThreadReference>" line="378"/>
            <method name="topLevelThreadGroups" type="List<ThreadGroupReference>" line="383"/>
            <method name="sendResumingCommand" type="PacketStream" line="393">
                <params>
                    <param name="sender" type="CommandSender"/>
                </params>
            </method>
            <method name="notifySuspend" type="void" line="401"/>
            <method name="suspend" type="void" line="405">
                <scope line="407"/>
                <scope line="409"/>
            </method>
            <method name="resume" type="void" line="415">
                <comment line="427">
                    If the debugger makes a VMDeathRequest with SUSPEND_ALL,
                     then when it does an EventSet.resume after getting the
                     VMDeathEvent, the normal flow of events is that the
                     BE shuts down, but the waitForReply comes back ok.  In this
                     case, the run loop in TargetVM that is waiting for a packet
                     gets an EOF because the socket closes. It generates a
                     VMDisconnectedEvent and everyone is happy.
                     However, sometimes, the BE gets shutdown before this
                     waitForReply completes.  In this case, TargetVM.waitForReply
                     gets awakened with no reply and so gens a VMDisconnectedException
                     which is not what we want.  It might be possible to fix this
                     in the BE, but it is ok to just ignore the VMDisconnectedException
                     here.  This will allow the VMDisconnectedEvent to be generated
                     correctly.  And, if the debugger should happen to make another
                     request, it will get a VMDisconnectedException at that time.                    
                </comment>
                <anonymous_class line="418">
                    <method name="send" type="PacketStream" line="419"/>
                </anonymous_class>
                <declaration name="sender" type="CommandSender" line="417"/>
                <scope line="423">
                    <declaration name="stream" type="PacketStream" line="424"/>
                </scope>
                <scope line="426"/>
                <scope line="444"/>
            </method>
            <method name="eventQueue" type="EventQueue" line="454">
                <comment line="455">
                    No VM validation here. We allow access to the event queue
                     after disconnection, so that there is access to the terminating
                     events.                    
                </comment>
            </method>
            <method name="eventRequestManager" type="EventRequestManager" line="463"/>
            <method name="eventRequestManagerImpl" type="EventRequestManagerImpl" line="468"/>
            <method name="mirrorOf" type="BooleanValue" line="472">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <method name="mirrorOf" type="ByteValue" line="477">
                <params>
                    <param name="value" type="byte"/>
                </params>
            </method>
            <method name="mirrorOf" type="CharValue" line="482">
                <params>
                    <param name="value" type="char"/>
                </params>
            </method>
            <method name="mirrorOf" type="ShortValue" line="487">
                <params>
                    <param name="value" type="short"/>
                </params>
            </method>
            <method name="mirrorOf" type="IntegerValue" line="492">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <method name="mirrorOf" type="LongValue" line="497">
                <params>
                    <param name="value" type="long"/>
                </params>
            </method>
            <method name="mirrorOf" type="FloatValue" line="502">
                <params>
                    <param name="value" type="float"/>
                </params>
            </method>
            <method name="mirrorOf" type="DoubleValue" line="507">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="mirrorOf" type="StringReference" line="512">
                <params>
                    <param name="value" type="String"/>
                </params>
                <scope line="514"/>
                <scope line="517"/>
            </method>
            <method name="mirrorOfVoid" type="VoidValue" line="522">
                <scope line="523"/>
            </method>
            <method name="instanceCounts" type="long[]" line="529">
                <params>
                    <param name="classes" type="List<? extends ReferenceType>"/>
                </params>
                <scope line="530"/>
                <declaration name="retValue" type="long[]" line="534"/>
                <declaration name="rtArray" type="ReferenceTypeImpl[]" line="535"/>
                <declaration name="ii" type="int" line="536"/>
                <scope line="537"/>
                <scope line="541"/>
                <scope line="544"/>
            </method>
            <method name="dispose" type="void" line="551">
                <scope line="554"/>
                <scope line="556"/>
            </method>
            <method name="exit" type="void" line="562">
                <params>
                    <param name="exitCode" type="int"/>
                </params>
                <scope line="565"/>
                <scope line="567"/>
            </method>
            <method name="process" type="Process" line="573"/>
            <method name="versionInfo" type="JDWP.VirtualMachine.Version" line="578">
                <comment line="581">
                    Need not be synchronized since it is static information                    
                </comment>
                <scope line="579">
                    <scope line="580"/>
                </scope>
                <scope line="585"/>
            </method>
            <method name="description" type="String" line="589"/>
            <method name="version" type="String" line="598"/>
            <method name="name" type="String" line="603"/>
            <method name="canWatchFieldModification" type="boolean" line="608"/>
            <method name="canWatchFieldAccess" type="boolean" line="612"/>
            <method name="canGetBytecodes" type="boolean" line="616"/>
            <method name="canGetSyntheticAttribute" type="boolean" line="620"/>
            <method name="canGetOwnedMonitorInfo" type="boolean" line="624"/>
            <method name="canGetCurrentContendedMonitor" type="boolean" line="628"/>
            <method name="canGetMonitorInfo" type="boolean" line="632"/>
            <method name="hasNewCapabilities" type="boolean" line="637"/>
            <method name="canGet1_5LanguageFeatures" type="boolean" line="642"/>
            <method name="canUseInstanceFilters" type="boolean" line="647"/>
            <method name="canRedefineClasses" type="boolean" line="652"/>
            <method name="canAddMethod" type="boolean" line="657"/>
            <method name="canUnrestrictedlyRedefineClasses" type="boolean" line="662"/>
            <method name="canPopFrames" type="boolean" line="667"/>
            <method name="canGetMethodReturnValues" type="boolean" line="672"/>
            <method name="canGetInstanceInfo" type="boolean" line="676">
                <scope line="678"/>
            </method>
            <method name="canUseSourceNameFilters" type="boolean" line="685">
                <scope line="687"/>
            </method>
            <method name="canForceEarlyReturn" type="boolean" line="692"/>
            <method name="canBeModified" type="boolean" line="697"/>
            <method name="canGetSourceDebugExtension" type="boolean" line="700"/>
            <method name="canGetClassFileVersion" type="boolean" line="705">
                <scope line="707"/>
                <scope line="709"/>
            </method>
            <method name="canGetConstantPool" type="boolean" line="713"/>
            <method name="canRequestVMDeathEvent" type="boolean" line="718"/>
            <method name="canRequestMonitorEvents" type="boolean" line="723"/>
            <method name="canGetMonitorFrameInfo" type="boolean" line="728"/>
            <method name="setDebugTraceMode" type="void" line="734">
                <params>
                    <param name="traceFlags" type="int"/>
                </params>
            </method>
            <method name="printTrace" type="void" line="740">
                <params>
                    <param name="string" type="String"/>
                </params>
            </method>
            <method name="printReceiveTrace" type="void" line="744">
                <params>
                    <param name="depth" type="int"/>
                    <param name="string" type="String"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="745"/>
                <scope line="746"/>
            </method>
            <method name="addReferenceType" type="ReferenceTypeImpl" line="755">
                <params>
                    <param name="id" type="long"/>
                    <param name="tag" type="int"/>
                    <param name="signature" type="String"/>
                </params>
                <comment line="774">
                    If a signature was specified, make sure to set it ASAP, to
                     prevent any needless JDWP command to retrieve it. (for example,
                     typesBySignature.add needs the signature, to maintain proper
                     ordering.                    
                </comment>
                <scope line="756"/>
                <declaration name="type" type="ReferenceTypeImpl" line="759"/>
                <scope line="780"/>
                <scope line="787"/>
            </method>
            <method name="removeReferenceType" type="void" line="795">
                <params>
                    <param name="signature" type="String"/>
                </params>
                <comment line="799">
                    There can be multiple classes with the same name. Since
                     we can&apos;t differentiate here, we first remove all
                     matching classes from our cache...                    
                </comment>
                <comment line="817">
                    fix for 4359077 , don&apos;t break out. list is no longer sorted
                    in the order we think                    
                </comment>
                <comment line="823">
                    ...and if there was more than one, re-retrieve the classes
                     with that name                    
                </comment>
                <scope line="796"/>
                <declaration name="iter" type="Iterator" line="804"/>
                <declaration name="matches" type="int" line="805"/>
                <scope line="806">
                    <declaration name="type" type="ReferenceTypeImpl" line="807"/>
                    <declaration name="comp" type="int" line="808"/>
                    <scope line="809">
                        <scope line="813"/>
                    </scope>
                </scope>
                <scope line="827"/>
            </method>
            <method name="findReferenceTypes" type="List<ReferenceType>" line="832">
                <params>
                    <param name="signature" type="String"/>
                </params>
                <comment line="843">
                    fix for 4359077 , don&apos;t break out. list is no longer sorted
                    in the order we think                    
                </comment>
                <scope line="833"/>
                <declaration name="iter" type="Iterator" line="836"/>
                <declaration name="list" type="List&lt;ReferenceType&gt;" line="837"/>
                <scope line="838">
                    <declaration name="type" type="ReferenceTypeImpl" line="839"/>
                    <declaration name="comp" type="int" line="840"/>
                    <scope line="841"/>
                </scope>
            </method>
            <method name="initReferenceTypes" type="void" line="851"/>
            <method name="referenceType" type="ReferenceTypeImpl" line="856">
                <params>
                    <param name="ref" type="long"/>
                    <param name="tag" type="byte"/>
                </params>
            </method>
            <method name="classType" type="ClassTypeImpl" line="860">
                <params>
                    <param name="ref" type="long"/>
                </params>
            </method>
            <method name="interfaceType" type="InterfaceTypeImpl" line="864">
                <params>
                    <param name="ref" type="long"/>
                </params>
            </method>
            <method name="arrayType" type="ArrayTypeImpl" line="868">
                <params>
                    <param name="ref" type="long"/>
                </params>
            </method>
            <method name="referenceType" type="ReferenceTypeImpl" line="873">
                <params>
                    <param name="id" type="long"/>
                    <param name="tag" type="int"/>
                    <param name="signature" type="String"/>
                </params>
                <scope line="874">
                    <declaration name="sb" type="StringBuffer" line="875"/>
                    <scope line="877"/>
                    <scope line="879"/>
                    <scope line="881"/>
                    <scope line="883"/>
                    <scope line="886"/>
                </scope>
                <scope line="892"/>
                <scope line="894">
                    <declaration name="retType" type="ReferenceTypeImpl" line="895"/>
                    <scope line="896">
                        <scope line="897"/>
                        <scope line="900"/>
                    </scope>
                </scope>
            </method>
            <method name="capabilities" type="JDWP.VirtualMachine.Capabilities" line="908">
                <scope line="909">
                    <scope line="910"/>
                    <scope line="913"/>
                </scope>
            </method>
            <method name="capabilitiesNew" type="JDWP.VirtualMachine.CapabilitiesNew" line="920">
                <scope line="921">
                    <scope line="922"/>
                    <scope line="925"/>
                </scope>
            </method>
            <method name="retrieveClassesBySignature" type="List<ReferenceType>" line="932">
                <params>
                    <param name="signature" type="String"/>
                </params>
                <comment line="947">
                    Hold lock during processing to improve performance                    
                </comment>
                <scope line="933"/>
                <declaration name="cinfos" type="JDWP.VirtualMachine.ClassesBySignature.ClassInfo[]" line="936"/>
                <scope line="937"/>
                <scope line="940"/>
                <declaration name="count" type="int" line="944"/>
                <declaration name="list" type="List&lt;ReferenceType&gt;" line="945"/>
                <scope line="948">
                    <scope line="949">
                        <declaration name="ci" type="JDWP.VirtualMachine.ClassesBySignature.ClassInfo" line="950"/>
                        <declaration name="type" type="ReferenceTypeImpl" line="952"/>
                    </scope>
                </scope>
            </method>
            <method name="retrieveAllClasses1_4" type="void" line="962">
                <comment line="970">
                    Hold lock during processing to improve performance                    
                </comment>
                <comment line="971">
                    and to have safe check/set of retrievedAllTypes                    
                </comment>
                <comment line="974">
                    Number of classes                    
                </comment>
                <declaration name="cinfos" type="JDWP.VirtualMachine.AllClasses.ClassInfo[]" line="963"/>
                <scope line="964"/>
                <scope line="966"/>
                <scope line="972">
                    <scope line="973">
                        <declaration name="count" type="int" line="975"/>
                        <scope line="976">
                            <declaration name="ci" type="JDWP.VirtualMachine.AllClasses.ClassInfo" line="977"/>
                            <declaration name="type" type="ReferenceTypeImpl" line="979"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="retrieveAllClasses" type="void" line="989">
                <comment line="999">
                    To save time (assuming the caller will be
                     using then) we will get the generic sigs too.                    
                </comment>
                <comment line="1011">
                    Hold lock during processing to improve performance                    
                </comment>
                <comment line="1012">
                    and to have safe check/set of retrievedAllTypes                    
                </comment>
                <comment line="1015">
                    Number of classes                    
                </comment>
                <scope line="990"/>
                <scope line="994"/>
                <declaration name="cinfos" type="JDWP.VirtualMachine.AllClassesWithGeneric.ClassInfo[]" line="1004"/>
                <scope line="1005"/>
                <scope line="1007"/>
                <scope line="1013">
                    <scope line="1014">
                        <declaration name="count" type="int" line="1016"/>
                        <scope line="1017">
                            <declaration name="ci" type="JDWP.VirtualMachine.AllClassesWithGeneric.ClassInfo" line="1018"/>
                            <declaration name="type" type="ReferenceTypeImpl" line="1020"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="sendToTarget" type="void" line="1031">
                <params>
                    <param name="packet" type="Packet"/>
                </params>
            </method>
            <method name="waitForTargetReply" type="void" line="1035">
                <params>
                    <param name="packet" type="Packet"/>
                </params>
                <comment line="1037">
                    If any object disposes have been batched up, send them now.                    
                </comment>
            </method>
            <method name="findBootType" type="Type" line="1043">
                <params>
                    <param name="signature" type="String"/>
                </params>
                <declaration name="types" type="List" line="1044"/>
                <declaration name="iter" type="Iterator" line="1045"/>
                <scope line="1046">
                    <declaration name="type" type="ReferenceType" line="1047"/>
                    <scope line="1049"/>
                </scope>
                <declaration name="parser" type="JNITypeParser" line="1053"/>
            </method>
            <method name="theBooleanType" type="BooleanType" line="1058">
                <scope line="1059">
                    <scope line="1060">
                        <scope line="1061"/>
                    </scope>
                </scope>
            </method>
            <method name="theByteType" type="ByteType" line="1069">
                <scope line="1070">
                    <scope line="1071">
                        <scope line="1072"/>
                    </scope>
                </scope>
            </method>
            <method name="theCharType" type="CharType" line="1080">
                <scope line="1081">
                    <scope line="1082">
                        <scope line="1083"/>
                    </scope>
                </scope>
            </method>
            <method name="theShortType" type="ShortType" line="1091">
                <scope line="1092">
                    <scope line="1093">
                        <scope line="1094"/>
                    </scope>
                </scope>
            </method>
            <method name="theIntegerType" type="IntegerType" line="1102">
                <scope line="1103">
                    <scope line="1104">
                        <scope line="1105"/>
                    </scope>
                </scope>
            </method>
            <method name="theLongType" type="LongType" line="1113">
                <scope line="1114">
                    <scope line="1115">
                        <scope line="1116"/>
                    </scope>
                </scope>
            </method>
            <method name="theFloatType" type="FloatType" line="1124">
                <scope line="1125">
                    <scope line="1126">
                        <scope line="1127"/>
                    </scope>
                </scope>
            </method>
            <method name="theDoubleType" type="DoubleType" line="1135">
                <scope line="1136">
                    <scope line="1137">
                        <scope line="1138"/>
                    </scope>
                </scope>
            </method>
            <method name="theVoidType" type="VoidType" line="1146">
                <scope line="1147">
                    <scope line="1148">
                        <scope line="1149"/>
                    </scope>
                </scope>
            </method>
            <method name="primitiveTypeMirror" type="PrimitiveType" line="1157">
                <params>
                    <param name="tag" type="byte"/>
                </params>
            </method>
            <method name="processBatchedDisposes" type="void" line="1180">
                <comment line="1201">
                    This is kludgy. We temporarily re-create an object                    
                </comment>
                <comment line="1202">
                    reference so that we can correctly pass its id to the                    
                </comment>
                <comment line="1203">
                    JDWP command.                    
                </comment>
                <scope line="1181"/>
                <declaration name="requests" type="JDWP.VirtualMachine.DisposeObjects.Request[]" line="1185"/>
                <scope line="1186">
                    <declaration name="size" type="int" line="1187"/>
                    <scope line="1188">
                        <scope line="1189"/>
                        <scope line="1194">
                            <declaration name="ref" type="SoftObjectReference" line="1195"/>
                            <scope line="1196"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1212">
                    <scope line="1213"/>
                    <scope line="1215"/>
                </scope>
            </method>
            <method name="batchForDispose" type="void" line="1221">
                <params>
                    <param name="ref" type="SoftObjectReference"/>
                </params>
                <scope line="1222"/>
            </method>
            <method name="processQueue" type="void" line="1229">
                <comment line="1231">
                    if ((traceFlags &amp; TRACE_OBJREFS) != 0) {                    
                </comment>
                <comment line="1232">
                    printTrace(&quot;Checking for softly reachable objects&quot;);                    
                </comment>
                <comment line="1233">
                    }                    
                </comment>
                <declaration name="ref" type="Reference" line="1230"/>
                <scope line="1234">
                    <declaration name="softRef" type="SoftObjectReference" line="1235"/>
                </scope>
            </method>
            <method name="objectMirror" type="ObjectReferenceImpl" line="1241">
                <params>
                    <param name="id" type="long"/>
                    <param name="tag" type="int"/>
                </params>
                <comment line="1243">
                    Handle any queue elements that are not strongly reachable                    
                </comment>
                <comment line="1252">
                    Attempt to retrieve an existing object object reference                    
                </comment>
                <comment line="1260">
                    If the object wasn&apos;t in the table, or it&apos;s soft reference was
                     cleared, create a new instance.                    
                </comment>
                <comment line="1295">
                    If there was no previous entry in the table, we add one here
                     If the previous entry was cleared, we replace it here.                    
                </comment>
                <scope line="1246"/>
                <declaration name="object" type="ObjectReferenceImpl" line="1249"/>
                <declaration name="key" type="Long" line="1250"/>
                <declaration name="ref" type="SoftObjectReference" line="1255"/>
                <scope line="1256"/>
                <scope line="1264">
                    <declaration name="thread" type="ThreadReferenceImpl" line="1276"/>
                    <scope line="1300"/>
                </scope>
                <scope line="1304"/>
            </method>
            <method name="removeObjectMirror" type="void" line="1311">
                <params>
                    <param name="object" type="ObjectReferenceImpl"/>
                </params>
                <comment line="1313">
                    Handle any queue elements that are not strongly reachable                    
                </comment>
                <comment line="1320">
                    If there&apos;s a live ObjectReference about, it better be part
                     of the cache.                    
                </comment>
                <declaration name="ref" type="SoftObjectReference" line="1316"/>
                <scope line="1317"/>
                <scope line="1319"/>
            </method>
            <method name="removeObjectMirror" type="void" line="1329">
                <params>
                    <param name="ref" type="SoftObjectReference"/>
                </params>
                <comment line="1330">
                    This will remove the soft reference if it has not been
                     replaced in the cache.                    
                </comment>
            </method>
            <method name="objectMirror" type="ObjectReferenceImpl" line="1337">
                <params>
                    <param name="id" type="long"/>
                </params>
            </method>
            <method name="stringMirror" type="StringReferenceImpl" line="1341">
                <params>
                    <param name="id" type="long"/>
                </params>
            </method>
            <method name="arrayMirror" type="ArrayReferenceImpl" line="1345">
                <params>
                    <param name="id" type="long"/>
                </params>
            </method>
            <method name="threadMirror" type="ThreadReferenceImpl" line="1349">
                <params>
                    <param name="id" type="long"/>
                </params>
            </method>
            <method name="threadGroupMirror" type="ThreadGroupReferenceImpl" line="1353">
                <params>
                    <param name="id" type="long"/>
                </params>
            </method>
            <method name="classLoaderMirror" type="ClassLoaderReferenceImpl" line="1358">
                <params>
                    <param name="id" type="long"/>
                </params>
            </method>
            <method name="classObjectMirror" type="ClassObjectReferenceImpl" line="1363">
                <params>
                    <param name="id" type="long"/>
                </params>
            </method>
            <method name="getClasspath" type="JDWP.VirtualMachine.ClassPaths" line="1371">
                <scope line="1372">
                    <scope line="1373"/>
                    <scope line="1375"/>
                </scope>
            </method>
            <method name="classPath" type="List<String>" line="1382"/>
            <method name="bootClassPath" type="List<String>" line="1386"/>
            <method name="baseDirectory" type="String" line="1390"/>
            <method name="setDefaultStratum" type="void" line="1394">
                <params>
                    <param name="stratum" type="String"/>
                </params>
                <scope line="1396"/>
                <scope line="1399"/>
                <scope line="1402"/>
            </method>
            <method name="getDefaultStratum" type="String" line="1407"/>
            <method name="threadGroupForJDI" type="ThreadGroup" line="1411"/>
            <class name="SoftObjectReference" line="1415">
                <extends class="SoftReference">
                    <type_params>
                        <type_param name="ObjectReferenceImpl"/>
                    </type_params>
                </extends>
                <declaration name="count" type="int" line="1416"/>
                <declaration name="key" type="Long" line="1417"/>
                <method name="SoftObjectReference" type="constructor" line="1420">
                    <params>
                        <param name="key" type="Long"/>
                        <param name="mirror" type="ObjectReferenceImpl"/>
                        <param name="queue" type="ReferenceQueue<ObjectReferenceImpl>"/>
                    </params>
                </method>
                <method name="count" type="int" line="1426"/>
                <method name="incrementCount" type="void" line="1430"/>
                <method name="key" type="Long" line="1434"/>
                <method name="object" type="ObjectReferenceImpl" line="1438"/>
            </class>
        </class>
    </source>