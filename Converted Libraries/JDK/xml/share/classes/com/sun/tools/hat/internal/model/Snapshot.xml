<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.hat.internal.model">
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.util"/>
        <import package="com.sun.tools.hat.internal.parser.ReadBuffer"/>
        <import package="com.sun.tools.hat.internal.util.Misc"/>
        <class name="Snapshot" line="45">
            <comment line="60">
                all heap objects                
            </comment>
            <comment line="67">
                all Roots in this Snapshot                
            </comment>
            <comment line="70">
                name-to-class map                
            </comment>
            <comment line="74">
                new objects relative to a baseline - lazily initialized                
            </comment>
            <comment line="77">
                allocation site traces for all objects - lazily initialized                
            </comment>
            <comment line="80">
                object-to-Root map for all objects                
            </comment>
            <comment line="84">
                soft cache of finalizeable objects - lazily initialized                
            </comment>
            <comment line="87">
                represents null reference                
            </comment>
            <comment line="90">
                java.lang.ref.Reference class                
            </comment>
            <comment line="92">
                index of &apos;referent&apos; field in java.lang.ref.Reference class                
            </comment>
            <comment line="95">
                java.lang.Class class                
            </comment>
            <comment line="97">
                java.lang.String class                
            </comment>
            <comment line="99">
                java.lang.ClassLoader class                
            </comment>
            <comment line="102">
                unknown &quot;other&quot; array class                
            </comment>
            <comment line="104">
                Stuff to exclude from reachable query                
            </comment>
            <comment line="106">
                the underlying heap dump buffer                
            </comment>
            <comment line="109">
                True iff some heap objects have isNew set                
            </comment>
            <comment line="113">
                whether object array instances have new style class or
                 old style (element) class.                
            </comment>
            <comment line="117">
                object id size in the heap dump                
            </comment>
            <comment line="120">
                minimum object size - accounts for object header in
                 most Java virtual machines - we assume 2 identifierSize
                 (which is true for Sun&apos;s hotspot JVM).                
            </comment>
            <comment line="218">
                Used in the body of resolve()                
            </comment>
            <comment line="228">
                To show heap parsing progress, we print a &apos;.&apos; after this limit                
            </comment>
            <comment line="506">
                package privates                
            </comment>
            <comment line="582">
                Internals only below this point                
            </comment>
            <javadoc line="45">
                Represents a snapshot of the Java objects in the VM at one instant.
                  This is the top-level &quot;model&quot; object read out of a single .hprof or .bod
                  file.                
            </javadoc>
            <declaration name="SMALL_ID_MASK" type="long" line="53"/>
            <declaration name="EMPTY_BYTE_ARRAY" type="byte[]" line="54"/>
            <declaration name="EMPTY_FIELD_ARRAY" type="JavaField[]" line="56"/>
            <declaration name="EMPTY_STATIC_ARRAY" type="JavaStatic[]" line="57"/>
            <declaration name="heapObjects" type="Hashtable&lt;Number,JavaHeapObject&gt;" line="60"/>
            <declaration name="fakeClasses" type="Hashtable&lt;Number,JavaClass&gt;" line="63"/>
            <declaration name="roots" type="Vector&lt;Root&gt;" line="67"/>
            <declaration name="classes" type="Map&lt;String,JavaClass&gt;" line="70"/>
            <declaration name="newObjects" type="Map&lt;JavaHeapObject,Boolean&gt;" line="74"/>
            <declaration name="siteTraces" type="Map&lt;JavaHeapObject,StackTrace&gt;" line="77"/>
            <declaration name="rootsMap" type="Map&lt;JavaHeapObject,Root&gt;" line="80"/>
            <declaration name="finalizablesCache" type="SoftReference&lt;Vector&gt;" line="84"/>
            <declaration name="nullThing" type="JavaThing" line="87"/>
            <declaration name="weakReferenceClass" type="JavaClass" line="90"/>
            <declaration name="referentFieldIndex" type="int" line="92"/>
            <declaration name="javaLangClass" type="JavaClass" line="95"/>
            <declaration name="javaLangString" type="JavaClass" line="97"/>
            <declaration name="javaLangClassLoader" type="JavaClass" line="99"/>
            <declaration name="otherArrayType" type="JavaClass" line="102"/>
            <declaration name="reachableExcludes" type="ReachableExcludes" line="104"/>
            <declaration name="readBuf" type="ReadBuffer" line="106"/>
            <declaration name="hasNewSet" type="boolean" line="109"/>
            <declaration name="unresolvedObjectsOK" type="boolean" line="110"/>
            <declaration name="newStyleArrayClass" type="boolean" line="114"/>
            <declaration name="identifierSize" type="int" line="117"/>
            <declaration name="minimumObjectSize" type="int" line="122"/>
            <method name="Snapshot" type="constructor" line="124">
                <params>
                    <param name="buf" type="ReadBuffer"/>
                </params>
            </method>
            <method name="setSiteTrace" type="void" line="129">
                <params>
                    <param name="obj" type="JavaHeapObject"/>
                    <param name="trace" type="StackTrace"/>
                </params>
                <scope line="130"/>
            </method>
            <method name="getSiteTrace" type="StackTrace" line="136">
                <params>
                    <param name="obj" type="JavaHeapObject"/>
                </params>
                <scope line="137"/>
                <scope line="139"/>
            </method>
            <method name="setNewStyleArrayClass" type="void" line="144">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <method name="isNewStyleArrayClass" type="boolean" line="148"/>
            <method name="setIdentifierSize" type="void" line="152">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="getIdentifierSize" type="int" line="157"/>
            <method name="getMinimumObjectSize" type="int" line="161"/>
            <method name="addHeapObject" type="void" line="165">
                <params>
                    <param name="id" type="long"/>
                    <param name="ho" type="JavaHeapObject"/>
                </params>
            </method>
            <method name="addRoot" type="void" line="169">
                <params>
                    <param name="r" type="Root"/>
                </params>
            </method>
            <method name="addClass" type="void" line="174">
                <params>
                    <param name="id" type="long"/>
                    <param name="c" type="JavaClass"/>
                </params>
            </method>
            <method name="addFakeInstanceClass" type="JavaClass" line="179">
                <params>
                    <param name="classID" type="long"/>
                    <param name="instSize" type="int"/>
                </params>
                <comment line="181">
                    Create a fake class name based on ID.                    
                </comment>
                <comment line="184">
                    Create fake fields convering the given instance size.
                     Create as many as int type fields and for the left over
                     size create byte type fields.                    
                </comment>
                <comment line="199">
                    Create fake instance class                    
                </comment>
                <comment line="202">
                    Add the class                    
                </comment>
                <declaration name="name" type="String" line="181"/>
                <declaration name="numInts" type="int" line="186"/>
                <declaration name="numBytes" type="int" line="187"/>
                <declaration name="fields" type="JavaField[]" line="188"/>
                <declaration name="i" type="int" line="189"/>
                <scope line="190"/>
                <scope line="193"/>
                <declaration name="c" type="JavaClass" line="199"/>
            </method>
            <javadoc line="207">
                @return true iff it&apos;s possible that some JavaThing instances might
                  isNew set                
                <see>
                    JavaThing.isNew()                    
                </see>
            </javadoc>
            <method name="getHasNewSet" type="boolean" line="213"/>
            <class name="MyVisitor" line="220">
                <extends class="AbstractJavaHeapObjectVisitor"/>
                <declaration name="t" type="JavaHeapObject" line="221"/>
                <method name="visit" type="void" line="222">
                    <params>
                        <param name="other" type="JavaHeapObject"/>
                    </params>
                </method>
            </class>
            <declaration name="DOT_LIMIT" type="int" line="228"/>
            <javadoc line="230">
                Called after reading complete, to initialize the structure                
            </javadoc>
            <method name="resolve" type="void" line="233">
                <params>
                    <param name="calculateRefs" type="boolean"/>
                </params>
                <comment line="237">
                    First, resolve the classes.  All classes must be resolved before
                     we try any objects, because the objects use classes in their
                     resolution.                    
                </comment>
                <comment line="268">
                    Now, resolve everything else.                    
                </comment>
                <comment line="279">
                    JDK 1.1.x                    
                </comment>
                <comment line="296">
                    This println refers to the *next* step                    
                </comment>
                <comment line="311">
                    to ensure that Iterator.remove() on getClasses()
                     result will throw exception..                    
                </comment>
                <scope line="240"/>
                <scope line="247"/>
                <scope line="254"/>
                <scope line="261">
                    <scope line="262"/>
                </scope>
                <scope line="268">
                    <scope line="269"/>
                </scope>
                <scope line="278"/>
                <scope line="281">
                    <declaration name="fields" type="JavaField[]" line="282"/>
                    <scope line="283">
                        <scope line="284"/>
                    </scope>
                </scope>
                <scope line="291"/>
                <declaration name="count" type="int" line="297"/>
                <scope line="298">
                    <scope line="301"/>
                </scope>
                <scope line="306"/>
            </method>
            <method name="calculateReferencesToObjects" type="void" line="315">
                <comment line="324">
                    call addReferenceFrom(t) on all objects t references:                    
                </comment>
                <declaration name="count" type="int" line="319"/>
                <declaration name="visitor" type="MyVisitor" line="320"/>
                <scope line="321">
                    <scope line="326"/>
                </scope>
                <scope line="332">
                    <declaration name="t" type="JavaHeapObject" line="334"/>
                    <scope line="335"/>
                </scope>
            </method>
            <method name="markNewRelativeTo" type="void" line="341">
                <params>
                    <param name="baseline" type="Snapshot"/>
                </params>
                <scope line="343">
                    <declaration name="isNew" type="boolean" line="344"/>
                    <declaration name="thingID" type="long" line="345"/>
                    <scope line="346"/>
                    <scope line="348">
                        <declaration name="other" type="JavaThing" line="349"/>
                        <scope line="350"/>
                        <scope line="352"/>
                    </scope>
                </scope>
            </method>
            <method name="getThings" type="Enumeration<JavaHeapObject>" line="360"/>
            <method name="findThing" type="JavaHeapObject" line="365">
                <params>
                    <param name="id" type="long"/>
                </params>
                <declaration name="idObj" type="Number" line="366"/>
                <declaration name="jho" type="JavaHeapObject" line="367"/>
            </method>
            <method name="findThing" type="JavaHeapObject" line="371">
                <params>
                    <param name="id" type="String"/>
                </params>
            </method>
            <method name="findClass" type="JavaClass" line="375">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="376"/>
                <scope line="378"/>
            </method>
            <javadoc line="383">
                Return an Iterator of all of the classes in this snapshot.                
            </javadoc>
            <method name="getClasses" type="Iterator" line="386">
                <comment line="388">
                    note that because classes is a TreeMap
                     classes are already sorted by name                    
                </comment>
            </method>
            <method name="getClassesArray" type="JavaClass[]" line="392">
                <declaration name="res" type="JavaClass[]" line="393"/>
            </method>
            <method name="getFinalizerObjects" type="Enumeration" line="398">
                <declaration name="obj" type="Vector" line="399"/>
                <scope line="401"/>
                <declaration name="clazz" type="JavaClass" line="405"/>
                <declaration name="queue" type="JavaObject" line="406"/>
                <declaration name="tmp" type="JavaThing" line="407"/>
                <declaration name="finalizables" type="Vector&lt;JavaHeapObject&gt;" line="408"/>
                <scope line="409">
                    <declaration name="head" type="JavaObject" line="410"/>
                    <scope line="411">
                        <declaration name="referent" type="JavaHeapObject" line="412"/>
                        <declaration name="next" type="JavaThing" line="413"/>
                        <scope line="414"/>
                    </scope>
                </scope>
            </method>
            <method name="getRoots" type="Enumeration<Root>" line="425"/>
            <method name="getRootsArray" type="Root[]" line="429">
                <declaration name="res" type="Root[]" line="430"/>
            </method>
            <method name="getRootAt" type="Root" line="435">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="rootsetReferencesTo" type="ReferenceChain[]" line="440">
                <params>
                    <param name="target" type="JavaHeapObject"/>
                    <param name="includeWeak" type="boolean"/>
                </params>
                <comment line="442">
                    This is slow... A real fifo would help                    
                </comment>
                <comment line="443">
                    Must be a fifo to go breadth-first                    
                </comment>
                <comment line="445">
                    Objects are added here right after being added to fifo.                    
                </comment>
                <comment line="456">
                    Even though curr is in the rootset, we want to explore its
                     referers, because they might be more interesting.                    
                </comment>
                <declaration name="fifo" type="Vector&lt;ReferenceChain&gt;" line="441"/>
                <declaration name="visited" type="Hashtable&lt;JavaHeapObject,JavaHeapObject&gt;" line="443"/>
                <declaration name="result" type="Vector&lt;ReferenceChain&gt;" line="445"/>
                <scope line="449">
                    <declaration name="chain" type="ReferenceChain" line="450"/>
                    <declaration name="curr" type="JavaHeapObject" line="452"/>
                    <scope line="453"/>
                    <declaration name="referers" type="Enumeration" line="458"/>
                    <scope line="459">
                        <declaration name="t" type="JavaHeapObject" line="460"/>
                        <scope line="461">
                            <scope line="462"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="realResult" type="ReferenceChain[]" line="470"/>
                <scope line="471"/>
            </method>
            <method name="getUnresolvedObjectsOK" type="boolean" line="477"/>
            <method name="setUnresolvedObjectsOK" type="void" line="481">
                <params>
                    <param name="v" type="boolean"/>
                </params>
            </method>
            <method name="getWeakReferenceClass" type="JavaClass" line="485"/>
            <method name="getReferentFieldIndex" type="int" line="489"/>
            <method name="getNullThing" type="JavaThing" line="493"/>
            <method name="setReachableExcludes" type="void" line="497">
                <params>
                    <param name="e" type="ReachableExcludes"/>
                </params>
            </method>
            <method name="getReachableExcludes" type="ReachableExcludes" line="501"/>
            <method name="addReferenceFromRoot" type="void" line="506">
                <params>
                    <param name="r" type="Root"/>
                    <param name="obj" type="JavaHeapObject"/>
                </params>
                <declaration name="root" type="Root" line="507"/>
                <scope line="508"/>
                <scope line="510"/>
            </method>
            <method name="getRoot" type="Root" line="515">
                <params>
                    <param name="obj" type="JavaHeapObject"/>
                </params>
            </method>
            <method name="getJavaLangClass" type="JavaClass" line="519"/>
            <method name="getJavaLangString" type="JavaClass" line="523"/>
            <method name="getJavaLangClassLoader" type="JavaClass" line="527"/>
            <method name="getOtherArrayType" type="JavaClass" line="531">
                <scope line="532">
                    <scope line="533">
                        <scope line="534"/>
                    </scope>
                </scope>
            </method>
            <method name="getArrayClass" type="JavaClass" line="545">
                <params>
                    <param name="elementSignature" type="String"/>
                </params>
                <comment line="554">
                    This is needed because the JDK only creates Class structures
                     for array element types, not the arrays themselves.  For
                     analysis, though, we need to pretend that there&apos;s a
                     JavaClass for the array type, too.                    
                </comment>
                <declaration name="clazz" type="JavaClass" line="546"/>
                <scope line="547">
                    <scope line="549"/>
                </scope>
            </method>
            <method name="getReadBuffer" type="ReadBuffer" line="562"/>
            <method name="setNew" type="void" line="566">
                <params>
                    <param name="obj" type="JavaHeapObject"/>
                    <param name="isNew" type="boolean"/>
                </params>
                <scope line="568"/>
            </method>
            <method name="isNew" type="boolean" line="573">
                <params>
                    <param name="obj" type="JavaHeapObject"/>
                </params>
                <scope line="574"/>
                <scope line="576"/>
            </method>
            <method name="makeId" type="Number" line="582">
                <params>
                    <param name="id" type="long"/>
                </params>
                <scope line="583"/>
                <scope line="585"/>
            </method>
            <method name="putInClassesMap" type="void" line="590">
                <params>
                    <param name="c" type="JavaClass"/>
                </params>
                <comment line="594">
                    more than one class can have the same name
                     if so, create a unique name by appending
                     - and id string to it.                    
                </comment>
                <declaration name="name" type="String" line="591"/>
                <scope line="592"/>
            </method>
            <method name="addFakeClass" type="void" line="601">
                <params>
                    <param name="c" type="JavaClass"/>
                </params>
            </method>
            <method name="addFakeClass" type="void" line="606">
                <params>
                    <param name="id" type="Number"/>
                    <param name="c" type="JavaClass"/>
                </params>
            </method>
            <method name="initNewObjects" type="void" line="611">
                <scope line="612">
                    <scope line="613">
                        <scope line="614"/>
                    </scope>
                </scope>
            </method>
            <method name="initSiteTraces" type="void" line="621">
                <scope line="622">
                    <scope line="623">
                        <scope line="624"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>