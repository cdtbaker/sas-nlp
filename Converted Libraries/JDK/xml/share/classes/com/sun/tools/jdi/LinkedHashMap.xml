<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.io.Serializable"/>
        <class name="LinkedHashMap" line="96">
            <extends class="AbstractMap"/>
            <comment line="540">
                Views                
            </comment>
            <comment line="789">
                Types of Iterators                
            </comment>
            <implements interface="Map"/>
            <implements interface="Serializable"/>
            <declaration name="table" type="Entry" line="97"/>
            <javadoc line="97">
                The hash table data.                
            </javadoc>
            <declaration name="header" type="Entry" line="102"/>
            <javadoc line="102">
                The head of the double linked list.                
            </javadoc>
            <declaration name="count" type="int" line="107"/>
            <javadoc line="107">
                The total number of mappings in the hash table.                
            </javadoc>
            <declaration name="threshold" type="int" line="112"/>
            <javadoc line="112">
                Rehashes the table when count exceeds this threshold.                
            </javadoc>
            <declaration name="loadFactor" type="float" line="117"/>
            <javadoc line="117">
                The load factor for the LinkedHashMap.                
            </javadoc>
            <declaration name="modCount" type="int" line="122"/>
            <javadoc line="122">
                The number of times this LinkedHashMap has been structurally modified
                  Structural modifications are those that change the number of mappings in
                  the LinkedHashMap or otherwise modify its internal structure (e.g.,
                  rehash).  This field is used to make iterators on Collection-views of
                  the LinkedHashMap fail-fast.  (See ConcurrentModificationException).                
            </javadoc>
            <javadoc line="131">
                Constructs a new, empty LinkedHashMap with the specified initial
                  capacity and the specified load factor.                
                <param>
                    initialCapacity   the initial capacity of the LinkedHashMap.                    
                </param>
                <param>
                    loadFactor        a number between 0.0 and 1.0.                    
                </param>
                <exception>
                    IllegalArgumentException  if the initial capacity is less
                      than or equal to zero, or if the load factor is less than
                      or equal to zero.                    
                </exception>
            </javadoc>
            <method name="LinkedHashMap" type="constructor" line="141">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                </params>
            </method>
            <javadoc line="157">
                Constructs a new, empty LinkedHashMap with the specified initial capacity
                  and default load factor.                
                <param>
                    initialCapacity   the initial capacity of the LinkedHashMap.                    
                </param>
            </javadoc>
            <method name="LinkedHashMap" type="constructor" line="163">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="167">
                Constructs a new, empty LinkedHashMap with a default capacity and load
                  factor.                
            </javadoc>
            <method name="LinkedHashMap" type="constructor" line="171"/>
            <javadoc line="175">
                Constructs a new LinkedHashMap with the same mappings as the given
                  Map.  The LinkedHashMap is created with a capacity of thrice the number
                  of mappings in the given Map or 11 (whichever is greater), and a
                  default load factor.                
            </javadoc>
            <method name="LinkedHashMap" type="constructor" line="181">
                <params>
                    <param name="t" type="Map"/>
                </params>
            </method>
            <javadoc line="186">
                Returns the number of key-value mappings in this Map.                
            </javadoc>
            <method name="size" type="int" line="189"/>
            <javadoc line="193">
                Returns true if this Map contains no key-value mappings.                
            </javadoc>
            <method name="isEmpty" type="boolean" line="196"/>
            <javadoc line="200">
                Returns true if this LinkedHashMap maps one or more keys to the specified
                  value.                
                <param>
                    value value whose presence in this Map is to be tested.                    
                </param>
            </javadoc>
            <method name="containsValue" type="boolean" line="206">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <scope line="207"/>
                <scope line="211"/>
            </method>
            <javadoc line="219">
                Returns true if this LinkedHashMap contains a mapping for the specified
                  key.                
                <param>
                    key key whose presence in this Map is to be tested.                    
                </param>
            </javadoc>
            <method name="containsKey" type="boolean" line="225">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="tab" type="Entry" line="226"/>
                <scope line="227">
                    <declaration name="hash" type="int" line="228"/>
                    <declaration name="index" type="int" line="229"/>
                </scope>
                <scope line="233"/>
            </method>
            <javadoc line="242">
                Returns the value to which this LinkedHashMap maps the specified key.
                  Returns null if the LinkedHashMap contains no mapping for this key.
                  A return value of null does not &lt;em&gt;necessarily&lt;/em&gt; indicate that the
                  LinkedHashMap contains no mapping for the key; it&apos;s also possible that
                  the LinkedHashMap explicitly maps the key to null.  The containsKey
                  operation may be used to distinguish these two cases.                
                <param>
                    key key whose associated value is to be returned.                    
                </param>
            </javadoc>
            <method name="get" type="Object" line="252">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="e" type="Entry" line="253"/>
            </method>
            <javadoc line="257">
                Returns the entry associated with the specified key in the LinkedHashMap.
                  Returns null if the LinkedHashMap contains no mapping for this key.                
            </javadoc>
            <method name="getEntry" type="Entry" line="261">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="tab" type="Entry" line="262"/>
                <scope line="264">
                    <declaration name="hash" type="int" line="265"/>
                    <declaration name="index" type="int" line="266"/>
                </scope>
                <scope line="270"/>
            </method>
            <javadoc line="279">
                Rehashes the contents of the LinkedHashMap into a LinkedHashMap with a
                  larger capacity. This method is called automatically when the
                  number of keys in the LinkedHashMap exceeds this LinkedHashMap&apos;s capacity
                  and load factor.                
            </javadoc>
            <method name="rehash" type="void" line="285">
                <declaration name="oldCapacity" type="int" line="286"/>
                <declaration name="oldMap" type="Entry" line="287"/>
                <declaration name="newCapacity" type="int" line="289"/>
                <declaration name="newMap" type="Entry" line="290"/>
                <scope line="296">
                    <declaration name="index" type="int" line="297"/>
                </scope>
            </method>
            <javadoc line="303">
                Remove an entry from the linked list.                
            </javadoc>
            <method name="listRemove" type="void" line="306">
                <params>
                    <param name="entry" type="Entry"/>
                </params>
                <scope line="307"/>
            </method>
            <javadoc line="314">
                Add the specified entry before the specified existing entry to
                  the linked list.                
            </javadoc>
            <method name="listAddBefore" type="void" line="318">
                <params>
                    <param name="entry" type="Entry"/>
                    <param name="existEntry" type="Entry"/>
                </params>
            </method>
            <javadoc line="325">
                Returns the position of the mapping for the specified key
                  in the ordered map.                
                <param>
                    key the specified key.                    
                </param>
                <return>
                    index of the key mapping.                    
                </return>
            </javadoc>
            <method name="indexOf" type="int" line="332">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="i" type="int" line="333"/>
                <scope line="334"/>
                <scope line="338"/>
            </method>
            <javadoc line="346">
                Associates the specified value with the specified key in this
                  LinkedHashMap. If the LinkedHashMap previously contained a mapping for
                  this key, the old value is replaced and the position of this mapping
                  entry in the double linked list remains the same. Otherwise, a new
                  mapping entry is created and inserted into the list before the specified
                  existing mapping entry. The method returns the previous value associated
                  with the specified key, or null if there was no mapping for key.  A null
                  return can also indicate that the LinkedHashMap previously associated
                  null with the specified key.                
            </javadoc>
            <method name="putAhead" type="Object" line="357">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                    <param name="existEntry" type="Entry"/>
                </params>
                <comment line="358">
                    Makes sure the key is not already in the LinkedHashMap.                    
                </comment>
                <comment line="385">
                    Rehash the table if the threshold is exceeded                    
                </comment>
                <comment line="391">
                    Creates the new entry.                    
                </comment>
                <declaration name="tab" type="Entry" line="359"/>
                <declaration name="hash" type="int" line="360"/>
                <declaration name="index" type="int" line="361"/>
                <scope line="363">
                    <scope line="366">
                        <scope line="367">
                            <declaration name="old" type="Object" line="368"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="373">
                    <scope line="374">
                        <scope line="375">
                            <declaration name="old" type="Object" line="376"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="384"/>
                <declaration name="e" type="Entry" line="392"/>
            </method>
            <javadoc line="399">
                Associates the specified value with the specified key in this
                  LinkedHashMap and position the mapping at the specified index.
                  If the LinkedHashMap previously contained a mapping for this key,
                  the old value is replaced and the position of this mapping entry
                  in the double linked list remains the same. Otherwise, a new mapping
                  entry is created and inserted into the list at the specified
                  position.                
                <param>
                    index     the position to put the key-value mapping.                    
                </param>
                <param>
                    key       key with which the specified value is to be associated.                    
                </param>
                <param>
                    value     value to be associated with the specified key.                    
                </param>
                <return>
                    previous value associated with specified key, or null if there
                      was no mapping for key.  A null return can also indicate that
                      the LinkedHashMap previously associated null with the specified
                      key.                    
                </return>
            </javadoc>
            <method name="put" type="Object" line="416">
                <params>
                    <param name="index" type="int"/>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <comment line="421">
                    fast approach for append                    
                </comment>
                <declaration name="e" type="Entry" line="419"/>
                <scope line="422"/>
            </method>
            <javadoc line="430">
                Associates the specified value with the specified key in this
                  LinkedHashMap. If the LinkedHashMap previously contained a mapping for
                  this key, the old value is replaced. The mapping entry is also appended
                  to the end of the ordered linked list.                
                <param>
                    key key with which the specified value is to be associated.                    
                </param>
                <param>
                    value value to be associated with the specified key.                    
                </param>
                <return>
                    previous value associated with specified key, or null if there
                      was no mapping for key.  A null return can also indicate that
                      the LinkedHashMap previously associated null with the specified
                      key.                    
                </return>
            </javadoc>
            <method name="put" type="Object" line="443">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="447">
                Removes the mapping for this key from this LinkedHashMap if present.
                  The mapping would also be removed from the double linked list.                
                <param>
                    key key whose mapping is to be removed from the Map.                    
                </param>
                <return>
                    previous value associated with specified key, or null if there
                      was no mapping for key.  A null return can also indicate that
                      the LinkedHashMap previously associated null with the specified
                      key.                    
                </return>
            </javadoc>
            <method name="remove" type="Object" line="457">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="tab" type="Entry" line="458"/>
                <scope line="460">
                    <declaration name="hash" type="int" line="461"/>
                    <declaration name="index" type="int" line="462"/>
                    <scope line="465">
                        <scope line="466">
                            <declaration name="oldValue" type="Object" line="474"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="481">
                    <scope line="483">
                        <scope line="484">
                            <declaration name="oldValue" type="Object" line="492"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="504">
                Copies all of the mappings from the specified Map to this LinkedHashMap
                  These mappings will replace any mappings that this LinkedHashMap had for
                  any of the keys currently in the specified Map.                
                <param>
                    t Mappings to be stored in this Map.                    
                </param>
            </javadoc>
            <method name="putAll" type="void" line="511">
                <params>
                    <param name="t" type="Map"/>
                </params>
                <declaration name="i" type="Iterator" line="512"/>
                <scope line="513">
                    <declaration name="e" type="Map.Entry" line="514"/>
                </scope>
            </method>
            <javadoc line="519">
                Removes all mappings from this LinkedHashMap.                
            </javadoc>
            <method name="clear" type="void" line="522">
                <declaration name="tab" type="Entry" line="523"/>
            </method>
            <javadoc line="531">
                Returns a shallow copy of this LinkedHashMap. The keys and values
                  themselves are not cloned.                
            </javadoc>
            <method name="clone" type="Object" line="535"/>
            <declaration name="keySet" type="Set" line="541"/>
            <declaration name="entries" type="Set" line="542"/>
            <declaration name="values" type="Collection" line="543"/>
            <javadoc line="545">
                Returns a Set view of the keys contained in this LinkedHashMap.  The Set
                  is backed by the LinkedHashMap, so changes to the LinkedHashMap are
                  reflected in the Set, and vice-versa.  The Set supports element removal,
                  which removes the corresponding mapping from the LinkedHashMap, via the
                  Iterator.remove, Set.remove, removeAll retainAll, and clear operations.
                  It does not support the add or addAll operations.                
            </javadoc>
            <method name="keySet" type="Set" line="553">
                <scope line="554">
                    <anonymous_class line="555">
                        <method name="iterator" type="Iterator" line="556"/>
                        <method name="size" type="int" line="559"/>
                        <method name="contains" type="boolean" line="562">
                            <params>
                                <param name="o" type="Object"/>
                            </params>
                        </method>
                        <method name="remove" type="boolean" line="565">
                            <params>
                                <param name="o" type="Object"/>
                            </params>
                        </method>
                        <method name="clear" type="void" line="568"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="576">
                Returns a Collection view of the values contained in this LinkedHashMap.
                  The Collection is backed by the LinkedHashMap, so changes to the
                  LinkedHashMap are reflected in the Collection, and vice-versa.  The
                  Collection supports element removal, which removes the corresponding
                  mapping from the LinkedHashMap, via the Iterator.remove,
                  Collection.remove, removeAll, retainAll and clear operations.  It does
                  not support the add or addAll operations.                
            </javadoc>
            <method name="values" type="Collection" line="585">
                <scope line="586">
                    <anonymous_class line="587">
                        <method name="iterator" type="Iterator" line="588"/>
                        <method name="size" type="int" line="591"/>
                        <method name="contains" type="boolean" line="594">
                            <params>
                                <param name="o" type="Object"/>
                            </params>
                        </method>
                        <method name="clear" type="void" line="597"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="605">
                Returns a Collection view of the mappings contained in this
                  LinkedHashMap. Each element in the returned collection is a Map.Entry.
                  The Collection is backed by the LinkedHashMap, so changes to the
                  LinkedHashMap are reflected in the Collection, and vice-versa.  The
                  Collection supports element removal, which removes the corresponding
                  mapping from the LinkedHashMap, via the Iterator.remove,
                  Collection.remove, removeAll, retainAll and clear operations.  It does
                  not support the add or addAll operations.                
                <see>
                    java.util.Map.Entry                    
                </see>
            </javadoc>
            <method name="entrySet" type="Set" line="617">
                <scope line="618">
                    <anonymous_class line="619">
                        <method name="iterator" type="Iterator" line="620"/>
                        <method name="contains" type="boolean" line="624">
                            <params>
                                <param name="o" type="Object"/>
                            </params>
                            <declaration name="entry" type="Map.Entry" line="627"/>
                            <declaration name="key" type="Object" line="628"/>
                            <declaration name="tab" type="Entry" line="629"/>
                            <declaration name="hash" type="int" line="630"/>
                            <declaration name="index" type="int" line="631"/>
                        </method>
                        <method name="remove" type="boolean" line="639">
                            <params>
                                <param name="o" type="Object"/>
                            </params>
                            <declaration name="entry" type="Map.Entry" line="642"/>
                            <declaration name="key" type="Object" line="643"/>
                            <declaration name="tab" type="Entry" line="644"/>
                            <declaration name="hash" type="int" line="645"/>
                            <declaration name="index" type="int" line="646"/>
                            <scope line="649">
                                <scope line="650"/>
                            </scope>
                        </method>
                        <method name="size" type="int" line="666"/>
                        <method name="clear" type="void" line="670"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="679">
                Compares the specified Object with this Map for equality.
                  Returns true if the given object is also a LinkedHashMap and the two
                  Maps represent the same mappings in the same order.  More formally,
                  two Maps &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt; represent the same mappings
                  if &lt;code&gt;t1.keySet().equals(t2.keySet())&lt;/code&gt; and for every
                  key &lt;code&gt;k&lt;/code&gt; in &lt;code&gt;t1.keySet()&lt;/code&gt;, &lt;code&gt;
                  (t1.get(k)==null ? t2.get(k)==null : t1.get(k).equals(t2.get(k)))
                  &lt;/code&gt;.
                  &lt;p&gt;
                  This implementation first checks if the specified Object is this Map;
                  if so it returns true.  Then, it checks if the specified Object is
                  a Map whose size is identical to the size of this Set; if not, it
                  it returns false.  If so, it iterates over this Map and the specified
                  Map&apos;s entrySet() Collection, and checks that the specified Map contains
                  each mapping that this Map contains at the same position.  If the
                  specified Map fails to contain such a mapping in the right order, false
                  is returned.  If the iteration completes, true is returned.                
                <param>
                    o Object to be compared for equality with this Map.                    
                </param>
                <return>
                    true if the specified Object is equal to this Map.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="702">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="t" type="LinkedHashMap" line="708"/>
                <declaration name="i1" type="Iterator" line="712"/>
                <declaration name="i2" type="Iterator" line="713"/>
                <scope line="715">
                    <declaration name="e1" type="Entry" line="716"/>
                    <declaration name="e2" type="Entry" line="717"/>
                    <declaration name="key1" type="Object" line="719"/>
                    <declaration name="value1" type="Object" line="720"/>
                    <declaration name="key2" type="Object" line="721"/>
                    <declaration name="value2" type="Object" line="722"/>
                    <scope line="725"/>
                    <scope line="727"/>
                </scope>
            </method>
            <class name="Entry" line="734">
                <comment line="744">
                    These fields comprise the doubly linked list that is used for                    
                </comment>
                <comment line="745">
                    iteration.                    
                </comment>
                <comment line="755">
                    Map.Entry Ops                    
                </comment>
                <implements interface="Map.Entry"/>
                <javadoc line="734">
                    LinkedHashMap collision list entry.                    
                </javadoc>
                <declaration name="hash" type="int" line="738"/>
                <declaration name="key" type="Object" line="739"/>
                <declaration name="value" type="Object" line="740"/>
                <declaration name="next" type="Entry" line="741"/>
                <declaration name="before" type="Entry" line="745"/>
                <method name="Entry" type="constructor" line="747">
                    <params>
                        <param name="hash" type="int"/>
                        <param name="key" type="Object"/>
                        <param name="value" type="Object"/>
                        <param name="next" type="Entry"/>
                    </params>
                </method>
                <method name="getKey" type="Object" line="756"/>
                <method name="getValue" type="Object" line="760"/>
                <method name="setValue" type="Object" line="764">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                    <declaration name="oldValue" type="Object" line="765"/>
                </method>
                <method name="equals" type="boolean" line="770">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="e" type="Map.Entry" line="773"/>
                </method>
                <method name="hashCode" type="int" line="779"/>
                <method name="toString" type="String" line="783"/>
            </class>
            <declaration name="KEYS" type="int" line="789"/>
            <declaration name="VALUES" type="int" line="790"/>
            <declaration name="ENTRIES" type="int" line="791"/>
            <class name="HashIterator" line="793">
                <comment line="744">
                    These fields comprise the doubly linked list that is used for                    
                </comment>
                <comment line="745">
                    iteration.                    
                </comment>
                <comment line="755">
                    Map.Entry Ops                    
                </comment>
                <implements interface="Iterator"/>
                <declaration name="table" type="Entry[]" line="794"/>
                <declaration name="entry" type="Entry" line="795"/>
                <declaration name="lastReturned" type="Entry" line="796"/>
                <declaration name="type" type="int" line="797"/>
                <declaration name="expectedModCount" type="int" line="799"/>
                <javadoc line="799">
                    The modCount value that the iterator believes that the backing
                      List should have.  If this expectation is violated, the iterator
                      has detected concurrent modification.                    
                </javadoc>
                <method name="HashIterator" type="constructor" line="806">
                    <params>
                        <param name="type" type="int"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="811"/>
                <method name="next" type="Object" line="815">
                    <declaration name="e" type="Entry" line="821"/>
                </method>
                <method name="remove" type="void" line="826">
                    <declaration name="tab" type="Entry[]" line="832"/>
                    <declaration name="index" type="int" line="833"/>
                    <scope line="836">
                        <scope line="837"/>
                    </scope>
                </method>
            </class>
            <javadoc line="854">
                Save the state of the LinkedHashMap to a stream (i.e., serialize it).
                  The objects will be written out in the order they are linked
                  in the list.                
            </javadoc>
            <method name="writeObject" type="void" line="861">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="862">
                    Write out the threshold, loadfactor, and any hidden stuff                    
                </comment>
                <comment line="865">
                    Write out number of buckets                    
                </comment>
                <comment line="868">
                    Write out size (number of Mappings)                    
                </comment>
                <comment line="871">
                    Write out keys and values (alternating)                    
                </comment>
                <scope line="872"/>
            </method>
            <javadoc line="878">
                Reconstitute the LinkedHashMap from a stream (i.e., deserialize it).                
            </javadoc>
            <method name="readObject" type="void" line="883">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="884">
                    Read in the threshold, loadfactor, and any hidden stuff                    
                </comment>
                <comment line="887">
                    Read in number of buckets and allocate the bucket array;                    
                </comment>
                <comment line="894">
                    Read in size (number of Mappings)                    
                </comment>
                <comment line="897">
                    Read the keys and values, and put the mappings in the LinkedHashMap                    
                </comment>
                <declaration name="numBuckets" type="int" line="888"/>
                <declaration name="size" type="int" line="895"/>
                <scope line="898">
                    <declaration name="key" type="Object" line="899"/>
                    <declaration name="value" type="Object" line="900"/>
                </scope>
            </method>
        </class>
    </source>