<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.hat.internal.util">
        <import package="java.util"/>
        <class name="ArraySorter" line="36">
            <comment line="82">
                Sorts arr between from and to, inclusive.  This is a quick, off-the-top-
                 of-my-head quicksort:  I haven&apos;t put any thought into optimizing it.
                 I _did_ put thought into making sure it&apos;s safe (it will always
                 terminate).  Worst-case it&apos;s O(n^2), but it will usually run in
                 in O(n log n).  It&apos;s well-behaved if the list is already sorted,
                 or nearly so.                
            </comment>
            <javadoc line="36">
                A singleton utility class that sorts an array of objects.
                  &lt;p&gt;
                  Use:
                  &lt;pre&gt;
                  Stuff[] arr = ...;
                  ArraySorter.sort(arr, new Comparer() {
                  public int compare(Object lhs, Object rhs) {
                  return ((String) lhs).compareTo((String) rhs);
                  }
                  });
                  &lt;/pre&gt;                
                <author>
                    Bill Foote                    
                </author>
            </javadoc>
            <javadoc line="55">
                Sort the given array, using c for comparison                
            </javadoc>
            <method name="sort" type="void" line="58">
                <params>
                    <param name="arr" type="Object[]"/>
                    <param name="c" type="Comparer"/>
                </params>
            </method>
            <javadoc line="63">
                Sort an array of strings, using String.compareTo()                
            </javadoc>
            <method name="sortArrayOfStrings" type="void" line="66">
                <params>
                    <param name="arr" type="Object[]"/>
                </params>
                <anonymous_class line="67">
                    <method name="compare" type="int" line="68">
                        <params>
                            <param name="lhs" type="Object"/>
                            <param name="rhs" type="Object"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="swap" type="void" line="75">
                <params>
                    <param name="arr" type="Object[]"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="tmp" type="Object" line="76"/>
            </method>
            <method name="quickSort" type="void" line="89">
                <params>
                    <param name="arr" type="Object[]"/>
                    <param name="c" type="Comparer"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <comment line="96">
                    Simple-minded, but reasonable                    
                </comment>
                <comment line="100">
                    We now move low and high toward each other, maintaining the
                     invariants:
                          arr[i] &lt;= pivot    for all i &lt; low
                          arr[i] &gt; pivot     for all i &gt; high
                     As long as these invariants hold, and every iteration makes
                     progress, we are safe.                    
                </comment>
                <comment line="108">
                    arr[low] &lt;= pivot                    
                </comment>
                <comment line="116">
                    arr[high] &gt; pivot:                    
                </comment>
                <comment line="127">
                    At this point, low is never == high, BTW                    
                </comment>
                <comment line="138">
                    At this point, low == high+1
                     Now we just need to sort from from..highestBelowPivot
                     and from high+1..to                    
                </comment>
                <comment line="142">
                    pivot == pivot, so ensure algorithm terminates                    
                </comment>
                <declaration name="mid" type="int" line="92"/>
                <declaration name="pivot" type="Object" line="95"/>
                <declaration name="highestBelowPivot" type="int" line="96"/>
                <declaration name="low" type="int" line="97"/>
                <declaration name="high" type="int" line="98"/>
                <scope line="105">
                    <declaration name="cmp" type="int" line="106"/>
                    <scope line="107">
                        <scope line="108"/>
                    </scope>
                    <scope line="112">
                        <declaration name="c2" type="int" line="113"/>
                        <scope line="114">
                            <scope line="117">
                                <scope line="119"/>
                            </scope>
                            <scope line="122"/>
                        </scope>
                        <scope line="127">
                            <scope line="129"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="140"/>
            </method>
        </class>
    </source>