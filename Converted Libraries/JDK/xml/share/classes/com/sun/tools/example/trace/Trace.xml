<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.example.trace">
        <import package="com.sun.jdi.VirtualMachine"/>
        <import package="com.sun.jdi.Bootstrap"/>
        <import package="com.sun.jdi.connect"/>
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="java.io.PrintWriter"/>
        <import package="java.io.FileWriter"/>
        <import package="java.io.IOException"/>
        <class name="Trace" line="10">
            <javadoc line="10">
                This program traces the execution of another program.
                  See &quot;java Trace -help&quot;.
                  It is a simple example of the use of the Java Debug Interface.                
                <author>
                    Robert Field                    
                </author>
            </javadoc>
            <declaration name="vm" type="VirtualMachine" line="17"/>
            <declaration name="errThread" type="Thread" line="18"/>
            <declaration name="outThread" type="Thread" line="19"/>
            <declaration name="debugTraceMode" type="int" line="20"/>
            <declaration name="watchFields" type="boolean" line="21"/>
            <declaration name="excludes" type="String[]" line="22"/>
            <javadoc line="23">
                main                
            </javadoc>
            <method name="main" type="void" line="26">
                <params>
                    <param name="args" type="String[]"/>
                </params>
            </method>
            <javadoc line="29">
                Parse the command line arguments.
                  Launch target VM.
                  Generate the trace.                
            </javadoc>
            <method name="Trace" type="constructor" line="34">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="writer" type="PrintWriter" line="35"/>
                <declaration name="inx" type="int" line="36"/>
                <scope line="37">
                    <declaration name="arg" type="String" line="38"/>
                    <scope line="39"/>
                    <scope line="42">
                        <scope line="43"/>
                        <scope line="46"/>
                    </scope>
                    <scope line="51"/>
                    <scope line="54"/>
                    <scope line="57"/>
                    <scope line="60"/>
                    <scope line="64"/>
                </scope>
                <scope line="70"/>
                <declaration name="sb" type="StringBuffer" line="75"/>
                <scope line="77"/>
            </method>
            <javadoc line="84">
                Generate the trace.
                  Enable events, start thread to display events,
                  start threads to forward remote error and output streams,
                  resume the remote VM, wait for the final event, and shutdown.                
            </javadoc>
            <method name="generateTrace" type="void" line="90">
                <params>
                    <param name="writer" type="PrintWriter"/>
                </params>
                <declaration name="eventThread" type="EventThread" line="92"/>
                <scope line="97"/>
                <scope line="102"/>
            </method>
            <javadoc line="106">
                Launch target VM.
                  Forward target&apos;s output and error.                
            </javadoc>
            <method name="launchTarget" type="VirtualMachine" line="110">
                <params>
                    <param name="mainArgs" type="String"/>
                </params>
                <declaration name="connector" type="LaunchingConnector" line="111"/>
                <declaration name="arguments" type="Map&lt;String,Connector.Argument&gt;" line="112"/>
                <scope line="113"/>
                <scope line="116"/>
                <scope line="119"/>
                <scope line="122"/>
            </method>
            <method name="redirectOutput" type="void" line="126">
                <declaration name="process" type="Process" line="127"/>
            </method>
            <javadoc line="133">
                Find a com.sun.jdi.CommandLineLaunch connector                
            </javadoc>
            <method name="findLaunchingConnector" type="LaunchingConnector" line="136">
                <declaration name="connectors" type="List&lt;Connector&gt;" line="137"/>
                <scope line="138">
                    <scope line="139"/>
                </scope>
            </method>
            <javadoc line="145">
                Return the launching connector&apos;s arguments.                
            </javadoc>
            <method name="connectorArguments" type="Map<String,Connector.Argument>" line="148">
                <params>
                    <param name="connector" type="LaunchingConnector"/>
                    <param name="mainArgs" type="String"/>
                </params>
                <declaration name="arguments" type="Map&lt;String,Connector.Argument&gt;" line="149"/>
                <declaration name="mainArg" type="Connector.Argument" line="150"/>
                <scope line="151"/>
                <scope line="155">
                    <declaration name="optionArg" type="Connector.Argument" line="156"/>
                    <scope line="157"/>
                </scope>
            </method>
            <javadoc line="164">
                Print command line usage help                
            </javadoc>
            <method name="usage" type="void" line="167"/>
        </class>
    </source>