<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.example.trace">
        <import package="com.sun.jdi.VirtualMachine"/>
        <import package="com.sun.jdi.Bootstrap"/>
        <import package="com.sun.jdi.connect"/>
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="java.io.PrintWriter"/>
        <import package="java.io.FileWriter"/>
        <import package="java.io.IOException"/>
        <class name="Trace" line="39">
            <comment line="49">
                Running remote VM                
            </comment>
            <comment line="52">
                Thread transferring remote error stream to our error stream                
            </comment>
            <comment line="55">
                Thread transferring remote output stream to our output stream                
            </comment>
            <comment line="58">
                Mode for tracing the Trace program (default= 0 off)                
            </comment>
            <comment line="61">
                Do we want to watch assignments to fields                
            </comment>
            <comment line="64">
                Class patterns for which we don&apos;t want events                
            </comment>
            <javadoc line="39">
                This program traces the execution of another program.
                  See &quot;java Trace -help&quot;.
                  It is a simple example of the use of the Java Debug Interface.                
                <author>
                    Robert Field                    
                </author>
            </javadoc>
            <declaration name="vm" type="VirtualMachine" line="49"/>
            <declaration name="errThread" type="Thread" line="52"/>
            <declaration name="outThread" type="Thread" line="55"/>
            <declaration name="debugTraceMode" type="int" line="58"/>
            <declaration name="watchFields" type="boolean" line="61"/>
            <declaration name="excludes" type="String[]" line="64"/>
            <javadoc line="67">
                main                
            </javadoc>
            <method name="main" type="void" line="70">
                <params>
                    <param name="args" type="String[]"/>
                </params>
            </method>
            <javadoc line="74">
                Parse the command line arguments.
                  Launch target VM.
                  Generate the trace.                
            </javadoc>
            <method name="Trace" type="constructor" line="79">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="writer" type="PrintWriter" line="80"/>
                <declaration name="inx" type="int" line="81"/>
                <scope line="82">
                    <declaration name="arg" type="String" line="83"/>
                    <scope line="84"/>
                    <scope line="87">
                        <scope line="88"/>
                        <scope line="90"/>
                    </scope>
                    <scope line="95"/>
                    <scope line="97"/>
                    <scope line="99"/>
                    <scope line="101"/>
                    <scope line="104"/>
                </scope>
                <scope line="110"/>
                <declaration name="sb" type="StringBuffer" line="115"/>
                <scope line="117"/>
            </method>
            <javadoc line="126">
                Generate the trace.
                  Enable events, start thread to display events,
                  start threads to forward remote error and output streams,
                  resume the remote VM, wait for the final event, and shutdown.                
            </javadoc>
            <method name="generateTrace" type="void" line="132">
                <params>
                    <param name="writer" type="PrintWriter"/>
                </params>
                <comment line="140">
                    Shutdown begins when event thread terminates                    
                </comment>
                <comment line="143">
                    Make sure output is forwarded                    
                </comment>
                <comment line="144">
                    before we exit                    
                </comment>
                <comment line="146">
                    we don&apos;t interrupt                    
                </comment>
                <declaration name="eventThread" type="EventThread" line="134"/>
                <scope line="141"/>
                <scope line="145"/>
            </method>
            <javadoc line="151">
                Launch target VM.
                  Forward target&apos;s output and error.                
            </javadoc>
            <method name="launchTarget" type="VirtualMachine" line="155">
                <params>
                    <param name="mainArgs" type="String"/>
                </params>
                <declaration name="connector" type="LaunchingConnector" line="156"/>
                <declaration name="arguments" type="Map&lt;String,Connector.Argument&gt;" line="157"/>
                <scope line="159"/>
                <scope line="161"/>
                <scope line="163"/>
                <scope line="165"/>
            </method>
            <method name="redirectOutput" type="void" line="171">
                <comment line="174">
                    Copy target&apos;s output and error to our output and error.                    
                </comment>
                <declaration name="process" type="Process" line="172"/>
            </method>
            <javadoc line="185">
                Find a com.sun.jdi.CommandLineLaunch connector                
            </javadoc>
            <method name="findLaunchingConnector" type="LaunchingConnector" line="188">
                <declaration name="connectors" type="List&lt;Connector&gt;" line="189"/>
                <scope line="190">
                    <scope line="191"/>
                </scope>
            </method>
            <javadoc line="198">
                Return the launching connector&apos;s arguments.                
            </javadoc>
            <method name="connectorArguments" type="Map<String,Connector.Argument>" line="201">
                <params>
                    <param name="connector" type="LaunchingConnector"/>
                    <param name="mainArgs" type="String"/>
                </params>
                <comment line="211">
                    We need a VM that supports watchpoints                    
                </comment>
                <declaration name="arguments" type="Map&lt;String,Connector.Argument&gt;" line="202"/>
                <declaration name="mainArg" type="Connector.Argument" line="203"/>
                <scope line="205"/>
                <scope line="210">
                    <declaration name="optionArg" type="Connector.Argument" line="212"/>
                    <scope line="214"/>
                </scope>
            </method>
            <javadoc line="222">
                Print command line usage help                
            </javadoc>
            <method name="usage" type="void" line="225"/>
        </class>
    </source>