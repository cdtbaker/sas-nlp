<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.example.debug.gui">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="com.sun.jdi"/>
        <import package="com.sun.tools.example.debug.event"/>
        <import package="com.sun.tools.example.debug.bdi"/>
        <class name="ContextManager" line="35">
            <comment line="65">
                Program execution defaults.                
            </comment>
            <comment line="67">
                ### Should there be change listeners for these?
                ### They would be needed if we expected a dialog to be
                ### synchronized with command input while it was open.                
            </comment>
            <comment line="105">
                Miscellaneous debugger session preferences.                
            </comment>
            <comment line="116">
                Thread focus.                
            </comment>
            <comment line="140">
                If a view is displaying the current thread, it may
                 choose to indicate which frame is current in the
                 sense of the command-line UI.  It may also &quot;warp&quot; the
                 selection to that frame when changed by an &apos;up&apos; or &apos;down&apos;
                 command. Hence, a notifier is provided.                
            </comment>
            <comment line="156">
                ### Used in StackTraceTool.                
            </comment>
            <comment line="241">
                ### These notifiers are fired only in response to USER-INITIATED changes
                ### to the current thread and current frame.  When the current thread is set automatically
                ### after a breakpoint hit or step completion, no event is generated.  Instead,
                ### interested parties are expected to listen for the BreakpointHit and StepCompleted
                ### events.  This convention is unclean, and I believe that it reflects a defect in
                ### in the current architecture.  Unfortunately, however, we cannot guarantee the
                ### order in which various listeners receive a given event, and the handlers for
                ### the very same events that cause automatic changes to the current thread may also
                ### need to know the current thread.                
            </comment>
            <declaration name="classManager" type="ClassManager" line="37"/>
            <declaration name="runtime" type="ExecutionManager" line="38"/>
            <declaration name="mainClassName" type="String" line="40"/>
            <declaration name="vmArguments" type="String" line="41"/>
            <declaration name="commandArguments" type="String" line="42"/>
            <declaration name="remotePort" type="String" line="43"/>
            <declaration name="currentThread" type="ThreadReference" line="45"/>
            <declaration name="verbose" type="boolean" line="47"/>
            <declaration name="contextListeners" type="ArrayList&lt;ContextListener&gt;" line="49"/>
            <method name="ContextManager" type="constructor" line="51">
                <params>
                    <param name="env" type="Environment"/>
                </params>
                <declaration name="listener" type="ContextManagerListener" line="59"/>
            </method>
            <method name="getMainClassName" type="String" line="70"/>
            <method name="setMainClassName" type="void" line="74">
                <params>
                    <param name="mainClassName" type="String"/>
                </params>
            </method>
            <method name="getVmArguments" type="String" line="78"/>
            <method name="setVmArguments" type="void" line="82">
                <params>
                    <param name="vmArguments" type="String"/>
                </params>
            </method>
            <method name="getProgramArguments" type="String" line="86"/>
            <method name="setProgramArguments" type="void" line="90">
                <params>
                    <param name="commandArguments" type="String"/>
                </params>
            </method>
            <method name="getRemotePort" type="String" line="94"/>
            <method name="setRemotePort" type="void" line="98">
                <params>
                    <param name="remotePort" type="String"/>
                </params>
            </method>
            <method name="getVerboseFlag" type="boolean" line="106"/>
            <method name="setVerboseFlag" type="void" line="110">
                <params>
                    <param name="verbose" type="boolean"/>
                </params>
            </method>
            <method name="getCurrentThread" type="ThreadReference" line="117"/>
            <method name="setCurrentThread" type="void" line="121">
                <params>
                    <param name="t" type="ThreadReference"/>
                </params>
                <scope line="122"/>
            </method>
            <method name="setCurrentThreadInvalidate" type="void" line="128">
                <params>
                    <param name="t" type="ThreadReference"/>
                </params>
            </method>
            <method name="invalidateCurrentThread" type="void" line="134"/>
            <javadoc line="145">
                public int getCurrentFrameIndex() {
                  return getCurrentFrameIndex(currentThreadInfo);
                  }                
            </javadoc>
            <method name="getCurrentFrameIndex" type="int" line="151">
                <params>
                    <param name="t" type="ThreadReference"/>
                </params>
            </method>
            <method name="getCurrentFrameIndex" type="int" line="156">
                <params>
                    <param name="tinfo" type="ThreadInfo"/>
                </params>
                <scope line="157"/>
                <declaration name="currentFrame" type="Integer" line="160"/>
                <scope line="161"/>
                <scope line="163"/>
            </method>
            <method name="moveCurrentFrameIndex" type="int" line="168">
                <params>
                    <param name="t" type="ThreadReference"/>
                    <param name="count" type="int"/>
                </params>
            </method>
            <method name="setCurrentFrameIndex" type="int" line="172">
                <params>
                    <param name="t" type="ThreadReference"/>
                    <param name="newIndex" type="int"/>
                </params>
            </method>
            <method name="setCurrentFrameIndex" type="int" line="176">
                <params>
                    <param name="newIndex" type="int"/>
                </params>
                <scope line="177"/>
                <scope line="179"/>
            </method>
            <method name="setCurrentFrameIndex" type="int" line="184">
                <params>
                    <param name="t" type="ThreadReference"/>
                    <param name="x" type="int"/>
                    <param name="relative" type="boolean"/>
                </params>
                <comment line="199">
                    don&apos;t recurse                    
                </comment>
                <declaration name="sameThread" type="boolean" line="185"/>
                <declaration name="tinfo" type="ThreadInfo" line="186"/>
                <scope line="187"/>
                <declaration name="maxIndex" type="int" line="190"/>
                <declaration name="oldIndex" type="int" line="191"/>
                <declaration name="newIndex" type="int" line="192"/>
                <scope line="193"/>
                <scope line="195"/>
                <scope line="198"/>
            </method>
            <method name="setCurrentFrameIndex" type="void" line="204">
                <params>
                    <param name="tinfo" type="ThreadInfo"/>
                    <param name="index" type="int"/>
                </params>
                <comment line="207">
                    ### In fact, the value may not have changed at this point.
                    ### We need to signal that the user attempted to change it,
                    ### however, so that the selection can be &quot;warped&quot; to the
                    ### current location.                    
                </comment>
            </method>
            <method name="getCurrentFrame" type="StackFrame" line="213"/>
            <method name="getCurrentFrame" type="StackFrame" line="217">
                <params>
                    <param name="t" type="ThreadReference"/>
                </params>
            </method>
            <method name="getCurrentFrame" type="StackFrame" line="221">
                <params>
                    <param name="tinfo" type="ThreadInfo"/>
                </params>
                <comment line="225">
                    It is possible, though unlikely, that the VM was interrupted
                     before the thread created its Java stack.                    
                </comment>
                <declaration name="index" type="int" line="222"/>
                <scope line="223"/>
                <scope line="227"/>
            </method>
            <method name="addContextListener" type="void" line="232">
                <params>
                    <param name="cl" type="ContextListener"/>
                </params>
            </method>
            <method name="removeContextListener" type="void" line="236">
                <params>
                    <param name="cl" type="ContextListener"/>
                </params>
            </method>
            <method name="notifyCurrentThreadChanged" type="void" line="250">
                <params>
                    <param name="t" type="ThreadReference"/>
                </params>
                <declaration name="tinfo" type="ThreadInfo" line="251"/>
                <declaration name="index" type="int" line="252"/>
                <scope line="253"/>
            </method>
            <method name="notifyCurrentFrameChanged" type="void" line="260">
                <params>
                    <param name="t" type="ThreadReference"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="notifyCurrentFrameChanged" type="void" line="266">
                <params>
                    <param name="tinfo" type="ThreadInfo"/>
                    <param name="index" type="int"/>
                    <param name="invalidate" type="boolean"/>
                </params>
                <declaration name="l" type="ArrayList&lt;ContextListener&gt;" line="267"/>
                <declaration name="evt" type="CurrentFrameChangedEvent" line="268"/>
                <scope line="270"/>
            </method>
            <class name="ContextManagerListener" line="275">
                <extends class="JDIAdapter"/>
                <comment line="279">
                    SessionListener                    
                </comment>
                <comment line="296">
                    JDIListener                    
                </comment>
                <implements interface="SessionListener"/>
                <implements interface="JDIListener"/>
                <method name="sessionStart" type="void" line="281">
                    <params>
                        <param name="e" type="EventObject"/>
                    </params>
                </method>
                <method name="sessionInterrupt" type="void" line="286">
                    <params>
                        <param name="e" type="EventObject"/>
                    </params>
                </method>
                <method name="sessionContinue" type="void" line="291">
                    <params>
                        <param name="e" type="EventObject"/>
                    </params>
                </method>
                <method name="locationTrigger" type="void" line="298">
                    <params>
                        <param name="e" type="LocationTriggerEventSet"/>
                    </params>
                </method>
                <method name="exception" type="void" line="303">
                    <params>
                        <param name="e" type="ExceptionEventSet"/>
                    </params>
                </method>
                <method name="vmDisconnect" type="void" line="308">
                    <params>
                        <param name="e" type="VMDisconnectEventSet"/>
                    </params>
                </method>
            </class>
            <javadoc line="315">
                Add a -classpath argument to the arguments passed to the exec&apos;ed
                  VM with the contents of CLASSPATH environment variable,
                  if -classpath was not already specified.                
                <param>
                    javaArgs the arguments to the VM being exec'd that
                      potentially has a user specified -classpath argument.                    
                </param>
                <return>
                    a javaArgs whose -classpath option has been added                    
                </return>
            </javadoc>
            <method name="processClasspathDefaults" type="String" line="325">
                <params>
                    <param name="javaArgs" type="String"/>
                </params>
                <scope line="326">
                    <declaration name="munged" type="StringBuffer" line="327"/>
                    <declaration name="classpath" type="SearchPath" line="328"/>
                    <scope line="329">
                        <declaration name="envcp" type="String" line="330"/>
                        <scope line="331"/>
                    </scope>
                    <scope line="334"/>
                </scope>
                <scope line="338"/>
            </method>
            <method name="appendPath" type="String" line="343">
                <params>
                    <param name="path1" type="String"/>
                    <param name="path2" type="String"/>
                </params>
                <scope line="344"/>
                <scope line="346"/>
                <scope line="348"/>
            </method>
        </class>
    </source>