<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.jdi"/>
        <import package="java.util"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <class name="PacketStream" line="32">
            <declaration name="vm" type="VirtualMachineImpl" line="33"/>
            <declaration name="inCursor" type="int" line="34"/>
            <declaration name="pkt" type="Packet" line="35"/>
            <declaration name="dataStream" type="ByteArrayOutputStream" line="36"/>
            <declaration name="isCommitted" type="boolean" line="37"/>
            <method name="PacketStream" type="constructor" line="39">
                <params>
                    <param name="vm" type="VirtualMachineImpl"/>
                    <param name="cmdSet" type="int"/>
                    <param name="cmd" type="int"/>
                </params>
            </method>
            <method name="PacketStream" type="constructor" line="46">
                <params>
                    <param name="vm" type="VirtualMachineImpl"/>
                    <param name="pkt" type="Packet"/>
                </params>
                <comment line="50">
                                        
                </comment>
            </method>
            <method name="id" type="int" line="52"/>
            <method name="send" type="void" line="56">
                <scope line="57"/>
            </method>
            <method name="waitForReply" type="void" line="64">
                <scope line="65"/>
                <scope line="71"/>
            </method>
            <method name="writeBoolean" type="void" line="76">
                <params>
                    <param name="data" type="boolean"/>
                </params>
                <scope line="77"/>
                <scope line="79"/>
            </method>
            <method name="writeByte" type="void" line="84">
                <params>
                    <param name="data" type="byte"/>
                </params>
            </method>
            <method name="writeChar" type="void" line="88">
                <params>
                    <param name="data" type="char"/>
                </params>
            </method>
            <method name="writeShort" type="void" line="93">
                <params>
                    <param name="data" type="short"/>
                </params>
            </method>
            <method name="writeInt" type="void" line="98">
                <params>
                    <param name="data" type="int"/>
                </params>
            </method>
            <method name="writeLong" type="void" line="105">
                <params>
                    <param name="data" type="long"/>
                </params>
            </method>
            <method name="writeFloat" type="void" line="117">
                <params>
                    <param name="data" type="float"/>
                </params>
            </method>
            <method name="writeDouble" type="void" line="121">
                <params>
                    <param name="data" type="double"/>
                </params>
            </method>
            <method name="writeID" type="void" line="125">
                <params>
                    <param name="size" type="int"/>
                    <param name="data" type="long"/>
                </params>
            </method>
            <method name="writeNullObjectRef" type="void" line="141"/>
            <method name="writeObjectRef" type="void" line="145">
                <params>
                    <param name="data" type="long"/>
                </params>
            </method>
            <method name="writeClassRef" type="void" line="149">
                <params>
                    <param name="data" type="long"/>
                </params>
            </method>
            <method name="writeMethodRef" type="void" line="153">
                <params>
                    <param name="data" type="long"/>
                </params>
            </method>
            <method name="writeFieldRef" type="void" line="157">
                <params>
                    <param name="data" type="long"/>
                </params>
            </method>
            <method name="writeFrameRef" type="void" line="161">
                <params>
                    <param name="data" type="long"/>
                </params>
            </method>
            <method name="writeByteArray" type="void" line="165">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="writeString" type="void" line="169">
                <params>
                    <param name="string" type="String"/>
                </params>
                <scope line="170">
                    <declaration name="stringBytes" type="byte[]" line="171"/>
                </scope>
                <scope line="174"/>
            </method>
            <method name="writeLocation" type="void" line="179">
                <params>
                    <param name="location" type="Location"/>
                </params>
                <comment line="186">
                    It&apos;s possible to have executable code in an interface                    
                </comment>
                <declaration name="refType" type="ReferenceTypeImpl" line="180"/>
                <declaration name="tag" type="byte" line="181"/>
                <scope line="182"/>
                <scope line="184"/>
                <scope line="187"/>
            </method>
            <method name="writeValue" type="void" line="196">
                <params>
                    <param name="val" type="Value"/>
                </params>
                <comment line="200">
                    should never happen                    
                </comment>
                <scope line="197"/>
                <scope line="199"/>
            </method>
            <method name="writeValueChecked" type="void" line="205">
                <params>
                    <param name="val" type="Value"/>
                </params>
            </method>
            <method name="writeUntaggedValue" type="void" line="210">
                <params>
                    <param name="val" type="Value"/>
                </params>
                <comment line="214">
                    should never happen                    
                </comment>
                <scope line="211"/>
                <scope line="213"/>
            </method>
            <method name="writeUntaggedValueChecked" type="void" line="219">
                <params>
                    <param name="val" type="Value"/>
                </params>
                <declaration name="tag" type="byte" line="220"/>
                <scope line="221">
                    <scope line="222"/>
                    <scope line="224">
                        <scope line="225"/>
                    </scope>
                </scope>
                <scope line="230"/>
            </method>
            <javadoc line="293">
                Read byte represented as one bytes.                
            </javadoc>
            <method name="readByte" type="byte" line="296">
                <declaration name="ret" type="byte" line="297"/>
            </method>
            <javadoc line="302">
                Read boolean represented as one byte.                
            </javadoc>
            <method name="readBoolean" type="boolean" line="305">
                <declaration name="ret" type="byte" line="306"/>
            </method>
            <javadoc line="310">
                Read char represented as two bytes.                
            </javadoc>
            <method name="readChar" type="char" line="313">
                <declaration name="b1" type="int" line="314"/>
            </method>
            <javadoc line="322">
                Read short represented as two bytes.                
            </javadoc>
            <method name="readShort" type="short" line="325">
                <declaration name="b1" type="int" line="326"/>
            </method>
            <javadoc line="334">
                Read int represented as four bytes.                
            </javadoc>
            <method name="readInt" type="int" line="337">
                <declaration name="b1" type="int" line="338"/>
            </method>
            <javadoc line="348">
                Read long represented as eight bytes.                
            </javadoc>
            <method name="readLong" type="long" line="351">
                <declaration name="b1" type="long" line="352"/>
                <declaration name="b5" type="long" line="353"/>
            </method>
            <javadoc line="369">
                Read float represented as four bytes.                
            </javadoc>
            <method name="readFloat" type="float" line="372"/>
            <javadoc line="376">
                Read double represented as eight bytes.                
            </javadoc>
            <method name="readDouble" type="double" line="379"/>
            <javadoc line="383">
                Read string represented as four byte length followed by
                  characters of the string.                
            </javadoc>
            <method name="readString" type="String" line="387">
                <declaration name="ret" type="String" line="388"/>
                <declaration name="len" type="int" line="389"/>
                <scope line="391"/>
                <scope line="393"/>
            </method>
            <method name="readID" type="long" line="401">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="414">
                Read object represented as vm specific byte sequence.                
            </javadoc>
            <method name="readObjectRef" type="long" line="417"/>
            <method name="readClassRef" type="long" line="421"/>
            <method name="readTaggedObjectReference" type="ObjectReferenceImpl" line="425">
                <declaration name="typeKey" type="byte" line="426"/>
            </method>
            <method name="readObjectReference" type="ObjectReferenceImpl" line="430"/>
            <method name="readStringReference" type="StringReferenceImpl" line="434">
                <declaration name="ref" type="long" line="435"/>
            </method>
            <method name="readArrayReference" type="ArrayReferenceImpl" line="439">
                <declaration name="ref" type="long" line="440"/>
            </method>
            <method name="readThreadReference" type="ThreadReferenceImpl" line="444">
                <declaration name="ref" type="long" line="445"/>
            </method>
            <method name="readThreadGroupReference" type="ThreadGroupReferenceImpl" line="449">
                <declaration name="ref" type="long" line="450"/>
            </method>
            <method name="readClassLoaderReference" type="ClassLoaderReferenceImpl" line="454">
                <declaration name="ref" type="long" line="455"/>
            </method>
            <method name="readClassObjectReference" type="ClassObjectReferenceImpl" line="459">
                <declaration name="ref" type="long" line="460"/>
            </method>
            <method name="readReferenceType" type="ReferenceTypeImpl" line="464">
                <declaration name="tag" type="byte" line="465"/>
                <declaration name="ref" type="long" line="466"/>
            </method>
            <javadoc line="470">
                Read method reference represented as vm specific byte sequence.                
            </javadoc>
            <method name="readMethodRef" type="long" line="473"/>
            <javadoc line="477">
                Read field reference represented as vm specific byte sequence.                
            </javadoc>
            <method name="readFieldRef" type="long" line="480"/>
            <javadoc line="484">
                Read field represented as vm specific byte sequence.                
            </javadoc>
            <method name="readField" type="Field" line="487">
                <declaration name="refType" type="ReferenceTypeImpl" line="488"/>
                <declaration name="fieldRef" type="long" line="489"/>
            </method>
            <javadoc line="493">
                Read frame represented as vm specific byte sequence.                
            </javadoc>
            <method name="readFrameRef" type="long" line="496"/>
            <javadoc line="500">
                Read a value, first byte describes type of value to read.                
            </javadoc>
            <method name="readValue" type="ValueImpl" line="503">
                <declaration name="typeKey" type="byte" line="504"/>
            </method>
            <method name="readUntaggedValue" type="ValueImpl" line="508">
                <params>
                    <param name="typeKey" type="byte"/>
                </params>
                <declaration name="val" type="ValueImpl" line="509"/>
                <scope line="511"/>
                <scope line="513"/>
            </method>
            <javadoc line="555">
                Read location represented as vm specific byte sequence.                
            </javadoc>
            <method name="readLocation" type="Location" line="558">
                <comment line="565">
                                        
                </comment>
                <comment line="569">
                                        
                </comment>
                <declaration name="tag" type="byte" line="559"/>
                <declaration name="classRef" type="long" line="560"/>
                <declaration name="methodRef" type="long" line="561"/>
                <declaration name="codeIndex" type="long" line="562"/>
                <scope line="563">
                    <declaration name="refType" type="ReferenceTypeImpl" line="565"/>
                </scope>
                <scope line="567"/>
            </method>
            <method name="readByteArray" type="byte[]" line="573">
                <params>
                    <param name="length" type="int"/>
                </params>
                <declaration name="array" type="byte[]" line="574"/>
            </method>
            <method name="readArrayRegion" type="List<Value>" line="580">
                <comment line="587">
                    Each object comes back with a type key which might
                     identify a more specific type than the type key we
                     passed in, so we use it in the decodeValue call.
                     (For primitives, we just use the original one)                    
                </comment>
                <declaration name="typeKey" type="byte" line="581"/>
                <declaration name="length" type="int" line="582"/>
                <declaration name="list" type="List&lt;Value&gt;" line="583"/>
                <declaration name="gettingObjects" type="boolean" line="584"/>
                <scope line="585">
                    <scope line="592"/>
                    <declaration name="value" type="Value" line="595"/>
                </scope>
            </method>
            <method name="writeArrayRegion" type="void" line="602">
                <params>
                    <param name="srcValues" type="List<Value>"/>
                </params>
                <scope line="604">
                    <declaration name="value" type="Value" line="605"/>
                </scope>
            </method>
            <method name="skipBytes" type="int" line="610">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="command" type="byte" line="615"/>
            <method name="isObjectTag" type="boolean" line="619">
                <params>
                    <param name="tag" type="byte"/>
                </params>
            </method>
        </class>
    </source>