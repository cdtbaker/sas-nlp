<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.hat.internal.model">
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="com.sun.tools.hat.internal.util.CompositeEnumeration"/>
        <import package="com.sun.tools.hat.internal.parser.ReadBuffer"/>
        <class name="JavaClass" line="40">
            <extends class="JavaHeapObject"/>
            <comment line="48">
                my id                
            </comment>
            <comment line="50">
                my name                
            </comment>
            <comment line="53">
                These are JavaObjectRef before resolve                
            </comment>
            <comment line="59">
                non-static fields                
            </comment>
            <comment line="61">
                static fields                
            </comment>
            <comment line="65">
                my subclasses                
            </comment>
            <comment line="68">
                my instances                
            </comment>
            <comment line="71">
                Who I belong to.  Set on resolve.                
            </comment>
            <comment line="74">
                Size of an instance, including VM overhead                
            </comment>
            <comment line="76">
                Total number of fields including inherited ones                
            </comment>
            <comment line="320">
                returns value of static field of given name                
            </comment>
            <comment line="446">
                package-privates below this point                
            </comment>
            <comment line="479">
                Internals only below this point                
            </comment>
            <javadoc line="40">
                @author      Bill Foote                
            </javadoc>
            <declaration name="id" type="long" line="48"/>
            <declaration name="name" type="String" line="50"/>
            <declaration name="superclass" type="JavaThing" line="53"/>
            <declaration name="loader" type="JavaThing" line="54"/>
            <declaration name="signers" type="JavaThing" line="55"/>
            <declaration name="protectionDomain" type="JavaThing" line="56"/>
            <declaration name="fields" type="JavaField[]" line="59"/>
            <declaration name="statics" type="JavaStatic[]" line="61"/>
            <declaration name="EMPTY_CLASS_ARRAY" type="JavaClass[]" line="63"/>
            <declaration name="subclasses" type="JavaClass[]" line="65"/>
            <declaration name="instances" type="Vector&lt;JavaHeapObject&gt;" line="68"/>
            <declaration name="mySnapshot" type="Snapshot" line="71"/>
            <declaration name="instanceSize" type="int" line="74"/>
            <declaration name="totalNumFields" type="int" line="76"/>
            <method name="JavaClass" type="constructor" line="82">
                <params>
                    <param name="id" type="long"/>
                    <param name="name" type="String"/>
                    <param name="superclassId" type="long"/>
                    <param name="loaderId" type="long"/>
                    <param name="signersId" type="long"/>
                    <param name="protDomainId" type="long"/>
                    <param name="fields" type="JavaField[]"/>
                    <param name="statics" type="JavaStatic[]"/>
                    <param name="instanceSize" type="int"/>
                </params>
            </method>
            <method name="JavaClass" type="constructor" line="97">
                <params>
                    <param name="name" type="String"/>
                    <param name="superclassId" type="long"/>
                    <param name="loaderId" type="long"/>
                    <param name="signersId" type="long"/>
                    <param name="protDomainId" type="long"/>
                    <param name="fields" type="JavaField[]"/>
                    <param name="statics" type="JavaStatic[]"/>
                    <param name="instanceSize" type="int"/>
                </params>
            </method>
            <method name="getClazz" type="JavaClass" line="102"/>
            <method name="getIdentifierSize" type="int" line="106"/>
            <method name="getMinimumObjectSize" type="int" line="110"/>
            <method name="resolve" type="void" line="114">
                <params>
                    <param name="snapshot" type="Snapshot"/>
                </params>
                <scope line="115"/>
                <scope line="120"/>
                <scope line="128"/>
            </method>
            <javadoc line="136">
                Resolve our superclass.  This might be called well before
                  all instances are available (like when reading deferred
                  instances in a 1.2 dump file :-)  Calling this is sufficient
                  to be able to explore this class&apos; fields.                
            </javadoc>
            <method name="resolveSuperclass" type="void" line="142">
                <params>
                    <param name="snapshot" type="Snapshot"/>
                </params>
                <comment line="144">
                    We must be java.lang.Object, so we have no superclass.                    
                </comment>
                <scope line="143"/>
                <scope line="145">
                    <scope line="148"/>
                    <scope line="150">
                        <scope line="151">
                            <declaration name="sc" type="JavaClass" line="152"/>
                        </scope>
                        <scope line="155"/>
                    </scope>
                </scope>
            </method>
            <method name="isString" type="boolean" line="163"/>
            <method name="isClassLoader" type="boolean" line="167"/>
            <javadoc line="171">
                Get a numbered field from this class                
            </javadoc>
            <method name="getField" type="JavaField" line="174">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="175"/>
            </method>
            <javadoc line="181">
                Get the total number of fields that are part of an instance of
                  this class.  That is, include superclasses.                
            </javadoc>
            <method name="getNumFieldsForInstance" type="int" line="185"/>
            <javadoc line="189">
                Get a numbered field from all the fields that are part of instance
                  of this class.  That is, include superclasses.                
            </javadoc>
            <method name="getFieldForInstance" type="JavaField" line="193">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="194">
                    <declaration name="sc" type="JavaClass" line="195"/>
                    <scope line="196"/>
                </scope>
            </method>
            <javadoc line="204">
                Get the class responsible for field i, where i is a field number that
                  could be passed into getFieldForInstance.                
                <see>
                    JavaClass.getFieldForInstance()                    
                </see>
            </javadoc>
            <method name="getClassForField" type="JavaClass" line="210">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="211">
                    <declaration name="sc" type="JavaClass" line="212"/>
                    <scope line="213"/>
                </scope>
            </method>
            <method name="getId" type="long" line="220"/>
            <method name="getName" type="String" line="224"/>
            <method name="isArray" type="boolean" line="228"/>
            <method name="getInstances" type="Enumeration" line="232">
                <params>
                    <param name="includeSubclasses" type="boolean"/>
                </params>
                <scope line="233">
                    <declaration name="res" type="Enumeration" line="234"/>
                    <scope line="235"/>
                </scope>
                <scope line="240"/>
            </method>
            <javadoc line="245">
                @return a count of the instances of this class                
            </javadoc>
            <method name="getInstancesCount" type="int" line="248">
                <params>
                    <param name="includeSubclasses" type="boolean"/>
                </params>
                <declaration name="result" type="int" line="249"/>
                <scope line="250">
                    <scope line="251"/>
                </scope>
            </method>
            <method name="getSubclasses" type="JavaClass[]" line="258"/>
            <javadoc line="262">
                This can only safely be called after resolve()                
            </javadoc>
            <method name="getSuperclass" type="JavaClass" line="265"/>
            <javadoc line="269">
                This can only safely be called after resolve()                
            </javadoc>
            <method name="getLoader" type="JavaThing" line="272"/>
            <javadoc line="276">
                This can only safely be called after resolve()                
            </javadoc>
            <method name="isBootstrap" type="boolean" line="279"/>
            <javadoc line="283">
                This can only safely be called after resolve()                
            </javadoc>
            <method name="getSigners" type="JavaThing" line="286"/>
            <javadoc line="290">
                This can only safely be called after resolve()                
            </javadoc>
            <method name="getProtectionDomain" type="JavaThing" line="293"/>
            <method name="getFields" type="JavaField[]" line="297"/>
            <javadoc line="301">
                Includes superclass fields                
            </javadoc>
            <method name="getFieldsForInstance" type="JavaField[]" line="304">
                <declaration name="v" type="Vector&lt;JavaField&gt;" line="305"/>
                <declaration name="result" type="JavaField[]" line="307"/>
                <scope line="308"/>
            </method>
            <method name="getStatics" type="JavaStatic[]" line="315"/>
            <method name="getStaticField" type="JavaThing" line="320">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="321">
                    <declaration name="s" type="JavaStatic" line="322"/>
                    <scope line="323"/>
                </scope>
            </method>
            <method name="toString" type="String" line="330"/>
            <method name="compareTo" type="int" line="334">
                <params>
                    <param name="other" type="JavaThing"/>
                </params>
                <scope line="335"/>
            </method>
            <javadoc line="342">
                @return true iff a variable of type this is assignable from an instance
                  of other                
            </javadoc>
            <method name="isAssignableFrom" type="boolean" line="346">
                <params>
                    <param name="other" type="JavaClass"/>
                </params>
                <comment line="353">
                    Trivial tail recursion:  I have faith in javac.                    
                </comment>
                <scope line="347"/>
                <scope line="349"/>
                <scope line="351"/>
            </method>
            <javadoc line="357">
                Describe the reference that this thing has to target.  This will only
                  be called if target is in the array returned by getChildrenForRootset.                
            </javadoc>
            <method name="describeReferenceTo" type="String" line="361">
                <params>
                    <param name="target" type="JavaThing"/>
                    <param name="ss" type="Snapshot"/>
                </params>
                <scope line="362">
                    <declaration name="f" type="JavaField" line="363"/>
                    <scope line="364">
                        <declaration name="other" type="JavaThing" line="365"/>
                        <scope line="366"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="374">
                @return the size of an instance of this class.  Gives 0 for an array
                  type.                
            </javadoc>
            <method name="getInstanceSize" type="int" line="378"/>
            <javadoc line="383">
                @return The size of all instances of this class.  Correctly handles
                  arrays.                
            </javadoc>
            <method name="getTotalInstanceSize" type="long" line="387">
                <comment line="393">
                    array class and non-zero count, we have to                    
                </comment>
                <comment line="394">
                    get the size of each instance and sum it                    
                </comment>
                <declaration name="count" type="int" line="388"/>
                <scope line="389"/>
                <declaration name="result" type="long" line="395"/>
                <scope line="396">
                    <declaration name="t" type="JavaThing" line="397"/>
                </scope>
            </method>
            <javadoc line="403">
                @return the size of this object                
            </javadoc>
            <method name="getSize" type="int" line="406">
                <declaration name="cl" type="JavaClass" line="407"/>
                <scope line="408"/>
                <scope line="410"/>
            </method>
            <method name="visitReferencedObjects" type="void" line="415">
                <params>
                    <param name="v" type="JavaHeapObjectVisitor"/>
                </params>
                <declaration name="sc" type="JavaHeapObject" line="417"/>
                <declaration name="other" type="JavaThing" line="420"/>
                <scope line="422"/>
                <scope line="426"/>
                <scope line="430"/>
                <scope line="434">
                    <declaration name="f" type="JavaField" line="435"/>
                    <scope line="436">
                        <scope line="438"/>
                    </scope>
                </scope>
            </method>
            <method name="getReadBuffer" type="ReadBuffer" line="446"/>
            <method name="setNew" type="void" line="450">
                <params>
                    <param name="obj" type="JavaHeapObject"/>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <method name="isNew" type="boolean" line="454">
                <params>
                    <param name="obj" type="JavaHeapObject"/>
                </params>
            </method>
            <method name="getSiteTrace" type="StackTrace" line="458">
                <params>
                    <param name="obj" type="JavaHeapObject"/>
                </params>
            </method>
            <method name="addReferenceFromRoot" type="void" line="462">
                <params>
                    <param name="root" type="Root"/>
                    <param name="obj" type="JavaHeapObject"/>
                </params>
            </method>
            <method name="getRoot" type="Root" line="466">
                <params>
                    <param name="obj" type="JavaHeapObject"/>
                </params>
            </method>
            <method name="getSnapshot" type="Snapshot" line="470"/>
            <method name="addInstance" type="void" line="474">
                <params>
                    <param name="inst" type="JavaHeapObject"/>
                </params>
            </method>
            <method name="addFields" type="void" line="479">
                <params>
                    <param name="v" type="Vector<JavaField>"/>
                </params>
                <scope line="480"/>
                <scope line="483"/>
            </method>
            <method name="addSubclassInstances" type="void" line="488">
                <params>
                    <param name="v" type="Vector<JavaHeapObject>"/>
                </params>
                <scope line="489"/>
                <scope line="492"/>
            </method>
            <method name="addSubclass" type="void" line="497">
                <params>
                    <param name="sub" type="JavaClass"/>
                </params>
                <declaration name="newValue" type="JavaClass" line="498"/>
            </method>
        </class>
    </source>