<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.hat.internal.model">
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="com.sun.tools.hat.internal.util.CompositeEnumeration"/>
        <import package="com.sun.tools.hat.internal.parser.ReadBuffer"/>
        <class name="JavaClass" line="6">
            <extends class="JavaHeapObject"/>
            <javadoc line="6">
                @author      Bill Foote                
            </javadoc>
            <declaration name="id" type="long" line="10"/>
            <declaration name="name" type="String" line="11"/>
            <declaration name="superclass" type="JavaThing" line="12"/>
            <declaration name="loader" type="JavaThing" line="13"/>
            <declaration name="signers" type="JavaThing" line="14"/>
            <declaration name="protectionDomain" type="JavaThing" line="15"/>
            <declaration name="fields" type="JavaField[]" line="16"/>
            <declaration name="statics" type="JavaStatic[]" line="17"/>
            <declaration name="EMPTY_CLASS_ARRAY" type="JavaClass[]" line="18"/>
            <declaration name="subclasses" type="JavaClass[]" line="19"/>
            <declaration name="instances" type="Vector&lt;JavaHeapObject&gt;" line="20"/>
            <declaration name="mySnapshot" type="Snapshot" line="21"/>
            <declaration name="instanceSize" type="int" line="22"/>
            <declaration name="totalNumFields" type="int" line="23"/>
            <method name="JavaClass" type="constructor" line="24">
                <params>
                    <param name="id" type="long"/>
                    <param name="name" type="String"/>
                    <param name="superclassId" type="long"/>
                    <param name="loaderId" type="long"/>
                    <param name="signersId" type="long"/>
                    <param name="protDomainId" type="long"/>
                    <param name="fields" type="JavaField[]"/>
                    <param name="statics" type="JavaStatic[]"/>
                    <param name="instanceSize" type="int"/>
                </params>
            </method>
            <method name="JavaClass" type="constructor" line="35">
                <params>
                    <param name="name" type="String"/>
                    <param name="superclassId" type="long"/>
                    <param name="loaderId" type="long"/>
                    <param name="signersId" type="long"/>
                    <param name="protDomainId" type="long"/>
                    <param name="fields" type="JavaField[]"/>
                    <param name="statics" type="JavaStatic[]"/>
                    <param name="instanceSize" type="int"/>
                </params>
            </method>
            <method name="getClazz" type="JavaClass" line="38"/>
            <method name="getIdentifierSize" type="int" line="41"/>
            <method name="getMinimumObjectSize" type="int" line="44"/>
            <method name="resolve" type="void" line="47">
                <params>
                    <param name="snapshot" type="Snapshot"/>
                </params>
                <scope line="48"/>
                <scope line="53"/>
                <scope line="59"/>
            </method>
            <javadoc line="66">
                Resolve our superclass.  This might be called well before
                  all instances are available (like when reading deferred
                  instances in a 1.2 dump file :-)  Calling this is sufficient
                  to be able to explore this class&apos; fields.                
            </javadoc>
            <method name="resolveSuperclass" type="void" line="72">
                <params>
                    <param name="snapshot" type="Snapshot"/>
                </params>
                <scope line="73"/>
                <scope line="75">
                    <scope line="78"/>
                    <scope line="81">
                        <scope line="82">
                            <declaration name="sc" type="JavaClass" line="83"/>
                        </scope>
                        <scope line="87"/>
                    </scope>
                </scope>
            </method>
            <method name="isString" type="boolean" line="94"/>
            <method name="isClassLoader" type="boolean" line="97"/>
            <javadoc line="100">
                Get a numbered field from this class                
            </javadoc>
            <method name="getField" type="JavaField" line="103">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="104"/>
            </method>
            <javadoc line="109">
                Get the total number of fields that are part of an instance of
                  this class.  That is, include superclasses.                
            </javadoc>
            <method name="getNumFieldsForInstance" type="int" line="113"/>
            <javadoc line="116">
                Get a numbered field from all the fields that are part of instance
                  of this class.  That is, include superclasses.                
            </javadoc>
            <method name="getFieldForInstance" type="JavaField" line="120">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="121">
                    <declaration name="sc" type="JavaClass" line="122"/>
                    <scope line="123"/>
                </scope>
            </method>
            <javadoc line="130">
                Get the class responsible for field i, where i is a field number that
                  could be passed into getFieldForInstance.                
                <see>
                    JavaClass.getFieldForInstance()                    
                </see>
            </javadoc>
            <method name="getClassForField" type="JavaClass" line="135">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="136">
                    <declaration name="sc" type="JavaClass" line="137"/>
                    <scope line="138"/>
                </scope>
            </method>
            <method name="getId" type="long" line="144"/>
            <method name="getName" type="String" line="147"/>
            <method name="isArray" type="boolean" line="150"/>
            <method name="getInstances" type="Enumeration" line="153">
                <params>
                    <param name="includeSubclasses" type="boolean"/>
                </params>
                <scope line="154">
                    <declaration name="res" type="Enumeration" line="155"/>
                    <scope line="156"/>
                </scope>
                <scope line="161"/>
            </method>
            <javadoc line="165">
                @return a count of the instances of this class                
            </javadoc>
            <method name="getInstancesCount" type="int" line="168">
                <params>
                    <param name="includeSubclasses" type="boolean"/>
                </params>
                <declaration name="result" type="int" line="169"/>
                <scope line="170">
                    <scope line="171"/>
                </scope>
            </method>
            <method name="getSubclasses" type="JavaClass[]" line="177"/>
            <javadoc line="180">
                This can only safely be called after resolve()                
            </javadoc>
            <method name="getSuperclass" type="JavaClass" line="183"/>
            <javadoc line="186">
                This can only safely be called after resolve()                
            </javadoc>
            <method name="getLoader" type="JavaThing" line="189"/>
            <javadoc line="192">
                This can only safely be called after resolve()                
            </javadoc>
            <method name="isBootstrap" type="boolean" line="195"/>
            <javadoc line="198">
                This can only safely be called after resolve()                
            </javadoc>
            <method name="getSigners" type="JavaThing" line="201"/>
            <javadoc line="204">
                This can only safely be called after resolve()                
            </javadoc>
            <method name="getProtectionDomain" type="JavaThing" line="207"/>
            <method name="getFields" type="JavaField[]" line="210"/>
            <javadoc line="213">
                Includes superclass fields                
            </javadoc>
            <method name="getFieldsForInstance" type="JavaField[]" line="216">
                <declaration name="v" type="Vector&lt;JavaField&gt;" line="217"/>
                <declaration name="result" type="JavaField[]" line="219"/>
                <scope line="220"/>
            </method>
            <method name="getStatics" type="JavaStatic[]" line="225"/>
            <method name="getStaticField" type="JavaThing" line="228">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="229">
                    <declaration name="s" type="JavaStatic" line="230"/>
                    <scope line="231"/>
                </scope>
            </method>
            <method name="toString" type="String" line="237"/>
            <method name="compareTo" type="int" line="240">
                <params>
                    <param name="other" type="JavaThing"/>
                </params>
                <scope line="241"/>
            </method>
            <javadoc line="246">
                @return true iff a variable of type this is assignable from an instance
                  of other                
            </javadoc>
            <method name="isAssignableFrom" type="boolean" line="250">
                <params>
                    <param name="other" type="JavaClass"/>
                </params>
                <scope line="251"/>
                <scope line="254"/>
                <scope line="257"/>
            </method>
            <javadoc line="261">
                Describe the reference that this thing has to target.  This will only
                  be called if target is in the array returned by getChildrenForRootset.                
            </javadoc>
            <method name="describeReferenceTo" type="String" line="265">
                <params>
                    <param name="target" type="JavaThing"/>
                    <param name="ss" type="Snapshot"/>
                </params>
                <scope line="266">
                    <declaration name="f" type="JavaField" line="267"/>
                    <scope line="268">
                        <declaration name="other" type="JavaThing" line="269"/>
                        <scope line="270"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="277">
                @return the size of an instance of this class.  Gives 0 for an array
                  type.                
            </javadoc>
            <method name="getInstanceSize" type="int" line="281"/>
            <javadoc line="284">
                @return The size of all instances of this class.  Correctly handles
                  arrays.                
            </javadoc>
            <method name="getTotalInstanceSize" type="long" line="288">
                <declaration name="count" type="int" line="289"/>
                <scope line="290"/>
                <declaration name="result" type="long" line="293"/>
                <scope line="294">
                    <declaration name="t" type="JavaThing" line="295"/>
                </scope>
            </method>
            <javadoc line="300">
                @return the size of this object                
            </javadoc>
            <method name="getSize" type="int" line="303">
                <declaration name="cl" type="JavaClass" line="304"/>
                <scope line="305"/>
                <scope line="308"/>
            </method>
            <method name="visitReferencedObjects" type="void" line="312">
                <params>
                    <param name="v" type="JavaHeapObjectVisitor"/>
                </params>
                <declaration name="sc" type="JavaHeapObject" line="314"/>
                <declaration name="other" type="JavaThing" line="316"/>
                <scope line="318"/>
                <scope line="322"/>
                <scope line="326"/>
                <scope line="329">
                    <declaration name="f" type="JavaField" line="330"/>
                    <scope line="331">
                        <scope line="333"/>
                    </scope>
                </scope>
            </method>
            <method name="getReadBuffer" type="ReadBuffer" line="339"/>
            <method name="setNew" type="void" line="342">
                <params>
                    <param name="obj" type="JavaHeapObject"/>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <method name="isNew" type="boolean" line="345">
                <params>
                    <param name="obj" type="JavaHeapObject"/>
                </params>
            </method>
            <method name="getSiteTrace" type="StackTrace" line="348">
                <params>
                    <param name="obj" type="JavaHeapObject"/>
                </params>
            </method>
            <method name="addReferenceFromRoot" type="void" line="351">
                <params>
                    <param name="root" type="Root"/>
                    <param name="obj" type="JavaHeapObject"/>
                </params>
            </method>
            <method name="getRoot" type="Root" line="354">
                <params>
                    <param name="obj" type="JavaHeapObject"/>
                </params>
            </method>
            <method name="getSnapshot" type="Snapshot" line="357"/>
            <method name="addInstance" type="void" line="360">
                <params>
                    <param name="inst" type="JavaHeapObject"/>
                </params>
            </method>
            <method name="addFields" type="void" line="363">
                <params>
                    <param name="v" type="Vector<JavaField>"/>
                </params>
                <scope line="364"/>
                <scope line="367"/>
            </method>
            <method name="addSubclassInstances" type="void" line="371">
                <params>
                    <param name="v" type="Vector<JavaHeapObject>"/>
                </params>
                <scope line="372"/>
                <scope line="375"/>
            </method>
            <method name="addSubclass" type="void" line="379">
                <params>
                    <param name="sub" type="JavaClass"/>
                </params>
                <declaration name="newValue" type="JavaClass" line="380"/>
            </method>
        </class>
    </source>