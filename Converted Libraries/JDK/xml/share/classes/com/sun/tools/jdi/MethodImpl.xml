<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.jdi"/>
        <import package="java.util.List"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Comparator"/>
        <class name="MethodImpl" line="35">
            <extends class="TypeComponentImpl"/>
            <comment line="225">
                A container class for the return value to allow
                 proper type-checking.                
            </comment>
            <comment line="253">
                A container class for the argument to allow
                 proper type-checking.                
            </comment>
            <comment line="277">
                This is a var args method.  Thus, its last param is an
                 array. If the method has n params, then:
                 1.  If there are n args and the last is the same type as the type of
                     the last param, do nothing.  IE, a String[]
                     can be passed to a String...
                 2.  If there are &gt;= n arguments and for each arg whose number is &gt;= n,
                     the arg type is &apos;compatible&apos; with the component type of
                     the last param, then do
                     - create an array of the type of the last param
                     - put the n, ... args into this array.
                       We might have to do conversions here.
                     - put this array into arguments(n)
                     - delete arguments(n+1), ...
                 NOTE that this might modify the input list.                
            </comment>
            <comment line="352">
                The output list will be different than the input list.                
            </comment>
            <implements interface="Method"/>
            <declaration name="signatureParser" type="JNITypeParser" line="37"/>
            <method name="argSlotCount" type="int" line="38"/>
            <method name="allLineLocations" type="List<Location>" line="40"/>
            <method name="locationsOfLine" type="List<Location>" line="44"/>
            <method name="MethodImpl" type="constructor" line="52">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="declaringType" type="ReferenceTypeImpl"/>
                    <param name="ref" type="long"/>
                    <param name="name" type="String"/>
                    <param name="signature" type="String"/>
                    <param name="genericSignature" type="String"/>
                    <param name="modifiers" type="int"/>
                </params>
            </method>
            <method name="createMethodImpl" type="MethodImpl" line="64">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="declaringType" type="ReferenceTypeImpl"/>
                    <param name="ref" type="long"/>
                    <param name="name" type="String"/>
                    <param name="signature" type="String"/>
                    <param name="genericSignature" type="String"/>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="66"/>
                <scope line="71"/>
            </method>
            <method name="equals" type="boolean" line="79">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="80">
                    <declaration name="other" type="MethodImpl" line="81"/>
                </scope>
                <scope line="85"/>
            </method>
            <method name="hashCode" type="int" line="90"/>
            <method name="allLineLocations" type="List<Location>" line="95"/>
            <method name="allLineLocations" type="List<Location>" line="101">
                <params>
                    <param name="stratumID" type="String"/>
                    <param name="sourceName" type="String"/>
                </params>
            </method>
            <method name="locationsOfLine" type="List<Location>" line="107">
                <params>
                    <param name="lineNumber" type="int"/>
                </params>
            </method>
            <method name="locationsOfLine" type="List<Location>" line="115">
                <params>
                    <param name="stratumID" type="String"/>
                    <param name="sourceName" type="String"/>
                    <param name="lineNumber" type="int"/>
                </params>
            </method>
            <method name="codeIndexToLineInfo" type="LineInfo" line="121">
                <params>
                    <param name="stratum" type="SDE.Stratum"/>
                    <param name="codeIndex" type="long"/>
                </params>
                <scope line="122"/>
                <scope line="124"/>
            </method>
            <javadoc line="130">
                @return a text representation of the declared return type
                  of this method.                
            </javadoc>
            <method name="returnTypeName" type="String" line="134"/>
            <method name="returnSignature" type="String" line="138"/>
            <method name="returnType" type="Type" line="142"/>
            <method name="findType" type="Type" line="146">
                <params>
                    <param name="signature" type="String"/>
                </params>
                <declaration name="enclosing" type="ReferenceTypeImpl" line="147"/>
            </method>
            <method name="argumentTypeNames" type="List<String>" line="151"/>
            <method name="argumentSignatures" type="List<String>" line="155"/>
            <method name="argumentType" type="Type" line="159">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="enclosing" type="ReferenceTypeImpl" line="160"/>
                <declaration name="signature" type="String" line="161"/>
            </method>
            <method name="argumentTypes" type="List<Type>" line="165">
                <declaration name="size" type="int" line="166"/>
                <declaration name="types" type="ArrayList&lt;Type&gt;" line="167"/>
                <scope line="168">
                    <declaration name="type" type="Type" line="169"/>
                </scope>
            </method>
            <method name="compareTo" type="int" line="176">
                <params>
                    <param name="method" type="Method"/>
                </params>
                <declaration name="declaringType" type="ReferenceTypeImpl" line="177"/>
                <declaration name="rc" type="int" line="178"/>
                <scope line="179"/>
            </method>
            <method name="isAbstract" type="boolean" line="186"/>
            <method name="isSynchronized" type="boolean" line="190"/>
            <method name="isNative" type="boolean" line="194"/>
            <method name="isVarArgs" type="boolean" line="198"/>
            <method name="isBridge" type="boolean" line="202"/>
            <method name="isConstructor" type="boolean" line="206"/>
            <method name="isStaticInitializer" type="boolean" line="210"/>
            <method name="isObsolete" type="boolean" line="214">
                <scope line="215"/>
                <scope line="218"/>
            </method>
            <class name="ReturnContainer" line="228">
                <implements interface="ValueContainer"/>
                <method name="ReturnContainer" type="constructor" line="229"/>
                <method name="type" type="Type" line="231"/>
                <method name="typeName" type="String" line="234"/>
                <method name="signature" type="String" line="237">
                    <comment line="239">
                        type().signature();                        
                    </comment>
                </method>
                <method name="findType" type="Type" line="240">
                    <params>
                        <param name="signature" type="String"/>
                    </params>
                </method>
            </class>
            <declaration name="retValContainer" type="ReturnContainer" line="244"/>
            <method name="getReturnValueContainer" type="ReturnContainer" line="245">
                <scope line="246"/>
            </method>
            <class name="ArgumentContainer" line="256">
                <implements interface="ValueContainer"/>
                <declaration name="index" type="int" line="257"/>
                <method name="ArgumentContainer" type="constructor" line="259">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="type" type="Type" line="262"/>
                <method name="typeName" type="String" line="265"/>
                <method name="signature" type="String" line="268"/>
                <method name="findType" type="Type" line="271">
                    <params>
                        <param name="signature" type="String"/>
                    </params>
                </method>
            </class>
            <method name="handleVarArgs" type="void" line="293">
                <params>
                    <param name="arguments" type="List<Value>"/>
                </params>
                <comment line="301">
                    Error; will be caught later.                    
                </comment>
                <comment line="305">
                    It is ok to pass 0 args to the var arg.
                     We have to gen a 0 length array.                    
                </comment>
                <comment line="319">
                    This is case 1.  A compatible array is being passed to the
                     var args array param.  We don&apos;t have to do anything.                    
                </comment>
                <comment line="327">
                    Case 2.  We have to verify that the n, n+1, ... args are compatible
                     with componentType, and do conversions if necessary and create
                     an array of componentType to hold these possibly converted values.                    
                </comment>
                <comment line="335">
                    This will copy arguments(paramCount - 1) ... to argArray(0) ...
                     doing whatever conversions are needed!  It will throw an
                     exception if an incompatible arg is encountered                    
                </comment>
                <comment line="343">
                    Remove the excess args                    
                </comment>
                <declaration name="paramTypes" type="List&lt;Type&gt;" line="294"/>
                <declaration name="lastParamType" type="ArrayType" line="295"/>
                <declaration name="componentType" type="Type" line="296"/>
                <declaration name="argCount" type="int" line="297"/>
                <declaration name="paramCount" type="int" line="298"/>
                <scope line="299"/>
                <scope line="303">
                    <declaration name="argArray" type="ArrayReference" line="306"/>
                </scope>
                <declaration name="nthArgValue" type="Value" line="310"/>
                <scope line="311"/>
                <declaration name="nthArgType" type="Type" line="314"/>
                <scope line="315">
                    <scope line="317"/>
                </scope>
                <declaration name="count" type="int" line="331"/>
                <declaration name="argArray" type="ArrayReference" line="332"/>
                <scope line="345"/>
            </method>
            <method name="validateAndPrepareArgumentsForInvoke" type="List<Value>" line="355">
                <params>
                    <param name="origArguments" type="List<? extends Value>"/>
                </params>
                <declaration name="arguments" type="List&lt;Value&gt;" line="357"/>
                <scope line="358"/>
                <declaration name="argSize" type="int" line="362"/>
                <declaration name="parser" type="JNITypeParser" line="364"/>
                <declaration name="signatures" type="List" line="365"/>
                <scope line="367"/>
                <scope line="373">
                    <declaration name="value" type="Value" line="374"/>
                </scope>
            </method>
            <method name="toString" type="String" line="382">
                <declaration name="sb" type="StringBuffer" line="383"/>
                <declaration name="first" type="boolean" line="388"/>
                <scope line="389">
                    <scope line="390"/>
                </scope>
            </method>
        </class>
    </source>