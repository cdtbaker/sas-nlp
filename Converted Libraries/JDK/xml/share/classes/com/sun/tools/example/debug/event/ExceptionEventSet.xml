<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.example.debug.event">
        <import package="com.sun.jdi"/>
        <import package="com.sun.jdi.event"/>
        <class name="ExceptionEventSet" line="31">
            <extends class="LocatableEventSet"/>
            <declaration name="serialVersionUID" type="long" line="33"/>
            <method name="ExceptionEventSet" type="constructor" line="35">
                <params>
                    <param name="jdiEventSet" type="EventSet"/>
                </params>
            </method>
            <javadoc line="39">
                Gets the thrown exception object. The exception object is
                  an instance of java.lang.Throwable or a subclass in the
                  target VM.                
                <return>
                    an {@link ObjectReference} which mirrors the thrown object in
                      the target VM.                    
                </return>
            </javadoc>
            <method name="getException" type="ObjectReference" line="47"/>
            <javadoc line="51">
                Gets the location where the exception will be caught. An exception
                  is considered to be caught if, at the point of the throw, the
                  current location is dynamically enclosed in a try statement that
                  handles the exception. (See the JVM specification for details).
                  If there is such a try statement, the catch location is the
                  first code index of the appropriate catch clause.
                  &lt;p&gt;
                  If there are native methods in the call stack at the time of the
                  exception, there are important restrictions to note about the
                  returned catch location. In such cases,
                  it is not possible to predict whether an exception will be handled
                  by some native method on the call stack.
                  Thus, it is possible that exceptions considered uncaught
                  here will, in fact, be handled by a native method and not cause
                  termination of the target VM. Also, it cannot be assumed that the
                  catch location returned here will ever be reached by the throwing
                  thread. If there is
                  a native frame between the current location and the catch location,
                  the exception might be handled and cleared in that native method
                  instead.                
                <return>
                    the {@link Location} where the exception will be caught or null if
                      the exception is uncaught.                    
                </return>
            </javadoc>
            <method name="getCatchLocation" type="Location" line="76"/>
            <method name="notify" type="void" line="81">
                <params>
                    <param name="listener" type="JDIListener"/>
                </params>
            </method>
        </class>
    </source>