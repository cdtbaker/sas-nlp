<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.jdi"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <class name="ArrayReferenceImpl" line="35">
            <extends class="ObjectReferenceImpl"/>
            <comment line="263">
                Represents an array component to other internal parts of this
                 implementation. This is not exposed at the JDI level. Currently,
                 this class is needed only for type checking so it does not even
                 reference a particular component - just a generic component
                 of this array. In the future we may need to expand its use.                
            </comment>
            <implements interface="ArrayReference"/>
            <declaration name="length" type="int" line="38"/>
            <method name="ArrayReferenceImpl" type="constructor" line="40">
                <params>
                    <param name="aVm" type="VirtualMachine"/>
                    <param name="aRef" type="long"/>
                </params>
            </method>
            <method name="invokableReferenceType" type="ClassTypeImpl" line="44">
                <params>
                    <param name="method" type="Method"/>
                </params>
                <comment line="45">
                    The method has to be a method on Object since                    
                </comment>
                <comment line="46">
                    arrays don&apos;t have methods nor any other &apos;superclasses&apos;                    
                </comment>
                <comment line="47">
                    So, use the ClassTypeImpl for Object instead of                    
                </comment>
                <comment line="48">
                    the ArrayTypeImpl for the array itself.                    
                </comment>
            </method>
            <method name="arrayType" type="ArrayTypeImpl" line="52"/>
            <javadoc line="56">
                Return array length.
                  Need not be synchronized since it cannot be provably stale.                
            </javadoc>
            <method name="length" type="int" line="60">
                <scope line="61">
                    <scope line="62"/>
                    <scope line="65"/>
                </scope>
            </method>
            <method name="getValue" type="Value" line="72">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="list" type="List" line="73"/>
            </method>
            <method name="getValues" type="List<Value>" line="77"/>
            <javadoc line="81">
                Validate that the range to set/get is valid.
                  length of -1 (meaning rest of array) has been converted
                  before entry.                
            </javadoc>
            <method name="validateArrayAccess" type="void" line="86">
                <params>
                    <param name="index" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="87">
                    because length can be computed from index,                    
                </comment>
                <comment line="88">
                    index must be tested first for correct error message                    
                </comment>
                <scope line="89"/>
                <scope line="93"/>
                <scope line="97"/>
            </method>
            <method name="cast" type="T" line="105">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="getValues" type="List<Value>" line="109">
                <params>
                    <param name="index" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="110">
                    -1 means the rest of the array                    
                </comment>
                <scope line="110"/>
                <scope line="114"/>
                <declaration name="vals" type="List&lt;Value&gt;" line="118"/>
                <scope line="119"/>
                <scope line="121"/>
            </method>
            <method name="setValue" type="void" line="130">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="Value"/>
                </params>
                <declaration name="list" type="List&lt;Value&gt;" line="131"/>
            </method>
            <method name="setValues" type="void" line="138">
                <params>
                    <param name="values" type="List<? extends Value>"/>
                </params>
            </method>
            <method name="setValues" type="void" line="145">
                <params>
                    <param name="index" type="int"/>
                    <param name="values" type="List<? extends Value>"/>
                    <param name="srcIndex" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="147">
                    -1 means the rest of the array                    
                </comment>
                <comment line="148">
                    shorter of, the rest of the array and rest of                    
                </comment>
                <comment line="149">
                    the source values                    
                </comment>
                <comment line="174">
                    Validate and convert if necessary                    
                </comment>
                <comment line="180">
                    Since we got this exception,
                     the component must be a reference type.
                     This means the class has not yet been loaded
                     through the defining class&apos;s class loader.
                     If the value we&apos;re trying to set is null,
                     then setting to null is essentially a
                     no-op, and we should allow it without an
                     exception.                    
                </comment>
                <scope line="147"/>
                <scope line="156"/>
                <scope line="160"/>
                <declaration name="somethingToSet" type="boolean" line="167"/>
                <declaration name="setValues" type="ValueImpl[]" line="168"/>
                <scope line="170">
                    <declaration name="value" type="ValueImpl" line="171"/>
                    <scope line="173"/>
                    <scope line="179">
                        <scope line="190"/>
                    </scope>
                </scope>
                <scope line="195">
                    <scope line="196"/>
                    <scope line="199"/>
                </scope>
            </method>
            <method name="toString" type="String" line="205"/>
            <method name="typeValueKey" type="byte" line="210"/>
            <method name="validateAssignment" type="void" line="215">
                <params>
                    <param name="destination" type="ValueContainer"/>
                </params>
                <comment line="219">
                    An array can be used extensively without the
                     enclosing loader being recorded by the VM as an
                     initiating loader of the array type. In addition, the
                     load of an array class is fairly harmless as long as
                     the component class is already loaded. So we relax the
                     rules a bit and allow the assignment as long as the
                     ultimate component types are assignable.                    
                </comment>
                <comment line="235">
                    Remove all dimensions from the destination. Remove
                     the same number of dimensions from the source.
                     Get types for both and check to see if they are
                     compatible.                    
                </comment>
                <scope line="216"/>
                <scope line="218">
                    <declaration name="valid" type="boolean" line="228"/>
                    <declaration name="destParser" type="JNITypeParser" line="229"/>
                    <declaration name="srcParser" type="JNITypeParser" line="231"/>
                    <declaration name="destDims" type="int" line="233"/>
                    <scope line="234">
                        <declaration name="destComponentSignature" type="String" line="241"/>
                        <declaration name="destComponentType" type="Type" line="243"/>
                        <declaration name="srcComponentSignature" type="String" line="245"/>
                        <declaration name="srcComponentType" type="Type" line="247"/>
                    </scope>
                    <scope line="253"/>
                </scope>
            </method>
            <class name="Component" line="269">
                <implements interface="ValueContainer"/>
                <method name="type" type="Type" line="270"/>
                <method name="typeName" type="String" line="273"/>
                <method name="signature" type="String" line="276"/>
                <method name="findType" type="Type" line="279">
                    <params>
                        <param name="signature" type="String"/>
                    </params>
                </method>
            </class>
        </class>
    </source>