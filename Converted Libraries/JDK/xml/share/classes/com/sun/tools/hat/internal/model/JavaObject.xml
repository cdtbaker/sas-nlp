<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.hat.internal.model">
        <import package="java.io.IOException"/>
        <import package="com.sun.tools.hat.internal.parser.ReadBuffer"/>
        <class name="JavaObject" line="38">
            <extends class="JavaLazyReadObject"/>
            <comment line="46">
                Number before resolve                
            </comment>
            <comment line="47">
                JavaClass after resolve                
            </comment>
            <comment line="121">
                returns the value of field of given name                
            </comment>
            <comment line="205">
                Internals only below this point                
            </comment>
            <comment line="207">
                Java instance record (HPROF_GC_INSTANCE_DUMP) looks as below:
                
                     object ID
                     stack trace serial number (int)
                     class ID
                     data length (int)
                     byte[length]                
            </comment>
            <javadoc line="38">
                Represents Java instance                
                <author>
                    Bill Foote                    
                </author>
            </javadoc>
            <declaration name="clazz" type="Object" line="45"/>
            <javadoc line="47">
                Construct a new JavaObject.                
                <param>
                    classID id of the class object                    
                </param>
                <param>
                    offset The offset of field data                    
                </param>
            </javadoc>
            <method name="JavaObject" type="constructor" line="53">
                <params>
                    <param name="classID" type="long"/>
                    <param name="offset" type="long"/>
                </params>
            </method>
            <method name="resolve" type="void" line="58">
                <params>
                    <param name="snapshot" type="Snapshot"/>
                </params>
                <comment line="86">
                    while resolving, parse fields in verbose mode.                    
                </comment>
                <comment line="87">
                    but, getFields calls parseFields in non-verbose mode                    
                </comment>
                <comment line="88">
                    to avoid printing warnings repeatedly.                    
                </comment>
                <scope line="59"/>
                <scope line="62">
                    <declaration name="classID" type="long" line="63"/>
                    <scope line="65">
                        <declaration name="length" type="int" line="68"/>
                        <declaration name="buf" type="ReadBuffer" line="69"/>
                        <declaration name="idSize" type="int" line="70"/>
                        <declaration name="lenOffset" type="long" line="71"/>
                        <scope line="72"/>
                        <scope line="74"/>
                    </scope>
                </scope>
                <scope line="79"/>
                <declaration name="cl" type="JavaClass" line="83"/>
            </method>
            <javadoc line="95">
                Are we the same type as other?  We are iff our clazz is the
                  same type as other&apos;s.                
            </javadoc>
            <method name="isSameTypeAs" type="boolean" line="99">
                <params>
                    <param name="other" type="JavaThing"/>
                </params>
                <scope line="100"/>
                <declaration name="oo" type="JavaObject" line="103"/>
            </method>
            <javadoc line="107">
                Return our JavaClass object.  This may only be called after resolve.                
            </javadoc>
            <method name="getClazz" type="JavaClass" line="110"/>
            <method name="getFields" type="JavaThing[]" line="114">
                <comment line="115">
                    pass false to verbose mode so that dereference                    
                </comment>
                <comment line="116">
                    warnings are not printed.                    
                </comment>
            </method>
            <method name="getField" type="JavaThing" line="121">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="flds" type="JavaThing[]" line="122"/>
                <declaration name="instFields" type="JavaField[]" line="123"/>
                <scope line="124">
                    <scope line="125"/>
                </scope>
            </method>
            <method name="compareTo" type="int" line="132">
                <params>
                    <param name="other" type="JavaThing"/>
                </params>
                <scope line="133">
                    <declaration name="oo" type="JavaObject" line="134"/>
                </scope>
            </method>
            <method name="visitReferencedObjects" type="void" line="140">
                <params>
                    <param name="v" type="JavaHeapObjectVisitor"/>
                </params>
                <comment line="149">
                    skip it                    
                </comment>
                <declaration name="flds" type="JavaThing[]" line="142"/>
                <scope line="143">
                    <scope line="144">
                        <scope line="148"/>
                        <scope line="150"/>
                    </scope>
                </scope>
            </method>
            <method name="refersOnlyWeaklyTo" type="boolean" line="157">
                <params>
                    <param name="ss" type="Snapshot"/>
                    <param name="other" type="JavaThing"/>
                </params>
                <comment line="161">
                                        
                </comment>
                <comment line="162">
                    REMIND:  This introduces a dependency on the JDK                    
                </comment>
                <comment line="163">
                    implementation that is undesirable.                    
                </comment>
                <scope line="158">
                    <declaration name="referentFieldIndex" type="int" line="159"/>
                    <scope line="160">
                        <declaration name="flds" type="JavaThing[]" line="164"/>
                        <scope line="165">
                            <scope line="166"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="176">
                Describe the reference that this thing has to target.  This will only
                  be called if target is in the array returned by getChildrenForRootset.                
            </javadoc>
            <method name="describeReferenceTo" type="String" line="180">
                <params>
                    <param name="target" type="JavaThing"/>
                    <param name="ss" type="Snapshot"/>
                </params>
                <declaration name="flds" type="JavaThing[]" line="181"/>
                <scope line="182">
                    <scope line="183">
                        <declaration name="f" type="JavaField" line="184"/>
                    </scope>
                </scope>
            </method>
            <method name="toString" type="String" line="191">
                <scope line="192">
                    <declaration name="value" type="JavaThing" line="193"/>
                    <scope line="194"/>
                    <scope line="196"/>
                </scope>
                <scope line="199"/>
            </method>
            <method name="readValueLength" type="int" line="215">
                <declaration name="cl" type="JavaClass" line="216"/>
                <declaration name="idSize" type="int" line="217"/>
                <declaration name="lengthOffset" type="long" line="218"/>
            </method>
            <method name="readValue" type="byte[]" line="222">
                <declaration name="cl" type="JavaClass" line="223"/>
                <declaration name="idSize" type="int" line="224"/>
                <declaration name="buf" type="ReadBuffer" line="225"/>
                <declaration name="offset" type="long" line="226"/>
                <declaration name="length" type="int" line="227"/>
                <scope line="228"/>
                <scope line="230">
                    <declaration name="res" type="byte[]" line="231"/>
                </scope>
            </method>
            <method name="parseFields" type="JavaThing[]" line="237">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="verbose" type="boolean"/>
                </params>
                <comment line="245">
                    In the dump file, the fields are stored in this order:                    
                </comment>
                <comment line="246">
                    fields of most derived class (immediate class) are stored                    
                </comment>
                <comment line="247">
                    first and then the super class and so on. In this object,                    
                </comment>
                <comment line="248">
                    fields are stored in the reverse (&quot;natural&quot;) order. i.e.,                    
                </comment>
                <comment line="249">
                    fields of most super class are stored first.                    
                </comment>
                <comment line="251">
                    target variable is used to compensate for the fact that                    
                </comment>
                <comment line="252">
                    the dump file starts field values from the leaf working                    
                </comment>
                <comment line="253">
                    upwards in the inheritance hierarchy, whereas JavaObject                    
                </comment>
                <comment line="254">
                    starts with the top of the inheritance hierarchy and works down.                    
                </comment>
                <declaration name="cl" type="JavaClass" line="238"/>
                <declaration name="target" type="int" line="239"/>
                <declaration name="fields" type="JavaField[]" line="240"/>
                <declaration name="fieldValues" type="JavaThing[]" line="241"/>
                <declaration name="snapshot" type="Snapshot" line="242"/>
                <declaration name="idSize" type="int" line="243"/>
                <declaration name="fieldNo" type="int" line="244"/>
                <declaration name="currClass" type="JavaClass" line="256"/>
                <declaration name="index" type="int" line="257"/>
                <scope line="258">
                    <scope line="259"/>
                    <declaration name="f" type="JavaField" line="265"/>
                    <declaration name="sig" type="char" line="266"/>
                    <scope line="269">
                        <declaration name="id" type="long" line="270"/>
                        <declaration name="ref" type="JavaObjectRef" line="272"/>
                    </scope>
                    <scope line="276">
                        <declaration name="value" type="byte" line="277"/>
                    </scope>
                    <scope line="282">
                        <declaration name="value" type="byte" line="283"/>
                    </scope>
                    <scope line="288">
                        <declaration name="value" type="short" line="289"/>
                    </scope>
                    <scope line="294">
                        <declaration name="value" type="char" line="295"/>
                    </scope>
                    <scope line="300">
                        <declaration name="value" type="int" line="301"/>
                    </scope>
                    <scope line="306">
                        <declaration name="value" type="long" line="307"/>
                    </scope>
                    <scope line="312">
                        <declaration name="value" type="float" line="313"/>
                    </scope>
                    <scope line="318">
                        <declaration name="value" type="double" line="319"/>
                    </scope>
                </scope>
            </method>
            <method name="warn" type="void" line="331">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
        </class>
    </source>