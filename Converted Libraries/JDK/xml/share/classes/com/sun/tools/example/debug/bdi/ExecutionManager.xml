<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.example.debug.bdi">
        <import package="com.sun.jdi"/>
        <import package="com.sun.jdi.request"/>
        <import package="com.sun.jdi.connect"/>
        <import package="com.sun.tools.example.debug.expr.ExpressionParser"/>
        <import package="com.sun.tools.example.debug.expr.ParseException"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="com.sun.tools.example.debug.event"/>
        <import package="javax.swing.SwingUtilities"/>
        <class name="ExecutionManager" line="11">
            <javadoc line="11">
                Move this towards being only state and functionality
                  that spans across Sessions (and thus VMs).                
            </javadoc>
            <declaration name="session" type="Session" line="16"/>
            <declaration name="traceMode" type="int" line="17"/>
            <javadoc line="17">
                Get/set JDI trace mode.                
            </javadoc>
            <declaration name="sessionListeners" type="ArrayList&amp;lt;SessionListener&amp;gt;" line="21"/>
            <method name="addSessionListener" type="void" line="22">
                <params>
                    <param name="listener" type="SessionListener"/>
                </params>
            </method>
            <method name="removeSessionListener" type="void" line="25">
                <params>
                    <param name="listener" type="SessionListener"/>
                </params>
            </method>
            <declaration name="specListeners" type="ArrayList&amp;lt;SpecListener&amp;gt;" line="28"/>
            <method name="addSpecListener" type="void" line="29">
                <params>
                    <param name="cl" type="SpecListener"/>
                </params>
            </method>
            <method name="removeSpecListener" type="void" line="32">
                <params>
                    <param name="cl" type="SpecListener"/>
                </params>
            </method>
            <declaration name="jdiListeners" type="ArrayList&amp;lt;JDIListener&amp;gt;" line="35"/>
            <javadoc line="36">
                Adds a JDIListener                
            </javadoc>
            <method name="addJDIListener" type="void" line="39">
                <params>
                    <param name="jl" type="JDIListener"/>
                </params>
            </method>
            <javadoc line="42">
                Adds a JDIListener - at the specified position                
            </javadoc>
            <method name="addJDIListener" type="void" line="45">
                <params>
                    <param name="index" type="int"/>
                    <param name="jl" type="JDIListener"/>
                </params>
            </method>
            <javadoc line="48">
                Removes a JDIListener                
            </javadoc>
            <method name="removeJDIListener" type="void" line="51">
                <params>
                    <param name="jl" type="JDIListener"/>
                </params>
            </method>
            <declaration name="appEchoListeners" type="ArrayList&amp;lt;OutputListener&amp;gt;" line="54"/>
            <method name="addApplicationEchoListener" type="void" line="55">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <method name="removeApplicationEchoListener" type="void" line="58">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <declaration name="appOutputListeners" type="ArrayList&amp;lt;OutputListener&amp;gt;" line="61"/>
            <method name="addApplicationOutputListener" type="void" line="62">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <method name="removeApplicationOutputListener" type="void" line="65">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <declaration name="appErrorListeners" type="ArrayList&amp;lt;OutputListener&amp;gt;" line="68"/>
            <method name="addApplicationErrorListener" type="void" line="69">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <method name="removeApplicationErrorListener" type="void" line="72">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <declaration name="diagnosticsListeners" type="ArrayList&amp;lt;OutputListener&amp;gt;" line="75"/>
            <method name="addDiagnosticsListener" type="void" line="76">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <method name="removeDiagnosticsListener" type="void" line="79">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <method name="vm" type="VirtualMachine" line="82"/>
            <method name="ensureActiveSession" type="void" line="85">
                <scope line="86"/>
            </method>
            <method name="eventRequestManager" type="EventRequestManager" line="90"/>
            <javadoc line="93">
                Get JDI trace mode.                
            </javadoc>
            <method name="getTraceMode" type="int" line="96">
                <params>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="99">
                Set JDI trace mode.                
            </javadoc>
            <method name="setTraceMode" type="void" line="102">
                <params>
                    <param name="mode" type="int"/>
                </params>
                <scope line="104"/>
            </method>
            <javadoc line="108">
                Determine if VM is interrupted, i.e, present and not running.                
            </javadoc>
            <method name="isInterrupted" type="boolean" line="111"/>
            <javadoc line="114">
                Return a list of ReferenceType objects for all
                  currently loaded classes and interfaces.
                  Array types are not returned.                
            </javadoc>
            <method name="allClasses" type="List&lt;ReferenceType&gt;" line="119"/>
            <javadoc line="123">
                Return a ReferenceType object for the currently
                  loaded class or interface whose fully-qualified
                  class name is specified, else return null if there
                  is none.
                  In general, we must return a list of types, because
                  multiple class loaders could have loaded a class
                  with the same fully-qualified name.                
            </javadoc>
            <method name="findClassesByName" type="List&lt;ReferenceType&gt;" line="132">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="136">
                Return a list of ReferenceType objects for all
                  currently loaded classes and interfaces whose name
                  matches the given pattern.  The pattern syntax is
                  open to some future revision, but currently consists
                  of a fully-qualified class name in which the first
                  component may optionally be a &quot;&quot; character, designating
                  an arbitrary prefix.                
            </javadoc>
            <method name="findClassesMatchingPattern" type="List&lt;ReferenceType&gt;" line="145">
                <params>
                    <param name="pattern" type="String"/>
                </params>
                <declaration name="result" type="List&amp;lt;ReferenceType&amp;gt;" line="147"/>
                <scope line="148">
                    <scope line="150">
                        <scope line="151"/>
                    </scope>
                </scope>
                <scope line="157"/>
            </method>
            <method name="allThreads" type="List&lt;ThreadReference&gt;" line="161"/>
            <method name="topLevelThreadGroups" type="List&lt;ThreadGroupReference&gt;" line="165"/>
            <method name="systemThreadGroup" type="ThreadGroupReference" line="169"/>
            <method name="evaluate" type="Value" line="173">
                <params>
                    <param name="f" type="StackFrame"/>
                    <param name="expr" type="String"/>
                </params>
                <declaration name="frameGetter" type="ExpressionParser.GetFrame" line="174"/>
                <scope line="176">
                    <anonymous_class line="177">
                        <method name="get" type="StackFrame" line="178"/>
                    </anonymous_class>
                </scope>
            </method>
            <method name="run" type="void" line="186">
                <params>
                    <param name="suspended" type="boolean"/>
                    <param name="vmArgs" type="String"/>
                    <param name="className" type="String"/>
                    <param name="args" type="String"/>
                </params>
                <scope line="188">
                    <declaration name="argList" type="List&amp;lt;String&amp;gt;" line="189"/>
                </scope>
                <declaration name="cmdLine" type="String" line="193"/>
            </method>
            <method name="attach" type="void" line="196">
                <params>
                    <param name="portName" type="String"/>
                </params>
                <declaration name="mgr" type="VirtualMachineManager" line="198"/>
                <declaration name="connector" type="AttachingConnector" line="199"/>
                <declaration name="arguments" type="Map&amp;lt;String,Connector.Argument&amp;gt;" line="200"/>
                <declaration name="newSession" type="Session" line="202"/>
                <scope line="203"/>
            </method>
            <method name="internalAttach" type="Session" line="207">
                <params>
                    <param name="connector" type="AttachingConnector"/>
                    <param name="arguments" type="Map&lt;String,Connector.Argument&gt;"/>
                </params>
                <scope line="208">
                    <declaration name="vm" type="VirtualMachine" line="209"/>
                </scope>
                <scope line="212"/>
                <scope line="215"/>
            </method>
            <method name="internalListen" type="Session" line="220">
                <params>
                    <param name="connector" type="ListeningConnector"/>
                    <param name="arguments" type="Map&lt;String,Connector.Argument&gt;"/>
                </params>
                <scope line="221">
                    <declaration name="vm" type="VirtualMachine" line="222"/>
                </scope>
                <scope line="225"/>
                <scope line="228"/>
            </method>
            <method name="explictStart" type="boolean" line="233">
                <params>
                    <param name="connector" type="Connector"/>
                    <param name="arguments" type="Map&lt;String,Connector.Argument&gt;"/>
                </params>
                <declaration name="newSession" type="Session" line="234"/>
                <scope line="236"/>
                <scope line="239"/>
                <scope line="242"/>
                <scope line="245"/>
                <scope line="248"/>
            </method>
            <method name="detach" type="void" line="253"/>
            <method name="startSession" type="void" line="257">
                <params>
                    <param name="s" type="Session"/>
                </params>
                <scope line="258"/>
                <declaration name="em" type="EventRequestManager" line="262"/>
                <declaration name="classPrepareRequest" type="ClassPrepareRequest" line="263"/>
                <declaration name="classUnloadRequest" type="ClassUnloadRequest" line="266"/>
                <declaration name="threadStartRequest" type="ThreadStartRequest" line="269"/>
                <declaration name="threadDeathRequest" type="ThreadDeathRequest" line="272"/>
                <declaration name="exceptionRequest" type="ExceptionRequest" line="275"/>
            </method>
            <method name="endSession" type="void" line="282">
                <scope line="283"/>
            </method>
            <method name="interrupt" type="void" line="290"/>
            <method name="go" type="void" line="297"/>
            <method name="clearPreviousStep" type="void" line="304">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <declaration name="mgr" type="EventRequestManager" line="305"/>
                <scope line="306">
                    <scope line="307"/>
                </scope>
            </method>
            <method name="generalStep" type="void" line="313">
                <params>
                    <param name="thread" type="ThreadReference"/>
                    <param name="size" type="int"/>
                    <param name="depth" type="int"/>
                </params>
                <declaration name="reqMgr" type="EventRequestManager" line="319"/>
                <declaration name="request" type="StepRequest" line="320"/>
            </method>
            <method name="stepIntoInstruction" type="void" line="325">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="stepOverInstruction" type="void" line="328">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="stepIntoLine" type="void" line="331">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="stepOverLine" type="void" line="334">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="stepOut" type="void" line="337">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="suspendThread" type="void" line="340">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="resumeThread" type="void" line="344">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="stopThread" type="void" line="348">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <declaration name="threadInfoList" type="List&amp;lt;ThreadInfo&amp;gt;" line="351"/>
            <declaration name="threadInfoMap" type="HashMap&amp;lt;ThreadReference,ThreadInfo&amp;gt;" line="352"/>
            <method name="threadInfo" type="ThreadInfo" line="353">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <scope line="354"/>
                <declaration name="info" type="ThreadInfo" line="357"/>
                <scope line="358">
                    <scope line="360"/>
                </scope>
            </method>
            <method name="validateThreadInfo" type="void" line="368">
                <scope line="370"/>
            </method>
            <method name="invalidateThreadInfo" type="void" line="374">
                <scope line="375">
                    <scope line="377"/>
                </scope>
            </method>
            <method name="removeThreadInfo" type="void" line="382">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <declaration name="info" type="ThreadInfo" line="383"/>
                <scope line="384"/>
            </method>
            <method name="notifyInterrupted" type="void" line="390">
                <declaration name="l" type="ArrayList&amp;lt;SessionListener&amp;gt;" line="391"/>
                <declaration name="evt" type="EventObject" line="392"/>
                <scope line="393"/>
            </method>
            <method name="notifyContinued" type="void" line="397">
                <declaration name="l" type="ArrayList&amp;lt;SessionListener&amp;gt;" line="398"/>
                <declaration name="evt" type="EventObject" line="399"/>
                <scope line="400"/>
            </method>
            <method name="notifySessionStart" type="void" line="404">
                <declaration name="l" type="ArrayList&amp;lt;SessionListener&amp;gt;" line="405"/>
                <declaration name="evt" type="EventObject" line="406"/>
                <scope line="407"/>
            </method>
            <method name="notifySessionDeath" type="void" line="411"/>
            <declaration name="inputLock" type="Object" line="413"/>
            <declaration name="inputBuffer" type="LinkedList&amp;lt;String&amp;gt;" line="414"/>
            <method name="resetInputBuffer" type="void" line="415">
                <scope line="416"/>
            </method>
            <method name="sendLineToApplication" type="void" line="420">
                <params>
                    <param name="line" type="String"/>
                </params>
                <scope line="421"/>
            </method>
            <declaration name="appInput" type="InputListener" line="426"/>
            <anonymous_class line="426">
                <method name="getLine" type="String" line="427">
                    <declaration name="line" type="String" line="428"/>
                    <scope line="429">
                        <scope line="430">
                            <scope line="431">
                                <scope line="432"/>
                            </scope>
                            <scope line="437"/>
                        </scope>
                    </scope>
                    <declaration name="input" type="String" line="441"/>
                    <anonymous_class line="442">
                        <method name="run" type="void" line="443"/>
                    </anonymous_class>
                </method>
            </anonymous_class>
            <declaration name="newline" type="String" line="452"/>
            <method name="echoInputLine" type="void" line="453">
                <params>
                    <param name="line" type="String"/>
                </params>
                <declaration name="l" type="ArrayList&amp;lt;OutputListener&amp;gt;" line="454"/>
                <scope line="455">
                    <declaration name="ol" type="OutputListener" line="456"/>
                </scope>
            </method>
            <declaration name="appOutput" type="OutputListener" line="461"/>
            <anonymous_class line="461">
                <method name="putString" type="void" line="462">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                    <declaration name="l" type="ArrayList&amp;lt;OutputListener&amp;gt;" line="463"/>
                    <scope line="464"/>
                </method>
            </anonymous_class>
            <declaration name="appError" type="OutputListener" line="470"/>
            <anonymous_class line="470">
                <method name="putString" type="void" line="471">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                    <declaration name="l" type="ArrayList&amp;lt;OutputListener&amp;gt;" line="472"/>
                    <scope line="473"/>
                </method>
            </anonymous_class>
            <declaration name="diagnostics" type="OutputListener" line="479"/>
            <anonymous_class line="479">
                <method name="putString" type="void" line="480">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                    <declaration name="l" type="ArrayList&amp;lt;OutputListener&amp;gt;" line="481"/>
                    <scope line="482"/>
                </method>
            </anonymous_class>
            <declaration name="specList" type="EventRequestSpecList" line="488"/>
            <method name="createSourceLineBreakpoint" type="BreakpointSpec" line="489">
                <params>
                    <param name="sourceName" type="String"/>
                    <param name="line" type="int"/>
                </params>
            </method>
            <method name="createClassLineBreakpoint" type="BreakpointSpec" line="492">
                <params>
                    <param name="classPattern" type="String"/>
                    <param name="line" type="int"/>
                </params>
            </method>
            <method name="createMethodBreakpoint" type="BreakpointSpec" line="495">
                <params>
                    <param name="classPattern" type="String"/>
                    <param name="methodId" type="String"/>
                    <param name="methodArgs" type="List&lt;String&gt;"/>
                </params>
            </method>
            <method name="createExceptionIntercept" type="ExceptionSpec" line="498">
                <params>
                    <param name="classPattern" type="String"/>
                    <param name="notifyCaught" type="boolean"/>
                    <param name="notifyUncaught" type="boolean"/>
                </params>
            </method>
            <method name="createAccessWatchpoint" type="AccessWatchpointSpec" line="501">
                <params>
                    <param name="classPattern" type="String"/>
                    <param name="fieldId" type="String"/>
                </params>
            </method>
            <method name="createModificationWatchpoint" type="ModificationWatchpointSpec" line="504">
                <params>
                    <param name="classPattern" type="String"/>
                    <param name="fieldId" type="String"/>
                </params>
            </method>
            <method name="delete" type="void" line="507">
                <params>
                    <param name="spec" type="EventRequestSpec"/>
                </params>
            </method>
            <method name="resolve" type="void" line="510">
                <params>
                    <param name="refType" type="ReferenceType"/>
                </params>
            </method>
            <method name="install" type="void" line="513">
                <params>
                    <param name="spec" type="EventRequestSpec"/>
                </params>
            </method>
            <method name="eventRequestSpecs" type="List&lt;EventRequestSpec&gt;" line="516"/>
        </class>
    </source>