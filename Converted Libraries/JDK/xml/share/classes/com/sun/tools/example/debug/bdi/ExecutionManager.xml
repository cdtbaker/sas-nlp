<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.example.debug.bdi">
        <import package="com.sun.jdi"/>
        <import package="com.sun.jdi.request"/>
        <import package="com.sun.jdi.connect"/>
        <import package="com.sun.tools.example.debug.expr.ExpressionParser"/>
        <import package="com.sun.tools.example.debug.expr.ParseException"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="com.sun.tools.example.debug.event"/>
        <import package="javax.swing.SwingUtilities"/>
        <class name="ExecutionManager" line="41">
            <comment line="55">
                ////////////////    Listener registration    //////////////////                
            </comment>
            <comment line="57">
                Session Listeners                
            </comment>
            <comment line="69">
                Spec Listeners                
            </comment>
            <comment line="81">
                JDI Listeners                
            </comment>
            <comment line="106">
                App Echo Listeners                
            </comment>
            <comment line="118">
                App Output Listeners                
            </comment>
            <comment line="130">
                App Error Listeners                
            </comment>
            <comment line="142">
                Diagnostic Listeners                
            </comment>
            <comment line="154">
                /////////    End Listener Registration    //////////////                
            </comment>
            <comment line="156">
                ### We probably don&apos;t want this public                
            </comment>
            <comment line="249">
                Return a list of ThreadReference objects corresponding
                 to the threads that are currently active in the VM.
                 A thread is removed from the list just before the
                 thread terminates.                
            </comment>
            <comment line="261">
                Return a list of ThreadGroupReference objects corresponding
                 to the top-level threadgroups that are currently active in the VM.
                 Note that a thread group may be empty, or contain no threads as
                 descendents.                
            </comment>
            <comment line="273">
                Return the system threadgroup.                
            </comment>
            <comment line="283">
                Evaluate an expression.                
            </comment>
            <comment line="308">
                Start a new VM.                
            </comment>
            <comment line="335">
                Attach to an existing VM.                
            </comment>
            <comment line="393">
                Connect via user specified arguments
                 @return true on success                
            </comment>
            <comment line="424">
                Detach from VM.  If VM was started by debugger, terminate it.                
            </comment>
            <comment line="472">
                Suspend all VM activity.                
            </comment>
            <comment line="485">
                Resume interrupted VM.                
            </comment>
            <comment line="497">
                Stepping.                
            </comment>
            <comment line="558">
                Thread control.                
            </comment>
            <comment line="578">
                ThreadInfo objects -- Allow query of thread status and stack.                
            </comment>
            <comment line="583">
                ### Should be weak! (in the value, not the key)                
            </comment>
            <comment line="629">
                Listen for Session control events.                
            </comment>
            <comment line="667">
                Listen for input and output requests from the application
                 being debugged.  These are generated only when the debuggee
                 is spawned as a child of the debugger.                
            </comment>
            <comment line="760">
                ///////////    Spec Request Creation/Deletion/Query   ///////////                
            </comment>
            <javadoc line="41">
                Move this towards being only state and functionality
                  that spans across Sessions (and thus VMs).                
            </javadoc>
            <declaration name="session" type="Session" line="47"/>
            <declaration name="traceMode" type="int" line="49"/>
            <javadoc line="49">
                Get/set JDI trace mode.                
            </javadoc>
            <declaration name="sessionListeners" type="ArrayList&lt;SessionListener&gt;" line="58"/>
            <method name="addSessionListener" type="void" line="60">
                <params>
                    <param name="listener" type="SessionListener"/>
                </params>
            </method>
            <method name="removeSessionListener" type="void" line="64">
                <params>
                    <param name="listener" type="SessionListener"/>
                </params>
            </method>
            <declaration name="specListeners" type="ArrayList&lt;SpecListener&gt;" line="70"/>
            <method name="addSpecListener" type="void" line="72">
                <params>
                    <param name="cl" type="SpecListener"/>
                </params>
            </method>
            <method name="removeSpecListener" type="void" line="76">
                <params>
                    <param name="cl" type="SpecListener"/>
                </params>
            </method>
            <declaration name="jdiListeners" type="ArrayList&lt;JDIListener&gt;" line="82"/>
            <javadoc line="84">
                Adds a JDIListener                
            </javadoc>
            <method name="addJDIListener" type="void" line="87">
                <params>
                    <param name="jl" type="JDIListener"/>
                </params>
            </method>
            <javadoc line="91">
                Adds a JDIListener - at the specified position                
            </javadoc>
            <method name="addJDIListener" type="void" line="94">
                <params>
                    <param name="index" type="int"/>
                    <param name="jl" type="JDIListener"/>
                </params>
            </method>
            <javadoc line="98">
                Removes a JDIListener                
            </javadoc>
            <method name="removeJDIListener" type="void" line="101">
                <params>
                    <param name="jl" type="JDIListener"/>
                </params>
            </method>
            <declaration name="appEchoListeners" type="ArrayList&lt;OutputListener&gt;" line="107"/>
            <method name="addApplicationEchoListener" type="void" line="109">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <method name="removeApplicationEchoListener" type="void" line="113">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <declaration name="appOutputListeners" type="ArrayList&lt;OutputListener&gt;" line="119"/>
            <method name="addApplicationOutputListener" type="void" line="121">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <method name="removeApplicationOutputListener" type="void" line="125">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <declaration name="appErrorListeners" type="ArrayList&lt;OutputListener&gt;" line="131"/>
            <method name="addApplicationErrorListener" type="void" line="133">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <method name="removeApplicationErrorListener" type="void" line="137">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <declaration name="diagnosticsListeners" type="ArrayList&lt;OutputListener&gt;" line="143"/>
            <method name="addDiagnosticsListener" type="void" line="145">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <method name="removeDiagnosticsListener" type="void" line="149">
                <params>
                    <param name="l" type="OutputListener"/>
                </params>
            </method>
            <method name="vm" type="VirtualMachine" line="156"/>
            <method name="ensureActiveSession" type="void" line="160">
                <scope line="161"/>
            </method>
            <method name="eventRequestManager" type="EventRequestManager" line="166"/>
            <javadoc line="170">
                Get JDI trace mode.                
            </javadoc>
            <method name="getTraceMode" type="int" line="173">
                <params>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="177">
                Set JDI trace mode.                
            </javadoc>
            <method name="setTraceMode" type="void" line="180">
                <params>
                    <param name="mode" type="int"/>
                </params>
                <scope line="182"/>
            </method>
            <javadoc line="187">
                Determine if VM is interrupted, i.e, present and not running.                
            </javadoc>
            <method name="isInterrupted" type="boolean" line="190">
                <comment line="190">
                                        
                </comment>
                <comment line="191">
                    ensureActiveSession();                    
                </comment>
            </method>
            <javadoc line="195">
                Return a list of ReferenceType objects for all
                  currently loaded classes and interfaces.
                  Array types are not returned.                
            </javadoc>
            <method name="allClasses" type="List<ReferenceType>" line="200"/>
            <javadoc line="205">
                Return a ReferenceType object for the currently
                  loaded class or interface whose fully-qualified
                  class name is specified, else return null if there
                  is none.
                  In general, we must return a list of types, because
                  multiple class loaders could have loaded a class
                  with the same fully-qualified name.                
            </javadoc>
            <method name="findClassesByName" type="List<ReferenceType>" line="215">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="220">
                Return a list of ReferenceType objects for all
                  currently loaded classes and interfaces whose name
                  matches the given pattern.  The pattern syntax is
                  open to some future revision, but currently consists
                  of a fully-qualified class name in which the first
                  component may optionally be a &quot;&quot; character, designating
                  an arbitrary prefix.                
            </javadoc>
            <method name="findClassesMatchingPattern" type="List<ReferenceType>" line="230">
                <params>
                    <param name="pattern" type="String"/>
                </params>
                <comment line="232">
                    ### Is default size OK?                    
                </comment>
                <comment line="234">
                    Wildcard matches any leading package name.                    
                </comment>
                <comment line="243">
                    It&apos;s a class name.                    
                </comment>
                <declaration name="result" type="List&lt;ReferenceType&gt;" line="232"/>
                <scope line="233">
                    <scope line="236">
                        <scope line="237"/>
                    </scope>
                </scope>
                <scope line="242"/>
            </method>
            <method name="allThreads" type="List<ThreadReference>" line="255"/>
            <method name="topLevelThreadGroups" type="List<ThreadGroupReference>" line="267"/>
            <method name="systemThreadGroup" type="ThreadGroupReference" line="277"/>
            <method name="evaluate" type="Value" line="292">
                <params>
                    <param name="f" type="StackFrame"/>
                    <param name="expr" type="String"/>
                </params>
                <comment line="298">
                                        
                </comment>
                <declaration name="frameGetter" type="ExpressionParser.GetFrame" line="293"/>
                <scope line="295">
                    <anonymous_class line="296">
                        <method name="get" type="StackFrame" line="298">
                            <comment line="298">
                                                                
                            </comment>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="run" type="void" line="314">
                <params>
                    <param name="suspended" type="boolean"/>
                    <param name="vmArgs" type="String"/>
                    <param name="className" type="String"/>
                    <param name="args" type="String"/>
                </params>
                <comment line="318">
                    ### Set a breakpoint on &apos;main&apos; method.                    
                </comment>
                <comment line="319">
                    ### Would be cleaner if we could just bring up VM already suspended.                    
                </comment>
                <comment line="321">
                    ### Set breakpoint at &apos;main(java.lang.String[])&apos;.                    
                </comment>
                <scope line="320">
                    <declaration name="argList" type="List&lt;String&gt;" line="322"/>
                </scope>
                <declaration name="cmdLine" type="String" line="327"/>
            </method>
            <method name="attach" type="void" line="337">
                <params>
                    <param name="portName" type="String"/>
                </params>
                <comment line="340">
                    ### Changes made here for connectors have broken the                    
                </comment>
                <comment line="341">
                    ### the &apos;Session&apos; abstraction.  The &apos;Session.attach()&apos;                    
                </comment>
                <comment line="342">
                    ### method is intended to encapsulate all of the various                    
                </comment>
                <comment line="343">
                    ### ways in which session start-up can fail. (maddox 12/18/98)                    
                </comment>
                <comment line="345">
                    Now that attaches and launches both go through Connectors,
                     it may be worth creating a new subclass of Session for
                     attach sessions.                    
                </comment>
                <declaration name="mgr" type="VirtualMachineManager" line="350"/>
                <declaration name="connector" type="AttachingConnector" line="351"/>
                <declaration name="arguments" type="Map&lt;String,Connector.Argument&gt;" line="352"/>
                <declaration name="newSession" type="Session" line="355"/>
                <scope line="356"/>
            </method>
            <method name="internalAttach" type="Session" line="362">
                <params>
                    <param name="connector" type="AttachingConnector"/>
                    <param name="arguments" type="Map<String,Connector.Argument>"/>
                </params>
                <scope line="363">
                    <declaration name="vm" type="VirtualMachine" line="364"/>
                </scope>
                <scope line="366"/>
                <scope line="369"/>
            </method>
            <method name="internalListen" type="Session" line="377">
                <params>
                    <param name="connector" type="ListeningConnector"/>
                    <param name="arguments" type="Map<String,Connector.Argument>"/>
                </params>
                <scope line="378">
                    <declaration name="vm" type="VirtualMachine" line="379"/>
                </scope>
                <scope line="381"/>
                <scope line="385"/>
            </method>
            <method name="explictStart" type="boolean" line="397">
                <params>
                    <param name="connector" type="Connector"/>
                    <param name="arguments" type="Map<String,Connector.Argument>"/>
                </params>
                <comment line="403">
                    we were launched, use ChildSession                    
                </comment>
                <declaration name="newSession" type="Session" line="398"/>
                <scope line="402"/>
                <scope line="408"/>
                <scope line="411"/>
                <scope line="414"/>
                <scope line="417"/>
            </method>
            <method name="detach" type="void" line="426"/>
            <method name="startSession" type="void" line="431">
                <params>
                    <param name="s" type="Session"/>
                </params>
                <comment line="438">
                    ### We must allow the deferred breakpoints to be resolved before                    
                </comment>
                <comment line="439">
                    ### we continue executing the class.  We could optimize if there                    
                </comment>
                <comment line="440">
                    ### were no deferred breakpoints outstanding for a particular class.                    
                </comment>
                <comment line="441">
                    ### Can we do this with JDI?                    
                </comment>
                <scope line="432"/>
                <declaration name="em" type="EventRequestManager" line="436"/>
                <declaration name="classPrepareRequest" type="ClassPrepareRequest" line="437"/>
                <declaration name="classUnloadRequest" type="ClassUnloadRequest" line="444"/>
                <declaration name="threadStartRequest" type="ThreadStartRequest" line="447"/>
                <declaration name="threadDeathRequest" type="ThreadDeathRequest" line="450"/>
                <declaration name="exceptionRequest" type="ExceptionRequest" line="453"/>
            </method>
            <method name="endSession" type="void" line="462">
                <scope line="463"/>
            </method>
            <method name="interrupt" type="void" line="475">
                <comment line="478">
                    ### Is it guaranteed that the interrupt has happened?                    
                </comment>
            </method>
            <method name="go" type="void" line="488"/>
            <method name="clearPreviousStep" type="void" line="499">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <comment line="500">
                    A previous step may not have completed on this thread;
                     if so, it gets removed here.                    
                </comment>
                <declaration name="mgr" type="EventRequestManager" line="504"/>
                <scope line="505">
                    <scope line="506"/>
                </scope>
            </method>
            <method name="generalStep" type="void" line="514">
                <params>
                    <param name="thread" type="ThreadReference"/>
                    <param name="size" type="int"/>
                    <param name="depth" type="int"/>
                </params>
                <comment line="524">
                    We want just the next step event and no others                    
                </comment>
                <declaration name="reqMgr" type="EventRequestManager" line="521"/>
                <declaration name="request" type="StepRequest" line="522"/>
            </method>
            <method name="stepIntoInstruction" type="void" line="531">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="stepOverInstruction" type="void" line="536">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="stepIntoLine" type="void" line="542">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="stepOverLine" type="void" line="548">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="stepOut" type="void" line="553">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="suspendThread" type="void" line="561">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="resumeThread" type="void" line="566">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
            </method>
            <method name="stopThread" type="void" line="571">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <comment line="573">
                    ### Need an exception now.  Which one to use?                    
                </comment>
                <comment line="574">
                    thread.stop();                    
                </comment>
            </method>
            <declaration name="threadInfoList" type="List&lt;ThreadInfo&gt;" line="581"/>
            <declaration name="threadInfoMap" type="HashMap&lt;ThreadReference,ThreadInfo&gt;" line="583"/>
            <method name="threadInfo" type="ThreadInfo" line="585">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <comment line="591">
                    ### Should not hardcode initial frame count and prefetch here!                    
                </comment>
                <comment line="592">
                    info = new ThreadInfo(thread, 10, 10);                    
                </comment>
                <scope line="586"/>
                <declaration name="info" type="ThreadInfo" line="589"/>
                <scope line="590">
                    <scope line="594"/>
                </scope>
            </method>
            <method name="validateThreadInfo" type="void" line="603">
                <scope line="605"/>
            </method>
            <method name="invalidateThreadInfo" type="void" line="610">
                <scope line="611">
                    <scope line="613"/>
                </scope>
            </method>
            <method name="removeThreadInfo" type="void" line="619">
                <params>
                    <param name="thread" type="ThreadReference"/>
                </params>
                <declaration name="info" type="ThreadInfo" line="620"/>
                <scope line="621"/>
            </method>
            <method name="notifyInterrupted" type="void" line="632">
                <declaration name="l" type="ArrayList&lt;SessionListener&gt;" line="633"/>
                <declaration name="evt" type="EventObject" line="634"/>
                <scope line="635"/>
            </method>
            <method name="notifyContinued" type="void" line="640">
                <declaration name="l" type="ArrayList&lt;SessionListener&gt;" line="641"/>
                <declaration name="evt" type="EventObject" line="642"/>
                <scope line="643"/>
            </method>
            <method name="notifySessionStart" type="void" line="648">
                <declaration name="l" type="ArrayList&lt;SessionListener&gt;" line="649"/>
                <declaration name="evt" type="EventObject" line="650"/>
                <scope line="651"/>
            </method>
            <method name="notifySessionDeath" type="void" line="656">
                <comment line="657">
                    noop for now
                    ArrayList&lt;SessionListener&gt; l = new ArrayList&lt;SessionListener&gt;(sessionListeners);
                    EventObject evt = new EventObject(this);
                    for (int i = 0; i &lt; l.size(); i++) {
                    ((SessionListener)l.get(i)).sessionDeath(evt);
                    }                    
                </comment>
            </method>
            <declaration name="inputLock" type="Object" line="672"/>
            <declaration name="inputBuffer" type="LinkedList&lt;String&gt;" line="673"/>
            <method name="resetInputBuffer" type="void" line="675">
                <scope line="676"/>
            </method>
            <method name="sendLineToApplication" type="void" line="681">
                <params>
                    <param name="line" type="String"/>
                </params>
                <scope line="682"/>
            </method>
            <declaration name="appInput" type="InputListener" line="688"/>
            <anonymous_class line="688">
                <method name="getLine" type="String" line="690">
                    <comment line="691">
                        Don&apos;t allow reader to be interrupted -- catch and retry.                        
                    </comment>
                    <comment line="703">
                        We must not be holding inputLock here, as the listener                        
                    </comment>
                    <comment line="704">
                        that we call to echo a line might call us re-entrantly                        
                    </comment>
                    <comment line="705">
                        to provide another line of input.                        
                    </comment>
                    <comment line="706">
                        Run in Swing event dispatcher thread.                        
                    </comment>
                    <declaration name="line" type="String" line="692"/>
                    <scope line="693">
                        <scope line="694">
                            <scope line="695">
                                <scope line="696"/>
                            </scope>
                            <scope line="700"/>
                        </scope>
                    </scope>
                    <declaration name="input" type="String" line="707"/>
                    <anonymous_class line="708">
                        <method name="run" type="void" line="710"/>
                    </anonymous_class>
                </method>
            </anonymous_class>
            <declaration name="newline" type="String" line="718"/>
            <method name="echoInputLine" type="void" line="720">
                <params>
                    <param name="line" type="String"/>
                </params>
                <declaration name="l" type="ArrayList&lt;OutputListener&gt;" line="721"/>
                <scope line="722">
                    <declaration name="ol" type="OutputListener" line="723"/>
                </scope>
            </method>
            <declaration name="appOutput" type="OutputListener" line="729"/>
            <anonymous_class line="729">
                <method name="putString" type="void" line="731">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                    <declaration name="l" type="ArrayList&lt;OutputListener&gt;" line="732"/>
                    <scope line="733"/>
                </method>
            </anonymous_class>
            <declaration name="appError" type="OutputListener" line="739"/>
            <anonymous_class line="739">
                <method name="putString" type="void" line="741">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                    <declaration name="l" type="ArrayList&lt;OutputListener&gt;" line="742"/>
                    <scope line="743"/>
                </method>
            </anonymous_class>
            <declaration name="diagnostics" type="OutputListener" line="749"/>
            <anonymous_class line="749">
                <method name="putString" type="void" line="751">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                    <declaration name="l" type="ArrayList&lt;OutputListener&gt;" line="752"/>
                    <scope line="753"/>
                </method>
            </anonymous_class>
            <declaration name="specList" type="EventRequestSpecList" line="761"/>
            <method name="createSourceLineBreakpoint" type="BreakpointSpec" line="764">
                <params>
                    <param name="sourceName" type="String"/>
                    <param name="line" type="int"/>
                </params>
            </method>
            <method name="createClassLineBreakpoint" type="BreakpointSpec" line="769">
                <params>
                    <param name="classPattern" type="String"/>
                    <param name="line" type="int"/>
                </params>
            </method>
            <method name="createMethodBreakpoint" type="BreakpointSpec" line="775">
                <params>
                    <param name="classPattern" type="String"/>
                    <param name="methodId" type="String"/>
                    <param name="methodArgs" type="List<String>"/>
                </params>
            </method>
            <method name="createExceptionIntercept" type="ExceptionSpec" line="783">
                <params>
                    <param name="classPattern" type="String"/>
                    <param name="notifyCaught" type="boolean"/>
                    <param name="notifyUncaught" type="boolean"/>
                </params>
            </method>
            <method name="createAccessWatchpoint" type="AccessWatchpointSpec" line="790">
                <params>
                    <param name="classPattern" type="String"/>
                    <param name="fieldId" type="String"/>
                </params>
            </method>
            <method name="createModificationWatchpoint" type="ModificationWatchpointSpec" line="795">
                <params>
                    <param name="classPattern" type="String"/>
                    <param name="fieldId" type="String"/>
                </params>
            </method>
            <method name="delete" type="void" line="800">
                <params>
                    <param name="spec" type="EventRequestSpec"/>
                </params>
            </method>
            <method name="resolve" type="void" line="804">
                <params>
                    <param name="refType" type="ReferenceType"/>
                </params>
            </method>
            <method name="install" type="void" line="808">
                <params>
                    <param name="spec" type="EventRequestSpec"/>
                </params>
            </method>
            <method name="eventRequestSpecs" type="List<EventRequestSpec>" line="812"/>
        </class>
    </source>