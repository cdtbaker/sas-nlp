<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.jdi"/>
        <class name="LocalVariableImpl" line="29">
            <extends class="MirrorImpl"/>
            <comment line="153">
                CompilersVMs can have byte code ranges for variables of the
                 same names that overlap. This is because the byte code ranges
                 aren&apos;t necessarily scopes; they may have more to do with the
                 lifetime of the variable&apos;s slot, depending on implementation.
                
                 This method determines whether this variable hides an
                 identically named variable; ie, their byte code ranges overlap
                 this one starts after the given one. If it returns true this
                 variable should be preferred when looking for a single variable
                 with its name when both variables are visible.                
            </comment>
            <implements interface="LocalVariable"/>
            <implements interface="ValueContainer"/>
            <declaration name="method" type="Method" line="32"/>
            <declaration name="slot" type="int" line="33"/>
            <declaration name="scopeStart" type="Location" line="34"/>
            <declaration name="scopeEnd" type="Location" line="35"/>
            <declaration name="name" type="String" line="36"/>
            <declaration name="signature" type="String" line="37"/>
            <declaration name="genericSignature" type="String" line="38"/>
            <method name="LocalVariableImpl" type="constructor" line="43">
                <params>
                    <param name="vm" type="VirtualMachine"/>
                    <param name="method" type="Method"/>
                    <param name="slot" type="int"/>
                    <param name="scopeStart" type="Location"/>
                    <param name="scopeEnd" type="Location"/>
                    <param name="name" type="String"/>
                    <param name="signature" type="String"/>
                    <param name="genericSignature" type="String"/>
                </params>
                <comment line="54">
                    The Spec says to return null for non-generic types                    
                </comment>
                <scope line="51"/>
                <scope line="53"/>
            </method>
            <method name="equals" type="boolean" line="59">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="60">
                    <declaration name="other" type="LocalVariableImpl" line="61"/>
                </scope>
                <scope line="66"/>
            </method>
            <method name="hashCode" type="int" line="71">
                <comment line="72">
                    TO DO: Better hash code                    
                </comment>
            </method>
            <method name="compareTo" type="int" line="78">
                <params>
                    <param name="object" type="LocalVariable"/>
                </params>
                <declaration name="other" type="LocalVariableImpl" line="79"/>
                <declaration name="rc" type="int" line="81"/>
                <scope line="82"/>
            </method>
            <method name="name" type="String" line="88"/>
            <javadoc line="92">
                @return a text representation of the declared type
                  of this variable.                
            </javadoc>
            <method name="typeName" type="String" line="96">
                <declaration name="parser" type="JNITypeParser" line="97"/>
            </method>
            <method name="type" type="Type" line="101"/>
            <method name="findType" type="Type" line="105">
                <params>
                    <param name="signature" type="String"/>
                </params>
                <declaration name="enclosing" type="ReferenceTypeImpl" line="106"/>
            </method>
            <method name="signature" type="String" line="110"/>
            <method name="genericSignature" type="String" line="114"/>
            <method name="isVisible" type="boolean" line="118">
                <params>
                    <param name="frame" type="StackFrame"/>
                </params>
                <comment line="127">
                    this is here to cover the possibility that we will                    
                </comment>
                <comment line="128">
                    allow LocalVariables for native methods.  If we do                    
                </comment>
                <comment line="129">
                    so we will have to re-examinine this.                    
                </comment>
                <declaration name="frameMethod" type="Method" line="120"/>
                <scope line="122"/>
                <scope line="130"/>
            </method>
            <method name="isArgument" type="boolean" line="138">
                <comment line="143">
                    If this variable object exists, there shouldn&apos;t be absent info                    
                </comment>
                <scope line="139">
                    <declaration name="method" type="MethodImpl" line="140"/>
                </scope>
                <scope line="142"/>
            </method>
            <method name="slot" type="int" line="148"/>
            <method name="hides" type="boolean" line="164">
                <params>
                    <param name="other" type="LocalVariable"/>
                </params>
                <declaration name="otherImpl" type="LocalVariableImpl" line="165"/>
                <scope line="167"/>
                <scope line="169"/>
            </method>
            <method name="toString" type="String" line="174"/>
        </class>
    </source>