<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.jdi"/>
        <import package="com.sun.jdi.connect"/>
        <import package="com.sun.jdi.connect.spi"/>
        <import package="java.net"/>
        <import package="java.io"/>
        <import package="java.util.Map"/>
        <import package="java.util.ResourceBundle"/>
        <class name="SocketTransportService" line="41">
            <extends class="TransportService"/>
            <comment line="244">
                Listen on the specified address and port. Return a listener
                 that encapsulates the ServerSocket.                
            </comment>
            <declaration name="messages" type="ResourceBundle" line="42"/>
            <class name="SocketListenKey" line="44">
                <extends class="ListenKey"/>
                <comment line="60">
                    Returns the string representation of the address that this
                     listen key represents.                    
                </comment>
                <javadoc line="44">
                    The listener returned by startListening encapsulates
                      the ServerSocket.                    
                </javadoc>
                <declaration name="ss" type="ServerSocket" line="49"/>
                <method name="SocketListenKey" type="constructor" line="51">
                    <params>
                        <param name="ss" type="ServerSocket"/>
                    </params>
                </method>
                <method name="socket" type="ServerSocket" line="55"/>
                <method name="address" type="String" line="63">
                    <comment line="67">
                        If bound to the wildcard address then use current local
                         hostname. In the event that we don&apos;t know our own hostname
                         then assume that host supports IPv4 and return something to
                         represent the loopback address.                        
                    </comment>
                    <comment line="86">
                        Now decide if we return a hostname or IP address. Where possible
                         return a hostname but in the case that we are bound to an
                         address that isn&apos;t registered in the name service then we
                         return an address.                        
                    </comment>
                    <comment line="105">
                        Finally return &quot;hostname:port&quot;, &quot;ipv4-address:port&quot; or
                         &quot;[ipv6-address]:port&quot;.                        
                    </comment>
                    <declaration name="address" type="InetAddress" line="64"/>
                    <scope line="72">
                        <scope line="73"/>
                        <scope line="75">
                            <declaration name="loopback" type="byte[]" line="76"/>
                            <scope line="77"/>
                            <scope line="79"/>
                        </scope>
                    </scope>
                    <declaration name="result" type="String" line="91"/>
                    <declaration name="hostname" type="String" line="92"/>
                    <declaration name="hostaddr" type="String" line="93"/>
                    <scope line="94">
                        <scope line="95"/>
                        <scope line="97"/>
                    </scope>
                    <scope line="100"/>
                </method>
                <method name="toString" type="String" line="111"/>
            </class>
            <javadoc line="116">
                Handshake with the debuggee                
            </javadoc>
            <method name="handshake" type="void" line="119">
                <params>
                    <param name="s" type="Socket"/>
                    <param name="timeout" type="long"/>
                </params>
                <comment line="147">
                    disable read timeout                    
                </comment>
                <declaration name="hello" type="byte[]" line="122"/>
                <declaration name="b" type="byte[]" line="125"/>
                <declaration name="received" type="int" line="126"/>
                <scope line="127">
                    <declaration name="n" type="int" line="128"/>
                    <scope line="129"/>
                    <scope line="131"/>
                    <scope line="134"/>
                </scope>
                <scope line="140">
                    <scope line="141"/>
                </scope>
            </method>
            <javadoc line="150">
                No-arg constructor                
            </javadoc>
            <method name="SocketTransportService" type="constructor" line="153"/>
            <javadoc line="156">
                The name of this transport service                
            </javadoc>
            <method name="name" type="String" line="159"/>
            <javadoc line="163">
                Return localized description of this transport service                
            </javadoc>
            <method name="description" type="String" line="166">
                <scope line="167">
                    <scope line="168"/>
                </scope>
            </method>
            <javadoc line="175">
                Return the capabilities of this transport service                
            </javadoc>
            <method name="capabilities" type="Capabilities" line="178"/>
            <javadoc line="183">
                Attach to the specified address with optional attach and handshake
                  timeout.                
            </javadoc>
            <method name="attach" type="Connection" line="188">
                <params>
                    <param name="address" type="String"/>
                    <param name="attachTimeout" type="long"/>
                    <param name="handshakeTimeout" type="long"/>
                </params>
                <comment line="218">
                    open TCP connection to VM                    
                </comment>
                <comment line="231">
                    handshake with the target VM                    
                </comment>
                <scope line="190"/>
                <scope line="193"/>
                <declaration name="splitIndex" type="int" line="197"/>
                <declaration name="host" type="String" line="198"/>
                <declaration name="portStr" type="String" line="199"/>
                <scope line="200"/>
                <scope line="203"/>
                <declaration name="port" type="int" line="208"/>
                <scope line="209"/>
                <scope line="211"/>
                <declaration name="sa" type="InetSocketAddress" line="219"/>
                <declaration name="s" type="Socket" line="220"/>
                <scope line="221"/>
                <scope line="223">
                    <scope line="224"/>
                    <scope line="226"/>
                </scope>
                <scope line="231"/>
                <scope line="233">
                    <scope line="234"/>
                    <scope line="236"/>
                </scope>
            </method>
            <method name="startListening" type="ListenKey" line="247">
                <params>
                    <param name="localaddress" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <declaration name="sa" type="InetSocketAddress" line="248"/>
                <scope line="249"/>
                <scope line="251"/>
                <declaration name="ss" type="ServerSocket" line="254"/>
            </method>
            <javadoc line="259">
                Listen on the specified address                
            </javadoc>
            <method name="startListening" type="ListenKey" line="262">
                <params>
                    <param name="address" type="String"/>
                </params>
                <comment line="264">
                    use ephemeral port if address isn&apos;t specified.                    
                </comment>
                <scope line="264"/>
                <declaration name="splitIndex" type="int" line="268"/>
                <declaration name="localaddr" type="String" line="269"/>
                <scope line="270"/>
                <declaration name="port" type="int" line="275"/>
                <scope line="276"/>
                <scope line="278"/>
            </method>
            <javadoc line="286">
                Listen on the default address                
            </javadoc>
            <method name="startListening" type="ListenKey" line="289"/>
            <javadoc line="293">
                Stop the listener                
            </javadoc>
            <method name="stopListening" type="void" line="296">
                <params>
                    <param name="listener" type="ListenKey"/>
                </params>
                <comment line="305">
                    if the ServerSocket has been closed it means
                     the listener is invalid                    
                </comment>
                <scope line="297"/>
                <scope line="301">
                    <declaration name="ss" type="ServerSocket" line="302"/>
                    <scope line="306"/>
                </scope>
            </method>
            <javadoc line="313">
                Accept a connection from a debuggee and handshake with it.                
            </javadoc>
            <method name="accept" type="Connection" line="316">
                <params>
                    <param name="listener" type="ListenKey"/>
                    <param name="acceptTimeout" type="long"/>
                    <param name="handshakeTimeout" type="long"/>
                </params>
                <comment line="326">
                    obtain the ServerSocket from the listener - if the
                     socket is closed it means the listener is invalid                    
                </comment>
                <comment line="335">
                    from here onwards it&apos;s possible that the ServerSocket
                     may be closed by a call to stopListening - that&apos;s okay
                     because the ServerSocket methods will throw an
                     IOException indicating the socket is closed.
                    
                     Additionally, it&apos;s possible that another thread calls accept
                     with a different accept timeout - that creates a same race
                     condition between setting the timeout and calling accept.
                     As it is such an unlikely scenario (requires both threads
                     to be using the same listener we&apos;ve chosen to ignore the issue).                    
                </comment>
                <comment line="354">
                    handshake here                    
                </comment>
                <scope line="317"/>
                <scope line="320"/>
                <declaration name="ss" type="ServerSocket" line="323"/>
                <scope line="327">
                    <scope line="329"/>
                </scope>
                <declaration name="s" type="Socket" line="346"/>
                <scope line="347"/>
                <scope line="349"/>
            </method>
            <method name="toString" type="String" line="359"/>
        </class>
        <class name="SocketConnection" line="368">
            <extends class="Connection"/>
            <comment line="244">
                Listen on the specified address and port. Return a listener
                 that encapsulates the ServerSocket.                
            </comment>
            <declaration name="socket" type="Socket" line="369"/>
            <declaration name="closed" type="boolean" line="370"/>
            <declaration name="socketOutput" type="OutputStream" line="371"/>
            <declaration name="socketInput" type="InputStream" line="372"/>
            <declaration name="receiveLock" type="Object" line="373"/>
            <declaration name="sendLock" type="Object" line="374"/>
            <declaration name="closeLock" type="Object" line="375"/>
            <method name="SocketConnection" type="constructor" line="377">
                <params>
                    <param name="socket" type="Socket"/>
                </params>
            </method>
            <method name="close" type="void" line="384">
                <scope line="385">
                    <scope line="386"/>
                </scope>
            </method>
            <method name="isOpen" type="boolean" line="396">
                <scope line="397"/>
            </method>
            <method name="readPacket" type="byte[]" line="402">
                <comment line="410">
                    length                    
                </comment>
                <comment line="424">
                    EOF                    
                </comment>
                <scope line="403"/>
                <scope line="406">
                    <declaration name="b1" type="int" line="407"/>
                    <scope line="410"/>
                    <scope line="415">
                        <scope line="416"/>
                        <scope line="418"/>
                    </scope>
                    <scope line="424"/>
                    <scope line="428"/>
                    <declaration name="len" type="int" line="432"/>
                    <scope line="434"/>
                    <declaration name="b" type="byte" line="438"/>
                    <declaration name="off" type="int" line="444"/>
                    <scope line="447">
                        <declaration name="count" type="int" line="448"/>
                        <scope line="449"/>
                        <scope line="451">
                            <scope line="452"/>
                            <scope line="454"/>
                        </scope>
                        <scope line="458"/>
                    </scope>
                </scope>
            </method>
            <method name="writePacket" type="void" line="469">
                <params>
                    <param name="b" type="byte"/>
                </params>
                <comment line="475">
                    Check the packet size                    
                </comment>
                <comment line="490">
                    Check that the byte array contains the complete packet                    
                </comment>
                <comment line="499">
                    Send the packet (ignoring any bytes that follow
                     the packet in the byte array).                    
                </comment>
                <scope line="470"/>
                <scope line="477"/>
                <declaration name="b0" type="int" line="480"/>
                <declaration name="b1" type="int" line="481"/>
                <declaration name="b2" type="int" line="482"/>
                <declaration name="b3" type="int" line="483"/>
                <declaration name="len" type="int" line="484"/>
                <scope line="485"/>
                <scope line="492"/>
                <scope line="496">
                    <scope line="497"/>
                    <scope line="503">
                        <scope line="504"/>
                        <scope line="506"/>
                    </scope>
                </scope>
            </method>
        </class>
        <class name="SocketTransportServiceCapabilities" line="518">
            <extends class="TransportService.Capabilities"/>
            <comment line="244">
                Listen on the specified address and port. Return a listener
                 that encapsulates the ServerSocket.                
            </comment>
            <method name="supportsMultipleConnections" type="boolean" line="520"/>
            <method name="supportsAttachTimeout" type="boolean" line="524"/>
            <method name="supportsAcceptTimeout" type="boolean" line="528"/>
            <method name="supportsHandshakeTimeout" type="boolean" line="532"/>
        </class>
    </source>