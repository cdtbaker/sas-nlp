<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.extcheck">
        <import package="java.util"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.util.Vector"/>
        <import package="java.io"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.net.URL"/>
        <import package="java.util.jar.JarFile"/>
        <import package="java.util.jar.JarEntry"/>
        <import package="java.util.jar.Manifest"/>
        <import package="java.util.jar.Attributes"/>
        <import package="java.util.jar.Attributes.Name"/>
        <import package="java.net.URLConnection"/>
        <import package="java.security.Permission"/>
        <import package="java.util.jar"/>
        <import package="java.net.JarURLConnection"/>
        <import package="sun.net.www.ParseUtil"/>
        <class name="ExtCheck" line="45">
            <comment line="59">
                The following strings hold the values of the version variables                
            </comment>
            <comment line="60">
                for the target jar file                
            </comment>
            <comment line="69">
                                
            </comment>
            <comment line="72">
                Create a new instance of the jar reporting tool for a particular
                 targetFile.
                 @param targetFile is the file to compare against.
                 @param verbose indicates whether to dump filenames and manifest
                                information (on conflict) to the standard output.                
            </comment>
            <javadoc line="45">
                ExtCheck reports on clashes between a specified (target)
                  jar file and jar files already installed in the extensions
                  directory.                
                <author>
                    Benedict Gomes                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="56"/>
            <declaration name="targetSpecTitle" type="String" line="60"/>
            <declaration name="targetSpecVersion" type="String" line="61"/>
            <declaration name="targetSpecVendor" type="String" line="62"/>
            <declaration name="targetImplTitle" type="String" line="63"/>
            <declaration name="targetImplVersion" type="String" line="64"/>
            <declaration name="targetImplVendor" type="String" line="65"/>
            <declaration name="targetsealed" type="String" line="66"/>
            <declaration name="verboseFlag" type="boolean" line="69"/>
            <method name="create" type="ExtCheck" line="78">
                <params>
                    <param name="targetFile" type="File"/>
                    <param name="verbose" type="boolean"/>
                </params>
            </method>
            <method name="ExtCheck" type="constructor" line="82">
                <params>
                    <param name="targetFile" type="File"/>
                    <param name="verbose" type="boolean"/>
                </params>
            </method>
            <method name="investigateTarget" type="void" line="88">
                <params>
                    <param name="targetFile" type="File"/>
                </params>
                <declaration name="targetManifest" type="Manifest" line="90"/>
                <scope line="91">
                    <declaration name="canon" type="File" line="92"/>
                    <declaration name="url" type="URL" line="93"/>
                    <scope line="94">
                        <declaration name="loader" type="JarLoader" line="95"/>
                        <declaration name="jarFile" type="JarFile" line="96"/>
                    </scope>
                </scope>
                <scope line="99"/>
                <scope line="101"/>
                <declaration name="attr" type="Attributes" line="106"/>
                <scope line="107"/>
                <scope line="115"/>
            </method>
            <javadoc line="133">
                Verify that none of the jar files in the install directory
                  has the same specification-title and the same or a newer
                  specification-version.                
                <return>
                    Return true if the target jar file is newer
                      than any installed jar file with the same specification-title,
                      otherwise return false                    
                </return>
            </javadoc>
            <method name="checkInstalledAgainstTarget" type="boolean" line="142">
                <declaration name="s" type="String" line="143"/>
                <declaration name="dirs" type="File[]" line="144"/>
                <scope line="145">
                    <declaration name="st" type="StringTokenizer" line="146"/>
                    <declaration name="count" type="int" line="148"/>
                    <scope line="150"/>
                </scope>
                <scope line="153"/>
                <declaration name="result" type="boolean" line="157"/>
                <scope line="158">
                    <declaration name="files" type="String[]" line="159"/>
                    <scope line="160">
                        <scope line="161">
                            <scope line="162">
                                <declaration name="f" type="File" line="163"/>
                                <declaration name="canon" type="File" line="164"/>
                                <declaration name="url" type="URL" line="165"/>
                                <scope line="166"/>
                            </scope>
                            <scope line="169"/>
                            <scope line="171"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="177"/>
                <scope line="179"/>
            </method>
            <javadoc line="186">
                Recursively verify that a jar file, and any urls mentioned
                  in its class path, do not conflict with the target jar file.                
                <param>
                    indent is the current nesting level                    
                </param>
                <param>
                    url is the path to the jar file being checked.                    
                </param>
                <return>
                    true if there is no newer URL, otherwise false                    
                </return>
            </javadoc>
            <method name="checkURLRecursively" type="boolean" line="196">
                <params>
                    <param name="indent" type="int"/>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="jarloader" type="JarLoader" line="198"/>
                <declaration name="j" type="JarFile" line="199"/>
                <declaration name="man" type="Manifest" line="200"/>
                <scope line="201">
                    <declaration name="attr" type="Attributes" line="202"/>
                    <scope line="203">
                        <declaration name="title" type="String" line="204"/>
                        <declaration name="version" type="String" line="205"/>
                        <declaration name="vendor" type="String" line="206"/>
                        <declaration name="implTitle" type="String" line="207"/>
                        <declaration name="implVersion" type="String" line="208"/>
                        <declaration name="implVendor" type="String" line="210"/>
                        <declaration name="sealed" type="String" line="211"/>
                        <scope line="212">
                            <scope line="213">
                                <scope line="214">
                                    <scope line="216"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="result" type="boolean" line="238"/>
                <declaration name="loaderList" type="URL[]" line="239"/>
                <scope line="240">
                    <scope line="241">
                        <scope line="242">
                            <declaration name="res" type="boolean" line="243"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="251">
                See comment in method java.lang.Package.isCompatibleWith.
                  Return true if already is not older than target. i.e. the
                  target file may be superseded by a file already installed                
            </javadoc>
            <method name="isNotOlderThan" type="boolean" line="258">
                <params>
                    <param name="already" type="String"/>
                    <param name="target" type="String"/>
                </params>
                <comment line="263">
                    Until it matches scan and compare numbers                    
                </comment>
                <comment line="280">
                    Known to be incompatible                    
                </comment>
                <comment line="282">
                    Known to be compatible                    
                </comment>
                <comment line="284">
                    Check for and absorb separators                    
                </comment>
                <comment line="289">
                    Compare next component                    
                </comment>
                <comment line="291">
                    All components numerically equal                    
                </comment>
                <scope line="259"/>
                <declaration name="dtok" type="StringTokenizer" line="264"/>
                <declaration name="stok" type="StringTokenizer" line="265"/>
                <scope line="266">
                    <declaration name="dver" type="int" line="267"/>
                    <declaration name="sver" type="int" line="268"/>
                    <scope line="269"/>
                    <scope line="274"/>
                </scope>
            </method>
            <javadoc line="296">
                Prints out message if the verboseFlag is set                
            </javadoc>
            <method name="verboseMessage" type="void" line="299">
                <params>
                    <param name="message" type="String"/>
                </params>
                <scope line="300"/>
            </method>
            <method name="generalMessage" type="void" line="305">
                <params>
                    <param name="message" type="String"/>
                </params>
            </method>
            <javadoc line="309">
                Throws a RuntimeException with a message describing the error.                
            </javadoc>
            <method name="error" type="void" line="312">
                <params>
                    <param name="message" type="String"/>
                </params>
            </method>
            <class name="JarLoader" line="317">
                <comment line="328">
                    Creates a new Loader for the specified URL.                    
                </comment>
                <comment line="347">
                    Returns the base URL for this Loader.                    
                </comment>
                <comment line="374">
                    Returns the JAR file local class path, or null if none.                    
                </comment>
                <comment line="391">
                    Parses value of the Class-Path manifest attribute and returns
                     an array of URLs relative to the specified base URL.                    
                </comment>
                <javadoc line="317">
                    Inner class used to represent a loader of resources and classes
                      from a base URL. Somewhat modified version of code in
                      sun.misc.URLClassPath.JarLoader                    
                </javadoc>
                <declaration name="base" type="URL" line="323"/>
                <declaration name="jar" type="JarFile" line="324"/>
                <declaration name="csu" type="URL" line="325"/>
                <method name="JarLoader" type="constructor" line="330">
                    <params>
                        <param name="url" type="URL"/>
                    </params>
                    <declaration name="urlName" type="String" line="331"/>
                    <declaration name="tmpBaseURL" type="URL" line="332"/>
                    <scope line="333"/>
                    <scope line="337"/>
                    <scope line="339"/>
                </method>
                <method name="getBaseURL" type="URL" line="349"/>
                <method name="getJarFile" type="JarFile" line="353"/>
                <method name="findJarFile" type="JarFile" line="357">
                    <params>
                        <param name="url" type="URL"/>
                    </params>
                    <comment line="358">
                        Optimize case where url refers to a local jar file                        
                    </comment>
                    <comment line="368">
                        uc.setRequestProperty(USER_AGENT_JAVA_VERSION, JAVA_VERSION);                        
                    </comment>
                    <scope line="359">
                        <declaration name="path" type="String" line="360"/>
                        <declaration name="file" type="File" line="361"/>
                        <scope line="362"/>
                    </scope>
                    <declaration name="uc" type="URLConnection" line="367"/>
                </method>
                <method name="getClassPath" type="URL[]" line="376">
                    <declaration name="man" type="Manifest" line="377"/>
                    <scope line="378">
                        <declaration name="attr" type="Attributes" line="379"/>
                        <scope line="380">
                            <declaration name="value" type="String" line="381"/>
                            <scope line="382"/>
                        </scope>
                    </scope>
                </method>
                <method name="parseClassPath" type="URL[]" line="396">
                    <params>
                        <param name="base" type="URL"/>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="st" type="StringTokenizer" line="397"/>
                    <declaration name="urls" type="URL[]" line="398"/>
                    <declaration name="i" type="int" line="399"/>
                    <scope line="400">
                        <declaration name="path" type="String" line="401"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>