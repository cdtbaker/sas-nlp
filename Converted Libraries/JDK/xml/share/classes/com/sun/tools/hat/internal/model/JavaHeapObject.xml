<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.hat.internal.model">
        <import package="java.util.Enumeration"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="com.sun.tools.hat.internal.util.Misc"/>
        <class name="JavaHeapObject" line="46">
            <extends class="JavaThing"/>
            <comment line="56">
                                
            </comment>
            <comment line="57">
                Who we refer to.  This is heavily optimized for space, because it&apos;s                
            </comment>
            <comment line="58">
                well worth trading a bit of speed for less swapping.                
            </comment>
            <comment line="59">
                referers and referersLen go through two phases:  Building and                
            </comment>
            <comment line="60">
                resolved.  When building, referers might have duplicates, but can                
            </comment>
            <comment line="61">
                be appended to.  When resolved, referers has no duplicates or                
            </comment>
            <comment line="62">
                empty slots.                
            </comment>
            <comment line="63">
                                
            </comment>
            <comment line="65">
                -1 when resolved                
            </comment>
            <comment line="82">
                                
            </comment>
            <comment line="83">
                Eliminate duplicates from referers, and size the array exactly.                
            </comment>
            <comment line="84">
                This sets us up to answer queries.  See the comments around the                
            </comment>
            <comment line="85">
                referers data member for details.                
            </comment>
            <comment line="86">
                                
            </comment>
            <javadoc line="46">
                Represents an object that&apos;s allocated out of the Java heap.  It occupies
                  memory in the VM, and is the sort of thing that in a JDK 1.1 VM had
                  a handle.  It can be a
                  JavaClass, a JavaObjectArray, a JavaValueArray or a JavaObject.                
            </javadoc>
            <declaration name="referers" type="JavaThing[]" line="63"/>
            <declaration name="referersLen" type="int" line="64"/>
            <method name="getClazz" type="JavaClass" line="66"/>
            <method name="getSize" type="int" line="67"/>
            <method name="getId" type="long" line="68"/>
            <javadoc line="70">
                Do any initialization this thing needs after its data is read in.
                  Subclasses that override this should call super.resolve().                
            </javadoc>
            <method name="resolve" type="void" line="74">
                <params>
                    <param name="snapshot" type="Snapshot"/>
                </params>
                <declaration name="trace" type="StackTrace" line="75"/>
                <scope line="76"/>
            </method>
            <method name="setupReferers" type="void" line="86">
                <comment line="88">
                    Copy referers to map, screening out duplicates                    
                </comment>
                <comment line="96">
                    Now copy into the array                    
                </comment>
                <scope line="87">
                    <declaration name="map" type="Map&lt;JavaThing,JavaThing&gt;" line="89"/>
                    <scope line="90">
                        <scope line="91"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="104">
                @return the id of this thing as hex string                
            </javadoc>
            <method name="getIdString" type="String" line="107"/>
            <method name="toString" type="String" line="111"/>
            <javadoc line="115">
                @return the StackTrace of the point of allocation of this object,
                  or null if unknown                
            </javadoc>
            <method name="getAllocatedFrom" type="StackTrace" line="119"/>
            <method name="isNew" type="boolean" line="123"/>
            <method name="setNew" type="void" line="127">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <javadoc line="131">
                Tell the visitor about all of the objects we refer to                
            </javadoc>
            <method name="visitReferencedObjects" type="void" line="134">
                <params>
                    <param name="v" type="JavaHeapObjectVisitor"/>
                </params>
            </method>
            <method name="addReferenceFrom" type="void" line="138">
                <params>
                    <param name="other" type="JavaHeapObject"/>
                </params>
                <comment line="140">
                    It was null                    
                </comment>
                <comment line="147">
                    We just append to referers here.  Measurements have shown that                    
                </comment>
                <comment line="148">
                    around 10% to 30% are duplicates, so it&apos;s better to just append                    
                </comment>
                <comment line="149">
                    blindly and screen out all the duplicates at once.                    
                </comment>
                <scope line="139"/>
                <scope line="141">
                    <declaration name="copy" type="JavaThing[]" line="142"/>
                </scope>
            </method>
            <method name="addReferenceFromRoot" type="void" line="152">
                <params>
                    <param name="r" type="Root"/>
                </params>
            </method>
            <javadoc line="156">
                If the rootset includes this object, return a Root describing one
                  of the reasons why.                
            </javadoc>
            <method name="getRoot" type="Root" line="160"/>
            <javadoc line="164">
                Tell who refers to us.                
                <return>
                    an Enumeration of JavaHeapObject instances                    
                </return>
            </javadoc>
            <method name="getReferers" type="Enumeration" line="169">
                <scope line="170"/>
                <anonymous_class line="173">
                    <declaration name="num" type="int" line="175"/>
                    <method name="hasMoreElements" type="boolean" line="177"/>
                    <method name="nextElement" type="Object" line="181"/>
                </anonymous_class>
            </method>
            <javadoc line="187">
                Given other, which the caller promises is in referers, determines if
                  the reference is only a weak reference.                
            </javadoc>
            <method name="refersOnlyWeaklyTo" type="boolean" line="191">
                <params>
                    <param name="ss" type="Snapshot"/>
                    <param name="other" type="JavaThing"/>
                </params>
            </method>
            <javadoc line="195">
                Describe the reference that this thing has to target.  This will only
                  be called if target is in the array returned by getChildrenForRootset.                
            </javadoc>
            <method name="describeReferenceTo" type="String" line="199">
                <params>
                    <param name="target" type="JavaThing"/>
                    <param name="ss" type="Snapshot"/>
                </params>
            </method>
            <method name="isHeapAllocated" type="boolean" line="203"/>
        </class>
    </source>