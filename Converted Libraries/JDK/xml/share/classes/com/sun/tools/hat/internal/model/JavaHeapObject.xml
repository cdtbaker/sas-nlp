<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.hat.internal.model">
        <import package="java.util.Enumeration"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="com.sun.tools.hat.internal.util.Misc"/>
        <class name="JavaHeapObject" line="6">
            <extends class="JavaThing"/>
            <javadoc line="6">
                Represents an object that&apos;s allocated out of the Java heap.  It occupies
                  memory in the VM, and is the sort of thing that in a JDK 1.1 VM had
                  a handle.  It can be a
                  JavaClass, a JavaObjectArray, a JavaValueArray or a JavaObject.                
            </javadoc>
            <declaration name="referers" type="JavaThing[]" line="13"/>
            <declaration name="referersLen" type="int" line="14"/>
            <method name="getClazz" type="JavaClass" line="15"/>
            <method name="getSize" type="int" line="16"/>
            <method name="getId" type="long" line="17"/>
            <javadoc line="18">
                Do any initialization this thing needs after its data is read in.
                  Subclasses that override this should call super.resolve().                
            </javadoc>
            <method name="resolve" type="void" line="22">
                <params>
                    <param name="snapshot" type="Snapshot"/>
                </params>
                <declaration name="trace" type="StackTrace" line="23"/>
                <scope line="24"/>
            </method>
            <method name="setupReferers" type="void" line="28">
                <scope line="29">
                    <declaration name="map" type="Map&lt;JavaThing,JavaThing&gt;" line="30"/>
                    <scope line="31">
                        <scope line="32"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="41">
                @return the id of this thing as hex string                
            </javadoc>
            <method name="getIdString" type="String" line="44"/>
            <method name="toString" type="String" line="47"/>
            <javadoc line="50">
                @return the StackTrace of the point of allocation of this object,
                  or null if unknown                
            </javadoc>
            <method name="getAllocatedFrom" type="StackTrace" line="54"/>
            <method name="isNew" type="boolean" line="57"/>
            <method name="setNew" type="void" line="60">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <javadoc line="63">
                Tell the visitor about all of the objects we refer to                
            </javadoc>
            <method name="visitReferencedObjects" type="void" line="66">
                <params>
                    <param name="v" type="JavaHeapObjectVisitor"/>
                </params>
            </method>
            <method name="addReferenceFrom" type="void" line="69">
                <params>
                    <param name="other" type="JavaHeapObject"/>
                </params>
                <scope line="70"/>
                <scope line="73">
                    <declaration name="copy" type="JavaThing[]" line="74"/>
                </scope>
            </method>
            <method name="addReferenceFromRoot" type="void" line="80">
                <params>
                    <param name="r" type="Root"/>
                </params>
            </method>
            <javadoc line="83">
                If the rootset includes this object, return a Root describing one
                  of the reasons why.                
            </javadoc>
            <method name="getRoot" type="Root" line="87"/>
            <javadoc line="90">
                Tell who refers to us.                
                <return>
                    an Enumeration of JavaHeapObject instances                    
                </return>
            </javadoc>
            <method name="getReferers" type="Enumeration" line="94">
                <scope line="95"/>
                <anonymous_class line="98">
                    <declaration name="num" type="int" line="99"/>
                    <method name="hasMoreElements" type="boolean" line="100"/>
                    <method name="nextElement" type="Object" line="103"/>
                </anonymous_class>
            </method>
            <javadoc line="109">
                Given other, which the caller promises is in referers, determines if
                  the reference is only a weak reference.                
            </javadoc>
            <method name="refersOnlyWeaklyTo" type="boolean" line="113">
                <params>
                    <param name="ss" type="Snapshot"/>
                    <param name="other" type="JavaThing"/>
                </params>
            </method>
            <javadoc line="116">
                Describe the reference that this thing has to target.  This will only
                  be called if target is in the array returned by getChildrenForRootset.                
            </javadoc>
            <method name="describeReferenceTo" type="String" line="120">
                <params>
                    <param name="target" type="JavaThing"/>
                    <param name="ss" type="Snapshot"/>
                </params>
            </method>
            <method name="isHeapAllocated" type="boolean" line="123"/>
        </class>
    </source>