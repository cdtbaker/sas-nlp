<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tools.jdi">
        <import package="com.sun.jdi"/>
        <import package="java.util"/>
        <import package="java.lang.ref.SoftReference"/>
        <class name="ReferenceTypeImpl" line="33">
            <extends class="TypeImpl"/>
            <comment line="65">
                                
            </comment>
            <comment line="68">
                                
            </comment>
            <comment line="71">
                bits set when initialization was attempted (succeeded or failed)                
            </comment>
            <comment line="509">
                Utility method used by subclasses to build lists of visible
                 methods.                
            </comment>
            <comment line="1038">
                Does not need synchronization, since worst-case                
            </comment>
            <comment line="1039">
                static info is fetched twice                
            </comment>
            <comment line="1086">
                Return true if an instance of this type
                 can be assigned to a variable of the given type                
            </comment>
            <implements interface="ReferenceType"/>
            <declaration name="ref" type="long" line="35"/>
            <declaration name="signature" type="String" line="36"/>
            <declaration name="genericSignature" type="String" line="37"/>
            <declaration name="genericSignatureGotten" type="boolean" line="38"/>
            <declaration name="baseSourceName" type="String" line="39"/>
            <declaration name="baseSourceDir" type="String" line="40"/>
            <declaration name="baseSourcePath" type="String" line="41"/>
            <declaration name="modifiers" type="int" line="42"/>
            <declaration name="fieldsRef" type="SoftReference&lt;List&lt;Field&gt;&gt;" line="43"/>
            <declaration name="methodsRef" type="SoftReference&lt;List&lt;Method&gt;&gt;" line="44"/>
            <declaration name="sdeRef" type="SoftReference&lt;SDE&gt;" line="45"/>
            <declaration name="isClassLoaderCached" type="boolean" line="47"/>
            <declaration name="classLoader" type="ClassLoaderReference" line="48"/>
            <declaration name="classObject" type="ClassObjectReference" line="49"/>
            <declaration name="status" type="int" line="51"/>
            <declaration name="isPrepared" type="boolean" line="52"/>
            <declaration name="versionNumberGotten" type="boolean" line="55"/>
            <declaration name="majorVersion" type="int" line="56"/>
            <declaration name="minorVersion" type="int" line="57"/>
            <declaration name="constantPoolInfoGotten" type="boolean" line="59"/>
            <declaration name="constanPoolCount" type="int" line="60"/>
            <declaration name="constantPoolBytes" type="byte[]" line="61"/>
            <declaration name="constantPoolBytesRef" type="SoftReference&lt;byte[]&gt;" line="62"/>
            <declaration name="ABSENT_BASE_SOURCE_NAME" type="String" line="65"/>
            <declaration name="NO_SDE_INFO_MARK" type="SDE" line="68"/>
            <declaration name="INITIALIZED_OR_FAILED" type="int" line="71"/>
            <method name="ReferenceTypeImpl" type="constructor" line="75">
                <params>
                    <param name="aVm" type="VirtualMachine"/>
                    <param name="aRef" type="long"/>
                </params>
            </method>
            <method name="noticeRedefineClass" type="void" line="81">
                <comment line="82">
                    Invalidate information previously fetched and cached.                    
                </comment>
                <comment line="83">
                    These will be refreshed later on demand.                    
                </comment>
            </method>
            <method name="getMethodMirror" type="Method" line="94">
                <params>
                    <param name="ref" type="long"/>
                </params>
                <comment line="96">
                    obsolete method                    
                </comment>
                <comment line="99">
                    Fetch all methods for the class, check performance impact                    
                </comment>
                <comment line="100">
                    Needs no synchronization now, since methods() returns                    
                </comment>
                <comment line="101">
                    unmodifiable local data                    
                </comment>
                <scope line="95"/>
                <declaration name="it" type="Iterator" line="102"/>
                <scope line="103">
                    <declaration name="method" type="MethodImpl" line="104"/>
                    <scope line="105"/>
                </scope>
            </method>
            <method name="getFieldMirror" type="Field" line="112">
                <params>
                    <param name="ref" type="long"/>
                </params>
                <comment line="113">
                    Fetch all fields for the class, check performance impact                    
                </comment>
                <comment line="114">
                    Needs no synchronization now, since fields() returns                    
                </comment>
                <comment line="115">
                    unmodifiable local data                    
                </comment>
                <declaration name="it" type="Iterator" line="116"/>
                <scope line="117">
                    <declaration name="field" type="FieldImpl" line="118"/>
                    <scope line="119"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="126">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="127">
                    <declaration name="other" type="ReferenceTypeImpl" line="128"/>
                </scope>
                <scope line="131"/>
            </method>
            <method name="hashCode" type="int" line="136"/>
            <method name="compareTo" type="int" line="140">
                <params>
                    <param name="object" type="ReferenceType"/>
                </params>
                <comment line="141">
                    Note that it is critical that compareTo() == 0
                     implies that equals() == true. Otherwise, TreeSet
                     will collapse classes.
                    
                     (Classes of the same name loaded by different class loaders
                     or in different VMs must not return 0).                    
                </comment>
                <comment line="154">
                    optimize for typical case: refs equal and VMs equal                    
                </comment>
                <comment line="156">
                    sequenceNumbers are always positive                    
                </comment>
                <declaration name="other" type="ReferenceTypeImpl" line="149"/>
                <declaration name="comp" type="int" line="150"/>
                <scope line="151">
                    <declaration name="rf1" type="long" line="152"/>
                    <declaration name="rf2" type="long" line="153"/>
                    <scope line="155"/>
                    <scope line="159"/>
                </scope>
            </method>
            <method name="signature" type="String" line="166">
                <comment line="168">
                    Does not need synchronization, since worst-case                    
                </comment>
                <comment line="169">
                    static info is fetched twice                    
                </comment>
                <comment line="171">
                    we might as well get both the signature and the
                     generic signature.                    
                </comment>
                <scope line="167">
                    <scope line="170"/>
                    <scope line="176">
                        <scope line="177"/>
                        <scope line="180"/>
                    </scope>
                </scope>
            </method>
            <method name="genericSignature" type="String" line="188">
                <comment line="189">
                    This gets both the signature and the generic signature                    
                </comment>
                <comment line="191">
                    Does not need synchronization, since worst-case                    
                </comment>
                <comment line="192">
                    static info is fetched twice                    
                </comment>
                <scope line="190">
                    <declaration name="result" type="JDWP.ReferenceType.SignatureWithGeneric" line="193"/>
                    <scope line="194"/>
                    <scope line="197"/>
                </scope>
            </method>
            <method name="classLoader" type="ClassLoaderReference" line="206">
                <comment line="208">
                    Does not need synchronization, since worst-case                    
                </comment>
                <comment line="209">
                    static info is fetched twice                    
                </comment>
                <scope line="207">
                    <scope line="210"/>
                    <scope line="215"/>
                </scope>
            </method>
            <method name="isPublic" type="boolean" line="222"/>
            <method name="isProtected" type="boolean" line="229"/>
            <method name="isPrivate" type="boolean" line="236"/>
            <method name="isPackagePrivate" type="boolean" line="243"/>
            <method name="isAbstract" type="boolean" line="247"/>
            <method name="isFinal" type="boolean" line="254"/>
            <method name="isStatic" type="boolean" line="261"/>
            <method name="isPrepared" type="boolean" line="268">
                <comment line="269">
                    This ref type may have been prepared before we were getting                    
                </comment>
                <comment line="270">
                    events, so get it once.  After that,                    
                </comment>
                <comment line="271">
                    this status flag is updated through the ClassPrepareEvent,                    
                </comment>
                <comment line="272">
                    there is no need for the expense of a JDWP query.                    
                </comment>
                <scope line="273"/>
            </method>
            <method name="isVerified" type="boolean" line="279">
                <comment line="280">
                    Once true, it never resets, so we don&apos;t need to update                    
                </comment>
                <scope line="281"/>
            </method>
            <method name="isInitialized" type="boolean" line="287">
                <comment line="288">
                    Once initialization succeeds or fails, it never resets,                    
                </comment>
                <comment line="289">
                    so we don&apos;t need to update                    
                </comment>
                <scope line="290"/>
            </method>
            <method name="failedToInitialize" type="boolean" line="296">
                <comment line="297">
                    Once initialization succeeds or fails, it never resets,                    
                </comment>
                <comment line="298">
                    so we don&apos;t need to update                    
                </comment>
                <scope line="299"/>
            </method>
            <method name="fields" type="List<Field>" line="305">
                <declaration name="fields" type="List&lt;Field&gt;" line="306"/>
                <scope line="307">
                    <scope line="308">
                        <declaration name="jdwpFields" type="JDWP.ReferenceType.FieldsWithGeneric.FieldInfo[]" line="309"/>
                        <scope line="310"/>
                        <scope line="312"/>
                        <scope line="316">
                            <declaration name="fi" type="JDWP.ReferenceType.FieldsWithGeneric.FieldInfo" line="317"/>
                            <declaration name="field" type="Field" line="320"/>
                        </scope>
                    </scope>
                    <scope line="326">
                        <declaration name="jdwpFields" type="JDWP.ReferenceType.Fields.FieldInfo[]" line="327"/>
                        <scope line="328"/>
                        <scope line="331"/>
                        <scope line="335">
                            <declaration name="fi" type="JDWP.ReferenceType.Fields.FieldInfo" line="336"/>
                            <declaration name="field" type="Field" line="338"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="inheritedTypes" type="List<? extends ReferenceType>" line="352"/>
            <method name="addVisibleFields" type="void" line="354">
                <params>
                    <param name="visibleList" type="List<Field>"/>
                    <param name="visibleTable" type="Map<String,Field>"/>
                    <param name="ambiguousNames" type="List<String>"/>
                </params>
                <comment line="367">
                    identical field from two branches; do nothing                    
                </comment>
                <scope line="355">
                    <declaration name="name" type="String" line="356"/>
                    <scope line="357">
                        <declaration name="duplicate" type="Field" line="358"/>
                        <scope line="359"/>
                        <scope line="362"/>
                        <scope line="366"/>
                    </scope>
                </scope>
            </method>
            <method name="visibleFields" type="List<Field>" line="373">
                <comment line="374">
                    Maintain two different collections of visible fields. The
                     list maintains a reasonable order for return. The
                     hash map provides an efficient way to lookup visible fields
                     by name, important for finding hidden or ambiguous fields.                    
                </comment>
                <comment line="383">
                                        
                </comment>
                <comment line="386">
                                        
                </comment>
                <comment line="390">
                    TO DO: Be defensive and check for cyclic interface inheritance                    
                </comment>
                <comment line="397">
                    Insert fields from this type, removing any inherited fields they
                     hide.                    
                </comment>
                <declaration name="visibleList" type="List&lt;Field&gt;" line="380"/>
                <declaration name="visibleTable" type="Map&lt;String,Field&gt;" line="381"/>
                <declaration name="ambiguousNames" type="List&lt;String&gt;" line="384"/>
                <declaration name="types" type="List&lt;? extends ReferenceType&gt;" line="387"/>
                <declaration name="iter" type="Iterator" line="388"/>
                <scope line="389">
                    <declaration name="type" type="ReferenceTypeImpl" line="393"/>
                </scope>
                <declaration name="retList" type="List&lt;Field&gt;" line="401"/>
                <scope line="402">
                    <declaration name="hidden" type="Field" line="403"/>
                    <scope line="404"/>
                </scope>
            </method>
            <method name="addAllFields" type="void" line="412">
                <params>
                    <param name="fieldList" type="List<Field>"/>
                    <param name="typeSet" type="Set<ReferenceType>"/>
                </params>
                <comment line="413">
                                        
                </comment>
                <comment line="417">
                                        
                </comment>
                <comment line="420">
                                        
                </comment>
                <scope line="414">
                    <declaration name="types" type="List&lt;? extends ReferenceType&gt;" line="421"/>
                    <declaration name="iter" type="Iterator" line="422"/>
                    <scope line="423">
                        <declaration name="type" type="ReferenceTypeImpl" line="424"/>
                    </scope>
                </scope>
            </method>
            <method name="allFields" type="List<Field>" line="429">
                <declaration name="fieldList" type="List&lt;Field&gt;" line="430"/>
                <declaration name="typeSet" type="Set&lt;ReferenceType&gt;" line="431"/>
            </method>
            <method name="fieldByName" type="Field" line="436">
                <params>
                    <param name="fieldName" type="String"/>
                </params>
                <comment line="449">
                    throw new NoSuchFieldException(&quot;Field &apos;&quot; + fieldName + &quot;&apos; not found in &quot; + name());                    
                </comment>
                <declaration name="searchList" type="java.util.List" line="437"/>
                <declaration name="f" type="Field" line="438"/>
                <scope line="442">
                    <scope line="445"/>
                </scope>
            </method>
            <method name="methods" type="List<Method>" line="453">
                <declaration name="methods" type="List&lt;Method&gt;" line="454"/>
                <scope line="455">
                    <scope line="456"/>
                    <scope line="458">
                        <declaration name="declared" type="JDWP.ReferenceType.MethodsWithGeneric.MethodInfo[]" line="459"/>
                        <scope line="460"/>
                        <scope line="463"/>
                        <scope line="467">
                            <declaration name="mi" type="JDWP.ReferenceType.MethodsWithGeneric.MethodInfo" line="468"/>
                            <declaration name="method" type="Method" line="471"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="methods1_4" type="List<Method>" line="485">
                <declaration name="methods" type="List&lt;Method&gt;" line="486"/>
                <declaration name="declared" type="JDWP.ReferenceType.Methods.MethodInfo[]" line="487"/>
                <scope line="488"/>
                <scope line="491"/>
                <scope line="495">
                    <declaration name="mi" type="JDWP.ReferenceType.Methods.MethodInfo" line="496"/>
                    <declaration name="method" type="Method" line="498"/>
                </scope>
            </method>
            <method name="addToMethodMap" type="void" line="512">
                <params>
                    <param name="methodMap" type="Map<String,Method>"/>
                    <param name="methodList" type="List<Method>"/>
                </params>
            </method>
            <method name="addVisibleMethods" type="void" line="517"/>
            <method name="visibleMethods" type="List<Method>" line="519">
                <comment line="520">
                    Build a collection of all visible methods. The hash
                     map allows us to do this efficiently by keying on the
                     concatenation of name and signature.                    
                </comment>
                <comment line="528">
                    ... but the hash map destroys order. Methods should be
                     returned in a sensible order, as they are in allMethods().
                     So, start over with allMethods() and use the hash map
                     to filter that ordered collection.                    
                </comment>
                <declaration name="map" type="Map&lt;String,Method&gt;" line="525"/>
                <declaration name="list" type="List&lt;Method&gt;" line="534"/>
            </method>
            <method name="allMethods" type="List<Method>" line="539"/>
            <method name="methodsByName" type="List<Method>" line="541">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="methods" type="List&lt;Method&gt;" line="542"/>
                <declaration name="retList" type="ArrayList&lt;Method&gt;" line="543"/>
                <scope line="544">
                    <scope line="545"/>
                </scope>
            </method>
            <method name="methodsByName" type="List<Method>" line="553">
                <params>
                    <param name="name" type="String"/>
                    <param name="signature" type="String"/>
                </params>
                <declaration name="methods" type="List&lt;Method&gt;" line="554"/>
                <declaration name="retList" type="ArrayList&lt;Method&gt;" line="555"/>
                <scope line="556">
                    <scope line="558"/>
                </scope>
            </method>
            <method name="getInterfaces" type="List<InterfaceType>" line="566">
                <declaration name="intfs" type="InterfaceTypeImpl[]" line="567"/>
                <scope line="568"/>
                <scope line="571"/>
            </method>
            <method name="nestedTypes" type="List<ReferenceType>" line="577">
                <comment line="587">
                                        
                </comment>
                <declaration name="all" type="List" line="578"/>
                <declaration name="nested" type="List&lt;ReferenceType&gt;" line="579"/>
                <declaration name="outername" type="String" line="580"/>
                <declaration name="outerlen" type="int" line="581"/>
                <declaration name="iter" type="Iterator" line="582"/>
                <scope line="583">
                    <declaration name="refType" type="ReferenceType" line="584"/>
                    <declaration name="name" type="String" line="585"/>
                    <declaration name="len" type="int" line="586"/>
                    <scope line="588">
                        <declaration name="c" type="char" line="589"/>
                        <scope line="590"/>
                    </scope>
                </scope>
            </method>
            <method name="getValue" type="Value" line="598">
                <params>
                    <param name="sig" type="Field"/>
                </params>
                <declaration name="list" type="List&lt;Field&gt;" line="599"/>
                <declaration name="map" type="Map" line="601"/>
            </method>
            <method name="validateFieldAccess" type="void" line="606">
                <params>
                    <param name="field" type="Field"/>
                </params>
                <comment line="607">
                    Field must be in this object&apos;s class, a superclass, or
                     implemented interface                    
                </comment>
                <declaration name="declType" type="ReferenceTypeImpl" line="611"/>
                <scope line="612"/>
            </method>
            <method name="validateFieldSet" type="void" line="617">
                <params>
                    <param name="field" type="Field"/>
                </params>
                <scope line="619"/>
            </method>
            <javadoc line="624">
                Returns a map of field values                
            </javadoc>
            <method name="getValues" type="Map<Field,Value>" line="627">
                <params>
                    <param name="theFields" type="List<? extends Field>"/>
                </params>
                <comment line="639">
                    Do more validation specific to ReferenceType field getting                    
                </comment>
                <declaration name="size" type="int" line="630"/>
                <declaration name="queryFields" type="JDWP.ReferenceType.GetValues.Field[]" line="631"/>
                <scope line="634">
                    <declaration name="field" type="FieldImpl" line="635"/>
                    <scope line="640"/>
                </scope>
                <declaration name="map" type="Map&lt;Field,Value&gt;" line="648"/>
                <declaration name="values" type="ValueImpl[]" line="650"/>
                <scope line="651"/>
                <scope line="654"/>
                <scope line="658"/>
                <scope line="662">
                    <declaration name="field" type="FieldImpl" line="663"/>
                </scope>
            </method>
            <method name="classObject" type="ClassObjectReference" line="670">
                <comment line="672">
                    Are classObjects unique for an Object, or                    
                </comment>
                <comment line="673">
                    created each time? Is this spec&apos;ed?                    
                </comment>
                <scope line="671">
                    <scope line="674">
                        <scope line="675">
                            <scope line="676"/>
                            <scope line="679"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="stratum" type="SDE.Stratum" line="688">
                <params>
                    <param name="stratumID" type="String"/>
                </params>
                <declaration name="sde" type="SDE" line="689"/>
                <scope line="690"/>
            </method>
            <method name="sourceName" type="String" line="696"/>
            <method name="sourceNames" type="List<String>" line="701">
                <params>
                    <param name="stratumID" type="String"/>
                </params>
                <declaration name="stratum" type="SDE.Stratum" line="702"/>
                <scope line="703">
                    <declaration name="result" type="List&lt;String&gt;" line="704"/>
                </scope>
            </method>
            <method name="sourcePaths" type="List<String>" line="712">
                <params>
                    <param name="stratumID" type="String"/>
                </params>
                <declaration name="stratum" type="SDE.Stratum" line="713"/>
                <scope line="714">
                    <declaration name="result" type="List&lt;String&gt;" line="715"/>
                </scope>
            </method>
            <method name="baseSourceName" type="String" line="722">
                <comment line="725">
                    Does not need synchronization, since worst-case                    
                </comment>
                <comment line="726">
                    static info is fetched twice                    
                </comment>
                <declaration name="bsn" type="String" line="723"/>
                <scope line="724">
                    <scope line="727"/>
                    <scope line="730">
                        <scope line="731"/>
                        <scope line="733"/>
                    </scope>
                </scope>
                <scope line="739"/>
            </method>
            <method name="baseSourcePath" type="String" line="745">
                <declaration name="bsp" type="String" line="746"/>
                <scope line="747"/>
            </method>
            <method name="baseSourceDir" type="String" line="754">
                <scope line="755">
                    <declaration name="typeName" type="String" line="756"/>
                    <declaration name="sb" type="StringBuffer" line="757"/>
                    <declaration name="index" type="int" line="758"/>
                    <declaration name="nextIndex" type="int" line="759"/>
                    <scope line="761"/>
                </scope>
            </method>
            <method name="sourceDebugExtension" type="String" line="772">
                <scope line="773"/>
                <declaration name="sde" type="SDE" line="776"/>
                <scope line="777"/>
            </method>
            <method name="sourceDebugExtensionInfo" type="SDE" line="783">
                <scope line="784"/>
                <declaration name="sde" type="SDE" line="787"/>
                <scope line="788">
                    <declaration name="extension" type="String" line="789"/>
                    <scope line="790"/>
                    <scope line="793">
                        <scope line="794"/>
                    </scope>
                    <scope line="799"/>
                    <scope line="801"/>
                </scope>
            </method>
            <method name="availableStrata" type="List<String>" line="809">
                <declaration name="sde" type="SDE" line="810"/>
                <scope line="811"/>
                <scope line="813">
                    <declaration name="strata" type="List&lt;String&gt;" line="814"/>
                </scope>
            </method>
            <javadoc line="820">
                Always returns non-null stratumID                
            </javadoc>
            <method name="defaultStratum" type="String" line="823">
                <declaration name="sdei" type="SDE" line="824"/>
                <scope line="825"/>
                <scope line="827"/>
            </method>
            <method name="modifiers" type="int" line="832"/>
            <method name="allLineLocations" type="List<Location>" line="840"/>
            <method name="allLineLocations" type="List<Location>" line="845">
                <params>
                    <param name="stratumID" type="String"/>
                    <param name="sourceName" type="String"/>
                </params>
                <comment line="846">
                    A method that should have info, didn&apos;t                    
                </comment>
                <comment line="848">
                    location list                    
                </comment>
                <comment line="860">
                    If we retrieved no line info, and at least one of the methods                    
                </comment>
                <comment line="861">
                    should have had some (as determined by an                    
                </comment>
                <comment line="862">
                    AbsentInformationException being thrown) then we rethrow                    
                </comment>
                <comment line="863">
                    the AbsentInformationException.                    
                </comment>
                <declaration name="someAbsent" type="boolean" line="846"/>
                <declaration name="stratum" type="SDE.Stratum" line="847"/>
                <declaration name="list" type="List&lt;Location&gt;" line="848"/>
                <scope line="850">
                    <declaration name="method" type="MethodImpl" line="851"/>
                    <scope line="852"/>
                    <scope line="855"/>
                </scope>
                <scope line="864"/>
            </method>
            <method name="locationsOfLine" type="List<Location>" line="871">
                <params>
                    <param name="lineNumber" type="int"/>
                </params>
            </method>
            <method name="locationsOfLine" type="List<Location>" line="880">
                <params>
                    <param name="stratumID" type="String"/>
                    <param name="sourceName" type="String"/>
                    <param name="lineNumber" type="int"/>
                </params>
                <comment line="881">
                    A method that should have info, didn&apos;t                    
                </comment>
                <comment line="883">
                    A method that should have info, did                    
                </comment>
                <comment line="893">
                    eliminate native and abstract to eliminate                    
                </comment>
                <comment line="894">
                    false positives                    
                </comment>
                <declaration name="someAbsent" type="boolean" line="882"/>
                <declaration name="somePresent" type="boolean" line="884"/>
                <declaration name="methods" type="List&lt;Method&gt;" line="885"/>
                <declaration name="stratum" type="SDE.Stratum" line="886"/>
                <declaration name="list" type="List&lt;Location&gt;" line="888"/>
                <declaration name="iter" type="Iterator" line="890"/>
                <scope line="891">
                    <declaration name="method" type="MethodImpl" line="892"/>
                    <scope line="896">
                        <scope line="897"/>
                        <scope line="903"/>
                    </scope>
                </scope>
                <scope line="908"/>
            </method>
            <method name="instances" type="List<ObjectReference>" line="914">
                <params>
                    <param name="maxInstances" type="long"/>
                </params>
                <comment line="926">
                    JDWP can&apos;t currently handle more than this (in mustang)                    
                </comment>
                <scope line="915"/>
                <scope line="920"/>
                <declaration name="intMax" type="int" line="924"/>
                <scope line="928"/>
                <scope line="932"/>
            </method>
            <method name="getClassFileVersion" type="void" line="937">
                <scope line="938"/>
                <declaration name="classFileVersion" type="JDWP.ReferenceType.ClassFileVersion" line="941"/>
                <scope line="942"/>
                <scope line="944">
                    <scope line="945"/>
                    <scope line="947">
                        <scope line="948"/>
                        <scope line="953"/>
                    </scope>
                </scope>
            </method>
            <method name="majorVersion" type="int" line="963">
                <scope line="964"/>
                <scope line="966"/>
            </method>
            <method name="minorVersion" type="int" line="972">
                <scope line="973"/>
                <scope line="975"/>
            </method>
            <method name="getConstantPoolInfo" type="void" line="981">
                <declaration name="jdwpCPool" type="JDWP.ReferenceType.ConstantPool" line="982"/>
                <scope line="983"/>
                <scope line="986"/>
                <scope line="988">
                    <scope line="989"/>
                    <scope line="991">
                        <scope line="992"/>
                        <scope line="997"/>
                    </scope>
                    <declaration name="cpbytes" type="byte[]" line="1001"/>
                </scope>
            </method>
            <method name="constantPoolCount" type="int" line="1009">
                <scope line="1010"/>
                <scope line="1012"/>
            </method>
            <method name="constantPool" type="byte[]" line="1018">
                <comment line="1026">
                    Arrays are always modifiable, so it is a little unsafe
                     to return the cached bytecodes directly; instead, we
                     make a clone at the cost of using more memory.                    
                </comment>
                <scope line="1019"/>
                <scope line="1021"/>
                <scope line="1024">
                    <declaration name="cpbytes" type="byte[]" line="1025"/>
                </scope>
                <scope line="1032"/>
            </method>
            <method name="getModifiers" type="void" line="1039">
                <scope line="1040"/>
                <scope line="1043"/>
                <scope line="1046"/>
            </method>
            <method name="decodeStatus" type="void" line="1051">
                <params>
                    <param name="status" type="int"/>
                </params>
                <scope line="1053"/>
            </method>
            <method name="updateStatus" type="void" line="1058">
                <scope line="1059"/>
                <scope line="1061"/>
            </method>
            <method name="markPrepared" type="void" line="1066"/>
            <method name="ref" type="long" line="1070"/>
            <method name="indexOf" type="int" line="1074">
                <params>
                    <param name="method" type="Method"/>
                </params>
                <comment line="1075">
                    Make sure they&apos;re all here - the obsolete method                    
                </comment>
                <comment line="1076">
                    won&apos;t be found and so will have index -1                    
                </comment>
            </method>
            <method name="indexOf" type="int" line="1080">
                <params>
                    <param name="field" type="Field"/>
                </params>
                <comment line="1081">
                    Make sure they&apos;re all here                    
                </comment>
            </method>
            <method name="isAssignableTo" type="boolean" line="1089"/>
            <method name="isAssignableFrom" type="boolean" line="1091">
                <params>
                    <param name="type" type="ReferenceType"/>
                </params>
            </method>
            <method name="isAssignableFrom" type="boolean" line="1095">
                <params>
                    <param name="object" type="ObjectReference"/>
                </params>
            </method>
            <method name="setStatus" type="void" line="1100">
                <params>
                    <param name="status" type="int"/>
                </params>
            </method>
            <method name="setSignature" type="void" line="1104">
                <params>
                    <param name="signature" type="String"/>
                </params>
            </method>
            <method name="setGenericSignature" type="void" line="1108">
                <params>
                    <param name="signature" type="String"/>
                </params>
                <scope line="1109"/>
                <scope line="1111"/>
            </method>
            <method name="isPrimitiveArray" type="boolean" line="1117">
                <params>
                    <param name="signature" type="String"/>
                </params>
                <comment line="1119">
                    TO DO: Centralize JNI signature knowledge.
                    
                     Ref:
                      jdk1.4docguidejpdajdicomsunjdidoc-filessignature.html                    
                </comment>
                <declaration name="i" type="int" line="1118"/>
                <declaration name="isPA" type="boolean" line="1125"/>
                <scope line="1126"/>
                <scope line="1128">
                    <declaration name="c" type="char" line="1129"/>
                </scope>
            </method>
            <method name="findType" type="Type" line="1135">
                <params>
                    <param name="signature" type="String"/>
                </params>
                <comment line="1138">
                                        
                </comment>
                <comment line="1146">
                    Must be a reference type.                    
                </comment>
                <comment line="1150">
                    Work around 4450091                    
                </comment>
                <comment line="1152">
                    Caller wants type of boot class field                    
                </comment>
                <comment line="1155">
                    Caller wants type of non-boot class field                    
                </comment>
                <declaration name="type" type="Type" line="1136"/>
                <scope line="1137">
                    <declaration name="sig" type="char" line="1139"/>
                    <scope line="1140"/>
                    <scope line="1142"/>
                </scope>
                <scope line="1145">
                    <declaration name="loader" type="ClassLoaderReferenceImpl" line="1147"/>
                    <scope line="1151"/>
                    <scope line="1154"/>
                </scope>
            </method>
            <method name="loaderString" type="String" line="1162">
                <scope line="1163"/>
                <scope line="1165"/>
            </method>
        </class>
    </source>