<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.ntlm">
        <import package="java.util.Arrays"/>
        <import package="java.util.Locale"/>
        <class name="Server" line="31">
            <extends class="NTLM"/>
            <javadoc line="31">
                The NTLM server, not multi-thread enabled.&lt;p&gt;
                  Example:
                  &lt;pre&gt;
                  Server server = new Server(null, &quot;REALM&quot;) {
                  public char[] getPassword(String ntdomain, String username) {
                  switch (username) {
                  case &quot;dummy&quot;: return &quot;t0pSeCr3t&quot;.toCharArray();
                  case &quot;guest&quot;: return &quot;&quot;.toCharArray();
                  default: return null;
                  }
                  }
                  };
                  // Receive client request as type1
                  byte[] type2 = server.type2(type1, nonce);
                  // Send type2 to client and receive type3
                  verify(type3, nonce);
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="domain" type="String" line="51"/>
            <declaration name="allVersion" type="boolean" line="52"/>
            <javadoc line="53">
                Creates a Server instance.                
                <param>
                    version the NTLM version to use, which can be:
                      <ul>
                      <li>NTLM: Original NTLM v1
                      <li>NTLM2: NTLM v1 with Client Challenge
                      <li>NTLMv2: NTLM v2
                      </ul>
                      If null, all versions will be supported. Please note that unless NTLM2
                      is selected, authentication succeeds if one of LM (or LMv2) or
                      NTLM (or NTLMv2) is verified.                    
                </param>
                <param>
                    domain the domain, must not be null                    
                </param>
                <throws>
                    NullPointerException if {@code domain} is null.                    
                </throws>
            </javadoc>
            <method name="Server" type="constructor" line="67">
                <params>
                    <param name="version" type="String"/>
                    <param name="domain" type="String"/>
                </params>
                <scope line="69"/>
            </method>
            <javadoc line="77">
                Generates the Type 2 message                
                <param>
                    type1 the Type1 message received, must not be null                    
                </param>
                <param>
                    nonce the random 8-byte array to be used in message generation,
                      must not be null                    
                </param>
                <return>
                    the message generated                    
                </return>
                <throws>
                    NullPointerException if type1 or nonce is null                    
                </throws>
                <throws>
                    NTLMException if the incoming message is invalid                    
                </throws>
            </javadoc>
            <method name="type2" type="byte[]" line="86">
                <params>
                    <param name="type1" type="byte[]"/>
                    <param name="nonce" type="byte[]"/>
                </params>
                <scope line="87"/>
                <declaration name="p" type="Writer" line="92"/>
                <declaration name="flags" type="int" line="93"/>
            </method>
            <javadoc line="102">
                Verifies the Type3 message received from client and returns
                  various negotiated information.                
                <param>
                    type3 the incoming Type3 message from client, must not be null                    
                </param>
                <param>
                    nonce the same nonce provided in {@link #type2}, must not be null                    
                </param>
                <return>
                    username and hostname of the client in a byte array                    
                </return>
                <throws>
                    NullPointerException if {@code type3} or {@code nonce} is null                    
                </throws>
                <throws>
                    NTLMException if the incoming message is invalid                    
                </throws>
            </javadoc>
            <method name="verify" type="String[]" line="112">
                <params>
                    <param name="type3" type="byte[]"/>
                    <param name="nonce" type="byte[]"/>
                </params>
                <comment line="123">
                    if (incomingDomain != null &amp;&amp; !incomingDomain.equals(domain)) {
                    throw new NTLMException(NTLMException.DOMAIN_UNMATCH,
                    &quot;Wrong domain: &quot; + incomingDomain +
                    &quot; vs &quot; + domain);  Needed?                    
                </comment>
                <scope line="113"/>
                <declaration name="r" type="Reader" line="118"/>
                <declaration name="username" type="String" line="119"/>
                <declaration name="hostname" type="String" line="120"/>
                <declaration name="incomingDomain" type="String" line="121"/>
                <declaration name="verified" type="boolean" line="127"/>
                <declaration name="password" type="char[]" line="128"/>
                <scope line="129"/>
                <declaration name="incomingLM" type="byte[]" line="133"/>
                <declaration name="incomingNTLM" type="byte[]" line="134"/>
                <scope line="136">
                    <scope line="137">
                        <declaration name="pw1" type="byte[]" line="138"/>
                        <declaration name="lmhash" type="byte[]" line="139"/>
                        <declaration name="lmresponse" type="byte[]" line="140"/>
                        <scope line="141"/>
                    </scope>
                    <scope line="145">
                        <declaration name="pw2" type="byte[]" line="146"/>
                        <declaration name="nthash" type="byte[]" line="147"/>
                        <declaration name="ntresponse" type="byte[]" line="148"/>
                        <scope line="149"/>
                    </scope>
                </scope>
                <scope line="155">
                    <declaration name="pw2" type="byte[]" line="156"/>
                    <declaration name="nthash" type="byte[]" line="157"/>
                    <declaration name="clientNonce" type="byte[]" line="158"/>
                    <declaration name="ntlmresponse" type="byte[]" line="159"/>
                    <scope line="160"/>
                </scope>
                <scope line="165">
                    <declaration name="pw2" type="byte[]" line="166"/>
                    <declaration name="nthash" type="byte[]" line="167"/>
                    <scope line="168">
                        <declaration name="clientNonce" type="byte[]" line="169"/>
                        <declaration name="lmresponse" type="byte[]" line="171"/>
                        <scope line="174"/>
                    </scope>
                    <scope line="178">
                        <declaration name="clientBlob" type="byte[]" line="179"/>
                        <declaration name="ntlmresponse" type="byte[]" line="181"/>
                        <scope line="184"/>
                    </scope>
                </scope>
                <scope line="190"/>
            </method>
            <method name="getPassword" type="char[]" line="197"/>
            <javadoc line="197">
                Retrieves the password for a given user. This method should be
                  overridden in a concrete class.                
                <param>
                    domain can be null                    
                </param>
                <param>
                    username must not be null                    
                </param>
                <return>
                    the password for the user, or null if unknown                    
                </return>
            </javadoc>
        </class>
    </source>