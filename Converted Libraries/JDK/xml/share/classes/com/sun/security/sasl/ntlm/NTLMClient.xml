<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl.ntlm">
        <import package="com.sun.security.ntlm.Client"/>
        <import package="com.sun.security.ntlm.NTLMException"/>
        <import package="java.io.IOException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.util.Map"/>
        <import package="java.util.Random"/>
        <import package="javax.security.auth.callback.Callback"/>
        <import package="javax.security.sasl"/>
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <import package="javax.security.auth.callback.NameCallback"/>
        <import package="javax.security.auth.callback.PasswordCallback"/>
        <import package="javax.security.auth.callback.UnsupportedCallbackException"/>
        <class name="NTLMClient" line="15">
            <implements interface="SaslClient"/>
            <javadoc line="15">
                Required callbacks:
                  - RealmCallback
                  handle can provide domain info for authentication, optional
                  - NameCallback
                  handler must enter username to use for authentication
                  - PasswordCallback
                  handler must enter password for username to use for authentication
                  Environment properties that affect behavior of implementation:
                  javax.security.sasl.qop
                  String, quality of protection; only &quot;auth&quot; is accepted, default &quot;auth&quot;
                  com.sun.security.sasl.ntlm.version
                  String, name a specific version to use; can be:
                  LM/NTLM: Original NTLM v1
                  LM: Original NTLM v1, LM only
                  NTLM: Original NTLM v1, NTLM only
                  NTLM2: NTLM v1 with Client Challenge
                  LMv2/NTLMv2: NTLM v2
                  LMv2: NTLM v2, LM only
                  NTLMv2: NTLM v2, NTLM only
                  If not specified, use system property &quot;ntlm.version&quot;. If
                  still not specified, use default value &quot;LMv2/NTLMv2&quot;.
                  com.sun.security.sasl.ntlm.random
                  java.util.Random, the nonce source to be used in NTLM v2 or NTLM v1 with
                  Client Challenge. Default null, an internal java.util.Random object
                  will be used
                  Negotiated Properties:
                  javax.security.sasl.qop
                  Always &quot;auth&quot;
                  com.sun.security.sasl.html.domain
                  The domain for the user, provided by the server                
                <see>
                    <a href="http://www.ietf.org/rfc/rfc2222.txt">RFC 2222</a>
                      - Simple Authentication and Security Layer (SASL)                    
                </see>
            </javadoc>
            <declaration name="NTLM_VERSION" type="String" line="50"/>
            <declaration name="NTLM_RANDOM" type="String" line="51"/>
            <declaration name="NTLM_DOMAIN" type="String" line="52"/>
            <declaration name="NTLM_HOSTNAME" type="String" line="53"/>
            <declaration name="client" type="Client" line="54"/>
            <declaration name="mech" type="String" line="55"/>
            <declaration name="random" type="Random" line="56"/>
            <declaration name="step" type="int" line="57"/>
            <javadoc line="58">
                @param mech non-null                
                <param>
                    authorizationId can be null or empty and ignored                    
                </param>
                <param>
                    protocol non-null for Sasl, useless for NTLM                    
                </param>
                <param>
                    serverName non-null for Sasl, but can be null for NTLM                    
                </param>
                <param>
                    props can be null                    
                </param>
                <param>
                    cbh can be null for Sasl, but will throw NPE for NTLM                    
                </param>
                <throws>
                    SaslException                    
                </throws>
            </javadoc>
            <method name="NTLMClient" type="constructor" line="67">
                <params>
                    <param name="mech" type="String"/>
                    <param name="authzid" type="String"/>
                    <param name="protocol" type="String"/>
                    <param name="serverName" type="String"/>
                    <param name="props" type="Map"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <declaration name="version" type="String" line="69"/>
                <declaration name="rtmp" type="Random" line="70"/>
                <declaration name="hostname" type="String" line="71"/>
                <scope line="72">
                    <declaration name="qop" type="String" line="73"/>
                    <scope line="74"/>
                </scope>
                <scope line="82"/>
                <declaration name="dcb" type="RealmCallback" line="85"/>
                <declaration name="ncb" type="NameCallback" line="86"/>
                <declaration name="pcb" type="PasswordCallback" line="87"/>
                <scope line="88"/>
                <scope line="91"/>
                <scope line="94"/>
                <scope line="97">
                    <scope line="98"/>
                    <scope line="101"/>
                </scope>
                <scope line="105"/>
                <scope line="108"/>
            </method>
            <method name="getMechanismName" type="String" line="112"/>
            <method name="isComplete" type="boolean" line="115"/>
            <method name="unwrap" type="byte[]" line="118">
                <params>
                    <param name="incoming" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="wrap" type="byte[]" line="121">
                <params>
                    <param name="outgoing" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="getNegotiatedProperty" type="Object" line="124">
                <params>
                    <param name="propName" type="String"/>
                </params>
                <scope line="125"/>
                <scope line="128"/>
                <scope line="131"/>
            </method>
            <method name="dispose" type="void" line="135"/>
            <method name="hasInitialResponse" type="boolean" line="138"/>
            <method name="evaluateChallenge" type="byte[]" line="141">
                <params>
                    <param name="challenge" type="byte[]"/>
                </params>
                <scope line="143"/>
                <scope line="146">
                    <scope line="147">
                        <declaration name="nonce" type="byte[]" line="148"/>
                    </scope>
                    <scope line="152"/>
                </scope>
            </method>
        </class>
    </source>