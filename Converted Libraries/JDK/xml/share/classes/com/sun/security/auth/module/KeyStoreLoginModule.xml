<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.auth.module">
        <import package="javax.security.auth.x500.X500Principal"/>
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.PushbackInputStream"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URL"/>
        <import package="java.security.AuthProvider"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.Key"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.KeyStoreException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.Principal"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.Provider"/>
        <import package="java.security.UnrecoverableKeyException"/>
        <import package="java.security.cert"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.Map"/>
        <import package="java.util.ResourceBundle"/>
        <import package="javax.security.auth.Destroyable"/>
        <import package="javax.security.auth.DestroyFailedException"/>
        <import package="javax.security.auth.Subject"/>
        <import package="javax.security.auth.x500"/>
        <import package="javax.security.auth.Subject"/>
        <import package="javax.security.auth.x500"/>
        <import package="javax.security.auth.callback.Callback"/>
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <import package="javax.security.auth.callback.ConfirmationCallback"/>
        <import package="javax.security.auth.callback.NameCallback"/>
        <import package="javax.security.auth.callback.PasswordCallback"/>
        <import package="javax.security.auth.callback.TextOutputCallback"/>
        <import package="javax.security.auth.callback.UnsupportedCallbackException"/>
        <import package="javax.security.auth.login.FailedLoginException"/>
        <import package="javax.security.auth.login.LoginException"/>
        <import package="javax.security.auth.spi.LoginModule"/>
        <import package="sun.security.util.AuthResources"/>
        <import package="sun.security.util.Password"/>
        <class name="KeyStoreLoginModule" line="73">
            <comment line="137">
                                
            </comment>
            <comment line="186">
                                
            </comment>
            <implements interface="LoginModule"/>
            <javadoc line="73">
                Provides a JAAS login module that prompts for a key store alias and
                  populates the subject with the alias&apos;s principal and credentials. Stores
                  an &lt;code&gt;X500Principal&lt;/code&gt; for the subject distinguished name of the
                  first certificate in the alias&apos;s credentials in the subject&apos;s principals,
                  the alias&apos;s certificate path in the subject&apos;s public credentials, and a
                  &lt;code&gt;X500PrivateCredential&lt;/code&gt; whose certificate is the first
                  certificate in the alias&apos;s certificate path and whose private key is the
                  alias&apos;s private key in the subject&apos;s private credentials. &lt;p&gt;
                  Recognizes the following options in the configuration file:
                  &lt;dl&gt;
                  &lt;dt&gt; &lt;code&gt;keyStoreURL&lt;/code&gt; &lt;/dt&gt;
                  &lt;dd&gt; A URL that specifies the location of the key store.  Defaults to
                  a URL pointing to the .keystore file in the directory specified by the
                  &lt;code&gt;user.home&lt;/code&gt; system property.  The input stream from this
                  URL is passed to the &lt;code&gt;KeyStore.load&lt;/code&gt; method.
                  &quot;NONE&quot; may be specified if a &lt;code&gt;null&lt;/code&gt; stream must be
                  passed to the &lt;code&gt;KeyStore.load&lt;/code&gt; method.
                  &quot;NONE&quot; should be specified if the KeyStore resides
                  on a hardware token device, for example.&lt;/dd&gt;
                  &lt;dt&gt; &lt;code&gt;keyStoreType&lt;/code&gt; &lt;/dt&gt;
                  &lt;dd&gt; The key store type.  If not specified, defaults to the result of
                  calling &lt;code&gt;KeyStore.getDefaultType()&lt;/code&gt;.
                  If the type is &quot;PKCS11&quot;, then keyStoreURL must be &quot;NONE&quot;
                  and privateKeyPasswordURL must not be specified.&lt;/dd&gt;
                  &lt;dt&gt; &lt;code&gt;keyStoreProvider&lt;/code&gt; &lt;/dt&gt;
                  &lt;dd&gt; The key store provider.  If not specified, uses the standard search
                  order to find the provider. &lt;/dd&gt;
                  &lt;dt&gt; &lt;code&gt;keyStoreAlias&lt;/code&gt; &lt;/dt&gt;
                  &lt;dd&gt; The alias in the key store to login as.  Required when no callback
                  handler is provided.  No default value. &lt;/dd&gt;
                  &lt;dt&gt; &lt;code&gt;keyStorePasswordURL&lt;/code&gt; &lt;/dt&gt;
                  &lt;dd&gt; A URL that specifies the location of the key store password.  Required
                  when no callback handler is provided and
                  &lt;code&gt;protected&lt;/code&gt; is false.
                  No default value. &lt;/dd&gt;
                  &lt;dt&gt; &lt;code&gt;privateKeyPasswordURL&lt;/code&gt; &lt;/dt&gt;
                  &lt;dd&gt; A URL that specifies the location of the specific private key password
                  needed to access the private key for this alias.
                  The keystore password
                  is used if this value is needed and not specified. &lt;/dd&gt;
                  &lt;dt&gt; &lt;code&gt;protected&lt;/code&gt; &lt;/dt&gt;
                  &lt;dd&gt; This value should be set to &quot;true&quot; if the KeyStore
                  has a separate, protected authentication path
                  (for example, a dedicated PIN-pad attached to a smart card).
                  Defaults to &quot;false&quot;. If &quot;true&quot; keyStorePasswordURL and
                  privateKeyPasswordURL must not be specified.&lt;/dd&gt;
                  &lt;/dl&gt;                
            </javadoc>
            <declaration name="rb" type="java.util.ResourceBundle" line="133"/>
            <declaration name="UNINITIALIZED" type="int" line="138"/>
            <declaration name="INITIALIZED" type="int" line="139"/>
            <declaration name="AUTHENTICATED" type="int" line="140"/>
            <declaration name="LOGGED_IN" type="int" line="141"/>
            <declaration name="PROTECTED_PATH" type="int" line="143"/>
            <declaration name="TOKEN" type="int" line="144"/>
            <declaration name="NORMAL" type="int" line="145"/>
            <declaration name="NONE" type="String" line="147"/>
            <declaration name="P11KEYSTORE" type="String" line="148"/>
            <declaration name="bannerCallback" type="TextOutputCallback" line="150"/>
            <declaration name="confirmationCallback" type="ConfirmationCallback" line="154"/>
            <declaration name="subject" type="Subject" line="160"/>
            <declaration name="callbackHandler" type="CallbackHandler" line="161"/>
            <declaration name="sharedState" type="Map" line="162"/>
            <declaration name="options" type="Map&lt;String,?&gt;" line="163"/>
            <declaration name="keyStorePassword" type="char[]" line="165"/>
            <declaration name="privateKeyPassword" type="char[]" line="166"/>
            <declaration name="keyStore" type="KeyStore" line="167"/>
            <declaration name="keyStoreURL" type="String" line="169"/>
            <declaration name="keyStoreType" type="String" line="170"/>
            <declaration name="keyStoreProvider" type="String" line="171"/>
            <declaration name="keyStoreAlias" type="String" line="172"/>
            <declaration name="keyStorePasswordURL" type="String" line="173"/>
            <declaration name="privateKeyPasswordURL" type="String" line="174"/>
            <declaration name="debug" type="boolean" line="175"/>
            <declaration name="principal" type="javax.security.auth.x500.X500Principal" line="176"/>
            <declaration name="fromKeyStore" type="Certificate[]" line="177"/>
            <declaration name="certP" type="java.security.cert.CertPath" line="178"/>
            <declaration name="privateCredential" type="X500PrivateCredential" line="179"/>
            <declaration name="status" type="int" line="180"/>
            <declaration name="nullStream" type="boolean" line="181"/>
            <declaration name="token" type="boolean" line="182"/>
            <declaration name="protectedPath" type="boolean" line="183"/>
            <javadoc line="187">
                Initialize this &lt;code&gt;LoginModule&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    subject the &lt;code&gt;Subject&lt;/code&gt; to be authenticated. &lt;p&gt;                    
                </param>
                <param>
                    callbackHandler a &lt;code&gt;CallbackHandler&lt;/code&gt; for communicating
                      with the end user (prompting for usernames and
                      passwords, for example),
                      which may be &lt;code&gt;null&lt;/code&gt;. &lt;p&gt;                    
                </param>
                <param>
                    sharedState shared &lt;code&gt;LoginModule&lt;/code&gt; state. &lt;p&gt;                    
                </param>
                <param>
                    options options specified in the login
                      &lt;code&gt;Configuration&lt;/code&gt; for this particular
                      &lt;code&gt;LoginModule&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="initialize" type="void" line="210">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="callbackHandler" type="CallbackHandler"/>
                    <param name="sharedState" type="Map<String,?>"/>
                    <param name="options" type="Map<String,?>"/>
                </params>
            </method>
            <method name="processOptions" type="void" line="220">
                <scope line="222"/>
                <scope line="228"/>
                <scope line="232"/>
                <scope line="235"/>
                <scope line="251"/>
            </method>
            <javadoc line="264">
                Authenticate the user.
                  &lt;p&gt; Get the Keystore alias and relevant passwords.
                  Retrieve the alias&apos;s principal and credentials from the Keystore.
                  &lt;p&gt;                
                <exception>
                    FailedLoginException if the authentication fails. &lt;p&gt;                    
                </exception>
                <return>
                    true in all cases (this &lt;code&gt;LoginModule&lt;/code&gt;
                      should not be ignored).                    
                </return>
            </javadoc>
            <method name="login" type="boolean" line="278">
                <comment line="307">
                    get relevant alias and password info                    
                </comment>
                <comment line="317">
                    log into KeyStore to retrieve data,
                     then clear passwords                    
                </comment>
                <scope line="286"/>
                <scope line="292"/>
                <scope line="300"/>
                <scope line="308"/>
                <scope line="310"/>
                <scope line="312"/>
                <scope line="319"/>
                <scope line="321">
                    <scope line="323"/>
                    <scope line="327"/>
                </scope>
            </method>
            <javadoc line="339">
                Get the alias and passwords to use for looking up in the KeyStore.                
            </javadoc>
            <method name="getAliasAndPasswords" type="void" line="340">
                <params>
                    <param name="env" type="int"/>
                </params>
                <comment line="344">
                    No callback handler - check for alias and password options                    
                </comment>
                <comment line="363">
                    Callback handler available - prompt for alias and passwords                    
                </comment>
                <comment line="384">
                    fall thru                    
                </comment>
                <scope line="341"/>
                <scope line="360">
                    <declaration name="aliasCallback" type="NameCallback" line="364"/>
                    <scope line="365"/>
                    <scope line="368"/>
                    <declaration name="storePassCallback" type="PasswordCallback" line="374"/>
                    <declaration name="keyPassCallback" type="PasswordCallback" line="375"/>
                </scope>
                <scope line="392"/>
            </method>
            <method name="checkAlias" type="void" line="397">
                <scope line="398"/>
            </method>
            <method name="checkStorePass" type="void" line="405">
                <scope line="406"/>
                <declaration name="in" type="InputStream" line="411"/>
                <scope line="412"/>
                <scope line="415">
                    <declaration name="le" type="LoginException" line="416"/>
                </scope>
                <scope line="421">
                    <scope line="422">
                        <scope line="423"/>
                        <scope line="425">
                            <declaration name="le" type="LoginException" line="426"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="checkKeyPass" type="void" line="435">
                <scope line="436"/>
                <scope line="438">
                    <declaration name="in" type="InputStream" line="439"/>
                    <scope line="440"/>
                    <scope line="443">
                        <declaration name="le" type="LoginException" line="444"/>
                    </scope>
                    <scope line="449">
                        <scope line="450">
                            <scope line="451"/>
                            <scope line="453">
                                <declaration name="le" type="LoginException" line="454"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="prompt" type="void" line="467">
                <params>
                    <param name="aliasCallback" type="NameCallback"/>
                    <param name="storePassCallback" type="PasswordCallback"/>
                    <param name="keyPassCallback" type="PasswordCallback"/>
                </params>
                <comment line="472">
                    only prompt for alias                    
                </comment>
                <comment line="501">
                    prompt for alias and key store password                    
                </comment>
                <comment line="532">
                    prompt for alias, key store password, and key password                    
                </comment>
                <scope line="469">
                    <scope line="473"/>
                    <scope line="478">
                        <declaration name="le" type="LoginException" line="479"/>
                    </scope>
                    <scope line="483"/>
                    <declaration name="confirmationResult" type="int" line="490"/>
                    <scope line="492"/>
                </scope>
                <scope line="498">
                    <scope line="502"/>
                    <scope line="508">
                        <declaration name="le" type="LoginException" line="509"/>
                    </scope>
                    <scope line="513"/>
                    <declaration name="confirmationResult" type="int" line="520"/>
                    <scope line="522"/>
                </scope>
                <scope line="529">
                    <scope line="533"/>
                    <scope line="540">
                        <declaration name="le" type="LoginException" line="541"/>
                    </scope>
                    <scope line="545"/>
                    <declaration name="confirmationResult" type="int" line="552"/>
                    <scope line="554"/>
                </scope>
            </method>
            <method name="saveAlias" type="void" line="564">
                <params>
                    <param name="cb" type="NameCallback"/>
                </params>
            </method>
            <method name="saveStorePass" type="void" line="568">
                <params>
                    <param name="c" type="PasswordCallback"/>
                </params>
                <comment line="572">
                                        
                </comment>
                <scope line="570"/>
            </method>
            <method name="saveKeyPass" type="void" line="577">
                <params>
                    <param name="c" type="PasswordCallback"/>
                </params>
                <comment line="581">
                    Use keystore password if no private key password is
                     specified.                    
                </comment>
                <scope line="579"/>
            </method>
            <javadoc line="589">
                Get the credentials from the KeyStore.                
            </javadoc>
            <method name="getKeyStoreInfo" type="void" line="590">
                <comment line="593">
                                        
                </comment>
                <comment line="613">
                                        
                </comment>
                <comment line="617">
                    if using protected auth path, keyStorePassword will be null                    
                </comment>
                <comment line="651">
                                        
                </comment>
                <comment line="682">
                                        
                </comment>
                <comment line="688">
                    if token, privateKeyPassword will be null                    
                </comment>
                <scope line="593">
                    <scope line="594"/>
                    <scope line="596"/>
                </scope>
                <scope line="600">
                    <declaration name="le" type="LoginException" line="601"/>
                </scope>
                <scope line="605">
                    <declaration name="le" type="LoginException" line="606"/>
                </scope>
                <declaration name="in" type="InputStream" line="613"/>
                <scope line="614">
                    <scope line="615"/>
                    <scope line="618"/>
                </scope>
                <scope line="622">
                    <declaration name="le" type="LoginException" line="623"/>
                </scope>
                <scope line="627">
                    <declaration name="le" type="LoginException" line="628"/>
                </scope>
                <scope line="632">
                    <declaration name="le" type="LoginException" line="633"/>
                </scope>
                <scope line="637">
                    <scope line="638">
                        <scope line="639"/>
                        <scope line="641">
                            <declaration name="le" type="LoginException" line="642"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="651">
                    <scope line="657"/>
                    <scope line="660">
                        <declaration name="certList" type="LinkedList&lt;Certificate&gt;" line="661"/>
                        <scope line="662"/>
                        <declaration name="certF" type="CertificateFactory" line="665"/>
                    </scope>
                </scope>
                <scope line="670">
                    <declaration name="le" type="LoginException" line="671"/>
                </scope>
                <scope line="674">
                    <declaration name="le" type="LoginException" line="675"/>
                </scope>
                <scope line="682">
                    <declaration name="certificate" type="X509Certificate" line="683"/>
                    <declaration name="privateKey" type="Key" line="688"/>
                    <scope line="691"/>
                </scope>
                <scope line="698">
                    <declaration name="le" type="LoginException" line="699"/>
                </scope>
                <scope line="702">
                    <declaration name="le" type="LoginException" line="703"/>
                </scope>
                <scope line="706">
                    <declaration name="fle" type="FailedLoginException" line="707"/>
                </scope>
                <scope line="712"/>
            </method>
            <javadoc line="720">
                Abstract method to commit the authentication process (phase 2).
                  &lt;p&gt; This method is called if the LoginContext&apos;s
                  overall authentication succeeded
                  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
                  succeeded).
                  &lt;p&gt; If this LoginModule&apos;s own authentication attempt
                  succeeded (checked by retrieving the private state saved by the
                  &lt;code&gt;login&lt;/code&gt; method), then this method associates a
                  &lt;code&gt;X500Principal&lt;/code&gt; for the subject distinguished name of the
                  first certificate in the alias&apos;s credentials in the subject&apos;s
                  principals,the alias&apos;s certificate path in the subject&apos;s public
                  credentials, and a&lt;code&gt;X500PrivateCredential&lt;/code&gt; whose certificate
                  is the first  certificate in the alias&apos;s certificate path and whose
                  private key is the alias&apos;s private key in the subject&apos;s private
                  credentials.  If this LoginModule&apos;s own
                  authentication attempted failed, then this method removes
                  any state that was originally saved.
                  &lt;p&gt;                
                <exception>
                    LoginException if the commit fails                    
                </exception>
                <return>
                    true if this LoginModule&apos;s own login and commit
                      attempts succeeded, or false otherwise.                    
                </return>
            </javadoc>
            <method name="commit" type="boolean" line="749">
                <scope line="758"/>
                <scope line="760"/>
            </method>
            <method name="commitInternal" type="boolean" line="769">
                <comment line="771">
                    If the subject is not readonly add to the principal and credentials
                     set; otherwise just return true                    
                </comment>
                <scope line="773"/>
                <scope line="775"/>
            </method>
            <javadoc line="784">
                &lt;p&gt; This method is called if the LoginContext&apos;s
                  overall authentication failed.
                  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
                  did not succeed).
                  &lt;p&gt; If this LoginModule&apos;s own authentication attempt
                  succeeded (checked by retrieving the private state saved by the
                  &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt; methods),
                  then this method cleans up any state that was originally saved.
                  &lt;p&gt; If the loaded KeyStore&apos;s provider extends
                  &lt;code&gt;java.security.AuthProvider&lt;/code&gt;,
                  then the provider&apos;s &lt;code&gt;logout&lt;/code&gt; method is invoked.
                  &lt;p&gt;                
                <exception>
                    LoginException if the abort fails.                    
                </exception>
                <return>
                    false if this LoginModule&apos;s own login and/or commit attempts
                      failed, and true otherwise.                    
                </return>
            </javadoc>
            <method name="abort" type="boolean" line="807"/>
            <javadoc line="822">
                Logout a user.
                  &lt;p&gt; This method removes the Principals, public credentials and the
                  private credentials that were added by the &lt;code&gt;commit&lt;/code&gt; method.
                  &lt;p&gt; If the loaded KeyStore&apos;s provider extends
                  &lt;code&gt;java.security.AuthProvider&lt;/code&gt;,
                  then the provider&apos;s &lt;code&gt;logout&lt;/code&gt; method is invoked.
                  &lt;p&gt;                
                <exception>
                    LoginException if the logout fails.                    
                </exception>
                <return>
                    true in all cases since this &lt;code&gt;LoginModule&lt;/code&gt;
                      should not be ignored.                    
                </return>
            </javadoc>
            <method name="logout" type="boolean" line="840">
                <comment line="851">
                    impossible for LoginModule to be in AUTHENTICATED
                     state
                     assert status != AUTHENTICATED;                    
                </comment>
            </method>
            <method name="logoutInternal" type="void" line="860">
                <comment line="866">
                    assumption is that KeyStore.load did a login -
                     perform explicit logout if possible                    
                </comment>
                <comment line="878">
                    save but continue below                    
                </comment>
                <comment line="884">
                    attempt to destroy the private credential
                     even if the Subject is read-only                    
                </comment>
                <comment line="889">
                    destroy the private credential                    
                </comment>
                <comment line="911">
                    throw an exception because we can not remove
                     the principal and public credential from this
                     read-only Subject                    
                </comment>
                <comment line="933">
                    throw pending logout exception if there is one                    
                </comment>
                <scope line="861"/>
                <declaration name="logoutException" type="LoginException" line="867"/>
                <declaration name="provider" type="Provider" line="868"/>
                <scope line="869">
                    <declaration name="ap" type="AuthProvider" line="870"/>
                    <scope line="871">
                        <scope line="873"/>
                    </scope>
                    <scope line="876"/>
                </scope>
                <scope line="882">
                    <declaration name="it" type="Iterator&lt;Object&gt;" line="889"/>
                    <scope line="890">
                        <declaration name="obj" type="Object" line="891"/>
                        <scope line="892">
                            <scope line="894"/>
                            <scope line="900">
                                <declaration name="le" type="LoginException" line="901"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="919"/>
                <scope line="923"/>
                <scope line="927"/>
                <scope line="933"/>
            </method>
            <method name="debugPrint" type="void" line="939">
                <params>
                    <param name="message" type="String"/>
                </params>
                <comment line="941">
                    we should switch to logging API                    
                </comment>
                <scope line="941"/>
                <scope line="943"/>
            </method>
        </class>
    </source>