<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl">
        <import package="javax.security.sasl"/>
        <import package="javax.security.auth.callback"/>
        <import package="java.util.Random"/>
        <import package="java.util.Map"/>
        <import package="java.io.IOException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.util.logging.Level"/>
        <class name="CramMD5Server" line="39">
            <extends class="CramMD5Base"/>
            <implements interface="SaslServer"/>
            <javadoc line="39">
                Implements the CRAM-MD5 SASL server-side mechanism.
                  (&lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2195.txt&quot;&gt;RFC 2195&lt;/A&gt;).
                  CRAM-MD5 has no initial response.
                  client &lt;---- M={random, timestamp, server-fqdn} ------- server
                  client ----- {username HMAC_MD5(pw, M)} --------------&gt; server
                  CallbackHandler must be able to handle the following callbacks:
                  - NameCallback: default name is name of user for whom to get password
                  - PasswordCallback: must fill in password; if empty, no pw
                  - AuthorizeCallback: must setAuthorized() and canonicalized authorization id
                  - auth id == authzid, but needed to get canonicalized authzid                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="fqdn" type="String" line="56"/>
            <declaration name="challengeData" type="byte[]" line="57"/>
            <declaration name="authzid" type="String" line="58"/>
            <declaration name="cbh" type="CallbackHandler" line="59"/>
            <javadoc line="61">
                Creates a SASL mechanism with client credentials that it needs
                  to participate in CRAM-MD5 authentication exchange with the server.                
                <param>
                    authID A  non-null string representing the principal
                      being authenticated.                    
                </param>
                <param>
                    pw A non-null String or byte[]
                      containing the password. If it is an array, it is first cloned.                    
                </param>
            </javadoc>
            <method name="CramMD5Server" type="constructor" line="72">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="serverFqdn" type="String"/>
                    <param name="props" type="Map"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <scope line="73"/>
            </method>
            <javadoc line="82">
                Generates challenge based on response sent by client.
                  CRAM-MD5 has no initial response.
                  First call generates challenge.
                  Second call verifies client response. If authentication fails, throws
                  SaslException.                
                <param>
                    responseData A non-null byte array containing the response
                      data from the client.                    
                </param>
                <return>
                    A non-null byte array containing the challenge to be sent to
                      the client for the first call; null when 2nd call is successful.                    
                </return>
                <throws>
                    SaslException If authentication fails.                    
                </throws>
            </javadoc>
            <method name="evaluateResponse" type="byte[]" line="97">
                <params>
                    <param name="responseData" type="byte[]"/>
                </params>
                <comment line="99">
                    See if we&apos;ve been here before                    
                </comment>
                <comment line="118">
                    Generate challenge {random, timestamp, fqdn}                    
                </comment>
                <comment line="140">
                    Examine response to see if correctly encrypted challengeData                    
                </comment>
                <comment line="147">
                    Extract username from response                    
                </comment>
                <comment line="165">
                    Get user&apos;s password                    
                </comment>
                <comment line="173">
                    user has no password; OK to disclose to server                    
                </comment>
                <comment line="185">
                    Generate a keyed-MD5 digest from the user&apos;s password and                    
                </comment>
                <comment line="186">
                    original challenge.                    
                </comment>
                <comment line="192">
                    clear pw when we no longer need it                    
                </comment>
                <comment line="195">
                    Check whether digest is as expected                    
                </comment>
                <comment line="210">
                    All checks out, use AuthorizeCallback to canonicalize name                    
                </comment>
                <comment line="216">
                    Not authorized                    
                </comment>
                <comment line="238">
                    rethrow                    
                </comment>
                <scope line="100"/>
                <scope line="105"/>
                <scope line="110">
                    <scope line="111">
                        <scope line="112"/>
                        <declaration name="random" type="Random" line="119"/>
                        <declaration name="rand" type="long" line="120"/>
                        <declaration name="timestamp" type="long" line="121"/>
                        <declaration name="buf" type="StringBuffer" line="123"/>
                        <declaration name="challengeStr" type="String" line="131"/>
                    </scope>
                    <scope line="139">
                        <scope line="141"/>
                        <declaration name="ulen" type="int" line="148"/>
                        <scope line="149">
                            <scope line="150"/>
                        </scope>
                        <scope line="155"/>
                        <declaration name="username" type="String" line="160"/>
                        <declaration name="ncb" type="NameCallback" line="166"/>
                        <declaration name="pcb" type="PasswordCallback" line="168"/>
                        <declaration name="pwChars" type="char" line="171"/>
                        <scope line="172"/>
                        <declaration name="pwStr" type="String" line="179"/>
                        <scope line="180"/>
                        <declaration name="digest" type="String" line="187"/>
                        <declaration name="expectedDigest" type="byte[]" line="196"/>
                        <declaration name="digestLen" type="int" line="197"/>
                        <scope line="198"/>
                        <declaration name="j" type="int" line="202"/>
                        <scope line="203">
                            <scope line="204"/>
                        </scope>
                        <declaration name="acb" type="AuthorizeCallback" line="211"/>
                        <scope line="213"/>
                        <scope line="215"/>
                    </scope>
                </scope>
                <scope line="228"/>
                <scope line="231"/>
                <scope line="234"/>
                <scope line="237"/>
                <scope line="239"/>
            </method>
            <method name="getAuthorizationID" type="String" line="245">
                <scope line="246"/>
                <scope line="248"/>
            </method>
        </class>
    </source>