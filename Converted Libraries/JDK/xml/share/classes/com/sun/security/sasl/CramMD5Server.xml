<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl">
        <import package="javax.security.sasl"/>
        <import package="javax.security.auth.callback"/>
        <import package="java.util.Random"/>
        <import package="java.util.Map"/>
        <import package="java.io.IOException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.util.logging.Level"/>
        <class name="CramMD5Server" line="11">
            <extends class="CramMD5Base"/>
            <implements interface="SaslServer"/>
            <javadoc line="11">
                Implements the CRAM-MD5 SASL server-side mechanism.
                  (&lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2195.txt&quot;&gt;RFC 2195&lt;/A&gt;).
                  CRAM-MD5 has no initial response.
                  client &lt;---- M={random, timestamp, server-fqdn} ------- server
                  client ----- {username HMAC_MD5(pw, M)} --------------&gt; server
                  CallbackHandler must be able to handle the following callbacks:
                  - NameCallback: default name is name of user for whom to get password
                  - PasswordCallback: must fill in password; if empty, no pw
                  - AuthorizeCallback: must setAuthorized() and canonicalized authorization id
                  - auth id == authzid, but needed to get canonicalized authzid                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="fqdn" type="String" line="25"/>
            <declaration name="challengeData" type="byte[]" line="26"/>
            <declaration name="authzid" type="String" line="27"/>
            <declaration name="cbh" type="CallbackHandler" line="28"/>
            <javadoc line="29">
                Creates a SASL mechanism with client credentials that it needs
                  to participate in CRAM-MD5 authentication exchange with the server.                
                <param>
                    authID A  non-null string representing the principal
                      being authenticated.                    
                </param>
                <param>
                    pw A non-null String or byte[]
                      containing the password. If it is an array, it is first cloned.                    
                </param>
            </javadoc>
            <method name="CramMD5Server" type="constructor" line="37">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="serverFqdn" type="String"/>
                    <param name="props" type="Map"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <scope line="38"/>
            </method>
            <javadoc line="44">
                Generates challenge based on response sent by client.
                  CRAM-MD5 has no initial response.
                  First call generates challenge.
                  Second call verifies client response. If authentication fails, throws
                  SaslException.                
                <param>
                    responseData A non-null byte array containing the response
                      data from the client.                    
                </param>
                <return>
                    A non-null byte array containing the challenge to be sent to
                      the client for the first call; null when 2nd call is successful.                    
                </return>
                <throws>
                    SaslException If authentication fails.                    
                </throws>
            </javadoc>
            <method name="evaluateResponse" type="byte[]" line="56">
                <params>
                    <param name="responseData" type="byte[]"/>
                </params>
                <scope line="57"/>
                <scope line="60"/>
                <scope line="63">
                    <scope line="64">
                        <scope line="65"/>
                        <declaration name="random" type="Random" line="69"/>
                        <declaration name="rand" type="long" line="70"/>
                        <declaration name="timestamp" type="long" line="71"/>
                        <declaration name="buf" type="StringBuffer" line="72"/>
                        <declaration name="challengeStr" type="String" line="80"/>
                    </scope>
                    <scope line="85">
                        <scope line="86"/>
                        <declaration name="ulen" type="int" line="89"/>
                        <scope line="90">
                            <scope line="91"/>
                        </scope>
                        <scope line="96"/>
                        <declaration name="username" type="String" line="100"/>
                        <declaration name="ncb" type="NameCallback" line="102"/>
                        <declaration name="pcb" type="PasswordCallback" line="103"/>
                        <declaration name="pwChars" type="char" line="105"/>
                        <scope line="106"/>
                        <declaration name="pwStr" type="String" line="111"/>
                        <scope line="112"/>
                        <declaration name="digest" type="String" line="116"/>
                        <declaration name="expectedDigest" type="byte[]" line="119"/>
                        <declaration name="digestLen" type="int" line="120"/>
                        <scope line="121"/>
                        <declaration name="j" type="int" line="125"/>
                        <scope line="126">
                            <scope line="127"/>
                        </scope>
                        <declaration name="acb" type="AuthorizeCallback" line="132"/>
                        <scope line="134"/>
                        <scope line="137"/>
                    </scope>
                </scope>
                <scope line="146"/>
                <scope line="150"/>
                <scope line="154"/>
                <scope line="158"/>
                <scope line="161"/>
            </method>
            <method name="getAuthorizationID" type="String" line="166">
                <scope line="167"/>
                <scope line="170"/>
            </method>
        </class>
    </source>