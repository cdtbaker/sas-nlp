<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.jgss">
        <import package="org.ietf.jgss"/>
        <interface name="ExtendedGSSContext">
            <implements interface="GSSContext"/>
            <javadoc line="3">
                The extended GSSContext interface for supporting additional
                  functionalities not defined by {@code org.ietf.jgss.GSSContext},
                  such as querying context-specific attributes.                
            </javadoc>
            <method name="inquireSecContext" type="Object" line="9"/>
            <javadoc line="9">
                Return the mechanism-specific attribute associated with {@code type}.
                  &lt;br&gt;&lt;br&gt;
                  For each supported attribute type, the type for the output are
                  defined below.
                  &lt;ol&gt;
                  &lt;li&gt;{@code KRB5_GET_TKT_FLAGS}:
                  the returned object is a boolean array for the service ticket flags,
                  which is long enough to contain all true bits. This means if
                  the user wants to get the &lt;em&gt;n&lt;/em&gt;&apos;th bit but the length of the
                  returned array is less than &lt;em&gt;n&lt;/em&gt;, it is regarded as false.
                  &lt;li&gt;{@code KRB5_GET_SESSION_KEY}:
                  the returned object is an instance of {@link java.security.Key},
                  which has the following properties:
                  &lt;ul&gt;
                  &lt;li&gt;Algorithm: enctype as a string, where
                  enctype is defined in RFC 3961, section 8.
                  &lt;li&gt;Format: &quot;RAW&quot;
                  &lt;li&gt;Encoded form: the raw key bytes, not in any ASN.1 encoding
                  &lt;/ul&gt;
                  &lt;li&gt;{@code KRB5_GET_AUTHZ_DATA}:
                  the returned object is an array of{@link com.sun.security.jgss.AuthorizationDataEntry}, or null if the
                  optional field is missing in the service ticket.
                  &lt;li&gt;{@code KRB5_GET_AUTHTIME}:
                  the returned object is a String object in the standard KerberosTime
                  format defined in RFC 4120 5.2.3
                  &lt;/ol&gt;
                  If there is a security manager, an {@link InquireSecContextPermission}with the name {@code type.mech} must be granted. Otherwise, this could
                  result in a {@link SecurityException}.&lt;p&gt;
                  Example:
                  &lt;pre&gt;
                  GSSContext ctxt = m.createContext(...)
                  // Establishing the context
                  if (ctxt instanceof ExtendedGSSContext) {
                  ExtendedGSSContext ex = (ExtendedGSSContext)ctxt;
                  try {
                  Key key = (key)ex.inquireSecContext(
                  InquireType.KRB5_GET_SESSION_KEY);
                  // read key info
                  } catch (GSSException gsse) {
                  // deal with exception
                  }
                  }
                  &lt;/pre&gt;                
                <param>
                    type the type of the attribute requested                    
                </param>
                <return>
                    the attribute, see the method documentation for details.                    
                </return>
                <throws>
                    GSSException containing  the following
                      major error codes:{@link GSSException#BAD_MECH GSSException.BAD_MECH} if the mechanism
                      does not support this method,{@link GSSException#UNAVAILABLE GSSException.UNAVAILABLE} if the
                      type specified is not supported,{@link GSSException#NO_CONTEXT GSSException.NO_CONTEXT} if the
                      security context is invalid,{@link GSSException#FAILURE GSSException.FAILURE} for other
                      unspecified failures.                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and a proper{@link InquireSecContextPermission} is not granted.                    
                </throws>
                <see>
                    InquireSecContextPermission                    
                </see>
            </javadoc>
            <method name="requestDelegPolicy" type="void" line="65"/>
            <javadoc line="65">
                Requests that the delegation policy be respected. When a true value is
                  requested, the underlying context would use the delegation policy
                  defined by the environment as a hint to determine whether credentials
                  delegation should be performed. This request can only be made on the
                  context initiator&apos;s side and it has to be done prior to the first
                  call to &lt;code&gt;initSecContext&lt;/code&gt;.
                  &lt;p&gt;
                  When this flag is false, delegation will only be tried when the{@link GSSContext#requestCredDeleg(boolean) credentials delegation flag}is true.
                  &lt;p&gt;
                  When this flag is true but the{@link GSSContext#requestCredDeleg(boolean) credentials delegation flag}is false, delegation will be only tried if the delegation policy permits
                  delegation.
                  &lt;p&gt;
                  When both this flag and the{@link GSSContext#requestCredDeleg(boolean) credentials delegation flag}are true, delegation will be always tried. However, if the delegation
                  policy does not permit delegation, the value of{@link #getDelegPolicyState} will be false, even
                  if delegation is performed successfully.
                  &lt;p&gt;
                  In any case, if the delegation is not successful, the value returned
                  by {@link GSSContext#getCredDelegState()} is false, and the value
                  returned by {@link #getDelegPolicyState()} is also false.
                  &lt;p&gt;
                  Not all mechanisms support delegation policy. Therefore, the
                  application should check to see if the request was honored with the{@link #getDelegPolicyState() getDelegPolicyState} method. When
                  delegation policy is not supported, &lt;code&gt;requestDelegPolicy&lt;/code&gt;
                  should return silently without throwing an exception.
                  &lt;p&gt;
                  Note: for the Kerberos 5 mechanism, the delegation policy is expressed
                  through the OK-AS-DELEGATE flag in the service ticket. When it&apos;s true,
                  the KDC permits delegation to the target server. In a cross-realm
                  environment, in order for delegation be permitted, all cross-realm TGTs
                  on the authentication path must also have the OK-AS-DELAGATE flags set.                
                <param>
                    state true if the policy should be respected                    
                </param>
                <throws>
                    GSSException containing the following
                      major error codes:{@link GSSException#FAILURE GSSException.FAILURE}                    
                </throws>
            </javadoc>
            <method name="getDelegPolicyState" type="boolean" line="101"/>
            <javadoc line="101">
                Returns the delegation policy response. Called after a security context
                  is established. This method can be only called on the initiator&apos;s side.
                  See {@link ExtendedGSSContext#requestDelegPolicy}.                
                <return>
                    the delegation policy response                    
                </return>
            </javadoc>
        </interface>
    </source>