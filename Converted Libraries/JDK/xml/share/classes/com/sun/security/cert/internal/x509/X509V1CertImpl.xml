<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.cert.internal.x509">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.Signature"/>
        <import package="javax.security.cert"/>
        <import package="java.security"/>
        <import package="java.util.Date"/>
        <import package="java.util.BitSet"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <class name="X509V1CertImpl" line="44">
            <extends class="X509Certificate"/>
            <comment line="212">
                Gets the version number from the certificate.
                
                 @return the version number.                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="44">
                The X509V1CertImpl class is used as a conversion wrapper around
                  sun.security.x509.X509Cert certificates when running under JDK1.1.x.                
                <author>
                    Jeff Nisewanger                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="51"/>
            <declaration name="wrappedCert" type="java.security.cert.X509Certificate" line="52"/>
            <method name="getFactory" type="java.security.cert.CertificateFactory" line="57"/>
            <javadoc line="61">
                Default constructor.                
            </javadoc>
            <method name="X509V1CertImpl" type="constructor" line="64"/>
            <javadoc line="66">
                Unmarshals a certificate from its encoded form, parsing the
                  encoded bytes.  This form of constructor is used by agents which
                  need to examine and use certificate contents.  That is, this is
                  one of the more commonly used constructors.  Note that the buffer
                  must include only a certificate, and no &quot;garbage&quot; may be left at
                  the end.  If you need to ignore data at the end of a certificate,
                  use another constructor.                
                <param>
                    certData the encoded bytes, with no trailing padding.                    
                </param>
                <exception>
                    CertificateException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="X509V1CertImpl" type="constructor" line="79">
                <params>
                    <param name="certData" type="byte[]"/>
                </params>
                <scope line="80">
                    <declaration name="bs" type="ByteArrayInputStream" line="81"/>
                </scope>
                <scope line="86"/>
            </method>
            <javadoc line="91">
                unmarshals an X.509 certificate from an input stream.                
                <param>
                    in an input stream holding at least one certificate                    
                </param>
                <exception>
                    CertificateException on parsing errors.                    
                </exception>
            </javadoc>
            <method name="X509V1CertImpl" type="constructor" line="98">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <scope line="99"/>
                <scope line="102"/>
            </method>
            <javadoc line="107">
                Returns the encoded form of this certificate. It is
                  assumed that each certificate type would have only a single
                  form of encoding; for example, X.509 certificates would
                  be encoded as ASN.1 DER.                
            </javadoc>
            <method name="getEncoded" type="byte[]" line="113">
                <scope line="114"/>
                <scope line="116"/>
            </method>
            <javadoc line="121">
                Throws an exception if the certificate was not signed using the
                  verification key provided.  Successfully verifying a certificate
                  does &lt;em&gt;not&lt;/em&gt; indicate that one should trust the entity which
                  it represents.                
                <param>
                    key the public key used for verification.                    
                </param>
            </javadoc>
            <method name="verify" type="void" line="133">
                <params>
                    <param name="key" type="PublicKey"/>
                </params>
                <scope line="134"/>
                <scope line="136"/>
            </method>
            <javadoc line="141">
                Throws an exception if the certificate was not signed using the
                  verification key provided.  Successfully verifying a certificate
                  does &lt;em&gt;not&lt;/em&gt; indicate that one should trust the entity which
                  it represents.                
                <param>
                    key the public key used for verification.                    
                </param>
                <param>
                    sigProvider the name of the provider.                    
                </param>
            </javadoc>
            <method name="verify" type="void" line="154">
                <params>
                    <param name="key" type="PublicKey"/>
                    <param name="sigProvider" type="String"/>
                </params>
                <scope line="155"/>
                <scope line="157"/>
            </method>
            <javadoc line="162">
                Checks that the certificate is currently valid, i.e. the current
                  time is within the specified validity period.                
            </javadoc>
            <method name="checkValidity" type="void" line="167"/>
            <javadoc line="171">
                Checks that the specified date is within the certificate&apos;s
                  validity period, or basically if the certificate would be
                  valid at the specified date/time.                
                <param>
                    date the Date to check against to see if this certificate
                      is valid at that date/time.                    
                </param>
            </javadoc>
            <method name="checkValidity" type="void" line="180">
                <params>
                    <param name="date" type="Date"/>
                </params>
                <scope line="181"/>
                <scope line="183"/>
                <scope line="185"/>
            </method>
            <javadoc line="191">
                Returns a printable representation of the certificate.  This does not
                  contain all the information available to distinguish this from any
                  other certificate.  The certificate must be fully constructed
                  before this function may be called.                
            </javadoc>
            <method name="toString" type="String" line="197"/>
            <javadoc line="201">
                Gets the publickey from this certificate.                
                <return>
                    the publickey.                    
                </return>
            </javadoc>
            <method name="getPublicKey" type="PublicKey" line="206">
                <declaration name="key" type="PublicKey" line="207"/>
            </method>
            <method name="getVersion" type="int" line="216"/>
            <javadoc line="220">
                Gets the serial number from the certificate.                
                <return>
                    the serial number.                    
                </return>
            </javadoc>
            <method name="getSerialNumber" type="BigInteger" line="225"/>
            <javadoc line="229">
                Gets the subject distinguished name from the certificate.                
                <return>
                    the subject name.                    
                </return>
                <exception>
                    CertificateException if a parsing error occurs.                    
                </exception>
            </javadoc>
            <method name="getSubjectDN" type="Principal" line="235"/>
            <javadoc line="239">
                Gets the issuer distinguished name from the certificate.                
                <return>
                    the issuer name.                    
                </return>
                <exception>
                    CertificateException if a parsing error occurs.                    
                </exception>
            </javadoc>
            <method name="getIssuerDN" type="Principal" line="245"/>
            <javadoc line="249">
                Gets the notBefore date from the validity period of the certificate.                
                <return>
                    the start date of the validity period.                    
                </return>
                <exception>
                    CertificateException if a parsing error occurs.                    
                </exception>
            </javadoc>
            <method name="getNotBefore" type="Date" line="255"/>
            <javadoc line="259">
                Gets the notAfter date from the validity period of the certificate.                
                <return>
                    the end date of the validity period.                    
                </return>
                <exception>
                    CertificateException if a parsing error occurs.                    
                </exception>
            </javadoc>
            <method name="getNotAfter" type="Date" line="265"/>
            <javadoc line="269">
                Gets the signature algorithm name for the certificate
                  signature algorithm.
                  For example, the string &quot;SHA1/DSA&quot;.                
                <return>
                    the signature algorithm name.                    
                </return>
                <exception>
                    CertificateException if a parsing error occurs.                    
                </exception>
            </javadoc>
            <method name="getSigAlgName" type="String" line="277"/>
            <javadoc line="281">
                Gets the signature algorithm OID string from the certificate.
                  For example, the string &quot;1.2.840.10040.4.3&quot;                
                <return>
                    the signature algorithm oid string.                    
                </return>
                <exception>
                    CertificateException if a parsing error occurs.                    
                </exception>
            </javadoc>
            <method name="getSigAlgOID" type="String" line="288"/>
            <javadoc line="292">
                Gets the DER encoded signature algorithm parameters from this
                  certificate&apos;s signature algorithm.                
                <return>
                    the DER encoded signature algorithm parameters, or
                      null if no parameters are present.                    
                </return>
                <exception>
                    CertificateException if a parsing error occurs.                    
                </exception>
            </javadoc>
            <method name="getSigAlgParams" type="byte[]" line="300"/>
            <method name="writeObject" type="void" line="305">
                <params>
                    <param name="stream" type="ObjectOutputStream"/>
                </params>
                <scope line="306"/>
                <scope line="308"/>
            </method>
            <method name="readObject" type="void" line="314">
                <params>
                    <param name="stream" type="ObjectInputStream"/>
                </params>
                <scope line="315"/>
                <scope line="318"/>
            </method>
            <method name="getX509Certificate" type="java.security.cert.X509Certificate" line="323"/>
        </class>
    </source>