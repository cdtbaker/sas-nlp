<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl.ntlm">
        <import package="com.sun.security.ntlm.NTLMException"/>
        <import package="com.sun.security.ntlm.Server"/>
        <import package="java.io.IOException"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.util.Map"/>
        <import package="java.util.Random"/>
        <import package="javax.security.auth.callback.Callback"/>
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <import package="javax.security.auth.callback.NameCallback"/>
        <import package="javax.security.auth.callback.PasswordCallback"/>
        <import package="javax.security.auth.callback.UnsupportedCallbackException"/>
        <import package="javax.security.sasl"/>
        <class name="NTLMServer" line="41">
            <implements interface="SaslServer"/>
            <javadoc line="41">
                Required callbacks:
                  - RealmCallback
                  used as key by handler to fetch password, optional
                  - NameCallback
                  used as key by handler to fetch password
                  - PasswordCallback
                  handler must enter password for username/realm supplied
                  Environment properties that affect the implementation:
                  javax.security.sasl.qop
                  String, quality of protection; only &quot;auth&quot; is accepted, default &quot;auth&quot;
                  com.sun.security.sasl.ntlm.version
                  String, name a specific version to accept:
                  LM/NTLM: Original NTLM v1
                  LM: Original NTLM v1, LM only
                  NTLM: Original NTLM v1, NTLM only
                  NTLM2: NTLM v1 with Client Challenge
                  LMv2/NTLMv2: NTLM v2
                  LMv2: NTLM v2, LM only
                  NTLMv2: NTLM v2, NTLM only
                  If not specified, use system property &quot;ntlm.version&quot;. If also
                  not specfied, all versions are accepted.
                  com.sun.security.sasl.ntlm.domain
                  String, the domain of the server, default is server name (fqdn parameter)
                  com.sun.security.sasl.ntlm.random
                  java.util.Random, the nonce source. Default null, an internal
                  java.util.Random object will be used
                  Negotiated Properties:
                  javax.security.sasl.qop
                  Always &quot;auth&quot;
                  com.sun.security.sasl.ntlm.hostname
                  The hostname for the user, provided by the client                
            </javadoc>
            <declaration name="NTLM_VERSION" type="String" line="86"/>
            <declaration name="NTLM_DOMAIN" type="String" line="88"/>
            <declaration name="NTLM_HOSTNAME" type="String" line="90"/>
            <declaration name="NTLM_RANDOM" type="String" line="92"/>
            <declaration name="random" type="Random" line="95"/>
            <declaration name="server" type="Server" line="96"/>
            <declaration name="nonce" type="byte[]" line="97"/>
            <declaration name="step" type="int" line="98"/>
            <declaration name="authzId" type="String" line="99"/>
            <declaration name="mech" type="String" line="100"/>
            <declaration name="hostname" type="String" line="101"/>
            <javadoc line="103">
                @param mech not null                
                <param>
                    protocol not null for Sasl, ignored in NTLM                    
                </param>
                <param>
                    serverName not null for Sasl, can be null in NTLM. If non-null,
                      might be used as domain if not provided in props                    
                </param>
                <param>
                    props can be null                    
                </param>
                <param>
                    cbh can be null for Sasl, but will throw NPE in auth for NTLM                    
                </param>
                <throws>
                    SaslException                    
                </throws>
            </javadoc>
            <method name="NTLMServer" type="constructor" line="113">
                <params>
                    <param name="mech" type="String"/>
                    <param name="protocol" type="String"/>
                    <param name="serverName" type="String"/>
                    <param name="props" type="Map"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <declaration name="version" type="String" line="116"/>
                <declaration name="domain" type="String" line="117"/>
                <declaration name="rtmp" type="Random" line="118"/>
                <scope line="120"/>
                <scope line="127"/>
                <scope line="130"/>
                <scope line="133"/>
                <scope line="138">
                    <anonymous_class line="139">
                        <method name="getPassword" type="char[]" line="140">
                            <params>
                                <param name="ntdomain" type="String"/>
                                <param name="username" type="String"/>
                            </params>
                            <scope line="141">
                                <declaration name="rcb" type="RealmCallback" line="142"/>
                                <declaration name="ncb" type="NameCallback" line="144"/>
                                <declaration name="pcb" type="PasswordCallback" line="146"/>
                                <declaration name="passwd" type="char[]" line="149"/>
                            </scope>
                            <scope line="152"/>
                            <scope line="154"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="159"/>
            </method>
            <method name="getMechanismName" type="String" line="167"/>
            <method name="evaluateResponse" type="byte[]" line="172">
                <params>
                    <param name="response" type="byte[]"/>
                </params>
                <scope line="173">
                    <scope line="175"/>
                    <scope line="178">
                        <declaration name="out" type="String[]" line="179"/>
                    </scope>
                </scope>
                <scope line="184"/>
            </method>
            <method name="isComplete" type="boolean" line="190"/>
            <method name="getAuthorizationID" type="String" line="195"/>
            <method name="unwrap" type="byte[]" line="201">
                <params>
                    <param name="incoming" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="wrap" type="byte[]" line="207">
                <params>
                    <param name="outgoing" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="getNegotiatedProperty" type="Object" line="212">
                <params>
                    <param name="propName" type="String"/>
                </params>
                <scope line="213"/>
                <scope line="215"/>
                <scope line="217"/>
            </method>
            <method name="dispose" type="void" line="223"/>
        </class>
    </source>