<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.auth">
        <import package="java.security.Principal"/>
        <import package="sun.security.x509.X500Name"/>
        <class name="X500Principal" line="31">
            <implements interface="Principal"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="31">
                &lt;p&gt; This class represents an X.500 &lt;code&gt;Principal&lt;/code&gt;.
                  X500Principals have names such as,
                  &quot;CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US&quot;
                  (RFC 1779 style).
                  &lt;p&gt; Principals such as this &lt;code&gt;X500Principal&lt;/code&gt;
                  may be associated with a particular &lt;code&gt;Subject&lt;/code&gt;
                  to augment that &lt;code&gt;Subject&lt;/code&gt; with an additional
                  identity.  Refer to the &lt;code&gt;Subject&lt;/code&gt; class for more information
                  on how to achieve this.  Authorization decisions can then be based upon
                  the Principals associated with a &lt;code&gt;Subject&lt;/code&gt;.                
                <see>
                    java.security.Principal                    
                </see>
                <see>
                    javax.security.auth.Subject                    
                </see>
                <deprecated>
                    A new X500Principal class is available in the Java platform.
                      This X500Principal classs is entirely deprecated and
                      is here to allow for a smooth transition to the new
                      class.                    
                </deprecated>
                <see>
                    javax.security.auth.x500.X500Principal                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="55"/>
            <declaration name="rb" type="java.util.ResourceBundle" line="57"/>
            <anonymous_class line="59">
                <method name="run" type="java.util.ResourceBundle" line="60"/>
            </anonymous_class>
            <declaration name="name" type="String" line="66"/>
            <javadoc line="66">
                @serial                
            </javadoc>
            <declaration name="thisX500Name" type="X500Name" line="71"/>
            <javadoc line="73">
                Create a X500Principal with an X.500 Name,
                  such as &quot;CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US&quot;
                  (RFC 1779 style).
                  &lt;p&gt;                
                <param>
                    name the X.500 name                    
                </param>
                <exception>
                    NullPointerException if the <code>name</code>
                      is <code>null</code>. <p>                    
                </exception>
                <exception>
                    IllegalArgumentException if the <code>name</code>
                      is improperly specified.                    
                </exception>
            </javadoc>
            <method name="X500Principal" type="constructor" line="88">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="92"/>
                <scope line="94"/>
            </method>
            <javadoc line="101">
                Return the Unix username for this &lt;code&gt;X500Principal&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    the Unix username for this <code>X500Principal</code>                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="108"/>
            <javadoc line="112">
                Return a string representation of this &lt;code&gt;X500Principal&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    a string representation of this <code>X500Principal</code>.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="119"/>
            <javadoc line="123">
                Compares the specified Object with this &lt;code&gt;X500Principal&lt;/code&gt;
                  for equality.
                  &lt;p&gt;                
                <param>
                    o Object to be compared for equality with this
                      <code>X500Principal</code>.                    
                </param>
                <return>
                    true if the specified Object is equal equal to this
                      <code>X500Principal</code>.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="135">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <comment line="149">
                    any parsing exceptions, return false                    
                </comment>
                <comment line="153">
                    this will return &apos;true&apos; if &apos;o&apos; is a sun.security.x509.X500Name
                     and the X500Names are equal                    
                </comment>
                <scope line="142">
                    <declaration name="that" type="X500Principal" line="143"/>
                    <scope line="144">
                        <declaration name="thatX500Name" type="X500Name" line="145"/>
                    </scope>
                    <scope line="147"/>
                </scope>
                <scope line="151"/>
            </method>
            <javadoc line="160">
                Return a hash code for this &lt;code&gt;X500Principal&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    a hash code for this <code>X500Principal</code>.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="167"/>
            <javadoc line="171">
                Reads this object from a stream (i.e., deserializes it)                
            </javadoc>
            <method name="readObject" type="void" line="177">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="182">
                    re-create thisX500Name                    
                </comment>
            </method>
        </class>
    </source>