<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl.gsskerb">
        <import package="javax.security.sasl"/>
        <import package="java.io"/>
        <import package="java.util.Map"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.security.auth.callback"/>
        <import package="org.ietf.jgss"/>
        <class name="GssKrb5Server" line="9">
            <extends class="GssKrb5Base"/>
            <implements interface="SaslServer"/>
            <javadoc line="9">
                Implements the GSSAPI SASL server mechanism for Kerberos V5.
                  (&lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2222.txt&quot;&gt;RFC 2222&lt;/A&gt;,
                  &lt;a HREF=&quot;http://www.ietf.org/internet-drafts/draft-ietf-cat-sasl-gssapi-00.txt&quot;&gt;draft-ietf-cat-sasl-gssapi-00.txt&lt;/a&gt;).
                  Expects thread&apos;s Subject to contain server&apos;s Kerberos credentials
                  - If not, underlying KRB5 mech will attempt to acquire Kerberos creds
                  by logging into Kerberos (via default TextCallbackHandler).
                  - These creds will be used for exchange with client.
                  Required callbacks:
                  - AuthorizeCallback
                  handler must verify that authid/authzids are allowed and set
                  authorized ID to be the canonicalized authzid (if applicable).
                  Environment properties that affect behavior of implementation:
                  javax.security.sasl.qop
                  - quality of protection; list of auth, auth-int, auth-conf; default is &quot;auth&quot;
                  javax.security.sasl.maxbuf
                  - max receive buffer size; default is 65536
                  javax.security.sasl.sendmaxbuffer
                  - max send buffer size; default is 65536; (min with client max recv size)                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="MY_CLASS_NAME" type="String" line="31"/>
            <declaration name="handshakeStage" type="int" line="32"/>
            <declaration name="peer" type="String" line="33"/>
            <declaration name="authzid" type="String" line="34"/>
            <declaration name="cbh" type="CallbackHandler" line="35"/>
            <javadoc line="36">
                Creates a SASL mechanism with server credentials that it needs
                  to participate in GSS-API/Kerberos v5 authentication exchange
                  with the client.                
            </javadoc>
            <method name="GssKrb5Server" type="constructor" line="41">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="serverName" type="String"/>
                    <param name="props" type="Map"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <declaration name="service" type="String" line="44"/>
                <scope line="46">
                    <declaration name="mgr" type="GSSManager" line="47"/>
                    <declaration name="serviceName" type="GSSName" line="48"/>
                    <declaration name="cred" type="GSSCredential" line="49"/>
                    <scope line="51"/>
                    <scope line="54"/>
                </scope>
                <scope line="58"/>
            </method>
            <javadoc line="63">
                Processes the response data.
                  The client sends response data to which the server must
                  process using GSS_accept_sec_context.
                  As per RFC 2222, the GSS authenication completes (GSS_S_COMPLETE)
                  we do an extra hand shake to determine the negotiated security protection
                  and buffer sizes.                
                <param>
                    responseData A non-null but possible empty byte array containing the
                      response data from the client.                    
                </param>
                <return>
                    A non-null byte array containing the challenge to be
                      sent to the client, or null when no more data is to be sent.                    
                </return>
            </javadoc>
            <method name="evaluateResponse" type="byte[]" line="75">
                <params>
                    <param name="responseData" type="byte[]"/>
                </params>
                <scope line="76"/>
                <scope line="79"/>
                <scope line="88">
                    <declaration name="gssOutToken" type="byte[]" line="89"/>
                    <scope line="90"/>
                    <scope line="93">
                        <scope line="97"/>
                    </scope>
                </scope>
                <scope line="103"/>
            </method>
            <method name="doHandshake1" type="byte[]" line="108">
                <params>
                    <param name="responseData" type="byte[]"/>
                </params>
                <scope line="109">
                    <scope line="110"/>
                    <declaration name="gssInToken" type="byte[]" line="113"/>
                    <scope line="116"/>
                    <scope line="120"/>
                    <declaration name="gssOutToken" type="byte[]" line="123"/>
                    <scope line="124"/>
                </scope>
                <scope line="129"/>
            </method>
            <method name="doHandshake2" type="byte[]" line="133">
                <params>
                    <param name="responseData" type="byte[]"/>
                </params>
                <scope line="134">
                    <declaration name="gssOutToken" type="byte[]" line="135"/>
                    <scope line="136"/>
                    <declaration name="selectedQop" type="byte" line="139"/>
                    <scope line="140"/>
                    <scope line="143"/>
                    <scope line="147"/>
                    <declaration name="clntMaxBufSize" type="int" line="151"/>
                    <scope line="154"/>
                    <scope line="158">
                        <scope line="159"/>
                        <scope line="162"/>
                    </scope>
                    <scope line="166"/>
                    <declaration name="acb" type="AuthorizeCallback" line="170"/>
                    <scope line="172"/>
                    <scope line="176"/>
                </scope>
                <scope line="181"/>
                <scope line="184"/>
                <scope line="187"/>
            </method>
            <method name="getAuthorizationID" type="String" line="191">
                <scope line="192"/>
                <scope line="195"/>
            </method>
        </class>
    </source>