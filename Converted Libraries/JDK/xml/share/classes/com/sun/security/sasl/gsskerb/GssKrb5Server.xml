<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl.gsskerb">
        <import package="javax.security.sasl"/>
        <import package="java.io"/>
        <import package="java.util.Map"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.security.auth.callback"/>
        <import package="org.ietf.jgss"/>
        <class name="GssKrb5Server" line="40">
            <extends class="GssKrb5Base"/>
            <implements interface="SaslServer"/>
            <javadoc line="40">
                Implements the GSSAPI SASL server mechanism for Kerberos V5.
                  (&lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2222.txt&quot;&gt;RFC 2222&lt;/A&gt;,
                  &lt;a HREF=&quot;http://www.ietf.org/internet-drafts/draft-ietf-cat-sasl-gssapi-00.txt&quot;&gt;draft-ietf-cat-sasl-gssapi-00.txt&lt;/a&gt;).
                  Expects thread&apos;s Subject to contain server&apos;s Kerberos credentials
                  - If not, underlying KRB5 mech will attempt to acquire Kerberos creds
                  by logging into Kerberos (via default TextCallbackHandler).
                  - These creds will be used for exchange with client.
                  Required callbacks:
                  - AuthorizeCallback
                  handler must verify that authid/authzids are allowed and set
                  authorized ID to be the canonicalized authzid (if applicable).
                  Environment properties that affect behavior of implementation:
                  javax.security.sasl.qop
                  - quality of protection; list of auth, auth-int, auth-conf; default is &quot;auth&quot;
                  javax.security.sasl.maxbuf
                  - max receive buffer size; default is 65536
                  javax.security.sasl.sendmaxbuffer
                  - max send buffer size; default is 65536; (min with client max recv size)                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="MY_CLASS_NAME" type="String" line="67"/>
            <declaration name="handshakeStage" type="int" line="69"/>
            <declaration name="peer" type="String" line="70"/>
            <declaration name="authzid" type="String" line="71"/>
            <declaration name="cbh" type="CallbackHandler" line="72"/>
            <javadoc line="74">
                Creates a SASL mechanism with server credentials that it needs
                  to participate in GSS-API/Kerberos v5 authentication exchange
                  with the client.                
            </javadoc>
            <method name="GssKrb5Server" type="constructor" line="80">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="serverName" type="String"/>
                    <param name="props" type="Map"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <comment line="93">
                    Create the name for the requested service entity for Krb5 mech                    
                </comment>
                <comment line="101">
                    Create a context using the server&apos;s credentials                    
                </comment>
                <comment line="105">
                    Might need integrity                    
                </comment>
                <comment line="110">
                    Might need privacy                    
                </comment>
                <declaration name="service" type="String" line="85"/>
                <scope line="89">
                    <declaration name="mgr" type="GSSManager" line="90"/>
                    <declaration name="serviceName" type="GSSName" line="93"/>
                    <declaration name="cred" type="GSSCredential" line="96"/>
                    <scope line="103"/>
                    <scope line="108"/>
                </scope>
                <scope line="112"/>
            </method>
            <javadoc line="119">
                Processes the response data.
                  The client sends response data to which the server must
                  process using GSS_accept_sec_context.
                  As per RFC 2222, the GSS authenication completes (GSS_S_COMPLETE)
                  we do an extra hand shake to determine the negotiated security protection
                  and buffer sizes.                
                <param>
                    responseData A non-null but possible empty byte array containing the
                      response data from the client.                    
                </param>
                <return>
                    A non-null byte array containing the challenge to be
                      sent to the client, or null when no more data is to be sent.                    
                </return>
            </javadoc>
            <method name="evaluateResponse" type="byte[]" line="133">
                <params>
                    <param name="responseData" type="byte[]"/>
                </params>
                <comment line="153">
                    Security context not established yet; continue with accept                    
                </comment>
                <scope line="134"/>
                <scope line="139"/>
                <scope line="154">
                    <declaration name="gssOutToken" type="byte[]" line="155"/>
                    <scope line="158"/>
                    <scope line="163">
                        <scope line="170"/>
                    </scope>
                </scope>
                <scope line="176"/>
            </method>
            <method name="doHandshake1" type="byte[]" line="182">
                <params>
                    <param name="responseData" type="byte[]"/>
                </params>
                <comment line="185">
                    Security context already established. responseData
                     should contain no data                    
                </comment>
                <comment line="192">
                    Construct 4 octets of data:
                     First octet contains bitmask specifying protections supported
                     2nd-4th octets contains max receive buffer of server                    
                </comment>
                <comment line="207">
                    progress to next stage                    
                </comment>
                <comment line="215">
                                        
                </comment>
                <comment line="215">
                                        
                </comment>
                <scope line="183">
                    <scope line="186"/>
                    <declaration name="gssInToken" type="byte[]" line="195"/>
                    <scope line="199"/>
                    <scope line="208"/>
                    <declaration name="gssOutToken" type="byte[]" line="213"/>
                    <scope line="216"/>
                </scope>
                <scope line="222"/>
            </method>
            <method name="doHandshake2" type="byte[]" line="227">
                <params>
                    <param name="responseData" type="byte[]"/>
                </params>
                <comment line="230">
                    Expecting 4 octets from client selected protection
                     and client&apos;s receive buffer size                    
                </comment>
                <comment line="240">
                    First octet is a bit-mask specifying the selected protection                    
                </comment>
                <comment line="254">
                    2nd-4th octets specifies maximum buffer size expected by
                     client (in network byte order). This is the server&apos;s send
                     buffer maximum.                    
                </comment>
                <comment line="259">
                    Determine the max send buffer size based on what the
                     client is able to receive and our specified max                    
                </comment>
                <comment line="264">
                    Update context to limit size of returned buffer                    
                </comment>
                <comment line="281">
                    Get authorization identity, if any                    
                </comment>
                <comment line="296">
                    In Kerberos, realm is embedded in peer name                    
                </comment>
                <comment line="302">
                    Authorization failed                    
                </comment>
                <scope line="228">
                    <declaration name="gssOutToken" type="byte[]" line="231"/>
                    <scope line="234"/>
                    <declaration name="selectedQop" type="byte" line="240"/>
                    <scope line="241"/>
                    <scope line="245"/>
                    <scope line="248"/>
                    <declaration name="clntMaxBufSize" type="int" line="256"/>
                    <scope line="267"/>
                    <scope line="281">
                        <scope line="282"/>
                        <scope line="285"/>
                    </scope>
                    <scope line="288"/>
                    <declaration name="acb" type="AuthorizeCallback" line="293"/>
                    <scope line="297"/>
                    <scope line="300"/>
                </scope>
                <scope line="307"/>
                <scope line="309"/>
                <scope line="311"/>
            </method>
            <method name="getAuthorizationID" type="String" line="316">
                <scope line="317"/>
                <scope line="319"/>
            </method>
        </class>
    </source>