<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl">
        <import package="javax.security.sasl"/>
        <class name="ExternalClient" line="3">
            <implements interface="SaslClient"/>
            <javadoc line="3">
                Implements the EXTERNAL SASL client mechanism.
                  (&lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2222.txt&quot;&gt;RFC 2222&lt;/A&gt;).
                  The EXTERNAL mechanism returns the optional authorization ID as
                  the initial response. It processes no challenges.                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="username" type="byte[]" line="11"/>
            <declaration name="completed" type="boolean" line="12"/>
            <javadoc line="13">
                Constructs an External mechanism with optional authorization ID.                
                <param>
                    authorizationID If non-null, used to specify authorization ID.                    
                </param>
                <throws>
                    SaslException if cannot convert authorizationID into UTF-8
                      representation.                    
                </throws>
            </javadoc>
            <method name="ExternalClient" type="constructor" line="19">
                <params>
                    <param name="authorizationID" type="String"/>
                </params>
                <scope line="20">
                    <scope line="21"/>
                    <scope line="24"/>
                </scope>
                <scope line="28"/>
            </method>
            <javadoc line="32">
                Retrieves this mechanism&apos;s name for initiating the &quot;EXTERNAL&quot; protocol
                  exchange.                
                <return>
                    The string &quot;EXTERNAL&quot;.                    
                </return>
            </javadoc>
            <method name="getMechanismName" type="String" line="37"/>
            <javadoc line="40">
                This mechanism has an initial response.                
            </javadoc>
            <method name="hasInitialResponse" type="boolean" line="43"/>
            <method name="dispose" type="void" line="46"/>
            <javadoc line="48">
                Processes the challenge data.
                  It returns the EXTERNAL mechanism&apos;s initial response,
                  which is the authorization id encoded in UTF-8.
                  This is the optional information that is sent along with the SASL command.
                  After this method is called, isComplete() returns true.                
                <param>
                    challengeData Ignored.                    
                </param>
                <return>
                    The possible empty initial response.                    
                </return>
                <throws>
                    SaslException If authentication has already been called.                    
                </throws>
            </javadoc>
            <method name="evaluateChallenge" type="byte[]" line="58">
                <params>
                    <param name="challengeData" type="byte[]"/>
                </params>
                <scope line="59"/>
            </method>
            <javadoc line="65">
                Returns whether this mechanism is complete.                
                <return>
                    true if initial response has been sent; false otherwise.                    
                </return>
            </javadoc>
            <method name="isComplete" type="boolean" line="69"/>
            <javadoc line="72">
                Unwraps the incoming buffer.                
                <throws>
                    SaslException Not applicable to this mechanism.                    
                </throws>
            </javadoc>
            <method name="unwrap" type="byte[]" line="76">
                <params>
                    <param name="incoming" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="77"/>
                <scope line="80"/>
            </method>
            <javadoc line="84">
                Wraps the outgoing buffer.                
                <throws>
                    SaslException Not applicable to this mechanism.                    
                </throws>
            </javadoc>
            <method name="wrap" type="byte[]" line="88">
                <params>
                    <param name="outgoing" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="89"/>
                <scope line="92"/>
            </method>
            <javadoc line="96">
                Retrieves the negotiated property.
                  This method can be called only after the authentication exchange has
                  completed (i.e., when &lt;tt&gt;isComplete()&lt;/tt&gt; returns true); otherwise, a
                  &lt;tt&gt;IllegalStateException&lt;/tt&gt; is thrown.                
                <return>
                    null No property is applicable to this mechanism.                    
                </return>
                <exception>
                    IllegalStateException if this authentication exchange
                      has not completed                    
                </exception>
            </javadoc>
            <method name="getNegotiatedProperty" type="Object" line="105">
                <params>
                    <param name="propName" type="String"/>
                </params>
                <scope line="106"/>
                <scope line="109"/>
            </method>
        </class>
    </source>