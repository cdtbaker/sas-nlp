<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.ntlm">
        <import package="com.sun.security.ntlm.Version"/>
        <import package="java.io.IOException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="java.util.Arrays"/>
        <import package="javax.crypto.BadPaddingException"/>
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.IllegalBlockSizeException"/>
        <import package="javax.crypto.Mac"/>
        <import package="javax.crypto.NoSuchPaddingException"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.SecretKeyFactory"/>
        <import package="javax.crypto.spec.DESKeySpec"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <class name="NTLM" line="46">
            <comment line="261">
                LM/NTLM                
            </comment>
            <comment line="263">
                Convert a 7 byte array to an 8 byte array (for a des key with parity)
                 input starts at offset off                
            </comment>
            <comment line="328">
                key is a 21 byte array. Split it into 3 7 byte chunks,
                 Convert each to 8 byte DES keys, encrypt the text arg with
                 each key and return the three results in a sequential []                
            </comment>
            <comment line="364">
                LMv2/NTLMv2                
            </comment>
            <comment line="397">
                NTLM2 LM/NTLM                
            </comment>
            <comment line="410">
                Password in ASCII and UNICODE                
            </comment>
            <javadoc line="46">
                NTLM authentication implemented according to MS-NLMP, version 12.1                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="fac" type="SecretKeyFactory" line="52"/>
            <declaration name="cipher" type="Cipher" line="53"/>
            <declaration name="md4" type="MessageDigest" line="54"/>
            <declaration name="hmac" type="Mac" line="55"/>
            <declaration name="md5" type="MessageDigest" line="56"/>
            <declaration name="DEBUG" type="boolean" line="57"/>
            <declaration name="v" type="Version" line="60"/>
            <declaration name="writeLM" type="boolean" line="62"/>
            <declaration name="writeNTLM" type="boolean" line="63"/>
            <method name="NTLM" type="constructor" line="65">
                <params>
                    <param name="version" type="String"/>
                </params>
                <scope line="78"/>
                <scope line="84"/>
                <scope line="86"/>
            </method>
            <javadoc line="91">
                Prints out a formatted string, called in various places inside then NTLM
                  implementation for debugging/logging purposes. When the system property
                  &quot;ntlm.debug&quot; is set, &lt;code&gt;System.out.printf(format, args)&lt;/code&gt; is
                  called. This method is designed to be overridden by child classes to
                  match their own debugging/logging mechanisms.                
                <param>
                    format a format string                    
                </param>
                <param>
                    args the arguments referenced by <code>format</code>                    
                </param>
                <see>
                    java.io.PrintStream#printf(java.lang.String,java.lang.Object[])                    
                </see>
            </javadoc>
            <method name="debug" type="void" line="101">
                <params>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
                <scope line="102"/>
            </method>
            <javadoc line="107">
                Prints out the content of a byte array, called in various places inside
                  the NTLM implementation for debugging/logging purposes. When the system
                  property &quot;ntlm.debug&quot; is set, the hexdump of the array is printed into
                  System.out. This method is designed to be overridden by child classes to
                  match their own debugging/logging mechanisms.                
                <param>
                    bytes the byte array to print out                    
                </param>
            </javadoc>
            <method name="debug" type="void" line="115">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <comment line="121">
                    Impossible                    
                </comment>
                <scope line="116">
                    <scope line="117"/>
                    <scope line="119"/>
                </scope>
            </method>
            <class name="Reader" line="125">
                <comment line="198">
                    buffer                    
                </comment>
                <comment line="199">
                    current written content interface buffer                    
                </comment>
                <javadoc line="125">
                    Reading an NTLM packet                    
                </javadoc>
                <declaration name="internal" type="byte[]" line="130"/>
                <method name="Reader" type="constructor" line="132">
                    <params>
                        <param name="data" type="byte[]"/>
                    </params>
                </method>
                <method name="readInt" type="int" line="136">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                    <scope line="137"/>
                    <scope line="142"/>
                </method>
                <method name="readShort" type="int" line="148">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                    <scope line="149"/>
                    <scope line="152"/>
                </method>
                <method name="readBytes" type="byte[]" line="158">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="159"/>
                    <scope line="161"/>
                </method>
                <method name="readSecurityBuffer" type="byte[]" line="167">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                    <declaration name="pos" type="int" line="168"/>
                    <scope line="170"/>
                    <scope line="173"/>
                </method>
                <method name="readSecurityBuffer" type="String" line="180">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="unicode" type="boolean"/>
                    </params>
                    <declaration name="raw" type="byte[]" line="181"/>
                    <scope line="182"/>
                    <scope line="185"/>
                </method>
            </class>
            <class name="Writer" line="192">
                <comment line="198">
                    buffer                    
                </comment>
                <comment line="199">
                    current written content interface buffer                    
                </comment>
                <javadoc line="192">
                    Writing an NTLM packet                    
                </javadoc>
                <declaration name="internal" type="byte[]" line="197"/>
                <declaration name="current" type="int" line="198"/>
                <javadoc line="200">
                    Starts writing a NTLM packet                    
                    <param>
                        type NEGOTIATE || CHALLENGE || AUTHENTICATE                        
                    </param>
                    <param>
                        len the base length, without security buffers                        
                    </param>
                </javadoc>
                <method name="Writer" type="constructor" line="205">
                    <params>
                        <param name="type" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="writeShort" type="void" line="214">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="number" type="int"/>
                    </params>
                </method>
                <method name="writeInt" type="void" line="219">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="number" type="int"/>
                    </params>
                </method>
                <method name="writeBytes" type="void" line="226">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="data" type="byte[]"/>
                    </params>
                </method>
                <method name="writeSecurityBuffer" type="void" line="230">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="data" type="byte[]"/>
                    </params>
                    <scope line="231"/>
                    <scope line="233">
                        <declaration name="len" type="int" line="234"/>
                        <scope line="235"/>
                    </scope>
                </method>
                <method name="writeSecurityBuffer" type="void" line="246">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="str" type="String"/>
                        <param name="unicode" type="boolean"/>
                    </params>
                    <scope line="247"/>
                    <scope line="250"/>
                </method>
                <method name="getBytes" type="byte[]" line="255"/>
            </class>
            <method name="makeDesKey" type="byte[]" line="265">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="off" type="int"/>
                </params>
                <declaration name="in" type="int[]" line="266"/>
                <scope line="267"/>
                <declaration name="out" type="byte[]" line="270"/>
            </method>
            <method name="calcLMHash" type="byte[]" line="282">
                <params>
                    <param name="pwb" type="byte[]"/>
                </params>
                <comment line="289">
                                        
                </comment>
                <comment line="306">
                    Will not happen, all key material are 8 bytes                    
                </comment>
                <comment line="309">
                    Will not happen, we only feed DESKeySpec to DES factory                    
                </comment>
                <comment line="312">
                    Will not happen, we encrypt 8 bytes                    
                </comment>
                <comment line="315">
                    Will not happen, this is encryption                    
                </comment>
                <comment line="318">
                    will not happen, we returned already                    
                </comment>
                <declaration name="magic" type="byte[]" line="283"/>
                <declaration name="pwb1" type="byte[]" line="284"/>
                <declaration name="len" type="int" line="285"/>
                <scope line="290">
                    <declaration name="dks1" type="DESKeySpec" line="291"/>
                    <declaration name="dks2" type="DESKeySpec" line="292"/>
                    <declaration name="key1" type="SecretKey" line="294"/>
                    <declaration name="key2" type="SecretKey" line="295"/>
                    <declaration name="out1" type="byte[]" line="297"/>
                    <declaration name="out2" type="byte[]" line="299"/>
                    <declaration name="result" type="byte[]" line="300"/>
                </scope>
                <scope line="304"/>
                <scope line="307"/>
                <scope line="310"/>
                <scope line="313"/>
            </method>
            <method name="calcNTHash" type="byte[]" line="320">
                <params>
                    <param name="pw" type="byte[]"/>
                </params>
                <declaration name="out" type="byte[]" line="321"/>
                <declaration name="result" type="byte[]" line="322"/>
            </method>
            <method name="calcResponse" type="byte[]" line="331">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="text" type="byte[]"/>
                </params>
                <comment line="352">
                    None will happen                    
                </comment>
                <scope line="332">
                    <declaration name="dks1" type="DESKeySpec" line="334"/>
                    <declaration name="dks2" type="DESKeySpec" line="335"/>
                    <declaration name="dks3" type="DESKeySpec" line="336"/>
                    <declaration name="key1" type="SecretKey" line="337"/>
                    <declaration name="key2" type="SecretKey" line="338"/>
                    <declaration name="key3" type="SecretKey" line="339"/>
                    <declaration name="out1" type="byte[]" line="341"/>
                    <declaration name="out2" type="byte[]" line="343"/>
                    <declaration name="out3" type="byte[]" line="345"/>
                    <declaration name="result" type="byte[]" line="346"/>
                </scope>
                <scope line="351"/>
                <scope line="353"/>
                <scope line="355"/>
                <scope line="357"/>
            </method>
            <method name="hmacMD5" type="byte[]" line="365">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="text" type="byte[]"/>
                </params>
                <scope line="366">
                    <declaration name="skey" type="SecretKeySpec" line="367"/>
                </scope>
                <scope line="371"/>
                <scope line="373"/>
            </method>
            <method name="calcV2" type="byte[]" line="379">
                <params>
                    <param name="nthash" type="byte[]"/>
                    <param name="text" type="String"/>
                    <param name="blob" type="byte[]"/>
                    <param name="challenge" type="byte[]"/>
                </params>
                <scope line="380">
                    <declaration name="ntlmv2hash" type="byte[]" line="381"/>
                    <declaration name="cn" type="byte[]" line="383"/>
                    <declaration name="result" type="byte[]" line="386"/>
                </scope>
                <scope line="390"/>
            </method>
            <method name="ntlm2LM" type="byte[]" line="398">
                <params>
                    <param name="nonce" type="byte[]"/>
                </params>
            </method>
            <method name="ntlm2NTLM" type="byte[]" line="402">
                <params>
                    <param name="ntlmHash" type="byte[]"/>
                    <param name="nonce" type="byte[]"/>
                    <param name="challenge" type="byte[]"/>
                </params>
                <declaration name="b" type="byte[]" line="403"/>
                <declaration name="sesshash" type="byte[]" line="405"/>
            </method>
            <method name="getP1" type="byte[]" line="411">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="412"/>
                <scope line="414"/>
            </method>
            <method name="getP2" type="byte[]" line="419">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="420"/>
                <scope line="422"/>
            </method>
        </class>
    </source>