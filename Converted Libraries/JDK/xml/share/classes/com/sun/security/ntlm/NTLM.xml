<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.ntlm">
        <import package="com.sun.security.ntlm.Version"/>
        <import package="java.io.IOException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="java.util.Arrays"/>
        <import package="javax.crypto.BadPaddingException"/>
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.IllegalBlockSizeException"/>
        <import package="javax.crypto.Mac"/>
        <import package="javax.crypto.NoSuchPaddingException"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.SecretKeyFactory"/>
        <import package="javax.crypto.spec.DESKeySpec"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <class name="NTLM" line="19">
            <javadoc line="19">
                NTLM authentication implemented according to MS-NLMP, version 12.1                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="fac" type="SecretKeyFactory" line="24"/>
            <declaration name="cipher" type="Cipher" line="25"/>
            <declaration name="md4" type="MessageDigest" line="26"/>
            <declaration name="hmac" type="Mac" line="27"/>
            <declaration name="md5" type="MessageDigest" line="28"/>
            <declaration name="DEBUG" type="boolean" line="29"/>
            <declaration name="v" type="Version" line="30"/>
            <declaration name="writeLM" type="boolean" line="31"/>
            <declaration name="writeNTLM" type="boolean" line="32"/>
            <method name="NTLM" type="constructor" line="33">
                <params>
                    <param name="version" type="String"/>
                </params>
                <scope line="71"/>
                <scope line="78"/>
                <scope line="81"/>
            </method>
            <javadoc line="85">
                Prints out a formatted string, called in various places inside then NTLM
                  implementation for debugging/logging purposes. When the system property
                  &quot;ntlm.debug&quot; is set, &lt;code&gt;System.out.printf(format, args)&lt;/code&gt; is
                  called. This method is designed to be overridden by child classes to
                  match their own debugging/logging mechanisms.                
                <param>
                    format a format string                    
                </param>
                <param>
                    args the arguments referenced by &lt;code&gt;format&lt;/code&gt;                    
                </param>
                <see>
                    java.io.PrintStream#printf(java.lang.String,java.lang.Object[])                    
                </see>
            </javadoc>
            <method name="debug" type="void" line="95">
                <params>
                    <param name="format" type="String"/>
                    <param name="args" type="Object"/>
                </params>
                <scope line="96"/>
            </method>
            <javadoc line="100">
                Prints out the content of a byte array, called in various places inside
                  the NTLM implementation for debugging/logging purposes. When the system
                  property &quot;ntlm.debug&quot; is set, the hexdump of the array is printed into
                  System.out. This method is designed to be overridden by child classes to
                  match their own debugging/logging mechanisms.                
                <param>
                    bytes the byte array to print out                    
                </param>
            </javadoc>
            <method name="debug" type="void" line="108">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
                <scope line="109">
                    <scope line="110"/>
                    <scope line="113"/>
                </scope>
            </method>
            <class name="Reader" line="117">
                <javadoc line="117">
                    Reading an NTLM packet                    
                </javadoc>
                <declaration name="internal" type="byte[]" line="121"/>
                <method name="Reader" type="constructor" line="122">
                    <params>
                        <param name="data" type="byte[]"/>
                    </params>
                </method>
                <method name="readInt" type="int" line="125">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                    <scope line="126"/>
                    <scope line="129"/>
                </method>
                <method name="readShort" type="int" line="133">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                    <scope line="134"/>
                    <scope line="137"/>
                </method>
                <method name="readBytes" type="byte[]" line="141">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="142"/>
                    <scope line="145"/>
                </method>
                <method name="readSecurityBuffer" type="byte[]" line="149">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                    <declaration name="pos" type="int" line="150"/>
                    <scope line="152"/>
                    <scope line="155"/>
                </method>
                <method name="readSecurityBuffer" type="String" line="159">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="unicode" type="boolean"/>
                    </params>
                    <declaration name="raw" type="byte[]" line="160"/>
                    <scope line="161"/>
                    <scope line="164"/>
                </method>
            </class>
            <class name="Writer" line="169">
                <javadoc line="169">
                    Writing an NTLM packet                    
                </javadoc>
                <declaration name="internal" type="byte[]" line="173"/>
                <declaration name="current" type="int" line="174"/>
                <javadoc line="175">
                    Starts writing a NTLM packet                    
                    <param>
                        type NEGOTIATE || CHALLENGE || AUTHENTICATE                        
                    </param>
                    <param>
                        len the base length, without security buffers                        
                    </param>
                </javadoc>
                <method name="Writer" type="constructor" line="180">
                    <params>
                        <param name="type" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="writeShort" type="void" line="186">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="number" type="int"/>
                    </params>
                </method>
                <method name="writeInt" type="void" line="190">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="number" type="int"/>
                    </params>
                </method>
                <method name="writeBytes" type="void" line="196">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="data" type="byte[]"/>
                    </params>
                </method>
                <method name="writeSecurityBuffer" type="void" line="199">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="data" type="byte[]"/>
                    </params>
                    <scope line="200"/>
                    <scope line="203">
                        <declaration name="len" type="int" line="204"/>
                        <scope line="205"/>
                    </scope>
                </method>
                <method name="writeSecurityBuffer" type="void" line="215">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="str" type="String"/>
                        <param name="unicode" type="boolean"/>
                    </params>
                </method>
                <method name="getBytes" type="byte[]" line="223"/>
            </class>
            <method name="makeDesKey" type="byte[]" line="227">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="off" type="int"/>
                </params>
                <declaration name="in" type="int[]" line="228"/>
                <scope line="229"/>
                <declaration name="out" type="byte[]" line="232"/>
            </method>
            <method name="calcLMHash" type="byte[]" line="243">
                <params>
                    <param name="pwb" type="byte[]"/>
                </params>
            </method>
            <method name="calcNTHash" type="byte[]" line="277">
                <params>
                    <param name="pw" type="byte[]"/>
                </params>
                <declaration name="out" type="byte[]" line="278"/>
                <declaration name="result" type="byte[]" line="279"/>
            </method>
            <method name="calcResponse" type="byte[]" line="283">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="text" type="byte[]"/>
                </params>
            </method>
            <method name="hmacMD5" type="byte[]" line="318">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="text" type="byte[]"/>
                </params>
            </method>
            <method name="calcV2" type="byte[]" line="332">
                <params>
                    <param name="nthash" type="byte[]"/>
                    <param name="text" type="String"/>
                    <param name="blob" type="byte[]"/>
                    <param name="challenge" type="byte[]"/>
                </params>
            </method>
            <method name="ntlm2LM" type="byte[]" line="348">
                <params>
                    <param name="nonce" type="byte[]"/>
                </params>
            </method>
            <method name="ntlm2NTLM" type="byte[]" line="351">
                <params>
                    <param name="ntlmHash" type="byte[]"/>
                    <param name="nonce" type="byte[]"/>
                    <param name="challenge" type="byte[]"/>
                </params>
                <declaration name="b" type="byte[]" line="352"/>
                <declaration name="sesshash" type="byte[]" line="354"/>
            </method>
            <method name="getP1" type="byte[]" line="357">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="358"/>
                <scope line="361"/>
            </method>
            <method name="getP2" type="byte[]" line="365">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="366"/>
                <scope line="369"/>
            </method>
        </class>
    </source>