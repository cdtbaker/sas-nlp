<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl.digest">
        <import package="java.security.AccessController"/>
        <import package="java.security.Provider"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.util.Random"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.security.sasl"/>
        <import package="javax.security.auth.callback"/>
        <class name="DigestMD5Server" line="50">
            <extends class="DigestMD5Base"/>
            <comment line="100">
                Always expect nonce count value to be 1 because we support only
                 initial authentication.                
            </comment>
            <comment line="106">
                                
            </comment>
            <comment line="110">
                                
            </comment>
            <comment line="114">
                                
            </comment>
            <comment line="131">
                                
            </comment>
            <comment line="146">
                                
            </comment>
            <implements interface="SaslServer"/>
            <javadoc line="50">
                An implementation of the DIGEST-MD5 server SASL mechanism.
                  (&lt;a href=&quot;http://www.ietf.org/rfc/rfc2831.txt&quot;&gt;RFC 2831&lt;/a&gt;)
                  &lt;p&gt;
                  The DIGEST-MD5 SASL mechanism specifies two modes of authentication.
                  &lt;ul&gt;&lt;li&gt;Initial Authentication
                  &lt;li&gt;Subsequent Authentication - optional, (currently not supported)
                  &lt;/ul&gt;
                  Required callbacks:
                  - RealmCallback
                  used as key by handler to fetch password
                  - NameCallback
                  used as key by handler to fetch password
                  - PasswordCallback
                  handler must enter password for username/realm supplied
                  - AuthorizeCallback
                  handler must verify that authid/authzids are allowed and set
                  authorized ID to be the canonicalized authzid (if applicable).
                  Environment properties that affect the implementation:
                  javax.security.sasl.qop:
                  specifies list of qops; default is &quot;auth&quot;; typically, caller should set
                  this to &quot;auth, auth-int, auth-conf&quot;.
                  javax.security.sasl.strength
                  specifies low/medium/high strength of encryption; default is all available
                  ciphers [high,medium,low]; high means des3 or rc4 (128); medium des or
                  rc4-56; low is rc4-40.
                  javax.security.sasl.maxbuf
                  specifies max receive buf size; default is 65536
                  javax.security.sasl.sendmaxbuffer
                  specifies max send buf size; default is 65536 (min of this and client&apos;s max
                  recv size)
                  com.sun.security.sasl.digest.utf8:
                  &quot;true&quot; means to use UTF-8 charset; &quot;false&quot; to use ISO-8859-1 encoding;
                  default is &quot;true&quot;.
                  com.sun.security.sasl.digest.realm:
                  space-separated list of realms; default is server name (fqdn parameter)                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="MY_CLASS_NAME" type="String" line="94"/>
            <declaration name="UTF8_DIRECTIVE" type="String" line="96"/>
            <declaration name="ALGORITHM_DIRECTIVE" type="String" line="97"/>
            <declaration name="NONCE_COUNT_VALUE" type="int" line="103"/>
            <declaration name="UTF8_PROPERTY" type="String" line="106"/>
            <declaration name="REALM_PROPERTY" type="String" line="110"/>
            <declaration name="DIRECTIVE_KEY" type="String[]" line="114"/>
            <declaration name="USERNAME" type="int" line="131"/>
            <declaration name="REALM" type="int" line="132"/>
            <declaration name="NONCE" type="int" line="133"/>
            <declaration name="CNONCE" type="int" line="134"/>
            <declaration name="NONCE_COUNT" type="int" line="135"/>
            <declaration name="QOP" type="int" line="136"/>
            <declaration name="DIGEST_URI" type="int" line="137"/>
            <declaration name="RESPONSE" type="int" line="138"/>
            <declaration name="MAXBUF" type="int" line="139"/>
            <declaration name="CHARSET" type="int" line="140"/>
            <declaration name="CIPHER" type="int" line="141"/>
            <declaration name="AUTHZID" type="int" line="142"/>
            <declaration name="AUTH_PARAM" type="int" line="143"/>
            <declaration name="specifiedQops" type="String" line="146"/>
            <declaration name="myCiphers" type="byte[]" line="147"/>
            <declaration name="serverRealms" type="List&lt;String&gt;" line="148"/>
            <method name="DigestMD5Server" type="constructor" line="151">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="serverName" type="String"/>
                    <param name="props" type="Map"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <comment line="157">
                    default                    
                </comment>
                <comment line="182">
                    By default, use server name as realm                    
                </comment>
                <scope line="158">
                    <scope line="160"/>
                    <declaration name="realms" type="String" line="165"/>
                    <scope line="166">
                        <declaration name="parser" type="StringTokenizer" line="167"/>
                        <declaration name="tokenCount" type="int" line="168"/>
                        <declaration name="token" type="String" line="169"/>
                        <scope line="170"/>
                    </scope>
                </scope>
                <scope line="182"/>
            </method>
            <method name="evaluateResponse" type="byte[]" line="187">
                <params>
                    <param name="response" type="byte[]"/>
                </params>
                <comment line="203">
                                        
                </comment>
                <comment line="209">
                    myCipher[i] is a byte that indicates whether CIPHER_TOKENS[i]
                     is supported                    
                </comment>
                <comment line="236">
                    Step 2 is performed by client                    
                </comment>
                <comment line="239">
                    Validates client&apos;s response and generate challenge:
                        response-auth = &quot;rspauth&quot; &quot;=&quot; response-value                    
                </comment>
                <comment line="252">
                    Set to invalid state                    
                </comment>
                <comment line="257">
                                        
                </comment>
                <comment line="259">
                                        
                </comment>
                <comment line="261">
                                        
                </comment>
                <comment line="267">
                    No other possible state                    
                </comment>
                <scope line="188"/>
                <declaration name="challenge" type="byte[]" line="194"/>
                <scope line="197"/>
                <declaration name="supportedCiphers" type="String" line="203"/>
                <scope line="204">
                    <declaration name="buf" type="StringBuffer" line="206"/>
                    <scope line="210">
                        <scope line="211">
                            <scope line="212"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="221"/>
                <scope line="227"/>
                <scope line="230"/>
                <scope line="241">
                    <declaration name="responseVal" type="byte[][]" line="242"/>
                </scope>
                <scope line="245"/>
                <scope line="247"/>
                <scope line="250"/>
                <scope line="257"/>
                <scope line="259"/>
            </method>
            <javadoc line="271">
                Generates challenge to be sent to client.
                  digest-challenge  =
                  1#( realm | nonce | qop-options | stale | maxbuf | charset
                  algorithm | cipher-opts | auth-param )
                  realm             = &quot;realm&quot; &quot;=&quot; &lt;&quot;&gt; realm-value &lt;&quot;&gt;
                  realm-value       = qdstr-val
                  nonce             = &quot;nonce&quot; &quot;=&quot; &lt;&quot;&gt; nonce-value &lt;&quot;&gt;
                  nonce-value       = qdstr-val
                  qop-options       = &quot;qop&quot; &quot;=&quot; &lt;&quot;&gt; qop-list &lt;&quot;&gt;
                  qop-list          = 1#qop-value
                  qop-value         = &quot;auth&quot; | &quot;auth-int&quot; | &quot;auth-conf&quot; |
                  token
                  stale             = &quot;stale&quot; &quot;=&quot; &quot;true&quot;
                  maxbuf            = &quot;maxbuf&quot; &quot;=&quot; maxbuf-value
                  maxbuf-value      = 1DIGIT
                  charset           = &quot;charset&quot; &quot;=&quot; &quot;utf-8&quot;
                  algorithm         = &quot;algorithm&quot; &quot;=&quot; &quot;md5-sess&quot;
                  cipher-opts       = &quot;cipher&quot; &quot;=&quot; &lt;&quot;&gt; 1#cipher-value &lt;&quot;&gt;
                  cipher-value      = &quot;3des&quot; | &quot;des&quot; | &quot;rc4-40&quot; | &quot;rc4&quot; |
                  &quot;rc4-56&quot; | token
                  auth-param        = token &quot;=&quot; ( token | quoted-string )                
            </javadoc>
            <method name="generateChallenge" type="byte[]" line="296">
                <params>
                    <param name="realms" type="List<String>"/>
                    <param name="qopStr" type="String"/>
                    <param name="cipherStr" type="String"/>
                </params>
                <comment line="300">
                    Realms (&gt;= 0)                    
                </comment>
                <comment line="308">
                    Nonce - required (1)                    
                </comment>
                <comment line="315">
                    QOP - optional (1) [default: auth]
                     qop=&quot;auth,auth-conf,auth-int&quot;                    
                </comment>
                <comment line="319">
                    Check for quotes in case of non-standard qop options                    
                </comment>
                <comment line="325">
                    maxbuf - optional (1) [default: 65536]                    
                </comment>
                <comment line="330">
                    charset - optional (1) [default: ISO 8859_1]                    
                </comment>
                <comment line="337">
                    Check for quotes in case of custom ciphers                    
                </comment>
                <comment line="343">
                    algorithm - required (1)                    
                </comment>
                <declaration name="out" type="ByteArrayOutputStream" line="297"/>
                <scope line="300"/>
                <scope line="316"/>
                <scope line="325"/>
                <scope line="330"/>
                <scope line="334"/>
            </method>
            <javadoc line="348">
                Validates client&apos;s response.
                  digest-response  = 1#( username | realm | nonce | cnonce |
                  nonce-count | qop | digest-uri | response |
                  maxbuf | charset | cipher | authzid |
                  auth-param )
                  username         = &quot;username&quot; &quot;=&quot; &lt;&quot;&gt; username-value &lt;&quot;&gt;
                  username-value   = qdstr-val
                  cnonce           = &quot;cnonce&quot; &quot;=&quot; &lt;&quot;&gt; cnonce-value &lt;&quot;&gt;
                  cnonce-value     = qdstr-val
                  nonce-count      = &quot;nc&quot; &quot;=&quot; nc-value
                  nc-value         = 8LHEX
                  qop              = &quot;qop&quot; &quot;=&quot; qop-value
                  digest-uri       = &quot;digest-uri&quot; &quot;=&quot; &lt;&quot;&gt; digest-uri-value &lt;&quot;&gt;
                  digest-uri-value  = serv-type &quot;/&quot; host [ &quot;/&quot; serv-name ]
                  serv-type        = 1ALPHA
                  host             = 1( ALPHA | DIGIT | &quot;-&quot; | &quot;.&quot; )
                  serv-name        = host
                  response         = &quot;response&quot; &quot;=&quot; response-value
                  response-value   = 32LHEX
                  LHEX             = &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; |
                  &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; |
                  &quot;8&quot; | &quot;9&quot; | &quot;a&quot; | &quot;b&quot; |
                  &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot;
                  cipher           = &quot;cipher&quot; &quot;=&quot; cipher-value
                  authzid          = &quot;authzid&quot; &quot;=&quot; &lt;&quot;&gt; authzid-value &lt;&quot;&gt;
                  authzid-value    = qdstr-val
                  sets:
                  negotiatedQop
                  negotiatedCipher
                  negotiatedRealm
                  negotiatedStrength
                  digestUri (checked and set to clients to account for case diffs)
                  sendMaxBufSize
                  authzid (gotten from callback)                
                <return>
                    response-value ('rspauth') for client to validate                    
                </return>
            </javadoc>
            <method name="validateClientResponse" type="byte[]" line="387">
                <params>
                    <param name="responseVal" type="byte[][]"/>
                </params>
                <comment line="390">
                                        
                </comment>
                <comment line="392">
                    The client should send this directive only if the server has
                     indicated it supports UTF-8.                    
                </comment>
                <comment line="402">
                    maxbuf: atmost once                    
                </comment>
                <comment line="407">
                    Max send buf size is min of client&apos;s max recv buf size and
                     server&apos;s max send buf size                    
                </comment>
                <comment line="412">
                                        
                </comment>
                <comment line="422">
                                        
                </comment>
                <comment line="429">
                    Server had sent at least one realm
                     Check that response is one of these                    
                </comment>
                <comment line="434">
                    Else, client specified realm was one of server&apos;s or server had none                    
                </comment>
                <comment line="436">
                                        
                </comment>
                <comment line="447">
                                        
                </comment>
                <comment line="454">
                                        
                </comment>
                <comment line="463">
                                        
                </comment>
                <comment line="470">
                    Check that QOP is one sent by server                    
                </comment>
                <comment line="503">
                    Check that cipher is one that we offered                    
                </comment>
                <comment line="515">
                    Set negotiatedStrength                    
                </comment>
                <comment line="521">
                    assume default low                    
                </comment>
                <comment line="529">
                    atmost once                    
                </comment>
                <comment line="538">
                    serv-type &quot;/&quot; host [ &quot;/&quot; serv-name ]
                     e.g.: smtp/mail3.example.com/example.com
                     e.g.: ftp/ftp.example.com
                     e.g.: ldap/ldapserver.example.com                    
                </comment>
                <comment line="543">
                    host should match one of service&apos;s configured service names
                     Check against digest URI that mech was created with                    
                </comment>
                <comment line="547">
                    account for case-sensitive diffs                    
                </comment>
                <comment line="554">
                    response: exactly once                    
                </comment>
                <comment line="561">
                    authzid: atmost once                    
                </comment>
                <comment line="571">
                    Ignore auth-param                    
                </comment>
                <comment line="573">
                    Get password need to generate verifying response                    
                </comment>
                <comment line="576">
                    Realm and Name callbacks are used to provide info                    
                </comment>
                <comment line="582">
                    PasswordCallback is used to collect info                    
                </comment>
                <comment line="606">
                    Validate response value sent by client                    
                </comment>
                <comment line="612">
                                        
                </comment>
                <comment line="628">
                    Ensure that authzid mapping is OK                    
                </comment>
                <comment line="653">
                    Clear password                    
                </comment>
                <scope line="390">
                    <scope line="394"/>
                </scope>
                <declaration name="clntMaxBufSize" type="int" line="402"/>
                <declaration name="username" type="String" line="412"/>
                <scope line="413"/>
                <scope line="416"/>
                <scope line="427"/>
                <scope line="436"/>
                <declaration name="nonceFromClient" type="byte[]" line="440"/>
                <scope line="441"/>
                <scope line="447"/>
                <declaration name="cnonce" type="byte[]" line="451"/>
                <scope line="456"/>
                <declaration name="cQop" type="byte" line="470"/>
                <scope line="471"/>
                <scope line="473"/>
                <scope line="477"/>
                <scope line="481"/>
                <scope line="485"/>
                <scope line="490">
                    <scope line="493"/>
                    <declaration name="foundCipher" type="int" line="498"/>
                    <scope line="503">
                        <scope line="505"/>
                    </scope>
                    <scope line="510"/>
                    <scope line="515"/>
                    <scope line="517"/>
                    <scope line="519"/>
                </scope>
                <declaration name="digestUriFromResponse" type="String" line="529"/>
                <scope line="532"/>
                <scope line="545"/>
                <scope line="547"/>
                <declaration name="responseFromClient" type="byte[]" line="554"/>
                <scope line="555"/>
                <declaration name="authzidBytes" type="byte[]" line="561"/>
                <declaration name="authzidFromClient" type="String" line="562"/>
                <scope line="565"/>
                <declaration name="passwd" type="char[]" line="573"/>
                <scope line="574">
                    <declaration name="rcb" type="RealmCallback" line="576"/>
                    <declaration name="ncb" type="NameCallback" line="578"/>
                    <declaration name="pcb" type="PasswordCallback" line="582"/>
                </scope>
                <scope line="589"/>
                <scope line="593"/>
                <scope line="598"/>
                <scope line="604">
                    <declaration name="expectedResponse" type="byte[]" line="606"/>
                    <scope line="608"/>
                    <scope line="614"/>
                    <scope line="617"/>
                    <scope line="622"/>
                    <scope line="628">
                        <declaration name="acb" type="AuthorizeCallback" line="629"/>
                        <scope line="633"/>
                        <scope line="635"/>
                    </scope>
                    <scope line="639"/>
                    <scope line="641"/>
                    <scope line="644"/>
                </scope>
                <scope line="651">
                    <scope line="653"/>
                </scope>
            </method>
            <javadoc line="659">
                Server sends a message formatted as follows:
                  response-auth = &quot;rspauth&quot; &quot;=&quot; response-value
                  where response-value is calculated as above, using the values sent in
                  step two, except that if qop is &quot;auth&quot;, then A2 is
                  A2 = { &quot;:&quot;, digest-uri-value }
                  And if qop is &quot;auth-int&quot; or &quot;auth-conf&quot; then A2 is
                  A2 = { &quot;:&quot;, digest-uri-value, &quot;:00000000000000000000000000000000&quot; }
                  Clears password afterwards.                
            </javadoc>
            <method name="generateResponseAuth" type="byte[]" line="674">
                <params>
                    <param name="username" type="String"/>
                    <param name="passwd" type="char[]"/>
                    <param name="cnonce" type="byte[]"/>
                    <param name="nonceCount" type="int"/>
                    <param name="authzidBytes" type="byte[]"/>
                </params>
                <comment line="677">
                    Construct response value                    
                </comment>
                <scope line="678">
                    <declaration name="responseValue" type="byte[]" line="679"/>
                    <declaration name="challenge" type="byte[]" line="683"/>
                </scope>
                <scope line="690"/>
                <scope line="692"/>
            </method>
            <method name="getAuthorizationID" type="String" line="697">
                <scope line="698"/>
                <scope line="700"/>
            </method>
        </class>
    </source>