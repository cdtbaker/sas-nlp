<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl.digest">
        <import package="java.security.AccessController"/>
        <import package="java.security.Provider"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.util.Random"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.security.sasl"/>
        <import package="javax.security.auth.callback"/>
        <class name="DigestMD5Server" line="21">
            <extends class="DigestMD5Base"/>
            <implements interface="SaslServer"/>
            <javadoc line="21">
                An implementation of the DIGEST-MD5 server SASL mechanism.
                  (&lt;a href=&quot;http://www.ietf.org/rfc/rfc2831.txt&quot;&gt;RFC 2831&lt;/a&gt;)
                  &lt;p&gt;
                  The DIGEST-MD5 SASL mechanism specifies two modes of authentication.
                  &lt;ul&gt;&lt;li&gt;Initial Authentication
                  &lt;li&gt;Subsequent Authentication - optional, (currently not supported)
                  &lt;/ul&gt;
                  Required callbacks:
                  - RealmCallback
                  used as key by handler to fetch password
                  - NameCallback
                  used as key by handler to fetch password
                  - PasswordCallback
                  handler must enter password for username/realm supplied
                  - AuthorizeCallback
                  handler must verify that authid/authzids are allowed and set
                  authorized ID to be the canonicalized authzid (if applicable).
                  Environment properties that affect the implementation:
                  javax.security.sasl.qop:
                  specifies list of qops; default is &quot;auth&quot;; typically, caller should set
                  this to &quot;auth, auth-int, auth-conf&quot;.
                  javax.security.sasl.strength
                  specifies low/medium/high strength of encryption; default is all available
                  ciphers [high,medium,low]; high means des3 or rc4 (128); medium des or
                  rc4-56; low is rc4-40.
                  javax.security.sasl.maxbuf
                  specifies max receive buf size; default is 65536
                  javax.security.sasl.sendmaxbuffer
                  specifies max send buf size; default is 65536 (min of this and client&apos;s max
                  recv size)
                  com.sun.security.sasl.digest.utf8:
                  &quot;true&quot; means to use UTF-8 charset; &quot;false&quot; to use ISO-8859-1 encoding;
                  default is &quot;true&quot;.
                  com.sun.security.sasl.digest.realm:
                  space-separated list of realms; default is server name (fqdn parameter)                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="MY_CLASS_NAME" type="String" line="60"/>
            <declaration name="UTF8_DIRECTIVE" type="String" line="61"/>
            <declaration name="ALGORITHM_DIRECTIVE" type="String" line="62"/>
            <declaration name="NONCE_COUNT_VALUE" type="int" line="63"/>
            <declaration name="UTF8_PROPERTY" type="String" line="64"/>
            <declaration name="REALM_PROPERTY" type="String" line="65"/>
            <declaration name="DIRECTIVE_KEY" type="String[]" line="66"/>
            <declaration name="USERNAME" type="int" line="67"/>
            <declaration name="REALM" type="int" line="68"/>
            <declaration name="NONCE" type="int" line="69"/>
            <declaration name="CNONCE" type="int" line="70"/>
            <declaration name="NONCE_COUNT" type="int" line="71"/>
            <declaration name="QOP" type="int" line="72"/>
            <declaration name="DIGEST_URI" type="int" line="73"/>
            <declaration name="RESPONSE" type="int" line="74"/>
            <declaration name="MAXBUF" type="int" line="75"/>
            <declaration name="CHARSET" type="int" line="76"/>
            <declaration name="CIPHER" type="int" line="77"/>
            <declaration name="AUTHZID" type="int" line="78"/>
            <declaration name="AUTH_PARAM" type="int" line="79"/>
            <declaration name="specifiedQops" type="String" line="80"/>
            <declaration name="myCiphers" type="byte[]" line="81"/>
            <declaration name="serverRealms" type="List&lt;String&gt;" line="82"/>
            <method name="DigestMD5Server" type="constructor" line="83">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="serverName" type="String"/>
                    <param name="props" type="Map"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <scope line="87">
                    <scope line="89"/>
                    <declaration name="realms" type="String" line="93"/>
                    <scope line="94">
                        <declaration name="parser" type="StringTokenizer" line="95"/>
                        <declaration name="tokenCount" type="int" line="96"/>
                        <declaration name="token" type="String" line="97"/>
                        <scope line="98"/>
                    </scope>
                </scope>
                <scope line="106"/>
            </method>
            <method name="evaluateResponse" type="byte[]" line="110">
                <params>
                    <param name="response" type="byte[]"/>
                </params>
                <scope line="111"/>
                <declaration name="challenge" type="byte[]" line="114"/>
                <scope line="117"/>
                <declaration name="supportedCiphers" type="String" line="120"/>
                <scope line="121">
                    <declaration name="buf" type="StringBuffer" line="123"/>
                    <scope line="124">
                        <scope line="125">
                            <scope line="126"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="134"/>
                <scope line="139"/>
                <scope line="142"/>
                <scope line="146">
                    <declaration name="responseVal" type="byte[][]" line="147"/>
                </scope>
                <scope line="150"/>
                <scope line="153"/>
                <scope line="156"/>
                <scope line="160"/>
                <scope line="163"/>
            </method>
            <javadoc line="171">
                Generates challenge to be sent to client.
                  digest-challenge  =
                  1#( realm | nonce | qop-options | stale | maxbuf | charset
                  algorithm | cipher-opts | auth-param )
                  realm             = &quot;realm&quot; &quot;=&quot; &lt;&quot;&gt; realm-value &lt;&quot;&gt;
                  realm-value       = qdstr-val
                  nonce             = &quot;nonce&quot; &quot;=&quot; &lt;&quot;&gt; nonce-value &lt;&quot;&gt;
                  nonce-value       = qdstr-val
                  qop-options       = &quot;qop&quot; &quot;=&quot; &lt;&quot;&gt; qop-list &lt;&quot;&gt;
                  qop-list          = 1#qop-value
                  qop-value         = &quot;auth&quot; | &quot;auth-int&quot; | &quot;auth-conf&quot; |
                  token
                  stale             = &quot;stale&quot; &quot;=&quot; &quot;true&quot;
                  maxbuf            = &quot;maxbuf&quot; &quot;=&quot; maxbuf-value
                  maxbuf-value      = 1DIGIT
                  charset           = &quot;charset&quot; &quot;=&quot; &quot;utf-8&quot;
                  algorithm         = &quot;algorithm&quot; &quot;=&quot; &quot;md5-sess&quot;
                  cipher-opts       = &quot;cipher&quot; &quot;=&quot; &lt;&quot;&gt; 1#cipher-value &lt;&quot;&gt;
                  cipher-value      = &quot;3des&quot; | &quot;des&quot; | &quot;rc4-40&quot; | &quot;rc4&quot; |
                  &quot;rc4-56&quot; | token
                  auth-param        = token &quot;=&quot; ( token | quoted-string )                
            </javadoc>
            <method name="generateChallenge" type="byte[]" line="194">
                <params>
                    <param name="realms" type="List<String>"/>
                    <param name="qopStr" type="String"/>
                    <param name="cipherStr" type="String"/>
                </params>
                <declaration name="out" type="ByteArrayOutputStream" line="195"/>
                <scope line="196"/>
                <scope line="207"/>
                <scope line="213"/>
                <scope line="216"/>
                <scope line="219"/>
            </method>
            <javadoc line="228">
                Validates client&apos;s response.
                  digest-response  = 1#( username | realm | nonce | cnonce |
                  nonce-count | qop | digest-uri | response |
                  maxbuf | charset | cipher | authzid |
                  auth-param )
                  username         = &quot;username&quot; &quot;=&quot; &lt;&quot;&gt; username-value &lt;&quot;&gt;
                  username-value   = qdstr-val
                  cnonce           = &quot;cnonce&quot; &quot;=&quot; &lt;&quot;&gt; cnonce-value &lt;&quot;&gt;
                  cnonce-value     = qdstr-val
                  nonce-count      = &quot;nc&quot; &quot;=&quot; nc-value
                  nc-value         = 8LHEX
                  qop              = &quot;qop&quot; &quot;=&quot; qop-value
                  digest-uri       = &quot;digest-uri&quot; &quot;=&quot; &lt;&quot;&gt; digest-uri-value &lt;&quot;&gt;
                  digest-uri-value  = serv-type &quot;/&quot; host [ &quot;/&quot; serv-name ]
                  serv-type        = 1ALPHA
                  host             = 1( ALPHA | DIGIT | &quot;-&quot; | &quot;.&quot; )
                  serv-name        = host
                  response         = &quot;response&quot; &quot;=&quot; response-value
                  response-value   = 32LHEX
                  LHEX             = &quot;0&quot; | &quot;1&quot; | &quot;2&quot; | &quot;3&quot; |
                  &quot;4&quot; | &quot;5&quot; | &quot;6&quot; | &quot;7&quot; |
                  &quot;8&quot; | &quot;9&quot; | &quot;a&quot; | &quot;b&quot; |
                  &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;f&quot;
                  cipher           = &quot;cipher&quot; &quot;=&quot; cipher-value
                  authzid          = &quot;authzid&quot; &quot;=&quot; &lt;&quot;&gt; authzid-value &lt;&quot;&gt;
                  authzid-value    = qdstr-val
                  sets:
                  negotiatedQop
                  negotiatedCipher
                  negotiatedRealm
                  negotiatedStrength
                  digestUri (checked and set to clients to account for case diffs)
                  sendMaxBufSize
                  authzid (gotten from callback)                
                <return>
                    response-value ('rspauth') for client to validate                    
                </return>
            </javadoc>
            <method name="validateClientResponse" type="byte[]" line="265">
                <params>
                    <param name="responseVal" type="byte[][]"/>
                </params>
                <scope line="266">
                    <scope line="267"/>
                </scope>
                <declaration name="clntMaxBufSize" type="int" line="271"/>
                <declaration name="username" type="String" line="273"/>
                <scope line="274"/>
                <scope line="278"/>
                <scope line="283"/>
                <scope line="286"/>
                <declaration name="nonceFromClient" type="byte[]" line="289"/>
                <scope line="290"/>
                <scope line="293"/>
                <declaration name="cnonce" type="byte[]" line="296"/>
                <scope line="297"/>
                <declaration name="cQop" type="byte" line="302"/>
                <scope line="303"/>
                <scope line="306"/>
                <scope line="311"/>
                <scope line="316"/>
                <scope line="319"/>
                <scope line="322">
                    <scope line="324"/>
                    <declaration name="foundCipher" type="int" line="327"/>
                    <scope line="329">
                        <scope line="330"/>
                    </scope>
                    <scope line="335"/>
                    <scope line="338"/>
                    <scope line="341"/>
                    <scope line="344"/>
                </scope>
                <declaration name="digestUriFromResponse" type="String" line="349"/>
                <scope line="350"/>
                <scope line="353"/>
                <scope line="356"/>
                <declaration name="responseFromClient" type="byte[]" line="359"/>
                <scope line="360"/>
                <declaration name="authzidBytes" type="byte[]" line="363"/>
                <declaration name="authzidFromClient" type="String" line="364"/>
                <scope line="365"/>
                <declaration name="passwd" type="char[]" line="368"/>
                <scope line="369">
                    <declaration name="rcb" type="RealmCallback" line="370"/>
                    <declaration name="ncb" type="NameCallback" line="371"/>
                    <declaration name="pcb" type="PasswordCallback" line="372"/>
                </scope>
                <scope line="377"/>
                <scope line="380"/>
                <scope line="383"/>
                <scope line="386">
                    <declaration name="expectedResponse" type="byte[]" line="387"/>
                    <scope line="388"/>
                    <scope line="391"/>
                    <scope line="394"/>
                    <scope line="397"/>
                    <scope line="400">
                        <declaration name="acb" type="AuthorizeCallback" line="401"/>
                        <scope line="403"/>
                        <scope line="406"/>
                    </scope>
                    <scope line="410"/>
                    <scope line="413"/>
                    <scope line="416"/>
                </scope>
                <scope line="421">
                    <scope line="422"/>
                </scope>
            </method>
            <javadoc line="427">
                Server sends a message formatted as follows:
                  response-auth = &quot;rspauth&quot; &quot;=&quot; response-value
                  where response-value is calculated as above, using the values sent in
                  step two, except that if qop is &quot;auth&quot;, then A2 is
                  A2 = { &quot;:&quot;, digest-uri-value }
                  And if qop is &quot;auth-int&quot; or &quot;auth-conf&quot; then A2 is
                  A2 = { &quot;:&quot;, digest-uri-value, &quot;:00000000000000000000000000000000&quot; }
                  Clears password afterwards.                
            </javadoc>
            <method name="generateResponseAuth" type="byte[]" line="437">
                <params>
                    <param name="username" type="String"/>
                    <param name="passwd" type="char[]"/>
                    <param name="cnonce" type="byte[]"/>
                    <param name="nonceCount" type="int"/>
                    <param name="authzidBytes" type="byte[]"/>
                </params>
                <scope line="438">
                    <declaration name="responseValue" type="byte[]" line="439"/>
                    <declaration name="challenge" type="byte[]" line="440"/>
                </scope>
                <scope line="445"/>
                <scope line="448"/>
            </method>
            <method name="getAuthorizationID" type="String" line="452">
                <scope line="453"/>
                <scope line="456"/>
            </method>
        </class>
    </source>