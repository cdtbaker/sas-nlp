<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.auth">
        <import package="java.net.URL"/>
        <import package="java.util"/>
        <import package="java.security.CodeSource"/>
        <import package="java.security.Principal"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="javax.security.auth.Subject"/>
        <class name="SubjectCodeSource" line="37">
            <extends class="CodeSource"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="37">
                &lt;p&gt; This &lt;code&gt;SubjectCodeSource&lt;/code&gt; class contains
                  a &lt;code&gt;URL&lt;/code&gt;, signer certificates, and either a &lt;code&gt;Subject&lt;/code&gt;
                  (that represents the &lt;code&gt;Subject&lt;/code&gt; in the current
                  &lt;code&gt;AccessControlContext&lt;/code&gt;),
                  or a linked list of Principals/PrincipalComparators
                  (that represent a &quot;subject&quot; in a &lt;code&gt;Policy&lt;/code&gt;).                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="48"/>
            <declaration name="rb" type="java.util.ResourceBundle" line="50"/>
            <anonymous_class line="52">
                <method name="run" type="java.util.ResourceBundle" line="53"/>
            </anonymous_class>
            <declaration name="subject" type="Subject" line="59"/>
            <declaration name="principals" type="LinkedList&lt;PolicyParser.PrincipalEntry&gt;" line="60"/>
            <declaration name="PARAMS" type="Class[]" line="61"/>
            <declaration name="debug" type="sun.security.util.Debug" line="62"/>
            <declaration name="sysClassLoader" type="ClassLoader" line="64"/>
            <javadoc line="66">
                Creates a new &lt;code&gt;SubjectCodeSource&lt;/code&gt;
                  with the given &lt;code&gt;Subject&lt;/code&gt;, principals, &lt;code&gt;URL&lt;/code&gt;,
                  and signers (Certificates).  The &lt;code&gt;Subject&lt;/code&gt;
                  represents the &lt;code&gt;Subject&lt;/code&gt; associated with the current
                  &lt;code&gt;AccessControlContext&lt;/code&gt;.
                  The Principals are given as a &lt;code&gt;LinkedList&lt;/code&gt;
                  of &lt;code&gt;PolicyParser.PrincipalEntry&lt;/code&gt; objects.
                  Typically either a &lt;code&gt;Subject&lt;/code&gt; will be provided,
                  or a list of &lt;code&gt;principals&lt;/code&gt; will be provided
                  (not both).
                  &lt;p&gt;                
                <param>
                    subject the <code>Subject</code> associated with this
                      <code>SubjectCodeSource</code> <p>                    
                </param>
                <param>
                    url the <code>URL</code> associated with this
                      <code>SubjectCodeSource</code> <p>                    
                </param>
                <param>
                    certs the signers associated with this
                      <code>SubjectCodeSource</code> <p>                    
                </param>
            </javadoc>
            <method name="SubjectCodeSource" type="constructor" line="91">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="principals" type="LinkedList<PolicyParser.PrincipalEntry>"/>
                    <param name="url" type="URL"/>
                    <param name="certs" type="Certificate[]"/>
                </params>
                <anonymous_class line="99">
                    <method name="run" type="ClassLoader" line="100"/>
                </anonymous_class>
            </method>
            <javadoc line="106">
                Get the Principals associated with this &lt;code&gt;SubjectCodeSource&lt;/code&gt;.
                  The Principals are retrieved as a &lt;code&gt;LinkedList&lt;/code&gt;
                  of &lt;code&gt;PolicyParser.PrincipalEntry&lt;/code&gt; objects.
                  &lt;p&gt;                
                <return>
                    the Principals associated with this
                      <code>SubjectCodeSource</code> as a <code>LinkedList</code>
                      of <code>PolicyParser.PrincipalEntry</code> objects.                    
                </return>
            </javadoc>
            <method name="getPrincipals" type="LinkedList<PolicyParser.PrincipalEntry>" line="117"/>
            <javadoc line="121">
                Get the &lt;code&gt;Subject&lt;/code&gt; associated with this
                  &lt;code&gt;SubjectCodeSource&lt;/code&gt;.  The &lt;code&gt;Subject&lt;/code&gt;
                  represents the &lt;code&gt;Subject&lt;/code&gt; associated with the
                  current &lt;code&gt;AccessControlContext&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    the <code>Subject</code> associated with this
                      <code>SubjectCodeSource</code>.                    
                </return>
            </javadoc>
            <method name="getSubject" type="Subject" line="132"/>
            <javadoc line="136">
                Returns true if this &lt;code&gt;SubjectCodeSource&lt;/code&gt; object &quot;implies&quot;
                  the specified &lt;code&gt;CodeSource&lt;/code&gt;.
                  More specifically, this method makes the following checks.
                  If any fail, it returns false.  If they all succeed, it returns true.
                  &lt;p&gt;
                  &lt;ol&gt;
                  &lt;li&gt; The provided codesource must not be &lt;code&gt;null&lt;/code&gt;.
                  &lt;li&gt; codesource must be an instance of &lt;code&gt;SubjectCodeSource&lt;/code&gt;.
                  &lt;li&gt; super.implies(codesource) must return true.
                  &lt;li&gt; for each principal in this codesource&apos;s principal list:
                  &lt;ol&gt;
                  &lt;li&gt;     if the principal is an instanceof
                  &lt;code&gt;PrincipalComparator&lt;/code&gt;, then the principal must
                  imply the provided codesource&apos;s &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;li&gt;     if the principal is not an instanceof
                  &lt;code&gt;PrincipalComparator&lt;/code&gt;, then the provided
                  codesource&apos;s &lt;code&gt;Subject&lt;/code&gt; must have an
                  associated &lt;code&gt;Principal&lt;/code&gt;, &lt;i&gt;P&lt;/i&gt;, where
                  P.getClass().getName equals principal.principalClass,
                  and P.getName() equals principal.principalName.
                  &lt;/ol&gt;
                  &lt;/ol&gt;
                  &lt;p&gt;                
                <param>
                    codesource the <code>CodeSource</code> to compare against.                    
                </param>
                <return>
                    true if this <code>SubjectCodeSource</code> implies the
                      the specified <code>CodeSource</code>.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="168">
                <params>
                    <param name="codesource" type="CodeSource"/>
                </params>
                <comment line="184">
                    if the principal list in the policy &quot;implies&quot;
                     the Subject associated with the current AccessControlContext,
                     then return true                    
                </comment>
                <comment line="207">
                    handle PrincipalComparators                    
                </comment>
                <comment line="228">
                    no PrincipalComparator, simply compare Principals                    
                </comment>
                <declaration name="subjectList" type="LinkedList&lt;PolicyParser.PrincipalEntry&gt;" line="170"/>
                <scope line="174"/>
                <declaration name="that" type="SubjectCodeSource" line="181"/>
                <scope line="187"/>
                <scope line="194"/>
                <declaration name="li" type="ListIterator&lt;PolicyParser.PrincipalEntry&gt;" line="200"/>
                <scope line="202">
                    <declaration name="pppe" type="PolicyParser.PrincipalEntry" line="203"/>
                    <scope line="204">
                        <declaration name="principalComparator" type="Class" line="208"/>
                        <declaration name="c" type="Constructor" line="211"/>
                        <declaration name="pc" type="PrincipalComparator" line="212"/>
                        <scope line="216"/>
                        <scope line="220"/>
                    </scope>
                    <scope line="225">
                        <scope line="229">
                            <scope line="231"/>
                            <declaration name="i" type="Iterator&lt;Principal&gt;" line="237"/>
                            <scope line="241">
                                <declaration name="p" type="Principal" line="242"/>
                                <declaration name="spppe" type="PolicyParser.PrincipalEntry" line="243"/>
                            </scope>
                        </scope>
                        <scope line="250"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="263">
                This method returns, true, if the provided &lt;i&gt;subjectList&lt;/i&gt;
                  &quot;contains&quot; the &lt;code&gt;Principal&lt;/code&gt; specified
                  in the provided &lt;i&gt;pppe&lt;/i&gt; argument.
                  Note that the provided &lt;i&gt;pppe&lt;/i&gt; argument may have
                  wildcards () for the &lt;code&gt;Principal&lt;/code&gt; class and name,
                  which need to be considered.
                  &lt;p&gt;                
                <param>
                    subjectList a list of PolicyParser.PrincipalEntry objects
                      that correspond to all the Principals in the Subject currently
                      on this thread's AccessControlContext. <p>                    
                </param>
                <param>
                    pppe the Principals specified in a grant entry.                    
                </param>
                <return>
                    true if the provided <i>subjectList</i> "contains"
                      the <code>Principal</code> specified in the provided
                      <i>pppe</i> argument.                    
                </return>
            </javadoc>
            <method name="subjectListImpliesPrincipalEntry" type="boolean" line="286">
                <params>
                    <param name="subjectList" type="LinkedList<PolicyParser.PrincipalEntry>"/>
                    <param name="pppe" type="PolicyParser.PrincipalEntry"/>
                </params>
                <declaration name="li" type="ListIterator&lt;PolicyParser.PrincipalEntry&gt;" line="288"/>
                <scope line="290">
                    <declaration name="listPppe" type="PolicyParser.PrincipalEntry" line="291"/>
                    <scope line="296"/>
                </scope>
            </method>
            <javadoc line="308">
                Tests for equality between the specified object and this
                  object. Two &lt;code&gt;SubjectCodeSource&lt;/code&gt; objects are considered equal
                  if their locations are of identical value, if the two sets of
                  Certificates are of identical values, and if the
                  Subjects are equal, and if the PolicyParser.PrincipalEntry values
                  are of identical values.  It is not required that
                  the Certificates or PolicyParser.PrincipalEntry values
                  be in the same order.
                  &lt;p&gt;                
                <param>
                    obj the object to test for equality with this object.                    
                </param>
                <return>
                    true if the objects are considered equal, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="324">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="338">
                    the principal lists must match                    
                </comment>
                <declaration name="that" type="SubjectCodeSource" line="335"/>
                <scope line="338"/>
                <scope line="341"/>
                <scope line="349"/>
            </method>
            <javadoc line="359">
                Return a hashcode for this &lt;code&gt;SubjectCodeSource&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    a hashcode for this <code>SubjectCodeSource</code>.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="366"/>
            <javadoc line="370">
                Return a String representation of this &lt;code&gt;SubjectCodeSource&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    a String representation of this <code>SubjectCodeSource</code>.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="377">
                <declaration name="returnMe" type="String" line="378"/>
                <scope line="379">
                    <scope line="380">
                        <declaration name="finalSubject" type="Subject" line="381"/>
                        <anonymous_class line="384">
                            <method name="run" type="String" line="385"/>
                        </anonymous_class>
                    </scope>
                    <scope line="389"/>
                </scope>
                <scope line="393">
                    <declaration name="li" type="ListIterator&lt;PolicyParser.PrincipalEntry&gt;" line="394"/>
                    <scope line="396">
                        <declaration name="pppe" type="PolicyParser.PrincipalEntry" line="397"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>