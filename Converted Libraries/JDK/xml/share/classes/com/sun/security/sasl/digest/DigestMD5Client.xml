<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl.digest">
        <import package="java.security.AccessController"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.security.sasl"/>
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <import package="javax.security.auth.callback.PasswordCallback"/>
        <import package="javax.security.auth.callback.NameCallback"/>
        <import package="javax.security.auth.callback.Callback"/>
        <import package="javax.security.auth.callback.UnsupportedCallbackException"/>
        <class name="DigestMD5Client" line="23">
            <extends class="DigestMD5Base"/>
            <implements interface="SaslClient"/>
            <javadoc line="23">
                An implementation of the DIGEST-MD5
                  (&lt;a href=&quot;http://www.ietf.org/rfc/rfc2831.txt&quot;&gt;RFC 2831&lt;/a&gt;) SASL
                  (&lt;a href=&quot;http://www.ietf.org/rfc/rfc2222.txt&quot;&gt;RFC 2222&lt;/a&gt;) mechanism.
                  The DIGEST-MD5 SASL mechanism specifies two modes of authentication.
                  - Initial Authentication
                  - Subsequent Authentication - optional, (currently unsupported)
                  Required callbacks:
                  - RealmChoiceCallback
                  shows user list of realms server has offered; handler must choose one
                  from list
                  - RealmCallback
                  shows user the only realm server has offered or none; handler must
                  enter realm to use
                  - NameCallback
                  handler must enter username to use for authentication
                  - PasswordCallback
                  handler must enter password for username to use for authentication
                  Environment properties that affect behavior of implementation:
                  javax.security.sasl.qop
                  quality of protection; list of auth, auth-int, auth-conf; default is &quot;auth&quot;
                  javax.security.sasl.strength
                  auth-conf strength; list of high, medium, low; default is highest
                  available on platform [&quot;high,medium,low&quot;].
                  high means des3 or rc4 (128); medium des or rc4-56; low is rc4-40;
                  choice of cipher depends on its availablility on platform
                  javax.security.sasl.maxbuf
                  max receive buffer size; default is 65536
                  javax.security.sasl.sendmaxbuffer
                  max send buffer size; default is 65536; (min with server max recv size)
                  com.sun.security.sasl.digest.cipher
                  name a specific cipher to use; setting must be compatible with the
                  setting of the javax.security.sasl.strength property.                
                <see>
                    <a href="http://www.ietf.org/rfc/rfc2222.txt">RFC 2222</a>
                      - Simple Authentication and Security Layer (SASL)                    
                </see>
                <see>
                    <a href="http://www.ietf.org/rfc/rfc2831.txt">RFC 2831</a>
                      - Using Digest Authentication as a SASL Mechanism                    
                </see>
                <see>
                    <a href="http://java.sun.com/products/jce">Java(TM)
                       Cryptography Extension 1.2.1 (JCE)</a>                    
                </see>
                <see>
                    <a href="http://java.sun.com/products/jaas">Java(TM)
                       Authentication and Authorization Service (JAAS)</a>                    
                </see>
                <author>
                    Jonathan Bruce                    
                </author>
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="MY_CLASS_NAME" type="String" line="68"/>
            <declaration name="CIPHER_PROPERTY" type="String" line="69"/>
            <declaration name="DIRECTIVE_KEY" type="String[]" line="70"/>
            <declaration name="REALM" type="int" line="71"/>
            <declaration name="QOP" type="int" line="72"/>
            <declaration name="ALGORITHM" type="int" line="73"/>
            <declaration name="NONCE" type="int" line="74"/>
            <declaration name="MAXBUF" type="int" line="75"/>
            <declaration name="CHARSET" type="int" line="76"/>
            <declaration name="CIPHER" type="int" line="77"/>
            <declaration name="RESPONSE_AUTH" type="int" line="78"/>
            <declaration name="STALE" type="int" line="79"/>
            <declaration name="nonceCount" type="int" line="80"/>
            <declaration name="specifiedCipher" type="String" line="81"/>
            <declaration name="cnonce" type="byte[]" line="82"/>
            <declaration name="username" type="String" line="83"/>
            <declaration name="passwd" type="char[]" line="84"/>
            <declaration name="authzidBytes" type="byte[]" line="85"/>
            <javadoc line="86">
                Constructor for DIGEST-MD5 mechanism.                
                <param>
                    authzid A non-null String representing the principal
                      for which authorization is being granted..                    
                </param>
                <param>
                    digestURI A non-null String representing detailing the
                      combined protocol and host being used for authentication.                    
                </param>
                <param>
                    props The possibly null properties to be used by the SASL
                      mechanism to configure the authentication exchange.                    
                </param>
                <param>
                    cbh The non-null CallbackHanlder object for callbacks                    
                </param>
                <throws>
                    SaslException if no authentication ID or password is supplied                    
                </throws>
            </javadoc>
            <method name="DigestMD5Client" type="constructor" line="97">
                <params>
                    <param name="authzid" type="String"/>
                    <param name="protocol" type="String"/>
                    <param name="serverName" type="String"/>
                    <param name="props" type="Map"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <scope line="99">
                    <scope line="101"/>
                    <scope line="104"/>
                </scope>
                <scope line="108"/>
            </method>
            <javadoc line="113">
                DIGEST-MD5 has no initial response                
                <return>
                    false                    
                </return>
            </javadoc>
            <method name="hasInitialResponse" type="boolean" line="117"/>
            <javadoc line="120">
                Process the challenge data.
                  The server sends a digest-challenge which the client must reply to
                  in a digest-response. When the authentication is complete, the
                  completed field is set to true.                
                <param>
                    challengeData A non-null byte array containing the challenge
                      data from the server.                    
                </param>
                <return>
                    A possibly null byte array containing the response to
                      be sent to the server.                    
                </return>
                <throws>
                    SaslException If the platform does not have MD5 digest support
                      or if the server sends an invalid challenge.                    
                </throws>
            </javadoc>
            <method name="evaluateChallenge" type="byte[]" line="132">
                <params>
                    <param name="challengeData" type="byte[]"/>
                </params>
                <scope line="133"/>
                <declaration name="challengeVal" type="byte[][]" line="136"/>
                <declaration name="realmChoices" type="List&lt;byte[]&gt;" line="139"/>
                <scope line="141"/>
                <scope line="147"/>
                <scope line="152"/>
                <scope line="158">
                    <scope line="161"/>
                    <scope line="164"/>
                </scope>
                <scope line="169"/>
            </method>
            <javadoc line="178">
                Record information from the challengeVal array into variables/fields.
                  Check directive values that are multi-valued and ensure that mandatory
                  directives not missing from the digest-challenge.                
                <throws>
                    SaslException if a sasl is a the mechanism cannot
                      correcly handle a callbacks or if a violation in the
                      digest challenge format is detected.                    
                </throws>
            </javadoc>
            <method name="processChallenge" type="void" line="186">
                <params>
                    <param name="challengeVal" type="byte[][]"/>
                    <param name="realmChoices" type="List<byte[]>"/>
                </params>
                <scope line="187">
                    <scope line="188"/>
                    <scope line="191"/>
                </scope>
                <scope line="196"/>
                <scope line="199"/>
                <scope line="202"/>
                <scope line="205"/>
                <scope line="208">
                    <declaration name="realmTokens" type="String[]" line="209"/>
                    <scope line="210">
                        <scope line="211"/>
                        <scope line="214">
                            <scope line="216"/>
                        </scope>
                    </scope>
                    <declaration name="ncb" type="NameCallback" line="221"/>
                    <declaration name="pcb" type="PasswordCallback" line="222"/>
                    <scope line="223">
                        <declaration name="tcb" type="RealmCallback" line="224"/>
                        <scope line="227"/>
                    </scope>
                    <scope line="231">
                        <declaration name="ccb" type="RealmChoiceCallback" line="232"/>
                    </scope>
                </scope>
                <scope line="240"/>
                <scope line="243"/>
                <scope line="246"/>
                <declaration name="srvMaxBufSize" type="int" line="249"/>
            </method>
            <javadoc line="252">
                Parses the &apos;qop&apos; directive. If &apos;auth-conf&apos; is specified by
                  the client and offered as a QOP option by the server, then a check
                  is client-side supported ciphers is performed.                
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="checkQopSupport" type="void" line="258">
                <params>
                    <param name="qopInChallenge" type="byte[]"/>
                    <param name="ciphersInChallenge" type="byte[]"/>
                </params>
                <declaration name="qopOptions" type="String" line="259"/>
                <scope line="260"/>
                <scope line="263"/>
                <declaration name="serverQopTokens" type="String[]" line="266"/>
                <declaration name="serverQop" type="byte[]" line="267"/>
                <declaration name="serverAllQop" type="byte" line="268"/>
                <scope line="287"/>
            </method>
            <javadoc line="291">
                Processes the &apos;cipher&apos; digest-challenge directive. This allows the
                  mechanism to check for client-side support against the list of
                  supported ciphers send by the server. If no match is found,
                  the mechanism aborts.                
                <throws>
                    SaslException If an error is encountered in processing
                      the cipher digest-challenge directive or if no client-side
                      support is found.                    
                </throws>
            </javadoc>
            <method name="checkStrengthSupport" type="void" line="300">
                <params>
                    <param name="ciphersInChallenge" type="byte[]"/>
                </params>
                <scope line="301"/>
                <declaration name="cipherOptions" type="String" line="304"/>
                <declaration name="parser" type="StringTokenizer" line="305"/>
                <declaration name="tokenCount" type="int" line="306"/>
                <declaration name="token" type="String" line="307"/>
                <declaration name="serverCiphers" type="byte[]" line="308"/>
                <declaration name="serverCipherStrs" type="String[]" line="309"/>
                <scope line="310">
                    <scope line="312">
                        <scope line="313"/>
                    </scope>
                </scope>
                <declaration name="clntCiphers" type="byte[]" line="320"/>
                <declaration name="inter" type="byte" line="321"/>
                <scope line="322"/>
                <scope line="326"/>
                <scope line="330"/>
            </method>
            <javadoc line="335">
                Steps through the ordered &apos;strength&apos; array, and compares it with
                  the &apos;supportedCiphers&apos; array. The cipher returned represents
                  the best possible cipher based on the strength preference and the
                  available ciphers on both the server and client environments.                
                <param>
                    tokens The array of cipher tokens sent by server                    
                </param>
                <return>
                    The agreed cipher.                    
                </return>
            </javadoc>
            <method name="findCipherAndStrength" type="String" line="343">
                <params>
                    <param name="supportedCiphers" type="byte[]"/>
                    <param name="tokens" type="String[]"/>
                </params>
                <declaration name="s" type="byte" line="344"/>
                <scope line="345">
                    <scope line="346">
                        <scope line="347">
                            <scope line="348"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="367">
                Returns digest-response suitable for an initial authentication.
                  The following are qdstr-val (quoted string values) as per RFC 2831,
                  which means that any embedded quotes must be escaped.
                  realm-value
                  nonce-value
                  username-value
                  cnonce-value
                  authzid-value                
                <returns>
                    <tt>digest-response</tt> in a byte array                    
                </returns>
                <throws>
                    SaslException if there is an error generating the
                      response value or the cnonce value.                    
                </throws>
            </javadoc>
            <method name="generateClientResponse" type="byte[]" line="380">
                <params>
                    <param name="charset" type="byte[]"/>
                </params>
                <declaration name="digestResp" type="ByteArrayOutputStream" line="381"/>
                <scope line="382"/>
                <scope line="388"/>
                <scope line="405"/>
                <scope line="410"/>
                <scope line="414"/>
                <scope line="417"/>
                <scope line="422"/>
            </method>
            <javadoc line="427">
                From RFC 2831, Section 2.1.3: Step Three
                  [Server] sends a message formatted as follows:
                  response-auth = &quot;rspauth&quot; &quot;=&quot; response-value
                  where response-value is calculated as above, using the values sent in
                  step two, except that if qop is &quot;auth&quot;, then A2 is
                  A2 = { &quot;:&quot;, digest-uri-value }
                  And if qop is &quot;auth-int&quot; or &quot;auth-conf&quot; then A2 is
                  A2 = { &quot;:&quot;, digest-uri-value, &quot;:00000000000000000000000000000000&quot; }                
            </javadoc>
            <method name="validateResponseValue" type="void" line="437">
                <params>
                    <param name="fromServer" type="byte[]"/>
                </params>
                <scope line="438"/>
                <scope line="441">
                    <declaration name="expected" type="byte[]" line="442"/>
                    <scope line="443"/>
                </scope>
                <scope line="447"/>
                <scope line="450"/>
            </method>
            <javadoc line="454">
                Returns the number of requests (including current request)
                  that the client has sent in response to nonceValue.
                  This is 1 the first time nonceValue is seen.
                  We don&apos;t cache nonce values seen, and we don&apos;t support subsequent
                  authentication, so the value is always 1.                
            </javadoc>
            <method name="getNonceCount" type="int" line="461">
                <params>
                    <param name="nonceValue" type="byte[]"/>
                </params>
            </method>
            <method name="clearPassword" type="void" line="464">
                <scope line="465">
                    <scope line="466"/>
                </scope>
            </method>
        </class>
    </source>