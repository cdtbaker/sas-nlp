<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.auth">
        <import package="java.io"/>
        <import package="java.lang.RuntimePermission"/>
        <import package="java.lang.reflect"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URL"/>
        <import package="java.util"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.CodeSource"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.KeyStoreException"/>
        <import package="java.security.Permission"/>
        <import package="java.security.Permissions"/>
        <import package="java.security.PermissionCollection"/>
        <import package="java.security.Principal"/>
        <import package="java.security.UnresolvedPermission"/>
        <import package="java.security.Security"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="javax.security.auth.Subject"/>
        <import package="javax.security.auth.PrivateCredentialPermission"/>
        <import package="sun.security.util.PropertyExpander"/>
        <class name="PolicyFile" line="23">
            <extends class="javax.security.auth.Policy"/>
            <javadoc line="23">
                This class represents a default implementation for
                  &lt;code&gt;javax.security.auth.Policy&lt;/code&gt;.
                  &lt;p&gt; This object stores the policy for entire Java runtime,
                  and is the amalgamation of multiple static policy
                  configurations that resides in files.
                  The algorithm for locating the policy file(s) and reading their
                  information into this &lt;code&gt;Policy&lt;/code&gt; object is:
                  &lt;ol&gt;
                  &lt;li&gt;
                  Loop through the &lt;code&gt;java.security.Security&lt;/code&gt; properties,
                  &lt;i&gt;auth.policy.url.1&lt;/i&gt;, &lt;i&gt;auth.policy.url.2&lt;/i&gt;, ...,
                  &lt;i&gt;auth.policy.url.X&lt;/i&gt;&quot;.  These properties are set
                  in the Java security properties file, which is located in the file named
                  &amp;lt;JAVA_HOME&amp;gt;/lib/security/java.security.
                  &amp;lt;JAVA_HOME&amp;gt; refers to the value of the java.home system property,
                  and specifies the directory where the JRE is installed.
                  Each property value specifies a &lt;code&gt;URL&lt;/code&gt; pointing to a
                  policy file to be loaded.  Read in and load each policy.
                  &lt;li&gt;
                  The &lt;code&gt;java.lang.System&lt;/code&gt; property &lt;i&gt;java.security.auth.policy&lt;/i&gt;
                  may also be set to a &lt;code&gt;URL&lt;/code&gt; pointing to another policy file
                  (which is the case when a user uses the -D switch at runtime).
                  If this property is defined, and its use is allowed by the
                  security property file (the Security property,
                  &lt;i&gt;policy.allowSystemProperty&lt;/i&gt; is set to &lt;i&gt;true&lt;/i&gt;),
                  also load that policy.
                  &lt;li&gt;
                  If the &lt;i&gt;java.security.auth.policy&lt;/i&gt; property is defined using
                  &quot;==&quot; (rather than &quot;=&quot;), then ignore all other specified
                  policies and only load this policy.
                  &lt;/ol&gt;
                  Each policy file consists of one or more grant entries, each of
                  which consists of a number of permission entries.
                  &lt;pre&gt;
                  grant signedBy &quot;&lt;b&gt;alias&lt;/b&gt;&quot;, codeBase &quot;&lt;b&gt;URL&lt;/b&gt;&quot;,
                  principal &lt;b&gt;principalClass&lt;/b&gt; &quot;&lt;b&gt;principalName&lt;/b&gt;&quot;,
                  principal &lt;b&gt;principalClass&lt;/b&gt; &quot;&lt;b&gt;principalName&lt;/b&gt;&quot;,
                  ... {
                  permission &lt;b&gt;Type&lt;/b&gt; &quot;&lt;b&gt;name&lt;/b&gt; &quot;&lt;b&gt;action&lt;/b&gt;&quot;,
                  signedBy &quot;&lt;b&gt;alias&lt;/b&gt;&quot;;
                  permission &lt;b&gt;Type&lt;/b&gt; &quot;&lt;b&gt;name&lt;/b&gt; &quot;&lt;b&gt;action&lt;/b&gt;&quot;,
                  signedBy &quot;&lt;b&gt;alias&lt;/b&gt;&quot;;
                  ....
                  };
                  &lt;/pre&gt;
                  All non-bold items above must appear as is (although case
                  doesn&apos;t matter and some are optional, as noted below).
                  Italicized items represent variable values.
                  &lt;p&gt; A grant entry must begin with the word &lt;code&gt;grant&lt;/code&gt;.
                  The &lt;code&gt;signedBy&lt;/code&gt; and &lt;code&gt;codeBase&lt;/code&gt;
                  name/value pairs are optional.
                  If they are not present, then any signer (including unsigned code)
                  will match, and any codeBase will match.  Note that the
                  &lt;code&gt;principal&lt;/code&gt; name/value pair is not optional.
                  This &lt;code&gt;Policy&lt;/code&gt; implementation only permits
                  Principal-based grant entries.  Note that the &lt;i&gt;principalClass&lt;/i&gt;
                  may be set to the wildcard value, , which allows it to match
                  any &lt;code&gt;Principal&lt;/code&gt; class.  In addition, the &lt;i&gt;principalName&lt;/i&gt;
                  may also be set to the wildcard value, , allowing it to match
                  any &lt;code&gt;Principal&lt;/code&gt; name.  When setting the &lt;i&gt;principalName&lt;/i&gt;
                  to the , do not surround the  with quotes.
                  &lt;p&gt; A permission entry must begin with the word &lt;code&gt;permission&lt;/code&gt;.
                  The word &lt;code&gt;&lt;i&gt;Type&lt;/i&gt;&lt;/code&gt; in the template above is
                  a specific permission type, such as &lt;code&gt;java.io.FilePermission&lt;/code&gt;
                  or &lt;code&gt;java.lang.RuntimePermission&lt;/code&gt;.
                  &lt;p&gt; The &quot;&lt;i&gt;action&lt;/i&gt;&quot; is required for
                  many permission types, such as &lt;code&gt;java.io.FilePermission&lt;/code&gt;
                  (where it specifies what type of file access that is permitted).
                  It is not required for categories such as
                  &lt;code&gt;java.lang.RuntimePermission&lt;/code&gt;
                  where it is not necessary - you either have the
                  permission specified by the &lt;code&gt;&quot;&lt;i&gt;name&lt;/i&gt;&quot;&lt;/code&gt;
                  value following the type name or you don&apos;t.
                  &lt;p&gt; The &lt;code&gt;signedBy&lt;/code&gt; name/value pair for a permission entry
                  is optional. If present, it indicates a signed permission. That is,
                  the permission class itself must be signed by the given alias in
                  order for it to be granted. For example,
                  suppose you have the following grant entry:
                  &lt;pre&gt;
                  grant principal foo.com.Principal &quot;Duke&quot; {
                  permission Foo &quot;foobar&quot;, signedBy &quot;FooSoft&quot;;
                  }
                  &lt;/pre&gt;
                  &lt;p&gt; Then this permission of type &lt;i&gt;Foo&lt;/i&gt; is granted if the
                  &lt;code&gt;Foo.class&lt;/code&gt; permission has been signed by the
                  &quot;FooSoft&quot; alias, or if &lt;code&gt;Foo.class&lt;/code&gt; is a
                  system class (i.e., is found on the CLASSPATH).
                  &lt;p&gt; Items that appear in an entry must appear in the specified order
                  (&lt;code&gt;permission&lt;/code&gt;, &lt;i&gt;Type&lt;/i&gt;, &quot;&lt;i&gt;name&lt;/i&gt;&quot;, and
                  &quot;&lt;i&gt;action&lt;/i&gt;&quot;). An entry is terminated with a semicolon.
                  &lt;p&gt; Case is unimportant for the identifiers (&lt;code&gt;permission&lt;/code&gt;,
                  &lt;code&gt;signedBy&lt;/code&gt;, &lt;code&gt;codeBase&lt;/code&gt;, etc.) but is
                  significant for the &lt;i&gt;Type&lt;/i&gt;
                  or for any string that is passed in as a value. &lt;p&gt;
                  &lt;p&gt; An example of two entries in a policy configuration file is
                  &lt;pre&gt;
                  // if the code is comes from &quot;foo.com&quot; and is running as &quot;Duke&quot;,
                  // grant it read/write to all files in /tmp.
                  grant codeBase &quot;foo.com&quot;, principal foo.com.Principal &quot;Duke&quot; {
                  permission java.io.FilePermission &quot;/tmp/&quot;, &quot;read,write&quot;;
                  };
                  // grant any code running as &quot;Duke&quot; permission to read
                  // the &quot;java.vendor&quot; Property.
                  grant principal foo.com.Principal &quot;Duke&quot; {
                  permission java.util.PropertyPermission &quot;java.vendor&quot;;
                  &lt;/pre&gt;
                  &lt;p&gt; This &lt;code&gt;Policy&lt;/code&gt; implementation supports
                  special handling for PrivateCredentialPermissions.
                  If a grant entry is configured with a
                  &lt;code&gt;PrivateCredentialPermission&lt;/code&gt;,
                  and the &quot;Principal Class/Principal Name&quot; for that
                  &lt;code&gt;PrivateCredentialPermission&lt;/code&gt; is &quot;self&quot;,
                  then the entry grants the specified &lt;code&gt;Subject&lt;/code&gt; permission to
                  access its own private Credential.  For example,
                  the following grants the &lt;code&gt;Subject&lt;/code&gt; &quot;Duke&quot;
                  access to its own a.b.Credential.
                  &lt;pre&gt;
                  grant principal foo.com.Principal &quot;Duke&quot; {
                  permission javax.security.auth.PrivateCredentialPermission
                  &quot;a.b.Credential self&quot;,
                  &quot;read&quot;;
                  };
                  &lt;/pre&gt;
                  The following grants the &lt;code&gt;Subject&lt;/code&gt; &quot;Duke&quot;
                  access to all of its own private Credentials:
                  &lt;pre&gt;
                  grant principal foo.com.Principal &quot;Duke&quot; {
                  permission javax.security.auth.PrivateCredentialPermission
                  &quot; self&quot;,
                  &quot;read&quot;;
                  };
                  &lt;/pre&gt;
                  The following grants all Subjects authenticated as a
                  &lt;code&gt;SolarisPrincipal&lt;/code&gt; (regardless of their respective names)
                  permission to access their own private Credentials:
                  &lt;pre&gt;
                  grant principal com.sun.security.auth.SolarisPrincipal  {
                  permission javax.security.auth.PrivateCredentialPermission
                  &quot; self&quot;,
                  &quot;read&quot;;
                  };
                  &lt;/pre&gt;
                  The following grants all Subjects permission to access their own
                  private Credentials:
                  &lt;pre&gt;
                  grant principal   {
                  permission javax.security.auth.PrivateCredentialPermission
                  &quot; self&quot;,
                  &quot;read&quot;;
                  };
                  &lt;/pre&gt;                
                <deprecated>
                    As of JDK&amp;nbsp;1.4, replaced by
                      &lt;code&gt;sun.security.provider.PolicyFile&lt;/code&gt;.
                      This class is entirely deprecated.                    
                </deprecated>
                <see>
                    java.security.CodeSource                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.ProtectionDomain                    
                </see>
            </javadoc>
            <declaration name="rb" type="java.util.ResourceBundle" line="183"/>
            <anonymous_class line="183">
                <method name="run" type="java.util.ResourceBundle" line="184"/>
            </anonymous_class>
            <declaration name="debug" type="sun.security.util.Debug" line="189"/>
            <declaration name="AUTH_POLICY" type="String" line="190"/>
            <declaration name="SECURITY_MANAGER" type="String" line="191"/>
            <declaration name="AUTH_POLICY_URL" type="String" line="192"/>
            <declaration name="policyEntries" type="Vector&amp;lt;PolicyEntry&amp;gt;" line="193"/>
            <declaration name="aliasMapping" type="Hashtable" line="194"/>
            <declaration name="initialized" type="boolean" line="195"/>
            <declaration name="expandProperties" type="boolean" line="196"/>
            <declaration name="ignoreIdentityScope" type="boolean" line="197"/>
            <declaration name="PARAMS" type="Class[]" line="198"/>
            <javadoc line="199">
                Initializes the Policy object and reads the default policy
                  configuration file(s) into the Policy object.                
            </javadoc>
            <method name="PolicyFile" type="constructor" line="203">
                <declaration name="prop" type="String" line="204"/>
                <scope line="205"/>
            </method>
            <method name="init" type="void" line="210"/>
            <javadoc line="217">
                Refreshes the policy object by re-reading all the policy files.
                  &lt;p&gt;                
                <exception>
                    SecurityException if the caller doesn&apos;t have permission
                      to refresh the &lt;code&gt;Policy&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="refresh" type="void" line="223">
                <declaration name="sm" type="java.lang.SecurityManager" line="224"/>
                <scope line="225"/>
                <anonymous_class line="229">
                    <method name="run" type="Void" line="230"/>
                </anonymous_class>
            </method>
            <method name="initKeyStore" type="KeyStore" line="237">
                <params>
                    <param name="policyUrl" type="URL"/>
                    <param name="keyStoreName" type="String"/>
                    <param name="keyStoreType" type="String"/>
                </params>
                <scope line="238">
                    <scope line="239">
                        <declaration name="keyStoreUrl" type="URL" line="240"/>
                        <scope line="241"/>
                        <scope line="244"/>
                        <scope line="247"/>
                        <declaration name="inStream" type="InputStream" line="250"/>
                        <declaration name="ks" type="KeyStore" line="251"/>
                    </scope>
                    <scope line="258">
                        <scope line="259"/>
                    </scope>
                </scope>
            </method>
            <method name="initPolicyFile" type="void" line="267">
                <declaration name="prop" type="String" line="268"/>
                <declaration name="iscp" type="String" line="270"/>
                <declaration name="allowSys" type="String" line="272"/>
                <scope line="273">
                    <declaration name="extra_policy" type="String" line="274"/>
                    <scope line="275">
                        <declaration name="overrideAll" type="boolean" line="276"/>
                        <scope line="277"/>
                        <scope line="281">
                            <declaration name="policyURL" type="URL" line="283"/>
                            <declaration name="policyFile" type="File" line="285"/>
                            <scope line="286"/>
                            <scope line="289"/>
                        </scope>
                        <scope line="295">
                            <scope line="296"/>
                        </scope>
                        <scope line="300">
                            <scope line="301"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="n" type="int" line="308"/>
                <declaration name="loaded_one" type="boolean" line="309"/>
                <declaration name="policy_url" type="String" line="310"/>
                <scope line="311">
                    <scope line="312"/>
                    <scope line="318">
                        <scope line="319"/>
                    </scope>
                </scope>
                <scope line="326"/>
            </method>
            <javadoc line="329">
                Checks public key. If it is marked as trusted in
                  the identity database, add it to the policy
                  with the AllPermission.                
            </javadoc>
            <method name="checkForTrustedIdentity" type="boolean" line="334">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
            </method>
            <javadoc line="337">
                Reads a policy configuration into the Policy object using a
                  Reader object.                
                <param>
                    policyFile the policy Reader object.                    
                </param>
            </javadoc>
            <method name="init" type="void" line="342">
                <params>
                    <param name="policy" type="URL"/>
                </params>
                <declaration name="pp" type="PolicyParser" line="343"/>
                <scope line="344">
                    <declaration name="isr" type="InputStreamReader" line="345"/>
                    <declaration name="keyStore" type="KeyStore" line="348"/>
                    <declaration name="enum_" type="Enumeration&amp;lt;PolicyParser.GrantEntry&amp;gt;" line="349"/>
                    <scope line="350">
                        <declaration name="ge" type="PolicyParser.GrantEntry" line="351"/>
                    </scope>
                </scope>
                <scope line="355"/>
                <scope line="360">
                    <scope line="361"/>
                </scope>
            </method>
            <method name="getInputStream" type="InputStream" line="368">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <scope line="369">
                    <declaration name="path" type="String" line="370"/>
                </scope>
                <scope line="373"/>
            </method>
            <javadoc line="377">
                Given a PermissionEntry, create a codeSource.                
                <return>
                    null if signedBy alias is not recognized                    
                </return>
            </javadoc>
            <method name="getCodeSource" type="CodeSource" line="381">
                <params>
                    <param name="ge" type="PolicyParser.GrantEntry"/>
                    <param name="keyStore" type="KeyStore"/>
                </params>
                <declaration name="certs" type="Certificate[]" line="382"/>
                <scope line="383">
                    <scope line="385">
                        <scope line="386"/>
                    </scope>
                </scope>
                <declaration name="location" type="URL" line="392"/>
                <scope line="395"/>
                <scope line="398"/>
            </method>
            <javadoc line="402">
                Add one policy entry to the vector.                
            </javadoc>
            <method name="addGrantEntry" type="void" line="405">
                <params>
                    <param name="ge" type="PolicyParser.GrantEntry"/>
                    <param name="keyStore" type="KeyStore"/>
                </params>
                <scope line="406">
                    <scope line="410">
                        <declaration name="li" type="ListIterator&amp;lt;PolicyParser.PrincipalEntry&amp;gt;" line="411"/>
                        <scope line="412">
                            <declaration name="pppe" type="PolicyParser.PrincipalEntry" line="413"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="419">
                    <declaration name="codesource" type="CodeSource" line="420"/>
                    <declaration name="entry" type="PolicyEntry" line="422"/>
                    <declaration name="enum_" type="Enumeration&amp;lt;PolicyParser.PermissionEntry&amp;gt;" line="423"/>
                    <scope line="424">
                        <declaration name="pe" type="PolicyParser.PermissionEntry" line="425"/>
                        <scope line="426">
                            <declaration name="perm" type="Permission" line="427"/>
                            <scope line="428"/>
                            <scope line="431"/>
                            <scope line="435"/>
                        </scope>
                        <scope line="439">
                            <declaration name="certs" type="Certificate" line="440"/>
                            <scope line="443">
                                <declaration name="perm" type="Permission" line="444"/>
                                <scope line="446"/>
                            </scope>
                        </scope>
                        <scope line="451"/>
                        <scope line="454"/>
                    </scope>
                </scope>
                <scope line="460"/>
            </method>
            <javadoc line="465">
                Returns a new Permission object of the given Type. The Permission is
                  created by getting the
                  Class object using the &lt;code&gt;Class.forName&lt;/code&gt; method, and using
                  the reflection API to invoke the (String name, String actions)
                  constructor on the
                  object.                
                <param>
                    type the type of Permission being created.                    
                </param>
                <param>
                    name the name of the Permission being created.                    
                </param>
                <param>
                    actions the actions of the Permission being created.                    
                </param>
                <exception>
                    ClassNotFoundException  if the particular Permission
                      class could not be found.                    
                </exception>
                <exception>
                    IllegalAccessException  if the class or initializer is
                      not accessible.                    
                </exception>
                <exception>
                    InstantiationException  if getInstance tries to
                      instantiate an abstract class or an interface, or if the
                      instantiation fails for some other reason.                    
                </exception>
                <exception>
                    NoSuchMethodException if the (String, String) constructor
                      is not found.                    
                </exception>
                <exception>
                    InvocationTargetException if the underlying Permission
                      constructor throws an exception.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="Permission" line="487">
                <params>
                    <param name="type" type="String"/>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
                <declaration name="pc" type="Class" line="488"/>
                <declaration name="c" type="Constructor" line="489"/>
            </method>
            <javadoc line="492">
                Fetch all certs associated with this alias.                
            </javadoc>
            <method name="getCertificates" type="Certificate[]" line="495">
                <params>
                    <param name="keyStore" type="KeyStore"/>
                    <param name="aliases" type="String"/>
                </params>
                <declaration name="vcerts" type="Vector&amp;lt;Certificate&amp;gt;" line="496"/>
                <declaration name="st" type="StringTokenizer" line="497"/>
                <declaration name="n" type="int" line="498"/>
                <scope line="499">
                    <declaration name="alias" type="String" line="500"/>
                    <declaration name="cert" type="Certificate" line="502"/>
                    <scope line="504">
                        <scope line="505"/>
                        <scope line="508"/>
                        <scope line="510"/>
                    </scope>
                    <scope line="515"/>
                </scope>
                <scope line="520">
                    <declaration name="certs" type="Certificate[]" line="521"/>
                </scope>
                <scope line="525"/>
            </method>
            <javadoc line="529">
                Enumerate all the entries in the global policy object.
                  This method is used by policy admin tools.   The tools
                  should use the Enumeration methods on the returned object
                  to fetch the elements sequentially.                
            </javadoc>
            <method name="elements" type="Enumeration&lt;PolicyEntry&gt;" line="535"/>
            <javadoc line="538">
                Examines this &lt;code&gt;Policy&lt;/code&gt; and returns the Permissions granted
                  to the specified &lt;code&gt;Subject&lt;/code&gt; and &lt;code&gt;CodeSource&lt;/code&gt;.
                  &lt;p&gt; Permissions for a particular &lt;i&gt;grant&lt;/i&gt; entry are returned
                  if the &lt;code&gt;CodeSource&lt;/code&gt; constructed using the codebase and
                  signedby values specified in the entry &lt;code&gt;implies&lt;/code&gt;
                  the &lt;code&gt;CodeSource&lt;/code&gt; provided to this method, and if the
                  &lt;code&gt;Subject&lt;/code&gt; provided to this method contains all of the
                  Principals specified in the entry.
                  &lt;p&gt; The &lt;code&gt;Subject&lt;/code&gt; provided to this method contains all
                  of the Principals specified in the entry if, for each
                  &lt;code&gt;Principal&lt;/code&gt;, &quot;P1&quot;, specified in the &lt;i&gt;grant&lt;/i&gt; entry
                  one of the following two conditions is met:
                  &lt;p&gt;
                  &lt;ol&gt;
                  &lt;li&gt; the &lt;code&gt;Subject&lt;/code&gt; has a
                  &lt;code&gt;Principal&lt;/code&gt;, &quot;P2&quot;, where
                  &lt;code&gt;P2.getClass().getName()&lt;/code&gt; equals the
                  P1&apos;s class name, and where
                  &lt;code&gt;P2.getName()&lt;/code&gt; equals the P1&apos;s name.
                  &lt;li&gt; P1 implements
                  &lt;code&gt;com.sun.security.auth.PrincipalComparator&lt;/code&gt;,
                  and &lt;code&gt;P1.implies&lt;/code&gt; the provided &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;/ol&gt;
                  &lt;p&gt; Note that this &lt;code&gt;Policy&lt;/code&gt; implementation has
                  special handling for PrivateCredentialPermissions.
                  When this method encounters a &lt;code&gt;PrivateCredentialPermission&lt;/code&gt;
                  which specifies &quot;self&quot; as the &lt;code&gt;Principal&lt;/code&gt; class and name,
                  it does not add that &lt;code&gt;Permission&lt;/code&gt; to the returned
                  &lt;code&gt;PermissionCollection&lt;/code&gt;.  Instead, it builds
                  a new &lt;code&gt;PrivateCredentialPermission&lt;/code&gt;
                  for each &lt;code&gt;Principal&lt;/code&gt; associated with the provided
                  &lt;code&gt;Subject&lt;/code&gt;.  Each new &lt;code&gt;PrivateCredentialPermission&lt;/code&gt;
                  contains the same Credential class as specified in the
                  originally granted permission, as well as the Class and name
                  for the respective &lt;code&gt;Principal&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    subject the Permissions granted to this &lt;code&gt;Subject&lt;/code&gt;
                      and the additionally provided &lt;code&gt;CodeSource&lt;/code&gt;
                      are returned. &lt;p&gt;                    
                </param>
                <param>
                    codesource the Permissions granted to this &lt;code&gt;CodeSource&lt;/code&gt;
                      and the additionally provided &lt;code&gt;Subject&lt;/code&gt;
                      are returned.                    
                </param>
                <return>
                    the Permissions granted to the provided &lt;code&gt;Subject&lt;/code&gt;
                      &lt;code&gt;CodeSource&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getPermissions" type="PermissionCollection" line="584">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="codesource" type="CodeSource"/>
                </params>
                <anonymous_class line="585">
                    <method name="run" type="PermissionCollection" line="586">
                        <declaration name="scs" type="SubjectCodeSource" line="587"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="594">
                Examines the global policy for the specified CodeSource, and
                  creates a PermissionCollection object with
                  the set of permissions for that principal&apos;s protection domain.                
                <param>
                    CodeSource the codesource associated with the caller.
                      This encapsulates the original location of the code (where the code
                      came from) and the public key(s) of its signer.                    
                </param>
                <return>
                    the set of permissions according to the policy.                    
                </return>
            </javadoc>
            <method name="getPermissions" type="PermissionCollection" line="603">
                <params>
                    <param name="codesource" type="CodeSource"/>
                </params>
            </method>
            <javadoc line="607">
                Examines the global policy for the specified CodeSource, and
                  creates a PermissionCollection object with
                  the set of permissions for that principal&apos;s protection domain.                
                <param>
                    permissions the permissions to populate                    
                </param>
                <param>
                    codesource the codesource associated with the caller.
                      This encapsulates the original location of the code (where the code
                      came from) and the public key(s) of its signer.                    
                </param>
                <return>
                    the set of permissions according to the policy.                    
                </return>
            </javadoc>
            <method name="getPermissions" type="Permissions" line="617">
                <params>
                    <param name="perms" type="Permissions"/>
                    <param name="cs" type="CodeSource"/>
                </params>
                <scope line="618"/>
                <declaration name="codesource" type="CodeSource" line="621"/>
                <scope line="623"/>
                <scope line="626">
                    <declaration name="entry" type="PolicyEntry" line="627"/>
                    <scope line="628"/>
                    <scope line="631">
                        <scope line="632">
                            <declaration name="p" type="Permission" line="633"/>
                            <scope line="634"/>
                            <scope line="637"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="643">
                    <declaration name="certs" type="Certificate" line="644"/>
                    <scope line="645">
                        <scope line="646">
                            <scope line="647"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="655">
                Returns true if &apos;Self&apos; permissions were added to the provided
                  &apos;perms&apos;, and false otherwise.
                  &lt;p&gt;                
                <param>
                    p check to see if this Permission is a &quot;SELF&quot;
                      PrivateCredentialPermission. &lt;p&gt;                    
                </param>
                <param>
                    entryCs the codesource for the Policy entry.                    
                </param>
                <param>
                    accCs the codesource for from the current AccessControlContext.                    
                </param>
                <param>
                    perms the PermissionCollection where the individual
                      PrivateCredentialPermissions will be added.                    
                </param>
            </javadoc>
            <method name="addSelfPermissions" type="boolean" line="666">
                <params>
                    <param name="p" type="Permission"/>
                    <param name="entryCs" type="CodeSource"/>
                    <param name="accCs" type="CodeSource"/>
                    <param name="perms" type="Permissions"/>
                </params>
                <declaration name="pcp" type="PrivateCredentialPermission" line="669"/>
                <declaration name="scs" type="SubjectCodeSource" line="670"/>
                <declaration name="pPrincipals" type="String[][]" line="671"/>
                <scope line="672"/>
                <scope line="675">
                    <scope line="676"/>
                    <declaration name="pli" type="ListIterator&amp;lt;PolicyParser.PrincipalEntry&amp;gt;" line="679"/>
                    <scope line="680">
                        <declaration name="principal" type="PolicyParser.PrincipalEntry" line="681"/>
                        <declaration name="principalInfo" type="String[][]" line="682"/>
                        <scope line="683">
                            <declaration name="newPcp" type="PrivateCredentialPermission" line="684"/>
                            <scope line="685"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="694">
                return the principal class/name pair in the 2D array.
                  array[x][y]:     x corresponds to the array length.
                  if (y == 0), it&apos;s the principal class.
                  if (y == 1), it&apos;s the principal name.                
            </javadoc>
            <method name="getPrincipalInfo" type="String[][]" line="700">
                <params>
                    <param name="principal" type="PolicyParser.PrincipalEntry"/>
                    <param name="accCs" type="CodeSource"/>
                </params>
                <scope line="701">
                    <declaration name="info" type="String[][]" line="702"/>
                </scope>
                <scope line="707">
                    <declaration name="scs" type="SubjectCodeSource" line="708"/>
                    <declaration name="principalSet" type="Set&amp;lt;Principal&amp;gt;" line="709"/>
                    <scope line="710">
                        <declaration name="pClass" type="Class" line="711"/>
                    </scope>
                    <scope line="714">
                        <scope line="715"/>
                    </scope>
                    <scope line="719"/>
                    <declaration name="info" type="String[][]" line="722"/>
                    <declaration name="pIterator" type="java.util.Iterator&amp;lt;Principal&amp;gt;" line="723"/>
                    <declaration name="i" type="int" line="724"/>
                    <scope line="725">
                        <declaration name="p" type="Principal" line="726"/>
                    </scope>
                </scope>
                <scope line="733">
                    <declaration name="scs" type="SubjectCodeSource" line="734"/>
                    <declaration name="principalSet" type="Set&amp;lt;Principal&amp;gt;" line="735"/>
                    <declaration name="info" type="String[][]" line="736"/>
                    <declaration name="pIterator" type="java.util.Iterator&amp;lt;Principal&amp;gt;" line="737"/>
                    <declaration name="i" type="int" line="738"/>
                    <scope line="739">
                        <declaration name="p" type="Principal" line="740"/>
                    </scope>
                </scope>
            </method>
            <method name="getSignerCertificates" type="Certificate[]" line="748">
                <params>
                    <param name="cs" type="CodeSource"/>
                </params>
                <declaration name="certs" type="Certificate[]" line="749"/>
                <scope line="751"/>
                <declaration name="i" type="int" line="754"/>
                <declaration name="count" type="int" line="755"/>
                <scope line="756">
                    <scope line="758"/>
                </scope>
                <declaration name="userCertList" type="ArrayList&amp;lt;Certificate&amp;gt;" line="764"/>
                <scope line="766">
                    <scope line="768"/>
                </scope>
                <declaration name="userCerts" type="Certificate[]" line="773"/>
            </method>
            <method name="canonicalizeCodebase" type="CodeSource" line="777">
                <params>
                    <param name="cs" type="CodeSource"/>
                    <param name="extractSignerCerts" type="boolean"/>
                </params>
                <declaration name="canonCs" type="CodeSource" line="778"/>
                <scope line="779">
                    <scope line="780">
                        <declaration name="path" type="String" line="781"/>
                        <declaration name="csUrl" type="URL" line="782"/>
                        <scope line="783">
                            <declaration name="appendFileSep" type="boolean" line="785"/>
                            <scope line="787"/>
                            <declaration name="f" type="File" line="790"/>
                            <declaration name="sb" type="StringBuffer" line="792"/>
                        </scope>
                        <scope line="797"/>
                        <scope line="801">
                            <declaration name="scs" type="SubjectCodeSource" line="802"/>
                            <scope line="803"/>
                            <scope line="806"/>
                        </scope>
                        <scope line="810">
                            <scope line="811"/>
                            <scope line="814"/>
                        </scope>
                    </scope>
                    <scope line="819">
                        <scope line="820">
                            <scope line="821"/>
                            <scope line="824">
                                <declaration name="scs" type="SubjectCodeSource" line="825"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="831">
                    <scope line="832">
                        <scope line="833"/>
                        <scope line="836">
                            <declaration name="scs" type="SubjectCodeSource" line="837"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <class name="PolicyEntry" line="844">
                <javadoc line="844">
                    Each entry in the policy configuration file is represented by a
                      PolicyEntry object.  &lt;p&gt;
                      A PolicyEntry is a (CodeSource,Permission) pair.  The
                      CodeSource contains the (URL, PublicKey) that together identify
                      where the Java bytecodes come from and who (if anyone) signed
                      them.  The URL could refer to localhost.  The URL could also be
                      null, meaning that this policy entry is given to all comers, as
                      long as they match the signer field.  The signer could be null,
                      meaning the code is not signed. &lt;p&gt;
                      The Permission contains the (Type, Name, Action) triplet. &lt;p&gt;
                      For now, the Policy object retrieves the public key from the
                      X.509 certificate on disk that corresponds to the signedBy
                      alias specified in the Policy config file.  For reasons of
                      efficiency, the Policy object keeps a hashtable of certs already
                      read in.  This could be replaced by a secure internal key
                      store.
                      &lt;p&gt;
                      For example, the entry
                      &lt;pre&gt;
                      permission java.io.File &quot;/tmp&quot;, &quot;read,write&quot;,
                      signedBy &quot;Duke&quot;;
                      &lt;/pre&gt;
                      is represented internally
                      &lt;pre&gt;
                      FilePermission f = new FilePermission(&quot;/tmp&quot;, &quot;read,write&quot;);
                      PublicKey p = publickeys.get(&quot;Duke&quot;);
                      URL u = InetAddress.getLocalHost();
                      CodeBase c = new CodeBase( p, u );
                      pe = new PolicyEntry(f, c);
                      &lt;/pre&gt;                    
                    <author>
                        Marianne Mueller                        
                    </author>
                    <author>
                        Roland Schemers                        
                    </author>
                    <see>
                        java.security.CodeSource                        
                    </see>
                    <see>
                        java.security.Policy                        
                    </see>
                    <see>
                        java.security.Permissions                        
                    </see>
                    <see>
                        java.security.ProtectionDomain                        
                    </see>
                </javadoc>
                <declaration name="codesource" type="CodeSource" line="883"/>
                <declaration name="permissions" type="Vector&amp;lt;Permission&amp;gt;" line="884"/>
                <javadoc line="885">
                    Given a Permission and a CodeSource, create a policy entry.
                      XXX Decide if/how to add validity fields and &quot;purpose&quot; fields to
                      XXX policy entries                    
                    <param>
                        cs the CodeSource, which encapsulates the URL and the public
                          key
                          attributes from the policy config file.   Validity checks are
                          performed on the public key before PolicyEntry is called.                        
                    </param>
                </javadoc>
                <method name="PolicyEntry" type="constructor" line="894">
                    <params>
                        <param name="cs" type="CodeSource"/>
                    </params>
                </method>
                <javadoc line="898">
                    add a Permission object to this entry.                    
                </javadoc>
                <method name="add" type="void" line="901">
                    <params>
                        <param name="p" type="Permission"/>
                    </params>
                </method>
                <javadoc line="904">
                    Return the CodeSource for this policy entry                    
                </javadoc>
                <method name="getCodeSource" type="CodeSource" line="907"/>
                <method name="toString" type="String" line="910">
                    <declaration name="sb" type="StringBuffer" line="911"/>
                    <scope line="915">
                        <declaration name="p" type="Permission" line="916"/>
                    </scope>
                </method>
            </class>
        </class>
        <class name="PolicyPermissions" line="928">
            <extends class="PermissionCollection"/>
            <declaration name="serialVersionUID" type="long" line="929"/>
            <declaration name="codesource" type="CodeSource" line="930"/>
            <declaration name="perms" type="Permissions" line="931"/>
            <declaration name="policy" type="PolicyFile" line="932"/>
            <declaration name="notInit" type="boolean" line="933"/>
            <declaration name="additionalPerms" type="Vector&amp;lt;Permission&amp;gt;" line="934"/>
            <method name="PolicyPermissions" type="constructor" line="935">
                <params>
                    <param name="policy" type="PolicyFile"/>
                    <param name="codesource" type="CodeSource"/>
                </params>
            </method>
            <method name="add" type="void" line="942">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <scope line="944"/>
                <scope line="948"/>
            </method>
            <method name="init" type="void" line="952">
                <scope line="953">
                    <scope line="955">
                        <declaration name="e" type="Enumeration&amp;lt;Permission&amp;gt;" line="956"/>
                        <scope line="957"/>
                    </scope>
                </scope>
            </method>
            <method name="implies" type="boolean" line="966">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
            </method>
            <method name="elements" type="Enumeration&lt;Permission&gt;" line="970"/>
            <method name="toString" type="String" line="974"/>
        </class>
    </source>