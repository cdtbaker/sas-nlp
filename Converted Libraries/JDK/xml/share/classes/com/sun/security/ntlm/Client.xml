<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.ntlm">
        <import package="java.math.BigInteger"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Date"/>
        <import package="java.util.Locale"/>
        <class name="Client" line="6">
            <extends class="NTLM"/>
            <javadoc line="6">
                The NTLM client. Not multi-thread enabled.&lt;p&gt;
                  Example:
                  &lt;pre&gt;
                  Client client = new Client(null, &quot;host&quot;, &quot;dummy&quot;,
                  &quot;REALM&quot;, &quot;t0pSeCr3t&quot;.toCharArray());
                  byte[] type1 = client.type1();
                  // Send type1 to server and receive response as type2
                  byte[] type3 = client.type3(type2, nonce);
                  // Send type3 to server
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="hostname" type="String" line="19"/>
            <declaration name="username" type="String" line="20"/>
            <declaration name="domain" type="String" line="21"/>
            <declaration name="pw1" type="byte[]" line="22"/>
            <javadoc line="23">
                Creates an NTLM Client instance.                
                <param>
                    version the NTLM version to use, which can be:
                      <ul>
                      <li>LM/NTLM: Original NTLM v1
                      <li>LM: Original NTLM v1, LM only
                      <li>NTLM: Original NTLM v1, NTLM only
                      <li>NTLM2: NTLM v1 with Client Challenge
                      <li>LMv2/NTLMv2: NTLM v2
                      <li>LMv2: NTLM v2, LM only
                      <li>NTLMv2: NTLM v2, NTLM only
                      </ul>
                      If null, "LMv2/NTLMv2" will be used.                    
                </param>
                <param>
                    hostname hostname of the client, can be null                    
                </param>
                <param>
                    username username to be authenticated, must not be null                    
                </param>
                <param>
                    domain domain of {@code username}, can be null                    
                </param>
                <param>
                    password password for {@code username}, must not be not null.
                      This method does not make any modification to this parameter, it neither
                      needs to access the content of this parameter after this method call,
                      so you are free to modify or nullify this parameter after this call.                    
                </param>
                <throws>
                    NullPointerException if {@code username} or {@code password} is null.                    
                </throws>
                <throws>
                    NTLMException if {@code version} is illegal                    
                </throws>
            </javadoc>
            <method name="Client" type="constructor" line="46">
                <params>
                    <param name="version" type="String"/>
                    <param name="hostname" type="String"/>
                    <param name="username" type="String"/>
                    <param name="domain" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="48"/>
            </method>
            <javadoc line="58">
                Generates the Type 1 message                
                <return>
                    the message generated                    
                </return>
            </javadoc>
            <method name="type1" type="byte[]" line="62">
                <declaration name="p" type="Writer" line="63"/>
                <declaration name="flags" type="int" line="64"/>
                <scope line="65"/>
                <scope line="68"/>
                <scope line="71"/>
            </method>
            <javadoc line="81">
                Generates the Type 3 message                
                <param>
                    type2 the responding Type 2 message from server, must not be null                    
                </param>
                <param>
                    nonce random 8-byte array to be used in message generation,
                      must not be null except for original NTLM v1                    
                </param>
                <return>
                    the message generated                    
                </return>
                <throws>
                    NullPointerException if {@code type2} or {@code nonce} is null
                      for NTLM v1.                    
                </throws>
                <throws>
                    NTLMException if the incoming message is invalid                    
                </throws>
            </javadoc>
            <method name="type3" type="byte[]" line="91">
                <params>
                    <param name="type2" type="byte[]"/>
                    <param name="nonce" type="byte[]"/>
                </params>
                <scope line="92"/>
                <declaration name="r" type="Reader" line="97"/>
                <declaration name="challenge" type="byte[]" line="98"/>
                <declaration name="inputFlags" type="int" line="99"/>
                <declaration name="unicode" type="boolean" line="100"/>
                <declaration name="domainFromServer" type="String" line="101"/>
                <scope line="102"/>
                <scope line="105"/>
                <declaration name="flags" type="int" line="108"/>
                <declaration name="p" type="Writer" line="109"/>
                <declaration name="lm" type="byte[]" line="110"/>
                <scope line="114">
                    <declaration name="lmhash" type="byte[]" line="115"/>
                    <declaration name="nthash" type="byte[]" line="116"/>
                </scope>
                <scope line="120">
                    <declaration name="nthash" type="byte[]" line="121"/>
                </scope>
                <scope line="125">
                    <declaration name="nthash" type="byte[]" line="126"/>
                    <scope line="128">
                        <declaration name="alist" type="byte[]" line="129"/>
                        <declaration name="blob" type="byte[]" line="130"/>
                        <declaration name="time" type="byte[]" line="132"/>
                        <scope line="133"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="151">
                Returns the domain value provided by server after the authentication
                  is complete, or the domain value provided by the client before it.                
                <return>
                    the domain                    
                </return>
            </javadoc>
            <method name="getDomain" type="String" line="156"/>
            <javadoc line="159">
                Disposes any password-derived information.                
            </javadoc>
            <method name="dispose" type="void" line="162"/>
        </class>
    </source>