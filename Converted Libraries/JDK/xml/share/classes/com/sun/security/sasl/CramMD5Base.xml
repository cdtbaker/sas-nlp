<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl">
        <import package="javax.security.sasl.SaslException"/>
        <import package="javax.security.sasl.Sasl"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.util.logging.Logger"/>
        <class name="CramMD5Base" line="37">
            <comment line="226">
                set in initLogger(); lazily loads logger                
            </comment>
            <javadoc line="37">
                Base class for implementing CRAM-MD5 client and server mechanisms.                
                <author>
                    Vincent Ryan                    
                </author>
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="completed" type="boolean" line="44"/>
            <declaration name="aborted" type="boolean" line="45"/>
            <declaration name="pw" type="byte[]" line="46"/>
            <method name="CramMD5Base" type="constructor" line="48"/>
            <javadoc line="52">
                Retrieves this mechanism&apos;s name.                
                <return>
                    The string "CRAM-MD5".                    
                </return>
            </javadoc>
            <method name="getMechanismName" type="String" line="57"/>
            <javadoc line="61">
                Determines whether this mechanism has completed.
                  CRAM-MD5 completes after processing one challenge from the server.                
                <return>
                    true if has completed; false otherwise;                    
                </return>
            </javadoc>
            <method name="isComplete" type="boolean" line="67"/>
            <javadoc line="71">
                Unwraps the incoming buffer. CRAM-MD5 supports no security layer.                
                <throws>
                    SaslException If attempt to use this method.                    
                </throws>
            </javadoc>
            <method name="unwrap" type="byte[]" line="77">
                <params>
                    <param name="incoming" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="78"/>
                <scope line="81"/>
            </method>
            <javadoc line="87">
                Wraps the outgoing buffer. CRAM-MD5 supports no security layer.                
                <throws>
                    SaslException If attempt to use this method.                    
                </throws>
            </javadoc>
            <method name="wrap" type="byte[]" line="92">
                <params>
                    <param name="outgoing" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="93"/>
                <scope line="96"/>
            </method>
            <javadoc line="102">
                Retrieves the negotiated property.
                  This method can be called only after the authentication exchange has
                  completed (i.e., when &lt;tt&gt;isComplete()&lt;/tt&gt; returns true); otherwise, a
                  &lt;tt&gt;SaslException&lt;/tt&gt; is thrown.                
                <return>
                    value of property; only QOP is applicable to CRAM-MD5.                    
                </return>
                <exception>
                    IllegalStateException if this authentication exchange has not completed                    
                </exception>
            </javadoc>
            <method name="getNegotiatedProperty" type="Object" line="111">
                <params>
                    <param name="propName" type="String"/>
                </params>
                <scope line="112">
                    <scope line="113"/>
                    <scope line="115"/>
                </scope>
                <scope line="118"/>
            </method>
            <method name="dispose" type="void" line="124"/>
            <method name="clearPassword" type="void" line="128">
                <comment line="131">
                    zero out password                    
                </comment>
                <scope line="129">
                    <scope line="131"/>
                </scope>
            </method>
            <method name="finalize" type="void" line="138"/>
            <declaration name="MD5_BLOCKSIZE" type="int" line="142"/>
            <javadoc line="143">
                Hashes its input arguments according to HMAC-MD5 (RFC 2104)
                  and returns the resulting digest in its ASCII representation.
                  HMAC-MD5 function is described as follows:
                  MD5(key XOR opad, MD5(key XOR ipad, text))
                  where key  is an n byte key
                  ipad is the byte 0x36 repeated 64 times
                  opad is the byte 0x5c repeated 64 times
                  text is the data to be protected                
            </javadoc>
            <method name="HMAC_MD5" type="String" line="157">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="text" type="byte[]"/>
                </params>
                <comment line="162">
                                        
                </comment>
                <comment line="167">
                                        
                </comment>
                <comment line="168">
                                        
                </comment>
                <comment line="172">
                                        
                </comment>
                <comment line="182">
                                        
                </comment>
                <comment line="188">
                                        
                </comment>
                <comment line="193">
                                        
                </comment>
                <comment line="198">
                    Get character representation of digest                    
                </comment>
                <declaration name="md5" type="MessageDigest" line="159"/>
                <scope line="162"/>
                <declaration name="ipad" type="byte[]" line="166"/>
                <declaration name="opad" type="byte[]" line="167"/>
                <declaration name="digest" type="byte[]" line="168"/>
                <declaration name="i" type="int" line="169"/>
                <scope line="172">
                    <scope line="173"/>
                </scope>
                <scope line="182"/>
                <declaration name="digestString" type="StringBuffer" line="198"/>
                <scope line="200">
                    <scope line="201"/>
                    <scope line="204"/>
                </scope>
            </method>
            <javadoc line="213">
                Sets logger field.                
            </javadoc>
            <method name="initLogger" type="void" line="216">
                <scope line="217"/>
            </method>
            <declaration name="SASL_LOGGER_NAME" type="String" line="221"/>
            <javadoc line="221">
                Logger for debug messages                
            </javadoc>
            <declaration name="logger" type="Logger" line="225"/>
        </class>
    </source>