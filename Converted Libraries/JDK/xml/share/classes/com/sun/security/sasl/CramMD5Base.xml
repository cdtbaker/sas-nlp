<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl">
        <import package="javax.security.sasl.SaslException"/>
        <import package="javax.security.sasl.Sasl"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.util.logging.Logger"/>
        <class name="CramMD5Base" line="7">
            <javadoc line="7">
                Base class for implementing CRAM-MD5 client and server mechanisms.                
                <author>
                    Vincent Ryan                    
                </author>
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="completed" type="boolean" line="13"/>
            <declaration name="aborted" type="boolean" line="14"/>
            <declaration name="pw" type="byte[]" line="15"/>
            <method name="CramMD5Base" type="constructor" line="16"/>
            <javadoc line="19">
                Retrieves this mechanism&apos;s name.                
                <return>
                    The string &quot;CRAM-MD5&quot;.                    
                </return>
            </javadoc>
            <method name="getMechanismName" type="String" line="23"/>
            <javadoc line="26">
                Determines whether this mechanism has completed.
                  CRAM-MD5 completes after processing one challenge from the server.                
                <return>
                    true if has completed; false otherwise;                    
                </return>
            </javadoc>
            <method name="isComplete" type="boolean" line="31"/>
            <javadoc line="34">
                Unwraps the incoming buffer. CRAM-MD5 supports no security layer.                
                <throws>
                    SaslException If attempt to use this method.                    
                </throws>
            </javadoc>
            <method name="unwrap" type="byte[]" line="38">
                <params>
                    <param name="incoming" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="39"/>
                <scope line="42"/>
            </method>
            <javadoc line="46">
                Wraps the outgoing buffer. CRAM-MD5 supports no security layer.                
                <throws>
                    SaslException If attempt to use this method.                    
                </throws>
            </javadoc>
            <method name="wrap" type="byte[]" line="50">
                <params>
                    <param name="outgoing" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="51"/>
                <scope line="54"/>
            </method>
            <javadoc line="58">
                Retrieves the negotiated property.
                  This method can be called only after the authentication exchange has
                  completed (i.e., when &lt;tt&gt;isComplete()&lt;/tt&gt; returns true); otherwise, a
                  &lt;tt&gt;SaslException&lt;/tt&gt; is thrown.                
                <return>
                    value of property; only QOP is applicable to CRAM-MD5.                    
                </return>
                <exception>
                    IllegalStateException if this authentication exchange has not completed                    
                </exception>
            </javadoc>
            <method name="getNegotiatedProperty" type="Object" line="66">
                <params>
                    <param name="propName" type="String"/>
                </params>
                <scope line="67">
                    <scope line="68"/>
                    <scope line="71"/>
                </scope>
                <scope line="75"/>
            </method>
            <method name="dispose" type="void" line="79"/>
            <method name="clearPassword" type="void" line="82">
                <scope line="83">
                    <scope line="84"/>
                </scope>
            </method>
            <method name="finalize" type="void" line="90"/>
            <declaration name="MD5_BLOCKSIZE" type="int" line="93"/>
            <javadoc line="94">
                Hashes its input arguments according to HMAC-MD5 (RFC 2104)
                  and returns the resulting digest in its ASCII representation.
                  HMAC-MD5 function is described as follows:
                  MD5(key XOR opad, MD5(key XOR ipad, text))
                  where key  is an n byte key
                  ipad is the byte 0x36 repeated 64 times
                  opad is the byte 0x5c repeated 64 times
                  text is the data to be protected                
            </javadoc>
            <method name="HMAC_MD5" type="String" line="104">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="text" type="byte[]"/>
                </params>
                <declaration name="md5" type="MessageDigest" line="105"/>
                <scope line="106"/>
                <declaration name="ipad" type="byte[]" line="109"/>
                <declaration name="opad" type="byte[]" line="110"/>
                <declaration name="digest" type="byte[]" line="111"/>
                <declaration name="i" type="int" line="112"/>
                <scope line="113">
                    <scope line="114"/>
                </scope>
                <scope line="121"/>
                <declaration name="digestString" type="StringBuffer" line="131"/>
                <scope line="132">
                    <scope line="133"/>
                    <scope line="136"/>
                </scope>
            </method>
            <javadoc line="142">
                Sets logger field.                
            </javadoc>
            <method name="initLogger" type="void" line="145">
                <scope line="146"/>
            </method>
            <declaration name="SASL_LOGGER_NAME" type="String" line="150"/>
            <javadoc line="150">
                Logger for debug messages                
            </javadoc>
            <declaration name="logger" type="Logger" line="154"/>
        </class>
    </source>