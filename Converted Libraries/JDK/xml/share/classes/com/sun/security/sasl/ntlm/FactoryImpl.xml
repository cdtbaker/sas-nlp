<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl.ntlm">
        <import package="java.util.Map"/>
        <import package="javax.security.sasl"/>
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <import package="com.sun.security.sasl.util.PolicyUtils"/>
        <class name="FactoryImpl" line="6">
            <implements interface="SaslClientFactory"/>
            <implements interface="SaslServerFactory"/>
            <javadoc line="6">
                Client and server factory for NTLM SASL client/server mechanisms.
                  See NTLMClient and NTLMServer for input requirements.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="myMechs" type="String" line="12"/>
            <declaration name="mechPolicies" type="int" line="13"/>
            <javadoc line="14">
                Empty constructor.                
            </javadoc>
            <method name="FactoryImpl" type="constructor" line="17"/>
            <javadoc line="19">
                Returns a new instance of the NTLM SASL client mechanism.
                  Argument checks are performed in SaslClient&apos;s constructor.                
                <returns>
                    a new SaslClient ; otherwise null if unsuccessful.                    
                </returns>
                <throws>
                    SaslException If there is an error creating the NTLM
                      SASL client.                    
                </throws>
            </javadoc>
            <method name="createSaslClient" type="SaslClient" line="26">
                <params>
                    <param name="mechs" type="String[]"/>
                    <param name="authorizationId" type="String"/>
                    <param name="protocol" type="String"/>
                    <param name="serverName" type="String"/>
                    <param name="props" type="Map&lt;String,?&gt;"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <scope line="27">
                    <scope line="28"/>
                </scope>
            </method>
            <javadoc line="34">
                Returns a new instance of the NTLM SASL server mechanism.
                  Argument checks are performed in SaslServer&apos;s constructor.                
                <returns>
                    a new SaslServer ; otherwise null if unsuccessful.                    
                </returns>
                <throws>
                    SaslException If there is an error creating the NTLM
                      SASL server.                    
                </throws>
            </javadoc>
            <method name="createSaslServer" type="SaslServer" line="41">
                <params>
                    <param name="mech" type="String"/>
                    <param name="protocol" type="String"/>
                    <param name="serverName" type="String"/>
                    <param name="props" type="Map&lt;String,?&gt;"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <scope line="42">
                    <scope line="43">
                        <declaration name="qop" type="String" line="44"/>
                        <scope line="45"/>
                    </scope>
                    <scope line="49"/>
                </scope>
            </method>
            <javadoc line="56">
                Returns the authentication mechanisms that this factory can produce.                
                <returns>
                    String[] {&quot;NTLM&quot;} if policies in env match those of this
                      factory.                    
                </returns>
            </javadoc>
            <method name="getMechanismNames" type="String[]" line="61">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                </params>
            </method>
        </class>
    </source>