<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.auth.callback">
        <import package="javax.security.auth.callback.Callback"/>
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <import package="javax.security.auth.callback.ConfirmationCallback"/>
        <import package="javax.security.auth.callback.NameCallback"/>
        <import package="javax.security.auth.callback.PasswordCallback"/>
        <import package="javax.security.auth.callback.TextOutputCallback"/>
        <import package="javax.security.auth.callback.UnsupportedCallbackException"/>
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InputStreamReader"/>
        <import package="java.io.PushbackInputStream"/>
        <import package="java.util.Arrays"/>
        <import package="sun.security.util.Password"/>
        <class name="TextCallbackHandler" line="47">
            <comment line="150">
                                
            </comment>
            <implements interface="CallbackHandler"/>
            <javadoc line="47">
                &lt;p&gt;
                  Prompts and reads from the command line for answers to authentication
                  questions.
                  This can be used by a JAAS application to instantiate a
                  CallbackHandler                
                <see>
                    javax.security.auth.callback                    
                </see>
            </javadoc>
            <javadoc line="58">
                &lt;p&gt;Creates a callback handler that prompts and reads from the
                  command line for answers to authentication questions.
                  This can be used by JAAS applications to instantiate a
                  CallbackHandler.                
            </javadoc>
            <method name="TextCallbackHandler" type="constructor" line="65"/>
            <javadoc line="67">
                Handles the specified set of callbacks.                
                <param>
                    callbacks the callbacks to handle                    
                </param>
                <throws>
                    IOException if an input or output error occurs.                    
                </throws>
                <throws>
                    UnsupportedCallbackException if the callback is not an
                      instance of NameCallback or PasswordCallback                    
                </throws>
            </javadoc>
            <method name="handle" type="void" line="77">
                <params>
                    <param name="callbacks" type="Callback[]"/>
                </params>
                <comment line="143">
                                        
                </comment>
                <declaration name="confirmation" type="ConfirmationCallback" line="78"/>
                <scope line="80">
                    <scope line="81">
                        <declaration name="tc" type="TextOutputCallback" line="82"/>
                        <declaration name="text" type="String" line="84"/>
                        <declaration name="message" type="String" line="100"/>
                        <scope line="101"/>
                        <scope line="104"/>
                    </scope>
                    <scope line="108">
                        <declaration name="nc" type="NameCallback" line="109"/>
                        <scope line="111"/>
                        <scope line="113"/>
                        <declaration name="result" type="String" line="119"/>
                        <scope line="120"/>
                    </scope>
                    <scope line="126">
                        <declaration name="pc" type="PasswordCallback" line="127"/>
                    </scope>
                    <scope line="134"/>
                    <scope line="137"/>
                </scope>
                <scope line="144"/>
            </method>
            <method name="readLine" type="String" line="150">
                <declaration name="result" type="String" line="151"/>
                <scope line="153"/>
            </method>
            <method name="doConfirmation" type="void" line="161">
                <params>
                    <param name="confirmation" type="ConfirmationCallback"/>
                </params>
                <comment line="235">
                    defaultOption is an index into the options array                    
                </comment>
                <comment line="240">
                    defaultOption is an option value                    
                </comment>
                <declaration name="prefix" type="String" line="162"/>
                <declaration name="messageType" type="int" line="163"/>
                <class name="OptionInfo" line="179">
                    <declaration name="name" type="String" line="180"/>
                    <declaration name="value" type="int" line="181"/>
                    <method name="OptionInfo" type="constructor" line="182">
                        <params>
                            <param name="name" type="String"/>
                            <param name="value" type="int"/>
                        </params>
                    </method>
                </class>
                <declaration name="options" type="OptionInfo[]" line="188"/>
                <declaration name="optionType" type="int" line="189"/>
                <declaration name="optionStrings" type="String[]" line="211"/>
                <scope line="213"/>
                <declaration name="defaultOption" type="int" line="222"/>
                <declaration name="prompt" type="String" line="224"/>
                <scope line="225"/>
                <scope line="229"/>
                <scope line="233">
                    <scope line="234"/>
                    <scope line="239"/>
                </scope>
                <declaration name="result" type="int" line="248"/>
                <scope line="249">
                    <scope line="251"/>
                </scope>
                <scope line="255"/>
            </method>
        </class>
    </source>