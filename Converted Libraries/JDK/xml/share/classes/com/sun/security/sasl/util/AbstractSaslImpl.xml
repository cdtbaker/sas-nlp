<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl.util">
        <import package="javax.security.sasl"/>
        <import package="java.io"/>
        <import package="java.util.Map"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.util.logging.Level"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <class name="AbstractSaslImpl" line="40">
            <comment line="56">
                ordered list of qops                
            </comment>
            <comment line="57">
                a mask indicating which QOPs are requested                
            </comment>
            <comment line="58">
                ordered list of cipher strengths                
            </comment>
            <comment line="60">
                These are relevant only when privacy or integray have been negotiated                
            </comment>
            <comment line="61">
                specified by peer but can override                
            </comment>
            <comment line="62">
                optionally specified by self                
            </comment>
            <comment line="63">
                derived from sendMaxBufSize                
            </comment>
            <comment line="324">
                ---------------- Constants  -----------------                
            </comment>
            <comment line="333">
                default 0 (no protection); 1 (integrity only)                
            </comment>
            <javadoc line="40">
                The base class used by client and server implementations of SASL
                  mechanisms to process properties passed in the props argument
                  and strings with the same format (e.g., used in digest-md5).
                  Also contains utilities for doing int to network-byte-order
                  transformations.                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="completed" type="boolean" line="52"/>
            <declaration name="privacy" type="boolean" line="53"/>
            <declaration name="integrity" type="boolean" line="54"/>
            <declaration name="qop" type="byte[]" line="55"/>
            <declaration name="allQop" type="byte" line="56"/>
            <declaration name="strength" type="byte[]" line="57"/>
            <declaration name="sendMaxBufSize" type="int" line="60"/>
            <declaration name="recvMaxBufSize" type="int" line="61"/>
            <declaration name="rawSendSize" type="int" line="62"/>
            <declaration name="myClassName" type="String" line="64"/>
            <method name="AbstractSaslImpl" type="constructor" line="66">
                <params>
                    <param name="props" type="Map"/>
                    <param name="className" type="String"/>
                </params>
                <comment line="69">
                    Parse properties  to set desired context options                    
                </comment>
                <comment line="73">
                    &quot;auth&quot;, &quot;auth-int&quot;, &quot;auth-conf&quot;                    
                </comment>
                <comment line="94">
                    &quot;low&quot;, &quot;medium&quot;, &quot;high&quot;                    
                </comment>
                <comment line="108">
                    Max receive buffer size                    
                </comment>
                <comment line="122">
                    Max send buffer size                    
                </comment>
                <scope line="70">
                    <declaration name="prop" type="String" line="71"/>
                    <scope line="79">
                        <scope line="83">
                            <declaration name="qopbuf" type="StringBuffer" line="84"/>
                            <scope line="85"/>
                        </scope>
                    </scope>
                    <scope line="98">
                        <declaration name="strbuf" type="StringBuffer" line="99"/>
                        <scope line="100"/>
                    </scope>
                    <scope line="110">
                        <scope line="111"/>
                        <scope line="115"/>
                    </scope>
                    <scope line="124">
                        <scope line="125"/>
                        <scope line="129"/>
                    </scope>
                </scope>
                <scope line="135"/>
            </method>
            <javadoc line="142">
                Determines whether this mechanism has completed.                
                <return>
                    true if has completed; false otherwise;                    
                </return>
            </javadoc>
            <method name="isComplete" type="boolean" line="147"/>
            <javadoc line="151">
                Retrieves the negotiated property.                
                <exception>
                    SaslException if this authentication exchange has not completed                    
                </exception>
            </javadoc>
            <method name="getNegotiatedProperty" type="Object" line="155">
                <params>
                    <param name="propName" type="String"/>
                </params>
                <scope line="156"/>
                <scope line="160">
                    <scope line="161"/>
                    <scope line="163"/>
                    <scope line="165"/>
                </scope>
                <scope line="168"/>
                <scope line="170"/>
                <scope line="172"/>
                <scope line="174"/>
            </method>
            <method name="combineMasks" type="byte" line="179">
                <params>
                    <param name="in" type="byte[]"/>
                </params>
                <declaration name="answer" type="byte" line="180"/>
                <scope line="181"/>
            </method>
            <method name="findPreferredMask" type="byte" line="187">
                <params>
                    <param name="pref" type="byte"/>
                    <param name="in" type="byte[]"/>
                </params>
                <scope line="188">
                    <scope line="189"/>
                </scope>
            </method>
            <method name="parseQop" type="byte[]" line="196">
                <params>
                    <param name="qop" type="String"/>
                </params>
            </method>
            <method name="parseQop" type="byte[]" line="201">
                <params>
                    <param name="qop" type="String"/>
                    <param name="saveTokens" type="String[]"/>
                    <param name="ignore" type="boolean"/>
                </params>
                <comment line="203">
                    default                    
                </comment>
                <scope line="202"/>
            </method>
            <method name="parseStrength" type="byte[]" line="210">
                <params>
                    <param name="strength" type="String"/>
                </params>
                <comment line="212">
                    default                    
                </comment>
                <scope line="211"/>
            </method>
            <method name="parseProp" type="byte[]" line="221">
                <params>
                    <param name="propName" type="String"/>
                    <param name="propVal" type="String"/>
                    <param name="vals" type="String[]"/>
                    <param name="masks" type="byte[]"/>
                    <param name="tokens" type="String[]"/>
                    <param name="ignore" type="boolean"/>
                </params>
                <comment line="237">
                    save what was parsed                    
                </comment>
                <comment line="246">
                    Initialize rest of array with 0                    
                </comment>
                <declaration name="parser" type="StringTokenizer" line="223"/>
                <declaration name="token" type="String" line="224"/>
                <declaration name="answer" type="byte[]" line="225"/>
                <declaration name="i" type="int" line="226"/>
                <declaration name="found" type="boolean" line="227"/>
                <scope line="229">
                    <scope line="232">
                        <scope line="233">
                            <scope line="236"/>
                        </scope>
                    </scope>
                    <scope line="241"/>
                </scope>
                <scope line="247"/>
            </method>
            <javadoc line="254">
                Outputs a byte array and converts                
            </javadoc>
            <method name="traceOutput" type="void" line="258">
                <params>
                    <param name="srcClass" type="String"/>
                    <param name="srcMethod" type="String"/>
                    <param name="traceTag" type="String"/>
                    <param name="output" type="byte[]"/>
                </params>
            </method>
            <method name="traceOutput" type="void" line="263">
                <params>
                    <param name="srcClass" type="String"/>
                    <param name="srcMethod" type="String"/>
                    <param name="traceTag" type="String"/>
                    <param name="output" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="279">
                    Message id supplied by caller as part of traceTag                    
                </comment>
                <scope line="264">
                    <declaration name="origlen" type="int" line="265"/>
                    <declaration name="lev" type="Level" line="266"/>
                    <scope line="268"/>
                    <scope line="271"/>
                    <declaration name="out" type="ByteArrayOutputStream" line="275"/>
                </scope>
                <scope line="282"/>
            </method>
            <javadoc line="289">
                Returns the integer represented by  4 bytes in network byte order.                
            </javadoc>
            <method name="networkByteOrderToInt" type="int" line="293">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="294"/>
                <declaration name="answer" type="int" line="298"/>
                <scope line="300"/>
            </method>
            <javadoc line="307">
                Encodes an integer into 4 bytes in network byte order in the buffer
                  supplied.                
            </javadoc>
            <method name="intToNetworkByteOrder" type="void" line="312">
                <params>
                    <param name="num" type="int"/>
                    <param name="buf" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="313"/>
                <scope line="317"/>
            </method>
            <declaration name="SASL_LOGGER_NAME" type="String" line="324"/>
            <declaration name="MAX_SEND_BUF" type="String" line="325"/>
            <declaration name="logger" type="Logger" line="327"/>
            <javadoc line="327">
                Logger for debug messages                
            </javadoc>
            <declaration name="NO_PROTECTION" type="byte" line="333"/>
            <declaration name="INTEGRITY_ONLY_PROTECTION" type="byte" line="334"/>
            <declaration name="PRIVACY_PROTECTION" type="byte" line="335"/>
            <declaration name="LOW_STRENGTH" type="byte" line="337"/>
            <declaration name="MEDIUM_STRENGTH" type="byte" line="338"/>
            <declaration name="HIGH_STRENGTH" type="byte" line="339"/>
            <declaration name="DEFAULT_QOP" type="byte[]" line="341"/>
            <declaration name="QOP_TOKENS" type="String[]" line="342"/>
            <declaration name="QOP_MASKS" type="byte[]" line="345"/>
            <declaration name="DEFAULT_STRENGTH" type="byte[]" line="349"/>
            <declaration name="STRENGTH_TOKENS" type="String[]" line="351"/>
            <declaration name="STRENGTH_MASKS" type="byte[]" line="354"/>
        </class>
    </source>