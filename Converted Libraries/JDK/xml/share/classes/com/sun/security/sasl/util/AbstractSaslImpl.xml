<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl.util">
        <import package="javax.security.sasl"/>
        <import package="java.io"/>
        <import package="java.util.Map"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.util.logging.Level"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <class name="AbstractSaslImpl" line="11">
            <javadoc line="11">
                The base class used by client and server implementations of SASL
                  mechanisms to process properties passed in the props argument
                  and strings with the same format (e.g., used in digest-md5).
                  Also contains utilities for doing int to network-byte-order
                  transformations.                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="completed" type="boolean" line="20"/>
            <declaration name="privacy" type="boolean" line="21"/>
            <declaration name="integrity" type="boolean" line="22"/>
            <declaration name="qop" type="byte[]" line="23"/>
            <declaration name="allQop" type="byte" line="24"/>
            <declaration name="strength" type="byte[]" line="25"/>
            <declaration name="sendMaxBufSize" type="int" line="26"/>
            <declaration name="recvMaxBufSize" type="int" line="27"/>
            <declaration name="rawSendSize" type="int" line="28"/>
            <declaration name="myClassName" type="String" line="29"/>
            <method name="AbstractSaslImpl" type="constructor" line="30">
                <params>
                    <param name="props" type="Map"/>
                    <param name="className" type="String"/>
                </params>
                <scope line="32">
                    <declaration name="prop" type="String" line="33"/>
                    <scope line="37">
                        <scope line="39">
                            <declaration name="qopbuf" type="StringBuffer" line="40"/>
                            <scope line="41"/>
                        </scope>
                    </scope>
                    <scope line="50">
                        <declaration name="strbuf" type="StringBuffer" line="51"/>
                        <scope line="52"/>
                    </scope>
                    <scope line="59">
                        <scope line="60"/>
                        <scope line="64"/>
                    </scope>
                    <scope line="69">
                        <scope line="70"/>
                        <scope line="74"/>
                    </scope>
                </scope>
                <scope line="79"/>
            </method>
            <javadoc line="85">
                Determines whether this mechanism has completed.                
                <return>
                    true if has completed; false otherwise;                    
                </return>
            </javadoc>
            <method name="isComplete" type="boolean" line="89"/>
            <javadoc line="92">
                Retrieves the negotiated property.                
                <exception>
                    SaslException if this authentication exchange has not completed                    
                </exception>
            </javadoc>
            <method name="getNegotiatedProperty" type="Object" line="96">
                <params>
                    <param name="propName" type="String"/>
                </params>
                <scope line="97"/>
                <scope line="100">
                    <scope line="101"/>
                    <scope line="104"/>
                    <scope line="107"/>
                </scope>
                <scope line="111"/>
                <scope line="114"/>
                <scope line="117"/>
                <scope line="120"/>
            </method>
            <method name="combineMasks" type="byte" line="124">
                <params>
                    <param name="in" type="byte[]"/>
                </params>
                <declaration name="answer" type="byte" line="125"/>
                <scope line="126"/>
            </method>
            <method name="findPreferredMask" type="byte" line="131">
                <params>
                    <param name="pref" type="byte"/>
                    <param name="in" type="byte[]"/>
                </params>
                <scope line="132">
                    <scope line="133"/>
                </scope>
            </method>
            <method name="parseQop" type="byte[]" line="139">
                <params>
                    <param name="qop" type="String"/>
                </params>
            </method>
            <method name="parseQop" type="byte[]" line="142">
                <params>
                    <param name="qop" type="String"/>
                    <param name="saveTokens" type="String[]"/>
                    <param name="ignore" type="boolean"/>
                </params>
                <scope line="143"/>
            </method>
            <method name="parseStrength" type="byte[]" line="148">
                <params>
                    <param name="strength" type="String"/>
                </params>
                <scope line="149"/>
            </method>
            <method name="parseProp" type="byte[]" line="154">
                <params>
                    <param name="propName" type="String"/>
                    <param name="propVal" type="String"/>
                    <param name="vals" type="String[]"/>
                    <param name="masks" type="byte[]"/>
                    <param name="tokens" type="String[]"/>
                    <param name="ignore" type="boolean"/>
                </params>
                <declaration name="parser" type="StringTokenizer" line="155"/>
                <declaration name="token" type="String" line="156"/>
                <declaration name="answer" type="byte[]" line="157"/>
                <declaration name="i" type="int" line="158"/>
                <declaration name="found" type="boolean" line="159"/>
                <scope line="160">
                    <scope line="163">
                        <scope line="164">
                            <scope line="167"/>
                        </scope>
                    </scope>
                    <scope line="172"/>
                </scope>
                <scope line="176"/>
            </method>
            <javadoc line="181">
                Outputs a byte array and converts                
            </javadoc>
            <method name="traceOutput" type="void" line="184">
                <params>
                    <param name="srcClass" type="String"/>
                    <param name="srcMethod" type="String"/>
                    <param name="traceTag" type="String"/>
                    <param name="output" type="byte[]"/>
                </params>
            </method>
            <method name="traceOutput" type="void" line="187">
                <params>
                    <param name="srcClass" type="String"/>
                    <param name="srcMethod" type="String"/>
                    <param name="traceTag" type="String"/>
                    <param name="output" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="188">
                    <declaration name="origlen" type="int" line="189"/>
                    <declaration name="lev" type="Level" line="190"/>
                    <scope line="191"/>
                    <scope line="195"/>
                    <declaration name="out" type="ByteArrayOutputStream" line="198"/>
                </scope>
                <scope line="202"/>
            </method>
            <javadoc line="206">
                Returns the integer represented by  4 bytes in network byte order.                
            </javadoc>
            <method name="networkByteOrderToInt" type="int" line="209">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="210"/>
                <declaration name="answer" type="int" line="213"/>
                <scope line="214"/>
            </method>
            <javadoc line="220">
                Encodes an integer into 4 bytes in network byte order in the buffer
                  supplied.                
            </javadoc>
            <method name="intToNetworkByteOrder" type="void" line="224">
                <params>
                    <param name="num" type="int"/>
                    <param name="buf" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="225"/>
                <scope line="228"/>
            </method>
            <declaration name="SASL_LOGGER_NAME" type="String" line="233"/>
            <declaration name="MAX_SEND_BUF" type="String" line="234"/>
            <declaration name="logger" type="Logger" line="235"/>
            <javadoc line="235">
                Logger for debug messages                
            </javadoc>
            <declaration name="NO_PROTECTION" type="byte" line="239"/>
            <declaration name="INTEGRITY_ONLY_PROTECTION" type="byte" line="240"/>
            <declaration name="PRIVACY_PROTECTION" type="byte" line="241"/>
            <declaration name="LOW_STRENGTH" type="byte" line="242"/>
            <declaration name="MEDIUM_STRENGTH" type="byte" line="243"/>
            <declaration name="HIGH_STRENGTH" type="byte" line="244"/>
            <declaration name="DEFAULT_QOP" type="byte[]" line="245"/>
            <declaration name="QOP_TOKENS" type="String[]" line="246"/>
            <declaration name="QOP_MASKS" type="byte[]" line="247"/>
            <declaration name="DEFAULT_STRENGTH" type="byte[]" line="248"/>
            <declaration name="STRENGTH_TOKENS" type="String[]" line="249"/>
            <declaration name="STRENGTH_MASKS" type="byte[]" line="250"/>
        </class>
    </source>