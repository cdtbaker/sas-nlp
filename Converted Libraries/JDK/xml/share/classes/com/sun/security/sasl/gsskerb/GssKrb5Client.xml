<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl.gsskerb">
        <import package="java.io.IOException"/>
        <import package="java.util.Map"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.security.sasl"/>
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <import package="org.ietf.jgss"/>
        <class name="GssKrb5Client" line="40">
            <extends class="GssKrb5Base"/>
            <comment line="84">
                ---------------- Constants -----------------                
            </comment>
            <comment line="88">
                default false                
            </comment>
            <implements interface="SaslClient"/>
            <javadoc line="40">
                Implements the GSSAPI SASL client mechanism for Kerberos V5.
                  (&lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2222.txt&quot;&gt;RFC 2222&lt;/A&gt;,
                  &lt;a HREF=&quot;http://www.ietf.org/internet-drafts/draft-ietf-cat-sasl-gssapi-04.txt&quot;&gt;draft-ietf-cat-sasl-gssapi-04.txt&lt;/a&gt;).
                  It uses the Java Bindings for GSSAPI
                  (&lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2853.txt&quot;&gt;RFC 2853&lt;/A&gt;)
                  for getting GSSAPI/Kerberos V5 support.
                  The client/server interactions are:
                  C0: bind (GSSAPI, initial response)
                  S0: sasl-bind-in-progress, challenge 1 (output of accept_sec_context or [])
                  C1: bind (GSSAPI, response 1 (output of init_sec_context or []))
                  S1: sasl-bind-in-progress challenge 2 (security layer, server max recv size)
                  C2: bind (GSSAPI, response 2 (security layer, client max recv size, authzid))
                  S2: bind success response
                  Expects the client&apos;s credentials to be supplied from the
                  javax.security.sasl.credentials property or from the thread&apos;s Subject.
                  Otherwise the underlying KRB5 mech will attempt to acquire Kerberos creds
                  by logging into Kerberos (via default TextCallbackHandler).
                  These creds will be used for exchange with server.
                  Required callbacks: none.
                  Environment properties that affect behavior of implementation:
                  javax.security.sasl.qop
                  - quality of protection; list of auth, auth-int, auth-conf; default is &quot;auth&quot;
                  javax.security.sasl.maxbuf
                  - max receive buffer size; default is 65536
                  javax.security.sasl.sendmaxbuffer
                  - max send buffer size; default is 65536; (min with server max recv size)
                  javax.security.sasl.server.authentication
                  - &quot;true&quot; means require mutual authentication; default is &quot;false&quot;
                  javax.security.sasl.credentials
                  - an {@link org.ietf.jgss.GSSCredential} used for delegated authentication.                
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="MY_CLASS_NAME" type="String" line="84"/>
            <declaration name="finalHandshake" type="boolean" line="86"/>
            <declaration name="mutual" type="boolean" line="87"/>
            <declaration name="authzID" type="byte[]" line="88"/>
            <javadoc line="90">
                Creates a SASL mechanism with client credentials that it needs
                  to participate in GSS-API/Kerberos v5 authentication exchange
                  with the server.                
            </javadoc>
            <method name="GssKrb5Client" type="constructor" line="96">
                <params>
                    <param name="authzID" type="String"/>
                    <param name="protocol" type="String"/>
                    <param name="serverName" type="String"/>
                    <param name="props" type="Map"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <comment line="107">
                    Create the name for the requested service entity for Krb5 mech                    
                </comment>
                <comment line="111">
                    Parse properties to check for supplied credentials                    
                </comment>
                <comment line="123">
                    Create a context using credentials for Krb5 mech                    
                </comment>
                <comment line="125">
                                        
                </comment>
                <comment line="126">
                                        
                </comment>
                <comment line="129">
                    Request credential delegation when credentials have been supplied                    
                </comment>
                <comment line="134">
                    Parse properties  to set desired context options                    
                </comment>
                <comment line="136">
                    Mutual authentication                    
                </comment>
                <comment line="144">
                    Always specify potential need for integrity and confidentiality                    
                </comment>
                <comment line="145">
                    Decision will be made during final handshake                    
                </comment>
                <declaration name="service" type="String" line="100"/>
                <scope line="104">
                    <declaration name="mgr" type="GSSManager" line="105"/>
                    <declaration name="acceptorName" type="GSSName" line="108"/>
                    <declaration name="credentials" type="GSSCredential" line="112"/>
                    <scope line="113">
                        <declaration name="prop" type="Object" line="114"/>
                        <scope line="115"/>
                    </scope>
                    <scope line="130"/>
                    <scope line="135">
                        <declaration name="prop" type="String" line="137"/>
                        <scope line="138"/>
                    </scope>
                </scope>
                <scope line="149"/>
                <scope line="153">
                    <scope line="154"/>
                    <scope line="156"/>
                </scope>
            </method>
            <method name="hasInitialResponse" type="boolean" line="162"/>
            <javadoc line="166">
                Processes the challenge data.
                  The server sends a challenge data using which the client must
                  process using GSS_Init_sec_context.
                  As per RFC 2222, when GSS_S_COMPLETE is returned, we do
                  an extra handshake to determine the negotiated security protection
                  and buffer sizes.                
                <param>
                    challengeData A non-null byte array containing the
                      challenge data from the server.                    
                </param>
                <return>
                    A non-null byte array containing the response to be
                      sent to the server.                    
                </return>
            </javadoc>
            <method name="evaluateChallenge" type="byte[]" line="180">
                <params>
                    <param name="challengeData" type="byte[]"/>
                </params>
                <comment line="190">
                    Security context not established yet; continue with init                    
                </comment>
                <comment line="205">
                    RFC 2222 7.2.1:  Client responds with no data                    
                </comment>
                <scope line="181"/>
                <scope line="186"/>
                <scope line="188">
                    <scope line="192">
                        <declaration name="gssOutToken" type="byte[]" line="193"/>
                        <scope line="195"/>
                        <scope line="202">
                            <scope line="204"/>
                        </scope>
                    </scope>
                    <scope line="211"/>
                </scope>
            </method>
            <method name="doFinalHandshake" type="byte[]" line="217">
                <params>
                    <param name="challengeData" type="byte[]"/>
                </params>
                <comment line="219">
                    Security context already established. challengeData                    
                </comment>
                <comment line="220">
                    should contain security layers and server&apos;s maximum buffer size                    
                </comment>
                <comment line="228">
                    Received S0, should return []                    
                </comment>
                <comment line="232">
                    Received S1 (security layer, server max recv size)                    
                </comment>
                <comment line="237">
                    First octet is a bit-mask specifying the protections                    
                </comment>
                <comment line="238">
                    supported by the server                    
                </comment>
                <comment line="248">
                    Client selects preferred protection                    
                </comment>
                <comment line="249">
                    qop is ordered list of qop values                    
                </comment>
                <comment line="263">
                    2nd-4th octets specifies maximum buffer size expected by                    
                </comment>
                <comment line="264">
                    server (in network byte order)                    
                </comment>
                <comment line="267">
                    Determine the max send buffer size based on what the                    
                </comment>
                <comment line="268">
                    server is able to receive and our specified max                    
                </comment>
                <comment line="272">
                    Update context to limit size of returned buffer                    
                </comment>
                <comment line="284">
                    Construct negotiated security layers and client&apos;s max                    
                </comment>
                <comment line="285">
                    receive buffer size and authzID                    
                </comment>
                <comment line="304">
                    copy authorization id                    
                </comment>
                <comment line="316">
                                        
                </comment>
                <comment line="316">
                                        
                </comment>
                <comment line="323">
                    server authenticated                    
                </comment>
                <scope line="218">
                    <scope line="222"/>
                    <scope line="227"/>
                    <declaration name="gssOutToken" type="byte[]" line="234"/>
                    <scope line="239">
                        <scope line="240"/>
                    </scope>
                    <declaration name="selectedQop" type="byte" line="250"/>
                    <scope line="251"/>
                    <scope line="256"/>
                    <scope line="259"/>
                    <declaration name="srvMaxBufSize" type="int" line="265"/>
                    <scope line="276"/>
                    <declaration name="len" type="int" line="286"/>
                    <scope line="287"/>
                    <declaration name="gssInToken" type="byte[]" line="291"/>
                    <scope line="294"/>
                    <scope line="303"/>
                    <scope line="309"/>
                    <scope line="318"/>
                </scope>
                <scope line="327"/>
            </method>
        </class>
    </source>