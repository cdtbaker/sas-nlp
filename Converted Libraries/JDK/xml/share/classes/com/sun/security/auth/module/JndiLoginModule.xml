<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.auth.module">
        <import package="javax.security.auth"/>
        <import package="javax.security.auth.callback"/>
        <import package="javax.security.auth.login"/>
        <import package="javax.security.auth.spi"/>
        <import package="javax.naming"/>
        <import package="javax.naming.directory"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Map"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.ResourceBundle"/>
        <import package="com.sun.security.auth.UnixPrincipal"/>
        <import package="com.sun.security.auth.UnixNumericUserPrincipal"/>
        <import package="com.sun.security.auth.UnixNumericGroupPrincipal"/>
        <import package="sun.security.util.AuthResources"/>
        <class name="JndiLoginModule" line="16">
            <implements interface="LoginModule"/>
            <javadoc line="16">
                &lt;p&gt; The module prompts for a username and password
                  and then verifies the password against the password stored in
                  a directory service configured under JNDI.
                  &lt;p&gt; This &lt;code&gt;LoginModule&lt;/code&gt; interoperates with
                  any conformant JNDI service provider.  To direct this
                  &lt;code&gt;LoginModule&lt;/code&gt; to use a specific JNDI service provider,
                  two options must be specified in the login &lt;code&gt;Configuration&lt;/code&gt;
                  for this &lt;code&gt;LoginModule&lt;/code&gt;.
                  &lt;pre&gt;
                  user.provider.url=&lt;b&gt;name_service_url&lt;/b&gt;
                  group.provider.url=&lt;b&gt;name_service_url&lt;/b&gt;
                  &lt;/pre&gt;
                  &lt;b&gt;name_service_url&lt;/b&gt; specifies
                  the directory service and path where this &lt;code&gt;LoginModule&lt;/code&gt;
                  can access the relevant user and group information.  Because this
                  &lt;code&gt;LoginModule&lt;/code&gt; only performs one-level searches to
                  find the relevant user information, the &lt;code&gt;URL&lt;/code&gt;
                  must point to a directory one level above where the user and group
                  information is stored in the directory service.
                  For example, to instruct this &lt;code&gt;LoginModule&lt;/code&gt;
                  to contact a NIS server, the following URLs must be specified:
                  &lt;pre&gt;
                  user.provider.url=&quot;nis://&lt;b&gt;NISServerHostName&lt;/b&gt;/&lt;b&gt;NISDomain&lt;/b&gt;/user&quot;
                  group.provider.url=&quot;nis://&lt;b&gt;NISServerHostName&lt;/b&gt;/&lt;b&gt;NISDomain&lt;/b&gt;/system/group&quot;
                  &lt;/pre&gt;
                  &lt;b&gt;NISServerHostName&lt;/b&gt; specifies the server host name of the
                  NIS server (for example, &lt;i&gt;nis.sun.com&lt;/i&gt;, and &lt;b&gt;NISDomain&lt;/b&gt;
                  specifies the domain for that NIS server (for example, &lt;i&gt;jaas.sun.com&lt;/i&gt;.
                  To contact an LDAP server, the following URLs must be specified:
                  &lt;pre&gt;
                  user.provider.url=&quot;ldap://&lt;b&gt;LDAPServerHostName&lt;/b&gt;/&lt;b&gt;LDAPName&lt;/b&gt;&quot;
                  group.provider.url=&quot;ldap://&lt;b&gt;LDAPServerHostName&lt;/b&gt;/&lt;b&gt;LDAPName&lt;/b&gt;&quot;
                  &lt;/pre&gt;
                  &lt;b&gt;LDAPServerHostName&lt;/b&gt; specifies the server host name of the
                  LDAP server, which may include a port number
                  (for example, &lt;i&gt;ldap.sun.com:389&lt;/i&gt;),
                  and &lt;b&gt;LDAPName&lt;/b&gt; specifies the entry name in the LDAP directory
                  (for example, &lt;i&gt;ou=People,o=Sun,c=US&lt;/i&gt; and &lt;i&gt;ou=Groups,o=Sun,c=US&lt;/i&gt;
                  for user and group information, respectively).
                  &lt;p&gt; The format in which the user&apos;s information must be stored in
                  the directory service is specified in RFC 2307.  Specifically,
                  this &lt;code&gt;LoginModule&lt;/code&gt; will search for the user&apos;s entry in the
                  directory service using the user&apos;s &lt;i&gt;uid&lt;/i&gt; attribute,
                  where &lt;i&gt;uid=&lt;b&gt;username&lt;/b&gt;&lt;/i&gt;.  If the search succeeds,
                  this &lt;code&gt;LoginModule&lt;/code&gt; will then
                  obtain the user&apos;s encrypted password from the retrieved entry
                  using the &lt;i&gt;userPassword&lt;/i&gt; attribute.
                  This &lt;code&gt;LoginModule&lt;/code&gt; assumes that the password is stored
                  as a byte array, which when converted to a &lt;code&gt;String&lt;/code&gt;,
                  has the following format:
                  &lt;pre&gt;
                  &quot;{crypt}&lt;b&gt;encrypted_password&lt;/b&gt;&quot;
                  &lt;/pre&gt;
                  The LDAP directory server must be configured
                  to permit read access to the userPassword attribute.
                  If the user entered a valid username and password,
                  this &lt;code&gt;LoginModule&lt;/code&gt; associates a
                  &lt;code&gt;UnixPrincipal&lt;/code&gt;, &lt;code&gt;UnixNumericUserPrincipal&lt;/code&gt;,
                  and the relevant UnixNumericGroupPrincipals with the
                  &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; This LoginModule also recognizes the following &lt;code&gt;Configuration&lt;/code&gt;
                  options:
                  &lt;pre&gt;
                  debug          if, true, debug messages are output to System.out.
                  useFirstPass   if, true, this LoginModule retrieves the
                  username and password from the module&apos;s shared state,
                  using &quot;javax.security.auth.login.name&quot; and
                  &quot;javax.security.auth.login.password&quot; as the respective
                  keys.  The retrieved values are used for authentication.
                  If authentication fails, no attempt for a retry is made,
                  and the failure is reported back to the calling
                  application.
                  tryFirstPass   if, true, this LoginModule retrieves the
                  the username and password from the module&apos;s shared state,
                  using &quot;javax.security.auth.login.name&quot; and
                  &quot;javax.security.auth.login.password&quot; as the respective
                  keys.  The retrieved values are used for authentication.
                  If authentication fails, the module uses the
                  CallbackHandler to retrieve a new username and password,
                  and another attempt to authenticate is made.
                  If the authentication fails, the failure is reported
                  back to the calling application.
                  storePass      if, true, this LoginModule stores the username and password
                  obtained from the CallbackHandler in the module&apos;s
                  shared state, using &quot;javax.security.auth.login.name&quot; and
                  &quot;javax.security.auth.login.password&quot; as the respective
                  keys.  This is not performed if existing values already
                  exist for the username and password in the shared state,
                  or if authentication fails.
                  clearPass     if, true, this &lt;code&gt;LoginModule&lt;/code&gt; clears the
                  username and password stored in the module&apos;s shared state
                  after both phases of authentication (login and commit)
                  have completed.
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="rb" type="java.util.ResourceBundle" line="113"/>
            <declaration name="USER_PROVIDER" type="String" line="114"/>
            <javadoc line="114">
                JNDI Provider                
            </javadoc>
            <declaration name="GROUP_PROVIDER" type="String" line="118"/>
            <declaration name="debug" type="boolean" line="119"/>
            <declaration name="strongDebug" type="boolean" line="120"/>
            <declaration name="userProvider" type="String" line="121"/>
            <declaration name="groupProvider" type="String" line="122"/>
            <declaration name="useFirstPass" type="boolean" line="123"/>
            <declaration name="tryFirstPass" type="boolean" line="124"/>
            <declaration name="storePass" type="boolean" line="125"/>
            <declaration name="clearPass" type="boolean" line="126"/>
            <declaration name="succeeded" type="boolean" line="127"/>
            <declaration name="commitSucceeded" type="boolean" line="128"/>
            <declaration name="username" type="String" line="129"/>
            <declaration name="password" type="char[]" line="130"/>
            <declaration name="ctx" type="DirContext" line="131"/>
            <declaration name="userPrincipal" type="UnixPrincipal" line="132"/>
            <declaration name="UIDPrincipal" type="UnixNumericUserPrincipal" line="133"/>
            <declaration name="GIDPrincipal" type="UnixNumericGroupPrincipal" line="134"/>
            <declaration name="supplementaryGroups" type="LinkedList&amp;lt;UnixNumericGroupPrincipal&amp;gt;" line="135"/>
            <declaration name="subject" type="Subject" line="136"/>
            <declaration name="callbackHandler" type="CallbackHandler" line="137"/>
            <declaration name="sharedState" type="Map" line="138"/>
            <declaration name="options" type="Map&amp;lt;String,?&amp;gt;" line="139"/>
            <declaration name="CRYPT" type="String" line="140"/>
            <declaration name="USER_PWD" type="String" line="141"/>
            <declaration name="USER_UID" type="String" line="142"/>
            <declaration name="USER_GID" type="String" line="143"/>
            <declaration name="GROUP_ID" type="String" line="144"/>
            <declaration name="NAME" type="String" line="145"/>
            <declaration name="PWD" type="String" line="146"/>
            <javadoc line="147">
                Initialize this &lt;code&gt;LoginModule&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    subject the &lt;code&gt;Subject&lt;/code&gt; to be authenticated. &lt;p&gt;                    
                </param>
                <param>
                    callbackHandler a &lt;code&gt;CallbackHandler&lt;/code&gt; for communicating
                      with the end user (prompting for usernames and
                      passwords, for example). &lt;p&gt;                    
                </param>
                <param>
                    sharedState shared &lt;code&gt;LoginModule&lt;/code&gt; state. &lt;p&gt;                    
                </param>
                <param>
                    options options specified in the login
                      &lt;code&gt;Configuration&lt;/code&gt; for this particular
                      &lt;code&gt;LoginModule&lt;/code&gt;.                    
                </param>
            </javadoc>
            <method name="initialize" type="void" line="159">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="callbackHandler" type="CallbackHandler"/>
                    <param name="sharedState" type="Map&lt;String,?&gt;"/>
                    <param name="options" type="Map&lt;String,?&gt;"/>
                </params>
            </method>
            <javadoc line="173">
                &lt;p&gt; Prompt for username and password.
                  Verify the password against the relevant name service.
                  &lt;p&gt;                
                <return>
                    true always, since this &lt;code&gt;LoginModule&lt;/code&gt;
                      should not be ignored.                    
                </return>
                <exception>
                    FailedLoginException if the authentication fails. &lt;p&gt;                    
                </exception>
                <exception>
                    LoginException if this &lt;code&gt;LoginModule&lt;/code&gt;
                      is unable to perform the authentication.                    
                </exception>
            </javadoc>
            <method name="login" type="boolean" line="183">
                <scope line="184"/>
                <scope line="187"/>
                <scope line="190"/>
                <scope line="194">
                    <scope line="195">
                        <scope line="198"/>
                    </scope>
                    <scope line="203">
                        <scope line="205"/>
                    </scope>
                </scope>
                <scope line="210">
                    <scope line="211">
                        <scope line="214"/>
                    </scope>
                    <scope line="219">
                        <scope line="221"/>
                    </scope>
                </scope>
                <scope line="227">
                    <scope line="230"/>
                </scope>
                <scope line="235">
                    <scope line="237"/>
                </scope>
            </method>
            <javadoc line="243">
                Abstract method to commit the authentication process (phase 2).
                  &lt;p&gt; This method is called if the LoginContext&apos;s
                  overall authentication succeeded
                  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
                  succeeded).
                  &lt;p&gt; If this LoginModule&apos;s own authentication attempt
                  succeeded (checked by retrieving the private state saved by the
                  &lt;code&gt;login&lt;/code&gt; method), then this method associates a
                  &lt;code&gt;UnixPrincipal&lt;/code&gt;
                  with the &lt;code&gt;Subject&lt;/code&gt; located in the
                  &lt;code&gt;LoginModule&lt;/code&gt;.  If this LoginModule&apos;s own
                  authentication attempted failed, then this method removes
                  any state that was originally saved.
                  &lt;p&gt;                
                <exception>
                    LoginException if the commit fails                    
                </exception>
                <return>
                    true if this LoginModule&apos;s own login and commit
                      attempts succeeded, or false otherwise.                    
                </return>
            </javadoc>
            <method name="commit" type="boolean" line="262">
                <scope line="263"/>
                <scope line="266">
                    <scope line="267"/>
                    <scope line="274"/>
                    <scope line="277"/>
                </scope>
            </method>
            <javadoc line="288">
                &lt;p&gt; This method is called if the LoginContext&apos;s
                  overall authentication failed.
                  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
                  did not succeed).
                  &lt;p&gt; If this LoginModule&apos;s own authentication attempt
                  succeeded (checked by retrieving the private state saved by the
                  &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt; methods),
                  then this method cleans up any state that was originally saved.
                  &lt;p&gt;                
                <exception>
                    LoginException if the abort fails.                    
                </exception>
                <return>
                    false if this LoginModule&apos;s own login and/or commit attempts
                      failed, and true otherwise.                    
                </return>
            </javadoc>
            <method name="abort" type="boolean" line="302">
                <scope line="304"/>
                <scope line="307"/>
                <scope line="315"/>
            </method>
            <javadoc line="320">
                Logout a user.
                  &lt;p&gt; This method removes the Principals
                  that were added by the &lt;code&gt;commit&lt;/code&gt; method.
                  &lt;p&gt;                
                <exception>
                    LoginException if the logout fails.                    
                </exception>
                <return>
                    true in all cases since this &lt;code&gt;LoginModule&lt;/code&gt;
                      should not be ignored.                    
                </return>
            </javadoc>
            <method name="logout" type="boolean" line="329">
                <scope line="330"/>
                <scope line="337"/>
                <scope line="347"/>
            </method>
            <javadoc line="352">
                Attempt authentication
                  &lt;p&gt;                
                <param>
                    getPasswdFromSharedState boolean that tells this method whether
                      to retrieve the password from the sharedState.                    
                </param>
            </javadoc>
            <method name="attemptAuthentication" type="void" line="358">
                <params>
                    <param name="getPasswdFromSharedState" type="boolean"/>
                </params>
                <declaration name="encryptedPassword" type="String" line="359"/>
                <scope line="361">
                    <declaration name="iCtx" type="InitialContext" line="362"/>
                    <declaration name="controls" type="SearchControls" line="364"/>
                    <declaration name="ne" type="NamingEnumeration&amp;lt;SearchResult&amp;gt;" line="365"/>
                    <scope line="366">
                        <declaration name="result" type="SearchResult" line="367"/>
                        <declaration name="attributes" type="Attributes" line="368"/>
                        <declaration name="pwd" type="Attribute" line="369"/>
                        <declaration name="encryptedPwd" type="String" line="370"/>
                        <scope line="372"/>
                        <scope line="375"/>
                        <scope line="379"/>
                        <declaration name="uid" type="Attribute" line="384"/>
                        <declaration name="uidNumber" type="String" line="385"/>
                        <scope line="387"/>
                        <declaration name="gid" type="Attribute" line="390"/>
                        <declaration name="gidNumber" type="String" line="391"/>
                        <scope line="393"/>
                        <scope line="398">
                            <declaration name="suppGid" type="String" line="402"/>
                            <scope line="403">
                                <declaration name="suppPrincipal" type="UnixNumericGroupPrincipal" line="404"/>
                                <scope line="406"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="412">
                        <scope line="413"/>
                    </scope>
                </scope>
                <scope line="419">
                    <scope line="420"/>
                </scope>
                <scope line="426">
                    <scope line="427"/>
                </scope>
            </method>
            <javadoc line="434">
                Get the username and password.
                  This method does not return any value.
                  Instead, it sets global name and password variables.
                  &lt;p&gt; Also note that this method will set the username and password
                  values in the shared state in case subsequent LoginModules
                  want to use them via use/tryFirstPass.
                  &lt;p&gt;                
                <param>
                    getPasswdFromSharedState boolean that tells this method whether
                      to retrieve the password from the sharedState.                    
                </param>
            </javadoc>
            <method name="getUsernamePassword" type="void" line="445">
                <params>
                    <param name="getPasswdFromSharedState" type="boolean"/>
                </params>
                <scope line="446"/>
                <declaration name="protocol" type="String" line="452"/>
                <declaration name="callbacks" type="Callback[]" line="453"/>
                <scope line="456">
                    <declaration name="tmpPassword" type="char[]" line="459"/>
                </scope>
                <scope line="464"/>
                <scope line="467"/>
                <scope line="470"/>
            </method>
            <javadoc line="477">
                Verify a password against the encrypted passwd from /etc/shadow                
            </javadoc>
            <method name="verifyPassword" type="boolean" line="480">
                <params>
                    <param name="encryptedPassword" type="String"/>
                    <param name="password" type="String"/>
                </params>
                <declaration name="c" type="Crypt" line="482"/>
                <scope line="483">
                    <declaration name="oldCrypt" type="byte" line="484"/>
                    <declaration name="newCrypt" type="byte" line="485"/>
                    <scope line="487"/>
                </scope>
                <scope line="491"/>
            </method>
            <javadoc line="496">
                Clean out state because of a failed authentication attempt                
            </javadoc>
            <method name="cleanState" type="void" line="499">
                <scope line="501"/>
                <scope line="506"/>
            </method>
        </class>
    </source>