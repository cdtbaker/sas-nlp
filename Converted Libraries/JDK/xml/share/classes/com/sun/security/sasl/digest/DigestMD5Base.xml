<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.sasl.digest">
        <import package="java.util.Map"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.logging.Logger"/>
        <import package="java.util.logging.Level"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util.Random"/>
        <import package="java.security.Provider"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.io.IOException"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.spec.KeySpec"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.Mac"/>
        <import package="javax.crypto.SecretKeyFactory"/>
        <import package="javax.crypto.BadPaddingException"/>
        <import package="javax.crypto.NoSuchPaddingException"/>
        <import package="javax.crypto.IllegalBlockSizeException"/>
        <import package="javax.crypto.spec.IvParameterSpec"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="javax.crypto.spec.DESKeySpec"/>
        <import package="javax.crypto.spec.DESedeKeySpec"/>
        <import package="javax.security.sasl"/>
        <import package="com.sun.security.sasl.util.AbstractSaslImpl"/>
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <class name="DigestMD5Base" line="69">
            <extends class="AbstractSaslImpl"/>
            <comment line="81">
                                
            </comment>
            <comment line="83">
                Used for logging                
            </comment>
            <comment line="87">
                                
            </comment>
            <comment line="92">
                                
            </comment>
            <comment line="109">
                If QOP is set to &apos;auth-conf&apos;, a DIGEST-MD5 mechanism must have
                 support for the DES and Triple DES cipher algorithms (optionally,
                 support for RC4 [1285640 bit keys] ciphers) to provide for
                 confidentiality. See RFC 2831 for details. This implementation
                 provides support for DES, Triple DES and RC4 ciphers.
                
                 The value of strength effects the strength of cipher used. The mappings
                 of &apos;high&apos;, &apos;medium&apos;, and &apos;low&apos; give the following behaviour.
                
                  HIGH_STRENGTH   - Triple DES
                                  - RC4 (128bit)
                  MEDIUM_STRENGTH - DES
                                  - RC4 (56bit)
                  LOW_SRENGTH     - RC4 (40bit)                
            </comment>
            <comment line="142">
                                
            </comment>
            <comment line="144">
                                
            </comment>
            <comment line="147">
                                
            </comment>
            <comment line="148">
                                
            </comment>
            <comment line="152">
                component of response-value                
            </comment>
            <comment line="154">
                server generated nonce                
            </comment>
            <comment line="156">
                                
            </comment>
            <comment line="162">
                default unless server specifies utf-8                
            </comment>
            <comment line="165">
                authzid or canonicalized authzid                
            </comment>
            <comment line="268">
                                
            </comment>
            <comment line="269">
                Generate random-string used for digest-response.
                 This method uses Random to get random bytes and then
                 base64 encodes the bytes. Could also use binaryToHex() but this
                 is slightly faster and a more compact representation of the same info.
                 @return A non-null byte array containing the nonce value for the
                 digest challenge or response.
                 Could use SecureRandom to be more secure but it is very slow.                
            </comment>
            <comment line="292">
                Make sure that this is a multiple of 3                
            </comment>
            <comment line="295">
                Base 64 encoding turns each 3 bytes into 4                
            </comment>
            <comment line="345">
                See Section 7.2 of RFC 2831; double-quote character is not allowed
                 unless escaped; also escape the escape character and CTL chars except LWS                
            </comment>
            <comment line="357">
                Determines whether a character needs to be escaped in a quoted string                
            </comment>
            <comment line="746">
                Is character a linear white space?
                 LWS            = [CRLF] 1*( SP | HT )
                 %%% Note that we&apos;re checking individual bytes instead of CRLF                
            </comment>
            <comment line="760">
                Skip all linear white spaces                
            </comment>
            <comment line="1518">
                ---------------- DES and 3 DES key manipulation routines                
            </comment>
            <javadoc line="69">
                Utility class for DIGEST-MD5 mechanism. Provides utility methods
                  and contains two inner classes which implement the SecurityCtx
                  interface. The inner classes provide the funtionality to allow
                  for quality-of-protection (QOP) with integrity checking and
                  privacy.                
                <author>
                    Jonathan Bruce                    
                </author>
                <author>
                    Rosanna Lee                    
                </author>
            </javadoc>
            <declaration name="DI_CLASS_NAME" type="String" line="83"/>
            <declaration name="DP_CLASS_NAME" type="String" line="84"/>
            <declaration name="MAX_CHALLENGE_LENGTH" type="int" line="87"/>
            <declaration name="MAX_RESPONSE_LENGTH" type="int" line="88"/>
            <declaration name="DEFAULT_MAXBUF" type="int" line="89"/>
            <declaration name="DES3" type="int" line="92"/>
            <declaration name="RC4" type="int" line="93"/>
            <declaration name="DES" type="int" line="94"/>
            <declaration name="RC4_56" type="int" line="95"/>
            <declaration name="RC4_40" type="int" line="96"/>
            <declaration name="CIPHER_TOKENS" type="String[]" line="97"/>
            <declaration name="JCE_CIPHER_NAME" type="String[]" line="102"/>
            <declaration name="DES_3_STRENGTH" type="byte" line="124"/>
            <declaration name="RC4_STRENGTH" type="byte" line="125"/>
            <declaration name="DES_STRENGTH" type="byte" line="126"/>
            <declaration name="RC4_56_STRENGTH" type="byte" line="127"/>
            <declaration name="RC4_40_STRENGTH" type="byte" line="128"/>
            <declaration name="UNSET" type="byte" line="129"/>
            <declaration name="CIPHER_MASKS" type="byte[]" line="130"/>
            <declaration name="SECURITY_LAYER_MARKER" type="String" line="136"/>
            <declaration name="EMPTY_BYTE_ARRAY" type="byte[]" line="139"/>
            <declaration name="step" type="int" line="144"/>
            <declaration name="cbh" type="CallbackHandler" line="148"/>
            <declaration name="secCtx" type="SecurityCtx" line="150"/>
            <declaration name="H_A1" type="byte[]" line="151"/>
            <declaration name="nonce" type="byte[]" line="153"/>
            <declaration name="negotiatedStrength" type="String" line="156"/>
            <declaration name="negotiatedCipher" type="String" line="157"/>
            <declaration name="negotiatedQop" type="String" line="158"/>
            <declaration name="negotiatedRealm" type="String" line="159"/>
            <declaration name="useUTF8" type="boolean" line="160"/>
            <declaration name="encoding" type="String" line="161"/>
            <declaration name="digestUri" type="String" line="163"/>
            <declaration name="authzid" type="String" line="164"/>
            <javadoc line="166">
                Constucts an instance of DigestMD5Base. Calls super constructor
                  to parse properties for mechanism.                
                <param>
                    props A map of property/value pairs                    
                </param>
                <param>
                    className name of class to use for logging                    
                </param>
                <param>
                    firstStep number of first step in authentication state machine                    
                </param>
                <param>
                    digestUri digestUri used in authentication                    
                </param>
                <param>
                    cbh callback handler used to get info required for auth                    
                </param>
                <throws>
                    SaslException If invalid value found in props.                    
                </throws>
            </javadoc>
            <method name="DigestMD5Base" type="constructor" line="179">
                <params>
                    <param name="props" type="Map"/>
                    <param name="className" type="String"/>
                    <param name="firstStep" type="int"/>
                    <param name="digestUri" type="String"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <comment line="181">
                    sets QOP, STENGTH and BUFFER_SIZE                    
                </comment>
            </method>
            <javadoc line="187">
                Retrieves the SASL mechanism IANA name.                
                <return>
                    The String "DIGEST-MD5"                    
                </return>
            </javadoc>
            <method name="getMechanismName" type="String" line="192"/>
            <javadoc line="196">
                Unwrap the incoming message using the wrap method of the secCtx object
                  instance.                
                <param>
                    incoming The byte array containing the incoming bytes.                    
                </param>
                <param>
                    start The offset from which to read the byte array.                    
                </param>
                <param>
                    len The number of bytes to read from the offset.                    
                </param>
                <return>
                    The unwrapped message according to either the integrity or
                      privacy quality-of-protection specifications.                    
                </return>
                <throws>
                    SaslException if an error occurs when unwrapping the incoming
                      message                    
                </throws>
            </javadoc>
            <method name="unwrap" type="byte[]" line="208">
                <params>
                    <param name="incoming" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="209"/>
                <scope line="214"/>
            </method>
            <javadoc line="222">
                Wrap outgoing bytes using the wrap method of the secCtx object
                  instance.                
                <param>
                    outgoing The byte array containing the outgoing bytes.                    
                </param>
                <param>
                    start The offset from which to read the byte array.                    
                </param>
                <param>
                    len The number of bytes to read from the offset.                    
                </param>
                <return>
                    The wrapped message according to either the integrity or
                      privacy quality-of-protection specifications.                    
                </return>
                <throws>
                    SaslException if an error occurs when wrapping the outgoing
                      message                    
                </throws>
            </javadoc>
            <method name="wrap" type="byte[]" line="234">
                <params>
                    <param name="outgoing" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="235"/>
                <scope line="240"/>
            </method>
            <method name="dispose" type="void" line="248">
                <scope line="249"/>
            </method>
            <method name="getNegotiatedProperty" type="Object" line="254">
                <params>
                    <param name="propName" type="String"/>
                </params>
                <scope line="255">
                    <scope line="256"/>
                    <scope line="258"/>
                </scope>
                <scope line="261"/>
            </method>
            <declaration name="pem_array" type="char" line="278"/>
            <javadoc line="278">
                This array maps the characters to their 6 bit values                
            </javadoc>
            <declaration name="RAW_NONCE_SIZE" type="int" line="292"/>
            <declaration name="ENCODED_NONCE_SIZE" type="int" line="295"/>
            <method name="generateNonce" type="byte[]" line="297">
                <comment line="300">
                    SecureRandom random = new SecureRandom();                    
                </comment>
                <comment line="307">
                    Base64-encode bytes                    
                </comment>
                <comment line="322">
                    %%% For testing using RFC 2831 example, uncomment the following 2 lines
                     System.out.println(&quot;!!!Using RFC 2831&apos;s cnonce for testing!!!&quot;);
                     return &quot;OA6MHXh6VqTrRk&quot;.getBytes();                    
                </comment>
                <declaration name="random" type="Random" line="300"/>
                <declaration name="randomData" type="byte[]" line="301"/>
                <declaration name="nonce" type="byte[]" line="304"/>
                <declaration name="a" type="byte" line="307"/>
                <declaration name="j" type="int" line="308"/>
                <scope line="309"/>
            </method>
            <javadoc line="326">
                Checks if a byte[] contains characters that must be quoted
                  and write the resulting, possibly escaped, characters to out.                
            </javadoc>
            <method name="writeQuotedStringValue" type="void" line="331">
                <params>
                    <param name="out" type="ByteArrayOutputStream"/>
                    <param name="buf" type="byte[]"/>
                </params>
                <declaration name="len" type="int" line="333"/>
                <declaration name="ch" type="byte" line="334"/>
                <scope line="335">
                    <scope line="337"/>
                </scope>
            </method>
            <method name="needEscape" type="boolean" line="346">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="len" type="int" line="347"/>
                <scope line="348">
                    <scope line="349"/>
                </scope>
            </method>
            <method name="needEscape" type="boolean" line="357">
                <params>
                    <param name="ch" type="char"/>
                </params>
                <comment line="359">
                    escape char                    
                </comment>
                <comment line="360">
                    quote                    
                </comment>
                <comment line="361">
                    DEL                    
                </comment>
                <comment line="363">
                    0 &lt;= ch &lt;= 31 except CR, HT and LF                    
                </comment>
            </method>
            <method name="quotedStringValue" type="String" line="366">
                <params>
                    <param name="str" type="String"/>
                </params>
                <scope line="367">
                    <declaration name="len" type="int" line="368"/>
                    <declaration name="buf" type="char[]" line="369"/>
                    <declaration name="j" type="int" line="370"/>
                    <declaration name="ch" type="char" line="371"/>
                    <scope line="372">
                        <scope line="374"/>
                    </scope>
                </scope>
                <scope line="380"/>
            </method>
            <javadoc line="385">
                Convert a byte array to hexadecimal string.                
                <param>
                    a non-null byte array                    
                </param>
                <return>
                    a non-null String contain the HEX value                    
                </return>
            </javadoc>
            <method name="binaryToHex" type="byte[]" line="392">
                <params>
                    <param name="digest" type="byte[]"/>
                </params>
                <declaration name="digestString" type="StringBuffer" line="394"/>
                <scope line="396">
                    <scope line="397"/>
                    <scope line="400"/>
                </scope>
            </method>
            <javadoc line="408">
                Used to convert username-value, passwd or realm to 8859_1 encoding
                  if all chars in string are within the 8859_1 (Latin 1) encoding range.                
                <param>
                    a non-null String                    
                </param>
                <return>
                    a non-nuill byte array containing the correct character encoding
                      for username, paswd or realm.                    
                </return>
            </javadoc>
            <method name="stringToByte_8859_1" type="byte[]" line="416">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="buffer" type="char[]" line="418"/>
                <scope line="420">
                    <scope line="421">
                        <scope line="422">
                            <scope line="423"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="429"/>
            </method>
            <method name="getPlatformCiphers" type="byte[]" line="435">
                <comment line="441">
                    Checking whether the transformation is available from the
                     current installed providers.                    
                </comment>
                <comment line="448">
                    no implementation found for requested algorithm.                    
                </comment>
                <comment line="450">
                    no implementation found for requested algorithm.                    
                </comment>
                <declaration name="ciphers" type="byte[]" line="436"/>
                <scope line="438">
                    <scope line="439"/>
                    <scope line="446"/>
                    <scope line="448"/>
                </scope>
                <scope line="453"/>
            </method>
            <javadoc line="461">
                Assembles response-value for digest-response.                
                <param>
                    authMethod "AUTHENTICATE" for client-generated response;
                      "" for server-generated response                    
                </param>
                <return>
                    A non-null byte array containing the repsonse-value.                    
                </return>
                <throws>
                    NoSuchAlgorithmException if the platform does not have MD5
                      digest support.                    
                </throws>
                <throws>
                    UnsupportedEncodingException if a an error occurs
                      encoding a string into either Latin-1 or UTF-8.                    
                </throws>
                <throws>
                    IOException if an error occurs writing to the output
                      byte array buffer.                    
                </throws>
            </javadoc>
            <method name="generateResponseValue" type="byte[]" line="487">
                <params>
                    <param name="authMethod" type="String"/>
                    <param name="digestUriValue" type="String"/>
                    <param name="qopValue" type="String"/>
                    <param name="usernameValue" type="String"/>
                    <param name="realmValue" type="String"/>
                    <param name="passwdValue" type="char[]"/>
                    <param name="nonceValue" type="byte[]"/>
                    <param name="cNonceValue" type="byte[]"/>
                    <param name="nonceCount" type="int"/>
                    <param name="authzidValue" type="byte[]"/>
                </params>
                <comment line="494">
                    A2
                     --
                     A2 = { &quot;AUTHENTICATE:&quot;, digest-uri-value,
                     [:00000000000000000000000000000000] }   if auth-int or auth-conf                    
                </comment>
                <comment line="521">
                    A1
                     --
                     H(user-name : realm-value : passwd)                    
                </comment>
                <comment line="528">
                    if no realm, realm will be an empty string                    
                </comment>
                <comment line="541">
                    A1
                     --
                     A1 = { H ( {user-name : realm-value : passwd } ),
                     : nonce-value, : cnonce-value : authzid-value                    
                </comment>
                <comment line="559">
                    Record H(A1). Use for integrity &amp; privacy.                    
                </comment>
                <comment line="566">
                    H(k, : , s);                    
                </comment>
                <declaration name="md5" type="MessageDigest" line="489"/>
                <declaration name="hexA1" type="byte[]" line="490"/>
                <declaration name="A2" type="ByteArrayOutputStream" line="491"/>
                <scope line="501"/>
                <scope line="508"/>
                <declaration name="digest" type="byte[]" line="513"/>
                <scope line="516"/>
                <scope line="535"/>
                <scope line="552"/>
                <scope line="561"/>
                <scope line="581"/>
                <declaration name="answer" type="byte[]" line="588"/>
                <scope line="590"/>
            </method>
            <javadoc line="597">
                Takes &apos;nonceCount&apos; value and returns HEX value of the value.                
                <return>
                    A non-null String representing the current NONCE-COUNT                    
                </return>
            </javadoc>
            <method name="nonceCountToHex" type="String" line="602">
                <params>
                    <param name="count" type="int"/>
                </params>
                <declaration name="str" type="String" line="604"/>
                <declaration name="pad" type="StringBuffer" line="605"/>
                <scope line="607">
                    <scope line="608"/>
                </scope>
            </method>
            <javadoc line="616">
                Parses digest-challenge string, extracting each token
                  and value(s)                
                <param>
                    buf A non-null digest-challenge string.                    
                </param>
                <param>
                    multipleAllowed true if multiple qop or realm or QOP directives
                      are allowed.                    
                </param>
                <throws>
                    SaslException if the buf cannot be parsed according to RFC 2831                    
                </throws>
            </javadoc>
            <method name="parseDirectives" type="byte[][]" line="626">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="keyTable" type="String[]"/>
                    <param name="realmChoices" type="List<byte[]>"/>
                    <param name="realmIndex" type="int"/>
                </params>
                <comment line="648">
                    Empty element, skip separator and lws                    
                </comment>
                <comment line="655">
                    Termination of key                    
                </comment>
                <comment line="656">
                    Skip to next nonwhitespace                    
                </comment>
                <comment line="658">
                    Check whether value is quoted                    
                </comment>
                <comment line="662">
                    Skip quote                    
                </comment>
                <comment line="669">
                    LWS that occurs after key                    
                </comment>
                <comment line="672">
                    Expecting &apos;=&apos;                    
                </comment>
                <comment line="683">
                    Append to key                    
                </comment>
                <comment line="684">
                    Advance                    
                </comment>
                <comment line="687">
                    Getting a quoted value                    
                </comment>
                <comment line="689">
                    quoted-pair = &quot;\&quot; CHAR  ==&gt; CHAR                    
                </comment>
                <comment line="690">
                    Skip escape                    
                </comment>
                <comment line="693">
                    Advance                    
                </comment>
                <comment line="695">
                    Trailing escape in a quoted value                    
                </comment>
                <comment line="701">
                    closing quote                    
                </comment>
                <comment line="702">
                    Skip closing quote                    
                </comment>
                <comment line="707">
                    Advance                    
                </comment>
                <comment line="711">
                    Value terminated                    
                </comment>
                <comment line="719">
                    Skip separator and LWS                    
                </comment>
                <comment line="726">
                    Unquoted value                    
                </comment>
                <comment line="727">
                    Advance                    
                </comment>
                <comment line="737">
                    Get last pair                    
                </comment>
                <declaration name="valueTable" type="byte[][]" line="628"/>
                <declaration name="key" type="ByteArrayOutputStream" line="630"/>
                <declaration name="value" type="ByteArrayOutputStream" line="631"/>
                <declaration name="gettingKey" type="boolean" line="632"/>
                <declaration name="gettingQuotedValue" type="boolean" line="633"/>
                <declaration name="expectSeparator" type="boolean" line="634"/>
                <declaration name="bch" type="byte" line="635"/>
                <declaration name="i" type="int" line="637"/>
                <scope line="638">
                    <scope line="641">
                        <scope line="642">
                            <scope line="643"/>
                        </scope>
                        <scope line="650">
                            <scope line="651"/>
                            <scope line="658">
                                <scope line="659"/>
                            </scope>
                            <scope line="663"/>
                        </scope>
                        <scope line="667">
                            <scope line="672">
                                <scope line="673"/>
                            </scope>
                            <scope line="677"/>
                        </scope>
                        <scope line="681"/>
                    </scope>
                    <scope line="685">
                        <scope line="687">
                            <scope line="690"/>
                            <scope line="693"/>
                        </scope>
                        <scope line="699"/>
                        <scope line="704"/>
                    </scope>
                    <scope line="709"/>
                    <scope line="720"/>
                    <scope line="724"/>
                </scope>
                <scope line="730"/>
                <scope line="737"/>
            </method>
            <method name="isLws" type="boolean" line="748">
                <params>
                    <param name="b" type="byte"/>
                </params>
                <comment line="751">
                    US-ASCII CR, carriage return                    
                </comment>
                <comment line="752">
                    US-ASCII LF, linefeed                    
                </comment>
                <comment line="753">
                    US-ASCII SP, space                    
                </comment>
                <comment line="754">
                    US-ASCII HT, horizontal-tab                    
                </comment>
            </method>
            <method name="skipLws" type="int" line="760">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="start" type="int"/>
                </params>
                <declaration name="i" type="int" line="761"/>
                <scope line="762">
                    <scope line="763"/>
                </scope>
            </method>
            <javadoc line="770">
                Processes directive/value pairs from the digest-challenge and
                  fill out the challengeVal array.                
                <param>
                    key A non-null String challenge token name.                    
                </param>
                <param>
                    value A non-null String token value.                    
                </param>
                <throws>
                    SaslException if a either the key or the value is null                    
                </throws>
            </javadoc>
            <method name="extractDirective" type="void" line="780">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="byte[]"/>
                    <param name="keyTable" type="String[]"/>
                    <param name="valueTable" type="byte[][]"/>
                    <param name="realmChoices" type="List<byte[]>"/>
                    <param name="realmIndex" type="int"/>
                </params>
                <comment line="794">
                    &gt; 1 realm specified                    
                </comment>
                <comment line="796">
                    add existing one                    
                </comment>
                <comment line="798">
                    add new one                    
                </comment>
                <comment line="805">
                    end search                    
                </comment>
                <scope line="782">
                    <scope line="783">
                        <scope line="784">
                            <scope line="786"/>
                        </scope>
                        <scope line="792">
                            <scope line="794"/>
                        </scope>
                        <scope line="798"/>
                    </scope>
                </scope>
            </method>
            <class name="DigestIntegrity" line="810">
                <comment line="824">
                                        
                </comment>
                <comment line="830">
                                        
                </comment>
                <comment line="831">
                    == Kic for client; == Kis for server                    
                </comment>
                <comment line="832">
                    == Kis for client; == Kic for server                    
                </comment>
                <comment line="837">
                    outgoing messageType and sequenceNum                    
                </comment>
                <comment line="1111">
                                        
                </comment>
                <comment line="1296">
                    -------------------------------------------------------------------                    
                </comment>
                <comment line="1382">
                    Decrypt incoming messages and verify their integrity.
                    
                     @param incoming A non-null byte array containing the incoming
                     encrypted message.
                     @param start The offset from which to read the byte array.
                     @param len The non-zero number of bytes to read from the offset
                     position.
                     @return The decrypted, verified message or null if integrity
                     checking
                     fails.
                     @throws SaslException if there are the SASL buffer is empty or if
                     if an error occurs reading the SASL buffer.                    
                </comment>
                <implements interface="SecurityCtx"/>
                <javadoc line="810">
                    Implementation of the SecurityCtx interface allowing for messages
                      between the client and server to be integrity checked. After a
                      successful DIGEST-MD5 authentication, integtrity checking is invoked
                      if the SASL QOP (quality-of-protection) is set to &apos;auth-int&apos;.
                      &lt;p&gt;
                      Further details on the integrity-protection mechanism can be found
                      at section 2.3 - Integrity protection in the
                      &lt;a href=&quot;http://www.ietf.org/rfc/rfc2831.txt&quot;&gt;RFC2831&lt;/a&gt; definition.                    
                    <author>
                        Jonathan Bruce                        
                    </author>
                </javadoc>
                <declaration name="CLIENT_INT_MAGIC" type="String" line="824"/>
                <declaration name="SVR_INT_MAGIC" type="String" line="826"/>
                <declaration name="myKi" type="byte[]" line="830"/>
                <declaration name="peerKi" type="byte[]" line="831"/>
                <declaration name="mySeqNum" type="int" line="833"/>
                <declaration name="peerSeqNum" type="int" line="834"/>
                <declaration name="messageType" type="byte[]" line="837"/>
                <declaration name="sequenceNum" type="byte[]" line="838"/>
                <javadoc line="840">
                    Initializes DigestIntegrity implementation of SecurityCtx to
                      enable DIGEST-MD5 integrity checking.                    
                    <throws>
                        SaslException if an error is encountered generating the
                          key-pairs for integrity checking.                        
                    </throws>
                </javadoc>
                <method name="DigestIntegrity" type="constructor" line="847">
                    <params>
                        <param name="clientMode" type="boolean"/>
                    </params>
                    <comment line="849">
                                                
                    </comment>
                    <comment line="867">
                                                
                    </comment>
                    <scope line="850"/>
                    <scope line="853"/>
                    <scope line="857"/>
                    <scope line="861"/>
                </method>
                <javadoc line="870">
                    Generate client-server, server-client key pairs for DIGEST-MD5
                      integrity checking.                    
                    <throws>
                        UnsupportedEncodingException if the UTF-8 encoding is not
                          supported on the platform.                        
                    </throws>
                    <throws>
                        IOException if an error occurs when writing to or from the
                          byte array output buffers.                        
                    </throws>
                    <throws>
                        NoSuchAlgorithmException if the MD5 message digest algorithm
                          cannot loaded.                        
                    </throws>
                </javadoc>
                <method name="generateIntegrityKeyPair" type="void" line="883">
                    <params>
                        <param name="clientMode" type="boolean"/>
                    </params>
                    <comment line="891">
                        Both client-magic-keys and server-magic-keys are the same length                        
                    </comment>
                    <comment line="894">
                        Kic: Key for protecting msgs from client to server.                        
                    </comment>
                    <comment line="900">
                        Kis: Key for protecting msgs from server to client
                         No need to recopy H_A1                        
                    </comment>
                    <declaration name="cimagic" type="byte[]" line="885"/>
                    <declaration name="simagic" type="byte[]" line="886"/>
                    <declaration name="md5" type="MessageDigest" line="888"/>
                    <declaration name="keyBuffer" type="byte[]" line="891"/>
                    <declaration name="Kic" type="byte[]" line="897"/>
                    <declaration name="Kis" type="byte[]" line="904"/>
                    <scope line="906"/>
                    <scope line="913"/>
                    <scope line="916"/>
                </method>
                <javadoc line="922">
                    Append MAC onto outgoing message.                    
                    <param>
                        outgoing A non-null byte array containing the outgoing message.                        
                    </param>
                    <param>
                        start The offset from which to read the byte array.                        
                    </param>
                    <param>
                        len The non-zero number of bytes for be read from the offset.                        
                    </param>
                    <return>
                        The message including the integrity MAC                        
                    </return>
                    <throws>
                        SaslException if an error is encountered converting a string
                          into a UTF-8 byte encoding, or if the MD5 message digest algorithm
                          cannot be found or if there is an error writing to the byte array
                          output buffers.                        
                    </throws>
                </javadoc>
                <method name="wrap" type="byte[]" line="935">
                    <params>
                        <param name="outgoing" type="byte[]"/>
                        <param name="start" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <comment line="942">
                                                
                    </comment>
                    <comment line="945">
                                                
                    </comment>
                    <comment line="950">
                                                
                    </comment>
                    <comment line="961">
                                                
                    </comment>
                    <comment line="964">
                                                
                    </comment>
                    <comment line="967">
                                                
                    </comment>
                    <scope line="937"/>
                    <declaration name="wrapped" type="byte[]" line="942"/>
                    <declaration name="mac" type="byte[]" line="950"/>
                    <scope line="952"/>
                    <scope line="968"/>
                </method>
                <javadoc line="974">
                    Return verified message without MAC - only if the received MAC
                      and re-generated MAC are the same.                    
                    <param>
                        incoming A non-null byte array containing the incoming
                          message.                        
                    </param>
                    <param>
                        start The offset from which to read the byte array.                        
                    </param>
                    <param>
                        len The non-zero number of bytes to read from the offset
                          position.                        
                    </param>
                    <return>
                        The verified message or null if integrity checking fails.                        
                    </return>
                    <throws>
                        SaslException if an error is encountered converting a string
                          into a UTF-8 byte encoding, or if the MD5 message digest algorithm
                          cannot be found or if there is an error writing to the byte array
                          output buffers                        
                    </throws>
                </javadoc>
                <method name="unwrap" type="byte[]" line="990">
                    <params>
                        <param name="incoming" type="byte[]"/>
                        <param name="start" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <comment line="997">
                        shave off last 16 bytes of message                        
                    </comment>
                    <comment line="1003">
                                                
                    </comment>
                    <comment line="1009">
                                                
                    </comment>
                    <comment line="1025">
                                                
                    </comment>
                    <comment line="1027">
                        Discard message and do not increment sequence number                        
                    </comment>
                    <comment line="1032">
                                                
                    </comment>
                    <comment line="1045">
                        Increment sequence number and return message                        
                    </comment>
                    <scope line="992"/>
                    <declaration name="mac" type="byte[]" line="997"/>
                    <declaration name="msg" type="byte[]" line="998"/>
                    <declaration name="msgType" type="byte[]" line="999"/>
                    <declaration name="seqNum" type="byte[]" line="1000"/>
                    <declaration name="expectedMac" type="byte[]" line="1009"/>
                    <scope line="1011"/>
                    <scope line="1025"/>
                    <scope line="1032"/>
                    <scope line="1039"/>
                </method>
                <javadoc line="1049">
                    Generates MAC to be appended onto out-going messages.                    
                    <param>
                        Ki A non-null byte array containing the key for the digest                        
                    </param>
                    <param>
                        SeqNum A non-null byte array contain the sequence number                        
                    </param>
                    <param>
                        msg  The message to be digested                        
                    </param>
                    <param>
                        start The offset from which to read the msg byte array                        
                    </param>
                    <param>
                        len The non-zero number of bytes to be read from the offset                        
                    </param>
                    <return>
                        The MAC of a message.                        
                    </return>
                    <throws>
                        SaslException if an error occurs when generating MAC.                        
                    </throws>
                </javadoc>
                <method name="getHMAC" type="byte[]" line="1062">
                    <params>
                        <param name="Ki" type="byte[]"/>
                        <param name="seqnum" type="byte[]"/>
                        <param name="msg" type="byte[]"/>
                        <param name="start" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <comment line="1076">
                                                
                    </comment>
                    <declaration name="seqAndMsg" type="byte[]" line="1064"/>
                    <scope line="1068">
                        <declaration name="keyKi" type="SecretKey" line="1069"/>
                        <declaration name="m" type="Mac" line="1070"/>
                        <declaration name="hMAC_MD5" type="byte[]" line="1073"/>
                        <declaration name="macBuffer" type="byte" line="1076"/>
                    </scope>
                    <scope line="1080"/>
                    <scope line="1083"/>
                </method>
                <javadoc line="1089">
                    Increment own sequence number and set answer in NBO sequenceNum field.                    
                </javadoc>
                <method name="incrementSeqNum" type="void" line="1092"/>
            </class>
            <class name="DigestPrivacy" line="1097">
                <extends class="DigestIntegrity"/>
                <comment line="824">
                                        
                </comment>
                <comment line="830">
                                        
                </comment>
                <comment line="831">
                    == Kic for client; == Kis for server                    
                </comment>
                <comment line="832">
                    == Kis for client; == Kic for server                    
                </comment>
                <comment line="837">
                    outgoing messageType and sequenceNum                    
                </comment>
                <comment line="1111">
                                        
                </comment>
                <comment line="1296">
                    -------------------------------------------------------------------                    
                </comment>
                <comment line="1382">
                    Decrypt incoming messages and verify their integrity.
                    
                     @param incoming A non-null byte array containing the incoming
                     encrypted message.
                     @param start The offset from which to read the byte array.
                     @param len The non-zero number of bytes to read from the offset
                     position.
                     @return The decrypted, verified message or null if integrity
                     checking
                     fails.
                     @throws SaslException if there are the SASL buffer is empty or if
                     if an error occurs reading the SASL buffer.                    
                </comment>
                <implements interface="SecurityCtx"/>
                <javadoc line="1097">
                    Implementation of the SecurityCtx interface allowing for messages
                      between the client and server to be integrity checked and encrypted.
                      After a successful DIGEST-MD5 authentication, privacy is invoked if the
                      SASL QOP (quality-of-protection) is set to &apos;auth-conf&apos;.
                      &lt;p&gt;
                      Further details on the integrity-protection mechanism can be found
                      at section 2.4 - Confidentiality protection in
                      &lt;a href=&quot;http://www.ietf.org/rfc/rfc2831.txt&quot;&gt;RFC2831&lt;/a&gt; definition.                    
                    <author>
                        Jonathan Bruce                        
                    </author>
                </javadoc>
                <declaration name="CLIENT_CONF_MAGIC" type="String" line="1111"/>
                <declaration name="SVR_CONF_MAGIC" type="String" line="1113"/>
                <declaration name="encCipher" type="Cipher" line="1116"/>
                <declaration name="decCipher" type="Cipher" line="1117"/>
                <javadoc line="1119">
                    Initializes the cipher object instances for encryption and decryption.                    
                    <throws>
                        SaslException if an error occurs with the Key
                          initialization, or a string cannot be encoded into a byte array
                          using the UTF-8 encoding, or an error occurs when writing to a
                          byte array output buffers or the mechanism cannot load the MD5
                          message digest algorithm or invalid initialization parameters are
                          passed to the cipher object instances.                        
                    </throws>
                </javadoc>
                <method name="DigestPrivacy" type="constructor" line="1129">
                    <params>
                        <param name="clientMode" type="boolean"/>
                    </params>
                    <comment line="1132">
                        generate Kic, Kis keys for integrity-checking.                        
                    </comment>
                    <scope line="1133"/>
                    <scope line="1136"/>
                    <scope line="1139"/>
                    <scope line="1143"/>
                    <scope line="1146"/>
                </method>
                <javadoc line="1152">
                    Generates client-server and server-client keys to encrypt and
                      decrypt messages. Also generates IVs for DES ciphers.                    
                    <throws>
                        IOException if an error occurs when writing to or from the
                          byte array output buffers.                        
                    </throws>
                    <throws>
                        NoSuchAlgorithmException if the MD5 message digest algorithm
                          cannot loaded.                        
                    </throws>
                    <throws>
                        UnsupportedEncodingException if an UTF-8 encoding is not
                          supported on the platform.                        
                    </throws>
                    <throw>
                        SaslException if an error occurs initializing the keys and
                          IVs for the chosen cipher.                        
                    </throw>
                </javadoc>
                <method name="generatePrivacyKeyPair" type="void" line="1167">
                    <params>
                        <param name="clientMode" type="boolean"/>
                    </params>
                    <comment line="1173">
                                                
                    </comment>
                    <comment line="1178">
                                                
                    </comment>
                    <comment line="1180">
                                                
                    </comment>
                    <comment line="1181">
                        des and 3des and rc4                        
                    </comment>
                    <comment line="1182">
                                                
                    </comment>
                    <comment line="1185">
                                                
                    </comment>
                    <comment line="1186">
                        Both client-magic-keys and server-magic-keys are the same length                        
                    </comment>
                    <comment line="1188">
                        H(A1)[0..n]                        
                    </comment>
                    <comment line="1190">
                                                
                    </comment>
                    <comment line="1195">
                                                
                    </comment>
                    <comment line="1196">
                        No need to copy H_A1 again since it hasn&apos;t changed                        
                    </comment>
                    <comment line="1223">
                                                
                    </comment>
                    <comment line="1237">
                        DES or 3DES                        
                    </comment>
                    <comment line="1240">
                        Use &quot;NoPadding&quot; when specifying cipher names
                         RFC 2831 already defines padding rules for producing
                         8-byte aligned blocks                        
                    </comment>
                    <comment line="1247">
                                                
                    </comment>
                    <comment line="1258">
                        Set up the DES IV, which is the last 8 bytes of Kcc/Kcs                        
                    </comment>
                    <comment line="1262">
                        Initialize cipher objects                        
                    </comment>
                    <declaration name="ccmagic" type="byte[]" line="1169"/>
                    <declaration name="scmagic" type="byte[]" line="1170"/>
                    <declaration name="md5" type="MessageDigest" line="1173"/>
                    <declaration name="n" type="int" line="1175"/>
                    <scope line="1176"/>
                    <scope line="1178"/>
                    <scope line="1180"/>
                    <declaration name="keyBuffer" type="byte[]" line="1186"/>
                    <declaration name="Kcc" type="byte[]" line="1192"/>
                    <declaration name="Kcs" type="byte[]" line="1198"/>
                    <scope line="1200"/>
                    <declaration name="myKc" type="byte[]" line="1207"/>
                    <declaration name="peerKc" type="byte[]" line="1208"/>
                    <scope line="1210"/>
                    <scope line="1213"/>
                    <scope line="1218">
                        <declaration name="encKey" type="SecretKey" line="1219"/>
                        <declaration name="decKey" type="SecretKey" line="1220"/>
                        <scope line="1223"/>
                        <scope line="1234">
                            <declaration name="cipherFullname" type="String" line="1237"/>
                            <scope line="1242"/>
                            <scope line="1245"/>
                            <declaration name="encIv" type="IvParameterSpec" line="1258"/>
                            <declaration name="decIv" type="IvParameterSpec" line="1259"/>
                            <scope line="1265"/>
                        </scope>
                    </scope>
                    <scope line="1280"/>
                    <scope line="1283"/>
                    <scope line="1286"/>
                    <scope line="1289"/>
                </method>
                <javadoc line="1297">
                    Encrypt out-going message.                    
                    <param>
                        outgoing A non-null byte array containing the outgoing message.                        
                    </param>
                    <param>
                        start The offset from which to read the byte array.                        
                    </param>
                    <param>
                        len The non-zero number of bytes to be read from the offset.                        
                    </param>
                    <return>
                        The encrypted message.                        
                    </return>
                    <throws>
                        SaslException if an error occurs when writing to or from the
                          byte array output buffers or if the MD5 message digest algorithm
                          cannot loaded or if an UTF-8 encoding is not supported on the
                          platform.                        
                    </throws>
                </javadoc>
                <method name="wrap" type="byte[]" line="1311">
                    <params>
                        <param name="outgoing" type="byte[]"/>
                        <param name="start" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <comment line="1318">
                                                
                    </comment>
                    <comment line="1330">
                        Calculate padding                        
                    </comment>
                    <comment line="1334">
                        add 10 for HMAC[0..9]                        
                    </comment>
                    <comment line="1345">
                                                
                    </comment>
                    <comment line="1355">
                                                
                    </comment>
                    <comment line="1358">
                        Do CBC (chaining) across packets                        
                    </comment>
                    <comment line="1362">
                        update() can return null                        
                    </comment>
                    <scope line="1313"/>
                    <declaration name="mac" type="byte[]" line="1319"/>
                    <scope line="1321"/>
                    <declaration name="bs" type="int" line="1330"/>
                    <declaration name="padding" type="byte[]" line="1331"/>
                    <scope line="1332">
                        <declaration name="pad" type="int" line="1333"/>
                        <scope line="1335"/>
                    </scope>
                    <scope line="1338"/>
                    <declaration name="toBeEncrypted" type="byte[]" line="1342"/>
                    <scope line="1349"/>
                    <declaration name="cipherBlock" type="byte[]" line="1355"/>
                    <scope line="1356">
                        <scope line="1360"/>
                    </scope>
                    <scope line="1364"/>
                    <declaration name="wrapped" type="byte[]" line="1369"/>
                    <scope line="1374"/>
                </method>
                <method name="unwrap" type="byte[]" line="1396">
                    <params>
                        <param name="incoming" type="byte[]"/>
                        <param name="start" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <comment line="1407">
                                                
                    </comment>
                    <comment line="1423">
                        Decrypt message                        
                    </comment>
                    <comment line="1424">
                                                
                    </comment>
                    <comment line="1428">
                        Do CBC (chaining) across packets                        
                    </comment>
                    <comment line="1432">
                        update() can return null                        
                    </comment>
                    <comment line="1461">
                        get value of last octet of the byte array                        
                    </comment>
                    <comment line="1464">
                        Discard message and do not increment sequence number                        
                    </comment>
                    <comment line="1474">
                                                
                    </comment>
                    <comment line="1483">
                        First, compare MACs before updating state                        
                    </comment>
                    <comment line="1485">
                        Discard message and do not increment sequence number                        
                    </comment>
                    <comment line="1490">
                                                
                    </comment>
                    <comment line="1498">
                                                
                    </comment>
                    <comment line="1504">
                        Increment sequence number and return message                        
                    </comment>
                    <comment line="1508">
                        no padding                        
                    </comment>
                    <comment line="1510">
                        Get a copy of the message without padding                        
                    </comment>
                    <scope line="1398"/>
                    <declaration name="encryptedMsg" type="byte[]" line="1402"/>
                    <declaration name="msgType" type="byte[]" line="1403"/>
                    <declaration name="seqNum" type="byte[]" line="1404"/>
                    <scope line="1414"/>
                    <declaration name="decryptedMsg" type="byte[]" line="1424"/>
                    <scope line="1426">
                        <scope line="1430"/>
                    </scope>
                    <scope line="1434"/>
                    <declaration name="msgWithPadding" type="byte[]" line="1439"/>
                    <declaration name="mac" type="byte[]" line="1440"/>
                    <scope line="1447"/>
                    <declaration name="msgLength" type="int" line="1457"/>
                    <declaration name="blockSize" type="int" line="1458"/>
                    <scope line="1459">
                        <scope line="1462">
                            <scope line="1464"/>
                        </scope>
                    </scope>
                    <declaration name="expectedMac" type="byte[]" line="1474"/>
                    <scope line="1477"/>
                    <scope line="1483"/>
                    <scope line="1490"/>
                    <scope line="1498"/>
                    <scope line="1506"/>
                    <scope line="1508">
                        <declaration name="clearMsg" type="byte[]" line="1510"/>
                    </scope>
                </method>
            </class>
            <declaration name="MASK" type="BigInteger" line="1519"/>
            <javadoc line="1521">
                Sets the parity bit (0th bit) in each byte so that each byte
                  contains an odd number of 1&apos;s.                
            </javadoc>
            <method name="setParityBit" type="void" line="1525">
                <params>
                    <param name="key" type="byte[]"/>
                </params>
                <scope line="1526">
                    <declaration name="b" type="int" line="1527"/>
                </scope>
            </method>
            <javadoc line="1533">
                Expands a 7-byte array into an 8-byte array that contains parity bits
                  The binary format of a cryptographic key is:
                  (B1,B2,...,B7,P1,B8,...B14,P2,B15,...,B49,P7,B50,...,B56,P8)
                  where (B1,B2,...,B56) are the independent bits of a DES key and
                  (PI,P2,...,P8) are reserved for parity bits computed on the preceding
                  seven independent bits and set so that the parity of the octet is odd,
                  i.e., there is an odd number of &quot;1&quot; bits in the octet.                
            </javadoc>
            <method name="addDesParity" type="byte[]" line="1542">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="1554">
                    Shift 7 bits each time into a byte                    
                </comment>
                <comment line="1557">
                    make room for parity bit                    
                </comment>
                <declaration name="raw" type="byte[]" line="1547"/>
                <declaration name="result" type="byte[]" line="1550"/>
                <declaration name="in" type="BigInteger" line="1551"/>
                <scope line="1554"/>
            </method>
            <javadoc line="1563">
                Create parity-adjusted keys suitable for DES / DESede encryption.                
                <param>
                    input A non-null byte array containing key material for
                      DES / DESede.                    
                </param>
                <param>
                    desStrength A string specifying eithe a DES or a DESede key.                    
                </param>
                <return>
                    SecretKey An instance of either DESKeySpec or DESedeKeySpec.                    
                </return>
                <throws>
                    NoSuchAlgorithmException if the either the DES or DESede
                      algorithms cannote be lodaed by JCE.                    
                </throws>
                <throws>
                    InvalidKeyException if an invalid array of bytes is used
                      as a key for DES or DESede.                    
                </throws>
                <throws>
                    InvalidKeySpecException in an invalid parameter is passed
                      to either te DESKeySpec of the DESedeKeySpec constructors.                    
                </throws>
            </javadoc>
            <method name="makeDesKeys" type="SecretKey" line="1580">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="desStrength" type="String"/>
                </params>
                <comment line="1583">
                    Generate first subkey using first 7 bytes                    
                </comment>
                <comment line="1605">
                    Generate second subkey using second 7 bytes                    
                </comment>
                <comment line="1608">
                    Construct 24-byte encryption-decryption-encryption sequence                    
                </comment>
                <declaration name="subkey1" type="byte[]" line="1583"/>
                <declaration name="spec" type="KeySpec" line="1585"/>
                <declaration name="desFactory" type="SecretKeyFactory" line="1586"/>
                <scope line="1589">
                    <scope line="1591"/>
                </scope>
                <scope line="1602">
                    <declaration name="subkey2" type="byte[]" line="1605"/>
                    <declaration name="ede" type="byte[]" line="1608"/>
                    <scope line="1615"/>
                </scope>
                <scope line="1626"/>
            </method>
        </class>
    </source>