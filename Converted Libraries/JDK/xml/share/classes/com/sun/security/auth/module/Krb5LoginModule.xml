<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.security.auth.module">
        <import package="java.io"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.util"/>
        <import package="javax.security.auth"/>
        <import package="javax.security.auth.kerberos"/>
        <import package="javax.security.auth.callback"/>
        <import package="javax.security.auth.login"/>
        <import package="javax.security.auth.spi"/>
        <import package="sun.security.krb5"/>
        <import package="sun.security.jgss.krb5.Krb5Util"/>
        <import package="sun.security.krb5.Credentials"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <class name="Krb5LoginModule" line="44">
            <comment line="368">
                initial state                
            </comment>
            <comment line="374">
                configurable option                
            </comment>
            <comment line="391">
                specify if initiator.                
            </comment>
            <comment line="392">
                perform authentication exchange if initiator                
            </comment>
            <comment line="395">
                the authentication status                
            </comment>
            <comment line="400">
                Encryption keys calculated from password. Assigned when storekey == true                
            </comment>
            <comment line="401">
                and useKeyTab == false (or true but not found)                
            </comment>
            <implements interface="LoginModule"/>
            <javadoc line="44">
                &lt;p&gt; This &lt;code&gt;LoginModule&lt;/code&gt; authenticates users using
                  Kerberos protocols.
                  &lt;p&gt; The configuration entry for &lt;code&gt;Krb5LoginModule&lt;/code&gt; has
                  several options that control the authentication process and
                  additions to the &lt;code&gt;Subject&lt;/code&gt;&apos;s private credential
                  set. Irrespective of these options, the &lt;code&gt;Subject&lt;/code&gt;&apos;s
                  principal set and private credentials set are updated only when
                  &lt;code&gt;commit&lt;/code&gt; is called.
                  When &lt;code&gt;commit&lt;/code&gt; is called, the &lt;code&gt;KerberosPrincipal&lt;/code&gt;
                  is added to the  &lt;code&gt;Subject&lt;/code&gt;&apos;s
                  principal set and &lt;code&gt;KerberosTicket&lt;/code&gt; is
                  added to the &lt;code&gt;Subject&lt;/code&gt;&apos;s private credentials.
                  &lt;p&gt; If the configuration entry for &lt;code&gt;KerberosLoginModule&lt;/code&gt;
                  has the option &lt;code&gt;storeKey&lt;/code&gt; set to true, then
                  &lt;code&gt;KerberosKey&lt;/code&gt; will also be added to the
                  subject&apos;s private credentials. &lt;code&gt;KerberosKey&lt;/code&gt;, the principal&apos;s
                  key will be either obtained from the keytab or
                  derived from user&apos;s password.
                  &lt;p&gt; This &lt;code&gt;LoginModule&lt;/code&gt; recognizes the &lt;code&gt;doNotPrompt&lt;/code&gt;
                  option. If set to true the user will not be prompted for the password.
                  &lt;p&gt; The user can  specify the location of the ticket cache by using
                  the option &lt;code&gt;ticketCache&lt;/code&gt; in the configuration entry.
                  &lt;p&gt;The user can specify the keytab location by using
                  the option &lt;code&gt;keyTab&lt;/code&gt;
                  in the configuration entry.
                  &lt;p&gt; The principal name can be specified in the configuration entry
                  by using the option &lt;code&gt;principal&lt;/code&gt;. The principal name
                  can either be a simple user name or a service name such as
                  &lt;code&gt;host/mission.eng.sun.com&lt;/code&gt;. The principal can also
                  be set using the system property &lt;code&gt;sun.security.krb5.principal&lt;/code&gt;.
                  This property is checked during login. If this property is not set, then
                  the principal name from the configuration is used. In the
                  case where the principal property is not set and the principal
                  entry also does not exist, the user is prompted for the name.
                  When this property of entry is set, and &lt;code&gt;useTicketCache&lt;/code&gt;
                  is set to true, only TGT belonging to this principal is used.
                  &lt;p&gt; The following is a list of configuration options supported
                  for &lt;code&gt;Krb5LoginModule&lt;/code&gt;:
                  &lt;dl&gt;
                  &lt;blockquote&gt;&lt;dt&gt;&lt;b&gt;&lt;code&gt;refreshKrb5Config&lt;/code&gt;&lt;/b&gt;:&lt;/dt&gt;
                  &lt;dd&gt; Set this to true, if you want the configuration
                  to be refreshed before the &lt;code&gt;login&lt;/code&gt; method is called.&lt;/dd&gt;
                  &lt;P&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;code&gt;useTicketCache&lt;/code&gt;&lt;/b&gt;:&lt;/dt&gt;
                  &lt;dd&gt;Set this to true, if you want the
                  TGT to be obtained
                  from the ticket cache. Set this option
                  to false if you do not want this module to use the ticket cache.
                  (Default is False).
                  This module will
                  search for the ticket
                  cache in the following locations:
                  On Solaris and Linux
                  it will look for the ticket cache in /tmp/krb5cc_&lt;code&gt;uid&lt;/code&gt;
                  where the uid is numeric user
                  identifier. If the ticket cache is
                  not available in the above location, or if we are on a
                  Windows platform, it will look for the cache as
                  {user.home}{file.separator}krb5cc_{user.name}.
                  You can override the ticket cache location by using
                  &lt;code&gt;ticketCache&lt;/code&gt;.
                  For Windows, if a ticket cannot be retrieved from the file ticket cache,
                  it will use Local Security Authority (LSA) API to get the TGT.
                  &lt;P&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;code&gt;ticketCache&lt;/code&gt;&lt;/b&gt;:&lt;/dt&gt;
                  &lt;dd&gt;Set this to the name of the ticket
                  cache that  contains user&apos;s TGT.
                  If this is set,  &lt;code&gt;useTicketCache&lt;/code&gt;
                  must also be set to true; Otherwise a configuration error will
                  be returned.&lt;/dd&gt;
                  &lt;P&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;code&gt;renewTGT&lt;/code&gt;&lt;/b&gt;:&lt;/dt&gt;
                  &lt;dd&gt;Set this to true, if you want to renew
                  the TGT. If this is set, &lt;code&gt;useTicketCache&lt;/code&gt; must also be
                  set to true; otherwise a configuration error will be returned.&lt;/dd&gt;
                  &lt;p&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;code&gt;doNotPrompt&lt;/code&gt;&lt;/b&gt;:&lt;/dt&gt;
                  &lt;dd&gt;Set this to true if you do not want to be
                  prompted for the password
                  if credentials can not be obtained from the cache, the keytab,
                  or through shared state.(Default is false)
                  If set to true, credential must be obtained through cache, keytab,
                  or shared state. Otherwise, authentication will fail.&lt;/dd&gt;
                  &lt;P&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;code&gt;useKeyTab&lt;/code&gt;&lt;/b&gt;:&lt;/dt&gt;
                  &lt;dd&gt;Set this to true if you
                  want the module to get the principal&apos;s key from the
                  the keytab.(default value is False)
                  If &lt;code&gt;keytab&lt;/code&gt;
                  is not set then
                  the module will locate the keytab from the
                  Kerberos configuration file.
                  If it is not specified in the Kerberos configuration file
                  then it will look for the file
                  &lt;code&gt;{user.home}{file.separator}&lt;/code&gt;krb5.keytab.&lt;/dd&gt;
                  &lt;P&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;code&gt;keyTab&lt;/code&gt;&lt;/b&gt;:&lt;/dt&gt;
                  &lt;dd&gt;Set this to the file name of the
                  keytab to get principal&apos;s secret key.&lt;/dd&gt;
                  &lt;P&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;code&gt;storeKey&lt;/code&gt;&lt;/b&gt;:&lt;/dt&gt;
                  &lt;dd&gt;Set this to true to if you want the
                  principal&apos;s key to be stored in the Subject&apos;s private credentials. &lt;/dd&gt;
                  &lt;p&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;code&gt;principal&lt;/code&gt;&lt;/b&gt;:&lt;/dt&gt;
                  &lt;dd&gt;The name of the principal that should
                  be used. The principal can be a simple username such as
                  &quot;&lt;code&gt;testuser&lt;/code&gt;&quot; or a service name such as
                  &quot;&lt;code&gt;host/testhost.eng.sun.com&lt;/code&gt;&quot;. You can use the
                  &lt;code&gt;principal&lt;/code&gt;  option to set the principal when there are
                  credentials for multiple principals in the
                  &lt;code&gt;keyTab&lt;/code&gt; or when you want a specific ticket cache only.
                  The principal can also be set using the system property
                  &lt;code&gt;sun.security.krb5.principal&lt;/code&gt;. In addition, if this
                  system property is defined, then it will be used. If this property
                  is not set, then the principal name from the configuration will be
                  used.&lt;/dd&gt;
                  &lt;P&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;code&gt;isInitiator&lt;/code&gt;&lt;/b&gt;:&lt;/dt&gt;
                  &lt;dd&gt;Set this to true, if initiator. Set this to false, if acceptor only.
                  (Default is true).
                  Note: Do not set this value to false for initiators.&lt;/dd&gt;
                  &lt;/dl&gt;&lt;/blockquote&gt;
                  &lt;p&gt; This &lt;code&gt;LoginModule&lt;/code&gt; also recognizes the following additional
                  &lt;code&gt;Configuration&lt;/code&gt;
                  options that enable you to share username and passwords across different
                  authentication modules:
                  &lt;pre&gt;
                  useFirstPass   if, true, this LoginModule retrieves the
                  username and password from the module&apos;s shared state,
                  using &quot;javax.security.auth.login.name&quot; and
                  &quot;javax.security.auth.login.password&quot; as the respective
                  keys. The retrieved values are used for authentication.
                  If authentication fails, no attempt for a retry
                  is made, and the failure is reported back to the
                  calling application.
                  tryFirstPass   if, true, this LoginModule retrieves the
                  the username and password from the module&apos;s shared
                  state using &quot;javax.security.auth.login.name&quot; and
                  &quot;javax.security.auth.login.password&quot; as the respective
                  keys.  The retrieved values are used for
                  authentication.
                  If authentication fails, the module uses the
                  CallbackHandler to retrieve a new username
                  and password, and another attempt to authenticate
                  is made. If the authentication fails,
                  the failure is reported back to the calling application
                  storePass      if, true, this LoginModule stores the username and
                  password obtained from the CallbackHandler in the
                  modules shared state, using
                  &quot;javax.security.auth.login.name&quot; and
                  &quot;javax.security.auth.login.password&quot; as the respective
                  keys.  This is not performed if existing values already
                  exist for the username and password in the shared
                  state, or if authentication fails.
                  clearPass      if, true, this LoginModule clears the
                  username and password stored in the module&apos;s shared
                  state  after both phases of authentication
                  (login and commit) have completed.
                  &lt;/pre&gt;
                  &lt;p&gt;If the principal system property or key is already provided, the value of
                  &quot;javax.security.auth.login.name&quot; in the shared state is ignored.
                  &lt;p&gt;When multiple mechanisms to retrieve a ticket or key is provided, the
                  preference order looks like this:
                  &lt;ol&gt;
                  &lt;li&gt;ticket cache
                  &lt;li&gt;keytab
                  &lt;li&gt;shared state
                  &lt;li&gt;user prompt
                  &lt;/ol&gt;
                  &lt;p&gt;Note that if any step fails, it will fallback to the next step.
                  There&apos;s only one exception, it the shared state step fails and
                  &lt;code&gt;useFirstPass&lt;/code&gt;=true, no user prompt is made.
                  &lt;p&gt;Examples of some configuration values for Krb5LoginModule in
                  JAAS config file and the results are:
                  &lt;ul&gt;
                  &lt;p&gt; &lt;code&gt;doNotPrompt&lt;/code&gt;=true;
                  &lt;/ul&gt;
                  &lt;p&gt; This is an illegal combination since none of &lt;code&gt;useTicketCache&lt;/code&gt;,
                  &lt;code&gt;useKeyTab&lt;/code&gt;, &lt;code&gt;useFirstPass&lt;/code&gt; and &lt;code&gt;tryFirstPass&lt;/code&gt;
                  is set and the user can not be prompted for the password.
                  &lt;ul&gt;
                  &lt;p&gt; &lt;code&gt;ticketCache&lt;/code&gt; = &amp;lt;filename&amp;gt;;
                  &lt;/ul&gt;
                  &lt;p&gt; This is an illegal combination since &lt;code&gt;useTicketCache&lt;/code&gt;
                  is not set to true and the ticketCache is set. A configuration error
                  will occur.
                  &lt;ul&gt;
                  &lt;p&gt; &lt;code&gt;renewTGT&lt;/code&gt;=true;
                  &lt;/ul&gt;
                  &lt;p&gt; This is an illegal combination since &lt;code&gt;useTicketCache&lt;/code&gt; is
                  not set to true and renewTGT is set. A configuration error will occur.
                  &lt;ul&gt;
                  &lt;p&gt; &lt;code&gt;storeKey&lt;/code&gt;=true
                  &lt;code&gt;useTicketCache&lt;/code&gt; = true
                  &lt;code&gt;doNotPrompt&lt;/code&gt;=true;;
                  &lt;/ul&gt;
                  &lt;p&gt; This is an illegal combination since  &lt;code&gt;storeKey&lt;/code&gt; is set to
                  true but the key can not be obtained either by prompting the user or from
                  the keytab, or from the shared state. A configuration error will occur.
                  &lt;ul&gt;
                  &lt;p&gt;  &lt;code&gt;keyTab&lt;/code&gt; = &amp;lt;filename&amp;gt; &lt;code&gt;doNotPrompt&lt;/code&gt;=true ;
                  &lt;/ul&gt;
                  &lt;p&gt;This is an illegal combination since useKeyTab is not set to true and
                  the keyTab is set. A configuration error will occur.
                  &lt;ul&gt;
                  &lt;p&gt; &lt;code&gt;debug=true &lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;p&gt; Prompt the user for the principal name and the password.
                  Use the authentication exchange to get TGT from the KDC and
                  populate the &lt;code&gt;Subject&lt;/code&gt; with the principal and TGT.
                  Output debug messages.
                  &lt;ul&gt;
                  &lt;p&gt; &lt;code&gt;useTicketCache&lt;/code&gt; = true &lt;code&gt;doNotPrompt&lt;/code&gt;=true;
                  &lt;/ul&gt;
                  &lt;p&gt;Check the default cache for TGT and populate the &lt;code&gt;Subject&lt;/code&gt;
                  with the principal and TGT. If the TGT is not available,
                  do not prompt the user, instead fail the authentication.
                  &lt;ul&gt;
                  &lt;p&gt;&lt;code&gt;principal&lt;/code&gt;=&amp;lt;name&amp;gt;&lt;code&gt;useTicketCache&lt;/code&gt; = true
                  &lt;code&gt;doNotPrompt&lt;/code&gt;=true;
                  &lt;/ul&gt;
                  &lt;p&gt; Get the TGT from the default cache for the principal and populate the
                  Subject&apos;s principal and private creds set. If ticket cache is
                  not available or does not contain the principal&apos;s TGT
                  authentication will fail.
                  &lt;ul&gt;
                  &lt;p&gt; &lt;code&gt;useTicketCache&lt;/code&gt; = true
                  &lt;code&gt;ticketCache&lt;/code&gt;=&amp;lt;file name&amp;gt;&lt;code&gt;useKeyTab&lt;/code&gt; = true
                  &lt;code&gt; keyTab&lt;/code&gt;=&amp;lt;keytab filename&amp;gt;
                  &lt;code&gt;principal&lt;/code&gt; = &amp;lt;principal name&amp;gt;
                  &lt;code&gt;doNotPrompt&lt;/code&gt;=true;
                  &lt;/ul&gt;
                  &lt;p&gt;  Search the cache for the principal&apos;s TGT. If it is not available
                  use the key in the keytab to perform authentication exchange with the
                  KDC and acquire the TGT.
                  The Subject will be populated with the principal and the TGT.
                  If the key is not available or valid then authentication will fail.
                  &lt;ul&gt;
                  &lt;p&gt;&lt;code&gt;useTicketCache&lt;/code&gt; = true
                  &lt;code&gt;ticketCache&lt;/code&gt;=&amp;lt;file name&amp;gt;
                  &lt;/ul&gt;
                  &lt;p&gt; The TGT will be obtained from the cache specified.
                  The Kerberos principal name used will be the principal name in
                  the Ticket cache. If the TGT is not available in the
                  ticket cache the user will be prompted for the principal name
                  and the password. The TGT will be obtained using the authentication
                  exchange with the KDC.
                  The Subject will be populated with the TGT.
                  &lt;ul&gt;
                  &lt;p&gt; &lt;code&gt;useKeyTab&lt;/code&gt; = true
                  &lt;code&gt;keyTab&lt;/code&gt;=&amp;lt;keytab filename&amp;gt;
                  &lt;code&gt;principal&lt;/code&gt;= &amp;lt;principal name&amp;gt;
                  &lt;code&gt;storeKey&lt;/code&gt;=true;
                  &lt;/ul&gt;
                  &lt;p&gt;  The key for the principal will be retrieved from the keytab.
                  If the key is not available in the keytab the user will be prompted
                  for the principal&apos;s password. The Subject will be populated
                  with the principal&apos;s key either from the keytab or derived from the
                  password entered.
                  &lt;ul&gt;
                  &lt;p&gt; &lt;code&gt;useKeyTab&lt;/code&gt; = true
                  &lt;code&gt;keyTab&lt;/code&gt;=&amp;lt;keytabname&amp;gt;
                  &lt;code&gt;storeKey&lt;/code&gt;=true
                  &lt;code&gt;doNotPrompt&lt;/code&gt;=true;
                  &lt;/ul&gt;
                  &lt;p&gt;The user will be prompted for the service principal name.
                  If the principal&apos;s
                  longterm key is available in the keytab , it will be added to the
                  Subject&apos;s private credentials. An authentication exchange will be
                  attempted with the principal name and the key from the Keytab.
                  If successful the TGT will be added to the
                  Subject&apos;s private credentials set. Otherwise the authentication will
                  fail.
                  &lt;ul&gt;
                  &lt;p&gt;
                  &lt;code&gt;useTicketCache&lt;/code&gt;=true
                  &lt;code&gt;ticketCache&lt;/code&gt;=&amp;lt;file name&amp;gt;;
                  &lt;code&gt;useKeyTab&lt;/code&gt; = true
                  &lt;code&gt;keyTab&lt;/code&gt;=&amp;lt;file name&amp;gt; &lt;code&gt;storeKey&lt;/code&gt;=true
                  &lt;code&gt;principal&lt;/code&gt;= &amp;lt;principal name&amp;gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The client&apos;s TGT will be retrieved from the ticket cache and added to the
                  &lt;code&gt;Subject&lt;/code&gt;&apos;s private credentials. If the TGT is not available
                  in the ticket cache, or the TGT&apos;s client name does not match the principal
                  name, Java will use a secret key to obtain the TGT using the authentication
                  exchange and added to the Subject&apos;s private credentials.
                  This secret key will be first retrieved from the keytab. If the key
                  is not available, the user will be prompted for the password. In either
                  case, the key derived from the password will be added to the
                  Subject&apos;s private credentials set.
                  &lt;ul&gt;
                  &lt;p&gt;&lt;code&gt;isInitiator&lt;/code&gt; = false
                  &lt;/ul&gt;
                  &lt;p&gt;Configured to act as acceptor only, credentials are not acquired
                  via AS exchange. For acceptors only, set this value to false.
                  For initiators, do not set this value to false.
                  &lt;ul&gt;
                  &lt;p&gt;&lt;code&gt;isInitiator&lt;/code&gt; = true
                  &lt;/ul&gt;
                  &lt;p&gt;Configured to act as initiator, credentials are acquired
                  via AS exchange. For initiators, set this value to true, or leave this
                  option unset, in which case default value (true) will be used.                
                <author>
                    Ram Marti                    
                </author>
            </javadoc>
            <declaration name="subject" type="Subject" line="368"/>
            <declaration name="callbackHandler" type="CallbackHandler" line="369"/>
            <declaration name="sharedState" type="Map" line="370"/>
            <declaration name="options" type="Map&lt;String,?&gt;" line="371"/>
            <declaration name="debug" type="boolean" line="374"/>
            <declaration name="storeKey" type="boolean" line="375"/>
            <declaration name="doNotPrompt" type="boolean" line="376"/>
            <declaration name="useTicketCache" type="boolean" line="377"/>
            <declaration name="useKeyTab" type="boolean" line="378"/>
            <declaration name="ticketCacheName" type="String" line="379"/>
            <declaration name="keyTabName" type="String" line="380"/>
            <declaration name="princName" type="String" line="381"/>
            <declaration name="useFirstPass" type="boolean" line="383"/>
            <declaration name="tryFirstPass" type="boolean" line="384"/>
            <declaration name="storePass" type="boolean" line="385"/>
            <declaration name="clearPass" type="boolean" line="386"/>
            <declaration name="refreshKrb5Config" type="boolean" line="387"/>
            <declaration name="renewTGT" type="boolean" line="388"/>
            <declaration name="isInitiator" type="boolean" line="392"/>
            <declaration name="succeeded" type="boolean" line="395"/>
            <declaration name="commitSucceeded" type="boolean" line="396"/>
            <declaration name="username" type="String" line="397"/>
            <declaration name="encKeys" type="EncryptionKey[]" line="401"/>
            <declaration name="ktab" type="KeyTab" line="403"/>
            <declaration name="cred" type="Credentials" line="405"/>
            <declaration name="principal" type="PrincipalName" line="407"/>
            <declaration name="kerbClientPrinc" type="KerberosPrincipal" line="408"/>
            <declaration name="kerbTicket" type="KerberosTicket" line="409"/>
            <declaration name="kerbKeys" type="KerberosKey[]" line="410"/>
            <declaration name="krb5PrincName" type="StringBuffer" line="411"/>
            <declaration name="password" type="char[]" line="412"/>
            <declaration name="NAME" type="String" line="414"/>
            <declaration name="PWD" type="String" line="415"/>
            <declaration name="rb" type="java.util.ResourceBundle" line="416"/>
            <javadoc line="419">
                Initialize this &lt;code&gt;LoginModule&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    subject the <code>Subject</code> to be authenticated. <p>                    
                </param>
                <param>
                    callbackHandler a <code>CallbackHandler</code> for
                      communication with the end user (prompting for
                      usernames and passwords, for example). <p>                    
                </param>
                <param>
                    sharedState shared <code>LoginModule</code> state. <p>                    
                </param>
                <param>
                    options options specified in the login
                      <code>Configuration</code> for this particular
                      <code>LoginModule</code>.                    
                </param>
            </javadoc>
            <method name="initialize" type="void" line="439">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="callbackHandler" type="CallbackHandler"/>
                    <param name="sharedState" type="Map<String,?>"/>
                    <param name="options" type="Map<String,?>"/>
                </params>
                <comment line="446">
                    initialize any configured options                    
                </comment>
                <comment line="463">
                    check isInitiator value                    
                </comment>
                <comment line="466">
                    use default, if value not set                    
                </comment>
                <declaration name="isInitiatorValue" type="String" line="464"/>
                <scope line="465"/>
                <scope line="467"/>
                <scope line="481"/>
            </method>
            <javadoc line="500">
                Authenticate the user
                  &lt;p&gt;                
                <return>
                    true in all cases since this <code>LoginModule</code>
                      should not be ignored.                    
                </return>
                <exception>
                    FailedLoginException if the authentication fails. <p>                    
                </exception>
                <exception>
                    LoginException if this <code>LoginModule</code>
                      is unable to perform the authentication.                    
                </exception>
            </javadoc>
            <method name="login" type="boolean" line="513">
                <comment line="549">
                    authentication failed -- try again below by prompting                    
                </comment>
                <comment line="564">
                    authentication failed -- clean out state                    
                </comment>
                <comment line="576">
                    attempt the authentication by getting the username and pwd                    
                </comment>
                <comment line="577">
                    by prompting or configuration i.e. not from shared state                    
                </comment>
                <comment line="585">
                    authentication failed -- clean out state                    
                </comment>
                <declaration name="len" type="int" line="515"/>
                <scope line="517">
                    <scope line="518">
                        <scope line="519"/>
                    </scope>
                    <scope line="523">
                        <declaration name="le" type="LoginException" line="524"/>
                    </scope>
                </scope>
                <declaration name="principalProperty" type="String" line="529"/>
                <scope line="531"/>
                <scope line="533">
                    <scope line="534"/>
                </scope>
                <scope line="539">
                    <scope line="540"/>
                    <scope line="548">
                        <scope line="551"/>
                    </scope>
                </scope>
                <scope line="557">
                    <scope line="558"/>
                    <scope line="563">
                        <scope line="565"/>
                    </scope>
                </scope>
                <scope line="579"/>
                <scope line="584">
                    <scope line="586"/>
                </scope>
            </method>
            <javadoc line="596">
                process the configuration options
                  Get the TGT either out of
                  cache or from the KDC using the password entered
                  Check the  permission before getting the TGT                
            </javadoc>
            <method name="attemptAuthentication" type="void" line="604">
                <params>
                    <param name="getPasswdFromSharedState" type="boolean"/>
                </params>
                <comment line="606">
                    Check the creds cache to see whether
                     we have TGT for this client principal                    
                </comment>
                <comment line="624">
                    ticketCacheName == null implies the default cache                    
                </comment>
                <comment line="631">
                    check to renew credentials                    
                </comment>
                <comment line="636">
                    credentials have expired                    
                </comment>
                <comment line="646">
                    get the principal name from the ticket cache                    
                </comment>
                <comment line="660">
                    cred = null indicates that we didn&apos;t get the creds                    
                </comment>
                <comment line="661">
                    from the cache or useTicketCache was false                    
                </comment>
                <comment line="664">
                    We need the principal name whether we use keytab                    
                </comment>
                <comment line="665">
                    or AS Exchange                    
                </comment>
                <comment line="673">
                    Before dynamic KeyTab support (6894072), here we check if
                     the keytab contains keys for the principal. If no, keytab
                     will not be used and password is prompted for.
                    
                     After 6894072, we normally don&apos;t check it, and expect the
                     keys can be populated until a real connection is made. The
                     check is still done when isInitiator == true, where the keys
                     will be used right now.
                    
                     Probably tricky relations:
                    
                     useKeyTab is config flag, but when it&apos;s true but the ktab
                     does not contains keys for principal, we would use password
                     and keep the flag unchanged (for reuse?). In this method,
                     we use (ktab != null) to check whether keytab is used.
                     After this method (and when storeKey == true), we use
                     (encKeys == null) to check.                    
                </comment>
                <comment line="718">
                    XXX Even if isInitiator=false, it might be                    
                </comment>
                <comment line="719">
                    better to do an AS-REQ so that keys can be                    
                </comment>
                <comment line="720">
                    updated with PA info                    
                </comment>
                <comment line="725">
                    When encKeys is empty, the login actually fails.                    
                </comment>
                <comment line="726">
                    For compatibility, exception is thrown in commit().                    
                </comment>
                <comment line="751">
                    we should hava a non-null cred                    
                </comment>
                <scope line="610">
                    <scope line="611"/>
                    <scope line="615">
                        <declaration name="le" type="LoginException" line="616"/>
                    </scope>
                </scope>
                <scope line="622">
                    <scope line="623">
                        <scope line="630">
                            <scope line="632">
                                <scope line="633"/>
                                <scope line="635"/>
                            </scope>
                        </scope>
                        <scope line="645">
                            <scope line="647"/>
                        </scope>
                        <scope line="651">
                            <scope line="653"/>
                        </scope>
                    </scope>
                    <scope line="663">
                        <scope line="666"/>
                        <scope line="692">
                            <scope line="696">
                                <scope line="698">
                                    <scope line="700"/>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="builder" type="KrbAsReqBuilder" line="712"/>
                        <scope line="714">
                            <scope line="717"/>
                            <scope line="723"/>
                        </scope>
                        <scope line="728">
                            <scope line="730"/>
                        </scope>
                        <scope line="736">
                            <declaration name="hd" type="HexDumpEncoder" line="738"/>
                            <scope line="739"/>
                            <scope line="741">
                                <scope line="742"/>
                            </scope>
                        </scope>
                        <scope line="752"/>
                    </scope>
                </scope>
                <scope line="758">
                    <declaration name="le" type="LoginException" line="759"/>
                </scope>
                <scope line="762">
                    <declaration name="ie" type="LoginException" line="763"/>
                </scope>
            </method>
            <method name="promptForName" type="void" line="770">
                <params>
                    <param name="getPasswdFromSharedState" type="boolean"/>
                </params>
                <comment line="773">
                    use the name saved by the first module in the stack                    
                </comment>
                <scope line="772">
                    <scope line="775"/>
                    <scope line="779"/>
                    <scope line="785"/>
                    <scope line="789"/>
                </scope>
                <scope line="795"/>
                <scope line="798">
                    <scope line="804">
                        <declaration name="defUsername" type="String" line="805"/>
                        <declaration name="callbacks" type="Callback[]" line="807"/>
                        <declaration name="form" type="MessageFormat" line="808"/>
                        <declaration name="source" type="Object[]" line="811"/>
                    </scope>
                    <scope line="819"/>
                    <scope line="821"/>
                </scope>
            </method>
            <method name="promptForPass" type="void" line="832">
                <params>
                    <param name="getPasswdFromSharedState" type="boolean"/>
                </params>
                <comment line="835">
                    use the password saved by the first module in the stack                    
                </comment>
                <comment line="874">
                    treat a NULL password as an empty password                    
                </comment>
                <comment line="883">
                    clear tmpPassword                    
                </comment>
                <scope line="834">
                    <scope line="837">
                        <scope line="838"/>
                    </scope>
                    <scope line="845"/>
                </scope>
                <scope line="851"/>
                <scope line="854">
                    <scope line="860">
                        <declaration name="callbacks" type="Callback[]" line="861"/>
                        <declaration name="userName" type="String" line="862"/>
                        <declaration name="form" type="MessageFormat" line="863"/>
                        <declaration name="source" type="Object[]" line="866"/>
                        <declaration name="tmpPassword" type="char[]" line="871"/>
                        <scope line="873"/>
                        <scope line="887"/>
                    </scope>
                    <scope line="893"/>
                    <scope line="895"/>
                </scope>
            </method>
            <method name="validateConfiguration" type="void" line="904"/>
            <method name="isCurrent" type="boolean" line="937">
                <params>
                    <param name="creds" type="Credentials"/>
                </params>
                <declaration name="endTime" type="Date" line="938"/>
                <scope line="939"/>
            </method>
            <method name="renewCredentials" type="Credentials" line="946">
                <params>
                    <param name="creds" type="Credentials"/>
                </params>
                <declaration name="lcreds" type="Credentials" line="947"/>
                <scope line="948"/>
                <scope line="958"/>
            </method>
            <javadoc line="967">
                &lt;p&gt; This method is called if the LoginContext&apos;s
                  overall authentication succeeded
                  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL
                  LoginModules succeeded).
                  &lt;p&gt; If this LoginModule&apos;s own authentication attempt
                  succeeded (checked by retrieving the private state saved by the
                  &lt;code&gt;login&lt;/code&gt; method), then this method associates a
                  &lt;code&gt;Krb5Principal&lt;/code&gt;
                  with the &lt;code&gt;Subject&lt;/code&gt; located in the
                  &lt;code&gt;LoginModule&lt;/code&gt;. It adds Kerberos Credentials to the
                  the Subject&apos;s private credentials set. If this LoginModule&apos;s own
                  authentication attempted failed, then this method removes
                  any state that was originally saved.
                  &lt;p&gt;                
                <exception>
                    LoginException if the commit fails.                    
                </exception>
                <return>
                    true if this LoginModule's own login and commit
                      attempts succeeded, or false otherwise.                    
                </return>
            </javadoc>
            <method name="commit" type="boolean" line="991">
                <comment line="993">
                    Let us add the Krb5 Creds to the Subject&apos;s
                     private credentials. The credentials are of type
                     KerberosKey or KerberosTicket                    
                </comment>
                <comment line="1012">
                    Add the Principal (authenticated identity)
                     to the Subject&apos;s principal set and
                     add the credentials (TGT or Service key) to the
                     Subject&apos;s private credentials                    
                </comment>
                <comment line="1023">
                    create Kerberos Ticket                    
                </comment>
                <comment line="1045">
                    Let us add the kerbClientPrinc,kerbTicket and KeyTab/KerbKey (if                    
                </comment>
                <comment line="1046">
                    storeKey is true)                    
                </comment>
                <comment line="1051">
                    add the TGT                    
                </comment>
                <comment line="1061">
                    Compatibility; also add keys to privCredSet                    
                </comment>
                <scope line="998"/>
                <scope line="1000">
                    <scope line="1002"/>
                    <scope line="1007"/>
                    <declaration name="privCredSet" type="Set&lt;Object&gt;" line="1019"/>
                    <declaration name="princSet" type="Set&lt;java.security.Principal&gt;" line="1020"/>
                    <scope line="1024"/>
                    <scope line="1028">
                        <scope line="1029"/>
                        <scope line="1035">
                            <declaration name="temp" type="Integer" line="1036"/>
                        </scope>
                    </scope>
                    <scope line="1047"/>
                    <scope line="1052"/>
                    <scope line="1057">
                        <scope line="1058">
                            <scope line="1059">
                                <scope line="1062"/>
                            </scope>
                        </scope>
                        <scope line="1066">
                            <scope line="1067">
                                <scope line="1068"/>
                                <scope line="1073"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1091">
                &lt;p&gt; This method is called if the LoginContext&apos;s
                  overall authentication failed.
                  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL
                  LoginModules did not succeed).
                  &lt;p&gt; If this LoginModule&apos;s own authentication attempt
                  succeeded (checked by retrieving the private state saved by the
                  &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;commit&lt;/code&gt; methods),
                  then this method cleans up any state that was originally saved.
                  &lt;p&gt;                
                <exception>
                    LoginException if the abort fails.                    
                </exception>
                <return>
                    false if this LoginModule's own login and/or commit attempts
                      failed, and true otherwise.                    
                </return>
            </javadoc>
            <method name="abort" type="boolean" line="1110">
                <comment line="1114">
                    login succeeded but overall authentication failed                    
                </comment>
                <comment line="1118">
                    overall authentication succeeded and commit succeeded,                    
                </comment>
                <comment line="1119">
                    but someone else&apos;s commit failed                    
                </comment>
                <scope line="1111"/>
                <scope line="1113"/>
                <scope line="1117"/>
            </method>
            <javadoc line="1125">
                Logout the user.
                  &lt;p&gt; This method removes the &lt;code&gt;Krb5Principal&lt;/code&gt;
                  that was added by the &lt;code&gt;commit&lt;/code&gt; method.
                  &lt;p&gt;                
                <exception>
                    LoginException if the logout fails.                    
                </exception>
                <return>
                    true in all cases since this <code>LoginModule</code>
                      should not be ignored.                    
                </return>
            </javadoc>
            <method name="logout" type="boolean" line="1138">
                <comment line="1151">
                    Let us remove all Kerberos credentials stored in the Subject                    
                </comment>
                <comment line="1161">
                    clean the kerberos ticket and keys                    
                </comment>
                <scope line="1140"/>
                <scope line="1145"/>
                <declaration name="it" type="Iterator&lt;Object&gt;" line="1152"/>
                <scope line="1153">
                    <declaration name="o" type="Object" line="1154"/>
                    <scope line="1157"/>
                </scope>
                <scope line="1166"/>
            </method>
            <javadoc line="1173">
                Clean Kerberos credentials                
            </javadoc>
            <method name="cleanKerberosCred" type="void" line="1176">
                <comment line="1177">
                    Clean the ticket and server key                    
                </comment>
                <scope line="1178">
                    <scope line="1181">
                        <scope line="1182"/>
                    </scope>
                </scope>
                <scope line="1186"/>
            </method>
            <javadoc line="1195">
                Clean out the state                
            </javadoc>
            <method name="cleanState" type="void" line="1198">
                <comment line="1200">
                    save input as shared state only if                    
                </comment>
                <comment line="1201">
                    authentication succeeded                    
                </comment>
                <comment line="1210">
                    remove temp results for the next try                    
                </comment>
                <scope line="1202">
                    <scope line="1205"/>
                </scope>
                <scope line="1209"/>
                <scope line="1220"/>
            </method>
        </class>
    </source>