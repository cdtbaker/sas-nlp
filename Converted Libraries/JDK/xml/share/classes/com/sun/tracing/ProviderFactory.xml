<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tracing">
        <import package="java.util.HashSet"/>
        <import package="java.io.PrintStream"/>
        <import package="java.lang.reflect.Field"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.tracing.NullProviderFactory"/>
        <import package="sun.tracing.PrintStreamProviderFactory"/>
        <import package="sun.tracing.MultiplexProviderFactory"/>
        <import package="sun.tracing.dtrace.DTraceProviderFactory"/>
        <class name="ProviderFactory" line="13">
            <javadoc line="13">
                {@code ProviderFactory} is a factory class used to create instances of
                  providers.
                  To enable tracing in an application, this class must be used to create
                  instances of the provider interfaces defined by users.
                  The system-defined factory is obtained by using the{@code getDefaultFactory()} static method.  The resulting instance can be
                  used to create any number of providers.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="ProviderFactory" type="constructor" line="23"/>
            <method name="createProvider" type="T" line="25"/>
            <javadoc line="25">
                Creates an implementation of a Provider interface.                
                <param>
                    cls the provider interface to be defined.                    
                </param>
                <return>
                    an implementation of {@code cls}, whose methods, when called,
                      will trigger tracepoints in the application.                    
                </return>
                <throws>
                    NullPointerException if cls is null                    
                </throws>
                <throws>
                    IllegalArgumentException if the class definition contains
                      non-void methods                    
                </throws>
            </javadoc>
            <javadoc line="35">
                Returns an implementation of a {@code ProviderFactory} which
                  creates instances of Providers.
                  The created Provider instances will be linked to all appropriate
                  and enabled system-defined tracing mechanisms in the JDK.                
                <return>
                    a {@code ProviderFactory} that is used to create Providers.                    
                </return>
            </javadoc>
            <method name="getDefaultFactory" type="ProviderFactory" line="42">
                <declaration name="factories" type="HashSet&amp;lt;ProviderFactory&amp;gt;" line="43"/>
                <declaration name="prop" type="String" line="44"/>
                <scope line="45"/>
                <scope line="49">
                    <scope line="50">
                        <declaration name="ps" type="PrintStream" line="51"/>
                        <scope line="52"/>
                    </scope>
                </scope>
                <scope line="57"/>
                <scope line="60"/>
                <scope line="63"/>
            </method>
            <method name="getPrintStreamFromSpec" type="PrintStream" line="67">
                <params>
                    <param name="spec" type="String"/>
                </params>
                <scope line="68">
                    <declaration name="fieldpos" type="int" line="69"/>
                    <declaration name="cls" type="Class&amp;lt;?&amp;gt;" line="70"/>
                    <anonymous_class line="71">
                        <method name="run" type="Field" line="72"/>
                    </anonymous_class>
                    <declaration name="f" type="Field" line="71"/>
                </scope>
                <scope line="79"/>
                <scope line="82"/>
                <scope line="85"/>
            </method>
        </class>
    </source>