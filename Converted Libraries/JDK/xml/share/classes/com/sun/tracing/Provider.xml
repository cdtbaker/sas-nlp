<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.tracing">
        <interface name="Provider">
            <javadoc line="2">
                {@code Provider} is a superinterface for user-defined tracing providers.
                  &lt;p&gt;
                  To define tracepoints, users must extend this interface
                  and then use a {@code ProviderFactory} to create an instance of the
                  newly-defined interface.  Each method in the defined interface represents a
                  tracepoint (or probe), which can be triggered by calling the associated
                  method on the returned instance.
                  &lt;p&gt;
                  This interface also contains a {@code getProbe()} method, which can be
                  used to get direct handles to the {@code Probe} objects themselves.{@code Probe} objects can be triggered manually, or they can be queried to
                  check their state.
                  &lt;p&gt;
                  When an application has finished triggering probes, it should call{@code dispose()} to free up any system resources associated with the
                  Provider.
                  &lt;p&gt;
                  All methods declared in a subclass of this interface should have a{@code void} return type. Methods can have parameters, and when called the
                  values of the arguments will be passed to the tracing implementation.
                  If any methods do not have a {@code void} return type, an{@code java.lang.IllegalArgumentException} will be thrown when the
                  provider is registered.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getProbe" type="Probe" line="25"/>
            <javadoc line="25">
                Retrieves a reference to a Probe object, which is used to check status
                  or to trigger the probe manually.
                  If the provided method parameter is not a method of the provider
                  interface,  or if the provider interface has been disposed, then
                  this returns null                
                <param>
                    method a method declared in the provider.                    
                </param>
                <return>
                    the specified probe represented by that method, or null.                    
                </return>
            </javadoc>
            <method name="dispose" type="void" line="35"/>
            <javadoc line="35">
                Disposes system resources associated with this provider.
                  After calling this method, triggering the probes will have no effect.
                  Additional calls to this method after the first call are ignored.                
            </javadoc>
        </interface>
    </source>