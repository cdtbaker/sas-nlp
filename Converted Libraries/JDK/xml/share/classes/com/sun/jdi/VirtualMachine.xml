<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi">
        <import package="com.sun.jdi.event.EventQueue"/>
        <import package="com.sun.jdi.request.EventRequestManager"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <interface name="VirtualMachine">
            <implements interface="Mirror"/>
            <javadoc line="6">
                A virtual machine targeted for debugging.
                  More precisely, a {@link Mirror mirror} representing the
                  composite state of the target VM.
                  All other mirrors are associated with an instance of this
                  interface.  Access to all other mirrors is achieved
                  directly or indirectly through an instance of this
                  interface.
                  Access to global VM properties and control of VM execution
                  are supported directly by this interface.
                  &lt;P&gt;
                  Instances of this interface are created by instances of{@link com.sun.jdi.connect.Connector}. For example,
                  an {@link com.sun.jdi.connect.AttachingConnector AttachingConnector}attaches to a target VM and returns its virtual machine mirror.
                  A Connector will typically create a VirtualMachine by invoking
                  the VirtualMachineManager&apos;s {@link com.sun.jdi.VirtualMachineManager#createVirtualMachine(Connection)}createVirtualMachine(Connection) method.
                  &lt;p&gt;
                  Note that a target VM launched by a launching connector is not
                  guaranteed to be stable until after the {@link com.sun.jdi.event.VMStartEvent} has been
                  received.
                  &lt;p&gt;
                  Any method on &lt;code&gt;VirtualMachine&lt;/code&gt; which
                  takes &lt;code&gt;VirtualMachine&lt;/code&gt; as an parameter may throw{@link com.sun.jdi.VMDisconnectedException} if the target VM is
                  disconnected and the {@link com.sun.jdi.event.VMDisconnectEvent} has been or is
                  available to be read from the {@link com.sun.jdi.event.EventQueue}.
                  &lt;p&gt;
                  Any method on &lt;code&gt;VirtualMachine&lt;/code&gt; which
                  takes &lt;code&gt;VirtualMachine&lt;/code&gt; as an parameter may throw{@link com.sun.jdi.VMOutOfMemoryException} if the target VM has run out of memory.                
                <author>
                    Robert Field                    
                </author>
                <author>
                    Gordon Hirsch                    
                </author>
                <author>
                    James McIlree                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="classesByName" type="List&lt;ReferenceType&gt;" line="39"/>
            <javadoc line="39">
                Returns the loaded reference types that
                  match a given name. The name must be fully qualified
                  (for example, java.lang.String). The returned list
                  will contain a {@link ReferenceType} for each class
                  or interface found with the given name. The search
                  is confined to loaded classes only; no attempt is made
                  to load a class of the given name.
                  &lt;P&gt;
                  The returned list will include reference types
                  loaded at least to the point of preparation and
                  types (like array) for which preparation is
                  not defined.                
                <param>
                    className the class/interface name to search for                    
                </param>
                <return>
                    a list of {@link ReferenceType} objects, each
                      mirroring a type in the target VM with the given name.                    
                </return>
            </javadoc>
            <method name="allClasses" type="List&lt;ReferenceType&gt;" line="57"/>
            <javadoc line="57">
                Returns all loaded types. For each loaded type in the target
                  VM a {@link ReferenceType} will be placed in the returned list.
                  The list will include ReferenceTypes which mirror classes,
                  interfaces, and array types.
                  &lt;P&gt;
                  The returned list will include reference types
                  loaded at least to the point of preparation and
                  types (like array) for which preparation is
                  not defined.                
                <return>
                    a list of {@link ReferenceType} objects, each mirroring
                      a loaded type in the target VM.                    
                </return>
            </javadoc>
            <method name="redefineClasses" type="void" line="71"/>
            <javadoc line="71">
                All classes given are redefined according to the
                  definitions supplied.  A method in a redefined class
                  is called &apos;equivalent&apos; (to the old version of the
                  method) if
                  &lt;UL&gt;
                  &lt;LI&gt;their bytecodes are the same except for indicies into
                  the constant pool, and
                  &lt;LI&gt;the referenced constants are equal.
                  &lt;/UL&gt;
                  Otherwise, the new method is called &apos;non-equivalent&apos;.
                  If a redefined method has active stack frames, those active
                  frames continue to run the bytecodes of the previous version of the
                  method.  If the new version of such a method is non-equivalent,
                  then a method from one of these active frames is called &apos;obsolete&apos; and{@link Method#isObsolete Method.isObsolete()}will return true when called on one of these methods.
                  If resetting such a frame is desired, use{@link ThreadReference#popFrames ThreadReference.popFrames(StackFrame)}to pop the old obsolete method execution from the stack.
                  New invocations of redefined methods will always invoke the new versions.
                  &lt;p&gt;
                  This function does not cause any initialization except
                  that which would occur under the customary JVM semantics.
                  In other words, redefining a class does not cause
                  its initializers to be run. The values of preexisting
                  static variables will remain as they were prior to the
                  call. However, completely uninitialized (new) static
                  variables will be assigned their default value.
                  &lt;p&gt;
                  If a redefined class has instances then all those
                  instances will have the fields defined by the redefined
                  class at the completion of the call. Preexisting fields
                  will retain their previous values. Any new fields will
                  have their default values; no instance initializers or
                  constructors are run.
                  &lt;p&gt;
                  Threads need not be suspended.
                  &lt;p&gt;
                  No events are generated by this function.
                  &lt;p&gt;
                  All breakpoints in the redefined classes are deleted.
                  &lt;p&gt;
                  Not all target virtual machines support this operation.
                  Use {@link #canRedefineClasses() canRedefineClasses()}to determine if the operation is supported.
                  Use {@link #canAddMethod() canAddMethod()}to determine if the redefinition can add methods.
                  Use {@link #canUnrestrictedlyRedefineClasses() canUnrestrictedlyRedefineClasses()}to determine if the redefinition can change the schema,
                  delete methods, change the class hierarchy, etc.                
                <param>
                    classToBytes A map from {@link ReferenceType}to array of byte.
                      The bytes represent the new class definition and
                      are in Java Virtual Machine class file format.                    
                </param>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target virtual machine does not support this
                      operation.
                      &lt;UL&gt;
                      &lt;LI&gt;If {@link #canRedefineClasses() canRedefineClasses()}is false any call of this method will throw this exception.
                      &lt;LI&gt;If {@link #canAddMethod() canAddMethod()} is false
                      attempting to add a method will throw this exception.
                      &lt;LI&gt;If {@link #canUnrestrictedlyRedefineClasses()canUnrestrictedlyRedefineClasses()}is false, attempting any of the following will throw
                      this exception
                      &lt;UL&gt;
                      &lt;LI&gt;changing the schema (the fields)
                      &lt;LI&gt;changing the hierarchy (subclasses, interfaces)
                      &lt;LI&gt;deleting a method
                      &lt;LI&gt;changing class modifiers
                      &lt;LI&gt;changing method modifiers
                      &lt;/UL&gt;
                      &lt;/UL&gt;                    
                </throws>
                <throws>
                    java.lang.NoClassDefFoundError if the bytes
                      don&apos;t correspond to the reference type (the names
                      don&apos;t match).                    
                </throws>
                <throws>
                    java.lang.VerifyError if a &quot;verifier&quot; detects
                      that a class, though well formed, contains an internal
                      inconsistency or security problem.                    
                </throws>
                <throws>
                    java.lang.ClassFormatError if the bytes
                      do not represent a valid class.                    
                </throws>
                <throws>
                    java.lang.ClassCircularityError if a
                      circularity has been detected while initializing a class.                    
                </throws>
                <throws>
                    java.lang.UnsupportedClassVersionError if the
                      major and minor version numbers in bytes
                      are not supported by the VM.                    
                </throws>
                <throws>
                    VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.                    
                </throws>
                <see>
                    Method#isObsolete                    
                </see>
                <see>
                    ThreadReference#popFrames                    
                </see>
                <see>
                    #canRedefineClasses                    
                </see>
                <see>
                    #canAddMethod                    
                </see>
                <see>
                    #canUnrestrictedlyRedefineClasses                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="allThreads" type="List&lt;ThreadReference&gt;" line="157"/>
            <javadoc line="157">
                Returns a list of the currently running threads. For each
                  running thread in the target VM, a {@link ThreadReference}that mirrors it is placed in the list.
                  The returned list contains threads created through
                  java.lang.Thread, all native threads attached to
                  the target VM through JNI, and system threads created
                  by the target VM. Thread objects that have
                  not yet been started
                  (see {@link java.lang.Thread#start Thread.start()})
                  and thread objects that have
                  completed their execution are not included in the returned list.                
                <return>
                    a list of {@link ThreadReference} objects, one for each
                      running thread in the mirrored VM.                    
                </return>
            </javadoc>
            <method name="suspend" type="void" line="172"/>
            <javadoc line="172">
                Suspends the execution of the application running in this
                  virtual machine. All threads currently running will be suspended.
                  &lt;p&gt;
                  Unlike {@link java.lang.Thread#suspend Thread.suspend()},
                  suspends of both the virtual machine and individual threads are
                  counted. Before a thread will run again, it must be resumed
                  (through {@link #resume} or {@link ThreadReference#resume})
                  the same number of times it has been suspended.                
                <throws>
                    VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.                    
                </throws>
            </javadoc>
            <method name="resume" type="void" line="184"/>
            <javadoc line="184">
                Continues the execution of the application running in this
                  virtual machine. All threads are resumed as documented in{@link ThreadReference#resume}.                
                <throws>
                    VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.                    
                </throws>
                <see>
                    #suspend                    
                </see>
            </javadoc>
            <method name="topLevelThreadGroups" type="List&lt;ThreadGroupReference&gt;" line="191"/>
            <javadoc line="191">
                Returns each thread group which does not have a parent. For each
                  top level thread group a {@link ThreadGroupReference} is placed in the
                  returned list.
                  &lt;p&gt;
                  This command may be used as the first step in building a tree
                  (or trees) of the existing thread groups.                
                <return>
                    a list of {@link ThreadGroupReference} objects, one for each
                      top level thread group.                    
                </return>
            </javadoc>
            <method name="eventQueue" type="EventQueue" line="202"/>
            <javadoc line="202">
                Returns the event queue for this virtual machine.
                  A virtual machine has only one {@link EventQueue} object, this
                  method will return the same instance each time it
                  is invoked.                
                <throws>
                    VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.                    
                </throws>
                <return>
                    the {@link EventQueue} for this virtual machine.                    
                </return>
            </javadoc>
            <method name="eventRequestManager" type="EventRequestManager" line="211"/>
            <javadoc line="211">
                Returns the event request manager for this virtual machine.
                  The {@link EventRequestManager} controls user settable events
                  such as breakpoints.
                  A virtual machine has only one {@link EventRequestManager} object,
                  this method will return the same instance each time it
                  is invoked.                
                <throws>
                    VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.                    
                </throws>
                <return>
                    the {@link EventRequestManager} for this virtual machine.                    
                </return>
            </javadoc>
            <method name="mirrorOf" type="BooleanValue" line="222"/>
            <javadoc line="222">
                Creates a {@link BooleanValue} for the given value. This value
                  can be used for setting and comparing against a value retrieved
                  from a variable or field in this virtual machine.                
                <param>
                    value a boolean for which to create the value                    
                </param>
                <return>
                    the {@link BooleanValue} for the given boolean.                    
                </return>
            </javadoc>
            <method name="mirrorOf" type="ByteValue" line="230"/>
            <javadoc line="230">
                Creates a {@link ByteValue} for the given value. This value
                  can be used for setting and comparing against a value retrieved
                  from a variable or field in this virtual machine.                
                <param>
                    value a byte for which to create the value                    
                </param>
                <return>
                    the {@link ByteValue} for the given byte.                    
                </return>
            </javadoc>
            <method name="mirrorOf" type="CharValue" line="238"/>
            <javadoc line="238">
                Creates a {@link CharValue} for the given value. This value
                  can be used for setting and comparing against a value retrieved
                  from a variable or field in this virtual machine.                
                <param>
                    value a char for which to create the value                    
                </param>
                <return>
                    the {@link CharValue} for the given char.                    
                </return>
            </javadoc>
            <method name="mirrorOf" type="ShortValue" line="246"/>
            <javadoc line="246">
                Creates a {@link ShortValue} for the given value. This value
                  can be used for setting and comparing against a value retrieved
                  from a variable or field in this virtual machine.                
                <param>
                    value a short for which to create the value                    
                </param>
                <return>
                    the {@link ShortValue} for the given short.                    
                </return>
            </javadoc>
            <method name="mirrorOf" type="IntegerValue" line="254"/>
            <javadoc line="254">
                Creates an {@link IntegerValue} for the given value. This value
                  can be used for setting and comparing against a value retrieved
                  from a variable or field in this virtual machine.                
                <param>
                    value an int for which to create the value                    
                </param>
                <return>
                    the {@link IntegerValue} for the given int.                    
                </return>
            </javadoc>
            <method name="mirrorOf" type="LongValue" line="262"/>
            <javadoc line="262">
                Creates a {@link LongValue} for the given value. This value
                  can be used for setting and comparing against a value retrieved
                  from a variable or field in this virtual machine.                
                <param>
                    value a long for which to create the value                    
                </param>
                <return>
                    the {@link LongValue} for the given long.                    
                </return>
            </javadoc>
            <method name="mirrorOf" type="FloatValue" line="270"/>
            <javadoc line="270">
                Creates a {@link FloatValue} for the given value. This value
                  can be used for setting and comparing against a value retrieved
                  from a variable or field in this virtual machine.                
                <param>
                    value a float for which to create the value                    
                </param>
                <return>
                    the {@link FloatValue} for the given float.                    
                </return>
            </javadoc>
            <method name="mirrorOf" type="DoubleValue" line="278"/>
            <javadoc line="278">
                Creates a {@link DoubleValue} for the given value. This value
                  can be used for setting and comparing against a value retrieved
                  from a variable or field in this virtual machine.                
                <param>
                    value a double for which to create the value                    
                </param>
                <return>
                    the {@link DoubleValue} for the given double.                    
                </return>
            </javadoc>
            <method name="mirrorOf" type="StringReference" line="286"/>
            <javadoc line="286">
                Creates a string in this virtual machine.
                  The created string can be used for setting and comparing against
                  a string value retrieved from a variable or field in this
                  virtual machine.                
                <param>
                    value the string to be created                    
                </param>
                <return>
                    a {@link StringReference} that mirrors the newly created
                      string in the target VM.                    
                </return>
                <throws>
                    VMCannotBeModifiedException if the VirtualMachine is read-only
                      -see {@link VirtualMachine#canBeModified()}.                    
                </throws>
            </javadoc>
            <method name="mirrorOfVoid" type="VoidValue" line="298"/>
            <javadoc line="298">
                Creates a {@link VoidValue}.  This value
                  can be passed to {@link ThreadReference#forceEarlyReturn}when a void method is to be exited.                
                <return>
                    the {@link VoidValue}.                    
                </return>
            </javadoc>
            <method name="process" type="Process" line="304"/>
            <javadoc line="304">
                Returns the {@link java.lang.Process} object for this
                  virtual machine if launched
                  by a {@link com.sun.jdi.connect.LaunchingConnector}                
                <return>
                    the {@link java.lang.Process} object for this virtual
                      machine, or null if it was not launched by a{@link com.sun.jdi.connect.LaunchingConnector}.                    
                </return>
                <throws>
                    VMCannotBeModifiedException if the VirtualMachine is read-only
                      -see {@link VirtualMachine#canBeModified()}.                    
                </throws>
            </javadoc>
            <method name="dispose" type="void" line="314"/>
            <javadoc line="314">
                Invalidates this virtual machine mirror.
                  The communication channel to the target VM is closed, and
                  the target VM prepares to accept another subsequent connection
                  from this debugger or another debugger, including the
                  following tasks:
                  &lt;ul&gt;
                  &lt;li&gt;All event requests are cancelled.
                  &lt;li&gt;All threads suspended by {@link #suspend} or by{@link ThreadReference#suspend} are resumed as many
                  times as necessary for them to run.
                  &lt;li&gt;Garbage collection is re-enabled in all cases where it was
                  disabled through {@link ObjectReference#disableCollection}.
                  &lt;/ul&gt;
                  Any current method invocations executing in the target VM
                  are continued after the disconnection. Upon completion of any such
                  method invocation, the invoking thread continues from the
                  location where it was originally stopped.
                  &lt;p&gt;
                  Resources originating in
                  this VirtualMachine (ObjectReferences, ReferenceTypes, etc.)
                  will become invalid.                
            </javadoc>
            <method name="exit" type="void" line="337"/>
            <javadoc line="337">
                Causes the mirrored VM to terminate with the given error code.
                  All resources associated with this VirtualMachine are freed.
                  If the mirrored VM is remote, the communication channel
                  to it will be closed. Resources originating in
                  this VirtualMachine (ObjectReferences, ReferenceTypes, etc.)
                  will become invalid.
                  &lt;p&gt;
                  Threads running in the mirrored VM are abruptly terminated.
                  A thread death exception is not thrown and
                  finally blocks are not run.                
                <param>
                    exitCode the exit code for the target VM.  On some platforms,
                      the exit code might be truncated, for example, to the lower order 8 bits.                    
                </param>
                <throws>
                    VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.                    
                </throws>
            </javadoc>
            <method name="canWatchFieldModification" type="boolean" line="353"/>
            <javadoc line="353">
                Determines if the target VM supports watchpoints
                  for field modification.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="canWatchFieldAccess" type="boolean" line="360"/>
            <javadoc line="360">
                Determines if the target VM supports watchpoints
                  for field access.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="canGetBytecodes" type="boolean" line="367"/>
            <javadoc line="367">
                Determines if the target VM supports the retrieval
                  of a method&apos;s bytecodes.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="canGetSyntheticAttribute" type="boolean" line="374"/>
            <javadoc line="374">
                Determines if the target VM supports the query
                  of the synthetic attribute of a method or field.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="canGetOwnedMonitorInfo" type="boolean" line="381"/>
            <javadoc line="381">
                Determines if the target VM supports the retrieval
                  of the monitors owned by a thread.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="canGetCurrentContendedMonitor" type="boolean" line="388"/>
            <javadoc line="388">
                Determines if the target VM supports the retrieval
                  of the monitor for which a thread is currently waiting.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="canGetMonitorInfo" type="boolean" line="395"/>
            <javadoc line="395">
                Determines if the target VM supports the retrieval
                  of the monitor information for an object.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="canUseInstanceFilters" type="boolean" line="402"/>
            <javadoc line="402">
                Determines if the target VM supports filtering
                  events by specific instance object.  For example,
                  see {@link com.sun.jdi.request.BreakpointRequest#addInstanceFilter}.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="canRedefineClasses" type="boolean" line="410"/>
            <javadoc line="410">
                Determines if the target VM supports any level
                  of class redefinition.                
                <see>
                    #redefineClasses                    
                </see>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="canAddMethod" type="boolean" line="419"/>
            <javadoc line="419">
                Determines if the target VM supports the addition
                  of methods when performing class redefinition.                
                <see>
                    #redefineClasses                    
                </see>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="canUnrestrictedlyRedefineClasses" type="boolean" line="428"/>
            <javadoc line="428">
                Determines if the target VM supports unrestricted
                  changes when performing class redefinition.                
                <see>
                    #redefineClasses                    
                </see>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="canPopFrames" type="boolean" line="437"/>
            <javadoc line="437">
                Determines if the target VM supports popping
                  frames of a threads stack.                
                <see>
                    ThreadReference#popFrames                    
                </see>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="canGetSourceDebugExtension" type="boolean" line="446"/>
            <javadoc line="446">
                Determines if the target VM supports getting
                  the source debug extension.                
                <see>
                    ReferenceType#sourceDebugExtension                    
                </see>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="canRequestVMDeathEvent" type="boolean" line="455"/>
            <javadoc line="455">
                Determines if the target VM supports the creation of{@link com.sun.jdi.request.VMDeathRequest}s.                
                <see>
                    com.sun.jdi.request.EventRequestManager#createVMDeathRequest                    
                </see>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="canGetMethodReturnValues" type="boolean" line="463"/>
            <javadoc line="463">
                Determines if the target VM supports the inclusion of return values
                  in{@link com.sun.jdi.event.MethodExitEvent}s.                
                <see>
                    com.sun.jdi.request.EventRequestManager#createMethodExitRequest                    
                </see>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="canGetInstanceInfo" type="boolean" line="472"/>
            <javadoc line="472">
                Determines if the target VM supports the accessing of class instances,
                  instance counts, and referring objects.                
                <see>
                    #instanceCounts                    
                </see>
                <see>
                    ReferenceType#instances(long)                    
                </see>
                <see>
                    ObjectReference#referringObjects(long)                    
                </see>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="canUseSourceNameFilters" type="boolean" line="483"/>
            <javadoc line="483">
                Determines if the target VM supports the filtering of
                  class prepare events by source name.
                  see {@link com.sun.jdi.request.ClassPrepareRequest#addSourceNameFilter}.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="canForceEarlyReturn" type="boolean" line="492"/>
            <javadoc line="492">
                Determines if the target VM supports the forcing of a method to
                  return early.                
                <see>
                    ThreadReference#forceEarlyReturn(Value)                    
                </see>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="canBeModified" type="boolean" line="501"/>
            <javadoc line="501">
                Determines if the target VM is a read-only VM.  If a method which
                  would modify the state of the VM is called on a read-only VM,
                  then {@link VMCannotBeModifiedException} is thrown.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="canRequestMonitorEvents" type="boolean" line="510"/>
            <javadoc line="510">
                Determines if the target VM supports the creation of{@link com.sun.jdi.request.MonitorContendedEnterRequest}s.{@link com.sun.jdi.request.MonitorContendedEnteredRequest}s.{@link com.sun.jdi.request.MonitorWaitRequest}s.{@link com.sun.jdi.request.MonitorWaitedRequest}s.                
                <see>
                    com.sun.jdi.request.EventRequestManager#createMonitorContendedEnterRequest                    
                </see>
                <see>
                    com.sun.jdi.request.EventRequestManager#createMonitorContendedEnteredRequest                    
                </see>
                <see>
                    com.sun.jdi.request.EventRequestManager#createMonitorWaitRequest                    
                </see>
                <see>
                    com.sun.jdi.request.EventRequestManager#createMonitorWaitedRequest                    
                </see>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="canGetMonitorFrameInfo" type="boolean" line="521"/>
            <javadoc line="521">
                Determines if the target VM supports getting which
                  frame has acquired a monitor.                
                <see>
                    com.sun.jdi.ThreadReference#ownedMonitorsAndFrames                    
                </see>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="canGetClassFileVersion" type="boolean" line="530"/>
            <javadoc line="530">
                Determines if the target VM supports reading class file
                  major and minor versions.                
                <see>
                    ReferenceType#majorVersion()                    
                </see>
                <see>
                    ReferenceType#minorVersion()                    
                </see>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="canGetConstantPool" type="boolean" line="540"/>
            <javadoc line="540">
                Determines if the target VM supports getting constant pool
                  information of a class.                
                <see>
                    ReferenceType#constantPoolCount()                    
                </see>
                <see>
                    ReferenceType#constantPool()                    
                </see>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the feature is supported,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setDefaultStratum" type="void" line="550"/>
            <javadoc line="550">
                Set this VM&apos;s default stratum (see {@link Location} for a
                  discussion of strata).  Overrides the per-class default set
                  in the class file.
                  &lt;P&gt;
                  Affects location queries (such as,{@link Location#sourceName()})
                  and the line boundaries used in
                  single stepping.                
                <param>
                    stratum the stratum to set as VM default,
                      or null to use per-class defaults.                    
                </param>
                <throws>
                    java.lang.UnsupportedOperationException if the
                      target virtual machine does not support this operation.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDefaultStratum" type="String" line="565"/>
            <javadoc line="565">
                Return this VM&apos;s default stratum.                
                <see>
                    #setDefaultStratum(String)                    
                </see>
                <see>
                    ReferenceType#defaultStratum()                    
                </see>
                <return>
                    &lt;code&gt;null&lt;/code&gt; (meaning that the per-class
                      default - {@link ReferenceType#defaultStratum()} -
                      should be used) unless the default stratum has been
                      set with{@link #setDefaultStratum(String)}.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="instanceCounts" type="long[]" line="576"/>
            <javadoc line="576">
                Returns the number of instances of each ReferenceType in the &apos;refTypes&apos;
                  list.
                  Only instances that are reachable for the purposes of garbage collection
                  are counted.
                  &lt;p&gt;
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canGetInstanceInfo()}to determine if the operation is supported.                
                <see>
                    ReferenceType#instances(long)                    
                </see>
                <see>
                    ObjectReference#referringObjects(long)                    
                </see>
                <param>
                    refTypes the list of {@link ReferenceType} objects for which counts
                      are to be obtained.                    
                </param>
                <return>
                    an array of &lt;code&gt;long&lt;/code&gt; containing one element for each
                      element in the &apos;refTypes&apos; list.  Element i of the array contains
                      the number of instances in the target VM of the ReferenceType at
                      position i in the &apos;refTypes&apos; list.
                      If the &apos;refTypes&apos; list is empty, a zero-length array is returned.
                      If a ReferenceType in refTypes has been garbage collected, zero
                      is returned for its instance count.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target virtual machine does not support this
                      operation - see{@link VirtualMachine#canGetInstanceInfo() canGetInstanceInfo()}                    
                </throws>
                <throws>
                    NullPointerException if the &apos;refTypes&apos; list is null.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="description" type="String" line="602"/>
            <javadoc line="602">
                Returns text information on the target VM and the
                  debugger support that mirrors it. No specific format
                  for this information is guaranteed.
                  Typically, this string contains version information for the
                  target VM and debugger interfaces.
                  More precise information
                  on VM and JDI versions is available through{@link #version}, {@link VirtualMachineManager#majorInterfaceVersion},
                  and {@link VirtualMachineManager#minorInterfaceVersion}                
                <return>
                    the description.                    
                </return>
            </javadoc>
            <method name="version" type="String" line="614"/>
            <javadoc line="614">
                Returns the version of the Java Runtime Environment in the target
                  VM as reported by the property &lt;code&gt;java.version&lt;/code&gt;.
                  For obtaining the JDI interface version, use{@link VirtualMachineManager#majorInterfaceVersion}and {@link VirtualMachineManager#minorInterfaceVersion}                
                <return>
                    the target VM version.                    
                </return>
            </javadoc>
            <method name="name" type="String" line="621"/>
            <javadoc line="621">
                Returns the name of the target VM as reported by the
                  property &lt;code&gt;java.vm.name&lt;/code&gt;.                
                <return>
                    the target VM name.                    
                </return>
            </javadoc>
            <declaration name="TRACE_NONE" type="int" line="627"/>
            <javadoc line="627">
                All tracing is disabled.                
            </javadoc>
            <declaration name="TRACE_SENDS" type="int" line="631"/>
            <javadoc line="631">
                Tracing enabled for JDWP packets sent to target VM.                
            </javadoc>
            <declaration name="TRACE_RECEIVES" type="int" line="635"/>
            <javadoc line="635">
                Tracing enabled for JDWP packets received from target VM.                
            </javadoc>
            <declaration name="TRACE_EVENTS" type="int" line="639"/>
            <javadoc line="639">
                Tracing enabled for internal event handling.                
            </javadoc>
            <declaration name="TRACE_REFTYPES" type="int" line="643"/>
            <javadoc line="643">
                Tracing enabled for internal managment of reference types.                
            </javadoc>
            <declaration name="TRACE_OBJREFS" type="int" line="647"/>
            <javadoc line="647">
                Tracing enabled for internal management of object references.                
            </javadoc>
            <declaration name="TRACE_ALL" type="int" line="651"/>
            <javadoc line="651">
                All tracing is enabled.                
            </javadoc>
            <method name="setDebugTraceMode" type="void" line="655"/>
            <javadoc line="655">
                Traces the activities performed by the com.sun.jdi implementation.
                  All trace information is output to System.err. The given trace
                  flags are used to limit the output to only the information
                  desired. The given flags are in effect and the corresponding
                  trace will continue until the next call to
                  this method.
                  &lt;p&gt;
                  Output is implementation dependent and trace mode may be ignored.                
                <param>
                    traceFlags identifies which kinds of tracing to enable.                    
                </param>
            </javadoc>
        </interface>
    </source>