<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi">
        <import package="java.util.List"/>
        <interface name="Location">
            <implements interface="Mirror"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Location"/>
                </type_params>
            </implements>
            <javadoc line="3">
                A point within the executing code of the target VM.
                  Locations are used to identify the current position of
                  a suspended thread (analogous to an instruction pointer or
                  program counter register in native programs). They are also used
                  to identify the position at which to set a breakpoint.
                  &lt;p&gt;
                  The availability of a line number for a location will
                  depend on the level of debugging information available from the
                  target VM.
                  &lt;p&gt;
                  Several mirror interfaces have locations. Each such mirror
                  extends a {@link Locatable} interface.
                  &lt;p&gt;
                  &lt;a name=&quot;strata&quot;&gt;&lt;b&gt;Strata&lt;/b&gt;&lt;/a&gt;
                  &lt;p&gt;
                  The source information for a Location is dependent on the
                  &lt;i&gt;stratum&lt;/i&gt; which is used. A stratum is a source code
                  level within a sequence of translations.  For example,
                  say the baz program is written in the programming language
                  &quot;Foo&quot; then translated to the language &quot;Bar&quot; and finally
                  translated into the Java programming language.  The
                  Java programming language stratum is named
                  &lt;code&gt;&quot;Java&quot;&lt;/code&gt;, let&apos;s say the other strata are named
                  &quot;Foo&quot; and &quot;Bar&quot;.  A given location (as viewed by the{@link #sourceName()} and {@link #lineNumber()} methods)
                  might be at line 14 of &quot;baz.foo&quot; in the &lt;code&gt;&quot;Foo&quot;&lt;/code&gt;
                  stratum, line 23 of &quot;baz.bar&quot; in the &lt;code&gt;&quot;Bar&quot;&lt;/code&gt;
                  stratum and line 71 of the &lt;code&gt;&quot;Java&quot;&lt;/code&gt; stratum.
                  Note that while the Java programming language may have
                  only one source file for a reference type, this restriction
                  does not apply to other strata - thus each Location should
                  be consulted to determine its source path.
                  Queries which do not specify a stratum
                  ({@link #sourceName()}, {@link #sourcePath()} and{@link #lineNumber()}) use the VM&apos;s default stratum
                  ({@link VirtualMachine#getDefaultStratum()}).
                  If the specified stratum (whether explicitly specified
                  by a method parameter or implicitly as the VM&apos;s default)
                  is &lt;code&gt;null&lt;/code&gt; or is not available in the declaring
                  type, the declaring type&apos;s default stratum is used
                  ({@link #declaringType()}.{@link ReferenceType#defaultStratum()defaultStratum()}).  Note that in the normal case, of code
                  that originates as Java programming language source, there
                  will be only one stratum (&lt;code&gt;&quot;Java&quot;&lt;/code&gt;) and it will be
                  returned as the default.  To determine the available strata
                  use {@link ReferenceType#availableStrata()}.                
                <see>
                    com.sun.jdi.request.EventRequestManager                    
                </see>
                <see>
                    StackFrame                    
                </see>
                <see>
                    com.sun.jdi.event.BreakpointEvent                    
                </see>
                <see>
                    com.sun.jdi.event.ExceptionEvent                    
                </see>
                <see>
                    Locatable                    
                </see>
                <author>
                    Robert Field                    
                </author>
                <author>
                    Gordon Hirsch                    
                </author>
                <author>
                    James McIlree                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="declaringType" type="ReferenceType" line="58"/>
            <javadoc line="58">
                Gets the type to which this Location belongs. Normally
                  the declaring type is a {@link ClassType}, but executable
                  locations also may exist within the static initializer of an{@link InterfaceType}.                
                <return>
                    the {@link ReferenceType} containing this Location.                    
                </return>
            </javadoc>
            <method name="method" type="Method" line="65"/>
            <javadoc line="65">
                Gets the method containing this Location.                
                <return>
                    the location's {@link Method}.                    
                </return>
            </javadoc>
            <method name="codeIndex" type="long" line="70"/>
            <javadoc line="70">
                Gets the code position within this location&apos;s method.                
                <return>
                    the long representing the position within the method
                      or -1 if location is within a native method.                    
                </return>
            </javadoc>
            <method name="sourceName" type="String" line="76"/>
            <javadoc line="76">
                Gets an identifing name for the source corresponding to
                  this location.
                  &lt;P&gt;
                  This method is equivalent to
                  &lt;code&gt;sourceName(vm.getDefaultStratum())&lt;/code&gt; -
                  see {@link #sourceName(String)}for more information.                
                <return>
                    a string specifying the source                    
                </return>
                <throws>
                    AbsentInformationException if the source name is not
                      known                    
                </throws>
            </javadoc>
            <method name="sourceName" type="String" line="88"/>
            <javadoc line="88">
                Gets an identifing name for the source corresponding to
                  this location. Interpretation of this string is the
                  responsibility of the source repository mechanism.
                  &lt;P&gt;
                  Returned name is for the specified &lt;i&gt;stratum&lt;/i&gt;
                  (see the {@link Location class comment} for a
                  description of strata).
                  &lt;P&gt;
                  The returned string is the unqualified name of the source
                  file for this Location.  For example,
                  &lt;CODE&gt;java.lang.Thread&lt;/CODE&gt; would return
                  &lt;CODE&gt;&quot;Thread.java&quot;&lt;/CODE&gt;.                
                <param>
                    stratum The stratum to retrieve information from
                      or <code>null</code> for the declaring type's
                      default stratum.                    
                </param>
                <return>
                    a string specifying the source                    
                </return>
                <throws>
                    AbsentInformationException if the source name is not
                      known                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="sourcePath" type="String" line="110"/>
            <javadoc line="110">
                Gets the path to the source corresponding to this
                  location.
                  &lt;P&gt;
                  This method is equivalent to
                  &lt;code&gt;sourcePath(vm.getDefaultStratum())&lt;/code&gt; -
                  see {@link #sourcePath(String)}for more information.                
                <return>
                    a string specifying the source                    
                </return>
                <throws>
                    AbsentInformationException if the source name is not
                      known                    
                </throws>
            </javadoc>
            <method name="sourcePath" type="String" line="122"/>
            <javadoc line="122">
                Gets the path to the source corresponding to this
                  location. Interpretation of this string is the
                  responsibility of the source repository mechanism.
                  &lt;P&gt;
                  Returned path is for the specified &lt;i&gt;stratum&lt;/i&gt;
                  (see the {@link Location class comment} for a
                  description of strata).
                  &lt;P&gt;
                  In the reference implementation, for strata which
                  do not explicitly specify source path (the Java
                  programming language stratum never does), the returned
                  string is the package name of {@link #declaringType()}converted to a platform dependent path followed by the
                  unqualified name of the source file for this Location
                  ({@link #sourceName sourceName(stratum)}).
                  For example, on a
                  Windows platform, &lt;CODE&gt;java.lang.Thread&lt;/CODE&gt;
                  would return
                  &lt;CODE&gt;&quot;java\lang\Thread.java&quot;&lt;/CODE&gt;.                
                <param>
                    stratum The stratum to retrieve information from
                      or <code>null</code> for the declaring type's
                      default stratum.                    
                </param>
                <return>
                    a string specifying the source                    
                </return>
                <throws>
                    AbsentInformationException if the source name is not
                      known                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="lineNumber" type="int" line="150"/>
            <javadoc line="150">
                Gets the line number of this Location.
                  &lt;P&gt;
                  This method is equivalent to
                  &lt;code&gt;lineNumber(vm.getDefaultStratum())&lt;/code&gt; -
                  see {@link #lineNumber(String)}for more information.                
                <return>
                    an int specifying the line in the source, returns
                      -1 if the information is not available; specifically, always
                      returns -1 for native methods.                    
                </return>
            </javadoc>
            <method name="lineNumber" type="int" line="161"/>
            <javadoc line="161">
                The line number of this Location.  The line number is
                  relative to the source specified by{@link #sourceName(String) sourceName(stratum)}.
                  &lt;P&gt;
                  Returned line number is for the specified &lt;i&gt;stratum&lt;/i&gt;
                  (see the {@link Location class comment} for a
                  description of strata).                
                <param>
                    stratum The stratum to retrieve information from
                      or <code>null</code> for the declaring type's
                      default stratum.                    
                </param>
                <return>
                    an int specifying the line in the source, returns
                      -1 if the information is not available; specifically, always
                      returns -1 for native methods.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="177"/>
            <javadoc line="177">
                Compares the specified Object with this Location for equality.                
                <return>
                    true if the Object is a Location and if it refers to
                      the same point in the same VM as this Location.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="183"/>
            <javadoc line="183">
                Returns the hash code value for this Location.                
                <return>
                    the integer hash code                    
                </return>
            </javadoc>
        </interface>
    </source>