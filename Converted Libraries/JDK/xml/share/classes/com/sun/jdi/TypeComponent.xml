<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi">
        <interface name="TypeComponent">
            <implements interface="Mirror"/>
            <implements interface="Accessible"/>
            <javadoc line="28">
                An entity declared within a user defined
                  type (class or interface).
                  This interface is the root of the type
                  component hierarchy which
                  includes {@link Field} and {@link Method}.
                  Type components of the same name declared in different classes
                  (including those related by inheritance) have different
                  TypeComponent objects.
                  TypeComponents can be used alone to retrieve static information
                  about their declaration, or can be used in conjunction with a{@link ReferenceType} or {@link ObjectReference} to access values
                  or invoke, as applicable.                
                <author>
                    Robert Field                    
                </author>
                <author>
                    Gordon Hirsch                    
                </author>
                <author>
                    James McIlree                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="name" type="String" line="49"/>
            <javadoc line="49">
                Gets the name of this type component.
                  &lt;P&gt;
                  Note: for fields, this is the field name; for methods,
                  this is the method name; for constructors, this is &amp;lt;init&amp;gt;;
                  for static initializers, this is &amp;lt;clinit&amp;gt;.                
                <return>
                    a string containing the name.                    
                </return>
            </javadoc>
            <method name="signature" type="String" line="60"/>
            <javadoc line="60">
                Gets the JNI-style signature for this type component. The
                  signature is encoded type information as defined
                  in the JNI documentation. It is a convenient, compact format for
                  for manipulating type information internally, not necessarily
                  for display to an end user. See {@link Field#typeName} and{@link Method#returnTypeName} for ways to help get a more readable
                  representation of the type.                
                <see>
                    <a href="doc-files/signature.html">Type Signatures</a>                    
                </see>
                <return>
                    a string containing the signature                    
                </return>
            </javadoc>
            <method name="genericSignature" type="String" line="74"/>
            <javadoc line="74">
                Gets the generic signature for this TypeComponent if there is one.
                  Generic signatures are described in the
                  &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.                
                <return>
                    a string containing the generic signature, or <code>null</code>
                      if there is no generic signature.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="declaringType" type="ReferenceType" line="86"/>
            <javadoc line="86">
                Returns the type in which this component was declared. The
                  returned {@link ReferenceType} mirrors either a class or an
                  interface in the target VM.                
                <return>
                    a {@link ReferenceType} for the type that declared
                      this type component.                    
                </return>
            </javadoc>
            <method name="isStatic" type="boolean" line="96"/>
            <javadoc line="96">
                Determines if this TypeComponent is static.
                  Return value is undefined for constructors and static initializers.                
                <return>
                    <code>true</code> if this type component was declared
                      static; false otherwise.                    
                </return>
            </javadoc>
            <method name="isFinal" type="boolean" line="105"/>
            <javadoc line="105">
                Determines if this TypeComponent is final.
                  Return value is undefined for constructors and static initializers.                
                <return>
                    <code>true</code> if this type component was declared
                      final; false otherwise.                    
                </return>
            </javadoc>
            <method name="isSynthetic" type="boolean" line="114"/>
            <javadoc line="114">
                Determines if this TypeComponent is synthetic. Synthetic members
                  are generated by the compiler and are not present in the source
                  code for the containing class.
                  &lt;p&gt;
                  Not all target VMs support this query. See{@link VirtualMachine#canGetSyntheticAttribute} to determine if the
                  operation is supported.                
                <return>
                    <code>true</code> if this type component is synthetic;
                      <code>false</code> otherwise.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if the target
                      VM cannot provide information on synthetic attributes.                    
                </throws>
            </javadoc>
        </interface>
    </source>