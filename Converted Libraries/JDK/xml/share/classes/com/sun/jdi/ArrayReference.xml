<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi">
        <import package="java.util.List"/>
        <interface name="ArrayReference">
            <implements interface="ObjectReference"/>
            <javadoc line="30">
                Provides access to an array object and its components in the target VM.
                  Each array component is mirrored by a {@link Value} object.
                  The array components, in aggregate, are placed in {@link java.util.List}objects instead of arrays for consistency with the rest of the API and
                  for interoperability with other APIs.                
                <author>
                    Robert Field                    
                </author>
                <author>
                    Gordon Hirsch                    
                </author>
                <author>
                    James McIlree                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="length" type="int" line="44"/>
            <javadoc line="44">
                Returns the number of components in this array.                
                <return>
                    the integer count of components in this array.                    
                </return>
            </javadoc>
            <method name="getValue" type="Value" line="51"/>
            <javadoc line="51">
                Returns an array component value.                
                <param>
                    index the index of the component to retrieve                    
                </param>
                <return>
                    the {@link Value} at the given index.                    
                </return>
                <throws>
                    java.lang.IndexOutOfBoundsException if
                      &lt;CODE&gt;&lt;I&gt;index&lt;/I&gt;&lt;/CODE&gt; is outside the range of this array,
                      that is, if either of the following are true:
                      &lt;PRE&gt;
                      &lt;I&gt;index&lt;/I&gt; &amp;lt; 0
                      &lt;I&gt;index&lt;/I&gt; &amp;gt;= {@link #length() length()} &lt;/PRE&gt;                    
                </throws>
            </javadoc>
            <method name="getValues" type="List<Value>" line="65"/>
            <javadoc line="65">
                Returns all of the components in this array.                
                <return>
                    a list of {@link Value} objects, one for each array
                      component ordered by array index.  For zero length arrays,
                      an empty list is returned.                    
                </return>
            </javadoc>
            <method name="getValues" type="List<Value>" line="74"/>
            <javadoc line="74">
                Returns a range of array components.                
                <param>
                    index the index of the first component to retrieve                    
                </param>
                <param>
                    length the number of components to retrieve, or -1 to
                      retrieve all components to the end of this array.                    
                </param>
                <return>
                    a list of {@link Value} objects, one for each requested
                      array component ordered by array index.  When there are
                      no elements in the specified range (e.g.
                      &lt;CODE&gt;&lt;I&gt;length&lt;/I&gt;&lt;/CODE&gt; is zero) an empty list is returned                    
                </return>
                <throws>
                    java.lang.IndexOutOfBoundsException if the range
                      specified with &lt;CODE&gt;&lt;I&gt;index&lt;/I&gt;&lt;/CODE&gt; and
                      &lt;CODE&gt;&lt;I&gt;length&lt;/I&gt;&lt;/CODE&gt; is not within the range of the array,
                      that is, if either of the following are true:
                      &lt;PRE&gt;
                      &lt;I&gt;index&lt;/I&gt; &amp;lt; 0
                      &lt;I&gt;index&lt;/I&gt; &amp;gt; {@link #length() length()} &lt;/PRE&gt;
                      or if &lt;CODE&gt;&lt;I&gt;length&lt;/I&gt; != -1&lt;/CODE&gt; and
                      either of the following are true:
                      &lt;PRE&gt;
                      &lt;I&gt;length&lt;/I&gt; &amp;lt; 0
                      &lt;I&gt;index&lt;/I&gt; + &lt;I&gt;length&lt;/I&gt; &amp;gt;  {@link #length() length()}&lt;/PRE&gt;                    
                </throws>
            </javadoc>
            <method name="setValue" type="void" line="100"/>
            <javadoc line="100">
                Replaces an array component with another value.
                  &lt;p&gt;
                  Object values must be assignment compatible with the component type
                  (This implies that the component type must be loaded through the
                  declaring class&apos;s class loader). Primitive values must be
                  either assignment compatible with the component type or must be
                  convertible to the component type without loss of information.
                  See JLS section 5.2 for more information on assignment
                  compatibility.                
                <param>
                    value the new value                    
                </param>
                <param>
                    index the index of the component to set                    
                </param>
                <throws>
                    java.lang.IndexOutOfBoundsException if
                      &lt;CODE&gt;&lt;I&gt;index&lt;/I&gt;&lt;/CODE&gt; is outside the range of this array,
                      that is, if either of the following are true:
                      &lt;PRE&gt;
                      &lt;I&gt;index&lt;/I&gt; &amp;lt; 0
                      &lt;I&gt;index&lt;/I&gt; &amp;gt;= {@link #length() length()} &lt;/PRE&gt;                    
                </throws>
                <throws>
                    InvalidTypeException if the type of &lt;CODE&gt;&lt;I&gt;value&lt;/I&gt;&lt;/CODE&gt;
                      is not compatible with the declared type of array components.                    
                </throws>
                <throws>
                    ClassNotLoadedException if the array component type
                      has not yet been loaded
                      through the appropriate class loader.                    
                </throws>
                <throws>
                    VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.                    
                </throws>
                <see>
                    ArrayType#componentType()                    
                </see>
            </javadoc>
            <method name="setValues" type="void" line="132"/>
            <javadoc line="132">
                Replaces all array components with other values. If the given
                  list is larger in size than the array, the values at the
                  end of the list are ignored.
                  &lt;p&gt;
                  Object values must be assignment compatible with the element type
                  (This implies that the component type must be loaded through the
                  enclosing class&apos;s class loader). Primitive values must be
                  either assignment compatible with the component type or must be
                  convertible to the component type without loss of information.
                  See JLS section 5.2 for more information on assignment
                  compatibility.                
                <param>
                    values a list of {@link Value} objects to be placed
                      in this array.  If &lt;CODE&gt;&lt;I&gt;values&lt;/I&gt;.size()&lt;/CODE&gt; is
                      less that the length of the array, the first
                      &lt;CODE&gt;&lt;I&gt;values&lt;/I&gt;.size()&lt;/CODE&gt; elements are set.                    
                </param>
                <throws>
                    InvalidTypeException if any of the
                      new &lt;CODE&gt;&lt;I&gt;values&lt;/I&gt;&lt;/CODE&gt;
                      is not compatible with the declared type of array components.                    
                </throws>
                <throws>
                    ClassNotLoadedException if the array component
                      type has not yet been loaded
                      through the appropriate class loader.                    
                </throws>
                <throws>
                    VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.                    
                </throws>
                <see>
                    ArrayType#componentType()                    
                </see>
            </javadoc>
            <method name="setValues" type="void" line="163"/>
            <javadoc line="163">
                Replaces a range of array components with other values.
                  &lt;p&gt;
                  Object values must be assignment compatible with the component type
                  (This implies that the component type must be loaded through the
                  enclosing class&apos;s class loader). Primitive values must be
                  either assignment compatible with the component type or must be
                  convertible to the component type without loss of information.
                  See JLS section 5.2 for more information on assignment
                  compatibility.                
                <param>
                    index the index of the first component to set.                    
                </param>
                <param>
                    values a list of {@link Value} objects to be placed
                      in this array.                    
                </param>
                <param>
                    srcIndex the index of the first source value to use.                    
                </param>
                <param>
                    length the number of components to set, or -1 to set
                      all components to the end of this array or the end of
                      &lt;CODE&gt;&lt;I&gt;values&lt;/I&gt;&lt;/CODE&gt; (whichever comes first).                    
                </param>
                <throws>
                    InvalidTypeException if any element of
                      &lt;CODE&gt;&lt;I&gt;values&lt;/I&gt;&lt;/CODE&gt;
                      is not compatible with the declared type of array components.                    
                </throws>
                <throws>
                    java.lang.IndexOutOfBoundsException if the
                      array range specified with
                      &lt;CODE&gt;&lt;I&gt;index&lt;/I&gt;&lt;/CODE&gt; and  &lt;CODE&gt;&lt;I&gt;length&lt;/I&gt;&lt;/CODE&gt;
                      is not within the range of the array,
                      or if the source range specified with
                      &lt;CODE&gt;&lt;I&gt;srcIndex&lt;/I&gt;&lt;/CODE&gt; and &lt;CODE&gt;&lt;I&gt;length&lt;/I&gt;&lt;/CODE&gt;
                      is not within &lt;CODE&gt;&lt;I&gt;values&lt;/I&gt;&lt;/CODE&gt;,
                      that is, if any of the following are true:
                      &lt;PRE&gt;
                      &lt;I&gt;index&lt;/I&gt; &amp;lt; 0
                      &lt;I&gt;index&lt;/I&gt; &amp;gt; {@link #length() length()}&lt;I&gt;srcIndex&lt;/I&gt; &amp;lt; 0
                      &lt;I&gt;srcIndex&lt;/I&gt; &amp;gt; &lt;I&gt;values&lt;/I&gt;.size() &lt;/PRE&gt;
                      or if &lt;CODE&gt;&lt;I&gt;length&lt;/I&gt; != -1&lt;/CODE&gt; and any of the
                      following are true:
                      &lt;PRE&gt;
                      &lt;I&gt;length&lt;/I&gt; &amp;lt; 0
                      &lt;I&gt;index&lt;/I&gt; + &lt;I&gt;length&lt;/I&gt; &amp;gt; {@link #length() length()}&lt;I&gt;srcIndex&lt;/I&gt; + &lt;I&gt;length&lt;/I&gt; &amp;gt; &lt;I&gt;values&lt;/I&gt;.size() &lt;/PRE&gt;                    
                </throws>
                <throws>
                    VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.                    
                </throws>
                <see>
                    ArrayType#componentType()                    
                </see>
            </javadoc>
        </interface>
    </source>