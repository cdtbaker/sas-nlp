<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi">
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <interface name="ReferenceType">
            <implements interface="Type"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="ReferenceType"/>
                </type_params>
            </implements>
            <implements interface="Accessible"/>
            <javadoc line="31">
                The type of an object in a target VM. ReferenceType encompasses
                  classes, interfaces, and array types as defined in
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.
                  All ReferenceType objects belong to one of the following
                  subinterfaces:{@link ClassType} for classes,{@link InterfaceType} for interfaces, and{@link ArrayType} for arrays.
                  Note that primitive classes (for example, the{@link ClassObjectReference#reflectedType() reflected type} of{@link java.lang.Integer#TYPE Integer.TYPE})
                  are represented as ClassType.
                  The VM creates Class objects for all three, so from the VM perspective,
                  each ReferenceType maps to a distinct Class object.
                  &lt;p&gt;
                  ReferenceTypes can
                  be obtained by querying a particular {@link ObjectReference} for its
                  type or by getting a list of all reference types from the{@link VirtualMachine}.
                  &lt;p&gt;
                  ReferenceType provides access to static type information such as
                  methods and fields and provides access to dynamic type
                  information such as the corresponding Class object and the classloader.
                  &lt;p&gt;
                  Any method on &lt;code&gt;ReferenceType&lt;/code&gt; which directly or
                  indirectly takes &lt;code&gt;ReferenceType&lt;/code&gt; as an parameter may throw{@link com.sun.jdi.VMDisconnectedException} if the target VM is
                  disconnected and the {@link com.sun.jdi.event.VMDisconnectEvent} has been or is
                  available to be read from the {@link com.sun.jdi.event.EventQueue}.
                  &lt;p&gt;
                  Any method on &lt;code&gt;ReferenceType&lt;/code&gt; which directly or
                  indirectly takes &lt;code&gt;ReferenceType&lt;/code&gt; as an parameter may throw{@link com.sun.jdi.VMOutOfMemoryException} if the target VM has run out of memory.
                  &lt;p&gt;
                  Any method on &lt;code&gt;ReferenceType&lt;/code&gt; or which directly or indirectly takes
                  &lt;code&gt;ReferenceType&lt;/code&gt; as parameter may throw{@link com.sun.jdi.ObjectCollectedException} if the mirrored type has been unloaded.                
                <see>
                    ObjectReference                    
                </see>
                <see>
                    ObjectReference#referenceType                    
                </see>
                <see>
                    VirtualMachine                    
                </see>
                <see>
                    VirtualMachine#allClasses                    
                </see>
                <author>
                    Robert Field                    
                </author>
                <author>
                    Gordon Hirsch                    
                </author>
                <author>
                    James McIlree                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="name" type="String" line="84"/>
            <javadoc line="84">
                Gets the fully qualified name of this type. The returned name
                  is formatted as it might appear in a Java programming langauge
                  declaration for objects of this type.
                  &lt;p&gt;
                  For primitive classes
                  the returned name is the name of the corresponding primitive
                  type; for example, &quot;int&quot; is returned as the name of the class
                  represented by {@link java.lang.Integer#TYPE Integer.TYPE}.                
                <return>
                    a string containing the type name.                    
                </return>
            </javadoc>
            <method name="genericSignature" type="String" line="97"/>
            <javadoc line="97">
                Gets the generic signature for this type if there is one.
                  Generic signatures are described in the
                  &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.                
                <return>
                    a string containing the generic signature, or <code>null</code>
                      if there is no generic signature.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="classLoader" type="ClassLoaderReference" line="109"/>
            <javadoc line="109">
                Gets the classloader object which loaded the class corresponding
                  to this type.                
                <return>
                    a {@link ClassLoaderReference} which mirrors the classloader,
                      or <code>null</code> if the class was loaded through the bootstrap class
                      loader.                    
                </return>
            </javadoc>
            <method name="sourceName" type="String" line="119"/>
            <javadoc line="119">
                Gets an identifying name for the source corresponding to the
                  declaration of this type. Interpretation of this string is
                  the responsibility of the source repository mechanism.
                  &lt;P&gt;
                  The returned name is dependent on VM&apos;s default stratum
                  ({@link VirtualMachine#getDefaultStratum()}).
                  In the reference implementation, when using the base stratum,
                  the returned string is the
                  unqualified name of the source file containing the declaration
                  of this type.  In other strata the returned source name is
                  the first source name for that stratum.  Since other languages
                  may have more than one source name for a reference type,
                  the use of {@link Location#sourceName()} or{@link #sourceNames(String)} is preferred.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes,
                  AbsentInformationException is always thrown.                
                <return>
                    the string source file name                    
                </return>
                <throws>
                    AbsentInformationException if the source name is not
                      known                    
                </throws>
            </javadoc>
            <method name="sourceNames" type="List<String>" line="144"/>
            <javadoc line="144">
                Gets the identifying names for all the source corresponding to the
                  declaration of this type. Interpretation of these names is
                  the responsibility of the source repository mechanism.
                  &lt;P&gt;
                  The returned names are for the specified stratum
                  (see {@link Location} for a description of strata).
                  In the reference implementation, when using the Java
                  programming language stratum,
                  the returned List contains one element: a String which is the
                  unqualified name of the source file containing the declaration
                  of this type.  In other strata the returned source names are
                  all the source names defined for that stratum.                
                <param>
                    stratum The stratum to retrieve information from
                      or <code>null</code> for the declaring type's
                      default stratum.                    
                </param>
                <return>
                    a List of String objects each representing a source name                    
                </return>
                <throws>
                    AbsentInformationException if the source names are not
                      known.
                      <p>
                      For arrays ({@link ArrayType}) and primitive classes,
                      AbsentInformationException is always thrown.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="sourcePaths" type="List<String>" line="174"/>
            <javadoc line="174">
                Gets the paths to the source corresponding to the
                  declaration of this type. Interpretation of these paths is
                  the responsibility of the source repository mechanism.
                  &lt;P&gt;
                  The returned paths are for the specified stratum
                  (see {@link Location} for a description of strata).
                  In the reference implementation, for strata which
                  do not explicitly specify source path (the Java
                  programming language stratum never does), the returned
                  strings are the {@link #sourceNames(String)} prefixed by
                  the package name of this ReferenceType
                  converted to a platform dependent path.
                  For example, on a Windows platform,
                  &lt;CODE&gt;java.lang.Thread&lt;/CODE&gt;
                  would return a List containing one element:
                  &lt;CODE&gt;&quot;java\lang\Thread.java&quot;&lt;/CODE&gt;.                
                <param>
                    stratum The stratum to retrieve information from
                      or <code>null</code> for the declaring type's
                      default stratum.                    
                </param>
                <return>
                    a List of String objects each representing a source path                    
                </return>
                <throws>
                    AbsentInformationException if the source names are not
                      known.
                      <p>
                      For arrays ({@link ArrayType}) and primitive classes,
                      AbsentInformationException is always thrown.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="sourceDebugExtension" type="String" line="208"/>
            <javadoc line="208">
                Get the source debug extension of this type.
                  &lt;p&gt;
                  Not all target virtual machines support this operation.
                  Use{@link VirtualMachine#canGetSourceDebugExtension() canGetSourceDebugExtension()}to determine if the operation is supported.                
                <return>
                    as a string the source debug extension attribute                    
                </return>
                <throws>
                    AbsentInformationException if the extension is not
                      specified                    
                </throws>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target virtual machine does not support this
                      operation - see{@link VirtualMachine#canGetSourceDebugExtension() canGetSourceDebugExtension()},                    
                </throws>
            </javadoc>
            <method name="isStatic" type="boolean" line="225"/>
            <javadoc line="225">
                Determines if this type was declared static. Only nested types,
                  can be declared static, so &lt;code&gt;false&lt;/code&gt; is returned
                  for any package-level type, array type, or primitive class.                
                <return>
                    <code>true</code> if this type is static; false otherwise.                    
                </return>
            </javadoc>
            <method name="isAbstract" type="boolean" line="234"/>
            <javadoc line="234">
                Determines if this type was declared abstract.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes,
                  the return value is undefined.                
                <return>
                    <code>true</code> if this type is abstract; false otherwise.                    
                </return>
            </javadoc>
            <method name="isFinal" type="boolean" line="244"/>
            <javadoc line="244">
                Determines if this type was declared final.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes,
                  the return value is always true.                
                <return>
                    <code>true</code> if this type is final; false otherwise.                    
                </return>
            </javadoc>
            <method name="isPrepared" type="boolean" line="254"/>
            <javadoc line="254">
                Determines if this type has been prepared. See the JVM
                  specification for a definition of class preparation.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes,
                  the return value is undefined.                
                <return>
                    <code>true</code> if this type is prepared; false otherwise.                    
                </return>
            </javadoc>
            <method name="isVerified" type="boolean" line="265"/>
            <javadoc line="265">
                Determines if this type has been verified. See the JVM
                  specification for a definition of class verification.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes,
                  the return value is undefined.                
                <return>
                    <code>true</code> if this type is verified; false otherwise.                    
                </return>
            </javadoc>
            <method name="isInitialized" type="boolean" line="276"/>
            <javadoc line="276">
                Determines if this type has been initialized. See the JVM
                  specification for a definition of class verification.
                  For {@link InterfaceType}, this method always returns the
                  same value as {@link #isPrepared()}.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes,
                  the return value is undefined.                
                <return>
                    <code>true</code> if this type is initialized; false otherwise.                    
                </return>
            </javadoc>
            <method name="failedToInitialize" type="boolean" line="289"/>
            <javadoc line="289">
                Determines if initialization failed for this class. See the JVM
                  specification for details on class initialization.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes,
                  the return value is undefined.                
                <return>
                    <code>true</code> if initialization was attempted and
                      failed; false otherwise.                    
                </return>
            </javadoc>
            <method name="fields" type="List<Field>" line="301"/>
            <javadoc line="301">
                Returns a list containing each {@link Field} declared in this type.
                  Inherited fields are not included. Any synthetic fields created
                  by the compiler are included in the list.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes, the returned
                  list is always empty.                
                <return>
                    a list {@link Field} objects; the list has length 0
                      if no fields exist.                    
                </return>
                <throws>
                    ClassNotPreparedException if this class not yet been
                      prepared.                    
                </throws>
            </javadoc>
            <method name="visibleFields" type="List<Field>" line="316"/>
            <javadoc line="316">
                Returns a list containing each unhidden and unambiguous {@link Field}in this type.
                  Each field that can be accessed from the class
                  or its instances with its simple name is included. Fields that
                  are ambiguously multiply inherited or fields that are hidden by
                  fields with the same name in a more recently inherited class
                  cannot be accessed
                  by their simple names and are not included in the returned
                  list. All other inherited fields are included.
                  See JLS section 8.3 for details.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes, the returned
                  list is always empty.                
                <return>
                    a List of {@link Field} objects; the list has length
                      0 if no visible fields exist.                    
                </return>
                <throws>
                    ClassNotPreparedException if this class not yet been
                      prepared.                    
                </throws>
            </javadoc>
            <method name="allFields" type="List<Field>" line="338"/>
            <javadoc line="338">
                Returns a list containing each {@link Field} declared in this type,
                  and its superclasses, implemented interfaces, and/or superinterfaces.
                  All declared and inherited
                  fields are included, regardless of whether they are hidden or
                  multiply inherited.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes, the returned
                  list is always empty.                
                <return>
                    a List of {@link Field} objects; the list has length
                      0 if no fields exist.                    
                </return>
                <throws>
                    ClassNotPreparedException if this class not yet been
                      prepared.                    
                </throws>
            </javadoc>
            <method name="fieldByName" type="Field" line="355"/>
            <javadoc line="355">
                Finds the visible {@link Field} with the given
                  non-ambiguous name. This method follows the
                  inheritance rules specified in the JLS (8.3.3) to determine
                  visibility.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes, the returned
                  value is always null.                
                <param>
                    fieldName a String containing the name of desired field.                    
                </param>
                <return>
                    a {@link Field} object which mirrors the found field, or
                      null if there is no field with the given name or if the given
                      name is ambiguous.                    
                </return>
                <throws>
                    ClassNotPreparedException if this class not yet been
                      prepared.                    
                </throws>
            </javadoc>
            <method name="methods" type="List<Method>" line="373"/>
            <javadoc line="373">
                Returns a list containing each {@link Method} declared
                  directly in this type.
                  Inherited methods are not included. Constructors,
                  the initialization method if any, and any synthetic methods created
                  by the compiler are included in the list.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes, the returned
                  list is always empty.                
                <return>
                    a list {@link Method} objects; the list has length 0
                      if no methods exist.                    
                </return>
                <throws>
                    ClassNotPreparedException if this class not yet been
                      prepared.                    
                </throws>
            </javadoc>
            <method name="visibleMethods" type="List<Method>" line="390"/>
            <javadoc line="390">
                Returns a list containing each {@link Method}declared or inherited by this type. Methods from superclasses
                  or superinterfaces that that have been hidden or overridden
                  are not included.
                  &lt;p&gt;
                  Note that despite this exclusion, multiple inherited methods
                  with the same signature can be present in the returned list, but
                  at most one can be a member of a {@link ClassType}.
                  See JLS section 8.4.6 for details.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes, the returned
                  list is always empty.                
                <return>
                    a List of {@link Method} objects; the list has length
                      0 if no visible methods exist.                    
                </return>
                <throws>
                    ClassNotPreparedException if this class not yet been
                      prepared.                    
                </throws>
            </javadoc>
            <method name="allMethods" type="List<Method>" line="411"/>
            <javadoc line="411">
                Returns a list containing each {@link Method} declared in this type,
                  and its superclasses, implemented interfaces, and/or superinterfaces.
                  All declared and inherited
                  methods are included, regardless of whether they are hidden or
                  overridden.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes, the returned
                  list is always empty.                
                <return>
                    a List of {@link Method} objects; the list has length
                      0 if no methods exist.                    
                </return>
                <throws>
                    ClassNotPreparedException if this class not yet been
                      prepared.                    
                </throws>
            </javadoc>
            <method name="methodsByName" type="List<Method>" line="428"/>
            <javadoc line="428">
                Returns a List containing each visible {@link Method} that
                  has the given name.  This is most commonly used to
                  find overloaded methods.
                  &lt;p&gt;
                  Overridden and hidden methods are not included.
                  See JLS (8.4.6) for details.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes, the returned
                  list is always empty.                
                <param>
                    name the name of the method to find.                    
                </param>
                <return>
                    a List of {@link Method} objects that match the given
                      name; the list has length 0 if no matching methods are found.                    
                </return>
                <throws>
                    ClassNotPreparedException if this class not yet been
                      prepared.                    
                </throws>
            </javadoc>
            <method name="methodsByName" type="List<Method>" line="447"/>
            <javadoc line="447">
                Returns a List containing each visible {@link Method} that
                  has the given name and signature.
                  The signature string is the
                  JNI signature for the target method:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;()V&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;([Ljava/lang/String;)V&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;(IIII)Z&lt;/code&gt;
                  &lt;/ul&gt;
                  This method follows the inheritance rules specified
                  in the JLS (8.4.6) to determine visibility.
                  &lt;p&gt;
                  At most one method in the list is a concrete method and a
                  component of {@link ClassType}; any other methods in the list
                  are abstract. Use {@link ClassType#concreteMethodByName} to
                  retrieve only the matching concrete method.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes, the returned
                  list is always empty.                
                <param>
                    name the name of the method to find.                    
                </param>
                <param>
                    signature the signature of the method to find                    
                </param>
                <return>
                    a List of {@link Method} objects that match the given
                      name and signature; the list has length 0 if no matching methods
                      are found.                    
                </return>
                <throws>
                    ClassNotPreparedException if this class not yet been
                      prepared.                    
                </throws>
            </javadoc>
            <method name="nestedTypes" type="List<ReferenceType>" line="478"/>
            <javadoc line="478">
                Returns a List containing {@link ReferenceType} objects that are
                  declared within this type and are currently loaded into the Virtual
                  Machine.  Both static nested types and non-static nested
                  types (that is, inner types) are included. Local inner types
                  (declared within a code block somewhere in this reference type) are
                  also included in the returned list.
                  &lt;p&gt;
                  For arrays ({@link ArrayType}) and primitive classes, the returned
                  list is always empty.                
                <return>
                    a List of nested {@link ReferenceType} objects; the list
                      has 0 length if there are no nested types.                    
                </return>
            </javadoc>
            <method name="getValue" type="Value" line="494"/>
            <javadoc line="494">
                Gets the {@link Value} of a given static {@link Field} in this type.
                  The Field must be valid for this type;
                  that is, it must be declared in this type, a superclass, a
                  superinterface, or an implemented interface.                
                <param>
                    field the field containing the requested value                    
                </param>
                <return>
                    the {@link Value} of the instance field.                    
                </return>
                <throws>
                    java.lang.IllegalArgumentException if the field is not valid for
                      this object's class.                    
                </throws>
            </javadoc>
            <method name="getValues" type="Map<Field,Value>" line="507"/>
            <javadoc line="507">
                Returns a map containing the {@link Value} of each
                  static {@link Field} in the given list.
                  The Fields must be valid for this type;
                  that is, they must be declared in this type, a superclass, a
                  superinterface, or an implemented interface.                
                <param>
                    fields a list of {@link Field} objects containing the
                      requested values.                    
                </param>
                <return>
                    a Map of the requested {@link Field} objects with
                      their {@link Value}.                    
                </return>
                <throws>
                    java.lang.IllegalArgumentException if any field is not valid for
                      this object's class.                    
                </throws>
                <throws>
                    VMMismatchException if a {@link Mirror} argument and this mirror
                      do not belong to the same {@link VirtualMachine}.                    
                </throws>
            </javadoc>
            <method name="classObject" type="ClassObjectReference" line="525"/>
            <javadoc line="525">
                Returns the class object that corresponds to this type in the
                  target VM. The VM creates class objects for every kind of
                  ReferenceType: classes, interfaces, and array types.                
                <return>
                    the {@link ClassObjectReference} for this reference type
                      in the target VM.                    
                </return>
            </javadoc>
            <method name="allLineLocations" type="List<Location>" line="534"/>
            <javadoc line="534">
                Returns a list containing a {@link Location} object
                  for each executable source line in this reference type.
                  &lt;P&gt;
                  This method is equivalent to
                  &lt;code&gt;allLineLocations(vm.getDefaultStratum(),null)&lt;/code&gt; -
                  see {@link #allLineLocations(String,String)}for more information.                
                <throws>
                    AbsentInformationException if there is no line
                      number information for this class and there are non-native,
                      non-abstract executable members of this class.                    
                </throws>
                <throws>
                    ClassNotPreparedException if this class not yet
                      been prepared.                    
                </throws>
            </javadoc>
            <method name="allLineLocations" type="List<Location>" line="552"/>
            <javadoc line="552">
                Returns a list containing a {@link Location} object
                  for each executable source line in this reference type.
                  Each location maps a source line to a range of code
                  indices.
                  The beginning of the range can be determined through{@link Location#codeIndex}.  The returned list may contain
                  multiple locations for a particular line number, if the
                  compiler and/or VM has mapped that line to two or more
                  disjoint code index ranges.  Note that it is possible for
                  the same source line to represent different code index
                  ranges in &lt;i&gt;different&lt;/i&gt; methods.
                  &lt;P&gt;
                  For arrays ({@link ArrayType}) and primitive classes, the
                  returned list is always empty.  For interfaces ({@link InterfaceType}), the returned list will be non-empty only
                  if the interface has executable code in its class
                  initialization.
                  &lt;P&gt;
                  Returned list is for the specified &lt;i&gt;stratum&lt;/i&gt;
                  (see {@link Location} for a description of strata).                
                <param>
                    stratum The stratum to retrieve information from
                      or <code>null</code> for the {@link #defaultStratum()}.                    
                </param>
                <param>
                    sourceName Return locations only within this
                      source file or <code>null</code> to return locations.                    
                </param>
                <return>
                    a List of all source line {@link Location} objects.                    
                </return>
                <throws>
                    AbsentInformationException if there is no line
                      number information for this class and there are non-native,
                      non-abstract executable members of this class.
                      Or if <i>sourceName</i> is non-<code>null</code>
                      and source name information is not present.                    
                </throws>
                <throws>
                    ClassNotPreparedException if this class not yet
                      been prepared.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="locationsOfLine" type="List<Location>" line="596"/>
            <javadoc line="596">
                Returns a List containing all {@link Location} objects
                  that map to the given line number.
                  &lt;P&gt;
                  This method is equivalent to
                  &lt;code&gt;locationsOfLine(vm.getDefaultStratum(), null,
                  lineNumber)&lt;/code&gt; -
                  see {@link #locationsOfLine(java.lang.String,java.lang.String,int)}for more information.                
                <param>
                    lineNumber the line number                    
                </param>
                <return>
                    a List of all {@link Location} objects that map to
                      the given line.                    
                </return>
                <throws>
                    AbsentInformationException if there is no line
                      number information for this class.                    
                </throws>
                <throws>
                    ClassNotPreparedException if this class not yet
                      been prepared.                    
                </throws>
                <see>
                    VirtualMachine#getDefaultStratum()                    
                </see>
            </javadoc>
            <method name="locationsOfLine" type="List<Location>" line="623"/>
            <javadoc line="623">
                Returns a List containing all {@link Location} objects
                  that map to the given line number.
                  &lt;P&gt;
                  For arrays ({@link ArrayType}) and primitive classes, the
                  returned list is always empty.
                  For interfaces ({@link InterfaceType}), the returned list
                  will be non-empty only if the interface has executable code
                  in its class initialization at the specified line number.
                  An empty list will be returned if there is no executable
                  code at the specified line number.
                  &lt;p&gt;
                  Returned list is for the specified &lt;i&gt;stratum&lt;/i&gt;
                  (see {@link Location} for a description of strata).                
                <param>
                    stratum the stratum to use for comparing line number
                      and source name, or <code>null</code> to
                      use the {@link #defaultStratum()}.                    
                </param>
                <param>
                    sourceName the source name containing the line
                      number, or <code>null</code> to match
                      all source names                    
                </param>
                <param>
                    lineNumber the line number                    
                </param>
                <return>
                    a List of all {@link Location} objects that map
                      to the given line.                    
                </return>
                <throws>
                    AbsentInformationException if there is no line
                      number information for this class.
                      Or if <i>sourceName</i> is non-<code>null</code>
                      and source name information is not present.                    
                </throws>
                <throws>
                    ClassNotPreparedException if this class not yet
                      been prepared.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="availableStrata" type="List<String>" line="666"/>
            <javadoc line="666">
                Return the available strata for this reference type.
                  &lt;P&gt;
                  See the {@link Location} for a description of strata.                
                <return>
                    List of <CODE>java.lang.String</CODE>, each
                      representing a stratum                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="defaultStratum" type="String" line="678"/>
            <javadoc line="678">
                Returns the default stratum for this reference type.
                  This value is specified in the class file and cannot
                  be set by the user.  If the class file does not
                  specify a default stratum the base stratum
                  (&lt;code&gt;&quot;Java&quot;&lt;/code&gt;) will be returned.
                  &lt;P&gt;
                  See the {@link Location} for a description of strata.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="instances" type="List<ObjectReference>" line="691"/>
            <javadoc line="691">
                Returns instances of this ReferenceType.
                  Only instances that are reachable for the purposes of garbage collection
                  are returned.
                  &lt;p&gt;
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canGetInstanceInfo()}to determine if the operation is supported.                
                <see>
                    VirtualMachine#instanceCounts(List)                    
                </see>
                <see>
                    ObjectReference#referringObjects(long)                    
                </see>
                <param>
                    maxInstances the maximum number of instances to return.
                      Must be non-negative.  If zero, all instances are returned.                    
                </param>
                <return>
                    a List of {@link ObjectReference} objects.  If there are
                      no instances of this ReferenceType, a zero-length list is returned.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target virtual machine does not support this
                      operation - see{@link VirtualMachine#canGetInstanceInfo() canGetInstanceInfo()}                    
                </throws>
                <throws>
                    java.lang.IllegalArgumentException if maxInstances is less
                      than zero.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="718"/>
            <javadoc line="718">
                Compares the specified Object with this ReferenceType for equality.                
                <return>
                    true if the Object is a {@link ReferenceType}, if the
                      ReferenceTypes belong to the same VM, and if they mirror classes
                      which correspond to the same instance of java.lang.Class in that VM.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="727"/>
            <javadoc line="727">
                Returns the hash code value for this ObjectReference.                
                <return>
                    the integer hash code                    
                </return>
            </javadoc>
            <method name="majorVersion" type="int" line="734"/>
            <javadoc line="734">
                Returns the class major version number, as defined in the class file format
                  of the Java Virtual Machine Specification.
                  For arrays ({@link ArrayType}) and primitive classes,
                  the returned major version number value is zero.
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canGetClassFileVersion()}to determine if the operation is supported.                
                <return>
                    the major version number of the class.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target virtual machine does not support this
                      operation - see{@link VirtualMachine#canGetClassFileVersion() canGetClassFileVersion()}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="minorVersion" type="int" line="757"/>
            <javadoc line="757">
                Returns the class minor version number, as defined in the class file format
                  of the Java Virtual Machine Specification.
                  For arrays ({@link ArrayType}) and primitive classes,
                  the returned minor version number value is zero.
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canGetClassFileVersion()}to determine if the operation is supported.                
                <return>
                    the minor version number of the class.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target virtual machine does not support this
                      operation - see{@link VirtualMachine#canGetClassFileVersion() canGetClassFileVersion()}                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="constantPoolCount" type="int" line="779"/>
            <javadoc line="779">
                Returns the number of entries in the constant pool plus one.
                  This corresponds to the constant_pool_count item of the Class File Format
                  in the Java Virtual Machine Specification.
                  For arrays ({@link ArrayType}) and primitive classes,
                  the returned constant pool count value is zero.
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canGetConstantPool()}to determine if the operation is supported.                
                <return>
                    total number of constant pool entries for a class plus one.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target virtual machine does not support this
                      operation - see{@link VirtualMachine#canGetConstantPool() canGetConstantPool()}                    
                </throws>
                <see>
                    #constantPool()                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="constantPool" type="byte[]" line="803"/>
            <javadoc line="803">
                Returns the raw bytes of the constant pool in the format of the
                  constant_pool item of the Class File Format in the Java Virtual
                  Machine Specification. The format of the constant pool may
                  differ between versions of the Class File Format, so, the
                  minor and major class version numbers should be checked for
                  compatibility.
                  For arrays ({@link ArrayType}) and primitive classes,
                  a zero length byte array is returned.
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canGetConstantPool()}to determine if the operation is supported.                
                <return>
                    the raw bytes of constant pool.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target virtual machine does not support this
                      operation - see{@link VirtualMachine#canGetConstantPool() canGetConstantPool()}                    
                </throws>
                <see>
                    #constantPoolCount()                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
        </interface>
    </source>