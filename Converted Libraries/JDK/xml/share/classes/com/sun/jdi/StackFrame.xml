<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi">
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <interface name="StackFrame">
            <implements interface="Mirror"/>
            <implements interface="Locatable"/>
            <javadoc line="4">
                The state of one method invocation on a thread&apos;s call stack.
                  As a thread executes, stack frames are pushed and popped from
                  its call stack as methods are invoked and then return. A StackFrame
                  mirrors one such frame from a target VM at some point in its
                  thread&apos;s execution. The call stack is, then, simply a List of
                  StackFrame objects. The call stack can be obtained any time a thread
                  is suspended through a call to {@link ThreadReference#frames}&lt;p&gt;
                  StackFrames provide access to a method&apos;s local variables and their
                  current values.
                  &lt;p&gt;
                  The lifetime of a StackFrame is very limited. It is available only
                  for suspended threads and becomes invalid once its thread is resumed.
                  &lt;p&gt;
                  Any method on &lt;code&gt;StackFrame&lt;/code&gt; which
                  takes &lt;code&gt;StackFrame&lt;/code&gt; as an parameter may throw{@link com.sun.jdi.VMDisconnectedException} if the target VM is
                  disconnected and the {@link com.sun.jdi.event.VMDisconnectEvent} has been or is
                  available to be read from the {@link com.sun.jdi.event.EventQueue}.
                  &lt;p&gt;
                  Any method on &lt;code&gt;StackFrame&lt;/code&gt; which
                  takes &lt;code&gt;StackFrame&lt;/code&gt; as an parameter may throw{@link com.sun.jdi.VMOutOfMemoryException} if the target VM has run out of memory.                
                <author>
                    Robert Field                    
                </author>
                <author>
                    Gordon Hirsch                    
                </author>
                <author>
                    James McIlree                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="location" type="Location" line="31"/>
            <javadoc line="31">
                Returns the {@link Location} of the current instruction in the frame.
                  The method for which this frame was created can also be accessed
                  through the returned location.
                  For the top frame in the stack, this location identifies the
                  next instruction to be executed. For all other frames, this
                  location identifies the instruction that caused the next frame&apos;s
                  method to be invoked.
                  If the frame represents a native method invocation, the returned
                  location indicates the class and method, but the code index will
                  not be valid (-1).                
                <return>
                    the {@link Location} of the current instruction.                    
                </return>
                <throws>
                    InvalidStackFrameException if this stack frame has become
                      invalid. Once the frame&apos;s thread is resumed, the stack frame is
                      no longer valid.                    
                </throws>
            </javadoc>
            <method name="thread" type="ThreadReference" line="48"/>
            <javadoc line="48">
                Returns the thread under which this frame&apos;s method is running.                
                <return>
                    a {@link ThreadReference} which mirrors the frame&apos;s thread.                    
                </return>
                <throws>
                    InvalidStackFrameException if this stack frame has become
                      invalid. Once the frame&apos;s thread is resumed, the stack frame is
                      no longer valid.                    
                </throws>
            </javadoc>
            <method name="thisObject" type="ObjectReference" line="56"/>
            <javadoc line="56">
                Returns the value of &apos;this&apos; for the current frame.
                  The {@link ObjectReference} for &apos;this&apos; is only available for
                  non-native instance methods.                
                <return>
                    an {@link ObjectReference}, or null if the frame represents
                      a native or static method.                    
                </return>
                <throws>
                    InvalidStackFrameException if this stack frame has become
                      invalid. Once the frame&apos;s thread is resumed, the stack frame is
                      no longer valid.                    
                </throws>
            </javadoc>
            <method name="visibleVariables" type="List&lt;LocalVariable&gt;" line="67"/>
            <javadoc line="67">
                Returns a list containing each {@link LocalVariable}that can be accessed from this frame&apos;s location.
                  &lt;p&gt;
                  Visibility is based on the code index of the current instruction of
                  this StackFrame. Each variable has a range of byte code indices in which
                  it is accessible.
                  If this stack frame&apos;s method
                  matches this variable&apos;s method and if the code index of this
                  StackFrame is within the variable&apos;s byte code range, the variable is
                  visible.
                  &lt;p&gt;
                  A variable&apos;s byte code range is at least as large as the scope of
                  that variable, but can continue beyond the end of the scope under
                  certain circumstances:
                  &lt;ul&gt;
                  &lt;li&gt;the compiler/VM does not immediately reuse the variable&apos;s slot.
                  &lt;li&gt;the compiler/VM is implemented to report the extended range that
                  would result from the item above.
                  &lt;/ul&gt;
                  The advantage of an extended range is that variables from recently
                  exited scopes may remain available for examination (this is especially
                  useful for loop indices). If, as a result of the extensions above,
                  the current frame location is contained within the range
                  of multiple local variables of the same name, the variable with the
                  highest-starting range is chosen for the returned list.                
                <return>
                    the list of {@link LocalVariable} objects currently visible;
                      the list will be empty if there are no visible variables;
                      specifically, frames in native methods will always return a
                      zero-length list.                    
                </return>
                <throws>
                    AbsentInformationException if there is no local variable
                      information for this method.                    
                </throws>
                <throws>
                    InvalidStackFrameException if this stack frame has become
                      invalid. Once the frame&apos;s thread is resumed, the stack frame is
                      no longer valid.                    
                </throws>
                <throws>
                    NativeMethodException if the current method is native.                    
                </throws>
            </javadoc>
            <method name="visibleVariableByName" type="LocalVariable" line="104"/>
            <javadoc line="104">
                Finds a {@link LocalVariable} that matches the given name and is
                  visible at the current frame location.
                  See {@link #visibleVariables} for more information on visibility.                
                <param>
                    name the variable name to find                    
                </param>
                <return>
                    the matching {@link LocalVariable}, or null if there is no
                      visible variable with the given name; frames in native methods
                      will always return null.                    
                </return>
                <throws>
                    AbsentInformationException if there is no local variable
                      information for this method.                    
                </throws>
                <throws>
                    InvalidStackFrameException if this stack frame has become
                      invalid. Once the frame&apos;s thread is resumed, the stack frame is
                      no longer valid.                    
                </throws>
                <throws>
                    NativeMethodException if the current method is native.                    
                </throws>
            </javadoc>
            <method name="getValue" type="Value" line="120"/>
            <javadoc line="120">
                Gets the {@link Value} of a {@link LocalVariable} in this frame.
                  The variable must be valid for this frame&apos;s method and visible
                  according to the rules described in {@link #visibleVariables}.                
                <param>
                    variable the {@link LocalVariable} to be accessed                    
                </param>
                <return>
                    the {@link Value} of the instance field.                    
                </return>
                <throws>
                    java.lang.IllegalArgumentException if the variable is
                      either invalid for this frame&apos;s method or not visible.                    
                </throws>
                <throws>
                    InvalidStackFrameException if this stack frame has become
                      invalid. Once the frame&apos;s thread is resumed, the stack frame is
                      no longer valid.                    
                </throws>
            </javadoc>
            <method name="getValues" type="Map&lt;LocalVariable,Value&gt;" line="133"/>
            <javadoc line="133">
                Returns the values of multiple local variables in this frame.
                  Each variable must be valid for this frame&apos;s method and visible
                  according to the rules described in {@link #visibleVariables}.                
                <param>
                    variables a list of {@link LocalVariable} objects to be accessed                    
                </param>
                <return>
                    a map associating each {@link LocalVariable} with
                      its {@link Value}                    
                </return>
                <throws>
                    java.lang.IllegalArgumentException if any variable is
                      either invalid for this frame&apos;s method or not visible.                    
                </throws>
                <throws>
                    InvalidStackFrameException if this stack frame has become
                      invalid. Once the frame&apos;s thread is resumed, the stack frame is
                      no longer valid.                    
                </throws>
            </javadoc>
            <method name="setValue" type="void" line="147"/>
            <javadoc line="147">
                Sets the {@link Value} of a {@link LocalVariable} in this frame.
                  The variable must be valid for this frame&apos;s method and visible
                  according to the rules described in {@link #visibleVariables}.
                  &lt;p&gt;
                  Object values must be assignment compatible with the variable type
                  (This implies that the variable type must be loaded through the
                  enclosing class&apos;s class loader). Primitive values must be
                  either assignment compatible with the variable type or must be
                  convertible to the variable type without loss of information.
                  See JLS section 5.2 for more information on assignment
                  compatibility.                
                <param>
                    variable the field containing the requested value                    
                </param>
                <param>
                    value the new value to assign                    
                </param>
                <throws>
                    java.lang.IllegalArgumentException if the field is not valid for
                      this object&apos;s class.                    
                </throws>
                <throws>
                    InvalidTypeException if the value&apos;s type does not match
                      the variable&apos;s type.                    
                </throws>
                <throws>
                    ClassNotLoadedException if the variable type has not yet been loaded
                      through the appropriate class loader.                    
                </throws>
                <throws>
                    InvalidStackFrameException if this stack frame has become
                      invalid. Once the frame&apos;s thread is resumed, the stack frame is
                      no longer valid.                    
                </throws>
                <throws>
                    VMCannotBeModifiedException if the VirtualMachine is read-only - see {@link VirtualMachine#canBeModified()}.                    
                </throws>
            </javadoc>
            <method name="getArgumentValues" type="List&lt;Value&gt;" line="173"/>
            <javadoc line="173">
                Returns the values of all arguments in this frame.  Values are
                  returned even if no local variable information is present.                
                <return>
                    a list containing a {@link Value} object for each argument
                      to this frame, in the order in which the arguments were
                      declared.  If the method corresponding to this frame has
                      no arguments, an empty list is returned.                    
                </return>
                <throws>
                    InvalidStackFrameException if this stack frame has become
                      invalid. Once the frame&apos;s thread is resumed, the stack frame is
                      no longer valid.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
        </interface>
    </source>