<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi.event">
        <import package="com.sun.jdi"/>
        <interface name="ClassPrepareEvent">
            <implements interface="Event"/>
            <javadoc line="3">
                Notification of a class prepare in the target VM. See the JVM
                  specification for a definition of class preparation. Class prepare
                  events are not generated for primtiive classes (for example,
                  java.lang.Integer.TYPE).                
                <see>
                    EventQueue                    
                </see>
                <see>
                    VirtualMachine                    
                </see>
                <author>
                    Robert Field                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="thread" type="ThreadReference" line="14"/>
            <javadoc line="14">
                Returns the thread in which this event has occurred.
                  &lt;p&gt;
                  In rare cases, this event may occur in a debugger system
                  thread within the target VM. Debugger threads take precautions
                  to prevent these events, but they cannot be avoided under some
                  conditions, especially for some subclasses of{@link java.lang.Error}.
                  If the event was generated by a debugger system thread, the
                  value returned by this method is null, and if the requested
                  suspend policy for the event was{@link com.sun.jdi.request.EventRequest#SUSPEND_EVENT_THREAD},
                  all threads will be suspended instead, and the{@link EventSet#suspendPolicy} will reflect this change.
                  &lt;p&gt;
                  Note that the discussion above does not apply to system threads
                  created by the target VM during its normal (non-debug) operation.                
                <return>
                    a {@link ThreadReference} which mirrors the event's thread in
                      the target VM, or null in the rare cases described above.                    
                </return>
            </javadoc>
            <method name="referenceType" type="ReferenceType" line="32"/>
            <javadoc line="32">
                Returns the reference type for which this event was generated.                
                <return>
                    a {@link ReferenceType} which mirrors the class, interface, or
                      array which has been linked.                    
                </return>
            </javadoc>
        </interface>
    </source>