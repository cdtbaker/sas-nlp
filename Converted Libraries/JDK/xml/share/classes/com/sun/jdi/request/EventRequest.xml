<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi.request">
        <import package="com.sun.jdi"/>
        <interface name="EventRequest">
            <implements interface="Mirror"/>
            <javadoc line="30">
                Represents a request for notification of an event.  Examples include{@link BreakpointRequest} and {@link ExceptionRequest}.
                  When an event occurs for which an enabled request is present,
                  an  {@link com.sun.jdi.event.EventSet EventSet} will
                  be placed on the {@link com.sun.jdi.event.EventQueue EventQueue}.
                  The collection of existing event requests is
                  managed by the {@link EventRequestManager}.
                  &lt;p&gt;
                  The number of events generated for an event request can be controlled
                  through filters. Filters provide additional constraints that an event
                  must satisfy before it is placed on the event queue. Multiple filters can
                  be used by making multiple calls to filter addition methods such as{@link ExceptionRequest#addClassFilter(java.lang.String classPattern)}.
                  Filters are added to an event one at a time only while the event is
                  disabled. Multiple filters are applied with CUT-OFF AND, in the order
                  it was added to the request. Only events that satisfy all filters are
                  placed in the event queue.
                  &lt;p&gt;
                  The set of available filters is dependent on the event request,
                  some examples of filters are:
                  &lt;ul&gt;
                  &lt;li&gt;Thread filters allow control over the thread for which events are
                  generated.
                  &lt;li&gt;Class filters allow control over the class in which the event
                  occurs.
                  &lt;li&gt;Instance filters allow control over the instance in which
                  the event occurs.
                  &lt;li&gt;Count filters allow control over the number of times an event
                  is reported.
                  &lt;/ul&gt;
                  Filters can dramatically improve debugger performance by reducing the
                  amount of event traffic sent from the target VM to the debugger VM.
                  &lt;p&gt;
                  Any method on &lt;code&gt;EventRequest&lt;/code&gt; which
                  takes &lt;code&gt;EventRequest&lt;/code&gt; as an parameter may throw{@link com.sun.jdi.VMDisconnectedException} if the target VM is
                  disconnected and the {@link com.sun.jdi.event.VMDisconnectEvent} has been or is
                  available to be read from the {@link com.sun.jdi.event.EventQueue}.
                  &lt;p&gt;
                  Any method on &lt;code&gt;EventRequest&lt;/code&gt; which
                  takes &lt;code&gt;EventRequest&lt;/code&gt; as an parameter may throw{@link com.sun.jdi.VMOutOfMemoryException} if the target VM has run out of memory.                
                <see>
                    com.sun.jdi.event.BreakpointEvent                    
                </see>
                <see>
                    com.sun.jdi.event.EventQueue                    
                </see>
                <see>
                    EventRequestManager                    
                </see>
                <author>
                    Robert Field                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="isEnabled" type="boolean" line="83"/>
            <javadoc line="83">
                Determines if this event request is currently enabled.                
                <return>
                    <code>true</code> if enabled;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="setEnabled" type="void" line="91"/>
            <javadoc line="91">
                Enables or disables this event request. While this event request is
                  disabled, the event request will be ignored and the target VM
                  will not be stopped if any of its threads reaches the
                  event request.  Disabled event requests still exist,
                  and are included in event request lists such as{@link EventRequestManager#breakpointRequests()}.                
                <param>
                    val <code>true</code> if the event request is to be enabled;
                      <code>false</code> otherwise.                    
                </param>
                <throws>
                    InvalidRequestStateException if this request
                      has been deleted.                    
                </throws>
                <throws>
                    IllegalThreadStateException if this is a StepRequest,
                      <code>val</code> is <code>true</code>, and the
                      thread named in the request has died.                    
                </throws>
            </javadoc>
            <method name="enable" type="void" line="109"/>
            <javadoc line="109">
                Same as {@link #setEnabled &lt;CODE&gt;setEnabled(true)&lt;/CODE&gt;}.                
                <throws>
                    InvalidRequestStateException if this request
                      has been deleted.                    
                </throws>
                <throws>
                    IllegalThreadStateException if this is a StepRequest
                      and the thread named in the request has died.                    
                </throws>
            </javadoc>
            <method name="disable" type="void" line="118"/>
            <javadoc line="118">
                Same as {@link #setEnabled &lt;CODE&gt;setEnabled(false)&lt;/CODE&gt;}.                
                <throws>
                    InvalidRequestStateException if this request
                      has been deleted.                    
                </throws>
            </javadoc>
            <method name="addCountFilter" type="void" line="125"/>
            <javadoc line="125">
                Limit the requested event to be reported at most once after a
                  given number of occurrences.  The event is not reported
                  the first &lt;code&gt;count - 1&lt;/code&gt; times this filter is reached.
                  To request a one-off event, call this method with a count of 1.
                  &lt;p&gt;
                  Once the count reaches 0, any subsequent filters in this request
                  are applied. If none of those filters cause the event to be
                  suppressed, the event is reported. Otherwise, the event is not
                  reported. In either case subsequent events are never reported for
                  this request.                
                <param>
                    count the number of ocurrences before generating an event.                    
                </param>
                <throws>
                    InvalidRequestStateException if this request is currently
                      enabled or has been deleted.
                      Filters may be added only to disabled requests.                    
                </throws>
                <throws>
                    IllegalArgumentException if <CODE>count</CODE>
                      is less than one.                    
                </throws>
            </javadoc>
            <declaration name="SUSPEND_NONE" type="int" line="146"/>
            <javadoc line="146">
                Suspend no threads when the event occurs                
            </javadoc>
            <declaration name="SUSPEND_EVENT_THREAD" type="int" line="148"/>
            <javadoc line="148">
                Suspend only the thread which generated the event when the event occurs                
            </javadoc>
            <declaration name="SUSPEND_ALL" type="int" line="150"/>
            <javadoc line="150">
                Suspend all threads when the event occurs                
            </javadoc>
            <method name="setSuspendPolicy" type="void" line="153"/>
            <javadoc line="153">
                Determines the threads to suspend when the requested event occurs
                  in the target VM. Use {@link #SUSPEND_ALL} to suspend all
                  threads in the target VM (the default). Use {@link #SUSPEND_EVENT_THREAD}to suspend only the thread which generated the event. Use{@link #SUSPEND_NONE} to suspend no threads.
                  &lt;p&gt;
                  Thread suspensions through events have the same functionality
                  as explicitly requested suspensions. See{@link com.sun.jdi.ThreadReference#suspend} and{@link com.sun.jdi.VirtualMachine#suspend} for details.                
                <param>
                    policy the selected suspend policy.                    
                </param>
                <throws>
                    InvalidRequestStateException if this request is currently
                      enabled or has been deleted.
                      Suspend policy may only be set in disabled requests.                    
                </throws>
                <throws>
                    IllegalArgumentException if the policy argument
                      contains an illegal value.                    
                </throws>
            </javadoc>
            <method name="suspendPolicy" type="int" line="174"/>
            <javadoc line="174">
                Returns a value which describes the threads to suspend when the
                  requested event occurs in the target VM.
                  The returned value is  {@link #SUSPEND_ALL},{@link #SUSPEND_EVENT_THREAD}, or {@link #SUSPEND_NONE}.                
                <return>
                    the current suspend mode for this request                    
                </return>
            </javadoc>
            <method name="putProperty" type="void" line="184"/>
            <javadoc line="184">
                Add an arbitrary key/value &quot;property&quot; to this request.
                  The property can be used by a client of the JDI to
                  associate application information with the request;
                  These client-set properties are not used internally
                  by the JDI.
                  &lt;p&gt;
                  The &lt;code&gt;get/putProperty&lt;/code&gt; methods provide access to
                  a small per-instance map. This is &lt;b&gt;not&lt;/b&gt; to be confused
                  with {@link java.util.Properties}.
                  &lt;p&gt;
                  If value is null this method will remove the property.                
                <see>
                    #getProperty                    
                </see>
            </javadoc>
            <method name="getProperty" type="Object" line="201"/>
            <javadoc line="201">
                Returns the value of the property with the specified key.  Only
                  properties added with {@link #putProperty} will return
                  a non-null value.                
                <return>
                    the value of this property or null                    
                </return>
                <see>
                    #putProperty                    
                </see>
            </javadoc>
        </interface>
    </source>