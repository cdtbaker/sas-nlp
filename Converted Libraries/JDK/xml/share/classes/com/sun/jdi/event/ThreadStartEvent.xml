<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi.event">
        <import package="com.sun.jdi"/>
        <interface name="ThreadStartEvent">
            <implements interface="Event"/>
            <javadoc line="3">
                Notification of a new running thread in the target VM.
                  The new thread can be the result of a call to
                  &lt;code&gt;{@link java.lang.Thread#start}&lt;/code&gt; or the result of
                  attaching a new thread to the VM though JNI. The
                  notification is generated by the new thread some time before
                  its execution starts.
                  Because of this timing, it is possible to receive other events
                  for the thread before this event is received. (Notably,{@link MethodEntryEvent}s and {@link MethodExitEvent}s might occur
                  during thread initialization.)
                  It is also possible for {@link VirtualMachine#allThreads} to return
                  a new started thread before this event is received.
                  &lt;p&gt;
                  Note that this event gives no information
                  about the creation of the thread object which may have happened
                  much earlier, depending on the VM being debugged.                
                <see>
                    EventQueue                    
                </see>
                <see>
                    VirtualMachine                    
                </see>
                <see>
                    ThreadReference                    
                </see>
                <author>
                    Robert Field                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="thread" type="ThreadReference" line="26"/>
            <javadoc line="26">
                Returns the thread which has started.                
                <return>
                    a {@link ThreadReference} which mirrors the event&apos;s thread in
                      the target VM.                    
                </return>
            </javadoc>
        </interface>
    </source>