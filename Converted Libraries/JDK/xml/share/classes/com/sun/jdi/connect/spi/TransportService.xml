<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi.connect.spi">
        <import package="java.io.IOException"/>
        <import package="com.sun.jdi.connect.TransportTimeoutException"/>
        <class name="TransportService" line="4">
            <javadoc line="4">
                A transport service for connections between a debugger and
                  a target VM.
                  &lt;p&gt; A transport service is a concrete subclass of this class
                  that has a zero-argument constructor and implements the abstract
                  methods specified below. It is the underlying service
                  used by a {@link com.sun.jdi.connect.Transport} for
                  connections between a debugger and a target VM.
                  &lt;p&gt; A transport service is used to establish a connection
                  between a debugger and a target VM, and to transport Java
                  Debug Wire Protocol (JDWP) packets over an underlying
                  communication protocol. In essence a transport service
                  implementation binds JDWP (as specified in the
                  &lt;a href=&quot;../../../../../../../../../technotes/guides/jpda/jdwp-spec.html&quot;&gt;
                  JDWP specification&lt;/a&gt;) to an underlying communication
                  protocol. A transport service implementation provides
                  a reliable JDWP packet transportation service. JDWP
                  packets are sent to and from the target VM without duplication
                  or data loss. A transport service implementation may be
                  based on an underlying communication protocol that is
                  reliable or unreliable. If the underlying communication
                  protocol is reliable then the transport service implementation
                  may be relatively simple and may only need to transport JDWP
                  packets as payloads of the underlying communication
                  protocol. In the case of an unreliable communication
                  protocol the transport service implementation may include
                  additional protocol support in order to ensure that packets
                  are not duplicated and that there is no data loss. The
                  details of such protocols are specific to the implementation
                  but may involve techniques such as the &lt;i&gt;positive
                  acknowledgment with retransmission&lt;/i&gt; technique used in
                  protocols such as the Transmission Control Protocol (TCP)
                  (see &lt;a href=&quot;http://www.ietf.org/rfc/rfc0793.txt&quot;&gt; RFC 793
                  &lt;/a&gt;).
                  &lt;p&gt; A transport service can be used to initiate a connection
                  to a target VM. This is done by invoking the {@link #attach}method. Alternatively, a transport service can listen and
                  accept connections initiated by a target VM. This is done
                  by invoking the {@link #startListening(String)} method to
                  put the transport into listen mode. Then the {@link #accept}method is used to accept a connection initiated by a
                  target VM.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="name" type="String" line="47"/>
            <javadoc line="47">
                Returns a name to identify the transport service.                
                <return>
                    The name of the transport service                    
                </return>
            </javadoc>
            <method name="description" type="String" line="52"/>
            <javadoc line="52">
                Returns a description of the transport service.                
                <return>
                    The description of the transport service                    
                </return>
            </javadoc>
            <class name="Capabilities" line="57">
                <javadoc line="57">
                    The transport service capabilities.                    
                </javadoc>
                <method name="supportsMultipleConnections" type="boolean" line="61"/>
                <javadoc line="61">
                    Tells whether or not this transport service can support
                      multiple concurrent connections to a single address that
                      it is listening on.                    
                    <return>
                        &lt;tt&gt;true&lt;/tt&gt; if, and only if, this transport
                          service supports multiple connections.                        
                    </return>
                </javadoc>
                <method name="supportsAttachTimeout" type="boolean" line="69"/>
                <javadoc line="69">
                    Tell whether or not this transport service supports a timeout
                      when attaching to a target VM.                    
                    <return>
                        &lt;tt&gt;true&lt;/tt&gt; if, and only if, this transport
                          service supports attaching with a timeout.                        
                    </return>
                    <see>
                        #attach(String,long,long)                        
                    </see>
                </javadoc>
                <method name="supportsAcceptTimeout" type="boolean" line="77"/>
                <javadoc line="77">
                    Tell whether or not this transport service supports a
                      timeout while waiting for a target VM to connect.                    
                    <return>
                        &lt;tt&gt;true&lt;/tt&gt; if, and only if, this transport
                          service supports timeout while waiting for
                          a target VM to connect.                        
                    </return>
                    <see>
                        #accept(TransportService.ListenKey,long,long)                        
                    </see>
                </javadoc>
                <method name="supportsHandshakeTimeout" type="boolean" line="86"/>
                <javadoc line="86">
                    Tells whether or not this transport service supports a
                      timeout when handshaking with the target VM.                    
                    <return>
                        &lt;tt&gt;true&lt;/tt&gt; if, and only if, this transport
                          service supports a timeout while handshaking
                          with the target VM.                        
                    </return>
                    <see>
                        #attach(String,long,long)                        
                    </see>
                    <see>
                        #accept(TransportService.ListenKey,long,long)                        
                    </see>
                </javadoc>
            </class>
            <method name="capabilities" type="Capabilities" line="97"/>
            <javadoc line="97">
                Returns the capabilities of the transport service.                
                <return>
                    the transport service capabilities                    
                </return>
            </javadoc>
            <method name="attach" type="Connection" line="102"/>
            <javadoc line="102">
                Attaches to the specified address.
                  &lt;p&gt; Attaches to the specified address and returns a connection
                  representing the bi-directional communication channel to the
                  target VM.
                  &lt;p&gt; Attaching to the target VM involves two steps:
                  First, a connection is established to specified address. This
                  is followed by a handshake to ensure that the connection is
                  to a target VM. The handshake involves the exchange
                  of a string &lt;i&gt;JDWP-Handshake&lt;/i&gt; as specified in the &lt;a
                  href=&quot;../../../../../../../../../technotes/guides/jpda/jdwp-spec.html&quot;&gt;
                  Java Debug Wire Protocol&lt;/a&gt; specification.                
                <param>
                    addressThe address of the target VM.                    
                </param>
                <param>
                    attachTimeoutIf this transport service supports an attach timeout,
                      and if &lt;tt&gt;attachTimeout&lt;/tt&gt; is positive, then it specifies
                      the timeout, in milliseconds (more or less), to use
                      when attaching to the target VM.  If the transport service
                      does not support an attach timeout, or if &lt;tt&gt;attachTimeout&lt;/tt&gt;
                      is specified as zero then attach without any timeout.                    
                </param>
                <param>
                    handshakeTimeoutIf this transport service supports a handshake timeout,
                      and if &lt;tt&gt;handshakeTimeout&lt;/tt&gt; is positive, then it
                      specifies the timeout, in milliseconds (more or less), to
                      use when handshaking with the target VM. The exact
                      usage of the timeout are specific to the transport service.
                      A transport service may, for example, use the handshake
                      timeout as the inter-character timeout while waiting for
                      the &lt;i&gt;JDWP-Handshake&lt;/i&gt; message from the target VM.
                      Alternatively, a transport service may, for example,
                      use the handshakeTimeout as a timeout for the duration of the
                      handshake exchange.
                      If the transport service does not support a handshake
                      timeout, or if &lt;tt&gt;handshakeTimeout&lt;/tt&gt; is specified
                      as zero then the handshake does not timeout if there
                      isn&apos;t a response from the target VM.                    
                </param>
                <return>
                    The Connection representing the bi-directional
                      communication channel to the target VM.                    
                </return>
                <throws>
                    TransportTimeoutExceptionIf a timeout occurs while establishing the connection.                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs (including a timeout when
                      handshaking).                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf the address is invalid or the value of the
                      attach timeout or handshake timeout is negative.                    
                </throws>
                <see>
                    TransportService.Capabilities#supportsAttachTimeout()                    
                </see>
            </javadoc>
            <class name="ListenKey" line="146">
                <javadoc line="146">
                    A &lt;i&gt;listen key&lt;/i&gt;.
                      &lt;p&gt; A &lt;tt&gt;TransportService&lt;/tt&gt; may listen on multiple, yet
                      different, addresses at the same time. To uniquely identify
                      each &lt;tt&gt;listener&lt;/tt&gt; a listen key is created each time that{@link #startListening startListening} is called. The listen
                      key is used in calls to the {@link #accept accept} method
                      to accept inbound connections to that listener. A listen
                      key is valid until it is used as an argument to {@link #stopListening stopListening} to stop the transport
                      service from listening on an address.                    
                </javadoc>
                <method name="address" type="String" line="157"/>
                <javadoc line="157">
                    Returns a string representation of the listen key.                    
                </javadoc>
            </class>
            <method name="startListening" type="ListenKey" line="162"/>
            <javadoc line="162">
                Listens on the specified address for inbound connections.
                  &lt;p&gt; This method starts the transport service listening on
                  the specified address so that it can subsequently accept
                  an inbound connection. It does not wait until an inbound
                  connection is established.                
                <param>
                    addressThe address to start listening for connections,
                      or &lt;tt&gt;null&lt;/tt&gt; to listen on an address choosen
                      by the transport service.                    
                </param>
                <return>
                    a listen key to be used in subsequent calls to be{@link #accept accept} or {@link #stopListeningstopListening} methods.                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs.                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf the specific address is invalid                    
                </throws>
            </javadoc>
            <method name="startListening" type="ListenKey" line="176"/>
            <javadoc line="176">
                Listens on an address choosen by the transport service.
                  &lt;p&gt; This convenience method works as if by invoking {@link #startListening(String) startListening(&lt;tt&gt;null&lt;/tt&gt;)}. &lt;/p&gt;                
                <return>
                    a listen key to be used in subsequent calls to be{@link #accept accept} or {@link #stopListeningstopListening} methods.                    
                </return>
                <throws>
                    IOExceptionIf an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="stopListening" type="void" line="183"/>
            <javadoc line="183">
                Stop listening for inbound connections.
                  &lt;p&gt; Invoking this method while another thread is blocked
                  in {@link #accept accept}, with the same listen key,
                  waiting to accept a connection will cause that thread to
                  throw an IOException. If the thread blocked in accept
                  has already accepted a connection from a target VM and
                  is in the process of handshaking with the target VM then
                  invoking this method will not cause the thread to throw
                  an exception.                
                <param>
                    listenKeyThe listen key obtained from a previous call to {@link #startListening(String)} or {@link #startListening()}.                    
                </param>
                <throws>
                    IllegalArgumentExceptionIf the listen key is invalid                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs.                    
                </throws>
            </javadoc>
            <method name="accept" type="Connection" line="198"/>
            <javadoc line="198">
                Accept a connection from a target VM.
                  &lt;p&gt; Waits (indefinitely or with timeout) to accept a connection
                  from a target VM. Returns a connection representing the
                  bi-directional communication channel to the target VM.
                  &lt;p&gt; Accepting a connection from a target VM involves two
                  steps. First, the transport service waits to accept
                  the connection from the target VM. Once the connection is
                  established a handshake is performed to ensure that the
                  connection is indeed to a target VM. The handshake involves
                  the exchange of a string &lt;i&gt;JDWP-Handshake&lt;/i&gt; as specified
                  in the &lt;a
                  href=&quot;../../../../../../../../../technotes/guides/jpda/jdwp-spec.html&quot;&gt;
                  Java Debug Wire Protocol&lt;/a&gt; specification.                
                <param>
                    listenKeyA listen key obtained from a previous call to {@link #startListening(String)} or {@link #startListening()}.                    
                </param>
                <param>
                    acceptTimeoutif this transport service supports an accept timeout, and
                      if &lt;tt&gt;acceptTimeout&lt;/tt&gt; is positive then block for up to
                      &lt;tt&gt;acceptTimeout&lt;/tt&gt; milliseconds, more or less, while waiting
                      for the target VM to connect.
                      If the transport service does not support an accept timeout
                      or if &lt;tt&gt;acceptTimeout&lt;/tt&gt; is zero then block indefinitely
                      for a target VM to connect.                    
                </param>
                <param>
                    handshakeTimeoutIf this transport service supports a handshake timeout,
                      and if &lt;tt&gt;handshakeTimeout&lt;/tt&gt; is positive, then it
                      specifies the timeout, in milliseconds (more or less), to
                      use when handshaking with the target VM. The exact
                      usage of the timeout is specific to the transport service.
                      A transport service may, for example, use the handshake
                      timeout as the inter-character timeout while waiting for
                      the &lt;i&gt;JDWP-Handshake&lt;/i&gt; message from the target VM.
                      Alternatively, a transport service may, for example,
                      use the timeout as a timeout for the duration of the
                      handshake exchange.
                      If the transport service does not support a handshake
                      timeout, of if &lt;tt&gt;handshakeTimeout&lt;/tt&gt; is specified
                      as zero then the handshake does not timeout if there
                      isn&apos;t a response from the target VM.                    
                </param>
                <return>
                    The Connection representing the bi-directional
                      communication channel to the target VM.                    
                </return>
                <throws>
                    TransportTimeoutExceptionIf a timeout occurs while waiting for a target VM
                      to connect.                    
                </throws>
                <throws>
                    IOExceptionIf an I/O error occurs (including a timeout when
                      handshaking).                    
                </throws>
                <throws>
                    IllegalArgumentExceptionIf the value of the acceptTimeout argument, or
                      handshakeTimeout is negative, or an invalid listen key
                      is provided.                    
                </throws>
                <throws>
                    IllegalStateExceptionIf {@link #stopListening stopListening} has already been
                      called with this listen key and the transport service
                      is no longer listening for inbound connections.                    
                </throws>
                <see>
                    TransportService.Capabilities#supportsAcceptTimeout()                    
                </see>
            </javadoc>
        </class>
    </source>