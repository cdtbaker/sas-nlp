<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi.event">
        <import package="com.sun.jdi"/>
        <interface name="EventQueue">
            <implements interface="Mirror"/>
            <javadoc line="3">
                Manager of incoming debugger events for a target VM.
                  Events are always grouped in {@link EventSet}s.
                  EventSets generated by the debugger back end can be read
                  here. There is one instance of EventQueue assigned to a particular{@link com.sun.jdi.VirtualMachine VirtualMachine}.
                  &lt;P&gt;
                  Some events cause the suspension of the target VM - event requests
                  ({@link com.sun.jdi.request}) with a{@link com.sun.jdi.request.EventRequest#suspendPolicy() suspend policy}of {@link com.sun.jdi.request.EventRequest#SUSPEND_ALL SUSPEND_ALL}or {@link com.sun.jdi.request.EventRequest#SUSPEND_EVENT_THREADSUSPEND_EVENT_THREAD} and sometimes{@link VMStartEvent}.
                  If these suspensions are not resumed the target VM will hang.
                  Thus, it is always good policy to{@link #remove() remove()} every EventSet from the
                  event queue until an EventSet containing a{@link VMDisconnectEvent} is read.
                  Unless {@link com.sun.jdi.VirtualMachine#resume() resume} is
                  being handled in another way, each EventSet should invoke{@link EventSet#resume()}.                
                <see>
                    EventSet                    
                </see>
                <see>
                    VirtualMachine                    
                </see>
                <author>
                    Robert Field                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="remove" type="EventSet" line="22"/>
            <javadoc line="22">
                Waits forever for the next available event.                
                <return>
                    the next {@link EventSet}.                    
                </return>
                <throws>
                    InterruptedException if any thread has interrupted
                      this thread.                    
                </throws>
                <throws>
                    com.sun.jdi.VMDisconnectedException if the connection
                      to the target VM is no longer available.  Note this will always
                      be preceded by a {@link com.sun.jdi.event.VMDisconnectEvent}.                    
                </throws>
            </javadoc>
            <method name="remove" type="EventSet" line="32"/>
            <javadoc line="32">
                Waits a specified time for the next available event.                
                <param>
                    timeout Time in milliseconds to wait for the next event                    
                </param>
                <return>
                    the next {@link EventSet}, or null if there is a timeout.                    
                </return>
                <throws>
                    InterruptedException if any thread has interrupted
                      this thread.                    
                </throws>
                <throws>
                    com.sun.jdi.VMDisconnectedException if the connection
                      to the target VM is no longer available.  Note this will always
                      be preceded by a {@link com.sun.jdi.event.VMDisconnectEvent}.                    
                </throws>
                <throws>
                    IllegalArgumentException if the timeout argument
                      contains an illegal value.                    
                </throws>
            </javadoc>
        </interface>
    </source>