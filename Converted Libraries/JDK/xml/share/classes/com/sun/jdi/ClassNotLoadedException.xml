<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi">
        <class name="ClassNotLoadedException" line="2">
            <extends class="Exception"/>
            <javadoc line="2">
                Thrown to indicate that the requested class has
                  not yet been loaded through the appropriate class loader.
                  &lt;p&gt;
                  Due to the lazy class linking performed by many VMs, it is
                  possible for a field or variable to be visible in a program
                  before the associated class is loaded. Until the class is loaded
                  all that is available is a signature string. If an attempt is made to
                  set the value of such a field or variable from JDI, the appropriate
                  type checking cannot be done because the destination class has not been
                  loaded. The same is true for the element class of array elements.
                  &lt;p&gt;
                  It is not advisable to solve this problem by attempting a class load on
                  the fly in this case. There are two problems in having the debugger load
                  a class instead of waiting for it to load over the normal course
                  of events.
                  &lt;ul&gt;
                  &lt;li&gt;There can be no guarantee that running the appropriate class
                  loader won&apos;t cause a deadlock in loading the
                  class. Class loaders can consist of arbitrary
                  Java&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt; programming language code and the
                  class loading methods are usually synchronized. Most of the work
                  done by a debugger happens when threads are suspended. If another
                  application thread is suspended within the same class loader,
                  a deadlock is very possible.
                  &lt;li&gt;Changing the order in which classes are normally loaded may either mask
                  or reveal bugs in the application. An unintrusive debugger should strive
                  to leave unchanged the behavior of the application being debugged.
                  &lt;/ul&gt;
                  To avoid these potential problems, this exception is thrown.
                  &lt;p&gt;
                  Note that this exception will be thrown until the class in question
                  is visible to the class loader of enclosing class. (That is, the
                  class loader of the enclosing class must be an &lt;i&gt;initiating&lt;/i&gt; class
                  loader for the class in question.)
                  See
                  &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;
                  for more details.                
                <author>
                    Gordon Hirsch                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="className" type="String" line="44"/>
            <method name="ClassNotLoadedException" type="constructor" line="45">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <method name="ClassNotLoadedException" type="constructor" line="49">
                <params>
                    <param name="className" type="String"/>
                    <param name="message" type="String"/>
                </params>
            </method>
            <method name="className" type="String" line="53"/>
        </class>
    </source>