<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi">
        <import package="java.util.List"/>
        <interface name="Method">
            <implements interface="TypeComponent"/>
            <implements interface="Locatable"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Method"/>
                </type_params>
            </implements>
            <javadoc line="30">
                A static or instance method in the target VM. See {@link TypeComponent}for general information about Field and Method mirrors.                
                <see>
                    ObjectReference                    
                </see>
                <see>
                    ReferenceType                    
                </see>
                <author>
                    Robert Field                    
                </author>
                <author>
                    Gordon Hirsch                    
                </author>
                <author>
                    James McIlree                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="returnTypeName" type="String" line="44"/>
            <javadoc line="44">
                Returns a text representation of the return type,
                  as specified in the declaration of this method.
                  &lt;P&gt;
                  This type name is always available even if
                  the type has not yet been created or loaded.                
                <return>
                    a String containing the return type name.                    
                </return>
            </javadoc>
            <method name="returnType" type="Type" line="55"/>
            <javadoc line="55">
                Returns the return type,
                  as specified in the declaration of this method.
                  &lt;P&gt;
                  Note: if the return type of this method is a reference type (class,
                  interface, or array) and it has not been created or loaded
                  by the declaring type&apos;s class loader - that is,{@link TypeComponent#declaringType &lt;CODE&gt;declaringType()&lt;/CODE&gt;}&lt;CODE&gt;.classLoader()&lt;/CODE&gt;,
                  then ClassNotLoadedException will be thrown.
                  Also, a reference type may have been loaded but not yet prepared,
                  in which case the type will be returned
                  but attempts to perform some operations on the returned type
                  (e.g. {@link ReferenceType#fields() fields()}) will throw
                  a {@link ClassNotPreparedException}.
                  Use {@link ReferenceType#isPrepared()} to determine if
                  a reference type is prepared.                
                <see>
                    Type                    
                </see>
                <see>
                    Field#type() Field.type() - for usage examples                    
                </see>
                <return>
                    the return {@link Type} of this method.                    
                </return>
                <throws>
                    ClassNotLoadedException if the type has not yet been
                      created or loaded
                      through the appropriate class loader.                    
                </throws>
            </javadoc>
            <method name="argumentTypeNames" type="List<String>" line="82"/>
            <javadoc line="82">
                Returns a list containing a text representation of the type
                  of each formal parameter of this method.
                  &lt;P&gt;
                  This list is always available even if
                  the types have not yet been created or loaded.                
                <return>
                    a {@link java.util.List List} of {@link String},
                      one List element for each parameter of this method.
                      Each element represents the type of a formal parameter
                      as specified at compile-time.
                      If the formal parameter was declared with an ellipsis, then
                      it is represented as an array of the type before the ellipsis.                    
                </return>
            </javadoc>
            <method name="argumentTypes" type="List<Type>" line="99"/>
            <javadoc line="99">
                Returns a list containing the type
                  of each formal parameter of this method.
                  &lt;P&gt;
                  Note: if there is any parameter whose type
                  is a reference type (class, interface, or array)
                  and it has not been created or loaded
                  by the declaring type&apos;s class loader - that is,{@link TypeComponent#declaringType &lt;CODE&gt;declaringType()&lt;/CODE&gt;}&lt;CODE&gt;.classLoader()&lt;/CODE&gt;,
                  then ClassNotLoadedException will be thrown.
                  Also, a reference type may have been loaded but not yet prepared,
                  in which case the list will be returned
                  but attempts to perform some operations on the type
                  (e.g. {@link ReferenceType#fields() fields()}) will throw
                  a {@link ClassNotPreparedException}.
                  Use {@link ReferenceType#isPrepared()} to determine if
                  a reference type is prepared.                
                <see>
                    Type                    
                </see>
                <return>
                    return a {@link java.util.List List} of {@link Type},
                      one List element for each parameter of this method.
                      Each element represents the type of a formal parameter
                      as specified at compile-time.
                      If the formal parameter was declared with an ellipsis, then
                      it is represented as an array of the type before the ellipsis.                    
                </return>
                <throws>
                    ClassNotLoadedException if the type has not yet been loaded
                      through the appropriate class loader.                    
                </throws>
            </javadoc>
            <method name="isAbstract" type="boolean" line="131"/>
            <javadoc line="131">
                Determine if this method is abstract.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the method is declared abstract;
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="isSynchronized" type="boolean" line="139"/>
            <javadoc line="139">
                Determine if this method is synchronized.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the method is declared synchronized;
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="isNative" type="boolean" line="147"/>
            <javadoc line="147">
                Determine if this method is native.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the method is declared native;
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="isVarArgs" type="boolean" line="155"/>
            <javadoc line="155">
                Determine if this method accepts a variable number of arguments.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the method accepts a variable number
                      of arguments, false otherwise.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isBridge" type="boolean" line="165"/>
            <javadoc line="165">
                Determine if this method is a bridge method. Bridge
                  methods are defined in
                  &lt;cite&gt;The Java&amp;trade; Language Specification&lt;/cite&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the method is a bridge method,
                      false otherwise.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isConstructor" type="boolean" line="177"/>
            <javadoc line="177">
                Determine if this method is a constructor.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the method is a constructor;
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="isStaticInitializer" type="boolean" line="185"/>
            <javadoc line="185">
                Determine if this method is a static initializer.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the method is a static initializer;
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="isObsolete" type="boolean" line="193"/>
            <javadoc line="193">
                Determine if this method is obsolete.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this method has been made obsolete by a{@link VirtualMachine#redefineClasses} operation.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="allLineLocations" type="List<Location>" line="203"/>
            <javadoc line="203">
                Returns a list containing a {@link Location} object for
                  each executable source line in this method.
                  &lt;P&gt;
                  This method is equivalent to
                  &lt;code&gt;allLineLocations(vm.getDefaultStratum(),null)&lt;/code&gt; -
                  see {@link #allLineLocations(String,String)}for more information.                
                <return>
                    a List of all source line {@link Location} objects.                    
                </return>
                <throws>
                    AbsentInformationException if there is no line
                      number information for this (non-native, non-abstract)
                      method.                    
                </throws>
            </javadoc>
            <method name="allLineLocations" type="List<Location>" line="220"/>
            <javadoc line="220">
                Returns a list containing a {@link Location} object for
                  each executable source line in this method.
                  &lt;P&gt;
                  Each location maps a source line to a range of code
                  indices.
                  The beginning of the range can be determined through{@link Location#codeIndex}.
                  The returned list is ordered by code index
                  (from low to high).
                  &lt;P&gt;
                  The returned list may contain multiple locations for a
                  particular line number, if the compiler and/or VM has
                  mapped that line to two or more disjoint code index ranges.
                  &lt;P&gt;
                  If the method is native or abstract, an empty list is
                  returned.
                  &lt;P&gt;
                  Returned list is for the specified &lt;i&gt;stratum&lt;/i&gt;
                  (see {@link Location} for a description of strata).                
                <param>
                    stratum The stratum to retrieve information from
                      or &lt;code&gt;null&lt;/code&gt; for the {@link ReferenceType#defaultStratum()}                    
                </param>
                <param>
                    sourceName Return locations only within this
                      source file or &lt;code&gt;null&lt;/code&gt; to return locations.                    
                </param>
                <return>
                    a List of all source line {@link Location} objects.                    
                </return>
                <throws>
                    AbsentInformationException if there is no line
                      number information for this (non-native, non-abstract)
                      method.  Or if &lt;i&gt;sourceName&lt;/i&gt; is non-&lt;code&gt;null&lt;/code&gt;
                      and source name information is not present.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="locationsOfLine" type="List<Location>" line="259"/>
            <javadoc line="259">
                Returns a List containing all {@link Location} objects
                  that map to the given line number.
                  &lt;P&gt;
                  This method is equivalent to
                  &lt;code&gt;locationsOfLine(vm.getDefaultStratum(), null,
                  lineNumber)&lt;/code&gt; -
                  see {@link #locationsOfLine(java.lang.String,java.lang.String,int)}for more information.                
                <param>
                    lineNumber the line number                    
                </param>
                <return>
                    a List of {@link Location} objects that map to
                      the given line number.                    
                </return>
                <throws>
                    AbsentInformationException if there is no line
                      number information for this method.                    
                </throws>
            </javadoc>
            <method name="locationsOfLine" type="List<Location>" line="280"/>
            <javadoc line="280">
                Returns a List containing all {@link Location} objects
                  that map to the given line number and source name.
                  &lt;P&gt;
                  Returns a list containing each {@link Location} that maps
                  to the given line. The returned list will contain a
                  location for each disjoint range of code indices that have
                  been assigned to the given line by the compiler and/or
                  VM. Each returned location corresponds to the beginning of
                  this range.  An empty list will be returned if there is no
                  executable code at the specified line number; specifically,
                  native and abstract methods will always return an empty
                  list.
                  &lt;p&gt;
                  Returned list is for the specified &lt;i&gt;stratum&lt;/i&gt;
                  (see {@link Location} for a description of strata).                
                <param>
                    stratum the stratum to use for comparing line number
                      and source name, or null to use the default
                      stratum                    
                </param>
                <param>
                    sourceName the source name containing the
                      line number, or null to match all
                      source names                    
                </param>
                <param>
                    lineNumber the line number                    
                </param>
                <return>
                    a List of {@link Location} objects that map to
                      the given line number.                    
                </return>
                <throws>
                    AbsentInformationException if there is no line
                      number information for this method.
                      Or if &lt;i&gt;sourceName&lt;/i&gt; is non-&lt;code&gt;null&lt;/code&gt;
                      and source name information is not present.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="locationOfCodeIndex" type="Location" line="319"/>
            <javadoc line="319">
                Returns a {@link Location} for the given code index.                
                <return>
                    the {@link Location} corresponding to the
                      given code index or null if the specified code index is not a
                      valid code index for this method (native and abstract methods
                      will always return null).                    
                </return>
            </javadoc>
            <method name="variables" type="List<LocalVariable>" line="329"/>
            <javadoc line="329">
                Returns a list containing each {@link LocalVariable} declared
                  in this method. The list includes any variable declared in any
                  scope within the method. It may contain multiple variables of the
                  same name declared within disjoint scopes. Arguments are considered
                  local variables and will be present in the returned list.
                  If local variable information is not available, values of
                  actual arguments to method invocations can be obtained
                  by using the method {@link StackFrame#getArgumentValues()}                
                <return>
                    the list of {@link LocalVariable} objects which mirror
                      local variables declared in this method in the target VM.
                      If there are no local variables, a zero-length list is returned.                    
                </return>
                <throws>
                    AbsentInformationException if there is no variable
                      information for this method.
                      Generally, local variable information is not available for
                      native or abstract methods (that is, their argument name
                      information is not available), thus they will throw this exception.                    
                </throws>
            </javadoc>
            <method name="variablesByName" type="List<LocalVariable>" line="351"/>
            <javadoc line="351">
                Returns a list containing each {@link LocalVariable} of a
                  given name in this method.
                  Multiple variables can be returned
                  if the same variable name is used in disjoint
                  scopes within the method.                
                <return>
                    the list of {@link LocalVariable} objects of the given
                      name.
                      If there are no matching local variables, a zero-length list
                      is returned.                    
                </return>
                <throws>
                    AbsentInformationException if there is no variable
                      information for this method.
                      Generally, local variable information is not available for
                      native or abstract methods (that is, their argument name
                      information is not available), thus they will throw this exception.                    
                </throws>
            </javadoc>
            <method name="arguments" type="List<LocalVariable>" line="371"/>
            <javadoc line="371">
                Returns a list containing each {@link LocalVariable} that is
                  declared as an argument of this method.
                  If local variable information is not available, values of
                  actual arguments to method invocations can be obtained
                  by using the method {@link StackFrame#getArgumentValues()}                
                <return>
                    the list of {@link LocalVariable} arguments.
                      If there are no arguments, a zero-length list is returned.                    
                </return>
                <throws>
                    AbsentInformationException if there is no variable
                      information for this method.
                      Generally, local variable information is not available for
                      native or abstract methods (that is, their argument name
                      information is not available), thus they will throw this exception.                    
                </throws>
            </javadoc>
            <method name="bytecodes" type="byte[]" line="389"/>
            <javadoc line="389">
                Returns an array containing the bytecodes for this method.
                  &lt;P&gt;
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canGetBytecodes()}to determine if the operation is supported.                
                <return>
                    the array of bytecodes; abstract and native methods
                      will return a zero-length array.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target virtual machine does not support
                      the retrieval of bytecodes.                    
                </throws>
            </javadoc>
            <method name="location" type="Location" line="404"/>
            <javadoc line="404">
                Returns the {@link Location} of this method, if there
                  is executable code associated with it.                
                <return>
                    the {@link Location} of this mirror, or null if
                      this is an abstract method; native methods will return a
                      Location object whose codeIndex is -1.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="414"/>
            <javadoc line="414">
                Compares the specified Object with this method for equality.                
                <return>
                    true if the Object is a method and if both
                      mirror the same method (declared in the same class or interface, in
                      the same VM).                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="423"/>
            <javadoc line="423">
                Returns the hash code value for this Method.                
                <return>
                    the integer hash code                    
                </return>
            </javadoc>
        </interface>
    </source>