<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi">
        <interface name="Type">
            <implements interface="Mirror"/>
            <javadoc line="2">
                The mirror for a type in the target VM.
                  This interface is the root of a type hierarchy encompassing primitive
                  types and reference types.
                  &lt;P&gt;
                  A Type may be used to represent a run-time type:
                  &lt;BLOCKQUOTE&gt;{@link Value}.type()
                  &lt;/BLOCKQUOTE&gt;
                  or a compile-time type:
                  &lt;BLOCKQUOTE&gt;{@link Field#type()} &lt;BR&gt;{@link Method#returnType()} &lt;BR&gt;{@link Method#argumentTypes()} &lt;BR&gt;{@link LocalVariable#type()} &lt;BR&gt;{@link ArrayType#componentType()}&lt;/BLOCKQUOTE&gt;
                  &lt;P&gt;
                  The following table illustrates which subinterfaces of Type
                  are used to mirror types in the target VM --
                  &lt;TABLE BORDER=1 SUMMARY=&quot;Maps each type declared in target to a mirrored
                  instance of a subinterface of PrimitiveType or ReferenceType&quot;&gt;
                  &lt;TR BGCOLOR=&quot;#EEEEFF&quot;&gt;
                  &lt;TH id=&quot;primtype&quot; colspan=3&gt;Subinterfaces of {@link PrimitiveType}&lt;/TH&gt;
                  &lt;TR BGCOLOR=&quot;#EEEEFF&quot;&gt;
                  &lt;TH id=&quot;declared&quot; align=&quot;left&quot; colspan=2&gt;Type declared in target as&lt;/TH&gt;
                  &lt;TH id=&quot;mirrored&quot; align=&quot;left&quot;&gt;Is mirrored as an instance of&lt;/TH&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;primtype declared&quot; colspan=2&gt;&lt;CODE&gt;boolean&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;primtype mirrored&quot;&gt; {@link BooleanType}&lt;/TD&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;primtype declared&quot; colspan=2&gt;&lt;CODE&gt;byte&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;primtype mirrored&quot;&gt;{@link ByteType}&lt;/TD&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;primtype declared&quot; colspan=2&gt;&lt;CODE&gt;char&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;primtype mirrored&quot;&gt;{@link CharType}&lt;/TD&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;primtype declared&quot; colspan=2&gt;&lt;CODE&gt;double&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;primtype mirrored&quot;&gt;{@link DoubleType}&lt;/TD&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;primtype declared&quot; colspan=2&gt;&lt;CODE&gt;float&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;primtype mirrored&quot;&gt;{@link FloatType}&lt;/TD&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;primtype declared&quot; colspan=2&gt;&lt;CODE&gt;int&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;primtype mirrored&quot;&gt;{@link IntegerType}&lt;/TD&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;primtype declared&quot; colspan=2&gt;&lt;CODE&gt;long&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;primtype mirrored&quot;&gt;{@link LongType}&lt;/TD&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;primtype declared&quot; colspan=2&gt;&lt;CODE&gt;short&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;primtype mirrored&quot;&gt;{@link ShortType}&lt;/TD&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;primtype declared&quot; colspan=2&gt;&lt;CODE&gt;void&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;primtype mirrored&quot;&gt;{@link VoidType}&lt;/TD&gt;
                  &lt;TR BGCOLOR=&quot;#EEEEFF&quot;&gt;
                  &lt;TH id=&quot;reftype&quot;  colspan=3&gt;Subinterfaces of {@link ReferenceType}&lt;/TH&gt;
                  &lt;TR BGCOLOR=&quot;#EEEEFF&quot;&gt;
                  &lt;TH id=&quot;declared2&quot; align=&quot;left&quot;&gt;Type declared in target as&lt;/TH&gt;
                  &lt;TH id=&quot;example2&quot;  align=&quot;left&quot;&gt;For example&lt;/TH&gt;
                  &lt;TH id=&quot;mirrored2&quot; align=&quot;left&quot;&gt;Is mirrored as an instance of&lt;/TH&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;reftype declared2&quot;&gt;&lt;I&gt;a class&lt;/I&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;reftype example2&quot;&gt;&lt;CODE&gt;Date&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;reftype mirrored2&quot;&gt;{@link ClassType}&lt;/TD&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;reftype declared2&quot;&gt;&lt;I&gt;an interface&lt;/I&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;reftype example2&quot;&gt;&lt;CODE&gt;Runnable&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;reftype mirrored2&quot;&gt;{@link InterfaceType}&lt;/TD&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;reftype declared2&quot;&gt;&lt;I&gt;an array&lt;/I&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;reftype example2&quot;&gt;&amp;nbsp;&lt;/TD&gt;
                  &lt;TD headers=&quot;reftype mirrored2&quot;&gt;{@link ArrayType}&lt;/TD&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;reftype declared2&quot;&gt;&lt;I&gt;an array&lt;/I&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;reftype example2&quot;&gt;&lt;CODE&gt;int[]&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;reftype mirrored2&quot;&gt;{@link ArrayType} whose{@link ArrayType#componentType() componentType()} is{@link IntegerType}&lt;/TD&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;reftype declared2&quot;&gt;&lt;I&gt;an array&lt;/I&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;reftype example2&quot;&gt;&lt;CODE&gt;Date[]&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;reftype mirrored2&quot;&gt;{@link ArrayType} whose{@link ArrayType#componentType() componentType()} is{@link ClassType}&lt;/TD&gt;
                  &lt;TR&gt;
                  &lt;TD headers=&quot;reftype declared2&quot;&gt;&lt;I&gt;an array&lt;/I&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;reftype example2&quot;&gt;&lt;CODE&gt;Runnable[]&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD headers=&quot;reftype mirrored2&quot;&gt;{@link ArrayType} whose{@link ArrayType#componentType() componentType()} is{@link InterfaceType}&lt;/TD&gt;
                  &lt;/TABLE&gt;                
                <see>
                    PrimitiveType Subinterface PrimitiveType                    
                </see>
                <see>
                    ReferenceType Subinterface ReferenceType                    
                </see>
                <see>
                    Value Value - for relationship between Type and Value                    
                </see>
                <see>
                    Field#type() Field.type() - for usage examples                    
                </see>
                <author>
                    Robert Field                    
                </author>
                <author>
                    Gordon Hirsch                    
                </author>
                <author>
                    James McIlree                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="signature" type="String" line="90"/>
            <javadoc line="90">
                Returns the JNI-style signature for this type.
                  &lt;p&gt;
                  For primitive classes
                  the returned signature is the signature of the corresponding primitive
                  type; for example, &quot;I&quot; is returned as the signature of the class
                  represented by {@link java.lang.Integer#TYPE}.                
                <see>
                    &lt;a href=&quot;doc-files/signature.html&quot;&gt;Type Signatures&lt;/a&gt;                    
                </see>
                <return>
                    the string containing the type signature.                    
                </return>
            </javadoc>
            <method name="name" type="String" line="101"/>
            <javadoc line="101">
                @return a text representation of this type.                
            </javadoc>
        </interface>
    </source>