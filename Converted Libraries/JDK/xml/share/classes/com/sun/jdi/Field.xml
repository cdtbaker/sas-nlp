<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi">
        <interface name="Field">
            <implements interface="TypeComponent"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Field"/>
                </type_params>
            </implements>
            <javadoc line="2">
                A class or instance variable in the target VM.
                  See {@link TypeComponent}for general information about Field and Method mirrors.                
                <see>
                    ObjectReference                    
                </see>
                <see>
                    ReferenceType                    
                </see>
                <author>
                    Robert Field                    
                </author>
                <author>
                    Gordon Hirsch                    
                </author>
                <author>
                    James McIlree                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="typeName" type="String" line="13"/>
            <javadoc line="13">
                Returns a text representation of the type
                  of this field.
                  Where the type is the type specified in the declaration
                  of this field.
                  &lt;P&gt;
                  This type name is always available even if
                  the type has not yet been created or loaded.                
                <return>
                    a String representing the
                      type of this field.                    
                </return>
            </javadoc>
            <method name="type" type="Type" line="25"/>
            <javadoc line="25">
                Returns the type of this field.
                  Where the type is the type specified in the declaration
                  of this field.
                  &lt;P&gt;
                  For example, if a target class defines:
                  &lt;PRE&gt;
                  short s;
                  Date d;
                  byte[] ba;&lt;/PRE&gt;
                  And the JDI client defines these &lt;CODE&gt;Field&lt;/CODE&gt; objects:
                  &lt;PRE&gt;
                  Field sField = targetClass.fieldByName(&quot;s&quot;);
                  Field dField = targetClass.fieldByName(&quot;d&quot;);
                  Field baField = targetClass.fieldByName(&quot;ba&quot;);&lt;/PRE&gt;
                  to mirror the corresponding fields, then &lt;CODE&gt;sField.type()&lt;/CODE&gt;
                  is a {@link ShortType}, &lt;CODE&gt;dField.type()&lt;/CODE&gt; is the{@link ReferenceType} for &lt;CODE&gt;java.util.Date&lt;/CODE&gt; and
                  &lt;CODE&gt;((ArrayType)(baField.type())).componentType()&lt;/CODE&gt; is a{@link ByteType}.
                  &lt;P&gt;
                  Note: if the type of this field is a reference type (class,
                  interface, or array) and it has not been created or loaded
                  by the declaring type&apos;s class loader - that is,{@link TypeComponent#declaringType &lt;CODE&gt;declaringType()&lt;/CODE&gt;}&lt;CODE&gt;.classLoader()&lt;/CODE&gt;,
                  then ClassNotLoadedException will be thrown.
                  Also, a reference type may have been loaded but not yet prepared,
                  in which case the type will be returned
                  but attempts to perform some operations on the returned type
                  (e.g. {@link ReferenceType#fields() fields()}) will throw
                  a {@link ClassNotPreparedException}.
                  Use {@link ReferenceType#isPrepared()} to determine if
                  a reference type is prepared.                
                <see>
                    Type                    
                </see>
                <return>
                    the {@link Type} of this field.                    
                </return>
                <throws>
                    ClassNotLoadedException if the type has not yet been loaded
                      or created through the appropriate class loader.                    
                </throws>
            </javadoc>
            <method name="isTransient" type="boolean" line="61"/>
            <javadoc line="61">
                Determine if this is a transient field.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this field is transient; false otherwise.                    
                </return>
            </javadoc>
            <method name="isVolatile" type="boolean" line="66"/>
            <javadoc line="66">
                Determine if this is a volatile field.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this field is volatile; false otherwise.                    
                </return>
            </javadoc>
            <method name="isEnumConstant" type="boolean" line="71"/>
            <javadoc line="71">
                Determine if this is a field that represents an enum constant.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this field represents an enum constant;
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="77"/>
            <javadoc line="77">
                Compares the specified Object with this field for equality.                
                <return>
                    true if the Object is a Field and if both
                      mirror the same field (declared in the same class or interface, in
                      the same VM).                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="84"/>
            <javadoc line="84">
                Returns the hash code value for this Field.                
                <return>
                    the integer hash code                    
                </return>
            </javadoc>
        </interface>
    </source>