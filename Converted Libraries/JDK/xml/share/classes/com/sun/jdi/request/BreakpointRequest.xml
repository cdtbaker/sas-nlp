<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi.request">
        <import package="com.sun.jdi"/>
        <interface name="BreakpointRequest">
            <implements interface="EventRequest"/>
            <implements interface="Locatable"/>
            <javadoc line="3">
                Identifies a {@link Location} in the target VM at which
                  execution should be stopped. When an enabled BreakpointRequest is
                  satisfied, an{@link com.sun.jdi.event.EventSet event set} containing an{@link com.sun.jdi.event.BreakpointEvent BreakpointEvent}will be placed on the{@link com.sun.jdi.event.EventQueue EventQueue} and
                  the application is interrupted. The collection of existing breakpoints is
                  managed by the {@link EventRequestManager}                
                <see>
                    Location                    
                </see>
                <see>
                    com.sun.jdi.event.BreakpointEvent                    
                </see>
                <see>
                    com.sun.jdi.event.EventQueue                    
                </see>
                <see>
                    EventRequestManager                    
                </see>
                <author>
                    Robert Field                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="location" type="Location" line="17"/>
            <javadoc line="17">
                Returns the location of the requested breakpoint.                
                <return>
                    the {@link Location} where this breakpoint has been set.                    
                </return>
            </javadoc>
            <method name="addThreadFilter" type="void" line="22"/>
            <javadoc line="22">
                Restricts the events generated by this request to those in
                  the given thread.                
                <param>
                    thread the thread to filter on.                    
                </param>
                <throws>
                    InvalidRequestStateException if this request is currently
                      enabled or has been deleted.
                      Filters may be added only to disabled requests.                    
                </throws>
            </javadoc>
            <method name="addInstanceFilter" type="void" line="31"/>
            <javadoc line="31">
                Restricts the events generated by this request to those in
                  which the currently executing instance is the object
                  specified.
                  &lt;P&gt;
                  Not all targets support this operation.
                  Use {@link VirtualMachine#canUseInstanceFilters()}to determine if the operation is supported.                
                <since>
                    1.4                    
                </since>
                <param>
                    instance the object which must be the current instance
                      in order to pass this filter.                    
                </param>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target virtual machine does not support this
                      operation.                    
                </throws>
                <throws>
                    InvalidRequestStateException if this request is currently
                      enabled or has been deleted.
                      Filters may be added only to disabled requests.                    
                </throws>
            </javadoc>
        </interface>
    </source>