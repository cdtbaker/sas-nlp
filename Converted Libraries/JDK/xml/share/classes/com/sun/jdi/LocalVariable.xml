<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi">
        <interface name="LocalVariable">
            <implements interface="Mirror"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="LocalVariable"/>
                </type_params>
            </implements>
            <javadoc line="2">
                A local variable in the target VM. Each variable declared within a{@link Method} has its own LocalVariable object. Variables of the same
                  name declared in different scopes have different LocalVariable objects.
                  LocalVariables can be used alone to retrieve static information
                  about their declaration, or can be used in conjunction with a{@link StackFrame} to set and get values.                
                <see>
                    StackFrame                    
                </see>
                <see>
                    Method                    
                </see>
                <author>
                    Robert Field                    
                </author>
                <author>
                    Gordon Hirsch                    
                </author>
                <author>
                    James McIlree                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="name" type="String" line="15"/>
            <javadoc line="15">
                Gets the name of the local variable.                
                <return>
                    a string containing the name.                    
                </return>
            </javadoc>
            <method name="typeName" type="String" line="20"/>
            <javadoc line="20">
                Returns a text representation of the type
                  of this variable.
                  Where the type is the type specified in the declaration
                  of this local variable.
                  &lt;P&gt;
                  This type name is always available even if
                  the type has not yet been created or loaded.                
                <return>
                    a String representing the
                      type of this local variable.                    
                </return>
            </javadoc>
            <method name="type" type="Type" line="32"/>
            <javadoc line="32">
                Returns the type of this variable.
                  Where the type is the type specified in the declaration
                  of this local variable.
                  &lt;P&gt;
                  Note: if the type of this variable is a reference type (class,
                  interface, or array) and it has not been created or loaded
                  by the class loader of the enclosing class,
                  then ClassNotLoadedException will be thrown.
                  Also, a reference type may have been loaded but not yet prepared,
                  in which case the type will be returned
                  but attempts to perform some operations on the returned type
                  (e.g. {@link ReferenceType#fields() fields()}) will throw
                  a {@link ClassNotPreparedException}.
                  Use {@link ReferenceType#isPrepared()} to determine if
                  a reference type is prepared.                
                <see>
                    Type                    
                </see>
                <see>
                    Field#type() Field.type() - for usage examples                    
                </see>
                <return>
                    the {@link Type} of this local variable.                    
                </return>
                <throws>
                    ClassNotLoadedException if the type has not yet been loaded
                      through the appropriate class loader.                    
                </throws>
            </javadoc>
            <method name="signature" type="String" line="55"/>
            <javadoc line="55">
                Gets the JNI signature of the local variable.                
                <see>
                    &lt;a href=&quot;doc-files/signature.html&quot;&gt;Type Signatures&lt;/a&gt;                    
                </see>
                <return>
                    a string containing the signature.                    
                </return>
            </javadoc>
            <method name="genericSignature" type="String" line="61"/>
            <javadoc line="61">
                Gets the generic signature for this variable if there is one.
                  Generic signatures are described in the
                  &lt;cite&gt;The Java&amp;trade; Virtual Machine Specification&lt;/cite&gt;.                
                <return>
                    a string containing the generic signature, or &lt;code&gt;null&lt;/code&gt;
                      if there is no generic signature.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isVisible" type="boolean" line="70"/>
            <javadoc line="70">
                Determines whether this variable can be accessed from the given{@link StackFrame}.
                  See {@link StackFrame#visibleVariables} for a complete description
                  variable visibility in this interface.                
                <param>
                    frame the StackFrame querying visibility                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this variable is visible;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
                <throws>
                    IllegalArgumentException if the stack frame&apos;s method
                      does not match this variable&apos;s method.                    
                </throws>
            </javadoc>
            <method name="isArgument" type="boolean" line="81"/>
            <javadoc line="81">
                Determines if this variable is an argument to its method.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this variable is an argument;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="87"/>
            <javadoc line="87">
                Compares the specified Object with this LocalVariable for equality.                
                <return>
                    true if the Object is a LocalVariable, if both LocalVariables
                      are contained in the same method (as determined by{@link Method#equals}), and if both LocalVariables mirror
                      the same declaration within that method                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="94"/>
            <javadoc line="94">
                Returns the hash code value for this LocalVariable.                
                <return>
                    the integer hash code                    
                </return>
            </javadoc>
        </interface>
    </source>