<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jdi.request">
        <import package="com.sun.jdi"/>
        <import package="java.util.List"/>
        <interface name="EventRequestManager">
            <implements interface="Mirror"/>
            <javadoc line="32">
                Manages the creation and deletion of {@link EventRequest}s. A single
                  implementor of this interface exists in a particuar VM and
                  is accessed through {@link VirtualMachine#eventRequestManager()}                
                <see>
                    EventRequest                    
                </see>
                <see>
                    com.sun.jdi.event.Event                    
                </see>
                <see>
                    BreakpointRequest                    
                </see>
                <see>
                    com.sun.jdi.event.BreakpointEvent                    
                </see>
                <see>
                    VirtualMachine                    
                </see>
                <author>
                    Robert Field                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="createClassPrepareRequest" type="ClassPrepareRequest" line="49"/>
            <javadoc line="49">
                Creates a new disabled {@link ClassPrepareRequest}.
                  The new event request is added to the list managed by this
                  EventRequestManager. Use {@link EventRequest#enable()} to
                  activate this event request.                
                <return>
                    the created {@link ClassPrepareRequest}                    
                </return>
            </javadoc>
            <method name="createClassUnloadRequest" type="ClassUnloadRequest" line="59"/>
            <javadoc line="59">
                Creates a new disabled {@link ClassUnloadRequest}.
                  The new event request is added to the list managed by this
                  EventRequestManager. Use {@link EventRequest#enable()} to
                  activate this event request.                
                <return>
                    the created {@link ClassUnloadRequest}                    
                </return>
            </javadoc>
            <method name="createThreadStartRequest" type="ThreadStartRequest" line="69"/>
            <javadoc line="69">
                Creates a new disabled {@link ThreadStartRequest}.
                  The new event request is added to the list managed by this
                  EventRequestManager. Use {@link EventRequest#enable()} to
                  activate this event request.                
                <return>
                    the created {@link ThreadStartRequest}                    
                </return>
            </javadoc>
            <method name="createThreadDeathRequest" type="ThreadDeathRequest" line="79"/>
            <javadoc line="79">
                Creates a new disabled {@link ThreadDeathRequest}.
                  The new event request is added to the list managed by this
                  EventRequestManager. Use {@link EventRequest#enable()} to
                  activate this event request.                
                <return>
                    the created {@link ThreadDeathRequest}                    
                </return>
            </javadoc>
            <method name="createExceptionRequest" type="ExceptionRequest" line="89"/>
            <javadoc line="89">
                Creates a new disabled {@link ExceptionRequest}.
                  The new event request is added to the list managed by this
                  EventRequestManager. Use {@link EventRequest#enable()} to
                  activate this event request.
                  &lt;P&gt;
                  A specific exception type and its subclasses can be selected
                  for exception events. Caught exceptions,  uncaught exceptions,
                  or both can be selected. Note, however, that
                  at the time an exception is thrown, it is not always
                  possible to determine whether it is truly caught. See{@link com.sun.jdi.event.ExceptionEvent#catchLocation} for
                  details.                
                <param>
                    refType If non-null, specifies that exceptions which are
                      instances of refType will be reported. Note: this
                      will include instances of sub-types.  If null,
                      all instances will be reported                    
                </param>
                <param>
                    notifyCaught If true, caught exceptions will be reported.                    
                </param>
                <param>
                    notifyUncaught If true, uncaught exceptions will be reported.                    
                </param>
                <return>
                    the created {@link ExceptionRequest}                    
                </return>
            </javadoc>
            <method name="createMethodEntryRequest" type="MethodEntryRequest" line="115"/>
            <javadoc line="115">
                Creates a new disabled {@link MethodEntryRequest}.
                  The new event request is added to the list managed by this
                  EventRequestManager. Use {@link EventRequest#enable()} to
                  activate this event request.                
                <return>
                    the created {@link MethodEntryRequest}                    
                </return>
            </javadoc>
            <method name="createMethodExitRequest" type="MethodExitRequest" line="125"/>
            <javadoc line="125">
                Creates a new disabled {@link MethodExitRequest}.
                  The new event request is added to the list managed by this
                  EventRequestManager. Use {@link EventRequest#enable()} to
                  activate this event request.                
                <return>
                    the created {@link MethodExitRequest}                    
                </return>
            </javadoc>
            <method name="createMonitorContendedEnterRequest" type="MonitorContendedEnterRequest" line="135"/>
            <javadoc line="135">
                Creates a new disabled {@link MonitorContendedEnterRequest}.
                  The new event request is added to the list managed by this
                  EventRequestManager. Use {@link EventRequest#enable()} to
                  activate this event request.
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canRequestMonitorEvents()}to determine if the operation is supported.                
                <return>
                    the created {@link MonitorContendedEnterRequest}                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target VM does not support this
                      operation.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createMonitorContendedEnteredRequest" type="MonitorContendedEnteredRequest" line="154"/>
            <javadoc line="154">
                Creates a new disabled {@link MonitorContendedEnteredRequest}.
                  The new event request is added to the list managed by this
                  EventRequestManager. Use {@link EventRequest#enable()} to
                  activate this event request.
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canRequestMonitorEvents()}to determine if the operation is supported.                
                <return>
                    the created {@link MonitorContendedEnteredRequest}                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target VM does not support this
                      operation.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createMonitorWaitRequest" type="MonitorWaitRequest" line="174"/>
            <javadoc line="174">
                Creates a new disabled {@link MonitorWaitRequest}.
                  The new event request is added to the list managed by this
                  EventRequestManager. Use {@link EventRequest#enable()} to
                  activate this event request.
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canRequestMonitorEvents()}to determine if the operation is supported.                
                <return>
                    the created {@link MonitorWaitRequest}                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target VM does not support this
                      operation.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createMonitorWaitedRequest" type="MonitorWaitedRequest" line="193"/>
            <javadoc line="193">
                Creates a new disabled {@link MonitorWaitedRequest}.
                  The new event request is added to the list managed by this
                  EventRequestManager. Use {@link EventRequest#enable()} to
                  activate this event request.
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canRequestMonitorEvents()}to determine if the operation is supported.                
                <return>
                    the created {@link MonitorWaitedRequest}                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target VM does not support this
                      operation.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createStepRequest" type="StepRequest" line="212"/>
            <javadoc line="212">
                Creates a new disabled {@link StepRequest}.
                  The new event request is added to the list managed by this
                  EventRequestManager. Use {@link EventRequest#enable()} to
                  activate this event request.
                  &lt;p&gt;
                  The returned request will control stepping only in the specified
                  &lt;code&gt;thread&lt;/code&gt;; all other threads will be unaffected.
                  A &lt;code&gt;size&lt;/code&gt;value of {@link com.sun.jdi.request.StepRequest#STEP_MIN} will generate a
                  step event each time the code index changes. It represents the
                  smallest step size available and often maps to the instruction
                  level.
                  A &lt;code&gt;size&lt;/code&gt; value of {@link com.sun.jdi.request.StepRequest#STEP_LINE} will generate a
                  step event each time the source line changes unless line number information is not available,
                  in which case a STEP_MIN will be done instead.  For example, no line number information is
                  available during the execution of a method that has been rendered obsolete by
                  by a {@link com.sun.jdi.VirtualMachine#redefineClasses} operation.
                  A &lt;code&gt;depth&lt;/code&gt; value of {@link com.sun.jdi.request.StepRequest#STEP_INTO} will generate
                  step events in any called methods.  A &lt;code&gt;depth&lt;/code&gt; value
                  of {@link com.sun.jdi.request.StepRequest#STEP_OVER} restricts step events to the current frame
                  or caller frames. A &lt;code&gt;depth&lt;/code&gt; value of {@link com.sun.jdi.request.StepRequest#STEP_OUT}restricts step events to caller frames only. All depth
                  restrictions are relative to the call stack immediately before the
                  step takes place.
                  &lt;p&gt;
                  Only one pending step request is allowed per thread.
                  &lt;p&gt;
                  Note that a typical debugger will want to cancel stepping
                  after the first step is detected.  Thus a next line method
                  would do the following:
                  &lt;code&gt;
                  &lt;pre&gt;
                  EventRequestManager mgr = myVM.{@link VirtualMachine#eventRequestManager eventRequestManager}();
                  StepRequest request = mgr.createStepRequest(myThread,
                  StepRequest.{@link StepRequest#STEP_LINE STEP_LINE},
                  StepRequest.{@link StepRequest#STEP_OVER STEP_OVER});
                  request.{@link EventRequest#addCountFilter addCountFilter}(1);  // next step only
                  request.enable();
                  myVM.{@link VirtualMachine#resume resume}();
                  &lt;/pre&gt;
                  &lt;/code&gt;                
                <param>
                    thread the thread in which to step                    
                </param>
                <param>
                    depth the step depth                    
                </param>
                <param>
                    size the step size                    
                </param>
                <return>
                    the created {@link StepRequest}                    
                </return>
                <throws>
                    DuplicateRequestException if there is already a pending
                      step request for the specified thread.                    
                </throws>
                <throws>
                    IllegalArgumentException if the size or depth arguments
                      contain illegal values.                    
                </throws>
            </javadoc>
            <method name="createBreakpointRequest" type="BreakpointRequest" line="267"/>
            <javadoc line="267">
                Creates a new disabled {@link BreakpointRequest}.
                  The given {@link Location} must have a valid
                  (that is, non-negative) code index. The new
                  breakpoint is added to the list managed by this
                  EventRequestManager. Multiple breakpoints at the
                  same location are permitted. Use {@link EventRequest#enable()} to
                  activate this event request.                
                <param>
                    location the location of the new breakpoint.                    
                </param>
                <return>
                    the created {@link BreakpointRequest}                    
                </return>
                <throws>
                    NativeMethodException if location is within a native method.                    
                </throws>
            </javadoc>
            <method name="createAccessWatchpointRequest" type="AccessWatchpointRequest" line="282"/>
            <javadoc line="282">
                Creates a new disabled watchpoint which watches accesses to the
                  specified field. The new
                  watchpoint is added to the list managed by this
                  EventRequestManager. Multiple watchpoints on the
                  same field are permitted.
                  Use {@link EventRequest#enable()} to
                  activate this event request.
                  &lt;P&gt;
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canWatchFieldAccess()}to determine if the operation is supported.                
                <param>
                    field the field to watch                    
                </param>
                <return>
                    the created watchpoint                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target virtual machine does not support this
                      operation.                    
                </throws>
            </javadoc>
            <method name="createModificationWatchpointRequest" type="ModificationWatchpointRequest" line="303"/>
            <javadoc line="303">
                Creates a new disabled watchpoint which watches accesses to the
                  specified field. The new
                  watchpoint is added to the list managed by this
                  EventRequestManager. Multiple watchpoints on the
                  same field are permitted.
                  Use {@link EventRequest#enable()} to
                  activate this event request.
                  &lt;P&gt;
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canWatchFieldModification()}to determine if the operation is supported.                
                <param>
                    field the field to watch                    
                </param>
                <return>
                    the created watchpoint                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target virtual machine does not support this
                      operation.                    
                </throws>
            </javadoc>
            <method name="createVMDeathRequest" type="VMDeathRequest" line="324"/>
            <javadoc line="324">
                Creates a new disabled {@link VMDeathRequest}.
                  The new request is added to the list managed by this
                  EventRequestManager.
                  Use {@link EventRequest#enable()} to
                  activate this event request.
                  &lt;P&gt;
                  This request (if enabled) will cause a{@link com.sun.jdi.event.VMDeathEvent}to be sent on termination of the target VM.
                  &lt;P&gt;
                  A VMDeathRequest with a suspend policy of{@link EventRequest#SUSPEND_ALL SUSPEND_ALL}can be used to assure processing of incoming{@link EventRequest#SUSPEND_NONE SUSPEND_NONE} or{@link EventRequest#SUSPEND_EVENT_THREAD SUSPEND_EVENT_THREAD}events before VM death.  If all event processing is being
                  done in the same thread as event sets are being read,
                  enabling the request is all that is needed since the VM
                  will be suspended until the {@link com.sun.jdi.event.EventSet}containing the {@link com.sun.jdi.event.VMDeathEvent}is resumed.
                  &lt;P&gt;
                  Not all target virtual machines support this operation.
                  Use {@link VirtualMachine#canRequestVMDeathEvent()}to determine if the operation is supported.                
                <return>
                    the created request                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if
                      the target VM does not support this
                      operation.                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="deleteEventRequest" type="void" line="360"/>
            <javadoc line="360">
                Removes an eventRequest. The eventRequest is disabled and
                  the removed from the requests managed by this
                  EventRequestManager. Once the eventRequest is deleted, no
                  operations (for example, {@link EventRequest#setEnabled})
                  are permitted - attempts to do so will generally cause an{@link InvalidRequestStateException}.
                  No other eventRequests are effected.
                  &lt;P&gt;
                  Because this method changes the underlying lists of event
                  requests, attempting to directly delete from a list returned
                  by a request accessor (e.g. below):
                  &lt;PRE&gt;
                  Iterator iter = requestManager.stepRequests().iterator();
                  while (iter.hasNext()) {
                  requestManager.deleteEventRequest(iter.next());
                  }
                  &lt;/PRE&gt;
                  may cause a {@link java.util.ConcurrentModificationException}.
                  Instead use{@link #deleteEventRequests(List) deleteEventRequests(List)}or copy the list before iterating.                
                <param>
                    eventRequest the eventRequest to remove                    
                </param>
            </javadoc>
            <method name="deleteEventRequests" type="void" line="387"/>
            <javadoc line="387">
                Removes a list of {@link EventRequest}s.                
                <see>
                    #deleteEventRequest(EventRequest)                    
                </see>
                <param>
                    eventRequests the list of eventRequests to remove                    
                </param>
            </javadoc>
            <method name="deleteAllBreakpoints" type="void" line="396"/>
            <javadoc line="396">
                Remove all breakpoints managed by this EventRequestManager.                
                <see>
                    #deleteEventRequest(EventRequest)                    
                </see>
            </javadoc>
            <method name="stepRequests" type="List<StepRequest>" line="403"/>
            <javadoc line="403">
                Return an unmodifiable list of the enabled and disabled step requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the all {@link StepRequest} objects.                    
                </return>
            </javadoc>
            <method name="classPrepareRequests" type="List<ClassPrepareRequest>" line="411"/>
            <javadoc line="411">
                Return an unmodifiable list of the enabled and disabled class prepare requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the all {@link ClassPrepareRequest} objects.                    
                </return>
            </javadoc>
            <method name="classUnloadRequests" type="List<ClassUnloadRequest>" line="419"/>
            <javadoc line="419">
                Return an unmodifiable list of the enabled and disabled class unload requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the all {@link ClassUnloadRequest} objects.                    
                </return>
            </javadoc>
            <method name="threadStartRequests" type="List<ThreadStartRequest>" line="427"/>
            <javadoc line="427">
                Return an unmodifiable list of the enabled and disabled thread start requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the all {@link ThreadStartRequest} objects.                    
                </return>
            </javadoc>
            <method name="threadDeathRequests" type="List<ThreadDeathRequest>" line="435"/>
            <javadoc line="435">
                Return an unmodifiable list of the enabled and disabled thread death requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the all {@link ThreadDeathRequest} objects.                    
                </return>
            </javadoc>
            <method name="exceptionRequests" type="List<ExceptionRequest>" line="443"/>
            <javadoc line="443">
                Return an unmodifiable list of the enabled and disabled exception requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the all {@link ExceptionRequest} objects.                    
                </return>
            </javadoc>
            <method name="breakpointRequests" type="List<BreakpointRequest>" line="451"/>
            <javadoc line="451">
                Return an unmodifiable list of the enabled and disabled breakpoint requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the list of all {@link BreakpointRequest} objects.                    
                </return>
            </javadoc>
            <method name="accessWatchpointRequests" type="List<AccessWatchpointRequest>" line="459"/>
            <javadoc line="459">
                Return an unmodifiable list of the enabled and disabled access
                  watchpoint requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the all {@link AccessWatchpointRequest} objects.                    
                </return>
            </javadoc>
            <method name="modificationWatchpointRequests" type="List<ModificationWatchpointRequest>" line="468"/>
            <javadoc line="468">
                Return an unmodifiable list of the enabled and disabled modification
                  watchpoint requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the all {@link ModificationWatchpointRequest} objects.                    
                </return>
            </javadoc>
            <method name="methodEntryRequests" type="List<MethodEntryRequest>" line="477"/>
            <javadoc line="477">
                Return an unmodifiable list of the enabled and disabled method entry requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the list of all {@link MethodEntryRequest} objects.                    
                </return>
            </javadoc>
            <method name="methodExitRequests" type="List<MethodExitRequest>" line="485"/>
            <javadoc line="485">
                Return an unmodifiable list of the enabled and disabled method exit requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the list of all {@link MethodExitRequest} objects.                    
                </return>
            </javadoc>
            <method name="monitorContendedEnterRequests" type="List<MonitorContendedEnterRequest>" line="493"/>
            <javadoc line="493">
                Return an unmodifiable list of the enabled and disabled monitor contended enter requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the list of all {@link MonitorContendedEnterRequest} objects.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="monitorContendedEnteredRequests" type="List<MonitorContendedEnteredRequest>" line="503"/>
            <javadoc line="503">
                Return an unmodifiable list of the enabled and disabled monitor contended entered requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the list of all {@link MonitorContendedEnteredRequest} objects.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="monitorWaitRequests" type="List<MonitorWaitRequest>" line="513"/>
            <javadoc line="513">
                Return an unmodifiable list of the enabled and disabled monitor wait requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the list of all {@link MonitorWaitRequest} objects.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="monitorWaitedRequests" type="List<MonitorWaitedRequest>" line="523"/>
            <javadoc line="523">
                Return an unmodifiable list of the enabled and disabled monitor waited requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.                
                <return>
                    the list of all {@link MonitorWaitedRequest} objects.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="vmDeathRequests" type="List<VMDeathRequest>" line="533"/>
            <javadoc line="533">
                Return an unmodifiable list of the enabled and disabled VM death requests.
                  This list is a live view of these requests and thus changes as requests
                  are added and deleted.
                  Note: the unsolicited VMDeathEvent does not have a
                  corresponding request.                
                <return>
                    the list of all {@link VMDeathRequest} objects.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
        </interface>
    </source>