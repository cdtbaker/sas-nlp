<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.org.apache.xml.internal.security.signature">
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="javax.xml.parsers.ParserConfigurationException"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.CanonicalizationException"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.InvalidCanonicalizerException"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.XMLSecurityException"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.Transforms"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.Constants"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.I18n"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.IdResolver"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.SignatureElementProxy"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.XMLUtils"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.resolver.ResourceResolver"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.resolver.ResourceResolverSpi"/>
        <import package="org.w3c.dom.DOMException"/>
        <import package="org.w3c.dom.Document"/>
        <import package="org.w3c.dom.Element"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.xml.sax.SAXException"/>
        <class name="Manifest" line="53">
            <extends class="SignatureElementProxy"/>
            <javadoc line="53">
                Handles &lt;code&gt;&amp;lt;ds:Manifest&amp;gt;&lt;/code&gt; elements.
                  &lt;p&gt; This element holds the &lt;code&gt;Reference&lt;/code&gt; elements&lt;/p&gt;                
                <author>
                    $author: $                    
                </author>
            </javadoc>
            <declaration name="log" type="java.util.logging.Logger" line="60"/>
            <javadoc line="60">
                {@link java.util.logging} logging facility                
            </javadoc>
            <declaration name="_references" type="List" line="64"/>
            <javadoc line="64">
                Field _references                
            </javadoc>
            <declaration name="_referencesEl" type="Element[]" line="66"/>
            <declaration name="verificationResults" type="boolean" line="68"/>
            <javadoc line="68">
                Field verificationResults[]                
            </javadoc>
            <declaration name="_resolverProperties" type="HashMap" line="71"/>
            <javadoc line="71">
                Field _resolverProperties                
            </javadoc>
            <declaration name="_perManifestResolvers" type="List" line="74"/>
            <javadoc line="74">
                Field _perManifestResolvers                
            </javadoc>
            <javadoc line="77">
                Consturts {@link Manifest}                
                <param>
                    doc the {@link Document} in which <code>XMLsignature</code> is placed                    
                </param>
            </javadoc>
            <method name="Manifest" type="constructor" line="82">
                <params>
                    <param name="doc" type="Document"/>
                </params>
            </method>
            <javadoc line="91">
                Constructor Manifest                
                <param>
                    element                    
                </param>
                <param>
                    BaseURI                    
                </param>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="Manifest" type="constructor" line="99">
                <params>
                    <param name="element" type="Element"/>
                    <param name="BaseURI" type="String"/>
                </params>
                <comment line="103">
                    check out Reference children                    
                </comment>
                <comment line="110">
                    At least one Reference must be present. Bad.                    
                </comment>
                <comment line="119">
                    create Vector                    
                </comment>
                <declaration name="le" type="int" line="106"/>
                <scope line="107">
                    <scope line="108">
                        <declaration name="exArgs" type="Object" line="111"/>
                    </scope>
                </scope>
                <scope line="122"/>
            </method>
            <javadoc line="127">
                This &lt;code&gt;addDocument&lt;/code&gt; method is used to add a new resource to the
                  signed info. A {@link com.sun.org.apache.xml.internal.security.signature.Reference} is built
                  from the supplied values.                
                <param>
                    BaseURI the URI of the resource where the XML instance was stored                    
                </param>
                <param>
                    referenceURI <code>URI</code> attribute in <code>Reference</code> for specifing where data is                    
                </param>
                <param>
                    transforms com.sun.org.apache.xml.internal.security.signature.Transforms object with an ordered list of transformations to be performed.                    
                </param>
                <param>
                    digestURI The digest algorthim URI to be used.                    
                </param>
                <param>
                    ReferenceId                    
                </param>
                <param>
                    ReferenceType                    
                </param>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="addDocument" type="void" line="142">
                <params>
                    <param name="BaseURI" type="String"/>
                    <param name="referenceURI" type="String"/>
                    <param name="transforms" type="Transforms"/>
                    <param name="digestURI" type="String"/>
                    <param name="ReferenceId" type="String"/>
                    <param name="ReferenceType" type="String"/>
                </params>
                <comment line="144">
                    the this._doc is handed implicitly by the this.getOwnerDocument()                    
                </comment>
                <comment line="156">
                    add Reference object to our cache vector                    
                </comment>
                <comment line="159">
                    add the Element of the Reference object to the Manifest/SignedInfo                    
                </comment>
                <declaration name="ref" type="Reference" line="145"/>
                <scope line="148"/>
                <scope line="152"/>
            </method>
            <javadoc line="164">
                The calculation of the DigestValues in the References must be after the
                  References are already added to the document and during the signing
                  process. This ensures that all neccesary data is in place.                
                <throws>
                    ReferenceNotInitializedException                    
                </throws>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="generateDigestValues" type="void" line="173">
                <comment line="177">
                    update the cached Reference object, the Element content is automatically updated                    
                </comment>
                <scope line="175">
                    <declaration name="currentRef" type="Reference" line="178"/>
                </scope>
            </method>
            <javadoc line="184">
                Return the nonnegative number of added references.                
                <return>
                    the number of references                    
                </return>
            </javadoc>
            <method name="getLength" type="int" line="189"/>
            <javadoc line="193">
                Return the &lt;it&gt;i&lt;/it&gt;&lt;sup&gt;th&lt;/sup&gt; reference.  Valid &lt;code&gt;i&lt;/code&gt;
                  values are 0 to &lt;code&gt;{link@ getSize}-1&lt;/code&gt;.                
                <param>
                    i Index of the requested {@link Reference}                    
                </param>
                <return>
                    the <it>i</it><sup>th</sup> reference                    
                </return>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="item" type="Reference" line="201">
                <params>
                    <param name="i" type="int"/>
                </params>
                <comment line="205">
                    not yet constructed, so _we_ have to                    
                </comment>
                <scope line="203">
                    <declaration name="ref" type="Reference" line="206"/>
                </scope>
            </method>
            <javadoc line="215">
                Sets the &lt;code&gt;Id&lt;/code&gt; attribute                
                <param>
                    Id the <code>Id</code> attribute in <code>ds:Manifest</code>                    
                </param>
            </javadoc>
            <method name="setId" type="void" line="220">
                <params>
                    <param name="Id" type="String"/>
                </params>
                <scope line="222"/>
            </method>
            <javadoc line="228">
                Returns the &lt;code&gt;Id&lt;/code&gt; attribute                
                <return>
                    the <code>Id</code> attribute in <code>ds:Manifest</code>                    
                </return>
            </javadoc>
            <method name="getId" type="String" line="233"/>
            <javadoc line="237">
                Used to do a &lt;A HREF=&quot;http://www.w3.org/TR/xmldsig-core/#def-ValidationReference&quot;&gt;reference
                  validation&lt;/A&gt; of all enclosed references using the {@link Reference#verify} method.
                  &lt;p&gt;This step loops through all {@link Reference}s and does verify the hash
                  values. If one or more verifications fail, the method returns
                  &lt;code&gt;false&lt;/code&gt;. If &lt;i&gt;all&lt;/i&gt; verifications are successful,
                  it returns &lt;code&gt;true&lt;/code&gt;. The results of the individual reference
                  validations are available by using the {@link #getVerificationResult(int)} method                
                <return>
                    true if all References verify, false if one or more do not verify.                    
                </return>
                <throws>
                    MissingResourceFailureException if a {@link Reference} does not verify (throws a {@link com.sun.org.apache.xml.internal.security.signature.ReferenceNotInitializedException} because of an uninitialized {@link XMLSignatureInput}                    
                </throws>
                <see>
                    com.sun.org.apache.xml.internal.security.signature.Reference#verify                    
                </see>
                <see>
                    com.sun.org.apache.xml.internal.security.signature.SignedInfo#verify()                    
                </see>
                <see>
                    com.sun.org.apache.xml.internal.security.signature.MissingResourceFailureException                    
                </see>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="verifyReferences" type="boolean" line="255"/>
            <javadoc line="259">
                Used to do a &lt;A HREF=&quot;http://www.w3.org/TR/xmldsig-core/#def-ValidationReference&quot;&gt;reference
                  validation&lt;/A&gt; of all enclosed references using the {@link Reference#verify} method.
                  &lt;p&gt;This step loops through all {@link Reference}s and does verify the hash
                  values. If one or more verifications fail, the method returns
                  &lt;code&gt;false&lt;/code&gt;. If &lt;i&gt;all&lt;/i&gt; verifications are successful,
                  it returns &lt;code&gt;true&lt;/code&gt;. The results of the individual reference
                  validations are available by using the {@link #getVerificationResult(int)} method                
                <param>
                    followManifests                    
                </param>
                <return>
                    true if all References verify, false if one or more do not verify.                    
                </return>
                <throws>
                    MissingResourceFailureException if a {@link Reference} does not verify (throws a {@link com.sun.org.apache.xml.internal.security.signature.ReferenceNotInitializedException} because of an uninitialized {@link XMLSignatureInput}                    
                </throws>
                <see>
                    com.sun.org.apache.xml.internal.security.signature.Reference#verify                    
                </see>
                <see>
                    com.sun.org.apache.xml.internal.security.signature.SignedInfo#verify(boolean)                    
                </see>
                <see>
                    com.sun.org.apache.xml.internal.security.signature.MissingResourceFailureException                    
                </see>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="verifyReferences" type="boolean" line="278">
                <params>
                    <param name="followManifests" type="boolean"/>
                </params>
                <comment line="306">
                                        
                </comment>
                <comment line="318">
                    was verification successful till now and do we want to verify the Manifest?                    
                </comment>
                <comment line="345">
                    Hm, seems not to be a ds:Manifest                    
                </comment>
                <comment line="352">
                    The Reference stated that it points to a ds:Manifest                    
                </comment>
                <comment line="353">
                    but we did not find a ds:Manifest in the signed area                    
                </comment>
                <scope line="279"/>
                <scope line="284"/>
                <declaration name="verify" type="boolean" line="290"/>
                <scope line="292"/>
                <scope line="300">
                    <declaration name="currentRef" type="Reference" line="301"/>
                    <scope line="307">
                        <declaration name="currentRefVerified" type="boolean" line="308"/>
                        <scope line="312"/>
                        <scope line="320">
                            <scope line="323">
                                <declaration name="signedManifestNodes" type="XMLSignatureInput" line="324"/>
                                <declaration name="nl" type="Set" line="326"/>
                                <declaration name="referencedManifest" type="Manifest" line="327"/>
                                <declaration name="nlIterator" type="Iterator" line="328"/>
                                <scope line="330">
                                    <declaration name="n" type="Node" line="331"/>
                                    <scope line="336">
                                        <scope line="337"/>
                                        <scope line="343"/>
                                    </scope>
                                </scope>
                                <scope line="350"/>
                                <declaration name="referencedManifestValid" type="boolean" line="363"/>
                                <scope line="366"/>
                                <scope line="370"/>
                            </scope>
                            <scope line="373"/>
                            <scope line="375"/>
                            <scope line="377"/>
                        </scope>
                    </scope>
                    <scope line="381">
                        <declaration name="exArgs" type="Object" line="382"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="393">
                Method setVerificationResult                
                <param>
                    index                    
                </param>
                <param>
                    verify                    
                </param>
            </javadoc>
            <method name="setVerificationResult" type="void" line="400">
                <params>
                    <param name="index" type="int"/>
                    <param name="verify" type="boolean"/>
                </params>
                <scope line="402"/>
            </method>
            <javadoc line="409">
                After verifying a {@link Manifest} or a {@link SignedInfo} using the{@link Manifest#verifyReferences()} or {@link SignedInfo#verify()} methods,
                  the individual results can be retrieved with this method.                
                <param>
                    index an index of into a {@link Manifest} or a {@link SignedInfo}                    
                </param>
                <return>
                    the results of reference validation at the specified index                    
                </return>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="getVerificationResult" type="boolean" line="418">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="420">
                    <declaration name="exArgs" type="Object" line="421"/>
                    <declaration name="e" type="Exception" line="423"/>
                </scope>
                <scope line="430">
                    <scope line="431"/>
                    <scope line="433"/>
                </scope>
            </method>
            <javadoc line="441">
                Adds Resource Resolver for retrieving resources at specified &lt;code&gt;URI&lt;/code&gt; attribute in &lt;code&gt;reference&lt;/code&gt; element                
                <param>
                    resolver {@link ResourceResolver} can provide the implemenatin subclass of {@link ResourceResolverSpi} for retrieving resource.                    
                </param>
            </javadoc>
            <method name="addResourceResolver" type="void" line="446">
                <params>
                    <param name="resolver" type="ResourceResolver"/>
                </params>
                <scope line="448"/>
            </method>
            <javadoc line="457">
                Adds Resource Resolver for retrieving resources at specified &lt;code&gt;URI&lt;/code&gt; attribute in &lt;code&gt;reference&lt;/code&gt; element                
                <param>
                    resolverSpi the implemenatin subclass of {@link ResourceResolverSpi} for retrieving resource.                    
                </param>
            </javadoc>
            <method name="addResourceResolver" type="void" line="462">
                <params>
                    <param name="resolverSpi" type="ResourceResolverSpi"/>
                </params>
                <scope line="464"/>
            </method>
            <javadoc line="473">
                Used to pass parameters like proxy servers etc to the ResourceResolver
                  implementation.                
                <param>
                    key the key                    
                </param>
                <param>
                    value the value                    
                </param>
            </javadoc>
            <method name="setResolverProperty" type="void" line="480">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="481"/>
            </method>
            <javadoc line="487">
                Returns the value at specified key                
                <param>
                    key the key                    
                </param>
                <return>
                    the value                    
                </return>
            </javadoc>
            <method name="getResolverProperty" type="String" line="493">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="497">
                Method getSignedContentItem                
                <param>
                    i                    
                </param>
                <return>
                    The signed content of the i reference.                    
                </return>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="getSignedContentItem" type="byte[]" line="505">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="507"/>
                <scope line="509"/>
                <scope line="511"/>
                <scope line="513"/>
                <scope line="515"/>
            </method>
            <javadoc line="520">
                Method getReferencedContentPriorTransformsItem                
                <param>
                    i                    
                </param>
                <return>
                    The contents before transformation of the reference i.                    
                </return>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="getReferencedContentBeforeTransformsItem" type="XMLSignatureInput" line="528">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="532">
                Method getReferencedContentAfterTransformsItem                
                <param>
                    i                    
                </param>
                <return>
                    The contents after transformation of the reference i.                    
                </return>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="getReferencedContentAfterTransformsItem" type="XMLSignatureInput" line="540">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="544">
                Method getSignedContentLength                
                <return>
                    The nu,ber of references contained in this reference.                    
                </return>
            </javadoc>
            <method name="getSignedContentLength" type="int" line="549"/>
            <javadoc line="553">
                Method getBaseLocalName                
                <inheritDoc>
                                        
                </inheritDoc>
            </javadoc>
            <method name="getBaseLocalName" type="String" line="558"/>
        </class>
    </source>