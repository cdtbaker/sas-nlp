<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.org.apache.xml.internal.security.transforms.implementations">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="javax.xml.parsers.DocumentBuilderFactory"/>
        <import package="javax.xml.parsers.ParserConfigurationException"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.CanonicalizationException"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException"/>
        <import package="com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.Transform"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.TransformSpi"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.TransformationException"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.Transforms"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.Base64"/>
        <import package="org.w3c.dom.Document"/>
        <import package="org.w3c.dom.Element"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.w3c.dom.Text"/>
        <import package="org.xml.sax.SAXException"/>
        <class name="TransformBase64Decode" line="20">
            <extends class="TransformSpi"/>
            <javadoc line="20">
                Implements the &lt;CODE&gt;http://www.w3.org/2000/09/xmldsig#base64&lt;/CODE&gt; decoding
                  transform.
                  &lt;p&gt;The normative specification for base64 decoding transforms is
                  &lt;A HREF=&quot;http://www.w3.org/TR/2001/CR-xmldsig-core-20010419/#ref-MIME&quot;&gt;[MIME]&lt;/A&gt;.
                  The base64 Transform element has no content. The input
                  is decoded by the algorithms. This transform is useful if an
                  application needs to sign the raw data associated with the encoded
                  content of an element. &lt;/p&gt;
                  &lt;p&gt;This transform requires an octet stream for input.
                  If an XPath node-set (or sufficiently functional alternative) is
                  given as input, then it is converted to an octet stream by
                  performing operations logically equivalent to 1) applying an XPath
                  transform with expression self::text(), then 2) taking the string-value
                  of the node-set. Thus, if an XML element is identified by a barename
                  XPointer in the Reference URI, and its content consists solely of base64
                  encoded character data, then this transform automatically strips away the
                  start and end tags of the identified element and any of its descendant
                  elements as well as any descendant comments and processing instructions.
                  The output of this transform is an octet stream.&lt;/p&gt;                
                <author>
                    Christian Geuer-Pollmann                    
                </author>
                <see>
                    com.sun.org.apache.xml.internal.security.utils.Base64                    
                </see>
            </javadoc>
            <declaration name="implementedTransformURI" type="String" line="44"/>
            <javadoc line="44">
                Field implementedTransformURI                
            </javadoc>
            <javadoc line="48">
                Method engineGetURI                
                <inheritDoc>
                                        
                </inheritDoc>
            </javadoc>
            <method name="engineGetURI" type="String" line="52"/>
            <javadoc line="55">
                Method enginePerformTransform                
                <param>
                    input                    
                </param>
                <return>
                    {@link XMLSignatureInput} as the result of transformation                    
                </return>
                <inheritDoc>
                                        
                </inheritDoc>
                <throws>
                    CanonicalizationException                    
                </throws>
                <throws>
                    IOException                    
                </throws>
                <throws>
                    TransformationException                    
                </throws>
            </javadoc>
            <method name="enginePerformTransform" type="XMLSignatureInput" line="64">
                <params>
                    <param name="input" type="XMLSignatureInput"/>
                    <param name="_transformObject" type="Transform"/>
                </params>
            </method>
            <method name="enginePerformTransform" type="XMLSignatureInput" line="67">
                <params>
                    <param name="input" type="XMLSignatureInput"/>
                    <param name="os" type="OutputStream"/>
                    <param name="_transformObject" type="Transform"/>
                </params>
                <scope line="68">
                    <scope line="69">
                        <declaration name="el" type="Node" line="70"/>
                        <scope line="71"/>
                        <declaration name="sb" type="StringBuffer" line="74"/>
                        <scope line="76">
                            <declaration name="decodedBytes" type="byte[]" line="77"/>
                        </scope>
                        <declaration name="output" type="XMLSignatureInput" line="81"/>
                    </scope>
                    <scope line="85">
                        <scope line="86">
                            <declaration name="base64Bytes" type="byte[]" line="87"/>
                            <declaration name="decodedBytes" type="byte[]" line="88"/>
                        </scope>
                        <scope line="91"/>
                        <scope line="94"/>
                        <declaration name="output" type="XMLSignatureInput" line="97"/>
                    </scope>
                    <scope line="101">
                        <declaration name="doc" type="Document" line="102"/>
                        <declaration name="rootNode" type="Element" line="103"/>
                        <declaration name="sb" type="StringBuffer" line="104"/>
                        <declaration name="decodedBytes" type="byte[]" line="106"/>
                    </scope>
                    <scope line="109"/>
                    <scope line="112"/>
                </scope>
                <scope line="116"/>
            </method>
            <method name="traverseElement" type="void" line="120">
                <params>
                    <param name="node" type="org.w3c.dom.Element"/>
                    <param name="sb" type="StringBuffer"/>
                </params>
                <declaration name="sibling" type="Node" line="121"/>
                <scope line="122"/>
            </method>
        </class>
    </source>