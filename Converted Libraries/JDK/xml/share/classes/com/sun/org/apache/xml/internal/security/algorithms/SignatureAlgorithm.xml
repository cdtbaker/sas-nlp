<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.org.apache.xml.internal.security.algorithms">
        <import package="java.security.Key"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="com.sun.org.apache.xml.internal.security.algorithms.implementations.IntegrityHmac"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.AlgorithmAlreadyRegisteredException"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.XMLSecurityException"/>
        <import package="com.sun.org.apache.xml.internal.security.signature.XMLSignatureException"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.Constants"/>
        <import package="org.w3c.dom.Document"/>
        <import package="org.w3c.dom.Element"/>
        <class name="SignatureAlgorithm" line="39">
            <extends class="Algorithm"/>
            <comment line="79">
                boolean isForSigning=false;                
            </comment>
            <javadoc line="39">
                Allows selection of digital signature&apos;s algorithm, private keys, other security parameters, and algorithm&apos;s ID.                
                <author>
                    Christian Geuer-Pollmann                    
                </author>
            </javadoc>
            <declaration name="log" type="java.util.logging.Logger" line="46"/>
            <javadoc line="46">
                {@link java.util.logging} logging facility                
            </javadoc>
            <declaration name="_alreadyInitialized" type="boolean" line="50"/>
            <javadoc line="50">
                Field _alreadyInitialized                
            </javadoc>
            <declaration name="_algorithmHash" type="HashMap" line="53"/>
            <javadoc line="53">
                All available algorithm classes are registered here                
            </javadoc>
            <declaration name="instancesSigning" type="ThreadLocal" line="56"/>
            <anonymous_class line="56">
                <method name="initialValue" type="Object" line="57"/>
            </anonymous_class>
            <declaration name="instancesVerify" type="ThreadLocal" line="62"/>
            <anonymous_class line="62">
                <method name="initialValue" type="Object" line="63"/>
            </anonymous_class>
            <declaration name="keysSigning" type="ThreadLocal" line="68"/>
            <anonymous_class line="68">
                <method name="initialValue" type="Object" line="69"/>
            </anonymous_class>
            <declaration name="keysVerify" type="ThreadLocal" line="73"/>
            <anonymous_class line="73">
                <method name="initialValue" type="Object" line="74"/>
            </anonymous_class>
            <declaration name="_signatureAlgorithm" type="SignatureAlgorithmSpi" line="80"/>
            <javadoc line="80">
                Field _signatureAlgorithm                
            </javadoc>
            <declaration name="algorithmURI" type="String" line="83"/>
            <javadoc line="85">
                Constructor SignatureAlgorithm                
                <param>
                    doc                    
                </param>
                <param>
                    algorithmURI                    
                </param>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="SignatureAlgorithm" type="constructor" line="93">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="algorithmURI" type="String"/>
                </params>
            </method>
            <method name="initializeAlgorithm" type="void" line="99">
                <params>
                    <param name="isForSigning" type="boolean"/>
                </params>
                <scope line="100"/>
            </method>
            <method name="getInstanceForSigning" type="SignatureAlgorithmSpi" line="107">
                <params>
                    <param name="algorithmURI" type="String"/>
                </params>
                <declaration name="result" type="SignatureAlgorithmSpi" line="108"/>
                <scope line="109"/>
            </method>
            <method name="getInstanceForVerify" type="SignatureAlgorithmSpi" line="117">
                <params>
                    <param name="algorithmURI" type="String"/>
                </params>
                <declaration name="result" type="SignatureAlgorithmSpi" line="118"/>
                <scope line="119"/>
            </method>
            <method name="buildSigner" type="SignatureAlgorithmSpi" line="128">
                <params>
                    <param name="algorithmURI" type="String"/>
                    <param name="result" type="SignatureAlgorithmSpi"/>
                </params>
                <scope line="129">
                    <declaration name="implementingClass" type="Class" line="130"/>
                </scope>
                <scope line="137">
                    <declaration name="exArgs" type="Object" line="138"/>
                </scope>
                <scope line="142">
                    <declaration name="exArgs" type="Object" line="143"/>
                </scope>
                <scope line="147">
                    <declaration name="exArgs" type="Object" line="148"/>
                </scope>
            </method>
            <javadoc line="155">
                Constructor SignatureAlgorithm                
                <param>
                    doc                    
                </param>
                <param>
                    algorithmURI                    
                </param>
                <param>
                    HMACOutputLength                    
                </param>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="SignatureAlgorithm" type="constructor" line="165">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="algorithmURI" type="String"/>
                    <param name="HMACOutputLength" type="int"/>
                </params>
            </method>
            <javadoc line="175">
                Constructor SignatureAlgorithm                
                <param>
                    element                    
                </param>
                <param>
                    BaseURI                    
                </param>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="SignatureAlgorithm" type="constructor" line="183">
                <params>
                    <param name="element" type="Element"/>
                    <param name="BaseURI" type="String"/>
                </params>
            </method>
            <javadoc line="189">
                Proxy method for {@link java.security.Signature#sign()}which is executed on the internal {@link java.security.Signature} object.                
                <return>
                    the result of the {@link java.security.Signature#sign()} method                    
                </return>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="sign" type="byte[]" line="196"/>
            <javadoc line="200">
                Proxy method for {@link java.security.Signature#getAlgorithm}which is executed on the internal {@link java.security.Signature} object.                
                <return>
                    the result of the {@link java.security.Signature#getAlgorithm} method                    
                </return>
            </javadoc>
            <method name="getJCEAlgorithmString" type="String" line="206">
                <comment line="211">
                    Ignore.                    
                </comment>
                <scope line="207"/>
                <scope line="209"/>
            </method>
            <javadoc line="215">
                Method getJCEProviderName                
                <return>
                    The Provider of this Signature Alogrithm                    
                </return>
            </javadoc>
            <method name="getJCEProviderName" type="String" line="220">
                <scope line="221"/>
                <scope line="223"/>
            </method>
            <javadoc line="228">
                Proxy method for {@link java.security.Signature#update(byte[])}which is executed on the internal {@link java.security.Signature} object.                
                <param>
                    input                    
                </param>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="update" type="void" line="235">
                <params>
                    <param name="input" type="byte[]"/>
                </params>
            </method>
            <javadoc line="239">
                Proxy method for {@link java.security.Signature#update(byte)}which is executed on the internal {@link java.security.Signature} object.                
                <param>
                    input                    
                </param>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="update" type="void" line="246">
                <params>
                    <param name="input" type="byte"/>
                </params>
            </method>
            <javadoc line="250">
                Proxy method for {@link java.security.Signature#update(byte[],int,int)}which is executed on the internal {@link java.security.Signature} object.                
                <param>
                    buf                    
                </param>
                <param>
                    offset                    
                </param>
                <param>
                    len                    
                </param>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="update" type="void" line="260">
                <params>
                    <param name="buf" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="264">
                Proxy method for {@link java.security.Signature#initSign(java.security.PrivateKey)}which is executed on the internal {@link java.security.Signature} object.                
                <param>
                    signingKey                    
                </param>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="initSign" type="void" line="271">
                <params>
                    <param name="signingKey" type="Key"/>
                </params>
                <declaration name="map" type="Map" line="273"/>
                <scope line="274"/>
            </method>
            <javadoc line="281">
                Proxy method for {@link java.security.Signature#initSign(java.security.PrivateKey,java.security.SecureRandom)}which is executed on the internal {@link java.security.Signature} object.                
                <param>
                    signingKey                    
                </param>
                <param>
                    secureRandom                    
                </param>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="initSign" type="void" line="290">
                <params>
                    <param name="signingKey" type="Key"/>
                    <param name="secureRandom" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="295">
                Proxy method for {@link java.security.Signature#initSign(java.security.PrivateKey)}which is executed on the internal {@link java.security.Signature} object.                
                <param>
                    signingKey                    
                </param>
                <param>
                    algorithmParameterSpec                    
                </param>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="initSign" type="void" line="305">
                <params>
                    <param name="signingKey" type="Key"/>
                    <param name="algorithmParameterSpec" type="AlgorithmParameterSpec"/>
                </params>
            </method>
            <javadoc line="311">
                Proxy method for {@link java.security.Signature#setParameter(java.security.spec.AlgorithmParameterSpec)}which is executed on the internal {@link java.security.Signature} object.                
                <param>
                    params                    
                </param>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="setParameter" type="void" line="319">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
            </method>
            <javadoc line="323">
                Proxy method for {@link java.security.Signature#initVerify(java.security.PublicKey)}which is executed on the internal {@link java.security.Signature} object.                
                <param>
                    verificationKey                    
                </param>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="initVerify" type="void" line="330">
                <params>
                    <param name="verificationKey" type="Key"/>
                </params>
                <declaration name="map" type="Map" line="332"/>
                <scope line="333"/>
            </method>
            <javadoc line="340">
                Proxy method for {@link java.security.Signature#verify(byte[])}which is executed on the internal {@link java.security.Signature} object.                
                <param>
                    signature                    
                </param>
                <return>
                    true if if the signature is valid.                    
                </return>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="verify" type="boolean" line="349">
                <params>
                    <param name="signature" type="byte[]"/>
                </params>
            </method>
            <javadoc line="353">
                Returns the URI representation of Transformation algorithm                
                <return>
                    the URI representation of Transformation algorithm                    
                </return>
            </javadoc>
            <method name="getURI" type="String" line="358"/>
            <javadoc line="363">
                Initalizes for this {@link com.sun.org.apache.xml.internal.security.transforms.Transform}                
            </javadoc>
            <method name="providerInit" type="void" line="367">
                <scope line="369"/>
                <scope line="377"/>
            </method>
            <javadoc line="383">
                Registers implementing class of the Transform algorithm with algorithmURI                
                <param>
                    algorithmURI algorithmURI URI representation of &lt;code&gt;Transform algorithm&lt;/code&gt;.                    
                </param>
                <param>
                    implementingClass &lt;code&gt;implementingClass&lt;/code&gt; the implementing class of {@link SignatureAlgorithmSpi}                    
                </param>
                <throws>
                    AlgorithmAlreadyRegisteredException if specified algorithmURI is already registered                    
                </throws>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="register" type="void" line="392">
                <params>
                    <param name="algorithmURI" type="String"/>
                    <param name="implementingClass" type="String"/>
                </params>
                <comment line="399">
                    are we already registered?                    
                </comment>
                <scope line="394">
                    <declaration name="registeredClassClass" type="Class" line="399"/>
                    <scope line="401">
                        <declaration name="registeredClass" type="String" line="402"/>
                        <scope line="404">
                            <declaration name="exArgs" type="Object" line="405"/>
                        </scope>
                    </scope>
                    <scope line="411"/>
                    <scope line="413">
                        <declaration name="exArgs" type="Object" line="414"/>
                    </scope>
                    <scope line="418">
                        <declaration name="exArgs" type="Object" line="419"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="428">
                Method getImplementingClass                
                <param>
                    URI                    
                </param>
                <return>
                    the class that implements the URI                    
                </return>
            </javadoc>
            <method name="getImplementingClass" type="Class" line="434">
                <params>
                    <param name="URI" type="String"/>
                </params>
                <scope line="436"/>
            </method>
            <javadoc line="443">
                Method getBaseNamespace                
                <return>
                    URI of this element                    
                </return>
            </javadoc>
            <method name="getBaseNamespace" type="String" line="448"/>
            <javadoc line="452">
                Method getBaseLocalName                
                <return>
                    Local name                    
                </return>
            </javadoc>
            <method name="getBaseLocalName" type="String" line="457"/>
        </class>
    </source>