<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.org.apache.xml.internal.security.c14n.implementations">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="org.w3c.dom.Attr"/>
        <import package="org.w3c.dom.Node"/>
        <class name="NameSpaceSymbTable" line="34">
            <javadoc line="34">
                A stack based Symble Table.
                  &lt;br&gt;For speed reasons all the symbols are introduced in the same map,
                  and at the same time in a list so it can be removed when the frame is pop back.                
                <author>
                    Raul Benito                    
                </author>
            </javadoc>
            <declaration name="symb" type="SymbMap" line="42"/>
            <javadoc line="42">
                The map betwen prefix-&gt; entry table.                
            </javadoc>
            <declaration name="nameSpaces" type="int" line="44"/>
            <javadoc line="44">
                The level of nameSpaces (for Inclusive visibility).                
            </javadoc>
            <declaration name="level" type="List" line="46"/>
            <javadoc line="46">
                The stacks for removing the definitions when doing pop.                
            </javadoc>
            <declaration name="cloned" type="boolean" line="48"/>
            <declaration name="XMLNS" type="String" line="49"/>
            <declaration name="initialMap" type="SymbMap" line="50"/>
            <scope line="51">
                <declaration name="ne" type="NameSpaceSymbEntry" line="52"/>
            </scope>
            <javadoc line="56">
                Default constractor                
            </javadoc>
            <method name="NameSpaceSymbTable" type="constructor" line="59">
                <comment line="61">
                    Insert the default binding for xmlns.                    
                </comment>
            </method>
            <javadoc line="65">
                Get all the unrendered nodes in the name space.
                  For Inclusive rendering                
                <param>
                    result the list where to fill the unrendered xmlns definitions.                    
                </param>
            </javadoc>
            <method name="getUnrenderedNodes" type="void" line="70">
                <params>
                    <param name="result" type="Collection"/>
                </params>
                <comment line="71">
                    List result=new ArrayList();                    
                </comment>
                <comment line="75">
                    put them rendered?                    
                </comment>
                <declaration name="it" type="Iterator" line="72"/>
                <scope line="73">
                    <declaration name="n" type="NameSpaceSymbEntry" line="74"/>
                    <scope line="76"/>
                </scope>
            </method>
            <javadoc line="89">
                Push a frame for visible namespace.
                  For Inclusive rendering.                
            </javadoc>
            <method name="outputNodePush" type="void" line="93"/>
            <javadoc line="98">
                Pop a frame for visible namespace.                
            </javadoc>
            <method name="outputNodePop" type="void" line="101"/>
            <javadoc line="106">
                Push a frame for a node.
                  Inclusive or Exclusive.                
            </javadoc>
            <method name="push" type="void" line="110">
                <comment line="111">
                    Put the number of namespace definitions in the stack.                    
                </comment>
            </method>
            <javadoc line="116">
                Pop a frame.
                  Inclusive or Exclusive.                
            </javadoc>
            <method name="pop" type="void" line="120">
                <declaration name="size" type="int" line="121"/>
                <declaration name="ob" type="Object" line="122"/>
                <scope line="123">
                    <scope line="125"/>
                </scope>
                <scope line="129"/>
            </method>
            <method name="needsClone" type="void" line="136">
                <scope line="137"/>
            </method>
            <javadoc line="145">
                Gets the attribute node that defines the binding for the prefix.                
                <param>
                    prefix the prefix to obtain the attribute.                    
                </param>
                <return>
                    null if there is no need to render the prefix. Otherwise the node of
                      definition.                    
                </return>
            </javadoc>
            <method name="getMapping" type="Attr" line="151">
                <params>
                    <param name="prefix" type="String"/>
                </params>
                <comment line="154">
                    There is no definition for the prefix(a bug?).                    
                </comment>
                <comment line="158">
                    No need to render an entry already rendered.                    
                </comment>
                <comment line="161">
                    Mark this entry as render.                    
                </comment>
                <comment line="168">
                    Return the node for outputing.                    
                </comment>
                <declaration name="entry" type="NameSpaceSymbEntry" line="152"/>
                <scope line="153"/>
                <scope line="157"/>
            </method>
            <javadoc line="172">
                Gets a definition without mark it as render.
                  For render in exclusive c14n the namespaces in the include prefixes.                
                <param>
                    prefix The prefix whose definition is neaded.                    
                </param>
                <return>
                    the attr to render, null if there is no need to render                    
                </return>
            </javadoc>
            <method name="getMappingWithoutRendered" type="Attr" line="178">
                <params>
                    <param name="prefix" type="String"/>
                </params>
                <declaration name="entry" type="NameSpaceSymbEntry" line="179"/>
                <scope line="180"/>
                <scope line="183"/>
            </method>
            <javadoc line="189">
                Adds the mapping for a prefix.                
                <param>
                    prefix the prefix of definition                    
                </param>
                <param>
                    uri the Uri of the definition                    
                </param>
                <param>
                    n the attribute that have the definition                    
                </param>
                <return>
                    true if there is already defined.                    
                </return>
            </javadoc>
            <method name="addMapping" type="boolean" line="196">
                <params>
                    <param name="prefix" type="String"/>
                    <param name="uri" type="String"/>
                    <param name="n" type="Attr"/>
                </params>
                <comment line="199">
                    If we have it previously defined. Don&apos;t keep working.                    
                </comment>
                <comment line="202">
                    Creates and entry in the table for this new definition.                    
                </comment>
                <comment line="207">
                    We have a previous definition store it for the pop.                    
                </comment>
                <comment line="208">
                    Check if a previous definition(not the inmidiatly one) has been rendered.                    
                </comment>
                <comment line="211">
                    Yes it is. Mark as rendered.                    
                </comment>
                <declaration name="ob" type="NameSpaceSymbEntry" line="197"/>
                <scope line="198"/>
                <declaration name="ne" type="NameSpaceSymbEntry" line="203"/>
                <scope line="206">
                    <scope line="210"/>
                </scope>
            </method>
            <javadoc line="218">
                Adds a definition and mark it as render.
                  For inclusive c14n.                
                <param>
                    prefix the prefix of definition                    
                </param>
                <param>
                    uri the Uri of the definition                    
                </param>
                <param>
                    n the attribute that have the definition                    
                </param>
                <return>
                    the attr to render, null if there is no need to render                    
                </return>
            </javadoc>
            <method name="addMappingAndRender" type="Node" line="226">
                <params>
                    <param name="prefix" type="String"/>
                    <param name="uri" type="String"/>
                    <param name="n" type="Attr"/>
                </params>
                <declaration name="ob" type="NameSpaceSymbEntry" line="227"/>
                <scope line="229">
                    <scope line="230"/>
                </scope>
                <declaration name="ne" type="NameSpaceSymbEntry" line="241"/>
                <scope line="245">
                    <scope line="247"/>
                </scope>
            </method>
            <method name="getLevel" type="int" line="255">
                <comment line="256">
                    TODO Auto-generated method stub                    
                </comment>
            </method>
            <method name="removeMapping" type="void" line="260">
                <params>
                    <param name="prefix" type="String"/>
                </params>
                <declaration name="ob" type="NameSpaceSymbEntry" line="261"/>
                <scope line="263"/>
            </method>
            <method name="removeMappingIfNotRender" type="void" line="269">
                <params>
                    <param name="prefix" type="String"/>
                </params>
                <declaration name="ob" type="NameSpaceSymbEntry" line="270"/>
                <scope line="272"/>
            </method>
            <method name="removeMappingIfRender" type="boolean" line="278">
                <params>
                    <param name="prefix" type="String"/>
                </params>
                <declaration name="ob" type="NameSpaceSymbEntry" line="279"/>
                <scope line="281"/>
            </method>
        </class>
        <class name="NameSpaceSymbEntry" line="289">
            <implements interface="Cloneable"/>
            <javadoc line="289">
                The internal structure of NameSpaceSymbTable.                
            </javadoc>
            <method name="NameSpaceSymbEntry" type="constructor" line="293">
                <params>
                    <param name="name" type="String"/>
                    <param name="n" type="Attr"/>
                    <param name="rendered" type="boolean"/>
                    <param name="prefix" type="String"/>
                </params>
            </method>
            <javadoc line="299">
                @inheritDoc                
            </javadoc>
            <method name="clone" type="Object" line="300">
                <scope line="301"/>
                <scope line="303"/>
            </method>
            <declaration name="level" type="int" line="307"/>
            <javadoc line="307">
                The level where the definition was rendered(Only for inclusive)                
            </javadoc>
            <declaration name="prefix" type="String" line="309"/>
            <declaration name="uri" type="String" line="310"/>
            <javadoc line="310">
                The URI that the prefix defines                
            </javadoc>
            <declaration name="lastrendered" type="String" line="312"/>
            <javadoc line="312">
                The last output in the URI for this prefix (This for speed reason).                
            </javadoc>
            <declaration name="rendered" type="boolean" line="314"/>
            <javadoc line="314">
                This prefix-URI has been already render or not.                
            </javadoc>
            <declaration name="n" type="Attr" line="316"/>
            <javadoc line="316">
                The attribute to include.                
            </javadoc>
        </class>
        <class name="SymbMap" line="320">
            <implements interface="Cloneable"/>
            <declaration name="free" type="int" line="321"/>
            <declaration name="entries" type="NameSpaceSymbEntry[]" line="322"/>
            <declaration name="keys" type="String[]" line="323"/>
            <method name="SymbMap" type="constructor" line="324"/>
            <method name="put" type="void" line="328">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="NameSpaceSymbEntry"/>
                </params>
                <declaration name="index" type="int" line="329"/>
                <declaration name="oldKey" type="Object" line="330"/>
                <scope line="333">
                    <scope line="334">
                        <declaration name="newCapacity" type="int" line="336"/>
                    </scope>
                </scope>
            </method>
            <method name="entrySet" type="List" line="342">
                <declaration name="a" type="List" line="343"/>
                <scope line="344">
                    <scope line="345"/>
                </scope>
            </method>
            <method name="index" type="int" line="352">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="355">
                    abs of index                    
                </comment>
                <declaration name="set" type="Object[]" line="353"/>
                <declaration name="length" type="int" line="354"/>
                <declaration name="index" type="int" line="356"/>
                <declaration name="cur" type="Object" line="357"/>
                <scope line="359"/>
                <scope line="363"/>
            </method>
            <javadoc line="370">
                rehashes the map to the new capacity.                
                <param>
                    newCapacity an <code>int</code> value                    
                </param>
            </javadoc>
            <method name="rehash" type="void" line="375">
                <params>
                    <param name="newCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="376"/>
                <declaration name="oldKeys" type="String" line="377"/>
                <declaration name="oldVals" type="NameSpaceSymbEntry" line="378"/>
                <scope line="383">
                    <scope line="384">
                        <declaration name="o" type="String" line="385"/>
                        <declaration name="index" type="int" line="386"/>
                    </scope>
                </scope>
            </method>
            <method name="get" type="NameSpaceSymbEntry" line="393">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <method name="clone" type="Object" line="397">
                <comment line="407">
                    TODO Auto-generated catch block                    
                </comment>
                <scope line="398">
                    <declaration name="copy" type="SymbMap" line="399"/>
                </scope>
                <scope line="406"/>
            </method>
        </class>
    </source>