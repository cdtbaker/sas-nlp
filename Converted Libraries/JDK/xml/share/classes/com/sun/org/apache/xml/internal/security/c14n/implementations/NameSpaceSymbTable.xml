<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.org.apache.xml.internal.security.c14n.implementations">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="org.w3c.dom.Attr"/>
        <import package="org.w3c.dom.Node"/>
        <class name="NameSpaceSymbTable" line="8">
            <javadoc line="8">
                A stack based Symble Table.
                  &lt;br&gt;For speed reasons all the symbols are introduced in the same map,
                  and at the same time in a list so it can be removed when the frame is pop back.                
                <author>
                    Raul Benito                    
                </author>
            </javadoc>
            <declaration name="symb" type="SymbMap" line="15"/>
            <javadoc line="15">
                The map betwen prefix-&gt; entry table.                
            </javadoc>
            <declaration name="nameSpaces" type="int" line="19"/>
            <javadoc line="19">
                The level of nameSpaces (for Inclusive visibility).                
            </javadoc>
            <declaration name="level" type="List" line="23"/>
            <javadoc line="23">
                The stacks for removing the definitions when doing pop.                
            </javadoc>
            <declaration name="cloned" type="boolean" line="27"/>
            <declaration name="XMLNS" type="String" line="28"/>
            <declaration name="initialMap" type="SymbMap" line="29"/>
            <scope line="30">
                <declaration name="ne" type="NameSpaceSymbEntry" line="31"/>
            </scope>
            <javadoc line="35">
                Default constractor                
            </javadoc>
            <method name="NameSpaceSymbTable" type="constructor" line="38"/>
            <javadoc line="42">
                Get all the unrendered nodes in the name space.
                  For Inclusive rendering                
                <param>
                    result the list where to fill the unrendered xmlns definitions.                    
                </param>
            </javadoc>
            <method name="getUnrenderedNodes" type="void" line="47">
                <params>
                    <param name="result" type="Collection"/>
                </params>
                <declaration name="it" type="Iterator" line="48"/>
                <scope line="49">
                    <declaration name="n" type="NameSpaceSymbEntry" line="50"/>
                    <scope line="51"/>
                </scope>
            </method>
            <javadoc line="61">
                Push a frame for visible namespace.
                  For Inclusive rendering.                
            </javadoc>
            <method name="outputNodePush" type="void" line="65"/>
            <javadoc line="69">
                Pop a frame for visible namespace.                
            </javadoc>
            <method name="outputNodePop" type="void" line="72"/>
            <javadoc line="76">
                Push a frame for a node.
                  Inclusive or Exclusive.                
            </javadoc>
            <method name="push" type="void" line="80"/>
            <javadoc line="84">
                Pop a frame.
                  Inclusive or Exclusive.                
            </javadoc>
            <method name="pop" type="void" line="88">
                <declaration name="size" type="int" line="89"/>
                <declaration name="ob" type="Object" line="90"/>
                <scope line="91">
                    <scope line="93"/>
                </scope>
                <scope line="98"/>
            </method>
            <method name="needsClone" type="void" line="102">
                <scope line="103"/>
            </method>
            <javadoc line="109">
                Gets the attribute node that defines the binding for the prefix.                
                <param>
                    prefix the prefix to obtain the attribute.                    
                </param>
                <return>
                    null if there is no need to render the prefix. Otherwise the node of
                      definition.                    
                </return>
            </javadoc>
            <method name="getMapping" type="Attr" line="115">
                <params>
                    <param name="prefix" type="String"/>
                </params>
                <declaration name="entry" type="NameSpaceSymbEntry" line="116"/>
                <scope line="117"/>
                <scope line="120"/>
            </method>
            <javadoc line="131">
                Gets a definition without mark it as render.
                  For render in exclusive c14n the namespaces in the include prefixes.                
                <param>
                    prefix The prefix whose definition is neaded.                    
                </param>
                <return>
                    the attr to render, null if there is no need to render                    
                </return>
            </javadoc>
            <method name="getMappingWithoutRendered" type="Attr" line="137">
                <params>
                    <param name="prefix" type="String"/>
                </params>
                <declaration name="entry" type="NameSpaceSymbEntry" line="138"/>
                <scope line="139"/>
                <scope line="142"/>
            </method>
            <javadoc line="147">
                Adds the mapping for a prefix.                
                <param>
                    prefix the prefix of definition                    
                </param>
                <param>
                    uri the Uri of the definition                    
                </param>
                <param>
                    n the attribute that have the definition                    
                </param>
                <return>
                    true if there is already defined.                    
                </return>
            </javadoc>
            <method name="addMapping" type="boolean" line="154">
                <params>
                    <param name="prefix" type="String"/>
                    <param name="uri" type="String"/>
                    <param name="n" type="Attr"/>
                </params>
                <declaration name="ob" type="NameSpaceSymbEntry" line="155"/>
                <scope line="156"/>
                <declaration name="ne" type="NameSpaceSymbEntry" line="159"/>
                <scope line="162">
                    <scope line="164"/>
                </scope>
            </method>
            <javadoc line="170">
                Adds a definition and mark it as render.
                  For inclusive c14n.                
                <param>
                    prefix the prefix of definition                    
                </param>
                <param>
                    uri the Uri of the definition                    
                </param>
                <param>
                    n the attribute that have the definition                    
                </param>
                <return>
                    the attr to render, null if there is no need to render                    
                </return>
            </javadoc>
            <method name="addMappingAndRender" type="Node" line="178">
                <params>
                    <param name="prefix" type="String"/>
                    <param name="uri" type="String"/>
                    <param name="n" type="Attr"/>
                </params>
                <declaration name="ob" type="NameSpaceSymbEntry" line="179"/>
                <scope line="180">
                    <scope line="181"/>
                </scope>
                <declaration name="ne" type="NameSpaceSymbEntry" line="191"/>
                <scope line="195">
                    <scope line="196"/>
                </scope>
            </method>
            <method name="getLevel" type="int" line="203"/>
            <method name="removeMapping" type="void" line="206">
                <params>
                    <param name="prefix" type="String"/>
                </params>
                <declaration name="ob" type="NameSpaceSymbEntry" line="207"/>
                <scope line="208"/>
            </method>
            <method name="removeMappingIfNotRender" type="void" line="213">
                <params>
                    <param name="prefix" type="String"/>
                </params>
                <declaration name="ob" type="NameSpaceSymbEntry" line="214"/>
                <scope line="215"/>
            </method>
            <method name="removeMappingIfRender" type="boolean" line="220">
                <params>
                    <param name="prefix" type="String"/>
                </params>
                <declaration name="ob" type="NameSpaceSymbEntry" line="221"/>
                <scope line="222"/>
            </method>
        </class>
        <class name="NameSpaceSymbEntry" line="229">
            <implements interface="Cloneable"/>
            <javadoc line="229">
                The internal structure of NameSpaceSymbTable.                
            </javadoc>
            <method name="NameSpaceSymbEntry" type="constructor" line="233">
                <params>
                    <param name="name" type="String"/>
                    <param name="n" type="Attr"/>
                    <param name="rendered" type="boolean"/>
                    <param name="prefix" type="String"/>
                </params>
            </method>
            <javadoc line="239">
                @inheritDoc                
            </javadoc>
            <method name="clone" type="Object" line="242">
                <scope line="243"/>
                <scope line="246"/>
            </method>
            <declaration name="level" type="int" line="250"/>
            <javadoc line="250">
                The level where the definition was rendered(Only for inclusive)                
            </javadoc>
            <declaration name="prefix" type="String" line="254"/>
            <declaration name="uri" type="String" line="255"/>
            <javadoc line="255">
                The URI that the prefix defines                
            </javadoc>
            <declaration name="lastrendered" type="String" line="259"/>
            <javadoc line="259">
                The last output in the URI for this prefix (This for speed reason).                
            </javadoc>
            <declaration name="rendered" type="boolean" line="263"/>
            <javadoc line="263">
                This prefix-URI has been already render or not.                
            </javadoc>
            <declaration name="n" type="Attr" line="267"/>
            <javadoc line="267">
                The attribute to include.                
            </javadoc>
        </class>
        <class name="SymbMap" line="272">
            <implements interface="Cloneable"/>
            <declaration name="free" type="int" line="273"/>
            <declaration name="entries" type="NameSpaceSymbEntry[]" line="274"/>
            <declaration name="keys" type="String[]" line="275"/>
            <method name="SymbMap" type="constructor" line="276"/>
            <method name="put" type="void" line="280">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="NameSpaceSymbEntry"/>
                </params>
                <declaration name="index" type="int" line="281"/>
                <declaration name="oldKey" type="Object" line="282"/>
                <scope line="285">
                    <scope line="286">
                        <declaration name="newCapacity" type="int" line="288"/>
                    </scope>
                </scope>
            </method>
            <method name="entrySet" type="List" line="293">
                <declaration name="a" type="List" line="294"/>
                <scope line="295">
                    <scope line="296"/>
                </scope>
            </method>
            <method name="index" type="int" line="302">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="set" type="Object[]" line="303"/>
                <declaration name="length" type="int" line="304"/>
                <declaration name="index" type="int" line="305"/>
                <declaration name="cur" type="Object" line="306"/>
                <scope line="307"/>
                <scope line="311"/>
            </method>
            <javadoc line="318">
                rehashes the map to the new capacity.                
                <param>
                    newCapacity an <code>int</code> value                    
                </param>
            </javadoc>
            <method name="rehash" type="void" line="322">
                <params>
                    <param name="newCapacity" type="int"/>
                </params>
                <declaration name="oldCapacity" type="int" line="323"/>
                <declaration name="oldKeys" type="String" line="324"/>
                <declaration name="oldVals" type="NameSpaceSymbEntry" line="325"/>
                <scope line="328">
                    <scope line="329">
                        <declaration name="o" type="String" line="330"/>
                        <declaration name="index" type="int" line="331"/>
                    </scope>
                </scope>
            </method>
            <method name="get" type="NameSpaceSymbEntry" line="337">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <method name="clone" type="Object" line="340">
                <scope line="341">
                    <declaration name="copy" type="SymbMap" line="342"/>
                </scope>
                <scope line="349"/>
            </method>
        </class>
    </source>