<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.org.apache.xml.internal.security.utils">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.math.BigInteger"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException"/>
        <import package="org.w3c.dom.Document"/>
        <import package="org.w3c.dom.Element"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.w3c.dom.Text"/>
        <class name="Base64" line="36">
            <comment line="362">
                Encodes hex octects into Base64
                
                 @param binaryData Array containing binaryData
                 @return Encoded Base64 array                
            </comment>
            <comment line="794">
                                
            </comment>
            <javadoc line="36">
                Implementation of MIME&apos;s Base64 encoding and decoding conversions.
                  Optimized code. (raw version taken from oreilly.jonathan.util,
                  and currently com.sun.org.apache.xerces.internal.ds.util.Base64)                
                <author>
                    Raul Benito(Of the xerces copy, and little adaptations).                    
                </author>
                <author>
                    Anli Shundi                    
                </author>
                <author>
                    Christian Geuer-Pollmann                    
                </author>
                <see>
                    &lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2045.txt&quot;&gt;RFC 2045&lt;/A&gt;                    
                </see>
                <see>
                    com.sun.org.apache.xml.internal.security.transforms.implementations.TransformBase64Decode                    
                </see>
            </javadoc>
            <declaration name="BASE64DEFAULTLENGTH" type="int" line="50"/>
            <javadoc line="50">
                Field BASE64DEFAULTLENGTH                
            </javadoc>
            <method name="Base64" type="constructor" line="53">
                <comment line="55">
                    we don&apos;t allow instantiation                    
                </comment>
            </method>
            <javadoc line="57">
                Returns a byte-array representation of a &lt;code&gt;{@link BigInteger}&lt;code&gt;.
                  No sign-bit is outputed.
                  &lt;b&gt;N.B.:&lt;/B&gt; &lt;code&gt;{@link BigInteger}&lt;code&gt;&apos;s toByteArray
                  retunrs eventually longer arrays because of the leading sign-bit.                
                <param>
                    big &lt;code&gt;BigInteger&lt;code&gt; to be converted                    
                </param>
                <param>
                    bitlen &lt;code&gt;int&lt;code&gt; the desired length in bits of the representation                    
                </param>
                <return>
                    a byte array with &lt;code&gt;bitlen&lt;/code&gt; bits of &lt;code&gt;big&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getBytes" type="byte[]" line="68">
                <params>
                    <param name="big" type="BigInteger"/>
                    <param name="bitlen" type="int"/>
                </params>
                <comment line="71">
                    round bitlen                    
                </comment>
                <comment line="86">
                    some copying needed                    
                </comment>
                <comment line="87">
                    no need to skip anything                    
                </comment>
                <comment line="88">
                    valid length of the string                    
                </comment>
                <comment line="90">
                    correct values                    
                </comment>
                <comment line="91">
                    skip sign bit                    
                </comment>
                <comment line="93">
                    valid length of the string                    
                </comment>
                <comment line="96">
                    pad with leading nulls                    
                </comment>
                <scope line="73"/>
                <declaration name="bigBytes" type="byte[]" line="78"/>
                <scope line="81"/>
                <declaration name="startSrc" type="int" line="86"/>
                <declaration name="bigLen" type="int" line="87"/>
                <scope line="89"/>
                <declaration name="startDst" type="int" line="95"/>
                <declaration name="resizedBytes" type="byte[]" line="96"/>
            </method>
            <javadoc line="104">
                Encode in Base64 the given &lt;code&gt;{@link BigInteger}&lt;code&gt;.                
                <param>
                    big                    
                </param>
                <return>
                    String with Base64 encoding                    
                </return>
            </javadoc>
            <method name="encode" type="String" line="110">
                <params>
                    <param name="big" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="114">
                Returns a byte-array representation of a &lt;code&gt;{@link BigInteger}&lt;code&gt;.
                  No sign-bit is outputed.
                  &lt;b&gt;N.B.:&lt;/B&gt; &lt;code&gt;{@link BigInteger}&lt;code&gt;&apos;s toByteArray
                  retunrs eventually longer arrays because of the leading sign-bit.                
                <param>
                    big &lt;code&gt;BigInteger&lt;code&gt; to be converted                    
                </param>
                <param>
                    bitlen &lt;code&gt;int&lt;code&gt; the desired length in bits of the representation                    
                </param>
                <return>
                    a byte array with &lt;code&gt;bitlen&lt;/code&gt; bits of &lt;code&gt;big&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="encode" type="byte[]" line="125">
                <params>
                    <param name="big" type="BigInteger"/>
                    <param name="bitlen" type="int"/>
                </params>
                <comment line="128">
                    round bitlen                    
                </comment>
                <comment line="143">
                    some copying needed                    
                </comment>
                <comment line="144">
                    no need to skip anything                    
                </comment>
                <comment line="145">
                    valid length of the string                    
                </comment>
                <comment line="147">
                    correct values                    
                </comment>
                <comment line="148">
                    skip sign bit                    
                </comment>
                <comment line="150">
                    valid length of the string                    
                </comment>
                <comment line="153">
                    pad with leading nulls                    
                </comment>
                <scope line="130"/>
                <declaration name="bigBytes" type="byte[]" line="135"/>
                <scope line="138"/>
                <declaration name="startSrc" type="int" line="143"/>
                <declaration name="bigLen" type="int" line="144"/>
                <scope line="146"/>
                <declaration name="startDst" type="int" line="152"/>
                <declaration name="resizedBytes" type="byte[]" line="153"/>
            </method>
            <javadoc line="161">
                Method decodeBigIntegerFromElement                
                <param>
                    element                    
                </param>
                <return>
                    the biginter obtained from the node                    
                </return>
                <throws>
                    Base64DecodingException                    
                </throws>
            </javadoc>
            <method name="decodeBigIntegerFromElement" type="BigInteger" line="169">
                <params>
                    <param name="element" type="Element"/>
                </params>
            </method>
            <javadoc line="173">
                Method decodeBigIntegerFromText                
                <param>
                    text                    
                </param>
                <return>
                    the biginter obtained from the text node                    
                </return>
                <throws>
                    Base64DecodingException                    
                </throws>
            </javadoc>
            <method name="decodeBigIntegerFromText" type="BigInteger" line="181">
                <params>
                    <param name="text" type="Text"/>
                </params>
            </method>
            <javadoc line="185">
                This method takes an (empty) Element and a BigInteger and adds the
                  base64 encoded BigInteger to the Element.                
                <param>
                    element                    
                </param>
                <param>
                    biginteger                    
                </param>
            </javadoc>
            <method name="fillElementWithBigInteger" type="void" line="193">
                <params>
                    <param name="element" type="Element"/>
                    <param name="biginteger" type="BigInteger"/>
                </params>
                <declaration name="encodedInt" type="String" line="195"/>
                <scope line="197"/>
                <declaration name="doc" type="Document" line="201"/>
                <declaration name="text" type="Text" line="202"/>
            </method>
            <javadoc line="207">
                Method decode
                  Takes the &lt;CODE&gt;Text&lt;/CODE&gt; children of the Element and interprets
                  them as input for the &lt;CODE&gt;Base64.decode()&lt;/CODE&gt; function.                
                <param>
                    element                    
                </param>
                <return>
                    the byte obtained of the decoding the element
                      $todo$ not tested yet                    
                </return>
                <throws>
                    Base64DecodingException                    
                </throws>
            </javadoc>
            <method name="decode" type="byte[]" line="218">
                <params>
                    <param name="element" type="Element"/>
                </params>
                <declaration name="sibling" type="Node" line="220"/>
                <declaration name="sb" type="StringBuffer" line="221"/>
                <scope line="223">
                    <scope line="224">
                        <declaration name="t" type="Text" line="225"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="235">
                Method encodeToElement                
                <param>
                    doc                    
                </param>
                <param>
                    localName                    
                </param>
                <param>
                    bytes                    
                </param>
                <return>
                    an Element with the base64 encoded in the text.                    
                </return>
            </javadoc>
            <method name="encodeToElement" type="Element" line="245">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="localName" type="String"/>
                    <param name="bytes" type="byte[]"/>
                </params>
                <declaration name="el" type="Element" line="247"/>
                <declaration name="text" type="Text" line="248"/>
            </method>
            <javadoc line="255">
                Method decode                
                <param>
                    base64                    
                </param>
                <return>
                    the UTF bytes of the base64                    
                </return>
                <throws>
                    Base64DecodingException                    
                </throws>
            </javadoc>
            <method name="decode" type="byte[]" line="264">
                <params>
                    <param name="base64" type="byte[]"/>
                </params>
            </method>
            <javadoc line="270">
                Encode a byte array and fold lines at the standard 76th character unless
                  ignore line breaks property is set.                
                <param>
                    binaryData &lt;code&gt;byte[]&lt;code&gt; to be base64 encoded                    
                </param>
                <return>
                    the &lt;code&gt;String&lt;code&gt; with encoded data                    
                </return>
            </javadoc>
            <method name="encode" type="String" line="277">
                <params>
                    <param name="binaryData" type="byte[]"/>
                </params>
            </method>
            <javadoc line="283">
                Base64 decode the lines from the reader and return an InputStream
                  with the bytes.                
                <param>
                    reader                    
                </param>
                <return>
                    InputStream with the decoded bytes                    
                </return>
                <exception>
                    IOException passes what the reader throws                    
                </exception>
                <throws>
                    IOException                    
                </throws>
                <throws>
                    Base64DecodingException                    
                </throws>
            </javadoc>
            <method name="decode" type="byte[]" line="295">
                <params>
                    <param name="reader" type="BufferedReader"/>
                </params>
                <declaration name="baos" type="UnsyncByteArrayOutputStream" line="297"/>
                <declaration name="line" type="String" line="298"/>
                <scope line="300">
                    <declaration name="bytes" type="byte[]" line="301"/>
                </scope>
            </method>
            <declaration name="BASELENGTH" type="int" line="309"/>
            <declaration name="LOOKUPLENGTH" type="int" line="310"/>
            <declaration name="TWENTYFOURBITGROUP" type="int" line="311"/>
            <declaration name="EIGHTBIT" type="int" line="312"/>
            <declaration name="SIXTEENBIT" type="int" line="313"/>
            <declaration name="FOURBYTE" type="int" line="314"/>
            <declaration name="SIGN" type="int" line="315"/>
            <declaration name="PAD" type="char" line="316"/>
            <declaration name="base64Alphabet" type="byte[]" line="317"/>
            <declaration name="lookUpBase64Alphabet" type="char[]" line="318"/>
            <scope line="320">
                <scope line="322"/>
                <scope line="325"/>
                <scope line="328"/>
                <scope line="332"/>
            </scope>
            <method name="isWhiteSpace" type="boolean" line="352">
                <params>
                    <param name="octect" type="byte"/>
                </params>
            </method>
            <method name="isPad" type="boolean" line="356">
                <params>
                    <param name="octect" type="byte"/>
                </params>
            </method>
            <javadoc line="367">
                Encode a byte array in Base64 format and return an optionally
                  wrapped line.                
                <param>
                    binaryData &lt;code&gt;byte[]&lt;/code&gt; data to be encoded                    
                </param>
                <param>
                    length &lt;code&gt;int&lt;code&gt; length of wrapped lines; No wrapping if less than 4.                    
                </param>
                <return>
                    a &lt;code&gt;String&lt;/code&gt; with encoded data                    
                </return>
            </javadoc>
            <method name="encode" type="String" line="375">
                <params>
                    <param name="binaryData" type="byte[]"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="453">
                    form integral number of 6-bit groups                    
                </comment>
                <comment line="477">
                    encodedData[encodedIndex] = 0xa;                    
                </comment>
                <scope line="377"/>
                <declaration name="lengthDataBits" type="int" line="384"/>
                <scope line="385"/>
                <declaration name="fewerThan24bits" type="int" line="389"/>
                <declaration name="numberTriplets" type="int" line="390"/>
                <declaration name="numberQuartet" type="int" line="391"/>
                <declaration name="quartesPerLine" type="int" line="392"/>
                <declaration name="numberLines" type="int" line="393"/>
                <declaration name="encodedData" type="char" line="394"/>
                <declaration name="k" type="byte" line="398"/>
                <declaration name="encodedIndex" type="int" line="400"/>
                <declaration name="dataIndex" type="int" line="401"/>
                <declaration name="i" type="int" line="402"/>
                <scope line="405">
                    <scope line="406">
                        <declaration name="val1" type="byte" line="415"/>
                        <declaration name="val2" type="byte" line="417"/>
                        <declaration name="val3" type="byte" line="418"/>
                    </scope>
                </scope>
                <scope line="431">
                    <declaration name="val1" type="byte" line="440"/>
                    <declaration name="val2" type="byte" line="442"/>
                    <declaration name="val3" type="byte" line="443"/>
                </scope>
                <scope line="453">
                    <declaration name="val1" type="byte" line="456"/>
                </scope>
                <scope line="461">
                    <declaration name="val1" type="byte" line="467"/>
                    <declaration name="val2" type="byte" line="468"/>
                </scope>
            </method>
            <javadoc line="481">
                Decodes Base64 data into octects                
                <param>
                    encoded String containing base64 encoded data                    
                </param>
                <return>
                    byte array containing the decoded data                    
                </return>
                <throws>
                    Base64DecodingException if there is a problem decoding the data                    
                </throws>
            </javadoc>
            <method name="decode" type="byte[]" line="488">
                <params>
                    <param name="encoded" type="String"/>
                </params>
                <declaration name="bytes" type="byte[]" line="492"/>
                <declaration name="len" type="int" line="493"/>
            </method>
            <method name="getBytesInternal" type="int" line="497">
                <params>
                    <param name="s" type="String"/>
                    <param name="result" type="byte[]"/>
                </params>
                <declaration name="length" type="int" line="498"/>
                <declaration name="newSize" type="int" line="500"/>
                <scope line="501">
                    <declaration name="dataS" type="byte" line="502"/>
                </scope>
            </method>
            <method name="decodeInternal" type="byte[]" line="509">
                <params>
                    <param name="base64Data" type="byte[]"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="511">
                    remove white spaces                    
                </comment>
                <comment line="517">
                    should be divisible by four                    
                </comment>
                <comment line="533">
                    decodedData      = new byte[ (numberQuadruple)*3];                    
                </comment>
                <comment line="536">
                    first last bits.                    
                </comment>
                <comment line="540">
                    if found &quot;no data&quot; just return null                    
                </comment>
                <comment line="548">
                    Check if they are PAD characters                    
                </comment>
                <comment line="549">
                    Two PAD e.g. 3c[Pad][Pad]                    
                </comment>
                <comment line="550">
                    last 4 bits should be zero                    
                </comment>
                <comment line="554">
                    One PAD  e.g. 3cQ[Pad]                    
                </comment>
                <comment line="555">
                    last 2 bits should be zero                    
                </comment>
                <comment line="561">
                    an error  like &quot;3c[Pad]r&quot;, &quot;3cdX&quot;, &quot;3cXd&quot;, &quot;3cXX&quot; where X is non data                    
                </comment>
                <comment line="564">
                    No PAD e.g 3cQl                    
                </comment>
                <comment line="572">
                    the begin                    
                </comment>
                <comment line="583">
                    if found &quot;no data&quot; just return null                    
                </comment>
                <scope line="514"/>
                <declaration name="numberQuadruple" type="int" line="519"/>
                <declaration name="decodedData" type="byte" line="524"/>
                <declaration name="b1" type="byte" line="525"/>
                <declaration name="i" type="int" line="528"/>
                <declaration name="encodedIndex" type="int" line="529"/>
                <declaration name="dataIndex" type="int" line="530"/>
                <scope line="538"/>
                <declaration name="d3" type="byte" line="543"/>
                <scope line="546">
                    <scope line="548"/>
                    <scope line="553"/>
                    <scope line="559"/>
                </scope>
                <scope line="562"/>
                <scope line="572">
                    <scope line="581"/>
                </scope>
            </method>
            <javadoc line="591">
                Decodes Base64 data into  outputstream                
                <param>
                    base64Data String containing Base64 data                    
                </param>
                <param>
                    os the outputstream                    
                </param>
                <throws>
                    IOException                    
                </throws>
                <throws>
                    Base64DecodingException                    
                </throws>
            </javadoc>
            <method name="decode" type="void" line="600">
                <params>
                    <param name="base64Data" type="String"/>
                    <param name="os" type="OutputStream"/>
                </params>
                <declaration name="bytes" type="byte[]" line="601"/>
                <declaration name="len" type="int" line="602"/>
            </method>
            <javadoc line="605">
                Decodes Base64 data into  outputstream                
                <param>
                    base64Data Byte array containing Base64 data                    
                </param>
                <param>
                    os the outputstream                    
                </param>
                <throws>
                    IOException                    
                </throws>
                <throws>
                    Base64DecodingException                    
                </throws>
            </javadoc>
            <method name="decode" type="void" line="614">
                <params>
                    <param name="base64Data" type="byte[]"/>
                    <param name="os" type="OutputStream"/>
                </params>
            </method>
            <method name="decode" type="void" line="618">
                <params>
                    <param name="base64Data" type="byte[]"/>
                    <param name="os" type="OutputStream"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="621">
                    remove white spaces                    
                </comment>
                <comment line="627">
                    should be divisible by four                    
                </comment>
                <comment line="635">
                    byte     decodedData[]      = null;                    
                </comment>
                <comment line="642">
                    the begin                    
                </comment>
                <comment line="652">
                    if found &quot;no data&quot; just return null                    
                </comment>
                <comment line="663">
                    first last bits.                    
                </comment>
                <comment line="666">
                    if found &quot;no data&quot; just return null                    
                </comment>
                <comment line="673">
                    Check if they are PAD characters                    
                </comment>
                <comment line="674">
                    Two PAD e.g. 3c[Pad][Pad]                    
                </comment>
                <comment line="675">
                    last 4 bits should be zero                    
                </comment>
                <comment line="678">
                    One PAD  e.g. 3cQ[Pad]                    
                </comment>
                <comment line="679">
                    last 2 bits should be zero                    
                </comment>
                <comment line="684">
                    an error  like &quot;3c[Pad]r&quot;, &quot;3cdX&quot;, &quot;3cXd&quot;, &quot;3cXX&quot; where X is non data                    
                </comment>
                <comment line="687">
                    No PAD e.g 3cQl                    
                </comment>
                <scope line="624"/>
                <declaration name="numberQuadruple" type="int" line="629"/>
                <declaration name="b1" type="byte" line="635"/>
                <declaration name="i" type="int" line="637"/>
                <declaration name="dataIndex" type="int" line="639"/>
                <scope line="642"/>
                <scope line="664"/>
                <declaration name="d3" type="byte" line="668"/>
                <scope line="672">
                    <scope line="673"/>
                    <scope line="677"/>
                    <scope line="682"/>
                </scope>
                <scope line="685"/>
            </method>
            <javadoc line="694">
                Decodes Base64 data into  outputstream                
                <param>
                    is containing Base64 data                    
                </param>
                <param>
                    os the outputstream                    
                </param>
                <throws>
                    IOException                    
                </throws>
                <throws>
                    Base64DecodingException                    
                </throws>
            </javadoc>
            <method name="decode" type="void" line="703">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="os" type="OutputStream"/>
                </params>
                <comment line="705">
                    byte     decodedData[]      = null;                    
                </comment>
                <comment line="711">
                    the begin                    
                </comment>
                <comment line="726">
                    if found &quot;no data&quot; just return null                    
                </comment>
                <comment line="750">
                    Check if they are PAD characters                    
                </comment>
                <comment line="751">
                    Two PAD e.g. 3c[Pad][Pad]                    
                </comment>
                <comment line="752">
                    last 4 bits should be zero                    
                </comment>
                <comment line="755">
                    One PAD  e.g. 3cQ[Pad]                    
                </comment>
                <comment line="757">
                    last 2 bits should be zero                    
                </comment>
                <comment line="762">
                    an error  like &quot;3c[Pad]r&quot;, &quot;3cdX&quot;, &quot;3cXd&quot;, &quot;3cXX&quot; where X is non data                    
                </comment>
                <comment line="765">
                    No PAD e.g 3cQl                    
                </comment>
                <declaration name="b1" type="byte" line="705"/>
                <declaration name="index" type="int" line="707"/>
                <declaration name="data" type="byte[]" line="708"/>
                <declaration name="read" type="int" line="709"/>
                <scope line="711">
                    <declaration name="readed" type="byte" line="712"/>
                    <scope line="713"/>
                    <scope line="716"/>
                    <scope line="724"/>
                    <scope line="728"/>
                </scope>
                <declaration name="d1" type="byte" line="743"/>
                <scope line="749">
                    <scope line="750"/>
                    <scope line="754"/>
                    <scope line="760"/>
                </scope>
                <scope line="763"/>
            </method>
            <javadoc line="773">
                remove WhiteSpace from MIME containing encoded Base64 data.                
                <param>
                    data  the byte array of base64 data (with WS)                    
                </param>
                <return>
                    the new length                    
                </return>
            </javadoc>
            <method name="removeWhiteSpace" type="int" line="779">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <comment line="784">
                    count characters that&apos;s not whitespace                    
                </comment>
                <declaration name="newSize" type="int" line="784"/>
                <declaration name="len" type="int" line="785"/>
                <scope line="786">
                    <declaration name="dataS" type="byte" line="787"/>
                </scope>
            </method>
        </class>
    </source>