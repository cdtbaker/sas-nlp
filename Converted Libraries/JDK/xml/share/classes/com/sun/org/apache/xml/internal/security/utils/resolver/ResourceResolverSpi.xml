<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.org.apache.xml.internal.security.utils.resolver">
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput"/>
        <import package="org.w3c.dom.Attr"/>
        <class name="ResourceResolverSpi" line="6">
            <javadoc line="6">
                During reference validation, we have to retrieve resources from somewhere.                
                <author>
                    $Author: mullan $                    
                </author>
            </javadoc>
            <declaration name="log" type="java.util.logging.Logger" line="11"/>
            <javadoc line="11">
                {@link java.util.logging} logging facility                
            </javadoc>
            <declaration name="_properties" type="java.util.Map" line="15"/>
            <javadoc line="15">
                Field _properties                
            </javadoc>
            <method name="engineResolve" type="XMLSignatureInput" line="19"/>
            <javadoc line="19">
                This is the workhorse method used to resolve resources.                
                <param>
                    uri                    
                </param>
                <param>
                    BaseURI                    
                </param>
                <return>
                    the resource wrapped arround a XMLSignatureInput                    
                </return>
                <throws>
                    ResourceResolverException                    
                </throws>
            </javadoc>
            <javadoc line="27">
                Method engineSetProperty                
                <param>
                    key                    
                </param>
                <param>
                    value                    
                </param>
            </javadoc>
            <method name="engineSetProperty" type="void" line="32">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="33"/>
            </method>
            <javadoc line="38">
                Method engineGetProperty                
                <param>
                    key                    
                </param>
                <return>
                    the value of the property                    
                </return>
            </javadoc>
            <method name="engineGetProperty" type="String" line="43">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="44"/>
            </method>
            <javadoc line="49">
                @param properties                
            </javadoc>
            <method name="engineAddProperies" type="void" line="52">
                <params>
                    <param name="properties" type="Map"/>
                </params>
                <scope line="53">
                    <scope line="54"/>
                </scope>
            </method>
            <javadoc line="60">
                Tells if the implementation does can be reused by several threads safely.
                  It normally means that the implemantation does not have any member, or there is
                  member change betwen engineCanResolve &amp; engineResolve invocations. Or it mantians all
                  member info in ThreadLocal methods.                
            </javadoc>
            <method name="engineIsThreadSafe" type="boolean" line="66"/>
            <method name="engineCanResolve" type="boolean" line="69"/>
            <javadoc line="69">
                This method helps the {@link ResourceResolver} to decide whether a{@link ResourceResolverSpi} is able to perform the requested action.                
                <param>
                    uri                    
                </param>
                <param>
                    BaseURI                    
                </param>
                <return>
                    true if the engine can resolve the uri                    
                </return>
            </javadoc>
            <javadoc line="76">
                Method engineGetPropertyKeys                
                <return>
                    the property keys                    
                </return>
            </javadoc>
            <method name="engineGetPropertyKeys" type="String[]" line="80"/>
            <javadoc line="83">
                Method understandsProperty                
                <param>
                    propertyToTest                    
                </param>
                <return>
                    true if understands the property                    
                </return>
            </javadoc>
            <method name="understandsProperty" type="boolean" line="88">
                <params>
                    <param name="propertyToTest" type="String"/>
                </params>
                <declaration name="understood" type="String[]" line="89"/>
                <scope line="90">
                    <scope line="91">
                        <scope line="92"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="99">
                Fixes a platform dependent filename to standard URI form.                
                <param>
                    str The string to fix.                    
                </param>
                <return>
                    Returns the fixed URI string.                    
                </return>
            </javadoc>
            <method name="fixURI" type="String" line="104">
                <params>
                    <param name="str" type="String"/>
                </params>
                <scope line="106">
                    <declaration name="ch0" type="char" line="107"/>
                    <declaration name="ch1" type="char" line="108"/>
                    <declaration name="ch2" type="char" line="109"/>
                    <declaration name="ch3" type="char" line="110"/>
                    <declaration name="isDosFilename" type="boolean" line="111"/>
                    <scope line="112"/>
                </scope>
                <scope line="116">
                    <declaration name="ch1" type="char" line="117"/>
                    <scope line="118">
                        <declaration name="ch0" type="char" line="119"/>
                        <scope line="120"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>