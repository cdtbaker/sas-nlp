<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.org.apache.xml.internal.security.signature">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="javax.xml.parsers.DocumentBuilder"/>
        <import package="javax.xml.parsers.DocumentBuilderFactory"/>
        <import package="javax.xml.parsers.ParserConfigurationException"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.CanonicalizationException"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.implementations.CanonicalizerBase"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.implementations.Canonicalizer20010315OmitComments"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.implementations.Canonicalizer11_OmitComments"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.XMLSecurityRuntimeException"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.JavaUtils"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.XMLUtils"/>
        <import package="org.w3c.dom.Document"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.xml.sax.SAXException"/>
        <class name="XMLSignatureInput" line="25">
            <implements interface="Cloneable"/>
            <javadoc line="25">
                Class XMLSignatureInput                
                <author>
                    Christian Geuer-Pollmann
                      $todo$ check whether an XMLSignatureInput can be _both_, octet stream _and_ node set?                    
                </author>
            </javadoc>
            <declaration name="log" type="java.util.logging.Logger" line="31"/>
            <declaration name="_inputOctetStreamProxy" type="InputStream" line="32"/>
            <javadoc line="32">
                Some InputStreams do not support the {@link java.io.InputStream#reset}method, so we read it in completely and work on our Proxy.                
            </javadoc>
            <declaration name="_inputNodeSet" type="Set" line="36"/>
            <javadoc line="36">
                The original NodeSet for this XMLSignatureInput                
            </javadoc>
            <declaration name="_subNode" type="Node" line="40"/>
            <javadoc line="40">
                The original Element                
            </javadoc>
            <declaration name="excludeNode" type="Node" line="44"/>
            <javadoc line="44">
                Exclude Node for enveloped transformations                
            </javadoc>
            <declaration name="excludeComments" type="boolean" line="48"/>
            <javadoc line="48">
                                
            </javadoc>
            <declaration name="isNodeSet" type="boolean" line="51"/>
            <declaration name="bytes" type="byte[]" line="52"/>
            <javadoc line="52">
                A cached bytes                
            </javadoc>
            <declaration name="_MIMEType" type="String" line="56"/>
            <javadoc line="56">
                Some Transforms may require explicit MIME type, charset (IANA registered &quot;character set&quot;), or other such information concerning the data they are receiving from an earlier Transform or the source data, although no Transform algorithm specified in this document needs such explicit information. Such data characteristics are provided as parameters to the Transform algorithm and should be described in the specification for the algorithm.                
            </javadoc>
            <declaration name="_SourceURI" type="String" line="60"/>
            <javadoc line="60">
                Field _SourceURI                
            </javadoc>
            <declaration name="nodeFilters" type="List" line="64"/>
            <javadoc line="64">
                Node Filter list.                
            </javadoc>
            <declaration name="needsToBeExpanded" type="boolean" line="68"/>
            <declaration name="outputStream" type="OutputStream" line="69"/>
            <javadoc line="70">
                Check if the structured is needed to be circumbented.                
                <return>
                    true if so.                    
                </return>
            </javadoc>
            <method name="isNeedsToBeExpanded" type="boolean" line="74"/>
            <javadoc line="77">
                Set if the structured is needed to be circumbented.                
                <param>
                    needsToBeExpanded true if so.                    
                </param>
            </javadoc>
            <method name="setNeedsToBeExpanded" type="void" line="81">
                <params>
                    <param name="needsToBeExpanded" type="boolean"/>
                </params>
            </method>
            <javadoc line="84">
                Construct a XMLSignatureInput from an octet array.
                  &lt;p&gt;
                  This is a comfort method, which internally converts the byte[] array into
                  an InputStream
                  &lt;p&gt;NOTE: no defensive copy&lt;/p&gt;                
                <param>
                    inputOctets an octet array which including XML document or node                    
                </param>
            </javadoc>
            <method name="XMLSignatureInput" type="constructor" line="92">
                <params>
                    <param name="inputOctets" type="byte[]"/>
                </params>
            </method>
            <javadoc line="95">
                Constructs a &lt;code&gt;XMLSignatureInput&lt;/code&gt; from an octet stream. The
                  stream is directly read.                
                <param>
                    inputOctetStream                    
                </param>
            </javadoc>
            <method name="XMLSignatureInput" type="constructor" line="100">
                <params>
                    <param name="inputOctetStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="103">
                Construct a XMLSignatureInput from a String.
                  &lt;p&gt;
                  This is a comfort method, which internally converts the String into a byte
                  [] array using the {@link java.lang.String#getBytes()} method.                
                <deprecated>
                                        
                </deprecated>
                <param>
                    inputStr the input String which including XML document or node                    
                </param>
            </javadoc>
            <method name="XMLSignatureInput" type="constructor" line="111">
                <params>
                    <param name="inputStr" type="String"/>
                </params>
            </method>
            <javadoc line="114">
                Construct a XMLSignatureInput from a String with a given encoding.
                  &lt;p&gt;
                  This is a comfort method, which internally converts the String into a byte
                  [] array using the {@link java.lang.String#getBytes()} method.                
                <deprecated>
                                        
                </deprecated>
                <param>
                    inputStr the input String with encoding <code>encoding</code>                    
                </param>
                <param>
                    encoding the encoding of <code>inputStr</code>                    
                </param>
                <throws>
                    UnsupportedEncodingException                    
                </throws>
            </javadoc>
            <method name="XMLSignatureInput" type="constructor" line="124">
                <params>
                    <param name="inputStr" type="String"/>
                    <param name="encoding" type="String"/>
                </params>
            </method>
            <javadoc line="127">
                Construct a XMLSignatureInput from a subtree rooted by rootNode. This
                  method included the node and &lt;I&gt;all&lt;/I&gt; his descendants in the output.                
                <param>
                    rootNode                    
                </param>
            </javadoc>
            <method name="XMLSignatureInput" type="constructor" line="132">
                <params>
                    <param name="rootNode" type="Node"/>
                </params>
            </method>
            <javadoc line="135">
                Constructor XMLSignatureInput                
                <param>
                    inputNodeSet                    
                </param>
                <param>
                    usedXPathAPI                    
                </param>
            </javadoc>
            <method name="XMLSignatureInput" type="constructor" line="140">
                <params>
                    <param name="inputNodeSet" type="Set"/>
                </params>
            </method>
            <javadoc line="143">
                Returns the node set from input which was specified as the parameter of{@link XMLSignatureInput} constructor                
                <return>
                    the node set                    
                </return>
                <throws>
                    SAXException                    
                </throws>
                <throws>
                    IOException                    
                </throws>
                <throws>
                    ParserConfigurationException                    
                </throws>
                <throws>
                    CanonicalizationException                    
                </throws>
            </javadoc>
            <method name="getNodeSet" type="Set" line="151"/>
            <javadoc line="154">
                Returns the node set from input which was specified as the parameter of{@link XMLSignatureInput} constructor                
                <param>
                    circumvent                    
                </param>
                <return>
                    the node set                    
                </return>
                <throws>
                    SAXException                    
                </throws>
                <throws>
                    IOException                    
                </throws>
                <throws>
                    ParserConfigurationException                    
                </throws>
                <throws>
                    CanonicalizationException                    
                </throws>
            </javadoc>
            <method name="getNodeSet" type="Set" line="163">
                <params>
                    <param name="circumvent" type="boolean"/>
                </params>
                <scope line="164"/>
                <scope line="167">
                    <scope line="168"/>
                </scope>
                <scope line="175">
                    <declaration name="result" type="HashSet" line="177"/>
                </scope>
            </method>
            <javadoc line="183">
                Returns the Octect stream(byte Stream) from input which was specified as
                  the parameter of {@link XMLSignatureInput} constructor                
                <return>
                    the Octect stream(byte Stream) from input which was specified as
                      the parameter of {@link XMLSignatureInput} constructor                    
                </return>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="getOctetStream" type="InputStream" line="190"/>
            <javadoc line="193">
                @return real octect stream                
            </javadoc>
            <method name="getOctetStreamReal" type="InputStream" line="196"/>
            <javadoc line="199">
                Returns the byte array from input which was specified as the parameter of{@link XMLSignatureInput} constructor                
                <return>
                    the byte[] from input which was specified as the parameter of{@link XMLSignatureInput} constructor                    
                </return>
                <throws>
                    CanonicalizationException                    
                </throws>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="getBytes" type="byte[]" line="205">
                <scope line="206"/>
                <declaration name="is" type="InputStream" line="209"/>
                <scope line="210">
                    <scope line="211"/>
                </scope>
                <declaration name="c14nizer" type="Canonicalizer20010315OmitComments" line="217"/>
            </method>
            <javadoc line="221">
                Determines if the object has been set up with a Node set                
                <return>
                    true if the object has been set up with a Node set                    
                </return>
            </javadoc>
            <method name="isNodeSet" type="boolean" line="225"/>
            <javadoc line="228">
                Determines if the object has been set up with an Element                
                <return>
                    true if the object has been set up with a Node set                    
                </return>
            </javadoc>
            <method name="isElement" type="boolean" line="232"/>
            <javadoc line="235">
                Determines if the object has been set up with an octet stream                
                <return>
                    true if the object has been set up with an octet stream                    
                </return>
            </javadoc>
            <method name="isOctetStream" type="boolean" line="239"/>
            <javadoc line="242">
                Determines if {@link #setOutputStream} has been called with a
                  non-null OutputStream.                
                <return>
                    true if {@link #setOutputStream} has been called with a
                      non-null OutputStream                    
                </return>
            </javadoc>
            <method name="isOutputStreamSet" type="boolean" line="248"/>
            <javadoc line="251">
                Determines if the object has been set up with a ByteArray                
                <return>
                    true is the object has been set up with an octet stream                    
                </return>
            </javadoc>
            <method name="isByteArray" type="boolean" line="255"/>
            <javadoc line="258">
                Is the object correctly set up?                
                <return>
                    true if the object has been set up correctly                    
                </return>
            </javadoc>
            <method name="isInitialized" type="boolean" line="262"/>
            <javadoc line="265">
                Returns MIMEType                
                <return>
                    MIMEType                    
                </return>
            </javadoc>
            <method name="getMIMEType" type="String" line="269"/>
            <javadoc line="272">
                Sets MIMEType                
                <param>
                    MIMEType                    
                </param>
            </javadoc>
            <method name="setMIMEType" type="void" line="276">
                <params>
                    <param name="MIMEType" type="String"/>
                </params>
            </method>
            <javadoc line="279">
                Return SourceURI                
                <return>
                    SourceURI                    
                </return>
            </javadoc>
            <method name="getSourceURI" type="String" line="283"/>
            <javadoc line="286">
                Sets SourceURI                
                <param>
                    SourceURI                    
                </param>
            </javadoc>
            <method name="setSourceURI" type="void" line="290">
                <params>
                    <param name="SourceURI" type="String"/>
                </params>
            </method>
            <javadoc line="293">
                Method toString                
                <inheritDoc>
                                        
                </inheritDoc>
            </javadoc>
            <method name="toString" type="String" line="297">
                <scope line="298"/>
                <scope line="301"/>
                <scope line="304"/>
                <scope line="307"/>
                <scope line="310"/>
            </method>
            <javadoc line="314">
                Method getHTMLRepresentation                
                <throws>
                    XMLSignatureException                    
                </throws>
                <return>
                    The HTML representation for this XMLSignature                    
                </return>
            </javadoc>
            <method name="getHTMLRepresentation" type="String" line="319">
                <declaration name="db" type="XMLSignatureInputDebugger" line="320"/>
            </method>
            <javadoc line="323">
                Method getHTMLRepresentation                
                <param>
                    inclusiveNamespaces                    
                </param>
                <throws>
                    XMLSignatureException                    
                </throws>
                <return>
                    The HTML representation for this XMLSignature                    
                </return>
            </javadoc>
            <method name="getHTMLRepresentation" type="String" line="329">
                <params>
                    <param name="inclusiveNamespaces" type="Set"/>
                </params>
                <declaration name="db" type="XMLSignatureInputDebugger" line="330"/>
            </method>
            <javadoc line="333">
                Gets the exclude node of this XMLSignatureInput                
                <return>
                    Returns the excludeNode.                    
                </return>
            </javadoc>
            <method name="getExcludeNode" type="Node" line="337"/>
            <javadoc line="340">
                Sets the exclude node of this XMLSignatureInput                
                <param>
                    excludeNode The excludeNode to set.                    
                </param>
            </javadoc>
            <method name="setExcludeNode" type="void" line="344">
                <params>
                    <param name="excludeNode" type="Node"/>
                </params>
            </method>
            <javadoc line="347">
                Gets the node of this XMLSignatureInput                
                <return>
                    The excludeNode set.                    
                </return>
            </javadoc>
            <method name="getSubNode" type="Node" line="351"/>
            <javadoc line="354">
                @return Returns the excludeComments.                
            </javadoc>
            <method name="isExcludeComments" type="boolean" line="357"/>
            <javadoc line="360">
                @param excludeComments The excludeComments to set.                
            </javadoc>
            <method name="setExcludeComments" type="void" line="363">
                <params>
                    <param name="excludeComments" type="boolean"/>
                </params>
            </method>
            <javadoc line="366">
                @param diOs                
                <throws>
                    IOException                    
                </throws>
                <throws>
                    CanonicalizationException                    
                </throws>
            </javadoc>
            <method name="updateOutputStream" type="void" line="371">
                <params>
                    <param name="diOs" type="OutputStream"/>
                </params>
            </method>
            <method name="updateOutputStream" type="void" line="374">
                <params>
                    <param name="diOs" type="OutputStream"/>
                    <param name="c14n11" type="boolean"/>
                </params>
                <scope line="375"/>
                <scope line="378"/>
                <scope line="382">
                    <declaration name="c14nizer" type="CanonicalizerBase" line="383"/>
                    <scope line="384"/>
                    <scope line="387"/>
                </scope>
                <scope line="394">
                    <declaration name="is" type="InputStream" line="395"/>
                    <scope line="396"/>
                    <declaration name="num" type="int" line="401"/>
                    <declaration name="bytesT" type="byte[]" line="402"/>
                    <scope line="403"/>
                </scope>
            </method>
            <javadoc line="408">
                @param os                
            </javadoc>
            <method name="setOutputStream" type="void" line="411">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
            </method>
            <method name="getResetableInputStream" type="InputStream" line="414">
                <scope line="415">
                    <scope line="416"/>
                </scope>
                <scope line="421"/>
                <scope line="426"/>
            </method>
            <javadoc line="434">
                @param filter                
            </javadoc>
            <method name="addNodeFilter" type="void" line="437">
                <params>
                    <param name="filter" type="NodeFilter"/>
                </params>
                <scope line="438">
                    <scope line="439"/>
                    <scope line="442"/>
                </scope>
            </method>
            <javadoc line="448">
                @return the node filters                
            </javadoc>
            <method name="getNodeFilters" type="List" line="451"/>
            <javadoc line="454">
                @param b                
            </javadoc>
            <method name="setNodeSet" type="void" line="457">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="convertToNodes" type="void" line="460">
                <declaration name="dfactory" type="DocumentBuilderFactory" line="461"/>
                <declaration name="db" type="DocumentBuilder" line="464"/>
                <scope line="465">
                    <declaration name="doc" type="Document" line="467"/>
                </scope>
                <scope line="470">
                    <declaration name="baos" type="ByteArrayOutputStream" line="471"/>
                    <declaration name="result" type="byte" line="475"/>
                    <declaration name="document" type="Document" line="476"/>
                </scope>
            </method>
        </class>
    </source>