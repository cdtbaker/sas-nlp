<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.org.apache.xml.internal.security.signature">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Set"/>
        <import package="com.sun.org.apache.xml.internal.security.algorithms.MessageDigestAlgorithm"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.CanonicalizationException"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.InvalidCanonicalizerException"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.XMLSecurityException"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.InvalidTransformException"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.Transform"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.TransformationException"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.Transforms"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.params.InclusiveNamespaces"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.Base64"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.Constants"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.DigesterOutputStream"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.IdResolver"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.SignatureElementProxy"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.UnsyncBufferedOutputStream"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.XMLUtils"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.resolver.ResourceResolver"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.resolver.ResourceResolverException"/>
        <import package="org.w3c.dom.Attr"/>
        <import package="org.w3c.dom.Document"/>
        <import package="org.w3c.dom.Element"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.w3c.dom.Text"/>
        <class name="Reference" line="32">
            <extends class="SignatureElementProxy"/>
            <javadoc line="32">
                Handles &lt;code&gt;&amp;lt;ds:Reference&amp;gt;&lt;/code&gt; elements.
                  This includes:
                  Constuct a &lt;CODE&gt;ds:Reference&lt;/CODE&gt; from an {@link org.w3c.dom.Element}.
                  &lt;p&gt;Create a new reference&lt;/p&gt;
                  &lt;pre&gt;
                  Document _doc;
                  MessageDigestAlgorithm sha1 = MessageDigestAlgorithm.getInstance(&quot;http://#sha1&quot;);
                  Reference ref = new Reference(new XMLSignatureInput(new FileInputStream(&quot;1.gif&quot;),
                  &quot;http://localhost/1.gif&quot;,
                  (Transforms) null, sha1);
                  Element refElem = ref.toElement(_doc);
                  &lt;/pre&gt;
                  &lt;p&gt;Verify a reference&lt;/p&gt;
                  &lt;pre&gt;
                  Element refElem = _doc.getElement(&quot;Reference&quot;); // PSEUDO
                  Reference ref = new Reference(refElem);
                  String url = ref.getURI();
                  ref.setData(new XMLSignatureInput(new FileInputStream(url)));
                  if (ref.verify()) {
                  System.out.println(&quot;verified&quot;);
                  }
                  &lt;/pre&gt;
                  &lt;pre&gt;
                  &amp;lt;element name=&quot;Reference&quot; type=&quot;ds:ReferenceType&quot;/&amp;gt;
                  &amp;lt;complexType name=&quot;ReferenceType&quot;&amp;gt;
                  &amp;lt;sequence&amp;gt;
                  &amp;lt;element ref=&quot;ds:Transforms&quot; minOccurs=&quot;0&quot;/&amp;gt;
                  &amp;lt;element ref=&quot;ds:DigestMethod&quot;/&amp;gt;
                  &amp;lt;element ref=&quot;ds:DigestValue&quot;/&amp;gt;
                  &amp;lt;/sequence&amp;gt;
                  &amp;lt;attribute name=&quot;Id&quot; type=&quot;ID&quot; use=&quot;optional&quot;/&amp;gt;
                  &amp;lt;attribute name=&quot;URI&quot; type=&quot;anyURI&quot; use=&quot;optional&quot;/&amp;gt;
                  &amp;lt;attribute name=&quot;Type&quot; type=&quot;anyURI&quot; use=&quot;optional&quot;/&amp;gt;
                  &amp;lt;/complexType&amp;gt;
                  &lt;/pre&gt;                
                <author>
                    Christian Geuer-Pollmann                    
                </author>
                <see>
                    ObjectContainer                    
                </see>
                <see>
                    Manifest                    
                </see>
            </javadoc>
            <declaration name="useC14N11" type="boolean" line="73"/>
            <javadoc line="73">
                Look up useC14N11 system property. If true, an explicit C14N11 transform
                  will be added if necessary when generating the signature. See section
                  3.1.1 of http://www.w3.org/2007/xmlsec/Drafts/xmldsig-core/ for more info.                
            </javadoc>
            <anonymous_class line="78">
                <method name="run" type="Boolean" line="79"/>
            </anonymous_class>
            <declaration name="CacheSignedNodes" type="boolean" line="84"/>
            <javadoc line="84">
                Field CacheSignedNodes                
            </javadoc>
            <declaration name="log" type="java.util.logging.Logger" line="88"/>
            <javadoc line="88">
                {@link java.util.logging} logging facility                
            </javadoc>
            <declaration name="OBJECT_URI" type="String" line="92"/>
            <javadoc line="92">
                Field OBJECT_URI                
            </javadoc>
            <declaration name="MANIFEST_URI" type="String" line="96"/>
            <javadoc line="96">
                Field MANIFEST_URI                
            </javadoc>
            <declaration name="_manifest" type="Manifest" line="100"/>
            <declaration name="_transformsOutput" type="XMLSignatureInput" line="101"/>
            <declaration name="transforms" type="Transforms" line="102"/>
            <declaration name="digestMethodElem" type="Element" line="103"/>
            <declaration name="digestValueElement" type="Element" line="104"/>
            <javadoc line="105">
                Constructor Reference                
                <param>
                    doc the {@link Document} in which <code>XMLsignature</code> is placed                    
                </param>
                <param>
                    BaseURI the URI of the resource where the XML instance will be stored                    
                </param>
                <param>
                    ReferenceURI URI indicate where is data which will digested                    
                </param>
                <param>
                    manifest                    
                </param>
                <param>
                    transforms {@link Transforms} applied to data                    
                </param>
                <param>
                    messageDigestAlgorithm {@link MessageDigestAlgorithm Digest algorithm} which is applied to the data
                      TODO should we throw XMLSignatureException if MessageDigestAlgoURI is wrong?                    
                </param>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="Reference" type="constructor" line="116">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="BaseURI" type="String"/>
                    <param name="ReferenceURI" type="String"/>
                    <param name="manifest" type="Manifest"/>
                    <param name="transforms" type="Transforms"/>
                    <param name="messageDigestAlgorithm" type="String"/>
                </params>
                <scope line="122"/>
                <scope line="127">
                    <declaration name="mda" type="MessageDigestAlgorithm" line="128"/>
                </scope>
                <scope line="133"/>
            </method>
            <javadoc line="139">
                Build a {@link Reference} from an {@link Element}                
                <param>
                    element <code>Reference</code> element                    
                </param>
                <param>
                    BaseURI the URI of the resource where the XML instance was stored                    
                </param>
                <param>
                    manifest is the {@link Manifest} of {@link SignedInfo} in which the Reference occurs. We need this because the Manifest has the individual {@link ResourceResolver}s whcih have been set by the user                    
                </param>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="Reference" type="constructor" line="146">
                <params>
                    <param name="element" type="Element"/>
                    <param name="BaseURI" type="String"/>
                    <param name="manifest" type="Manifest"/>
                </params>
                <declaration name="el" type="Element" line="149"/>
                <scope line="150"/>
            </method>
            <javadoc line="159">
                Returns {@link MessageDigestAlgorithm}                
                <return>
                    {@link MessageDigestAlgorithm}                    
                </return>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="getMessageDigestAlgorithm" type="MessageDigestAlgorithm" line="164">
                <scope line="165"/>
                <declaration name="uri" type="String" line="168"/>
                <scope line="169"/>
            </method>
            <javadoc line="174">
                Sets the &lt;code&gt;URI&lt;/code&gt; of this &lt;code&gt;Reference&lt;/code&gt; element                
                <param>
                    URI the <code>URI</code> of this <code>Reference</code> element                    
                </param>
            </javadoc>
            <method name="setURI" type="void" line="178">
                <params>
                    <param name="URI" type="String"/>
                </params>
                <scope line="179"/>
            </method>
            <javadoc line="183">
                Returns the &lt;code&gt;URI&lt;/code&gt; of this &lt;code&gt;Reference&lt;/code&gt; element                
                <return>
                    URI the <code>URI</code> of this <code>Reference</code> element                    
                </return>
            </javadoc>
            <method name="getURI" type="String" line="187"/>
            <javadoc line="190">
                Sets the &lt;code&gt;Id&lt;/code&gt; attribute of this &lt;code&gt;Reference&lt;/code&gt; element                
                <param>
                    Id the <code>Id</code> attribute of this <code>Reference</code> element                    
                </param>
            </javadoc>
            <method name="setId" type="void" line="194">
                <params>
                    <param name="Id" type="String"/>
                </params>
                <scope line="195"/>
            </method>
            <javadoc line="200">
                Returns the &lt;code&gt;Id&lt;/code&gt; attribute of this &lt;code&gt;Reference&lt;/code&gt; element                
                <return>
                    Id the <code>Id</code> attribute of this <code>Reference</code> element                    
                </return>
            </javadoc>
            <method name="getId" type="String" line="204"/>
            <javadoc line="207">
                Sets the &lt;code&gt;type&lt;/code&gt; atttibute of the Reference indicate whether an &lt;code&gt;ds:Object&lt;/code&gt;, &lt;code&gt;ds:SignatureProperty&lt;/code&gt;, or &lt;code&gt;ds:Manifest&lt;/code&gt; element                
                <param>
                    Type the <code>type</code> attribute of the Reference                    
                </param>
            </javadoc>
            <method name="setType" type="void" line="211">
                <params>
                    <param name="Type" type="String"/>
                </params>
                <scope line="212"/>
            </method>
            <javadoc line="216">
                Return the &lt;code&gt;type&lt;/code&gt; atttibute of the Reference indicate whether an &lt;code&gt;ds:Object&lt;/code&gt;, &lt;code&gt;ds:SignatureProperty&lt;/code&gt;, or &lt;code&gt;ds:Manifest&lt;/code&gt; element                
                <return>
                    the <code>type</code> attribute of the Reference                    
                </return>
            </javadoc>
            <method name="getType" type="String" line="220"/>
            <javadoc line="223">
                Method isReferenceToObject
                  This returns true if the &lt;CODE&gt;Type&lt;/CODE&gt; attribute of the
                  &lt;CODE&gt;Refernce&lt;/CODE&gt; element points to a &lt;CODE&gt;#Object&lt;/CODE&gt; element                
                <return>
                    true if the Reference type indicates that this Reference points to an <code>Object</code>                    
                </return>
            </javadoc>
            <method name="typeIsReferenceToObject" type="boolean" line="229">
                <scope line="230"/>
            </method>
            <javadoc line="235">
                Method isReferenceToManifest
                  This returns true if the &lt;CODE&gt;Type&lt;/CODE&gt; attribute of the
                  &lt;CODE&gt;Refernce&lt;/CODE&gt; element points to a &lt;CODE&gt;#Manifest&lt;/CODE&gt; element                
                <return>
                    true if the Reference type indicates that this Reference points to a {@link Manifest}                    
                </return>
            </javadoc>
            <method name="typeIsReferenceToManifest" type="boolean" line="241">
                <scope line="242"/>
            </method>
            <javadoc line="247">
                Method setDigestValueElement                
                <param>
                    digestValue                    
                </param>
            </javadoc>
            <method name="setDigestValueElement" type="void" line="251">
                <params>
                    <param name="digestValue" type="byte[]"/>
                </params>
                <declaration name="n" type="Node" line="252"/>
                <scope line="253"/>
                <declaration name="base64codedValue" type="String" line="257"/>
                <declaration name="t" type="Text" line="258"/>
            </method>
            <javadoc line="261">
                Method generateDigestValue                
                <throws>
                    ReferenceNotInitializedException                    
                </throws>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="generateDigestValue" type="void" line="266"/>
            <javadoc line="269">
                Returns the XMLSignatureInput which is created by de-referencing the URI attribute.                
                <return>
                    the XMLSignatureInput of the source of this reference                    
                </return>
                <throws>
                    ReferenceNotInitializedException If the resolver found any
                      problem resolving the reference                    
                </throws>
            </javadoc>
            <method name="getContentsBeforeTransformation" type="XMLSignatureInput" line="275">
                <scope line="276">
                    <declaration name="URIAttr" type="Attr" line="277"/>
                    <declaration name="URI" type="String" line="278"/>
                    <scope line="279"/>
                    <scope line="282"/>
                    <declaration name="resolver" type="ResourceResolver" line="285"/>
                    <scope line="286">
                        <declaration name="exArgs" type="Object" line="287"/>
                    </scope>
                    <declaration name="input" type="XMLSignatureInput" line="291"/>
                </scope>
                <scope line="294"/>
                <scope line="297"/>
            </method>
            <javadoc line="301">
                Returns the data which is referenced by the URI attribute. This method
                  only works works after a call to verify.                
                <return>
                    a XMLSignature with a byte array.                    
                </return>
                <throws>
                    ReferenceNotInitializedException                    
                </throws>
                <deprecated>
                    use getContentsBeforeTransformation                    
                </deprecated>
            </javadoc>
            <method name="getTransformsInput" type="XMLSignatureInput" line="308">
                <declaration name="input" type="XMLSignatureInput" line="309"/>
                <declaration name="result" type="XMLSignatureInput" line="310"/>
                <scope line="311"/>
                <scope line="314"/>
                <scope line="317"/>
            </method>
            <method name="getContentsAfterTransformation" type="XMLSignatureInput" line="323">
                <params>
                    <param name="input" type="XMLSignatureInput"/>
                    <param name="os" type="OutputStream"/>
                </params>
                <scope line="324">
                    <declaration name="transforms" type="Transforms" line="325"/>
                    <declaration name="output" type="XMLSignatureInput" line="326"/>
                    <scope line="327"/>
                    <scope line="331"/>
                </scope>
                <scope line="336"/>
                <scope line="339"/>
                <scope line="342"/>
                <scope line="345"/>
                <scope line="348"/>
            </method>
            <javadoc line="352">
                Returns the XMLSignatureInput which is the result of the Transforms.                
                <return>
                    a XMLSignatureInput with all transformations applied.                    
                </return>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="getContentsAfterTransformation" type="XMLSignatureInput" line="357">
                <declaration name="input" type="XMLSignatureInput" line="358"/>
            </method>
            <javadoc line="361">
                This method returns the XMLSignatureInput which represents the node set before
                  some kind of canonicalization is applied for the first time.                
                <return>
                    Gets a the node doing everything till the first c14n is needed                    
                </return>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="getNodesetBeforeFirstCanonicalization" type="XMLSignatureInput" line="367">
                <scope line="368">
                    <declaration name="input" type="XMLSignatureInput" line="369"/>
                    <declaration name="output" type="XMLSignatureInput" line="370"/>
                    <declaration name="transforms" type="Transforms" line="371"/>
                    <scope line="372">
                        <scope line="373">
                            <declaration name="t" type="Transform" line="374"/>
                            <declaration name="URI" type="String" line="375"/>
                            <scope line="376"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="385"/>
                <scope line="388"/>
                <scope line="391"/>
                <scope line="394"/>
                <scope line="397"/>
                <scope line="400"/>
            </method>
            <javadoc line="404">
                Method getHTMLRepresentation                
                <return>
                    The HTML of the transformation                    
                </return>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="getHTMLRepresentation" type="String" line="409">
                <scope line="410">
                    <declaration name="nodes" type="XMLSignatureInput" line="411"/>
                    <declaration name="inclusiveNamespaces" type="Set" line="412"/>
                    <scope line="413">
                        <declaration name="transforms" type="Transforms" line="414"/>
                        <declaration name="c14nTransform" type="Transform" line="415"/>
                        <scope line="416">
                            <scope line="417">
                                <declaration name="t" type="Transform" line="418"/>
                                <declaration name="URI" type="String" line="419"/>
                                <scope line="420"/>
                            </scope>
                        </scope>
                        <scope line="426">
                            <scope line="427">
                                <declaration name="in" type="InclusiveNamespaces" line="428"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="435"/>
                <scope line="438"/>
                <scope line="441"/>
            </method>
            <javadoc line="445">
                This method only works works after a call to verify.                
                <return>
                    the transformed output(i.e. what is going to be digested).                    
                </return>
            </javadoc>
            <method name="getTransformsOutput" type="XMLSignatureInput" line="449"/>
            <javadoc line="452">
                This method returns the {@link XMLSignatureInput} which is referenced by the
                  &lt;CODE&gt;URI&lt;/CODE&gt; Attribute.                
                <param>
                    os where to write the transformation can be null.                    
                </param>
                <return>
                    the element to digest                    
                </return>
                <throws>
                    XMLSignatureException                    
                </throws>
                <see>
                    Manifest#verifyReferences()                    
                </see>
            </javadoc>
            <method name="dereferenceURIandPerformTransforms" type="XMLSignatureInput" line="460">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
                <scope line="461">
                    <declaration name="input" type="XMLSignatureInput" line="462"/>
                    <declaration name="output" type="XMLSignatureInput" line="463"/>
                    <scope line="464"/>
                </scope>
                <scope line="469"/>
            </method>
            <javadoc line="473">
                Method getTransforms                
                <return>
                    The transforms that applied this reference.                    
                </return>
                <throws>
                    InvalidTransformException                    
                </throws>
                <throws>
                    TransformationException                    
                </throws>
                <throws>
                    XMLSecurityException                    
                </throws>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="getTransforms" type="Transforms" line="481"/>
            <javadoc line="484">
                Method getReferencedBytes                
                <return>
                    the bytes that will be used to generated digest.                    
                </return>
                <throws>
                    ReferenceNotInitializedException                    
                </throws>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="getReferencedBytes" type="byte[]" line="490">
                <scope line="491">
                    <declaration name="output" type="XMLSignatureInput" line="492"/>
                    <declaration name="signedBytes" type="byte[]" line="493"/>
                </scope>
                <scope line="496"/>
                <scope line="499"/>
            </method>
            <javadoc line="503">
                Method calculateDigest                
                <param>
                    validating true if validating the reference                    
                </param>
                <return>
                    reference Calculate the digest of this reference.                    
                </return>
                <throws>
                    ReferenceNotInitializedException                    
                </throws>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="calculateDigest" type="byte[]" line="510">
                <params>
                    <param name="validating" type="boolean"/>
                </params>
                <scope line="511">
                    <declaration name="mda" type="MessageDigestAlgorithm" line="512"/>
                    <declaration name="diOs" type="DigesterOutputStream" line="514"/>
                    <declaration name="os" type="OutputStream" line="515"/>
                    <declaration name="output" type="XMLSignatureInput" line="516"/>
                    <scope line="517">
                        <scope line="518"/>
                    </scope>
                    <scope line="525"/>
                </scope>
                <scope line="531"/>
                <scope line="534"/>
            </method>
            <javadoc line="538">
                Returns the digest value.                
                <return>
                    the digest value.                    
                </return>
                <throws>
                    Base64DecodingException if Reference contains no proper base64 encoded data.                    
                </throws>
                <throws>
                    XMLSecurityException if the Reference does not contain a DigestValue element                    
                </throws>
            </javadoc>
            <method name="getDigestValue" type="byte[]" line="544">
                <scope line="545">
                    <declaration name="exArgs" type="Object[]" line="546"/>
                </scope>
                <declaration name="elemDig" type="byte[]" line="549"/>
            </method>
            <javadoc line="552">
                Tests reference valdiation is success or false                
                <return>
                    true if reference valdiation is success, otherwise false                    
                </return>
                <throws>
                    ReferenceNotInitializedException                    
                </throws>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="verify" type="boolean" line="558">
                <declaration name="elemDig" type="byte[]" line="559"/>
                <declaration name="calcDig" type="byte[]" line="560"/>
                <declaration name="equal" type="boolean" line="561"/>
                <scope line="562"/>
                <scope line="567"/>
            </method>
            <javadoc line="572">
                Method getBaseLocalName                
                <inheritDoc>
                                        
                </inheritDoc>
            </javadoc>
            <method name="getBaseLocalName" type="String" line="576"/>
        </class>
    </source>