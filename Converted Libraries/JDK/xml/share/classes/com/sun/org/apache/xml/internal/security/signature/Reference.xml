<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.org.apache.xml.internal.security.signature">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Set"/>
        <import package="com.sun.org.apache.xml.internal.security.algorithms.MessageDigestAlgorithm"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.CanonicalizationException"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.InvalidCanonicalizerException"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.XMLSecurityException"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.InvalidTransformException"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.Transform"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.TransformationException"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.Transforms"/>
        <import package="com.sun.org.apache.xml.internal.security.transforms.params.InclusiveNamespaces"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.Base64"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.Constants"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.DigesterOutputStream"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.IdResolver"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.SignatureElementProxy"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.UnsyncBufferedOutputStream"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.XMLUtils"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.resolver.ResourceResolver"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.resolver.ResourceResolverException"/>
        <import package="org.w3c.dom.Attr"/>
        <import package="org.w3c.dom.Document"/>
        <import package="org.w3c.dom.Element"/>
        <import package="org.w3c.dom.Node"/>
        <import package="org.w3c.dom.Text"/>
        <class name="Reference" line="58">
            <extends class="SignatureElementProxy"/>
            <comment line="120">
                static {
                try {
                useC14N11 = Boolean.getBoolean(&quot;com.sun.org.apache.xml.internal.security.useC14N11&quot;);
                } catch (Exception e) {
                 ignore exceptions
                }
                }                
            </comment>
            <comment line="144">
                J-                
            </comment>
            <comment line="147">
                J+                
            </comment>
            <javadoc line="58">
                Handles &lt;code&gt;&amp;lt;ds:Reference&amp;gt;&lt;/code&gt; elements.
                  This includes:
                  Constuct a &lt;CODE&gt;ds:Reference&lt;/CODE&gt; from an {@link org.w3c.dom.Element}.
                  &lt;p&gt;Create a new reference&lt;/p&gt;
                  &lt;pre&gt;
                  Document _doc;
                  MessageDigestAlgorithm sha1 = MessageDigestAlgorithm.getInstance(&quot;http://#sha1&quot;);
                  Reference ref = new Reference(new XMLSignatureInput(new FileInputStream(&quot;1.gif&quot;),
                  &quot;http://localhost/1.gif&quot;,
                  (Transforms) null, sha1);
                  Element refElem = ref.toElement(_doc);
                  &lt;/pre&gt;
                  &lt;p&gt;Verify a reference&lt;/p&gt;
                  &lt;pre&gt;
                  Element refElem = _doc.getElement(&quot;Reference&quot;); // PSEUDO
                  Reference ref = new Reference(refElem);
                  String url = ref.getURI();
                  ref.setData(new XMLSignatureInput(new FileInputStream(url)));
                  if (ref.verify()) {
                  System.out.println(&quot;verified&quot;);
                  }
                  &lt;/pre&gt;
                  &lt;pre&gt;
                  &amp;lt;element name=&quot;Reference&quot; type=&quot;ds:ReferenceType&quot;/&amp;gt;
                  &amp;lt;complexType name=&quot;ReferenceType&quot;&amp;gt;
                  &amp;lt;sequence&amp;gt;
                  &amp;lt;element ref=&quot;ds:Transforms&quot; minOccurs=&quot;0&quot;/&amp;gt;
                  &amp;lt;element ref=&quot;ds:DigestMethod&quot;/&amp;gt;
                  &amp;lt;element ref=&quot;ds:DigestValue&quot;/&amp;gt;
                  &amp;lt;/sequence&amp;gt;
                  &amp;lt;attribute name=&quot;Id&quot; type=&quot;ID&quot; use=&quot;optional&quot;/&amp;gt;
                  &amp;lt;attribute name=&quot;URI&quot; type=&quot;anyURI&quot; use=&quot;optional&quot;/&amp;gt;
                  &amp;lt;attribute name=&quot;Type&quot; type=&quot;anyURI&quot; use=&quot;optional&quot;/&amp;gt;
                  &amp;lt;/complexType&amp;gt;
                  &lt;/pre&gt;                
                <author>
                    Christian Geuer-Pollmann                    
                </author>
                <see>
                    ObjectContainer                    
                </see>
                <see>
                    Manifest                    
                </see>
            </javadoc>
            <declaration name="useC14N11" type="boolean" line="106"/>
            <javadoc line="106">
                Look up useC14N11 system property. If true, an explicit C14N11 transform
                  will be added if necessary when generating the signature. See section
                  3.1.1 of http://www.w3.org/2007/xmlsec/Drafts/xmldsig-core/ for more info.                
            </javadoc>
            <anonymous_class line="112">
                <method name="run" type="Boolean" line="113"/>
            </anonymous_class>
            <declaration name="CacheSignedNodes" type="boolean" line="129"/>
            <javadoc line="129">
                Field CacheSignedNodes                
            </javadoc>
            <declaration name="log" type="java.util.logging.Logger" line="132"/>
            <javadoc line="132">
                {@link java.util.logging} logging facility                
            </javadoc>
            <declaration name="OBJECT_URI" type="String" line="136"/>
            <javadoc line="136">
                Field OBJECT_URI                
            </javadoc>
            <declaration name="MANIFEST_URI" type="String" line="140"/>
            <javadoc line="140">
                Field MANIFEST_URI                
            </javadoc>
            <declaration name="_manifest" type="Manifest" line="144"/>
            <declaration name="_transformsOutput" type="XMLSignatureInput" line="145"/>
            <declaration name="transforms" type="Transforms" line="148"/>
            <declaration name="digestMethodElem" type="Element" line="150"/>
            <declaration name="digestValueElement" type="Element" line="152"/>
            <javadoc line="154">
                Constructor Reference                
                <param>
                    doc the {@link Document} in which <code>XMLsignature</code> is placed                    
                </param>
                <param>
                    BaseURI the URI of the resource where the XML instance will be stored                    
                </param>
                <param>
                    ReferenceURI URI indicate where is data which will digested                    
                </param>
                <param>
                    manifest                    
                </param>
                <param>
                    transforms {@link Transforms} applied to data                    
                </param>
                <param>
                    messageDigestAlgorithm {@link MessageDigestAlgorithm Digest algorithm} which is applied to the data
                      TODO should we throw XMLSignatureException if MessageDigestAlgoURI is wrong?                    
                </param>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="Reference" type="constructor" line="167">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="BaseURI" type="String"/>
                    <param name="ReferenceURI" type="String"/>
                    <param name="manifest" type="Manifest"/>
                    <param name="transforms" type="Transforms"/>
                    <param name="messageDigestAlgorithm" type="String"/>
                </params>
                <comment line="179">
                    important: The ds:Reference must be added to the associated ds:Manifest
                                or ds:SignedInfo _before_ the this.resolverResult() is called.
                     this._manifest.appendChild(this._constructionElement);
                     this._manifest.appendChild(this._doc.createTextNode(&quot;\n&quot;));                    
                </comment>
                <scope line="183"/>
                <scope line="188">
                    <declaration name="mda" type="MessageDigestAlgorithm" line="189"/>
                </scope>
                <scope line="197"/>
            </method>
            <javadoc line="208">
                Build a {@link Reference} from an {@link Element}                
                <param>
                    element <code>Reference</code> element                    
                </param>
                <param>
                    BaseURI the URI of the resource where the XML instance was stored                    
                </param>
                <param>
                    manifest is the {@link Manifest} of {@link SignedInfo} in which the Reference occurs. We need this because the Manifest has the individual {@link ResourceResolver}s whcih have been set by the user                    
                </param>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="Reference" type="constructor" line="217">
                <params>
                    <param name="element" type="Element"/>
                    <param name="BaseURI" type="String"/>
                    <param name="manifest" type="Manifest"/>
                </params>
                <declaration name="el" type="Element" line="221"/>
                <scope line="223"/>
            </method>
            <javadoc line="232">
                Returns {@link MessageDigestAlgorithm}                
                <return>
                    {@link MessageDigestAlgorithm}                    
                </return>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="getMessageDigestAlgorithm" type="MessageDigestAlgorithm" line="241">
                <scope line="243"/>
                <declaration name="uri" type="String" line="247"/>
                <scope line="250"/>
            </method>
            <javadoc line="257">
                Sets the &lt;code&gt;URI&lt;/code&gt; of this &lt;code&gt;Reference&lt;/code&gt; element                
                <param>
                    URI the <code>URI</code> of this <code>Reference</code> element                    
                </param>
            </javadoc>
            <method name="setURI" type="void" line="262">
                <params>
                    <param name="URI" type="String"/>
                </params>
                <scope line="264"/>
            </method>
            <javadoc line="270">
                Returns the &lt;code&gt;URI&lt;/code&gt; of this &lt;code&gt;Reference&lt;/code&gt; element                
                <return>
                    URI the <code>URI</code> of this <code>Reference</code> element                    
                </return>
            </javadoc>
            <method name="getURI" type="String" line="275"/>
            <javadoc line="279">
                Sets the &lt;code&gt;Id&lt;/code&gt; attribute of this &lt;code&gt;Reference&lt;/code&gt; element                
                <param>
                    Id the <code>Id</code> attribute of this <code>Reference</code> element                    
                </param>
            </javadoc>
            <method name="setId" type="void" line="284">
                <params>
                    <param name="Id" type="String"/>
                </params>
                <scope line="286"/>
            </method>
            <javadoc line="292">
                Returns the &lt;code&gt;Id&lt;/code&gt; attribute of this &lt;code&gt;Reference&lt;/code&gt; element                
                <return>
                    Id the <code>Id</code> attribute of this <code>Reference</code> element                    
                </return>
            </javadoc>
            <method name="getId" type="String" line="297"/>
            <javadoc line="301">
                Sets the &lt;code&gt;type&lt;/code&gt; atttibute of the Reference indicate whether an &lt;code&gt;ds:Object&lt;/code&gt;, &lt;code&gt;ds:SignatureProperty&lt;/code&gt;, or &lt;code&gt;ds:Manifest&lt;/code&gt; element                
                <param>
                    Type the <code>type</code> attribute of the Reference                    
                </param>
            </javadoc>
            <method name="setType" type="void" line="306">
                <params>
                    <param name="Type" type="String"/>
                </params>
                <scope line="308"/>
            </method>
            <javadoc line="314">
                Return the &lt;code&gt;type&lt;/code&gt; atttibute of the Reference indicate whether an &lt;code&gt;ds:Object&lt;/code&gt;, &lt;code&gt;ds:SignatureProperty&lt;/code&gt;, or &lt;code&gt;ds:Manifest&lt;/code&gt; element                
                <return>
                    the <code>type</code> attribute of the Reference                    
                </return>
            </javadoc>
            <method name="getType" type="String" line="319"/>
            <javadoc line="324">
                Method isReferenceToObject
                  This returns true if the &lt;CODE&gt;Type&lt;/CODE&gt; attribute of the
                  &lt;CODE&gt;Refernce&lt;/CODE&gt; element points to a &lt;CODE&gt;#Object&lt;/CODE&gt; element                
                <return>
                    true if the Reference type indicates that this Reference points to an <code>Object</code>                    
                </return>
            </javadoc>
            <method name="typeIsReferenceToObject" type="boolean" line="332">
                <scope line="334"/>
            </method>
            <javadoc line="341">
                Method isReferenceToManifest
                  This returns true if the &lt;CODE&gt;Type&lt;/CODE&gt; attribute of the
                  &lt;CODE&gt;Refernce&lt;/CODE&gt; element points to a &lt;CODE&gt;#Manifest&lt;/CODE&gt; element                
                <return>
                    true if the Reference type indicates that this Reference points to a {@link Manifest}                    
                </return>
            </javadoc>
            <method name="typeIsReferenceToManifest" type="boolean" line="349">
                <scope line="351"/>
            </method>
            <javadoc line="358">
                Method setDigestValueElement                
                <param>
                    digestValue                    
                </param>
            </javadoc>
            <method name="setDigestValueElement" type="void" line="364">
                <params>
                    <param name="digestValue" type="byte[]"/>
                </params>
                <declaration name="n" type="Node" line="365"/>
                <scope line="366"/>
                <declaration name="base64codedValue" type="String" line="371"/>
                <declaration name="t" type="Text" line="372"/>
            </method>
            <javadoc line="377">
                Method generateDigestValue                
                <throws>
                    ReferenceNotInitializedException                    
                </throws>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="generateDigestValue" type="void" line="384"/>
            <javadoc line="388">
                Returns the XMLSignatureInput which is created by de-referencing the URI attribute.                
                <return>
                    the XMLSignatureInput of the source of this reference                    
                </return>
                <throws>
                    ReferenceNotInitializedException If the resolver found any
                      problem resolving the reference                    
                </throws>
            </javadoc>
            <method name="getContentsBeforeTransformation" type="XMLSignatureInput" line="395">
                <scope line="397">
                    <declaration name="URIAttr" type="Attr" line="398"/>
                    <declaration name="URI" type="String" line="400"/>
                    <scope line="402"/>
                    <scope line="404"/>
                    <declaration name="resolver" type="ResourceResolver" line="408"/>
                    <scope line="411">
                        <declaration name="exArgs" type="Object" line="412"/>
                    </scope>
                    <declaration name="input" type="XMLSignatureInput" line="420"/>
                </scope>
                <scope line="424"/>
                <scope line="426"/>
            </method>
            <javadoc line="431">
                Returns the data which is referenced by the URI attribute. This method
                  only works works after a call to verify.                
                <return>
                    a XMLSignature with a byte array.                    
                </return>
                <throws>
                    ReferenceNotInitializedException                    
                </throws>
                <deprecated>
                    use getContentsBeforeTransformation                    
                </deprecated>
            </javadoc>
            <method name="getTransformsInput" type="XMLSignatureInput" line="440">
                <declaration name="input" type="XMLSignatureInput" line="441"/>
                <declaration name="result" type="XMLSignatureInput" line="442"/>
                <scope line="443"/>
                <scope line="445"/>
                <scope line="447"/>
            </method>
            <method name="getContentsAfterTransformation" type="XMLSignatureInput" line="456">
                <params>
                    <param name="input" type="XMLSignatureInput"/>
                    <param name="os" type="OutputStream"/>
                </params>
                <comment line="465">
                    new XMLSignatureInput(output.getBytes());                    
                </comment>
                <comment line="467">
                    this._transformsOutput.setSourceURI(output.getSourceURI());                    
                </comment>
                <scope line="458">
                    <declaration name="transforms" type="Transforms" line="459"/>
                    <declaration name="output" type="XMLSignatureInput" line="460"/>
                    <scope line="462"/>
                    <scope line="467"/>
                </scope>
                <scope line="472"/>
                <scope line="474"/>
                <scope line="476"/>
                <scope line="478"/>
                <scope line="480"/>
            </method>
            <javadoc line="485">
                Returns the XMLSignatureInput which is the result of the Transforms.                
                <return>
                    a XMLSignatureInput with all transformations applied.                    
                </return>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="getContentsAfterTransformation" type="XMLSignatureInput" line="491">
                <declaration name="input" type="XMLSignatureInput" line="493"/>
            </method>
            <javadoc line="498">
                This method returns the XMLSignatureInput which represents the node set before
                  some kind of canonicalization is applied for the first time.                
                <return>
                    Gets a the node doing everything till the first c14n is needed                    
                </return>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="getNodesetBeforeFirstCanonicalization" type="XMLSignatureInput" line="506">
                <scope line="508">
                    <declaration name="input" type="XMLSignatureInput" line="509"/>
                    <declaration name="output" type="XMLSignatureInput" line="510"/>
                    <declaration name="transforms" type="Transforms" line="511"/>
                    <scope line="513">
                        <scope line="514">
                            <declaration name="t" type="Transform" line="515"/>
                            <declaration name="URI" type="String" line="516"/>
                            <scope line="525"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="536"/>
                <scope line="538"/>
                <scope line="540"/>
                <scope line="542"/>
                <scope line="544"/>
                <scope line="546"/>
            </method>
            <javadoc line="551">
                Method getHTMLRepresentation                
                <return>
                    The HTML of the transformation                    
                </return>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="getHTMLRepresentation" type="String" line="556">
                <comment line="589">
                    there is one InclusiveNamespaces element                    
                </comment>
                <scope line="558">
                    <declaration name="nodes" type="XMLSignatureInput" line="559"/>
                    <declaration name="inclusiveNamespaces" type="Set" line="560"/>
                    <scope line="562">
                        <declaration name="transforms" type="Transforms" line="563"/>
                        <declaration name="c14nTransform" type="Transform" line="564"/>
                        <scope line="566">
                            <scope line="567">
                                <declaration name="t" type="Transform" line="568"/>
                                <declaration name="URI" type="String" line="569"/>
                                <scope line="573"/>
                            </scope>
                        </scope>
                        <scope line="581">
                            <scope line="586">
                                <declaration name="in" type="InclusiveNamespaces" line="589"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="602"/>
                <scope line="604"/>
                <scope line="606"/>
            </method>
            <javadoc line="611">
                This method only works works after a call to verify.                
                <return>
                    the transformed output(i.e. what is going to be digested).                    
                </return>
            </javadoc>
            <method name="getTransformsOutput" type="XMLSignatureInput" line="615"/>
            <javadoc line="619">
                This method returns the {@link XMLSignatureInput} which is referenced by the
                  &lt;CODE&gt;URI&lt;/CODE&gt; Attribute.                
                <param>
                    os where to write the transformation can be null.                    
                </param>
                <return>
                    the element to digest                    
                </return>
                <throws>
                    XMLSignatureException                    
                </throws>
                <see>
                    Manifest#verifyReferences()                    
                </see>
            </javadoc>
            <method name="dereferenceURIandPerformTransforms" type="XMLSignatureInput" line="629">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
                <comment line="636">
                    at this stage, this._transformsInput and this._transformsOutput
                     contain a huge amount of nodes. When we do not cache these nodes
                     but only preserve the octets, the memory footprint is dramatically
                     reduced.                    
                </comment>
                <comment line="643">
                    new XMLSignatureInput(output.getBytes());                    
                </comment>
                <comment line="645">
                    this._transformsOutput.setSourceURI(output.getSourceURI());                    
                </comment>
                <scope line="631">
                    <declaration name="input" type="XMLSignatureInput" line="632"/>
                    <declaration name="output" type="XMLSignatureInput" line="633"/>
                    <scope line="640"/>
                </scope>
                <scope line="647"/>
            </method>
            <javadoc line="652">
                Method getTransforms                
                <return>
                    The transforms that applied this reference.                    
                </return>
                <throws>
                    InvalidTransformException                    
                </throws>
                <throws>
                    TransformationException                    
                </throws>
                <throws>
                    XMLSecurityException                    
                </throws>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="getTransforms" type="Transforms" line="663"/>
            <javadoc line="668">
                Method getReferencedBytes                
                <return>
                    the bytes that will be used to generated digest.                    
                </return>
                <throws>
                    ReferenceNotInitializedException                    
                </throws>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="getReferencedBytes" type="byte[]" line="676">
                <scope line="677">
                    <declaration name="output" type="XMLSignatureInput" line="678"/>
                    <declaration name="signedBytes" type="byte[]" line="680"/>
                </scope>
                <scope line="683"/>
                <scope line="685"/>
            </method>
            <javadoc line="692">
                Method calculateDigest                
                <param>
                    validating true if validating the reference                    
                </param>
                <return>
                    reference Calculate the digest of this reference.                    
                </return>
                <throws>
                    ReferenceNotInitializedException                    
                </throws>
                <throws>
                    XMLSignatureException                    
                </throws>
            </javadoc>
            <method name="calculateDigest" type="byte[]" line="701">
                <params>
                    <param name="validating" type="boolean"/>
                </params>
                <comment line="712">
                    if signing and c14n11 property == true explicitly add
                     C14N11 transform if needed                    
                </comment>
                <comment line="727">
                    this.getReferencedBytes(diOs);
                    mda.update(data);                    
                </comment>
                <scope line="703">
                    <declaration name="mda" type="MessageDigestAlgorithm" line="705"/>
                    <declaration name="diOs" type="DigesterOutputStream" line="708"/>
                    <declaration name="os" type="OutputStream" line="709"/>
                    <declaration name="output" type="XMLSignatureInput" line="710"/>
                    <scope line="714">
                        <scope line="715"/>
                    </scope>
                    <scope line="722"/>
                </scope>
                <scope line="730"/>
                <scope line="732"/>
            </method>
            <javadoc line="737">
                Returns the digest value.                
                <return>
                    the digest value.                    
                </return>
                <throws>
                    Base64DecodingException if Reference contains no proper base64 encoded data.                    
                </throws>
                <throws>
                    XMLSecurityException if the Reference does not contain a DigestValue element                    
                </throws>
            </javadoc>
            <method name="getDigestValue" type="byte[]" line="744">
                <comment line="747">
                    The required element is not in the XML!                    
                </comment>
                <scope line="745">
                    <declaration name="exArgs" type="Object[]" line="747"/>
                </scope>
                <declaration name="elemDig" type="byte[]" line="753"/>
            </method>
            <javadoc line="758">
                Tests reference valdiation is success or false                
                <return>
                    true if reference valdiation is success, otherwise false                    
                </return>
                <throws>
                    ReferenceNotInitializedException                    
                </throws>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="verify" type="boolean" line="766">
                <declaration name="elemDig" type="byte[]" line="768"/>
                <declaration name="calcDig" type="byte[]" line="769"/>
                <declaration name="equal" type="boolean" line="770"/>
                <scope line="772"/>
                <scope line="776"/>
            </method>
            <javadoc line="783">
                Method getBaseLocalName                
                <inheritDoc>
                                        
                </inheritDoc>
            </javadoc>
            <method name="getBaseLocalName" type="String" line="788"/>
        </class>
    </source>