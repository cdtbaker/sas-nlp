<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.org.apache.xml.internal.security.transforms">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.HashMap"/>
        <import package="javax.xml.parsers.ParserConfigurationException"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.CanonicalizationException"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.InvalidCanonicalizerException"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.AlgorithmAlreadyRegisteredException"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.XMLSecurityException"/>
        <import package="com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.Constants"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.HelperNodeList"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.SignatureElementProxy"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.XMLUtils"/>
        <import package="org.w3c.dom.Document"/>
        <import package="org.w3c.dom.Element"/>
        <import package="org.w3c.dom.NodeList"/>
        <import package="org.xml.sax.SAXException"/>
        <class name="Transform" line="44">
            <extends class="SignatureElementProxy"/>
            <javadoc line="44">
                Implements the behaviour of the &lt;code&gt;ds:Transform&lt;/code&gt; element.
                  This &lt;code&gt;Transform&lt;/code&gt;(Factory) class acts as the Factory and Proxy of
                  the implementing class that supports the functionality of &lt;a
                  href=http://www.w3.org/TR/xmldsig-core/#sec-TransformAlg&gt;a Transform
                  algorithm&lt;/a&gt;.
                  Implements the Factory and Proxy pattern for ds:Transform algorithms.                
                <author>
                    Christian Geuer-Pollmann                    
                </author>
                <see>
                    Transforms                    
                </see>
                <see>
                    TransformSpi                    
                </see>
            </javadoc>
            <declaration name="log" type="java.util.logging.Logger" line="60"/>
            <javadoc line="60">
                {@link java.util.logging} logging facility                
            </javadoc>
            <declaration name="alreadyInitialized" type="boolean" line="64"/>
            <javadoc line="64">
                Field _alreadyInitialized                
            </javadoc>
            <declaration name="transformClassHash" type="HashMap" line="67"/>
            <javadoc line="67">
                All available Transform classes are registered here                
            </javadoc>
            <declaration name="transformSpiHash" type="HashMap" line="70"/>
            <declaration name="transformSpi" type="TransformSpi" line="72"/>
            <javadoc line="74">
                Constructs {@link Transform}                
                <param>
                    doc the {@link Document} in which &lt;code&gt;Transform&lt;/code&gt; will be
                      placed                    
                </param>
                <param>
                    algorithmURI URI representation of
                      &lt;code&gt;Transform algorithm&lt;/code&gt; which will be specified as parameter of{@link #getInstance(Document,String)}, when generated. &lt;/br&gt;                    
                </param>
                <param>
                    contextNodes the child node list of &lt;code&gt;Transform&lt;/code&gt; element                    
                </param>
                <throws>
                    InvalidTransformException                    
                </throws>
            </javadoc>
            <method name="Transform" type="constructor" line="86">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="algorithmURI" type="String"/>
                    <param name="contextNodes" type="NodeList"/>
                </params>
                <comment line="107">
                    give it to the current document                    
                </comment>
                <scope line="94">
                    <declaration name="exArgs" type="Object" line="95"/>
                </scope>
                <scope line="100"/>
                <scope line="107">
                    <scope line="108"/>
                </scope>
            </method>
            <javadoc line="115">
                This constructor can only be called from the {@link Transforms} object,
                  so it&apos;s protected.                
                <param>
                    element &lt;code&gt;ds:Transform&lt;/code&gt; element                    
                </param>
                <param>
                    BaseURI the URI of the resource where the XML instance was stored                    
                </param>
                <throws>
                    InvalidTransformException                    
                </throws>
                <throws>
                    TransformationException                    
                </throws>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="Transform" type="constructor" line="127">
                <params>
                    <param name="element" type="Element"/>
                    <param name="BaseURI" type="String"/>
                </params>
                <comment line="132">
                    retrieve Algorithm Attribute from ds:Transform                    
                </comment>
                <declaration name="algorithmURI" type="String" line="132"/>
                <scope line="134">
                    <declaration name="exArgs" type="Object" line="135"/>
                </scope>
                <scope line="141">
                    <declaration name="exArgs" type="Object" line="142"/>
                </scope>
            </method>
            <javadoc line="148">
                Generates a Transform object that implements the specified
                  &lt;code&gt;Transform algorithm&lt;/code&gt; URI.                
                <param>
                    algorithmURI &lt;code&gt;Transform algorithm&lt;/code&gt; URI representation,
                      such as specified in
                      &lt;a href=http://www.w3.org/TR/xmldsig-core/#sec-TransformAlg&gt;Transform algorithm &lt;/a&gt;                    
                </param>
                <param>
                    doc the proxy {@link Document}                    
                </param>
                <return>
                    &lt;code&gt;{@link Transform}&lt;/code&gt; object                    
                </return>
                <throws>
                    InvalidTransformException                    
                </throws>
            </javadoc>
            <method name="getInstance" type="Transform" line="160">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="algorithmURI" type="String"/>
                </params>
            </method>
            <javadoc line="164">
                Generates a Transform object that implements the specified
                  &lt;code&gt;Transform algorithm&lt;/code&gt; URI.                
                <param>
                    algorithmURI &lt;code&gt;Transform algorithm&lt;/code&gt; URI representation,
                      such as specified in
                      &lt;a href=http://www.w3.org/TR/xmldsig-core/#sec-TransformAlg&gt;Transform algorithm &lt;/a&gt;                    
                </param>
                <param>
                    contextChild the child element of &lt;code&gt;Transform&lt;/code&gt; element                    
                </param>
                <param>
                    doc the proxy {@link Document}                    
                </param>
                <return>
                    &lt;code&gt;{@link Transform}&lt;/code&gt; object                    
                </return>
                <throws>
                    InvalidTransformException                    
                </throws>
            </javadoc>
            <method name="getInstance" type="Transform" line="178">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="algorithmURI" type="String"/>
                    <param name="contextChild" type="Element"/>
                </params>
                <declaration name="contextNodes" type="HelperNodeList" line="180"/>
            </method>
            <javadoc line="189">
                Generates a Transform object that implements the specified
                  &lt;code&gt;Transform algorithm&lt;/code&gt; URI.                
                <param>
                    algorithmURI &lt;code&gt;Transform algorithm&lt;/code&gt; URI form, such as
                      specified in &lt;a href=http://www.w3.org/TR/xmldsig-core/#sec-TransformAlg&gt;
                      Transform algorithm &lt;/a&gt;                    
                </param>
                <param>
                    contextNodes the child node list of &lt;code&gt;Transform&lt;/code&gt; element                    
                </param>
                <param>
                    doc the proxy {@link Document}                    
                </param>
                <return>
                    &lt;code&gt;{@link Transform}&lt;/code&gt; object                    
                </return>
                <throws>
                    InvalidTransformException                    
                </throws>
            </javadoc>
            <method name="getInstance" type="Transform" line="203">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="algorithmURI" type="String"/>
                    <param name="contextNodes" type="NodeList"/>
                </params>
            </method>
            <javadoc line="207">
                Initalizes for this {@link Transform}.                
            </javadoc>
            <method name="init" type="void" line="210">
                <comment line="214">
                    make sure builtin algorithms are all registered first                    
                </comment>
                <scope line="211"/>
            </method>
            <javadoc line="219">
                Registers implementing class of the Transform algorithm with algorithmURI                
                <param>
                    algorithmURI algorithmURI URI representation of
                      &lt;code&gt;Transform algorithm&lt;/code&gt; will be specified as parameter of{@link #getInstance(Document,String)}, when generate. &lt;/br&gt;                    
                </param>
                <param>
                    implementingClass &lt;code&gt;implementingClass&lt;/code&gt; the implementing
                      class of {@link TransformSpi}                    
                </param>
                <throws>
                    AlgorithmAlreadyRegisteredException if specified algorithmURI
                      is already registered                    
                </throws>
            </javadoc>
            <method name="register" type="void" line="231">
                <params>
                    <param name="algorithmURI" type="String"/>
                    <param name="implementingClass" type="String"/>
                </params>
                <comment line="234">
                    are we already registered?                    
                </comment>
                <declaration name="registeredClass" type="Class" line="234"/>
                <scope line="235">
                    <declaration name="exArgs" type="Object" line="236"/>
                </scope>
                <declaration name="cl" type="ClassLoader" line="241"/>
                <scope line="243"/>
                <scope line="246"/>
            </method>
            <javadoc line="251">
                Returns the URI representation of Transformation algorithm                
                <return>
                    the URI representation of Transformation algorithm                    
                </return>
            </javadoc>
            <method name="getURI" type="String" line="256"/>
            <javadoc line="261">
                Transforms the input, and generates {@link XMLSignatureInput} as output.                
                <param>
                    input input {@link XMLSignatureInput} which can supplied Octet
                      Stream and NodeSet as Input of Transformation                    
                </param>
                <return>
                    the {@link XMLSignatureInput} class as the result of
                      transformation                    
                </return>
                <throws>
                    CanonicalizationException                    
                </throws>
                <throws>
                    IOException                    
                </throws>
                <throws>
                    InvalidCanonicalizerException                    
                </throws>
                <throws>
                    TransformationException                    
                </throws>
            </javadoc>
            <method name="performTransform" type="XMLSignatureInput" line="275">
                <params>
                    <param name="input" type="XMLSignatureInput"/>
                </params>
                <declaration name="result" type="XMLSignatureInput" line="277"/>
                <scope line="279"/>
                <scope line="281">
                    <declaration name="exArgs" type="Object" line="282"/>
                </scope>
                <scope line="285">
                    <declaration name="exArgs" type="Object" line="286"/>
                </scope>
            </method>
            <javadoc line="294">
                Transforms the input, and generates {@link XMLSignatureInput} as output.                
                <param>
                    input input {@link XMLSignatureInput} which can supplied Octet
                      Stream and NodeSet as Input of Transformation                    
                </param>
                <param>
                    os where to output the result of the last transformation                    
                </param>
                <return>
                    the {@link XMLSignatureInput} class as the result of
                      transformation                    
                </return>
                <throws>
                    CanonicalizationException                    
                </throws>
                <throws>
                    IOException                    
                </throws>
                <throws>
                    InvalidCanonicalizerException                    
                </throws>
                <throws>
                    TransformationException                    
                </throws>
            </javadoc>
            <method name="performTransform" type="XMLSignatureInput" line="309">
                <params>
                    <param name="input" type="XMLSignatureInput"/>
                    <param name="os" type="OutputStream"/>
                </params>
                <declaration name="result" type="XMLSignatureInput" line="311"/>
                <scope line="313"/>
                <scope line="315">
                    <declaration name="exArgs" type="Object" line="316"/>
                </scope>
                <scope line="319">
                    <declaration name="exArgs" type="Object" line="320"/>
                </scope>
            </method>
            <javadoc line="328">
                Method getImplementingClass                
                <param>
                    URI                    
                </param>
                <return>
                    The name of the class implementing the URI.                    
                </return>
            </javadoc>
            <method name="getImplementingClass" type="Class" line="334">
                <params>
                    <param name="URI" type="String"/>
                </params>
            </method>
            <method name="getTransformSpi" type="TransformSpi" line="339">
                <params>
                    <param name="URI" type="String"/>
                </params>
                <scope line="340">
                    <declaration name="value" type="Object" line="341"/>
                    <scope line="342"/>
                    <declaration name="cl" type="Class" line="345"/>
                    <scope line="346">
                        <declaration name="tr" type="TransformSpi" line="347"/>
                    </scope>
                </scope>
                <scope line="351">
                    <declaration name="exArgs" type="Object" line="352"/>
                </scope>
                <scope line="355">
                    <declaration name="exArgs" type="Object" line="356"/>
                </scope>
            </method>
            <javadoc line="363">
                @inheritDoc                
            </javadoc>
            <method name="getBaseLocalName" type="String" line="364"/>
        </class>
    </source>