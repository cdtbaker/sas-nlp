<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.org.apache.xml.internal.security.transforms">
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.HashMap"/>
        <import package="javax.xml.parsers.ParserConfigurationException"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.CanonicalizationException"/>
        <import package="com.sun.org.apache.xml.internal.security.c14n.InvalidCanonicalizerException"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.AlgorithmAlreadyRegisteredException"/>
        <import package="com.sun.org.apache.xml.internal.security.exceptions.XMLSecurityException"/>
        <import package="com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.Constants"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.HelperNodeList"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.SignatureElementProxy"/>
        <import package="com.sun.org.apache.xml.internal.security.utils.XMLUtils"/>
        <import package="org.w3c.dom.Document"/>
        <import package="org.w3c.dom.Element"/>
        <import package="org.w3c.dom.NodeList"/>
        <import package="org.xml.sax.SAXException"/>
        <class name="Transform" line="21">
            <extends class="SignatureElementProxy"/>
            <javadoc line="21">
                Implements the behaviour of the &lt;code&gt;ds:Transform&lt;/code&gt; element.
                  This &lt;code&gt;Transform&lt;/code&gt;(Factory) class acts as the Factory and Proxy of
                  the implementing class that supports the functionality of &lt;a
                  href=http://www.w3.org/TR/xmldsig-core/#sec-TransformAlg&gt;a Transform
                  algorithm&lt;/a&gt;.
                  Implements the Factory and Proxy pattern for ds:Transform algorithms.                
                <author>
                    Christian Geuer-Pollmann                    
                </author>
                <see>
                    Transforms                    
                </see>
                <see>
                    TransformSpi                    
                </see>
            </javadoc>
            <declaration name="log" type="java.util.logging.Logger" line="33"/>
            <javadoc line="33">
                {@link java.util.logging} logging facility                
            </javadoc>
            <declaration name="alreadyInitialized" type="boolean" line="37"/>
            <javadoc line="37">
                Field _alreadyInitialized                
            </javadoc>
            <declaration name="transformClassHash" type="HashMap" line="41"/>
            <javadoc line="41">
                All available Transform classes are registered here                
            </javadoc>
            <declaration name="transformSpiHash" type="HashMap" line="45"/>
            <declaration name="transformSpi" type="TransformSpi" line="46"/>
            <javadoc line="47">
                Constructs {@link Transform}                
                <param>
                    doc the {@link Document} in which <code>Transform</code> will be
                      placed                    
                </param>
                <param>
                    algorithmURI URI representation of
                      <code>Transform algorithm</code> which will be specified as parameter of{@link #getInstance(Document,String)}, when generated. </br>                    
                </param>
                <param>
                    contextNodes the child node list of <code>Transform</code> element                    
                </param>
                <throws>
                    InvalidTransformException                    
                </throws>
            </javadoc>
            <method name="Transform" type="constructor" line="56">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="algorithmURI" type="String"/>
                    <param name="contextNodes" type="NodeList"/>
                </params>
                <scope line="60">
                    <declaration name="exArgs" type="Object" line="61"/>
                </scope>
                <scope line="64"/>
                <scope line="68">
                    <scope line="69"/>
                </scope>
            </method>
            <javadoc line="74">
                This constructor can only be called from the {@link Transforms} object,
                  so it&apos;s protected.                
                <param>
                    element <code>ds:Transform</code> element                    
                </param>
                <param>
                    BaseURI the URI of the resource where the XML instance was stored                    
                </param>
                <throws>
                    InvalidTransformException                    
                </throws>
                <throws>
                    TransformationException                    
                </throws>
                <throws>
                    XMLSecurityException                    
                </throws>
            </javadoc>
            <method name="Transform" type="constructor" line="83">
                <params>
                    <param name="element" type="Element"/>
                    <param name="BaseURI" type="String"/>
                </params>
                <declaration name="algorithmURI" type="String" line="85"/>
                <scope line="86">
                    <declaration name="exArgs" type="Object" line="87"/>
                </scope>
                <scope line="91">
                    <declaration name="exArgs" type="Object" line="92"/>
                </scope>
            </method>
            <javadoc line="96">
                Generates a Transform object that implements the specified
                  &lt;code&gt;Transform algorithm&lt;/code&gt; URI.                
                <param>
                    algorithmURI <code>Transform algorithm</code> URI representation,
                      such as specified in
                      <a href=http://www.w3.org/TR/xmldsig-core/#sec-TransformAlg>Transform algorithm </a>                    
                </param>
                <param>
                    doc the proxy {@link Document}                    
                </param>
                <return>
                    <code>{@link Transform}</code> object                    
                </return>
                <throws>
                    InvalidTransformException                    
                </throws>
            </javadoc>
            <method name="getInstance" type="Transform" line="106">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="algorithmURI" type="String"/>
                </params>
            </method>
            <javadoc line="109">
                Generates a Transform object that implements the specified
                  &lt;code&gt;Transform algorithm&lt;/code&gt; URI.                
                <param>
                    algorithmURI <code>Transform algorithm</code> URI representation,
                      such as specified in
                      <a href=http://www.w3.org/TR/xmldsig-core/#sec-TransformAlg>Transform algorithm </a>                    
                </param>
                <param>
                    contextChild the child element of <code>Transform</code> element                    
                </param>
                <param>
                    doc the proxy {@link Document}                    
                </param>
                <return>
                    <code>{@link Transform}</code> object                    
                </return>
                <throws>
                    InvalidTransformException                    
                </throws>
            </javadoc>
            <method name="getInstance" type="Transform" line="120">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="algorithmURI" type="String"/>
                    <param name="contextChild" type="Element"/>
                </params>
                <declaration name="contextNodes" type="HelperNodeList" line="121"/>
            </method>
            <javadoc line="127">
                Generates a Transform object that implements the specified
                  &lt;code&gt;Transform algorithm&lt;/code&gt; URI.                
                <param>
                    algorithmURI <code>Transform algorithm</code> URI form, such as
                      specified in <a href=http://www.w3.org/TR/xmldsig-core/#sec-TransformAlg>
                      Transform algorithm </a>                    
                </param>
                <param>
                    contextNodes the child node list of <code>Transform</code> element                    
                </param>
                <param>
                    doc the proxy {@link Document}                    
                </param>
                <return>
                    <code>{@link Transform}</code> object                    
                </return>
                <throws>
                    InvalidTransformException                    
                </throws>
            </javadoc>
            <method name="getInstance" type="Transform" line="138">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="algorithmURI" type="String"/>
                    <param name="contextNodes" type="NodeList"/>
                </params>
            </method>
            <javadoc line="141">
                Initalizes for this {@link Transform}.                
            </javadoc>
            <method name="init" type="void" line="144">
                <scope line="145"/>
            </method>
            <javadoc line="151">
                Registers implementing class of the Transform algorithm with algorithmURI                
                <param>
                    algorithmURI algorithmURI URI representation of
                      <code>Transform algorithm</code> will be specified as parameter of{@link #getInstance(Document,String)}, when generate. </br>                    
                </param>
                <param>
                    implementingClass <code>implementingClass</code> the implementing
                      class of {@link TransformSpi}                    
                </param>
                <throws>
                    AlgorithmAlreadyRegisteredException if specified algorithmURI
                      is already registered                    
                </throws>
            </javadoc>
            <method name="register" type="void" line="160">
                <params>
                    <param name="algorithmURI" type="String"/>
                    <param name="implementingClass" type="String"/>
                </params>
                <declaration name="registeredClass" type="Class" line="161"/>
                <scope line="162">
                    <declaration name="exArgs" type="Object" line="163"/>
                </scope>
                <declaration name="cl" type="ClassLoader" line="166"/>
                <scope line="167"/>
                <scope line="170"/>
            </method>
            <javadoc line="174">
                Returns the URI representation of Transformation algorithm                
                <return>
                    the URI representation of Transformation algorithm                    
                </return>
            </javadoc>
            <method name="getURI" type="String" line="178"/>
            <javadoc line="181">
                Transforms the input, and generates {@link XMLSignatureInput} as output.                
                <param>
                    input input {@link XMLSignatureInput} which can supplied Octet
                      Stream and NodeSet as Input of Transformation                    
                </param>
                <return>
                    the {@link XMLSignatureInput} class as the result of
                      transformation                    
                </return>
                <throws>
                    CanonicalizationException                    
                </throws>
                <throws>
                    IOException                    
                </throws>
                <throws>
                    InvalidCanonicalizerException                    
                </throws>
                <throws>
                    TransformationException                    
                </throws>
            </javadoc>
            <method name="performTransform" type="XMLSignatureInput" line="192">
                <params>
                    <param name="input" type="XMLSignatureInput"/>
                </params>
                <declaration name="result" type="XMLSignatureInput" line="193"/>
                <scope line="194"/>
                <scope line="197">
                    <declaration name="exArgs" type="Object" line="198"/>
                </scope>
                <scope line="201">
                    <declaration name="exArgs" type="Object" line="202"/>
                </scope>
            </method>
            <javadoc line="207">
                Transforms the input, and generates {@link XMLSignatureInput} as output.                
                <param>
                    input input {@link XMLSignatureInput} which can supplied Octet
                      Stream and NodeSet as Input of Transformation                    
                </param>
                <param>
                    os where to output the result of the last transformation                    
                </param>
                <return>
                    the {@link XMLSignatureInput} class as the result of
                      transformation                    
                </return>
                <throws>
                    CanonicalizationException                    
                </throws>
                <throws>
                    IOException                    
                </throws>
                <throws>
                    InvalidCanonicalizerException                    
                </throws>
                <throws>
                    TransformationException                    
                </throws>
            </javadoc>
            <method name="performTransform" type="XMLSignatureInput" line="219">
                <params>
                    <param name="input" type="XMLSignatureInput"/>
                    <param name="os" type="OutputStream"/>
                </params>
                <declaration name="result" type="XMLSignatureInput" line="220"/>
                <scope line="221"/>
                <scope line="224">
                    <declaration name="exArgs" type="Object" line="225"/>
                </scope>
                <scope line="228">
                    <declaration name="exArgs" type="Object" line="229"/>
                </scope>
            </method>
            <javadoc line="234">
                Method getImplementingClass                
                <param>
                    URI                    
                </param>
                <return>
                    The name of the class implementing the URI.                    
                </return>
            </javadoc>
            <method name="getImplementingClass" type="Class" line="239">
                <params>
                    <param name="URI" type="String"/>
                </params>
            </method>
            <method name="getTransformSpi" type="TransformSpi" line="242">
                <params>
                    <param name="URI" type="String"/>
                </params>
                <scope line="243">
                    <declaration name="value" type="Object" line="244"/>
                    <scope line="245"/>
                    <declaration name="cl" type="Class" line="248"/>
                    <scope line="249">
                        <declaration name="tr" type="TransformSpi" line="250"/>
                    </scope>
                </scope>
                <scope line="255">
                    <declaration name="exArgs" type="Object" line="256"/>
                </scope>
                <scope line="259">
                    <declaration name="exArgs" type="Object" line="260"/>
                </scope>
            </method>
            <javadoc line="265">
                @inheritDoc                
            </javadoc>
            <method name="getBaseLocalName" type="String" line="268"/>
        </class>
    </source>