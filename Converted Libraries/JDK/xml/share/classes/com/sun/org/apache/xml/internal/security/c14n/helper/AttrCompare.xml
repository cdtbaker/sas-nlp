<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.org.apache.xml.internal.security.c14n.helper">
        <import package="com.sun.org.apache.xml.internal.security.utils.Constants"/>
        <import package="org.w3c.dom.Attr"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.Comparator"/>
        <class name="AttrCompare" line="28">
            <implements interface="Comparator"/>
            <implements interface="Serializable"/>
            <javadoc line="28">
                Compares two attributes based on the C14n specification.
                  &lt;UL&gt;
                  &lt;LI&gt;Namespace nodes have a lesser document order position than attribute
                  nodes.
                  &lt;LI&gt; An element&apos;s namespace nodes are sorted lexicographically by
                  local name (the default namespace node, if one exists, has no
                  local name and is therefore lexicographically least).
                  &lt;LI&gt; An element&apos;s attribute nodes are sorted lexicographically with
                  namespace URI as the primary key and local name as the secondary
                  key (an empty namespace URI is lexicographically least).
                  &lt;/UL&gt;                
                <author>
                    Christian Geuer-Pollmann                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="46"/>
            <declaration name="ATTR0_BEFORE_ATTR1" type="int" line="47"/>
            <declaration name="ATTR1_BEFORE_ATTR0" type="int" line="48"/>
            <declaration name="XMLNS" type="String" line="49"/>
            <javadoc line="51">
                Compares two attributes based on the C14n specification.
                  &lt;UL&gt;
                  &lt;LI&gt;Namespace nodes have a lesser document order position than
                  attribute nodes.
                  &lt;LI&gt; An element&apos;s namespace nodes are sorted lexicographically by
                  local name (the default namespace node, if one exists, has no
                  local name and is therefore lexicographically least).
                  &lt;LI&gt; An element&apos;s attribute nodes are sorted lexicographically with
                  namespace URI as the primary key and local name as the secondary
                  key (an empty namespace URI is lexicographically least).
                  &lt;/UL&gt;                
                <param>
                    obj0 casted Attr                    
                </param>
                <param>
                    obj1 casted Attr                    
                </param>
                <return>
                    returns a negative integer, zero, or a positive integer as
                      obj0 is less than, equal to, or greater than obj1                    
                </return>
            </javadoc>
            <method name="compare" type="int" line="71">
                <params>
                    <param name="obj0" type="Object"/>
                    <param name="obj1" type="Object"/>
                </params>
                <comment line="84">
                    both are namespaces                    
                </comment>
                <comment line="98">
                    attr0 is a namespace, attr1 is not                    
                </comment>
                <comment line="103">
                    attr1 is a namespace, attr0 is not                    
                </comment>
                <comment line="107">
                    none is a namespace                    
                </comment>
                <declaration name="attr0" type="Attr" line="73"/>
                <declaration name="attr1" type="Attr" line="74"/>
                <declaration name="namespaceURI0" type="String" line="75"/>
                <declaration name="namespaceURI1" type="String" line="76"/>
                <declaration name="isNamespaceAttr0" type="boolean" line="78"/>
                <declaration name="isNamespaceAttr1" type="boolean" line="79"/>
                <scope line="81">
                    <scope line="82">
                        <declaration name="localname0" type="String" line="84"/>
                        <declaration name="localname1" type="String" line="85"/>
                        <scope line="87"/>
                        <scope line="91"/>
                    </scope>
                </scope>
                <scope line="101"/>
                <scope line="107">
                    <scope line="108">
                        <declaration name="name0" type="String" line="109"/>
                        <declaration name="name1" type="String" line="110"/>
                    </scope>
                </scope>
                <scope line="116"/>
                <declaration name="a" type="int" line="120"/>
                <scope line="121"/>
            </method>
        </class>
    </source>