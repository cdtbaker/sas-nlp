<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.util.Arrays"/>
        <import package="javax.sound.midi.Patch"/>
        <class name="SoftTuning" line="32">
            <comment line="78">
                private boolean checksumOK2(byte[] data) {
                int x = data[1] &amp; 0xFF;  7E
                x = x ^ (data[2] &amp; 0xFF);  &lt;device ID&gt;
                x = x ^ (data[4] &amp; 0xFF);  nn
                x = x ^ (data[5] &amp; 0xFF);  tt
                for (int i = 22; i &lt; data.length - 2; i++)
                x = x ^ (data[i] &amp; 0xFF);
                return (data[data.length - 2] &amp; 0xFF) == (x &amp; 127);
                }                
            </comment>
            <comment line="239">
                am: getTuning(int) is more effective.                
            </comment>
            <comment line="240">
                currently getTuning() is used only by tests                
            </comment>
            <javadoc line="32">
                A tuning program container, for use with MIDI Tuning.
                  See: http://www.midi.org                
                <author>
                    Karl Helgason                    
                </author>
            </javadoc>
            <declaration name="name" type="String" line="40"/>
            <declaration name="tuning" type="double[]" line="41"/>
            <declaration name="patch" type="Patch" line="42"/>
            <method name="SoftTuning" type="constructor" line="44"/>
            <method name="SoftTuning" type="constructor" line="50">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="SoftTuning" type="constructor" line="56">
                <params>
                    <param name="patch" type="Patch"/>
                </params>
            </method>
            <method name="SoftTuning" type="constructor" line="63">
                <params>
                    <param name="patch" type="Patch"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="checksumOK" type="boolean" line="70">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <declaration name="x" type="int" line="71"/>
            </method>
            <method name="load" type="void" line="88">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <comment line="89">
                    Universal Non-Real-Time / Real-Time SysEx                    
                </comment>
                <comment line="93">
                    MIDI Tuning Standard                    
                </comment>
                <comment line="96">
                    BULK TUNING DUMP (NON-REAL-TIME)                    
                </comment>
                <comment line="98">
                    http://www.midi.org/about-midi/tuning.shtml                    
                </comment>
                <comment line="99">
                    if (!checksumOK2(data))                    
                </comment>
                <comment line="100">
                    break;                    
                </comment>
                <comment line="117">
                    SINGLE NOTE TUNING CHANGE (REAL-TIME)                    
                </comment>
                <comment line="119">
                    http://www.midi.org/about-midi/tuning.shtml                    
                </comment>
                <comment line="132">
                    KEY-BASED TUNING DUMP (NON-REAL-TIME)                    
                </comment>
                <comment line="134">
                    http://www.midi.org/about-midi/tuning_extens.shtml                    
                </comment>
                <comment line="152">
                    SCALE/OCTAVE TUNING DUMP, 1 byte format                    
                </comment>
                <comment line="153">
                    (NON-REAL-TIME)                    
                </comment>
                <comment line="155">
                    http://www.midi.org/about-midi/tuning_extens.shtml                    
                </comment>
                <comment line="170">
                    SCALE/OCTAVE TUNING DUMP, 2 byte format                    
                </comment>
                <comment line="171">
                    (NON-REAL-TIME)                    
                </comment>
                <comment line="173">
                    http://www.midi.org/about-midi/tuning_extens.shtml                    
                </comment>
                <comment line="191">
                    SINGLE NOTE TUNING CHANGE (NON                    
                </comment>
                <comment line="192">
                    REAL-TIME/REAL-TIME) (BANK)                    
                </comment>
                <comment line="193">
                    http://www.midi.org/about-midi/tuning_extens.shtml                    
                </comment>
                <comment line="206">
                    scale/octave tuning 1-byte form (Non                    
                </comment>
                <comment line="207">
                    Real-Time/REAL-TIME)                    
                </comment>
                <comment line="209">
                    http://www.midi.org/about-midi/tuning-scale.shtml                    
                </comment>
                <comment line="217">
                    scale/octave tuning 2-byte form (Non                    
                </comment>
                <comment line="218">
                    Real-Time/REAL-TIME)                    
                </comment>
                <comment line="220">
                    http://www.midi.org/about-midi/tuning-scale.shtml                    
                </comment>
                <scope line="90">
                    <declaration name="subid1" type="int" line="91"/>
                    <declaration name="subid2" type="int" line="94"/>
                    <scope line="97">
                        <scope line="101"/>
                        <scope line="103"/>
                        <declaration name="r" type="int" line="106"/>
                        <scope line="107">
                            <declaration name="xx" type="int" line="108"/>
                            <declaration name="yy" type="int" line="109"/>
                            <declaration name="zz" type="int" line="110"/>
                        </scope>
                    </scope>
                    <scope line="118">
                        <declaration name="ll" type="int" line="120"/>
                        <declaration name="r" type="int" line="121"/>
                        <scope line="122">
                            <declaration name="kk" type="int" line="123"/>
                            <declaration name="xx" type="int" line="124"/>
                            <declaration name="yy" type="int" line="125"/>
                            <declaration name="zz" type="int" line="126"/>
                        </scope>
                    </scope>
                    <scope line="133">
                        <scope line="137"/>
                        <scope line="139"/>
                        <declaration name="r" type="int" line="142"/>
                        <scope line="143">
                            <declaration name="xx" type="int" line="144"/>
                            <declaration name="yy" type="int" line="145"/>
                            <declaration name="zz" type="int" line="146"/>
                        </scope>
                    </scope>
                    <scope line="154">
                        <scope line="158"/>
                        <scope line="160"/>
                        <declaration name="octave_tuning" type="int[]" line="163"/>
                    </scope>
                    <scope line="172">
                        <scope line="176"/>
                        <scope line="178"/>
                        <declaration name="octave_tuning" type="double[]" line="181"/>
                        <scope line="182">
                            <declaration name="v" type="int" line="183"/>
                        </scope>
                    </scope>
                    <declaration name="ll" type="int" line="194"/>
                    <declaration name="r" type="int" line="195"/>
                    <scope line="196">
                        <declaration name="kk" type="int" line="197"/>
                        <declaration name="xx" type="int" line="198"/>
                        <declaration name="yy" type="int" line="199"/>
                        <declaration name="zz" type="int" line="200"/>
                    </scope>
                    <scope line="208">
                        <declaration name="octave_tuning" type="int[]" line="210"/>
                    </scope>
                    <scope line="219">
                        <declaration name="octave_tuning" type="double[]" line="221"/>
                        <scope line="222">
                            <declaration name="v" type="int" line="223"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getTuning" type="double[]" line="240"/>
            <method name="getTuning" type="double" line="244">
                <params>
                    <param name="noteNumber" type="int"/>
                </params>
            </method>
            <method name="getPatch" type="Patch" line="248"/>
            <method name="getName" type="String" line="252"/>
            <method name="setName" type="void" line="256">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
        </class>
    </source>