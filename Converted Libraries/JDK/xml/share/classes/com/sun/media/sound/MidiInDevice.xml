<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="javax.sound.midi"/>
        <class name="MidiInDevice" line="35">
            <extends class="AbstractMidiDevice"/>
            <comment line="47">
                CONSTRUCTOR                
            </comment>
            <comment line="55">
                IMPLEMENTATION OF ABSTRACT MIDI DEVICE METHODS                
            </comment>
            <comment line="57">
                $$kk: 06.24.99: i have this both opening and starting the midi in device.                
            </comment>
            <comment line="58">
                may want to separate these??                
            </comment>
            <comment line="83">
                $$kk: 06.24.99: i have this both stopping and closing the midi in device.                
            </comment>
            <comment line="84">
                may want to separate these??                
            </comment>
            <comment line="115">
                OVERRIDES OF ABSTRACT MIDI DEVICE METHODS                
            </comment>
            <comment line="137">
                RUNNABLE METHOD                
            </comment>
            <comment line="157">
                CALLBACKS FROM NATIVE                
            </comment>
            <comment line="186">
                NATIVE METHODS                
            </comment>
            <comment line="195">
                go into native code and get messages. May be blocking                
            </comment>
            <implements interface="Runnable"/>
            <javadoc line="35">
                MidiInDevice class representing functionality of MidiIn devices.                
                <author>
                    David Rivas                    
                </author>
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="midiInThread" type="Thread" line="44"/>
            <method name="MidiInDevice" type="constructor" line="48">
                <params>
                    <param name="info" type="AbstractMidiDeviceProvider.Info"/>
                </params>
            </method>
            <method name="implOpen" type="void" line="58">
                <comment line="62">
                    can throw MidiUnavailableException                    
                </comment>
                <comment line="68">
                    create / start a thread to get messages                    
                </comment>
                <comment line="71">
                    name                    
                </comment>
                <comment line="72">
                    daemon                    
                </comment>
                <comment line="73">
                    priority                    
                </comment>
                <comment line="74">
                    doStart                    
                </comment>
                <comment line="77">
                    can throw MidiUnavailableException                    
                </comment>
                <declaration name="index" type="int" line="61"/>
                <scope line="64"/>
                <scope line="69"/>
            </method>
            <method name="implClose" type="void" line="84">
                <comment line="91">
                    close the device                    
                </comment>
                <comment line="97">
                    IGNORE EXCEPTION                    
                </comment>
                <declaration name="oldId" type="long" line="86"/>
                <scope line="93">
                    <scope line="94"/>
                    <scope line="96"/>
                </scope>
            </method>
            <method name="getMicrosecondPosition" type="long" line="105">
                <declaration name="timestamp" type="long" line="106"/>
                <scope line="107"/>
            </method>
            <method name="hasTransmitters" type="boolean" line="117"/>
            <method name="createTransmitter" type="Transmitter" line="122"/>
            <class name="MidiInTransmitter" line="126">
                <extends class="BasicTransmitter"/>
                <javadoc line="126">
                    An own class to distinguish the class name from
                      the transmitter of other devices                    
                </javadoc>
                <method name="MidiInTransmitter" type="constructor" line="131"/>
            </class>
            <method name="run" type="void" line="138">
                <comment line="139">
                    while the device is started, keep trying to get messages.                    
                </comment>
                <comment line="140">
                    this thread returns from native code whenever stop() or close() is called                    
                </comment>
                <comment line="142">
                    go into native code and retrieve messages                    
                </comment>
                <comment line="151">
                    let the thread exit                    
                </comment>
                <scope line="141">
                    <scope line="144">
                        <scope line="145"/>
                        <scope line="147"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="158">
                Callback from native code when a short MIDI event is received from hardware.                
                <param>
                    packedMsg: status | data1 << 8 | data2 << 8                    
                </param>
                <param>
                    timeStamp time-stamp in microseconds                    
                </param>
            </javadoc>
            <method name="callbackShortMessage" type="void" line="163">
                <params>
                    <param name="packedMsg" type="int"/>
                    <param name="timeStamp" type="long"/>
                </params>
                <comment line="168">
                    if(Printer.verbose) {
                    int status = packedMsg &amp; 0xFF;
                    int data1 = (packedMsg &amp; 0xFF00)&gt;&gt;8;
                    int data2 = (packedMsg &amp; 0xFF0000)&gt;&gt;16;
                    Printer.verbose(&quot;&gt;&gt; MidiInDevice callbackShortMessage: status: &quot; + status + &quot; data1: &quot; + data1 + &quot; data2: &quot; + data2 + &quot; timeStamp: &quot; + timeStamp);                    
                </comment>
                <scope line="164"/>
            </method>
            <method name="callbackLongMessage" type="void" line="178">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="timeStamp" type="long"/>
                </params>
                <scope line="179"/>
            </method>
            <method name="nOpen" type="long" line="187"/>
            <method name="nClose" type="void" line="188"/>
            <method name="nStart" type="void" line="190"/>
            <method name="nStop" type="void" line="191"/>
            <method name="nGetTimeStamp" type="long" line="192"/>
            <method name="nGetMessages" type="void" line="195"/>
        </class>
    </source>