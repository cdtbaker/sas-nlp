<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.DataInputStream"/>
        <import package="javax.sound.sampled.AudioFileFormat"/>
        <import package="javax.sound.sampled.AudioInputStream"/>
        <import package="javax.sound.sampled.spi.AudioFileWriter"/>
        <class name="SunFileWriter" line="41">
            <extends class="AudioFileWriter"/>
            <comment line="50">
                buffer size for write                
            </comment>
            <comment line="53">
                buffer size for temporary input streams                
            </comment>
            <comment line="69">
                METHODS TO IMPLEMENT AudioFileWriter                
            </comment>
            <comment line="71">
                new, 10.27.99                
            </comment>
            <comment line="88">
                HELPER METHODS                
            </comment>
            <javadoc line="41">
                Abstract File Writer class.                
                <author>
                    Jan Borgersen                    
                </author>
            </javadoc>
            <declaration name="bufferSize" type="int" line="50"/>
            <declaration name="bisBufferSize" type="int" line="53"/>
            <declaration name="types" type="AudioFileFormat.Type" line="56"/>
            <javadoc line="59">
                Constructs a new SunParser object.                
            </javadoc>
            <method name="SunFileWriter" type="constructor" line="62">
                <params>
                    <param name="types" type="AudioFileFormat.Type"/>
                </params>
            </method>
            <method name="getAudioFileTypes" type="AudioFileFormat.Type[]" line="72">
                <declaration name="localArray" type="AudioFileFormat.Type[]" line="74"/>
            </method>
            <method name="getAudioFileTypes" type="AudioFileFormat.Type[]" line="80"/>
            <method name="write" type="int" line="82"/>
            <method name="write" type="int" line="84"/>
            <javadoc line="90">
                rllong
                  Protected helper method to read 64 bits and changing the order of
                  each bytes.                
                <param>
                    DataInputStream                    
                </param>
                <return>
                    32 bits swapped value.                    
                </return>
                <exception>
                    IOException                    
                </exception>
            </javadoc>
            <method name="rllong" type="int" line="98">
                <params>
                    <param name="dis" type="DataInputStream"/>
                </params>
                <declaration name="b1" type="int" line="100"/>
                <declaration name="i" type="int" line="101"/>
            </method>
            <javadoc line="115">
                big2little
                  Protected helper method to swap the order of bytes in a 32 bit int                
                <param>
                    int                    
                </param>
                <return>
                    32 bits swapped value                    
                </return>
            </javadoc>
            <method name="big2little" type="int" line="121">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="b1" type="int" line="123"/>
            </method>
            <javadoc line="135">
                rlshort
                  Protected helper method to read 16 bits value. Swap high with low byte.                
                <param>
                    DataInputStream                    
                </param>
                <return>
                    the swapped value.                    
                </return>
                <exception>
                    IOException                    
                </exception>
            </javadoc>
            <method name="rlshort" type="short" line="142">
                <params>
                    <param name="dis" type="DataInputStream"/>
                </params>
                <declaration name="s" type="short" line="144"/>
                <declaration name="high" type="short" line="145"/>
            </method>
            <javadoc line="157">
                big2little
                  Protected helper method to swap the order of bytes in a 16 bit short                
                <param>
                    int                    
                </param>
                <return>
                    16 bits swapped value                    
                </return>
            </javadoc>
            <method name="big2littleShort" type="short" line="163">
                <params>
                    <param name="i" type="short"/>
                </params>
                <declaration name="high" type="short" line="165"/>
            </method>
            <class name="NoCloseInputStream" line="175">
                <extends class="InputStream"/>
                <javadoc line="175">
                    InputStream wrapper class which prevent source stream from being closed.
                      The class is usefull for use with SequenceInputStream to prevent
                      closing of the source input streams.                    
                </javadoc>
                <declaration name="in" type="InputStream" line="181"/>
                <method name="NoCloseInputStream" type="constructor" line="183">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                </method>
                <method name="read" type="int" line="188"/>
                <method name="read" type="int" line="193">
                    <params>
                        <param name="b" type="byte"/>
                    </params>
                </method>
                <method name="read" type="int" line="198">
                    <params>
                        <param name="b" type="byte"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="skip" type="long" line="203">
                    <params>
                        <param name="n" type="long"/>
                    </params>
                </method>
                <method name="available" type="int" line="208"/>
                <method name="close" type="void" line="213">
                    <comment line="215">
                        don&apos;t propagate the call                        
                    </comment>
                </method>
                <method name="mark" type="void" line="218">
                    <params>
                        <param name="readlimit" type="int"/>
                    </params>
                </method>
                <method name="reset" type="void" line="223"/>
                <method name="markSupported" type="boolean" line="228"/>
            </class>
        </class>
    </source>