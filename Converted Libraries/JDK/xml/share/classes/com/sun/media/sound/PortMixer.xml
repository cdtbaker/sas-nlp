<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.util.Vector"/>
        <import package="javax.sound.sampled.Control"/>
        <import package="javax.sound.sampled.Line"/>
        <import package="javax.sound.sampled.LineUnavailableException"/>
        <import package="javax.sound.sampled.Port"/>
        <import package="javax.sound.sampled.BooleanControl"/>
        <import package="javax.sound.sampled.CompoundControl"/>
        <import package="javax.sound.sampled.FloatControl"/>
        <class name="PortMixer" line="39">
            <extends class="AbstractMixer"/>
            <comment line="47">
                CONSTANTS                
            </comment>
            <comment line="60">
                INSTANCE VARIABLES                
            </comment>
            <comment line="62">
                cache of instantiated ports                
            </comment>
            <comment line="65">
                instance ID of the native implementation                
            </comment>
            <comment line="68">
                CONSTRUCTOR                
            </comment>
            <comment line="126">
                ABSTRACT MIXER: ABSTRACT METHOD IMPLEMENTATIONS                
            </comment>
            <comment line="188">
                IMPLEMENTATION HELPERS                
            </comment>
            <comment line="227">
                INNER CLASSES                
            </comment>
            <comment line="341">
                class PortMixerPort                
            </comment>
            <comment line="482">
                open the mixer with the given index. Returns a handle ID                
            </comment>
            <comment line="486">
                gets the number of ports for this mixer                
            </comment>
            <comment line="489">
                gets the type of the port with this index                
            </comment>
            <comment line="492">
                gets the name of the port with this index                
            </comment>
            <comment line="495">
                fills the vector with the controls for this port                
            </comment>
            <comment line="498">
                getters/setters for controls                
            </comment>
            <javadoc line="39">
                A Mixer which only provides Ports.                
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="SRC_UNKNOWN" type="int" line="47"/>
            <declaration name="SRC_MICROPHONE" type="int" line="48"/>
            <declaration name="SRC_LINE_IN" type="int" line="49"/>
            <declaration name="SRC_COMPACT_DISC" type="int" line="50"/>
            <declaration name="SRC_MASK" type="int" line="51"/>
            <declaration name="DST_UNKNOWN" type="int" line="53"/>
            <declaration name="DST_SPEAKER" type="int" line="54"/>
            <declaration name="DST_HEADPHONE" type="int" line="55"/>
            <declaration name="DST_LINE_OUT" type="int" line="56"/>
            <declaration name="DST_MASK" type="int" line="57"/>
            <declaration name="portInfos" type="Port.Info[]" line="60"/>
            <declaration name="ports" type="PortMixerPort[]" line="62"/>
            <declaration name="id" type="long" line="65"/>
            <method name="PortMixer" type="constructor" line="68">
                <params>
                    <param name="portMixerInfo" type="PortMixerProvider.PortMixerInfo"/>
                </params>
                <comment line="69">
                    pass in Line.Info, mixer, controls                    
                </comment>
                <comment line="70">
                    Mixer.Info                    
                </comment>
                <comment line="71">
                    Control[]                    
                </comment>
                <comment line="72">
                    Line.Info[] sourceLineInfo                    
                </comment>
                <comment line="73">
                    Line.Info[] targetLineInfo                    
                </comment>
                <comment line="108">
                    fill sourceLineInfo and targetLineInfos with copies of the ones in portInfos                    
                </comment>
                <declaration name="count" type="int" line="77"/>
                <declaration name="srcLineCount" type="int" line="78"/>
                <declaration name="dstLineCount" type="int" line="79"/>
                <scope line="81">
                    <scope line="82">
                        <scope line="84">
                            <scope line="86"/>
                        </scope>
                    </scope>
                    <scope line="91"/>
                    <scope line="95">
                        <declaration name="type" type="int" line="96"/>
                    </scope>
                </scope>
                <scope line="101">
                    <scope line="102"/>
                </scope>
                <scope line="113">
                    <scope line="114"/>
                    <scope line="116"/>
                </scope>
            </method>
            <method name="getLine" type="Line" line="127">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <declaration name="fullInfo" type="Line.Info" line="128"/>
                <scope line="130">
                    <scope line="131">
                        <scope line="132"/>
                    </scope>
                </scope>
            </method>
            <method name="getMaxLines" type="int" line="141">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <comment line="144">
                    if it&apos;s not supported at all, return 0.                    
                </comment>
                <comment line="150">
                    return AudioSystem.NOT_SPECIFIED; // if several instances of PortMixerPort                    
                </comment>
                <declaration name="fullInfo" type="Line.Info" line="142"/>
                <scope line="145"/>
                <scope line="149"/>
            </method>
            <method name="implOpen" type="void" line="157">
                <comment line="160">
                    open the mixer device                    
                </comment>
            </method>
            <method name="implClose" type="void" line="166">
                <comment line="169">
                    close the mixer device                    
                </comment>
                <declaration name="thisID" type="long" line="170"/>
                <scope line="173">
                    <scope line="174">
                        <scope line="175"/>
                    </scope>
                </scope>
            </method>
            <method name="implStart" type="void" line="184"/>
            <method name="implStop" type="void" line="185"/>
            <method name="getPortInfo" type="Port.Info" line="189">
                <params>
                    <param name="portIndex" type="int"/>
                    <param name="type" type="int"/>
                </params>
                <comment line="201">
                    should never happen...                    
                </comment>
            </method>
            <method name="getMixerIndex" type="int" line="206"/>
            <method name="getPort" type="Port" line="210">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="218">
                    $$fb TODO: return (Port) (ports[index].clone());                    
                </comment>
                <scope line="211"/>
                <scope line="214"/>
            </method>
            <method name="getID" type="long" line="222"/>
            <class name="PortMixerPort" line="228">
                <extends class="AbstractLine"/>
                <comment line="236">
                    CONSTRUCTOR                    
                </comment>
                <comment line="246">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="248">
                    ABSTRACT LINE                    
                </comment>
                <comment line="296">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="298">
                    this is very similar to open(AudioFormat, int) in AbstractDataLine...                    
                </comment>
                <comment line="322">
                    this is very similar to close() in AbstractDataLine...                    
                </comment>
                <comment line="347">
                    the handle to the native control function                    
                </comment>
                <comment line="419">
                    the handle to the native control function                    
                </comment>
                <comment line="423">
                    predefined float control types. See also Ports.h                    
                </comment>
                <implements interface="Port"/>
                <javadoc line="228">
                    Private inner class representing a Port for the PortMixer.                    
                </javadoc>
                <declaration name="portIndex" type="int" line="232"/>
                <declaration name="id" type="long" line="233"/>
                <method name="PortMixerPort" type="constructor" line="238">
                    <params>
                        <param name="info" type="Port.Info"/>
                        <param name="mixer" type="PortMixer"/>
                        <param name="portIndex" type="int"/>
                    </params>
                </method>
                <method name="implOpen" type="void" line="249">
                    <declaration name="newID" type="long" line="251"/>
                    <scope line="252">
                        <declaration name="vector" type="Vector" line="254"/>
                        <scope line="255">
                            <scope line="258"/>
                        </scope>
                    </scope>
                    <scope line="262"/>
                </method>
                <method name="enableControls" type="void" line="268">
                    <params>
                        <param name="controls" type="Control[]"/>
                        <param name="enable" type="boolean"/>
                    </params>
                    <scope line="269">
                        <scope line="270"/>
                        <scope line="273"/>
                        <scope line="276"/>
                    </scope>
                </method>
                <method name="disposeControls" type="void" line="282"/>
                <method name="implClose" type="void" line="288">
                    <comment line="290">
                        get rid of controls                        
                    </comment>
                </method>
                <method name="open" type="void" line="298">
                    <comment line="300">
                        if the line is not currently open, try to open it with this format and buffer size                        
                    </comment>
                    <comment line="303">
                        reserve mixer resources for this line                        
                    </comment>
                    <comment line="306">
                        open the line.  may throw LineUnavailableException.                        
                    </comment>
                    <comment line="309">
                        if we succeeded, set the open state to true and send events                        
                    </comment>
                    <comment line="312">
                        release mixer resources for this line and then throw the exception                        
                    </comment>
                    <scope line="299">
                        <scope line="301">
                            <scope line="305"/>
                            <scope line="311"/>
                        </scope>
                    </scope>
                </method>
                <method name="close" type="void" line="322">
                    <comment line="327">
                        set the open state to false and send events                        
                    </comment>
                    <comment line="330">
                        close resources for this line                        
                    </comment>
                    <comment line="333">
                        release mixer resources for this line                        
                    </comment>
                    <scope line="323">
                        <scope line="324"/>
                    </scope>
                </method>
            </class>
            <class name="BoolCtrl" line="342">
                <extends class="BooleanControl"/>
                <comment line="236">
                    CONSTRUCTOR                    
                </comment>
                <comment line="246">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="248">
                    ABSTRACT LINE                    
                </comment>
                <comment line="296">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="298">
                    this is very similar to open(AudioFormat, int) in AbstractDataLine...                    
                </comment>
                <comment line="322">
                    this is very similar to close() in AbstractDataLine...                    
                </comment>
                <comment line="347">
                    the handle to the native control function                    
                </comment>
                <comment line="419">
                    the handle to the native control function                    
                </comment>
                <comment line="423">
                    predefined float control types. See also Ports.h                    
                </comment>
                <javadoc line="342">
                    Private inner class representing a BooleanControl for PortMixerPort                    
                </javadoc>
                <declaration name="controlID" type="long" line="347"/>
                <declaration name="closed" type="boolean" line="348"/>
                <method name="createType" type="BooleanControl.Type" line="350">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <comment line="355">
                        $$fb add as new static type?                        
                    </comment>
                    <comment line="356">
                        return BooleanControl.Type.SELECT;                        
                    </comment>
                    <scope line="351"/>
                    <scope line="354"/>
                </method>
                <method name="BoolCtrl" type="constructor" line="362">
                    <params>
                        <param name="controlID" type="long"/>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="BoolCtrl" type="constructor" line="366">
                    <params>
                        <param name="controlID" type="long"/>
                        <param name="typ" type="BooleanControl.Type"/>
                    </params>
                </method>
                <method name="setValue" type="void" line="371">
                    <params>
                        <param name="value" type="boolean"/>
                    </params>
                    <scope line="372"/>
                </method>
                <method name="getValue" type="boolean" line="377">
                    <comment line="379">
                        never use any cached values                        
                    </comment>
                    <comment line="382">
                        ??                        
                    </comment>
                    <scope line="378"/>
                </method>
                <class name="BCT" line="386">
                    <extends class="BooleanControl.Type"/>
                    <javadoc line="386">
                        inner class for custom types                        
                    </javadoc>
                    <method name="BCT" type="constructor" line="390">
                        <params>
                            <param name="name" type="String"/>
                        </params>
                    </method>
                </class>
            </class>
            <class name="CompCtrl" line="396">
                <extends class="CompoundControl"/>
                <comment line="236">
                    CONSTRUCTOR                    
                </comment>
                <comment line="246">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="248">
                    ABSTRACT LINE                    
                </comment>
                <comment line="296">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="298">
                    this is very similar to open(AudioFormat, int) in AbstractDataLine...                    
                </comment>
                <comment line="322">
                    this is very similar to close() in AbstractDataLine...                    
                </comment>
                <comment line="347">
                    the handle to the native control function                    
                </comment>
                <comment line="419">
                    the handle to the native control function                    
                </comment>
                <comment line="423">
                    predefined float control types. See also Ports.h                    
                </comment>
                <javadoc line="396">
                    Private inner class representing a CompoundControl for PortMixerPort                    
                </javadoc>
                <method name="CompCtrl" type="constructor" line="400">
                    <params>
                        <param name="name" type="String"/>
                        <param name="controls" type="Control[]"/>
                    </params>
                </method>
                <class name="CCT" line="404">
                    <extends class="CompoundControl.Type"/>
                    <javadoc line="404">
                        inner class for custom compound control types                        
                    </javadoc>
                    <method name="CCT" type="constructor" line="408">
                        <params>
                            <param name="name" type="String"/>
                        </params>
                    </method>
                </class>
            </class>
            <class name="FloatCtrl" line="414">
                <extends class="FloatControl"/>
                <comment line="236">
                    CONSTRUCTOR                    
                </comment>
                <comment line="246">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="248">
                    ABSTRACT LINE                    
                </comment>
                <comment line="296">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="298">
                    this is very similar to open(AudioFormat, int) in AbstractDataLine...                    
                </comment>
                <comment line="322">
                    this is very similar to close() in AbstractDataLine...                    
                </comment>
                <comment line="347">
                    the handle to the native control function                    
                </comment>
                <comment line="419">
                    the handle to the native control function                    
                </comment>
                <comment line="423">
                    predefined float control types. See also Ports.h                    
                </comment>
                <javadoc line="414">
                    Private inner class representing a BooleanControl for PortMixerPort                    
                </javadoc>
                <declaration name="controlID" type="long" line="419"/>
                <declaration name="closed" type="boolean" line="420"/>
                <declaration name="FLOAT_CONTROL_TYPES" type="FloatControl.Type[]" line="423"/>
                <method name="FloatCtrl" type="constructor" line="432">
                    <params>
                        <param name="controlID" type="long"/>
                        <param name="name" type="String"/>
                        <param name="min" type="float"/>
                        <param name="max" type="float"/>
                        <param name="precision" type="float"/>
                        <param name="units" type="String"/>
                    </params>
                </method>
                <method name="FloatCtrl" type="constructor" line="437">
                    <params>
                        <param name="controlID" type="long"/>
                        <param name="type" type="int"/>
                        <param name="min" type="float"/>
                        <param name="max" type="float"/>
                        <param name="precision" type="float"/>
                        <param name="units" type="String"/>
                    </params>
                </method>
                <method name="FloatCtrl" type="constructor" line="442">
                    <params>
                        <param name="controlID" type="long"/>
                        <param name="typ" type="FloatControl.Type"/>
                        <param name="min" type="float"/>
                        <param name="max" type="float"/>
                        <param name="precision" type="float"/>
                        <param name="units" type="String"/>
                    </params>
                </method>
                <method name="setValue" type="void" line="447">
                    <params>
                        <param name="value" type="float"/>
                    </params>
                    <scope line="448"/>
                </method>
                <method name="getValue" type="float" line="453">
                    <comment line="455">
                        never use any cached values                        
                    </comment>
                    <comment line="458">
                        ??                        
                    </comment>
                    <scope line="454"/>
                </method>
                <class name="FCT" line="462">
                    <extends class="FloatControl.Type"/>
                    <javadoc line="462">
                        inner class for custom types                        
                    </javadoc>
                    <method name="FCT" type="constructor" line="466">
                        <params>
                            <param name="name" type="String"/>
                        </params>
                    </method>
                </class>
            </class>
            <class name="PortInfo" line="472">
                <extends class="Port.Info"/>
                <comment line="236">
                    CONSTRUCTOR                    
                </comment>
                <comment line="246">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="248">
                    ABSTRACT LINE                    
                </comment>
                <comment line="296">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="298">
                    this is very similar to open(AudioFormat, int) in AbstractDataLine...                    
                </comment>
                <comment line="322">
                    this is very similar to close() in AbstractDataLine...                    
                </comment>
                <comment line="347">
                    the handle to the native control function                    
                </comment>
                <comment line="419">
                    the handle to the native control function                    
                </comment>
                <comment line="423">
                    predefined float control types. See also Ports.h                    
                </comment>
                <javadoc line="472">
                    Private inner class representing a port info                    
                </javadoc>
                <method name="PortInfo" type="constructor" line="476">
                    <params>
                        <param name="name" type="String"/>
                        <param name="isSource" type="boolean"/>
                    </params>
                </method>
            </class>
            <method name="nOpen" type="long" line="482"/>
            <method name="nClose" type="void" line="483"/>
            <method name="nGetPortCount" type="int" line="486"/>
            <method name="nGetPortType" type="int" line="489"/>
            <method name="nGetPortName" type="String" line="492"/>
            <method name="nGetControls" type="void" line="495"/>
            <method name="nControlSetIntValue" type="void" line="498"/>
            <method name="nControlGetIntValue" type="int" line="499"/>
            <method name="nControlSetFloatValue" type="void" line="500"/>
            <method name="nControlGetFloatValue" type="float" line="501"/>
        </class>
    </source>