<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Properties"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="javax.sound.sampled.AudioPermission"/>
        <import package="sun.misc.Service"/>
        <class name="JSSecurityManager" line="14">
            <javadoc line="14">
                Managing security in the Java Sound implementation.
                  This class contains all code that uses and is used by
                  SecurityManager.doPrivileged().                
                <author>
                    Matthias Pfisterer                    
                </author>
            </javadoc>
            <javadoc line="21">
                Prevent instantiation.                
            </javadoc>
            <method name="JSSecurityManager" type="constructor" line="24"/>
            <javadoc line="26">
                Checks if the VM currently has a SecurityManager installed.
                  Note that this may change over time. So the result of this method
                  should not be cached.                
                <return>
                    true if a SecurityManger is installed, false otherwise.                    
                </return>
            </javadoc>
            <method name="hasSecurityManager" type="boolean" line="32"/>
            <method name="checkRecordPermission" type="void" line="35">
                <declaration name="sm" type="SecurityManager" line="37"/>
                <scope line="38"/>
            </method>
            <method name="loadLibrary" type="void" line="42">
                <params>
                    <param name="libName" type="String"/>
                </params>
                <scope line="43">
                    <scope line="44">
                        <anonymous_class line="46">
                            <method name="run" type="Object" line="47"/>
                        </anonymous_class>
                        <declaration name="action" type="PrivilegedAction" line="46"/>
                    </scope>
                    <scope line="55"/>
                </scope>
                <scope line="61"/>
            </method>
            <method name="getProperty" type="String" line="66">
                <params>
                    <param name="propertyName" type="String"/>
                </params>
                <declaration name="propertyValue" type="String" line="67"/>
                <scope line="68">
                    <scope line="70">
                        <anonymous_class line="71">
                            <method name="run" type="Object" line="72">
                                <scope line="73"/>
                                <scope line="76"/>
                            </method>
                        </anonymous_class>
                        <declaration name="action" type="PrivilegedAction" line="71"/>
                    </scope>
                    <scope line="84"/>
                </scope>
                <scope line="89"/>
            </method>
            <javadoc line="95">
                Load properties from a file.
                  This method tries to load properties from the filename give into
                  the passed properties object.
                  If the file cannot be found or something else goes wrong,
                  the method silently fails.                
                <param>
                    properties The properties bundle to store the values of the
                      properties file.                    
                </param>
                <param>
                    filename The filename of the properties file to load. This
                      filename is interpreted as relative to the subdirectory "lib" in
                      the JRE directory.                    
                </param>
            </javadoc>
            <method name="loadProperties" type="void" line="107">
                <params>
                    <param name="properties" type="Properties"/>
                    <param name="filename" type="String"/>
                </params>
                <scope line="108">
                    <scope line="109">
                        <anonymous_class line="110">
                            <method name="run" type="Object" line="111"/>
                        </anonymous_class>
                        <declaration name="action" type="PrivilegedAction" line="110"/>
                    </scope>
                    <scope line="120"/>
                </scope>
                <scope line="125"/>
            </method>
            <method name="loadPropertiesImpl" type="void" line="129">
                <params>
                    <param name="properties" type="Properties"/>
                    <param name="filename" type="String"/>
                </params>
                <declaration name="fname" type="String" line="131"/>
                <scope line="132">
                    <scope line="133"/>
                    <declaration name="f" type="File" line="136"/>
                    <declaration name="in" type="InputStream" line="139"/>
                    <declaration name="bin" type="BufferedInputStream" line="140"/>
                    <scope line="141"/>
                    <scope line="144">
                        <scope line="145"/>
                    </scope>
                </scope>
                <scope line="150">
                    <scope line="151"/>
                </scope>
            </method>
            <method name="getTopmostThreadGroup" type="ThreadGroup" line="158">
                <declaration name="topmostThreadGroup" type="ThreadGroup" line="159"/>
                <scope line="160">
                    <scope line="161">
                        <anonymous_class line="162">
                            <method name="run" type="Object" line="163">
                                <scope line="164"/>
                                <scope line="167"/>
                            </method>
                        </anonymous_class>
                        <declaration name="action" type="PrivilegedAction" line="162"/>
                    </scope>
                    <scope line="176"/>
                </scope>
                <scope line="181"/>
            </method>
            <method name="getTopmostThreadGroupImpl" type="ThreadGroup" line="186">
                <declaration name="g" type="ThreadGroup" line="188"/>
                <scope line="189"/>
            </method>
            <javadoc line="195">
                Create a Thread in the topmost ThreadGroup.                
            </javadoc>
            <method name="createThread" type="Thread" line="198">
                <params>
                    <param name="runnable" type="Runnable"/>
                    <param name="threadName" type="String"/>
                    <param name="isDaemon" type="boolean"/>
                    <param name="priority" type="int"/>
                    <param name="doStart" type="boolean"/>
                </params>
                <declaration name="thread" type="Thread" line="199"/>
                <scope line="200">
                    <anonymous_class line="201">
                        <method name="run" type="Object" line="202">
                            <scope line="203"/>
                            <scope line="206"/>
                        </method>
                    </anonymous_class>
                    <declaration name="action" type="PrivilegedAction" line="201"/>
                </scope>
                <scope line="215"/>
            </method>
            <method name="createThreadImpl" type="Thread" line="221">
                <params>
                    <param name="runnable" type="Runnable"/>
                    <param name="threadName" type="String"/>
                    <param name="isDaemon" type="boolean"/>
                    <param name="priority" type="int"/>
                    <param name="doStart" type="boolean"/>
                </params>
                <declaration name="threadGroup" type="ThreadGroup" line="222"/>
                <declaration name="thread" type="Thread" line="223"/>
                <scope line="224"/>
                <scope line="228"/>
                <scope line="231"/>
            </method>
            <method name="getProviders" type="List" line="236">
                <params>
                    <param name="providerClass" type="Class"/>
                </params>
                <declaration name="p" type="List" line="237"/>
                <declaration name="ps" type="Iterator" line="238"/>
                <anonymous_class line="239">
                    <method name="run" type="Boolean" line="240"/>
                </anonymous_class>
                <declaration name="hasNextAction" type="PrivilegedAction&lt;Boolean&gt;" line="239"/>
                <scope line="245">
                    <scope line="246">
                        <declaration name="provider" type="Object" line="247"/>
                        <scope line="248"/>
                    </scope>
                    <scope line="252"/>
                </scope>
            </method>
        </class>
    </source>