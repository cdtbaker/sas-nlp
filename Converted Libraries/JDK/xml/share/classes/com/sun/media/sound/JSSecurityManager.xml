<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Properties"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="javax.sound.sampled.AudioPermission"/>
        <import package="sun.misc.Service"/>
        <class name="JSSecurityManager" line="46">
            <javadoc line="46">
                Managing security in the Java Sound implementation.
                  This class contains all code that uses and is used by
                  SecurityManager.doPrivileged().                
                <author>
                    Matthias Pfisterer                    
                </author>
            </javadoc>
            <javadoc line="54">
                Prevent instantiation.                
            </javadoc>
            <method name="JSSecurityManager" type="constructor" line="56"/>
            <javadoc line="59">
                Checks if the VM currently has a SecurityManager installed.
                  Note that this may change over time. So the result of this method
                  should not be cached.                
                <return>
                    true if a SecurityManger is installed, false otherwise.                    
                </return>
            </javadoc>
            <method name="hasSecurityManager" type="boolean" line="65"/>
            <method name="checkRecordPermission" type="void" line="70">
                <declaration name="sm" type="SecurityManager" line="72"/>
                <scope line="73"/>
            </method>
            <method name="loadLibrary" type="void" line="79">
                <params>
                    <param name="libName" type="String"/>
                </params>
                <scope line="80">
                    <scope line="81">
                        <anonymous_class line="83">
                            <method name="run" type="Object" line="84"/>
                        </anonymous_class>
                        <declaration name="action" type="PrivilegedAction" line="83"/>
                    </scope>
                    <scope line="90"/>
                </scope>
                <scope line="95"/>
            </method>
            <method name="getProperty" type="String" line="102">
                <params>
                    <param name="propertyName" type="String"/>
                </params>
                <declaration name="propertyValue" type="String" line="103"/>
                <scope line="104">
                    <scope line="106">
                        <anonymous_class line="107">
                            <method name="run" type="Object" line="108">
                                <scope line="109"/>
                                <scope line="111"/>
                            </method>
                        </anonymous_class>
                        <declaration name="action" type="PrivilegedAction" line="107"/>
                    </scope>
                    <scope line="117"/>
                </scope>
                <scope line="121"/>
            </method>
            <javadoc line="129">
                Load properties from a file.
                  This method tries to load properties from the filename give into
                  the passed properties object.
                  If the file cannot be found or something else goes wrong,
                  the method silently fails.                
                <param>
                    properties The properties bundle to store the values of the
                      properties file.                    
                </param>
                <param>
                    filename The filename of the properties file to load. This
                      filename is interpreted as relative to the subdirectory "lib" in
                      the JRE directory.                    
                </param>
            </javadoc>
            <method name="loadProperties" type="void" line="141">
                <params>
                    <param name="properties" type="Properties"/>
                    <param name="filename" type="String"/>
                </params>
                <comment line="145">
                    invoke the privileged action using 1.2 security                    
                </comment>
                <comment line="156">
                    try without using JDK 1.2 security                    
                </comment>
                <comment line="160">
                    not JDK 1.2 security, assume we already have permission                    
                </comment>
                <scope line="142">
                    <scope line="143">
                        <anonymous_class line="145">
                            <method name="run" type="Object" line="146"/>
                        </anonymous_class>
                        <declaration name="action" type="PrivilegedAction" line="145"/>
                    </scope>
                    <scope line="153"/>
                </scope>
                <scope line="158"/>
            </method>
            <method name="loadPropertiesImpl" type="void" line="166">
                <params>
                    <param name="properties" type="Properties"/>
                    <param name="filename" type="String"/>
                </params>
                <declaration name="fname" type="String" line="168"/>
                <scope line="169">
                    <scope line="170"/>
                    <declaration name="f" type="File" line="173"/>
                    <declaration name="in" type="InputStream" line="176"/>
                    <declaration name="bin" type="BufferedInputStream" line="177"/>
                    <scope line="178"/>
                    <scope line="180">
                        <scope line="181"/>
                    </scope>
                </scope>
                <scope line="185">
                    <scope line="186"/>
                </scope>
            </method>
            <method name="getTopmostThreadGroup" type="ThreadGroup" line="195">
                <comment line="200">
                    invoke the privileged action using 1.2 security                    
                </comment>
                <comment line="214">
                    try without using JDK 1.2 security                    
                </comment>
                <comment line="218">
                    not JDK 1.2 security, assume we already have permission                    
                </comment>
                <declaration name="topmostThreadGroup" type="ThreadGroup" line="196"/>
                <scope line="197">
                    <scope line="198">
                        <anonymous_class line="200">
                            <method name="run" type="Object" line="201">
                                <scope line="202"/>
                                <scope line="204"/>
                            </method>
                        </anonymous_class>
                        <declaration name="action" type="PrivilegedAction" line="200"/>
                    </scope>
                    <scope line="211"/>
                </scope>
                <scope line="216"/>
            </method>
            <method name="getTopmostThreadGroupImpl" type="ThreadGroup" line="224">
                <declaration name="g" type="ThreadGroup" line="226"/>
                <scope line="227"/>
            </method>
            <javadoc line="235">
                Create a Thread in the topmost ThreadGroup.                
            </javadoc>
            <method name="createThread" type="Thread" line="240">
                <params>
                    <param name="runnable" type="Runnable"/>
                    <param name="threadName" type="String"/>
                    <param name="isDaemon" type="boolean"/>
                    <param name="priority" type="int"/>
                    <param name="doStart" type="boolean"/>
                </params>
                <declaration name="thread" type="Thread" line="241"/>
                <scope line="242">
                    <anonymous_class line="243">
                        <method name="run" type="Object" line="244">
                            <scope line="245"/>
                            <scope line="249"/>
                        </method>
                    </anonymous_class>
                    <declaration name="action" type="PrivilegedAction" line="243"/>
                </scope>
                <scope line="256"/>
            </method>
            <method name="createThreadImpl" type="Thread" line="268">
                <params>
                    <param name="runnable" type="Runnable"/>
                    <param name="threadName" type="String"/>
                    <param name="isDaemon" type="boolean"/>
                    <param name="priority" type="int"/>
                    <param name="doStart" type="boolean"/>
                </params>
                <declaration name="threadGroup" type="ThreadGroup" line="269"/>
                <declaration name="thread" type="Thread" line="270"/>
                <scope line="271"/>
                <scope line="275"/>
                <scope line="278"/>
            </method>
            <method name="getProviders" type="List" line="285">
                <params>
                    <param name="providerClass" type="Class"/>
                </params>
                <comment line="288">
                    Service.providers(Class) just creates &quot;lazy&quot; iterator instance,
                     so it doesn&apos;t require do be called from privileged section                    
                </comment>
                <comment line="292">
                    the iterator&apos;s hasNext() method looks through classpath for
                     the provider class names, so it requires read permissions                    
                </comment>
                <comment line="302">
                    the iterator&apos;s next() method creates instances of the
                     providers and it should be called in the current security
                     context                    
                </comment>
                <comment line="307">
                    $$mp 2003-08-22
                     Always adding at the beginning reverses the
                     order of the providers. So we no longer have
                     to do this in AudioSystem and MidiSystem.                    
                </comment>
                <comment line="314">
                    $$fb 2002-11-07: do not fail on SPI not found                    
                </comment>
                <declaration name="p" type="List" line="286"/>
                <declaration name="ps" type="Iterator" line="289"/>
                <anonymous_class line="293">
                    <method name="run" type="Boolean" line="294"/>
                </anonymous_class>
                <declaration name="hasNextAction" type="PrivilegedAction&lt;Boolean&gt;" line="293"/>
                <scope line="299">
                    <scope line="300">
                        <declaration name="provider" type="Object" line="304"/>
                        <scope line="305"/>
                    </scope>
                    <scope line="312"/>
                </scope>
            </method>
        </class>
    </source>