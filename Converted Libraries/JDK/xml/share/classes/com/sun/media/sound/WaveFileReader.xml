<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.util.Vector"/>
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.EOFException"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.SequenceInputStream"/>
        <import package="javax.sound.sampled.AudioFileFormat"/>
        <import package="javax.sound.sampled.AudioInputStream"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <import package="javax.sound.sampled.UnsupportedAudioFileException"/>
        <class name="WaveFileReader" line="55">
            <extends class="SunFileReader"/>
            <comment line="237">
                --------------------------------------------------------------------                
            </comment>
            <javadoc line="55">
                WAVE file reader.                
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Jan Borgersen                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="MAX_READ_LENGTH" type="int" line="64"/>
            <declaration name="types" type="AudioFileFormat.Type" line="66"/>
            <javadoc line="66">
                WAVE reader type                
            </javadoc>
            <javadoc line="75">
                Constructs a new WaveFileReader object.                
            </javadoc>
            <method name="WaveFileReader" type="constructor" line="78"/>
            <javadoc line="82">
                Obtains the audio file format of the input stream provided.  The stream must
                  point to valid audio file data.  In general, audio file providers may
                  need to read some data from the stream before determining whether they
                  support it.  These parsers must
                  be able to mark the stream, read enough data to determine whether they
                  support the stream, and, if not, reset the stream&apos;s read pointer to its original
                  position.  If the input stream does not support this, this method may fail
                  with an IOException.                
                <param>
                    stream the input stream from which file format information should be
                      extracted                    
                </param>
                <return>
                    an &lt;code&gt;AudioFileFormat&lt;/code&gt; object describing the audio file format                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the stream does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
                <see>
                    InputStream#markSupported                    
                </see>
                <see>
                    InputStream#mark                    
                </see>
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="100">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <comment line="102">
                    fix for 4489272: AudioSystem.getAudioFileFormat() fails for InputStream, but works for URL                    
                </comment>
                <comment line="104">
                    the following is not strictly necessary - but was implemented like that in 1.3.0 - 1.4.1
                     so I leave it as it was. May remove this for 1.5.0                    
                </comment>
                <declaration name="aff" type="AudioFileFormat" line="102"/>
            </method>
            <javadoc line="110">
                Obtains the audio file format of the URL provided.  The URL must
                  point to valid audio file data.                
                <param>
                    url the URL from which file format information should be
                      extracted                    
                </param>
                <return>
                    an &lt;code&gt;AudioFileFormat&lt;/code&gt; object describing the audio file format                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the URL does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="120">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <comment line="122">
                    throws IOException                    
                </comment>
                <declaration name="urlStream" type="InputStream" line="121"/>
                <declaration name="fileFormat" type="AudioFileFormat" line="122"/>
                <scope line="123"/>
                <scope line="125"/>
            </method>
            <javadoc line="132">
                Obtains the audio file format of the File provided.  The File must
                  point to valid audio file data.                
                <param>
                    file the File from which file format information should be
                      extracted                    
                </param>
                <return>
                    an &lt;code&gt;AudioFileFormat&lt;/code&gt; object describing the audio file format                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the File does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="142">
                <params>
                    <param name="file" type="File"/>
                </params>
                <comment line="145">
                    throws IOException                    
                </comment>
                <comment line="146">
                    part of fix for 4325421                    
                </comment>
                <declaration name="fileFormat" type="AudioFileFormat" line="143"/>
                <declaration name="fis" type="FileInputStream" line="144"/>
                <scope line="146"/>
                <scope line="148"/>
            </method>
            <javadoc line="156">
                Obtains an audio stream from the input stream provided.  The stream must
                  point to valid audio file data.  In general, audio file providers may
                  need to read some data from the stream before determining whether they
                  support it.  These parsers must
                  be able to mark the stream, read enough data to determine whether they
                  support the stream, and, if not, reset the stream&apos;s read pointer to its original
                  position.  If the input stream does not support this, this method may fail
                  with an IOException.                
                <param>
                    stream the input stream from which the &lt;code&gt;AudioInputStream&lt;/code&gt; should be
                      constructed                    
                </param>
                <return>
                    an &lt;code&gt;AudioInputStream&lt;/code&gt; object based on the audio file data contained
                      in the input stream.                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the stream does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
                <see>
                    InputStream#markSupported                    
                </see>
                <see>
                    InputStream#mark                    
                </see>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="175">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <comment line="177">
                    getFMT leaves the input stream at the beginning of the audio data                    
                </comment>
                <comment line="178">
                    throws UnsupportedAudioFileException, IOException                    
                </comment>
                <comment line="180">
                    we&apos;ve got everything, and the stream is at the
                     beginning of the audio data, so return an AudioInputStream.                    
                </comment>
                <declaration name="fileFormat" type="AudioFileFormat" line="177"/>
            </method>
            <javadoc line="185">
                Obtains an audio stream from the URL provided.  The URL must
                  point to valid audio file data.                
                <param>
                    url the URL for which the &lt;code&gt;AudioInputStream&lt;/code&gt; should be
                      constructed                    
                </param>
                <return>
                    an &lt;code&gt;AudioInputStream&lt;/code&gt; object based on the audio file data pointed
                      to by the URL                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the URL does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="196">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <comment line="198">
                    throws IOException                    
                </comment>
                <declaration name="urlStream" type="InputStream" line="197"/>
                <declaration name="fileFormat" type="AudioFileFormat" line="198"/>
                <scope line="199"/>
                <scope line="201">
                    <scope line="202"/>
                </scope>
            </method>
            <javadoc line="210">
                Obtains an audio stream from the File provided.  The File must
                  point to valid audio file data.                
                <param>
                    file the File for which the &lt;code&gt;AudioInputStream&lt;/code&gt; should be
                      constructed                    
                </param>
                <return>
                    an &lt;code&gt;AudioInputStream&lt;/code&gt; object based on the audio file data pointed
                      to by the File                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the File does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="221">
                <params>
                    <param name="file" type="File"/>
                </params>
                <comment line="223">
                    throws IOException                    
                </comment>
                <comment line="225">
                    part of fix for 4325421                    
                </comment>
                <declaration name="fis" type="FileInputStream" line="222"/>
                <declaration name="fileFormat" type="AudioFileFormat" line="223"/>
                <scope line="225"/>
                <scope line="227">
                    <scope line="228"/>
                </scope>
            </method>
            <method name="getFMT" type="AudioFileFormat" line="239">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="doReset" type="boolean"/>
                </params>
                <comment line="242">
                    assumes sream is rewound                    
                </comment>
                <comment line="274">
                    not WAVE, throw UnsupportedAudioFileException                    
                </comment>
                <comment line="281">
                    find and read the &quot;fmt&quot; chunk
                     we break out of this loop either by hitting EOF or finding &quot;fmt &quot;                    
                </comment>
                <comment line="289">
                    we&apos;ve found the &apos;fmt&apos; chunk                    
                </comment>
                <comment line="292">
                    else not &apos;fmt&apos;, skip this chunk                    
                </comment>
                <comment line="299">
                    we&apos;ve reached the end of the file without finding the &apos;fmt&apos; chunk                    
                </comment>
                <comment line="304">
                    Read the format chunk size.                    
                </comment>
                <comment line="308">
                    This is the nread position at the end of the format chunk                    
                </comment>
                <comment line="311">
                    Read the wave format data out of the format chunk.                    
                </comment>
                <comment line="313">
                    encoding.                    
                </comment>
                <comment line="317">
                    if 8-bit, we need PCM_UNSIGNED, below...                    
                </comment>
                <comment line="323">
                    we don&apos;t support any other WAVE formats....                    
                </comment>
                <comment line="326">
                    channels                    
                </comment>
                <comment line="329">
                    sample rate.                    
                </comment>
                <comment line="332">
                    this is the avgBytesPerSec                    
                </comment>
                <comment line="335">
                    this is blockAlign value                    
                </comment>
                <comment line="338">
                    this is the PCM-specific value bitsPerSample                    
                </comment>
                <comment line="341">
                    if sampleSizeInBits==8, we need to use PCM_UNSIGNED                    
                </comment>
                <comment line="345">
                    skip any difference between the length of the format chunk
                     and what we read                    
                </comment>
                <comment line="348">
                    if the length of the chunk is odd, there&apos;s an extra pad byte
                     at the end.  i&apos;ve never seen this in the fmt chunk, but we
                     should check to make sure.                    
                </comment>
                <comment line="354">
                    $$jb: 07.28.99: endLength&gt;nread, not length&gt;nread.
                           This fixes #4257986                    
                </comment>
                <comment line="359">
                    we have a format now, so find the &quot;data&quot; chunk
                     we break out of this loop either by hitting EOF or finding &quot;data&quot;
                     $$kk: if &quot;data&quot; chunk precedes &quot;fmt&quot; chunk we are hosed -- can this legally happen?                    
                </comment>
                <comment line="368">
                    we&apos;ve found the &apos;data&apos; chunk                    
                </comment>
                <comment line="371">
                    else not &apos;data&apos;, skip this chunk                    
                </comment>
                <comment line="377">
                    we&apos;ve reached the end of the file without finding the &apos;data&apos; chunk                    
                </comment>
                <comment line="381">
                    this is the length of the data chunk                    
                </comment>
                <comment line="384">
                    now build the new AudioFileFormat and return                    
                </comment>
                <declaration name="bytesRead" type="int" line="243"/>
                <declaration name="nread" type="int" line="244"/>
                <declaration name="fmt" type="int" line="245"/>
                <declaration name="length" type="int" line="246"/>
                <declaration name="wav_type" type="int" line="247"/>
                <declaration name="channels" type="short" line="248"/>
                <declaration name="sampleRate" type="long" line="249"/>
                <declaration name="avgBytesPerSec" type="long" line="250"/>
                <declaration name="blockAlign" type="short" line="251"/>
                <declaration name="sampleSizeInBits" type="int" line="252"/>
                <declaration name="encoding" type="AudioFormat.Encoding" line="253"/>
                <declaration name="dis" type="DataInputStream" line="255"/>
                <scope line="257"/>
                <declaration name="magic" type="int" line="261"/>
                <declaration name="fileLength" type="int" line="262"/>
                <declaration name="waveMagic" type="int" line="263"/>
                <declaration name="totallength" type="int" line="264"/>
                <scope line="265"/>
                <scope line="268"/>
                <scope line="272">
                    <scope line="274"/>
                </scope>
                <scope line="282">
                    <scope line="284">
                        <scope line="287"/>
                        <scope line="290"/>
                    </scope>
                    <scope line="297"/>
                </scope>
                <declaration name="endLength" type="int" line="308"/>
                <scope line="321"/>
                <scope line="362">
                    <scope line="363">
                        <declaration name="datahdr" type="int" line="364"/>
                        <scope line="366"/>
                        <scope line="369">
                            <declaration name="thisLength" type="int" line="371"/>
                        </scope>
                    </scope>
                    <scope line="375"/>
                </scope>
                <declaration name="dataLength" type="int" line="381"/>
                <declaration name="format" type="AudioFormat" line="385"/>
            </method>
        </class>
    </source>