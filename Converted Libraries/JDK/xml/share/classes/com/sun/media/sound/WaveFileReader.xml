<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.util.Vector"/>
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.EOFException"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.SequenceInputStream"/>
        <import package="javax.sound.sampled.AudioFileFormat"/>
        <import package="javax.sound.sampled.AudioInputStream"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <import package="javax.sound.sampled.UnsupportedAudioFileException"/>
        <class name="WaveFileReader" line="24">
            <extends class="SunFileReader"/>
            <javadoc line="24">
                WAVE file reader.                
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Jan Borgersen                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="MAX_READ_LENGTH" type="int" line="31"/>
            <declaration name="types" type="AudioFileFormat.Type" line="32"/>
            <javadoc line="32">
                WAVE reader type                
            </javadoc>
            <javadoc line="36">
                Constructs a new WaveFileReader object.                
            </javadoc>
            <method name="WaveFileReader" type="constructor" line="39"/>
            <javadoc line="41">
                Obtains the audio file format of the input stream provided.  The stream must
                  point to valid audio file data.  In general, audio file providers may
                  need to read some data from the stream before determining whether they
                  support it.  These parsers must
                  be able to mark the stream, read enough data to determine whether they
                  support the stream, and, if not, reset the stream&apos;s read pointer to its original
                  position.  If the input stream does not support this, this method may fail
                  with an IOException.                
                <param>
                    stream the input stream from which file format information should be
                      extracted                    
                </param>
                <return>
                    an <code>AudioFileFormat</code> object describing the audio file format                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the stream does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
                <see>
                    InputStream#markSupported                    
                </see>
                <see>
                    InputStream#mark                    
                </see>
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="59">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <declaration name="aff" type="AudioFileFormat" line="60"/>
            </method>
            <javadoc line="64">
                Obtains the audio file format of the URL provided.  The URL must
                  point to valid audio file data.                
                <param>
                    url the URL from which file format information should be
                      extracted                    
                </param>
                <return>
                    an <code>AudioFileFormat</code> object describing the audio file format                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the URL does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="74">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="urlStream" type="InputStream" line="75"/>
                <declaration name="fileFormat" type="AudioFileFormat" line="76"/>
                <scope line="77"/>
                <scope line="80"/>
            </method>
            <javadoc line="85">
                Obtains the audio file format of the File provided.  The File must
                  point to valid audio file data.                
                <param>
                    file the File from which file format information should be
                      extracted                    
                </param>
                <return>
                    an <code>AudioFileFormat</code> object describing the audio file format                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the File does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="95">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="fileFormat" type="AudioFileFormat" line="96"/>
                <declaration name="fis" type="FileInputStream" line="97"/>
                <scope line="98"/>
                <scope line="101"/>
            </method>
            <javadoc line="106">
                Obtains an audio stream from the input stream provided.  The stream must
                  point to valid audio file data.  In general, audio file providers may
                  need to read some data from the stream before determining whether they
                  support it.  These parsers must
                  be able to mark the stream, read enough data to determine whether they
                  support the stream, and, if not, reset the stream&apos;s read pointer to its original
                  position.  If the input stream does not support this, this method may fail
                  with an IOException.                
                <param>
                    stream the input stream from which the <code>AudioInputStream</code> should be
                      constructed                    
                </param>
                <return>
                    an <code>AudioInputStream</code> object based on the audio file data contained
                      in the input stream.                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the stream does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
                <see>
                    InputStream#markSupported                    
                </see>
                <see>
                    InputStream#mark                    
                </see>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="125">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <declaration name="fileFormat" type="AudioFileFormat" line="126"/>
            </method>
            <javadoc line="129">
                Obtains an audio stream from the URL provided.  The URL must
                  point to valid audio file data.                
                <param>
                    url the URL for which the <code>AudioInputStream</code> should be
                      constructed                    
                </param>
                <return>
                    an <code>AudioInputStream</code> object based on the audio file data pointed
                      to by the URL                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the URL does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="140">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="urlStream" type="InputStream" line="141"/>
                <declaration name="fileFormat" type="AudioFileFormat" line="142"/>
                <scope line="143"/>
                <scope line="146">
                    <scope line="147"/>
                </scope>
            </method>
            <javadoc line="153">
                Obtains an audio stream from the File provided.  The File must
                  point to valid audio file data.                
                <param>
                    file the File for which the <code>AudioInputStream</code> should be
                      constructed                    
                </param>
                <return>
                    an <code>AudioInputStream</code> object based on the audio file data pointed
                      to by the File                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the File does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="164">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="fis" type="FileInputStream" line="165"/>
                <declaration name="fileFormat" type="AudioFileFormat" line="166"/>
                <scope line="167"/>
                <scope line="170">
                    <scope line="171"/>
                </scope>
            </method>
            <method name="getFMT" type="AudioFileFormat" line="177">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="doReset" type="boolean"/>
                </params>
                <declaration name="bytesRead" type="int" line="178"/>
                <declaration name="nread" type="int" line="179"/>
                <declaration name="fmt" type="int" line="180"/>
                <declaration name="length" type="int" line="181"/>
                <declaration name="wav_type" type="int" line="182"/>
                <declaration name="channels" type="short" line="183"/>
                <declaration name="sampleRate" type="long" line="184"/>
                <declaration name="avgBytesPerSec" type="long" line="185"/>
                <declaration name="blockAlign" type="short" line="186"/>
                <declaration name="sampleSizeInBits" type="int" line="187"/>
                <declaration name="encoding" type="AudioFormat.Encoding" line="188"/>
                <declaration name="dis" type="DataInputStream" line="189"/>
                <scope line="190"/>
                <declaration name="magic" type="int" line="193"/>
                <declaration name="fileLength" type="int" line="194"/>
                <declaration name="waveMagic" type="int" line="195"/>
                <declaration name="totallength" type="int" line="196"/>
                <scope line="197"/>
                <scope line="201"/>
                <scope line="204">
                    <scope line="205"/>
                </scope>
                <scope line="210">
                    <scope line="211">
                        <scope line="214"/>
                        <scope line="217"/>
                    </scope>
                    <scope line="224"/>
                </scope>
                <declaration name="endLength" type="int" line="230"/>
                <scope line="236"/>
                <scope line="253">
                    <scope line="254">
                        <declaration name="datahdr" type="int" line="255"/>
                        <scope line="257"/>
                        <scope line="260">
                            <declaration name="thisLength" type="int" line="261"/>
                        </scope>
                    </scope>
                    <scope line="267"/>
                </scope>
                <declaration name="dataLength" type="int" line="271"/>
                <declaration name="format" type="AudioFormat" line="273"/>
            </method>
        </class>
    </source>