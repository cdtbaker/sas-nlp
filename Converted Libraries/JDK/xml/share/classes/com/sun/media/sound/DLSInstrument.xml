<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="javax.sound.midi.Patch"/>
        <class name="DLSInstrument" line="35">
            <extends class="ModelInstrument"/>
            <javadoc line="35">
                This class is used to store information to describe instrument.
                  It contains list of regions and modulators.
                  It is stored inside a &quot;ins &quot; List Chunk inside DLS files.
                  In the DLS documentation a modulator is called articulator.                
                <author>
                    Karl Helgason                    
                </author>
            </javadoc>
            <declaration name="preset" type="int" line="45"/>
            <declaration name="bank" type="int" line="46"/>
            <declaration name="druminstrument" type="boolean" line="47"/>
            <declaration name="guid" type="byte[]" line="48"/>
            <declaration name="info" type="DLSInfo" line="49"/>
            <declaration name="regions" type="List&lt;DLSRegion&gt;" line="50"/>
            <declaration name="modulators" type="List&lt;DLSModulator&gt;" line="51"/>
            <method name="DLSInstrument" type="constructor" line="53"/>
            <method name="DLSInstrument" type="constructor" line="57">
                <params>
                    <param name="soundbank" type="DLSSoundbank"/>
                </params>
            </method>
            <method name="getInfo" type="DLSInfo" line="61"/>
            <method name="getName" type="String" line="65"/>
            <method name="setName" type="void" line="69">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getPatch" type="ModelPatch" line="73"/>
            <method name="setPatch" type="void" line="77">
                <params>
                    <param name="patch" type="Patch"/>
                </params>
                <scope line="78"/>
                <scope line="82"/>
            </method>
            <method name="getData" type="Object" line="89"/>
            <method name="getRegions" type="List<DLSRegion>" line="93"/>
            <method name="getModulators" type="List<DLSModulator>" line="97"/>
            <method name="toString" type="String" line="101"/>
            <method name="convertToModelDest" type="ModelIdentifier" line="110">
                <params>
                    <param name="dest" type="int"/>
                </params>
                <comment line="143">
                    DLS2 Destinations                    
                </comment>
            </method>
            <method name="convertToModelSrc" type="ModelIdentifier" line="177">
                <params>
                    <param name="src" type="int"/>
                </params>
            </method>
            <method name="convertToModel" type="ModelConnectionBlock" line="223">
                <params>
                    <param name="mod" type="DLSModulator"/>
                </params>
                <comment line="273">
                    if (mod.getTransform() ==  DLSModulator.CONN_TRN_CONCAVE) {                    
                </comment>
                <comment line="274">
                    ((ModelStandardTransform)destination.getTransform())                    
                </comment>
                <comment line="275">
                    .setTransform(                    
                </comment>
                <comment line="276">
                    ModelStandardTransform.TRANSFORM_CONCAVE);                    
                </comment>
                <comment line="277">
                    }                    
                </comment>
                <comment line="340">
                    No output transforms are defined the DLS Level 2
                    int out_transform = transform % 8;
                    int trans = ModelStandardTransform.TRANSFORM_LINEAR;
                    if (out_transform == DLSModulator.CONN_TRN_SWITCH)
                    trans = ModelStandardTransform.TRANSFORM_SWITCH;
                    if (out_transform == DLSModulator.CONN_TRN_CONCAVE)
                    trans = ModelStandardTransform.TRANSFORM_CONCAVE;
                    if (out_transform == DLSModulator.CONN_TRN_CONVEX)
                    trans = ModelStandardTransform.TRANSFORM_CONVEX;
                    if (ctrl != null) {
                    ((ModelStandardTransform)destination.getTransform())
                    .setTransform(trans);
                    }                    
                </comment>
                <declaration name="source" type="ModelIdentifier" line="224"/>
                <declaration name="control" type="ModelIdentifier" line="225"/>
                <declaration name="destination_id" type="ModelIdentifier" line="226"/>
                <declaration name="scale" type="int" line="229"/>
                <declaration name="f_scale" type="double" line="230"/>
                <scope line="236">
                    <declaration name="src" type="ModelSource" line="237"/>
                    <declaration name="ctrl" type="ModelSource" line="238"/>
                    <declaration name="block" type="ModelConnectionBlock" line="239"/>
                    <scope line="240">
                        <declaration name="s" type="ModelSource" line="241"/>
                        <scope line="242"/>
                        <scope line="246"/>
                    </scope>
                    <scope line="254">
                        <declaration name="s" type="ModelSource" line="255"/>
                        <scope line="256"/>
                        <scope line="260"/>
                    </scope>
                    <declaration name="destination" type="ModelDestination" line="268"/>
                    <scope line="272">
                        <scope line="278">
                            <scope line="279"/>
                            <scope line="287"/>
                        </scope>
                    </scope>
                    <scope line="297">
                        <declaration name="transform" type="int" line="298"/>
                        <declaration name="src_transform_invert" type="int" line="299"/>
                        <declaration name="src_transform_bipolar" type="int" line="300"/>
                        <declaration name="src_transform" type="int" line="301"/>
                        <declaration name="ctr_transform_invert" type="int" line="302"/>
                        <declaration name="ctr_transform_bipolar" type="int" line="303"/>
                        <declaration name="ctr_transform" type="int" line="304"/>
                        <scope line="307">
                            <declaration name="trans" type="int" line="308"/>
                        </scope>
                        <scope line="324">
                            <declaration name="trans" type="int" line="325"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getPerformers" type="ModelPerformer[]" line="365">
                <declaration name="performers" type="List&lt;ModelPerformer&gt;" line="366"/>
                <declaration name="modmap" type="Map&lt;String,DLSModulator&gt;" line="368"/>
                <scope line="369"/>
                <declaration name="insmodmap" type="Map&lt;String,DLSModulator&gt;" line="374"/>
                <scope line="377">
                    <declaration name="performer" type="ModelPerformer" line="378"/>
                    <scope line="390"/>
                    <declaration name="blocks" type="List&lt;ModelConnectionBlock&gt;" line="395"/>
                    <scope line="396">
                        <declaration name="p" type="ModelConnectionBlock" line="397"/>
                    </scope>
                    <declaration name="sample" type="DLSSample" line="403"/>
                    <declaration name="sampleopt" type="DLSSampleOptions" line="404"/>
                    <declaration name="buff" type="ModelByteBuffer" line="408"/>
                    <declaration name="pitchcorrection" type="float" line="410"/>
                    <declaration name="osc" type="ModelByteBufferWavetable" line="413"/>
                    <scope line="416">
                        <declaration name="loop" type="DLSSampleLoop" line="417"/>
                    </scope>
                </scope>
            </method>
            <method name="getGuid" type="byte[]" line="442"/>
            <method name="setGuid" type="void" line="446">
                <params>
                    <param name="guid" type="byte[]"/>
                </params>
            </method>
        </class>
    </source>