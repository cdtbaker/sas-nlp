<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Vector"/>
        <import package="javax.sound.sampled"/>
        <class name="DirectAudioDevice" line="40">
            <extends class="AbstractMixer"/>
            <comment line="48">
                CONSTANTS                
            </comment>
            <comment line="49">
                in milliseconds                
            </comment>
            <comment line="51">
                in milliseconds                
            </comment>
            <comment line="53">
                INSTANCE VARIABLES                
            </comment>
            <comment line="61">
                CONSTRUCTOR                
            </comment>
            <comment line="170">
                ABSTRACT MIXER: ABSTRACT METHOD IMPLEMENTATIONS                
            </comment>
            <comment line="255">
                IMPLEMENTATION HELPERS                
            </comment>
            <comment line="326">
                INNER CLASSES                
            </comment>
            <comment line="916">
                class DirectDL                
            </comment>
            <comment line="1440">
                DirectClip                
            </comment>
            <comment line="1442">
                private inner class representing a ByteArrayOutputStream
                 which allows retrieval of the internal array                
            </comment>
            <comment line="1455">
                class DirectBAOS                
            </comment>
            <comment line="1480">
                javaPos is number of bytes read/written in Java layer                
            </comment>
            <comment line="1484">
                returns if the native implementation needs regular calls to nService()                
            </comment>
            <comment line="1486">
                called in irregular intervals                
            </comment>
            <javadoc line="40">
                A Mixer which provides direct access to audio devices                
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="CLIP_BUFFER_TIME" type="int" line="48"/>
            <declaration name="DEFAULT_LINE_BUFFER_TIME" type="int" line="50"/>
            <declaration name="deviceCountOpened" type="int" line="54"/>
            <javadoc line="54">
                number of opened lines                
            </javadoc>
            <declaration name="deviceCountStarted" type="int" line="57"/>
            <javadoc line="57">
                number of started lines                
            </javadoc>
            <method name="DirectAudioDevice" type="constructor" line="61">
                <params>
                    <param name="portMixerInfo" type="DirectAudioDeviceProvider.DirectAudioDeviceInfo"/>
                </params>
                <comment line="63">
                    pass in Line.Info, mixer, controls                    
                </comment>
                <comment line="64">
                    Mixer.Info                    
                </comment>
                <comment line="65">
                    Control[]                    
                </comment>
                <comment line="66">
                    Line.Info[] sourceLineInfo                    
                </comment>
                <comment line="67">
                    Line.Info[] targetLineInfo                    
                </comment>
                <comment line="71">
                    source lines                    
                </comment>
                <comment line="75">
                    SourcedataLine                    
                </comment>
                <comment line="77">
                    Clip                    
                </comment>
                <comment line="80">
                    arbitrary minimum buffer size                    
                </comment>
                <comment line="86">
                    TargetDataLine                    
                </comment>
                <declaration name="srcLineInfo" type="DirectDLI" line="71"/>
                <scope line="72"/>
                <scope line="81"/>
                <declaration name="dstLineInfo" type="DataLine.Info" line="86"/>
                <scope line="87"/>
                <scope line="90"/>
            </method>
            <method name="createDataLineInfo" type="DirectDLI" line="96">
                <params>
                    <param name="isSource" type="boolean"/>
                </params>
                <comment line="104">
                                        
                </comment>
                <comment line="117">
                    will insert a magically converted format here                    
                </comment>
                <comment line="129">
                    add convenience formats (automatic conversion)                    
                </comment>
                <comment line="131">
                    add the other signed&apos;ness for 8-bit                    
                </comment>
                <comment line="147">
                    add the other endian&apos;ness for more than 8-bit                    
                </comment>
                <comment line="156">
                    System.out.println(&quot;Adding &quot;+v.get(v.size()-1));                    
                </comment>
                <comment line="160">
                    todo: find out more about the buffer size ?                    
                </comment>
                <comment line="164">
                    arbitrary minimum buffer size                    
                </comment>
                <declaration name="formats" type="Vector" line="97"/>
                <declaration name="hardwareFormatArray" type="AudioFormat[]" line="98"/>
                <declaration name="formatArray" type="AudioFormat[]" line="99"/>
                <scope line="101">
                    <scope line="105">
                        <declaration name="size" type="int" line="106"/>
                        <declaration name="formatArraySize" type="int" line="107"/>
                        <scope line="109">
                            <declaration name="format" type="AudioFormat" line="110"/>
                            <declaration name="bits" type="int" line="112"/>
                            <declaration name="isSigned" type="boolean" line="113"/>
                            <declaration name="isUnsigned" type="boolean" line="114"/>
                            <scope line="115"/>
                        </scope>
                        <declaration name="formatArrayIndex" type="int" line="121"/>
                        <scope line="122">
                            <declaration name="format" type="AudioFormat" line="123"/>
                            <declaration name="bits" type="int" line="125"/>
                            <declaration name="isSigned" type="boolean" line="126"/>
                            <declaration name="isUnsigned" type="boolean" line="127"/>
                            <scope line="129">
                                <scope line="131"/>
                                <scope line="138"/>
                            </scope>
                            <scope line="145"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="160"/>
            </method>
            <method name="getLine" type="Line" line="171">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <comment line="183">
                    if a format is specified by the info class passed in, use it.
                     otherwise use a format from fullInfo.                    
                </comment>
                <comment line="194">
                    use the default format                    
                </comment>
                <comment line="197">
                    use the last format specified in the line.info object passed
                     in by the app                    
                </comment>
                <comment line="201">
                    if something is not specified, use default format                    
                </comment>
                <declaration name="fullInfo" type="Line.Info" line="172"/>
                <scope line="173"/>
                <scope line="176">
                    <declaration name="dataLineInfo" type="DataLine.Info" line="178"/>
                    <declaration name="lineFormat" type="AudioFormat" line="179"/>
                    <declaration name="lineBufferSize" type="int" line="180"/>
                    <declaration name="supportedFormats" type="AudioFormat[]" line="185"/>
                    <scope line="187"/>
                    <scope line="192"/>
                    <scope line="195">
                        <scope line="201"/>
                    </scope>
                    <scope line="206"/>
                    <scope line="209"/>
                    <scope line="212"/>
                </scope>
            </method>
            <method name="getMaxLines" type="int" line="220">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <comment line="224">
                    if it&apos;s not supported at all, return 0.                    
                </comment>
                <comment line="230">
                    DirectAudioDevices should mix !                    
                </comment>
                <declaration name="fullInfo" type="Line.Info" line="221"/>
                <scope line="224"/>
                <scope line="228"/>
            </method>
            <method name="implOpen" type="void" line="237"/>
            <method name="implClose" type="void" line="241"/>
            <method name="implStart" type="void" line="245"/>
            <method name="implStop" type="void" line="249"/>
            <method name="getMixerIndex" type="int" line="256"/>
            <method name="getDeviceID" type="int" line="260"/>
            <method name="getMaxSimulLines" type="int" line="264"/>
            <method name="addFormat" type="void" line="269">
                <params>
                    <param name="v" type="Vector"/>
                    <param name="bits" type="int"/>
                    <param name="frameSizeInBytes" type="int"/>
                    <param name="channels" type="int"/>
                    <param name="sampleRate" type="float"/>
                    <param name="encoding" type="int"/>
                    <param name="signed" type="boolean"/>
                    <param name="bigEndian" type="boolean"/>
                </params>
                <declaration name="enc" type="AudioFormat.Encoding" line="270"/>
                <scope line="277"/>
                <scope line="284"/>
                <scope line="290"/>
                <scope line="294">
                    <scope line="295"/>
                    <scope line="297"/>
                </scope>
            </method>
            <method name="getSignOrEndianChangedFormat" type="AudioFormat" line="304">
                <params>
                    <param name="format" type="AudioFormat"/>
                </params>
                <comment line="309">
                    if this is PCM_SIGNED and 16-bit or higher, then try with endian-ness magic                    
                </comment>
                <comment line="315">
                    if this is PCM and 8-bit, then try with signed-ness magic                    
                </comment>
                <declaration name="isSigned" type="boolean" line="305"/>
                <declaration name="isUnsigned" type="boolean" line="306"/>
                <scope line="307"/>
                <scope line="313"/>
            </method>
            <class name="DirectDLI" line="328">
                <extends class="DataLine.Info"/>
                <comment line="359">
                    public boolean isFormatSupported(AudioFormat format) {
                       return isFormatSupportedInHardware(format)
                          || isFormatSupportedInHardware(getSignOrEndianChangedFormat(format));
                    }                    
                </comment>
                <comment line="379">
                    true for SourceDataLine, false for TargetDataLine                    
                </comment>
                <comment line="381">
                    true in between start() and stop() calls                    
                </comment>
                <comment line="382">
                    true if a write occured in stopped state                    
                </comment>
                <comment line="383">
                    set to true when drain function returns, set to false in write()                    
                </comment>
                <comment line="386">
                    if native needs to manually swap samples/convert sign, this
                     is set to the framesize                    
                </comment>
                <comment line="396">
                    do not run the nService method                    
                </comment>
                <comment line="398">
                    Guards all native calls.                    
                </comment>
                <comment line="401">
                    CONSTRUCTOR                    
                </comment>
                <comment line="419">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="421">
                    ABSTRACT LINE / DATALINE                    
                </comment>
                <comment line="629">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="702">
                    replacement for getFramePosition (see AbstractDataLine)                    
                </comment>
                <comment line="718">
                    write() belongs into SourceDataLine and Clip,
                     so define it here and make it accessible by
                     declaring the respective interfaces with DirectSDL and DirectClip                    
                </comment>
                <comment line="789">
                    called from event dispatcher for lines that need servicing                    
                </comment>
                <comment line="831">
                    ///////////////// CONTROLS /////////////////////////////                    
                </comment>
                <comment line="863">
                    class Gain                    
                </comment>
                <comment line="876">
                    class Mute                    
                </comment>
                <comment line="895">
                    class Balance                    
                </comment>
                <comment line="912">
                    class Pan                    
                </comment>
                <comment line="924">
                    CONSTRUCTOR                    
                </comment>
                <comment line="940">
                    CONSTRUCTOR                    
                </comment>
                <comment line="949">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="1019">
                    size of one frame in bytes                    
                </comment>
                <comment line="1022">
                    index in the audioData array at current playback                    
                </comment>
                <comment line="1023">
                    set in setFramePosition()                    
                </comment>
                <comment line="1025">
                    the last sample included in the loop                    
                </comment>
                <comment line="1027">
                    auto closing clip support                    
                </comment>
                <comment line="1030">
                    CONSTRUCTOR                    
                </comment>
                <comment line="1039">
                    CLIP METHODS                    
                </comment>
                <comment line="1052">
                    this method does not copy the data array                    
                </comment>
                <comment line="1228">
                    replacement for getFramePosition (see AbstractDataLine)                    
                </comment>
                <comment line="1291">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="1293">
                    ABSTRACT LINE                    
                </comment>
                <comment line="1352">
                    main playback loop                    
                </comment>
                <comment line="1411">
                    AUTO CLOSING CLIP SUPPORT                    
                </comment>
                <comment line="1413">
                    $$mp 2003-10-01
                    The following two methods are common between this class and
                    MixerClip. They should be moved to a base class, together                    
                </comment>
                <javadoc line="328">
                    Private inner class for the DataLine.Info objects
                      adds a little magic for the isFormatSupported so
                      that the automagic conversion of endianness and sign
                      does not show up in the formats array.
                      I.e. the formats array contains only the formats
                      that are really supported by the hardware,
                      but isFormatSupported() also returns true
                      for formats with wrong endianness.                    
                </javadoc>
                <declaration name="hardwareFormats" type="AudioFormat[]" line="339"/>
                <method name="DirectDLI" type="constructor" line="343">
                    <params>
                        <param name="clazz" type="Class"/>
                        <param name="formatArray" type="AudioFormat[]"/>
                        <param name="hardwareFormatArray" type="AudioFormat[]"/>
                        <param name="minBuffer" type="int"/>
                        <param name="maxBuffer" type="int"/>
                    </params>
                </method>
                <method name="isFormatSupportedInHardware" type="boolean" line="348">
                    <params>
                        <param name="format" type="AudioFormat"/>
                    </params>
                    <scope line="350">
                        <scope line="351"/>
                    </scope>
                </method>
                <method name="getHardwareFormats" type="AudioFormat[]" line="364"/>
            </class>
            <class name="DirectDL" line="369">
                <extends class="AbstractDataLine"/>
                <comment line="359">
                    public boolean isFormatSupported(AudioFormat format) {
                       return isFormatSupportedInHardware(format)
                          || isFormatSupportedInHardware(getSignOrEndianChangedFormat(format));
                    }                    
                </comment>
                <comment line="379">
                    true for SourceDataLine, false for TargetDataLine                    
                </comment>
                <comment line="381">
                    true in between start() and stop() calls                    
                </comment>
                <comment line="382">
                    true if a write occured in stopped state                    
                </comment>
                <comment line="383">
                    set to true when drain function returns, set to false in write()                    
                </comment>
                <comment line="386">
                    if native needs to manually swap samples/convert sign, this
                     is set to the framesize                    
                </comment>
                <comment line="396">
                    do not run the nService method                    
                </comment>
                <comment line="398">
                    Guards all native calls.                    
                </comment>
                <comment line="401">
                    CONSTRUCTOR                    
                </comment>
                <comment line="419">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="421">
                    ABSTRACT LINE / DATALINE                    
                </comment>
                <comment line="629">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="702">
                    replacement for getFramePosition (see AbstractDataLine)                    
                </comment>
                <comment line="718">
                    write() belongs into SourceDataLine and Clip,
                     so define it here and make it accessible by
                     declaring the respective interfaces with DirectSDL and DirectClip                    
                </comment>
                <comment line="789">
                    called from event dispatcher for lines that need servicing                    
                </comment>
                <comment line="831">
                    ///////////////// CONTROLS /////////////////////////////                    
                </comment>
                <comment line="863">
                    class Gain                    
                </comment>
                <comment line="876">
                    class Mute                    
                </comment>
                <comment line="895">
                    class Balance                    
                </comment>
                <comment line="912">
                    class Pan                    
                </comment>
                <comment line="924">
                    CONSTRUCTOR                    
                </comment>
                <comment line="940">
                    CONSTRUCTOR                    
                </comment>
                <comment line="949">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="1019">
                    size of one frame in bytes                    
                </comment>
                <comment line="1022">
                    index in the audioData array at current playback                    
                </comment>
                <comment line="1023">
                    set in setFramePosition()                    
                </comment>
                <comment line="1025">
                    the last sample included in the loop                    
                </comment>
                <comment line="1027">
                    auto closing clip support                    
                </comment>
                <comment line="1030">
                    CONSTRUCTOR                    
                </comment>
                <comment line="1039">
                    CLIP METHODS                    
                </comment>
                <comment line="1052">
                    this method does not copy the data array                    
                </comment>
                <comment line="1228">
                    replacement for getFramePosition (see AbstractDataLine)                    
                </comment>
                <comment line="1291">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="1293">
                    ABSTRACT LINE                    
                </comment>
                <comment line="1352">
                    main playback loop                    
                </comment>
                <comment line="1411">
                    AUTO CLOSING CLIP SUPPORT                    
                </comment>
                <comment line="1413">
                    $$mp 2003-10-01
                    The following two methods are common between this class and
                    MixerClip. They should be moved to a base class, together                    
                </comment>
                <implements interface="EventDispatcher.LineMonitor"/>
                <javadoc line="369">
                    Private inner class as base class for direct lines                    
                </javadoc>
                <declaration name="mixerIndex" type="int" line="373"/>
                <declaration name="deviceID" type="int" line="374"/>
                <declaration name="id" type="long" line="375"/>
                <declaration name="waitTime" type="int" line="376"/>
                <declaration name="flushing" type="boolean" line="377"/>
                <declaration name="isSource" type="boolean" line="378"/>
                <declaration name="bytePosition" type="long" line="379"/>
                <declaration name="doIO" type="boolean" line="380"/>
                <declaration name="stoppedWritten" type="boolean" line="381"/>
                <declaration name="drained" type="boolean" line="382"/>
                <declaration name="monitoring" type="boolean" line="383"/>
                <declaration name="softwareConversionSize" type="int" line="387"/>
                <declaration name="hardwareFormat" type="AudioFormat" line="388"/>
                <declaration name="gainControl" type="Gain" line="390"/>
                <declaration name="muteControl" type="Mute" line="391"/>
                <declaration name="balanceControl" type="Balance" line="392"/>
                <declaration name="panControl" type="Pan" line="393"/>
                <declaration name="leftGain" type="float" line="394"/>
                <declaration name="noService" type="boolean" line="395"/>
                <declaration name="lockNative" type="Object" line="398"/>
                <method name="DirectDL" type="constructor" line="407">
                    <params>
                        <param name="info" type="DataLine.Info"/>
                        <param name="mixer" type="DirectAudioDevice"/>
                        <param name="format" type="AudioFormat"/>
                        <param name="bufferSize" type="int"/>
                        <param name="mixerIndex" type="int"/>
                        <param name="deviceID" type="int"/>
                        <param name="isSource" type="boolean"/>
                    </params>
                    <comment line="413">
                        10 milliseconds default wait time                        
                    </comment>
                </method>
                <method name="implOpen" type="void" line="422">
                    <params>
                        <param name="format" type="AudioFormat"/>
                        <param name="bufferSize" type="int"/>
                    </params>
                    <comment line="426">
                        $$fb part of fix for 4679187: Clip.open() throws unexpected Exceptions                        
                    </comment>
                    <comment line="429">
                        check for record permission                        
                    </comment>
                    <comment line="450">
                                                
                    </comment>
                    <comment line="454">
                        no controls for non-PCM formats */                        
                    </comment>
                    <comment line="459">
                        no support for more than 2 channels or more than 16 bits                        
                    </comment>
                    <comment line="467">
                        to keep compatibility with apps that rely on
                         MixerSourceLine&apos;s PanControl                        
                    </comment>
                    <comment line="480">
                                                
                    </comment>
                    <comment line="485">
                        apparently, the new format can be used.                        
                    </comment>
                    <comment line="487">
                        So do endian/sign conversion in software                        
                    </comment>
                    <comment line="498">
                        align buffer to full frames                        
                    </comment>
                    <comment line="513">
                        TODO: nicer error messages...                        
                    </comment>
                    <comment line="520">
                        this is an error!                        
                    </comment>
                    <comment line="524">
                        wait time = 1/4 of buffer time                        
                    </comment>
                    <comment line="530">
                        we have seen large buffer sizes!
                         never wait for more than a second                        
                    </comment>
                    <scope line="429"/>
                    <declaration name="encoding" type="int" line="432"/>
                    <scope line="433"/>
                    <scope line="436"/>
                    <scope line="440"/>
                    <declaration name="ddli" type="DirectDLI" line="444"/>
                    <scope line="445"/>
                    <scope line="450">
                        <scope line="452"/>
                        <scope line="457"/>
                        <scope line="460">
                            <scope line="461"/>
                            <scope line="463"/>
                        </scope>
                    </scope>
                    <scope line="481">
                        <declaration name="newFormat" type="AudioFormat" line="482"/>
                        <scope line="483">
                            <scope line="488"/>
                        </scope>
                    </scope>
                    <scope line="511"/>
                    <scope line="518"/>
                    <scope line="525"/>
                    <scope line="528"/>
                </method>
                <method name="implStart" type="void" line="542">
                    <comment line="546">
                        check for record permission                        
                    </comment>
                    <comment line="555">
                        check for monitoring/servicing                        
                    </comment>
                    <comment line="563">
                        need to set Active and Started
                         note: the current API always requires that
                               Started and Active are set at the same time...                        
                    </comment>
                    <scope line="546"/>
                    <scope line="551"/>
                    <scope line="556"/>
                    <scope line="565"/>
                </method>
                <method name="implStop" type="void" line="573">
                    <comment line="577">
                        check for record permission                        
                    </comment>
                    <comment line="589">
                        wake up any waiting threads                        
                    </comment>
                    <comment line="591">
                        need to set doIO to false before notifying the
                         read/write thread, that&apos;s why isStartedRunning()
                         cannot be used                        
                    </comment>
                    <scope line="577"/>
                    <scope line="581"/>
                    <scope line="585"/>
                    <scope line="589"/>
                </method>
                <method name="implClose" type="void" line="603">
                    <comment line="607">
                        check for record permission                        
                    </comment>
                    <comment line="612">
                        be sure to remove this monitor                        
                    </comment>
                    <scope line="607"/>
                    <scope line="612"/>
                    <declaration name="oldID" type="long" line="618"/>
                    <scope line="620"/>
                </method>
                <method name="available" type="int" line="630">
                    <scope line="631"/>
                    <declaration name="a" type="int" line="634"/>
                    <scope line="635"/>
                </method>
                <method name="drain" type="void" line="642">
                    <comment line="645">
                        additional safeguard against draining forever
                         this occured on Solaris 8 x86, probably due to a bug
                         in the audio driver                        
                    </comment>
                    <comment line="656">
                        check every now and then for a new position                        
                    </comment>
                    <comment line="661">
                        when some time elapsed, check that the frame position
                         really changed                        
                    </comment>
                    <declaration name="counter" type="int" line="647"/>
                    <declaration name="startPos" type="long" line="648"/>
                    <declaration name="posChanged" type="boolean" line="649"/>
                    <scope line="650">
                        <scope line="651"/>
                        <scope line="656">
                            <declaration name="thisFramePos" type="long" line="657"/>
                            <scope line="659">
                                <scope line="662"/>
                            </scope>
                        </scope>
                        <scope line="671">
                            <scope line="672"/>
                            <scope line="674"/>
                        </scope>
                    </scope>
                    <scope line="678"/>
                </method>
                <method name="flush" type="void" line="684">
                    <comment line="687">
                        first stop ongoing read/write method                        
                    </comment>
                    <comment line="694">
                        then flush native buffers                        
                    </comment>
                    <scope line="685">
                        <scope line="688"/>
                        <scope line="691">
                            <scope line="692"/>
                        </scope>
                    </scope>
                </method>
                <method name="getLongFramePosition" type="long" line="702">
                    <comment line="708">
                        hack because ALSA sometimes reports wrong framepos                        
                    </comment>
                    <declaration name="pos" type="long" line="703"/>
                    <scope line="704"/>
                    <scope line="708"/>
                </method>
                <method name="write" type="int" line="722">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <comment line="745">
                        this is not exactly correct... would be nicer
                         if the native sub system sent a callback when IO really starts                        
                    </comment>
                    <comment line="758">
                        error in native layer                        
                    </comment>
                    <scope line="724"/>
                    <scope line="727"/>
                    <scope line="730"/>
                    <scope line="736"/>
                    <scope line="739"/>
                    <scope line="743"/>
                    <declaration name="written" type="int" line="749"/>
                    <scope line="750">
                        <declaration name="thisWritten" type="int" line="751"/>
                        <scope line="752">
                            <scope line="756"/>
                            <scope line="761"/>
                        </scope>
                        <scope line="767">
                            <scope line="769">
                                <scope line="770"/>
                                <scope line="772"/>
                            </scope>
                        </scope>
                        <scope line="774"/>
                    </scope>
                    <scope line="778"/>
                </method>
                <method name="requiresServicing" type="boolean" line="784"/>
                <method name="checkLine" type="void" line="789">
                    <scope line="790">
                        <scope line="795"/>
                    </scope>
                </method>
                <method name="calcVolume" type="void" line="801">
                    <comment line="813">
                        trivial case: only use gain                        
                    </comment>
                    <comment line="817">
                        need to combine gain and balance                        
                    </comment>
                    <comment line="820">
                        left                        
                    </comment>
                    <scope line="802"/>
                    <scope line="805"/>
                    <declaration name="gain" type="float" line="810"/>
                    <scope line="811"/>
                    <scope line="815">
                        <declaration name="bal" type="float" line="817"/>
                        <scope line="818"/>
                        <scope line="822"/>
                    </scope>
                </method>
                <class name="Gain" line="832">
                    <extends class="FloatControl"/>
                    <declaration name="linearGain" type="float" line="834"/>
                    <method name="Gain" type="constructor" line="836"/>
                    <method name="setValue" type="void" line="847">
                        <params>
                            <param name="newValue" type="float"/>
                        </params>
                        <comment line="849">
                            adjust value within range ?? spec says IllegalArgumentException
                            newValue = Math.min(newValue, getMaximum());
                            newValue = Math.max(newValue, getMinimum());                            
                        </comment>
                        <comment line="855">
                            if no exception, commit to our new gain                            
                        </comment>
                        <declaration name="newLinearGain" type="float" line="852"/>
                    </method>
                    <method name="getLinearGain" type="float" line="859"/>
                </class>
                <class name="Mute" line="865">
                    <extends class="BooleanControl"/>
                    <method name="Mute" type="constructor" line="867"/>
                    <method name="setValue" type="void" line="871">
                        <params>
                            <param name="newValue" type="boolean"/>
                        </params>
                    </method>
                </class>
                <class name="Balance" line="877">
                    <extends class="FloatControl"/>
                    <method name="Balance" type="constructor" line="879"/>
                    <method name="setValue" type="void" line="884">
                        <params>
                            <param name="newValue" type="float"/>
                        </params>
                    </method>
                    <method name="setValueImpl" type="void" line="890">
                        <params>
                            <param name="newValue" type="float"/>
                        </params>
                    </method>
                </class>
                <class name="Pan" line="896">
                    <extends class="FloatControl"/>
                    <method name="Pan" type="constructor" line="898"/>
                    <method name="setValue" type="void" line="903">
                        <params>
                            <param name="newValue" type="float"/>
                        </params>
                    </method>
                    <method name="setValueImpl" type="void" line="908">
                        <params>
                            <param name="newValue" type="float"/>
                        </params>
                    </method>
                </class>
            </class>
            <class name="DirectSDL" line="918">
                <extends class="DirectDL"/>
                <comment line="359">
                    public boolean isFormatSupported(AudioFormat format) {
                       return isFormatSupportedInHardware(format)
                          || isFormatSupportedInHardware(getSignOrEndianChangedFormat(format));
                    }                    
                </comment>
                <comment line="379">
                    true for SourceDataLine, false for TargetDataLine                    
                </comment>
                <comment line="381">
                    true in between start() and stop() calls                    
                </comment>
                <comment line="382">
                    true if a write occured in stopped state                    
                </comment>
                <comment line="383">
                    set to true when drain function returns, set to false in write()                    
                </comment>
                <comment line="386">
                    if native needs to manually swap samples/convert sign, this
                     is set to the framesize                    
                </comment>
                <comment line="396">
                    do not run the nService method                    
                </comment>
                <comment line="398">
                    Guards all native calls.                    
                </comment>
                <comment line="401">
                    CONSTRUCTOR                    
                </comment>
                <comment line="419">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="421">
                    ABSTRACT LINE / DATALINE                    
                </comment>
                <comment line="629">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="702">
                    replacement for getFramePosition (see AbstractDataLine)                    
                </comment>
                <comment line="718">
                    write() belongs into SourceDataLine and Clip,
                     so define it here and make it accessible by
                     declaring the respective interfaces with DirectSDL and DirectClip                    
                </comment>
                <comment line="789">
                    called from event dispatcher for lines that need servicing                    
                </comment>
                <comment line="831">
                    ///////////////// CONTROLS /////////////////////////////                    
                </comment>
                <comment line="863">
                    class Gain                    
                </comment>
                <comment line="876">
                    class Mute                    
                </comment>
                <comment line="895">
                    class Balance                    
                </comment>
                <comment line="912">
                    class Pan                    
                </comment>
                <comment line="924">
                    CONSTRUCTOR                    
                </comment>
                <comment line="940">
                    CONSTRUCTOR                    
                </comment>
                <comment line="949">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="1019">
                    size of one frame in bytes                    
                </comment>
                <comment line="1022">
                    index in the audioData array at current playback                    
                </comment>
                <comment line="1023">
                    set in setFramePosition()                    
                </comment>
                <comment line="1025">
                    the last sample included in the loop                    
                </comment>
                <comment line="1027">
                    auto closing clip support                    
                </comment>
                <comment line="1030">
                    CONSTRUCTOR                    
                </comment>
                <comment line="1039">
                    CLIP METHODS                    
                </comment>
                <comment line="1052">
                    this method does not copy the data array                    
                </comment>
                <comment line="1228">
                    replacement for getFramePosition (see AbstractDataLine)                    
                </comment>
                <comment line="1291">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="1293">
                    ABSTRACT LINE                    
                </comment>
                <comment line="1352">
                    main playback loop                    
                </comment>
                <comment line="1411">
                    AUTO CLOSING CLIP SUPPORT                    
                </comment>
                <comment line="1413">
                    $$mp 2003-10-01
                    The following two methods are common between this class and
                    MixerClip. They should be moved to a base class, together                    
                </comment>
                <implements interface="SourceDataLine"/>
                <javadoc line="918">
                    Private inner class representing a SourceDataLine                    
                </javadoc>
                <method name="DirectSDL" type="constructor" line="927">
                    <params>
                        <param name="info" type="DataLine.Info"/>
                        <param name="format" type="AudioFormat"/>
                        <param name="bufferSize" type="int"/>
                        <param name="mixer" type="DirectAudioDevice"/>
                    </params>
                </method>
            </class>
            <class name="DirectTDL" line="934">
                <extends class="DirectDL"/>
                <comment line="359">
                    public boolean isFormatSupported(AudioFormat format) {
                       return isFormatSupportedInHardware(format)
                          || isFormatSupportedInHardware(getSignOrEndianChangedFormat(format));
                    }                    
                </comment>
                <comment line="379">
                    true for SourceDataLine, false for TargetDataLine                    
                </comment>
                <comment line="381">
                    true in between start() and stop() calls                    
                </comment>
                <comment line="382">
                    true if a write occured in stopped state                    
                </comment>
                <comment line="383">
                    set to true when drain function returns, set to false in write()                    
                </comment>
                <comment line="386">
                    if native needs to manually swap samples/convert sign, this
                     is set to the framesize                    
                </comment>
                <comment line="396">
                    do not run the nService method                    
                </comment>
                <comment line="398">
                    Guards all native calls.                    
                </comment>
                <comment line="401">
                    CONSTRUCTOR                    
                </comment>
                <comment line="419">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="421">
                    ABSTRACT LINE / DATALINE                    
                </comment>
                <comment line="629">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="702">
                    replacement for getFramePosition (see AbstractDataLine)                    
                </comment>
                <comment line="718">
                    write() belongs into SourceDataLine and Clip,
                     so define it here and make it accessible by
                     declaring the respective interfaces with DirectSDL and DirectClip                    
                </comment>
                <comment line="789">
                    called from event dispatcher for lines that need servicing                    
                </comment>
                <comment line="831">
                    ///////////////// CONTROLS /////////////////////////////                    
                </comment>
                <comment line="863">
                    class Gain                    
                </comment>
                <comment line="876">
                    class Mute                    
                </comment>
                <comment line="895">
                    class Balance                    
                </comment>
                <comment line="912">
                    class Pan                    
                </comment>
                <comment line="924">
                    CONSTRUCTOR                    
                </comment>
                <comment line="940">
                    CONSTRUCTOR                    
                </comment>
                <comment line="949">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="1019">
                    size of one frame in bytes                    
                </comment>
                <comment line="1022">
                    index in the audioData array at current playback                    
                </comment>
                <comment line="1023">
                    set in setFramePosition()                    
                </comment>
                <comment line="1025">
                    the last sample included in the loop                    
                </comment>
                <comment line="1027">
                    auto closing clip support                    
                </comment>
                <comment line="1030">
                    CONSTRUCTOR                    
                </comment>
                <comment line="1039">
                    CLIP METHODS                    
                </comment>
                <comment line="1052">
                    this method does not copy the data array                    
                </comment>
                <comment line="1228">
                    replacement for getFramePosition (see AbstractDataLine)                    
                </comment>
                <comment line="1291">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="1293">
                    ABSTRACT LINE                    
                </comment>
                <comment line="1352">
                    main playback loop                    
                </comment>
                <comment line="1411">
                    AUTO CLOSING CLIP SUPPORT                    
                </comment>
                <comment line="1413">
                    $$mp 2003-10-01
                    The following two methods are common between this class and
                    MixerClip. They should be moved to a base class, together                    
                </comment>
                <implements interface="TargetDataLine"/>
                <javadoc line="934">
                    Private inner class representing a TargetDataLine                    
                </javadoc>
                <method name="DirectTDL" type="constructor" line="943">
                    <params>
                        <param name="info" type="DataLine.Info"/>
                        <param name="format" type="AudioFormat"/>
                        <param name="bufferSize" type="int"/>
                        <param name="mixer" type="DirectAudioDevice"/>
                    </params>
                </method>
                <method name="read" type="int" line="950">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <comment line="972">
                        this is not exactly correct... would be nicer
                         if the native sub system sent a callback when IO really starts                        
                    </comment>
                    <comment line="983">
                        error in native layer                        
                    </comment>
                    <scope line="952"/>
                    <scope line="955"/>
                    <scope line="958"/>
                    <scope line="964"/>
                    <scope line="967"/>
                    <scope line="970"/>
                    <declaration name="read" type="int" line="976"/>
                    <scope line="977">
                        <declaration name="thisRead" type="int" line="978"/>
                        <scope line="979">
                            <scope line="981"/>
                            <scope line="986"/>
                        </scope>
                        <scope line="992">
                            <scope line="994">
                                <scope line="995"/>
                                <scope line="997"/>
                            </scope>
                        </scope>
                        <scope line="999"/>
                    </scope>
                    <scope line="1003"/>
                </method>
            </class>
            <class name="DirectClip" line="1011">
                <extends class="DirectDL"/>
                <comment line="359">
                    public boolean isFormatSupported(AudioFormat format) {
                       return isFormatSupportedInHardware(format)
                          || isFormatSupportedInHardware(getSignOrEndianChangedFormat(format));
                    }                    
                </comment>
                <comment line="379">
                    true for SourceDataLine, false for TargetDataLine                    
                </comment>
                <comment line="381">
                    true in between start() and stop() calls                    
                </comment>
                <comment line="382">
                    true if a write occured in stopped state                    
                </comment>
                <comment line="383">
                    set to true when drain function returns, set to false in write()                    
                </comment>
                <comment line="386">
                    if native needs to manually swap samples/convert sign, this
                     is set to the framesize                    
                </comment>
                <comment line="396">
                    do not run the nService method                    
                </comment>
                <comment line="398">
                    Guards all native calls.                    
                </comment>
                <comment line="401">
                    CONSTRUCTOR                    
                </comment>
                <comment line="419">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="421">
                    ABSTRACT LINE / DATALINE                    
                </comment>
                <comment line="629">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="702">
                    replacement for getFramePosition (see AbstractDataLine)                    
                </comment>
                <comment line="718">
                    write() belongs into SourceDataLine and Clip,
                     so define it here and make it accessible by
                     declaring the respective interfaces with DirectSDL and DirectClip                    
                </comment>
                <comment line="789">
                    called from event dispatcher for lines that need servicing                    
                </comment>
                <comment line="831">
                    ///////////////// CONTROLS /////////////////////////////                    
                </comment>
                <comment line="863">
                    class Gain                    
                </comment>
                <comment line="876">
                    class Mute                    
                </comment>
                <comment line="895">
                    class Balance                    
                </comment>
                <comment line="912">
                    class Pan                    
                </comment>
                <comment line="924">
                    CONSTRUCTOR                    
                </comment>
                <comment line="940">
                    CONSTRUCTOR                    
                </comment>
                <comment line="949">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="1019">
                    size of one frame in bytes                    
                </comment>
                <comment line="1022">
                    index in the audioData array at current playback                    
                </comment>
                <comment line="1023">
                    set in setFramePosition()                    
                </comment>
                <comment line="1025">
                    the last sample included in the loop                    
                </comment>
                <comment line="1027">
                    auto closing clip support                    
                </comment>
                <comment line="1030">
                    CONSTRUCTOR                    
                </comment>
                <comment line="1039">
                    CLIP METHODS                    
                </comment>
                <comment line="1052">
                    this method does not copy the data array                    
                </comment>
                <comment line="1228">
                    replacement for getFramePosition (see AbstractDataLine)                    
                </comment>
                <comment line="1291">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="1293">
                    ABSTRACT LINE                    
                </comment>
                <comment line="1352">
                    main playback loop                    
                </comment>
                <comment line="1411">
                    AUTO CLOSING CLIP SUPPORT                    
                </comment>
                <comment line="1413">
                    $$mp 2003-10-01
                    The following two methods are common between this class and
                    MixerClip. They should be moved to a base class, together                    
                </comment>
                <implements interface="Clip"/>
                <implements interface="Runnable"/>
                <implements interface="AutoClosingClip"/>
                <javadoc line="1011">
                    Private inner class representing a Clip
                      This clip is realized in software only                    
                </javadoc>
                <declaration name="thread" type="Thread" line="1016"/>
                <declaration name="audioData" type="byte[]" line="1017"/>
                <declaration name="frameSize" type="int" line="1018"/>
                <declaration name="m_lengthInFrames" type="int" line="1019"/>
                <declaration name="loopCount" type="int" line="1020"/>
                <declaration name="clipBytePosition" type="int" line="1021"/>
                <declaration name="newFramePosition" type="int" line="1022"/>
                <declaration name="loopStartFrame" type="int" line="1023"/>
                <declaration name="loopEndFrame" type="int" line="1024"/>
                <declaration name="autoclosing" type="boolean" line="1027"/>
                <method name="DirectClip" type="constructor" line="1033">
                    <params>
                        <param name="info" type="DataLine.Info"/>
                        <param name="format" type="AudioFormat"/>
                        <param name="bufferSize" type="int"/>
                        <param name="mixer" type="DirectAudioDevice"/>
                    </params>
                </method>
                <method name="open" type="void" line="1041">
                    <params>
                        <param name="format" type="AudioFormat"/>
                        <param name="data" type="byte[]"/>
                        <param name="offset" type="int"/>
                        <param name="bufferSize" type="int"/>
                    </params>
                    <comment line="1044">
                        $$fb part of fix for 4679187: Clip.open() throws unexpected Exceptions                        
                    </comment>
                    <declaration name="newData" type="byte[]" line="1046"/>
                </method>
                <method name="open" type="void" line="1053">
                    <params>
                        <param name="format" type="AudioFormat"/>
                        <param name="data" type="byte[]"/>
                        <param name="frameLength" type="int"/>
                    </params>
                    <comment line="1056">
                        $$fb part of fix for 4679187: Clip.open() throws unexpected Exceptions                        
                    </comment>
                    <comment line="1068">
                        if the line is not currently open, try to open it with this format and buffer size                        
                    </comment>
                    <comment line="1072">
                        initialize loop selection with full range                        
                    </comment>
                    <comment line="1075">
                        means: do not set to a new readFramePos                        
                    </comment>
                    <comment line="1078">
                        means: play the clip irrespective of loop points from beginning to end                        
                    </comment>
                    <comment line="1081">
                        use DirectDL&apos;s open method to open it                        
                    </comment>
                    <comment line="1082">
                        one second buffer                        
                    </comment>
                    <comment line="1091">
                        if we got this far, we can instanciate the thread                        
                    </comment>
                    <comment line="1095">
                        name                        
                    </comment>
                    <comment line="1096">
                        daemon                        
                    </comment>
                    <comment line="1097">
                        priority                        
                    </comment>
                    <comment line="1098">
                        doStart                        
                    </comment>
                    <comment line="1099">
                        cannot start in createThread, because the thread
                         uses the &quot;thread&quot; variable as indicator if it should
                         continue to run                        
                    </comment>
                    <scope line="1058">
                        <scope line="1063"/>
                        <scope line="1066">
                            <scope line="1079"/>
                            <scope line="1082"/>
                            <scope line="1085"/>
                            <declaration name="priority" type="int" line="1091"/>
                        </scope>
                    </scope>
                    <scope line="1104"/>
                </method>
                <method name="open" type="void" line="1111">
                    <params>
                        <param name="stream" type="AudioInputStream"/>
                    </params>
                    <comment line="1114">
                        $$fb part of fix for 4679187: Clip.open() throws unexpected Exceptions                        
                    </comment>
                    <comment line="1130">
                        read the data from the stream into an array in one fell swoop.                        
                    </comment>
                    <comment line="1147">
                        read data from the stream until we reach the end of the stream
                         we use a slightly modified version of ByteArrayOutputStream
                         to get direct access to the byte array (we don&apos;t want a new array
                         to be allocated)                        
                    </comment>
                    <comment line="1164">
                        while                        
                    </comment>
                    <comment line="1171">
                        now try to open the device                        
                    </comment>
                    <comment line="1175">
                        synchronized                        
                    </comment>
                    <scope line="1116">
                        <declaration name="streamData" type="byte[]" line="1118"/>
                        <scope line="1120"/>
                        <declaration name="lengthInFrames" type="int" line="1124"/>
                        <declaration name="bytesRead" type="int" line="1127"/>
                        <scope line="1128">
                            <declaration name="arraysize" type="int" line="1130"/>
                            <declaration name="bytesRemaining" type="int" line="1133"/>
                            <declaration name="thisRead" type="int" line="1134"/>
                            <scope line="1135">
                                <scope line="1137"/>
                                <scope line="1141"/>
                            </scope>
                        </scope>
                        <scope line="1145">
                            <declaration name="MAX_READ_LIMIT" type="int" line="1150"/>
                            <declaration name="dbaos" type="DirectBAOS" line="1151"/>
                            <declaration name="tmp" type="byte" line="1152"/>
                            <declaration name="thisRead" type="int" line="1153"/>
                            <scope line="1154">
                                <scope line="1156"/>
                                <scope line="1160"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="getFrameLength" type="int" line="1178"/>
                <method name="getMicrosecondLength" type="long" line="1183"/>
                <method name="setFramePosition" type="void" line="1188">
                    <params>
                        <param name="frames" type="int"/>
                    </params>
                    <comment line="1204">
                        fix for failing test050
                         $$fb although getFramePosition should return the number of rendered
                         frames, it is intuitive that setFramePosition will modify that
                         value.                        
                    </comment>
                    <comment line="1210">
                        cease currently playing buffer                        
                    </comment>
                    <comment line="1213">
                        set new native position (if necessary)
                         this must come after the flush!                        
                    </comment>
                    <scope line="1191"/>
                    <scope line="1194"/>
                    <scope line="1197"/>
                    <scope line="1199"/>
                    <scope line="1214"/>
                </method>
                <method name="getLongFramePosition" type="long" line="1228">
                    <comment line="1230">
                        $$fb
                         this would be intuitive, but the definition of getFramePosition
                         is the number of frames rendered since opening the device...
                         That also means that setFramePosition() means something very
                         different from getFramePosition() for Clip.                        
                    </comment>
                    <comment line="1236">
                        take into account the case that a new position was set...
                        if (!doIO &amp;&amp; newFramePosition &gt;= 0) {
                        return newFramePosition;
                        }                        
                    </comment>
                </method>
                <method name="setMicrosecondPosition" type="void" line="1243">
                    <params>
                        <param name="microseconds" type="long"/>
                    </params>
                    <declaration name="frames" type="long" line="1246"/>
                </method>
                <method name="setLoopPoints" type="void" line="1252">
                    <params>
                        <param name="start" type="int"/>
                        <param name="end" type="int"/>
                    </params>
                    <comment line="1270">
                        if the end position is less than the start position, throw IllegalArgumentException                        
                    </comment>
                    <comment line="1275">
                        slight race condition with the run() method, but not a big problem                        
                    </comment>
                    <scope line="1255"/>
                    <scope line="1258"/>
                    <scope line="1262">
                        <scope line="1264"/>
                    </scope>
                    <scope line="1270"/>
                </method>
                <method name="loop" type="void" line="1283">
                    <params>
                        <param name="count" type="int"/>
                    </params>
                    <comment line="1285">
                        note: when count reaches 0, it means that the entire clip
                         will be played, i.e. it will play past the loop end point                        
                    </comment>
                </method>
                <method name="implOpen" type="void" line="1294">
                    <params>
                        <param name="format" type="AudioFormat"/>
                        <param name="bufferSize" type="int"/>
                    </params>
                    <comment line="1296">
                        only if audioData wasn&apos;t set in a calling open(format, byte[], frameSize)
                         this call is allowed.                        
                    </comment>
                    <scope line="1297"/>
                </method>
                <method name="implClose" type="void" line="1303">
                    <comment line="1307">
                        dispose of thread                        
                    </comment>
                    <comment line="1312">
                        wake up the thread if it&apos;s in wait()                        
                    </comment>
                    <comment line="1316">
                        wait for the thread to terminate itself,
                         but max. 2 seconds. Must not be synchronized!                        
                    </comment>
                    <comment line="1323">
                        remove audioData reference and hand it over to gc                        
                    </comment>
                    <comment line="1327">
                        remove this instance from the list of auto closing clips                        
                    </comment>
                    <declaration name="oldThread" type="Thread" line="1307"/>
                    <scope line="1310">
                        <scope line="1312"/>
                        <scope line="1317"/>
                        <scope line="1319"/>
                    </scope>
                </method>
                <method name="implStart" type="void" line="1333"/>
                <method name="implStop" type="void" line="1339">
                    <comment line="1344">
                        reset loopCount field so that playback will be normal with
                         next call to start()                        
                    </comment>
                </method>
                <method name="run" type="void" line="1352">
                    <comment line="1356">
                        doIO is volatile, but we could check it, then get
                         pre-empted while another thread changes doIO and notifies,
                         before we wait (so we sleep in wait forever).                        
                    </comment>
                    <comment line="1381">
                        increases bytePosition                        
                    </comment>
                    <comment line="1383">
                        make sure nobody called setFramePosition, or stop() during the write() call                        
                    </comment>
                    <comment line="1386">
                        since endFrame is the last frame to be played,
                         framePos is after endFrame when all frames, including framePos,
                         are played.                        
                    </comment>
                    <comment line="1390">
                        at end of playback. If looping is on, loop back to the beginning.                        
                    </comment>
                    <comment line="1397">
                        no looping, stop playback                        
                    </comment>
                    <scope line="1354">
                        <scope line="1358">
                            <scope line="1359">
                                <scope line="1360"/>
                                <scope line="1362"/>
                            </scope>
                        </scope>
                        <scope line="1365">
                            <scope line="1366"/>
                            <declaration name="endFrame" type="int" line="1370"/>
                            <scope line="1371"/>
                            <declaration name="framePos" type="long" line="1374"/>
                            <declaration name="toWriteFrames" type="int" line="1375"/>
                            <declaration name="toWriteBytes" type="int" line="1376"/>
                            <scope line="1377"/>
                            <declaration name="written" type="int" line="1380"/>
                            <scope line="1383">
                                <scope line="1388">
                                    <scope line="1390">
                                        <scope line="1391"/>
                                    </scope>
                                    <scope line="1395"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="isAutoClosing" type="boolean" line="1417"/>
                <method name="setAutoClosing" type="void" line="1421">
                    <params>
                        <param name="value" type="boolean"/>
                    </params>
                    <scope line="1422">
                        <scope line="1423">
                            <scope line="1424"/>
                            <scope line="1426"/>
                        </scope>
                    </scope>
                </method>
                <method name="requiresServicing" type="boolean" line="1434">
                    <comment line="1436">
                        no need for servicing for Clips                        
                    </comment>
                </method>
            </class>
            <class name="DirectBAOS" line="1445">
                <extends class="ByteArrayOutputStream"/>
                <comment line="359">
                    public boolean isFormatSupported(AudioFormat format) {
                       return isFormatSupportedInHardware(format)
                          || isFormatSupportedInHardware(getSignOrEndianChangedFormat(format));
                    }                    
                </comment>
                <comment line="379">
                    true for SourceDataLine, false for TargetDataLine                    
                </comment>
                <comment line="381">
                    true in between start() and stop() calls                    
                </comment>
                <comment line="382">
                    true if a write occured in stopped state                    
                </comment>
                <comment line="383">
                    set to true when drain function returns, set to false in write()                    
                </comment>
                <comment line="386">
                    if native needs to manually swap samples/convert sign, this
                     is set to the framesize                    
                </comment>
                <comment line="396">
                    do not run the nService method                    
                </comment>
                <comment line="398">
                    Guards all native calls.                    
                </comment>
                <comment line="401">
                    CONSTRUCTOR                    
                </comment>
                <comment line="419">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="421">
                    ABSTRACT LINE / DATALINE                    
                </comment>
                <comment line="629">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="702">
                    replacement for getFramePosition (see AbstractDataLine)                    
                </comment>
                <comment line="718">
                    write() belongs into SourceDataLine and Clip,
                     so define it here and make it accessible by
                     declaring the respective interfaces with DirectSDL and DirectClip                    
                </comment>
                <comment line="789">
                    called from event dispatcher for lines that need servicing                    
                </comment>
                <comment line="831">
                    ///////////////// CONTROLS /////////////////////////////                    
                </comment>
                <comment line="863">
                    class Gain                    
                </comment>
                <comment line="876">
                    class Mute                    
                </comment>
                <comment line="895">
                    class Balance                    
                </comment>
                <comment line="912">
                    class Pan                    
                </comment>
                <comment line="924">
                    CONSTRUCTOR                    
                </comment>
                <comment line="940">
                    CONSTRUCTOR                    
                </comment>
                <comment line="949">
                    METHOD OVERRIDES                    
                </comment>
                <comment line="1019">
                    size of one frame in bytes                    
                </comment>
                <comment line="1022">
                    index in the audioData array at current playback                    
                </comment>
                <comment line="1023">
                    set in setFramePosition()                    
                </comment>
                <comment line="1025">
                    the last sample included in the loop                    
                </comment>
                <comment line="1027">
                    auto closing clip support                    
                </comment>
                <comment line="1030">
                    CONSTRUCTOR                    
                </comment>
                <comment line="1039">
                    CLIP METHODS                    
                </comment>
                <comment line="1052">
                    this method does not copy the data array                    
                </comment>
                <comment line="1228">
                    replacement for getFramePosition (see AbstractDataLine)                    
                </comment>
                <comment line="1291">
                    ABSTRACT METHOD IMPLEMENTATIONS                    
                </comment>
                <comment line="1293">
                    ABSTRACT LINE                    
                </comment>
                <comment line="1352">
                    main playback loop                    
                </comment>
                <comment line="1411">
                    AUTO CLOSING CLIP SUPPORT                    
                </comment>
                <comment line="1413">
                    $$mp 2003-10-01
                    The following two methods are common between this class and
                    MixerClip. They should be moved to a base class, together                    
                </comment>
                <method name="DirectBAOS" type="constructor" line="1446"/>
                <method name="getInternalBuffer" type="byte[]" line="1450"/>
            </class>
            <method name="nGetFormats" type="void" line="1457"/>
            <method name="nOpen" type="long" line="1460"/>
            <method name="nStart" type="void" line="1469"/>
            <method name="nStop" type="void" line="1470"/>
            <method name="nClose" type="void" line="1471"/>
            <method name="nWrite" type="int" line="1472"/>
            <method name="nRead" type="int" line="1474"/>
            <method name="nGetBufferSize" type="int" line="1475"/>
            <method name="nIsStillDraining" type="boolean" line="1476"/>
            <method name="nFlush" type="void" line="1477"/>
            <method name="nAvailable" type="int" line="1478"/>
            <method name="nGetBytePosition" type="long" line="1480"/>
            <method name="nSetBytePosition" type="void" line="1481"/>
            <method name="nRequiresServicing" type="boolean" line="1484"/>
            <method name="nService" type="void" line="1486"/>
        </class>
    </source>