<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.RandomAccessFile"/>
        <import package="java.io.SequenceInputStream"/>
        <import package="javax.sound.sampled.AudioFileFormat"/>
        <import package="javax.sound.sampled.AudioInputStream"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <class name="AiffFileWriter" line="17">
            <extends class="SunFileWriter"/>
            <javadoc line="17">
                AIFF file writer.                
                <author>
                    Jan Borgersen                    
                </author>
            </javadoc>
            <declaration name="aiffTypes" type="AudioFileFormat.Type" line="22"/>
            <javadoc line="22">
                AIFF type                
            </javadoc>
            <javadoc line="26">
                Constructs a new AiffFileWriter object.                
            </javadoc>
            <method name="AiffFileWriter" type="constructor" line="29"/>
            <method name="getAudioFileTypes" type="AudioFileFormat.Type[]" line="32">
                <params>
                    <param name="stream" type="AudioInputStream"/>
                </params>
                <declaration name="filetypes" type="AudioFileFormat.Type[]" line="33"/>
                <declaration name="format" type="AudioFormat" line="35"/>
                <declaration name="encoding" type="AudioFormat.Encoding" line="36"/>
                <scope line="37"/>
            </method>
            <method name="write" type="int" line="42">
                <params>
                    <param name="stream" type="AudioInputStream"/>
                    <param name="fileType" type="AudioFileFormat.Type"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="aiffFileFormat" type="AiffFileFormat" line="43"/>
                <scope line="44"/>
                <declaration name="bytesWritten" type="int" line="47"/>
            </method>
            <method name="write" type="int" line="50">
                <params>
                    <param name="stream" type="AudioInputStream"/>
                    <param name="fileType" type="AudioFileFormat.Type"/>
                    <param name="out" type="File"/>
                </params>
                <declaration name="aiffFileFormat" type="AiffFileFormat" line="51"/>
                <declaration name="fos" type="FileOutputStream" line="52"/>
                <declaration name="bos" type="BufferedOutputStream" line="53"/>
                <declaration name="bytesWritten" type="int" line="54"/>
                <scope line="56">
                    <declaration name="ssndBlockSize" type="int" line="57"/>
                    <declaration name="aiffLength" type="int" line="58"/>
                    <declaration name="ssndChunkSize" type="int" line="59"/>
                    <declaration name="dataSize" type="long" line="60"/>
                    <declaration name="numFrames" type="int" line="61"/>
                    <declaration name="raf" type="RandomAccessFile" line="62"/>
                </scope>
            </method>
            <javadoc line="73">
                Returns the AudioFileFormat describing the file that will be written from this AudioInputStream.
                  Throws IllegalArgumentException if not supported.                
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="77">
                <params>
                    <param name="type" type="AudioFileFormat.Type"/>
                    <param name="stream" type="AudioInputStream"/>
                </params>
                <declaration name="format" type="AudioFormat" line="78"/>
                <declaration name="fileFormat" type="AiffFileFormat" line="79"/>
                <declaration name="encoding" type="AudioFormat.Encoding" line="80"/>
                <declaration name="streamFormat" type="AudioFormat" line="81"/>
                <declaration name="streamEncoding" type="AudioFormat.Encoding" line="82"/>
                <declaration name="sampleRate" type="float" line="83"/>
                <declaration name="sampleSizeInBits" type="int" line="84"/>
                <declaration name="channels" type="int" line="85"/>
                <declaration name="frameSize" type="int" line="86"/>
                <declaration name="frameRate" type="float" line="87"/>
                <declaration name="fileSize" type="int" line="88"/>
                <declaration name="convert8to16" type="boolean" line="89"/>
                <scope line="90"/>
                <scope line="93">
                    <scope line="94"/>
                    <scope line="99"/>
                </scope>
                <scope line="103"/>
                <scope line="107"/>
                <scope line="112">
                    <scope line="113"/>
                    <scope line="116"/>
                </scope>
                <scope line="120"/>
            </method>
            <method name="writeAiffFile" type="int" line="126">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="aiffFileFormat" type="AiffFileFormat"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="bytesRead" type="int" line="127"/>
                <declaration name="bytesWritten" type="int" line="128"/>
                <declaration name="fileStream" type="InputStream" line="129"/>
                <declaration name="buffer" type="byte" line="130"/>
                <declaration name="maxLength" type="int" line="131"/>
                <scope line="132">
                    <scope line="133">
                        <scope line="134"/>
                        <scope line="139"/>
                    </scope>
                    <scope line="146"/>
                </scope>
            </method>
            <method name="getFileStream" type="InputStream" line="153">
                <params>
                    <param name="aiffFileFormat" type="AiffFileFormat"/>
                    <param name="audioStream" type="InputStream"/>
                </params>
                <declaration name="format" type="AudioFormat" line="154"/>
                <declaration name="streamFormat" type="AudioFormat" line="155"/>
                <declaration name="encoding" type="AudioFormat.Encoding" line="156"/>
                <declaration name="headerSize" type="int" line="157"/>
                <declaration name="fverChunkSize" type="int" line="158"/>
                <declaration name="commChunkSize" type="int" line="159"/>
                <declaration name="aiffLength" type="int" line="160"/>
                <declaration name="ssndChunkSize" type="int" line="161"/>
                <declaration name="ssndOffset" type="int" line="162"/>
                <declaration name="channels" type="short" line="163"/>
                <declaration name="sampleSize" type="short" line="164"/>
                <declaration name="ssndBlockSize" type="int" line="165"/>
                <declaration name="numFrames" type="int" line="166"/>
                <declaration name="dataSize" type="long" line="167"/>
                <scope line="168"/>
                <declaration name="sampleFramesPerSecond" type="float" line="173"/>
                <declaration name="compCode" type="int" line="174"/>
                <declaration name="header" type="byte" line="175"/>
                <declaration name="headerStream" type="ByteArrayInputStream" line="176"/>
                <declaration name="baos" type="ByteArrayOutputStream" line="177"/>
                <declaration name="dos" type="DataOutputStream" line="178"/>
                <declaration name="aiffStream" type="SequenceInputStream" line="179"/>
                <declaration name="codedAudioStream" type="InputStream" line="180"/>
                <scope line="181">
                    <scope line="184"/>
                    <scope line="187">
                        <scope line="188"/>
                    </scope>
                </scope>
            </method>
            <declaration name="DOUBLE_MANTISSA_LENGTH" type="int" line="215"/>
            <declaration name="DOUBLE_EXPONENT_LENGTH" type="int" line="216"/>
            <declaration name="DOUBLE_SIGN_MASK" type="long" line="217"/>
            <declaration name="DOUBLE_EXPONENT_MASK" type="long" line="218"/>
            <declaration name="DOUBLE_MANTISSA_MASK" type="long" line="219"/>
            <declaration name="DOUBLE_EXPONENT_OFFSET" type="int" line="220"/>
            <declaration name="EXTENDED_EXPONENT_OFFSET" type="int" line="221"/>
            <declaration name="EXTENDED_MANTISSA_LENGTH" type="int" line="222"/>
            <declaration name="EXTENDED_EXPONENT_LENGTH" type="int" line="223"/>
            <declaration name="EXTENDED_INTEGER_MASK" type="long" line="224"/>
            <javadoc line="225">
                Extended precision IEEE floating-point conversion routine.                
                <argument>
                    DataOutputStream                    
                </argument>
                <argument>
                    double                    
                </argument>
                <exception>
                    IOException                    
                </exception>
            </javadoc>
            <method name="write_ieee_extended" type="void" line="231">
                <params>
                    <param name="dos" type="DataOutputStream"/>
                    <param name="f" type="float"/>
                </params>
                <declaration name="doubleBits" type="long" line="232"/>
                <declaration name="sign" type="long" line="233"/>
                <declaration name="doubleExponent" type="long" line="234"/>
                <declaration name="doubleMantissa" type="long" line="235"/>
                <declaration name="extendedExponent" type="long" line="236"/>
                <declaration name="extendedMantissa" type="long" line="237"/>
                <declaration name="extendedSign" type="long" line="238"/>
                <declaration name="extendedBits79To64" type="short" line="239"/>
                <declaration name="extendedBits63To0" type="long" line="240"/>
            </method>
        </class>
    </source>