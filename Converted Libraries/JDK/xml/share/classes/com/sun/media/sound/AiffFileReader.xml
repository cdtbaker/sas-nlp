<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.util.Vector"/>
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.EOFException"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.SequenceInputStream"/>
        <import package="javax.sound.sampled.AudioFileFormat"/>
        <import package="javax.sound.sampled.AudioInputStream"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <import package="javax.sound.sampled.UnsupportedAudioFileException"/>
        <class name="AiffFileReader" line="54">
            <extends class="SunFileReader"/>
            <comment line="84">
                METHODS TO IMPLEMENT AudioFileReader                
            </comment>
            <comment line="243">
                --------------------------------------------------------------------                
            </comment>
            <comment line="395">
                HELPER METHODS                
            </comment>
            <javadoc line="54">
                AIFF file reader and writer.                
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Jan Borgersen                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="MAX_READ_LENGTH" type="int" line="63"/>
            <declaration name="types" type="AudioFileFormat.Type" line="66"/>
            <javadoc line="66">
                AIFF parser type                
            </javadoc>
            <javadoc line="74">
                Constructs a new AiffParser object.                
            </javadoc>
            <method name="AiffFileReader" type="constructor" line="77"/>
            <javadoc line="85">
                Obtains the audio file format of the input stream provided.  The stream must
                  point to valid audio file data.  In general, audio file providers may
                  need to read some data from the stream before determining whether they
                  support it.  These parsers must
                  be able to mark the stream, read enough data to determine whether they
                  support the stream, and, if not, reset the stream&apos;s read pointer to its original
                  position.  If the input stream does not support this, this method may fail
                  with an IOException.                
                <param>
                    stream the input stream from which file format information should be
                      extracted                    
                </param>
                <return>
                    an <code>AudioFileFormat</code> object describing the audio file format                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the stream does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
                <see>
                    InputStream#markSupported                    
                </see>
                <see>
                    InputStream#mark                    
                </see>
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="103">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <comment line="104">
                    fix for 4489272: AudioSystem.getAudioFileFormat() fails for InputStream, but works for URL                    
                </comment>
                <comment line="106">
                    the following is not strictly necessary - but was implemented like that in 1.3.0 - 1.4.1                    
                </comment>
                <comment line="107">
                    so I leave it as it was. May remove this for 1.5.0                    
                </comment>
                <declaration name="aff" type="AudioFileFormat" line="105"/>
            </method>
            <javadoc line="113">
                Obtains the audio file format of the URL provided.  The URL must
                  point to valid audio file data.                
                <param>
                    url the URL from which file format information should be
                      extracted                    
                </param>
                <return>
                    an <code>AudioFileFormat</code> object describing the audio file format                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the URL does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="123">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <comment line="125">
                    throws IOException                    
                </comment>
                <declaration name="fileFormat" type="AudioFileFormat" line="124"/>
                <declaration name="urlStream" type="InputStream" line="125"/>
                <scope line="126"/>
                <scope line="128"/>
            </method>
            <javadoc line="135">
                Obtains the audio file format of the File provided.  The File must
                  point to valid audio file data.                
                <param>
                    file the File from which file format information should be
                      extracted                    
                </param>
                <return>
                    an <code>AudioFileFormat</code> object describing the audio file format                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the File does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="145">
                <params>
                    <param name="file" type="File"/>
                </params>
                <comment line="147">
                    throws IOException                    
                </comment>
                <comment line="148">
                    part of fix for 4325421                    
                </comment>
                <declaration name="fileFormat" type="AudioFileFormat" line="146"/>
                <declaration name="fis" type="FileInputStream" line="147"/>
                <scope line="149"/>
                <scope line="151"/>
            </method>
            <javadoc line="161">
                Obtains an audio stream from the input stream provided.  The stream must
                  point to valid audio file data.  In general, audio file providers may
                  need to read some data from the stream before determining whether they
                  support it.  These parsers must
                  be able to mark the stream, read enough data to determine whether they
                  support the stream, and, if not, reset the stream&apos;s read pointer to its original
                  position.  If the input stream does not support this, this method may fail
                  with an IOException.                
                <param>
                    stream the input stream from which the <code>AudioInputStream</code> should be
                      constructed                    
                </param>
                <return>
                    an <code>AudioInputStream</code> object based on the audio file data contained
                      in the input stream.                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the stream does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
                <see>
                    InputStream#markSupported                    
                </see>
                <see>
                    InputStream#mark                    
                </see>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="180">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <comment line="181">
                    getCOMM leaves the input stream at the beginning of the audio data                    
                </comment>
                <comment line="182">
                    throws UnsupportedAudioFileException, IOException                    
                </comment>
                <comment line="184">
                    we&apos;ve got everything, and the stream is at the                    
                </comment>
                <comment line="185">
                    beginning of the audio data, so return an AudioInputStream.                    
                </comment>
                <declaration name="fileFormat" type="AudioFileFormat" line="182"/>
            </method>
            <javadoc line="190">
                Obtains an audio stream from the URL provided.  The URL must
                  point to valid audio file data.                
                <param>
                    url the URL for which the <code>AudioInputStream</code> should be
                      constructed                    
                </param>
                <return>
                    an <code>AudioInputStream</code> object based on the audio file data pointed
                      to by the URL                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the URL does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="201">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <comment line="202">
                    throws IOException                    
                </comment>
                <declaration name="urlStream" type="InputStream" line="202"/>
                <declaration name="fileFormat" type="AudioFileFormat" line="203"/>
                <scope line="204"/>
                <scope line="206">
                    <scope line="207"/>
                </scope>
            </method>
            <javadoc line="215">
                Obtains an audio stream from the File provided.  The File must
                  point to valid audio file data.                
                <param>
                    file the File for which the <code>AudioInputStream</code> should be
                      constructed                    
                </param>
                <return>
                    an <code>AudioInputStream</code> object based on the audio file data pointed
                      to by the File                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the File does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="227">
                <params>
                    <param name="file" type="File"/>
                </params>
                <comment line="229">
                    throws IOException                    
                </comment>
                <comment line="231">
                    part of fix for 4325421                    
                </comment>
                <declaration name="fis" type="FileInputStream" line="229"/>
                <declaration name="fileFormat" type="AudioFileFormat" line="230"/>
                <scope line="232"/>
                <scope line="234">
                    <scope line="235"/>
                </scope>
            </method>
            <method name="getCOMM" type="AudioFileFormat" line="245">
                <params>
                    <param name="is" type="InputStream"/>
                    <param name="doReset" type="boolean"/>
                </params>
                <comment line="253">
                    assumes a stream at the beginning of the file which has already                    
                </comment>
                <comment line="254">
                    passed the magic number test...                    
                </comment>
                <comment line="255">
                    leaves the input stream at the beginning of the audio data                    
                </comment>
                <comment line="260">
                    Read the magic number                    
                </comment>
                <comment line="263">
                    $$fb: fix for 4369044: javax.sound.sampled.AudioSystem.getAudioInputStream() works wrong with Cp037                    
                </comment>
                <comment line="265">
                    not AIFF, throw exception                    
                </comment>
                <comment line="284">
                    Is this an AIFC or just plain AIFF file.                    
                </comment>
                <comment line="286">
                    $$fb: fix for 4369044: javax.sound.sampled.AudioSystem.getAudioInputStream() works wrong with Cp037                    
                </comment>
                <comment line="291">
                    Loop through the AIFF chunks until                    
                </comment>
                <comment line="292">
                    we get to the SSND chunk.                    
                </comment>
                <comment line="295">
                    Read the chunk name                    
                </comment>
                <comment line="302">
                    Switch on the chunk name.                    
                </comment>
                <comment line="305">
                    Ignore format version for now.                    
                </comment>
                <comment line="309">
                    AIFF vs. AIFC                    
                </comment>
                <comment line="310">
                    $$fb: fix for 4399551: Repost of bug candidate: cannot replay aif file (Review ID: 108108)                    
                </comment>
                <comment line="314">
                    Read header info.                    
                </comment>
                <comment line="321">
                    If this is not AIFC then we assume it&apos;s                    
                </comment>
                <comment line="322">
                    a linearly encoded file.                    
                </comment>
                <comment line="333">
                    Java Sound convention                    
                </comment>
                <comment line="340">
                    $fb what&apos;s that ??                    
                </comment>
                <comment line="341">
                    if (sampleSizeInBits == 8) {                    
                </comment>
                <comment line="342">
                    encoding = AudioFormat.Encoding.PCM_SIGNED;                    
                </comment>
                <comment line="343">
                    }                    
                </comment>
                <comment line="349">
                    Data chunk.                    
                </comment>
                <comment line="350">
                    we are getting *weird* numbers for chunkLen sometimes;                    
                </comment>
                <comment line="351">
                    this really should be the size of the data chunk....                    
                </comment>
                <comment line="356">
                    okay, now we are done reading the header.  we need to set the size                    
                </comment>
                <comment line="357">
                    of the data segment.  we know that sometimes the value we get for                    
                </comment>
                <comment line="358">
                    the chunksize is absurd.  this is the best i can think of:if the                    
                </comment>
                <comment line="359">
                    value seems okay, use it.  otherwise, we get our value of                    
                </comment>
                <comment line="360">
                    length by assuming that everything left is the data segment;                    
                </comment>
                <comment line="361">
                    its length should be our original length (for all AIFF data chunks)                    
                </comment>
                <comment line="362">
                    minus what we&apos;ve read so far.                    
                </comment>
                <comment line="363">
                    $$kk: we should be able to get length for the data chunk right after                    
                </comment>
                <comment line="364">
                    we find &quot;SSND.&quot;  however, some aiff files give *weird* numbers.  what                    
                </comment>
                <comment line="365">
                    is going on??                    
                </comment>
                <comment line="370">
                    $$kk: 11.03.98: this seems dangerous!                    
                </comment>
                <comment line="375">
                    switch                    
                </comment>
                <comment line="377">
                    skip the remainder of this chunk                    
                </comment>
                <comment line="384">
                    while                    
                </comment>
                <declaration name="dis" type="DataInputStream" line="247"/>
                <scope line="249"/>
                <declaration name="fileRead" type="int" line="256"/>
                <declaration name="dataLength" type="int" line="257"/>
                <declaration name="format" type="AudioFormat" line="258"/>
                <declaration name="magic" type="int" line="261"/>
                <scope line="264">
                    <scope line="266"/>
                </scope>
                <declaration name="length" type="int" line="272"/>
                <declaration name="iffType" type="int" line="273"/>
                <declaration name="totallength" type="int" line="276"/>
                <scope line="277"/>
                <scope line="280"/>
                <declaration name="aifc" type="boolean" line="285"/>
                <scope line="287"/>
                <declaration name="ssndFound" type="boolean" line="293"/>
                <scope line="294">
                    <declaration name="chunkName" type="int" line="296"/>
                    <declaration name="chunkLen" type="int" line="297"/>
                    <declaration name="chunkRead" type="int" line="300"/>
                    <scope line="311"/>
                    <declaration name="channels" type="int" line="315"/>
                    <declaration name="sampleSizeInBits" type="int" line="317"/>
                    <declaration name="sampleRate" type="float" line="318"/>
                    <declaration name="encoding" type="AudioFormat.Encoding" line="323"/>
                    <scope line="325">
                        <declaration name="enc" type="int" line="326"/>
                    </scope>
                    <declaration name="frameSize" type="int" line="339"/>
                    <declaration name="dataOffset" type="int" line="352"/>
                    <declaration name="blocksize" type="int" line="353"/>
                    <scope line="367"/>
                    <scope line="369"/>
                    <scope line="378">
                        <declaration name="toSkip" type="int" line="379"/>
                        <scope line="380"/>
                    </scope>
                </scope>
                <scope line="386"/>
                <declaration name="type" type="AudioFileFormat.Type" line="389"/>
            </method>
            <javadoc line="395">
                write_ieee_extended(DataOutputStream dos, double f) throws IOException {
                  Extended precision IEEE floating-point conversion routine.                
                <argument>
                    DataOutputStream                    
                </argument>
                <argument>
                    double                    
                </argument>
                <return>
                    void                    
                </return>
                <exception>
                    IOException                    
                </exception>
            </javadoc>
            <method name="write_ieee_extended" type="void" line="402">
                <params>
                    <param name="dos" type="DataOutputStream"/>
                    <param name="f" type="double"/>
                </params>
                <comment line="407">
                    For now write the integer portion of f                    
                </comment>
                <comment line="408">
                    $$jb: 03.30.99: stay in synch with JMF on this!!!!                    
                </comment>
                <comment line="415">
                    low Mantissa                    
                </comment>
                <declaration name="exponent" type="int" line="404"/>
                <declaration name="highMantissa" type="double" line="405"/>
                <scope line="409"/>
            </method>
            <javadoc line="419">
                read_ieee_extended
                  Extended precision IEEE floating-point conversion routine.                
                <argument>
                    DataInputStream                    
                </argument>
                <return>
                    double                    
                </return>
                <exception>
                    IOException                    
                </exception>
            </javadoc>
            <method name="read_ieee_extended" type="double" line="426">
                <params>
                    <param name="dis" type="DataInputStream"/>
                </params>
                <declaration name="f" type="double" line="428"/>
                <declaration name="expon" type="int" line="429"/>
                <declaration name="hiMant" type="long" line="430"/>
                <declaration name="t1" type="long" line="431"/>
                <declaration name="HUGE" type="double" line="432"/>
                <scope line="445"/>
                <scope line="447">
                    <scope line="450"/>
                </scope>
            </method>
        </class>
    </source>