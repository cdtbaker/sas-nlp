<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Vector"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <import package="javax.sound.sampled.AudioInputStream"/>
        <class name="PCMtoPCMCodec" line="8">
            <extends class="SunCodec"/>
            <javadoc line="8">
                Converts among signed/unsigned and little/big endianness of sampled.                
                <author>
                    Jan Borgersen                    
                </author>
            </javadoc>
            <declaration name="inputEncodings" type="AudioFormat.Encoding[]" line="13"/>
            <declaration name="outputEncodings" type="AudioFormat.Encoding[]" line="14"/>
            <declaration name="tempBufferSize" type="int" line="15"/>
            <declaration name="tempBuffer" type="byte" line="16"/>
            <javadoc line="17">
                Constructs a new PCMtoPCM codec object.                
            </javadoc>
            <method name="PCMtoPCMCodec" type="constructor" line="20"/>
            <javadoc line="23">
                                
            </javadoc>
            <method name="getTargetEncodings" type="AudioFormat.Encoding[]" line="25">
                <params>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
                <scope line="26">
                    <declaration name="encs" type="AudioFormat.Encoding" line="27"/>
                </scope>
                <scope line="32"/>
            </method>
            <javadoc line="36">
                                
            </javadoc>
            <method name="getTargetFormats" type="AudioFormat[]" line="38">
                <params>
                    <param name="targetEncoding" type="AudioFormat.Encoding"/>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
                <declaration name="formats" type="AudioFormat[]" line="39"/>
                <declaration name="newFormats" type="Vector" line="40"/>
                <scope line="41">
                    <scope line="42"/>
                </scope>
                <declaration name="formatArray" type="AudioFormat[]" line="46"/>
                <scope line="47"/>
            </method>
            <javadoc line="52">
                                
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="54">
                <params>
                    <param name="targetEncoding" type="AudioFormat.Encoding"/>
                    <param name="sourceStream" type="AudioInputStream"/>
                </params>
                <scope line="55">
                    <declaration name="sourceFormat" type="AudioFormat" line="56"/>
                    <declaration name="targetFormat" type="AudioFormat" line="57"/>
                </scope>
                <scope line="60"/>
            </method>
            <javadoc line="64">
                use old code                
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="67">
                <params>
                    <param name="targetFormat" type="AudioFormat"/>
                    <param name="sourceStream" type="AudioInputStream"/>
                </params>
            </method>
            <javadoc line="70">
                Opens the codec with the specified parameters.                
                <param>
                    stream stream from which data to be processed should be read                    
                </param>
                <param>
                    outputFormat desired data format of the stream after processing                    
                </param>
                <return>
                    stream from which processed data may be read                    
                </return>
                <throws>
                    IllegalArgumentException if the format combination supplied is
                      not supported.                    
                </throws>
            </javadoc>
            <method name="getConvertedStream" type="AudioInputStream" line="78">
                <params>
                    <param name="outputFormat" type="AudioFormat"/>
                    <param name="stream" type="AudioInputStream"/>
                </params>
                <declaration name="cs" type="AudioInputStream" line="79"/>
                <declaration name="inputFormat" type="AudioFormat" line="80"/>
                <scope line="81"/>
                <scope line="84"/>
            </method>
            <javadoc line="90">
                Obtains the set of output formats supported by the codec
                  given a particular input format.
                  If no output formats are supported for this input format,
                  returns an array of length 0.                
                <return>
                    array of supported output formats.                    
                </return>
            </javadoc>
            <method name="getOutputFormats" type="AudioFormat[]" line="97">
                <params>
                    <param name="inputFormat" type="AudioFormat"/>
                </params>
                <declaration name="formats" type="Vector" line="98"/>
                <declaration name="format" type="AudioFormat" line="99"/>
                <declaration name="sampleSize" type="int" line="100"/>
                <declaration name="isBigEndian" type="boolean" line="101"/>
                <scope line="102">
                    <scope line="103"/>
                    <scope line="107"/>
                </scope>
                <scope line="112">
                    <scope line="113"/>
                    <scope line="121"/>
                    <scope line="129"/>
                    <scope line="137"/>
                </scope>
                <declaration name="formatArray" type="AudioFormat[]" line="146"/>
                <scope line="147">
                    <scope line="149"/>
                </scope>
            </method>
            <class name="PCMtoPCMCodecStream" line="155">
                <extends class="AudioInputStream"/>
                <declaration name="PCM_SWITCH_SIGNED_8BIT" type="int" line="156"/>
                <declaration name="PCM_SWITCH_ENDIAN" type="int" line="157"/>
                <declaration name="PCM_SWITCH_SIGNED_LE" type="int" line="158"/>
                <declaration name="PCM_SWITCH_SIGNED_BE" type="int" line="159"/>
                <declaration name="PCM_UNSIGNED_LE2SIGNED_BE" type="int" line="160"/>
                <declaration name="PCM_SIGNED_LE2UNSIGNED_BE" type="int" line="161"/>
                <declaration name="PCM_UNSIGNED_BE2SIGNED_LE" type="int" line="162"/>
                <declaration name="PCM_SIGNED_BE2UNSIGNED_LE" type="int" line="163"/>
                <declaration name="sampleSizeInBytes" type="int" line="164"/>
                <declaration name="conversionType" type="int" line="165"/>
                <method name="PCMtoPCMCodecStream" type="constructor" line="166">
                    <params>
                        <param name="stream" type="AudioInputStream"/>
                        <param name="outputFormat" type="AudioFormat"/>
                    </params>
                    <declaration name="sampleSizeInBits" type="int" line="168"/>
                    <declaration name="inputEncoding" type="AudioFormat.Encoding" line="169"/>
                    <declaration name="outputEncoding" type="AudioFormat.Encoding" line="170"/>
                    <declaration name="inputIsBigEndian" type="boolean" line="171"/>
                    <declaration name="outputIsBigEndian" type="boolean" line="172"/>
                    <declaration name="inputFormat" type="AudioFormat" line="173"/>
                    <scope line="174"/>
                    <scope line="183">
                        <scope line="184"/>
                        <scope line="188"/>
                    </scope>
                    <scope line="193">
                        <scope line="194"/>
                        <scope line="198"/>
                        <scope line="202"/>
                        <scope line="206"/>
                        <scope line="210"/>
                    </scope>
                    <scope line="216"/>
                    <scope line="219"/>
                    <scope line="222"/>
                </method>
                <javadoc line="227">
                    Note that this only works for sign conversions.
                      Other conversions require a read of at least 2 bytes.                    
                </javadoc>
                <method name="read" type="int" line="231">
                    <declaration name="temp" type="int" line="232"/>
                    <declaration name="tempbyte" type="byte" line="233"/>
                    <scope line="234">
                        <scope line="235"/>
                        <scope line="243"/>
                    </scope>
                    <scope line="247"/>
                </method>
                <method name="read" type="int" line="251">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="read" type="int" line="254">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="i" type="int" line="255"/>
                    <scope line="256"/>
                    <scope line="259"/>
                    <declaration name="readCount" type="int" line="262"/>
                    <declaration name="tempByte" type="byte" line="263"/>
                    <scope line="264"/>
                </method>
                <method name="switchSigned8bit" type="void" line="294">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                        <param name="readCount" type="int"/>
                    </params>
                    <scope line="295"/>
                </method>
                <method name="switchSignedBE" type="void" line="299">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                        <param name="readCount" type="int"/>
                    </params>
                    <scope line="300"/>
                </method>
                <method name="switchSignedLE" type="void" line="304">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                        <param name="readCount" type="int"/>
                    </params>
                    <scope line="305"/>
                </method>
                <method name="switchEndian" type="void" line="309">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                        <param name="readCount" type="int"/>
                    </params>
                    <scope line="310">
                        <scope line="311">
                            <declaration name="temp" type="byte" line="312"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>