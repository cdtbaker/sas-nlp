<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="javax.sound.midi"/>
        <import package="java.util.ArrayList"/>
        <class name="MidiUtils" line="34">
            <comment line="42">
                120bpm                
            </comment>
            <javadoc line="34">
                Some utilities for MIDI (some stuff is used from javax.sound.midi)                
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="DEFAULT_TEMPO_MPQ" type="int" line="41"/>
            <declaration name="META_END_OF_TRACK_TYPE" type="int" line="42"/>
            <declaration name="META_TEMPO_TYPE" type="int" line="43"/>
            <javadoc line="46">
                return true if the passed message is Meta End Of Track                
            </javadoc>
            <method name="isMetaEndOfTrack" type="boolean" line="47">
                <params>
                    <param name="midiMsg" type="MidiMessage"/>
                </params>
                <comment line="49">
                    first check if it is a META message at all                    
                </comment>
                <comment line="54">
                    now get message and check for end of track                    
                </comment>
                <scope line="50"/>
                <declaration name="msg" type="byte[]" line="54"/>
            </method>
            <javadoc line="59">
                return if the given message is a meta tempo message                
            </javadoc>
            <method name="isMetaTempo" type="boolean" line="60">
                <params>
                    <param name="midiMsg" type="MidiMessage"/>
                </params>
                <comment line="62">
                    first check if it is a META message at all                    
                </comment>
                <comment line="67">
                    now get message and check for tempo                    
                </comment>
                <comment line="69">
                    meta type must be 0x51, and data length must be 3                    
                </comment>
                <scope line="63"/>
                <declaration name="msg" type="byte[]" line="67"/>
            </method>
            <javadoc line="73">
                parses this message for a META tempo message and returns
                  the tempo in MPQ, or -1 if this isn&apos;t a tempo message                
            </javadoc>
            <method name="getTempoMPQ" type="int" line="76">
                <params>
                    <param name="midiMsg" type="MidiMessage"/>
                </params>
                <comment line="78">
                    first check if it is a META message at all                    
                </comment>
                <scope line="79"/>
                <declaration name="msg" type="byte[]" line="82"/>
                <scope line="83"/>
                <declaration name="tempo" type="int" line="86"/>
            </method>
            <javadoc line="93">
                converts&lt;br&gt;
                  1 - MPQ-Tempo to BPM tempo&lt;br&gt;
                  2 - BPM tempo to MPQ tempo&lt;br&gt;                
            </javadoc>
            <method name="convertTempo" type="double" line="98">
                <params>
                    <param name="tempo" type="double"/>
                </params>
                <scope line="99"/>
            </method>
            <javadoc line="106">
                convert tick to microsecond with given tempo.
                  Does not take tempo changes into account.
                  Does not work for SMPTE timing!                
            </javadoc>
            <method name="ticks2microsec" type="long" line="111">
                <params>
                    <param name="tick" type="long"/>
                    <param name="tempoMPQ" type="double"/>
                    <param name="resolution" type="int"/>
                </params>
            </method>
            <javadoc line="115">
                convert tempo to microsecond with given tempo
                  Does not take tempo changes into account.
                  Does not work for SMPTE timing!                
            </javadoc>
            <method name="microsec2ticks" type="long" line="120">
                <params>
                    <param name="us" type="long"/>
                    <param name="tempoMPQ" type="double"/>
                    <param name="resolution" type="int"/>
                </params>
                <comment line="122">
                    do not round to nearest tick
                    return (long) Math.round((((double)us) * resolution) / tempoMPQ);                    
                </comment>
            </method>
            <javadoc line="127">
                Given a tick, convert to microsecond                
                <param>
                    cache tempo info and current tempo                    
                </param>
            </javadoc>
            <method name="tick2microsecond" type="long" line="131">
                <params>
                    <param name="seq" type="Sequence"/>
                    <param name="tick" type="long"/>
                    <param name="cache" type="TempoCache"/>
                </params>
                <comment line="145">
                    in MPQ                    
                </comment>
                <comment line="148">
                    optimization to not always go through entire list of tempo events                    
                </comment>
                <comment line="152">
                    walk through all tempo changes and add time for the respective blocks                    
                </comment>
                <comment line="153">
                    microsecond                    
                </comment>
                <comment line="162">
                    this implementation needs a tempo event at tick 0!                    
                </comment>
                <scope line="132">
                    <declaration name="seconds" type="double" line="133"/>
                </scope>
                <scope line="137"/>
                <declaration name="resolution" type="int" line="141"/>
                <declaration name="ticks" type="long[]" line="143"/>
                <declaration name="tempos" type="int[]" line="144"/>
                <declaration name="cacheCount" type="int" line="145"/>
                <declaration name="snapshotIndex" type="int" line="148"/>
                <declaration name="snapshotMicro" type="int" line="149"/>
                <declaration name="us" type="long" line="152"/>
                <scope line="156"/>
                <scope line="160">
                    <declaration name="i" type="int" line="162"/>
                    <scope line="163"/>
                </scope>
            </method>
            <javadoc line="178">
                Given a microsecond time, convert to tick.
                  returns tempo at the given time in cache.getCurrTempoMPQ                
            </javadoc>
            <method name="microsecond2tick" type="long" line="182">
                <params>
                    <param name="seq" type="Sequence"/>
                    <param name="micros" type="long"/>
                    <param name="cache" type="TempoCache"/>
                </params>
                <comment line="200">
                    in MPQ                    
                </comment>
                <comment line="207">
                    walk through all tempo changes and add time for the respective blocks
                     to find the right tick                    
                </comment>
                <comment line="210">
                    this loop requires that the first tempo Event is at time 0                    
                </comment>
                <comment line="222">
                    if (Printer.debug) Printer.debug(&quot;   -&gt; convert back = &quot; + (tick2microsecond(seq, tick, null) / 1000)+&quot; microseconds&quot;);                    
                </comment>
                <scope line="183">
                    <declaration name="dTick" type="double" line="184"/>
                    <declaration name="tick" type="long" line="188"/>
                    <scope line="189"/>
                </scope>
                <scope line="195"/>
                <declaration name="ticks" type="long[]" line="198"/>
                <declaration name="tempos" type="int[]" line="199"/>
                <declaration name="cacheCount" type="int" line="200"/>
                <declaration name="resolution" type="int" line="202"/>
                <declaration name="us" type="long" line="204"/>
                <declaration name="tick" type="long" line="204"/>
                <declaration name="newReadPos" type="int" line="204"/>
                <declaration name="i" type="int" line="204"/>
                <scope line="208">
                    <scope line="210">
                        <declaration name="nextTime" type="long" line="211"/>
                        <scope line="213"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="228">
                Binary search for the event indexes of the track                
                <param>
                    tick - tick number of index to be found in array                    
                </param>
                <return>
                    index in track which is on or after "tick".
                      if no entries are found that follow after tick, track.size() is returned                    
                </return>
            </javadoc>
            <method name="tick2index" type="int" line="235">
                <params>
                    <param name="track" type="Track"/>
                    <param name="tick" type="long"/>
                </params>
                <comment line="242">
                    take the middle event as estimate                    
                </comment>
                <comment line="244">
                    tick of estimate                    
                </comment>
                <comment line="249">
                    estimate too low                    
                </comment>
                <comment line="251">
                    &quot;or after tick&quot;                    
                </comment>
                <comment line="256">
                    if (t&gt;tick)                    
                </comment>
                <comment line="257">
                    estimate too high                    
                </comment>
                <declaration name="ret" type="int" line="236"/>
                <scope line="237">
                    <declaration name="low" type="int" line="238"/>
                    <declaration name="high" type="int" line="239"/>
                    <scope line="240">
                        <declaration name="t" type="long" line="244"/>
                        <scope line="245"/>
                        <scope line="247">
                            <scope line="249"/>
                        </scope>
                        <scope line="255"/>
                    </scope>
                </scope>
            </method>
            <class name="TempoCache" line="265">
                <comment line="268">
                    in MPQ                    
                </comment>
                <comment line="269">
                    index in ticks/tempos at the snapshot                    
                </comment>
                <comment line="271">
                    microsecond at the snapshot                    
                </comment>
                <comment line="274">
                    MPQ, used as return value for microsecond2tick                    
                </comment>
                <declaration name="ticks" type="long[]" line="266"/>
                <declaration name="tempos" type="int[]" line="267"/>
                <declaration name="snapshotIndex" type="int" line="269"/>
                <declaration name="snapshotMicro" type="int" line="271"/>
                <declaration name="currTempo" type="int" line="273"/>
                <declaration name="firstTempoIsFake" type="boolean" line="275"/>
                <method name="TempoCache" type="constructor" line="277">
                    <comment line="279">
                        just some defaults, to prevents weird stuff                        
                    </comment>
                </method>
                <method name="TempoCache" type="constructor" line="286">
                    <params>
                        <param name="seq" type="Sequence"/>
                    </params>
                </method>
                <method name="refresh" type="void" line="292">
                    <params>
                        <param name="seq" type="Sequence"/>
                    </params>
                    <comment line="297">
                        tempo events only occur in track 0                        
                    </comment>
                    <comment line="304">
                        found a tempo event. Add it to the list                        
                    </comment>
                    <comment line="313">
                        do not need to add an initial tempo event at the beginning                        
                    </comment>
                    <comment line="321">
                        add tempo 120 at beginning                        
                    </comment>
                    <declaration name="list" type="ArrayList" line="293"/>
                    <declaration name="tracks" type="Track[]" line="294"/>
                    <scope line="295">
                        <declaration name="track" type="Track" line="297"/>
                        <declaration name="c" type="int" line="298"/>
                        <scope line="299">
                            <declaration name="ev" type="MidiEvent" line="300"/>
                            <declaration name="msg" type="MidiMessage" line="301"/>
                            <scope line="302"/>
                        </scope>
                    </scope>
                    <declaration name="size" type="int" line="308"/>
                    <scope line="311"/>
                    <declaration name="e" type="int" line="318"/>
                    <scope line="319"/>
                    <scope line="325">
                        <declaration name="evt" type="MidiEvent" line="326"/>
                    </scope>
                </method>
                <method name="getCurrTempoMPQ" type="int" line="334"/>
                <method name="getTempoMPQAt" type="float" line="338">
                    <params>
                        <param name="tick" type="long"/>
                    </params>
                </method>
                <method name="getTempoMPQAt" type="float" line="342">
                    <params>
                        <param name="tick" type="long"/>
                        <param name="startTempoMPQ" type="float"/>
                    </params>
                    <scope line="343">
                        <scope line="344">
                            <scope line="346"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>