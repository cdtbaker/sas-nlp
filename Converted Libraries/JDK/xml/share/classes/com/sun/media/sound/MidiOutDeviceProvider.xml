<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="javax.sound.midi.MidiDevice"/>
        <import package="javax.sound.midi.spi.MidiDeviceProvider"/>
        <class name="MidiOutDeviceProvider" line="4">
            <extends class="AbstractMidiDeviceProvider"/>
            <javadoc line="4">
                MIDI output device provider.                
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="infos" type="Info[]" line="10"/>
            <javadoc line="10">
                Cache of info objects for all MIDI output devices on the system.                
            </javadoc>
            <declaration name="devices" type="MidiDevice[]" line="14"/>
            <javadoc line="14">
                Cache of open MIDI output devices on the system.                
            </javadoc>
            <declaration name="enabled" type="boolean" line="18"/>
            <scope line="19"/>
            <javadoc line="23">
                Required public no-arg constructor.                
            </javadoc>
            <method name="MidiOutDeviceProvider" type="constructor" line="26"/>
            <method name="createInfo" type="AbstractMidiDeviceProvider.Info" line="29">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="30"/>
            </method>
            <method name="createDevice" type="MidiDevice" line="35">
                <params>
                    <param name="info" type="AbstractMidiDeviceProvider.Info"/>
                </params>
                <scope line="36"/>
            </method>
            <method name="getNumDevices" type="int" line="41">
                <scope line="42"/>
            </method>
            <method name="getDeviceCache" type="MidiDevice[]" line="48"/>
            <method name="setDeviceCache" type="void" line="51">
                <params>
                    <param name="devices" type="MidiDevice[]"/>
                </params>
            </method>
            <method name="getInfoCache" type="Info[]" line="54"/>
            <method name="setInfoCache" type="void" line="57">
                <params>
                    <param name="infos" type="Info[]"/>
                </params>
            </method>
            <class name="MidiOutDeviceInfo" line="60">
                <extends class="AbstractMidiDeviceProvider.Info"/>
                <javadoc line="60">
                    Info class for MidiOutDevices.  Adds the
                      provider&apos;s Class to keep the provider class from being
                      unloaded.  Otherwise, at least on JDK1.1.7 and 1.1.8,
                      the provider class can be unloaded.  Then, then the provider
                      is next invoked, the static block is executed again and a new
                      instance of the device object is created.  Even though the
                      previous instance may still exist and be open / in use / etc.,
                      the new instance will not reflect that state...                    
                </javadoc>
                <declaration name="providerClass" type="Class" line="71"/>
                <method name="MidiOutDeviceInfo" type="constructor" line="72">
                    <params>
                        <param name="index" type="int"/>
                        <param name="providerClass" type="Class"/>
                    </params>
                </method>
            </class>
            <method name="nGetNumDevices" type="int" line="77"/>
            <method name="nGetName" type="String" line="78"/>
            <method name="nGetVendor" type="String" line="79"/>
            <method name="nGetDescription" type="String" line="80"/>
            <method name="nGetVersion" type="String" line="81"/>
        </class>
    </source>