<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.util.Collections"/>
        <import package="javax.sound.midi"/>
        <class name="AbstractMidiDevice" line="35">
            <comment line="47">
                STATIC VARIABLES                
            </comment>
            <comment line="50">
                INSTANCE VARIABLES                
            </comment>
            <comment line="56">
                lock to protect receiverList and transmitterList                
            </comment>
            <comment line="57">
                from simultaneous creation and destruction                
            </comment>
            <comment line="58">
                reduces possibility of deadlock, compared to                
            </comment>
            <comment line="59">
                synchronizing to the class instance                
            </comment>
            <comment line="62">
                DEVICE ATTRIBUTES                
            </comment>
            <comment line="67">
                DEVICE STATE                
            </comment>
            <comment line="83">
                CONSTRUCTOR                
            </comment>
            <comment line="104">
                MIDI DEVICE METHODS                
            </comment>
            <comment line="331">
                HELPER METHODS                
            </comment>
            <comment line="338">
                REFERENCE COUNTING                
            </comment>
            <comment line="383">
                RECEIVER HANDLING METHODS                
            </comment>
            <comment line="422">
                TRANSMITTER HANDLING                
            </comment>
            <comment line="458">
                ABSTRACT METHODS                
            </comment>
            <comment line="470">
                INNER CLASSES                
            </comment>
            <comment line="525">
                class AbstractReceiver                
            </comment>
            <comment line="580">
                class BasicTransmitter                
            </comment>
            <comment line="747">
                TransmitterList                
            </comment>
            <implements interface="MidiDevice"/>
            <implements interface="ReferenceCountingDevice"/>
            <javadoc line="35">
                Abstract AbstractMidiDevice class representing functionality shared by
                  MidiInDevice and MidiOutDevice objects.                
                <author>
                    David Rivas                    
                </author>
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Matthias Pfisterer                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="TRACE_TRANSMITTER" type="boolean" line="47"/>
            <declaration name="receiverList" type="ArrayList&lt;Receiver&gt;" line="51"/>
            <declaration name="transmitterList" type="TransmitterList" line="53"/>
            <declaration name="traRecLock" type="Object" line="59"/>
            <declaration name="info" type="MidiDevice.Info" line="63"/>
            <declaration name="open" type="boolean" line="68"/>
            <declaration name="openRefCount" type="int" line="69"/>
            <declaration name="openKeepingObjects" type="List" line="71"/>
            <javadoc line="71">
                List of Receivers and Transmitters that opened the device implicitely.                
            </javadoc>
            <declaration name="id" type="long" line="75"/>
            <javadoc line="75">
                This is the device handle returned from native code                
            </javadoc>
            <javadoc line="85">
                Constructs an AbstractMidiDevice with the specified info object.                
                <param>
                    info the description of the device                    
                </param>
            </javadoc>
            <method name="AbstractMidiDevice" type="constructor" line="92">
                <params>
                    <param name="info" type="MidiDevice.Info"/>
                </params>
                <comment line="89">
                    The initial mode and and only supported mode default to OMNI_ON_POLY.                    
                </comment>
            </method>
            <method name="getDeviceInfo" type="MidiDevice.Info" line="105"/>
            <javadoc line="109">
                Open the device from an aplication program.
                  Setting the open reference count to -1 here prevents Transmitters and Receivers that
                  opened the the device implicitly from closing it. The only way to close the device after
                  this call is a call to close().                
            </javadoc>
            <method name="open" type="void" line="114">
                <scope line="116"/>
            </method>
            <javadoc line="125">
                Open the device implicitly.
                  This method is intended to be used by AbstractReceiver
                  and BasicTransmitter. Actually, it is called by getReceiverReferenceCounting() and
                  getTransmitterReferenceCounting(). These, in turn, are called by MidiSytem on calls to
                  getReceiver() and getTransmitter(). The former methods should pass the Receiver or
                  Transmitter just created as the object parameter to this method. Storing references to
                  these objects is necessary to be able to decide later (when it comes to closing) if
                  R/T&apos;s are ones that opened the device implicitly.                
                <object>
                    The Receiver or Transmitter instance that triggered this implicit open.                    
                </object>
            </javadoc>
            <method name="openInternal" type="void" line="136">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <comment line="143">
                    double calls to doOpens() will be catched by the open flag.                    
                </comment>
                <scope line="138">
                    <scope line="139"/>
                </scope>
            </method>
            <method name="doOpen" type="void" line="150">
                <scope line="152">
                    <scope line="153"/>
                </scope>
            </method>
            <method name="close" type="void" line="162">
                <scope line="164"/>
            </method>
            <javadoc line="172">
                Close the device for an object that implicitely opened it.
                  This method is intended to be used by Transmitter.close() and Receiver.close().
                  Those methods should pass this for the object parameter. Since Transmitters or Receivers
                  do not know if their device has been opened implicitely because of them, they call this
                  method in any case. This method now is able to seperate Receivers/Transmitters that opened
                  the device implicitely from those that didn&apos;t by looking up the R/T in the
                  openKeepingObjects list. Only if the R/T is contained there, the reference count is
                  reduced.                
                <param>
                    object The object that might have been opening the device implicitely (for now,
                      this may be a Transmitter or receiver).                    
                </param>
            </javadoc>
            <method name="closeInternal" type="void" line="184">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="186">
                    <scope line="187">
                        <scope line="188">
                            <scope line="190"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="doClose" type="void" line="200">
                <scope line="202">
                    <scope line="203"/>
                </scope>
            </method>
            <method name="isOpen" type="boolean" line="212"/>
            <method name="implClose" type="void" line="217">
                <comment line="220">
                    close all receivers                    
                </comment>
                <comment line="227">
                    close all transmitters                    
                </comment>
                <scope line="218">
                    <scope line="219">
                        <scope line="221"/>
                    </scope>
                    <scope line="226"/>
                </scope>
            </method>
            <javadoc line="234">
                This implementation always returns -1.
                  Devices that actually provide this should over-ride
                  this method.                
            </javadoc>
            <method name="getMicrosecondPosition" type="long" line="239"/>
            <javadoc line="244">
                Return the maximum number of Receivers supported by this device.
                  Depending on the return value of hasReceivers(), this method returns either 0 or -1.
                  Subclasses should rather override hasReceivers() than override this method.                
            </javadoc>
            <method name="getMaxReceivers" type="int" line="248">
                <scope line="249"/>
                <scope line="251"/>
            </method>
            <javadoc line="257">
                Return the maximum number of Transmitters supported by this device.
                  Depending on the return value of hasTransmitters(), this method returns either 0 or -1.
                  Subclasses should override hasTransmitters().                
            </javadoc>
            <method name="getMaxTransmitters" type="int" line="261">
                <scope line="262"/>
                <scope line="264"/>
            </method>
            <javadoc line="270">
                Retrieve a Receiver for this device.
                  This method returns the value returned by createReceiver(), if it doesn&apos;t throw
                  an exception. Subclasses should rather override createReceiver() than override
                  this method.
                  If createReceiver returns a Receiver, it is added to the internal list
                  of Receivers (see getReceiversList)                
            </javadoc>
            <method name="getReceiver" type="Receiver" line="277">
                <comment line="280">
                    may throw MidiUnavailableException                    
                </comment>
                <declaration name="receiver" type="Receiver" line="278"/>
                <scope line="279"/>
            </method>
            <method name="getReceivers" type="List<Receiver>" line="287">
                <declaration name="recs" type="List&lt;Receiver&gt;" line="288"/>
                <scope line="289">
                    <scope line="290"/>
                    <scope line="292"/>
                </scope>
            </method>
            <javadoc line="301">
                This implementation uses createTransmitter, which may throw an exception.
                  If a transmitter is returned in createTransmitter, it is added to the internal
                  TransmitterList                
            </javadoc>
            <method name="getTransmitter" type="Transmitter" line="306">
                <comment line="309">
                    may throw MidiUnavailableException                    
                </comment>
                <declaration name="transmitter" type="Transmitter" line="307"/>
                <scope line="308"/>
            </method>
            <method name="getTransmitters" type="List<Transmitter>" line="316">
                <declaration name="tras" type="List&lt;Transmitter&gt;" line="317"/>
                <scope line="318">
                    <scope line="320"/>
                    <scope line="322"/>
                </scope>
            </method>
            <method name="getId" type="long" line="332"/>
            <javadoc line="339">
                Retrieve a Receiver and open the device implicitly.
                  This method is called by MidiSystem.getReceiver().                
            </javadoc>
            <method name="getReceiverReferenceCounting" type="Receiver" line="342">
                <comment line="343">
                    Keep this order of commands! If getReceiver() throws an exception,
                    openInternal() should not be called!                    
                </comment>
                <declaration name="receiver" type="Receiver" line="346"/>
                <scope line="347"/>
            </method>
            <javadoc line="355">
                Retrieve a Transmitter and open the device implicitly.
                  This method is called by MidiSystem.getTransmitter().                
            </javadoc>
            <method name="getTransmitterReferenceCounting" type="Transmitter" line="358">
                <comment line="359">
                    Keep this order of commands! If getTransmitter() throws an exception,
                    openInternal() should not be called!                    
                </comment>
                <declaration name="transmitter" type="Transmitter" line="362"/>
                <scope line="363"/>
            </method>
            <javadoc line="371">
                Return the list of objects that have opened the device implicitely.                
            </javadoc>
            <method name="getOpenKeepingObjects" type="List" line="373">
                <scope line="374"/>
            </method>
            <javadoc line="385">
                Return the internal list of Receivers, possibly creating it first.                
            </javadoc>
            <method name="getReceiverList" type="List<Receiver>" line="387">
                <scope line="388">
                    <scope line="389"/>
                </scope>
            </method>
            <javadoc line="397">
                Returns if this device supports Receivers.
                  Subclasses that use Receivers should override this method to
                  return true. They also should override createReceiver().                
                <return>
                    true, if the device supports Receivers, false otherwise.                    
                </return>
            </javadoc>
            <method name="hasReceivers" type="boolean" line="403"/>
            <javadoc line="408">
                Create a Receiver object.
                  throwing an exception here means that Receivers aren&apos;t enabled.
                  Subclasses that use Receivers should override this method with
                  one that returns objects implementing Receiver.
                  Classes overriding this method should also override hasReceivers()
                  to return true.                
            </javadoc>
            <method name="createReceiver" type="Receiver" line="415"/>
            <javadoc line="423">
                Return the internal list of Transmitters, possibly creating it first.                
            </javadoc>
            <method name="getTransmitterList" type="TransmitterList" line="425">
                <scope line="426">
                    <scope line="427"/>
                </scope>
            </method>
            <javadoc line="435">
                Returns if this device supports Transmitters.
                  Subclasses that use Transmitters should override this method to
                  return true. They also should override createTransmitter().                
                <return>
                    true, if the device supports Transmitters, false otherwise.                    
                </return>
            </javadoc>
            <method name="hasTransmitters" type="boolean" line="441"/>
            <javadoc line="446">
                Create a Transmitter object.
                  throwing an exception here means that Transmitters aren&apos;t enabled.
                  Subclasses that use Transmitters should override this method with
                  one that returns objects implementing Transmitters.
                  Classes overriding this method should also override hasTransmitters()
                  to return true.                
            </javadoc>
            <method name="createTransmitter" type="Transmitter" line="453"/>
            <method name="implOpen" type="void" line="459"/>
            <javadoc line="462">
                close this device if discarded by the garbage collector                
            </javadoc>
            <method name="finalize" type="void" line="465"/>
            <class name="AbstractReceiver" line="471">
                <comment line="69">
                                        
                </comment>
                <comment line="90">
                    The initial mode and and only supported mode default to OMNI_ON_POLY.                    
                </comment>
                <comment line="520">
                    $$fb is that a good idea?                    
                </comment>
                <comment line="521">
                    protected void finalize() {                    
                </comment>
                <comment line="522">
                    close();                    
                </comment>
                <comment line="523">
                    }                    
                </comment>
                <comment line="591">
                    how many transmitters must be present for optimized                    
                </comment>
                <comment line="592">
                    handling                    
                </comment>
                <implements interface="MidiDeviceReceiver"/>
                <javadoc line="471">
                    Base class for Receivers.
                      Subclasses that use Receivers must use this base class, since it
                      contains magic necessary to manage implicit closing the device.
                      This is necessary for Receivers retrieved via MidiSystem.getReceiver()
                      (which opens the device implicitely).                    
                </javadoc>
                <declaration name="open" type="boolean" line="478"/>
                <javadoc line="481">
                    Deliver a MidiMessage.
                      This method contains magic related to the closed state of a
                      Receiver. Therefore, subclasses should not override this method.
                      Instead, they should implement implSend().                    
                </javadoc>
                <method name="send" type="void" line="486">
                    <params>
                        <param name="message" type="MidiMessage"/>
                        <param name="timeStamp" type="long"/>
                    </params>
                    <scope line="487"/>
                    <scope line="489"/>
                </method>
                <method name="implSend" type="void" line="495"/>
                <javadoc line="498">
                    Close the Receiver.
                      Here, the call to the magic method closeInternal() takes place.
                      Therefore, subclasses that override this method must call
                      &apos;super.close()&apos;.                    
                </javadoc>
                <method name="close" type="void" line="503">
                    <scope line="505"/>
                </method>
                <method name="getMidiDevice" type="MidiDevice" line="511"/>
                <method name="isOpen" type="boolean" line="515"/>
            </class>
            <class name="BasicTransmitter" line="527">
                <comment line="69">
                                        
                </comment>
                <comment line="90">
                    The initial mode and and only supported mode default to OMNI_ON_POLY.                    
                </comment>
                <comment line="520">
                    $$fb is that a good idea?                    
                </comment>
                <comment line="521">
                    protected void finalize() {                    
                </comment>
                <comment line="522">
                    close();                    
                </comment>
                <comment line="523">
                    }                    
                </comment>
                <comment line="591">
                    how many transmitters must be present for optimized                    
                </comment>
                <comment line="592">
                    handling                    
                </comment>
                <implements interface="MidiDeviceTransmitter"/>
                <javadoc line="527">
                    Transmitter base class.
                      This class especially makes sure the device is closed if it
                      has been opened implicitly by a call to MidiSystem.getTransmitter().
                      The logic of doing so is actually in closeInternal().
                      Also, it has some optimizations regarding sending to the Receivers,
                      for known Receivers, and managing itself in the TransmitterList.                    
                </javadoc>
                <declaration name="receiver" type="Receiver" line="538"/>
                <declaration name="tlist" type="TransmitterList" line="539"/>
                <method name="BasicTransmitter" type="constructor" line="541"/>
                <method name="setTransmitterList" type="void" line="544">
                    <params>
                        <param name="tlist" type="TransmitterList"/>
                    </params>
                </method>
                <method name="setReceiver" type="void" line="548">
                    <params>
                        <param name="receiver" type="Receiver"/>
                    </params>
                    <scope line="549"/>
                </method>
                <method name="getReceiver" type="Receiver" line="556"/>
                <javadoc line="561">
                    Close the Transmitter.
                      Here, the call to the magic method closeInternal() takes place.
                      Therefore, subclasses that override this method must call
                      &apos;super.close()&apos;.                    
                </javadoc>
                <method name="close" type="void" line="566">
                    <scope line="568"/>
                </method>
                <method name="getMidiDevice" type="MidiDevice" line="575"/>
            </class>
            <class name="TransmitterList" line="582">
                <comment line="69">
                                        
                </comment>
                <comment line="90">
                    The initial mode and and only supported mode default to OMNI_ON_POLY.                    
                </comment>
                <comment line="520">
                    $$fb is that a good idea?                    
                </comment>
                <comment line="521">
                    protected void finalize() {                    
                </comment>
                <comment line="522">
                    close();                    
                </comment>
                <comment line="523">
                    }                    
                </comment>
                <comment line="591">
                    how many transmitters must be present for optimized                    
                </comment>
                <comment line="592">
                    handling                    
                </comment>
                <javadoc line="582">
                    a class to manage a list of transmitters                    
                </javadoc>
                <declaration name="transmitters" type="ArrayList&lt;Transmitter&gt;" line="587"/>
                <declaration name="midiOutReceiver" type="MidiOutDevice.MidiOutReceiver" line="588"/>
                <declaration name="optimizedReceiverCount" type="int" line="592"/>
                <method name="add" type="void" line="595">
                    <params>
                        <param name="t" type="Transmitter"/>
                    </params>
                    <scope line="596"/>
                    <scope line="599"/>
                </method>
                <method name="remove" type="void" line="605">
                    <params>
                        <param name="t" type="Transmitter"/>
                    </params>
                    <scope line="606">
                        <declaration name="index" type="int" line="607"/>
                        <scope line="608"/>
                    </scope>
                </method>
                <method name="receiverChanged" type="void" line="617">
                    <params>
                        <param name="t" type="BasicTransmitter"/>
                        <param name="oldR" type="Receiver"/>
                        <param name="newR" type="Receiver"/>
                    </params>
                    <comment line="619">
                        some optimization                        
                    </comment>
                    <comment line="632">
                        more potential for optimization here                        
                    </comment>
                    <scope line="618">
                        <scope line="620"/>
                        <scope line="623">
                            <scope line="625"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="636">
                    closes all transmitters and empties the list                    
                </javadoc>
                <method name="close" type="void" line="637">
                    <scope line="638">
                        <scope line="639"/>
                    </scope>
                </method>
                <javadoc line="649">
                    Send this message to all receivers
                      status = packedMessage &amp; 0xFF
                      data1 = (packedMessage &amp; 0xFF00) &gt;&gt; 8;
                      data1 = (packedMessage &amp; 0xFF0000) &gt;&gt; 16;                    
                </javadoc>
                <method name="sendMessage" type="void" line="655">
                    <params>
                        <param name="packedMessage" type="int"/>
                        <param name="timeStamp" type="long"/>
                    </params>
                    <comment line="683">
                        this happens when invalid data comes over the wire. Ignore it.                        
                    </comment>
                    <scope line="656">
                        <scope line="657">
                            <declaration name="size" type="int" line="658"/>
                            <scope line="659">
                                <scope line="660"/>
                            </scope>
                            <scope line="664">
                                <scope line="666">
                                    <declaration name="receiver" type="Receiver" line="667"/>
                                    <scope line="668">
                                        <scope line="669">
                                            <scope line="670"/>
                                            <scope line="672"/>
                                        </scope>
                                        <scope line="675"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="682"/>
                </method>
                <method name="sendMessage" type="void" line="687">
                    <params>
                        <param name="data" type="byte[]"/>
                        <param name="timeStamp" type="long"/>
                    </params>
                    <comment line="695">
                        $$fb 2002-04-02: SysexMessages are mutable, so                        
                    </comment>
                    <comment line="696">
                        an application could change the contents of this object,                        
                    </comment>
                    <comment line="697">
                        or try to use the object later. So we can&apos;t get around object creation                        
                    </comment>
                    <comment line="698">
                        But the array need not be unique for each FastSysexMessage object,                        
                    </comment>
                    <comment line="699">
                        because it cannot be modified.                        
                    </comment>
                    <comment line="705">
                        this happens when invalid data comes over the wire. Ignore it.                        
                    </comment>
                    <scope line="688">
                        <scope line="689">
                            <declaration name="size" type="int" line="690"/>
                            <scope line="692">
                                <declaration name="receiver" type="Receiver" line="693"/>
                                <scope line="694"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="704"/>
                </method>
                <javadoc line="711">
                    Send this message to all transmitters                    
                </javadoc>
                <method name="sendMessage" type="void" line="714">
                    <params>
                        <param name="message" type="MidiMessage"/>
                        <param name="timeStamp" type="long"/>
                    </params>
                    <comment line="731">
                        $$fb 2002-04-02: ShortMessages are mutable, so                        
                    </comment>
                    <comment line="732">
                        an application could change the contents of this object,                        
                    </comment>
                    <comment line="733">
                        or try to use the object later.                        
                    </comment>
                    <comment line="734">
                        We violate this spec here, to avoid costly (and gc-intensive)                        
                    </comment>
                    <comment line="735">
                        object creation for potentially hundred of messages per second.                        
                    </comment>
                    <comment line="736">
                        The spec should be changed to allow Immutable MidiMessages                        
                    </comment>
                    <comment line="737">
                        (i.e. throws InvalidStateException or so in setMessage)                        
                    </comment>
                    <scope line="715"/>
                    <scope line="719">
                        <declaration name="size" type="int" line="720"/>
                        <scope line="721">
                            <scope line="722"/>
                        </scope>
                        <scope line="726">
                            <scope line="728">
                                <declaration name="receiver" type="Receiver" line="729"/>
                                <scope line="730"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>