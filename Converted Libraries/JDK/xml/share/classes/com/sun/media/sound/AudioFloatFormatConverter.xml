<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioInputStream"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <import package="javax.sound.sampled.AudioFormat.Encoding"/>
        <import package="javax.sound.sampled.spi.FormatConversionProvider"/>
        <class name="AudioFloatFormatConverter" line="11">
            <extends class="FormatConversionProvider"/>
            <javadoc line="11">
                This class is used to convert between 8,16,24,32 bit signed/unsigned
                  big/litle endian fixed/floating stereo/mono/multi-channel audio streams and
                  perform sample-rate conversion if needed.                
                <author>
                    Karl Helgason                    
                </author>
            </javadoc>
            <class name="AudioFloatFormatConverterInputStream" line="18">
                <extends class="InputStream"/>
                <declaration name="converter" type="AudioFloatConverter" line="19"/>
                <declaration name="stream" type="AudioFloatInputStream" line="20"/>
                <declaration name="readfloatbuffer" type="float[]" line="21"/>
                <declaration name="fsize" type="int" line="22"/>
                <method name="AudioFloatFormatConverterInputStream" type="constructor" line="23">
                    <params>
                        <param name="targetFormat" type="AudioFormat"/>
                        <param name="stream" type="AudioFloatInputStream"/>
                    </params>
                </method>
                <method name="read" type="int" line="28">
                    <declaration name="b" type="byte[]" line="29"/>
                    <declaration name="ret" type="int" line="30"/>
                </method>
                <method name="read" type="int" line="34">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="flen" type="int" line="35"/>
                    <declaration name="ret" type="int" line="37"/>
                </method>
                <method name="available" type="int" line="42">
                    <declaration name="ret" type="int" line="43"/>
                </method>
                <method name="close" type="void" line="47"/>
                <method name="mark" type="void" line="50">
                    <params>
                        <param name="readlimit" type="int"/>
                    </params>
                </method>
                <method name="markSupported" type="boolean" line="53"/>
                <method name="reset" type="void" line="56"/>
                <method name="skip" type="long" line="59">
                    <params>
                        <param name="n" type="long"/>
                    </params>
                    <declaration name="ret" type="long" line="60"/>
                </method>
            </class>
            <class name="AudioFloatInputStreamChannelMixer" line="65">
                <extends class="AudioFloatInputStream"/>
                <declaration name="targetChannels" type="int" line="66"/>
                <declaration name="sourceChannels" type="int" line="67"/>
                <declaration name="ais" type="AudioFloatInputStream" line="68"/>
                <declaration name="targetFormat" type="AudioFormat" line="69"/>
                <declaration name="conversion_buffer" type="float[]" line="70"/>
                <method name="AudioFloatInputStreamChannelMixer" type="constructor" line="71">
                    <params>
                        <param name="ais" type="AudioFloatInputStream"/>
                        <param name="targetChannels" type="int"/>
                    </params>
                    <declaration name="format" type="AudioFormat" line="75"/>
                </method>
                <method name="available" type="int" line="78"/>
                <method name="close" type="void" line="81"/>
                <method name="getFormat" type="AudioFormat" line="84"/>
                <method name="getFrameLength" type="long" line="87"/>
                <method name="mark" type="void" line="90">
                    <params>
                        <param name="readlimit" type="int"/>
                    </params>
                </method>
                <method name="markSupported" type="boolean" line="93"/>
                <method name="read" type="int" line="96">
                    <params>
                        <param name="b" type="float[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="len2" type="int" line="97"/>
                    <declaration name="ret" type="int" line="99"/>
                    <scope line="101">
                        <declaration name="cs" type="int" line="102"/>
                        <scope line="103">
                            <scope line="104"/>
                        </scope>
                    </scope>
                    <scope line="109">
                        <declaration name="cs" type="int" line="110"/>
                        <scope line="111"/>
                        <scope line="114">
                            <scope line="115"/>
                        </scope>
                        <declaration name="vol" type="float" line="119"/>
                        <scope line="120"/>
                    </scope>
                    <scope line="124">
                        <declaration name="minChannels" type="int" line="125"/>
                        <declaration name="off_len" type="int" line="126"/>
                        <declaration name="ct" type="int" line="127"/>
                        <declaration name="cs" type="int" line="128"/>
                        <scope line="129">
                            <scope line="130"/>
                        </scope>
                        <scope line="134">
                            <scope line="135"/>
                        </scope>
                    </scope>
                </method>
                <method name="reset" type="void" line="142"/>
                <method name="skip" type="long" line="145">
                    <params>
                        <param name="len" type="long"/>
                    </params>
                    <declaration name="ret" type="long" line="146"/>
                </method>
            </class>
            <class name="AudioFloatInputStreamResampler" line="151">
                <extends class="AudioFloatInputStream"/>
                <declaration name="ais" type="AudioFloatInputStream" line="152"/>
                <declaration name="targetFormat" type="AudioFormat" line="153"/>
                <declaration name="skipbuffer" type="float[]" line="154"/>
                <declaration name="resampler" type="SoftAbstractResampler" line="155"/>
                <declaration name="pitch" type="float[]" line="156"/>
                <declaration name="ibuffer2" type="float[]" line="157"/>
                <declaration name="ibuffer" type="float[][]" line="158"/>
                <declaration name="ibuffer_index" type="float" line="159"/>
                <declaration name="ibuffer_len" type="int" line="160"/>
                <declaration name="nrofchannels" type="int" line="161"/>
                <declaration name="cbuffer" type="float[][]" line="162"/>
                <declaration name="buffer_len" type="int" line="163"/>
                <declaration name="pad" type="int" line="164"/>
                <declaration name="pad2" type="int" line="165"/>
                <declaration name="ix" type="float[]" line="166"/>
                <declaration name="ox" type="int[]" line="167"/>
                <declaration name="mark_ibuffer" type="float[][]" line="168"/>
                <declaration name="mark_ibuffer_index" type="float" line="169"/>
                <declaration name="mark_ibuffer_len" type="int" line="170"/>
                <method name="AudioFloatInputStreamResampler" type="constructor" line="171">
                    <params>
                        <param name="ais" type="AudioFloatInputStream"/>
                        <param name="format" type="AudioFormat"/>
                    </params>
                    <declaration name="sourceFormat" type="AudioFormat" line="173"/>
                    <declaration name="interpolation" type="Object" line="176"/>
                    <scope line="177">
                        <declaration name="resamplerType" type="String" line="178"/>
                    </scope>
                </method>
                <method name="available" type="int" line="196"/>
                <method name="close" type="void" line="199"/>
                <method name="getFormat" type="AudioFormat" line="202"/>
                <method name="getFrameLength" type="long" line="205"/>
                <method name="mark" type="void" line="208">
                    <params>
                        <param name="readlimit" type="int"/>
                    </params>
                    <scope line="212"/>
                    <scope line="215">
                        <declaration name="from" type="float[]" line="216"/>
                        <declaration name="to" type="float[]" line="217"/>
                        <scope line="218"/>
                    </scope>
                </method>
                <method name="markSupported" type="boolean" line="223"/>
                <method name="readNextBuffer" type="void" line="226">
                    <scope line="228">
                        <declaration name="buff" type="float[]" line="229"/>
                        <declaration name="buffer_len_pad" type="int" line="230"/>
                        <scope line="231"/>
                    </scope>
                    <scope line="237">
                        <scope line="238">
                            <declaration name="ret" type="int" line="239"/>
                        </scope>
                    </scope>
                    <scope line="246"/>
                    <declaration name="ibuffer2_len" type="int" line="249"/>
                    <scope line="250">
                        <declaration name="buff" type="float[]" line="251"/>
                        <scope line="252"/>
                    </scope>
                </method>
                <method name="read" type="int" line="257">
                    <params>
                        <param name="b" type="float[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="258"/>
                    <declaration name="offlen" type="int" line="263"/>
                    <declaration name="remain" type="int" line="264"/>
                    <declaration name="destPos" type="int" line="265"/>
                    <declaration name="in_end" type="int" line="266"/>
                    <scope line="267">
                        <scope line="268"/>
                        <scope line="272"/>
                        <declaration name="preDestPos" type="int" line="277"/>
                        <scope line="278">
                            <declaration name="buff" type="float[]" line="281"/>
                        </scope>
                    </scope>
                    <scope line="288">
                        <declaration name="ix" type="int" line="289"/>
                        <declaration name="buff" type="float[]" line="290"/>
                        <scope line="291"/>
                    </scope>
                </method>
                <method name="reset" type="void" line="297">
                    <scope line="302">
                        <declaration name="from" type="float[]" line="303"/>
                        <declaration name="to" type="float[]" line="304"/>
                        <scope line="305"/>
                    </scope>
                </method>
                <method name="skip" type="long" line="310">
                    <params>
                        <param name="len" type="long"/>
                    </params>
                    <declaration name="l_skipbuffer" type="float[]" line="313"/>
                    <declaration name="remain" type="long" line="314"/>
                    <scope line="315">
                        <declaration name="ret" type="int" line="316"/>
                        <scope line="317"/>
                    </scope>
                </method>
            </class>
            <declaration name="formats" type="Encoding[]" line="326"/>
            <method name="getAudioInputStream" type="AudioInputStream" line="327">
                <params>
                    <param name="targetEncoding" type="Encoding"/>
                    <param name="sourceStream" type="AudioInputStream"/>
                </params>
                <declaration name="format" type="AudioFormat" line="329"/>
                <declaration name="channels" type="int" line="330"/>
                <declaration name="encoding" type="Encoding" line="331"/>
                <declaration name="samplerate" type="float" line="332"/>
                <declaration name="bits" type="int" line="333"/>
                <declaration name="bigendian" type="boolean" line="334"/>
                <declaration name="targetFormat" type="AudioFormat" line="336"/>
            </method>
            <method name="getAudioInputStream" type="AudioInputStream" line="339">
                <params>
                    <param name="targetFormat" type="AudioFormat"/>
                    <param name="sourceStream" type="AudioInputStream"/>
                </params>
            </method>
            <method name="getAudioInputStream" type="AudioInputStream" line="343">
                <params>
                    <param name="targetFormat" type="AudioFormat"/>
                    <param name="sourceStream" type="AudioFloatInputStream"/>
                </params>
            </method>
            <method name="getSourceEncodings" type="Encoding[]" line="349"/>
            <method name="getTargetEncodings" type="Encoding[]" line="352"/>
            <method name="getTargetEncodings" type="Encoding[]" line="355">
                <params>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
            </method>
            <method name="getTargetFormats" type="AudioFormat[]" line="359">
                <params>
                    <param name="targetEncoding" type="Encoding"/>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
                <declaration name="channels" type="int" line="361"/>
                <declaration name="formats" type="ArrayList&lt;AudioFormat&gt;" line="362"/>
                <scope line="365">
                    <scope line="366"/>
                    <scope line="370"/>
                </scope>
                <scope line="375"/>
            </method>
            <method name="isConversionSupported" type="boolean" line="383">
                <params>
                    <param name="targetFormat" type="AudioFormat"/>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
            </method>
            <method name="isConversionSupported" type="boolean" line="390">
                <params>
                    <param name="targetEncoding" type="Encoding"/>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
                <scope line="392"/>
            </method>
        </class>
    </source>