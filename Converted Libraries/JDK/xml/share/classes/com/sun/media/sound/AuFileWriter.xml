<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.RandomAccessFile"/>
        <import package="java.io.SequenceInputStream"/>
        <import package="javax.sound.sampled.AudioFileFormat"/>
        <import package="javax.sound.sampled.AudioInputStream"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <class name="AuFileWriter" line="47">
            <extends class="SunFileWriter"/>
            <comment line="55">
                $$fb value for length field if length is not known                
            </comment>
            <comment line="145">
                -------------------------------------------------------------                
            </comment>
            <javadoc line="47">
                AU file writer.                
                <author>
                    Jan Borgersen                    
                </author>
            </javadoc>
            <declaration name="UNKNOWN_SIZE" type="int" line="55"/>
            <declaration name="auTypes" type="AudioFileFormat.Type" line="57"/>
            <javadoc line="57">
                AU type                
            </javadoc>
            <javadoc line="65">
                Constructs a new AuFileWriter object.                
            </javadoc>
            <method name="AuFileWriter" type="constructor" line="68"/>
            <method name="getAudioFileTypes" type="AudioFileFormat.Type[]" line="74">
                <params>
                    <param name="stream" type="AudioInputStream"/>
                </params>
                <comment line="79">
                    make sure we can write this stream                    
                </comment>
                <declaration name="filetypes" type="AudioFileFormat.Type[]" line="76"/>
                <declaration name="format" type="AudioFormat" line="80"/>
                <declaration name="encoding" type="AudioFormat.Encoding" line="81"/>
                <scope line="86"/>
            </method>
            <method name="write" type="int" line="95">
                <params>
                    <param name="stream" type="AudioInputStream"/>
                    <param name="fileType" type="AudioFileFormat.Type"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="97">
                    we must know the total data length to calculate the file length                    
                </comment>
                <comment line="98">
                    $$fb 2001-07-13: fix for bug 4351296: do not throw an exception                    
                </comment>
                <comment line="99">
                    if( stream.getFrameLength() == AudioSystem.NOT_SPECIFIED ) {                    
                </comment>
                <comment line="100">
                    throw new IOException(&quot;stream length not specified&quot;);                    
                </comment>
                <comment line="101">
                    }                    
                </comment>
                <comment line="103">
                    throws IllegalArgumentException if not supported                    
                </comment>
                <declaration name="auFileFormat" type="AuFileFormat" line="104"/>
                <declaration name="bytesWritten" type="int" line="106"/>
            </method>
            <method name="write" type="int" line="112">
                <params>
                    <param name="stream" type="AudioInputStream"/>
                    <param name="fileType" type="AudioFileFormat.Type"/>
                    <param name="out" type="File"/>
                </params>
                <comment line="114">
                    throws IllegalArgumentException if not supported                    
                </comment>
                <comment line="117">
                    first write the file without worrying about length fields                    
                </comment>
                <comment line="118">
                    throws IOException                    
                </comment>
                <comment line="123">
                    now, if length fields were not specified, calculate them,                    
                </comment>
                <comment line="124">
                    open as a random access file, write the appropriate fields,                    
                </comment>
                <comment line="125">
                    close again....                    
                </comment>
                <comment line="128">
                    $$kk: 10.22.99: jan: please either implement this or throw an exception!                    
                </comment>
                <comment line="129">
                    $$fb: 2001-07-13: done. Fixes Bug 4479981                    
                </comment>
                <comment line="132">
                    skip AU magic and data offset field                    
                </comment>
                <comment line="135">
                    that&apos;s all                    
                </comment>
                <declaration name="auFileFormat" type="AuFileFormat" line="115"/>
                <declaration name="fos" type="FileOutputStream" line="118"/>
                <declaration name="bos" type="BufferedOutputStream" line="119"/>
                <declaration name="bytesWritten" type="int" line="120"/>
                <scope line="126">
                    <declaration name="raf" type="RandomAccessFile" line="130"/>
                    <scope line="131"/>
                </scope>
            </method>
            <javadoc line="146">
                Returns the AudioFileFormat describing the file that will be written from this AudioInputStream.
                  Throws IllegalArgumentException if not supported.                
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="150">
                <params>
                    <param name="type" type="AudioFileFormat.Type"/>
                    <param name="stream" type="AudioInputStream"/>
                </params>
                <comment line="195">
                    AU is always big endian                    
                </comment>
                <declaration name="format" type="AudioFormat" line="152"/>
                <declaration name="fileFormat" type="AuFileFormat" line="153"/>
                <declaration name="encoding" type="AudioFormat.Encoding" line="154"/>
                <declaration name="streamFormat" type="AudioFormat" line="156"/>
                <declaration name="streamEncoding" type="AudioFormat.Encoding" line="157"/>
                <declaration name="sampleRate" type="float" line="160"/>
                <declaration name="sampleSizeInBits" type="int" line="161"/>
                <declaration name="channels" type="int" line="162"/>
                <declaration name="frameSize" type="int" line="163"/>
                <declaration name="frameRate" type="float" line="164"/>
                <declaration name="fileSize" type="int" line="165"/>
                <scope line="167"/>
                <scope line="172"/>
                <scope line="177"/>
                <scope line="182"/>
                <scope line="198"/>
                <scope line="200"/>
            </method>
            <method name="getFileStream" type="InputStream" line="213">
                <params>
                    <param name="auFileFormat" type="AuFileFormat"/>
                    <param name="audioStream" type="InputStream"/>
                </params>
                <comment line="215">
                    private method ... assumes auFileFormat is a supported file type                    
                </comment>
                <comment line="222">
                    $$fb fix for Bug 4351296                    
                </comment>
                <comment line="223">
                    int dataSizeInBytes = dataSize * format.getFrameSize();                    
                </comment>
                <comment line="231">
                    $$fb below is the fix for 4297100.                    
                </comment>
                <comment line="232">
                    boolean bigendian      = format.isBigEndian();                    
                </comment>
                <comment line="233">
                    force bigendian                    
                </comment>
                <comment line="245">
                    if we need to do any format conversion, do it here.                    
                </comment>
                <comment line="255">
                    $$ fb 2001-07-13: Bug 4391108                    
                </comment>
                <comment line="260">
                    plug in the transcoder to convert to PCM_SIGNED, bigendian                    
                </comment>
                <comment line="261">
                    NOTE: little endian AU is not common, so we&apos;re always converting                    
                </comment>
                <comment line="262">
                    to big endian unless the passed in audioFileFormat is little.                    
                </comment>
                <comment line="263">
                    $$fb this NOTE is superseded. We always write big endian au files, this is by far the standard.                    
                </comment>
                <comment line="298">
                    Now create a new InputStream from headerStream and the InputStream                    
                </comment>
                <comment line="299">
                    in audioStream                    
                </comment>
                <declaration name="format" type="AudioFormat" line="217"/>
                <declaration name="magic" type="int" line="219"/>
                <declaration name="headerSize" type="int" line="220"/>
                <declaration name="dataSize" type="long" line="221"/>
                <declaration name="dataSizeInBytes" type="long" line="224"/>
                <scope line="225"/>
                <declaration name="encoding_local" type="int" line="228"/>
                <declaration name="sampleRate" type="int" line="229"/>
                <declaration name="channels" type="int" line="230"/>
                <declaration name="bigendian" type="boolean" line="233"/>
                <declaration name="header" type="byte" line="235"/>
                <declaration name="headerStream" type="ByteArrayInputStream" line="236"/>
                <declaration name="baos" type="ByteArrayOutputStream" line="237"/>
                <declaration name="dos" type="DataOutputStream" line="238"/>
                <declaration name="auStream" type="SequenceInputStream" line="239"/>
                <declaration name="audioStreamFormat" type="AudioFormat" line="241"/>
                <declaration name="encoding" type="AudioFormat.Encoding" line="242"/>
                <declaration name="codedAudioStream" type="InputStream" line="243"/>
                <scope line="249">
                    <scope line="258"/>
                </scope>
                <scope line="282"/>
                <scope line="289"/>
            </method>
            <method name="writeAuFile" type="int" line="310">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="auFileFormat" type="AuFileFormat"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="bytesRead" type="int" line="312"/>
                <declaration name="bytesWritten" type="int" line="313"/>
                <declaration name="fileStream" type="InputStream" line="314"/>
                <declaration name="buffer" type="byte" line="315"/>
                <declaration name="maxLength" type="int" line="316"/>
                <scope line="318">
                    <scope line="319">
                        <scope line="320"/>
                        <scope line="324"/>
                    </scope>
                    <scope line="330"/>
                </scope>
            </method>
        </class>
    </source>