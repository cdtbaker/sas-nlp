<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Vector"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <import package="javax.sound.sampled.AudioInputStream"/>
        <class name="AlawCodec" line="8">
            <extends class="SunCodec"/>
            <javadoc line="8">
                A-law encodes linear data, and decodes a-law data to linear data.                
                <author>
                    Kara Kytle                    
                </author>
            </javadoc>
            <declaration name="ALAW_TABH" type="byte" line="13"/>
            <declaration name="ALAW_TABL" type="byte" line="14"/>
            <declaration name="alawEncodings" type="AudioFormat.Encoding[]" line="15"/>
            <declaration name="seg_end" type="short" line="16"/>
            <javadoc line="17">
                Initializes the decode tables                
            </javadoc>
            <scope line="20">
                <scope line="21">
                    <declaration name="input" type="int" line="22"/>
                    <declaration name="mantissa" type="int" line="23"/>
                    <declaration name="segment" type="int" line="24"/>
                    <declaration name="value" type="int" line="25"/>
                </scope>
            </scope>
            <javadoc line="33">
                Constructs a new ALAW codec object.                
            </javadoc>
            <method name="AlawCodec" type="constructor" line="36"/>
            <javadoc line="39">
                                
            </javadoc>
            <method name="getTargetEncodings" type="AudioFormat.Encoding[]" line="41">
                <params>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
                <scope line="42">
                    <scope line="43">
                        <declaration name="enc" type="AudioFormat.Encoding" line="44"/>
                    </scope>
                    <scope line="48"/>
                </scope>
                <scope line="52">
                    <scope line="53">
                        <declaration name="enc" type="AudioFormat.Encoding" line="54"/>
                    </scope>
                    <scope line="58"/>
                </scope>
                <scope line="62"/>
            </method>
            <javadoc line="66">
                                
            </javadoc>
            <method name="getTargetFormats" type="AudioFormat[]" line="68">
                <params>
                    <param name="targetEncoding" type="AudioFormat.Encoding"/>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
                <scope line="69"/>
                <scope line="72"/>
            </method>
            <javadoc line="76">
                                
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="78">
                <params>
                    <param name="targetEncoding" type="AudioFormat.Encoding"/>
                    <param name="sourceStream" type="AudioInputStream"/>
                </params>
                <declaration name="sourceFormat" type="AudioFormat" line="79"/>
                <declaration name="sourceEncoding" type="AudioFormat.Encoding" line="80"/>
                <scope line="81"/>
                <scope line="84">
                    <declaration name="targetFormat" type="AudioFormat" line="85"/>
                    <scope line="86"/>
                    <scope line="89"/>
                    <scope line="92"/>
                    <scope line="95"/>
                </scope>
            </method>
            <javadoc line="101">
                use old code...                
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="104">
                <params>
                    <param name="targetFormat" type="AudioFormat"/>
                    <param name="sourceStream" type="AudioInputStream"/>
                </params>
            </method>
            <javadoc line="107">
                Opens the codec with the specified parameters.                
                <param>
                    stream stream from which data to be processed should be read                    
                </param>
                <param>
                    outputFormat desired data format of the stream after processing                    
                </param>
                <return>
                    stream from which processed data may be read                    
                </return>
                <throws>
                    IllegalArgumentException if the format combination supplied is
                      not supported.                    
                </throws>
            </javadoc>
            <method name="getConvertedStream" type="AudioInputStream" line="115">
                <params>
                    <param name="outputFormat" type="AudioFormat"/>
                    <param name="stream" type="AudioInputStream"/>
                </params>
                <declaration name="cs" type="AudioInputStream" line="116"/>
                <declaration name="inputFormat" type="AudioFormat" line="117"/>
                <scope line="118"/>
                <scope line="121"/>
            </method>
            <javadoc line="126">
                Obtains the set of output formats supported by the codec
                  given a particular input format.
                  If no output formats are supported for this input format,
                  returns an array of length 0.                
                <return>
                    array of supported output formats.                    
                </return>
            </javadoc>
            <method name="getOutputFormats" type="AudioFormat[]" line="133">
                <params>
                    <param name="inputFormat" type="AudioFormat"/>
                </params>
                <declaration name="formats" type="Vector" line="134"/>
                <declaration name="format" type="AudioFormat" line="135"/>
                <scope line="136"/>
                <scope line="140"/>
                <declaration name="formatArray" type="AudioFormat[]" line="146"/>
                <scope line="147"/>
            </method>
            <class name="AlawCodecStream" line="152">
                <extends class="AudioInputStream"/>
                <declaration name="tempBufferSize" type="int" line="153"/>
                <declaration name="tempBuffer" type="byte" line="154"/>
                <declaration name="encode" type="boolean" line="155"/>
                <javadoc line="155">
                    True to encode to a-law, false to decode to linear                    
                </javadoc>
                <declaration name="encodeFormat" type="AudioFormat" line="159"/>
                <declaration name="decodeFormat" type="AudioFormat" line="160"/>
                <declaration name="tabByte1" type="byte" line="161"/>
                <declaration name="tabByte2" type="byte" line="162"/>
                <declaration name="highByte" type="int" line="163"/>
                <declaration name="lowByte" type="int" line="164"/>
                <method name="AlawCodecStream" type="constructor" line="165">
                    <params>
                        <param name="stream" type="AudioInputStream"/>
                        <param name="outputFormat" type="AudioFormat"/>
                    </params>
                    <declaration name="inputFormat" type="AudioFormat" line="167"/>
                    <scope line="168"/>
                    <declaration name="PCMIsBigEndian" type="boolean" line="171"/>
                    <scope line="172"/>
                    <scope line="178"/>
                    <scope line="185"/>
                    <scope line="191"/>
                    <scope line="197"/>
                    <scope line="202"/>
                </method>
                <method name="search" type="short" line="206">
                    <params>
                        <param name="val" type="short"/>
                        <param name="table" type="short"/>
                        <param name="size" type="short"/>
                    </params>
                    <scope line="207">
                        <scope line="208"/>
                    </scope>
                </method>
                <javadoc line="214">
                    Note that this won&apos;t actually read anything; must read in
                      two-byte units.                    
                </javadoc>
                <method name="read" type="int" line="218">
                    <declaration name="b" type="byte[]" line="219"/>
                </method>
                <method name="read" type="int" line="222">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="read" type="int" line="225">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="226"/>
                    <scope line="229">
                        <declaration name="QUANT_MASK" type="short" line="230"/>
                        <declaration name="SEG_SHIFT" type="short" line="231"/>
                        <declaration name="mask" type="short" line="232"/>
                        <declaration name="seg" type="short" line="233"/>
                        <declaration name="adj" type="int" line="234"/>
                        <declaration name="i" type="int" line="235"/>
                        <declaration name="sample" type="short" line="236"/>
                        <declaration name="enc" type="byte" line="237"/>
                        <declaration name="readCount" type="int" line="238"/>
                        <declaration name="currentPos" type="int" line="239"/>
                        <declaration name="readLeft" type="int" line="240"/>
                        <declaration name="readLen" type="int" line="241"/>
                        <scope line="242">
                            <scope line="243">
                                <scope line="246"/>
                                <scope line="249"/>
                                <scope line="254"/>
                                <scope line="257">
                                    <scope line="259"/>
                                    <scope line="262"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="273"/>
                    </scope>
                    <scope line="278">
                        <declaration name="i" type="int" line="279"/>
                        <declaration name="readLen" type="int" line="280"/>
                        <declaration name="readOffset" type="int" line="281"/>
                        <declaration name="readCount" type="int" line="282"/>
                        <scope line="283"/>
                        <scope line="288"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>