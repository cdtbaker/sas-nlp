<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Vector"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <import package="javax.sound.sampled.AudioInputStream"/>
        <class name="AlawCodec" line="38">
            <extends class="SunCodec"/>
            <comment line="46">
                                
            </comment>
            <comment line="88">
                NEW CODE                
            </comment>
            <comment line="182">
                OLD CODE                
            </comment>
            <comment line="450">
                end class AlawCodecStream                
            </comment>
            <javadoc line="38">
                A-law encodes linear data, and decodes a-law data to linear data.                
                <author>
                    Kara Kytle                    
                </author>
            </javadoc>
            <declaration name="ALAW_TABH" type="byte" line="47"/>
            <declaration name="ALAW_TABL" type="byte" line="48"/>
            <declaration name="alawEncodings" type="AudioFormat.Encoding[]" line="50"/>
            <declaration name="seg_end" type="short" line="52"/>
            <javadoc line="55">
                Initializes the decode tables                
            </javadoc>
            <scope line="58">
                <scope line="59">
                    <declaration name="input" type="int" line="60"/>
                    <declaration name="mantissa" type="int" line="61"/>
                    <declaration name="segment" type="int" line="62"/>
                    <declaration name="value" type="int" line="63"/>
                </scope>
            </scope>
            <javadoc line="79">
                Constructs a new ALAW codec object.                
            </javadoc>
            <method name="AlawCodec" type="constructor" line="82"/>
            <javadoc line="89">
                                
            </javadoc>
            <method name="getTargetEncodings" type="AudioFormat.Encoding[]" line="91">
                <params>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
                <scope line="93">
                    <scope line="95">
                        <declaration name="enc" type="AudioFormat.Encoding" line="97"/>
                    </scope>
                    <scope line="101"/>
                </scope>
                <scope line="104">
                    <scope line="106">
                        <declaration name="enc" type="AudioFormat.Encoding" line="108"/>
                    </scope>
                    <scope line="112"/>
                </scope>
                <scope line="116"/>
            </method>
            <javadoc line="121">
                                
            </javadoc>
            <method name="getTargetFormats" type="AudioFormat[]" line="123">
                <params>
                    <param name="targetEncoding" type="AudioFormat.Encoding"/>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
                <scope line="125"/>
                <scope line="127"/>
            </method>
            <javadoc line="132">
                                
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="134">
                <params>
                    <param name="targetEncoding" type="AudioFormat.Encoding"/>
                    <param name="sourceStream" type="AudioInputStream"/>
                </params>
                <declaration name="sourceFormat" type="AudioFormat" line="135"/>
                <declaration name="sourceEncoding" type="AudioFormat.Encoding" line="136"/>
                <scope line="138"/>
                <scope line="140">
                    <declaration name="targetFormat" type="AudioFormat" line="141"/>
                    <scope line="142"/>
                    <scope line="146"/>
                    <scope line="157"/>
                    <scope line="166"/>
                </scope>
            </method>
            <javadoc line="173">
                use old code...                
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="176">
                <params>
                    <param name="targetFormat" type="AudioFormat"/>
                    <param name="sourceStream" type="AudioInputStream"/>
                </params>
            </method>
            <javadoc line="184">
                Opens the codec with the specified parameters.                
                <param>
                    stream stream from which data to be processed should be read                    
                </param>
                <param>
                    outputFormat desired data format of the stream after processing                    
                </param>
                <return>
                    stream from which processed data may be read                    
                </return>
                <throws>
                    IllegalArgumentException if the format combination supplied is
                      not supported.                    
                </throws>
            </javadoc>
            <method name="getConvertedStream" type="AudioInputStream" line="193">
                <params>
                    <param name="outputFormat" type="AudioFormat"/>
                    <param name="stream" type="AudioInputStream"/>
                </params>
                <comment line="192">
                                        
                </comment>
                <declaration name="cs" type="AudioInputStream" line="195"/>
                <declaration name="inputFormat" type="AudioFormat" line="196"/>
                <scope line="198"/>
                <scope line="200"/>
            </method>
            <javadoc line="207">
                Obtains the set of output formats supported by the codec
                  given a particular input format.
                  If no output formats are supported for this input format,
                  returns an array of length 0.                
                <return>
                    array of supported output formats.                    
                </return>
            </javadoc>
            <method name="getOutputFormats" type="AudioFormat[]" line="215">
                <params>
                    <param name="inputFormat" type="AudioFormat"/>
                </params>
                <comment line="214">
                                        
                </comment>
                <declaration name="formats" type="Vector" line="218"/>
                <declaration name="format" type="AudioFormat" line="219"/>
                <scope line="221"/>
                <scope line="232"/>
                <declaration name="formatArray" type="AudioFormat[]" line="251"/>
                <scope line="252"/>
            </method>
            <class name="AlawCodecStream" line="259">
                <extends class="AudioInputStream"/>
                <comment line="193">
                                        
                </comment>
                <comment line="215">
                                        
                </comment>
                <comment line="262">
                    tempBuffer required only for encoding (when encode is true)                    
                </comment>
                <comment line="334">
                    $$jb 22399
                     Used to determine segment number in aLaw encoding                    
                </comment>
                <declaration name="tempBufferSize" type="int" line="262"/>
                <declaration name="tempBuffer" type="byte" line="263"/>
                <declaration name="encode" type="boolean" line="265"/>
                <javadoc line="265">
                    True to encode to a-law, false to decode to linear                    
                </javadoc>
                <declaration name="encodeFormat" type="AudioFormat" line="270"/>
                <declaration name="decodeFormat" type="AudioFormat" line="271"/>
                <declaration name="tabByte1" type="byte" line="273"/>
                <declaration name="tabByte2" type="byte" line="274"/>
                <declaration name="highByte" type="int" line="275"/>
                <declaration name="lowByte" type="int" line="276"/>
                <method name="AlawCodecStream" type="constructor" line="278">
                    <params>
                        <param name="stream" type="AudioInputStream"/>
                        <param name="outputFormat" type="AudioFormat"/>
                    </params>
                    <comment line="284">
                        throw an IllegalArgumentException if not ok                        
                    </comment>
                    <comment line="290">
                        $$fb 2002-07-18: fix for 4714846: JavaSound ULAW (8-bit) encoder erroneously depends on endian-ness                        
                    </comment>
                    <comment line="293">
                        determine whether we are encoding or decoding                        
                    </comment>
                    <comment line="319">
                        set the AudioInputStream length in frames if we know it                        
                    </comment>
                    <comment line="324">
                        set framePos to zero                        
                    </comment>
                    <declaration name="inputFormat" type="AudioFormat" line="282"/>
                    <scope line="285"/>
                    <declaration name="PCMIsBigEndian" type="boolean" line="291"/>
                    <scope line="294"/>
                    <scope line="299"/>
                    <scope line="307"/>
                    <scope line="312"/>
                    <scope line="320"/>
                    <scope line="327"/>
                </method>
                <method name="search" type="short" line="337">
                    <params>
                        <param name="val" type="short"/>
                        <param name="table" type="short"/>
                        <param name="size" type="short"/>
                    </params>
                    <scope line="338">
                        <scope line="339"/>
                    </scope>
                </method>
                <javadoc line="344">
                    Note that this won&apos;t actually read anything; must read in
                      two-byte units.                    
                </javadoc>
                <method name="read" type="int" line="348">
                    <declaration name="b" type="byte[]" line="350"/>
                </method>
                <method name="read" type="int" line="355">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                </method>
                <method name="read" type="int" line="360">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <comment line="362">
                        don&apos;t read fractional frames                        
                    </comment>
                    <comment line="388">
                                                
                    </comment>
                    <comment line="398">
                                                
                    </comment>
                    <comment line="400">
                        Combine the sign, segment, quantization bits                        
                    </comment>
                    <comment line="403">
                                                
                    </comment>
                    <comment line="414">
                                                
                    </comment>
                    <comment line="418">
                                                
                    </comment>
                    <comment line="423">
                        EOF or error                        
                    </comment>
                    <comment line="427">
                                                
                    </comment>
                    <comment line="442">
                        EOF or error                        
                    </comment>
                    <scope line="363"/>
                    <scope line="367">
                        <declaration name="QUANT_MASK" type="short" line="369"/>
                        <declaration name="SEG_SHIFT" type="short" line="370"/>
                        <declaration name="mask" type="short" line="371"/>
                        <declaration name="seg" type="short" line="372"/>
                        <declaration name="adj" type="int" line="373"/>
                        <declaration name="i" type="int" line="374"/>
                        <declaration name="sample" type="short" line="376"/>
                        <declaration name="enc" type="byte" line="377"/>
                        <declaration name="readCount" type="int" line="379"/>
                        <declaration name="currentPos" type="int" line="380"/>
                        <declaration name="readLeft" type="int" line="381"/>
                        <declaration name="readLen" type="int" line="382"/>
                        <scope line="384">
                            <scope line="386">
                                <scope line="392"/>
                                <scope line="394"/>
                                <scope line="403"/>
                                <scope line="405">
                                    <scope line="407"/>
                                    <scope line="409"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="423"/>
                    </scope>
                    <scope line="429">
                        <declaration name="i" type="int" line="431"/>
                        <declaration name="readLen" type="int" line="432"/>
                        <declaration name="readOffset" type="int" line="433"/>
                        <declaration name="readCount" type="int" line="434"/>
                        <scope line="436"/>
                        <scope line="442"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>