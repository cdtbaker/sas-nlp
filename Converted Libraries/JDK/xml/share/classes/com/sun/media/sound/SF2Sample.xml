<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.InputStream"/>
        <import package="javax.sound.midi.Soundbank"/>
        <import package="javax.sound.midi.SoundbankResource"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioInputStream"/>
        <class name="SF2Sample" line="34">
            <extends class="SoundbankResource"/>
            <comment line="141">
                public void setData(File file, int offset, int length) {
                this.data = null;
                this.sampleFile = file;
                this.sampleOffset = offset;
                this.sampleLen = length;
                }                
            </comment>
            <javadoc line="34">
                Soundfont sample storage.                
                <author>
                    Karl Helgason                    
                </author>
            </javadoc>
            <declaration name="name" type="String" line="41"/>
            <declaration name="startLoop" type="long" line="42"/>
            <declaration name="endLoop" type="long" line="43"/>
            <declaration name="sampleRate" type="long" line="44"/>
            <declaration name="originalPitch" type="int" line="45"/>
            <declaration name="pitchCorrection" type="byte" line="46"/>
            <declaration name="sampleLink" type="int" line="47"/>
            <declaration name="sampleType" type="int" line="48"/>
            <declaration name="data" type="ModelByteBuffer" line="49"/>
            <declaration name="data24" type="ModelByteBuffer" line="50"/>
            <method name="SF2Sample" type="constructor" line="52">
                <params>
                    <param name="soundBank" type="Soundbank"/>
                </params>
            </method>
            <method name="SF2Sample" type="constructor" line="56"/>
            <method name="getData" type="Object" line="60">
                <comment line="63">
                    if (sampleFile != null) {
                    FileInputStream fis;
                    try {
                    fis = new FileInputStream(sampleFile);
                    RIFFReader riff = new RIFFReader(fis);
                    if (!riff.getFormat().equals(&quot;RIFF&quot;)) {
                    throw new RIFFInvalidDataException(
                    &quot;Input stream is not a valid RIFF stream!&quot;);
                    }
                    if (!riff.getType().equals(&quot;sfbk&quot;)) {
                    throw new RIFFInvalidDataException(
                    &quot;Input stream is not a valid SoundFont!&quot;);
                    }
                    while (riff.hasNextChunk()) {
                    RIFFReader chunk = riff.nextChunk();
                    if (chunk.getFormat().equals(&quot;LIST&quot;)) {
                    if (chunk.getType().equals(&quot;sdta&quot;)) {
                    while(chunk.hasNextChunk()) {
                    RIFFReader chunkchunk = chunk.nextChunk();
                    if(chunkchunk.getFormat().equals(&quot;smpl&quot;)) {
                    chunkchunk.skip(sampleOffset);
                    return new AudioInputStream(chunkchunk,
                    format, sampleLen);
                    }
                    }
                    }
                    }
                    }
                    return null;
                    } catch (Exception e) {
                    return new Throwable(e.toString());
                    }
                    }                    
                </comment>
                <declaration name="format" type="AudioFormat" line="62"/>
                <declaration name="is" type="InputStream" line="98"/>
            </method>
            <method name="getDataBuffer" type="ModelByteBuffer" line="104"/>
            <method name="getData24Buffer" type="ModelByteBuffer" line="108"/>
            <method name="getFormat" type="AudioFormat" line="112"/>
            <method name="setData" type="void" line="116">
                <params>
                    <param name="data" type="ModelByteBuffer"/>
                </params>
            </method>
            <method name="setData" type="void" line="120">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <method name="setData" type="void" line="124">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="setData24" type="void" line="128">
                <params>
                    <param name="data24" type="ModelByteBuffer"/>
                </params>
            </method>
            <method name="setData24" type="void" line="132">
                <params>
                    <param name="data24" type="byte[]"/>
                </params>
            </method>
            <method name="setData24" type="void" line="136">
                <params>
                    <param name="data24" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="getName" type="String" line="149"/>
            <method name="setName" type="void" line="153">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getEndLoop" type="long" line="157"/>
            <method name="setEndLoop" type="void" line="161">
                <params>
                    <param name="endLoop" type="long"/>
                </params>
            </method>
            <method name="getOriginalPitch" type="int" line="165"/>
            <method name="setOriginalPitch" type="void" line="169">
                <params>
                    <param name="originalPitch" type="int"/>
                </params>
            </method>
            <method name="getPitchCorrection" type="byte" line="173"/>
            <method name="setPitchCorrection" type="void" line="177">
                <params>
                    <param name="pitchCorrection" type="byte"/>
                </params>
            </method>
            <method name="getSampleLink" type="int" line="181"/>
            <method name="setSampleLink" type="void" line="185">
                <params>
                    <param name="sampleLink" type="int"/>
                </params>
            </method>
            <method name="getSampleRate" type="long" line="189"/>
            <method name="setSampleRate" type="void" line="193">
                <params>
                    <param name="sampleRate" type="long"/>
                </params>
            </method>
            <method name="getSampleType" type="int" line="197"/>
            <method name="setSampleType" type="void" line="201">
                <params>
                    <param name="sampleType" type="int"/>
                </params>
            </method>
            <method name="getStartLoop" type="long" line="205"/>
            <method name="setStartLoop" type="void" line="209">
                <params>
                    <param name="startLoop" type="long"/>
                </params>
            </method>
            <method name="toString" type="String" line="213"/>
        </class>
    </source>