<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.DataInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.PipedInputStream"/>
        <import package="java.io.PipedOutputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.SequenceInputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.lang.IllegalArgumentException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Vector"/>
        <import package="javax.sound.midi.MidiFileFormat"/>
        <import package="javax.sound.midi.InvalidMidiDataException"/>
        <import package="javax.sound.midi.MidiEvent"/>
        <import package="javax.sound.midi.MetaMessage"/>
        <import package="javax.sound.midi.MidiMessage"/>
        <import package="javax.sound.midi.Sequence"/>
        <import package="javax.sound.midi.ShortMessage"/>
        <import package="javax.sound.midi.SysexMessage"/>
        <import package="javax.sound.midi.Track"/>
        <import package="javax.sound.midi.spi.MidiFileWriter"/>
        <class name="StandardMidiFileWriter" line="56">
            <extends class="MidiFileWriter"/>
            <comment line="65">
                &apos;MThd&apos;                
            </comment>
            <comment line="66">
                &apos;MTrk&apos;                
            </comment>
            <comment line="78">
                buffersize for write                
            </comment>
            <comment line="79">
                data output stream for track writing                
            </comment>
            <comment line="165">
                =================================================================================                
            </comment>
            <javadoc line="56">
                MIDI file writer.                
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Jan Borgersen                    
                </author>
            </javadoc>
            <declaration name="MThd_MAGIC" type="int" line="64"/>
            <declaration name="MTrk_MAGIC" type="int" line="65"/>
            <declaration name="ONE_BYTE" type="int" line="67"/>
            <declaration name="TWO_BYTE" type="int" line="68"/>
            <declaration name="SYSEX" type="int" line="69"/>
            <declaration name="META" type="int" line="70"/>
            <declaration name="ERROR" type="int" line="71"/>
            <declaration name="IGNORE" type="int" line="72"/>
            <declaration name="MIDI_TYPE_0" type="int" line="74"/>
            <declaration name="MIDI_TYPE_1" type="int" line="75"/>
            <declaration name="bufferSize" type="int" line="77"/>
            <declaration name="tddos" type="DataOutputStream" line="78"/>
            <declaration name="types" type="int" line="82"/>
            <javadoc line="82">
                MIDI parser types                
            </javadoc>
            <javadoc line="91">
                new                
            </javadoc>
            <method name="getMidiFileTypes" type="int[]" line="94">
                <declaration name="localArray" type="int[]" line="95"/>
            </method>
            <javadoc line="100">
                Obtains the file types that this provider can write from the
                  sequence specified.                
                <param>
                    sequence the sequence for which midi file type support
                      is queried                    
                </param>
                <return>
                    array of file types.  If no file types are supported,
                      returns an array of length 0.                    
                </return>
            </javadoc>
            <method name="getMidiFileTypes" type="int[]" line="108">
                <params>
                    <param name="sequence" type="Sequence"/>
                </params>
                <declaration name="typesArray" type="int" line="109"/>
                <declaration name="tracks" type="Track" line="110"/>
                <scope line="112"/>
                <scope line="116"/>
            </method>
            <method name="isFileTypeSupported" type="boolean" line="124">
                <params>
                    <param name="type" type="int"/>
                </params>
                <scope line="125">
                    <scope line="126"/>
                </scope>
            </method>
            <method name="write" type="int" line="133">
                <params>
                    <param name="in" type="Sequence"/>
                    <param name="type" type="int"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="143">
                    First get the fileStream from this sequence                    
                </comment>
                <comment line="154">
                    Done....return bytesWritten                    
                </comment>
                <declaration name="buffer" type="byte[]" line="134"/>
                <declaration name="bytesRead" type="int" line="136"/>
                <declaration name="bytesWritten" type="long" line="137"/>
                <scope line="139"/>
                <declaration name="fileStream" type="InputStream" line="143"/>
                <scope line="144"/>
                <scope line="149"/>
            </method>
            <method name="write" type="int" line="157">
                <params>
                    <param name="in" type="Sequence"/>
                    <param name="type" type="int"/>
                    <param name="out" type="File"/>
                </params>
                <comment line="159">
                    throws IOException                    
                </comment>
                <declaration name="fos" type="FileOutputStream" line="158"/>
                <declaration name="bytesWritten" type="int" line="159"/>
            </method>
            <method name="getFileStream" type="InputStream" line="167">
                <params>
                    <param name="type" type="int"/>
                    <param name="sequence" type="Sequence"/>
                </params>
                <comment line="184">
                    Determine the filetype to write                    
                </comment>
                <comment line="190">
                    $$jb: 05.31.99: we _can_ write TYPE_1 if tracks.length==1                    
                </comment>
                <comment line="203">
                    Now build the file one track at a time
                     Note that above we made sure that MIDI_TYPE_0 only happens
                     if tracks.length==1                    
                </comment>
                <comment line="216">
                    bytesBuilt += trackStreams[i].getLength();                    
                </comment>
                <comment line="219">
                    Now seqence the track streams                    
                </comment>
                <comment line="225">
                    fix for 5048381: NullPointerException when saving a MIDI sequence
                     don&apos;t include failed track streams                    
                </comment>
                <comment line="235">
                    Now build the header...                    
                </comment>
                <comment line="240">
                    Write the magic number                    
                </comment>
                <comment line="243">
                    Write the header length                    
                </comment>
                <comment line="246">
                    Write the filetype                    
                </comment>
                <comment line="250">
                    MIDI_TYPE_1                    
                </comment>
                <comment line="254">
                    Write the number of tracks                    
                </comment>
                <comment line="257">
                    Determine and write the timing format                    
                </comment>
                <comment line="274">
                    $$jb: 04.08.99: What to really do here?                    
                </comment>
                <comment line="279">
                    now construct an InputStream to become the FileStream                    
                </comment>
                <declaration name="tracks" type="Track" line="168"/>
                <declaration name="bytesBuilt" type="int" line="169"/>
                <declaration name="headerLength" type="int" line="170"/>
                <declaration name="length" type="int" line="171"/>
                <declaration name="timeFormat" type="int" line="172"/>
                <declaration name="divtype" type="float" line="173"/>
                <declaration name="hpos" type="PipedOutputStream" line="175"/>
                <declaration name="hdos" type="DataOutputStream" line="176"/>
                <declaration name="headerStream" type="PipedInputStream" line="177"/>
                <declaration name="trackStreams" type="InputStream" line="179"/>
                <declaration name="trackStream" type="InputStream" line="180"/>
                <declaration name="fStream" type="InputStream" line="181"/>
                <scope line="184">
                    <scope line="185"/>
                </scope>
                <scope line="188">
                    <scope line="189"/>
                </scope>
                <scope line="192">
                    <scope line="193"/>
                    <scope line="195"/>
                    <scope line="197"/>
                </scope>
                <declaration name="trackCount" type="int" line="207"/>
                <scope line="208">
                    <scope line="209"/>
                    <scope line="212"/>
                </scope>
                <scope line="219"/>
                <scope line="221">
                    <scope line="223">
                        <scope line="226"/>
                    </scope>
                </scope>
                <scope line="230"/>
                <scope line="246"/>
                <scope line="248"/>
                <scope line="258"/>
                <scope line="260"/>
                <scope line="263"/>
                <scope line="266"/>
                <scope line="269"/>
                <scope line="272"/>
            </method>
            <javadoc line="286">
                Returns ONE_BYTE, TWO_BYTE, SYSEX, META,
                  ERROR, or IGNORE (i.e. invalid for a MIDI file)                
            </javadoc>
            <method name="getType" type="int" line="290">
                <params>
                    <param name="byteValue" type="int"/>
                </params>
                <scope line="291"/>
            </method>
            <declaration name="mask" type="long" line="316"/>
            <method name="writeVarInt" type="int" line="318">
                <params>
                    <param name="value" type="long"/>
                </params>
                <comment line="321">
                    number of bitwise left-shifts of mask                    
                </comment>
                <comment line="322">
                    first screen out leading zeros                    
                </comment>
                <comment line="324">
                    then write actual values                    
                </comment>
                <declaration name="len" type="int" line="319"/>
                <declaration name="shift" type="int" line="320"/>
                <scope line="324"/>
            </method>
            <method name="writeTrack" type="InputStream" line="333">
                <params>
                    <param name="track" type="Track"/>
                    <param name="type" type="int"/>
                </params>
                <comment line="353">
                    -----------------------------
                     Write each event in the track
                     -----------------------------                    
                </comment>
                <comment line="369">
                    get the tick
                     $$jb: this gets easier if we change all system-wide time to delta ticks                    
                </comment>
                <comment line="375">
                    get the status byte                    
                </comment>
                <comment line="412">
                    $$jb: 04.08.99: always write status for sysex                    
                </comment>
                <comment line="416">
                    $$jb: 10.18.99: we don&apos;t maintain length in
                     the message data for SysEx (it is not transmitted
                     over the line), so write the calculated length
                     minus the status byte                    
                </comment>
                <comment line="422">
                    $$jb: 10.18.99: now write the rest of the
                     message                    
                </comment>
                <comment line="434">
                    $$jb: 10.18.99: getMessage() returns the
                     entire valid midi message for a file,
                     including the status byte and the var-length-int
                     length value, so we can just write the data
                     here.  note that we must _always_ write the
                     status byte, regardless of runningStatus.                    
                </comment>
                <comment line="446">
                    ignore this event                    
                </comment>
                <comment line="450">
                    ignore this event                    
                </comment>
                <comment line="457">
                    ---------------------------------
                     End write each event in the track
                     ---------------------------------                    
                </comment>
                <comment line="461">
                    Build Track header now that we know length                    
                </comment>
                <comment line="466">
                    Now sequence them                    
                </comment>
                <declaration name="bytesWritten" type="int" line="334"/>
                <declaration name="lastBytesWritten" type="int" line="335"/>
                <declaration name="size" type="int" line="336"/>
                <declaration name="thpos" type="PipedOutputStream" line="337"/>
                <declaration name="thdos" type="DataOutputStream" line="338"/>
                <declaration name="thpis" type="PipedInputStream" line="339"/>
                <declaration name="tdbos" type="ByteArrayOutputStream" line="341"/>
                <declaration name="tdbis" type="ByteArrayInputStream" line="343"/>
                <declaration name="fStream" type="SequenceInputStream" line="345"/>
                <declaration name="currentTick" type="long" line="347"/>
                <declaration name="deltaTick" type="long" line="348"/>
                <declaration name="eventTick" type="long" line="349"/>
                <declaration name="runningStatus" type="int" line="350"/>
                <scope line="355">
                    <declaration name="event" type="MidiEvent" line="356"/>
                    <declaration name="status" type="int" line="358"/>
                    <declaration name="eventtype" type="int" line="359"/>
                    <declaration name="metatype" type="int" line="360"/>
                    <declaration name="data1" type="int" line="361"/>
                    <declaration name="length" type="int" line="362"/>
                    <declaration name="data" type="byte" line="363"/>
                    <declaration name="shortMessage" type="ShortMessage" line="364"/>
                    <declaration name="metaMessage" type="MetaMessage" line="365"/>
                    <declaration name="sysexMessage" type="SysexMessage" line="366"/>
                    <scope line="384"/>
                    <scope line="397"/>
                </scope>
            </method>
        </class>
    </source>