<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="javax.sound.midi"/>
        <class name="RealTimeSequencer" line="10">
            <extends class="AbstractMidiDevice"/>
            <implements interface="Sequencer"/>
            <implements interface="AutoConnectSequencer"/>
            <javadoc line="10">
                A Real Time Sequencer                
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="DEBUG_PUMP" type="boolean" line="15"/>
            <javadoc line="15">
                debugging flags                
            </javadoc>
            <declaration name="DEBUG_PUMP_ALL" type="boolean" line="19"/>
            <declaration name="eventDispatcher" type="EventDispatcher" line="20"/>
            <javadoc line="20">
                Event Dispatcher thread. Should be using a shared event
                  dispatcher instance with a factory in EventDispatcher                
            </javadoc>
            <declaration name="info" type="RealTimeSequencerInfo" line="25"/>
            <javadoc line="25">
                All RealTimeSequencers share this info object.                
            </javadoc>
            <declaration name="masterSyncModes" type="Sequencer.SyncMode[]" line="29"/>
            <declaration name="slaveSyncModes" type="Sequencer.SyncMode[]" line="30"/>
            <declaration name="masterSyncMode" type="Sequencer.SyncMode" line="31"/>
            <declaration name="slaveSyncMode" type="Sequencer.SyncMode" line="32"/>
            <declaration name="sequence" type="Sequence" line="33"/>
            <javadoc line="33">
                Sequence on which this sequencer is operating.                
            </javadoc>
            <declaration name="cacheTempoMPQ" type="double" line="37"/>
            <javadoc line="37">
                Same for setTempoInMPQ...
                  -1 means not set.                
            </javadoc>
            <declaration name="cacheTempoFactor" type="float" line="42"/>
            <javadoc line="42">
                cache value for tempo factor until sequence is set
                  -1 means not set.                
            </javadoc>
            <declaration name="trackMuted" type="boolean[]" line="47"/>
            <javadoc line="47">
                if a particular track is muted                
            </javadoc>
            <declaration name="trackSolo" type="boolean[]" line="51"/>
            <javadoc line="51">
                if a particular track is solo                
            </javadoc>
            <declaration name="tempoCache" type="MidiUtils.TempoCache" line="55"/>
            <javadoc line="55">
                tempo cache for getMicrosecondPosition                
            </javadoc>
            <declaration name="running" type="boolean" line="59"/>
            <javadoc line="59">
                True if the sequence is running.                
            </javadoc>
            <declaration name="playThread" type="PlayThread" line="63"/>
            <javadoc line="63">
                the thread for pushing out the MIDI messages                
            </javadoc>
            <declaration name="recording" type="boolean" line="67"/>
            <javadoc line="67">
                True if we are recording                
            </javadoc>
            <declaration name="recordingTracks" type="List" line="71"/>
            <javadoc line="71">
                List of tracks to which we&apos;re recording                
            </javadoc>
            <declaration name="loopStart" type="long" line="75"/>
            <declaration name="loopEnd" type="long" line="76"/>
            <declaration name="loopCount" type="int" line="77"/>
            <declaration name="metaEventListeners" type="ArrayList" line="78"/>
            <javadoc line="78">
                Meta event listeners                
            </javadoc>
            <declaration name="controllerEventListeners" type="ArrayList" line="82"/>
            <javadoc line="82">
                Control change listeners                
            </javadoc>
            <declaration name="autoConnect" type="boolean" line="86"/>
            <javadoc line="86">
                automatic connection support                
            </javadoc>
            <declaration name="doAutoConnectAtNextOpen" type="boolean" line="90"/>
            <javadoc line="90">
                if we need to autoconnect at next open                
            </javadoc>
            <declaration name="autoConnectedReceiver" type="Receiver" line="94"/>
            <javadoc line="94">
                the receiver that this device is auto-connected to                
            </javadoc>
            <scope line="98"/>
            <method name="RealTimeSequencer" type="constructor" line="102"/>
            <method name="setSequence" type="void" line="107">
                <params>
                    <param name="sequence" type="Sequence"/>
                </params>
                <scope line="109">
                    <scope line="110">
                        <scope line="118"/>
                    </scope>
                    <scope line="123"/>
                    <scope line="127"/>
                </scope>
                <scope line="133">
                    <scope line="135"/>
                </scope>
            </method>
            <method name="setSequence" type="void" line="141">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <scope line="143"/>
                <declaration name="seq" type="Sequence" line="147"/>
            </method>
            <method name="getSequence" type="Sequence" line="151"/>
            <method name="start" type="void" line="154">
                <scope line="156"/>
                <scope line="159"/>
                <scope line="162"/>
            </method>
            <method name="stop" type="void" line="168">
                <scope line="170"/>
                <scope line="174"/>
            </method>
            <method name="isRunning" type="boolean" line="181"/>
            <method name="startRecording" type="void" line="184">
                <scope line="185"/>
            </method>
            <method name="stopRecording" type="void" line="191">
                <scope line="192"/>
            </method>
            <method name="isRecording" type="boolean" line="197"/>
            <method name="recordEnable" type="void" line="200">
                <params>
                    <param name="track" type="Track"/>
                    <param name="channel" type="int"/>
                </params>
                <scope line="201"/>
                <scope line="204">
                    <declaration name="rc" type="RecordingTrack" line="205"/>
                    <scope line="206"/>
                    <scope line="209"/>
                </scope>
            </method>
            <method name="recordDisable" type="void" line="214">
                <params>
                    <param name="track" type="Track"/>
                </params>
                <scope line="215">
                    <declaration name="rc" type="RecordingTrack" line="216"/>
                    <scope line="217"/>
                </scope>
            </method>
            <method name="findTrack" type="boolean" line="222">
                <params>
                    <param name="track" type="Track"/>
                </params>
                <declaration name="found" type="boolean" line="223"/>
                <scope line="224">
                    <declaration name="tracks" type="Track[]" line="225"/>
                    <scope line="226">
                        <scope line="227"/>
                    </scope>
                </scope>
            </method>
            <method name="getTempoInBPM" type="float" line="235"/>
            <method name="setTempoInBPM" type="void" line="239">
                <params>
                    <param name="bpm" type="float"/>
                </params>
                <scope line="241"/>
            </method>
            <method name="getTempoInMPQ" type="float" line="246">
                <scope line="248">
                    <scope line="249"/>
                    <scope line="252"/>
                </scope>
            </method>
            <method name="setTempoInMPQ" type="void" line="259">
                <params>
                    <param name="mpq" type="float"/>
                </params>
                <scope line="260"/>
                <scope line="264"/>
                <scope line="267"/>
            </method>
            <method name="setTempoFactor" type="void" line="272">
                <params>
                    <param name="factor" type="float"/>
                </params>
                <scope line="273"/>
                <scope line="277"/>
                <scope line="280"/>
            </method>
            <method name="getTempoFactor" type="float" line="285">
                <scope line="287">
                    <scope line="288"/>
                </scope>
            </method>
            <method name="getTickLength" type="long" line="295">
                <scope line="297"/>
            </method>
            <method name="getTickPosition" type="long" line="302">
                <scope line="304"/>
            </method>
            <method name="setTickPosition" type="void" line="309">
                <params>
                    <param name="tick" type="long"/>
                </params>
                <scope line="310"/>
                <scope line="314">
                    <scope line="315"/>
                </scope>
                <scope line="318">
                    <scope line="319"/>
                </scope>
                <scope line="322"/>
            </method>
            <method name="getMicrosecondLength" type="long" line="326">
                <scope line="328"/>
            </method>
            <method name="getMicrosecondPosition" type="long" line="333">
                <scope line="335"/>
                <scope line="338"/>
            </method>
            <method name="setMicrosecondPosition" type="void" line="342">
                <params>
                    <param name="microseconds" type="long"/>
                </params>
                <scope line="343"/>
                <scope line="347">
                    <scope line="348"/>
                </scope>
                <scope line="351">
                    <scope line="352"/>
                </scope>
                <scope line="355">
                    <scope line="356"/>
                </scope>
            </method>
            <method name="setMasterSyncMode" type="void" line="361">
                <params>
                    <param name="sync" type="Sequencer.SyncMode"/>
                </params>
            </method>
            <method name="getMasterSyncMode" type="Sequencer.SyncMode" line="363"/>
            <method name="getMasterSyncModes" type="Sequencer.SyncMode[]" line="366">
                <declaration name="returnedModes" type="Sequencer.SyncMode[]" line="367"/>
            </method>
            <method name="setSlaveSyncMode" type="void" line="371">
                <params>
                    <param name="sync" type="Sequencer.SyncMode"/>
                </params>
            </method>
            <method name="getSlaveSyncMode" type="Sequencer.SyncMode" line="373"/>
            <method name="getSlaveSyncModes" type="Sequencer.SyncMode[]" line="376">
                <declaration name="returnedModes" type="Sequencer.SyncMode[]" line="377"/>
            </method>
            <method name="getTrackCount" type="int" line="381">
                <declaration name="seq" type="Sequence" line="382"/>
                <scope line="383"/>
            </method>
            <method name="setTrackMute" type="void" line="388">
                <params>
                    <param name="track" type="int"/>
                    <param name="mute" type="boolean"/>
                </params>
                <declaration name="trackCount" type="int" line="389"/>
                <scope line="393"/>
            </method>
            <method name="getTrackMute" type="boolean" line="397">
                <params>
                    <param name="track" type="int"/>
                </params>
            </method>
            <method name="setTrackSolo" type="void" line="402">
                <params>
                    <param name="track" type="int"/>
                    <param name="solo" type="boolean"/>
                </params>
                <declaration name="trackCount" type="int" line="403"/>
                <scope line="407"/>
            </method>
            <method name="getTrackSolo" type="boolean" line="411">
                <params>
                    <param name="track" type="int"/>
                </params>
            </method>
            <method name="addMetaEventListener" type="boolean" line="416">
                <params>
                    <param name="listener" type="MetaEventListener"/>
                </params>
                <scope line="417">
                    <scope line="418"/>
                </scope>
            </method>
            <method name="removeMetaEventListener" type="void" line="424">
                <params>
                    <param name="listener" type="MetaEventListener"/>
                </params>
                <scope line="425">
                    <declaration name="index" type="int" line="426"/>
                    <scope line="427"/>
                </scope>
            </method>
            <method name="addControllerEventListener" type="int[]" line="432">
                <params>
                    <param name="listener" type="ControllerEventListener"/>
                    <param name="controllers" type="int[]"/>
                </params>
                <scope line="433">
                    <declaration name="cve" type="ControllerListElement" line="434"/>
                    <declaration name="flag" type="boolean" line="435"/>
                    <scope line="436">
                        <scope line="438"/>
                    </scope>
                    <scope line="444"/>
                </scope>
            </method>
            <method name="removeControllerEventListener" type="int[]" line="451">
                <params>
                    <param name="listener" type="ControllerEventListener"/>
                    <param name="controllers" type="int[]"/>
                </params>
                <scope line="452">
                    <declaration name="cve" type="ControllerListElement" line="453"/>
                    <declaration name="flag" type="boolean" line="454"/>
                    <scope line="455">
                        <scope line="457"/>
                    </scope>
                    <scope line="463"/>
                    <scope line="466">
                        <declaration name="index" type="int" line="467"/>
                        <scope line="468"/>
                    </scope>
                </scope>
            </method>
            <method name="setLoopStartPoint" type="void" line="476">
                <params>
                    <param name="tick" type="long"/>
                </params>
                <scope line="477"/>
            </method>
            <method name="getLoopStartPoint" type="long" line="482"/>
            <method name="setLoopEndPoint" type="void" line="485">
                <params>
                    <param name="tick" type="long"/>
                </params>
                <scope line="486"/>
            </method>
            <method name="getLoopEndPoint" type="long" line="491"/>
            <method name="setLoopCount" type="void" line="494">
                <params>
                    <param name="count" type="int"/>
                </params>
                <scope line="495"/>
                <scope line="499"/>
            </method>
            <method name="getLoopCount" type="int" line="503"/>
            <method name="implOpen" type="void" line="506">
                <scope line="509"/>
                <scope line="513"/>
            </method>
            <method name="doAutoConnect" type="void" line="518">
                <declaration name="rec" type="Receiver" line="520"/>
                <scope line="521">
                    <declaration name="synth" type="Synthesizer" line="522"/>
                    <scope line="523"/>
                    <scope line="526">
                        <scope line="528"/>
                        <scope line="531">
                            <scope line="532"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="538"/>
                <scope line="540">
                    <scope line="541"/>
                    <scope line="544"/>
                </scope>
                <scope line="547">
                    <scope line="549"/>
                    <scope line="552"/>
                </scope>
            </method>
            <method name="propagateCaches" type="void" line="557">
                <scope line="558">
                    <scope line="559"/>
                    <scope line="562"/>
                    <scope line="565"/>
                </scope>
            </method>
            <javadoc line="570">
                populate the caches with the current values                
            </javadoc>
            <method name="setCaches" type="void" line="573"/>
            <method name="implClose" type="void" line="577">
                <scope line="579"/>
                <scope line="582"/>
                <scope line="597">
                    <scope line="598"/>
                    <scope line="601"/>
                </scope>
            </method>
            <method name="implStart" type="void" line="607">
                <scope line="609"/>
                <scope line="614"/>
            </method>
            <method name="implStop" type="void" line="620">
                <scope line="622"/>
                <scope line="627"/>
            </method>
            <javadoc line="633">
                Send midi player events.
                  must not be synchronized on &quot;this&quot;                
            </javadoc>
            <method name="sendMetaEvents" type="void" line="637">
                <params>
                    <param name="message" type="MidiMessage"/>
                </params>
            </method>
            <javadoc line="641">
                Send midi player events.                
            </javadoc>
            <method name="sendControllerEvents" type="void" line="644">
                <params>
                    <param name="message" type="MidiMessage"/>
                </params>
                <declaration name="size" type="int" line="645"/>
                <scope line="647"/>
                <declaration name="msg" type="ShortMessage" line="651"/>
                <declaration name="controller" type="int" line="652"/>
                <declaration name="sendToListeners" type="List" line="653"/>
                <scope line="654">
                    <declaration name="cve" type="ControllerListElement" line="655"/>
                    <scope line="656">
                        <scope line="657"/>
                    </scope>
                </scope>
            </method>
            <method name="needCaching" type="boolean" line="665"/>
            <javadoc line="668">
                return the data pump instance, owned by play thread
                  if playthread is null, return null.
                  This method is guaranteed to return non-null if
                  needCaching returns false                
            </javadoc>
            <method name="getDataPump" type="DataPump" line="674">
                <scope line="675"/>
            </method>
            <method name="getTempoCache" type="MidiUtils.TempoCache" line="680"/>
            <method name="ensureBoolArraySize" type="boolean[]" line="683">
                <params>
                    <param name="array" type="boolean[]"/>
                    <param name="desiredSize" type="int"/>
                </params>
                <scope line="684"/>
                <scope line="687">
                    <declaration name="newArray" type="boolean[]" line="688"/>
                </scope>
            </method>
            <method name="hasReceivers" type="boolean" line="694"/>
            <method name="createReceiver" type="Receiver" line="697"/>
            <method name="hasTransmitters" type="boolean" line="700"/>
            <method name="createTransmitter" type="Transmitter" line="703"/>
            <method name="setAutoConnect" type="void" line="706">
                <params>
                    <param name="autoConnectedReceiver" type="Receiver"/>
                </params>
            </method>
            <class name="SequencerTransmitter" line="710">
                <extends class="BasicTransmitter"/>
                <javadoc line="710">
                    An own class to distinguish the class name from
                      the transmitter of other devices                    
                </javadoc>
                <method name="SequencerTransmitter" type="constructor" line="715"/>
            </class>
            <class name="SequencerReceiver" line="719">
                <extends class="AbstractReceiver"/>
                <method name="implSend" type="void" line="720">
                    <params>
                        <param name="message" type="MidiMessage"/>
                        <param name="timeStamp" type="long"/>
                    </params>
                    <scope line="721">
                        <declaration name="tickPos" type="long" line="722"/>
                        <scope line="723"/>
                        <scope line="726">
                            <scope line="727"/>
                        </scope>
                        <declaration name="track" type="Track" line="731"/>
                        <scope line="732">
                            <scope line="733">
                                <declaration name="sm" type="ShortMessage" line="734"/>
                                <scope line="735"/>
                            </scope>
                            <scope line="739"/>
                            <scope line="742">
                                <scope line="743"/>
                                <scope line="746"/>
                                <declaration name="me" type="MidiEvent" line="749"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="RealTimeSequencerInfo" line="756">
                <extends class="MidiDevice.Info"/>
                <declaration name="name" type="String" line="757"/>
                <declaration name="vendor" type="String" line="758"/>
                <declaration name="description" type="String" line="759"/>
                <declaration name="version" type="String" line="760"/>
                <method name="RealTimeSequencerInfo" type="constructor" line="761"/>
            </class>
            <class name="ControllerListElement" line="765">
                <declaration name="controllers" type="int[]" line="766"/>
                <declaration name="listener" type="ControllerEventListener" line="767"/>
                <method name="ControllerListElement" type="constructor" line="768">
                    <params>
                        <param name="listener" type="ControllerEventListener"/>
                        <param name="controllers" type="int[]"/>
                    </params>
                    <scope line="770">
                        <scope line="772"/>
                    </scope>
                </method>
                <method name="addControllers" type="void" line="778">
                    <params>
                        <param name="c" type="int[]"/>
                    </params>
                    <scope line="779">
                        <scope line="781"/>
                    </scope>
                    <declaration name="temp" type="int" line="786"/>
                    <declaration name="elements" type="int" line="787"/>
                    <scope line="788"/>
                    <scope line="792">
                        <declaration name="flag" type="boolean" line="793"/>
                        <scope line="794">
                            <scope line="795"/>
                        </scope>
                        <scope line="800"/>
                    </scope>
                    <declaration name="newc" type="int" line="804"/>
                    <scope line="805"/>
                </method>
                <method name="removeControllers" type="void" line="810">
                    <params>
                        <param name="c" type="int[]"/>
                    </params>
                    <scope line="811"/>
                    <scope line="814">
                        <declaration name="temp" type="int" line="815"/>
                        <declaration name="elements" type="int" line="816"/>
                        <scope line="817">
                            <declaration name="flag" type="boolean" line="818"/>
                            <scope line="819">
                                <scope line="820"/>
                            </scope>
                            <scope line="825"/>
                        </scope>
                        <declaration name="newc" type="int" line="829"/>
                        <scope line="830"/>
                    </scope>
                </method>
                <method name="getControllers" type="int[]" line="836">
                    <scope line="837"/>
                    <declaration name="c" type="int" line="840"/>
                    <scope line="841"/>
                </method>
            </class>
            <class name="RecordingTrack" line="847">
                <declaration name="track" type="Track" line="848"/>
                <declaration name="channel" type="int" line="849"/>
                <method name="RecordingTrack" type="constructor" line="850">
                    <params>
                        <param name="track" type="Track"/>
                        <param name="channel" type="int"/>
                    </params>
                </method>
                <method name="get" type="RecordingTrack" line="854">
                    <params>
                        <param name="recordingTracks" type="List"/>
                        <param name="track" type="Track"/>
                    </params>
                    <scope line="855">
                        <declaration name="size" type="int" line="856"/>
                        <scope line="857">
                            <declaration name="current" type="RecordingTrack" line="858"/>
                            <scope line="859"/>
                        </scope>
                    </scope>
                </method>
                <method name="get" type="Track" line="866">
                    <params>
                        <param name="recordingTracks" type="List"/>
                        <param name="channel" type="int"/>
                    </params>
                    <scope line="867">
                        <declaration name="size" type="int" line="868"/>
                        <scope line="869">
                            <declaration name="current" type="RecordingTrack" line="870"/>
                            <scope line="871"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="PlayThread" line="879">
                <implements interface="Runnable"/>
                <declaration name="thread" type="Thread" line="880"/>
                <declaration name="lock" type="Object" line="881"/>
                <declaration name="interrupted" type="boolean" line="882"/>
                <javadoc line="882">
                    true if playback is interrupted (in close)                    
                </javadoc>
                <declaration name="isPumping" type="boolean" line="886"/>
                <declaration name="dataPump" type="DataPump" line="887"/>
                <method name="PlayThread" type="constructor" line="888">
                    <declaration name="priority" type="int" line="889"/>
                </method>
                <method name="getDataPump" type="DataPump" line="892"/>
                <method name="setSequence" type="void" line="895">
                    <params>
                        <param name="seq" type="Sequence"/>
                    </params>
                </method>
                <javadoc line="898">
                    start thread and pump. Requires up-to-date tempoCache                    
                </javadoc>
                <method name="start" type="void" line="901">
                    <scope line="903">
                        <declaration name="tickPos" type="long" line="904"/>
                    </scope>
                    <scope line="911"/>
                </method>
                <method name="stop" type="void" line="916">
                    <declaration name="t" type="long" line="918"/>
                    <scope line="919">
                        <scope line="920">
                            <scope line="921"/>
                            <scope line="924"/>
                        </scope>
                        <scope line="927"/>
                    </scope>
                </method>
                <method name="playThreadImplStop" type="void" line="932">
                    <scope line="934"/>
                </method>
                <method name="close" type="void" line="938">
                    <declaration name="oldThread" type="Thread" line="939"/>
                    <scope line="940"/>
                    <scope line="945">
                        <scope line="946"/>
                    </scope>
                    <scope line="950">
                        <scope line="951"/>
                        <scope line="954"/>
                    </scope>
                </method>
                <javadoc line="958">
                    Main process loop driving the media flow.
                      Make sure to NOT synchronize on RealTimeSequencer
                      anywhere here (even implicit). That is a sure deadlock!                    
                </javadoc>
                <method name="run" type="void" line="963">
                    <scope line="964">
                        <declaration name="EOM" type="boolean" line="965"/>
                        <declaration name="wasRunning" type="boolean" line="966"/>
                        <scope line="968">
                            <scope line="970"/>
                            <scope line="973"/>
                        </scope>
                        <scope line="976"/>
                        <scope line="983"/>
                        <scope line="986">
                            <declaration name="message" type="MetaMessage" line="988"/>
                            <scope line="989"/>
                            <scope line="992"/>
                        </scope>
                        <scope line="996">
                            <scope line="999">
                                <scope line="1000"/>
                                <scope line="1003"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="DataPump" line="1011">
                <javadoc line="1011">
                    class that does the actual dispatching of events,
                      used to be in native in MMAPI                    
                </javadoc>
                <declaration name="currTempo" type="float" line="1016"/>
                <declaration name="tempoFactor" type="float" line="1017"/>
                <declaration name="inverseTempoFactor" type="float" line="1018"/>
                <declaration name="ignoreTempoEventAt" type="long" line="1019"/>
                <declaration name="resolution" type="int" line="1020"/>
                <declaration name="divisionType" type="float" line="1021"/>
                <declaration name="checkPointMillis" type="long" line="1022"/>
                <declaration name="checkPointTick" type="long" line="1023"/>
                <declaration name="noteOnCache" type="int[]" line="1024"/>
                <declaration name="tracks" type="Track[]" line="1025"/>
                <declaration name="trackDisabled" type="boolean[]" line="1026"/>
                <declaration name="trackReadPos" type="int[]" line="1027"/>
                <declaration name="lastTick" type="long" line="1028"/>
                <declaration name="needReindex" type="boolean" line="1029"/>
                <declaration name="currLoopCounter" type="int" line="1030"/>
                <method name="DataPump" type="constructor" line="1031"/>
                <method name="init" type="void" line="1034"/>
                <method name="setTickPos" type="void" line="1042">
                    <params>
                        <param name="tickPos" type="long"/>
                    </params>
                    <declaration name="oldLastTick" type="long" line="1043"/>
                    <scope line="1045"/>
                    <scope line="1048"/>
                    <scope line="1051"/>
                    <scope line="1054"/>
                </method>
                <method name="getTickPos" type="long" line="1060"/>
                <method name="hasCachedTempo" type="boolean" line="1063">
                    <scope line="1064"/>
                </method>
                <method name="setTempoMPQ" type="void" line="1069">
                    <params>
                        <param name="tempoMPQ" type="float"/>
                    </params>
                    <scope line="1070"/>
                </method>
                <method name="getTempoMPQ" type="float" line="1076"/>
                <method name="setTempoFactor" type="void" line="1079">
                    <params>
                        <param name="factor" type="float"/>
                    </params>
                    <scope line="1080"/>
                </method>
                <method name="getTempoFactor" type="float" line="1086"/>
                <method name="muteSoloChanged" type="void" line="1089">
                    <declaration name="newDisabled" type="boolean[]" line="1090"/>
                    <scope line="1091"/>
                </method>
                <method name="setSequence" type="void" line="1096">
                    <params>
                        <param name="seq" type="Sequence"/>
                    </params>
                    <scope line="1097"/>
                </method>
                <method name="resetLoopCount" type="void" line="1109"/>
                <method name="clearNoteOnCache" type="void" line="1112">
                    <scope line="1113"/>
                </method>
                <method name="notesOff" type="void" line="1117">
                    <params>
                        <param name="doControllers" type="boolean"/>
                    </params>
                    <declaration name="done" type="int" line="1118"/>
                    <scope line="1119">
                        <declaration name="channelMask" type="int" line="1120"/>
                        <scope line="1121">
                            <scope line="1122"/>
                        </scope>
                        <scope line="1130"/>
                    </scope>
                </method>
                <method name="makeDisabledArray" type="boolean[]" line="1137">
                    <scope line="1138"/>
                    <declaration name="newTrackDisabled" type="boolean[]" line="1141"/>
                    <declaration name="solo" type="boolean[]" line="1142"/>
                    <declaration name="mute" type="boolean[]" line="1143"/>
                    <scope line="1144"/>
                    <declaration name="hasSolo" type="boolean" line="1148"/>
                    <scope line="1149">
                        <scope line="1150">
                            <scope line="1151"/>
                        </scope>
                    </scope>
                    <scope line="1157">
                        <scope line="1158"/>
                    </scope>
                    <scope line="1162">
                        <scope line="1163"/>
                    </scope>
                </method>
                <javadoc line="1169">
                    chase all events from beginning of Track
                      and send note off for those events that are active
                      in noteOnCache array.
                      It is possible, of course, to catch notes from other tracks,
                      but better than more complicated logic to detect
                      which notes are really from this track                    
                </javadoc>
                <method name="sendNoteOffIfOn" type="void" line="1177">
                    <params>
                        <param name="track" type="Track"/>
                        <param name="endTick" type="long"/>
                    </params>
                    <declaration name="size" type="int" line="1178"/>
                    <declaration name="done" type="int" line="1179"/>
                    <scope line="1180">
                        <scope line="1181">
                            <declaration name="event" type="MidiEvent" line="1182"/>
                            <declaration name="msg" type="MidiMessage" line="1184"/>
                            <declaration name="status" type="int" line="1185"/>
                            <declaration name="len" type="int" line="1186"/>
                            <scope line="1187">
                                <declaration name="note" type="int" line="1188"/>
                                <scope line="1189">
                                    <declaration name="smsg" type="ShortMessage" line="1190"/>
                                    <scope line="1191"/>
                                </scope>
                                <scope line="1195">
                                    <declaration name="data" type="byte[]" line="1196"/>
                                    <scope line="1197"/>
                                </scope>
                                <scope line="1201">
                                    <declaration name="bit" type="int" line="1202"/>
                                    <scope line="1203"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1212"/>
                </method>
                <javadoc line="1216">
                    Runtime application of mute/solo:
                      if a track is muted that was previously playing, send
                      note off events for all currently playing notes                    
                </javadoc>
                <method name="applyDisabledTracks" type="void" line="1221">
                    <params>
                        <param name="oldDisabled" type="boolean[]"/>
                        <param name="newDisabled" type="boolean[]"/>
                    </params>
                    <declaration name="tempArray" type="byte[][]" line="1222"/>
                    <scope line="1223">
                        <scope line="1224">
                            <scope line="1225">
                                <scope line="1226"/>
                            </scope>
                            <scope line="1230">
                                <scope line="1231"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1239">
                    go through all events from startTick to endTick
                      chase the controller state and program change state
                      and then set the end-states at once.
                      needs to be called in synchronized state                    
                    <param>
                        tempArray an byte[128][16] to hold controller messages                        
                    </param>
                </javadoc>
                <method name="chaseTrackEvents" type="void" line="1246">
                    <params>
                        <param name="trackNum" type="int"/>
                        <param name="startTick" type="long"/>
                        <param name="endTick" type="long"/>
                        <param name="doReindex" type="boolean"/>
                        <param name="tempArray" type="byte[][]"/>
                    </params>
                    <scope line="1247"/>
                    <declaration name="progs" type="byte[]" line="1250"/>
                    <scope line="1251">
                        <scope line="1253"/>
                    </scope>
                    <declaration name="track" type="Track" line="1257"/>
                    <declaration name="size" type="int" line="1258"/>
                    <scope line="1259">
                        <scope line="1260">
                            <declaration name="event" type="MidiEvent" line="1261"/>
                            <scope line="1262">
                                <scope line="1263"/>
                            </scope>
                            <declaration name="msg" type="MidiMessage" line="1269"/>
                            <declaration name="status" type="int" line="1270"/>
                            <declaration name="len" type="int" line="1271"/>
                            <scope line="1272">
                                <scope line="1273">
                                    <declaration name="smsg" type="ShortMessage" line="1274"/>
                                </scope>
                                <scope line="1277">
                                    <declaration name="data" type="byte[]" line="1278"/>
                                </scope>
                            </scope>
                            <scope line="1282">
                                <scope line="1283">
                                    <declaration name="smsg" type="ShortMessage" line="1284"/>
                                </scope>
                                <scope line="1287">
                                    <declaration name="data" type="byte[]" line="1288"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1294"/>
                    <declaration name="numControllersSent" type="int" line="1296"/>
                    <scope line="1297">
                        <scope line="1298">
                            <declaration name="controllerValue" type="byte" line="1299"/>
                            <scope line="1300">
                                <declaration name="packedMsg" type="int" line="1301"/>
                            </scope>
                        </scope>
                        <scope line="1306"/>
                        <scope line="1309"/>
                    </scope>
                </method>
                <javadoc line="1316">
                    chase controllers and program for all tracks                    
                </javadoc>
                <method name="chaseEvents" type="void" line="1319">
                    <params>
                        <param name="startTick" type="long"/>
                        <param name="endTick" type="long"/>
                    </params>
                    <declaration name="tempArray" type="byte[][]" line="1321"/>
                    <scope line="1322">
                        <scope line="1323"/>
                    </scope>
                </method>
                <method name="getCurrentTimeMillis" type="long" line="1329"/>
                <method name="millis2tick" type="long" line="1332">
                    <params>
                        <param name="millis" type="long"/>
                    </params>
                    <scope line="1333">
                        <declaration name="dTick" type="double" line="1334"/>
                    </scope>
                </method>
                <method name="tick2millis" type="long" line="1339">
                    <params>
                        <param name="tick" type="long"/>
                    </params>
                    <scope line="1340">
                        <declaration name="dMillis" type="double" line="1341"/>
                    </scope>
                </method>
                <method name="ReindexTrack" type="void" line="1346">
                    <params>
                        <param name="trackNum" type="int"/>
                        <param name="tick" type="long"/>
                    </params>
                    <scope line="1347"/>
                </method>
                <method name="dispatchMessage" type="boolean" line="1352">
                    <params>
                        <param name="trackNum" type="int"/>
                        <param name="event" type="MidiEvent"/>
                    </params>
                    <declaration name="changesPending" type="boolean" line="1353"/>
                    <declaration name="message" type="MidiMessage" line="1354"/>
                    <declaration name="msgStatus" type="int" line="1355"/>
                    <declaration name="msgLen" type="int" line="1356"/>
                    <scope line="1357">
                        <scope line="1358">
                            <declaration name="newTempo" type="int" line="1359"/>
                            <scope line="1360">
                                <scope line="1361"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1370">
                        <scope line="1374">
                            <declaration name="note" type="int" line="1375"/>
                        </scope>
                        <scope line="1380">
                            <declaration name="smsg" type="ShortMessage" line="1381"/>
                            <declaration name="note" type="int" line="1382"/>
                            <declaration name="vel" type="int" line="1383"/>
                            <scope line="1384"/>
                            <scope line="1387"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1399">
                    the main pump method                    
                    <return>
                        true if end of sequence is reached                        
                    </return>
                </javadoc>
                <method name="pump" type="boolean" line="1403">
                    <declaration name="currMillis" type="long" line="1404"/>
                    <declaration name="targetTick" type="long" line="1405"/>
                    <declaration name="currEvent" type="MidiEvent" line="1406"/>
                    <declaration name="changesPending" type="boolean" line="1407"/>
                    <declaration name="doLoop" type="boolean" line="1408"/>
                    <declaration name="EOM" type="boolean" line="1409"/>
                    <declaration name="finishedTracks" type="int" line="1411"/>
                    <scope line="1412">
                        <scope line="1414">
                            <scope line="1416"/>
                            <scope line="1419"/>
                        </scope>
                        <scope line="1426"/>
                        <scope line="1433">
                            <scope line="1436">
                                <scope line="1437"/>
                            </scope>
                        </scope>
                        <scope line="1447">
                            <scope line="1448">
                                <declaration name="disabled" type="boolean" line="1449"/>
                                <declaration name="thisTrack" type="Track" line="1450"/>
                                <declaration name="readPos" type="int" line="1451"/>
                                <declaration name="size" type="int" line="1452"/>
                                <scope line="1453">
                                    <scope line="1454"/>
                                    <scope line="1459"/>
                                </scope>
                                <scope line="1463"/>
                                <scope line="1466">
                                    <scope line="1469"/>
                                    <scope line="1472"/>
                                    <scope line="1476"/>
                                    <scope line="1479"/>
                                </scope>
                            </scope>
                            <scope line="1486">
                                <scope line="1489"/>
                            </scope>
                            <scope line="1494"/>
                        </scope>
                        <scope line="1499">
                            <declaration name="oldCheckPointMillis" type="long" line="1500"/>
                            <declaration name="loopEndTick" type="long" line="1501"/>
                            <scope line="1502"/>
                            <scope line="1505"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>