<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="javax.sound.midi"/>
        <class name="RealTimeSequencer" line="40">
            <extends class="AbstractMidiDevice"/>
            <comment line="47">
                TODO:
                 - rename PlayThread to PlayEngine (because isn&apos;t a thread)                
            </comment>
            <comment line="52">
                STATIC VARIABLES                
            </comment>
            <comment line="82">
                caches                
            </comment>
            <comment line="162">
                                
            </comment>
            <comment line="172">
                                
            </comment>
            <comment line="701">
                //////////////// LOOPING (added in 1.5) ///////////////////////                
            </comment>
            <comment line="745">
                                
            </comment>
            <comment line="747">
                                
            </comment>
            <comment line="985">
                OVERRIDES OF ABSTRACT MIDI DEVICE METHODS                
            </comment>
            <comment line="991">
                for recording                
            </comment>
            <comment line="1007">
                interface AutoConnectSequencer                
            </comment>
            <comment line="1015">
                INNER CLASSES                
            </comment>
            <comment line="1087">
                class Info                
            </comment>
            <comment line="1196">
                class ControllerListElement                
            </comment>
            <comment line="2075">
                class DataPump                
            </comment>
            <implements interface="Sequencer"/>
            <implements interface="AutoConnectSequencer"/>
            <javadoc line="40">
                A Real Time Sequencer                
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="DEBUG_PUMP" type="boolean" line="53"/>
            <javadoc line="53">
                debugging flags                
            </javadoc>
            <declaration name="DEBUG_PUMP_ALL" type="boolean" line="55"/>
            <declaration name="eventDispatcher" type="EventDispatcher" line="57"/>
            <javadoc line="57">
                Event Dispatcher thread. Should be using a shared event
                  dispatcher instance with a factory in EventDispatcher                
            </javadoc>
            <declaration name="info" type="RealTimeSequencerInfo" line="63"/>
            <javadoc line="63">
                All RealTimeSequencers share this info object.                
            </javadoc>
            <declaration name="masterSyncModes" type="Sequencer.SyncMode[]" line="69"/>
            <declaration name="slaveSyncModes" type="Sequencer.SyncMode[]" line="70"/>
            <declaration name="masterSyncMode" type="Sequencer.SyncMode" line="72"/>
            <declaration name="slaveSyncMode" type="Sequencer.SyncMode" line="73"/>
            <declaration name="sequence" type="Sequence" line="76"/>
            <javadoc line="76">
                Sequence on which this sequencer is operating.                
            </javadoc>
            <declaration name="cacheTempoMPQ" type="double" line="83"/>
            <javadoc line="83">
                Same for setTempoInMPQ...
                  -1 means not set.                
            </javadoc>
            <declaration name="cacheTempoFactor" type="float" line="90"/>
            <javadoc line="90">
                cache value for tempo factor until sequence is set
                  -1 means not set.                
            </javadoc>
            <declaration name="trackMuted" type="boolean[]" line="97"/>
            <javadoc line="97">
                if a particular track is muted                
            </javadoc>
            <declaration name="trackSolo" type="boolean[]" line="99"/>
            <javadoc line="99">
                if a particular track is solo                
            </javadoc>
            <declaration name="tempoCache" type="MidiUtils.TempoCache" line="102"/>
            <javadoc line="102">
                tempo cache for getMicrosecondPosition                
            </javadoc>
            <declaration name="running" type="boolean" line="105"/>
            <javadoc line="105">
                True if the sequence is running.                
            </javadoc>
            <declaration name="playThread" type="PlayThread" line="111"/>
            <javadoc line="111">
                the thread for pushing out the MIDI messages                
            </javadoc>
            <declaration name="recording" type="boolean" line="115"/>
            <javadoc line="115">
                True if we are recording                
            </javadoc>
            <declaration name="recordingTracks" type="List" line="121"/>
            <javadoc line="121">
                List of tracks to which we&apos;re recording                
            </javadoc>
            <declaration name="loopStart" type="long" line="127"/>
            <declaration name="loopEnd" type="long" line="128"/>
            <declaration name="loopCount" type="int" line="129"/>
            <declaration name="metaEventListeners" type="ArrayList" line="132"/>
            <javadoc line="132">
                Meta event listeners                
            </javadoc>
            <declaration name="controllerEventListeners" type="ArrayList" line="138"/>
            <javadoc line="138">
                Control change listeners                
            </javadoc>
            <declaration name="autoConnect" type="boolean" line="144"/>
            <javadoc line="144">
                automatic connection support                
            </javadoc>
            <declaration name="doAutoConnectAtNextOpen" type="boolean" line="147"/>
            <javadoc line="147">
                if we need to autoconnect at next open                
            </javadoc>
            <declaration name="autoConnectedReceiver" type="Receiver" line="150"/>
            <javadoc line="150">
                the receiver that this device is auto-connected to                
            </javadoc>
            <scope line="154"/>
            <method name="RealTimeSequencer" type="constructor" line="163"/>
            <method name="setSequence" type="void" line="174">
                <params>
                    <param name="sequence" type="Sequence"/>
                </params>
                <comment line="182">
                    initialize some non-cached values                    
                </comment>
                <comment line="198">
                    store this sequence (do not copy - we want to give the possibility                    
                </comment>
                <comment line="199">
                    of modifying the sequence at runtime)                    
                </comment>
                <comment line="204">
                    rewind to the beginning                    
                </comment>
                <comment line="206">
                    propagate caches                    
                </comment>
                <scope line="178">
                    <scope line="179">
                        <scope line="188"/>
                    </scope>
                    <scope line="194"/>
                    <scope line="202"/>
                </scope>
                <scope line="210">
                    <scope line="212"/>
                </scope>
            </method>
            <method name="setSequence" type="void" line="221">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <comment line="230">
                    can throw IOException, InvalidMidiDataException                    
                </comment>
                <scope line="225"/>
                <declaration name="seq" type="Sequence" line="230"/>
            </method>
            <method name="getSequence" type="Sequence" line="239"/>
            <method name="start" type="void" line="244">
                <comment line="247">
                    sequencer not open: throw an exception                    
                </comment>
                <comment line="252">
                    sequence not available: throw an exception                    
                </comment>
                <comment line="257">
                    already running: return quietly                    
                </comment>
                <comment line="262">
                    start playback                    
                </comment>
                <scope line="248"/>
                <scope line="253"/>
                <scope line="258"/>
            </method>
            <method name="stop" type="void" line="269">
                <comment line="277">
                    not running; just return                    
                </comment>
                <comment line="283">
                    stop playback                    
                </comment>
                <scope line="272"/>
                <scope line="278"/>
            </method>
            <method name="isRunning" type="boolean" line="290"/>
            <method name="startRecording" type="void" line="295">
                <scope line="296"/>
            </method>
            <method name="stopRecording" type="void" line="305">
                <scope line="306"/>
            </method>
            <method name="isRecording" type="boolean" line="313"/>
            <method name="recordEnable" type="void" line="318">
                <params>
                    <param name="track" type="Track"/>
                    <param name="channel" type="int"/>
                </params>
                <scope line="319"/>
                <scope line="323">
                    <declaration name="rc" type="RecordingTrack" line="324"/>
                    <scope line="325"/>
                    <scope line="327"/>
                </scope>
            </method>
            <method name="recordDisable" type="void" line="335">
                <params>
                    <param name="track" type="Track"/>
                </params>
                <scope line="336">
                    <declaration name="rc" type="RecordingTrack" line="337"/>
                    <scope line="338"/>
                </scope>
            </method>
            <method name="findTrack" type="boolean" line="346">
                <params>
                    <param name="track" type="Track"/>
                </params>
                <declaration name="found" type="boolean" line="347"/>
                <scope line="348">
                    <declaration name="tracks" type="Track[]" line="349"/>
                    <scope line="350">
                        <scope line="351"/>
                    </scope>
                </scope>
            </method>
            <method name="getTempoInBPM" type="float" line="361"/>
            <method name="setTempoInBPM" type="void" line="368">
                <params>
                    <param name="bpm" type="float"/>
                </params>
                <comment line="371">
                    should throw IllegalArgumentException                    
                </comment>
                <scope line="370"/>
            </method>
            <method name="getTempoInMPQ" type="float" line="379">
                <comment line="383">
                    if the sequencer is closed, return cached value                    
                </comment>
                <comment line="387">
                    if sequence is set, return current tempo                    
                </comment>
                <comment line="392">
                    last resort: return a standard tempo: 120bpm                    
                </comment>
                <scope line="382">
                    <scope line="384"/>
                    <scope line="388"/>
                </scope>
            </method>
            <method name="setTempoInMPQ" type="void" line="399">
                <params>
                    <param name="mpq" type="float"/>
                </params>
                <comment line="401">
                    should throw IllegalArgumentException                    
                </comment>
                <comment line="408">
                    cache the value                    
                </comment>
                <comment line="411">
                    set the native tempo in MPQ                    
                </comment>
                <comment line="414">
                    reset the tempoInBPM and tempoInMPQ values so we won&apos;t use them again                    
                </comment>
                <scope line="400"/>
                <scope line="407"/>
                <scope line="410"/>
            </method>
            <method name="setTempoFactor" type="void" line="420">
                <params>
                    <param name="factor" type="float"/>
                </params>
                <comment line="422">
                    should throw IllegalArgumentException                    
                </comment>
                <comment line="432">
                    don&apos;t need cache anymore                    
                </comment>
                <scope line="421"/>
                <scope line="428"/>
                <scope line="430"/>
            </method>
            <method name="getTempoFactor" type="float" line="438">
                <scope line="441">
                    <scope line="442"/>
                </scope>
            </method>
            <method name="getTickLength" type="long" line="451">
                <scope line="454"/>
            </method>
            <method name="getTickPosition" type="long" line="462">
                <scope line="465"/>
            </method>
            <method name="setTickPosition" type="void" line="473">
                <params>
                    <param name="tick" type="long"/>
                </params>
                <comment line="475">
                    should throw IllegalArgumentException                    
                </comment>
                <comment line="483">
                    throw new InvalidStateException(&quot;cannot set position in closed state&quot;);                    
                </comment>
                <comment line="488">
                    throw new InvalidStateException(&quot;cannot set position if sequence is not set&quot;);                    
                </comment>
                <scope line="474"/>
                <scope line="481">
                    <scope line="482"/>
                </scope>
                <scope line="486">
                    <scope line="487"/>
                </scope>
                <scope line="490"/>
            </method>
            <method name="getMicrosecondLength" type="long" line="496">
                <scope line="499"/>
            </method>
            <method name="getMicrosecondPosition" type="long" line="507">
                <scope line="510"/>
                <scope line="513"/>
            </method>
            <method name="setMicrosecondPosition" type="void" line="519">
                <params>
                    <param name="microseconds" type="long"/>
                </params>
                <comment line="521">
                    should throw IllegalArgumentException                    
                </comment>
                <comment line="529">
                    throw new InvalidStateException(&quot;cannot set position in closed state&quot;);                    
                </comment>
                <comment line="534">
                    throw new InvalidStateException(&quot;cannot set position if sequence is not set&quot;);                    
                </comment>
                <scope line="520"/>
                <scope line="527">
                    <scope line="528"/>
                </scope>
                <scope line="532">
                    <scope line="533"/>
                </scope>
                <scope line="536">
                    <scope line="537"/>
                </scope>
            </method>
            <method name="setMasterSyncMode" type="void" line="544">
                <params>
                    <param name="sync" type="Sequencer.SyncMode"/>
                </params>
                <comment line="545">
                    not supported                    
                </comment>
            </method>
            <method name="getMasterSyncMode" type="Sequencer.SyncMode" line="549"/>
            <method name="getMasterSyncModes" type="Sequencer.SyncMode[]" line="554">
                <declaration name="returnedModes" type="Sequencer.SyncMode[]" line="555"/>
            </method>
            <method name="setSlaveSyncMode" type="void" line="561">
                <params>
                    <param name="sync" type="Sequencer.SyncMode"/>
                </params>
                <comment line="562">
                    not supported                    
                </comment>
            </method>
            <method name="getSlaveSyncMode" type="Sequencer.SyncMode" line="566"/>
            <method name="getSlaveSyncModes" type="Sequencer.SyncMode[]" line="571">
                <declaration name="returnedModes" type="Sequencer.SyncMode[]" line="572"/>
            </method>
            <method name="getTrackCount" type="int" line="577">
                <comment line="580">
                    $$fb wish there was a nicer way to get the number of tracks...                    
                </comment>
                <declaration name="seq" type="Sequence" line="578"/>
                <scope line="579"/>
            </method>
            <method name="setTrackMute" type="void" line="588">
                <params>
                    <param name="track" type="int"/>
                    <param name="mute" type="boolean"/>
                </params>
                <declaration name="trackCount" type="int" line="589"/>
                <scope line="593"/>
            </method>
            <method name="getTrackMute" type="boolean" line="599">
                <params>
                    <param name="track" type="int"/>
                </params>
            </method>
            <method name="setTrackSolo" type="void" line="606">
                <params>
                    <param name="track" type="int"/>
                    <param name="solo" type="boolean"/>
                </params>
                <declaration name="trackCount" type="int" line="607"/>
                <scope line="611"/>
            </method>
            <method name="getTrackSolo" type="boolean" line="617">
                <params>
                    <param name="track" type="int"/>
                </params>
            </method>
            <method name="addMetaEventListener" type="boolean" line="624">
                <params>
                    <param name="listener" type="MetaEventListener"/>
                </params>
                <scope line="625">
                    <scope line="626"/>
                </scope>
            </method>
            <method name="removeMetaEventListener" type="void" line="635">
                <params>
                    <param name="listener" type="MetaEventListener"/>
                </params>
                <scope line="636">
                    <declaration name="index" type="int" line="637"/>
                    <scope line="638"/>
                </scope>
            </method>
            <method name="addControllerEventListener" type="int[]" line="645">
                <params>
                    <param name="listener" type="ControllerEventListener"/>
                    <param name="controllers" type="int[]"/>
                </params>
                <comment line="648">
                    first find the listener.  if we have one, add the controllers                    
                </comment>
                <comment line="649">
                    if not, create a new element for it.                    
                </comment>
                <comment line="667">
                    and return all the controllers this listener is interested in                    
                </comment>
                <scope line="646">
                    <declaration name="cve" type="ControllerListElement" line="650"/>
                    <declaration name="flag" type="boolean" line="651"/>
                    <scope line="652">
                        <scope line="656"/>
                    </scope>
                    <scope line="662"/>
                </scope>
            </method>
            <method name="removeControllerEventListener" type="int[]" line="673">
                <params>
                    <param name="listener" type="ControllerEventListener"/>
                    <param name="controllers" type="int[]"/>
                </params>
                <scope line="674">
                    <declaration name="cve" type="ControllerListElement" line="675"/>
                    <declaration name="flag" type="boolean" line="676"/>
                    <scope line="677">
                        <scope line="679"/>
                    </scope>
                    <scope line="685"/>
                    <scope line="688">
                        <declaration name="index" type="int" line="689"/>
                        <scope line="690"/>
                    </scope>
                </scope>
            </method>
            <method name="setLoopStartPoint" type="void" line="702">
                <params>
                    <param name="tick" type="long"/>
                </params>
                <scope line="705"/>
            </method>
            <method name="getLoopStartPoint" type="long" line="711"/>
            <method name="setLoopEndPoint" type="void" line="715">
                <params>
                    <param name="tick" type="long"/>
                </params>
                <scope line="718"/>
            </method>
            <method name="getLoopEndPoint" type="long" line="724"/>
            <method name="setLoopCount" type="void" line="728">
                <params>
                    <param name="count" type="int"/>
                </params>
                <scope line="730"/>
                <scope line="734"/>
            </method>
            <method name="getLoopCount" type="int" line="739"/>
            <method name="implOpen" type="void" line="748">
                <comment line="751">
                    openInternalSynth();                    
                </comment>
                <comment line="753">
                    create PlayThread                    
                </comment>
                <comment line="756">
                    id = nOpen();                    
                </comment>
                <comment line="757">
                    if (id == 0) {                    
                </comment>
                <comment line="758">
                    throw new MidiUnavailableException(&quot;unable to open sequencer&quot;);                    
                </comment>
                <comment line="759">
                    }                    
                </comment>
                <comment line="764">
                    propagate caches                    
                </comment>
                <scope line="760"/>
                <scope line="767"/>
            </method>
            <method name="doAutoConnect" type="void" line="773">
                <comment line="776">
                    first try to connect to the default synthesizer                    
                </comment>
                <comment line="777">
                    IMPORTANT: this code needs to be synch&apos;ed with                    
                </comment>
                <comment line="778">
                    MidiSystem.getSequencer(boolean), because the same                    
                </comment>
                <comment line="779">
                    algorithm needs to be used!                    
                </comment>
                <comment line="789">
                    make sure that the synth is properly closed                    
                </comment>
                <comment line="796">
                    something went wrong with synth                    
                </comment>
                <comment line="799">
                    then try to connect to the default Receiver                    
                </comment>
                <comment line="803">
                    something went wrong. Nothing to do then!                    
                </comment>
                <declaration name="rec" type="Receiver" line="775"/>
                <scope line="780">
                    <declaration name="synth" type="Synthesizer" line="781"/>
                    <scope line="782"/>
                    <scope line="784">
                        <scope line="786"/>
                        <scope line="788">
                            <scope line="790"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="795"/>
                <scope line="798">
                    <scope line="800"/>
                    <scope line="802"/>
                </scope>
                <scope line="806">
                    <scope line="808"/>
                    <scope line="810"/>
                </scope>
            </method>
            <method name="propagateCaches" type="void" line="815">
                <comment line="816">
                    only set caches if open and sequence is set                    
                </comment>
                <scope line="817">
                    <scope line="818"/>
                    <scope line="821"/>
                    <scope line="823"/>
                </scope>
            </method>
            <javadoc line="829">
                populate the caches with the current values                
            </javadoc>
            <method name="setCaches" type="void" line="830"/>
            <method name="implClose" type="void" line="837">
                <comment line="843">
                    Interrupt playback loop.                    
                </comment>
                <comment line="860">
                    if this sequencer is set to autoconnect, need to
                     re-establish the connection at next open!                    
                </comment>
                <scope line="840"/>
                <scope line="842"/>
                <scope line="865">
                    <scope line="866"/>
                    <scope line="868"/>
                </scope>
            </method>
            <method name="implStart" type="void" line="875">
                <scope line="878"/>
                <scope line="884"/>
            </method>
            <method name="implStop" type="void" line="892">
                <scope line="895"/>
                <scope line="901"/>
            </method>
            <javadoc line="909">
                Send midi player events.
                  must not be synchronized on &quot;this&quot;                
            </javadoc>
            <method name="sendMetaEvents" type="void" line="913">
                <params>
                    <param name="message" type="MidiMessage"/>
                </params>
                <comment line="916">
                    if (Printer.debug) Printer.debug(&quot;sending a meta event&quot;);                    
                </comment>
            </method>
            <javadoc line="920">
                Send midi player events.                
            </javadoc>
            <method name="sendControllerEvents" type="void" line="923">
                <params>
                    <param name="message" type="MidiMessage"/>
                </params>
                <comment line="927">
                    if (Printer.debug) Printer.debug(&quot;sending a controller event&quot;);                    
                </comment>
                <declaration name="size" type="int" line="924"/>
                <scope line="929"/>
                <declaration name="msg" type="ShortMessage" line="933"/>
                <declaration name="controller" type="int" line="934"/>
                <declaration name="sendToListeners" type="List" line="935"/>
                <scope line="936">
                    <declaration name="cve" type="ControllerListElement" line="937"/>
                    <scope line="938">
                        <scope line="939"/>
                    </scope>
                </scope>
            </method>
            <method name="needCaching" type="boolean" line="950"/>
            <javadoc line="954">
                return the data pump instance, owned by play thread
                  if playthread is null, return null.
                  This method is guaranteed to return non-null if
                  needCaching returns false                
            </javadoc>
            <method name="getDataPump" type="DataPump" line="960">
                <scope line="961"/>
            </method>
            <method name="getTempoCache" type="MidiUtils.TempoCache" line="967"/>
            <method name="ensureBoolArraySize" type="boolean[]" line="971">
                <params>
                    <param name="array" type="boolean[]"/>
                    <param name="desiredSize" type="int"/>
                </params>
                <scope line="972"/>
                <scope line="975">
                    <declaration name="newArray" type="boolean[]" line="976"/>
                </scope>
            </method>
            <method name="hasReceivers" type="boolean" line="986"/>
            <method name="createReceiver" type="Receiver" line="991"/>
            <method name="hasTransmitters" type="boolean" line="996"/>
            <method name="createTransmitter" type="Transmitter" line="1001"/>
            <method name="setAutoConnect" type="void" line="1007">
                <params>
                    <param name="autoConnectedReceiver" type="Receiver"/>
                </params>
            </method>
            <class name="SequencerTransmitter" line="1016">
                <extends class="BasicTransmitter"/>
                <comment line="1092">
                    $$jb: using an array for controllers b/c its                    
                </comment>
                <comment line="1093">
                    easier to deal with than turning all the                    
                </comment>
                <comment line="1094">
                    ints into objects to use a Vector                    
                </comment>
                <comment line="1296">
                    waits until stopped                    
                </comment>
                <comment line="1411">
                    MPQ tempo                    
                </comment>
                <comment line="1412">
                    1.0 is default                    
                </comment>
                <comment line="1414">
                    ignore next META tempo during playback at this tick pos only                    
                </comment>
                <comment line="1417">
                    microseconds at checkoint                    
                </comment>
                <comment line="1418">
                    ticks at checkpoint                    
                </comment>
                <comment line="1419">
                    bit-mask of notes that are currently on                    
                </comment>
                <comment line="1421">
                    if true, do not play this track                    
                </comment>
                <comment line="1422">
                    read index per track                    
                </comment>
                <comment line="1427">
                    private sun.misc.Perf perf = sun.misc.Perf.getPerf();                    
                </comment>
                <comment line="1428">
                    private long perfFreq = perf.highResFrequency();                    
                </comment>
                <comment line="1469">
                    hasCachedTempo is only valid if it is the current position                    
                </comment>
                <comment line="1477">
                    this method is also used internally in the pump!                    
                </comment>
                <comment line="1794">
                    playback related methods (pumping)                    
                </comment>
                <comment line="1832">
                                        
                </comment>
                <javadoc line="1016">
                    An own class to distinguish the class name from
                      the transmitter of other devices                    
                </javadoc>
                <method name="SequencerTransmitter" type="constructor" line="1021"/>
            </class>
            <class name="SequencerReceiver" line="1027">
                <extends class="AbstractReceiver"/>
                <comment line="1092">
                    $$jb: using an array for controllers b/c its                    
                </comment>
                <comment line="1093">
                    easier to deal with than turning all the                    
                </comment>
                <comment line="1094">
                    ints into objects to use a Vector                    
                </comment>
                <comment line="1296">
                    waits until stopped                    
                </comment>
                <comment line="1411">
                    MPQ tempo                    
                </comment>
                <comment line="1412">
                    1.0 is default                    
                </comment>
                <comment line="1414">
                    ignore next META tempo during playback at this tick pos only                    
                </comment>
                <comment line="1417">
                    microseconds at checkoint                    
                </comment>
                <comment line="1418">
                    ticks at checkpoint                    
                </comment>
                <comment line="1419">
                    bit-mask of notes that are currently on                    
                </comment>
                <comment line="1421">
                    if true, do not play this track                    
                </comment>
                <comment line="1422">
                    read index per track                    
                </comment>
                <comment line="1427">
                    private sun.misc.Perf perf = sun.misc.Perf.getPerf();                    
                </comment>
                <comment line="1428">
                    private long perfFreq = perf.highResFrequency();                    
                </comment>
                <comment line="1469">
                    hasCachedTempo is only valid if it is the current position                    
                </comment>
                <comment line="1477">
                    this method is also used internally in the pump!                    
                </comment>
                <comment line="1794">
                    playback related methods (pumping)                    
                </comment>
                <comment line="1832">
                                        
                </comment>
                <method name="implSend" type="void" line="1029">
                    <params>
                        <param name="message" type="MidiMessage"/>
                        <param name="timeStamp" type="long"/>
                    </params>
                    <comment line="1033">
                        convert timeStamp to ticks                        
                    </comment>
                    <comment line="1042">
                        and record to the first matching Track                        
                    </comment>
                    <comment line="1044">
                        do not record real-time events                        
                    </comment>
                    <comment line="1045">
                        see 5048381: NullPointerException when saving a MIDI sequence                        
                    </comment>
                    <comment line="1049">
                        all real-time messages have 0xF in the high nibble of the status byte                        
                    </comment>
                    <comment line="1054">
                        $$jb: where to record meta, sysex events?                        
                    </comment>
                    <comment line="1055">
                        $$fb: the first recording track                        
                    </comment>
                    <comment line="1059">
                        create a copy of this message                        
                    </comment>
                    <comment line="1066">
                        create new MidiEvent                        
                    </comment>
                    <scope line="1030">
                        <declaration name="tickPos" type="long" line="1031"/>
                        <scope line="1034"/>
                        <scope line="1036">
                            <scope line="1037"/>
                        </scope>
                        <declaration name="track" type="Track" line="1043"/>
                        <scope line="1046">
                            <scope line="1047">
                                <declaration name="sm" type="ShortMessage" line="1048"/>
                                <scope line="1050"/>
                            </scope>
                            <scope line="1053"/>
                            <scope line="1058">
                                <scope line="1060"/>
                                <scope line="1062"/>
                                <declaration name="me" type="MidiEvent" line="1067"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="RealTimeSequencerInfo" line="1076">
                <extends class="MidiDevice.Info"/>
                <comment line="1092">
                    $$jb: using an array for controllers b/c its                    
                </comment>
                <comment line="1093">
                    easier to deal with than turning all the                    
                </comment>
                <comment line="1094">
                    ints into objects to use a Vector                    
                </comment>
                <comment line="1296">
                    waits until stopped                    
                </comment>
                <comment line="1411">
                    MPQ tempo                    
                </comment>
                <comment line="1412">
                    1.0 is default                    
                </comment>
                <comment line="1414">
                    ignore next META tempo during playback at this tick pos only                    
                </comment>
                <comment line="1417">
                    microseconds at checkoint                    
                </comment>
                <comment line="1418">
                    ticks at checkpoint                    
                </comment>
                <comment line="1419">
                    bit-mask of notes that are currently on                    
                </comment>
                <comment line="1421">
                    if true, do not play this track                    
                </comment>
                <comment line="1422">
                    read index per track                    
                </comment>
                <comment line="1427">
                    private sun.misc.Perf perf = sun.misc.Perf.getPerf();                    
                </comment>
                <comment line="1428">
                    private long perfFreq = perf.highResFrequency();                    
                </comment>
                <comment line="1469">
                    hasCachedTempo is only valid if it is the current position                    
                </comment>
                <comment line="1477">
                    this method is also used internally in the pump!                    
                </comment>
                <comment line="1794">
                    playback related methods (pumping)                    
                </comment>
                <comment line="1832">
                                        
                </comment>
                <declaration name="name" type="String" line="1078"/>
                <declaration name="vendor" type="String" line="1079"/>
                <declaration name="description" type="String" line="1080"/>
                <declaration name="version" type="String" line="1081"/>
                <method name="RealTimeSequencerInfo" type="constructor" line="1083"/>
            </class>
            <class name="ControllerListElement" line="1089">
                <comment line="1092">
                    $$jb: using an array for controllers b/c its                    
                </comment>
                <comment line="1093">
                    easier to deal with than turning all the                    
                </comment>
                <comment line="1094">
                    ints into objects to use a Vector                    
                </comment>
                <comment line="1296">
                    waits until stopped                    
                </comment>
                <comment line="1411">
                    MPQ tempo                    
                </comment>
                <comment line="1412">
                    1.0 is default                    
                </comment>
                <comment line="1414">
                    ignore next META tempo during playback at this tick pos only                    
                </comment>
                <comment line="1417">
                    microseconds at checkoint                    
                </comment>
                <comment line="1418">
                    ticks at checkpoint                    
                </comment>
                <comment line="1419">
                    bit-mask of notes that are currently on                    
                </comment>
                <comment line="1421">
                    if true, do not play this track                    
                </comment>
                <comment line="1422">
                    read index per track                    
                </comment>
                <comment line="1427">
                    private sun.misc.Perf perf = sun.misc.Perf.getPerf();                    
                </comment>
                <comment line="1428">
                    private long perfFreq = perf.highResFrequency();                    
                </comment>
                <comment line="1469">
                    hasCachedTempo is only valid if it is the current position                    
                </comment>
                <comment line="1477">
                    this method is also used internally in the pump!                    
                </comment>
                <comment line="1794">
                    playback related methods (pumping)                    
                </comment>
                <comment line="1832">
                                        
                </comment>
                <declaration name="controllers" type="int[]" line="1094"/>
                <declaration name="listener" type="ControllerEventListener" line="1095"/>
                <method name="ControllerListElement" type="constructor" line="1097">
                    <params>
                        <param name="listener" type="ControllerEventListener"/>
                        <param name="controllers" type="int[]"/>
                    </params>
                    <scope line="1100">
                        <scope line="1102"/>
                    </scope>
                </method>
                <method name="addControllers" type="void" line="1109">
                    <params>
                        <param name="c" type="int[]"/>
                    </params>
                    <comment line="1121">
                        first add what we have                        
                    </comment>
                    <comment line="1126">
                        now add the new controllers only if we don&apos;t already have them                        
                    </comment>
                    <comment line="1140">
                        now keep only the elements we need                        
                    </comment>
                    <scope line="1111">
                        <scope line="1113"/>
                    </scope>
                    <declaration name="temp" type="int" line="1118"/>
                    <declaration name="elements" type="int" line="1119"/>
                    <scope line="1122"/>
                    <scope line="1127">
                        <declaration name="flag" type="boolean" line="1128"/>
                        <scope line="1130">
                            <scope line="1131"/>
                        </scope>
                        <scope line="1136"/>
                    </scope>
                    <declaration name="newc" type="int" line="1141"/>
                    <scope line="1142"/>
                </method>
                <method name="removeControllers" type="void" line="1148">
                    <params>
                        <param name="c" type="int[]"/>
                    </params>
                    <comment line="1169">
                        now keep only the elements remaining                        
                    </comment>
                    <scope line="1150"/>
                    <scope line="1152">
                        <declaration name="temp" type="int" line="1153"/>
                        <declaration name="elements" type="int" line="1154"/>
                        <scope line="1157">
                            <declaration name="flag" type="boolean" line="1158"/>
                            <scope line="1159">
                                <scope line="1160"/>
                            </scope>
                            <scope line="1165"/>
                        </scope>
                        <declaration name="newc" type="int" line="1170"/>
                        <scope line="1171"/>
                    </scope>
                </method>
                <method name="getControllers" type="int[]" line="1179">
                    <comment line="1181">
                        return a copy of our array of controllers,                        
                    </comment>
                    <comment line="1182">
                        so others can&apos;t mess with it                        
                    </comment>
                    <scope line="1183"/>
                    <declaration name="c" type="int" line="1187"/>
                    <scope line="1189"/>
                </method>
            </class>
            <class name="RecordingTrack" line="1198">
                <comment line="1092">
                    $$jb: using an array for controllers b/c its                    
                </comment>
                <comment line="1093">
                    easier to deal with than turning all the                    
                </comment>
                <comment line="1094">
                    ints into objects to use a Vector                    
                </comment>
                <comment line="1296">
                    waits until stopped                    
                </comment>
                <comment line="1411">
                    MPQ tempo                    
                </comment>
                <comment line="1412">
                    1.0 is default                    
                </comment>
                <comment line="1414">
                    ignore next META tempo during playback at this tick pos only                    
                </comment>
                <comment line="1417">
                    microseconds at checkoint                    
                </comment>
                <comment line="1418">
                    ticks at checkpoint                    
                </comment>
                <comment line="1419">
                    bit-mask of notes that are currently on                    
                </comment>
                <comment line="1421">
                    if true, do not play this track                    
                </comment>
                <comment line="1422">
                    read index per track                    
                </comment>
                <comment line="1427">
                    private sun.misc.Perf perf = sun.misc.Perf.getPerf();                    
                </comment>
                <comment line="1428">
                    private long perfFreq = perf.highResFrequency();                    
                </comment>
                <comment line="1469">
                    hasCachedTempo is only valid if it is the current position                    
                </comment>
                <comment line="1477">
                    this method is also used internally in the pump!                    
                </comment>
                <comment line="1794">
                    playback related methods (pumping)                    
                </comment>
                <comment line="1832">
                                        
                </comment>
                <declaration name="track" type="Track" line="1200"/>
                <declaration name="channel" type="int" line="1201"/>
                <method name="RecordingTrack" type="constructor" line="1203">
                    <params>
                        <param name="track" type="Track"/>
                        <param name="channel" type="int"/>
                    </params>
                </method>
                <method name="get" type="RecordingTrack" line="1208">
                    <params>
                        <param name="recordingTracks" type="List"/>
                        <param name="track" type="Track"/>
                    </params>
                    <scope line="1210">
                        <declaration name="size" type="int" line="1211"/>
                        <scope line="1213">
                            <declaration name="current" type="RecordingTrack" line="1214"/>
                            <scope line="1215"/>
                        </scope>
                    </scope>
                </method>
                <method name="get" type="Track" line="1223">
                    <params>
                        <param name="recordingTracks" type="List"/>
                        <param name="channel" type="int"/>
                    </params>
                    <scope line="1225">
                        <declaration name="size" type="int" line="1226"/>
                        <scope line="1227">
                            <declaration name="current" type="RecordingTrack" line="1228"/>
                            <scope line="1229"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="PlayThread" line="1240">
                <comment line="1092">
                    $$jb: using an array for controllers b/c its                    
                </comment>
                <comment line="1093">
                    easier to deal with than turning all the                    
                </comment>
                <comment line="1094">
                    ints into objects to use a Vector                    
                </comment>
                <comment line="1296">
                    waits until stopped                    
                </comment>
                <comment line="1411">
                    MPQ tempo                    
                </comment>
                <comment line="1412">
                    1.0 is default                    
                </comment>
                <comment line="1414">
                    ignore next META tempo during playback at this tick pos only                    
                </comment>
                <comment line="1417">
                    microseconds at checkoint                    
                </comment>
                <comment line="1418">
                    ticks at checkpoint                    
                </comment>
                <comment line="1419">
                    bit-mask of notes that are currently on                    
                </comment>
                <comment line="1421">
                    if true, do not play this track                    
                </comment>
                <comment line="1422">
                    read index per track                    
                </comment>
                <comment line="1427">
                    private sun.misc.Perf perf = sun.misc.Perf.getPerf();                    
                </comment>
                <comment line="1428">
                    private long perfFreq = perf.highResFrequency();                    
                </comment>
                <comment line="1469">
                    hasCachedTempo is only valid if it is the current position                    
                </comment>
                <comment line="1477">
                    this method is also used internally in the pump!                    
                </comment>
                <comment line="1794">
                    playback related methods (pumping)                    
                </comment>
                <comment line="1832">
                                        
                </comment>
                <implements interface="Runnable"/>
                <declaration name="thread" type="Thread" line="1241"/>
                <declaration name="lock" type="Object" line="1242"/>
                <declaration name="interrupted" type="boolean" line="1244"/>
                <javadoc line="1244">
                    true if playback is interrupted (in close)                    
                </javadoc>
                <declaration name="isPumping" type="boolean" line="1246"/>
                <declaration name="dataPump" type="DataPump" line="1248"/>
                <method name="PlayThread" type="constructor" line="1251">
                    <comment line="1252">
                        nearly MAX_PRIORITY                        
                    </comment>
                    <comment line="1256">
                        name                        
                    </comment>
                    <comment line="1257">
                        daemon                        
                    </comment>
                    <comment line="1258">
                        priority                        
                    </comment>
                    <comment line="1259">
                        doStart                        
                    </comment>
                    <declaration name="priority" type="int" line="1253"/>
                </method>
                <method name="getDataPump" type="DataPump" line="1262"/>
                <method name="setSequence" type="void" line="1266">
                    <params>
                        <param name="seq" type="Sequence"/>
                    </params>
                </method>
                <javadoc line="1271">
                    start thread and pump. Requires up-to-date tempoCache                    
                </javadoc>
                <method name="start" type="void" line="1272">
                    <comment line="1273">
                        mark the sequencer running                        
                    </comment>
                    <comment line="1280">
                        means restarted                        
                    </comment>
                    <comment line="1286">
                        notify the thread                        
                    </comment>
                    <scope line="1276">
                        <declaration name="tickPos" type="long" line="1277"/>
                    </scope>
                    <scope line="1287"/>
                </method>
                <method name="stop" type="void" line="1296">
                    <comment line="1304">
                        ignore                        
                    </comment>
                    <comment line="1307">
                        don&apos;t wait for more than 2 seconds                        
                    </comment>
                    <comment line="1310">
                        break;                        
                    </comment>
                    <declaration name="t" type="long" line="1298"/>
                    <scope line="1299">
                        <scope line="1300">
                            <scope line="1301"/>
                            <scope line="1303"/>
                        </scope>
                        <scope line="1308"/>
                    </scope>
                </method>
                <method name="playThreadImplStop" type="void" line="1315">
                    <comment line="1316">
                        mark the sequencer running                        
                    </comment>
                    <scope line="1318"/>
                </method>
                <method name="close" type="void" line="1323">
                    <comment line="1326">
                        dispose of thread                        
                    </comment>
                    <comment line="1332">
                        wake up the thread if it&apos;s in wait()                        
                    </comment>
                    <comment line="1337">
                        wait for the thread to terminate itself,                        
                    </comment>
                    <comment line="1338">
                        but max. 2 seconds. Must not be synchronized!                        
                    </comment>
                    <declaration name="oldThread" type="Thread" line="1324"/>
                    <scope line="1325"/>
                    <scope line="1331">
                        <scope line="1333"/>
                    </scope>
                    <scope line="1339">
                        <scope line="1340"/>
                        <scope line="1342"/>
                    </scope>
                </method>
                <javadoc line="1347">
                    Main process loop driving the media flow.
                      Make sure to NOT synchronize on RealTimeSequencer
                      anywhere here (even implicit). That is a sure deadlock!                    
                </javadoc>
                <method name="run" type="void" line="1353">
                    <comment line="1365">
                        ignore                        
                    </comment>
                    <comment line="1382">
                        send EOT event (mis-used for end of media)                        
                    </comment>
                    <comment line="1391">
                        wake up a waiting stop() method                        
                    </comment>
                    <comment line="1399">
                        end of while(!EOM &amp;&amp; !interrupted &amp;&amp; running)                        
                    </comment>
                    <scope line="1355">
                        <declaration name="EOM" type="boolean" line="1356"/>
                        <declaration name="wasRunning" type="boolean" line="1357"/>
                        <scope line="1359">
                            <scope line="1362"/>
                            <scope line="1364"/>
                        </scope>
                        <scope line="1368"/>
                        <scope line="1376"/>
                        <scope line="1379">
                            <declaration name="message" type="MetaMessage" line="1383"/>
                            <scope line="1384"/>
                            <scope line="1386"/>
                        </scope>
                        <scope line="1389">
                            <scope line="1393">
                                <scope line="1394"/>
                                <scope line="1396"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="DataPump" line="1405">
                <comment line="1092">
                    $$jb: using an array for controllers b/c its                    
                </comment>
                <comment line="1093">
                    easier to deal with than turning all the                    
                </comment>
                <comment line="1094">
                    ints into objects to use a Vector                    
                </comment>
                <comment line="1296">
                    waits until stopped                    
                </comment>
                <comment line="1411">
                    MPQ tempo                    
                </comment>
                <comment line="1412">
                    1.0 is default                    
                </comment>
                <comment line="1414">
                    ignore next META tempo during playback at this tick pos only                    
                </comment>
                <comment line="1417">
                    microseconds at checkoint                    
                </comment>
                <comment line="1418">
                    ticks at checkpoint                    
                </comment>
                <comment line="1419">
                    bit-mask of notes that are currently on                    
                </comment>
                <comment line="1421">
                    if true, do not play this track                    
                </comment>
                <comment line="1422">
                    read index per track                    
                </comment>
                <comment line="1427">
                    private sun.misc.Perf perf = sun.misc.Perf.getPerf();                    
                </comment>
                <comment line="1428">
                    private long perfFreq = perf.highResFrequency();                    
                </comment>
                <comment line="1469">
                    hasCachedTempo is only valid if it is the current position                    
                </comment>
                <comment line="1477">
                    this method is also used internally in the pump!                    
                </comment>
                <comment line="1794">
                    playback related methods (pumping)                    
                </comment>
                <comment line="1832">
                                        
                </comment>
                <javadoc line="1405">
                    class that does the actual dispatching of events,
                      used to be in native in MMAPI                    
                </javadoc>
                <declaration name="currTempo" type="float" line="1410"/>
                <declaration name="tempoFactor" type="float" line="1411"/>
                <declaration name="inverseTempoFactor" type="float" line="1412"/>
                <declaration name="ignoreTempoEventAt" type="long" line="1413"/>
                <declaration name="resolution" type="int" line="1414"/>
                <declaration name="divisionType" type="float" line="1415"/>
                <declaration name="checkPointMillis" type="long" line="1416"/>
                <declaration name="checkPointTick" type="long" line="1417"/>
                <declaration name="noteOnCache" type="int[]" line="1418"/>
                <declaration name="tracks" type="Track[]" line="1419"/>
                <declaration name="trackDisabled" type="boolean[]" line="1420"/>
                <declaration name="trackReadPos" type="int[]" line="1421"/>
                <declaration name="lastTick" type="long" line="1422"/>
                <declaration name="needReindex" type="boolean" line="1423"/>
                <declaration name="currLoopCounter" type="int" line="1424"/>
                <method name="DataPump" type="constructor" line="1430"/>
                <method name="init" type="void" line="1434"/>
                <method name="setTickPos" type="void" line="1443">
                    <params>
                        <param name="tickPos" type="long"/>
                    </params>
                    <comment line="1450">
                        will also reindex                        
                    </comment>
                    <comment line="1457">
                        treat this as if it is a real time tempo change                        
                    </comment>
                    <comment line="1460">
                        trigger re-configuration                        
                    </comment>
                    <declaration name="oldLastTick" type="long" line="1444"/>
                    <scope line="1446"/>
                    <scope line="1449"/>
                    <scope line="1452"/>
                    <scope line="1455"/>
                </method>
                <method name="getTickPos" type="long" line="1464"/>
                <method name="hasCachedTempo" type="boolean" line="1469">
                    <scope line="1470"/>
                </method>
                <method name="setTempoMPQ" type="void" line="1477">
                    <params>
                        <param name="tempoMPQ" type="float"/>
                    </params>
                    <comment line="1481">
                        re-calculate check point                        
                    </comment>
                    <scope line="1478"/>
                </method>
                <method name="getTempoMPQ" type="float" line="1486"/>
                <method name="setTempoFactor" type="void" line="1490">
                    <params>
                        <param name="factor" type="float"/>
                    </params>
                    <comment line="1494">
                        re-calculate check point                        
                    </comment>
                    <scope line="1491"/>
                </method>
                <method name="getTempoFactor" type="float" line="1499"/>
                <method name="muteSoloChanged" type="void" line="1503">
                    <declaration name="newDisabled" type="boolean[]" line="1504"/>
                    <scope line="1505"/>
                </method>
                <method name="setSequence" type="void" line="1513">
                    <params>
                        <param name="seq" type="Sequence"/>
                    </params>
                    <comment line="1523">
                        trigger re-initialization                        
                    </comment>
                    <scope line="1514"/>
                </method>
                <method name="resetLoopCount" type="void" line="1528"/>
                <method name="clearNoteOnCache" type="void" line="1532">
                    <scope line="1533"/>
                </method>
                <method name="notesOff" type="void" line="1538">
                    <params>
                        <param name="doControllers" type="boolean"/>
                    </params>
                    <comment line="1545">
                        send note on with velocity 0                        
                    </comment>
                    <comment line="1550">
                                                
                    </comment>
                    <comment line="1552">
                                                
                    </comment>
                    <comment line="1555">
                                                
                    </comment>
                    <declaration name="done" type="int" line="1539"/>
                    <scope line="1540">
                        <declaration name="channelMask" type="int" line="1541"/>
                        <scope line="1542">
                            <scope line="1543"/>
                        </scope>
                        <scope line="1554"/>
                    </scope>
                </method>
                <method name="makeDisabledArray" type="boolean[]" line="1564">
                    <comment line="1575">
                        if one track is solo, then only play solo                        
                    </comment>
                    <comment line="1586">
                        only the channels with solo play, regardless of mute                        
                    </comment>
                    <comment line="1591">
                        mute the selected channels                        
                    </comment>
                    <scope line="1565"/>
                    <declaration name="newTrackDisabled" type="boolean[]" line="1568"/>
                    <declaration name="solo" type="boolean[]" line="1569"/>
                    <declaration name="mute" type="boolean[]" line="1570"/>
                    <scope line="1571"/>
                    <declaration name="hasSolo" type="boolean" line="1576"/>
                    <scope line="1577">
                        <scope line="1578">
                            <scope line="1579"/>
                        </scope>
                    </scope>
                    <scope line="1585">
                        <scope line="1587"/>
                    </scope>
                    <scope line="1590">
                        <scope line="1592"/>
                    </scope>
                </method>
                <javadoc line="1599">
                    chase all events from beginning of Track
                      and send note off for those events that are active
                      in noteOnCache array.
                      It is possible, of course, to catch notes from other tracks,
                      but better than more complicated logic to detect
                      which notes are really from this track                    
                </javadoc>
                <method name="sendNoteOffIfOn" type="void" line="1607">
                    <params>
                        <param name="track" type="Track"/>
                        <param name="endTick" type="long"/>
                    </params>
                    <comment line="1622">
                        only consider Note On with velocity &gt; 0                        
                    </comment>
                    <comment line="1628">
                        only consider Note On with velocity &gt; 0                        
                    </comment>
                    <comment line="1635">
                        the bit is set. Send Note Off                        
                    </comment>
                    <comment line="1637">
                        clear the bit                        
                    </comment>
                    <comment line="1645">
                        this happens when messages are removed                        
                    </comment>
                    <comment line="1646">
                        from the track while this method executes                        
                    </comment>
                    <declaration name="size" type="int" line="1608"/>
                    <declaration name="done" type="int" line="1609"/>
                    <scope line="1610">
                        <scope line="1611">
                            <declaration name="event" type="MidiEvent" line="1612"/>
                            <declaration name="msg" type="MidiMessage" line="1614"/>
                            <declaration name="status" type="int" line="1615"/>
                            <declaration name="len" type="int" line="1616"/>
                            <scope line="1617">
                                <declaration name="note" type="int" line="1618"/>
                                <scope line="1619">
                                    <declaration name="smsg" type="ShortMessage" line="1620"/>
                                    <scope line="1621"/>
                                </scope>
                                <scope line="1625">
                                    <declaration name="data" type="byte[]" line="1626"/>
                                    <scope line="1627"/>
                                </scope>
                                <scope line="1632">
                                    <declaration name="bit" type="int" line="1633"/>
                                    <scope line="1634"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1644"/>
                </method>
                <javadoc line="1652">
                    Runtime application of mute/solo:
                      if a track is muted that was previously playing, send
                      note off events for all currently playing notes                    
                </javadoc>
                <method name="applyDisabledTracks" type="void" line="1657">
                    <params>
                        <param name="oldDisabled" type="boolean[]"/>
                        <param name="newDisabled" type="boolean[]"/>
                    </params>
                    <comment line="1665">
                        case that a track gets muted: need to                        
                    </comment>
                    <comment line="1666">
                        send appropriate note off events to prevent                        
                    </comment>
                    <comment line="1667">
                        hanging notes                        
                    </comment>
                    <comment line="1677">
                        case that a track was muted and is now unmuted                        
                    </comment>
                    <comment line="1678">
                        need to chase events and re-index this track                        
                    </comment>
                    <declaration name="tempArray" type="byte[][]" line="1658"/>
                    <scope line="1659">
                        <scope line="1660">
                            <scope line="1664">
                                <scope line="1669"/>
                            </scope>
                            <scope line="1676">
                                <scope line="1679"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1688">
                    go through all events from startTick to endTick
                      chase the controller state and program change state
                      and then set the end-states at once.
                      needs to be called in synchronized state                    
                    <param>
                        tempArray an byte[128][16] to hold controller messages                        
                    </param>
                </javadoc>
                <method name="chaseTrackEvents" type="void" line="1699">
                    <params>
                        <param name="trackNum" type="int"/>
                        <param name="startTick" type="long"/>
                        <param name="endTick" type="long"/>
                        <param name="doReindex" type="boolean"/>
                        <param name="tempArray" type="byte[][]"/>
                    </params>
                    <comment line="1701">
                        start from the beginning                        
                    </comment>
                    <comment line="1705">
                        init temp array with impossible values                        
                    </comment>
                    <comment line="1747">
                        this happens when messages are removed                        
                    </comment>
                    <comment line="1748">
                        from the track while this method executes                        
                    </comment>
                    <comment line="1751">
                        now send out the aggregated controllers and program changes                        
                    </comment>
                    <comment line="1761">
                        send program change *after* controllers, to                        
                    </comment>
                    <comment line="1762">
                        correctly initialize banks                        
                    </comment>
                    <comment line="1767">
                        reset pitch bend on this channel (E0 00 40)                        
                    </comment>
                    <comment line="1769">
                        reset sustain pedal on this channel                        
                    </comment>
                    <scope line="1700"/>
                    <declaration name="progs" type="byte[]" line="1704"/>
                    <scope line="1706">
                        <scope line="1708"/>
                    </scope>
                    <declaration name="track" type="Track" line="1712"/>
                    <declaration name="size" type="int" line="1713"/>
                    <scope line="1714">
                        <scope line="1715">
                            <declaration name="event" type="MidiEvent" line="1716"/>
                            <scope line="1717">
                                <scope line="1718"/>
                            </scope>
                            <declaration name="msg" type="MidiMessage" line="1724"/>
                            <declaration name="status" type="int" line="1725"/>
                            <declaration name="len" type="int" line="1726"/>
                            <scope line="1727">
                                <scope line="1728">
                                    <declaration name="smsg" type="ShortMessage" line="1729"/>
                                </scope>
                                <scope line="1731">
                                    <declaration name="data" type="byte[]" line="1732"/>
                                </scope>
                            </scope>
                            <scope line="1736">
                                <scope line="1737">
                                    <declaration name="smsg" type="ShortMessage" line="1738"/>
                                </scope>
                                <scope line="1740">
                                    <declaration name="data" type="byte[]" line="1741"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1746"/>
                    <declaration name="numControllersSent" type="int" line="1750"/>
                    <scope line="1752">
                        <scope line="1753">
                            <declaration name="controllerValue" type="byte" line="1754"/>
                            <scope line="1755">
                                <declaration name="packedMsg" type="int" line="1756"/>
                            </scope>
                        </scope>
                        <scope line="1763"/>
                        <scope line="1766"/>
                    </scope>
                </method>
                <javadoc line="1777">
                    chase controllers and program for all tracks                    
                </javadoc>
                <method name="chaseEvents" type="void" line="1778">
                    <params>
                        <param name="startTick" type="long"/>
                        <param name="endTick" type="long"/>
                    </params>
                    <comment line="1785">
                        if track is not disabled, chase the events for it                        
                    </comment>
                    <declaration name="tempArray" type="byte[][]" line="1780"/>
                    <scope line="1781">
                        <scope line="1784"/>
                    </scope>
                </method>
                <method name="getCurrentTimeMillis" type="long" line="1795">
                    <comment line="1797">
                        return perf.highResCounter() * 1000 / perfFreq;                        
                    </comment>
                </method>
                <method name="millis2tick" type="long" line="1800">
                    <params>
                        <param name="millis" type="long"/>
                    </params>
                    <scope line="1801">
                        <declaration name="dTick" type="double" line="1802"/>
                    </scope>
                </method>
                <method name="tick2millis" type="long" line="1813">
                    <params>
                        <param name="tick" type="long"/>
                    </params>
                    <scope line="1814">
                        <declaration name="dMillis" type="double" line="1815"/>
                    </scope>
                </method>
                <method name="ReindexTrack" type="void" line="1824">
                    <params>
                        <param name="trackNum" type="int"/>
                        <param name="tick" type="long"/>
                    </params>
                    <scope line="1825"/>
                </method>
                <method name="dispatchMessage" type="boolean" line="1832">
                    <params>
                        <param name="trackNum" type="int"/>
                        <param name="event" type="MidiEvent"/>
                    </params>
                    <comment line="1838">
                        a meta message. Do not send it to the device.                        
                    </comment>
                    <comment line="1839">
                        0xFF with length=1 is a MIDI realtime message                        
                    </comment>
                    <comment line="1840">
                        which shouldn&apos;t be in a Sequence, but we play it                        
                    </comment>
                    <comment line="1841">
                        nonetheless.                        
                    </comment>
                    <comment line="1843">
                        see if this is a tempo message. Only on track 0.                        
                    </comment>
                    <comment line="1848">
                        sets ignoreTempoEventAt!                        
                    </comment>
                    <comment line="1851">
                        next loop, do not ignore anymore tempo events.                        
                    </comment>
                    <comment line="1855">
                        send to listeners                        
                    </comment>
                    <comment line="1859">
                        not meta, send to device                        
                    </comment>
                    <comment line="1864">
                        note off - clear the bit in the noteOnCache array                        
                    </comment>
                    <comment line="1871">
                        note on                        
                    </comment>
                    <comment line="1876">
                        if velocity &gt; 0 set the bit in the noteOnCache array                        
                    </comment>
                    <comment line="1879">
                        if velocity = 0 clear the bit in the noteOnCache array                        
                    </comment>
                    <comment line="1886">
                        if controller message, send controller listeners                        
                    </comment>
                    <declaration name="changesPending" type="boolean" line="1833"/>
                    <declaration name="message" type="MidiMessage" line="1834"/>
                    <declaration name="msgStatus" type="int" line="1835"/>
                    <declaration name="msgLen" type="int" line="1836"/>
                    <scope line="1837">
                        <scope line="1844">
                            <declaration name="newTempo" type="int" line="1845"/>
                            <scope line="1846">
                                <scope line="1847"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1858">
                        <scope line="1863">
                            <declaration name="note" type="int" line="1865"/>
                        </scope>
                        <scope line="1870">
                            <declaration name="smsg" type="ShortMessage" line="1872"/>
                            <declaration name="note" type="int" line="1873"/>
                            <declaration name="vel" type="int" line="1874"/>
                            <scope line="1875"/>
                            <scope line="1878"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1896">
                    the main pump method                    
                    <return>
                        true if end of sequence is reached                        
                    </return>
                </javadoc>
                <method name="pump" type="boolean" line="1899">
                    <comment line="1912">
                        need to re-find indexes in tracks?                        
                    </comment>
                    <comment line="1926">
                        get target tick from current time in millis                        
                    </comment>
                    <comment line="1928">
                        new check point                        
                    </comment>
                    <comment line="1937">
                        calculate current tick based on current time in milliseconds                        
                    </comment>
                    <comment line="1944">
                        need to loop!                        
                    </comment>
                    <comment line="1945">
                        only play until loop end                        
                    </comment>
                    <comment line="1970">
                        play all events that are due until targetTick                        
                    </comment>
                    <comment line="1975">
                        do not send out this message. Finished with this track                        
                    </comment>
                    <comment line="1979">
                        TODO: some kind of heuristics if the MIDI messages have changed                        
                    </comment>
                    <comment line="1980">
                        significantly (i.e. deleted or inserted a bunch of messages)                        
                    </comment>
                    <comment line="1981">
                        since last time. Would need to set needReindex = true then                        
                    </comment>
                    <comment line="1983">
                        only play this event if the track is enabled,                        
                    </comment>
                    <comment line="1984">
                        or if it is a tempo message on track 0                        
                    </comment>
                    <comment line="1985">
                        Note: cannot put this check outside                        
                    </comment>
                    <comment line="1986">
                        this inner loop in order to detect end of file                        
                    </comment>
                    <comment line="2040">
                        need to loop back!                        
                    </comment>
                    <comment line="2049">
                        now patch the checkPointMillis so that                        
                    </comment>
                    <comment line="2050">
                        it points to the exact beginning of when the loop was finished                        
                    </comment>
                    <comment line="2052">
                        $$fb TODO: although this is mathematically correct (i.e. the loop position                        
                    </comment>
                    <comment line="2053">
                        is correct, and doesn&apos;t drift away with several repetition,                        
                    </comment>
                    <comment line="2054">
                        there is a slight lag when looping back, probably caused                        
                    </comment>
                    <comment line="2055">
                        by the chasing.                        
                    </comment>
                    <comment line="2062">
                        no need for reindexing, is done in setTickPos                        
                    </comment>
                    <comment line="2065">
                        reset doLoop flag                        
                    </comment>
                    <declaration name="currMillis" type="long" line="1900"/>
                    <declaration name="targetTick" type="long" line="1901"/>
                    <declaration name="currEvent" type="MidiEvent" line="1902"/>
                    <declaration name="changesPending" type="boolean" line="1903"/>
                    <declaration name="doLoop" type="boolean" line="1904"/>
                    <declaration name="EOM" type="boolean" line="1905"/>
                    <declaration name="finishedTracks" type="int" line="1908"/>
                    <scope line="1909">
                        <scope line="1913">
                            <scope line="1915"/>
                            <scope line="1918"/>
                        </scope>
                        <scope line="1927"/>
                        <scope line="1936">
                            <scope line="1942">
                                <scope line="1943"/>
                            </scope>
                        </scope>
                        <scope line="1964">
                            <scope line="1965">
                                <declaration name="disabled" type="boolean" line="1966"/>
                                <declaration name="thisTrack" type="Track" line="1967"/>
                                <declaration name="readPos" type="int" line="1968"/>
                                <declaration name="size" type="int" line="1969"/>
                                <scope line="1972">
                                    <scope line="1974"/>
                                    <scope line="1988"/>
                                </scope>
                                <scope line="1992"/>
                                <scope line="1995">
                                    <scope line="2000"/>
                                    <scope line="2002"/>
                                    <scope line="2006"/>
                                    <scope line="2008"/>
                                </scope>
                            </scope>
                            <scope line="2014">
                                <scope line="2017"/>
                            </scope>
                            <scope line="2022"/>
                        </scope>
                        <scope line="2032">
                            <declaration name="oldCheckPointMillis" type="long" line="2034"/>
                            <declaration name="loopEndTick" type="long" line="2035"/>
                            <scope line="2036"/>
                            <scope line="2041"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>