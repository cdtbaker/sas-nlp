<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.util.Vector"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <import package="javax.sound.sampled.Control"/>
        <import package="javax.sound.sampled.DataLine"/>
        <import package="javax.sound.sampled.LineEvent"/>
        <import package="javax.sound.sampled.LineUnavailableException"/>
        <import package="javax.sound.sampled.Mixer"/>
        <class name="AbstractDataLine" line="10">
            <extends class="AbstractLine"/>
            <implements interface="DataLine"/>
            <javadoc line="10">
                AbstractDataLine                
                <author>
                    Kara Kytle                    
                </author>
            </javadoc>
            <declaration name="defaultFormat" type="AudioFormat" line="15"/>
            <declaration name="defaultBufferSize" type="int" line="16"/>
            <declaration name="lock" type="Object" line="17"/>
            <declaration name="format" type="AudioFormat" line="18"/>
            <declaration name="bufferSize" type="int" line="19"/>
            <declaration name="running" type="boolean" line="20"/>
            <declaration name="started" type="boolean" line="21"/>
            <declaration name="active" type="boolean" line="22"/>
            <javadoc line="23">
                Constructs a new AbstractLine.                
            </javadoc>
            <method name="AbstractDataLine" type="constructor" line="26">
                <params>
                    <param name="info" type="DataLine.Info"/>
                    <param name="mixer" type="AbstractMixer"/>
                    <param name="controls" type="Control[]"/>
                </params>
            </method>
            <javadoc line="29">
                Constructs a new AbstractLine.                
            </javadoc>
            <method name="AbstractDataLine" type="constructor" line="32">
                <params>
                    <param name="info" type="DataLine.Info"/>
                    <param name="mixer" type="AbstractMixer"/>
                    <param name="controls" type="Control[]"/>
                    <param name="format" type="AudioFormat"/>
                    <param name="bufferSize" type="int"/>
                </params>
                <scope line="34"/>
                <scope line="37"/>
                <scope line="40"/>
                <scope line="43"/>
            </method>
            <method name="open" type="void" line="49">
                <params>
                    <param name="format" type="AudioFormat"/>
                    <param name="bufferSize" type="int"/>
                </params>
                <scope line="50">
                    <scope line="52">
                        <scope line="56"/>
                        <scope line="60"/>
                    </scope>
                    <scope line="65">
                        <scope line="67"/>
                        <scope line="70"/>
                    </scope>
                </scope>
            </method>
            <method name="open" type="void" line="77">
                <params>
                    <param name="format" type="AudioFormat"/>
                </params>
            </method>
            <javadoc line="80">
                This implementation always returns 0.                
            </javadoc>
            <method name="available" type="int" line="83"/>
            <javadoc line="86">
                This implementation does nothing.                
            </javadoc>
            <method name="drain" type="void" line="89"/>
            <javadoc line="92">
                This implementation does nothing.                
            </javadoc>
            <method name="flush" type="void" line="95"/>
            <method name="start" type="void" line="98">
                <scope line="99">
                    <scope line="101">
                        <scope line="102"/>
                    </scope>
                </scope>
                <scope line="109"/>
            </method>
            <method name="stop" type="void" line="114">
                <scope line="115">
                    <scope line="117">
                        <scope line="118">
                            <scope line="122"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="128"/>
            </method>
            <method name="isRunning" type="boolean" line="133"/>
            <method name="isActive" type="boolean" line="136"/>
            <method name="getMicrosecondPosition" type="long" line="139">
                <declaration name="microseconds" type="long" line="140"/>
                <scope line="141"/>
            </method>
            <method name="getFormat" type="AudioFormat" line="146"/>
            <method name="getBufferSize" type="int" line="149"/>
            <javadoc line="152">
                This implementation does NOT change the buffer size                
            </javadoc>
            <method name="setBufferSize" type="int" line="155">
                <params>
                    <param name="newSize" type="int"/>
                </params>
            </method>
            <javadoc line="158">
                This implementation returns AudioSystem.NOT_SPECIFIED.                
            </javadoc>
            <method name="getLevel" type="float" line="161"/>
            <javadoc line="164">
                running is true after start is called and before stop is called,
                  regardless of whether data is actually being presented.                
            </javadoc>
            <method name="isStartedRunning" type="boolean" line="168"/>
            <javadoc line="171">
                This method sets the active state and generates
                  events if it changes.                
            </javadoc>
            <method name="setActive" type="void" line="175">
                <params>
                    <param name="active" type="boolean"/>
                </params>
                <scope line="177">
                    <scope line="178"/>
                </scope>
            </method>
            <javadoc line="183">
                This method sets the started state and generates
                  events if it changes.                
            </javadoc>
            <method name="setStarted" type="void" line="187">
                <params>
                    <param name="started" type="boolean"/>
                </params>
                <declaration name="sendEvents" type="boolean" line="189"/>
                <declaration name="position" type="long" line="190"/>
                <scope line="191">
                    <scope line="192"/>
                </scope>
                <scope line="197">
                    <scope line="198"/>
                    <scope line="201"/>
                </scope>
            </method>
            <javadoc line="207">
                This method generates a STOP event and sets the started state to false.
                  It is here for historic reasons when an EOM event existed.                
            </javadoc>
            <method name="setEOM" type="void" line="211"/>
            <javadoc line="216">
                Try to open the line with the current format and buffer size values.
                  If the line is not open, these will be the defaults.  If the
                  line is open, this should return quietly because the values
                  requested will match the current ones.                
            </javadoc>
            <method name="open" type="void" line="222"/>
            <javadoc line="227">
                This should also stop the line.  The closed line should not be running or active.
                  After we close the line, we reset the format and buffer size to the defaults.                
            </javadoc>
            <method name="close" type="void" line="231">
                <scope line="232">
                    <scope line="234"/>
                </scope>
            </method>
            <method name="implOpen" type="void" line="245"/>
            <method name="implClose" type="void" line="246"/>
            <method name="implStart" type="void" line="247"/>
            <method name="implStop" type="void" line="248"/>
        </class>
    </source>