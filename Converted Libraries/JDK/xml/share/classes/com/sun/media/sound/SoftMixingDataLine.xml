<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <import package="javax.sound.sampled.BooleanControl"/>
        <import package="javax.sound.sampled.Control"/>
        <import package="javax.sound.sampled.DataLine"/>
        <import package="javax.sound.sampled.FloatControl"/>
        <import package="javax.sound.sampled.LineEvent"/>
        <import package="javax.sound.sampled.LineListener"/>
        <import package="javax.sound.sampled.Control.Type"/>
        <class name="SoftMixingDataLine" line="42">
            <implements interface="DataLine"/>
            <javadoc line="42">
                General software mixing line.                
                <author>
                    Karl Helgason                    
                </author>
            </javadoc>
            <declaration name="CHORUS_SEND" type="FloatControl.Type" line="49"/>
            <anonymous_class line="50"/>
            <class name="AudioFloatInputStreamResampler" line="53">
                <extends class="AudioFloatInputStream"/>
                <declaration name="ais" type="AudioFloatInputStream" line="56"/>
                <declaration name="targetFormat" type="AudioFormat" line="58"/>
                <declaration name="skipbuffer" type="float[]" line="60"/>
                <declaration name="resampler" type="SoftAbstractResampler" line="62"/>
                <declaration name="pitch" type="float[]" line="64"/>
                <declaration name="ibuffer2" type="float[]" line="66"/>
                <declaration name="ibuffer" type="float[][]" line="68"/>
                <declaration name="ibuffer_index" type="float" line="70"/>
                <declaration name="ibuffer_len" type="int" line="72"/>
                <declaration name="nrofchannels" type="int" line="74"/>
                <declaration name="cbuffer" type="float[][]" line="76"/>
                <declaration name="buffer_len" type="int" line="78"/>
                <declaration name="pad" type="int" line="80"/>
                <declaration name="pad2" type="int" line="82"/>
                <declaration name="ix" type="float[]" line="84"/>
                <declaration name="ox" type="int[]" line="86"/>
                <declaration name="mark_ibuffer" type="float[][]" line="88"/>
                <declaration name="mark_ibuffer_index" type="float" line="90"/>
                <declaration name="mark_ibuffer_len" type="int" line="92"/>
                <method name="AudioFloatInputStreamResampler" type="constructor" line="95">
                    <params>
                        <param name="ais" type="AudioFloatInputStream"/>
                        <param name="format" type="AudioFormat"/>
                    </params>
                    <comment line="122">
                        new                        
                    </comment>
                    <comment line="123">
                        SoftLinearResampler2();                        
                    </comment>
                    <declaration name="sourceFormat" type="AudioFormat" line="97"/>
                    <declaration name="interpolation" type="Object" line="103"/>
                    <scope line="104">
                        <declaration name="resamplerType" type="String" line="105"/>
                    </scope>
                </method>
                <method name="available" type="int" line="133"/>
                <method name="close" type="void" line="137"/>
                <method name="getFormat" type="AudioFormat" line="141"/>
                <method name="getFrameLength" type="long" line="145">
                    <comment line="146">
                        ais.getFrameLength();                        
                    </comment>
                </method>
                <method name="mark" type="void" line="149">
                    <params>
                        <param name="readlimit" type="int"/>
                    </params>
                    <scope line="153"/>
                    <scope line="156">
                        <declaration name="from" type="float[]" line="157"/>
                        <declaration name="to" type="float[]" line="158"/>
                        <scope line="159"/>
                    </scope>
                </method>
                <method name="markSupported" type="boolean" line="165"/>
                <method name="readNextBuffer" type="void" line="169">
                    <scope line="174">
                        <declaration name="buff" type="float[]" line="175"/>
                        <declaration name="buffer_len_pad" type="int" line="176"/>
                        <scope line="177"/>
                    </scope>
                    <scope line="185">
                        <scope line="186">
                            <declaration name="ret" type="int" line="187"/>
                        </scope>
                    </scope>
                    <scope line="195"/>
                    <declaration name="ibuffer2_len" type="int" line="199"/>
                    <scope line="200">
                        <declaration name="buff" type="float[]" line="201"/>
                        <scope line="202"/>
                    </scope>
                </method>
                <method name="read" type="int" line="209">
                    <params>
                        <param name="b" type="float[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="211"/>
                    <declaration name="remain" type="int" line="218"/>
                    <declaration name="destPos" type="int" line="219"/>
                    <declaration name="in_end" type="int" line="220"/>
                    <scope line="221">
                        <scope line="222"/>
                        <scope line="228"/>
                        <declaration name="preDestPos" type="int" line="236"/>
                        <scope line="237">
                            <declaration name="buff" type="float[]" line="240"/>
                        </scope>
                    </scope>
                    <scope line="248">
                        <declaration name="ix" type="int" line="249"/>
                        <declaration name="buff" type="float[]" line="250"/>
                        <scope line="251"/>
                    </scope>
                </method>
                <method name="reset" type="void" line="258">
                    <scope line="264">
                        <declaration name="from" type="float[]" line="265"/>
                        <declaration name="to" type="float[]" line="266"/>
                        <scope line="267"/>
                    </scope>
                </method>
                <method name="skip" type="long" line="274">
                    <params>
                        <param name="len" type="long"/>
                    </params>
                    <declaration name="l_skipbuffer" type="float[]" line="279"/>
                    <declaration name="remain" type="long" line="280"/>
                    <scope line="281">
                        <declaration name="ret" type="int" line="282"/>
                        <scope line="284"/>
                    </scope>
                </method>
            </class>
            <class name="Gain" line="297">
                <extends class="FloatControl"/>
                <method name="Gain" type="constructor" line="299"/>
                <method name="setValue" type="void" line="305">
                    <params>
                        <param name="newValue" type="float"/>
                    </params>
                </method>
            </class>
            <class name="Mute" line="311">
                <extends class="BooleanControl"/>
                <method name="Mute" type="constructor" line="313"/>
                <method name="setValue" type="void" line="317">
                    <params>
                        <param name="newValue" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="ApplyReverb" line="323">
                <extends class="BooleanControl"/>
                <method name="ApplyReverb" type="constructor" line="325"/>
                <method name="setValue" type="void" line="329">
                    <params>
                        <param name="newValue" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="Balance" line="336">
                <extends class="FloatControl"/>
                <method name="Balance" type="constructor" line="338"/>
                <method name="setValue" type="void" line="343">
                    <params>
                        <param name="newValue" type="float"/>
                    </params>
                </method>
            </class>
            <class name="Pan" line="350">
                <extends class="FloatControl"/>
                <method name="Pan" type="constructor" line="352"/>
                <method name="setValue" type="void" line="357">
                    <params>
                        <param name="newValue" type="float"/>
                    </params>
                </method>
                <method name="getValue" type="float" line="362"/>
            </class>
            <class name="ReverbSend" line="368">
                <extends class="FloatControl"/>
                <method name="ReverbSend" type="constructor" line="370"/>
                <method name="setValue" type="void" line="375">
                    <params>
                        <param name="newValue" type="float"/>
                    </params>
                </method>
            </class>
            <class name="ChorusSend" line="382">
                <extends class="FloatControl"/>
                <method name="ChorusSend" type="constructor" line="384"/>
                <method name="setValue" type="void" line="389">
                    <params>
                        <param name="newValue" type="float"/>
                    </params>
                </method>
            </class>
            <declaration name="gain_control" type="Gain" line="396"/>
            <declaration name="mute_control" type="Mute" line="398"/>
            <declaration name="balance_control" type="Balance" line="400"/>
            <declaration name="pan_control" type="Pan" line="402"/>
            <declaration name="reverbsend_control" type="ReverbSend" line="404"/>
            <declaration name="chorussend_control" type="ChorusSend" line="406"/>
            <declaration name="apply_reverb" type="ApplyReverb" line="408"/>
            <declaration name="controls" type="Control[]" line="410"/>
            <declaration name="leftgain" type="float" line="412"/>
            <declaration name="rightgain" type="float" line="414"/>
            <declaration name="eff1gain" type="float" line="416"/>
            <declaration name="eff2gain" type="float" line="418"/>
            <declaration name="listeners" type="List&lt;LineListener&gt;" line="420"/>
            <declaration name="control_mutex" type="Object" line="422"/>
            <declaration name="mixer" type="SoftMixingMixer" line="424"/>
            <declaration name="info" type="DataLine.Info" line="426"/>
            <method name="processControlLogic" type="void" line="428"/>
            <method name="processAudioLogic" type="void" line="430"/>
            <method name="SoftMixingDataLine" type="constructor" line="432">
                <params>
                    <param name="mixer" type="SoftMixingMixer"/>
                    <param name="info" type="DataLine.Info"/>
                </params>
            </method>
            <method name="calcVolume" type="void" line="443">
                <comment line="451">
                    -1 = Left, 0 Center, 1 = Right                    
                </comment>
                <scope line="444">
                    <declaration name="gain" type="double" line="445"/>
                    <scope line="450">
                        <declaration name="balance" type="double" line="452"/>
                    </scope>
                </scope>
                <scope line="464"/>
            </method>
            <method name="sendEvent" type="void" line="469">
                <params>
                    <param name="event" type="LineEvent"/>
                </params>
                <declaration name="listener_array" type="LineListener[]" line="472"/>
                <scope line="474"/>
            </method>
            <method name="addLineListener" type="void" line="479">
                <params>
                    <param name="listener" type="LineListener"/>
                </params>
                <scope line="480"/>
            </method>
            <method name="removeLineListener" type="void" line="485">
                <params>
                    <param name="listener" type="LineListener"/>
                </params>
                <scope line="486"/>
            </method>
            <method name="getLineInfo" type="javax.sound.sampled.Line.Info" line="491"/>
            <method name="getControl" type="Control" line="495">
                <params>
                    <param name="control" type="Type"/>
                </params>
                <scope line="496">
                    <scope line="497">
                        <scope line="498"/>
                    </scope>
                </scope>
            </method>
            <method name="getControls" type="Control[]" line="507"/>
            <method name="isControlSupported" type="boolean" line="511">
                <params>
                    <param name="control" type="Type"/>
                </params>
                <scope line="512">
                    <scope line="513">
                        <scope line="514"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>