<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <import package="javax.sound.sampled.BooleanControl"/>
        <import package="javax.sound.sampled.Control"/>
        <import package="javax.sound.sampled.DataLine"/>
        <import package="javax.sound.sampled.FloatControl"/>
        <import package="javax.sound.sampled.LineEvent"/>
        <import package="javax.sound.sampled.LineListener"/>
        <import package="javax.sound.sampled.Control.Type"/>
        <class name="SoftMixingDataLine" line="15">
            <implements interface="DataLine"/>
            <javadoc line="15">
                General software mixing line.                
                <author>
                    Karl Helgason                    
                </author>
            </javadoc>
            <declaration name="CHORUS_SEND" type="FloatControl.Type" line="20"/>
            <anonymous_class line="20"/>
            <class name="AudioFloatInputStreamResampler" line="23">
                <extends class="AudioFloatInputStream"/>
                <declaration name="ais" type="AudioFloatInputStream" line="24"/>
                <declaration name="targetFormat" type="AudioFormat" line="25"/>
                <declaration name="skipbuffer" type="float[]" line="26"/>
                <declaration name="resampler" type="SoftAbstractResampler" line="27"/>
                <declaration name="pitch" type="float[]" line="28"/>
                <declaration name="ibuffer2" type="float[]" line="29"/>
                <declaration name="ibuffer" type="float[][]" line="30"/>
                <declaration name="ibuffer_index" type="float" line="31"/>
                <declaration name="ibuffer_len" type="int" line="32"/>
                <declaration name="nrofchannels" type="int" line="33"/>
                <declaration name="cbuffer" type="float[][]" line="34"/>
                <declaration name="buffer_len" type="int" line="35"/>
                <declaration name="pad" type="int" line="36"/>
                <declaration name="pad2" type="int" line="37"/>
                <declaration name="ix" type="float[]" line="38"/>
                <declaration name="ox" type="int[]" line="39"/>
                <declaration name="mark_ibuffer" type="float[][]" line="40"/>
                <declaration name="mark_ibuffer_index" type="float" line="41"/>
                <declaration name="mark_ibuffer_len" type="int" line="42"/>
                <method name="AudioFloatInputStreamResampler" type="constructor" line="43">
                    <params>
                        <param name="ais" type="AudioFloatInputStream"/>
                        <param name="format" type="AudioFormat"/>
                    </params>
                    <declaration name="sourceFormat" type="AudioFormat" line="45"/>
                    <declaration name="interpolation" type="Object" line="48"/>
                    <scope line="49">
                        <declaration name="resamplerType" type="String" line="50"/>
                    </scope>
                </method>
                <method name="available" type="int" line="68"/>
                <method name="close" type="void" line="71"/>
                <method name="getFormat" type="AudioFormat" line="74"/>
                <method name="getFrameLength" type="long" line="77"/>
                <method name="mark" type="void" line="80">
                    <params>
                        <param name="readlimit" type="int"/>
                    </params>
                    <scope line="84"/>
                    <scope line="87">
                        <declaration name="from" type="float[]" line="88"/>
                        <declaration name="to" type="float[]" line="89"/>
                        <scope line="90"/>
                    </scope>
                </method>
                <method name="markSupported" type="boolean" line="95"/>
                <method name="readNextBuffer" type="void" line="98">
                    <scope line="100">
                        <declaration name="buff" type="float[]" line="101"/>
                        <declaration name="buffer_len_pad" type="int" line="102"/>
                        <scope line="103"/>
                    </scope>
                    <scope line="109">
                        <scope line="110">
                            <declaration name="ret" type="int" line="111"/>
                        </scope>
                    </scope>
                    <scope line="118"/>
                    <declaration name="ibuffer2_len" type="int" line="121"/>
                    <scope line="122">
                        <declaration name="buff" type="float[]" line="123"/>
                        <scope line="124"/>
                    </scope>
                </method>
                <method name="read" type="int" line="129">
                    <params>
                        <param name="b" type="float[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="130"/>
                    <declaration name="remain" type="int" line="135"/>
                    <declaration name="destPos" type="int" line="136"/>
                    <declaration name="in_end" type="int" line="137"/>
                    <scope line="138">
                        <scope line="139"/>
                        <scope line="143"/>
                        <declaration name="preDestPos" type="int" line="148"/>
                        <scope line="149">
                            <declaration name="buff" type="float[]" line="152"/>
                        </scope>
                    </scope>
                    <scope line="159">
                        <declaration name="ix" type="int" line="160"/>
                        <declaration name="buff" type="float[]" line="161"/>
                        <scope line="162"/>
                    </scope>
                </method>
                <method name="reset" type="void" line="168">
                    <scope line="173">
                        <declaration name="from" type="float[]" line="174"/>
                        <declaration name="to" type="float[]" line="175"/>
                        <scope line="176"/>
                    </scope>
                </method>
                <method name="skip" type="long" line="181">
                    <params>
                        <param name="len" type="long"/>
                    </params>
                    <declaration name="l_skipbuffer" type="float[]" line="184"/>
                    <declaration name="remain" type="long" line="185"/>
                    <scope line="186">
                        <declaration name="ret" type="int" line="187"/>
                        <scope line="188"/>
                    </scope>
                </method>
            </class>
            <class name="Gain" line="197">
                <extends class="FloatControl"/>
                <method name="Gain" type="constructor" line="198"/>
                <method name="setValue" type="void" line="201">
                    <params>
                        <param name="newValue" type="float"/>
                    </params>
                </method>
            </class>
            <class name="Mute" line="206">
                <extends class="BooleanControl"/>
                <method name="Mute" type="constructor" line="207"/>
                <method name="setValue" type="void" line="210">
                    <params>
                        <param name="newValue" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="ApplyReverb" line="215">
                <extends class="BooleanControl"/>
                <method name="ApplyReverb" type="constructor" line="216"/>
                <method name="setValue" type="void" line="219">
                    <params>
                        <param name="newValue" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="Balance" line="224">
                <extends class="FloatControl"/>
                <method name="Balance" type="constructor" line="225"/>
                <method name="setValue" type="void" line="228">
                    <params>
                        <param name="newValue" type="float"/>
                    </params>
                </method>
            </class>
            <class name="Pan" line="233">
                <extends class="FloatControl"/>
                <method name="Pan" type="constructor" line="234"/>
                <method name="setValue" type="void" line="237">
                    <params>
                        <param name="newValue" type="float"/>
                    </params>
                </method>
                <method name="getValue" type="float" line="241"/>
            </class>
            <class name="ReverbSend" line="245">
                <extends class="FloatControl"/>
                <method name="ReverbSend" type="constructor" line="246"/>
                <method name="setValue" type="void" line="249">
                    <params>
                        <param name="newValue" type="float"/>
                    </params>
                </method>
            </class>
            <class name="ChorusSend" line="254">
                <extends class="FloatControl"/>
                <method name="ChorusSend" type="constructor" line="255"/>
                <method name="setValue" type="void" line="258">
                    <params>
                        <param name="newValue" type="float"/>
                    </params>
                </method>
            </class>
            <declaration name="gain_control" type="Gain" line="263"/>
            <declaration name="mute_control" type="Mute" line="264"/>
            <declaration name="balance_control" type="Balance" line="265"/>
            <declaration name="pan_control" type="Pan" line="266"/>
            <declaration name="reverbsend_control" type="ReverbSend" line="267"/>
            <declaration name="chorussend_control" type="ChorusSend" line="268"/>
            <declaration name="apply_reverb" type="ApplyReverb" line="269"/>
            <declaration name="controls" type="Control[]" line="270"/>
            <declaration name="leftgain" type="float" line="271"/>
            <declaration name="rightgain" type="float" line="272"/>
            <declaration name="eff1gain" type="float" line="273"/>
            <declaration name="eff2gain" type="float" line="274"/>
            <declaration name="listeners" type="List&lt;LineListener&gt;" line="275"/>
            <declaration name="control_mutex" type="Object" line="276"/>
            <declaration name="mixer" type="SoftMixingMixer" line="277"/>
            <declaration name="info" type="DataLine.Info" line="278"/>
            <method name="processControlLogic" type="void" line="279"/>
            <method name="processAudioLogic" type="void" line="280"/>
            <method name="SoftMixingDataLine" type="constructor" line="281">
                <params>
                    <param name="mixer" type="SoftMixingMixer"/>
                    <param name="info" type="DataLine.Info"/>
                </params>
            </method>
            <method name="calcVolume" type="void" line="288">
                <scope line="289">
                    <declaration name="gain" type="double" line="290"/>
                    <scope line="294">
                        <declaration name="balance" type="double" line="295"/>
                    </scope>
                </scope>
                <scope line="302"/>
            </method>
            <method name="sendEvent" type="void" line="306">
                <params>
                    <param name="event" type="LineEvent"/>
                </params>
                <declaration name="listener_array" type="LineListener[]" line="308"/>
                <scope line="309"/>
            </method>
            <method name="addLineListener" type="void" line="313">
                <params>
                    <param name="listener" type="LineListener"/>
                </params>
                <scope line="314"/>
            </method>
            <method name="removeLineListener" type="void" line="318">
                <params>
                    <param name="listener" type="LineListener"/>
                </params>
                <scope line="319"/>
            </method>
            <method name="getLineInfo" type="javax.sound.sampled.Line.Info" line="323"/>
            <method name="getControl" type="Control" line="326">
                <params>
                    <param name="control" type="Type"/>
                </params>
                <scope line="327">
                    <scope line="328">
                        <scope line="329"/>
                    </scope>
                </scope>
            </method>
            <method name="getControls" type="Control[]" line="336"/>
            <method name="isControlSupported" type="boolean" line="339">
                <params>
                    <param name="control" type="Type"/>
                </params>
                <scope line="340">
                    <scope line="341">
                        <scope line="342"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>