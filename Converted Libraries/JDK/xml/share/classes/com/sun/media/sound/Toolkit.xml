<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioInputStream"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <class name="Toolkit" line="32">
            <comment line="87">
                returns bytes aligned to a multiple of blocksize
                 the return value will be in the range of (bytes-blocksize+1) ... bytes                
            </comment>
            <comment line="108">
                gets the number of bytes needed to play the specified number of milliseconds                
            </comment>
            <comment line="116">
                gets the time in milliseconds for the given number of bytes                
            </comment>
            <comment line="123">
                gets the number of bytes needed to play the specified number of microseconds                
            </comment>
            <comment line="131">
                gets the time in microseconds for the given number of bytes                
            </comment>
            <comment line="138">
                gets the number of frames needed to play the specified number of microseconds                
            </comment>
            <comment line="145">
                gets the time in microseconds for the given number of frames                
            </comment>
            <javadoc line="32">
                Common conversions etc.                
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <javadoc line="41">
                Converts bytes from signed to unsigned.                
            </javadoc>
            <method name="getUnsigned8" type="void" line="44">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="45"/>
            </method>
            <javadoc line="51">
                Swaps bytes.                
                <throws>
                    ArrayOutOfBoundsException if len is not a multiple of 2.                    
                </throws>
            </javadoc>
            <method name="getByteSwapped" type="void" line="55">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="tempByte" type="byte" line="57"/>
                <scope line="58"/>
            </method>
            <javadoc line="67">
                Linear to DB scale conversion.                
            </javadoc>
            <method name="linearToDB" type="float" line="70">
                <params>
                    <param name="linear" type="float"/>
                </params>
                <declaration name="dB" type="float" line="72"/>
            </method>
            <javadoc line="77">
                DB to linear scale conversion.                
            </javadoc>
            <method name="dBToLinear" type="float" line="80">
                <params>
                    <param name="dB" type="float"/>
                </params>
                <declaration name="linear" type="float" line="82"/>
            </method>
            <method name="align" type="long" line="90">
                <params>
                    <param name="bytes" type="long"/>
                    <param name="blockSize" type="int"/>
                </params>
                <comment line="92">
                    prevent null pointers                    
                </comment>
                <scope line="92"/>
            </method>
            <method name="align" type="int" line="98">
                <params>
                    <param name="bytes" type="int"/>
                    <param name="blockSize" type="int"/>
                </params>
                <comment line="100">
                    prevent null pointers                    
                </comment>
                <scope line="100"/>
            </method>
            <method name="millis2bytes" type="long" line="110">
                <params>
                    <param name="format" type="AudioFormat"/>
                    <param name="millis" type="long"/>
                </params>
                <declaration name="result" type="long" line="111"/>
            </method>
            <method name="bytes2millis" type="long" line="118">
                <params>
                    <param name="format" type="AudioFormat"/>
                    <param name="bytes" type="long"/>
                </params>
            </method>
            <method name="micros2bytes" type="long" line="125">
                <params>
                    <param name="format" type="AudioFormat"/>
                    <param name="micros" type="long"/>
                </params>
                <declaration name="result" type="long" line="126"/>
            </method>
            <method name="bytes2micros" type="long" line="133">
                <params>
                    <param name="format" type="AudioFormat"/>
                    <param name="bytes" type="long"/>
                </params>
            </method>
            <method name="micros2frames" type="long" line="140">
                <params>
                    <param name="format" type="AudioFormat"/>
                    <param name="micros" type="long"/>
                </params>
            </method>
            <method name="frames2micros" type="long" line="147">
                <params>
                    <param name="format" type="AudioFormat"/>
                    <param name="frames" type="long"/>
                </params>
            </method>
            <method name="isFullySpecifiedAudioFormat" type="void" line="151">
                <params>
                    <param name="format" type="AudioFormat"/>
                </params>
                <comment line="157">
                    we don&apos;t know how to verify possibly non-linear encodings                    
                </comment>
                <scope line="155"/>
                <scope line="159"/>
                <scope line="164"/>
                <scope line="169"/>
                <scope line="174"/>
                <scope line="179"/>
            </method>
            <method name="isFullySpecifiedPCMFormat" type="boolean" line="187">
                <params>
                    <param name="format" type="AudioFormat"/>
                </params>
                <scope line="189"/>
                <scope line="196"/>
            </method>
            <method name="getPCMConvertedAudioInputStream" type="AudioInputStream" line="203">
                <params>
                    <param name="ais" type="AudioInputStream"/>
                </params>
                <comment line="205">
                    we can&apos;t open the device for non-PCM playback, so we have
                     convert any other encodings to PCM here (at least we try!)                    
                </comment>
                <declaration name="af" type="AudioFormat" line="206"/>
                <scope line="209">
                    <scope line="211">
                        <declaration name="newFormat" type="AudioFormat" line="212"/>
                    </scope>
                    <scope line="221"/>
                </scope>
            </method>
        </class>
    </source>