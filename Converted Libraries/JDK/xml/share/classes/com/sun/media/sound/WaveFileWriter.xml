<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.RandomAccessFile"/>
        <import package="java.io.SequenceInputStream"/>
        <import package="javax.sound.sampled.AudioFileFormat"/>
        <import package="javax.sound.sampled.AudioInputStream"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <class name="WaveFileWriter" line="48">
            <extends class="SunFileWriter"/>
            <comment line="56">
                magic numbers                
            </comment>
            <comment line="59">
                &quot;fmt &quot;                
            </comment>
            <comment line="60">
                &quot;data&quot;                
            </comment>
            <comment line="62">
                encodings                
            </comment>
            <comment line="93">
                METHODS TO IMPLEMENT AudioFileWriter                
            </comment>
            <comment line="171">
                --------------------------------------------------------------------                
            </comment>
            <javadoc line="48">
                WAVE file writer.                
                <author>
                    Jan Borgersen                    
                </author>
            </javadoc>
            <declaration name="RIFF_MAGIC" type="int" line="56"/>
            <declaration name="WAVE_MAGIC" type="int" line="57"/>
            <declaration name="FMT_MAGIC" type="int" line="58"/>
            <declaration name="DATA_MAGIC" type="int" line="59"/>
            <declaration name="WAVE_FORMAT_UNKNOWN" type="int" line="62"/>
            <declaration name="WAVE_FORMAT_PCM" type="int" line="63"/>
            <declaration name="WAVE_FORMAT_ADPCM" type="int" line="64"/>
            <declaration name="WAVE_FORMAT_ALAW" type="int" line="65"/>
            <declaration name="WAVE_FORMAT_MULAW" type="int" line="66"/>
            <declaration name="WAVE_FORMAT_OKI_ADPCM" type="int" line="67"/>
            <declaration name="WAVE_FORMAT_DIGISTD" type="int" line="68"/>
            <declaration name="WAVE_FORMAT_DIGIFIX" type="int" line="69"/>
            <declaration name="WAVE_IBM_FORMAT_MULAW" type="int" line="70"/>
            <declaration name="WAVE_IBM_FORMAT_ALAW" type="int" line="71"/>
            <declaration name="WAVE_IBM_FORMAT_ADPCM" type="int" line="72"/>
            <declaration name="WAVE_FORMAT_DVI_ADPCM" type="int" line="73"/>
            <declaration name="WAVE_FORMAT_SX7383" type="int" line="74"/>
            <declaration name="waveTypes" type="AudioFileFormat.Type" line="76"/>
            <javadoc line="76">
                WAVE type                
            </javadoc>
            <javadoc line="84">
                Constructs a new WaveFileWriter object.                
            </javadoc>
            <method name="WaveFileWriter" type="constructor" line="87"/>
            <method name="getAudioFileTypes" type="AudioFileFormat.Type[]" line="95">
                <params>
                    <param name="stream" type="AudioInputStream"/>
                </params>
                <comment line="100">
                    make sure we can write this stream                    
                </comment>
                <declaration name="filetypes" type="AudioFileFormat.Type[]" line="97"/>
                <declaration name="format" type="AudioFormat" line="101"/>
                <declaration name="encoding" type="AudioFormat.Encoding" line="102"/>
                <scope line="107"/>
            </method>
            <method name="write" type="int" line="116">
                <params>
                    <param name="stream" type="AudioInputStream"/>
                    <param name="fileType" type="AudioFileFormat.Type"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="118">
                    $$fb the following check must come first ! Otherwise                    
                </comment>
                <comment line="119">
                    the next frame length check may throw an IOException and                    
                </comment>
                <comment line="120">
                    interrupt iterating File Writers. (see bug 4351296)                    
                </comment>
                <comment line="122">
                    throws IllegalArgumentException if not supported                    
                </comment>
                <comment line="125">
                    $$fb when we got this far, we are committed to write this file                    
                </comment>
                <comment line="127">
                    we must know the total data length to calculate the file length                    
                </comment>
                <declaration name="waveFileFormat" type="WaveFileFormat" line="123"/>
                <scope line="128"/>
                <declaration name="bytesWritten" type="int" line="132"/>
            </method>
            <method name="write" type="int" line="137">
                <params>
                    <param name="stream" type="AudioInputStream"/>
                    <param name="fileType" type="AudioFileFormat.Type"/>
                    <param name="out" type="File"/>
                </params>
                <comment line="139">
                    throws IllegalArgumentException if not supported                    
                </comment>
                <comment line="142">
                    first write the file without worrying about length fields                    
                </comment>
                <comment line="143">
                    throws IOException                    
                </comment>
                <comment line="148">
                    now, if length fields were not specified, calculate them,                    
                </comment>
                <comment line="149">
                    open as a random access file, write the appropriate fields,                    
                </comment>
                <comment line="150">
                    close again....                    
                </comment>
                <comment line="157">
                    skip RIFF magic                    
                </comment>
                <comment line="160">
                    skip WAVE magic, fmt_ magic, fmt_ length, fmt_ chunk, data magic                    
                </comment>
                <comment line="163">
                    that&apos;s all                    
                </comment>
                <declaration name="waveFileFormat" type="WaveFileFormat" line="140"/>
                <declaration name="fos" type="FileOutputStream" line="143"/>
                <declaration name="bos" type="BufferedOutputStream" line="144"/>
                <declaration name="bytesWritten" type="int" line="145"/>
                <scope line="151">
                    <declaration name="dataLength" type="int" line="153"/>
                    <declaration name="riffLength" type="int" line="154"/>
                    <declaration name="raf" type="RandomAccessFile" line="156"/>
                </scope>
            </method>
            <javadoc line="172">
                Returns the AudioFileFormat describing the file that will be written from this AudioInputStream.
                  Throws IllegalArgumentException if not supported.                
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="176">
                <params>
                    <param name="type" type="AudioFileFormat.Type"/>
                    <param name="stream" type="AudioInputStream"/>
                </params>
                <comment line="221">
                    WAVE is little endian                    
                </comment>
                <declaration name="format" type="AudioFormat" line="177"/>
                <declaration name="fileFormat" type="WaveFileFormat" line="178"/>
                <declaration name="encoding" type="AudioFormat.Encoding" line="179"/>
                <declaration name="streamFormat" type="AudioFormat" line="181"/>
                <declaration name="streamEncoding" type="AudioFormat.Encoding" line="182"/>
                <declaration name="sampleRate" type="float" line="184"/>
                <declaration name="sampleSizeInBits" type="int" line="185"/>
                <declaration name="channels" type="int" line="186"/>
                <declaration name="frameSize" type="int" line="187"/>
                <declaration name="frameRate" type="float" line="188"/>
                <declaration name="fileSize" type="int" line="189"/>
                <scope line="191"/>
                <declaration name="waveType" type="int" line="194"/>
                <scope line="197">
                    <scope line="201"/>
                    <scope line="203"/>
                </scope>
                <scope line="206"/>
                <scope line="209"/>
                <scope line="223"/>
                <scope line="226"/>
            </method>
            <method name="writeWaveFile" type="int" line="239">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="waveFileFormat" type="WaveFileFormat"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="bytesRead" type="int" line="241"/>
                <declaration name="bytesWritten" type="int" line="242"/>
                <declaration name="fileStream" type="InputStream" line="243"/>
                <declaration name="buffer" type="byte" line="244"/>
                <declaration name="maxLength" type="int" line="245"/>
                <scope line="247">
                    <scope line="249">
                        <scope line="250"/>
                        <scope line="254"/>
                    </scope>
                    <scope line="260"/>
                </scope>
            </method>
            <method name="getFileStream" type="InputStream" line="269">
                <params>
                    <param name="waveFileFormat" type="WaveFileFormat"/>
                    <param name="audioStream" type="InputStream"/>
                </params>
                <comment line="270">
                    private method ... assumes audioFileFormat is a supported file type                    
                </comment>
                <comment line="272">
                    WAVE header fields                    
                </comment>
                <comment line="302">
                    if audioStream is an AudioInputStream and we need to convert, do it here...                    
                </comment>
                <comment line="311">
                    plug in the transcoder to convert from PCM_SIGNED to PCM_UNSIGNED                    
                </comment>
                <comment line="328">
                    plug in the transcoder to convert to PCM_SIGNED_LITTLE_ENDIAN                    
                </comment>
                <comment line="343">
                    Now push the header into a stream, concat, and return the new SequenceInputStream                    
                </comment>
                <comment line="348">
                    we write in littleendian...                    
                </comment>
                <comment line="360">
                    $$fb 2002-04-16: Fix for 4636355: RIFF audio headers could be _more_ spec compliant                    
                </comment>
                <comment line="362">
                    add length 0 for &quot;codec specific data length&quot;                    
                </comment>
                <declaration name="audioFormat" type="AudioFormat" line="273"/>
                <declaration name="headerLength" type="int" line="274"/>
                <declaration name="riffMagic" type="int" line="275"/>
                <declaration name="waveMagic" type="int" line="276"/>
                <declaration name="fmtMagic" type="int" line="277"/>
                <declaration name="fmtLength" type="int" line="278"/>
                <declaration name="wav_type" type="short" line="279"/>
                <declaration name="channels" type="short" line="280"/>
                <declaration name="sampleSizeInBits" type="short" line="281"/>
                <declaration name="sampleRate" type="int" line="282"/>
                <declaration name="frameSizeInBytes" type="int" line="283"/>
                <declaration name="frameRate" type="int" line="284"/>
                <declaration name="avgBytesPerSec" type="int" line="285"/>
                <declaration name="blockAlign" type="short" line="286"/>
                <declaration name="dataMagic" type="int" line="287"/>
                <declaration name="dataLength" type="int" line="288"/>
                <declaration name="length" type="int" line="289"/>
                <declaration name="riffLength" type="int" line="290"/>
                <declaration name="header" type="byte" line="292"/>
                <declaration name="headerStream" type="ByteArrayInputStream" line="293"/>
                <declaration name="baos" type="ByteArrayOutputStream" line="294"/>
                <declaration name="dos" type="DataOutputStream" line="295"/>
                <declaration name="waveStream" type="SequenceInputStream" line="296"/>
                <declaration name="audioStreamFormat" type="AudioFormat" line="298"/>
                <declaration name="encoding" type="AudioFormat.Encoding" line="299"/>
                <declaration name="codedAudioStream" type="InputStream" line="300"/>
                <scope line="303">
                    <scope line="308">
                        <scope line="309"/>
                    </scope>
                    <scope line="325">
                        <scope line="326"/>
                    </scope>
                </scope>
                <scope line="361"/>
            </method>
        </class>
    </source>