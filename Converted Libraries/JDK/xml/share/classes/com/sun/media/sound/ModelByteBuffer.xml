<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.RandomAccessFile"/>
        <import package="java.util.Collection"/>
        <class name="ModelByteBuffer" line="36">
            <javadoc line="36">
                This class is a pointer to a binary array either in memory or on disk.                
                <author>
                    Karl Helgason                    
                </author>
            </javadoc>
            <declaration name="root" type="ModelByteBuffer" line="43"/>
            <declaration name="file" type="File" line="44"/>
            <declaration name="fileoffset" type="long" line="45"/>
            <declaration name="buffer" type="byte[]" line="46"/>
            <declaration name="offset" type="long" line="47"/>
            <declaration name="len" type="long" line="48"/>
            <class name="RandomFileInputStream" line="50">
                <extends class="InputStream"/>
                <declaration name="raf" type="RandomAccessFile" line="52"/>
                <declaration name="left" type="long" line="53"/>
                <declaration name="mark" type="long" line="54"/>
                <declaration name="markleft" type="long" line="55"/>
                <method name="RandomFileInputStream" type="constructor" line="57"/>
                <method name="available" type="int" line="63"/>
                <method name="mark" type="void" line="69">
                    <params>
                        <param name="readlimit" type="int"/>
                    </params>
                    <comment line="74">
                        e.printStackTrace();                        
                    </comment>
                    <scope line="70"/>
                    <scope line="73"/>
                </method>
                <method name="markSupported" type="boolean" line="78"/>
                <method name="reset" type="void" line="82"/>
                <method name="skip" type="long" line="87">
                    <params>
                        <param name="n" type="long"/>
                    </params>
                    <declaration name="p" type="long" line="92"/>
                </method>
                <method name="read" type="int" line="98">
                    <params>
                        <param name="b" type="byte"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="read" type="int" line="110">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                    <declaration name="len" type="int" line="111"/>
                </method>
                <method name="read" type="int" line="123">
                    <declaration name="b" type="int" line="126"/>
                </method>
                <method name="close" type="void" line="133"/>
            </class>
            <method name="ModelByteBuffer" type="constructor" line="139">
                <params>
                    <param name="parent" type="ModelByteBuffer"/>
                    <param name="beginIndex" type="long"/>
                    <param name="endIndex" type="long"/>
                    <param name="independent" type="boolean"/>
                </params>
                <declaration name="parent_len" type="long" line="142"/>
                <scope line="155">
                    <scope line="157"/>
                </scope>
            </method>
            <method name="ModelByteBuffer" type="constructor" line="167">
                <params>
                    <param name="buffer" type="byte[]"/>
                </params>
            </method>
            <method name="ModelByteBuffer" type="constructor" line="173">
                <params>
                    <param name="buffer" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="ModelByteBuffer" type="constructor" line="179">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <method name="ModelByteBuffer" type="constructor" line="185">
                <params>
                    <param name="file" type="File"/>
                    <param name="offset" type="long"/>
                    <param name="len" type="long"/>
                </params>
            </method>
            <method name="writeTo" type="void" line="191">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <scope line="192">
                    <declaration name="is" type="InputStream" line="193"/>
                    <declaration name="buff" type="byte[]" line="194"/>
                    <declaration name="ret" type="int" line="195"/>
                </scope>
            </method>
            <method name="getInputStream" type="InputStream" line="202">
                <comment line="207">
                    e.printStackTrace();                    
                </comment>
                <scope line="203">
                    <scope line="204"/>
                    <scope line="206"/>
                </scope>
            </method>
            <method name="subbuffer" type="ModelByteBuffer" line="215">
                <params>
                    <param name="beginIndex" type="long"/>
                </params>
            </method>
            <method name="subbuffer" type="ModelByteBuffer" line="219">
                <params>
                    <param name="beginIndex" type="long"/>
                    <param name="endIndex" type="long"/>
                </params>
            </method>
            <method name="subbuffer" type="ModelByteBuffer" line="224">
                <params>
                    <param name="beginIndex" type="long"/>
                    <param name="endIndex" type="long"/>
                    <param name="independent" type="boolean"/>
                </params>
            </method>
            <method name="array" type="byte[]" line="228"/>
            <method name="arrayOffset" type="long" line="232"/>
            <method name="capacity" type="long" line="238"/>
            <method name="getRoot" type="ModelByteBuffer" line="242"/>
            <method name="getFile" type="File" line="246"/>
            <method name="getFilePointer" type="long" line="250"/>
            <method name="loadAll" type="void" line="255">
                <params>
                    <param name="col" type="Collection<ModelByteBuffer>"/>
                </params>
                <declaration name="selfile" type="File" line="256"/>
                <declaration name="raf" type="RandomAccessFile" line="257"/>
                <scope line="258">
                    <scope line="259">
                        <scope line="265">
                            <scope line="266"/>
                        </scope>
                        <declaration name="buffer" type="byte[]" line="274"/>
                        <declaration name="read" type="int" line="276"/>
                        <declaration name="avail" type="int" line="277"/>
                        <scope line="278">
                            <scope line="279"/>
                            <scope line="282"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="292"/>
            </method>
            <method name="load" type="void" line="298">
                <scope line="299"/>
                <scope line="305"/>
                <declaration name="is" type="DataInputStream" line="310"/>
            </method>
            <method name="unload" type="void" line="318">
                <scope line="319"/>
                <scope line="323"/>
            </method>
        </class>
    </source>