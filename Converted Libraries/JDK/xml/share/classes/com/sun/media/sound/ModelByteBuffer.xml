<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.RandomAccessFile"/>
        <import package="java.util.Collection"/>
        <class name="ModelByteBuffer" line="10">
            <javadoc line="10">
                This class is a pointer to a binary array either in memory or on disk.                
                <author>
                    Karl Helgason                    
                </author>
            </javadoc>
            <declaration name="root" type="ModelByteBuffer" line="15"/>
            <declaration name="file" type="File" line="16"/>
            <declaration name="fileoffset" type="long" line="17"/>
            <declaration name="buffer" type="byte[]" line="18"/>
            <declaration name="offset" type="long" line="19"/>
            <declaration name="len" type="long" line="20"/>
            <class name="RandomFileInputStream" line="21">
                <extends class="InputStream"/>
                <declaration name="raf" type="RandomAccessFile" line="22"/>
                <declaration name="left" type="long" line="23"/>
                <declaration name="mark" type="long" line="24"/>
                <declaration name="markleft" type="long" line="25"/>
                <method name="RandomFileInputStream" type="constructor" line="26"/>
                <method name="available" type="int" line="31"/>
                <method name="mark" type="void" line="35">
                    <params>
                        <param name="readlimit" type="int"/>
                    </params>
                    <scope line="36"/>
                    <scope line="40"/>
                </method>
                <method name="markSupported" type="boolean" line="43"/>
                <method name="reset" type="void" line="46"/>
                <method name="skip" type="long" line="50">
                    <params>
                        <param name="n" type="long"/>
                    </params>
                    <declaration name="p" type="long" line="53"/>
                </method>
                <method name="read" type="int" line="58">
                    <params>
                        <param name="b" type="byte"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="read" type="int" line="66">
                    <params>
                        <param name="b" type="byte[]"/>
                    </params>
                    <declaration name="len" type="int" line="67"/>
                </method>
                <method name="read" type="int" line="75">
                    <declaration name="b" type="int" line="77"/>
                </method>
                <method name="close" type="void" line="82"/>
            </class>
            <method name="ModelByteBuffer" type="constructor" line="86">
                <params>
                    <param name="parent" type="ModelByteBuffer"/>
                    <param name="beginIndex" type="long"/>
                    <param name="endIndex" type="long"/>
                    <param name="independent" type="boolean"/>
                </params>
                <declaration name="parent_len" type="long" line="89"/>
                <scope line="97">
                    <scope line="99"/>
                </scope>
            </method>
            <method name="ModelByteBuffer" type="constructor" line="108">
                <params>
                    <param name="buffer" type="byte[]"/>
                </params>
            </method>
            <method name="ModelByteBuffer" type="constructor" line="113">
                <params>
                    <param name="buffer" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="ModelByteBuffer" type="constructor" line="118">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <method name="ModelByteBuffer" type="constructor" line="123">
                <params>
                    <param name="file" type="File"/>
                    <param name="offset" type="long"/>
                    <param name="len" type="long"/>
                </params>
            </method>
            <method name="writeTo" type="void" line="128">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <scope line="129">
                    <declaration name="is" type="InputStream" line="130"/>
                    <declaration name="buff" type="byte[]" line="131"/>
                    <declaration name="ret" type="int" line="132"/>
                </scope>
            </method>
            <method name="getInputStream" type="InputStream" line="137">
                <scope line="138">
                    <scope line="139"/>
                    <scope line="142"/>
                </scope>
            </method>
            <method name="subbuffer" type="ModelByteBuffer" line="148">
                <params>
                    <param name="beginIndex" type="long"/>
                </params>
            </method>
            <method name="subbuffer" type="ModelByteBuffer" line="151">
                <params>
                    <param name="beginIndex" type="long"/>
                    <param name="endIndex" type="long"/>
                </params>
            </method>
            <method name="subbuffer" type="ModelByteBuffer" line="154">
                <params>
                    <param name="beginIndex" type="long"/>
                    <param name="endIndex" type="long"/>
                    <param name="independent" type="boolean"/>
                </params>
            </method>
            <method name="array" type="byte[]" line="157"/>
            <method name="arrayOffset" type="long" line="160"/>
            <method name="capacity" type="long" line="164"/>
            <method name="getRoot" type="ModelByteBuffer" line="167"/>
            <method name="getFile" type="File" line="170"/>
            <method name="getFilePointer" type="long" line="173"/>
            <method name="loadAll" type="void" line="176">
                <params>
                    <param name="col" type="Collection&lt;ModelByteBuffer&gt;"/>
                </params>
                <declaration name="selfile" type="File" line="177"/>
                <declaration name="raf" type="RandomAccessFile" line="178"/>
                <scope line="179">
                    <scope line="180">
                        <scope line="184">
                            <scope line="185"/>
                        </scope>
                        <declaration name="buffer" type="byte[]" line="193"/>
                        <declaration name="read" type="int" line="194"/>
                        <declaration name="avail" type="int" line="195"/>
                        <scope line="196">
                            <scope line="197"/>
                            <scope line="201"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="210"/>
            </method>
            <method name="load" type="void" line="214">
                <scope line="215"/>
                <scope line="220"/>
                <declaration name="is" type="DataInputStream" line="223"/>
            </method>
            <method name="unload" type="void" line="229">
                <scope line="230"/>
                <scope line="234"/>
            </method>
        </class>
    </source>