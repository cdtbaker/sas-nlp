<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.util.Vector"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <import package="javax.sound.sampled.Control"/>
        <import package="javax.sound.sampled.DataLine"/>
        <import package="javax.sound.sampled.Mixer"/>
        <import package="javax.sound.sampled.Line"/>
        <import package="javax.sound.sampled.LineEvent"/>
        <import package="javax.sound.sampled.LineListener"/>
        <import package="javax.sound.sampled.LineUnavailableException"/>
        <class name="AbstractMixer" line="40">
            <extends class="AbstractLine"/>
            <comment line="47">
                $$fb 2002-07-26: let AbstractMixer be an AbstractLine and NOT an AbstractDataLine!                
            </comment>
            <comment line="50">
                STATIC VARIABLES                
            </comment>
            <comment line="56">
                IMMUTABLE PROPERTIES                
            </comment>
            <comment line="86">
                Supported formats for the mixer.                
            </comment>
            <comment line="89">
                $$fb DELETE                
            </comment>
            <comment line="90">
                protected Vector formats = new Vector();                
            </comment>
            <comment line="93">
                STATE VARIABLES                
            </comment>
            <comment line="134">
                MIXER METHODS                
            </comment>
            <comment line="289">
                OVERRIDES OF ABSTRACT DATA LINE METHODS                
            </comment>
            <comment line="316">
                METHOD FOR INTERNAL IMPLEMENTATION USE                
            </comment>
            <implements interface="Mixer"/>
            <javadoc line="40">
                Abstract Mixer.  Implements Mixer (with abstract methods) and specifies
                  some other common methods for use by our implementation.                
                <author>
                    Kara Kytle                    
                </author>
            </javadoc>
            <declaration name="PCM" type="int" line="50"/>
            <declaration name="ULAW" type="int" line="51"/>
            <declaration name="ALAW" type="int" line="52"/>
            <declaration name="mixerInfo" type="Mixer.Info" line="57"/>
            <javadoc line="57">
                Info object describing this mixer.                
            </javadoc>
            <declaration name="sourceLineInfo" type="Line.Info[]" line="62"/>
            <javadoc line="62">
                source lines provided by this mixer                
            </javadoc>
            <declaration name="targetLineInfo" type="Line.Info[]" line="67"/>
            <javadoc line="67">
                target lines provided by this mixer                
            </javadoc>
            <declaration name="started" type="boolean" line="72"/>
            <javadoc line="72">
                if any line of this mixer is started                
            </javadoc>
            <declaration name="manuallyOpened" type="boolean" line="77"/>
            <javadoc line="77">
                if this mixer had been opened manually with open()
                  If it was, then it won&apos;t be closed automatically,
                  only when close() is called manually.                
            </javadoc>
            <declaration name="sourceLines" type="Vector" line="95"/>
            <javadoc line="95">
                Source lines (ports) currently open                
            </javadoc>
            <declaration name="targetLines" type="Vector" line="101"/>
            <javadoc line="101">
                Target lines currently open.                
            </javadoc>
            <javadoc line="107">
                Constructs a new AbstractMixer.                
                <param>
                    mixer the mixer with which this line is associated                    
                </param>
                <param>
                    controls set of supported controls                    
                </param>
            </javadoc>
            <method name="AbstractMixer" type="constructor" line="115">
                <params>
                    <param name="mixerInfo" type="Mixer.Info"/>
                    <param name="controls" type="Control[]"/>
                    <param name="sourceLineInfo" type="Line.Info[]"/>
                    <param name="targetLineInfo" type="Line.Info[]"/>
                </params>
                <comment line="117">
                    Line.Info, AbstractMixer, Control[]                    
                </comment>
                <comment line="120">
                    setup the line part                    
                </comment>
                <comment line="126">
                    setup the mixer part                    
                </comment>
                <scope line="122"/>
            </method>
            <method name="getMixerInfo" type="Mixer.Info" line="136"/>
            <method name="getSourceLineInfo" type="Line.Info[]" line="141">
                <declaration name="localArray" type="Line.Info[]" line="142"/>
            </method>
            <method name="getTargetLineInfo" type="Line.Info[]" line="148">
                <declaration name="localArray" type="Line.Info[]" line="150"/>
            </method>
            <method name="getSourceLineInfo" type="Line.Info[]" line="156">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <declaration name="i" type="int" line="158"/>
                <declaration name="vec" type="Vector" line="159"/>
                <scope line="161">
                    <scope line="163"/>
                </scope>
                <declaration name="returnedArray" type="Line.Info[]" line="168"/>
                <scope line="169"/>
            </method>
            <method name="getTargetLineInfo" type="Line.Info[]" line="177">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <declaration name="i" type="int" line="179"/>
                <declaration name="vec" type="Vector" line="180"/>
                <scope line="182">
                    <scope line="184"/>
                </scope>
                <declaration name="returnedArray" type="Line.Info[]" line="189"/>
                <scope line="190"/>
            </method>
            <method name="isLineSupported" type="boolean" line="198">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <declaration name="i" type="int" line="200"/>
                <scope line="202">
                    <scope line="204"/>
                </scope>
                <scope line="209">
                    <scope line="211"/>
                </scope>
            </method>
            <method name="getLine" type="Line" line="220"/>
            <method name="getMaxLines" type="int" line="222"/>
            <method name="implOpen" type="void" line="224"/>
            <method name="implStart" type="void" line="225"/>
            <method name="implStop" type="void" line="226"/>
            <method name="implClose" type="void" line="227"/>
            <method name="getSourceLines" type="Line[]" line="230">
                <declaration name="localLines" type="Line[]" line="232"/>
                <scope line="234">
                    <scope line="238"/>
                </scope>
            </method>
            <method name="getTargetLines" type="Line[]" line="247">
                <declaration name="localLines" type="Line[]" line="249"/>
                <scope line="251">
                    <scope line="255"/>
                </scope>
            </method>
            <javadoc line="264">
                Default implementation always throws an exception.                
            </javadoc>
            <method name="synchronize" type="void" line="267">
                <params>
                    <param name="lines" type="Line[]"/>
                    <param name="maintainSync" type="boolean"/>
                </params>
            </method>
            <javadoc line="272">
                Default implementation always throws an exception.                
            </javadoc>
            <method name="unsynchronize" type="void" line="275">
                <params>
                    <param name="lines" type="Line[]"/>
                </params>
            </method>
            <javadoc line="280">
                Default implementation always returns false.                
            </javadoc>
            <method name="isSynchronizationSupported" type="boolean" line="283">
                <params>
                    <param name="lines" type="Line[]"/>
                    <param name="maintainSync" type="boolean"/>
                </params>
            </method>
            <javadoc line="290">
                This implementation tries to open the mixer with its current format and buffer size settings.                
            </javadoc>
            <method name="open" type="void" line="293"/>
            <javadoc line="297">
                This implementation tries to open the mixer with its current format and buffer size settings.                
            </javadoc>
            <method name="open" type="void" line="300">
                <params>
                    <param name="manual" type="boolean"/>
                </params>
                <comment line="304">
                    if the mixer is not currently open, set open to true and send event                    
                </comment>
                <scope line="302">
                    <scope line="306"/>
                </scope>
            </method>
            <javadoc line="318">
                The default implementation of this method just determines whether
                  this line is a source or target line, calls open(no-arg) on the
                  mixer, and adds the line to the appropriate vector.
                  The mixer may be opened at a format different than the line&apos;s
                  format if it is a DataLine.                
            </javadoc>
            <method name="open" type="void" line="325">
                <params>
                    <param name="line" type="Line"/>
                </params>
                <comment line="329">
                    $$kk: 06.11.99: ignore ourselves for now                    
                </comment>
                <comment line="335">
                    source line?                    
                </comment>
                <comment line="338">
                    call the no-arg open method for the mixer; it should open at its                    
                </comment>
                <comment line="339">
                    default format if it is not open yet                    
                </comment>
                <comment line="342">
                    we opened successfully! add the line to the list                    
                </comment>
                <comment line="346">
                    target line?                    
                </comment>
                <comment line="349">
                    call the no-arg open method for the mixer; it should open at its                    
                </comment>
                <comment line="350">
                    default format if it is not open yet                    
                </comment>
                <comment line="353">
                    we opened successfully!  add the line to the list                    
                </comment>
                <scope line="330"/>
                <scope line="336">
                    <scope line="337"/>
                </scope>
                <scope line="345">
                    <scope line="347">
                        <scope line="348"/>
                    </scope>
                    <scope line="356"/>
                </scope>
            </method>
            <javadoc line="365">
                Removes this line from the list of open source lines and
                  open target lines, if it exists in either.
                  If the list is now empty, closes the mixer.                
            </javadoc>
            <method name="close" type="void" line="370">
                <params>
                    <param name="line" type="Line"/>
                </params>
                <comment line="374">
                    $$kk: 06.11.99: ignore ourselves for now                    
                </comment>
                <scope line="375"/>
                <scope line="387"/>
            </method>
            <javadoc line="396">
                Close all lines and then close this mixer.                
            </javadoc>
            <method name="close" type="void" line="399">
                <comment line="402">
                    close all source lines                    
                </comment>
                <comment line="408">
                    close all target lines                    
                </comment>
                <comment line="416">
                    set the open state to false and send events                    
                </comment>
                <scope line="401">
                    <declaration name="localLines" type="Line[]" line="403"/>
                    <scope line="404"/>
                    <scope line="410"/>
                </scope>
            </method>
            <javadoc line="423">
                Starts the mixer.                
            </javadoc>
            <method name="start" type="void" line="426">
                <params>
                    <param name="line" type="Line"/>
                </params>
                <comment line="430">
                    $$kk: 06.11.99: ignore ourselves for now                    
                </comment>
                <comment line="436">
                    we just start the mixer regardless of anything else here.                    
                </comment>
                <scope line="431"/>
                <scope line="437"/>
            </method>
            <javadoc line="447">
                Stops the mixer if this was the last running line.                
            </javadoc>
            <method name="stop" type="void" line="450">
                <params>
                    <param name="line" type="Line"/>
                </params>
                <comment line="454">
                    $$kk: 06.11.99: ignore ourselves for now                    
                </comment>
                <comment line="463">
                    if any other open line is running, return                    
                </comment>
                <comment line="465">
                    this covers clips and source data lines                    
                </comment>
                <comment line="478">
                    if any other open line is running, return                    
                </comment>
                <comment line="479">
                    this covers target data lines                    
                </comment>
                <comment line="489">
                    otherwise, stop                    
                </comment>
                <scope line="455"/>
                <declaration name="localSourceLines" type="Vector" line="460"/>
                <scope line="461">
                    <scope line="466">
                        <declaration name="sourceLine" type="AbstractDataLine" line="467"/>
                        <scope line="468"/>
                    </scope>
                </scope>
                <declaration name="localTargetLines" type="Vector" line="475"/>
                <scope line="476">
                    <scope line="480">
                        <declaration name="targetLine" type="AbstractDataLine" line="481"/>
                        <scope line="482"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="499">
                Determines whether this is a source line for this mixer.
                  Right now this just checks whether it&apos;s supported, but should
                  check whether it actually belongs to this mixer....                
            </javadoc>
            <method name="isSourceLine" type="boolean" line="504">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <scope line="506">
                    <scope line="507"/>
                </scope>
            </method>
            <javadoc line="516">
                Determines whether this is a target line for this mixer.
                  Right now this just checks whether it&apos;s supported, but should
                  check whether it actually belongs to this mixer....                
            </javadoc>
            <method name="isTargetLine" type="boolean" line="521">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <scope line="523">
                    <scope line="524"/>
                </scope>
            </method>
            <javadoc line="533">
                Returns the first complete Line.Info object it finds that
                  matches the one specified, or null if no matching Line.Info
                  object is found.                
            </javadoc>
            <method name="getLineInfo" type="Line.Info" line="538">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <comment line="542">
                    $$kk: 05.31.99: need to change this so that                    
                </comment>
                <comment line="543">
                    the format and buffer size get set in the                    
                </comment>
                <comment line="544">
                    returned info object for data lines??                    
                </comment>
                <scope line="539"/>
                <scope line="545">
                    <scope line="546"/>
                </scope>
                <scope line="551">
                    <scope line="552"/>
                </scope>
            </method>
        </class>
    </source>