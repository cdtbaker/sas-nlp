<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.util.Vector"/>
        <import package="javax.sound.sampled.AudioFormat"/>
        <import package="javax.sound.sampled.AudioSystem"/>
        <import package="javax.sound.sampled.Control"/>
        <import package="javax.sound.sampled.DataLine"/>
        <import package="javax.sound.sampled.Mixer"/>
        <import package="javax.sound.sampled.Line"/>
        <import package="javax.sound.sampled.LineEvent"/>
        <import package="javax.sound.sampled.LineListener"/>
        <import package="javax.sound.sampled.LineUnavailableException"/>
        <class name="AbstractMixer" line="12">
            <extends class="AbstractLine"/>
            <implements interface="Mixer"/>
            <javadoc line="12">
                Abstract Mixer.  Implements Mixer (with abstract methods) and specifies
                  some other common methods for use by our implementation.                
                <author>
                    Kara Kytle                    
                </author>
            </javadoc>
            <declaration name="PCM" type="int" line="18"/>
            <declaration name="ULAW" type="int" line="19"/>
            <declaration name="ALAW" type="int" line="20"/>
            <declaration name="mixerInfo" type="Mixer.Info" line="21"/>
            <javadoc line="21">
                Info object describing this mixer.                
            </javadoc>
            <declaration name="sourceLineInfo" type="Line.Info[]" line="25"/>
            <javadoc line="25">
                source lines provided by this mixer                
            </javadoc>
            <declaration name="targetLineInfo" type="Line.Info[]" line="29"/>
            <javadoc line="29">
                target lines provided by this mixer                
            </javadoc>
            <declaration name="started" type="boolean" line="33"/>
            <javadoc line="33">
                if any line of this mixer is started                
            </javadoc>
            <declaration name="manuallyOpened" type="boolean" line="37"/>
            <javadoc line="37">
                if this mixer had been opened manually with open()
                  If it was, then it won&apos;t be closed automatically,
                  only when close() is called manually.                
            </javadoc>
            <declaration name="sourceLines" type="Vector" line="43"/>
            <javadoc line="43">
                Source lines (ports) currently open                
            </javadoc>
            <declaration name="targetLines" type="Vector" line="47"/>
            <javadoc line="47">
                Target lines currently open.                
            </javadoc>
            <javadoc line="51">
                Constructs a new AbstractMixer.                
                <param>
                    mixer the mixer with which this line is associated                    
                </param>
                <param>
                    controls set of supported controls                    
                </param>
            </javadoc>
            <method name="AbstractMixer" type="constructor" line="56">
                <params>
                    <param name="mixerInfo" type="Mixer.Info"/>
                    <param name="controls" type="Control[]"/>
                    <param name="sourceLineInfo" type="Line.Info[]"/>
                    <param name="targetLineInfo" type="Line.Info[]"/>
                </params>
                <scope line="59"/>
            </method>
            <method name="getMixerInfo" type="Mixer.Info" line="66"/>
            <method name="getSourceLineInfo" type="Line.Info[]" line="69">
                <declaration name="localArray" type="Line.Info[]" line="70"/>
            </method>
            <method name="getTargetLineInfo" type="Line.Info[]" line="74">
                <declaration name="localArray" type="Line.Info[]" line="75"/>
            </method>
            <method name="getSourceLineInfo" type="Line.Info[]" line="79">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <declaration name="i" type="int" line="80"/>
                <declaration name="vec" type="Vector" line="81"/>
                <scope line="82">
                    <scope line="83"/>
                </scope>
                <declaration name="returnedArray" type="Line.Info[]" line="87"/>
                <scope line="88"/>
            </method>
            <method name="getTargetLineInfo" type="Line.Info[]" line="93">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <declaration name="i" type="int" line="94"/>
                <declaration name="vec" type="Vector" line="95"/>
                <scope line="96">
                    <scope line="97"/>
                </scope>
                <declaration name="returnedArray" type="Line.Info[]" line="101"/>
                <scope line="102"/>
            </method>
            <method name="isLineSupported" type="boolean" line="107">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <declaration name="i" type="int" line="108"/>
                <scope line="109">
                    <scope line="110"/>
                </scope>
                <scope line="114">
                    <scope line="115"/>
                </scope>
            </method>
            <method name="getLine" type="Line" line="121"/>
            <method name="getMaxLines" type="int" line="122"/>
            <method name="implOpen" type="void" line="123"/>
            <method name="implStart" type="void" line="124"/>
            <method name="implStop" type="void" line="125"/>
            <method name="implClose" type="void" line="126"/>
            <method name="getSourceLines" type="Line[]" line="127">
                <declaration name="localLines" type="Line[]" line="128"/>
                <scope line="129">
                    <scope line="131"/>
                </scope>
            </method>
            <method name="getTargetLines" type="Line[]" line="137">
                <declaration name="localLines" type="Line[]" line="138"/>
                <scope line="139">
                    <scope line="141"/>
                </scope>
            </method>
            <javadoc line="147">
                Default implementation always throws an exception.                
            </javadoc>
            <method name="synchronize" type="void" line="150">
                <params>
                    <param name="lines" type="Line[]"/>
                    <param name="maintainSync" type="boolean"/>
                </params>
            </method>
            <javadoc line="153">
                Default implementation always throws an exception.                
            </javadoc>
            <method name="unsynchronize" type="void" line="156">
                <params>
                    <param name="lines" type="Line[]"/>
                </params>
            </method>
            <javadoc line="159">
                Default implementation always returns false.                
            </javadoc>
            <method name="isSynchronizationSupported" type="boolean" line="162">
                <params>
                    <param name="lines" type="Line[]"/>
                    <param name="maintainSync" type="boolean"/>
                </params>
            </method>
            <javadoc line="165">
                This implementation tries to open the mixer with its current format and buffer size settings.                
            </javadoc>
            <method name="open" type="void" line="168"/>
            <javadoc line="171">
                This implementation tries to open the mixer with its current format and buffer size settings.                
            </javadoc>
            <method name="open" type="void" line="174">
                <params>
                    <param name="manual" type="boolean"/>
                </params>
                <scope line="176">
                    <scope line="179"/>
                </scope>
            </method>
            <javadoc line="185">
                The default implementation of this method just determines whether
                  this line is a source or target line, calls open(no-arg) on the
                  mixer, and adds the line to the appropriate vector.
                  The mixer may be opened at a format different than the line&apos;s
                  format if it is a DataLine.                
            </javadoc>
            <method name="open" type="void" line="192">
                <params>
                    <param name="line" type="Line"/>
                </params>
                <scope line="194"/>
                <scope line="198">
                    <scope line="199"/>
                </scope>
                <scope line="204">
                    <scope line="205">
                        <scope line="206"/>
                    </scope>
                    <scope line="211"/>
                </scope>
            </method>
            <javadoc line="217">
                Removes this line from the list of open source lines and
                  open target lines, if it exists in either.
                  If the list is now empty, closes the mixer.                
            </javadoc>
            <method name="close" type="void" line="222">
                <params>
                    <param name="line" type="Line"/>
                </params>
                <scope line="224"/>
                <scope line="232"/>
            </method>
            <javadoc line="238">
                Close all lines and then close this mixer.                
            </javadoc>
            <method name="close" type="void" line="241">
                <scope line="243">
                    <declaration name="localLines" type="Line[]" line="244"/>
                    <scope line="245"/>
                    <scope line="249"/>
                </scope>
            </method>
            <javadoc line="258">
                Starts the mixer.                
            </javadoc>
            <method name="start" type="void" line="261">
                <params>
                    <param name="line" type="Line"/>
                </params>
                <scope line="263"/>
                <scope line="267"/>
            </method>
            <javadoc line="274">
                Stops the mixer if this was the last running line.                
            </javadoc>
            <method name="stop" type="void" line="277">
                <params>
                    <param name="line" type="Line"/>
                </params>
                <scope line="279"/>
                <declaration name="localSourceLines" type="Vector" line="283"/>
                <scope line="284">
                    <scope line="285">
                        <declaration name="sourceLine" type="AbstractDataLine" line="286"/>
                        <scope line="287"/>
                    </scope>
                </scope>
                <declaration name="localTargetLines" type="Vector" line="293"/>
                <scope line="294">
                    <scope line="295">
                        <declaration name="targetLine" type="AbstractDataLine" line="296"/>
                        <scope line="297"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="308">
                Determines whether this is a source line for this mixer.
                  Right now this just checks whether it&apos;s supported, but should
                  check whether it actually belongs to this mixer....                
            </javadoc>
            <method name="isSourceLine" type="boolean" line="313">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <scope line="314">
                    <scope line="315"/>
                </scope>
            </method>
            <javadoc line="321">
                Determines whether this is a target line for this mixer.
                  Right now this just checks whether it&apos;s supported, but should
                  check whether it actually belongs to this mixer....                
            </javadoc>
            <method name="isTargetLine" type="boolean" line="326">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <scope line="327">
                    <scope line="328"/>
                </scope>
            </method>
            <javadoc line="334">
                Returns the first complete Line.Info object it finds that
                  matches the one specified, or null if no matching Line.Info
                  object is found.                
            </javadoc>
            <method name="getLineInfo" type="Line.Info" line="339">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <scope line="340"/>
                <scope line="343">
                    <scope line="344"/>
                </scope>
                <scope line="348">
                    <scope line="349"/>
                </scope>
            </method>
        </class>
    </source>