<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.util.EventObject"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="javax.sound.sampled.Clip"/>
        <import package="javax.sound.sampled.Line"/>
        <import package="javax.sound.sampled.LineEvent"/>
        <import package="javax.sound.sampled.LineListener"/>
        <import package="javax.sound.midi.MetaMessage"/>
        <import package="javax.sound.midi.ShortMessage"/>
        <import package="javax.sound.midi.MetaEventListener"/>
        <import package="javax.sound.midi.ControllerEventListener"/>
        <class name="EventDispatcher" line="44">
            <comment line="74">
                support for auto-closing Clips                
            </comment>
            <comment line="79">
                support for monitoring data lines                
            </comment>
            <comment line="252">
                go through the list of registered auto-closing
                 Clip instances and close them, if appropriate
                
                 This method is called in regular intervals                
            </comment>
            <comment line="331">
                ////////////////////////// Line Monitoring Support /////////////////// //                
            </comment>
            <comment line="332">
                go through the list of registered line monitors
                 and call their checkLine method
                
                 This method is called in regular intervals                
            </comment>
            <comment line="385">
                /////////////////////////////////// INNER CLASSES ////////////////////////////////////////// //                
            </comment>
            <comment line="417">
                class EventInfo                
            </comment>
            <comment line="443">
                class ClipInfo                
            </comment>
            <implements interface="Runnable"/>
            <javadoc line="44">
                EventDispatcher.  Used by various classes in the Java Sound implementation
                  to send events.                
                <author>
                    David Rivas                    
                </author>
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="AUTO_CLOSE_TIME" type="int" line="54"/>
            <javadoc line="54">
                time of inactivity until the auto closing clips
                  are closed                
            </javadoc>
            <declaration name="eventQueue" type="ArrayList" line="61"/>
            <javadoc line="61">
                List of events                
            </javadoc>
            <declaration name="thread" type="Thread" line="67"/>
            <javadoc line="67">
                Thread object for this EventDispatcher instance                
            </javadoc>
            <declaration name="autoClosingClips" type="ArrayList&lt;ClipInfo&gt;" line="76"/>
            <declaration name="lineMonitors" type="ArrayList&lt;LineMonitor&gt;" line="81"/>
            <declaration name="LINE_MONITOR_TIME" type="int" line="83"/>
            <javadoc line="83">
                Approximate interval between calls to LineMonitor.checkLine                
            </javadoc>
            <javadoc line="89">
                This start() method starts an event thread if one is not already active.                
            </javadoc>
            <method name="start" type="void" line="92">
                <comment line="96">
                    name                    
                </comment>
                <comment line="97">
                    daemon                    
                </comment>
                <comment line="98">
                    priority                    
                </comment>
                <comment line="99">
                    doStart                    
                </comment>
                <scope line="94"/>
            </method>
            <javadoc line="104">
                Invoked when there is at least one event in the queue.
                  Implement this as a callback to process one event.                
            </javadoc>
            <method name="processEvent" type="void" line="108">
                <params>
                    <param name="eventInfo" type="EventInfo"/>
                </params>
                <comment line="111">
                    process an LineEvent                    
                </comment>
                <comment line="125">
                    process a MetaMessage                    
                </comment>
                <comment line="138">
                    process a Controller or Mode Event                    
                </comment>
                <comment line="143">
                    Controller and Mode events have status byte 0xBc, where                    
                </comment>
                <comment line="144">
                    c is the channel they are sent on.                    
                </comment>
                <declaration name="count" type="int" line="109"/>
                <scope line="112">
                    <declaration name="event" type="LineEvent" line="113"/>
                    <scope line="115">
                        <scope line="116"/>
                        <scope line="118"/>
                    </scope>
                </scope>
                <scope line="126">
                    <declaration name="event" type="MetaMessage" line="127"/>
                    <scope line="128">
                        <scope line="129"/>
                        <scope line="131"/>
                    </scope>
                </scope>
                <scope line="139">
                    <declaration name="event" type="ShortMessage" line="140"/>
                    <declaration name="status" type="int" line="141"/>
                    <scope line="145">
                        <scope line="146">
                            <scope line="147"/>
                            <scope line="149"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="161">
                Wait until there is something in the event queue to process.  Then
                  dispatch the event to the listeners.The entire method does not
                  need to be synchronized since this includes taking the event out
                  from the queue and processing the event. We only need to provide
                  exclusive access over the code where an event is removed from the
                  queue.                
            </javadoc>
            <method name="dispatchEvents" type="void" line="169">
                <comment line="175">
                    Wait till there is an event in the event queue.                    
                </comment>
                <comment line="192">
                    Remove the event from the queue and dispatch it to the listeners.                    
                </comment>
                <comment line="196">
                    end of synchronized                    
                </comment>
                <declaration name="eventInfo" type="EventInfo" line="171"/>
                <scope line="173">
                    <scope line="176">
                        <scope line="178">
                            <scope line="179">
                                <declaration name="waitTime" type="int" line="180"/>
                                <scope line="181"/>
                            </scope>
                            <scope line="185"/>
                        </scope>
                    </scope>
                    <scope line="189"/>
                    <scope line="191"/>
                </scope>
                <scope line="197"/>
                <scope line="199">
                    <scope line="200"/>
                    <scope line="203"/>
                </scope>
            </method>
            <javadoc line="210">
                Queue the given event in the event queue.                
            </javadoc>
            <method name="postEvent" type="void" line="213">
                <params>
                    <param name="eventInfo" type="EventInfo"/>
                </params>
            </method>
            <javadoc line="219">
                A loop to dispatch events.                
            </javadoc>
            <method name="run" type="void" line="222">
                <scope line="224">
                    <scope line="225"/>
                    <scope line="227"/>
                </scope>
            </method>
            <javadoc line="234">
                Send audio and MIDI events.                
            </javadoc>
            <method name="sendAudioEvents" type="void" line="237">
                <params>
                    <param name="event" type="Object"/>
                    <param name="listeners" type="List"/>
                </params>
                <comment line="240">
                    nothing to do                    
                </comment>
                <scope line="239"/>
                <declaration name="eventInfo" type="EventInfo" line="246"/>
            </method>
            <method name="closeAutoClosingClips" type="void" line="257">
                <comment line="265">
                    sanity check                    
                </comment>
                <scope line="258">
                    <declaration name="currTime" type="long" line="260"/>
                    <scope line="261">
                        <declaration name="info" type="ClipInfo" line="262"/>
                        <scope line="263">
                            <declaration name="clip" type="AutoClosingClip" line="264"/>
                            <scope line="266"/>
                            <scope line="270"/>
                            <scope line="273"/>
                        </scope>
                        <scope line="278"/>
                    </scope>
                </scope>
            </method>
            <method name="getAutoClosingClipIndex" type="int" line="286">
                <params>
                    <param name="clip" type="AutoClosingClip"/>
                </params>
                <scope line="287">
                    <scope line="288">
                        <scope line="289"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="297">
                called from auto-closing clips when one of their open() method is called                
            </javadoc>
            <method name="autoClosingClipOpened" type="void" line="300">
                <params>
                    <param name="clip" type="AutoClosingClip"/>
                </params>
                <comment line="312">
                    this is only for the case that the first clip is set to autoclosing,                    
                </comment>
                <comment line="313">
                    and it is already open, and nothing is done with it.                    
                </comment>
                <comment line="314">
                    EventDispatcher.process() method would block in wait() and                    
                </comment>
                <comment line="315">
                    never close this first clip, keeping the device open.                    
                </comment>
                <declaration name="index" type="int" line="302"/>
                <scope line="303">
                    <scope line="305"/>
                </scope>
                <scope line="310">
                    <scope line="311"/>
                </scope>
            </method>
            <javadoc line="322">
                called from auto-closing clips when their closed() method is called                
            </javadoc>
            <method name="autoClosingClipClosed" type="void" line="325">
                <params>
                    <param name="clip" type="AutoClosingClip"/>
                </params>
                <comment line="326">
                    nothing to do -- is removed from arraylist above                    
                </comment>
            </method>
            <method name="monitorLines" type="void" line="337">
                <scope line="338">
                    <scope line="340"/>
                </scope>
            </method>
            <javadoc line="348">
                Add this LineMonitor instance to the list of monitors                
            </javadoc>
            <method name="addLineMonitor" type="void" line="351">
                <params>
                    <param name="lm" type="LineMonitor"/>
                </params>
                <comment line="362">
                    need to interrupt the infinite wait()                    
                </comment>
                <scope line="353">
                    <scope line="354"/>
                </scope>
                <scope line="361"/>
            </method>
            <javadoc line="368">
                Remove this LineMonitor instance from the list of monitors                
            </javadoc>
            <method name="removeLineMonitor" type="void" line="371">
                <params>
                    <param name="lm" type="LineMonitor"/>
                </params>
                <scope line="373">
                    <scope line="374"/>
                </scope>
            </method>
            <class name="EventInfo" line="386">
                <javadoc line="386">
                    Container for an event and a set of listeners to deliver it to.                    
                </javadoc>
                <declaration name="event" type="Object" line="391"/>
                <declaration name="listeners" type="Object[]" line="392"/>
                <javadoc line="394">
                    Create a new instance of this event Info class                    
                    <param>
                        event the event to be dispatched                        
                    </param>
                    <param>
                        listeners listener list; will be copied                        
                    </param>
                </javadoc>
                <method name="EventInfo" type="constructor" line="399">
                    <params>
                        <param name="event" type="Object"/>
                        <param name="listeners" type="List"/>
                    </params>
                </method>
                <method name="getEvent" type="Object" line="404"/>
                <method name="getListenerCount" type="int" line="408"/>
                <method name="getListener" type="Object" line="412">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
            </class>
            <class name="ClipInfo" line="419">
                <javadoc line="419">
                    Container for a clip with its expiration time                    
                </javadoc>
                <declaration name="clip" type="AutoClosingClip" line="424"/>
                <declaration name="expiration" type="long" line="425"/>
                <javadoc line="427">
                    Create a new instance of this clip Info class                    
                </javadoc>
                <method name="ClipInfo" type="constructor" line="430">
                    <params>
                        <param name="clip" type="AutoClosingClip"/>
                    </params>
                </method>
                <method name="getClip" type="AutoClosingClip" line="435"/>
                <method name="isExpired" type="boolean" line="439">
                    <params>
                        <param name="currTime" type="long"/>
                    </params>
                </method>
            </class>
            <interface name="LineMonitor">
                <javadoc line="445">
                    Interface that a class that wants to get regular
                      line monitor events implements                    
                </javadoc>
                <method name="checkLine" type="void" line="450"/>
                <javadoc line="450">
                    Called by event dispatcher in regular intervals                    
                </javadoc>
            </interface>
        </class>
    </source>