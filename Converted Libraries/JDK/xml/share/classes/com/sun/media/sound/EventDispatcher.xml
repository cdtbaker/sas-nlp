<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.media.sound">
        <import package="java.util.EventObject"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="javax.sound.sampled.Clip"/>
        <import package="javax.sound.sampled.Line"/>
        <import package="javax.sound.sampled.LineEvent"/>
        <import package="javax.sound.sampled.LineListener"/>
        <import package="javax.sound.midi.MetaMessage"/>
        <import package="javax.sound.midi.ShortMessage"/>
        <import package="javax.sound.midi.MetaEventListener"/>
        <import package="javax.sound.midi.ControllerEventListener"/>
        <class name="EventDispatcher" line="13">
            <implements interface="Runnable"/>
            <javadoc line="13">
                EventDispatcher.  Used by various classes in the Java Sound implementation
                  to send events.                
                <author>
                    David Rivas                    
                </author>
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="AUTO_CLOSE_TIME" type="int" line="21"/>
            <javadoc line="21">
                time of inactivity until the auto closing clips
                  are closed                
            </javadoc>
            <declaration name="eventQueue" type="ArrayList" line="26"/>
            <javadoc line="26">
                List of events                
            </javadoc>
            <declaration name="thread" type="Thread" line="30"/>
            <javadoc line="30">
                Thread object for this EventDispatcher instance                
            </javadoc>
            <declaration name="autoClosingClips" type="ArrayList&amp;lt;ClipInfo&amp;gt;" line="34"/>
            <declaration name="lineMonitors" type="ArrayList&amp;lt;LineMonitor&amp;gt;" line="35"/>
            <declaration name="LINE_MONITOR_TIME" type="int" line="36"/>
            <javadoc line="36">
                Approximate interval between calls to LineMonitor.checkLine                
            </javadoc>
            <javadoc line="40">
                This start() method starts an event thread if one is not already active.                
            </javadoc>
            <method name="start" type="void" line="43">
                <scope line="44"/>
            </method>
            <javadoc line="48">
                Invoked when there is at least one event in the queue.
                  Implement this as a callback to process one event.                
            </javadoc>
            <method name="processEvent" type="void" line="52">
                <params>
                    <param name="eventInfo" type="EventInfo"/>
                </params>
                <declaration name="count" type="int" line="53"/>
                <scope line="54">
                    <declaration name="event" type="LineEvent" line="55"/>
                    <scope line="57">
                        <scope line="58"/>
                        <scope line="61"/>
                    </scope>
                </scope>
                <scope line="67">
                    <declaration name="event" type="MetaMessage" line="68"/>
                    <scope line="69">
                        <scope line="70"/>
                        <scope line="73"/>
                    </scope>
                </scope>
                <scope line="79">
                    <declaration name="event" type="ShortMessage" line="80"/>
                    <declaration name="status" type="int" line="81"/>
                    <scope line="82">
                        <scope line="83">
                            <scope line="84"/>
                            <scope line="87"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="96">
                Wait until there is something in the event queue to process.  Then
                  dispatch the event to the listeners.The entire method does not
                  need to be synchronized since this includes taking the event out
                  from the queue and processing the event. We only need to provide
                  exclusive access over the code where an event is removed from the
                  queue.                
            </javadoc>
            <method name="dispatchEvents" type="void" line="104">
                <declaration name="eventInfo" type="EventInfo" line="105"/>
                <scope line="106">
                    <scope line="107">
                        <scope line="108">
                            <scope line="109">
                                <declaration name="waitTime" type="int" line="110"/>
                                <scope line="111"/>
                            </scope>
                            <scope line="116"/>
                        </scope>
                    </scope>
                    <scope line="121"/>
                    <scope line="123"/>
                </scope>
                <scope line="127"/>
                <scope line="130">
                    <scope line="131"/>
                    <scope line="134"/>
                </scope>
            </method>
            <javadoc line="139">
                Queue the given event in the event queue.                
            </javadoc>
            <method name="postEvent" type="void" line="142">
                <params>
                    <param name="eventInfo" type="EventInfo"/>
                </params>
            </method>
            <javadoc line="146">
                A loop to dispatch events.                
            </javadoc>
            <method name="run" type="void" line="149">
                <scope line="150">
                    <scope line="151"/>
                    <scope line="154"/>
                </scope>
            </method>
            <javadoc line="159">
                Send audio and MIDI events.                
            </javadoc>
            <method name="sendAudioEvents" type="void" line="162">
                <params>
                    <param name="event" type="Object"/>
                    <param name="listeners" type="List"/>
                </params>
                <scope line="163"/>
                <declaration name="eventInfo" type="EventInfo" line="167"/>
            </method>
            <method name="closeAutoClosingClips" type="void" line="170">
                <scope line="171">
                    <declaration name="currTime" type="long" line="173"/>
                    <scope line="174">
                        <declaration name="info" type="ClipInfo" line="175"/>
                        <scope line="176">
                            <declaration name="clip" type="AutoClosingClip" line="177"/>
                            <scope line="178"/>
                            <scope line="182"/>
                            <scope line="186"/>
                        </scope>
                        <scope line="192"/>
                    </scope>
                </scope>
            </method>
            <method name="getAutoClosingClipIndex" type="int" line="199">
                <params>
                    <param name="clip" type="AutoClosingClip"/>
                </params>
                <scope line="200">
                    <scope line="201">
                        <scope line="202"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="209">
                called from auto-closing clips when one of their open() method is called                
            </javadoc>
            <method name="autoClosingClipOpened" type="void" line="212">
                <params>
                    <param name="clip" type="AutoClosingClip"/>
                </params>
                <declaration name="index" type="int" line="214"/>
                <scope line="215">
                    <scope line="217"/>
                </scope>
                <scope line="222">
                    <scope line="223"/>
                </scope>
            </method>
            <javadoc line="229">
                called from auto-closing clips when their closed() method is called                
            </javadoc>
            <method name="autoClosingClipClosed" type="void" line="232">
                <params>
                    <param name="clip" type="AutoClosingClip"/>
                </params>
            </method>
            <method name="monitorLines" type="void" line="234">
                <scope line="235">
                    <scope line="237"/>
                </scope>
            </method>
            <javadoc line="243">
                Add this LineMonitor instance to the list of monitors                
            </javadoc>
            <method name="addLineMonitor" type="void" line="246">
                <params>
                    <param name="lm" type="LineMonitor"/>
                </params>
                <scope line="248">
                    <scope line="249"/>
                </scope>
                <scope line="256"/>
            </method>
            <javadoc line="261">
                Remove this LineMonitor instance from the list of monitors                
            </javadoc>
            <method name="removeLineMonitor" type="void" line="264">
                <params>
                    <param name="lm" type="LineMonitor"/>
                </params>
                <scope line="266">
                    <scope line="267"/>
                </scope>
            </method>
            <class name="EventInfo" line="276">
                <javadoc line="276">
                    Container for an event and a set of listeners to deliver it to.                    
                </javadoc>
                <declaration name="event" type="Object" line="280"/>
                <declaration name="listeners" type="Object[]" line="281"/>
                <javadoc line="282">
                    Create a new instance of this event Info class                    
                    <param>
                        event the event to be dispatched                        
                    </param>
                    <param>
                        listeners listener list; will be copied                        
                    </param>
                </javadoc>
                <method name="EventInfo" type="constructor" line="287">
                    <params>
                        <param name="event" type="Object"/>
                        <param name="listeners" type="List"/>
                    </params>
                </method>
                <method name="getEvent" type="Object" line="291"/>
                <method name="getListenerCount" type="int" line="294"/>
                <method name="getListener" type="Object" line="297">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
            </class>
            <class name="ClipInfo" line="301">
                <javadoc line="301">
                    Container for a clip with its expiration time                    
                </javadoc>
                <declaration name="clip" type="AutoClosingClip" line="305"/>
                <declaration name="expiration" type="long" line="306"/>
                <javadoc line="307">
                    Create a new instance of this clip Info class                    
                </javadoc>
                <method name="ClipInfo" type="constructor" line="310">
                    <params>
                        <param name="clip" type="AutoClosingClip"/>
                    </params>
                </method>
                <method name="getClip" type="AutoClosingClip" line="314"/>
                <method name="isExpired" type="boolean" line="317">
                    <params>
                        <param name="currTime" type="long"/>
                    </params>
                </method>
            </class>
            <interface name="LineMonitor">
                <javadoc line="321">
                    Interface that a class that wants to get regular
                      line monitor events implements                    
                </javadoc>
                <method name="checkLine" type="void" line="326"/>
                <javadoc line="326">
                    Called by event dispatcher in regular intervals                    
                </javadoc>
            </interface>
        </class>
    </source>