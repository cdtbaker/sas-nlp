<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.script.javascript">
        <import package="sun.org.mozilla.javascript.internal"/>
        <import package="javax.script"/>
        <class name="RhinoTopLevel" line="4">
            <extends class="ImporterTopLevel"/>
            <javadoc line="4">
                This class serves as top level scope for Rhino. This class adds
                  3 top level functions (bindings, scope, sync) and two constructors
                  (JSAdapter, JavaAdapter).                
                <author>
                    A. Sundararajan                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="RhinoTopLevel" type="constructor" line="12">
                <params>
                    <param name="cx" type="Context"/>
                    <param name="engine" type="RhinoScriptEngine"/>
                </params>
                <declaration name="names" type="String" line="17"/>
            </method>
            <javadoc line="20">
                The bindings function takes a JavaScript scope object
                  of type ExternalScriptable and returns the underlying Bindings
                  instance.
                  var page = scope(pageBindings);
                  with (page) {
                  // code that uses page scope
                  }
                  var b = bindings(page);
                  // operate on bindings here.                
            </javadoc>
            <method name="bindings" type="Object" line="31">
                <params>
                    <param name="cx" type="Context"/>
                    <param name="thisObj" type="Scriptable"/>
                    <param name="args" type="Object[]"/>
                    <param name="funObj" type="Function"/>
                </params>
                <scope line="32">
                    <declaration name="arg" type="Object" line="33"/>
                    <scope line="34"/>
                    <scope line="37">
                        <declaration name="ctx" type="ScriptContext" line="38"/>
                        <declaration name="bind" type="Bindings" line="39"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="45">
                The scope function creates a new JavaScript scope object
                  with given Bindings object as backing store. This can be used
                  to create a script scope based on arbitrary Bindings instance.
                  For example, in webapp scenario, a &apos;page&apos; level Bindings instance
                  may be wrapped as a scope and code can be run in JavaScripe &apos;with&apos;
                  statement:
                  var page = scope(pageBindings);
                  with (page) {
                  // code that uses page scope
                  }                
            </javadoc>
            <method name="scope" type="Object" line="57">
                <params>
                    <param name="cx" type="Context"/>
                    <param name="thisObj" type="Scriptable"/>
                    <param name="args" type="Object[]"/>
                    <param name="funObj" type="Function"/>
                </params>
                <scope line="58">
                    <declaration name="arg" type="Object" line="59"/>
                    <scope line="60"/>
                    <scope line="63">
                        <declaration name="ctx" type="ScriptContext" line="64"/>
                        <declaration name="res" type="Scriptable" line="66"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="74">
                The sync function creates a synchronized function (in the sense
                  of a Java synchronized method) from an existing function. The
                  new function synchronizes on the &lt;code&gt;this&lt;/code&gt; object of
                  its invocation.
                  js&gt; var o = { f : sync(function(x) {
                  print(&quot;entry&quot;);
                  Packages.java.lang.Thread.sleep(x1000);
                  print(&quot;exit&quot;);
                  })};
                  js&gt; thread(function() {o.f(5);});
                  entry
                  js&gt; thread(function() {o.f(5);});
                  js&gt;
                  exit
                  entry
                  exit                
            </javadoc>
            <method name="sync" type="Object" line="92">
                <params>
                    <param name="cx" type="Context"/>
                    <param name="thisObj" type="Scriptable"/>
                    <param name="args" type="Object[]"/>
                    <param name="funObj" type="Function"/>
                </params>
                <scope line="93"/>
                <scope line="96"/>
            </method>
            <method name="getScriptEngine" type="RhinoScriptEngine" line="100"/>
            <declaration name="engine" type="RhinoScriptEngine" line="103"/>
        </class>
    </source>