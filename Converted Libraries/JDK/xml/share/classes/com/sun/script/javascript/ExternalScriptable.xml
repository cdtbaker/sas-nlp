<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.script.javascript">
        <import package="sun.org.mozilla.javascript.internal"/>
        <import package="javax.script"/>
        <import package="java.util"/>
        <class name="ExternalScriptable" line="31">
            <comment line="42">
                Underlying ScriptContext that we use to store
                 named variables of this scope.                
            </comment>
            <comment line="47">
                JavaScript allows variables to be named as numbers (indexed
                 properties). This way arrays, objects (scopes) are treated uniformly.
                 Note that JSR 223 API supports only String named variables and
                 so we can&apos;t store these in Bindings. Also, JavaScript allows name
                 of the property name to be even empty String! Again, JSR 223 API
                 does not support empty name. So, we use the following fallback map
                 to store such variables of this scope. This map is not exposed to
                 JSR 223 API. We can just script objects &quot;as is&quot; and need not convert.                
            </comment>
            <comment line="58">
                my prototype                
            </comment>
            <comment line="60">
                my parent scope, if any                
            </comment>
            <implements interface="Scriptable"/>
            <javadoc line="31">
                ExternalScriptable is an implementation of Scriptable
                  backed by a JSR 223 ScriptContext instance.                
                <author>
                    Mike Grogan                    
                </author>
                <author>
                    A. Sundararajan                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="context" type="ScriptContext" line="44"/>
            <declaration name="indexedProps" type="Map&lt;Object,Object&gt;" line="55"/>
            <declaration name="prototype" type="Scriptable" line="58"/>
            <declaration name="parent" type="Scriptable" line="60"/>
            <method name="ExternalScriptable" type="constructor" line="62">
                <params>
                    <param name="context" type="ScriptContext"/>
                </params>
            </method>
            <method name="ExternalScriptable" type="constructor" line="66">
                <params>
                    <param name="context" type="ScriptContext"/>
                    <param name="indexedProps" type="Map<Object,Object>"/>
                </params>
                <scope line="67"/>
            </method>
            <method name="getContext" type="ScriptContext" line="74"/>
            <method name="isEmpty" type="boolean" line="78">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="82">
                Return the name of the class.                
            </javadoc>
            <method name="getClassName" type="String" line="85"/>
            <javadoc line="89">
                Returns the value of the named property or NOT_FOUND.
                  If the property was created using defineProperty, the
                  appropriate getter method is called.                
                <param>
                    name the name of the property                    
                </param>
                <param>
                    start the object in which the lookup began                    
                </param>
                <return>
                    the value of the property (may be null), or NOT_FOUND                    
                </return>
            </javadoc>
            <method name="get" type="Object" line="99">
                <params>
                    <param name="name" type="String"/>
                    <param name="start" type="Scriptable"/>
                </params>
                <scope line="100">
                    <scope line="101"/>
                    <scope line="103"/>
                </scope>
                <scope line="106">
                    <scope line="107">
                        <declaration name="scope" type="int" line="108"/>
                        <scope line="109">
                            <declaration name="value" type="Object" line="110"/>
                        </scope>
                        <scope line="112"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="119">
                Returns the value of the indexed property or NOT_FOUND.                
                <param>
                    index the numeric index for the property                    
                </param>
                <param>
                    start the object in which the lookup began                    
                </param>
                <return>
                    the value of the property (may be null), or NOT_FOUND                    
                </return>
            </javadoc>
            <method name="get" type="Object" line="126">
                <params>
                    <param name="index" type="int"/>
                    <param name="start" type="Scriptable"/>
                </params>
                <declaration name="key" type="Integer" line="127"/>
                <scope line="128"/>
                <scope line="130"/>
            </method>
            <javadoc line="135">
                Returns true if the named property is defined.                
                <param>
                    name the name of the property                    
                </param>
                <param>
                    start the object in which the lookup began                    
                </param>
                <return>
                    true if and only if the property was found in the object                    
                </return>
            </javadoc>
            <method name="has" type="boolean" line="142">
                <params>
                    <param name="name" type="String"/>
                    <param name="start" type="Scriptable"/>
                </params>
                <scope line="143"/>
                <scope line="145">
                    <scope line="146"/>
                </scope>
            </method>
            <javadoc line="152">
                Returns true if the property index is defined.                
                <param>
                    index the numeric index for the property                    
                </param>
                <param>
                    start the object in which the lookup began                    
                </param>
                <return>
                    true if and only if the property was found in the object                    
                </return>
            </javadoc>
            <method name="has" type="boolean" line="159">
                <params>
                    <param name="index" type="int"/>
                    <param name="start" type="Scriptable"/>
                </params>
                <declaration name="key" type="Integer" line="160"/>
            </method>
            <javadoc line="164">
                Sets the value of the named property, creating it if need be.                
                <param>
                    name the name of the property                    
                </param>
                <param>
                    start the object whose property is being set                    
                </param>
                <param>
                    value value to set the property to                    
                </param>
            </javadoc>
            <method name="put" type="void" line="171">
                <params>
                    <param name="name" type="String"/>
                    <param name="start" type="Scriptable"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="172">
                    <scope line="173">
                        <scope line="174"/>
                        <scope line="176">
                            <scope line="177">
                                <declaration name="scope" type="int" line="178"/>
                                <scope line="179"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="186"/>
            </method>
            <javadoc line="191">
                Sets the value of the indexed property, creating it if need be.                
                <param>
                    index the numeric index for the property                    
                </param>
                <param>
                    start the object whose property is being set                    
                </param>
                <param>
                    value value to set the property to                    
                </param>
            </javadoc>
            <method name="put" type="void" line="198">
                <params>
                    <param name="index" type="int"/>
                    <param name="start" type="Scriptable"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="199">
                    <scope line="200"/>
                </scope>
                <scope line="203"/>
            </method>
            <javadoc line="208">
                Removes a named property from the object.
                  If the property is not found, no action is taken.                
                <param>
                    name the name of the property                    
                </param>
            </javadoc>
            <method name="delete" type="void" line="215">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="216"/>
                <scope line="218">
                    <scope line="219">
                        <declaration name="scope" type="int" line="220"/>
                        <scope line="221"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="228">
                Removes the indexed property from the object.
                  If the property is not found, no action is taken.                
                <param>
                    index the numeric index for the property                    
                </param>
            </javadoc>
            <method name="delete" type="void" line="235">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="239">
                Get the prototype of the object.                
                <return>
                    the prototype                    
                </return>
            </javadoc>
            <method name="getPrototype" type="Scriptable" line="243"/>
            <javadoc line="247">
                Set the prototype of the object.                
                <param>
                    prototype the prototype to set                    
                </param>
            </javadoc>
            <method name="setPrototype" type="void" line="251">
                <params>
                    <param name="prototype" type="Scriptable"/>
                </params>
            </method>
            <javadoc line="255">
                Get the parent scope of the object.                
                <return>
                    the parent scope                    
                </return>
            </javadoc>
            <method name="getParentScope" type="Scriptable" line="259"/>
            <javadoc line="263">
                Set the parent scope of the object.                
                <param>
                    parent the parent scope to set                    
                </param>
            </javadoc>
            <method name="setParentScope" type="void" line="267">
                <params>
                    <param name="parent" type="Scriptable"/>
                </params>
            </method>
            <javadoc line="271">
                Get an array of property ids.
                  Not all property ids need be returned. Those properties
                  whose ids are not returned are considered non-enumerable.                
                <return>
                    an array of Objects. Each entry in the array is either
                      a java.lang.String or a java.lang.Number                    
                </return>
            </javadoc>
            <method name="getIds" type="Object[]" line="280">
                <comment line="287">
                    now add all indexed properties                    
                </comment>
                <declaration name="keys" type="String[]" line="281"/>
                <declaration name="size" type="int" line="282"/>
                <declaration name="res" type="Object[]" line="283"/>
                <declaration name="i" type="int" line="285"/>
                <scope line="287"/>
            </method>
            <javadoc line="293">
                Get the default value of the object with a given hint.
                  The hints are String.class for type String, Number.class for type
                  Number, Scriptable.class for type Object, and Boolean.class for
                  type Boolean. &lt;p&gt;
                  A &lt;code&gt;hint&lt;/code&gt; of null means &quot;no hint&quot;.
                  See ECMA 8.6.2.6.                
                <param>
                    hint the type hint                    
                </param>
                <return>
                    the default value                    
                </return>
            </javadoc>
            <method name="getDefaultValue" type="Object" line="306">
                <params>
                    <param name="typeHint" type="Class"/>
                </params>
                <comment line="377">
                    Let a wrapped java.lang.String pass for a primitive
                     string.                    
                </comment>
                <comment line="385">
                    fall through to error                    
                </comment>
                <scope line="307">
                    <declaration name="tryToString" type="boolean" line="308"/>
                    <scope line="309"/>
                    <scope line="311"/>
                    <declaration name="methodName" type="String" line="315"/>
                    <declaration name="args" type="Object[]" line="316"/>
                    <scope line="317"/>
                    <scope line="320">
                        <declaration name="hint" type="String" line="323"/>
                        <scope line="324"/>
                        <scope line="326"/>
                        <scope line="328"/>
                        <scope line="330"/>
                        <scope line="334"/>
                        <scope line="347"/>
                        <scope line="349"/>
                    </scope>
                    <declaration name="v" type="Object" line="356"/>
                    <declaration name="fun" type="Function" line="359"/>
                    <declaration name="cx" type="Context" line="360"/>
                    <scope line="361"/>
                    <scope line="363"/>
                    <scope line="366">
                        <scope line="367"/>
                        <scope line="372"/>
                        <scope line="375">
                            <declaration name="u" type="Object" line="378"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="arg" type="String" line="385"/>
            </method>
            <javadoc line="390">
                Implements the instanceof operator.                
                <param>
                    instance The value that appeared on the LHS of the instanceof
                      operator                    
                </param>
                <return>
                    true if "this" appears in value's prototype chain                    
                </return>
            </javadoc>
            <method name="hasInstance" type="boolean" line="398">
                <params>
                    <param name="instance" type="Scriptable"/>
                </params>
                <comment line="400">
                    Default for JS objects (other than Function) is to do prototype
                     chasing.                    
                </comment>
                <declaration name="proto" type="Scriptable" line="401"/>
                <scope line="402"/>
            </method>
            <method name="getAllKeys" type="String[]" line="409">
                <declaration name="list" type="ArrayList&lt;String&gt;" line="410"/>
                <scope line="411">
                    <scope line="412">
                        <declaration name="bindings" type="Bindings" line="413"/>
                        <scope line="414">
                            <scope line="416"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="res" type="String[]" line="422"/>
            </method>
            <javadoc line="427">
                We convert script values to the nearest Java value.
                  We unwrap wrapped Java objects so that access from
                  Bindings.get() would return &quot;workable&quot; value for Java.
                  But, at the same time, we need to make few special cases
                  and hence the following function is used.                
            </javadoc>
            <method name="jsToJava" type="Object" line="434">
                <params>
                    <param name="jsObj" type="Object"/>
                </params>
                <comment line="438">
                    importClass feature of ImporterTopLevel puts
                     NativeJavaClass in global scope. If we unwrap
                     it, importClass won&apos;t work.                    
                </comment>
                <comment line="446">
                    script may use Java primitive wrapper type objects
                     (such as java.lang.Integer, java.lang.Boolean etc)
                     explicitly. If we unwrap, then these script objects
                     will become script primitive types. For example,
                    
                        var x = new java.lang.Double(3.0); print(typeof x);
                    
                     will print &apos;number&apos;. We don&apos;t want that to happen.                    
                </comment>
                <comment line="458">
                    special type wrapped -- we just leave it as is.                    
                </comment>
                <comment line="461">
                    return unwrapped object for any other object.                    
                </comment>
                <comment line="464">
                    not-a-Java-wrapper                    
                </comment>
                <scope line="435">
                    <declaration name="njb" type="Wrapper" line="436"/>
                    <scope line="441"/>
                    <declaration name="obj" type="Object" line="454"/>
                    <scope line="456"/>
                    <scope line="459"/>
                </scope>
                <scope line="463"/>
            </method>
        </class>
    </source>