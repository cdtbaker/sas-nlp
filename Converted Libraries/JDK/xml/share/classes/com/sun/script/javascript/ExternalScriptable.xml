<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.script.javascript">
        <import package="sun.org.mozilla.javascript.internal"/>
        <import package="javax.script"/>
        <import package="java.util"/>
        <class name="ExternalScriptable" line="5">
            <implements interface="Scriptable"/>
            <javadoc line="5">
                ExternalScriptable is an implementation of Scriptable
                  backed by a JSR 223 ScriptContext instance.                
                <author>
                    Mike Grogan                    
                </author>
                <author>
                    A. Sundararajan                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="context" type="ScriptContext" line="13"/>
            <declaration name="indexedProps" type="Map&lt;Object,Object&gt;" line="14"/>
            <declaration name="prototype" type="Scriptable" line="15"/>
            <declaration name="parent" type="Scriptable" line="16"/>
            <method name="ExternalScriptable" type="constructor" line="17">
                <params>
                    <param name="context" type="ScriptContext"/>
                </params>
            </method>
            <method name="ExternalScriptable" type="constructor" line="20">
                <params>
                    <param name="context" type="ScriptContext"/>
                    <param name="indexedProps" type="Map<Object,Object>"/>
                </params>
                <scope line="21"/>
            </method>
            <method name="getContext" type="ScriptContext" line="27"/>
            <method name="isEmpty" type="boolean" line="30">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="33">
                Return the name of the class.                
            </javadoc>
            <method name="getClassName" type="String" line="36"/>
            <javadoc line="39">
                Returns the value of the named property or NOT_FOUND.
                  If the property was created using defineProperty, the
                  appropriate getter method is called.                
                <param>
                    name the name of the property                    
                </param>
                <param>
                    start the object in which the lookup began                    
                </param>
                <return>
                    the value of the property (may be null), or NOT_FOUND                    
                </return>
            </javadoc>
            <method name="get" type="Object" line="47">
                <params>
                    <param name="name" type="String"/>
                    <param name="start" type="Scriptable"/>
                </params>
                <scope line="48">
                    <scope line="49"/>
                    <scope line="52"/>
                </scope>
                <scope line="56">
                    <scope line="57">
                        <declaration name="scope" type="int" line="58"/>
                        <scope line="59">
                            <declaration name="value" type="Object" line="60"/>
                        </scope>
                        <scope line="63"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="69">
                Returns the value of the indexed property or NOT_FOUND.                
                <param>
                    index the numeric index for the property                    
                </param>
                <param>
                    start the object in which the lookup began                    
                </param>
                <return>
                    the value of the property (may be null), or NOT_FOUND                    
                </return>
            </javadoc>
            <method name="get" type="Object" line="75">
                <params>
                    <param name="index" type="int"/>
                    <param name="start" type="Scriptable"/>
                </params>
                <declaration name="key" type="Integer" line="76"/>
                <scope line="77"/>
                <scope line="80"/>
            </method>
            <javadoc line="84">
                Returns true if the named property is defined.                
                <param>
                    name the name of the property                    
                </param>
                <param>
                    start the object in which the lookup began                    
                </param>
                <return>
                    true if and only if the property was found in the object                    
                </return>
            </javadoc>
            <method name="has" type="boolean" line="90">
                <params>
                    <param name="name" type="String"/>
                    <param name="start" type="Scriptable"/>
                </params>
                <scope line="91"/>
                <scope line="94">
                    <scope line="95"/>
                </scope>
            </method>
            <javadoc line="100">
                Returns true if the property index is defined.                
                <param>
                    index the numeric index for the property                    
                </param>
                <param>
                    start the object in which the lookup began                    
                </param>
                <return>
                    true if and only if the property was found in the object                    
                </return>
            </javadoc>
            <method name="has" type="boolean" line="106">
                <params>
                    <param name="index" type="int"/>
                    <param name="start" type="Scriptable"/>
                </params>
                <declaration name="key" type="Integer" line="107"/>
            </method>
            <javadoc line="110">
                Sets the value of the named property, creating it if need be.                
                <param>
                    name the name of the property                    
                </param>
                <param>
                    start the object whose property is being set                    
                </param>
                <param>
                    value value to set the property to                    
                </param>
            </javadoc>
            <method name="put" type="void" line="116">
                <params>
                    <param name="name" type="String"/>
                    <param name="start" type="Scriptable"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="117">
                    <scope line="118">
                        <scope line="119"/>
                        <scope line="122">
                            <scope line="123">
                                <declaration name="scope" type="int" line="124"/>
                                <scope line="125"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="133"/>
            </method>
            <javadoc line="137">
                Sets the value of the indexed property, creating it if need be.                
                <param>
                    index the numeric index for the property                    
                </param>
                <param>
                    start the object whose property is being set                    
                </param>
                <param>
                    value value to set the property to                    
                </param>
            </javadoc>
            <method name="put" type="void" line="143">
                <params>
                    <param name="index" type="int"/>
                    <param name="start" type="Scriptable"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="144">
                    <scope line="145"/>
                </scope>
                <scope line="149"/>
            </method>
            <javadoc line="153">
                Removes a named property from the object.
                  If the property is not found, no action is taken.                
                <param>
                    name the name of the property                    
                </param>
            </javadoc>
            <method name="delete" type="void" line="158">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="159"/>
                <scope line="162">
                    <scope line="163">
                        <declaration name="scope" type="int" line="164"/>
                        <scope line="165"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="171">
                Removes the indexed property from the object.
                  If the property is not found, no action is taken.                
                <param>
                    index the numeric index for the property                    
                </param>
            </javadoc>
            <method name="delete" type="void" line="176">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="179">
                Get the prototype of the object.                
                <return>
                    the prototype                    
                </return>
            </javadoc>
            <method name="getPrototype" type="Scriptable" line="183"/>
            <javadoc line="186">
                Set the prototype of the object.                
                <param>
                    prototype the prototype to set                    
                </param>
            </javadoc>
            <method name="setPrototype" type="void" line="190">
                <params>
                    <param name="prototype" type="Scriptable"/>
                </params>
            </method>
            <javadoc line="193">
                Get the parent scope of the object.                
                <return>
                    the parent scope                    
                </return>
            </javadoc>
            <method name="getParentScope" type="Scriptable" line="197"/>
            <javadoc line="200">
                Set the parent scope of the object.                
                <param>
                    parent the parent scope to set                    
                </param>
            </javadoc>
            <method name="setParentScope" type="void" line="204">
                <params>
                    <param name="parent" type="Scriptable"/>
                </params>
            </method>
            <javadoc line="207">
                Get an array of property ids.
                  Not all property ids need be returned. Those properties
                  whose ids are not returned are considered non-enumerable.                
                <return>
                    an array of Objects. Each entry in the array is either
                      a java.lang.String or a java.lang.Number                    
                </return>
            </javadoc>
            <method name="getIds" type="Object[]" line="214">
                <declaration name="keys" type="String[]" line="215"/>
                <declaration name="size" type="int" line="216"/>
                <declaration name="res" type="Object[]" line="217"/>
                <declaration name="i" type="int" line="219"/>
                <scope line="220"/>
            </method>
            <javadoc line="225">
                Get the default value of the object with a given hint.
                  The hints are String.class for type String, Number.class for type
                  Number, Scriptable.class for type Object, and Boolean.class for
                  type Boolean. &lt;p&gt;
                  A &lt;code&gt;hint&lt;/code&gt; of null means &quot;no hint&quot;.
                  See ECMA 8.6.2.6.                
                <param>
                    hint the type hint                    
                </param>
                <return>
                    the default value                    
                </return>
            </javadoc>
            <method name="getDefaultValue" type="Object" line="235">
                <params>
                    <param name="typeHint" type="Class"/>
                </params>
                <scope line="236">
                    <declaration name="tryToString" type="boolean" line="237"/>
                    <scope line="238"/>
                    <scope line="241"/>
                    <declaration name="methodName" type="String" line="244"/>
                    <declaration name="args" type="Object[]" line="245"/>
                    <scope line="246"/>
                    <scope line="250">
                        <declaration name="hint" type="String" line="253"/>
                        <scope line="254"/>
                        <scope line="257"/>
                        <scope line="260"/>
                        <scope line="263"/>
                        <scope line="266"/>
                        <scope line="269"/>
                        <scope line="272"/>
                    </scope>
                    <declaration name="v" type="Object" line="277"/>
                    <declaration name="fun" type="Function" line="279"/>
                    <declaration name="cx" type="Context" line="280"/>
                    <scope line="281"/>
                    <scope line="284"/>
                    <scope line="287">
                        <scope line="288"/>
                        <scope line="291"/>
                        <scope line="294">
                            <declaration name="u" type="Object" line="295"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="arg" type="String" line="300"/>
            </method>
            <javadoc line="303">
                Implements the instanceof operator.                
                <param>
                    instance The value that appeared on the LHS of the instanceof
                      operator                    
                </param>
                <return>
                    true if "this" appears in value's prototype chain                    
                </return>
            </javadoc>
            <method name="hasInstance" type="boolean" line="309">
                <params>
                    <param name="instance" type="Scriptable"/>
                </params>
                <declaration name="proto" type="Scriptable" line="310"/>
                <scope line="311"/>
            </method>
            <method name="getAllKeys" type="String[]" line="317">
                <declaration name="list" type="ArrayList&lt;String&gt;" line="318"/>
                <scope line="319">
                    <scope line="320">
                        <declaration name="bindings" type="Bindings" line="321"/>
                        <scope line="322">
                            <scope line="324"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="res" type="String[]" line="330"/>
            </method>
            <javadoc line="334">
                We convert script values to the nearest Java value.
                  We unwrap wrapped Java objects so that access from
                  Bindings.get() would return &quot;workable&quot; value for Java.
                  But, at the same time, we need to make few special cases
                  and hence the following function is used.                
            </javadoc>
            <method name="jsToJava" type="Object" line="341">
                <params>
                    <param name="jsObj" type="Object"/>
                </params>
                <scope line="342">
                    <declaration name="njb" type="Wrapper" line="343"/>
                    <scope line="344"/>
                    <declaration name="obj" type="Object" line="347"/>
                    <scope line="348"/>
                    <scope line="351"/>
                </scope>
                <scope line="355"/>
            </method>
        </class>
    </source>