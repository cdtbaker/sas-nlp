<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.script.javascript">
        <import package="java.lang.reflect"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="sun.org.mozilla.javascript.internal"/>
        <class name="RhinoWrapFactory" line="32">
            <extends class="WrapFactory"/>
            <comment line="57">
                We use instance of this class to wrap security sensitive
                 Java object. Please refer below.                
            </comment>
            <javadoc line="32">
                This wrap factory is used for security reasons. JSR 223 script
                  engine interface and JavaScript engine classes are run as bootstrap
                  classes. For example, java.lang.Class.forName method (when called without
                  class loader) uses caller&apos;s class loader. This may be exploited by script
                  authors to access classes otherwise not accessible. For example,
                  classes in sun. namespace are normally not accessible to untrusted
                  code and hence should not be accessible to JavaScript run from
                  untrusted code.                
                <author>
                    A. Sundararajan                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="RhinoWrapFactory" type="constructor" line="46"/>
            <declaration name="theInstance" type="RhinoWrapFactory" line="47"/>
            <method name="getInstance" type="WrapFactory" line="49">
                <scope line="50"/>
            </method>
            <class name="RhinoJavaObject" line="58">
                <extends class="NativeJavaObject"/>
                <method name="RhinoJavaObject" type="constructor" line="59">
                    <params>
                        <param name="scope" type="Scriptable"/>
                        <param name="obj" type="Object"/>
                        <param name="type" type="Class"/>
                    </params>
                    <comment line="61">
                        we pass &apos;null&apos; to object. NativeJavaObject uses
                         passed &apos;type&apos; to reflect fields and methods when
                         object is null.                        
                    </comment>
                    <comment line="66">
                        Now, we set actual object. &apos;javaObject&apos; is protected
                         field of NativeJavaObject.                        
                    </comment>
                </method>
            </class>
            <method name="wrapAsJavaObject" type="Scriptable" line="72">
                <params>
                    <param name="cx" type="Context"/>
                    <param name="scope" type="Scriptable"/>
                    <param name="javaObject" type="Object"/>
                    <param name="staticType" type="Class"/>
                </params>
                <comment line="77">
                    Check with Security Manager whether we can expose a
                     ClassLoader...                    
                </comment>
                <comment line="82">
                    if we fall through here, check permission succeeded.                    
                </comment>
                <comment line="90">
                    Check member access. Don&apos;t allow reflective access to
                     non-public members. Note that we can&apos;t call checkMemberAccess
                     because that expects exact stack depth!                    
                </comment>
                <comment line="98">
                    Now, make sure that no ClassShutter prevented Class or Member
                     of it is accessed reflectively. Note that ClassShutter may
                     prevent access to a class, even though SecurityManager permit.                    
                </comment>
                <comment line="110">
                    we have got some non-reflective object.                    
                </comment>
                <comment line="114">
                    Object of some sensitive class (such as sun.net.www.*
                     objects returned from public method of java.net.URL class.
                     We expose this object as though it is an object of some
                     super class that is safe for access.                    
                </comment>
                <comment line="121">
                    Whenever a Java Object is wrapped, we are passed with a
                     staticType which is the type found from environment. For
                     example, method return type known from signature. The dynamic
                     type would be the actual Class of the actual returned object.
                     If the staticType is an interface, we just use that type.                    
                </comment>
                <comment line="129">
                    dynamicType is always a class type and never an interface.
                     find an accessible super class of the dynamic type.                    
                </comment>
                <comment line="138">
                    atleast java.lang.Object has to be accessible. So, when
                     we reach here, type variable should not be null.                    
                </comment>
                <comment line="143">
                    create custom wrapper with the &apos;safe&apos; type.                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="73"/>
                <declaration name="classShutter" type="ClassShutter" line="74"/>
                <scope line="75">
                    <scope line="78"/>
                </scope>
                <scope line="83">
                    <declaration name="name" type="String" line="84"/>
                    <scope line="85"/>
                    <scope line="87">
                        <declaration name="member" type="Member" line="88"/>
                        <scope line="92"/>
                    </scope>
                    <scope line="100">
                        <scope line="101"/>
                        <scope line="103"/>
                    </scope>
                </scope>
                <declaration name="dynamicType" type="Class" line="110"/>
                <declaration name="name" type="String" line="111"/>
                <scope line="112">
                    <declaration name="type" type="Class" line="118"/>
                    <scope line="125"/>
                    <scope line="127">
                        <scope line="130">
                            <scope line="133"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="144"/>
            </method>
        </class>
    </source>