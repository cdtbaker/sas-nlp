<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.script.javascript">
        <import package="java.lang.reflect"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="sun.org.mozilla.javascript.internal"/>
        <class name="RhinoWrapFactory" line="32">
            <extends class="WrapFactory"/>
            <comment line="57">
                We use instance of this class to wrap security sensitive                
            </comment>
            <comment line="58">
                Java object. Please refer below.                
            </comment>
            <javadoc line="32">
                This wrap factory is used for security reasons. JSR 223 script
                  engine interface and JavaScript engine classes are run as bootstrap
                  classes. For example, java.lang.Class.forName method (when called without
                  class loader) uses caller&apos;s class loader. This may be exploited by script
                  authors to access classes otherwise not accessible. For example,
                  classes in sun. namespace are normally not accessible to untrusted
                  code and hence should not be accessible to JavaScript run from
                  untrusted code.                
                <author>
                    A. Sundararajan                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="RhinoWrapFactory" type="constructor" line="46"/>
            <declaration name="theInstance" type="RhinoWrapFactory" line="47"/>
            <method name="getInstance" type="WrapFactory" line="49">
                <scope line="50"/>
            </method>
            <class name="RhinoJavaObject" line="58">
                <extends class="NativeJavaObject"/>
                <method name="RhinoJavaObject" type="constructor" line="59">
                    <params>
                        <param name="scope" type="Scriptable"/>
                        <param name="obj" type="Object"/>
                        <param name="type" type="Class"/>
                    </params>
                    <comment line="60">
                        we pass &apos;null&apos; to object. NativeJavaObject uses                        
                    </comment>
                    <comment line="61">
                        passed &apos;type&apos; to reflect fields and methods when                        
                    </comment>
                    <comment line="62">
                        object is null.                        
                    </comment>
                    <comment line="65">
                        Now, we set actual object. &apos;javaObject&apos; is protected                        
                    </comment>
                    <comment line="66">
                        field of NativeJavaObject.                        
                    </comment>
                </method>
            </class>
            <method name="wrapAsJavaObject" type="Scriptable" line="72">
                <params>
                    <param name="cx" type="Context"/>
                    <param name="scope" type="Scriptable"/>
                    <param name="javaObject" type="Object"/>
                    <param name="staticType" type="Class"/>
                </params>
                <comment line="76">
                    Check with Security Manager whether we can expose a                    
                </comment>
                <comment line="77">
                    ClassLoader...                    
                </comment>
                <comment line="81">
                    if we fall through here, check permission succeeded.                    
                </comment>
                <comment line="89">
                    Check member access. Don&apos;t allow reflective access to                    
                </comment>
                <comment line="90">
                    non-public members. Note that we can&apos;t call checkMemberAccess                    
                </comment>
                <comment line="91">
                    because that expects exact stack depth!                    
                </comment>
                <comment line="97">
                    Now, make sure that no ClassShutter prevented Class or Member                    
                </comment>
                <comment line="98">
                    of it is accessed reflectively. Note that ClassShutter may                    
                </comment>
                <comment line="99">
                    prevent access to a class, even though SecurityManager permit.                    
                </comment>
                <comment line="109">
                    we have got some non-reflective object.                    
                </comment>
                <comment line="113">
                    Object of some sensitive class (such as sun.net.www.*                    
                </comment>
                <comment line="114">
                    objects returned from public method of java.net.URL class.                    
                </comment>
                <comment line="115">
                    We expose this object as though it is an object of some                    
                </comment>
                <comment line="116">
                    super class that is safe for access.                    
                </comment>
                <comment line="120">
                    Whenever a Java Object is wrapped, we are passed with a                    
                </comment>
                <comment line="121">
                    staticType which is the type found from environment. For                    
                </comment>
                <comment line="122">
                    example, method return type known from signature. The dynamic                    
                </comment>
                <comment line="123">
                    type would be the actual Class of the actual returned object.                    
                </comment>
                <comment line="124">
                    If the staticType is an interface, we just use that type.                    
                </comment>
                <comment line="128">
                    dynamicType is always a class type and never an interface.                    
                </comment>
                <comment line="129">
                    find an accessible super class of the dynamic type.                    
                </comment>
                <comment line="137">
                    atleast java.lang.Object has to be accessible. So, when                    
                </comment>
                <comment line="138">
                    we reach here, type variable should not be null.                    
                </comment>
                <comment line="142">
                    create custom wrapper with the &apos;safe&apos; type.                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="73"/>
                <declaration name="classShutter" type="ClassShutter" line="74"/>
                <scope line="75">
                    <scope line="78"/>
                </scope>
                <scope line="83">
                    <declaration name="name" type="String" line="84"/>
                    <scope line="85"/>
                    <scope line="87">
                        <declaration name="member" type="Member" line="88"/>
                        <scope line="92"/>
                    </scope>
                    <scope line="100">
                        <scope line="101"/>
                        <scope line="103"/>
                    </scope>
                </scope>
                <declaration name="dynamicType" type="Class" line="110"/>
                <declaration name="name" type="String" line="111"/>
                <scope line="112">
                    <declaration name="type" type="Class" line="118"/>
                    <scope line="125"/>
                    <scope line="127">
                        <scope line="130">
                            <scope line="133"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="144"/>
            </method>
        </class>
    </source>