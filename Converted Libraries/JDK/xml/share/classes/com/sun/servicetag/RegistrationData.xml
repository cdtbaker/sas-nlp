<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.servicetag">
        <import package="java.io"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.LinkedHashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="com.sun.servicetag.RegistrationDocument"/>
        <class name="RegistrationData" line="11">
            <javadoc line="11">
                A {@code RegistrationData} object is a container of one or more{@link #getServiceTags service tags} that identify the
                  components for product registration.
                  Each {@code RegistrationData} object has a {@link #getRegistrationURNuniform resource name} (URN) as its identifier.
                  &lt;a name=&quot;EnvMap&quot;&gt;&lt;/a&gt;
                  It also has an &lt;i&gt;environment map&lt;/i&gt; with
                  the following elements:
                  &lt;blockquote&gt;
                  &lt;table border=0&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;tt&gt;hostname&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;Hostname of the system&lt;/td&gt;
                  &lt;td&gt;e.g. woody&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;tt&gt;hostId&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;Host ID of the system&lt;/td&gt;
                  &lt;td&gt;e.g. 83abc1ab&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;tt&gt;osName&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;Operating system name&lt;/td&gt;
                  &lt;td&gt; e.g. SunOS&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;tt&gt;osVersion&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;Operating system version&lt;/td&gt;
                  &lt;td&gt; e.g. 5.10&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;tt&gt;osArchitecture&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;Operating system architecture&lt;/td&gt;
                  &lt;td&gt; e.g. sparc&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;tt&gt;systemModel&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;System model&lt;/td&gt;
                  &lt;td&gt; e.g. SUNW,Sun-Fire-V440&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;tt&gt;systemManufacturer&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;System manufacturer&lt;/td&gt;
                  &lt;td&gt; e.g. Oracle Corporation&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;tt&gt;cpuManufacturer&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;CPU manufacturer&lt;/td&gt;
                  &lt;td&gt; e.g. Oracle Corporation&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;tt&gt;serialNumber&lt;/tt&gt;&lt;/td&gt;
                  &lt;td&gt;System serial number&lt;/td&gt;
                  &lt;td&gt; e.g. BEL078932&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  The &lt;tt&gt;hostname&lt;/tt&gt; and &lt;tt&gt;osName&lt;/tt&gt; element must have a non-empty value.
                  If an element is not available on a system and their value will be
                  empty.
                  &lt;p&gt;
                  &lt;a name=&quot;XMLSchema&quot;&gt;
                  &lt;b&gt;Registration XML Schema&lt;/b&gt;&lt;/a&gt;
                  &lt;p&gt;
                  A {@code RegistrationData} object can be {@link #loadFromXML loaded} from
                  and {@link #storeToXML stored} into an XML file in the format described
                  by the
                  &lt;a href=&quot;https://sn-tools.central.sun.com/twiki/pub/ServiceTags/RegistrationRelayService/product_registration.xsd&quot;&gt;
                  registration data schema&lt;/a&gt;.  The registration data schema is defined by the
                  Service Tags Technology.
                  &lt;p&gt;
                  Typically the registration data is constructed at installation time
                  and stored in an XML file for later service tag lookup or registration.
                  &lt;p&gt;
                  &lt;b&gt;Example Usage&lt;/b&gt;
                  &lt;p&gt;
                  The examples below show how the {@code RegistrationData} can be
                  used for product registration.
                  Exception handling is not shown in these examples for clarity.
                  &lt;ol&gt;
                  &lt;li&gt;This example shows how the JDK creates a JDK service tag, installs it
                  in the system service tag registry and adds it to the registration data.
                  &lt;br&gt;
                  &lt;blockquote&gt;&lt;pre&gt;
                  // create a service tag object with an instance_urn
                  ServiceTag st = ServiceTag.newInstance(ServiceTag.generateInstanceURN(),
                  ....);
                  // Adds to the system service tag registry if supported
                  if (Registry.isSupported()) {
                  Registry.getSystemRegistry().addServiceTag(st);
                  }
                  // add to the registration data
                  RegistrationData registration  = new RegistrationData();
                  registration.addServiceTag(st);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;/li&gt;
                  &lt;li&gt;At this point, the registration data is ready to
                  send to Sun Connection for registration. This example shows how to register
                  the JDK via the &lt;i&gt;Registration Relay Service&lt;/i&gt;.
                  &lt;p&gt;
                  There are several registration services for Sun Connection. For example,
                  the &lt;a href=&quot;https://sn-tools.central.sun.com/twiki/bin/view/ServiceTags/RegistrationRelayService&quot;&gt;
                  Registration Relay Service&lt;/a&gt; is a web application interface that
                  processes the registration data payload sent via HTTP post
                  and hosts the registration user interface for a specified
                  registration URL.  Refer to the
                  Registration Relay Service Specification for details.
                  &lt;p&gt;
                  &lt;blockquote&gt;&lt;pre&gt;
                  // Open the connection to the URL of the registration service
                  HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
                  con.setDoInput(true);
                  con.setDoOutput(true);
                  con.setUseCaches(false);
                  con.setAllowUserInteraction(false);
                  con.setRequestMethod(&quot;POST&quot;);
                  con.setRequestProperty(&quot;Content-Type&quot;, &quot;text/xml;charset=\&quot;utf-8\&quot;&quot;);
                  con.connect();
                  // send the registration data to the registration service
                  OutputStream out = con.getOutputStream();
                  registration.storeToXML(out);
                  out.close();
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;/li&gt;
                  &lt;li&gt;This example shows how to store the registration data in an XML file.
                  for later service tag lookup or registration.
                  &lt;br&gt;
                  &lt;blockquote&gt;&lt;pre&gt;
                  BufferedOutputStream out = new BufferedOutputStream(
                  new FileOutputStream(&quot;&quot;&amp;lt;JAVA_HOME&amp;gt;/lib/servicetag/registration.xml&quot;));
                  registration.storeToXML(out);
                  out.close();
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;/li&gt;
                  &lt;li&gt;This example shows how to install service tags that are in the
                  registration data in the system service tag registry when determined
                  to be available.  The system service tag registry might not have existed
                  when the registration data was constructed.
                  &lt;br&gt;
                  &lt;blockquote&gt;&lt;pre&gt;
                  if (Registry.isSupported()) {
                  Set&amp;lt;ServiceTag&amp;gt; svctags = registration.getServiceTags();
                  for (ServiceTag st : svctags) {
                  Registry.getSystemRegistry().addServiceTag(st);
                  }
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;/li&gt;
                  &lt;/ol&gt;                
                <see>
                    &lt;a href=&quot;https://sunconnection.sun.com/inventory&quot;&gt;Sun Connection Inventory Channel&lt;/a&gt;                    
                </see>
            </javadoc>
            <declaration name="environment" type="Map&amp;lt;String,String&amp;gt;" line="162"/>
            <declaration name="svcTagMap" type="Map&amp;lt;String,ServiceTag&amp;gt;" line="163"/>
            <declaration name="urn" type="String" line="164"/>
            <javadoc line="165">
                Creates a {@code RegistrationData} object with a generated{@link #getRegistrationURN registration URN}.
                  The following keys in the {@link #getEnvironmentMap environment map}will be initialized for the configuration of the
                  running system:
                  &lt;blockquote&gt;
                  &lt;tt&gt;hostname&lt;/tt&gt;, &lt;tt&gt;osName&lt;/tt&gt;,  &lt;tt&gt;osVersion&lt;/tt&gt; and
                  &lt;tt&gt;osArchitecture&lt;/tt&gt;
                  &lt;/blockquote&gt;
                  and the value of other keys may be empty.                
            </javadoc>
            <method name="RegistrationData" type="constructor" line="175">
                <declaration name="sysEnv" type="SystemEnvironment" line="177"/>
            </method>
            <method name="RegistrationData" type="constructor" line="188">
                <params>
                    <param name="urn" type="String"/>
                </params>
            </method>
            <method name="initEnvironment" type="Map&lt;String,String&gt;" line="191">
                <declaration name="map" type="Map&amp;lt;String,String&amp;gt;" line="192"/>
            </method>
            <javadoc line="204">
                Returns the uniform resource name of this registration data
                  in this format:
                  &lt;tt&gt;urn:st:&amp;lt;32-char {@link java.util.UUID uuid}&amp;gt;&lt;/tt&gt;                
                <return>
                    the URN of this registration data.                    
                </return>
            </javadoc>
            <method name="getRegistrationURN" type="String" line="210"/>
            <javadoc line="213">
                Returns a map containing the environment information for this
                  registration data.  See the set of &lt;a href=&quot;#EnvMap&quot;&gt;keys&lt;/a&gt;
                  in the environment map. Subsequent update to the environment
                  map via the {@link #setEnvironment setEnvironment} method will not be reflected
                  in the returned map.                
                <return>
                    an environment map for this registration data.                    
                </return>
            </javadoc>
            <method name="getEnvironmentMap" type="Map&lt;String,String&gt;" line="221"/>
            <javadoc line="224">
                Sets an element of the specified {@code name} in the environment map
                  with the given {@code value}.                
                <throws>
                    IllegalArgumentException if {@code name} is not a valid key
                      in the environment map, or {@code value} is not valid.                    
                </throws>
            </javadoc>
            <method name="setEnvironment" type="void" line="230">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="231"/>
                <scope line="234"/>
                <scope line="237">
                    <scope line="238">
                        <scope line="239"/>
                    </scope>
                </scope>
                <scope line="245"/>
            </method>
            <javadoc line="249">
                Returns all service tags in this registration data.                
                <return>
                    a {@link Set Set} of the service tags
                      in this registration data.                    
                </return>
            </javadoc>
            <method name="getServiceTags" type="Set&lt;ServiceTag&gt;" line="254"/>
            <javadoc line="257">
                Adds a service tag to this registration data.
                  If the given service tag has an empty &lt;tt&gt;instance_urn&lt;/tt&gt;,
                  this method will generate a URN and place it in the copy
                  of the service tag in this registration data.
                  This method will return the {@code ServiceTag} object
                  added to this registration data.                
                <param>
                    st {@code ServiceTag} object to be added.                    
                </param>
                <return>
                    a {@code ServiceTag} object added to this registration data.                    
                </return>
                <throws>
                    IllegalArgumentException if
                      a service tag of the same {@link ServiceTag#getInstanceURN&lt;tt&gt;instance_urn&lt;/tt&gt;} already exists in the registry.                    
                </throws>
            </javadoc>
            <method name="addServiceTag" type="ServiceTag" line="269">
                <params>
                    <param name="st" type="ServiceTag"/>
                </params>
                <declaration name="svcTag" type="ServiceTag" line="270"/>
                <declaration name="instanceURN" type="String" line="271"/>
                <scope line="272"/>
                <scope line="275"/>
            </method>
            <javadoc line="280">
                Returns a service tag of the given &lt;tt&gt;instance_urn&lt;/tt&gt; in this registration
                  data.                
                <param>
                    instanceURN the &lt;tt&gt;instance_urn&lt;/tt&gt; of the service tag                    
                </param>
                <return>
                    the {@code ServiceTag} object of the given  &lt;tt&gt;instance_urn&lt;/tt&gt;
                      if exists; otherwise return {@code null}.                    
                </return>
            </javadoc>
            <method name="getServiceTag" type="ServiceTag" line="287">
                <params>
                    <param name="instanceURN" type="String"/>
                </params>
                <scope line="288"/>
            </method>
            <javadoc line="293">
                Removes a service tag of the given &lt;tt&gt;instance_urn&lt;/tt&gt; from this
                  registration data.                
                <param>
                    instanceURN the &lt;tt&gt;instance_urn&lt;/tt&gt; of
                      the service tag to be removed.                    
                </param>
                <return>
                    the removed {@code ServiceTag} object;
                      or {@code null} if the service tag does not exist in this
                      registration data.                    
                </return>
            </javadoc>
            <method name="removeServiceTag" type="ServiceTag" line="302">
                <params>
                    <param name="instanceURN" type="String"/>
                </params>
                <scope line="303"/>
                <declaration name="svcTag" type="ServiceTag" line="306"/>
                <scope line="307"/>
            </method>
            <javadoc line="312">
                Updates the &lt;tt&gt;product_defined_instance_id&lt;/tt&gt; in the service tag
                  of the given &lt;tt&gt;instance_urn&lt;/tt&gt; in this registration data.                
                <param>
                    instanceURN the &lt;tt&gt;instance_urn&lt;/tt&gt; of the service tag to be updated.                    
                </param>
                <param>
                    productDefinedInstanceID the value of the
                      &lt;tt&gt;product_defined_instance_id&lt;/tt&gt; to be set.                    
                </param>
                <return>
                    the updated {@code ServiceTag} object;
                      or {@code null} if the service tag does not exist in this
                      registration data.                    
                </return>
            </javadoc>
            <method name="updateServiceTag" type="ServiceTag" line="322">
                <params>
                    <param name="instanceURN" type="String"/>
                    <param name="productDefinedInstanceID" type="String"/>
                </params>
                <declaration name="svcTag" type="ServiceTag" line="323"/>
                <scope line="324"/>
            </method>
            <javadoc line="332">
                Reads the registration data from the XML document on the
                  specified input stream.  The XML document must be
                  in the format described by the &lt;a href=&quot;#XMLSchema&quot;&gt;
                  registration data schema&lt;/a&gt;.
                  The specified stream is closed after this method returns.                
                <param>
                    in the input stream from which to read the XML document.                    
                </param>
                <return>
                    a {@code RegistrationData} object read from the input
                      stream.                    
                </return>
                <throws>
                    IllegalArgumentException if the input stream
                      contains an invalid registration data.                    
                </throws>
                <throws>
                    IOException if an error occurred when reading from the input stream.                    
                </throws>
            </javadoc>
            <method name="loadFromXML" type="RegistrationData" line="345">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <scope line="346"/>
                <scope line="349"/>
            </method>
            <javadoc line="353">
                Writes the registration data to the specified output stream
                  in the format described by the &lt;a href=&quot;#XMLSchema&quot;&gt;
                  registration data schema&lt;/a&gt; with &quot;UTF-8&quot; encoding.
                  The specified stream remains open after this method returns.                
                <param>
                    os the output stream on which to write the XML document.                    
                </param>
                <throws>
                    IOException if an error occurred when writing to the output stream.                    
                </throws>
            </javadoc>
            <method name="storeToXML" type="void" line="361">
                <params>
                    <param name="os" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="365">
                Returns a newly allocated byte array containing the registration
                  data in XML format.                
                <return>
                    a newly allocated byte array containing the registration
                      data in XML format.                    
                </return>
            </javadoc>
            <method name="toXML" type="byte[]" line="371">
                <scope line="372">
                    <declaration name="out" type="ByteArrayOutputStream" line="373"/>
                </scope>
                <scope line="377"/>
            </method>
            <javadoc line="381">
                Returns a string representation of this registration data in XML
                  format.                
                <return>
                    a string representation of this registration data in XML
                      format.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="387">
                <scope line="388">
                    <declaration name="out" type="ByteArrayOutputStream" line="389"/>
                </scope>
                <scope line="393"/>
            </method>
        </class>
    </source>