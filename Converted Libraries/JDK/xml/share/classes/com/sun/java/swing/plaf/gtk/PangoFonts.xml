<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.gtk">
        <import package="java.awt"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="javax.swing.plaf.FontUIResource"/>
        <import package="java.util.StringTokenizer"/>
        <import package="sun.font.FontConfigManager"/>
        <import package="sun.font.FontUtilities"/>
        <class name="PangoFonts" line="36">
            <javadoc line="36">
                @author Shannon Hickey                
                <author>
                    Leif Samuelsson                    
                </author>
            </javadoc>
            <declaration name="CHARS_DIGITS" type="String" line="42"/>
            <declaration name="fontScale" type="double" line="44"/>
            <javadoc line="44">
                Calculate a default scale factor for fonts in this L&amp;F to match
                  the reported resolution of the screen.
                  Java 2D specified a default user-space scale of 72dpi.
                  This is unlikely to correspond to that of the real screen.
                  The Xserver reports a value which may be used to adjust for this.
                  and Java 2D exposes it via a normalizing transform.
                  However many Xservers report a hard-coded 90dpi whilst others report a
                  calculated value based on possibly incorrect data.
                  That is something that must be solved at the X11 level
                  Note that in an X11 multi-screen environment, the default screen
                  is the one used by the JRE so it is safe to use it here.                
            </javadoc>
            <scope line="59">
                <declaration name="ge" type="GraphicsEnvironment" line="61"/>
                <scope line="64">
                    <declaration name="gc" type="GraphicsConfiguration" line="65"/>
                    <declaration name="at" type="AffineTransform" line="67"/>
                </scope>
            </scope>
            <javadoc line="73">
                Parses a String containing a pango font description and returns
                  a Font object.                
                <param>
                    pangoName a String describing a pango font
                      e.g. "Sans Italic 10"                    
                </param>
                <return>
                    a Font object as a FontUIResource
                      or null if no suitable font could be created.                    
                </return>
            </javadoc>
            <method name="lookupFont" type="Font" line="82">
                <params>
                    <param name="pangoName" type="String"/>
                </params>
                <comment line="110">
                    Java 2D font point sizes are in a user-space scale of 72dpi.
                     GTK allows a user to configure a &quot;dpi&quot; property used to scale
                     the fonts used to match a user&apos;s preference.
                     To match the font size of GTK apps we need to obtain this DPI and
                     adjust as follows:
                     Some versions of GTK use XSETTINGS if available to dynamically
                     monitor user-initiated changes in the DPI to be used by GTK
                     apps. This value is also made available as the Xft.dpi X resource.
                     This is presumably a function of the font preferences API andor
                     the manner in which it requests the toolkit to update the default
                     for the desktop. This dual approach is probably necessary since
                     other versions of GTK - or perhaps some apps - determine the size
                     to use only at start-up from that X resource.
                     If that resource is not set then GTK scales for the DPI resolution
                     reported by the Xserver using the formula
                     DisplayHeight(dpy, screen)  DisplayHeightMM(dpy, screen)  25.4
                     (25.4mm == 1 inch).
                     JDK tracks the Xft.dpi XSETTINGS property directly so it can
                     dynamically change font size by tracking just that value.
                     If that resource is not available use the same fall back formula
                     as GTK (see calculation for fontScale).
                    
                     GTK&apos;s default setting for Xft.dpi is 96 dpi (and it seems -1
                     apparently also can mean that &quot;default&quot;). However this default
                     isn&apos;t used if there&apos;s no property set. The real default in the
                     absence of a resource is the Xserver reported dpi.
                     Finally this DPI is used to calculate the nearest Java 2D font
                     72 dpi font size.
                     There are cases in which JDK behaviour may not exactly mimic
                     GTK native app behaviour :
                     1) When a GTK app is not able to dynamically track the changes
                     (does not use XSETTINGS), JDK will resize but other apps will
                     not. This is OK as JDK is exhibiting preferred behaviour and
                     this is probably how all later GTK apps will behave
                     2) When a GTK app does not use XSETTINGS and for some reason
                     the XRDB property is not present. JDK will pick up XSETTINGS
                     and the GTK app will use the Xserver default. Since its
                     impossible for JDK to know that some other GTK app is not
                     using XSETTINGS its impossible to account for this and in any
                     case for it to be a problem the values would have to be different.
                     It also seems unlikely to arise except when a user explicitly
                     deletes the X resource database entry.
                     There also some other issues to be aware of for the future:
                     GTK specifies the Xft.dpi value as server-wide which when used
                     on systems with 2 distinct X screens with different physical DPI
                     the font sizes will inevitably appear different. It would have
                     been a more user-friendly design to further adjust that one
                     setting depending on the screen resolution to achieve perceived
                     equivalent sizes. If such a change were ever to be made in GTK
                     we would need to update for that.                    
                </comment>
                <comment line="171">
                                        
                </comment>
                <comment line="174">
                    The Java rasteriser assumes pts are in a user space of
                     72 dpi, so we need to adjust for that.                    
                </comment>
                <comment line="179">
                    If there&apos;s no property, GTK scales for the resolution
                     reported by the Xserver using the formula listed above.
                     fontScale already accounts for the 72 dpi Java 2D space.                    
                </comment>
                <comment line="186">
                                        
                </comment>
                <comment line="194">
                                        
                </comment>
                <comment line="199">
                                        
                </comment>
                <comment line="201">
                                        
                </comment>
                <declaration name="family" type="String" line="83"/>
                <declaration name="style" type="int" line="84"/>
                <declaration name="size" type="int" line="85"/>
                <declaration name="tok" type="StringTokenizer" line="87"/>
                <scope line="89">
                    <declaration name="word" type="String" line="90"/>
                    <scope line="92"/>
                    <scope line="94"/>
                    <scope line="96">
                        <scope line="97"/>
                        <scope line="99"/>
                    </scope>
                    <scope line="101">
                        <scope line="102"/>
                    </scope>
                </scope>
                <declaration name="dsize" type="double" line="162"/>
                <declaration name="dpi" type="int" line="163"/>
                <declaration name="value" type="Object" line="164"/>
                <scope line="166">
                    <scope line="168"/>
                    <scope line="171"/>
                </scope>
                <scope line="178"/>
                <scope line="188"/>
                <declaration name="fcFamilyLC" type="String" line="192"/>
                <scope line="193">
                    <declaration name="font" type="Font" line="195"/>
                </scope>
                <scope line="198">
                    <declaration name="font" type="Font" line="200"/>
                    <declaration name="fuir" type="FontUIResource" line="203"/>
                </scope>
            </method>
            <javadoc line="208">
                Parses a String containing a pango font description and returns
                  the (unscaled) font size as an integer.                
                <param>
                    pangoName a String describing a pango font                    
                </param>
                <return>
                    the size of the font described by pangoName (e.g. if
                      pangoName is "Sans Italic 10", then this method returns 10)                    
                </return>
            </javadoc>
            <method name="getFontSize" type="int" line="216">
                <params>
                    <param name="pangoName" type="String"/>
                </params>
                <declaration name="size" type="int" line="217"/>
                <declaration name="tok" type="StringTokenizer" line="219"/>
                <scope line="220">
                    <declaration name="word" type="String" line="221"/>
                    <scope line="223">
                        <scope line="224"/>
                        <scope line="226"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>