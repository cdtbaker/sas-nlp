<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.Arrays"/>
        <class name="Histogram" line="6">
            <javadoc line="6">
                Histogram derived from an integer array of events (int[]).                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="matrix" type="int[][]" line="11"/>
            <declaration name="totalWeight" type="int" line="12"/>
            <declaration name="values" type="int[]" line="13"/>
            <declaration name="counts" type="int[]" line="14"/>
            <declaration name="LOW32" type="long" line="15"/>
            <javadoc line="16">
                Build a histogram given a sequence of values.
                  To save work, the input should be sorted, but need not be.                
            </javadoc>
            <method name="Histogram" type="constructor" line="20">
                <params>
                    <param name="valueSequence" type="int[]"/>
                </params>
                <declaration name="hist2col" type="long[]" line="21"/>
                <declaration name="table" type="int[][]" line="22"/>
            </method>
            <method name="Histogram" type="constructor" line="29">
                <params>
                    <param name="valueSequence" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <javadoc line="32">
                Build a histogram given a compact matrix of counts and values.                
            </javadoc>
            <method name="Histogram" type="constructor" line="35">
                <params>
                    <param name="matrix" type="int[][]"/>
                </params>
                <declaration name="length" type="int" line="38"/>
                <declaration name="weight" type="int" line="39"/>
                <scope line="40">
                    <declaration name="rowLength" type="int" line="41"/>
                </scope>
                <declaration name="hist2col" type="long[]" line="46"/>
                <declaration name="fillp" type="int" line="47"/>
                <scope line="48">
                    <scope line="49"/>
                </scope>
                <declaration name="table" type="int[][]" line="55"/>
            </method>
            <javadoc line="60">
                Histogram of int values, reported compactly as a ragged matrix,
                  indexed by descending frequency rank.
                  &lt;p&gt;
                  Format of matrix:
                  Each row in the matrix begins with an occurrence count,
                  and continues with all int values that occur at that frequency.
                  &lt;pre&gt;
                  int[][] matrix = {
                  { count1, value11, value12, value13, ...  },
                  { count2, value21, value22, ... },
                  ...
                  }
                  &lt;/pre&gt;
                  The first column of the matrix { count1, count2, ... }
                  is sorted in descending order, and contains no duplicates.
                  Each row of the matrix (apart from its first element)
                  is sorted in ascending order, and contains no duplicates.
                  That is, each sequence { valuei1, valuei2, ... } is sorted.                
            </javadoc>
            <method name="getMatrix" type="int[][]" line="80"/>
            <method name="getRowCount" type="int" line="83"/>
            <method name="getRowFrequency" type="int" line="86">
                <params>
                    <param name="rn" type="int"/>
                </params>
            </method>
            <method name="getRowLength" type="int" line="89">
                <params>
                    <param name="rn" type="int"/>
                </params>
            </method>
            <method name="getRowValue" type="int" line="92">
                <params>
                    <param name="rn" type="int"/>
                    <param name="vn" type="int"/>
                </params>
            </method>
            <method name="getRowWeight" type="int" line="95">
                <params>
                    <param name="rn" type="int"/>
                </params>
            </method>
            <method name="getTotalWeight" type="int" line="98"/>
            <method name="getTotalLength" type="int" line="101"/>
            <javadoc line="104">
                Returns an array of all values, sorted.                
            </javadoc>
            <method name="getAllValues" type="int[]" line="107"/>
            <javadoc line="110">
                Returns an array parallel with {@link #getValues},
                  with a frequency for each value.                
            </javadoc>
            <method name="getAllFrequencies" type="int[]" line="114"/>
            <declaration name="log2" type="double" line="117"/>
            <method name="getFrequency" type="int" line="118">
                <params>
                    <param name="value" type="int"/>
                </params>
                <declaration name="pos" type="int" line="119"/>
            </method>
            <method name="getBitLength" type="double" line="124">
                <params>
                    <param name="value" type="int"/>
                </params>
                <declaration name="prob" type="double" line="125"/>
            </method>
            <method name="getRowBitLength" type="double" line="128">
                <params>
                    <param name="rn" type="int"/>
                </params>
                <declaration name="prob" type="double" line="129"/>
            </method>
            <interface name="BitMetric">
                <method name="getBitLength" type="double" line="133"/>
            </interface>
            <declaration name="bitMetric" type="BitMetric" line="135"/>
            <anonymous_class line="135">
                <method name="getBitLength" type="double" line="136">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <method name="getBitMetric" type="BitMetric" line="141"/>
            <javadoc line="144">
                bit-length is negative entropy:  -H(matrix).                
            </javadoc>
            <method name="getBitLength" type="double" line="147">
                <declaration name="sum" type="double" line="148"/>
                <scope line="149"/>
            </method>
            <javadoc line="155">
                bit-length in to another coding (cross-entropy)                
            </javadoc>
            <method name="getBitLength" type="double" line="158">
                <params>
                    <param name="len" type="BitMetric"/>
                </params>
                <declaration name="sum" type="double" line="159"/>
                <scope line="160">
                    <scope line="161"/>
                </scope>
            </method>
            <method name="round" type="double" line="167">
                <params>
                    <param name="x" type="double"/>
                    <param name="scale" type="double"/>
                </params>
            </method>
            <javadoc line="170">
                Sort rows and columns.
                  Merge adjacent rows with the same key element [0].
                  Make a fresh copy of all of it.                
            </javadoc>
            <method name="normalizeMatrix" type="int[][]" line="175">
                <params>
                    <param name="matrix" type="int[][]"/>
                </params>
                <declaration name="rowMap" type="long[]" line="176"/>
                <scope line="177">
                    <declaration name="count" type="int" line="179"/>
                </scope>
                <declaration name="newMatrix" type="int[][]" line="184"/>
                <declaration name="prevCount" type="int" line="185"/>
                <declaration name="fillp1" type="int" line="186"/>
                <declaration name="fillp2" type="int" line="187"/>
                <scope line="188">
                    <declaration name="row" type="int[]" line="189"/>
                    <scope line="190">
                        <declaration name="rowMapEntry" type="long" line="191"/>
                    </scope>
                    <scope line="196"/>
                    <scope line="199">
                        <declaration name="length" type="int" line="200"/>
                        <scope line="201">
                            <declaration name="row0" type="int[]" line="202"/>
                        </scope>
                        <declaration name="row1" type="int[]" line="206"/>
                        <declaration name="rfillp" type="int" line="208"/>
                        <scope line="209">
                            <declaration name="row0" type="int[]" line="210"/>
                        </scope>
                        <scope line="215">
                            <declaration name="jfillp" type="int" line="217"/>
                            <scope line="218"/>
                            <scope line="221">
                                <declaration name="newRow1" type="int[]" line="222"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="236"/>
            </method>
            <method name="getRowTitles" type="String[]" line="243">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="totalUnique" type="int" line="244"/>
                <declaration name="ltotalWeight" type="int" line="245"/>
                <declaration name="histTitles" type="String[]" line="246"/>
                <declaration name="cumWeight" type="int" line="247"/>
                <declaration name="cumUnique" type="int" line="248"/>
                <scope line="249">
                    <declaration name="count" type="int" line="250"/>
                    <declaration name="unique" type="int" line="251"/>
                    <declaration name="weight" type="int" line="252"/>
                    <declaration name="wpct" type="long" line="255"/>
                    <declaration name="upct" type="long" line="256"/>
                    <declaration name="len" type="double" line="257"/>
                </scope>
            </method>
            <javadoc line="263">
                Print a report of this histogram.                
            </javadoc>
            <method name="print" type="void" line="266">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
            </method>
            <javadoc line="269">
                Print a report of this histogram.                
            </javadoc>
            <method name="print" type="void" line="272">
                <params>
                    <param name="name" type="String"/>
                    <param name="out" type="PrintStream"/>
                </params>
            </method>
            <javadoc line="275">
                Print a report of this histogram.                
            </javadoc>
            <method name="print" type="void" line="278">
                <params>
                    <param name="name" type="String"/>
                    <param name="histTitles" type="String[]"/>
                    <param name="out" type="PrintStream"/>
                </params>
                <declaration name="totalUnique" type="int" line="279"/>
                <declaration name="ltotalWeight" type="int" line="280"/>
                <declaration name="tlen" type="double" line="281"/>
                <declaration name="avgLen" type="double" line="282"/>
                <declaration name="avg" type="double" line="283"/>
                <declaration name="title" type="String" line="284"/>
                <scope line="285"/>
                <scope line="288">
                    <declaration name="buf" type="StringBuffer" line="290"/>
                    <scope line="291">
                        <scope line="294"/>
                    </scope>
                </scope>
            </method>
            <method name="makeMatrix" type="int[][]" line="303">
                <params>
                    <param name="hist2col" type="long[]"/>
                </params>
                <declaration name="counts" type="int[]" line="305"/>
                <scope line="306"/>
                <declaration name="countHist" type="long[]" line="309"/>
                <declaration name="matrix" type="int[][]" line="310"/>
                <declaration name="histp" type="int" line="311"/>
                <declaration name="countp" type="int" line="312"/>
                <scope line="313">
                    <declaration name="countAndRep" type="long" line="314"/>
                    <declaration name="count" type="int" line="315"/>
                    <declaration name="repeat" type="int" line="316"/>
                    <declaration name="row" type="int[]" line="317"/>
                    <scope line="319">
                        <declaration name="countAndValue" type="long" line="320"/>
                    </scope>
                </scope>
            </method>
            <method name="makeTable" type="int[][]" line="329">
                <params>
                    <param name="hist2col" type="long[]"/>
                </params>
                <declaration name="table" type="int[][]" line="330"/>
                <scope line="331"/>
            </method>
            <javadoc line="337">
                Simple two-column histogram.  Contains repeated counts.
                  Assumes input is sorted.  Does not sort output columns.
                  &lt;p&gt;
                  Format of result:
                  &lt;pre&gt;
                  long[] hist = {
                  (count1 &lt;&lt; 32) | (value1),
                  (count2 &lt;&lt; 32) | (value2),
                  ...
                  }
                  &lt;/pre&gt;
                  In addition, the sequence {valuei...} is guaranteed to be sorted.
                  Note that resorting this using Arrays.sort() will reorder the
                  entries by increasing count.                
            </javadoc>
            <method name="computeHistogram2Col" type="long[]" line="353">
                <params>
                    <param name="sortedValues" type="int[]"/>
                </params>
                <declaration name="hist" type="long[]" line="360"/>
                <scope line="361">
                    <declaration name="prevIndex" type="int" line="362"/>
                    <declaration name="prevValue" type="int" line="363"/>
                    <declaration name="prevCount" type="int" line="364"/>
                    <scope line="365">
                        <declaration name="thisValue" type="int" line="366"/>
                        <scope line="369"/>
                        <scope line="372">
                            <scope line="373"/>
                        </scope>
                    </scope>
                    <scope line="381"/>
                    <scope line="384"/>
                </scope>
            </method>
            <javadoc line="390">
                Regroup the histogram, so that it becomes an approximate histogram
                  whose rows are of the given lengths.
                  If matrix rows must be split, the latter parts (larger values)
                  are placed earlier in the new matrix.
                  If matrix rows are joined, they are resorted into ascending order.
                  In the new histogram, the counts are averaged over row entries.                
            </javadoc>
            <method name="regroupHistogram" type="int[][]" line="398">
                <params>
                    <param name="matrix" type="int[][]"/>
                    <param name="groups" type="int[]"/>
                </params>
                <declaration name="oldEntries" type="long" line="399"/>
                <scope line="400"/>
                <declaration name="newEntries" type="long" line="403"/>
                <scope line="404"/>
                <scope line="407">
                    <declaration name="newlen" type="int" line="408"/>
                    <declaration name="ok" type="long" line="409"/>
                    <scope line="410">
                        <scope line="411">
                            <declaration name="newGroups" type="int[]" line="412"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="422">
                    <declaration name="excess" type="long" line="423"/>
                    <declaration name="newGroups" type="int[]" line="424"/>
                </scope>
                <declaration name="newMatrix" type="int[][]" line="429"/>
                <declaration name="i" type="int" line="430"/>
                <declaration name="jMin" type="int" line="431"/>
                <declaration name="jMax" type="int" line="432"/>
                <scope line="433">
                    <declaration name="groupLength" type="int" line="434"/>
                    <declaration name="group" type="int[]" line="435"/>
                    <declaration name="groupWeight" type="long" line="436"/>
                    <declaration name="njFill" type="int" line="438"/>
                    <scope line="439">
                        <declaration name="len" type="int" line="440"/>
                        <scope line="441"/>
                    </scope>
                </scope>
            </method>
            <method name="makeByteHistogram" type="Histogram" line="458">
                <params>
                    <param name="bytes" type="InputStream"/>
                </params>
                <declaration name="buf" type="byte[]" line="459"/>
                <declaration name="tally" type="int[]" line="460"/>
                <scope line="461">
                    <scope line="462"/>
                </scope>
                <declaration name="matrix" type="int[][]" line="466"/>
                <scope line="467"/>
            </method>
            <javadoc line="473">
                Slice and sort the given input array.                
            </javadoc>
            <method name="sortedSlice" type="int[]" line="476">
                <params>
                    <param name="valueSequence" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="477"/>
                <scope line="480">
                    <declaration name="slice" type="int[]" line="481"/>
                </scope>
            </method>
            <javadoc line="487">
                Tell if an array is sorted.                
            </javadoc>
            <method name="isSorted" type="boolean" line="490">
                <params>
                    <param name="values" type="int[]"/>
                    <param name="from" type="int"/>
                    <param name="strict" type="boolean"/>
                </params>
                <scope line="491">
                    <scope line="492"/>
                </scope>
            </method>
            <javadoc line="498">
                Clone and sort the array, if not already sorted.                
            </javadoc>
            <method name="maybeSort" type="int[]" line="501">
                <params>
                    <param name="values" type="int[]"/>
                </params>
                <scope line="502"/>
            </method>
            <method name="assertWellFormed" type="boolean" line="508">
                <params>
                    <param name="valueSequence" type="int[]"/>
                </params>
            </method>
        </class>
    </source>