<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="AdaptiveCoding" line="34">
            <comment line="67">
                CodingMethod methods.                
            </comment>
            <comment line="71">
                writeArrayTo must be coded iteratively, not recursively:                
            </comment>
            <comment line="159">
                Is K of the form ((KB:[0..255])+1) * 16^(KX:{0..3])?                
            </comment>
            <comment line="272">
                public static void main(String av[]) {
                int[][] samples = {
                {1,2,3,4,5},
                {254,255,256,256+116,256+216},
                {0xfd,0xfe,0xff,0x100,0x110,0x120,0x130},
                {0xfd0,0xfe0,0xff0,0x1000,0x1100,0x1200,0x1300},
                {0xfd00,0xfe00,0xff00,0x10000,0x11000,0x12000,0x13000},
                {0xfd000,0xfe000,0xff000,0x100000}
                };
                for (int i = 0; i &lt; samples.length; i++) {
                for (int j = 0; j &lt; samples[i].length; j++) {
                int K = samples[i][j];
                int KX = getKXOf(K);
                int KB = getKBOf(K);
                System.out.println(&quot;K=&quot;+Integer.toHexString(K)+
                &quot; KX=&quot;+KX+&quot; KB=&quot;+KB);
                assert(isCodableLength(K));
                assert(K == decodeK(KX, KB));
                if (j == 0)  continue;
                int K1 = samples[i][j-1];
                assert(K == getNextK(K1));
                }
                }
                }                
            </comment>
            <implements interface="CodingMethod"/>
            <javadoc line="34">
                Adaptive coding.
                  See the section &quot;Adaptive Encodings&quot; in the Pack200 spec.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="headCoding" type="CodingMethod" line="40"/>
            <declaration name="headLength" type="int" line="41"/>
            <declaration name="tailCoding" type="CodingMethod" line="42"/>
            <method name="AdaptiveCoding" type="constructor" line="44">
                <params>
                    <param name="headLength" type="int"/>
                    <param name="headCoding" type="CodingMethod"/>
                    <param name="tailCoding" type="CodingMethod"/>
                </params>
            </method>
            <method name="setHeadCoding" type="void" line="51">
                <params>
                    <param name="headCoding" type="CodingMethod"/>
                </params>
            </method>
            <method name="setHeadLength" type="void" line="54">
                <params>
                    <param name="headLength" type="int"/>
                </params>
            </method>
            <method name="setTailCoding" type="void" line="58">
                <params>
                    <param name="tailCoding" type="CodingMethod"/>
                </params>
            </method>
            <method name="isTrivial" type="boolean" line="62"/>
            <method name="writeArrayTo" type="void" line="67">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="a" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <method name="writeArray" type="void" line="71">
                <params>
                    <param name="run" type="AdaptiveCoding"/>
                    <param name="out" type="OutputStream"/>
                    <param name="a" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="72">
                    <declaration name="mid" type="int" line="73"/>
                    <scope line="77"/>
                </scope>
            </method>
            <method name="readArrayFrom" type="void" line="86">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="a" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <method name="readArray" type="void" line="89">
                <params>
                    <param name="run" type="AdaptiveCoding"/>
                    <param name="in" type="InputStream"/>
                    <param name="a" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="90">
                    <declaration name="mid" type="int" line="91"/>
                    <scope line="95"/>
                </scope>
            </method>
            <declaration name="KX_MIN" type="int" line="104"/>
            <declaration name="KX_MAX" type="int" line="105"/>
            <declaration name="KX_LG2BASE" type="int" line="106"/>
            <declaration name="KX_BASE" type="int" line="107"/>
            <declaration name="KB_MIN" type="int" line="109"/>
            <declaration name="KB_MAX" type="int" line="110"/>
            <declaration name="KB_OFFSET" type="int" line="111"/>
            <declaration name="KB_DEFAULT" type="int" line="112"/>
            <method name="getKXOf" type="int" line="114">
                <params>
                    <param name="K" type="int"/>
                </params>
                <scope line="115"/>
            </method>
            <method name="getKBOf" type="int" line="123">
                <params>
                    <param name="K" type="int"/>
                </params>
                <declaration name="KX" type="int" line="124"/>
            </method>
            <method name="decodeK" type="int" line="130">
                <params>
                    <param name="KX" type="int"/>
                    <param name="KB" type="int"/>
                </params>
            </method>
            <method name="getNextK" type="int" line="136">
                <params>
                    <param name="K" type="int"/>
                </params>
                <comment line="137">
                    1st K value                    
                </comment>
                <comment line="140">
                    This is the increment we expect to apply:                    
                </comment>
                <comment line="144">
                    cut off stray low-order bits                    
                </comment>
                <declaration name="KX" type="int" line="138"/>
                <declaration name="unit" type="int" line="141"/>
                <declaration name="mask" type="int" line="142"/>
                <declaration name="K1" type="int" line="143"/>
                <scope line="145"/>
                <declaration name="mask2" type="int" line="151"/>
            </method>
            <method name="isCodableLength" type="boolean" line="159">
                <params>
                    <param name="K" type="int"/>
                </params>
                <declaration name="KX" type="int" line="160"/>
                <declaration name="unit" type="int" line="162"/>
                <declaration name="mask" type="int" line="163"/>
            </method>
            <method name="getMetaCoding" type="byte[]" line="167">
                <params>
                    <param name="dflt" type="Coding"/>
                </params>
                <comment line="168">
                    assert(!isTrivial()); // can happen                    
                </comment>
                <comment line="169">
                    See the isCodableLength restriction in CodingChooser.                    
                </comment>
                <declaration name="bytes" type="ByteArrayOutputStream" line="170"/>
                <scope line="171"/>
                <scope line="173"/>
            </method>
            <method name="makeMetaCoding" type="void" line="180">
                <params>
                    <param name="run" type="AdaptiveCoding"/>
                    <param name="dflt" type="Coding"/>
                    <param name="bytes" type="ByteArrayOutputStream"/>
                </params>
                <comment line="189">
                    arbitrary choice                    
                </comment>
                <comment line="201">
                    tail call, to avoid deep stack recursion                    
                </comment>
                <scope line="181">
                    <declaration name="headCoding" type="CodingMethod" line="182"/>
                    <declaration name="headLength" type="int" line="183"/>
                    <declaration name="tailCoding" type="CodingMethod" line="184"/>
                    <declaration name="K" type="int" line="185"/>
                    <declaration name="ADef" type="int" line="187"/>
                    <declaration name="BDef" type="int" line="188"/>
                    <declaration name="ABDef" type="int" line="190"/>
                    <declaration name="KX" type="int" line="192"/>
                    <declaration name="KB" type="int" line="193"/>
                    <declaration name="KBFlag" type="int" line="195"/>
                    <scope line="199"/>
                </scope>
            </method>
            <method name="parseMetaCoding" type="int" line="207">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pos" type="int"/>
                    <param name="dflt" type="Coding"/>
                    <param name="res" type="CodingMethod"/>
                </params>
                <comment line="209">
                    backup                    
                </comment>
                <declaration name="op" type="int" line="208"/>
                <declaration name="prevc" type="AdaptiveCoding" line="210"/>
                <scope line="211">
                    <declaration name="KX" type="int" line="215"/>
                    <declaration name="KBFlag" type="int" line="216"/>
                    <declaration name="ABDef" type="int" line="217"/>
                    <declaration name="ADef" type="int" line="219"/>
                    <declaration name="BDef" type="int" line="220"/>
                    <declaration name="ACode" type="CodingMethod[]" line="221"/>
                    <declaration name="KB" type="int" line="222"/>
                    <scope line="225"/>
                    <scope line="229"/>
                    <scope line="232"/>
                    <declaration name="newc" type="AdaptiveCoding" line="235"/>
                    <scope line="237"/>
                    <scope line="239"/>
                </scope>
            </method>
            <method name="keyString" type="String" line="247">
                <params>
                    <param name="m" type="CodingMethod"/>
                </params>
            </method>
            <method name="toString" type="String" line="252">
                <declaration name="res" type="StringBuilder" line="253"/>
                <declaration name="run" type="AdaptiveCoding" line="254"/>
                <scope line="256">
                    <scope line="259"/>
                </scope>
            </method>
        </class>
    </source>