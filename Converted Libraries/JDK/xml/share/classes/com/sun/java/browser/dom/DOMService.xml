<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.browser.dom">
        <class name="DOMService" line="2">
            <javadoc line="3">
                Returns new instance of a DOMService. The implementation
                  of the DOMService returns depends on the setting of the
                  com.sun.java.browser.dom.DOMServiceProvider property or,
                  if the property is not set, a platform specific default.
                  Throws DOMUnsupportedException if the DOMService is not
                  available to the obj.                
                <param>
                    obj Object to leverage the DOMService                    
                </param>
            </javadoc>
            <method name="getService" type="DOMService" line="12">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="13">
                    <declaration name="provider" type="String" line="14"/>
                    <declaration name="clazz" type="Class" line="15"/>
                </scope>
                <scope line="18"/>
            </method>
            <javadoc line="22">
                An empty constructor is provided. Implementations of this
                  abstract class must provide a public no-argument constructor
                  in order for the static getService() method to work correctly.
                  Application programmers should not be able to directly
                  construct implementation subclasses of this abstract subclass.                
            </javadoc>
            <method name="DOMService" type="constructor" line="29"/>
            <method name="invokeAndWait" type="Object" line="31"/>
            <javadoc line="31">
                Causes action.run() to be executed synchronously on the
                  DOM action dispatching thread. This call will block until all
                  pending DOM actions have been processed and (then)
                  action.run() returns. This method should be used when an
                  application thread needs to access the browser&apos;s DOM.
                  It should not be called from the DOMActionDispatchThread.
                  Note that if the DOMAction.run() method throws an uncaught
                  exception (on the DOM action dispatching thread),  it&apos;s caught
                  and re-thrown, as an DOMAccessException, on the caller&apos;s thread.
                  If the DOMAction.run() method throws any DOM security related
                  exception (on the DOM action dispatching thread), it&apos;s caught
                  and re-thrown, as an DOMSecurityException, on the caller&apos;s thread.                
                <param>
                    action DOMAction.                    
                </param>
            </javadoc>
            <method name="invokeLater" type="void" line="47"/>
            <javadoc line="47">
                Causes action.run() to be executed asynchronously on the
                  DOM action dispatching thread. This method should be used
                  when an application thread needs to access the browser&apos;s
                  DOM. It should not be called from the DOMActionDispatchThread.
                  Note that if the DOMAction.run() method throws an uncaught
                  exception (on the DOM action dispatching thread),  it will not be
                  caught and re-thrown on the caller&apos;s thread.                
                <param>
                    action DOMAction.                    
                </param>
            </javadoc>
        </class>
    </source>