<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="com.sun.java.util.jar.pack.ConstantPool.ClassEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Entry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Index"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.MemberEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.SignatureEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Utf8Entry"/>
        <import package="com.sun.java.util.jar.pack.Package.Class"/>
        <import package="com.sun.java.util.jar.pack.Package.File"/>
        <import package="com.sun.java.util.jar.pack.Package.InnerClass"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.EOFException"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.FilterInputStream"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Map"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.Set"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="PackageReader" line="58">
            <extends class="BandStructure"/>
            <comment line="201">
                Temporary count values, until band decoding gets rolling.                
            </comment>
            <comment line="215">
                Local routine used to parse fixed-format scalars                
            </comment>
            <comment line="216">
                in the file_header:                
            </comment>
            <comment line="951">
                placeholder for later flag read-in                
            </comment>
            <comment line="1332">
                Generic routines for reading attributes of                
            </comment>
            <comment line="1333">
                classes, fields, methods, and codes.                
            </comment>
            <comment line="1334">
                The holders is a global list, already collected,                
            </comment>
            <comment line="1335">
                of attribute &quot;customers&quot;.                
            </comment>
            <comment line="1388">
                Read flags and count the attributes that are to be placed                
            </comment>
            <comment line="1389">
                on the given holders.                
            </comment>
            <javadoc line="58">
                Reader for a package file.                
                <see>
                    PackageWriter                    
                </see>
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="pkg" type="Package" line="65"/>
            <declaration name="bytes" type="byte[]" line="66"/>
            <declaration name="in" type="LimitedBuffer" line="67"/>
            <method name="PackageReader" type="constructor" line="69">
                <params>
                    <param name="pkg" type="Package"/>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <class name="LimitedBuffer" line="74">
                <extends class="BufferedInputStream"/>
                <comment line="83">
                    total number of charburgers served                    
                </comment>
                <comment line="84">
                    ...as of this value of super.pos                    
                </comment>
                <comment line="85">
                    current declared limit                    
                </comment>
                <javadoc line="74">
                    A buffered input stream which is careful not to
                      read its underlying stream ahead of a given mark,
                      called the &apos;readLimit&apos;.  This property declares
                      the maximum number of characters that future reads
                      can consume from the underlying stream.                    
                </javadoc>
                <declaration name="served" type="long" line="82"/>
                <declaration name="servedPos" type="int" line="83"/>
                <declaration name="limit" type="long" line="84"/>
                <declaration name="buffered" type="long" line="85"/>
                <method name="atLimit" type="boolean" line="86">
                    <declaration name="z" type="boolean" line="87"/>
                </method>
                <method name="getBytesServed" type="long" line="91"/>
                <method name="setReadLimit" type="void" line="94">
                    <params>
                        <param name="newLimit" type="long"/>
                    </params>
                </method>
                <method name="getReadLimit" type="long" line="100"/>
                <method name="read" type="int" line="106">
                    <comment line="108">
                        fast path                        
                    </comment>
                    <scope line="107"/>
                    <declaration name="ch" type="int" line="112"/>
                </method>
                <method name="read" type="int" line="118">
                    <params>
                        <param name="b" type="byte"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="nr" type="int" line="120"/>
                </method>
                <method name="skip" type="long" line="126">
                    <params>
                        <param name="n" type="long"/>
                    </params>
                </method>
                <method name="LimitedBuffer" type="constructor" line="129">
                    <params>
                        <param name="originalIn" type="InputStream"/>
                    </params>
                    <anonymous_class line="132">
                        <method name="read" type="int" line="133"/>
                        <method name="read" type="int" line="139">
                            <params>
                                <param name="b" type="byte"/>
                                <param name="off" type="int"/>
                                <param name="len" type="int"/>
                            </params>
                            <scope line="142">
                                <declaration name="remaining" type="long" line="143"/>
                            </scope>
                            <declaration name="nr" type="int" line="147"/>
                        </method>
                    </anonymous_class>
                </method>
            </class>
            <method name="read" type="void" line="155">
                <comment line="158">
                    pack200_archive:                    
                </comment>
                <comment line="159">
                    file_header                    
                </comment>
                <comment line="160">
                    *band_headers :BYTE1                    
                </comment>
                <comment line="161">
                    cp_bands                    
                </comment>
                <comment line="162">
                    attr_definition_bands                    
                </comment>
                <comment line="163">
                    ic_bands                    
                </comment>
                <comment line="164">
                    class_bands                    
                </comment>
                <comment line="165">
                    bc_bands                    
                </comment>
                <comment line="166">
                    file_bands                    
                </comment>
                <comment line="169">
                    cp_bands                    
                </comment>
                <comment line="174">
                    file_bands                    
                </comment>
                <comment line="180">
                    As a post-pass, build constant pools and inner classes.                    
                </comment>
                <comment line="193">
                    if (verbose &gt; 0)  ee.printStackTrace();                    
                </comment>
                <declaration name="ok" type="boolean" line="156"/>
                <scope line="157">
                    <declaration name="classes" type="Class[]" line="172"/>
                    <scope line="181"/>
                </scope>
                <scope line="186"/>
            </method>
            <declaration name="tagCount" type="int[]" line="201"/>
            <declaration name="numFiles" type="int" line="202"/>
            <declaration name="numAttrDefs" type="int" line="203"/>
            <declaration name="numInnerClasses" type="int" line="204"/>
            <declaration name="numClasses" type="int" line="205"/>
            <method name="readFileHeader" type="void" line="207">
                <comment line="208">
                    file_header:                    
                </comment>
                <comment line="209">
                    archive_magic archive_header                    
                </comment>
            </method>
            <method name="getMagicInt32" type="int" line="216">
                <declaration name="res" type="int" line="217"/>
                <scope line="218"/>
            </method>
            <declaration name="MAGIC_BYTES" type="int" line="225"/>
            <method name="readArchiveMagic" type="void" line="227">
                <comment line="229">
                    Read a minimum of bytes in the first gulp.                    
                </comment>
                <comment line="232">
                    archive_magic:                    
                </comment>
                <comment line="233">
                    #archive_magic_word :BYTE1[4]                    
                </comment>
                <comment line="237">
                    read and check magic numbers:                    
                </comment>
            </method>
            <method name="readArchiveHeader" type="void" line="242">
                <comment line="243">
                    archive_header:                    
                </comment>
                <comment line="244">
                    #archive_minver :UNSIGNED5[1]                    
                </comment>
                <comment line="245">
                    #archive_majver :UNSIGNED5[1]                    
                </comment>
                <comment line="246">
                    #archive_options :UNSIGNED5[1]                    
                </comment>
                <comment line="247">
                    (archive_file_counts) ** (#have_file_headers)                    
                </comment>
                <comment line="248">
                    (archive_special_counts) ** (#have_special_formats)                    
                </comment>
                <comment line="249">
                    cp_counts                    
                </comment>
                <comment line="250">
                    class_counts                    
                </comment>
                <comment line="251">
                                        
                </comment>
                <comment line="252">
                    archive_file_counts:                    
                </comment>
                <comment line="253">
                    #archive_size_hi :UNSIGNED5[1]                    
                </comment>
                <comment line="254">
                    #archive_size_lo :UNSIGNED5[1]                    
                </comment>
                <comment line="255">
                    #archive_next_count :UNSIGNED5[1]                    
                </comment>
                <comment line="256">
                    #archive_modtime :UNSIGNED5[1]                    
                </comment>
                <comment line="257">
                    #file_count :UNSIGNED5[1]                    
                </comment>
                <comment line="258">
                                        
                </comment>
                <comment line="259">
                    class_counts:                    
                </comment>
                <comment line="260">
                    #ic_count :UNSIGNED5[1]                    
                </comment>
                <comment line="261">
                    #default_class_minver :UNSIGNED5[1]                    
                </comment>
                <comment line="262">
                    #default_class_majver :UNSIGNED5[1]                    
                </comment>
                <comment line="263">
                    #class_count :UNSIGNED5[1]                    
                </comment>
                <comment line="264">
                                        
                </comment>
                <comment line="265">
                    archive_special_counts:                    
                </comment>
                <comment line="266">
                    #band_headers_size :UNSIGNED5[1]                    
                </comment>
                <comment line="267">
                    #attr_definition_count :UNSIGNED5[1]                    
                </comment>
                <comment line="268">
                                        
                </comment>
                <comment line="281">
                    detect archive optional fields in archive header                    
                </comment>
                <comment line="287">
                    now we are ready to use the data:                    
                </comment>
                <comment line="294">
                    Set the limit, now, up to the file_bits.                    
                </comment>
                <comment line="295">
                    for debug only                    
                </comment>
                <comment line="298">
                    remove limitation                    
                </comment>
                <comment line="338">
                    set some derived archive bits                    
                </comment>
                <declaration name="haveSpecial" type="boolean" line="282"/>
                <declaration name="haveFiles" type="boolean" line="283"/>
                <declaration name="haveNumbers" type="boolean" line="284"/>
                <scope line="290">
                    <declaration name="sizeHi" type="long" line="291"/>
                    <declaration name="sizeLo" type="long" line="292"/>
                </scope>
                <scope line="296"/>
                <declaration name="remainingHeaders" type="int" line="303"/>
                <scope line="311"/>
                <scope line="315"/>
                <scope line="320"/>
                <scope line="323"/>
                <scope line="339"/>
            </method>
            <method name="readBandHeaders" type="void" line="344">
                <comment line="346">
                    Leave room to pushback the initial XB byte.                    
                </comment>
                <scope line="348"/>
            </method>
            <method name="readConstantPoolCounts" type="void" line="354">
                <params>
                    <param name="haveNumbers" type="boolean"/>
                </params>
                <comment line="355">
                    size the constant pools:                    
                </comment>
                <comment line="357">
                    cp_counts:                    
                </comment>
                <comment line="358">
                    #cp_Utf8_count :UNSIGNED5[1]                    
                </comment>
                <comment line="359">
                    (cp_number_counts) ** (#have_cp_numbers)                    
                </comment>
                <comment line="360">
                    #cp_String_count :UNSIGNED5[1]                    
                </comment>
                <comment line="361">
                    #cp_Class_count :UNSIGNED5[1]                    
                </comment>
                <comment line="362">
                    #cp_Signature_count :UNSIGNED5[1]                    
                </comment>
                <comment line="363">
                    #cp_Descr_count :UNSIGNED5[1]                    
                </comment>
                <comment line="364">
                    #cp_Field_count :UNSIGNED5[1]                    
                </comment>
                <comment line="365">
                    #cp_Method_count :UNSIGNED5[1]                    
                </comment>
                <comment line="366">
                    #cp_Imethod_count :UNSIGNED5[1]                    
                </comment>
                <comment line="367">
                                        
                </comment>
                <comment line="368">
                    cp_number_counts:                    
                </comment>
                <comment line="369">
                    #cp_Int_count :UNSIGNED5[1]                    
                </comment>
                <comment line="370">
                    #cp_Float_count :UNSIGNED5[1]                    
                </comment>
                <comment line="371">
                    #cp_Long_count :UNSIGNED5[1]                    
                </comment>
                <comment line="372">
                    #cp_Double_count :UNSIGNED5[1]                    
                </comment>
                <comment line="373">
                                        
                </comment>
                <comment line="376">
                    These four counts are optional.                    
                </comment>
                <scope line="356">
                    <declaration name="tag" type="byte" line="374"/>
                    <scope line="375"/>
                </scope>
            </method>
            <method name="getCPIndex" type="Index" line="389">
                <params>
                    <param name="tag" type="byte"/>
                </params>
            </method>
            <method name="initCPIndex" type="Index" line="392">
                <params>
                    <param name="tag" type="byte"/>
                    <param name="cpMap" type="Entry[]"/>
                </params>
                <scope line="393">
                    <scope line="394"/>
                </scope>
                <declaration name="index" type="Index" line="398"/>
            </method>
            <method name="readConstantPool" type="void" line="404">
                <comment line="405">
                    cp_bands:                    
                </comment>
                <comment line="406">
                    cp_Utf8                    
                </comment>
                <comment line="407">
                    *cp_Int :UDELTA5                    
                </comment>
                <comment line="408">
                    *cp_Float :UDELTA5                    
                </comment>
                <comment line="409">
                    cp_Long                    
                </comment>
                <comment line="410">
                    cp_Double                    
                </comment>
                <comment line="411">
                    *cp_String :UDELTA5  (cp_Utf8)                    
                </comment>
                <comment line="412">
                    *cp_Class :UDELTA5  (cp_Utf8)                    
                </comment>
                <comment line="413">
                    cp_Signature                    
                </comment>
                <comment line="414">
                    cp_Descr                    
                </comment>
                <comment line="415">
                    cp_Field                    
                </comment>
                <comment line="416">
                    cp_Method                    
                </comment>
                <comment line="417">
                    cp_Imethod                    
                </comment>
                <comment line="437">
                    coding handles signs OK                    
                </comment>
                <comment line="453">
                    cp_Long:                    
                </comment>
                <comment line="454">
                    *cp_Long_hi :UDELTA5                    
                </comment>
                <comment line="455">
                    *cp_Long_lo :DELTA5                    
                </comment>
                <comment line="470">
                    cp_Double:                    
                </comment>
                <comment line="471">
                    *cp_Double_hi :UDELTA5                    
                </comment>
                <comment line="472">
                    *cp_Double_lo :DELTA5                    
                </comment>
                <comment line="509">
                    cp_Descr:                    
                </comment>
                <comment line="510">
                    *cp_Descr_type :DELTA5  (cp_Signature)                    
                </comment>
                <comment line="511">
                    *cp_Descr_name :UDELTA5  (cp_Utf8)                    
                </comment>
                <scope line="421">
                    <declaration name="tag" type="byte" line="422"/>
                    <declaration name="len" type="int" line="423"/>
                    <declaration name="cpMap" type="Entry[]" line="425"/>
                    <scope line="436">
                        <declaration name="x" type="int" line="437"/>
                    </scope>
                    <scope line="445">
                        <declaration name="x" type="int" line="446"/>
                        <declaration name="fx" type="float" line="447"/>
                    </scope>
                    <scope line="460">
                        <declaration name="hi" type="long" line="461"/>
                        <declaration name="lo" type="long" line="462"/>
                        <declaration name="x" type="long" line="463"/>
                    </scope>
                    <scope line="477">
                        <declaration name="hi" type="long" line="478"/>
                        <declaration name="lo" type="long" line="479"/>
                        <declaration name="x" type="long" line="480"/>
                        <declaration name="dx" type="double" line="481"/>
                    </scope>
                    <scope line="491"/>
                    <scope line="500"/>
                    <scope line="518">
                        <declaration name="ref" type="Entry" line="519"/>
                        <declaration name="ref2" type="Entry" line="520"/>
                    </scope>
                    <declaration name="index" type="Index" line="540"/>
                    <scope line="542">
                        <scope line="543"/>
                    </scope>
                </scope>
            </method>
            <method name="readUtf8Bands" type="void" line="554">
                <params>
                    <param name="cpMap" type="Entry[]"/>
                </params>
                <comment line="555">
                    cp_Utf8:                    
                </comment>
                <comment line="556">
                    *cp_Utf8_prefix :DELTA5                    
                </comment>
                <comment line="557">
                    *cp_Utf8_suffix :UNSIGNED5                    
                </comment>
                <comment line="558">
                    *cp_Utf8_chars :CHAR3                    
                </comment>
                <comment line="559">
                    *cp_Utf8_big_suffix :DELTA5                    
                </comment>
                <comment line="560">
                    (*cp_Utf8_big_chars :DELTA5)                    
                </comment>
                <comment line="561">
                    ** length(cp_Utf8_big_suffix)                    
                </comment>
                <comment line="564">
                    nothing to read                    
                </comment>
                <comment line="566">
                    Bands have implicit leading zeroes, for the empty string:                    
                </comment>
                <comment line="570">
                    First band:  Read lengths of shared prefixes.                    
                </comment>
                <comment line="574">
                    Second band:  Read lengths of unshared suffixes:                    
                </comment>
                <comment line="581">
                    Third band:  Read the char values in the unshared suffixes:                    
                </comment>
                <comment line="587">
                    chars are packed in cp_Utf8_big_chars                    
                </comment>
                <comment line="600">
                    Fourth band:  Go back and size the specially packed strings.                    
                </comment>
                <comment line="619">
                    Fifth band(s):  Get the specially packed characters.                    
                </comment>
                <comment line="625">
                    already input                    
                </comment>
                <comment line="629">
                    Do not bother to add an empty &quot;(Utf8_big_0)&quot; band.                    
                </comment>
                <comment line="644">
                    Finally, sew together all the prefixes and suffixes.                    
                </comment>
                <comment line="654">
                    by induction, the buffer is already filled with the prefix                    
                </comment>
                <declaration name="len" type="int" line="562"/>
                <declaration name="SUFFIX_SKIP_1" type="int" line="567"/>
                <declaration name="PREFIX_SKIP_2" type="int" line="568"/>
                <declaration name="suffixChars" type="char[][]" line="578"/>
                <declaration name="bigSuffixCount" type="int" line="579"/>
                <scope line="584">
                    <declaration name="suffix" type="int" line="585"/>
                    <scope line="586"/>
                    <scope line="592">
                        <declaration name="ch" type="int" line="593"/>
                    </scope>
                </scope>
                <declaration name="maxChars" type="int" line="601"/>
                <scope line="605">
                    <declaration name="suffix" type="int" line="606"/>
                    <declaration name="prefix" type="int" line="607"/>
                    <scope line="608"/>
                    <scope line="611"/>
                </scope>
                <declaration name="buf" type="char[]" line="617"/>
                <scope line="622">
                    <declaration name="suffix" type="int" line="624"/>
                    <scope line="628"/>
                    <declaration name="packed" type="IntBand" line="632"/>
                    <scope line="635">
                        <declaration name="ch" type="int" line="636"/>
                    </scope>
                </scope>
                <scope line="648">
                    <declaration name="prefix" type="int" line="649"/>
                    <declaration name="suffix" type="int" line="650"/>
                </scope>
            </method>
            <declaration name="utf8Signatures" type="Map&lt;Utf8Entry,SignatureEntry&gt;" line="665"/>
            <method name="readSignatureBands" type="void" line="667">
                <params>
                    <param name="cpMap" type="Entry[]"/>
                </params>
                <comment line="668">
                    cp_Signature:                    
                </comment>
                <comment line="669">
                    *cp_Signature_form :DELTA5  (cp_Utf8)                    
                </comment>
                <comment line="670">
                    *cp_Signature_classes :UDELTA5  (cp_Class)                    
                </comment>
                <declaration name="numSigClasses" type="int[]" line="674"/>
                <scope line="675">
                    <declaration name="formRef" type="Utf8Entry" line="676"/>
                </scope>
                <scope line="684">
                    <declaration name="formRef" type="Utf8Entry" line="685"/>
                    <declaration name="classRefs" type="ClassEntry[]" line="686"/>
                    <scope line="687"/>
                    <declaration name="se" type="SignatureEntry" line="690"/>
                </scope>
            </method>
            <method name="readMemberRefs" type="void" line="698">
                <params>
                    <param name="tag" type="byte"/>
                    <param name="cpMap" type="Entry[]"/>
                    <param name="cp_class" type="CPRefBand"/>
                    <param name="cp_desc" type="CPRefBand"/>
                </params>
                <comment line="699">
                    cp_Field:                    
                </comment>
                <comment line="700">
                    *cp_Field_class :DELTA5  (cp_Class)                    
                </comment>
                <comment line="701">
                    *cp_Field_desc :UDELTA5  (cp_Descr)                    
                </comment>
                <comment line="702">
                    cp_Method:                    
                </comment>
                <comment line="703">
                    *cp_Method_class :DELTA5  (cp_Class)                    
                </comment>
                <comment line="704">
                    *cp_Method_desc :UDELTA5  (cp_Descr)                    
                </comment>
                <comment line="705">
                    cp_Imethod:                    
                </comment>
                <comment line="706">
                    *cp_Imethod_class :DELTA5  (cp_Class)                    
                </comment>
                <comment line="707">
                    *cp_Imethod_desc :UDELTA5  (cp_Descr)                    
                </comment>
                <scope line="714">
                    <declaration name="mclass" type="ClassEntry" line="715"/>
                    <declaration name="mdescr" type="DescriptorEntry" line="716"/>
                </scope>
            </method>
            <method name="readFiles" type="void" line="723">
                <comment line="724">
                    file_bands:                    
                </comment>
                <comment line="725">
                    *file_name :UNSIGNED5  (cp_Utf8)                    
                </comment>
                <comment line="726">
                    *file_size_hi :UNSIGNED5                    
                </comment>
                <comment line="727">
                    *file_size_lo :UNSIGNED5                    
                </comment>
                <comment line="728">
                    *file_modtime :DELTA5                    
                </comment>
                <comment line="729">
                    *file_options :UNSIGNED5                    
                </comment>
                <comment line="730">
                    *file_bits :BYTE1                    
                </comment>
                <comment line="755">
                    Compute file lengths before reading any file bits.                    
                </comment>
                <comment line="769">
                    %%% Use a big temp file for file bits?                    
                </comment>
                <comment line="798">
                    Do the rest of the classes.                    
                </comment>
                <comment line="801">
                    implicitly initialize to a trivial one                    
                </comment>
                <declaration name="options" type="int" line="735"/>
                <declaration name="haveSizeHi" type="boolean" line="736"/>
                <declaration name="haveModtime" type="boolean" line="737"/>
                <declaration name="haveOptions" type="boolean" line="738"/>
                <declaration name="nextClass" type="Iterator" line="753"/>
                <declaration name="totalFileLength" type="long" line="756"/>
                <declaration name="fileLengths" type="long[]" line="757"/>
                <scope line="758">
                    <declaration name="size" type="long" line="759"/>
                </scope>
                <declaration name="buf" type="byte[]" line="767"/>
                <scope line="768">
                    <declaration name="name" type="Utf8Entry" line="770"/>
                    <declaration name="size" type="long" line="771"/>
                    <declaration name="file" type="File" line="772"/>
                    <declaration name="toRead" type="long" line="781"/>
                    <scope line="782">
                        <declaration name="nr" type="int" line="783"/>
                    </scope>
                    <scope line="791">
                        <declaration name="cls" type="Class" line="793"/>
                    </scope>
                </scope>
                <scope line="799">
                    <declaration name="cls" type="Class" line="800"/>
                </scope>
                <scope line="813"/>
            </method>
            <method name="readAttrDefs" type="void" line="820">
                <comment line="821">
                    attr_definition_bands:                    
                </comment>
                <comment line="822">
                    *attr_definition_headers :BYTE1                    
                </comment>
                <comment line="823">
                    *attr_definition_name :UNSIGNED5  (cp_Utf8)                    
                </comment>
                <comment line="824">
                    *attr_definition_layout :UNSIGNED5  (cp_Utf8)                    
                </comment>
                <comment line="843">
                    Check layout string for Java 6 extensions.                    
                </comment>
                <comment line="855">
                    Attribute layouts define bands, one per layout element.                    
                </comment>
                <comment line="856">
                    Create them now, all at once.                    
                </comment>
                <scope line="833">
                    <scope line="834">
                        <declaration name="header" type="int" line="835"/>
                        <declaration name="name" type="Utf8Entry" line="836"/>
                        <declaration name="layout" type="Utf8Entry" line="837"/>
                        <declaration name="ctype" type="int" line="838"/>
                        <declaration name="index" type="int" line="839"/>
                        <declaration name="def" type="Attribute.Layout" line="840"/>
                        <declaration name="pvLayout" type="String" line="844"/>
                        <scope line="845"/>
                    </scope>
                </scope>
            </method>
            <method name="readInnerClasses" type="void" line="861">
                <comment line="862">
                    ic_bands:                    
                </comment>
                <comment line="863">
                    *ic_this_class :UDELTA5  (cp_Class)                    
                </comment>
                <comment line="864">
                    *ic_flags :UNSIGNED5                    
                </comment>
                <comment line="865">
                    *ic_outer_class :DELTA5  (null or cp_Class)                    
                </comment>
                <comment line="866">
                    *ic_name :DELTA5  (null or cp_Utf8)                    
                </comment>
                <comment line="900">
                    String number = parse[1];                    
                </comment>
                <declaration name="longICCount" type="int" line="871"/>
                <scope line="872">
                    <declaration name="flags" type="int" line="873"/>
                    <declaration name="longForm" type="boolean" line="874"/>
                    <scope line="875"/>
                </scope>
                <declaration name="icList" type="List&lt;InnerClass&gt;" line="884"/>
                <scope line="885">
                    <declaration name="flags" type="int" line="886"/>
                    <declaration name="longForm" type="boolean" line="887"/>
                    <declaration name="thisClass" type="ClassEntry" line="889"/>
                    <declaration name="outerClass" type="ClassEntry" line="890"/>
                    <declaration name="thisName" type="Utf8Entry" line="891"/>
                    <scope line="892"/>
                    <scope line="895">
                        <declaration name="n" type="String" line="896"/>
                        <declaration name="parse" type="String[]" line="897"/>
                        <declaration name="pkgOuter" type="String" line="899"/>
                        <declaration name="name" type="String" line="901"/>
                    </scope>
                    <declaration name="ic" type="InnerClass" line="911"/>
                </scope>
            </method>
            <method name="readLocalInnerClasses" type="void" line="924">
                <params>
                    <param name="cls" type="Class"/>
                </params>
                <comment line="931">
                    A zero flag means copy a global IC here.                    
                </comment>
                <comment line="933">
                    must be a valid global IC reference                    
                </comment>
                <comment line="937">
                    clear the marker bit                    
                </comment>
                <comment line="944">
                    cls.expandLocalICs may add more tuples to ics also,                    
                </comment>
                <comment line="945">
                    or may even delete tuples.                    
                </comment>
                <comment line="946">
                    We cannot do that now, because we do not know the                    
                </comment>
                <comment line="947">
                    full contents of the local constant pool yet.                    
                </comment>
                <declaration name="nc" type="int" line="925"/>
                <declaration name="localICs" type="List&lt;InnerClass&gt;" line="926"/>
                <scope line="927">
                    <declaration name="thisClass" type="ClassEntry" line="928"/>
                    <declaration name="flags" type="int" line="929"/>
                    <scope line="930">
                        <declaration name="ic" type="InnerClass" line="932"/>
                    </scope>
                    <scope line="935">
                        <declaration name="outer" type="ClassEntry" line="938"/>
                        <declaration name="name" type="Utf8Entry" line="939"/>
                    </scope>
                </scope>
            </method>
            <declaration name="NO_FLAGS_YET" type="int" line="950"/>
            <method name="readClasses" type="Class[]" line="952">
                <comment line="953">
                    class_bands:                    
                </comment>
                <comment line="954">
                    *class_this :DELTA5  (cp_Class)                    
                </comment>
                <comment line="955">
                    *class_super :DELTA5  (cp_Class)                    
                </comment>
                <comment line="956">
                    *class_interface_count :DELTA5                    
                </comment>
                <comment line="957">
                    *class_interface :DELTA5  (cp_Class)                    
                </comment>
                <comment line="958">
                    ...(member bands)...                    
                </comment>
                <comment line="959">
                    class_attr_bands                    
                </comment>
                <comment line="960">
                    code_bands                    
                </comment>
                <comment line="981">
                    Packer encoded rare case of null superClass as thisClass:                    
                </comment>
                <comment line="995">
                    code_bands.doneDisbursing(); // still need to read code attrs                    
                </comment>
                <comment line="996">
                    class_bands.doneDisbursing(); // still need to read code attrs                    
                </comment>
                <declaration name="classes" type="Class[]" line="961"/>
                <scope line="974">
                    <declaration name="thisClass" type="ClassEntry" line="975"/>
                    <declaration name="superClass" type="ClassEntry" line="976"/>
                    <declaration name="interfaces" type="ClassEntry[]" line="977"/>
                    <scope line="978"/>
                    <declaration name="cls" type="Class" line="983"/>
                </scope>
            </method>
            <method name="getOutputIndex" type="int" line="1000">
                <params>
                    <param name="e" type="Entry"/>
                </params>
                <comment line="1001">
                    Output CPs do not contain signatures.                    
                </comment>
                <comment line="1004">
                    In the output ordering, input signatures can serve                    
                </comment>
                <comment line="1005">
                    in place of Utf8s.                    
                </comment>
                <declaration name="k" type="int" line="1003"/>
                <scope line="1008">
                    <declaration name="se" type="Entry" line="1009"/>
                </scope>
            </method>
            <declaration name="entryOutputOrder" type="Comparator&lt;Entry&gt;" line="1015"/>
            <anonymous_class line="1015">
                <method name="compare" type="int" line="1016">
                    <params>
                        <param name="e0" type="Entry"/>
                        <param name="e1" type="Entry"/>
                    </params>
                    <comment line="1020">
                        If both have keys, use the keys.                        
                    </comment>
                    <comment line="1023">
                        If neither have keys, use their native tags &amp; spellings.                        
                    </comment>
                    <comment line="1025">
                        Otherwise, the guy with the key comes first.                        
                    </comment>
                    <declaration name="k0" type="int" line="1017"/>
                    <declaration name="k1" type="int" line="1018"/>
                </method>
            </anonymous_class>
            <method name="reconstructClass" type="void" line="1030">
                <params>
                    <param name="cls" type="Class"/>
                </params>
                <comment line="1033">
                    check for local .ClassFile.version                    
                </comment>
                <comment line="1045">
                    Replace null SourceFile by &quot;obvious&quot; string.                    
                </comment>
                <comment line="1048">
                    record the local cp:                    
                </comment>
                <declaration name="retroVersion" type="Attribute" line="1034"/>
                <scope line="1035">
                    <declaration name="minmajver" type="short[]" line="1037"/>
                </scope>
                <scope line="1040"/>
            </method>
            <method name="reconstructLocalCPMap" type="Entry[]" line="1052">
                <params>
                    <param name="cls" type="Class"/>
                </params>
                <comment line="1056">
                    look for constant pool entries:                    
                </comment>
                <comment line="1059">
                    flesh out the local constant pool                    
                </comment>
                <comment line="1062">
                    Now that we know all our local class references,                    
                </comment>
                <comment line="1063">
                    compute the InnerClasses attribute.                    
                </comment>
                <comment line="1068">
                    Just visit the expanded InnerClasses attr.                    
                </comment>
                <comment line="1071">
                    Have to recompute from scratch, because of deletions.                    
                </comment>
                <comment line="1076">
                    flesh out the local constant pool, again                    
                </comment>
                <comment line="1080">
                    construct a local constant pool                    
                </comment>
                <comment line="1089">
                    Add all ldc operands first.                    
                </comment>
                <comment line="1097">
                    done with it                    
                </comment>
                <comment line="1100">
                    Next add all the two-byte references.                    
                </comment>
                <comment line="1102">
                    do not use!                    
                </comment>
                <comment line="1121">
                    Now repack backwards, introducing null elements.                    
                </comment>
                <comment line="1129">
                    do not process the initial null                    
                </comment>
                <declaration name="ldcRefs" type="Set&lt;Entry&gt;" line="1053"/>
                <declaration name="cpRefs" type="Set&lt;Entry&gt;" line="1054"/>
                <declaration name="changed" type="int" line="1064"/>
                <scope line="1066">
                    <scope line="1067"/>
                    <scope line="1070"/>
                </scope>
                <declaration name="numDoubles" type="int" line="1081"/>
                <scope line="1082"/>
                <declaration name="cpMap" type="Entry[]" line="1086"/>
                <declaration name="fillp" type="int" line="1087"/>
                <scope line="1090">
                    <scope line="1092"/>
                </scope>
                <declaration name="wideRefs" type="Set&lt;Entry&gt;" line="1101"/>
                <declaration name="narrowLimit" type="int" line="1103"/>
                <scope line="1104"/>
                <scope line="1111">
                    <scope line="1113">
                        <declaration name="e" type="Entry" line="1114"/>
                    </scope>
                </scope>
                <declaration name="revp" type="int" line="1122"/>
                <scope line="1123">
                    <declaration name="e" type="Entry" line="1124"/>
                </scope>
            </method>
            <method name="readMembers" type="void" line="1134">
                <params>
                    <param name="classes" type="Class[]"/>
                </params>
                <comment line="1135">
                    class_bands:                    
                </comment>
                <comment line="1136">
                    ...                    
                </comment>
                <comment line="1137">
                    *class_field_count :DELTA5                    
                </comment>
                <comment line="1138">
                    *class_method_count :DELTA5                    
                </comment>
                <comment line="1139">
                                        
                </comment>
                <comment line="1140">
                    *field_descr :DELTA5  (cp_Descr)                    
                </comment>
                <comment line="1141">
                    field_attr_bands                    
                </comment>
                <comment line="1142">
                                        
                </comment>
                <comment line="1143">
                    *method_descr :MDELTA5  (cp_Descr)                    
                </comment>
                <comment line="1144">
                    method_attr_bands                    
                </comment>
                <comment line="1145">
                    ...                    
                </comment>
                <comment line="1152">
                    Make a pre-pass over field and method counts to size the descrs:                    
                </comment>
                <comment line="1173">
                    release to GC                    
                </comment>
                <comment line="1190">
                    Up to this point, Code attributes look like empty attributes.                    
                </comment>
                <comment line="1191">
                    Now we start to special-case them.  The empty canonical Code                    
                </comment>
                <comment line="1192">
                    attributes stay in the method attribute lists, however.                    
                </comment>
                <declaration name="totalNF" type="int" line="1153"/>
                <declaration name="totalNM" type="int" line="1154"/>
                <declaration name="fields" type="List&lt;Class.Field&gt;" line="1159"/>
                <scope line="1161">
                    <declaration name="c" type="Class" line="1162"/>
                    <declaration name="nf" type="int" line="1163"/>
                    <scope line="1164">
                        <declaration name="f" type="Class.Field" line="1165"/>
                    </scope>
                </scope>
                <declaration name="methods" type="List&lt;Class.Method&gt;" line="1175"/>
                <scope line="1177">
                    <declaration name="c" type="Class" line="1178"/>
                    <declaration name="nm" type="int" line="1179"/>
                    <scope line="1180">
                        <declaration name="m" type="Class.Method" line="1181"/>
                    </scope>
                </scope>
            </method>
            <declaration name="allCodes" type="Code[]" line="1196"/>
            <declaration name="codesWithFlags" type="List&lt;Code&gt;" line="1197"/>
            <declaration name="ldcRefMap" type="Map&lt;Class,Set&lt;Entry&gt;&gt;" line="1198"/>
            <method name="buildCodeAttrs" type="Code[]" line="1200">
                <params>
                    <param name="methods" type="List<Class.Method>"/>
                </params>
                <declaration name="codes" type="List&lt;Code&gt;" line="1201"/>
                <scope line="1202">
                    <scope line="1203"/>
                </scope>
                <declaration name="a" type="Code[]" line="1208"/>
            </method>
            <method name="readCodeHeaders" type="void" line="1213">
                <comment line="1214">
                    code_bands:                    
                </comment>
                <comment line="1215">
                    *code_headers :BYTE1                    
                </comment>
                <comment line="1216">
                                        
                </comment>
                <comment line="1217">
                    *code_max_stack :UNSIGNED5                    
                </comment>
                <comment line="1218">
                    *code_max_na_locals :UNSIGNED5                    
                </comment>
                <comment line="1219">
                    *code_handler_count :UNSIGNED5                    
                </comment>
                <comment line="1220">
                    ...                    
                </comment>
                <comment line="1221">
                    code_attr_bands                    
                </comment>
                <comment line="1233">
                    We will read ms/ml/nh/flags from bands shortly.                    
                </comment>
                <comment line="1237">
                    Short code header is the usual case:                    
                </comment>
                <comment line="1248">
                    Do the long headers now.                    
                </comment>
                <comment line="1264">
                    Code attributes are common (debug info not stripped).                    
                </comment>
                <comment line="1267">
                    Code attributes are very sparse (debug info is stripped).                    
                </comment>
                <comment line="1271">
                    do readAttrs later, after BCs are scanned                    
                </comment>
                <declaration name="attrsOK" type="boolean" line="1222"/>
                <declaration name="longCodes" type="List&lt;Code&gt;" line="1225"/>
                <scope line="1226">
                    <declaration name="c" type="Code" line="1227"/>
                    <declaration name="sc" type="int" line="1228"/>
                    <scope line="1232"/>
                </scope>
                <scope line="1252"/>
                <scope line="1263"/>
                <scope line="1266"/>
            </method>
            <method name="readCodeHandlers" type="void" line="1274">
                <comment line="1275">
                    code_bands:                    
                </comment>
                <comment line="1276">
                    ...                    
                </comment>
                <comment line="1277">
                    *code_handler_start_P :BCI5                    
                </comment>
                <comment line="1278">
                    *code_handler_end_PO :BRANCH5                    
                </comment>
                <comment line="1279">
                    *code_handler_catch_PO :BRANCH5                    
                </comment>
                <comment line="1280">
                    *code_handler_class_RCN :UNSIGNED5  (null or cp_Class)                    
                </comment>
                <comment line="1281">
                    ...                    
                </comment>
                <comment line="1304">
                    For now, just record the raw BCI codes.                    
                </comment>
                <comment line="1305">
                    We must wait until we have instruction boundaries.                    
                </comment>
                <declaration name="nh" type="int" line="1282"/>
                <scope line="1283">
                    <declaration name="c" type="Code" line="1284"/>
                </scope>
                <declaration name="code_handler_bands" type="ValueBand[]" line="1288"/>
                <scope line="1295"/>
                <scope line="1300">
                    <declaration name="c" type="Code" line="1301"/>
                    <scope line="1302"/>
                </scope>
                <scope line="1311"/>
            </method>
            <method name="fixupCodeHandlers" type="void" line="1316">
                <comment line="1317">
                    Actually decode (renumber) the BCIs now.                    
                </comment>
                <scope line="1318">
                    <declaration name="c" type="Code" line="1319"/>
                    <scope line="1320">
                        <declaration name="sum" type="int" line="1321"/>
                    </scope>
                </scope>
            </method>
            <method name="countAndReadAttrs" type="void" line="1335">
                <params>
                    <param name="ctype" type="int"/>
                    <param name="holders" type="Collection"/>
                </params>
                <comment line="1336">
                    class_attr_bands:                    
                </comment>
                <comment line="1337">
                    *class_flags :UNSIGNED5                    
                </comment>
                <comment line="1338">
                    *class_attr_count :UNSIGNED5                    
                </comment>
                <comment line="1339">
                    *class_attr_indexes :UNSIGNED5                    
                </comment>
                <comment line="1340">
                    *class_attr_calls :UNSIGNED5                    
                </comment>
                <comment line="1341">
                    *class_Signature_RS :UNSIGNED5 (cp_Signature)                    
                </comment>
                <comment line="1342">
                    class_metadata_bands                    
                </comment>
                <comment line="1343">
                    *class_SourceFile_RU :UNSIGNED5 (cp_Utf8)                    
                </comment>
                <comment line="1344">
                    *class_EnclosingMethod_RM :UNSIGNED5 (cp_Method)                    
                </comment>
                <comment line="1345">
                    ic_local_bands                    
                </comment>
                <comment line="1346">
                    *class_ClassFile_version_minor_H :UNSIGNED5                    
                </comment>
                <comment line="1347">
                    *class_ClassFile_version_major_H :UNSIGNED5                    
                </comment>
                <comment line="1348">
                                        
                </comment>
                <comment line="1349">
                    field_attr_bands:                    
                </comment>
                <comment line="1350">
                    *field_flags :UNSIGNED5                    
                </comment>
                <comment line="1351">
                    *field_attr_count :UNSIGNED5                    
                </comment>
                <comment line="1352">
                    *field_attr_indexes :UNSIGNED5                    
                </comment>
                <comment line="1353">
                    *field_attr_calls :UNSIGNED5                    
                </comment>
                <comment line="1354">
                    *field_Signature_RS :UNSIGNED5 (cp_Signature)                    
                </comment>
                <comment line="1355">
                    field_metadata_bands                    
                </comment>
                <comment line="1356">
                    *field_ConstantValue_KQ :UNSIGNED5 (cp_Int, etc.; see note)                    
                </comment>
                <comment line="1357">
                                        
                </comment>
                <comment line="1358">
                    method_attr_bands:                    
                </comment>
                <comment line="1359">
                    *method_flags :UNSIGNED5                    
                </comment>
                <comment line="1360">
                    *method_attr_count :UNSIGNED5                    
                </comment>
                <comment line="1361">
                    *method_attr_indexes :UNSIGNED5                    
                </comment>
                <comment line="1362">
                    *method_attr_calls :UNSIGNED5                    
                </comment>
                <comment line="1363">
                    *method_Signature_RS :UNSIGNED5 (cp_Signature)                    
                </comment>
                <comment line="1364">
                    method_metadata_bands                    
                </comment>
                <comment line="1365">
                    *method_Exceptions_N :UNSIGNED5                    
                </comment>
                <comment line="1366">
                    *method_Exceptions_RC :UNSIGNED5  (cp_Class)                    
                </comment>
                <comment line="1367">
                                        
                </comment>
                <comment line="1368">
                    code_attr_bands:                    
                </comment>
                <comment line="1369">
                    *code_flags :UNSIGNED5                    
                </comment>
                <comment line="1370">
                    *code_attr_count :UNSIGNED5                    
                </comment>
                <comment line="1371">
                    *code_attr_indexes :UNSIGNED5                    
                </comment>
                <comment line="1372">
                    *code_attr_calls :UNSIGNED5                    
                </comment>
                <comment line="1373">
                    *code_LineNumberTable_N :UNSIGNED5                    
                </comment>
                <comment line="1374">
                    *code_LineNumberTable_bci_P :BCI5                    
                </comment>
                <comment line="1375">
                    *code_LineNumberTable_line :UNSIGNED5                    
                </comment>
                <comment line="1376">
                    *code_LocalVariableTable_N :UNSIGNED5                    
                </comment>
                <comment line="1377">
                    *code_LocalVariableTable_bci_P :BCI5                    
                </comment>
                <comment line="1378">
                    *code_LocalVariableTable_span_O :BRANCH5                    
                </comment>
                <comment line="1379">
                    *code_LocalVariableTable_name_RU :UNSIGNED5 (cp_Utf8)                    
                </comment>
                <comment line="1380">
                    *code_LocalVariableTable_type_RS :UNSIGNED5 (cp_Signature)                    
                </comment>
                <comment line="1381">
                    *code_LocalVariableTable_slot :UNSIGNED5                    
                </comment>
            </method>
            <method name="countAttrs" type="void" line="1389">
                <params>
                    <param name="ctype" type="int"/>
                    <param name="holders" type="Collection"/>
                </params>
                <comment line="1390">
                    Here, xxx stands for one of class, field, method, code.                    
                </comment>
                <comment line="1397">
                    Fetch the attribute layout definitions which govern the bands                    
                </comment>
                <comment line="1398">
                    we are about to read.                    
                </comment>
                <comment line="1408">
                    Count up the number of holders which have overflow attrs.                    
                </comment>
                <comment line="1425">
                    For each holder with overflow attrs, read a count.                    
                </comment>
                <comment line="1431">
                    Now it&apos;s time to check flag bits that indicate attributes.                    
                </comment>
                <comment line="1432">
                    We accumulate (a) a list of attribute types for each holder                    
                </comment>
                <comment line="1433">
                    (class/field/method/code), and also we accumulate (b) a total                    
                </comment>
                <comment line="1434">
                    count for each attribute type.                    
                </comment>
                <comment line="1439">
                    System.out.println(&quot;flags=&quot;+h.flags+&quot; using fm=&quot;+flagMask);                    
                </comment>
                <comment line="1441">
                    Clean up the flags now.                    
                </comment>
                <comment line="1442">
                    strip attr bits                    
                </comment>
                <comment line="1443">
                    16 bits only now                    
                </comment>
                <comment line="1447">
                    no attrs on this guy                    
                </comment>
                <comment line="1449">
                    number of overflow attrs                    
                </comment>
                <comment line="1457">
                    number of flag attrs                    
                </comment>
                <comment line="1466">
                    iterate again                    
                </comment>
                <comment line="1471">
                    This definition index is live in this holder.                    
                </comment>
                <comment line="1481">
                    This definition index is live in this holder.                    
                </comment>
                <comment line="1493">
                    Now each holder has a list of canonical attribute instances.                    
                </comment>
                <comment line="1494">
                    For layouts with no elements, we are done.  However, for                    
                </comment>
                <comment line="1495">
                    layouts with bands, we must replace each canonical (empty)                    
                </comment>
                <comment line="1496">
                    instance with a value-bearing one, initialized from the                    
                </comment>
                <comment line="1497">
                    appropriate bands.                    
                </comment>
                <comment line="1499">
                    Make a small pass to detect and read backward call counts.                    
                </comment>
                <comment line="1504">
                    unused index                    
                </comment>
                <comment line="1506">
                    wrong pass                    
                </comment>
                <comment line="1509">
                    irrelevant                    
                </comment>
                <comment line="1522">
                    Finally, size all the attribute bands.                    
                </comment>
                <comment line="1526">
                    unused index                    
                </comment>
                <comment line="1528">
                    wrong pass                    
                </comment>
                <comment line="1532">
                    Special case.                    
                </comment>
                <comment line="1533">
                    Size the bands as if using the following layout:                    
                </comment>
                <comment line="1534">
                    [RCH TI[ (0)[] ()[RCNH RUNH] ]].                    
                </comment>
                <comment line="1542">
                    Drop remaining columns wherever flags are zero:                    
                </comment>
                <comment line="1549">
                    Expect no elements at all.  Skip quickly.                    
                </comment>
                <comment line="1554">
                    Read these bands in sequence.                    
                </comment>
                <comment line="1560">
                    At first, record initial calls.                    
                </comment>
                <comment line="1561">
                    Later, forward calls may also accumulate here:                    
                </comment>
                <comment line="1567">
                    No more, please!                    
                </comment>
                <declaration name="xxx_attr_bands" type="MultiBand" line="1391"/>
                <declaration name="flagMask" type="long" line="1392"/>
                <scope line="1393"/>
                <declaration name="defList" type="List&lt;Attribute.Layout&gt;" line="1399"/>
                <declaration name="defs" type="Attribute.Layout[]" line="1400"/>
                <declaration name="xxx_flags_hi" type="IntBand" line="1402"/>
                <declaration name="xxx_flags_lo" type="IntBand" line="1403"/>
                <declaration name="xxx_attr_count" type="IntBand" line="1404"/>
                <declaration name="xxx_attr_indexes" type="IntBand" line="1405"/>
                <declaration name="xxx_attr_calls" type="IntBand" line="1406"/>
                <declaration name="overflowMask" type="int" line="1409"/>
                <declaration name="overflowHolderCount" type="int" line="1410"/>
                <declaration name="haveLongFlags" type="boolean" line="1411"/>
                <scope line="1417">
                    <declaration name="h" type="Attribute.Holder" line="1418"/>
                    <declaration name="flags" type="int" line="1419"/>
                </scope>
                <declaration name="totalCounts" type="int[]" line="1435"/>
                <scope line="1436">
                    <declaration name="h" type="Attribute.Holder" line="1437"/>
                    <declaration name="attrBits" type="long" line="1440"/>
                    <declaration name="noa" type="int" line="1449"/>
                    <declaration name="overflowBit" type="long" line="1450"/>
                    <scope line="1453"/>
                    <declaration name="nfa" type="int" line="1457"/>
                    <declaration name="bits" type="long" line="1458"/>
                    <scope line="1459"/>
                    <declaration name="ha" type="List&lt;Attribute&gt;" line="1464"/>
                    <scope line="1467">
                        <declaration name="canonical" type="Attribute" line="1473"/>
                    </scope>
                    <scope line="1478">
                        <declaration name="ai" type="int" line="1479"/>
                        <declaration name="canonical" type="Attribute" line="1483"/>
                    </scope>
                </scope>
                <declaration name="callCounts" type="int" line="1500"/>
                <scope line="1501">
                    <scope line="1502">
                        <declaration name="def" type="Attribute.Layout" line="1503"/>
                        <declaration name="totalCount" type="int" line="1507"/>
                        <declaration name="cbles" type="Attribute.Layout.Element[]" line="1510"/>
                        <scope line="1511"/>
                    </scope>
                </scope>
                <scope line="1523">
                    <scope line="1524">
                        <declaration name="def" type="Attribute.Layout" line="1525"/>
                        <declaration name="totalCount" type="int" line="1529"/>
                        <declaration name="ab" type="Band[]" line="1530"/>
                        <scope line="1531">
                            <declaration name="tupleCount" type="int" line="1537"/>
                        </scope>
                        <scope line="1548">
                            <scope line="1550"/>
                        </scope>
                        <scope line="1553">
                            <declaration name="hasCallables" type="boolean" line="1555"/>
                            <scope line="1556"/>
                            <scope line="1558">
                                <declaration name="cbles" type="Attribute.Layout.Element[]" line="1559"/>
                                <declaration name="forwardCounts" type="int[]" line="1562"/>
                                <scope line="1564">
                                    <declaration name="entryCount" type="int" line="1566"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="badAttrIndex" type="void" line="1580">
                <params>
                    <param name="ai" type="int"/>
                    <param name="ctype" type="int"/>
                </params>
            </method>
            <method name="readAttrs" type="void" line="1586">
                <params>
                    <param name="ctype" type="int"/>
                    <param name="holders" type="Collection"/>
                </params>
                <comment line="1587">
                    Decode band values into attributes.                    
                </comment>
                <comment line="1598">
                    Special logic to read this attr.                    
                </comment>
                <comment line="1602">
                    Canonical empty attr works fine (e.g., Synthetic).                    
                </comment>
                <comment line="1611">
                    Read one attribute of type def from ab into a byte array.                    
                </comment>
                <comment line="1625">
                    Replace the canonical attr with the one just read.                    
                </comment>
                <comment line="1627">
                    clean up                    
                </comment>
                <comment line="1631">
                    Mark the bands we just used as done disbursing.                    
                </comment>
                <comment line="1633">
                    unused index                    
                </comment>
                <declaration name="sawDefs" type="Set&lt;Attribute.Layout&gt;" line="1588"/>
                <declaration name="buf" type="ByteArrayOutputStream" line="1589"/>
                <scope line="1590">
                    <declaration name="h" type="Attribute.Holder" line="1591"/>
                    <scope line="1593">
                        <declaration name="a" type="Attribute" line="1594"/>
                        <declaration name="def" type="Attribute.Layout" line="1595"/>
                        <scope line="1596">
                            <scope line="1597"/>
                        </scope>
                        <declaration name="isCV" type="boolean" line="1606"/>
                        <declaration name="ab" type="Band[]" line="1610"/>
                        <anonymous_class line="1613">
                            <method name="getInt" type="int" line="1614">
                                <params>
                                    <param name="bandIndex" type="int"/>
                                </params>
                            </method>
                            <method name="getRef" type="Entry" line="1617">
                                <params>
                                    <param name="bandIndex" type="int"/>
                                </params>
                            </method>
                            <method name="decodeBCI" type="int" line="1620">
                                <params>
                                    <param name="bciCode" type="int"/>
                                </params>
                                <declaration name="code" type="Code" line="1621"/>
                            </method>
                        </anonymous_class>
                        <declaration name="fixups" type="Object" line="1613"/>
                    </scope>
                </scope>
                <scope line="1632">
                    <declaration name="ab" type="Band[]" line="1634"/>
                    <scope line="1635"/>
                </scope>
                <scope line="1640"/>
                <declaration name="xxx_attr_bands" type="MultiBand" line="1648"/>
                <scope line="1649">
                    <declaration name="b" type="Band" line="1650"/>
                </scope>
            </method>
            <method name="readAttrBands" type="void" line="1661">
                <params>
                    <param name="elems" type="Attribute.Layout.Element[]"/>
                    <param name="count" type="int"/>
                    <param name="forwardCounts" type="int[]"/>
                    <param name="ab" type="Band[]"/>
                </params>
                <comment line="1672">
                    Recursive call.                    
                </comment>
                <comment line="1674">
                    Note:  getIntTotal makes an extra pass over this band.                    
                </comment>
                <comment line="1692">
                    back up to last occurrence of this body                    
                </comment>
                <comment line="1703">
                    Backward calls are pre-counted, but forwards are not.                    
                </comment>
                <comment line="1704">
                    Push the present count forward.                    
                </comment>
                <scope line="1662">
                    <declaration name="e" type="Attribute.Layout.Element" line="1663"/>
                    <declaration name="eBand" type="Band" line="1664"/>
                    <scope line="1665"/>
                    <declaration name="repCount" type="int" line="1673"/>
                    <declaration name="remainingCount" type="int" line="1678"/>
                    <scope line="1679">
                        <declaration name="caseCount" type="int" line="1680"/>
                        <scope line="1681"/>
                        <scope line="1683">
                            <scope line="1689"/>
                        </scope>
                    </scope>
                    <scope line="1702"/>
                </scope>
            </method>
            <method name="readByteCodes" type="void" line="1716">
                <comment line="1717">
                    bc_bands:                    
                </comment>
                <comment line="1718">
                    *bc_codes :BYTE1                    
                </comment>
                <comment line="1719">
                    *bc_case_count :UNSIGNED5                    
                </comment>
                <comment line="1720">
                    *bc_case_value :DELTA5                    
                </comment>
                <comment line="1721">
                    *bc_byte :BYTE1                    
                </comment>
                <comment line="1722">
                    *bc_short :DELTA5                    
                </comment>
                <comment line="1723">
                    *bc_local :UNSIGNED5                    
                </comment>
                <comment line="1724">
                    *bc_label :BRANCH5                    
                </comment>
                <comment line="1725">
                    *bc_intref :DELTA5  (cp_Int)                    
                </comment>
                <comment line="1726">
                    *bc_floatref :DELTA5  (cp_Float)                    
                </comment>
                <comment line="1727">
                    *bc_longref :DELTA5  (cp_Long)                    
                </comment>
                <comment line="1728">
                    *bc_doubleref :DELTA5  (cp_Double)                    
                </comment>
                <comment line="1729">
                    *bc_stringref :DELTA5  (cp_String)                    
                </comment>
                <comment line="1730">
                    *bc_classref :UNSIGNED5  (current class or cp_Class)                    
                </comment>
                <comment line="1731">
                    *bc_fieldref :DELTA5  (cp_Field)                    
                </comment>
                <comment line="1732">
                    *bc_methodref :UNSIGNED5  (cp_Method)                    
                </comment>
                <comment line="1733">
                    *bc_imethodref :DELTA5  (cp_Imethod)                    
                </comment>
                <comment line="1734">
                    *bc_thisfield :UNSIGNED5 (cp_Field, only for current class)                    
                </comment>
                <comment line="1735">
                    *bc_superfield :UNSIGNED5 (cp_Field, only for current super)                    
                </comment>
                <comment line="1736">
                    *bc_thismethod :UNSIGNED5 (cp_Method, only for current class)                    
                </comment>
                <comment line="1737">
                    *bc_supermethod :UNSIGNED5 (cp_Method, only for current super)                    
                </comment>
                <comment line="1738">
                    *bc_initref :UNSIGNED5 (cp_Field, only for most recent new)                    
                </comment>
                <comment line="1739">
                    *bc_escref :UNSIGNED5 (cp_All)                    
                </comment>
                <comment line="1740">
                    *bc_escrefsize :UNSIGNED5                    
                </comment>
                <comment line="1741">
                    *bc_escsize :UNSIGNED5                    
                </comment>
                <comment line="1742">
                    *bc_escbyte :BYTE1                    
                </comment>
                <comment line="1745">
                    reads from bc_codes and bc_case_count                    
                </comment>
                <comment line="1748">
                    All the operand bands have now been sized.  Read them all in turn.                    
                </comment>
                <comment line="1770">
                    Done fetching values from operand bands:                    
                </comment>
                <comment line="1778">
                    We must delay the parsing of Code attributes until we                    
                </comment>
                <comment line="1779">
                    have a complete model of bytecodes, for BCI encodings.                    
                </comment>
                <comment line="1781">
                    Ditto for exception handlers in codes.                    
                </comment>
                <comment line="1783">
                    Now we can finish with class_bands; cf. readClasses().                    
                </comment>
                <declaration name="operand_bands" type="Band[]" line="1749"/>
                <scope line="1762"/>
                <scope line="1772"/>
            </method>
            <method name="readByteCodeOps" type="void" line="1788">
                <comment line="1789">
                    scratch buffer for collecting code::                    
                </comment>
                <comment line="1791">
                    record of all switch opcodes (these are variable-length)                    
                </comment>
                <comment line="1807">
                    Adjust expectations of various band sizes.                    
                </comment>
                <comment line="1841">
                    bc_escbyte will have to be counted too                    
                </comment>
                <comment line="1860">
                    handled elsewhere                    
                </comment>
                <comment line="1870">
                    Transfer from buf to a more permanent place:                    
                </comment>
                <comment line="1878">
                    To size instruction bands correctly, we need info on switches:                    
                </comment>
                <comment line="1883">
                    default label + cases                    
                </comment>
                <declaration name="buf" type="byte[]" line="1790"/>
                <declaration name="allSwitchOps" type="List&lt;Integer&gt;" line="1792"/>
                <scope line="1793">
                    <declaration name="c" type="Code" line="1794"/>
                    <scope line="1796">
                        <declaration name="bc" type="int" line="1797"/>
                        <declaration name="isWide" type="boolean" line="1800"/>
                        <scope line="1801"/>
                        <scope line="1844"/>
                        <scope line="1848">
                            <declaration name="bc_which" type="CPRefBand" line="1849"/>
                        </scope>
                        <scope line="1853"/>
                        <scope line="1857">
                            <declaration name="bc_which" type="CPRefBand" line="1858"/>
                        </scope>
                        <scope line="1863"/>
                        <scope line="1869"/>
                    </scope>
                </scope>
                <scope line="1880">
                    <declaration name="bc" type="int" line="1881"/>
                    <declaration name="caseCount" type="int" line="1882"/>
                </scope>
            </method>
            <method name="expandByteCodeOps" type="void" line="1889">
                <comment line="1890">
                    scratch buffer for collecting code:                    
                </comment>
                <comment line="1892">
                    scratch buffer for collecting instruction boundaries:                    
                </comment>
                <comment line="1894">
                    list of label carriers, for label decoding post-pass:                    
                </comment>
                <comment line="1896">
                    scratch buffer for registering CP refs:                    
                </comment>
                <comment line="1902">
                    just for now, while we accumulate bits                    
                </comment>
                <comment line="1912">
                    class of last _new opcode                    
                </comment>
                <comment line="1914">
                    fill pointer in buf; actual bytecode PC                    
                </comment>
                <comment line="1933">
                    apc:  (df, lo, hi, (hi-lo+1)*(label))                    
                </comment>
                <comment line="1934">
                    apc:  (df, nc, nc*(case, label))                    
                </comment>
                <comment line="1940">
                    initialize apc, df, lo, hi bytes to reasonable bits:                    
                </comment>
                <comment line="1944">
                    isw.setDefaultLabel(getLabel(bc_label, code, curPC));                    
                </comment>
                <comment line="1953">
                    Make our getLabel calls later.                    
                </comment>
                <comment line="1991">
                    Note that insnMap has one entry for this.                    
                </comment>
                <comment line="2009">
                    Note that insnMap has one entry for all these bytes.                    
                </comment>
                <comment line="2035">
                    Find the nth overloading of &lt;init&gt; in classRef.                    
                </comment>
                <comment line="2066">
                    Note: insnMap keeps the _aload_0 separate.                    
                </comment>
                <comment line="2078">
                    no wide prefix for branches                    
                </comment>
                <comment line="2080">
                    Make our getLabel calls later.                    
                </comment>
                <comment line="2082">
                    Instruction.at(buf, curPC).setBranchLabel(getLabel(bc_label, code, curPC));                    
                </comment>
                <comment line="2091">
                    Shorthand for class self-references.                    
                </comment>
                <comment line="2133">
                    Copy the trailing byte also.                    
                </comment>
                <comment line="2167">
                    Random bytecode.  Just copy it.                    
                </comment>
                <comment line="2177">
                    now make a permanent copy of the bytecodes                    
                </comment>
                <comment line="2180">
                    fix up labels, now that code has its insnMap                    
                </comment>
                <comment line="2181">
                    temporary branch instruction                    
                </comment>
                <comment line="2184">
                    (Note:  Passing ibr in allows reuse, a speed hack.)                    
                </comment>
                <declaration name="buf" type="byte[]" line="1891"/>
                <declaration name="insnMap" type="int[]" line="1893"/>
                <declaration name="labels" type="int[]" line="1895"/>
                <declaration name="fixupBuf" type="Fixups" line="1897"/>
                <scope line="1899">
                    <declaration name="code" type="Code" line="1900"/>
                    <declaration name="codeOps" type="byte[]" line="1901"/>
                    <declaration name="curClass" type="Class" line="1904"/>
                    <declaration name="ldcRefSet" type="Set&lt;Entry&gt;" line="1906"/>
                    <declaration name="thisClass" type="ClassEntry" line="1910"/>
                    <declaration name="superClass" type="ClassEntry" line="1911"/>
                    <declaration name="newClass" type="ClassEntry" line="1912"/>
                    <declaration name="pc" type="int" line="1914"/>
                    <declaration name="numInsns" type="int" line="1915"/>
                    <declaration name="numLabels" type="int" line="1916"/>
                    <declaration name="hasEscs" type="boolean" line="1917"/>
                    <scope line="1919">
                        <declaration name="bc" type="int" line="1920"/>
                        <declaration name="curPC" type="int" line="1921"/>
                        <declaration name="isWide" type="boolean" line="1926"/>
                        <scope line="1927"/>
                        <scope line="1935">
                            <declaration name="caseCount" type="int" line="1936"/>
                            <declaration name="isw" type="Instruction.Switch" line="1942"/>
                            <scope line="1946"/>
                            <scope line="1948">
                                <scope line="1949"/>
                            </scope>
                        </scope>
                        <scope line="1959">
                            <declaration name="local" type="int" line="1961"/>
                            <declaration name="delta" type="int" line="1962"/>
                            <scope line="1963"/>
                            <scope line="1967"/>
                        </scope>
                        <scope line="1975">
                            <declaration name="val" type="int" line="1976"/>
                        </scope>
                        <scope line="1983">
                            <declaration name="val" type="int" line="1984"/>
                        </scope>
                        <scope line="1990">
                            <declaration name="size" type="int" line="1993"/>
                            <declaration name="ref" type="Entry" line="1994"/>
                            <declaration name="fmt" type="int" line="1996"/>
                        </scope>
                        <scope line="2008">
                            <declaration name="size" type="int" line="2011"/>
                            <scope line="2014"/>
                        </scope>
                        <scope line="2020">
                            <declaration name="idx" type="int" line="2021"/>
                            <declaration name="origBC" type="int" line="2022"/>
                            <declaration name="classRef" type="ClassEntry" line="2023"/>
                            <declaration name="coding" type="int" line="2034"/>
                            <declaration name="ref" type="MemberEntry" line="2036"/>
                        </scope>
                        <scope line="2043">
                            <declaration name="idx" type="int" line="2044"/>
                            <declaration name="isSuper" type="boolean" line="2045"/>
                            <declaration name="isAload" type="boolean" line="2047"/>
                            <declaration name="origBC" type="int" line="2049"/>
                            <declaration name="isField" type="boolean" line="2050"/>
                            <declaration name="bc_which" type="CPRefBand" line="2051"/>
                            <declaration name="which_cls" type="ClassEntry" line="2052"/>
                            <declaration name="which_ix" type="Index" line="2053"/>
                            <scope line="2054"/>
                            <scope line="2057"/>
                            <declaration name="ref" type="MemberEntry" line="2062"/>
                            <scope line="2063"/>
                        </scope>
                        <scope line="2076">
                            <declaration name="nextPC" type="int" line="2079"/>
                        </scope>
                        <scope line="2086">
                            <declaration name="bc_which" type="CPRefBand" line="2087"/>
                            <declaration name="ref" type="Entry" line="2088"/>
                            <scope line="2089">
                                <scope line="2090"/>
                                <scope line="2093"/>
                            </scope>
                            <declaration name="origBC" type="int" line="2097"/>
                            <declaration name="size" type="int" line="2098"/>
                            <declaration name="fmt" type="int" line="2123"/>
                            <scope line="2132">
                                <declaration name="val" type="int" line="2134"/>
                            </scope>
                            <scope line="2136">
                                <declaration name="argSize" type="int" line="2137"/>
                            </scope>
                        </scope>
                        <scope line="2144">
                            <declaration name="local" type="int" line="2146"/>
                            <scope line="2147">
                                <scope line="2150">
                                    <declaration name="iVal" type="int" line="2151"/>
                                </scope>
                            </scope>
                            <scope line="2155">
                                <scope line="2158">
                                    <declaration name="iVal" type="int" line="2159"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="ibr" type="Instruction" line="2181"/>
                    <scope line="2182">
                        <declaration name="curPC" type="int" line="2183"/>
                        <scope line="2186">
                            <declaration name="isw" type="Instruction.Switch" line="2187"/>
                            <declaration name="caseCount" type="int" line="2189"/>
                            <scope line="2190"/>
                        </scope>
                        <scope line="2193"/>
                    </scope>
                    <scope line="2197"/>
                </scope>
            </method>
        </class>
    </source>