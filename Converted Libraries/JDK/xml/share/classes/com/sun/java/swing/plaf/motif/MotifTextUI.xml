<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.motif">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="javax.swing"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.plaf"/>
        <class name="MotifTextUI" line="7">
            <javadoc line="7">
                Provides the look and feel features that are common across
                  the Motif/CDE text LAF implementations.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases.  The current serialization support is appropriate
                  for short term storage or RMI between applications running the same
                  version of Swing.  A future release of Swing will provide support for
                  long term persistence.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="20">
                Creates the object to use for a caret for all of the Motif
                  text components.  The caret is rendered as an I-beam on Motif.                
                <return>
                    the caret object                    
                </return>
            </javadoc>
            <method name="createCaret" type="Caret" line="25"/>
            <class name="MotifCaret" line="28">
                <extends class="DefaultCaret"/>
                <implements interface="UIResource"/>
                <javadoc line="28">
                    The motif caret is rendered as an I beam.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases.  The current serialization support is appropriate
                      for short term storage or RMI between applications running the same
                      version of Swing.  A future release of Swing will provide support for
                      long term persistence.                    
                </javadoc>
                <javadoc line="39">
                    Called when the component containing the caret gains
                      focus.  This is implemented to repaint the component
                      so the focus rectangle will be re-rendered, as well
                      as providing the superclass behavior.                    
                    <param>
                        e the focus event                        
                    </param>
                    <see>
                        FocusListener#focusGained                        
                    </see>
                </javadoc>
                <method name="focusGained" type="void" line="47">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <javadoc line="51">
                    Called when the component containing the caret loses
                      focus.  This is implemented to set the caret to visibility
                      to false.                    
                    <param>
                        e the focus event                        
                    </param>
                    <see>
                        FocusListener#focusLost                        
                    </see>
                </javadoc>
                <method name="focusLost" type="void" line="58">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <javadoc line="62">
                    Damages the area surrounding the caret to cause
                      it to be repainted.  If paint() is reimplemented,
                      this method should also be reimplemented.                    
                    <param>
                        r  the current location of the caret, does nothing if null                        
                    </param>
                    <see>
                        #paint                        
                    </see>
                </javadoc>
                <method name="damage" type="void" line="69">
                    <params>
                        <param name="r" type="Rectangle"/>
                    </params>
                    <scope line="70"/>
                </method>
                <javadoc line="78">
                    Renders the caret as a vertical line.  If this is reimplemented
                      the damage method should also be reimplemented as it assumes the
                      shape of the caret is a vertical line.  Does nothing if isVisible()
                      is false.  The caret color is derived from getCaretColor() if
                      the component has focus, else from getDisabledTextColor().                    
                    <param>
                        g the graphics context                        
                    </param>
                    <see>
                        #damage                        
                    </see>
                </javadoc>
                <method name="paint" type="void" line="87">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                    <scope line="88">
                        <scope line="89">
                            <declaration name="c" type="JTextComponent" line="90"/>
                            <declaration name="fg" type="Color" line="91"/>
                            <declaration name="mapper" type="TextUI" line="92"/>
                            <declaration name="dot" type="int" line="93"/>
                            <declaration name="r" type="Rectangle" line="94"/>
                            <declaration name="x0" type="int" line="95"/>
                            <declaration name="x1" type="int" line="96"/>
                            <declaration name="y0" type="int" line="97"/>
                            <declaration name="y1" type="int" line="98"/>
                        </scope>
                        <scope line="104"/>
                    </scope>
                </method>
                <declaration name="IBeamOverhang" type="int" line="108"/>
            </class>
            <declaration name="defaultBindings" type="JTextComponent.KeyBinding[]" line="110"/>
            <javadoc line="110">
                Default bindings all keymaps implementing the Motif feel.                
            </javadoc>
        </class>
    </source>