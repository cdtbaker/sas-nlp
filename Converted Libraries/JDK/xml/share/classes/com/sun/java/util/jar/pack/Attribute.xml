<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="com.sun.java.util.jar.pack.ConstantPool.Entry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Index"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="Attribute" line="14">
            <implements interface="Comparable"/>
            <javadoc line="14">
                Represents an attribute in a class-file.
                  Takes care to remember where constant pool indexes occur.
                  Implements the &quot;little language&quot; of Pack200 for describing
                  attribute layouts.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="def" type="Layout" line="22"/>
            <declaration name="bytes" type="byte[]" line="23"/>
            <declaration name="fixups" type="Object" line="24"/>
            <method name="name" type="String" line="25"/>
            <method name="layout" type="Layout" line="28"/>
            <method name="bytes" type="byte[]" line="31"/>
            <method name="size" type="int" line="34"/>
            <method name="getNameRef" type="Entry" line="37"/>
            <method name="Attribute" type="constructor" line="40">
                <params>
                    <param name="old" type="Attribute"/>
                </params>
            </method>
            <method name="Attribute" type="constructor" line="45">
                <params>
                    <param name="def" type="Layout"/>
                    <param name="bytes" type="byte[]"/>
                    <param name="fixups" type="Object"/>
                </params>
            </method>
            <method name="Attribute" type="constructor" line="51">
                <params>
                    <param name="def" type="Layout"/>
                    <param name="bytes" type="byte[]"/>
                </params>
            </method>
            <method name="addContent" type="Attribute" line="54">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="fixups" type="Object"/>
                </params>
                <declaration name="res" type="Attribute" line="57"/>
            </method>
            <method name="addContent" type="Attribute" line="63">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
            </method>
            <method name="finishRefs" type="void" line="66">
                <params>
                    <param name="ix" type="Index"/>
                </params>
                <scope line="67"/>
            </method>
            <method name="isCanonical" type="boolean" line="72"/>
            <method name="compareTo" type="int" line="75">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="that" type="Attribute" line="76"/>
            </method>
            <declaration name="canonLists" type="Map&lt;List&lt;Attribute&gt;,List&lt;Attribute&gt;&gt;" line="79"/>
            <declaration name="attributes" type="Map&lt;Layout,Attribute&gt;" line="80"/>
            <declaration name="standardDefs" type="Map&lt;Layout,Attribute&gt;" line="81"/>
            <method name="getCanonList" type="List<Attribute>" line="82">
                <params>
                    <param name="al" type="List<Attribute>"/>
                </params>
                <scope line="83">
                    <declaration name="cl" type="List&lt;Attribute&gt;" line="84"/>
                    <scope line="85"/>
                </scope>
            </method>
            <method name="find" type="Attribute" line="94">
                <params>
                    <param name="ctype" type="int"/>
                    <param name="name" type="String"/>
                    <param name="layout" type="String"/>
                </params>
                <declaration name="key" type="Layout" line="95"/>
                <scope line="96">
                    <declaration name="a" type="Attribute" line="97"/>
                    <scope line="98"/>
                </scope>
            </method>
            <method name="keyForLookup" type="Layout" line="105">
                <params>
                    <param name="ctype" type="int"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="lookup" type="Attribute" line="108">
                <params>
                    <param name="defs" type="Map<Layout,Attribute>"/>
                    <param name="ctype" type="int"/>
                    <param name="name" type="String"/>
                </params>
                <scope line="109"/>
            </method>
            <method name="define" type="Attribute" line="114">
                <params>
                    <param name="defs" type="Map<Layout,Attribute>"/>
                    <param name="ctype" type="int"/>
                    <param name="name" type="String"/>
                    <param name="layout" type="String"/>
                </params>
                <declaration name="a" type="Attribute" line="115"/>
            </method>
            <scope line="119">
                <declaration name="sd" type="Map&lt;Layout,Attribute&gt;" line="120"/>
            </scope>
            <scope line="140">
                <declaration name="mdLayouts" type="String" line="141"/>
                <declaration name="sd" type="Map&lt;Layout,Attribute&gt;" line="142"/>
                <declaration name="defaultLayout" type="String" line="143"/>
                <declaration name="annotationsLayout" type="String" line="144"/>
                <declaration name="paramsLayout" type="String" line="145"/>
                <scope line="146">
                    <scope line="150"/>
                </scope>
            </scope>
            <method name="contextName" type="String" line="157">
                <params>
                    <param name="ctype" type="int"/>
                </params>
            </method>
            <class name="Holder" line="170">
                <javadoc line="170">
                    Base class for any attributed object (Class, Field, Method, Code).
                      Flags are included because they are used to help transmit the
                      presence of attributes.  That is, flags are a mix of modifier
                      bits and attribute indicators.                    
                </javadoc>
                <method name="getCPMap" type="Entry[]" line="177"/>
                <declaration name="flags" type="int" line="178"/>
                <declaration name="attributes" type="List&lt;Attribute&gt;" line="179"/>
                <method name="attributeSize" type="int" line="180"/>
                <method name="trimToSize" type="void" line="183">
                    <scope line="184"/>
                    <scope line="187"/>
                    <scope line="191">
                        <declaration name="al" type="ArrayList&lt;Attribute&gt;" line="192"/>
                        <declaration name="allCanon" type="boolean" line="194"/>
                        <scope line="195">
                            <scope line="196"/>
                            <scope line="199"/>
                        </scope>
                        <scope line="204"/>
                    </scope>
                </method>
                <method name="addAttribute" type="void" line="209">
                    <params>
                        <param name="a" type="Attribute"/>
                    </params>
                </method>
                <method name="removeAttribute" type="Attribute" line="214">
                    <params>
                        <param name="a" type="Attribute"/>
                    </params>
                </method>
                <method name="getAttribute" type="Attribute" line="221">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="visitRefs" type="void" line="224">
                    <params>
                        <param name="mode" type="int"/>
                        <param name="refs" type="Collection<Entry>"/>
                    </params>
                    <scope line="226"/>
                </method>
                <declaration name="noAttributes" type="List&lt;Attribute&gt;" line="230"/>
                <method name="getAttributes" type="List<Attribute>" line="231"/>
                <method name="setAttributes" type="void" line="235">
                    <params>
                        <param name="attrList" type="List<Attribute>"/>
                    </params>
                </method>
                <method name="getAttribute" type="Attribute" line="239">
                    <params>
                        <param name="attrName" type="String"/>
                    </params>
                    <scope line="241"/>
                </method>
                <method name="getAttribute" type="Attribute" line="246">
                    <params>
                        <param name="attrDef" type="Layout"/>
                    </params>
                    <scope line="248"/>
                </method>
                <method name="removeAttribute" type="Attribute" line="253">
                    <params>
                        <param name="attrName" type="String"/>
                    </params>
                </method>
                <method name="removeAttribute" type="Attribute" line="256">
                    <params>
                        <param name="attrDef" type="Layout"/>
                    </params>
                </method>
                <method name="strip" type="void" line="259">
                    <params>
                        <param name="attrName" type="String"/>
                    </params>
                </method>
            </class>
            <class name="ValueStream" line="263">
                <method name="getInt" type="int" line="264">
                    <params>
                        <param name="bandIndex" type="int"/>
                    </params>
                </method>
                <method name="putInt" type="void" line="267">
                    <params>
                        <param name="bandIndex" type="int"/>
                        <param name="value" type="int"/>
                    </params>
                </method>
                <method name="getRef" type="Entry" line="270">
                    <params>
                        <param name="bandIndex" type="int"/>
                    </params>
                </method>
                <method name="putRef" type="void" line="273">
                    <params>
                        <param name="bandIndex" type="int"/>
                        <param name="ref" type="Entry"/>
                    </params>
                </method>
                <method name="decodeBCI" type="int" line="276">
                    <params>
                        <param name="bciCode" type="int"/>
                    </params>
                </method>
                <method name="encodeBCI" type="int" line="279">
                    <params>
                        <param name="bci" type="int"/>
                    </params>
                </method>
                <method name="noteBackCall" type="void" line="282">
                    <params>
                        <param name="whichCallable" type="int"/>
                    </params>
                </method>
                <method name="undef" type="RuntimeException" line="284"/>
            </class>
            <declaration name="EK_INT" type="byte" line="288"/>
            <declaration name="EK_BCI" type="byte" line="289"/>
            <declaration name="EK_BCO" type="byte" line="290"/>
            <declaration name="EK_FLAG" type="byte" line="291"/>
            <declaration name="EK_REPL" type="byte" line="292"/>
            <declaration name="EK_REF" type="byte" line="293"/>
            <declaration name="EK_UN" type="byte" line="294"/>
            <declaration name="EK_CASE" type="byte" line="295"/>
            <declaration name="EK_CALL" type="byte" line="296"/>
            <declaration name="EK_CBLE" type="byte" line="297"/>
            <declaration name="EF_SIGN" type="byte" line="298"/>
            <declaration name="EF_DELTA" type="byte" line="299"/>
            <declaration name="EF_NULL" type="byte" line="300"/>
            <declaration name="EF_BACK" type="byte" line="301"/>
            <declaration name="NO_BAND_INDEX" type="int" line="302"/>
            <class name="Layout" line="303">
                <implements interface="Comparable"/>
                <javadoc line="303">
                    A &quot;class&quot; of attributes, characterized by a context-type, name
                      and format.  The formats are specified in a &quot;little language&quot;.                    
                </javadoc>
                <declaration name="ctype" type="int" line="308"/>
                <declaration name="name" type="String" line="309"/>
                <declaration name="hasRefs" type="boolean" line="310"/>
                <declaration name="layout" type="String" line="311"/>
                <declaration name="bandCount" type="int" line="312"/>
                <declaration name="elems" type="Element[]" line="313"/>
                <declaration name="canon" type="Attribute" line="314"/>
                <method name="ctype" type="int" line="315"/>
                <method name="name" type="String" line="318"/>
                <method name="layout" type="String" line="321"/>
                <method name="canonicalInstance" type="Attribute" line="324"/>
                <method name="getNameRef" type="Entry" line="327"/>
                <method name="isEmpty" type="boolean" line="330"/>
                <method name="Layout" type="constructor" line="333">
                    <params>
                        <param name="ctype" type="int"/>
                        <param name="name" type="String"/>
                        <param name="layout" type="String"/>
                    </params>
                    <declaration name="hasCallables" type="boolean" line="338"/>
                    <scope line="339">
                        <scope line="340"/>
                        <scope line="343">
                            <declaration name="bodies" type="String[]" line="344"/>
                            <declaration name="lelems" type="Element[]" line="345"/>
                            <scope line="347">
                                <declaration name="ce" type="Element" line="348"/>
                            </scope>
                            <scope line="355">
                                <declaration name="ce" type="Element" line="356"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="361"/>
                </method>
                <method name="Layout" type="constructor" line="366"/>
                <method name="makeKey" type="Layout" line="368">
                    <params>
                        <param name="ctype" type="int"/>
                        <param name="name" type="String"/>
                        <param name="layout" type="String"/>
                    </params>
                    <declaration name="def" type="Layout" line="369"/>
                </method>
                <method name="makeKey" type="Layout" line="376">
                    <params>
                        <param name="ctype" type="int"/>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="addContent" type="Attribute" line="379">
                    <params>
                        <param name="bytes" type="byte[]"/>
                        <param name="fixups" type="Object"/>
                    </params>
                </method>
                <method name="addContent" type="Attribute" line="382">
                    <params>
                        <param name="bytes" type="byte[]"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="385">
                    <params>
                        <param name="x" type="Object"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="388">
                    <params>
                        <param name="that" type="Layout"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="391"/>
                <method name="compareTo" type="int" line="394">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="that" type="Layout" line="395"/>
                    <declaration name="r" type="int" line="396"/>
                </method>
                <method name="toString" type="String" line="403">
                    <declaration name="str" type="String" line="404"/>
                </method>
                <method name="stringForDebug" type="String" line="408"/>
                <class name="Element" line="411">
                    <declaration name="layout" type="String" line="412"/>
                    <declaration name="flags" type="byte" line="413"/>
                    <declaration name="kind" type="byte" line="414"/>
                    <declaration name="len" type="byte" line="415"/>
                    <declaration name="refKind" type="byte" line="416"/>
                    <declaration name="bandIndex" type="int" line="417"/>
                    <declaration name="value" type="int" line="418"/>
                    <declaration name="body" type="Element[]" line="419"/>
                    <method name="flagTest" type="boolean" line="420">
                        <params>
                            <param name="mask" type="byte"/>
                        </params>
                    </method>
                    <method name="Element" type="constructor" line="423"/>
                    <method name="removeBand" type="void" line="426"/>
                    <method name="hasBand" type="boolean" line="431"/>
                    <method name="toString" type="String" line="434">
                        <declaration name="str" type="String" line="435"/>
                    </method>
                    <method name="stringForDebug" type="String" line="439">
                        <declaration name="lbody" type="Element[]" line="440"/>
                    </method>
                </class>
                <method name="hasCallables" type="boolean" line="452"/>
                <declaration name="noElems" type="Element[]" line="455"/>
                <method name="getCallables" type="Element[]" line="456">
                    <scope line="457">
                        <declaration name="nelems" type="Element[]" line="458"/>
                    </scope>
                </method>
                <method name="getEntryPoint" type="Element[]" line="463">
                    <scope line="465">
                        <declaration name="nelems" type="Element[]" line="466"/>
                    </scope>
                </method>
                <javadoc line="470">
                    Return a sequence of tokens from the given attribute bytes.
                      Sequence elements will be 1-1 correspondent with my layout tokens.                    
                </javadoc>
                <method name="parse" type="void" line="474">
                    <params>
                        <param name="holder" type="Holder"/>
                        <param name="bytes" type="byte[]"/>
                        <param name="pos" type="int"/>
                        <param name="len" type="int"/>
                        <param name="out" type="ValueStream"/>
                    </params>
                    <declaration name="end" type="int" line="475"/>
                </method>
                <javadoc line="478">
                    Given a sequence of tokens, return the attribute bytes.
                      Sequence elements must be 1-1 correspondent with my layout tokens.
                      The returned object is a cookie for Fixups.finishRefs, which
                      must be used to harden any references into integer indexes.                    
                </javadoc>
                <method name="unparse" type="Object" line="484">
                    <params>
                        <param name="in" type="ValueStream"/>
                        <param name="out" type="ByteArrayOutputStream"/>
                    </params>
                    <declaration name="fixups" type="Object[]" line="485"/>
                </method>
                <method name="layoutForPackageMajver" type="String" line="489">
                    <params>
                        <param name="majver" type="int"/>
                    </params>
                    <scope line="490"/>
                </method>
            </class>
            <class name="FormatException" line="496">
                <extends class="IOException"/>
                <declaration name="ctype" type="int" line="497"/>
                <declaration name="name" type="String" line="498"/>
                <declaration name="layout" type="String" line="499"/>
                <method name="FormatException" type="constructor" line="500">
                    <params>
                        <param name="message" type="String"/>
                        <param name="ctype" type="int"/>
                        <param name="name" type="String"/>
                        <param name="layout" type="String"/>
                    </params>
                </method>
                <method name="FormatException" type="constructor" line="506">
                    <params>
                        <param name="message" type="String"/>
                        <param name="ctype" type="int"/>
                        <param name="name" type="String"/>
                    </params>
                </method>
            </class>
            <method name="visitRefs" type="void" line="510">
                <params>
                    <param name="holder" type="Holder"/>
                    <param name="mode" type="int"/>
                    <param name="refs" type="Collection<Entry>"/>
                </params>
                <scope line="511"/>
                <scope line="516"/>
                <anonymous_class line="520">
                    <method name="putInt" type="void" line="521">
                        <params>
                            <param name="bandIndex" type="int"/>
                            <param name="value" type="int"/>
                        </params>
                    </method>
                    <method name="putRef" type="void" line="523">
                        <params>
                            <param name="bandIndex" type="int"/>
                            <param name="ref" type="Entry"/>
                        </params>
                    </method>
                    <method name="encodeBCI" type="int" line="526">
                        <params>
                            <param name="bci" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <method name="parse" type="void" line="532">
                <params>
                    <param name="holder" type="Holder"/>
                    <param name="bytes" type="byte[]"/>
                    <param name="pos" type="int"/>
                    <param name="len" type="int"/>
                    <param name="out" type="ValueStream"/>
                </params>
            </method>
            <method name="unparse" type="Object" line="535">
                <params>
                    <param name="in" type="ValueStream"/>
                    <param name="out" type="ByteArrayOutputStream"/>
                </params>
            </method>
            <method name="toString" type="String" line="538"/>
            <javadoc line="541">
                Remove any informal &quot;pretty printing&quot; from the layout string.
                  Removes blanks and control chars.
                  Removes &apos;#&apos; comments (to end of line).
                  Replaces &apos;\c&apos; by the decimal code of the character c.
                  Replaces &apos;0xNNN&apos; by the decimal code of the hex number NNN.                
            </javadoc>
            <method name="normalizeLayoutString" type="String" line="548">
                <params>
                    <param name="layout" type="String"/>
                </params>
                <declaration name="buf" type="StringBuilder" line="549"/>
                <scope line="550">
                    <declaration name="ch" type="char" line="551"/>
                    <scope line="552"/>
                    <scope line="555">
                        <declaration name="end1" type="int" line="556"/>
                        <declaration name="end2" type="int" line="557"/>
                    </scope>
                    <scope line="562"/>
                    <scope line="565">
                        <declaration name="start" type="int" line="566"/>
                        <declaration name="end" type="int" line="567"/>
                        <scope line="568">
                            <declaration name="dig" type="int" line="569"/>
                        </scope>
                        <scope line="573">
                            <declaration name="num" type="String" line="574"/>
                        </scope>
                        <scope line="578"/>
                    </scope>
                    <scope line="582"/>
                </scope>
                <declaration name="result" type="String" line="586"/>
                <scope line="587"/>
            </method>
            <javadoc line="594">
                Parse the attribute layout language.
                  &lt;pre&gt;
                  attribute_layout:
                  ( layout_element ) | ( callable )+
                  layout_element:
                  ( integral | replication | union | call | reference )
                  callable:
                  &apos;[&apos; body &apos;]&apos;
                  body:
                  ( layout_element )+
                  integral:
                  ( unsigned_int | signed_int | bc_index | bc_offset | flag )
                  unsigned_int:
                  uint_type
                  signed_int:
                  &apos;S&apos; uint_type
                  any_int:
                  ( unsigned_int | signed_int )
                  bc_index:
                  ( &apos;P&apos; uint_type | &apos;PO&apos; uint_type )
                  bc_offset:
                  &apos;O&apos; any_int
                  flag:
                  &apos;F&apos; uint_type
                  uint_type:
                  ( &apos;B&apos; | &apos;H&apos; | &apos;I&apos; | &apos;V&apos; )
                  replication:
                  &apos;N&apos; uint_type &apos;[&apos; body &apos;]&apos;
                  union:
                  &apos;T&apos; any_int (union_case) &apos;(&apos; &apos;)&apos; &apos;[&apos; (body)? &apos;]&apos;
                  union_case:
                  &apos;(&apos; union_case_tag (&apos;,&apos; union_case_tag) &apos;)&apos; &apos;[&apos; (body)? &apos;]&apos;
                  union_case_tag:
                  ( numeral | numeral &apos;-&apos; numeral )
                  call:
                  &apos;(&apos; numeral &apos;)&apos;
                  reference:
                  reference_type ( &apos;N&apos; )? uint_type
                  reference_type:
                  ( constant_ref | schema_ref | utf8_ref | untyped_ref )
                  constant_ref:
                  ( &apos;KI&apos; | &apos;KJ&apos; | &apos;KF&apos; | &apos;KD&apos; | &apos;KS&apos; | &apos;KQ&apos; )
                  schema_ref:
                  ( &apos;RC&apos; | &apos;RS&apos; | &apos;RD&apos; | &apos;RF&apos; | &apos;RM&apos; | &apos;RI&apos; )
                  utf8_ref:
                  &apos;RU&apos;
                  untyped_ref:
                  &apos;RQ&apos;
                  numeral:
                  &apos;(&apos; (&apos;-&apos;)? (digit)+ &apos;)&apos;
                  digit:
                  ( &apos;0&apos; | &apos;1&apos; | &apos;2&apos; | &apos;3&apos; | &apos;4&apos; | &apos;5&apos; | &apos;6&apos; | &apos;7&apos; | &apos;8&apos; | &apos;9&apos; )
                  &lt;/pre&gt;                
            </javadoc>
            <method name="tokenizeLayout" type="Layout.Element[]" line="649">
                <params>
                    <param name="self" type="Layout"/>
                    <param name="curCble" type="int"/>
                    <param name="layout" type="String"/>
                </params>
                <declaration name="col" type="List&lt;Layout.Element&gt;" line="650"/>
                <declaration name="res" type="Layout.Element[]" line="652"/>
            </method>
            <method name="tokenizeLayout" type="void" line="656">
                <params>
                    <param name="self" type="Layout"/>
                    <param name="curCble" type="int"/>
                    <param name="layout" type="String"/>
                    <param name="col" type="List<Layout.Element>"/>
                </params>
                <declaration name="prevBCI" type="boolean" line="657"/>
                <scope line="658">
                    <declaration name="start" type="int" line="659"/>
                    <declaration name="body" type="int" line="660"/>
                    <declaration name="e" type="Layout.Element" line="661"/>
                    <declaration name="kind" type="byte" line="662"/>
                    <scope line="679">
                        <scope line="681"/>
                    </scope>
                    <scope line="693"/>
                    <scope line="706"/>
                    <declaration name="cases" type="List&lt;Layout.Element&gt;" line="716"/>
                    <scope line="717">
                        <scope line="718"/>
                        <declaration name="beg" type="int" line="722"/>
                        <declaration name="cstr" type="String" line="724"/>
                        <declaration name="cstrlen" type="int" line="725"/>
                        <scope line="726"/>
                        <declaration name="cbody" type="Layout.Element[]" line="732"/>
                        <scope line="733">
                            <declaration name="ce" type="Layout.Element" line="734"/>
                        </scope>
                        <scope line="741">
                            <declaration name="firstCaseNum" type="boolean" line="742"/>
                            <scope line="743">
                                <declaration name="cstr1" type="String" line="746"/>
                                <declaration name="value0" type="int" line="748"/>
                                <declaration name="dash" type="int" line="749"/>
                                <scope line="750">
                                    <scope line="753"/>
                                </scope>
                                <scope line="758"/>
                                <scope line="761">
                                    <declaration name="ce" type="Layout.Element" line="762"/>
                                </scope>
                                <scope line="772"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="781">
                        <declaration name="ce" type="Layout.Element" line="782"/>
                        <scope line="783">
                            <scope line="784"/>
                        </scope>
                    </scope>
                    <declaration name="cstr" type="String" line="795"/>
                    <declaration name="offset" type="int" line="796"/>
                    <declaration name="target" type="int" line="797"/>
                    <scope line="798"/>
                    <declaration name="ce" type="Layout.Element" line="802"/>
                    <scope line="806"/>
                    <scope line="833"/>
                    <scope line="867"/>
                    <scope line="874"/>
                    <scope line="879">
                        <scope line="880"/>
                    </scope>
                </scope>
            </method>
            <method name="splitBodies" type="String[]" line="894">
                <params>
                    <param name="layout" type="String"/>
                </params>
                <declaration name="bodies" type="List&lt;String&gt;" line="895"/>
                <scope line="896">
                    <declaration name="body" type="int" line="898"/>
                </scope>
                <declaration name="res" type="String[]" line="902"/>
            </method>
            <method name="skipBody" type="int" line="906">
                <params>
                    <param name="layout" type="String"/>
                    <param name="i" type="int"/>
                </params>
                <scope line="909"/>
            </method>
            <method name="tokenizeUInt" type="int" line="923">
                <params>
                    <param name="e" type="Layout.Element"/>
                    <param name="layout" type="String"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="tokenizeSInt" type="int" line="942">
                <params>
                    <param name="e" type="Layout.Element"/>
                    <param name="layout" type="String"/>
                    <param name="i" type="int"/>
                </params>
                <scope line="943"/>
            </method>
            <method name="isDigit" type="boolean" line="949">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="952">
                Find an occurrence of hyphen &apos;-&apos; between two numerals.                
            </javadoc>
            <method name="findCaseDash" type="int" line="955">
                <params>
                    <param name="layout" type="String"/>
                    <param name="fromIndex" type="int"/>
                </params>
                <declaration name="lastDash" type="int" line="957"/>
                <scope line="958">
                    <declaration name="dash" type="int" line="959"/>
                    <scope line="961">
                        <declaration name="afterDash" type="char" line="962"/>
                        <scope line="964"/>
                    </scope>
                </scope>
            </method>
            <method name="parseIntBefore" type="int" line="971">
                <params>
                    <param name="layout" type="String"/>
                    <param name="dash" type="int"/>
                </params>
                <declaration name="end" type="int" line="972"/>
                <declaration name="beg" type="int" line="973"/>
                <scope line="974"/>
            </method>
            <method name="parseIntAfter" type="int" line="982">
                <params>
                    <param name="layout" type="String"/>
                    <param name="dash" type="int"/>
                </params>
                <declaration name="beg" type="int" line="983"/>
                <declaration name="end" type="int" line="984"/>
                <declaration name="limit" type="int" line="985"/>
                <scope line="987"/>
            </method>
            <javadoc line="993">
                For compatibility with 1.5 pack, expand 1-5 into 1,2,3,4,5.                
            </javadoc>
            <method name="expandCaseDashNotation" type="String" line="996">
                <params>
                    <param name="layout" type="String"/>
                </params>
                <declaration name="dash" type="int" line="997"/>
                <declaration name="result" type="StringBuilder" line="999"/>
                <declaration name="sofar" type="int" line="1000"/>
                <scope line="1001">
                    <declaration name="value0" type="int" line="1004"/>
                    <declaration name="value1" type="int" line="1005"/>
                    <scope line="1008"/>
                </scope>
            </method>
            <scope line="1018"/>
            <method name="parseUsing" type="int" line="1024">
                <params>
                    <param name="elems" type="Layout.Element[]"/>
                    <param name="holder" type="Holder"/>
                    <param name="bytes" type="byte[]"/>
                    <param name="pos" type="int"/>
                    <param name="len" type="int"/>
                    <param name="out" type="ValueStream"/>
                </params>
                <declaration name="prevBCI" type="int" line="1025"/>
                <declaration name="prevRBCI" type="int" line="1026"/>
                <declaration name="end" type="int" line="1027"/>
                <declaration name="buf" type="int[]" line="1028"/>
                <scope line="1029">
                    <declaration name="e" type="Layout.Element" line="1030"/>
                    <declaration name="bandIndex" type="int" line="1031"/>
                    <declaration name="value" type="int" line="1032"/>
                    <declaration name="BCI" type="int" line="1033"/>
                    <scope line="1044"/>
                    <scope line="1047"/>
                    <scope line="1073"/>
                    <declaration name="ce" type="Layout.Element" line="1081"/>
                    <declaration name="localRef" type="int" line="1092"/>
                    <declaration name="globalRef" type="Entry" line="1093"/>
                    <scope line="1094"/>
                    <scope line="1097">
                        <scope line="1099">
                            <declaration name="typeName" type="String" line="1100"/>
                        </scope>
                        <scope line="1103"/>
                        <scope line="1107"/>
                    </scope>
                </scope>
            </method>
            <method name="matchCase" type="Layout.Element" line="1120">
                <params>
                    <param name="e" type="Layout.Element"/>
                    <param name="value" type="int"/>
                </params>
                <declaration name="lastj" type="int" line="1122"/>
                <scope line="1123">
                    <declaration name="ce" type="Layout.Element" line="1124"/>
                </scope>
            </method>
            <method name="parseInt" type="int" line="1130">
                <params>
                    <param name="e" type="Layout.Element"/>
                    <param name="bytes" type="byte[]"/>
                    <param name="pos" type="int"/>
                    <param name="buf" type="int[]"/>
                </params>
                <declaration name="value" type="int" line="1131"/>
                <declaration name="loBits" type="int" line="1132"/>
                <scope line="1133"/>
                <scope line="1136">
                    <declaration name="hiBits" type="int" line="1137"/>
                </scope>
            </method>
            <method name="unparseUsing" type="void" line="1143">
                <params>
                    <param name="elems" type="Layout.Element[]"/>
                    <param name="fixups" type="Object[]"/>
                    <param name="in" type="ValueStream"/>
                    <param name="out" type="ByteArrayOutputStream"/>
                </params>
                <declaration name="prevBCI" type="int" line="1144"/>
                <declaration name="prevRBCI" type="int" line="1145"/>
                <scope line="1146">
                    <declaration name="e" type="Layout.Element" line="1147"/>
                    <declaration name="bandIndex" type="int" line="1148"/>
                    <declaration name="value" type="int" line="1149"/>
                    <declaration name="BCI" type="int" line="1150"/>
                    <scope line="1158"/>
                    <scope line="1161"/>
                    <scope line="1187"/>
                    <declaration name="ce" type="Layout.Element" line="1194"/>
                    <declaration name="globalRef" type="Entry" line="1203"/>
                    <declaration name="localRef" type="int" line="1204"/>
                    <scope line="1205"/>
                    <scope line="1209"/>
                </scope>
            </method>
            <method name="unparseInt" type="void" line="1220">
                <params>
                    <param name="e" type="Layout.Element"/>
                    <param name="value" type="int"/>
                    <param name="out" type="ByteArrayOutputStream"/>
                </params>
                <declaration name="loBits" type="int" line="1221"/>
                <scope line="1222"/>
                <scope line="1225">
                    <declaration name="hiBits" type="int" line="1226"/>
                    <declaration name="codedValue" type="int" line="1227"/>
                </scope>
                <scope line="1232"/>
            </method>
        </class>
    </source>