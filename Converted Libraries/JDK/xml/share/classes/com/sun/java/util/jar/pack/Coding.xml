<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="Coding" line="8">
            <implements interface="Comparable"/>
            <implements interface="CodingMethod"/>
            <implements interface="Histogram.BitMetric"/>
            <javadoc line="8">
                Define the conversions between sequences of small integers and raw bytes.
                  This is a schema of encodings which incorporates varying lengths,
                  varying degrees of length variability, and varying amounts of signed-ness.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <method name="saturate32" type="int" line="15">
                <params>
                    <param name="x" type="long"/>
                </params>
            </method>
            <method name="codeRangeLong" type="long" line="20">
                <params>
                    <param name="B" type="int"/>
                    <param name="H" type="int"/>
                </params>
            </method>
            <method name="codeRangeLong" type="long" line="23">
                <params>
                    <param name="B" type="int"/>
                    <param name="H" type="int"/>
                    <param name="nMax" type="int"/>
                </params>
                <declaration name="L" type="int" line="29"/>
                <declaration name="sum" type="long" line="30"/>
                <declaration name="H_i" type="long" line="31"/>
                <scope line="32"/>
            </method>
            <javadoc line="40">
                Largest int representable by (B,H,S) in up to nMax bytes.                
            </javadoc>
            <method name="codeMax" type="int" line="43">
                <params>
                    <param name="B" type="int"/>
                    <param name="H" type="int"/>
                    <param name="S" type="int"/>
                    <param name="nMax" type="int"/>
                </params>
                <declaration name="range" type="long" line="44"/>
                <declaration name="maxPos" type="long" line="47"/>
                <scope line="48"/>
                <declaration name="smax" type="int" line="52"/>
            </method>
            <javadoc line="56">
                Smallest int representable by (B,H,S) in up to nMax bytes.
                  Returns Integer.MIN_VALUE if 32-bit wraparound covers
                  the entire negative range.                
            </javadoc>
            <method name="codeMin" type="int" line="61">
                <params>
                    <param name="B" type="int"/>
                    <param name="H" type="int"/>
                    <param name="S" type="int"/>
                    <param name="nMax" type="int"/>
                </params>
                <declaration name="range" type="long" line="62"/>
                <scope line="63"/>
                <scope line="66"/>
                <declaration name="maxNeg" type="long" line="69"/>
            </method>
            <method name="toUnsigned32" type="long" line="74">
                <params>
                    <param name="sx" type="int"/>
                </params>
            </method>
            <method name="isNegativeCode" type="boolean" line="77">
                <params>
                    <param name="ux" type="long"/>
                    <param name="S" type="int"/>
                </params>
                <declaration name="Smask" type="int" line="80"/>
            </method>
            <method name="hasNegativeCode" type="boolean" line="83">
                <params>
                    <param name="sx" type="int"/>
                    <param name="S" type="int"/>
                </params>
            </method>
            <method name="decodeSign32" type="int" line="87">
                <params>
                    <param name="ux" type="long"/>
                    <param name="S" type="int"/>
                </params>
            </method>
            <method name="encodeSign32" type="long" line="102">
                <params>
                    <param name="sx" type="int"/>
                    <param name="S" type="int"/>
                </params>
            </method>
            <method name="writeInt" type="void" line="118">
                <params>
                    <param name="out" type="byte[]"/>
                    <param name="outpos" type="int[]"/>
                    <param name="sx" type="int"/>
                    <param name="B" type="int"/>
                    <param name="H" type="int"/>
                    <param name="S" type="int"/>
                </params>
            </method>
            <method name="readInt" type="int" line="135">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inpos" type="int[]"/>
                    <param name="B" type="int"/>
                    <param name="H" type="int"/>
                    <param name="S" type="int"/>
                </params>
                <declaration name="L" type="int" line="136"/>
                <declaration name="sum" type="long" line="137"/>
                <declaration name="H_i" type="long" line="138"/>
                <declaration name="pos" type="int" line="139"/>
                <scope line="140">
                    <declaration name="b_i" type="int" line="141"/>
                </scope>
            </method>
            <method name="readIntFrom" type="int" line="149">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="B" type="int"/>
                    <param name="H" type="int"/>
                    <param name="S" type="int"/>
                </params>
                <declaration name="L" type="int" line="150"/>
                <declaration name="sum" type="long" line="151"/>
                <declaration name="H_i" type="long" line="152"/>
                <scope line="153">
                    <declaration name="b_i" type="int" line="154"/>
                </scope>
            </method>
            <declaration name="B_MAX" type="int" line="163"/>
            <declaration name="H_MAX" type="int" line="164"/>
            <declaration name="S_MAX" type="int" line="165"/>
            <declaration name="B" type="int" line="166"/>
            <declaration name="H" type="int" line="167"/>
            <declaration name="L" type="int" line="168"/>
            <declaration name="S" type="int" line="169"/>
            <declaration name="del" type="int" line="170"/>
            <declaration name="min" type="int" line="171"/>
            <declaration name="max" type="int" line="172"/>
            <declaration name="umin" type="int" line="173"/>
            <declaration name="umax" type="int" line="174"/>
            <declaration name="byteMin" type="int[]" line="175"/>
            <declaration name="byteMax" type="int[]" line="176"/>
            <method name="Coding" type="constructor" line="177">
                <params>
                    <param name="B" type="int"/>
                    <param name="H" type="int"/>
                    <param name="S" type="int"/>
                </params>
            </method>
            <method name="Coding" type="constructor" line="180">
                <params>
                    <param name="B" type="int"/>
                    <param name="H" type="int"/>
                    <param name="S" type="int"/>
                    <param name="del" type="int"/>
                </params>
                <scope line="192"/>
            </method>
            <method name="equals" type="boolean" line="197">
                <params>
                    <param name="x" type="Object"/>
                </params>
                <declaration name="that" type="Coding" line="199"/>
            </method>
            <method name="hashCode" type="int" line="206"/>
            <declaration name="codeMap" type="Map&lt;Coding,Coding&gt;" line="209"/>
            <method name="of" type="Coding" line="210">
                <params>
                    <param name="B" type="int"/>
                    <param name="H" type="int"/>
                    <param name="S" type="int"/>
                    <param name="del" type="int"/>
                </params>
                <declaration name="x0" type="Coding" line="212"/>
                <declaration name="x1" type="Coding" line="213"/>
            </method>
            <method name="of" type="Coding" line="217">
                <params>
                    <param name="B" type="int"/>
                    <param name="H" type="int"/>
                </params>
            </method>
            <method name="of" type="Coding" line="220">
                <params>
                    <param name="B" type="int"/>
                    <param name="H" type="int"/>
                    <param name="S" type="int"/>
                </params>
            </method>
            <method name="canRepresentValue" type="boolean" line="223">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="227">
                Can this coding represent a single value, possibly a delta?
                  This ignores the D property.  That is, for delta codings,
                  this tests whether a delta value of &apos;x&apos; can be coded.
                  For signed delta codings which produce unsigned end values,
                  use canRepresentUnsigned.                
            </javadoc>
            <method name="canRepresentSigned" type="boolean" line="234">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="237">
                Can this coding, apart from its S property,
                  represent a single value?  (Negative values
                  can only be represented via 32-bit overflow,
                  so this returns true for negative values
                  if isFullRange is true.)                
            </javadoc>
            <method name="canRepresentUnsigned" type="boolean" line="244">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="readFrom" type="int" line="247">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inpos" type="int[]"/>
                </params>
            </method>
            <method name="writeTo" type="void" line="250">
                <params>
                    <param name="out" type="byte[]"/>
                    <param name="outpos" type="int[]"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="readFrom" type="int" line="253">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
            </method>
            <method name="writeTo" type="void" line="256">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="x" type="int"/>
                </params>
                <declaration name="buf" type="byte[]" line="257"/>
                <declaration name="pos" type="int[]" line="258"/>
            </method>
            <method name="readArrayFrom" type="void" line="262">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="a" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="264">
                    <declaration name="state" type="long" line="265"/>
                    <scope line="266">
                        <scope line="268"/>
                    </scope>
                </scope>
            </method>
            <method name="writeArrayTo" type="void" line="275">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="a" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="277">
                    <declaration name="deltas" type="int[]" line="278"/>
                </scope>
                <declaration name="buf" type="byte[]" line="285"/>
                <declaration name="bufmax" type="int" line="286"/>
                <declaration name="pos" type="int[]" line="287"/>
                <scope line="288">
                    <scope line="289"/>
                </scope>
            </method>
            <javadoc line="297">
                Tell if the range of this coding (number of distinct
                  representable values) can be expressed in 32 bits.                
            </javadoc>
            <method name="isSubrange" type="boolean" line="301"/>
            <javadoc line="304">
                Tell if this coding can represent all 32-bit values.
                  Note:  Some codings, such as unsigned ones, can be neither
                  subranges nor full-range codings.                
            </javadoc>
            <method name="isFullRange" type="boolean" line="309"/>
            <javadoc line="312">
                Return the number of values this coding (a subrange) can represent.                
            </javadoc>
            <method name="getRange" type="int" line="315"/>
            <method name="setB" type="Coding" line="319">
                <params>
                    <param name="B" type="int"/>
                </params>
            </method>
            <method name="setH" type="Coding" line="322">
                <params>
                    <param name="H" type="int"/>
                </params>
            </method>
            <method name="setS" type="Coding" line="325">
                <params>
                    <param name="S" type="int"/>
                </params>
            </method>
            <method name="setL" type="Coding" line="328">
                <params>
                    <param name="L" type="int"/>
                </params>
            </method>
            <method name="setD" type="Coding" line="331">
                <params>
                    <param name="del" type="int"/>
                </params>
            </method>
            <method name="getDeltaCoding" type="Coding" line="334"/>
            <javadoc line="337">
                Return a coding suitable for representing summed, modulo-reduced values.                
            </javadoc>
            <method name="getValueCoding" type="Coding" line="340"/>
            <javadoc line="344">
                Reduce the given value to be within this coding&apos;s unsigned range,
                  by adding or subtracting a multiple of (max-min+1).                
            </javadoc>
            <method name="reduceToUnsignedRange" type="int" line="348">
                <params>
                    <param name="value" type="long"/>
                </params>
                <declaration name="range" type="int" line="350"/>
            </method>
            <method name="reduceToSignedRange" type="int" line="357">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <method name="reduceToSignedRange" type="int" line="361">
                <params>
                    <param name="value" type="int"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <declaration name="range" type="int" line="362"/>
                <declaration name="value0" type="int" line="364"/>
                <scope line="366"/>
            </method>
            <javadoc line="376">
                Does this coding support at least one negative value?
                  Includes codings that can do so via 32-bit wraparound.                
            </javadoc>
            <method name="isSigned" type="boolean" line="380"/>
            <javadoc line="383">
                Does this coding code arrays by making successive differences?                
            </javadoc>
            <method name="isDelta" type="boolean" line="386"/>
            <method name="B" type="int" line="389"/>
            <method name="H" type="int" line="392"/>
            <method name="L" type="int" line="395"/>
            <method name="S" type="int" line="398"/>
            <method name="del" type="int" line="401"/>
            <method name="min" type="int" line="404"/>
            <method name="max" type="int" line="407"/>
            <method name="umin" type="int" line="410"/>
            <method name="umax" type="int" line="413"/>
            <method name="byteMin" type="int" line="416">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="byteMax" type="int" line="419">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="compareTo" type="int" line="422">
                <params>
                    <param name="x" type="Object"/>
                </params>
                <declaration name="that" type="Coding" line="423"/>
                <declaration name="dkey" type="int" line="424"/>
            </method>
            <javadoc line="430">
                Heuristic measure of the difference between two codings.                
            </javadoc>
            <method name="distanceFrom" type="int" line="433">
                <params>
                    <param name="that" type="Coding"/>
                </params>
                <declaration name="diffdel" type="int" line="434"/>
                <declaration name="diffS" type="int" line="436"/>
                <declaration name="diffB" type="int" line="438"/>
                <declaration name="diffHL" type="int" line="440"/>
                <scope line="441"/>
                <scope line="444">
                    <declaration name="thisHL" type="int" line="445"/>
                    <declaration name="thatHL" type="int" line="446"/>
                </scope>
                <declaration name="norm" type="int" line="452"/>
            </method>
            <method name="getHL" type="int" line="456"/>
            <javadoc line="461">
                ceiling(log[2](x)): {1-&gt;0, 2-&gt;1, 3-&gt;2, 4-&gt;2, ...}                
            </javadoc>
            <method name="ceil_lg2" type="int" line="464">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="lg" type="int" line="467"/>
                <scope line="468"/>
            </method>
            <declaration name="byteBitWidths" type="byte[]" line="474"/>
            <scope line="475">
                <scope line="476"/>
                <scope line="479"/>
            </scope>
            <javadoc line="483">
                Number of significant bits in i, not counting sign bits.
                  For positive i, it is ceil_lg2(i + 1).                
            </javadoc>
            <method name="bitWidth" type="int" line="487">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="w" type="int" line="489"/>
                <declaration name="lo" type="int" line="490"/>
                <declaration name="hi" type="int" line="492"/>
                <scope line="494"/>
                <scope line="499"/>
            </method>
            <javadoc line="506">
                Create an array of successive differences.
                  If min==max, accept any and all 32-bit overflow.
                  Otherwise, avoid 32-bit overflow, and reduce all differences
                  to a value in the given range, by adding or subtracting
                  multiples of the range cardinality (max-min+1).
                  Also, the values are assumed to be in the range [0..(max-min)].                
            </javadoc>
            <method name="makeDeltas" type="int[]" line="514">
                <params>
                    <param name="values" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <declaration name="count" type="int" line="516"/>
                <declaration name="deltas" type="int[]" line="517"/>
                <declaration name="state" type="int" line="518"/>
                <scope line="519">
                    <scope line="520">
                        <declaration name="value" type="int" line="521"/>
                    </scope>
                </scope>
                <scope line="526">
                    <scope line="527">
                        <declaration name="value" type="int" line="528"/>
                        <declaration name="delta" type="int" line="530"/>
                    </scope>
                </scope>
            </method>
            <method name="canRepresent" type="boolean" line="539">
                <params>
                    <param name="minValue" type="int"/>
                    <param name="maxValue" type="int"/>
                </params>
                <scope line="541">
                    <scope line="542"/>
                    <scope line="545"/>
                </scope>
            </method>
            <method name="canRepresent" type="boolean" line="551">
                <params>
                    <param name="values" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="len" type="int" line="552"/>
                <declaration name="lmax" type="int" line="555"/>
                <declaration name="lmin" type="int" line="556"/>
                <scope line="557">
                    <declaration name="value" type="int" line="558"/>
                </scope>
            </method>
            <method name="getBitLength" type="double" line="564">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="567">
                How many bytes are in the coding of this value?
                  Returns Integer.MAX_VALUE if the value has no coding.
                  The coding must not be a delta coding, since there is no
                  definite size for a single value apart from its context.                
            </javadoc>
            <method name="getLength" type="int" line="573">
                <params>
                    <param name="value" type="int"/>
                </params>
                <scope line="574"/>
                <scope line="578">
                    <scope line="579"/>
                </scope>
                <scope line="583">
                    <scope line="584"/>
                </scope>
            </method>
            <method name="getLength" type="int" line="590">
                <params>
                    <param name="values" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="len" type="int" line="591"/>
                <scope line="594">
                    <declaration name="deltas" type="int[]" line="595"/>
                </scope>
                <declaration name="sum" type="int" line="601"/>
                <scope line="602">
                    <declaration name="lmax" type="int" line="603"/>
                    <declaration name="lmin" type="int" line="604"/>
                    <declaration name="longer" type="int" line="605"/>
                    <scope line="606">
                        <declaration name="value" type="int" line="607"/>
                        <scope line="608"/>
                        <scope line="611"/>
                    </scope>
                </scope>
            </method>
            <method name="getMetaCoding" type="byte[]" line="621">
                <params>
                    <param name="dflt" type="Coding"/>
                </params>
                <declaration name="canonicalIndex" type="int" line="623"/>
            </method>
            <method name="parseMetaCoding" type="int" line="627">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pos" type="int"/>
                    <param name="dflt" type="Coding"/>
                    <param name="res" type="CodingMethod"/>
                </params>
                <declaration name="op" type="int" line="628"/>
                <scope line="629">
                    <declaration name="c" type="Coding" line="630"/>
                </scope>
                <scope line="635">
                    <declaration name="dsb" type="int" line="636"/>
                    <declaration name="H_1" type="int" line="637"/>
                    <declaration name="del" type="int" line="638"/>
                    <declaration name="S" type="int" line="639"/>
                    <declaration name="B" type="int" line="640"/>
                    <declaration name="H" type="int" line="641"/>
                    <scope line="642"/>
                </scope>
            </method>
            <method name="keyString" type="String" line="650"/>
            <method name="toString" type="String" line="653">
                <declaration name="str" type="String" line="654"/>
            </method>
            <declaration name="verboseStringForDebug" type="boolean" line="657"/>
            <method name="stringForDebug" type="String" line="658">
                <declaration name="minS" type="String" line="659"/>
                <declaration name="maxS" type="String" line="660"/>
                <declaration name="str" type="String" line="661"/>
                <scope line="664">
                    <declaration name="prev_range" type="int" line="666"/>
                    <scope line="667">
                        <declaration name="range_n" type="int" line="668"/>
                        <declaration name="rngS" type="String" line="672"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>