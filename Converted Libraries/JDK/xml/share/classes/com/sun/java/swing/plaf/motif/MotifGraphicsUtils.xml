<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.motif">
        <import package="sun.swing.SwingUtilities2"/>
        <import package="javax.swing"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.Container"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="javax.swing.text.View"/>
        <class name="MotifGraphicsUtils" line="49">
            <comment line="52">
                                
            </comment>
            <comment line="62">
                Convenience method for drawing a grooved line                
            </comment>
            <comment line="470">
                Convenience function for determining ComponentOrientation.  Helps us
                 avoid having Munge directives throughout the code.                
            </comment>
            <implements interface="SwingConstants"/>
            <declaration name="MAX_ACC_WIDTH" type="String" line="52"/>
            <javadoc line="54">
                Draws the point (&lt;b&gt;x&lt;/b&gt;, &lt;b&gt;y&lt;/b&gt;) in the current color.                
            </javadoc>
            <method name="drawPoint" type="void" line="57">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <method name="drawGroove" type="void" line="67">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="shadow" type="Color"/>
                    <param name="highlight" type="Color"/>
                </params>
                <comment line="68">
                    Make no net change to g                    
                </comment>
                <declaration name="oldColor" type="Color" line="68"/>
            </method>
            <javadoc line="85">
                Draws &lt;b&gt;aString&lt;/b&gt; in the rectangle defined by
                  (&lt;b&gt;x&lt;/b&gt;, &lt;b&gt;y&lt;/b&gt;, &lt;b&gt;width&lt;/b&gt;, &lt;b&gt;height&lt;/b&gt;).
                  &lt;b&gt;justification&lt;/b&gt; specifies the text&apos;s justification, one of
                  LEFT, CENTER, or RIGHT.
                  &lt;b&gt;drawStringInRect()&lt;/b&gt; does not clip to the rectangle, but instead
                  uses this rectangle and the desired justification to compute the point
                  at which to begin drawing the text.                
                <see>
                    #drawString                    
                </see>
            </javadoc>
            <method name="drawStringInRect" type="void" line="95">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="aString" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="justification" type="int"/>
                </params>
            </method>
            <method name="drawStringInRect" type="void" line="101">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="g" type="Graphics"/>
                    <param name="aString" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="justification" type="int"/>
                </params>
                <comment line="106">
                    throw new InconsistencyException(&quot;No font set&quot;);                    
                </comment>
                <comment line="111">
                    throw new InconsistencyException(&quot;No metrics for Font &quot; + font());                    
                </comment>
                <declaration name="fontMetrics" type="FontMetrics" line="102"/>
                <declaration name="drawWidth" type="int" line="103"/>
                <scope line="105"/>
                <scope line="110"/>
                <scope line="115">
                    <scope line="117"/>
                </scope>
                <scope line="121">
                    <scope line="123"/>
                </scope>
                <scope line="127"/>
                <scope line="132"/>
            </method>
            <javadoc line="141">
                This method is not being used to paint menu item since
                  6.0 This code left for compatibility only. Do not use or
                  override it, this will not cause any visible effect.                
            </javadoc>
            <method name="paintMenuItem" type="void" line="150">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                    <param name="checkIcon" type="Icon"/>
                    <param name="arrowIcon" type="Icon"/>
                    <param name="background" type="Color"/>
                    <param name="foreground" type="Color"/>
                    <param name="defaultTextIconGap" type="int"/>
                </params>
                <comment line="187">
                    get Accelerator text                    
                </comment>
                <comment line="199">
                    layout the text and icon                    
                </comment>
                <comment line="215">
                    Paint the Check                    
                </comment>
                <comment line="224">
                    Paint the Icon                    
                </comment>
                <comment line="232">
                    Use default icon                    
                </comment>
                <comment line="244">
                    Draw the Text                    
                </comment>
                <comment line="246">
                    Once BasicHTML becomes public, use BasicHTML.propertyKey                    
                </comment>
                <comment line="247">
                    instead of the hardcoded string below!                    
                </comment>
                <comment line="255">
                    *** paint the text disabled                    
                </comment>
                <comment line="266">
                    *** paint the text normally                    
                </comment>
                <comment line="280">
                    Draw the Accelerator Text                    
                </comment>
                <comment line="283">
                    Get the maxAccWidth from the parent to calculate the offset.                    
                </comment>
                <comment line="292">
                    Calculate the offset, with which the accelerator texts will be drawn with.                    
                </comment>
                <comment line="298">
                    *** paint the acceleratorText disabled                    
                </comment>
                <comment line="306">
                    *** paint the acceleratorText normally                    
                </comment>
                <comment line="319">
                    Paint the Arrow                    
                </comment>
                <declaration name="b" type="JMenuItem" line="152"/>
                <declaration name="model" type="ButtonModel" line="153"/>
                <declaration name="size" type="Dimension" line="155"/>
                <declaration name="i" type="Insets" line="156"/>
                <declaration name="viewRect" type="Rectangle" line="158"/>
                <declaration name="iconRect" type="Rectangle" line="165"/>
                <declaration name="textRect" type="Rectangle" line="166"/>
                <declaration name="acceleratorRect" type="Rectangle" line="167"/>
                <declaration name="checkRect" type="Rectangle" line="168"/>
                <declaration name="arrowRect" type="Rectangle" line="169"/>
                <declaration name="holdf" type="Font" line="171"/>
                <declaration name="f" type="Font" line="172"/>
                <declaration name="fm" type="FontMetrics" line="174"/>
                <declaration name="fmAccel" type="FontMetrics" line="175"/>
                <scope line="178">
                    <scope line="179"/>
                    <scope line="181"/>
                </scope>
                <declaration name="accelerator" type="KeyStroke" line="188"/>
                <declaration name="acceleratorText" type="String" line="189"/>
                <scope line="190">
                    <declaration name="modifiers" type="int" line="191"/>
                    <scope line="192"/>
                </scope>
                <declaration name="text" type="String" line="200"/>
                <declaration name="holdc" type="Color" line="216"/>
                <scope line="217"/>
                <scope line="225">
                    <declaration name="icon" type="Icon" line="226"/>
                    <scope line="227"/>
                    <scope line="229">
                        <scope line="231"/>
                    </scope>
                    <scope line="235"/>
                    <scope line="239"/>
                </scope>
                <scope line="245">
                    <declaration name="v" type="View" line="248"/>
                    <scope line="249"/>
                    <scope line="251">
                        <declaration name="mnemIndex" type="int" line="252"/>
                        <scope line="254"/>
                        <scope line="265">
                            <scope line="267"/>
                            <scope line="269"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="281">
                    <declaration name="accOffset" type="int" line="284"/>
                    <declaration name="parent" type="Container" line="285"/>
                    <scope line="286">
                        <declaration name="p" type="JComponent" line="287"/>
                        <declaration name="maxValueInt" type="Integer" line="288"/>
                        <declaration name="maxValue" type="int" line="289"/>
                    </scope>
                    <scope line="297"/>
                    <scope line="305">
                        <scope line="308"/>
                        <scope line="310"/>
                    </scope>
                </scope>
                <scope line="320"/>
            </method>
            <javadoc line="332">
                Compute and return the location of the icons origin, the
                  location of origin of the text baseline, and a possibly clipped
                  version of the compound labels string.  Locations are computed
                  relative to the viewR rectangle.                
            </javadoc>
            <method name="layoutMenuItem" type="String" line="361">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="fm" type="FontMetrics"/>
                    <param name="text" type="String"/>
                    <param name="fmAccel" type="FontMetrics"/>
                    <param name="acceleratorText" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="checkIcon" type="Icon"/>
                    <param name="arrowIcon" type="Icon"/>
                    <param name="verticalAlignment" type="int"/>
                    <param name="horizontalAlignment" type="int"/>
                    <param name="verticalTextPosition" type="int"/>
                    <param name="horizontalTextPosition" type="int"/>
                    <param name="viewR" type="Rectangle"/>
                    <param name="iconR" type="Rectangle"/>
                    <param name="textR" type="Rectangle"/>
                    <param name="acceleratorR" type="Rectangle"/>
                    <param name="checkIconR" type="Rectangle"/>
                    <param name="arrowIconR" type="Rectangle"/>
                    <param name="textIconGap" type="int"/>
                    <param name="menuItemGap" type="int"/>
                </params>
                <comment line="376">
                    Initialize the acceelratorText bounds rectangle textR.  If a null
                     or and empty String was specified we substitute &quot;&quot; here
                     and use 0,0,0,0 for acceleratorTextR.                    
                </comment>
                <comment line="390">
                    Initialize the checkIcon bounds rectangle checkIconR.                    
                </comment>
                <comment line="401">
                    Initialize the arrowIcon bounds rectangle arrowIconR.                    
                </comment>
                <comment line="418">
                    Position the Accelerator text rect                    
                </comment>
                <comment line="422">
                    Position the Check and Arrow Icons                    
                </comment>
                <comment line="430">
                    Position the Accelerator text rect                    
                </comment>
                <comment line="433">
                    Position the Check and Arrow Icons                    
                </comment>
                <comment line="438">
                    Align the accelertor text and the check and arrow icons vertically                    
                </comment>
                <comment line="439">
                    with the center of the label rect.                    
                </comment>
                <comment line="444">
                    System.out.println(&quot;Layout: v=&quot; +viewR+&quot;  c=&quot;+checkIconR+&quot; i=&quot;+
                    iconR+&quot; t=&quot;+textR+&quot; acc=&quot;+acceleratorR+&quot; a=&quot;+arrowIconR);                    
                </comment>
                <scope line="380"/>
                <scope line="384"/>
                <scope line="393"/>
                <scope line="397"/>
                <scope line="404"/>
                <scope line="408"/>
                <declaration name="labelR" type="Rectangle" line="413"/>
                <scope line="414"/>
                <scope line="426"/>
            </method>
            <method name="drawMenuBezel" type="void" line="454">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="background" type="Color"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <comment line="455">
                    shadowed button region                    
                </comment>
            </method>
            <method name="isLeftToRight" type="boolean" line="473">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
        </class>
    </source>