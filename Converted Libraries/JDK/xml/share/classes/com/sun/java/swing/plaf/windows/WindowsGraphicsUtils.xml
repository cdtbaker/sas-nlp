<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.windows">
        <import package="sun.swing.SwingUtilities2"/>
        <import package="java.awt"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf.UIResource"/>
        <import package="com.sun.java.swing.plaf.windows.TMSchema"/>
        <class name="WindowsGraphicsUtils" line="37">
            <comment line="170">
                Repaints all the components with the mnemonics in the given window and
                 all its owned windows.                
            </comment>
            <comment line="187">
                Repaints all the components with the mnemonics in container.
                 Recursively searches for all the subcomponents.                
            </comment>
            <javadoc line="37">
                A collection of static utility methods used for rendering the Windows look
                  and feel.                
                <author>
                    Mark Davidson                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="46">
                Renders a text String in Windows without the mnemonic.
                  This is here because the WindowsUI hiearchy doesn&apos;t match the Component heirarchy. All
                  the overriden paintText methods of the ButtonUI delegates will call this static method.
                  &lt;p&gt;                
                <param>
                    g Graphics context                    
                </param>
                <param>
                    b Current button to render                    
                </param>
                <param>
                    textRect Bounding rectangle to render the text.                    
                </param>
                <param>
                    text String to render                    
                </param>
            </javadoc>
            <method name="paintText" type="void" line="58">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="b" type="AbstractButton"/>
                    <param name="textRect" type="Rectangle"/>
                    <param name="text" type="String"/>
                    <param name="textShiftOffset" type="int"/>
                </params>
                <comment line="62">
                    W2K Feature: Check to see if the Underscore should be rendered.                    
                </comment>
                <declaration name="fm" type="FontMetrics" line="59"/>
                <declaration name="mnemIndex" type="int" line="61"/>
                <scope line="63"/>
                <declaration name="xp" type="XPStyle" line="67"/>
                <scope line="68"/>
                <scope line="72"/>
            </method>
            <method name="paintClassicText" type="void" line="80">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="text" type="String"/>
                    <param name="mnemIndex" type="int"/>
                </params>
                <comment line="83">
                                        
                </comment>
                <comment line="86">
                                        
                </comment>
                <comment line="89">
                    We shall not set foreground color for selected menu or
                     armed menuitem. Foreground must be set in appropriate
                     Windows class because these colors passes from
                     BasicMenuItemUI as protected fields and we can&apos;t                    
                </comment>
                <comment line="97">
                                        
                </comment>
                <declaration name="model" type="ButtonModel" line="81"/>
                <declaration name="color" type="Color" line="84"/>
                <scope line="85">
                    <scope line="88"/>
                </scope>
                <scope line="97">
                    <declaration name="shadow" type="Color" line="99"/>
                    <scope line="100"/>
                    <scope line="102">
                        <scope line="103"/>
                    </scope>
                    <scope line="110"/>
                </scope>
            </method>
            <method name="paintXPText" type="void" line="119">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="text" type="String"/>
                    <param name="mnemIndex" type="int"/>
                </params>
                <declaration name="part" type="Part" line="120"/>
                <declaration name="state" type="State" line="121"/>
            </method>
            <method name="paintXPText" type="void" line="126">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="part" type="Part"/>
                    <param name="state" type="State"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="text" type="String"/>
                    <param name="mnemIndex" type="int"/>
                </params>
                <comment line="132">
                    to work around an apparent bug in Windows, use the pushbutton                    
                </comment>
                <comment line="133">
                    color for disabled toolbar buttons if the disabled color is the                    
                </comment>
                <comment line="134">
                    same as the enabled color                    
                </comment>
                <comment line="143">
                    only draw shadow if developer hasn&apos;t changed the foreground color                    
                </comment>
                <comment line="144">
                    and if the current style has text shadows.                    
                </comment>
                <declaration name="xp" type="XPStyle" line="127"/>
                <declaration name="textColor" type="Color" line="128"/>
                <scope line="130">
                    <scope line="135">
                        <declaration name="enabledColor" type="Color" line="136"/>
                        <scope line="138"/>
                    </scope>
                    <declaration name="shadowType" type="TypeEnum" line="145"/>
                    <scope line="148">
                        <declaration name="shadowColor" type="Color" line="149"/>
                        <declaration name="offset" type="Point" line="151"/>
                        <scope line="152"/>
                    </scope>
                </scope>
            </method>
            <method name="isLeftToRight" type="boolean" line="165">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="repaintMnemonicsInWindow" type="void" line="173">
                <params>
                    <param name="w" type="Window"/>
                </params>
                <scope line="174"/>
                <declaration name="ownedWindows" type="Window[]" line="178"/>
                <scope line="179"/>
            </method>
            <method name="repaintMnemonicsInContainer" type="void" line="190">
                <params>
                    <param name="cont" type="Container"/>
                </params>
                <declaration name="c" type="Component" line="191"/>
                <scope line="192">
                    <scope line="194"/>
                    <scope line="198"/>
                    <scope line="202"/>
                    <scope line="206"/>
                </scope>
            </method>
        </class>
    </source>