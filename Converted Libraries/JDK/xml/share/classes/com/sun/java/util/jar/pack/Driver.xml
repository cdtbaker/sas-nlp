<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.PrintStream"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.Properties"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.SortedMap"/>
        <import package="java.util.TreeMap"/>
        <import package="java.util.jar.JarFile"/>
        <import package="java.util.jar.JarOutputStream"/>
        <import package="java.util.jar.Pack200"/>
        <import package="java.util.zip.GZIPInputStream"/>
        <import package="java.util.zip.GZIPOutputStream"/>
        <class name="Driver" line="55">
            <comment line="467">
                Note: Collection options use &quot;\0&quot; as a delimiter between arguments.                
            </comment>
            <comment line="469">
                For Java version of unpacker (used for testing only):                
            </comment>
            <comment line="510">
                -
                 Remove a set of command-line options from args,
                 storing them in the map in a canonicalized form.
                 &lt;p&gt;
                 The options string is a newline-separated series of
                 option processing specifiers.                
            </comment>
            <javadoc line="55">
                Command line interface for Pack200.                
            </javadoc>
            <declaration name="RESOURCE" type="ResourceBundle" line="58"/>
            <method name="main" type="void" line="61">
                <params>
                    <param name="ava" type="String[]"/>
                </params>
                <comment line="73">
                    Non-standard, undocumented &quot;--unpack&quot; switch enables unpack mode.                    
                </comment>
                <comment line="87">
                    Collect engine properties here:                    
                </comment>
                <comment line="101">
                    Collect argument properties here:                    
                </comment>
                <comment line="106">
                    Translate command line options to Pack200 properties:                    
                </comment>
                <comment line="120">
                    remove opt from avProps                    
                </comment>
                <comment line="122">
                    Normal string or boolean.                    
                </comment>
                <comment line="125">
                    Normal boolean; convert to T/F.                    
                </comment>
                <comment line="138">
                    Collection property: pack.pass.file.cli.NNN                    
                </comment>
                <comment line="151">
                    See if there is any other action to take.                    
                </comment>
                <comment line="181">
                    Deal with remaining non-engine properties:                    
                </comment>
                <comment line="206">
                    log = new BufferedOutputStream(out);                    
                </comment>
                <comment line="221">
                    output JAR file if --repack                    
                </comment>
                <comment line="222">
                    temporary backup of input JAR                    
                </comment>
                <comment line="223">
                    temporary file to be deleted                    
                </comment>
                <comment line="225">
                    The first argument is the target JAR file.
                     (Note:  *.pac is nonstandard, but may be necessary
                     if a host OS truncates file extensions.)                    
                </comment>
                <comment line="238">
                    The optional second argument is the source JAR file.                    
                </comment>
                <comment line="240">
                    If only one file is given, it is the only JAR.
                     It serves as both input and output.                    
                </comment>
                <comment line="246">
                    no need to zip the temporary file                    
                </comment>
                <comment line="250">
                    Accept jarfiles ending with .jar or .zip.
                     Accept jarfile of &quot;-&quot; (stdout), but only if unpacking.                    
                </comment>
                <comment line="285">
                    Mode = Pack.                    
                </comment>
                <comment line="288">
                    Packfile must be -, *.gz, *.pack, or *.pac.                    
                </comment>
                <comment line="291">
                    Send warnings, etc., to stderr instead of stdout.                    
                </comment>
                <comment line="313">
                    in.close();  // p200 closes in but not out                    
                </comment>
                <comment line="318">
                    If the source and destination are the same,
                     we will move the input JAR aside while regenerating it.
                     This allows us to restore it if something goes wrong.                    
                </comment>
                <comment line="322">
                    On Windows target must be deleted see 4017593                    
                </comment>
                <comment line="328">
                    Open jarfile recovery bracket.                    
                </comment>
                <comment line="334">
                    Mode = Unpack.                    
                </comment>
                <comment line="354">
                    p200 closes in but not out                    
                </comment>
                <comment line="356">
                    At this point, we have a good jarfile (or newfile, if -r)                    
                </comment>
                <comment line="360">
                    On success, abort jarfile recovery bracket.                    
                </comment>
                <comment line="366">
                    Close jarfile recovery bracket.                    
                </comment>
                <comment line="369">
                    Win32 requires this, see above                    
                </comment>
                <comment line="372">
                    In all cases, delete temporary *.pack.                    
                </comment>
                <declaration name="av" type="List&lt;String&gt;" line="62"/>
                <declaration name="doPack" type="boolean" line="64"/>
                <declaration name="doUnpack" type="boolean" line="65"/>
                <declaration name="doRepack" type="boolean" line="66"/>
                <declaration name="doZip" type="boolean" line="67"/>
                <declaration name="logFile" type="String" line="68"/>
                <declaration name="verboseProp" type="String" line="69"/>
                <scope line="71">
                    <declaration name="arg0" type="String" line="73"/>
                </scope>
                <declaration name="engProps" type="Map&lt;String,String&gt;" line="87"/>
                <declaration name="optionMap" type="String" line="90"/>
                <declaration name="propTable" type="String[]" line="91"/>
                <scope line="92"/>
                <scope line="95"/>
                <declaration name="avProps" type="Map&lt;String,String&gt;" line="101"/>
                <scope line="102">
                    <scope line="103">
                        <declaration name="state" type="String" line="104"/>
                        <scope line="108">
                            <declaration name="opt" type="String" line="109"/>
                            <declaration name="prop" type="String" line="110"/>
                            <scope line="111">
                                <scope line="112"/>
                            </scope>
                            <scope line="117">
                                <declaration name="val" type="String" line="118"/>
                                <scope line="120">
                                    <scope line="123">
                                        <declaration name="flag" type="boolean" line="125"/>
                                    </scope>
                                </scope>
                                <scope line="131">
                                    <scope line="132">
                                        <declaration name="val2" type="String[]" line="133"/>
                                    </scope>
                                </scope>
                                <scope line="136">
                                    <declaration name="idx" type="int" line="138"/>
                                    <scope line="139">
                                        <declaration name="prop1" type="String" line="140"/>
                                        <scope line="141"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="151">
                            <declaration name="propFile" type="String" line="152"/>
                            <declaration name="fileProps" type="Properties" line="153"/>
                            <scope line="154"/>
                            <scope line="159"/>
                        </scope>
                        <scope line="162"/>
                        <scope line="165"/>
                        <scope line="169"/>
                    </scope>
                </scope>
                <scope line="173"/>
                <scope line="181">
                    <declaration name="val" type="String" line="182"/>
                </scope>
                <scope line="200">
                    <scope line="201"/>
                    <scope line="203">
                        <declaration name="log" type="OutputStream" line="204"/>
                    </scope>
                </scope>
                <declaration name="verbose" type="boolean" line="210"/>
                <declaration name="packfile" type="String" line="212"/>
                <declaration name="jarfile" type="String" line="216"/>
                <declaration name="newfile" type="String" line="220"/>
                <declaration name="bakfile" type="String" line="221"/>
                <declaration name="tmpfile" type="String" line="222"/>
                <scope line="223">
                    <scope line="229"/>
                    <scope line="238"/>
                </scope>
                <scope line="253"/>
                <declaration name="jpack" type="Pack200.Packer" line="264"/>
                <declaration name="junpack" type="Pack200.Unpacker" line="265"/>
                <scope line="269">
                    <declaration name="zipc" type="String" line="270"/>
                    <scope line="273"/>
                </scope>
                <scope line="281">
                    <scope line="283">
                        <declaration name="in" type="JarFile" line="285"/>
                        <declaration name="out" type="OutputStream" line="286"/>
                        <scope line="288"/>
                        <scope line="292">
                            <scope line="293"/>
                        </scope>
                        <scope line="301">
                            <scope line="303"/>
                        </scope>
                    </scope>
                    <scope line="316">
                        <declaration name="bakf" type="File" line="320"/>
                        <declaration name="okBackup" type="boolean" line="323"/>
                        <scope line="324"/>
                        <scope line="326"/>
                    </scope>
                    <scope line="332">
                        <declaration name="in" type="InputStream" line="334"/>
                        <declaration name="inBuf" type="BufferedInputStream" line="339"/>
                        <scope line="341"/>
                        <declaration name="outfile" type="String" line="344"/>
                        <declaration name="fileOut" type="OutputStream" line="345"/>
                        <scope line="351"/>
                    </scope>
                    <scope line="358"/>
                </scope>
                <scope line="364">
                    <scope line="366">
                        <declaration name="jarFile" type="File" line="367"/>
                    </scope>
                </scope>
            </method>
            <method name="createTempFile" type="File" line="378">
                <params>
                    <param name="basefile" type="String"/>
                    <param name="suffix" type="String"/>
                </params>
                <declaration name="base" type="File" line="379"/>
                <declaration name="prefix" type="String" line="380"/>
                <declaration name="where" type="File" line="383"/>
                <declaration name="f" type="File" line="389"/>
            </method>
            <method name="printUsage" type="void" line="394">
                <params>
                    <param name="doPack" type="boolean"/>
                    <param name="full" type="boolean"/>
                    <param name="out" type="PrintStream"/>
                </params>
                <declaration name="prog" type="String" line="395"/>
                <declaration name="packUsage" type="String[]" line="396"/>
                <declaration name="unpackUsage" type="String[]" line="397"/>
                <declaration name="usage" type="String[]" line="398"/>
                <scope line="399">
                    <scope line="401"/>
                </scope>
            </method>
            <method name="getZipComment" type="String" line="409">
                <params>
                    <param name="jarfile" type="String"/>
                </params>
                <comment line="421">
                    Skip sig4, disks4, entries4, clen4, coff4, cmt2                    
                </comment>
                <declaration name="tail" type="byte[]" line="410"/>
                <declaration name="filelen" type="long" line="411"/>
                <declaration name="skiplen" type="long" line="413"/>
                <scope line="414">
                    <scope line="417">
                        <scope line="419"/>
                    </scope>
                </scope>
            </method>
            <declaration name="PACK200_OPTION_MAP" type="String" line="431"/>
            <declaration name="UNPACK200_OPTION_MAP" type="String" line="469"/>
            <declaration name="PACK200_PROPERTY_TO_OPTION" type="String[]" line="485"/>
            <declaration name="UNPACK200_PROPERTY_TO_OPTION" type="String[]" line="502"/>
            <method name="parseCommandOptions" type="String" line="519">
                <params>
                    <param name="args" type="List<String>"/>
                    <param name="options" type="String"/>
                    <param name="properties" type="Map<String,String>"/>
                </params>
                <comment line="521">
                    System.out.println(args+&quot; // &quot;+properties);                    
                </comment>
                <comment line="525">
                    Convert options string into optLines dictionary.                    
                </comment>
                <comment line="532">
                    initial word is not a spec                    
                </comment>
                <comment line="534">
                    initial &quot;word&quot; is empty due to leading &apos; &apos;                    
                </comment>
                <comment line="543">
                    State machine for parsing a command line.                    
                </comment>
                <comment line="548">
                    One trip through this loop per argument.
                     Multiple trips per option only if several options per argument.                    
                </comment>
                <comment line="557">
                    No more arguments at all.                    
                </comment>
                <comment line="562">
                    One time through this loop for each matching arg prefix.                    
                </comment>
                <comment line="564">
                    Match some prefix of the argument to a key in optmap.                    
                </comment>
                <comment line="570">
                    Decide on a smaller prefix to search for.                    
                </comment>
                <comment line="572">
                    pfxmap.lastKey is no shorter than any prefix in optmap.                    
                </comment>
                <comment line="576">
                    (Note:  We could cut opt down to its common prefix with
                     pfxmap.lastKey, but that wouldn&apos;t save many cycles.)                    
                </comment>
                <comment line="582">
                    arg == opt+val                    
                </comment>
                <comment line="584">
                    Execute the option processing specs for this opt.
                     If no actions are taken, then look for a shorter prefix.                    
                </comment>
                <comment line="589">
                    in case of backtracking                    
                </comment>
                <comment line="598">
                    Deal with &apos;+&apos;/&apos;*&apos; prefixes (spec conditions).                    
                </comment>
                <comment line="602">
                    + means we want an non-empty val suffix.                    
                </comment>
                <comment line="607">
                    * means we accept empty or non-empty                    
                </comment>
                <comment line="612">
                    No condition prefix means we require an exact
                     match, as indicated by an empty val suffix.                    
                </comment>
                <comment line="621">
                    terminate the option sequence                    
                </comment>
                <comment line="624">
                    abort the option sequence                    
                </comment>
                <comment line="628">
                    change the effective opt name                    
                </comment>
                <comment line="631">
                    shift remaining arg val to next arg                    
                </comment>
                <comment line="632">
                    push a new argument                    
                </comment>
                <comment line="635">
                    negation option                    
                </comment>
                <comment line="638">
                    leave placeholder                    
                </comment>
                <comment line="641">
                    normal &quot;boolean&quot; option                    
                </comment>
                <comment line="644">
                    If there is a given spec token, store it.                    
                </comment>
                <comment line="651">
                    Increment any previous value as a numeral.                    
                </comment>
                <comment line="658">
                    &quot;string&quot; option                    
                </comment>
                <comment line="659">
                    &quot;collection&quot; option                    
                </comment>
                <comment line="660">
                    Read an option.                    
                </comment>
                <comment line="676">
                    Append new val to old with embedded delim.                    
                </comment>
                <comment line="690">
                    Done processing specs.                    
                </comment>
                <comment line="695">
                    The specs should have done something, but did not.                    
                </comment>
                <comment line="697">
                    Remove anything pushed during these specs.                    
                </comment>
                <comment line="707">
                    We cannot try a shorter matching option.                    
                </comment>
                <comment line="712">
                    If we come here, there was no matching option.
                     So, push back the argument, and return to caller.                    
                </comment>
                <comment line="717">
                    Report number of arguments consumed.                    
                </comment>
                <comment line="719">
                    Report any unconsumed partial argument.                    
                </comment>
                <comment line="723">
                    System.out.println(args+&quot; // &quot;+properties+&quot; -&gt; &quot;+resultString);                    
                </comment>
                <declaration name="resultString" type="String" line="522"/>
                <declaration name="optmap" type="TreeMap&lt;String,String[]&gt;" line="525"/>
                <scope line="527">
                    <declaration name="words" type="String[]" line="528"/>
                    <declaration name="opt" type="String" line="530"/>
                    <scope line="532"/>
                    <declaration name="prevWords" type="String[]" line="537"/>
                </scope>
                <declaration name="argp" type="ListIterator&lt;String&gt;" line="543"/>
                <declaration name="pbp" type="ListIterator&lt;String&gt;" line="544"/>
                <scope line="546">
                    <declaration name="arg" type="String" line="549"/>
                    <scope line="550"/>
                    <scope line="553"/>
                    <scope line="555"/>
                    <scope line="560">
                        <declaration name="opt" type="String" line="562"/>
                        <scope line="565">
                            <declaration name="pfxmap" type="SortedMap&lt;String,String[]&gt;" line="570"/>
                            <declaration name="len" type="int" line="572"/>
                        </scope>
                        <declaration name="val" type="String" line="581"/>
                        <declaration name="didAction" type="boolean" line="585"/>
                        <declaration name="isError" type="boolean" line="586"/>
                        <declaration name="pbpMark" type="int" line="588"/>
                        <declaration name="specs" type="String[]" line="589"/>
                        <scope line="591">
                            <declaration name="sidx" type="int" line="594"/>
                            <declaration name="specop" type="char" line="595"/>
                            <declaration name="ok" type="boolean" line="598"/>
                            <declaration name="specarg" type="String" line="618"/>
                            <declaration name="negopt" type="String" line="635"/>
                            <declaration name="boolval" type="String" line="641"/>
                            <scope line="642"/>
                            <scope line="645">
                                <declaration name="old" type="String" line="646"/>
                                <scope line="647"/>
                                <scope line="649"/>
                            </scope>
                            <declaration name="append" type="boolean" line="660"/>
                            <declaration name="strval" type="String" line="661"/>
                            <scope line="662"/>
                            <scope line="665"/>
                            <scope line="667"/>
                            <scope line="672">
                                <declaration name="old" type="String" line="673"/>
                                <scope line="674">
                                    <declaration name="delim" type="String" line="676"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="690"/>
                        <scope line="695"/>
                        <scope line="701"/>
                        <scope line="705"/>
                    </scope>
                </scope>
                <scope line="719"/>
            </method>
        </class>
    </source>