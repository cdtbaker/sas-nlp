<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.windows">
        <import package="javax.swing.plaf.basic"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf.ActionMapUIResource"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.HierarchyEvent"/>
        <import package="java.awt.event.HierarchyListener"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.event.WindowListener"/>
        <import package="java.awt.event.WindowStateListener"/>
        <import package="java.awt"/>
        <import package="com.sun.java.swing.plaf.windows.TMSchema"/>
        <import package="com.sun.java.swing.plaf.windows.XPStyle"/>
        <class name="WindowsMenuBarUI" line="45">
            <extends class="BasicMenuBarUI"/>
            <comment line="58">
                                
            </comment>
            <javadoc line="45">
                Windows rendition of the component.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases.  The current serialization support is appropriate
                  for short term storage or RMI between applications running the same
                  version of Swing.  A future release of Swing will provide support for
                  long term persistence.                
            </javadoc>
            <declaration name="windowListener" type="WindowListener" line="58"/>
            <declaration name="hierarchyListener" type="HierarchyListener" line="59"/>
            <declaration name="window" type="Window" line="60"/>
            <method name="createUI" type="ComponentUI" line="62">
                <params>
                    <param name="x" type="JComponent"/>
                </params>
            </method>
            <method name="uninstallListeners" type="void" line="67">
                <scope line="69"/>
            </method>
            <method name="installWindowListener" type="void" line="75">
                <scope line="76">
                    <declaration name="component" type="Component" line="77"/>
                    <scope line="78">
                        <anonymous_class line="80">
                            <method name="windowActivated" type="void" line="82">
                                <params>
                                    <param name="e" type="WindowEvent"/>
                                </params>
                            </method>
                            <method name="windowDeactivated" type="void" line="86">
                                <params>
                                    <param name="e" type="WindowEvent"/>
                                </params>
                            </method>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <method name="uninstallWindowListener" type="void" line="94">
                <scope line="95"/>
            </method>
            <method name="installListeners" type="void" line="102">
                <scope line="103">
                    <anonymous_class line="106">
                        <method name="hierarchyChanged" type="void" line="107">
                            <params>
                                <param name="e" type="HierarchyEvent"/>
                            </params>
                            <scope line="109">
                                <scope line="110"/>
                                <scope line="112"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="installKeyboardActions" type="void" line="123">
                <declaration name="map" type="ActionMap" line="125"/>
                <scope line="126"/>
            </method>
            <class name="TakeFocus" line="133">
                <extends class="AbstractAction"/>
                <javadoc line="133">
                    Action that activates the menu (e.g. when F10 is pressed).
                      Unlike BasicMenuBarUI.TakeFocus, this Action will not show menu popup.                    
                </javadoc>
                <method name="actionPerformed" type="void" line="138">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <comment line="149">
                        show mnemonics                        
                    </comment>
                    <declaration name="menuBar" type="JMenuBar" line="139"/>
                    <declaration name="menu" type="JMenu" line="140"/>
                    <scope line="141">
                        <declaration name="msm" type="MenuSelectionManager" line="142"/>
                        <declaration name="path" type="MenuElement" line="144"/>
                    </scope>
                </method>
            </class>
            <method name="paint" type="void" line="157">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="158">
                    <declaration name="xp" type="XPStyle" line="159"/>
                    <declaration name="skin" type="Skin" line="160"/>
                    <declaration name="width" type="int" line="162"/>
                    <declaration name="height" type="int" line="163"/>
                    <declaration name="state" type="State" line="164"/>
                </scope>
                <scope line="166"/>
            </method>
            <javadoc line="171">
                Checks if component belongs to an active window.                
                <param>
                    c component to check                    
                </param>
                <return>
                    true if component belongs to an active window                    
                </return>
            </javadoc>
            <method name="isActive" type="boolean" line="176">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="rootPane" type="JRootPane" line="177"/>
                <scope line="178">
                    <declaration name="component" type="Component" line="179"/>
                    <scope line="180"/>
                </scope>
            </method>
        </class>
    </source>