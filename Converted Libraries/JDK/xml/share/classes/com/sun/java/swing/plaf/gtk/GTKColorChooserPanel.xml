<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.gtk">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image"/>
        <import package="javax.swing"/>
        <import package="javax.swing.colorchooser"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <class name="GTKColorChooserPanel" line="9">
            <extends class="AbstractColorChooserPanel"/>
            <implements interface="ChangeListener"/>
            <javadoc line="9">
                A color chooser panel mimicking that of GTK&apos;s: a color wheel showing
                  hue and a triangle that varies saturation and brightness.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="PI_3" type="float" line="15"/>
            <declaration name="triangle" type="ColorTriangle" line="16"/>
            <declaration name="lastLabel" type="JLabel" line="17"/>
            <declaration name="label" type="JLabel" line="18"/>
            <declaration name="hueSpinner" type="JSpinner" line="19"/>
            <declaration name="saturationSpinner" type="JSpinner" line="20"/>
            <declaration name="valueSpinner" type="JSpinner" line="21"/>
            <declaration name="redSpinner" type="JSpinner" line="22"/>
            <declaration name="greenSpinner" type="JSpinner" line="23"/>
            <declaration name="blueSpinner" type="JSpinner" line="24"/>
            <declaration name="colorNameTF" type="JTextField" line="25"/>
            <declaration name="settingColor" type="boolean" line="26"/>
            <declaration name="hue" type="float" line="27"/>
            <declaration name="saturation" type="float" line="28"/>
            <declaration name="brightness" type="float" line="29"/>
            <javadoc line="30">
                Convenience method to transfer focus to the next child of component.                
            </javadoc>
            <method name="compositeRequestFocus" type="void" line="33">
                <params>
                    <param name="component" type="Component"/>
                    <param name="direction" type="boolean"/>
                </params>
                <scope line="34">
                    <declaration name="container" type="Container" line="35"/>
                    <scope line="36">
                        <declaration name="policy" type="FocusTraversalPolicy" line="37"/>
                        <declaration name="comp" type="Component" line="38"/>
                        <scope line="39"/>
                    </scope>
                    <declaration name="rootAncestor" type="Container" line="44"/>
                    <scope line="45">
                        <declaration name="policy" type="FocusTraversalPolicy" line="46"/>
                        <declaration name="comp" type="Component" line="47"/>
                        <scope line="48"/>
                        <scope line="51"/>
                        <scope line="54"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="62">
                Returns a user presentable description of this GTKColorChooserPane.                
            </javadoc>
            <method name="getDisplayName" type="String" line="65"/>
            <javadoc line="68">
                Returns the mnemonic to use with &lt;code&gt;getDisplayName&lt;/code&gt;.                
            </javadoc>
            <method name="getMnemonic" type="int" line="71">
                <declaration name="m" type="String" line="72"/>
                <scope line="73">
                    <scope line="74">
                        <declaration name="value" type="int" line="75"/>
                    </scope>
                    <scope line="78"/>
                </scope>
            </method>
            <javadoc line="83">
                Character to underline that represents the mnemonic.                
            </javadoc>
            <method name="getDisplayedMnemonicIndex" type="int" line="86">
                <declaration name="m" type="String" line="87"/>
                <scope line="88">
                    <scope line="89">
                        <declaration name="value" type="int" line="90"/>
                    </scope>
                    <scope line="93"/>
                </scope>
            </method>
            <method name="getSmallDisplayIcon" type="Icon" line="98"/>
            <method name="getLargeDisplayIcon" type="Icon" line="101"/>
            <method name="uninstallChooserPanel" type="void" line="104">
                <params>
                    <param name="enclosingChooser" type="JColorChooser"/>
                </params>
            </method>
            <javadoc line="108">
                Builds and configures the widgets for the GTKColorChooserPanel.                
            </javadoc>
            <method name="buildChooser" type="void" line="111">
                <declaration name="hBox" type="Box" line="149"/>
            </method>
            <javadoc line="155">
                Configures the spinner.                
            </javadoc>
            <method name="configureSpinner" type="void" line="158">
                <params>
                    <param name="spinner" type="JSpinner"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="editor" type="JComponent" line="161"/>
                <scope line="162">
                    <declaration name="ftf" type="JFormattedTextField" line="163"/>
                </scope>
            </method>
            <javadoc line="167">
                Adds the widget creating a JLabel with the specified name.                
            </javadoc>
            <method name="add" type="void" line="170">
                <params>
                    <param name="parent" type="Container"/>
                    <param name="key" type="String"/>
                    <param name="widget" type="JComponent"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="label" type="JLabel" line="171"/>
                <declaration name="mnemonic" type="String" line="172"/>
                <scope line="173">
                    <scope line="174"/>
                    <scope line="177"/>
                    <declaration name="mnemonicIndex" type="String" line="179"/>
                    <scope line="180">
                        <scope line="181"/>
                        <scope line="184"/>
                    </scope>
                </scope>
                <scope line="189"/>
                <scope line="192"/>
                <declaration name="con" type="GridBagConstraints" line="195"/>
                <scope line="196"/>
            </method>
            <javadoc line="203">
                Refreshes the display from the model.                
            </javadoc>
            <method name="updateChooser" type="void" line="206">
                <scope line="207"/>
            </method>
            <javadoc line="212">
                Resets the red component of the selected color.                
            </javadoc>
            <method name="setRed" type="void" line="215">
                <params>
                    <param name="red" type="int"/>
                </params>
            </method>
            <javadoc line="218">
                Resets the green component of the selected color.                
            </javadoc>
            <method name="setGreen" type="void" line="221">
                <params>
                    <param name="green" type="int"/>
                </params>
            </method>
            <javadoc line="224">
                Resets the blue component of the selected color.                
            </javadoc>
            <method name="setBlue" type="void" line="227">
                <params>
                    <param name="blue" type="int"/>
                </params>
            </method>
            <javadoc line="230">
                Sets the hue of the selected color and updates the display if
                  necessary.                
            </javadoc>
            <method name="setHue" type="void" line="234">
                <params>
                    <param name="hue" type="float"/>
                    <param name="update" type="boolean"/>
                </params>
                <scope line="236"/>
            </method>
            <javadoc line="242">
                Returns the current amount of hue.                
            </javadoc>
            <method name="getHue" type="float" line="245"/>
            <javadoc line="248">
                Resets the saturation.                
            </javadoc>
            <method name="setSaturation" type="void" line="251">
                <params>
                    <param name="saturation" type="float"/>
                </params>
            </method>
            <javadoc line="254">
                Returns the saturation.                
            </javadoc>
            <method name="getSaturation" type="float" line="257"/>
            <javadoc line="260">
                Sets the brightness.                
            </javadoc>
            <method name="setBrightness" type="void" line="263">
                <params>
                    <param name="brightness" type="float"/>
                </params>
            </method>
            <javadoc line="266">
                Returns the brightness.                
            </javadoc>
            <method name="getBrightness" type="float" line="269"/>
            <javadoc line="272">
                Sets the saturation and brightness and updates the display if
                  necessary.                
            </javadoc>
            <method name="setSaturationAndBrightness" type="void" line="276">
                <params>
                    <param name="s" type="float"/>
                    <param name="b" type="float"/>
                    <param name="update" type="boolean"/>
                </params>
                <scope line="278"/>
            </method>
            <javadoc line="285">
                Resets the rgb values.                
            </javadoc>
            <method name="setRGB" type="void" line="288">
                <params>
                    <param name="rgb" type="int"/>
                </params>
                <declaration name="color" type="Color" line="289"/>
            </method>
            <javadoc line="297">
                Resets the hsb values.                
            </javadoc>
            <method name="setHSB" type="void" line="300">
                <params>
                    <param name="h" type="float"/>
                    <param name="s" type="float"/>
                    <param name="b" type="float"/>
                </params>
                <declaration name="color" type="Color" line="301"/>
            </method>
            <javadoc line="312">
                Rests the color.                
                <param>
                    color new Color                    
                </param>
                <param>
                    updateSpinners whether or not to update the spinners.                    
                </param>
                <param>
                    updateHSB if true, the hsb fields are updated based on the
                      new color                    
                </param>
                <param>
                    updateModel if true, the model is set.                    
                </param>
            </javadoc>
            <method name="setColor" type="void" line="320">
                <params>
                    <param name="color" type="Color"/>
                    <param name="updateSpinners" type="boolean"/>
                    <param name="updateHSB" type="boolean"/>
                    <param name="updateModel" type="boolean"/>
                </params>
                <scope line="321"/>
                <scope line="325">
                    <declaration name="hsb" type="float[]" line="326"/>
                </scope>
                <scope line="331">
                    <declaration name="model" type="ColorSelectionModel" line="332"/>
                    <scope line="333"/>
                </scope>
                <declaration name="hexString" type="String" line="339"/>
                <scope line="341"/>
            </method>
            <method name="getColor" type="Color" line="351"/>
            <javadoc line="354">
                ChangeListener method, updates the necessary display widgets.                
            </javadoc>
            <method name="stateChanged" type="void" line="357">
                <params>
                    <param name="e" type="ChangeEvent"/>
                </params>
                <scope line="358"/>
                <declaration name="color" type="Color" line="361"/>
                <scope line="362"/>
                <scope line="365"/>
                <scope line="368"/>
                <scope line="371"/>
                <scope line="374"/>
                <scope line="377"/>
            </method>
            <declaration name="FLAGS_CHANGED_ANGLE" type="int" line="381"/>
            <javadoc line="381">
                Flag indicating the angle, or hue, has changed and the triangle
                  needs to be recreated.                
            </javadoc>
            <declaration name="FLAGS_DRAGGING" type="int" line="386"/>
            <javadoc line="386">
                Indicates the wheel is being dragged.                
            </javadoc>
            <declaration name="FLAGS_DRAGGING_TRIANGLE" type="int" line="390"/>
            <javadoc line="390">
                Indicates the triangle is being dragged.                
            </javadoc>
            <declaration name="FLAGS_SETTING_COLOR" type="int" line="394"/>
            <javadoc line="394">
                Indicates a color is being set and we should ignore setColor                
            </javadoc>
            <declaration name="FLAGS_FOCUSED_WHEEL" type="int" line="398"/>
            <javadoc line="398">
                Indicates the wheel has focus.                
            </javadoc>
            <declaration name="FLAGS_FOCUSED_TRIANGLE" type="int" line="402"/>
            <javadoc line="402">
                Indicates the triangle has focus.                
            </javadoc>
            <class name="ColorTriangle" line="406">
                <extends class="JPanel"/>
                <javadoc line="406">
                    Class responsible for rendering a color wheel and color triangle.                    
                </javadoc>
                <declaration name="wheelImage" type="Image" line="410"/>
                <javadoc line="410">
                    Cached image of the wheel.                    
                </javadoc>
                <declaration name="triangleImage" type="Image" line="414"/>
                <javadoc line="414">
                    Cached image of the triangle.                    
                </javadoc>
                <declaration name="angle" type="double" line="418"/>
                <javadoc line="418">
                    Angle triangle is rotated by.                    
                </javadoc>
                <declaration name="flags" type="int" line="422"/>
                <javadoc line="422">
                    Boolean bitmask.                    
                </javadoc>
                <declaration name="circleX" type="int" line="426"/>
                <javadoc line="426">
                    X location of selected color indicator.                    
                </javadoc>
                <declaration name="circleY" type="int" line="430"/>
                <javadoc line="430">
                    Y location of selected color indicator.                    
                </javadoc>
                <method name="ColorTriangle" type="constructor" line="434">
                    <declaration name="map" type="ActionMap" line="451"/>
                    <scope line="452"/>
                </method>
                <javadoc line="464">
                    Returns the GTKColorChooserPanel.                    
                </javadoc>
                <method name="getGTKColorChooserPanel" type="GTKColorChooserPanel" line="467"/>
                <javadoc line="470">
                    Gives focus to the wheel.                    
                </javadoc>
                <method name="focusWheel" type="void" line="473"/>
                <javadoc line="476">
                    Gives focus to the triangle.                    
                </javadoc>
                <method name="focusTriangle" type="void" line="479"/>
                <javadoc line="482">
                    Returns true if the wheel currently has focus.                    
                </javadoc>
                <method name="isWheelFocused" type="boolean" line="485"/>
                <javadoc line="488">
                    Resets the selected color.                    
                </javadoc>
                <method name="setColor" type="void" line="491">
                    <params>
                        <param name="h" type="float"/>
                        <param name="s" type="float"/>
                        <param name="b" type="float"/>
                    </params>
                    <scope line="492"/>
                </method>
                <javadoc line="498">
                    Returns the selected color.                    
                </javadoc>
                <method name="getColor" type="Color" line="501"/>
                <javadoc line="504">
                    Returns the x location of the selected color indicator.                    
                </javadoc>
                <method name="getColorX" type="int" line="507"/>
                <javadoc line="510">
                    Returns the y location of the selected color indicator.                    
                </javadoc>
                <method name="getColorY" type="int" line="513"/>
                <method name="processEvent" type="void" line="516">
                    <params>
                        <param name="e" type="AWTEvent"/>
                    </params>
                    <scope line="517">
                        <declaration name="size" type="int" line="518"/>
                        <declaration name="x" type="int" line="519"/>
                        <declaration name="y" type="int" line="520"/>
                        <scope line="521"/>
                        <scope line="524"/>
                        <scope line="528"/>
                        <scope line="532"/>
                    </scope>
                    <scope line="536"/>
                    <scope line="540"/>
                    <scope line="543">
                        <scope line="544"/>
                    </scope>
                </method>
                <method name="paintComponent" type="void" line="552">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                    <declaration name="size" type="int" line="554"/>
                    <declaration name="width" type="int" line="555"/>
                    <declaration name="image" type="Image" line="556"/>
                    <scope line="558"/>
                    <scope line="563"/>
                    <scope line="566"/>
                    <declaration name="lineX0" type="int" line="569"/>
                    <declaration name="lineY0" type="int" line="570"/>
                    <declaration name="lineX1" type="int" line="571"/>
                    <declaration name="lineY1" type="int" line="572"/>
                    <scope line="574">
                        <declaration name="g2" type="Graphics" line="575"/>
                        <declaration name="innerR" type="int" line="576"/>
                        <declaration name="a" type="int" line="577"/>
                    </scope>
                </method>
                <javadoc line="591">
                    Returns an image representing the triangle and wheel.                    
                </javadoc>
                <method name="getImage" type="Image" line="594">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                    <scope line="595"/>
                    <scope line="598"/>
                    <declaration name="innerR" type="int" line="601"/>
                    <declaration name="triangleSize" type="int" line="602"/>
                    <declaration name="a" type="int" line="603"/>
                    <scope line="604"/>
                    <declaration name="g" type="Graphics" line="607"/>
                    <declaration name="rotate" type="double" line="617"/>
                </method>
                <method name="paintTriangle" type="void" line="626">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="size" type="int"/>
                        <param name="color" type="Color"/>
                    </params>
                    <declaration name="colors" type="float[]" line="627"/>
                    <declaration name="hue" type="float" line="628"/>
                    <declaration name="dSize" type="double" line="629"/>
                    <scope line="630">
                        <declaration name="maxX" type="int" line="631"/>
                        <declaration name="factor" type="float" line="632"/>
                        <scope line="633">
                            <declaration name="value" type="float" line="634"/>
                            <scope line="635">
                                <declaration name="saturation" type="float" line="636"/>
                            </scope>
                        </scope>
                        <scope line="641"/>
                    </scope>
                </method>
                <javadoc line="647">
                    Returns a color wheel image for the specified size.                    
                    <param>
                        size Integer giving size of color wheel.                        
                    </param>
                    <return>
                        Color wheel image                        
                    </return>
                </javadoc>
                <method name="getWheelImage" type="Image" line="652">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                    <declaration name="minSize" type="int" line="653"/>
                    <declaration name="doubleSize" type="int" line="654"/>
                    <declaration name="image" type="BufferedImage" line="655"/>
                    <scope line="656">
                        <declaration name="ySquared" type="int" line="657"/>
                        <scope line="658">
                            <declaration name="rad" type="double" line="659"/>
                            <scope line="660">
                                <declaration name="rgb" type="int" line="661"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="669">
                    Adjusts the saturation and brightness. &lt;code&gt;x&lt;/code&gt; and
                      &lt;code&gt;y&lt;/code&gt; give the location to adjust to and are relative
                      to the origin of the wheel/triangle.                    
                    <param>
                        x X coordinate on the triangle to adjust to                        
                    </param>
                    <param>
                        y Y coordinate on the triangle to adjust to                        
                    </param>
                    <param>
                        checkLoc if true the location is checked to make sure
                          it is contained in the triangle, if false the location is
                          constrained to fit in the triangle.                        
                    </param>
                    <return>
                        true if the location is valid                        
                    </return>
                </javadoc>
                <method name="adjustSB" type="boolean" line="680">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="checkLoc" type="boolean"/>
                    </params>
                    <declaration name="innerR" type="int" line="681"/>
                    <declaration name="resetXY" type="boolean" line="682"/>
                    <scope line="684"/>
                    <declaration name="triangleSize" type="int" line="687"/>
                    <declaration name="x1" type="double" line="688"/>
                    <declaration name="y1" type="double" line="689"/>
                    <scope line="690">
                        <scope line="691"/>
                    </scope>
                    <scope line="697">
                        <scope line="698"/>
                    </scope>
                    <declaration name="maxY" type="int" line="704"/>
                    <scope line="705">
                        <scope line="706"/>
                    </scope>
                    <scope line="712">
                        <scope line="713"/>
                    </scope>
                    <declaration name="x2" type="double" line="719"/>
                    <declaration name="y2" type="double" line="720"/>
                    <declaration name="value" type="float" line="721"/>
                    <declaration name="maxX" type="float" line="722"/>
                    <declaration name="saturation" type="float" line="723"/>
                    <scope line="725"/>
                    <scope line="728"/>
                </method>
                <javadoc line="735">
                    Sets the saturation and brightness.                    
                </javadoc>
                <method name="setSaturationAndBrightness" type="void" line="738">
                    <params>
                        <param name="s" type="float"/>
                        <param name="b" type="float"/>
                    </params>
                    <declaration name="innerR" type="int" line="739"/>
                    <declaration name="triangleSize" type="int" line="740"/>
                    <declaration name="x" type="double" line="741"/>
                    <declaration name="maxY" type="double" line="742"/>
                    <declaration name="y" type="double" line="743"/>
                    <declaration name="x1" type="double" line="745"/>
                    <declaration name="y1" type="double" line="746"/>
                    <declaration name="newCircleX" type="int" line="747"/>
                    <declaration name="newCircleY" type="int" line="748"/>
                </method>
                <javadoc line="751">
                    Sets the saturation and brightness.                    
                </javadoc>
                <method name="setSaturationAndBrightness" type="void" line="754">
                    <params>
                        <param name="s" type="float"/>
                        <param name="b" type="float"/>
                        <param name="newCircleX" type="int"/>
                        <param name="newCircleY" type="int"/>
                    </params>
                    <declaration name="minX" type="int" line="757"/>
                    <declaration name="minY" type="int" line="758"/>
                </method>
                <javadoc line="763">
                    Adjusts the hue based on the passed in location.                    
                    <param>
                        x X location to adjust to, relative to the origin of the
                          wheel                        
                    </param>
                    <param>
                        y Y location to adjust to, relative to the origin of the
                          wheel                        
                    </param>
                    <param>
                        check if true the location is checked to make sure
                          it is contained in the wheel, if false the location is
                          constrained to fit in the wheel                        
                    </param>
                    <return>
                        true if the location is valid.                        
                    </return>
                </javadoc>
                <method name="adjustHue" type="boolean" line="774">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="check" type="boolean"/>
                    </params>
                    <declaration name="rad" type="double" line="775"/>
                    <declaration name="size" type="int" line="776"/>
                    <scope line="777">
                        <declaration name="angle" type="double" line="778"/>
                        <scope line="779">
                            <scope line="780"/>
                            <scope line="783"/>
                        </scope>
                        <scope line="787">
                            <scope line="789"/>
                            <scope line="792"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="805">
                    Rotates the triangle to accomodate the passed in hue.                    
                </javadoc>
                <method name="setAngleFromHue" type="void" line="808">
                    <params>
                        <param name="hue" type="float"/>
                    </params>
                </method>
                <javadoc line="811">
                    Sets the angle representing the hue.                    
                </javadoc>
                <method name="setHueAngle" type="void" line="814">
                    <params>
                        <param name="angle" type="double"/>
                    </params>
                    <declaration name="oldAngle" type="double" line="815"/>
                    <scope line="817"/>
                </method>
                <javadoc line="822">
                    Returns the size of the color indicator.                    
                </javadoc>
                <method name="getIndicatorSize" type="int" line="825"/>
                <javadoc line="828">
                    Returns the circumscribed radius of the triangle.                    
                </javadoc>
                <method name="getTriangleCircumscribedRadius" type="int" line="831"/>
                <javadoc line="834">
                    Returns the x origin of the wheel and triangle.                    
                </javadoc>
                <method name="getWheelXOrigin" type="int" line="837"/>
                <javadoc line="840">
                    Returns y origin of the wheel and triangle.                    
                </javadoc>
                <method name="getWheelYOrigin" type="int" line="843"/>
                <javadoc line="846">
                    Returns the width of the wheel.                    
                </javadoc>
                <method name="getWheelWidth" type="int" line="849"/>
                <javadoc line="852">
                    Sets the focus to one of: 0 no one, 1 the wheel or 2 the triangle.                    
                </javadoc>
                <method name="setFocusType" type="void" line="855">
                    <params>
                        <param name="type" type="int"/>
                    </params>
                    <scope line="856"/>
                    <scope line="861">
                        <declaration name="toSet" type="int" line="862"/>
                        <declaration name="toUnset" type="int" line="863"/>
                        <scope line="864"/>
                        <scope line="868"/>
                    </scope>
                </method>
                <javadoc line="875">
                    Returns the radius of the wheel.                    
                </javadoc>
                <method name="getWheelRadius" type="int" line="878"/>
                <javadoc line="881">
                    Updates the flags bitmask.                    
                </javadoc>
                <method name="setFlag" type="void" line="884">
                    <params>
                        <param name="flag" type="int"/>
                        <param name="value" type="boolean"/>
                    </params>
                    <scope line="885"/>
                    <scope line="888"/>
                </method>
                <javadoc line="892">
                    Returns true if a particular flag has been set.                    
                </javadoc>
                <method name="isSet" type="boolean" line="895">
                    <params>
                        <param name="flag" type="int"/>
                    </params>
                </method>
                <javadoc line="898">
                    Returns the RGB color to use for the specified location. The
                      passed in point must be on the color wheel and be relative to the
                      origin of the color wheel.                    
                    <param>
                        x X location to get color for                        
                    </param>
                    <param>
                        y Y location to get color for                        
                    </param>
                    <param>
                        rad Radius from center of color wheel                        
                    </param>
                    <return>
                        integer with red, green and blue components                        
                    </return>
                </javadoc>
                <method name="colorWheelLocationToRGB" type="int" line="907">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="rad" type="double"/>
                    </params>
                    <declaration name="angle" type="double" line="908"/>
                    <declaration name="rgb" type="int" line="909"/>
                    <scope line="910">
                        <scope line="911"/>
                        <scope line="914"/>
                    </scope>
                    <scope line="918">
                        <scope line="920"/>
                        <scope line="923"/>
                    </scope>
                    <scope line="927">
                        <scope line="929"/>
                        <scope line="932"/>
                    </scope>
                </method>
                <javadoc line="938">
                    Increments the hue.                    
                </javadoc>
                <method name="incrementHue" type="void" line="941">
                    <params>
                        <param name="positive" type="boolean"/>
                    </params>
                    <declaration name="hue" type="float" line="942"/>
                    <scope line="943"/>
                    <scope line="946"/>
                    <scope line="949"/>
                    <scope line="952"/>
                </method>
            </class>
            <class name="ColorAction" line="958">
                <extends class="AbstractAction"/>
                <javadoc line="958">
                    Action class used for colors.                    
                </javadoc>
                <declaration name="type" type="int" line="962"/>
                <method name="ColorAction" type="constructor" line="963">
                    <params>
                        <param name="name" type="String"/>
                        <param name="type" type="int"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="967">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="triangle" type="ColorTriangle" line="968"/>
                    <scope line="969">
                        <declaration name="hue" type="float" line="970"/>
                    </scope>
                    <scope line="988">
                        <declaration name="xDelta" type="int" line="989"/>
                        <declaration name="yDelta" type="int" line="990"/>
                    </scope>
                </method>
            </class>
            <class name="OpaqueLabel" line="1015">
                <extends class="JLabel"/>
                <method name="isOpaque" type="boolean" line="1016"/>
            </class>
        </class>
    </source>