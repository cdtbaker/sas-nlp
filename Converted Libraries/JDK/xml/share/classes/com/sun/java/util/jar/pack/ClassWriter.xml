<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="com.sun.java.util.jar.pack.ConstantPool.Entry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Index"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.NumberEntry"/>
        <import package="com.sun.java.util.jar.pack.Package.Class"/>
        <import package="com.sun.java.util.jar.pack.Package.InnerClass"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="ClassWriter" line="42">
            <comment line="190">
                handy buffer for collecting attrs                
            </comment>
            <javadoc line="42">
                Writer for a class file that is incorporated into a package.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="verbose" type="int" line="47"/>
            <declaration name="pkg" type="Package" line="49"/>
            <declaration name="cls" type="Class" line="50"/>
            <declaration name="out" type="DataOutputStream" line="51"/>
            <declaration name="cpIndex" type="Index" line="52"/>
            <method name="ClassWriter" type="constructor" line="54">
                <params>
                    <param name="cls" type="Class"/>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <method name="writeShort" type="void" line="65">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="writeInt" type="void" line="69">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="73">
                Write a 2-byte int representing a CP entry, using the local cpIndex.                
            </javadoc>
            <method name="writeRef" type="void" line="74">
                <params>
                    <param name="e" type="Entry"/>
                </params>
                <declaration name="i" type="int" line="75"/>
            </method>
            <method name="write" type="void" line="79">
                <comment line="86">
                    fields                    
                </comment>
                <comment line="87">
                    methods                    
                </comment>
                <comment line="89">
                    Closing here will cause all the underlying
                    streams to close, Causing the jar stream
                    to close prematurely, instead we just flush.
                    out.close();                    
                </comment>
                <declaration name="ok" type="boolean" line="80"/>
                <scope line="81"/>
                <scope line="96">
                    <scope line="97"/>
                </scope>
            </method>
            <method name="writeMagicNumbers" type="void" line="103"/>
            <method name="writeConstantPool" type="void" line="109">
                <comment line="121">
                    should not reach here                    
                </comment>
                <declaration name="cpMap" type="Entry[]" line="110"/>
                <scope line="112">
                    <declaration name="e" type="Entry" line="113"/>
                    <declaration name="tag" type="byte" line="116"/>
                    <declaration name="fval" type="float" line="130"/>
                    <declaration name="dval" type="double" line="137"/>
                </scope>
            </method>
            <method name="writeHeader" type="void" line="157">
                <scope line="162"/>
            </method>
            <method name="writeMembers" type="void" line="167">
                <params>
                    <param name="doMethods" type="boolean"/>
                </params>
                <declaration name="mems" type="List" line="168"/>
                <scope line="174">
                    <declaration name="m" type="Class.Member" line="175"/>
                </scope>
            </method>
            <method name="writeMember" type="void" line="180">
                <params>
                    <param name="m" type="Class.Member"/>
                    <param name="doMethod" type="boolean"/>
                </params>
            </method>
            <declaration name="buf" type="ByteArrayOutputStream" line="190"/>
            <declaration name="bufOut" type="DataOutputStream" line="191"/>
            <method name="writeAttributes" type="void" line="193">
                <params>
                    <param name="ctype" type="int"/>
                    <param name="h" type="Attribute.Holder"/>
                </params>
                <comment line="195">
                    attribute size                    
                </comment>
                <comment line="204">
                    These are hardwired.                    
                </comment>
                <scope line="194"/>
                <scope line="199">
                    <scope line="203">
                        <declaration name="savedOut" type="DataOutputStream" line="205"/>
                        <scope line="209">
                            <declaration name="m" type="Class.Method" line="210"/>
                        </scope>
                        <scope line="212"/>
                    </scope>
                    <scope line="221"/>
                </scope>
            </method>
            <method name="writeCode" type="void" line="230">
                <params>
                    <param name="code" type="Code"/>
                </params>
                <declaration name="nh" type="int" line="236"/>
                <scope line="238"/>
            </method>
            <method name="writeInnerClasses" type="void" line="247">
                <params>
                    <param name="cls" type="Class"/>
                </params>
                <declaration name="ics" type="List&lt;InnerClass&gt;" line="248"/>
                <scope line="250"/>
            </method>
        </class>
    </source>