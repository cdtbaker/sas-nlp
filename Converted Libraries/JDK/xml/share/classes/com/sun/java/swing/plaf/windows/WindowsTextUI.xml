<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.windows">
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Shape"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf.TextUI"/>
        <import package="javax.swing.plaf.UIResource"/>
        <import package="javax.swing.text"/>
        <class name="WindowsTextUI" line="11">
            <extends class="BasicTextUI"/>
            <javadoc line="11">
                Windows text rendering.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases.  The current serialization support is appropriate
                  for short term storage or RMI between applications running the same
                  version of Swing.  A future release of Swing will provide support for
                  long term persistence.                
            </javadoc>
            <javadoc line="22">
                Creates the object to use for a caret.  By default an
                  instance of WindowsCaret is created.  This method
                  can be redefined to provide something else that implements
                  the InputPosition interface or a subclass of DefaultCaret.                
                <return>
                    the caret object                    
                </return>
            </javadoc>
            <method name="createCaret" type="Caret" line="29"/>
            <declaration name="WindowsPainter" type="LayeredHighlighter.LayerPainter" line="32"/>
            <class name="WindowsCaret" line="33">
                <extends class="DefaultCaret"/>
                <implements interface="UIResource"/>
                <javadoc line="34">
                    Gets the painter for the Highlighter.                    
                    <return>
                        the painter                        
                    </return>
                </javadoc>
                <method name="getSelectionPainter" type="Highlighter.HighlightPainter" line="38"/>
            </class>
            <class name="WindowsHighlightPainter" line="42">
                <extends class="DefaultHighlighter.DefaultHighlightPainter"/>
                <method name="WindowsHighlightPainter" type="constructor" line="43">
                    <params>
                        <param name="c" type="Color"/>
                    </params>
                </method>
                <javadoc line="46">
                    Paints a highlight.                    
                    <param>
                        g the graphics context                        
                    </param>
                    <param>
                        offs0 the starting model offset &gt;= 0                        
                    </param>
                    <param>
                        offs1 the ending model offset &gt;= offs1                        
                    </param>
                    <param>
                        bounds the bounding box for the highlight                        
                    </param>
                    <param>
                        c the editor                        
                    </param>
                </javadoc>
                <method name="paint" type="void" line="54">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="offs0" type="int"/>
                        <param name="offs1" type="int"/>
                        <param name="bounds" type="Shape"/>
                        <param name="c" type="JTextComponent"/>
                    </params>
                    <declaration name="alloc" type="Rectangle" line="55"/>
                    <scope line="56">
                        <declaration name="mapper" type="TextUI" line="57"/>
                        <declaration name="p0" type="Rectangle" line="58"/>
                        <declaration name="p1" type="Rectangle" line="59"/>
                        <declaration name="color" type="Color" line="60"/>
                        <scope line="61"/>
                        <scope line="64"/>
                        <declaration name="firstIsDot" type="boolean" line="67"/>
                        <declaration name="secondIsDot" type="boolean" line="68"/>
                        <scope line="69">
                            <declaration name="dot" type="int" line="70"/>
                        </scope>
                        <scope line="74">
                            <declaration name="r" type="Rectangle" line="75"/>
                            <scope line="76">
                                <scope line="77"/>
                                <scope line="81"/>
                            </scope>
                        </scope>
                        <scope line="87">
                            <declaration name="p0ToMarginWidth" type="int" line="88"/>
                            <scope line="89"/>
                            <scope line="94"/>
                            <scope line="97"/>
                        </scope>
                    </scope>
                    <scope line="103"/>
                </method>
                <javadoc line="106">
                    Paints a portion of a highlight.                    
                    <param>
                        g the graphics context                        
                    </param>
                    <param>
                        offs0 the starting model offset &gt;= 0                        
                    </param>
                    <param>
                        offs1 the ending model offset &gt;= offs1                        
                    </param>
                    <param>
                        bounds the bounding box of the view, which is not
                          necessarily the region to paint.                        
                    </param>
                    <param>
                        c the editor                        
                    </param>
                    <param>
                        view View painting for                        
                    </param>
                    <return>
                        region drawing occured in                        
                    </return>
                </javadoc>
                <method name="paintLayer" type="Shape" line="117">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="offs0" type="int"/>
                        <param name="offs1" type="int"/>
                        <param name="bounds" type="Shape"/>
                        <param name="c" type="JTextComponent"/>
                        <param name="view" type="View"/>
                    </params>
                    <declaration name="color" type="Color" line="118"/>
                    <scope line="119"/>
                    <scope line="122"/>
                    <declaration name="firstIsDot" type="boolean" line="125"/>
                    <declaration name="secondIsDot" type="boolean" line="126"/>
                    <scope line="127">
                        <declaration name="dot" type="int" line="128"/>
                    </scope>
                    <scope line="132">
                        <declaration name="alloc" type="Rectangle" line="133"/>
                        <scope line="134"/>
                        <scope line="137"/>
                        <scope line="140"/>
                        <scope line="143"/>
                        <scope line="146"/>
                    </scope>
                    <scope line="151">
                        <scope line="152">
                            <declaration name="shape" type="Shape" line="153"/>
                            <declaration name="r" type="Rectangle" line="154"/>
                            <scope line="155"/>
                            <scope line="158"/>
                            <scope line="161"/>
                        </scope>
                        <scope line="166"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>