<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="com.sun.java.util.jar.pack.ConstantPool.Entry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Index"/>
        <import package="com.sun.java.util.jar.pack.Package.Class.Field"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.EOFException"/>
        <import package="java.io.File"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.FilterInputStream"/>
        <import package="java.io.FilterOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.jar.Pack200"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="BandStructure" line="52">
            <comment line="63">
                Inherit options from Pack200:                
            </comment>
            <comment line="72">
                Various heuristic options.                
            </comment>
            <comment line="78">
                Local copy of package version.                
            </comment>
            <comment line="106">
                Note:  Tried sharper (3,16) with no post-zip benefit.                
            </comment>
            <comment line="108">
                This is best used with BCI values:                
            </comment>
            <comment line="109">
                mostly 1-byte offsets                
            </comment>
            <comment line="110">
                mostly forward branches                
            </comment>
            <comment line="114">
                &quot;sharp&quot; (5,64) zips 0.4% better than &quot;medium&quot; (5,128)                
            </comment>
            <comment line="115">
                It zips 1.1% better than &quot;flat&quot; (5,192)                
            </comment>
            <comment line="117">
                sharp                
            </comment>
            <comment line="119">
                Note:  Tried (5,128,2) and (5,192,2) with no benefit.                
            </comment>
            <comment line="283">
                used for input only                
            </comment>
            <comment line="284">
                BHB read pointer, for input only                
            </comment>
            <comment line="285">
                for debug                
            </comment>
            <comment line="319">
                package writing phases:                
            </comment>
            <comment line="320">
                collect data before write                
            </comment>
            <comment line="321">
                no longer collecting                
            </comment>
            <comment line="322">
                ready to write bytes                
            </comment>
            <comment line="324">
                package reading phases:                
            </comment>
            <comment line="325">
                gather expected counts                
            </comment>
            <comment line="326">
                ready to read bytes                
            </comment>
            <comment line="327">
                pass out data after read                
            </comment>
            <comment line="329">
                done writing or reading                
            </comment>
            <comment line="1052">
                Bootstrap support for CPRefBands.  These are needed to record                
            </comment>
            <comment line="1053">
                intended CP indexes, before the CP has been created.                
            </comment>
            <comment line="1109">
                The first value in a band is always coded with the default coding D.                
            </comment>
            <comment line="1110">
                If this first value X is an escape value, it actually represents the                
            </comment>
            <comment line="1111">
                first (and perhaps only) byte of a meta-coding.                
            </comment>
            <comment line="1112">
                                
            </comment>
            <comment line="1113">
                If D.S != 0 and D includes the range [-256..-1],                
            </comment>
            <comment line="1114">
                the escape values are in that range,                
            </comment>
            <comment line="1115">
                and the first byte XB is -1-X.                
            </comment>
            <comment line="1116">
                                
            </comment>
            <comment line="1117">
                If D.S == 0 and D includes the range [(D.L)..(D.L)+255],                
            </comment>
            <comment line="1118">
                the escape values are in that range,                
            </comment>
            <comment line="1119">
                and XB is X-(D.L).                
            </comment>
            <comment line="1120">
                                
            </comment>
            <comment line="1121">
                This representation is designed so that a band header is unlikely                
            </comment>
            <comment line="1122">
                to be confused with the initial value of a headerless band,                
            </comment>
            <comment line="1123">
                and yet so that a band header is likely to occupy only a byte or two.                
            </comment>
            <comment line="1124">
                                
            </comment>
            <comment line="1125">
                Result is in [0..255] if XB was successfully extracted, else -1.                
            </comment>
            <comment line="1126">
                See section &quot;Coding Specifier Meta-Encoding&quot; in the JSR 200 spec.                
            </comment>
            <comment line="1150">
                Inverse to decodeEscapeValue().                
            </comment>
            <comment line="1368">
                random AO_XXX bits, decoded from the archive header                
            </comment>
            <comment line="1371">
                archiveSize1 sizes most of the archive [archive_options..file_bits).                
            </comment>
            <comment line="1372">
                size through archive_size_lo                
            </comment>
            <comment line="1373">
                size reported in archive_header                
            </comment>
            <comment line="1374">
                reported in archive_header                
            </comment>
            <comment line="1376">
                minver, majver, options                
            </comment>
            <comment line="1379">
                optional size hi/lo                
            </comment>
            <comment line="1380">
                mentioned in spec                
            </comment>
            <comment line="1381">
                Length contributions from optional header fields:                
            </comment>
            <comment line="1382">
                sizehi/lo/next/modtime/files                
            </comment>
            <comment line="1383">
                layouts/band-headers                
            </comment>
            <comment line="1384">
                int/float/long/double                
            </comment>
            <comment line="1388">
                Common structure of attribute band groups:                
            </comment>
            <comment line="1418">
                file header (various random bytes)                
            </comment>
            <comment line="1425">
                constant pool contents                
            </comment>
            <comment line="1451">
                bands for carrying attribute definitions:                
            </comment>
            <comment line="1457">
                bands for hardwired InnerClasses attribute (shared across the package)                
            </comment>
            <comment line="1461">
                These bands contain data only where flags sets ACC_IC_LONG_FORM:                
            </comment>
            <comment line="1465">
                bands for carrying class schema information:                
            </comment>
            <comment line="1472">
                bands for class members                
            </comment>
            <comment line="1484">
                bands for predefined field attributes                
            </comment>
            <comment line="1496">
                band for predefined method attributes                
            </comment>
            <comment line="1508">
                band for predefined SourceFile and other class attributes                
            </comment>
            <comment line="1523">
                BYTE1                
            </comment>
            <comment line="1549">
                bands for predefined LineNumberTable attribute                
            </comment>
            <comment line="1554">
                bands for predefined LocalVariable{Type}Table attributes                
            </comment>
            <comment line="1568">
                bands for bytecodes                
            </comment>
            <comment line="1570">
                BYTE1                
            </comment>
            <comment line="1571">
                remaining bands provide typed opcode fields required by the bc_codes                
            </comment>
            <comment line="1573">
                *switch                
            </comment>
            <comment line="1574">
                *switch                
            </comment>
            <comment line="1575">
                BYTE1   // bipush, iinc, *newarray                
            </comment>
            <comment line="1576">
                sipush, wide iinc                
            </comment>
            <comment line="1577">
                *load, *store, iinc, ret                
            </comment>
            <comment line="1578">
                if*, goto*, jsr*, *switch                
            </comment>
            <comment line="1580">
                Most CP refs exhibit some correlation, and benefit from delta coding.                
            </comment>
            <comment line="1581">
                The notable exceptions are class and method references.                
            </comment>
            <comment line="1583">
                ldc* operands:                
            </comment>
            <comment line="1590">
                nulls produced by bc_classref are taken to mean the current class                
            </comment>
            <comment line="1591">
                new, *anew*, c*cast, i*of, ldc                
            </comment>
            <comment line="1592">
                get*, put*                
            </comment>
            <comment line="1593">
                invoke[vs]*                
            </comment>
            <comment line="1594">
                invokeinterface                
            </comment>
            <comment line="1596">
                _self_linker_op family                
            </comment>
            <comment line="1597">
                any field within cur. class                
            </comment>
            <comment line="1598">
                any field within superclass                
            </comment>
            <comment line="1599">
                any method within cur. class                
            </comment>
            <comment line="1600">
                any method within superclass                
            </comment>
            <comment line="1601">
                bc_invokeinit family:                
            </comment>
            <comment line="1603">
                escapes                
            </comment>
            <comment line="1609">
                bands for carrying resource files and file attributes:                
            </comment>
            <comment line="1618">
                End of band definitions!                
            </comment>
            <comment line="1663">
                Table of bands which contain metadata.                
            </comment>
            <comment line="1671">
                Attribute layouts.                
            </comment>
            <comment line="1672">
                (ad_hdr &amp; ADH_CONTEXT_MASK)                
            </comment>
            <comment line="1673">
                (ad_hdr &gt;&gt; ADH_BIT_SHIFT)                
            </comment>
            <comment line="1678">
                Each index limit is either 32 or 63, depending on AO_HAVE_XXX_FLAGS_HI.                
            </comment>
            <comment line="1680">
                Which flag bits are taken over by attributes?                
            </comment>
            <comment line="1682">
                Which flag bits have been taken over explicitly?                
            </comment>
            <comment line="1685">
                What pseudo-attribute bits are there to watch for?                
            </comment>
            <comment line="1689">
                Mapping from Attribute.Layout to Band[] (layout element bands).                
            </comment>
            <comment line="1692">
                Well-known attributes:                
            </comment>
            <comment line="1698">
                Mapping from Attribute.Layout to Integer (inverse of attrDefs)                
            </comment>
            <comment line="1701">
                Mapping from attribute index (&lt;32 are flag bits) to attributes.                
            </comment>
            <comment line="2036">
                This version takes bandPrefix/addHere instead of prebuilt Band[] ab.                
            </comment>
            <comment line="2071">
                Bands which contain non-predefined attrs.                
            </comment>
            <comment line="2080">
                Create bands for all non-predefined attrs.                
            </comment>
            <comment line="2130">
                Recursive helper, operates on a &quot;body&quot; or other sequence of elems:                
            </comment>
            <comment line="2249">
                encodings found in the code_headers band                
            </comment>
            <comment line="2257">
                return 0 if it won&apos;t encode, else a number in [1..255]                
            </comment>
            <comment line="2309">
                utilities for accessing the bc_label band:                
            </comment>
            <comment line="2363">
                //////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="2392">
                DEBUG ONLY:  Validate me at each length change.                
            </comment>
            <comment line="2402">
                DEBUG ONLY:  Validate a phase.                
            </comment>
            <comment line="2412">
                DEBUG ONLY:  Tells whether verbosity is turned on.                
            </comment>
            <comment line="2418">
                DEBUG ONLY:  Validate me at each phase change.                
            </comment>
            <comment line="2519">
                DEBUG ONLY:  Record something about the band order.                
            </comment>
            <comment line="2527">
                DEBUG ONLY:  Validate next input band.                
            </comment>
            <comment line="2563">
                DEBUG ONLY:  Make sure a bunch of cprefs are correct.                
            </comment>
            <comment line="2578">
                DEBUG ONLY:  Maybe write a debugging cookie to next output band.                
            </comment>
            <comment line="2651">
                Utilities for reallocating:                
            </comment>
            <javadoc line="52">
                Define the structure and ordering of &quot;bands&quot; in a packed file.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="MAX_EFFORT" type="int" line="58"/>
            <declaration name="MIN_EFFORT" type="int" line="59"/>
            <declaration name="DEFAULT_EFFORT" type="int" line="60"/>
            <declaration name="p200" type="PropMap" line="63"/>
            <declaration name="verbose" type="int" line="65"/>
            <declaration name="effort" type="int" line="66"/>
            <scope line="67"/>
            <declaration name="optDumpBands" type="boolean" line="68"/>
            <declaration name="optDebugBands" type="boolean" line="69"/>
            <declaration name="optVaryCodings" type="boolean" line="72"/>
            <declaration name="optBigStrings" type="boolean" line="73"/>
            <method name="getCPIndex" type="Index" line="75"/>
            <declaration name="packageMajver" type="int" line="78"/>
            <javadoc line="80">
                Call this exactly once, early, to specify the archive major version.                
            </javadoc>
            <method name="initPackageMajver" type="void" line="81">
                <params>
                    <param name="packageMajver" type="int"/>
                </params>
                <scope line="83"/>
            </method>
            <method name="getPackageMajver" type="int" line="91">
                <scope line="92"/>
            </method>
            <declaration name="isReader" type="boolean" line="98"/>
            <method name="BandStructure" type="constructor" line="99"/>
            <declaration name="BYTE1" type="Coding" line="102"/>
            <declaration name="CHAR3" type="Coding" line="104"/>
            <declaration name="BCI5" type="Coding" line="108"/>
            <declaration name="BRANCH5" type="Coding" line="109"/>
            <declaration name="UNSIGNED5" type="Coding" line="111"/>
            <declaration name="UDELTA5" type="Coding" line="112"/>
            <declaration name="SIGNED5" type="Coding" line="116"/>
            <declaration name="DELTA5" type="Coding" line="117"/>
            <declaration name="MDELTA5" type="Coding" line="120"/>
            <declaration name="basicCodings" type="Coding[]" line="122"/>
            <declaration name="basicCodingIndexes" type="Map&lt;Coding,Integer&gt;" line="255"/>
            <scope line="256">
                <declaration name="map" type="Map&lt;Coding,Integer&gt;" line="260"/>
                <scope line="261">
                    <declaration name="c" type="Coding" line="262"/>
                </scope>
            </scope>
            <method name="codingForIndex" type="Coding" line="270">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="indexOf" type="int" line="273">
                <params>
                    <param name="c" type="Coding"/>
                </params>
                <declaration name="i" type="Integer" line="274"/>
            </method>
            <method name="getBasicCodings" type="Coding[]" line="278"/>
            <declaration name="bandHeaderBytes" type="byte[]" line="282"/>
            <declaration name="bandHeaderBytePos" type="int" line="283"/>
            <declaration name="bandHeaderBytePos0" type="int" line="284"/>
            <method name="getBandHeader" type="CodingMethod" line="286">
                <params>
                    <param name="XB" type="int"/>
                    <param name="regularCoding" type="Coding"/>
                </params>
                <comment line="288">
                    push back XB onto the band header bytes                    
                </comment>
                <comment line="291">
                    scan forward through XB and any additional band header bytes                    
                </comment>
                <declaration name="res" type="CodingMethod[]" line="287"/>
            </method>
            <method name="parseMetaCoding" type="int" line="299">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pos" type="int"/>
                    <param name="dflt" type="Coding"/>
                    <param name="res" type="CodingMethod[]"/>
                </params>
                <scope line="300"/>
                <declaration name="pos2" type="int" line="304"/>
            </method>
            <declaration name="SHORT_BAND_HEURISTIC" type="int" line="314"/>
            <declaration name="NO_PHASE" type="int" line="316"/>
            <declaration name="COLLECT_PHASE" type="int" line="319"/>
            <declaration name="FROZEN_PHASE" type="int" line="320"/>
            <declaration name="WRITE_PHASE" type="int" line="321"/>
            <declaration name="EXPECT_PHASE" type="int" line="324"/>
            <declaration name="READ_PHASE" type="int" line="325"/>
            <declaration name="DISBURSE_PHASE" type="int" line="326"/>
            <declaration name="DONE_PHASE" type="int" line="328"/>
            <method name="phaseIsRead" type="boolean" line="330">
                <params>
                    <param name="p" type="int"/>
                </params>
            </method>
            <method name="phaseCmp" type="int" line="333">
                <params>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
            </method>
            <class name="Band" line="338">
                <comment line="366">
                    cache                    
                </comment>
                <comment line="394">
                    common operations                    
                </comment>
                <comment line="452">
                    / Phase change markers.                    
                </comment>
                <comment line="501">
                    DEBUG ONLY                    
                </comment>
                <comment line="514">
                    must be null in EXPECT phase                    
                </comment>
                <comment line="783">
                    input buffer                    
                </comment>
                <comment line="879">
                    alternative to readFrom:                    
                </comment>
                <comment line="930">
                    The usual coding for bands is 7bit/5byte/delta.                    
                </comment>
                <comment line="1330">
                    (should go public under the name CountingOutputStream?)                    
                </comment>
                <javadoc line="338">
                    The packed file is divided up into a number of segments.
                      Most segments are typed as ValueBand, strongly-typed sequences
                      of integer values, all interpreted in a single way.
                      A few segments are ByteBands, which hetergeneous sequences
                      of bytes.
                      The two phases for writing a packed file are COLLECT and WRITE.
                      1. When writing a packed file, each band collects
                      data in an ad-hoc order.
                      2. At the end, each band is assigned a coding scheme,
                      and then all the bands are written in their global order.
                      The three phases for reading a packed file are EXPECT, READ,
                      and DISBURSE.
                      1. For each band, the expected number of integers  is determined.
                      2. The data is actually read from the file into the band.
                      3. The band pays out its values as requested, in an ad hoc order.
                      When the last phase of a band is done, it is marked so (DONE).
                      Clearly, these phases must be properly ordered WRT each other.                    
                </javadoc>
                <declaration name="phase" type="int" line="360"/>
                <declaration name="name" type="String" line="361"/>
                <declaration name="valuesExpected" type="int" line="363"/>
                <declaration name="outputSize" type="long" line="365"/>
                <declaration name="regularCoding" type="Coding" line="367"/>
                <declaration name="seqForDebug" type="int" line="369"/>
                <declaration name="elementCountForDebug" type="int" line="370"/>
                <method name="Band" type="constructor" line="373">
                    <params>
                        <param name="name" type="String"/>
                        <param name="regularCoding" type="Coding"/>
                    </params>
                    <comment line="379">
                        caller must call init                        
                    </comment>
                </method>
                <method name="init" type="Band" line="382">
                    <comment line="383">
                        Cannot due this from the constructor, because constructor                        
                    </comment>
                    <comment line="384">
                        may wish to initialize some subclass variables.                        
                    </comment>
                    <comment line="385">
                        Set initial phase for reading or writing:                        
                    </comment>
                </method>
                <method name="isReader" type="boolean" line="394"/>
                <method name="phase" type="int" line="395"/>
                <method name="name" type="String" line="396"/>
                <method name="capacity" type="int" line="398"/>
                <javadoc line="398">
                    Return -1 if data buffer not allocated, else max length.                    
                </javadoc>
                <method name="setCapacity" type="void" line="401"/>
                <javadoc line="401">
                    Allocate data buffer to specified length.                    
                </javadoc>
                <method name="length" type="int" line="404"/>
                <javadoc line="404">
                    Return current number of values in buffer, which must exist.                    
                </javadoc>
                <method name="valuesRemainingForDebug" type="int" line="407"/>
                <method name="valuesExpected" type="int" line="409"/>
                <javadoc line="413">
                    Write out bytes, encoding the values.                    
                </javadoc>
                <method name="writeTo" type="void" line="414">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                    <comment line="417">
                        subclasses continue by writing their contents to output                        
                    </comment>
                </method>
                <method name="chooseBandCodings" type="void" line="422"/>
                <method name="outputSize" type="long" line="424">
                    <scope line="425">
                        <declaration name="size" type="long" line="426"/>
                    </scope>
                </method>
                <method name="computeOutputSize" type="long" line="433"/>
                <method name="writeDataTo" type="void" line="435"/>
                <javadoc line="437">
                    Expect a certain number of values.                    
                </javadoc>
                <method name="expectLength" type="void" line="438">
                    <params>
                        <param name="l" type="int"/>
                    </params>
                    <comment line="440">
                        all at once                        
                    </comment>
                </method>
                <javadoc line="444">
                    Expect more values.  (Multiple calls accumulate.)                    
                </javadoc>
                <method name="expectMoreLength" type="void" line="445">
                    <params>
                        <param name="l" type="int"/>
                    </params>
                </method>
                <method name="readyToCollect" type="void" line="453"/>
                <method name="doneWriting" type="void" line="457"/>
                <method name="readyToExpect" type="void" line="461"/>
                <javadoc line="464">
                    Read in bytes, decoding the values.                    
                </javadoc>
                <method name="readFrom" type="void" line="465">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                    <comment line="469">
                        subclasses continue by reading their contents from input:                        
                    </comment>
                </method>
                <method name="readDataFrom" type="void" line="473"/>
                <method name="readyToDisburse" type="void" line="474"/>
                <method name="doneDisbursing" type="void" line="478"/>
                <method name="doneWithUnusedBand" type="void" line="482">
                    <comment line="486">
                        Fast forward:                        
                    </comment>
                    <scope line="483"/>
                    <scope line="490"/>
                </method>
                <method name="setPhase" type="void" line="495">
                    <params>
                        <param name="newPhase" type="int"/>
                    </params>
                </method>
                <declaration name="lengthForDebug" type="int" line="500"/>
                <method name="toString" type="String" line="501">
                    <declaration name="length" type="int" line="502"/>
                    <declaration name="str" type="String" line="503"/>
                </method>
            </class>
            <class name="ValueBand" line="512">
                <extends class="Band"/>
                <comment line="366">
                    cache                    
                </comment>
                <comment line="394">
                    common operations                    
                </comment>
                <comment line="452">
                    / Phase change markers.                    
                </comment>
                <comment line="501">
                    DEBUG ONLY                    
                </comment>
                <comment line="514">
                    must be null in EXPECT phase                    
                </comment>
                <comment line="783">
                    input buffer                    
                </comment>
                <comment line="879">
                    alternative to readFrom:                    
                </comment>
                <comment line="930">
                    The usual coding for bands is 7bit/5byte/delta.                    
                </comment>
                <comment line="1330">
                    (should go public under the name CountingOutputStream?)                    
                </comment>
                <declaration name="values" type="int[]" line="513"/>
                <declaration name="length" type="int" line="514"/>
                <declaration name="valuesDisbursed" type="int" line="515"/>
                <declaration name="bandCoding" type="CodingMethod" line="517"/>
                <declaration name="metaCoding" type="byte[]" line="518"/>
                <method name="ValueBand" type="constructor" line="520">
                    <params>
                        <param name="name" type="String"/>
                        <param name="regularCoding" type="Coding"/>
                    </params>
                </method>
                <method name="capacity" type="int" line="524"/>
                <javadoc line="528">
                    Declare predicted or needed capacity.                    
                </javadoc>
                <method name="setCapacity" type="void" line="529">
                    <params>
                        <param name="cap" type="int"/>
                    </params>
                    <scope line="531"/>
                </method>
                <method name="length" type="int" line="535"/>
                <method name="valuesRemainingForDebug" type="int" line="538"/>
                <method name="valueAtForDebug" type="int" line="541">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="patchValue" type="void" line="545">
                    <params>
                        <param name="i" type="int"/>
                        <param name="value" type="int"/>
                    </params>
                    <comment line="546">
                        Only one use for this.                        
                    </comment>
                    <comment line="549">
                        must have already output a dummy                        
                    </comment>
                    <comment line="551">
                        decache                        
                    </comment>
                </method>
                <method name="initializeValues" type="void" line="554">
                    <params>
                        <param name="values" type="int[]"/>
                    </params>
                </method>
                <javadoc line="561">
                    Collect one value, or store one decoded value.                    
                </javadoc>
                <method name="addValue" type="void" line="562">
                    <params>
                        <param name="x" type="int"/>
                    </params>
                </method>
                <method name="canVaryCoding" type="boolean" line="569">
                    <comment line="572">
                        Can&apos;t read band_headers w/o the archive header:                        
                    </comment>
                    <comment line="576">
                        BYTE1 bands can&apos;t vary codings, but the others can.                        
                    </comment>
                    <comment line="577">
                        All that&apos;s needed for the initial escape is at least                        
                    </comment>
                    <comment line="578">
                        256 negative values or more than 256 non-negative values                        
                    </comment>
                </method>
                <method name="shouldVaryCoding" type="boolean" line="582"/>
                <method name="chooseBandCodings" type="void" line="589">
                    <comment line="607">
                        CodingChooser failed to size it.                        
                    </comment>
                    <comment line="611">
                        Compute and save the meta-coding bytes also.                        
                    </comment>
                    <comment line="619">
                        Need an explicit default.                        
                    </comment>
                    <comment line="622">
                        Common case:  Zero bytes of meta coding.                        
                    </comment>
                    <comment line="645">
                        Compute outputSize of the escape value X, if any.                        
                    </comment>
                    <comment line="647">
                        First byte XB of meta-coding is treated specially,                        
                    </comment>
                    <comment line="648">
                        but any other bytes go into the band headers band.                        
                    </comment>
                    <comment line="649">
                        This must be done before any other output happens.                        
                    </comment>
                    <comment line="651">
                        good cache                        
                    </comment>
                    <comment line="652">
                        Other bytes go into band_headers.                        
                    </comment>
                    <declaration name="canVary" type="boolean" line="590"/>
                    <scope line="591">
                        <scope line="592"/>
                        <scope line="594"/>
                    </scope>
                    <scope line="601">
                        <declaration name="sizes" type="int[]" line="602"/>
                    </scope>
                    <scope line="612">
                        <scope line="614"/>
                    </scope>
                    <scope line="618"/>
                    <scope line="621"/>
                    <scope line="626">
                        <declaration name="sb" type="StringBuffer" line="627"/>
                        <scope line="628"/>
                    </scope>
                    <scope line="646">
                        <scope line="653"/>
                    </scope>
                </method>
                <method name="computeOutputSize" type="long" line="659"/>
                <method name="computeEscapeSize" type="int" line="667">
                    <declaration name="XB" type="int" line="669"/>
                    <declaration name="X" type="int" line="670"/>
                </method>
                <method name="writeDataTo" type="void" line="674">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                    <comment line="675">
                        nothing to write                        
                    </comment>
                    <comment line="682">
                        We need an explicit band header, either because                        
                    </comment>
                    <comment line="683">
                        there is a non-default coding method, or because                        
                    </comment>
                    <comment line="684">
                        the first value would be parsed as an escape value.                        
                    </comment>
                    <comment line="686">
                        System.out.println(&quot;X=&quot;+X+&quot; XB=&quot;+XB+&quot; in &quot;+this);                        
                    </comment>
                    <declaration name="len0" type="long" line="676"/>
                    <scope line="677"/>
                    <scope line="680">
                        <declaration name="XB" type="int" line="681"/>
                        <declaration name="X" type="int" line="685"/>
                    </scope>
                    <scope line="690"/>
                </method>
                <method name="readDataFrom" type="void" line="697">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                    <comment line="699">
                        nothing to read                        
                    </comment>
                    <comment line="706">
                        input must be buffered                        
                    </comment>
                    <comment line="711">
                        Do not consume this value.  No alternate coding.                        
                    </comment>
                    <comment line="723">
                        This is really used only by dumpBands.                        
                    </comment>
                    <scope line="702"/>
                    <scope line="705">
                        <declaration name="X" type="int" line="708"/>
                        <declaration name="XB" type="int" line="709"/>
                        <scope line="710"/>
                        <scope line="716"/>
                        <scope line="719">
                            <declaration name="p0" type="int" line="724"/>
                            <declaration name="p1" type="int" line="725"/>
                        </scope>
                    </scope>
                    <scope line="731"/>
                </method>
                <method name="doneDisbursing" type="void" line="739">
                    <comment line="741">
                        for GC                        
                    </comment>
                </method>
                <method name="dumpBand" type="void" line="744">
                    <scope line="746">
                        <declaration name="irr" type="String" line="747"/>
                        <scope line="751">
                            <declaration name="sb" type="StringBuffer" line="752"/>
                            <scope line="753"/>
                        </scope>
                    </scope>
                    <scope line="761"/>
                </method>
                <javadoc line="766">
                    Disburse one value.                    
                </javadoc>
                <method name="getValue" type="int" line="767"/>
                <javadoc line="773">
                    Reset for another pass over the same value set.                    
                </javadoc>
                <method name="resetForSecondPass" type="void" line="774">
                    <comment line="776">
                        1st pass is complete                        
                    </comment>
                </method>
            </class>
            <class name="ByteBand" line="781">
                <extends class="Band"/>
                <comment line="366">
                    cache                    
                </comment>
                <comment line="394">
                    common operations                    
                </comment>
                <comment line="452">
                    / Phase change markers.                    
                </comment>
                <comment line="501">
                    DEBUG ONLY                    
                </comment>
                <comment line="514">
                    must be null in EXPECT phase                    
                </comment>
                <comment line="783">
                    input buffer                    
                </comment>
                <comment line="879">
                    alternative to readFrom:                    
                </comment>
                <comment line="930">
                    The usual coding for bands is 7bit/5byte/delta.                    
                </comment>
                <comment line="1330">
                    (should go public under the name CountingOutputStream?)                    
                </comment>
                <declaration name="bytes" type="ByteArrayOutputStream" line="782"/>
                <declaration name="bytesForDump" type="ByteArrayOutputStream" line="783"/>
                <declaration name="in" type="InputStream" line="784"/>
                <method name="ByteBand" type="constructor" line="786">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="capacity" type="int" line="790"/>
                <method name="setCapacity" type="void" line="793">
                    <params>
                        <param name="cap" type="int"/>
                    </params>
                    <comment line="794">
                        do this just once                        
                    </comment>
                </method>
                <method name="destroy" type="void" line="797"/>
                <method name="length" type="int" line="802"/>
                <method name="reset" type="void" line="805"/>
                <method name="valuesRemainingForDebug" type="int" line="808"/>
                <method name="chooseBandCodings" type="void" line="812">
                    <comment line="813">
                        No-op.                        
                    </comment>
                </method>
                <method name="computeOutputSize" type="long" line="818">
                    <comment line="819">
                        do not cache                        
                    </comment>
                </method>
                <method name="writeDataTo" type="void" line="823">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                    <comment line="827">
                        done with the bits!                        
                    </comment>
                </method>
                <method name="dumpBand" type="void" line="830">
                    <scope line="832"/>
                </method>
                <method name="readDataFrom" type="void" line="840">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                    <declaration name="vex" type="int" line="841"/>
                    <scope line="843"/>
                    <declaration name="buf" type="byte[]" line="848"/>
                    <scope line="849">
                        <declaration name="nr" type="int" line="850"/>
                    </scope>
                </method>
                <method name="readyToDisburse" type="void" line="858"/>
                <method name="doneDisbursing" type="void" line="863">
                    <comment line="873">
                        GC                        
                    </comment>
                    <comment line="874">
                        GC                        
                    </comment>
                    <comment line="875">
                        GC                        
                    </comment>
                    <scope line="866">
                        <scope line="867"/>
                        <scope line="869"/>
                    </scope>
                </method>
                <method name="setInputStreamFrom" type="void" line="879">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                    <comment line="885">
                        Tap the stream.                        
                    </comment>
                    <scope line="884">
                        <anonymous_class line="887">
                            <method name="read" type="int" line="888">
                                <declaration name="ch" type="int" line="889"/>
                            </method>
                            <method name="read" type="int" line="893">
                                <params>
                                    <param name="b" type="byte"/>
                                    <param name="off" type="int"/>
                                    <param name="len" type="int"/>
                                </params>
                                <declaration name="nr" type="int" line="894"/>
                            </method>
                        </anonymous_class>
                    </scope>
                </method>
                <method name="collectorStream" type="OutputStream" line="903"/>
                <method name="getInputStream" type="InputStream" line="909"/>
                <method name="getByte" type="int" line="914">
                    <declaration name="b" type="int" line="915"/>
                </method>
                <method name="putByte" type="void" line="919">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                </method>
                <method name="toString" type="String" line="923"/>
            </class>
            <class name="IntBand" line="928">
                <extends class="ValueBand"/>
                <comment line="366">
                    cache                    
                </comment>
                <comment line="394">
                    common operations                    
                </comment>
                <comment line="452">
                    / Phase change markers.                    
                </comment>
                <comment line="501">
                    DEBUG ONLY                    
                </comment>
                <comment line="514">
                    must be null in EXPECT phase                    
                </comment>
                <comment line="783">
                    input buffer                    
                </comment>
                <comment line="879">
                    alternative to readFrom:                    
                </comment>
                <comment line="930">
                    The usual coding for bands is 7bit/5byte/delta.                    
                </comment>
                <comment line="1330">
                    (should go public under the name CountingOutputStream?)                    
                </comment>
                <method name="IntBand" type="constructor" line="930">
                    <params>
                        <param name="name" type="String"/>
                        <param name="regularCoding" type="Coding"/>
                    </params>
                </method>
                <method name="putInt" type="void" line="934">
                    <params>
                        <param name="x" type="int"/>
                    </params>
                </method>
                <method name="getInt" type="int" line="939"/>
                <javadoc line="942">
                    Return the sum of all values in this band.                    
                </javadoc>
                <method name="getIntTotal" type="int" line="943">
                    <comment line="945">
                        assert that this is the whole pass; no other reads allowed                        
                    </comment>
                    <declaration name="total" type="int" line="947"/>
                    <scope line="948"/>
                </method>
                <javadoc line="954">
                    Return the occurrence count of a specific value in this band.                    
                </javadoc>
                <method name="getIntCount" type="int" line="955">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                    <comment line="957">
                        assert that this is the whole pass; no other reads allowed                        
                    </comment>
                    <declaration name="total" type="int" line="959"/>
                    <scope line="960">
                        <scope line="961"/>
                    </scope>
                </method>
            </class>
            <method name="getIntTotal" type="int" line="970">
                <params>
                    <param name="values" type="int[]"/>
                </params>
                <declaration name="total" type="int" line="971"/>
                <scope line="972"/>
            </method>
            <class name="CPRefBand" line="978">
                <extends class="ValueBand"/>
                <comment line="366">
                    cache                    
                </comment>
                <comment line="394">
                    common operations                    
                </comment>
                <comment line="452">
                    / Phase change markers.                    
                </comment>
                <comment line="501">
                    DEBUG ONLY                    
                </comment>
                <comment line="514">
                    must be null in EXPECT phase                    
                </comment>
                <comment line="783">
                    input buffer                    
                </comment>
                <comment line="879">
                    alternative to readFrom:                    
                </comment>
                <comment line="930">
                    The usual coding for bands is 7bit/5byte/delta.                    
                </comment>
                <comment line="1330">
                    (should go public under the name CountingOutputStream?)                    
                </comment>
                <declaration name="index" type="Index" line="979"/>
                <declaration name="nullOK" type="boolean" line="980"/>
                <method name="CPRefBand" type="constructor" line="982">
                    <params>
                        <param name="name" type="String"/>
                        <param name="regularCoding" type="Coding"/>
                        <param name="cpTag" type="byte"/>
                        <param name="nullOK" type="boolean"/>
                    </params>
                </method>
                <method name="CPRefBand" type="constructor" line="988">
                    <params>
                        <param name="name" type="String"/>
                        <param name="regularCoding" type="Coding"/>
                        <param name="cpTag" type="byte"/>
                    </params>
                </method>
                <method name="CPRefBand" type="constructor" line="991">
                    <params>
                        <param name="name" type="String"/>
                        <param name="regularCoding" type="Coding"/>
                        <param name="undef" type="Object"/>
                    </params>
                </method>
                <method name="setIndex" type="void" line="995">
                    <params>
                        <param name="index" type="Index"/>
                    </params>
                </method>
                <method name="readDataFrom" type="void" line="999">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                </method>
                <javadoc line="1004">
                    Write a constant pool reference.                    
                </javadoc>
                <method name="putRef" type="void" line="1005">
                    <params>
                        <param name="e" type="Entry"/>
                    </params>
                </method>
                <method name="putRef" type="void" line="1009">
                    <params>
                        <param name="e" type="Entry"/>
                        <param name="index" type="Index"/>
                    </params>
                </method>
                <method name="putRef" type="void" line="1013">
                    <params>
                        <param name="e" type="Entry"/>
                        <param name="cptag" type="byte"/>
                    </params>
                </method>
                <method name="getRef" type="Entry" line="1017"/>
                <method name="getRef" type="Entry" line="1022">
                    <params>
                        <param name="index" type="Index"/>
                    </params>
                </method>
                <method name="getRef" type="Entry" line="1026">
                    <params>
                        <param name="cptag" type="byte"/>
                    </params>
                </method>
                <method name="encodeRefOrNull" type="int" line="1030">
                    <params>
                        <param name="e" type="Entry"/>
                        <param name="index" type="Index"/>
                    </params>
                    <comment line="1031">
                        NNC is the coding which assumes nulls are rare                        
                    </comment>
                    <comment line="1033">
                        negative values are rare                        
                    </comment>
                    <comment line="1037">
                        If nulls are expected, increment, to make -1 code turn to 0.                        
                    </comment>
                    <declaration name="nonNullCode" type="int" line="1031"/>
                    <scope line="1032"/>
                    <scope line="1034"/>
                </method>
                <method name="decodeRefOrNull" type="Entry" line="1040">
                    <params>
                        <param name="code" type="int"/>
                        <param name="index" type="Index"/>
                    </params>
                    <comment line="1041">
                        Inverse to encodeRefOrNull...                        
                    </comment>
                    <declaration name="nonNullCode" type="int" line="1042"/>
                    <scope line="1043"/>
                    <scope line="1045"/>
                </method>
            </class>
            <declaration name="allKQBands" type="List&lt;CPRefBand&gt;" line="1053"/>
            <declaration name="needPredefIndex" type="List&lt;Object[]&gt;" line="1054"/>
            <method name="encodeRef" type="int" line="1057">
                <params>
                    <param name="e" type="Entry"/>
                    <param name="ix" type="Index"/>
                </params>
                <declaration name="coding" type="int" line="1058"/>
            </method>
            <method name="decodeRef" type="Entry" line="1064">
                <params>
                    <param name="n" type="int"/>
                    <param name="ix" type="Index"/>
                </params>
                <declaration name="e" type="Entry" line="1067"/>
            </method>
            <declaration name="codingChooser" type="CodingChooser" line="1073"/>
            <method name="getCodingChooser" type="CodingChooser" line="1074">
                <comment line="1079">
                    Twist the random state based on my first file.                    
                </comment>
                <comment line="1080">
                    This sends each segment off in a different direction.                    
                </comment>
                <scope line="1075">
                    <scope line="1078">
                        <declaration name="classes" type="List&lt;Package.Class&gt;" line="1081"/>
                        <scope line="1082">
                            <declaration name="cls" type="Package.Class" line="1083"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="chooseCoding" type="CodingMethod" line="1093">
                <params>
                    <param name="values" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                    <param name="regular" type="Coding"/>
                    <param name="bandName" type="String"/>
                    <param name="sizes" type="int[]"/>
                </params>
                <scope line="1095"/>
                <declaration name="cc" type="CodingChooser" line="1098"/>
                <scope line="1099"/>
            </method>
            <declaration name="defaultMetaCoding" type="byte[]" line="1105"/>
            <declaration name="noMetaCoding" type="byte[]" line="1106"/>
            <method name="decodeEscapeValue" type="int" line="1126">
                <params>
                    <param name="X" type="int"/>
                    <param name="regularCoding" type="Coding"/>
                </params>
                <comment line="1127">
                    The first value in a band is always coded with the default coding D.                    
                </comment>
                <comment line="1128">
                    If this first value X is an escape value, it actually represents the                    
                </comment>
                <comment line="1129">
                    first (and perhaps only) byte of a meta-coding.                    
                </comment>
                <comment line="1130">
                    Result is in [0..255] if XB was successfully extracted, else -1.                    
                </comment>
                <comment line="1132">
                    degenerate regular coding (BYTE1)                    
                </comment>
                <comment line="1147">
                    negative value for failure                    
                </comment>
                <scope line="1133">
                    <scope line="1134">
                        <declaration name="XB" type="int" line="1135"/>
                    </scope>
                </scope>
                <scope line="1139">
                    <declaration name="L" type="int" line="1140"/>
                    <scope line="1141">
                        <declaration name="XB" type="int" line="1142"/>
                    </scope>
                </scope>
            </method>
            <method name="encodeEscapeValue" type="int" line="1150">
                <params>
                    <param name="XB" type="int"/>
                    <param name="regularCoding" type="Coding"/>
                </params>
                <declaration name="X" type="int" line="1153"/>
                <scope line="1154"/>
                <scope line="1157">
                    <declaration name="L" type="int" line="1158"/>
                </scope>
            </method>
            <scope line="1167">
                <declaration name="checkXB" type="boolean" line="1168"/>
                <scope line="1170">
                    <scope line="1171">
                        <declaration name="D" type="Coding" line="1172"/>
                        <scope line="1176"/>
                    </scope>
                </scope>
            </scope>
            <class name="MultiBand" line="1184">
                <extends class="Band"/>
                <comment line="366">
                    cache                    
                </comment>
                <comment line="394">
                    common operations                    
                </comment>
                <comment line="452">
                    / Phase change markers.                    
                </comment>
                <comment line="501">
                    DEBUG ONLY                    
                </comment>
                <comment line="514">
                    must be null in EXPECT phase                    
                </comment>
                <comment line="783">
                    input buffer                    
                </comment>
                <comment line="879">
                    alternative to readFrom:                    
                </comment>
                <comment line="930">
                    The usual coding for bands is 7bit/5byte/delta.                    
                </comment>
                <comment line="1330">
                    (should go public under the name CountingOutputStream?)                    
                </comment>
                <method name="MultiBand" type="constructor" line="1185">
                    <params>
                        <param name="name" type="String"/>
                        <param name="regularCoding" type="Coding"/>
                    </params>
                </method>
                <method name="init" type="Band" line="1189">
                    <comment line="1191">
                        This is all just to keep the asserts happy:                        
                    </comment>
                    <comment line="1194">
                        Fast forward:                        
                    </comment>
                    <scope line="1193"/>
                </method>
                <declaration name="bands" type="Band[]" line="1201"/>
                <declaration name="bandCount" type="int" line="1202"/>
                <method name="size" type="int" line="1204"/>
                <method name="get" type="Band" line="1207">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="toArray" type="Band[]" line="1211"/>
                <method name="add" type="void" line="1215">
                    <params>
                        <param name="b" type="Band"/>
                    </params>
                    <scope line="1217"/>
                </method>
                <method name="newByteBand" type="ByteBand" line="1223">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="b" type="ByteBand" line="1224"/>
                </method>
                <method name="newIntBand" type="IntBand" line="1228">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="b" type="IntBand" line="1229"/>
                </method>
                <method name="newIntBand" type="IntBand" line="1233">
                    <params>
                        <param name="name" type="String"/>
                        <param name="regularCoding" type="Coding"/>
                    </params>
                    <declaration name="b" type="IntBand" line="1234"/>
                </method>
                <method name="newMultiBand" type="MultiBand" line="1238">
                    <params>
                        <param name="name" type="String"/>
                        <param name="regularCoding" type="Coding"/>
                    </params>
                    <declaration name="b" type="MultiBand" line="1239"/>
                </method>
                <method name="newCPRefBand" type="CPRefBand" line="1243">
                    <params>
                        <param name="name" type="String"/>
                        <param name="cpTag" type="byte"/>
                    </params>
                    <declaration name="b" type="CPRefBand" line="1244"/>
                </method>
                <method name="newCPRefBand" type="CPRefBand" line="1249">
                    <params>
                        <param name="name" type="String"/>
                        <param name="regularCoding" type="Coding"/>
                        <param name="cpTag" type="byte"/>
                    </params>
                    <declaration name="b" type="CPRefBand" line="1250"/>
                </method>
                <method name="newCPRefBand" type="CPRefBand" line="1255">
                    <params>
                        <param name="name" type="String"/>
                        <param name="regularCoding" type="Coding"/>
                        <param name="cpTag" type="byte"/>
                        <param name="nullOK" type="boolean"/>
                    </params>
                    <declaration name="b" type="CPRefBand" line="1256"/>
                </method>
                <method name="bandCount" type="int" line="1261"/>
                <declaration name="cap" type="int" line="1263"/>
                <method name="capacity" type="int" line="1264"/>
                <method name="setCapacity" type="void" line="1265">
                    <params>
                        <param name="cap" type="int"/>
                    </params>
                </method>
                <method name="length" type="int" line="1267"/>
                <method name="valuesRemainingForDebug" type="int" line="1268"/>
                <method name="chooseBandCodings" type="void" line="1270">
                    <comment line="1271">
                        coding decision pass                        
                    </comment>
                    <scope line="1272">
                        <declaration name="b" type="Band" line="1273"/>
                    </scope>
                </method>
                <method name="computeOutputSize" type="long" line="1278">
                    <comment line="1279">
                        coding decision pass                        
                    </comment>
                    <comment line="1287">
                        do not cache                        
                    </comment>
                    <declaration name="sum" type="long" line="1280"/>
                    <scope line="1281">
                        <declaration name="b" type="Band" line="1282"/>
                        <declaration name="bsize" type="long" line="1283"/>
                    </scope>
                </method>
                <method name="writeDataTo" type="void" line="1291">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                    <declaration name="preCount" type="long" line="1292"/>
                    <scope line="1294">
                        <declaration name="b" type="Band" line="1295"/>
                        <scope line="1297">
                            <declaration name="postCount" type="long" line="1298"/>
                            <declaration name="len" type="long" line="1299"/>
                            <scope line="1301"/>
                        </scope>
                    </scope>
                </method>
                <method name="readDataFrom" type="void" line="1308">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                    <comment line="1309">
                        not called?                        
                    </comment>
                    <scope line="1310">
                        <declaration name="b" type="Band" line="1311"/>
                        <scope line="1313"/>
                    </scope>
                </method>
                <method name="toString" type="String" line="1319"/>
            </class>
            <class name="ByteCounter" line="1324">
                <extends class="FilterOutputStream"/>
                <comment line="366">
                    cache                    
                </comment>
                <comment line="394">
                    common operations                    
                </comment>
                <comment line="452">
                    / Phase change markers.                    
                </comment>
                <comment line="501">
                    DEBUG ONLY                    
                </comment>
                <comment line="514">
                    must be null in EXPECT phase                    
                </comment>
                <comment line="783">
                    input buffer                    
                </comment>
                <comment line="879">
                    alternative to readFrom:                    
                </comment>
                <comment line="930">
                    The usual coding for bands is 7bit/5byte/delta.                    
                </comment>
                <comment line="1330">
                    (should go public under the name CountingOutputStream?)                    
                </comment>
                <javadoc line="1324">
                    An output stream which counts the number of bytes written.                    
                </javadoc>
                <declaration name="count" type="long" line="1331"/>
                <method name="ByteCounter" type="constructor" line="1333">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                </method>
                <method name="getCount" type="long" line="1337"/>
                <method name="setCount" type="void" line="1338">
                    <params>
                        <param name="c" type="long"/>
                    </params>
                </method>
                <method name="write" type="void" line="1340">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="1344">
                    <params>
                        <param name="b" type="byte"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="toString" type="String" line="1348"/>
            </class>
            <declaration name="outputCounter" type="ByteCounter" line="1352"/>
            <method name="writeAllBandsTo" type="void" line="1354">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="1355">
                    Wrap a byte-counter around the output stream.                    
                </comment>
                <scope line="1359">
                    <declaration name="nbytes" type="long" line="1360"/>
                </scope>
            </method>
            <declaration name="archiveOptions" type="int" line="1368"/>
            <declaration name="archiveSize0" type="long" line="1371"/>
            <declaration name="archiveSize1" type="long" line="1372"/>
            <declaration name="archiveNextCount" type="int" line="1373"/>
            <declaration name="AH_LENGTH_0" type="int" line="1375"/>
            <declaration name="AH_ARCHIVE_SIZE_HI" type="int" line="1376"/>
            <declaration name="AH_ARCHIVE_SIZE_LO" type="int" line="1377"/>
            <declaration name="AH_LENGTH_S" type="int" line="1378"/>
            <declaration name="AH_LENGTH" type="int" line="1379"/>
            <declaration name="AH_FILE_HEADER_LEN" type="int" line="1381"/>
            <declaration name="AH_SPECIAL_FORMAT_LEN" type="int" line="1382"/>
            <declaration name="AH_CP_NUMBER_LEN" type="int" line="1383"/>
            <declaration name="AH_LENGTH_MIN" type="int" line="1384"/>
            <declaration name="AB_FLAGS_HI" type="int" line="1388"/>
            <declaration name="AB_FLAGS_LO" type="int" line="1389"/>
            <declaration name="AB_ATTR_COUNT" type="int" line="1390"/>
            <declaration name="AB_ATTR_INDEXES" type="int" line="1391"/>
            <declaration name="AB_ATTR_CALLS" type="int" line="1392"/>
            <method name="getAttrBand" type="IntBand" line="1394">
                <params>
                    <param name="xxx_attr_bands" type="MultiBand"/>
                    <param name="which" type="int"/>
                </params>
                <declaration name="b" type="IntBand" line="1395"/>
            </method>
            <declaration name="NULL_IS_OK" type="boolean" line="1413"/>
            <declaration name="all_bands" type="MultiBand" line="1415"/>
            <declaration name="archive_magic" type="ByteBand" line="1418"/>
            <declaration name="archive_header_0" type="IntBand" line="1419"/>
            <declaration name="archive_header_S" type="IntBand" line="1420"/>
            <declaration name="archive_header_1" type="IntBand" line="1421"/>
            <declaration name="band_headers" type="ByteBand" line="1422"/>
            <declaration name="cp_bands" type="MultiBand" line="1425"/>
            <declaration name="cp_Utf8_prefix" type="IntBand" line="1426"/>
            <declaration name="cp_Utf8_suffix" type="IntBand" line="1427"/>
            <declaration name="cp_Utf8_chars" type="IntBand" line="1428"/>
            <declaration name="cp_Utf8_big_suffix" type="IntBand" line="1429"/>
            <declaration name="cp_Utf8_big_chars" type="MultiBand" line="1430"/>
            <declaration name="cp_Int" type="IntBand" line="1431"/>
            <declaration name="cp_Float" type="IntBand" line="1432"/>
            <declaration name="cp_Long_hi" type="IntBand" line="1433"/>
            <declaration name="cp_Long_lo" type="IntBand" line="1434"/>
            <declaration name="cp_Double_hi" type="IntBand" line="1435"/>
            <declaration name="cp_Double_lo" type="IntBand" line="1436"/>
            <declaration name="cp_String" type="CPRefBand" line="1437"/>
            <declaration name="cp_Class" type="CPRefBand" line="1438"/>
            <declaration name="cp_Signature_form" type="CPRefBand" line="1439"/>
            <declaration name="cp_Signature_classes" type="CPRefBand" line="1440"/>
            <declaration name="cp_Descr_name" type="CPRefBand" line="1441"/>
            <declaration name="cp_Descr_type" type="CPRefBand" line="1442"/>
            <declaration name="cp_Field_class" type="CPRefBand" line="1443"/>
            <declaration name="cp_Field_desc" type="CPRefBand" line="1444"/>
            <declaration name="cp_Method_class" type="CPRefBand" line="1445"/>
            <declaration name="cp_Method_desc" type="CPRefBand" line="1446"/>
            <declaration name="cp_Imethod_class" type="CPRefBand" line="1447"/>
            <declaration name="cp_Imethod_desc" type="CPRefBand" line="1448"/>
            <declaration name="attr_definition_bands" type="MultiBand" line="1451"/>
            <declaration name="attr_definition_headers" type="ByteBand" line="1452"/>
            <declaration name="attr_definition_name" type="CPRefBand" line="1453"/>
            <declaration name="attr_definition_layout" type="CPRefBand" line="1454"/>
            <declaration name="ic_bands" type="MultiBand" line="1457"/>
            <declaration name="ic_this_class" type="CPRefBand" line="1458"/>
            <declaration name="ic_flags" type="IntBand" line="1459"/>
            <declaration name="ic_outer_class" type="CPRefBand" line="1461"/>
            <declaration name="ic_name" type="CPRefBand" line="1462"/>
            <declaration name="class_bands" type="MultiBand" line="1465"/>
            <declaration name="class_this" type="CPRefBand" line="1466"/>
            <declaration name="class_super" type="CPRefBand" line="1467"/>
            <declaration name="class_interface_count" type="IntBand" line="1468"/>
            <declaration name="class_interface" type="CPRefBand" line="1469"/>
            <declaration name="class_field_count" type="IntBand" line="1472"/>
            <declaration name="class_method_count" type="IntBand" line="1473"/>
            <declaration name="field_descr" type="CPRefBand" line="1475"/>
            <declaration name="field_attr_bands" type="MultiBand" line="1476"/>
            <declaration name="field_flags_hi" type="IntBand" line="1477"/>
            <declaration name="field_flags_lo" type="IntBand" line="1478"/>
            <declaration name="field_attr_count" type="IntBand" line="1479"/>
            <declaration name="field_attr_indexes" type="IntBand" line="1480"/>
            <declaration name="field_attr_calls" type="IntBand" line="1481"/>
            <declaration name="field_ConstantValue_KQ" type="CPRefBand" line="1484"/>
            <declaration name="field_Signature_RS" type="CPRefBand" line="1485"/>
            <declaration name="field_metadata_bands" type="MultiBand" line="1486"/>
            <declaration name="method_descr" type="CPRefBand" line="1488"/>
            <declaration name="method_attr_bands" type="MultiBand" line="1489"/>
            <declaration name="method_flags_hi" type="IntBand" line="1490"/>
            <declaration name="method_flags_lo" type="IntBand" line="1491"/>
            <declaration name="method_attr_count" type="IntBand" line="1492"/>
            <declaration name="method_attr_indexes" type="IntBand" line="1493"/>
            <declaration name="method_attr_calls" type="IntBand" line="1494"/>
            <declaration name="method_Exceptions_N" type="IntBand" line="1496"/>
            <declaration name="method_Exceptions_RC" type="CPRefBand" line="1497"/>
            <declaration name="method_Signature_RS" type="CPRefBand" line="1498"/>
            <declaration name="method_metadata_bands" type="MultiBand" line="1499"/>
            <declaration name="class_attr_bands" type="MultiBand" line="1501"/>
            <declaration name="class_flags_hi" type="IntBand" line="1502"/>
            <declaration name="class_flags_lo" type="IntBand" line="1503"/>
            <declaration name="class_attr_count" type="IntBand" line="1504"/>
            <declaration name="class_attr_indexes" type="IntBand" line="1505"/>
            <declaration name="class_attr_calls" type="IntBand" line="1506"/>
            <declaration name="class_SourceFile_RUN" type="CPRefBand" line="1508"/>
            <declaration name="class_EnclosingMethod_RC" type="CPRefBand" line="1509"/>
            <declaration name="class_EnclosingMethod_RDN" type="CPRefBand" line="1510"/>
            <declaration name="class_Signature_RS" type="CPRefBand" line="1511"/>
            <declaration name="class_metadata_bands" type="MultiBand" line="1512"/>
            <declaration name="class_InnerClasses_N" type="IntBand" line="1513"/>
            <declaration name="class_InnerClasses_RC" type="CPRefBand" line="1514"/>
            <declaration name="class_InnerClasses_F" type="IntBand" line="1515"/>
            <declaration name="class_InnerClasses_outer_RCN" type="CPRefBand" line="1516"/>
            <declaration name="class_InnerClasses_name_RUN" type="CPRefBand" line="1517"/>
            <declaration name="class_ClassFile_version_minor_H" type="IntBand" line="1518"/>
            <declaration name="class_ClassFile_version_major_H" type="IntBand" line="1519"/>
            <declaration name="code_bands" type="MultiBand" line="1521"/>
            <declaration name="code_headers" type="ByteBand" line="1522"/>
            <declaration name="code_max_stack" type="IntBand" line="1523"/>
            <declaration name="code_max_na_locals" type="IntBand" line="1524"/>
            <declaration name="code_handler_count" type="IntBand" line="1525"/>
            <declaration name="code_handler_start_P" type="IntBand" line="1526"/>
            <declaration name="code_handler_end_PO" type="IntBand" line="1527"/>
            <declaration name="code_handler_catch_PO" type="IntBand" line="1528"/>
            <declaration name="code_handler_class_RCN" type="CPRefBand" line="1529"/>
            <declaration name="code_attr_bands" type="MultiBand" line="1531"/>
            <declaration name="code_flags_hi" type="IntBand" line="1532"/>
            <declaration name="code_flags_lo" type="IntBand" line="1533"/>
            <declaration name="code_attr_count" type="IntBand" line="1534"/>
            <declaration name="code_attr_indexes" type="IntBand" line="1535"/>
            <declaration name="code_attr_calls" type="IntBand" line="1536"/>
            <declaration name="stackmap_bands" type="MultiBand" line="1538"/>
            <declaration name="code_StackMapTable_N" type="IntBand" line="1539"/>
            <declaration name="code_StackMapTable_frame_T" type="IntBand" line="1540"/>
            <declaration name="code_StackMapTable_local_N" type="IntBand" line="1541"/>
            <declaration name="code_StackMapTable_stack_N" type="IntBand" line="1542"/>
            <declaration name="code_StackMapTable_offset" type="IntBand" line="1543"/>
            <declaration name="code_StackMapTable_T" type="IntBand" line="1544"/>
            <declaration name="code_StackMapTable_RC" type="CPRefBand" line="1545"/>
            <declaration name="code_StackMapTable_P" type="IntBand" line="1546"/>
            <declaration name="code_LineNumberTable_N" type="IntBand" line="1549"/>
            <declaration name="code_LineNumberTable_bci_P" type="IntBand" line="1550"/>
            <declaration name="code_LineNumberTable_line" type="IntBand" line="1551"/>
            <declaration name="code_LocalVariableTable_N" type="IntBand" line="1554"/>
            <declaration name="code_LocalVariableTable_bci_P" type="IntBand" line="1555"/>
            <declaration name="code_LocalVariableTable_span_O" type="IntBand" line="1556"/>
            <declaration name="code_LocalVariableTable_name_RU" type="CPRefBand" line="1557"/>
            <declaration name="code_LocalVariableTable_type_RS" type="CPRefBand" line="1558"/>
            <declaration name="code_LocalVariableTable_slot" type="IntBand" line="1559"/>
            <declaration name="code_LocalVariableTypeTable_N" type="IntBand" line="1560"/>
            <declaration name="code_LocalVariableTypeTable_bci_P" type="IntBand" line="1561"/>
            <declaration name="code_LocalVariableTypeTable_span_O" type="IntBand" line="1562"/>
            <declaration name="code_LocalVariableTypeTable_name_RU" type="CPRefBand" line="1563"/>
            <declaration name="code_LocalVariableTypeTable_type_RS" type="CPRefBand" line="1564"/>
            <declaration name="code_LocalVariableTypeTable_slot" type="IntBand" line="1565"/>
            <declaration name="bc_bands" type="MultiBand" line="1568"/>
            <declaration name="bc_codes" type="ByteBand" line="1569"/>
            <declaration name="bc_case_count" type="IntBand" line="1572"/>
            <declaration name="bc_case_value" type="IntBand" line="1573"/>
            <declaration name="bc_byte" type="ByteBand" line="1574"/>
            <declaration name="bc_short" type="IntBand" line="1575"/>
            <declaration name="bc_local" type="IntBand" line="1576"/>
            <declaration name="bc_label" type="IntBand" line="1577"/>
            <declaration name="bc_intref" type="CPRefBand" line="1583"/>
            <declaration name="bc_floatref" type="CPRefBand" line="1584"/>
            <declaration name="bc_longref" type="CPRefBand" line="1585"/>
            <declaration name="bc_doubleref" type="CPRefBand" line="1586"/>
            <declaration name="bc_stringref" type="CPRefBand" line="1587"/>
            <declaration name="bc_classref" type="CPRefBand" line="1590"/>
            <declaration name="bc_fieldref" type="CPRefBand" line="1591"/>
            <declaration name="bc_methodref" type="CPRefBand" line="1592"/>
            <declaration name="bc_imethodref" type="CPRefBand" line="1593"/>
            <declaration name="bc_thisfield" type="CPRefBand" line="1596"/>
            <declaration name="bc_superfield" type="CPRefBand" line="1597"/>
            <declaration name="bc_thismethod" type="CPRefBand" line="1598"/>
            <declaration name="bc_supermethod" type="CPRefBand" line="1599"/>
            <declaration name="bc_initref" type="IntBand" line="1601"/>
            <declaration name="bc_escref" type="CPRefBand" line="1603"/>
            <declaration name="bc_escrefsize" type="IntBand" line="1604"/>
            <declaration name="bc_escsize" type="IntBand" line="1605"/>
            <declaration name="bc_escbyte" type="ByteBand" line="1606"/>
            <declaration name="file_bands" type="MultiBand" line="1609"/>
            <declaration name="file_name" type="CPRefBand" line="1610"/>
            <declaration name="file_size_hi" type="IntBand" line="1611"/>
            <declaration name="file_size_lo" type="IntBand" line="1612"/>
            <declaration name="file_modtime" type="IntBand" line="1613"/>
            <declaration name="file_options" type="IntBand" line="1614"/>
            <declaration name="file_bits" type="ByteBand" line="1615"/>
            <javadoc line="1619">
                Given CP indexes, distribute tag-specific indexes to bands.                
            </javadoc>
            <method name="setBandIndexes" type="void" line="1620">
                <comment line="1621">
                    Handle prior calls to setBandIndex:                    
                </comment>
                <comment line="1627">
                    no more predefs                    
                </comment>
                <scope line="1622">
                    <declaration name="b" type="CPRefBand" line="1623"/>
                    <declaration name="which" type="Byte" line="1624"/>
                </scope>
                <scope line="1629"/>
            </method>
            <method name="setBandIndex" type="void" line="1634">
                <params>
                    <param name="b" type="CPRefBand"/>
                    <param name="which" type="byte"/>
                </params>
                <comment line="1637">
                    I.e., attribute layouts KQ (no null) or KQN (null ok).                    
                </comment>
                <comment line="1642">
                    Not in predefinition mode; getCPIndex now works.                    
                </comment>
                <declaration name="need" type="Object[]" line="1635"/>
                <scope line="1636"/>
                <scope line="1639"/>
                <scope line="1641"/>
            </method>
            <method name="setConstantValueIndex" type="void" line="1647">
                <params>
                    <param name="f" type="Field"/>
                </params>
                <comment line="1656">
                    Typically, allKQBands is the singleton of field_ConstantValue_KQ.                    
                </comment>
                <declaration name="ix" type="Index" line="1648"/>
                <scope line="1649">
                    <declaration name="tag" type="byte" line="1650"/>
                </scope>
                <scope line="1657"/>
            </method>
            <declaration name="metadataBands" type="MultiBand[]" line="1663"/>
            <scope line="1664"/>
            <declaration name="ADH_CONTEXT_MASK" type="int" line="1671"/>
            <declaration name="ADH_BIT_SHIFT" type="int" line="1672"/>
            <declaration name="ADH_BIT_IS_LSB" type="int" line="1673"/>
            <declaration name="ATTR_INDEX_OVERFLOW" type="int" line="1674"/>
            <declaration name="attrIndexLimit" type="int[]" line="1676"/>
            <declaration name="attrFlagMask" type="long[]" line="1680"/>
            <declaration name="attrDefSeen" type="long[]" line="1682"/>
            <declaration name="attrOverflowMask" type="int[]" line="1685"/>
            <declaration name="attrClassFileVersionMask" type="int" line="1686"/>
            <declaration name="attrBandTable" type="Map&lt;Attribute.Layout,Band[]&gt;" line="1689"/>
            <declaration name="attrCodeEmpty" type="Attribute.Layout" line="1692"/>
            <declaration name="attrInnerClassesEmpty" type="Attribute.Layout" line="1693"/>
            <declaration name="attrClassFileVersion" type="Attribute.Layout" line="1694"/>
            <declaration name="attrConstantValue" type="Attribute.Layout" line="1695"/>
            <declaration name="attrIndexTable" type="Map&lt;Attribute.Layout,Integer&gt;" line="1698"/>
            <declaration name="attrDefs" type="List&lt;List&lt;Attribute.Layout&gt;&gt;" line="1701"/>
            <scope line="1703">
                <scope line="1704"/>
                <scope line="1775">
                    <declaration name="xxx_metadata_bands" type="MultiBand" line="1776"/>
                </scope>
                <declaration name="stackMapDef" type="Attribute.Layout" line="1810"/>
                <scope line="1847"/>
                <scope line="1852"/>
            </scope>
            <method name="adjustToMajver" type="void" line="1859">
                <comment line="1862">
                    Revoke definition of pre-1.6 attribute type.                    
                </comment>
                <scope line="1860"/>
            </method>
            <method name="initAttrIndexLimit" type="void" line="1867">
                <comment line="1869">
                    decide on it now!                    
                </comment>
                <comment line="1872">
                    all predef indexes are &lt;32                    
                </comment>
                <scope line="1868">
                    <declaration name="defList" type="List&lt;Attribute.Layout&gt;" line="1871"/>
                    <declaration name="addMore" type="int" line="1873"/>
                </scope>
            </method>
            <method name="haveFlagsHi" type="boolean" line="1878">
                <params>
                    <param name="ctype" type="int"/>
                </params>
                <declaration name="mask" type="int" line="1879"/>
            </method>
            <method name="getPredefinedAttrs" type="List" line="1895">
                <params>
                    <param name="ctype" type="int"/>
                </params>
                <comment line="1898">
                    Remove nulls and non-predefs.                    
                </comment>
                <comment line="1902">
                    unused flag bit                    
                </comment>
                <declaration name="res" type="List&lt;Attribute.Layout&gt;" line="1897"/>
                <scope line="1899">
                    <declaration name="def" type="Attribute.Layout" line="1901"/>
                </scope>
            </method>
            <method name="isPredefinedAttr" type="boolean" line="1909">
                <params>
                    <param name="ctype" type="int"/>
                    <param name="ai" type="int"/>
                </params>
                <comment line="1911">
                    Overflow attrs are never predefined.                    
                </comment>
                <comment line="1913">
                    If the bit is set, it was explicitly def&apos;d.                    
                </comment>
            </method>
            <method name="adjustSpecialAttrMasks" type="void" line="1918">
                <comment line="1919">
                    Clear special masks if new definitions have been seen for them.                    
                </comment>
                <comment line="1921">
                    It is possible to clear the overflow mask (bit 16).                    
                </comment>
                <scope line="1922"/>
            </method>
            <method name="makeClassFileVersionAttr" type="Attribute" line="1927">
                <params>
                    <param name="minver" type="int"/>
                    <param name="majver" type="int"/>
                </params>
                <declaration name="bytes" type="byte[]" line="1928"/>
            </method>
            <method name="parseClassFileVersionAttr" type="short[]" line="1935">
                <params>
                    <param name="attr" type="Attribute"/>
                </params>
                <declaration name="bytes" type="byte[]" line="1938"/>
                <declaration name="minver" type="int" line="1939"/>
                <declaration name="majver" type="int" line="1940"/>
            </method>
            <method name="assertBandOKForElems" type="boolean" line="1944">
                <params>
                    <param name="ab" type="Band[]"/>
                    <param name="elems" type="Attribute.Layout.Element[]"/>
                </params>
                <scope line="1945"/>
            </method>
            <method name="assertBandOKForElem" type="boolean" line="1950">
                <params>
                    <param name="ab" type="Band[]"/>
                    <param name="e" type="Attribute.Layout.Element"/>
                </params>
                <comment line="1992">
                    no direct band                    
                </comment>
                <comment line="1995">
                    no direct band                    
                </comment>
                <comment line="1999">
                    no direct band                    
                </comment>
                <declaration name="b" type="Band" line="1951"/>
                <declaration name="rc" type="Coding" line="1954"/>
                <declaration name="wantIntBand" type="boolean" line="1955"/>
                <scope line="1958"/>
                <scope line="1960"/>
                <scope line="1965"/>
                <scope line="1967"/>
                <scope line="1982"/>
                <scope line="1984"/>
            </method>
            <method name="predefineAttribute" type="Attribute.Layout" line="2016">
                <params>
                    <param name="index" type="int"/>
                    <param name="ctype" type="int"/>
                    <param name="ab" type="Band[]"/>
                    <param name="name" type="String"/>
                    <param name="layout" type="String"/>
                </params>
                <comment line="2017">
                    Use Attribute.find to get uniquification of layouts.                    
                </comment>
                <comment line="2019">
                    def.predef = true;                    
                </comment>
                <comment line="2026">
                    no redef                    
                </comment>
                <comment line="2030">
                    Let&apos;s make sure the band types match:                    
                </comment>
                <declaration name="def" type="Attribute.Layout" line="2018"/>
                <scope line="2020"/>
                <scope line="2023"/>
            </method>
            <method name="predefineAttribute" type="Attribute.Layout" line="2039">
                <params>
                    <param name="index" type="int"/>
                    <param name="bandPrefix" type="String"/>
                    <param name="addHere" type="MultiBand"/>
                    <param name="attr" type="Attribute"/>
                </params>
                <comment line="2040">
                    Attribute.Layout def = Attribute.find(ctype, name, layout).layout();                    
                </comment>
                <declaration name="def" type="Attribute.Layout" line="2041"/>
                <declaration name="ctype" type="int" line="2042"/>
            </method>
            <method name="undefineAttribute" type="void" line="2050">
                <params>
                    <param name="index" type="int"/>
                    <param name="ctype" type="int"/>
                </params>
                <comment line="2060">
                    Clear the def bit.  (For predefs, it&apos;s already clear.)                    
                </comment>
                <scope line="2051"/>
                <declaration name="defList" type="List&lt;Attribute.Layout&gt;" line="2055"/>
                <declaration name="def" type="Attribute.Layout" line="2056"/>
                <declaration name="ab" type="Band[]" line="2064"/>
                <scope line="2065"/>
            </method>
            <declaration name="attrBands" type="MultiBand[]" line="2071"/>
            <scope line="2072"/>
            <method name="makeNewAttributeBands" type="void" line="2080">
                <comment line="2081">
                    Retract special flag bit bindings, if they were taken over.                    
                </comment>
                <comment line="2088">
                    Note: attrDefSeen is always a subset of attrFlagMask.                    
                </comment>
                <comment line="2092">
                    unused flag bit                    
                </comment>
                <comment line="2093">
                    empty attr                    
                </comment>
                <comment line="2095">
                    There are already predefined bands here.                    
                </comment>
                <comment line="2100">
                    debug only                    
                </comment>
                <comment line="2108">
                    We won&apos;t be using these predefined bands.                    
                </comment>
                <comment line="2115">
                    System.out.println(prevForAssertMap);                    
                </comment>
                <scope line="2084">
                    <declaration name="cname" type="String" line="2085"/>
                    <declaration name="xxx_attr_bands" type="MultiBand" line="2086"/>
                    <declaration name="defSeen" type="long" line="2087"/>
                    <scope line="2090">
                        <declaration name="def" type="Attribute.Layout" line="2091"/>
                        <scope line="2094"/>
                        <declaration name="base" type="int" line="2099"/>
                        <declaration name="pfx" type="String" line="2100"/>
                        <declaration name="newAB" type="Band[]" line="2103"/>
                        <declaration name="prevAB" type="Band[]" line="2106"/>
                        <scope line="2107">
                            <scope line="2109"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="makeNewAttributeBands" type="Band[]" line="2119">
                <params>
                    <param name="pfx" type="String"/>
                    <param name="def" type="Attribute.Layout"/>
                    <param name="addHere" type="MultiBand"/>
                </params>
                <declaration name="base" type="int" line="2120"/>
                <declaration name="nb" type="int" line="2122"/>
                <declaration name="newAB" type="Band[]" line="2123"/>
                <scope line="2124"/>
            </method>
            <method name="makeNewAttributeBands" type="void" line="2132">
                <params>
                    <param name="pfx" type="String"/>
                    <param name="elems" type="Attribute.Layout.Element[]"/>
                    <param name="ab" type="MultiBand"/>
                </params>
                <comment line="2152">
                    PH:  transmit R(bci), store bci                    
                </comment>
                <comment line="2155">
                    POH:  transmit D(R(bci)), store bci                    
                </comment>
                <comment line="2158">
                    Note:  No case for BYTE1 here.                    
                </comment>
                <comment line="2161">
                    OH:  transmit D(R(bci)), store D(bci)                    
                </comment>
                <comment line="2163">
                    Note:  No case for BYTE1 here.                    
                </comment>
                <comment line="2180">
                    If it&apos;s not a duplicate body, make the bands.                    
                </comment>
                <comment line="2183">
                    no new band to make                    
                </comment>
                <comment line="2188">
                    Note:  No case for BYTE1 here.                    
                </comment>
                <comment line="2191">
                    no new band to make                    
                </comment>
                <comment line="2194">
                    no new band to make                    
                </comment>
                <scope line="2133">
                    <declaration name="e" type="Attribute.Layout.Element" line="2134"/>
                    <declaration name="name" type="String" line="2135"/>
                    <scope line="2136">
                        <declaration name="tem" type="int" line="2137"/>
                    </scope>
                    <declaration name="nb" type="Band" line="2145"/>
                    <scope line="2151"/>
                    <scope line="2154"/>
                    <scope line="2179"/>
                    <declaration name="refKind" type="byte" line="2185"/>
                    <declaration name="nullOK" type="boolean" line="2186"/>
                    <scope line="2197"/>
                </scope>
            </method>
            <method name="newElemBand" type="Band" line="2203">
                <params>
                    <param name="e" type="Attribute.Layout.Element"/>
                    <param name="name" type="String"/>
                    <param name="ab" type="MultiBand"/>
                </params>
                <comment line="2207">
                    Not ByteBand, please.                    
                </comment>
                <scope line="2204"/>
                <scope line="2206"/>
                <scope line="2208"/>
            </method>
            <method name="setAttributeLayoutIndex" type="int" line="2213">
                <params>
                    <param name="def" type="Attribute.Layout"/>
                    <param name="index" type="int"/>
                </params>
                <comment line="2218">
                    Overflow attribute.                    
                </comment>
                <comment line="2227">
                    Detect redefinitions:                    
                </comment>
                <comment line="2233">
                    Adding a new fixed attribute.                    
                </comment>
                <comment line="2241">
                    Remove index binding of any previous fixed attr.                    
                </comment>
                <declaration name="ctype" type="int" line="2214"/>
                <declaration name="defList" type="List&lt;Attribute.Layout&gt;" line="2216"/>
                <scope line="2217"/>
                <scope line="2228"/>
            </method>
            <declaration name="shortCodeLimits" type="int[][]" line="2249"/>
            <declaration name="shortCodeHeader_h_limit" type="int" line="2254"/>
            <method name="shortCodeHeader" type="int" line="2257">
                <params>
                    <param name="code" type="Code"/>
                </params>
                <comment line="2263">
                    enough locals for signature!                    
                </comment>
                <comment line="2265">
                    do not count locals required by the signature                    
                </comment>
                <declaration name="s" type="int" line="2258"/>
                <declaration name="l0" type="int" line="2259"/>
                <declaration name="h" type="int" line="2260"/>
                <declaration name="siglen" type="int" line="2262"/>
                <declaration name="l1" type="int" line="2265"/>
                <declaration name="lims" type="int" line="2266"/>
                <declaration name="liml" type="int" line="2267"/>
                <declaration name="sc" type="int" line="2269"/>
            </method>
            <declaration name="LONG_CODE_HEADER" type="int" line="2278"/>
            <method name="shortCodeHeader_handler_count" type="int" line="2279">
                <params>
                    <param name="sc" type="int"/>
                </params>
                <scope line="2281"/>
            </method>
            <method name="shortCodeHeader_max_stack" type="int" line="2286">
                <params>
                    <param name="sc" type="int"/>
                </params>
                <declaration name="h" type="int" line="2287"/>
                <declaration name="lims" type="int" line="2288"/>
            </method>
            <method name="shortCodeHeader_max_na_locals" type="int" line="2291">
                <params>
                    <param name="sc" type="int"/>
                </params>
                <declaration name="h" type="int" line="2292"/>
                <declaration name="lims" type="int" line="2293"/>
            </method>
            <method name="shortCodeHeader_h_base" type="int" line="2297">
                <params>
                    <param name="h" type="int"/>
                </params>
                <declaration name="sc" type="int" line="2299"/>
                <scope line="2300">
                    <declaration name="lims" type="int" line="2301"/>
                    <declaration name="liml" type="int" line="2302"/>
                </scope>
            </method>
            <method name="putLabel" type="void" line="2309">
                <params>
                    <param name="bc_label" type="IntBand"/>
                    <param name="c" type="Code"/>
                    <param name="pc" type="int"/>
                    <param name="targetPC" type="int"/>
                </params>
            </method>
            <method name="getLabel" type="int" line="2312">
                <params>
                    <param name="bc_label" type="IntBand"/>
                    <param name="c" type="Code"/>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="getCPRefOpBand" type="CPRefBand" line="2316">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="selfOpRefBand" type="CPRefBand" line="2347">
                <params>
                    <param name="self_bc" type="int"/>
                </params>
                <declaration name="idx" type="int" line="2349"/>
                <declaration name="isSuper" type="boolean" line="2350"/>
                <declaration name="isAload" type="boolean" line="2352"/>
                <declaration name="origBC" type="int" line="2354"/>
                <declaration name="isField" type="boolean" line="2355"/>
            </method>
            <declaration name="nextSeqForDebug" type="int" line="2364"/>
            <declaration name="dumpDir" type="File" line="2365"/>
            <method name="getDumpStream" type="OutputStream" line="2366">
                <params>
                    <param name="b" type="Band"/>
                    <param name="ext" type="String"/>
                </params>
            </method>
            <method name="getDumpStream" type="OutputStream" line="2369">
                <params>
                    <param name="ix" type="Index"/>
                    <param name="ext" type="String"/>
                </params>
                <declaration name="seq" type="int" line="2371"/>
            </method>
            <method name="getDumpStream" type="OutputStream" line="2374">
                <params>
                    <param name="name" type="String"/>
                    <param name="seq" type="int"/>
                    <param name="ext" type="String"/>
                    <param name="b" type="Object"/>
                </params>
                <scope line="2375"/>
                <declaration name="dumpFile" type="File" line="2386"/>
            </method>
            <method name="assertCanChangeLength" type="boolean" line="2392">
                <params>
                    <param name="b" type="Band"/>
                </params>
            </method>
            <method name="assertPhase" type="boolean" line="2402">
                <params>
                    <param name="b" type="Band"/>
                    <param name="phaseExpected" type="int"/>
                </params>
                <scope line="2403"/>
            </method>
            <method name="verbose" type="int" line="2412"/>
            <method name="assertPhaseChangeOK" type="boolean" line="2418">
                <params>
                    <param name="b" type="Band"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <comment line="2420">
                    / Writing phases:                    
                </comment>
                <comment line="2422">
                    Ready to collect data from the input classes.                    
                </comment>
                <comment line="2433">
                    Data is all collected.  Ready to write bytes to disk.                    
                </comment>
                <comment line="2436">
                    Done writing to disk.  Ready to reset, in principle.                    
                </comment>
                <comment line="2439">
                    / Reading phases:                    
                </comment>
                <comment line="2445">
                    Ready to read values from disk.                    
                </comment>
                <comment line="2450">
                    Ready to disburse values.                    
                </comment>
                <comment line="2454">
                    Done disbursing values.  Ready to reset, in principle.                    
                </comment>
            </method>
            <method name="assertDoneDisbursing" type="boolean" line="2465">
                <params>
                    <param name="b" type="Band"/>
                </params>
                <comment line="2468">
                    fail now                    
                </comment>
                <comment line="2473">
                    fail now                    
                </comment>
                <comment line="2481">
                    fail now                    
                </comment>
                <scope line="2466"/>
                <declaration name="left" type="int" line="2470"/>
                <scope line="2471"/>
                <scope line="2475">
                    <declaration name="mb" type="MultiBand" line="2476"/>
                    <scope line="2477">
                        <declaration name="sub" type="Band" line="2478"/>
                        <scope line="2479"/>
                    </scope>
                </scope>
            </method>
            <method name="printCDecl" type="void" line="2488">
                <params>
                    <param name="b" type="Band"/>
                </params>
                <scope line="2489">
                    <declaration name="mb" type="MultiBand" line="2490"/>
                    <scope line="2491"/>
                </scope>
                <declaration name="ixS" type="String" line="2496"/>
                <scope line="2497">
                    <declaration name="ix" type="Index" line="2498"/>
                </scope>
                <declaration name="knownc" type="Coding[]" line="2501"/>
                <declaration name="knowns" type="String[]" line="2503"/>
                <declaration name="rc" type="Coding" line="2505"/>
                <declaration name="rci" type="int" line="2506"/>
                <declaration name="cstr" type="String" line="2507"/>
            </method>
            <declaration name="prevForAssertMap" type="Map&lt;Band,Band&gt;" line="2516"/>
            <method name="notePrevForAssert" type="boolean" line="2519">
                <params>
                    <param name="b" type="Band"/>
                    <param name="p" type="Band"/>
                </params>
            </method>
            <method name="assertReadyToReadFrom" type="boolean" line="2527">
                <params>
                    <param name="b" type="Band"/>
                    <param name="in" type="InputStream"/>
                </params>
                <comment line="2529">
                    Any previous band must be done reading before this one starts.                    
                </comment>
                <comment line="2535">
                    die unless verbose is true                    
                </comment>
                <comment line="2539">
                    Verify synchronization between reader &amp; writer:                    
                </comment>
                <declaration name="p" type="Band" line="2528"/>
                <scope line="2530"/>
                <declaration name="name" type="String" line="2537"/>
                <scope line="2538">
                    <declaration name="buf" type="StringBuilder" line="2540"/>
                    <declaration name="ch" type="int" line="2541"/>
                    <declaration name="inName" type="String" line="2544"/>
                    <scope line="2545">
                        <declaration name="sb" type="StringBuilder" line="2546"/>
                        <scope line="2549"/>
                        <scope line="2552"/>
                    </scope>
                </scope>
            </method>
            <method name="assertValidCPRefs" type="boolean" line="2563">
                <params>
                    <param name="b" type="CPRefBand"/>
                </params>
                <declaration name="limit" type="int" line="2565"/>
                <scope line="2566">
                    <declaration name="v" type="int" line="2567"/>
                    <scope line="2568"/>
                </scope>
            </method>
            <method name="assertReadyToWriteTo" type="boolean" line="2578">
                <params>
                    <param name="b" type="Band"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="2580">
                    Any previous band must be done writing before this one starts.                    
                </comment>
                <comment line="2586">
                    die unless verbose is true                    
                </comment>
                <comment line="2590">
                    Verify synchronization between reader &amp; writer:                    
                </comment>
                <declaration name="p" type="Band" line="2579"/>
                <scope line="2581"/>
                <declaration name="name" type="String" line="2588"/>
                <scope line="2589">
                    <scope line="2591"/>
                </scope>
            </method>
            <method name="testBit" type="boolean" line="2599">
                <params>
                    <param name="flags" type="int"/>
                    <param name="bitMask" type="int"/>
                </params>
            </method>
            <method name="setBit" type="int" line="2602">
                <params>
                    <param name="flags" type="int"/>
                    <param name="bitMask" type="int"/>
                    <param name="z" type="boolean"/>
                </params>
            </method>
            <method name="testBit" type="boolean" line="2605">
                <params>
                    <param name="flags" type="long"/>
                    <param name="bitMask" type="long"/>
                </params>
            </method>
            <method name="setBit" type="long" line="2608">
                <params>
                    <param name="flags" type="long"/>
                    <param name="bitMask" type="long"/>
                    <param name="z" type="boolean"/>
                </params>
            </method>
            <method name="printArrayTo" type="void" line="2613">
                <params>
                    <param name="ps" type="PrintStream"/>
                    <param name="values" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="len" type="int" line="2614"/>
                <scope line="2615"/>
            </method>
            <method name="printArrayTo" type="void" line="2625">
                <params>
                    <param name="ps" type="PrintStream"/>
                    <param name="cpMap" type="Entry[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="buf" type="StringBuffer" line="2626"/>
                <declaration name="len" type="int" line="2627"/>
                <scope line="2628">
                    <declaration name="s" type="String" line="2629"/>
                    <scope line="2631">
                        <declaration name="ch" type="char" line="2632"/>
                        <scope line="2633"/>
                        <scope line="2635"/>
                        <scope line="2637"/>
                        <scope line="2639"/>
                        <scope line="2641"/>
                    </scope>
                </scope>
            </method>
            <method name="realloc" type="Object[]" line="2651">
                <params>
                    <param name="a" type="Object[]"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="elt" type="java.lang.Class" line="2652"/>
                <declaration name="na" type="Object[]" line="2653"/>
            </method>
            <method name="realloc" type="Object[]" line="2657">
                <params>
                    <param name="a" type="Object[]"/>
                </params>
            </method>
            <method name="realloc" type="int[]" line="2661">
                <params>
                    <param name="a" type="int[]"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="na" type="int[]" line="2664"/>
            </method>
            <method name="realloc" type="int[]" line="2668">
                <params>
                    <param name="a" type="int[]"/>
                </params>
            </method>
            <method name="realloc" type="byte[]" line="2672">
                <params>
                    <param name="a" type="byte[]"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="na" type="byte[]" line="2675"/>
            </method>
            <method name="realloc" type="byte[]" line="2679">
                <params>
                    <param name="a" type="byte[]"/>
                </params>
            </method>
        </class>
    </source>