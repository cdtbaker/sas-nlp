<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="com.sun.java.util.jar.pack.Package.Class"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="Code" line="7">
            <extends class="Attribute.Holder"/>
            <javadoc line="7">
                Represents a chunk of bytecodes.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="m" type="Class.Method" line="12"/>
            <method name="Code" type="constructor" line="13">
                <params>
                    <param name="m" type="Class.Method"/>
                </params>
            </method>
            <method name="getMethod" type="Class.Method" line="16"/>
            <method name="thisClass" type="Class" line="19"/>
            <method name="getPackage" type="Package" line="22"/>
            <method name="getCPMap" type="ConstantPool.Entry[]" line="25"/>
            <declaration name="noRefs" type="ConstantPool.Entry[]" line="28"/>
            <declaration name="max_stack" type="int" line="29"/>
            <declaration name="max_locals" type="int" line="30"/>
            <declaration name="handler_class" type="ConstantPool.Entry" line="31"/>
            <declaration name="handler_start" type="int" line="32"/>
            <declaration name="handler_end" type="int" line="33"/>
            <declaration name="handler_catch" type="int" line="34"/>
            <declaration name="bytes" type="byte[]" line="35"/>
            <declaration name="fixups" type="Fixups" line="36"/>
            <declaration name="insnMap" type="Object" line="37"/>
            <method name="getLength" type="int" line="38"/>
            <method name="getMaxStack" type="int" line="41"/>
            <method name="setMaxStack" type="void" line="44">
                <params>
                    <param name="ms" type="int"/>
                </params>
            </method>
            <method name="getMaxNALocals" type="int" line="47">
                <declaration name="argsize" type="int" line="48"/>
            </method>
            <method name="setMaxNALocals" type="void" line="51">
                <params>
                    <param name="ml" type="int"/>
                </params>
                <declaration name="argsize" type="int" line="52"/>
            </method>
            <method name="getHandlerCount" type="int" line="55"/>
            <method name="setHandlerCount" type="void" line="61">
                <params>
                    <param name="h" type="int"/>
                </params>
                <scope line="62"/>
            </method>
            <method name="setBytes" type="void" line="69">
                <params>
                    <param name="bytes" type="byte[]"/>
                </params>
            </method>
            <method name="setInstructionMap" type="void" line="73">
                <params>
                    <param name="insnMap" type="int[]"/>
                    <param name="mapLen" type="int"/>
                </params>
            </method>
            <method name="setInstructionMap" type="void" line="76">
                <params>
                    <param name="insnMap" type="int[]"/>
                </params>
            </method>
            <method name="getInstructionMap" type="int[]" line="79"/>
            <method name="addFixups" type="void" line="82">
                <params>
                    <param name="moreFixups" type="Collection"/>
                </params>
                <scope line="83"/>
            </method>
            <method name="trimToSize" type="void" line="89">
                <scope line="90"/>
            </method>
            <method name="visitRefs" type="void" line="96">
                <params>
                    <param name="mode" type="int"/>
                    <param name="refs" type="Collection&lt;ConstantPool.Entry&gt;"/>
                </params>
                <declaration name="verbose" type="int" line="97"/>
                <declaration name="cls" type="Class" line="99"/>
                <scope line="101"/>
                <scope line="104">
                    <declaration name="cpMap" type="ConstantPool.Entry[]" line="105"/>
                    <scope line="106">
                        <declaration name="cpref" type="int" line="108"/>
                        <scope line="109"/>
                    </scope>
                </scope>
            </method>
            <declaration name="shrinkMaps" type="boolean" line="116"/>
            <method name="allocateInstructionMap" type="Object" line="117">
                <params>
                    <param name="insnMap" type="int[]"/>
                    <param name="mapLen" type="int"/>
                </params>
                <declaration name="PClimit" type="int" line="118"/>
                <scope line="119">
                    <declaration name="map" type="byte[]" line="120"/>
                    <scope line="121"/>
                </scope>
                <scope line="127">
                    <declaration name="map" type="short[]" line="128"/>
                    <scope line="129"/>
                </scope>
                <scope line="135">
                    <declaration name="map" type="int[]" line="136"/>
                </scope>
            </method>
            <method name="expandInstructionMap" type="int[]" line="141">
                <params>
                    <param name="map0" type="Object"/>
                </params>
                <declaration name="imap" type="int[]" line="142"/>
                <scope line="143">
                    <declaration name="map" type="byte[]" line="144"/>
                    <scope line="146"/>
                </scope>
                <scope line="150">
                    <declaration name="map" type="short[]" line="151"/>
                    <scope line="153"/>
                </scope>
                <scope line="157">
                    <declaration name="map" type="int[]" line="158"/>
                </scope>
            </method>
            <method name="getInsnMap" type="Object" line="163">
                <scope line="164"/>
                <declaration name="map" type="int[]" line="167"/>
                <declaration name="fillp" type="int" line="168"/>
                <scope line="169"/>
            </method>
            <javadoc line="175">
                Encode the given BCI as an instruction boundary number.
                  For completeness, irregular (non-boundary) BCIs are
                  encoded compactly immediately after the boundary numbers.
                  This encoding is the identity mapping outside 0..length,
                  and it is 1-1 everywhere.  All by itself this technique
                  improved zipped rt.jar compression by 2.6%.                
            </javadoc>
            <method name="encodeBCI" type="int" line="183">
                <params>
                    <param name="bci" type="int"/>
                </params>
                <declaration name="map0" type="Object" line="185"/>
                <declaration name="i" type="int" line="186"/>
                <scope line="187">
                    <declaration name="map" type="byte[]" line="188"/>
                </scope>
                <scope line="192">
                    <declaration name="map" type="short[]" line="193"/>
                </scope>
                <scope line="197">
                    <declaration name="map" type="int[]" line="198"/>
                </scope>
            </method>
            <method name="decodeBCI" type="int" line="208">
                <params>
                    <param name="bciCode" type="int"/>
                </params>
                <declaration name="map0" type="Object" line="210"/>
                <declaration name="i" type="int" line="211"/>
                <scope line="212">
                    <declaration name="map" type="byte[]" line="213"/>
                    <declaration name="key" type="int" line="218"/>
                    <scope line="219"/>
                </scope>
                <scope line="223">
                    <declaration name="map" type="short[]" line="224"/>
                    <declaration name="key" type="int" line="229"/>
                    <scope line="230"/>
                </scope>
                <scope line="234">
                    <declaration name="map" type="int[]" line="235"/>
                    <declaration name="key" type="int" line="240"/>
                    <scope line="241"/>
                </scope>
            </method>
            <method name="finishRefs" type="void" line="247">
                <params>
                    <param name="ix" type="ConstantPool.Index"/>
                </params>
                <scope line="248"/>
            </method>
            <method name="instructionAt" type="Instruction" line="253">
                <params>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="flagsRequireCode" type="boolean" line="256">
                <params>
                    <param name="flags" type="int"/>
                </params>
            </method>
            <method name="toString" type="String" line="259"/>
            <method name="getInt" type="int" line="262">
                <params>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="getShort" type="int" line="265">
                <params>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="getByte" type="int" line="268">
                <params>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="setInt" type="void" line="271">
                <params>
                    <param name="pc" type="int"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="setShort" type="void" line="274">
                <params>
                    <param name="pc" type="int"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="setByte" type="void" line="277">
                <params>
                    <param name="pc" type="int"/>
                    <param name="x" type="int"/>
                </params>
            </method>
        </class>
    </source>