<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.util.jar.JarOutputStream"/>
        <import package="java.util.jar.Pack200"/>
        <import package="java.util.zip.CRC32"/>
        <import package="java.util.zip.Deflater"/>
        <import package="java.util.zip.ZipEntry"/>
        <import package="java.util.zip.ZipOutputStream"/>
        <class name="NativeUnpack" line="42">
            <comment line="44">
                Pointer to the native unpacker obj                
            </comment>
            <comment line="47">
                Input stream.                
            </comment>
            <comment line="52">
                Starts processing at the indicated position in the buffer.
                 If the buffer is null, the readInputFn callback is used to get bytes.
                 Returns (s&lt;&lt;32|f), the number of following segments and files.                
            </comment>
            <comment line="57">
                Returns true if there&apos;s another, and fills in the parts.                
            </comment>
            <comment line="62">
                Resets the engine and frees all resources.
                 Returns total number of bytes consumed by the engine.                
            </comment>
            <comment line="66">
                Setting state in the unpacker.                
            </comment>
            <comment line="72">
                State for progress bar:                
            </comment>
            <comment line="73">
                bytes read in current segment                
            </comment>
            <comment line="74">
                number of segs scanned                
            </comment>
            <comment line="75">
                number of files written                
            </comment>
            <comment line="76">
                estimate of eventual total                
            </comment>
            <comment line="77">
                ditto                
            </comment>
            <comment line="78">
                ditto                
            </comment>
            <comment line="79">
                for monotonicity                
            </comment>
            <comment line="102">
                for JNI callbacks                
            </comment>
            <comment line="108">
                Callback from the unpacker engine to get more data.                
            </comment>
            <declaration name="unpackerPtr" type="long" line="44"/>
            <declaration name="in" type="BufferedInputStream" line="47"/>
            <method name="initIDs" type="void" line="49"/>
            <method name="start" type="long" line="54"/>
            <method name="getNextFile" type="boolean" line="57"/>
            <method name="getUnusedInput" type="ByteBuffer" line="59"/>
            <method name="finish" type="long" line="63"/>
            <method name="setOption" type="boolean" line="66"/>
            <method name="getOption" type="String" line="67"/>
            <declaration name="_verbose" type="int" line="69"/>
            <declaration name="_byteCount" type="long" line="72"/>
            <declaration name="_segCount" type="int" line="73"/>
            <declaration name="_fileCount" type="int" line="74"/>
            <declaration name="_estByteLimit" type="long" line="75"/>
            <declaration name="_estSegLimit" type="int" line="76"/>
            <declaration name="_estFileLimit" type="int" line="77"/>
            <declaration name="_prevPercent" type="int" line="78"/>
            <declaration name="_crc32" type="CRC32" line="80"/>
            <declaration name="_buf" type="byte[]" line="81"/>
            <declaration name="_p200" type="UnpackerImpl" line="83"/>
            <declaration name="_props" type="PropMap" line="84"/>
            <scope line="86"/>
            <method name="NativeUnpack" type="constructor" line="94">
                <params>
                    <param name="p200" type="UnpackerImpl"/>
                </params>
            </method>
            <method name="currentInstance" type="Object" line="102">
                <declaration name="p200" type="UnpackerImpl" line="103"/>
            </method>
            <method name="readInputFn" type="long" line="108">
                <params>
                    <param name="pbuf" type="ByteBuffer"/>
                    <param name="minlen" type="long"/>
                </params>
                <comment line="110">
                    nothing is readable                    
                </comment>
                <comment line="112">
                    don&apos;t talk nonsense                    
                </comment>
                <comment line="117">
                    read available input, up to buf.length or maxlen                    
                </comment>
                <comment line="125">
                    %%% get rid of this extra copy by using nio?                    
                </comment>
                <declaration name="maxlen" type="long" line="110"/>
                <declaration name="numread" type="long" line="112"/>
                <declaration name="steps" type="int" line="113"/>
                <scope line="114">
                    <declaration name="readlen" type="int" line="117"/>
                    <declaration name="nr" type="int" line="120"/>
                </scope>
                <scope line="129"/>
                <scope line="131"/>
            </method>
            <method name="updateProgress" type="void" line="139">
                <comment line="141">
                    Progress is a combination of segment reading and file writing.                    
                </comment>
                <declaration name="READ_WT" type="double" line="141"/>
                <declaration name="WRITE_WT" type="double" line="142"/>
                <declaration name="readProgress" type="double" line="143"/>
                <declaration name="writeProgress" type="double" line="146"/>
                <declaration name="scaledProgress" type="double" line="147"/>
                <declaration name="percent" type="int" line="150"/>
                <scope line="152"/>
            </method>
            <method name="copyInOption" type="void" line="160">
                <params>
                    <param name="opt" type="String"/>
                </params>
                <declaration name="val" type="String" line="161"/>
                <scope line="164">
                    <declaration name="set" type="boolean" line="165"/>
                </scope>
            </method>
            <method name="run" type="void" line="172">
                <params>
                    <param name="inRaw" type="InputStream"/>
                    <param name="jstream" type="JarOutputStream"/>
                    <param name="presetInput" type="ByteBuffer"/>
                </params>
                <comment line="175">
                    for readInputFn to see                    
                </comment>
                <comment line="177">
                    Fix for BugId: 4902477, -unpack.modification.time = 1059010598000
                     TODO eliminate and fix in unpack.cpp                    
                </comment>
                <comment line="185">
                    Dont pass KEEP &amp;&amp; NOW                    
                </comment>
                <comment line="187">
                    reset progress bar                    
                </comment>
                <comment line="189">
                    Read the packed bits.                    
                </comment>
                <comment line="191">
                    reset partial scan counts                    
                </comment>
                <comment line="192">
                    just finished scanning a whole segment...                    
                </comment>
                <comment line="196">
                    Estimate eventual total number of segments and files.                    
                </comment>
                <comment line="202">
                    Write the files.                    
                </comment>
                <comment line="204">
                    intParts = {size.hi/lo, mod, defl}                    
                </comment>
                <comment line="206">
                    parts = { {intParts}, name, data0/1 }                    
                </comment>
                <comment line="208">
                    BandStructure.printArrayTo(System.out, intParts, 0, parts.length);                    
                </comment>
                <declaration name="in0" type="BufferedInputStream" line="173"/>
                <declaration name="modtime" type="int" line="179"/>
                <scope line="187">
                    <declaration name="counts" type="long" line="189"/>
                    <declaration name="nextSeg" type="int" line="192"/>
                    <declaration name="nextFile" type="int" line="193"/>
                    <declaration name="filesAfterThisSeg" type="double" line="197"/>
                    <declaration name="intParts" type="int[]" line="202"/>
                    <declaration name="parts" type="Object[]" line="204"/>
                    <scope line="206">
                        <declaration name="name" type="String" line="208"/>
                        <declaration name="size" type="long" line="209"/>
                        <declaration name="mtime" type="long" line="212"/>
                        <declaration name="deflateHint" type="boolean" line="214"/>
                        <declaration name="data0" type="ByteBuffer" line="215"/>
                        <declaration name="data1" type="ByteBuffer" line="216"/>
                    </scope>
                    <declaration name="consumed" type="long" line="223"/>
                    <scope line="227"/>
                    <scope line="230"/>
                </scope>
            </method>
            <method name="run" type="void" line="237">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="jstream" type="JarOutputStream"/>
                </params>
            </method>
            <method name="run" type="void" line="241">
                <params>
                    <param name="inFile" type="File"/>
                    <param name="jstream" type="JarOutputStream"/>
                </params>
                <comment line="243">
                    %%% maybe memory-map the file, and pass it straight into unpacker                    
                </comment>
                <comment line="248">
                    Note:  caller is responsible to finish with jstream.                    
                </comment>
                <declaration name="mappedFile" type="ByteBuffer" line="243"/>
                <scope line="244"/>
            </method>
            <method name="writeEntry" type="void" line="252">
                <params>
                    <param name="j" type="JarOutputStream"/>
                    <param name="name" type="String"/>
                    <param name="mtime" type="long"/>
                    <param name="lsize" type="long"/>
                    <param name="deflateHint" type="boolean"/>
                    <param name="data0" type="ByteBuffer"/>
                    <param name="data1" type="ByteBuffer"/>
                </params>
                <comment line="289">
                    Fill in rest of data from the stream itself.                    
                </comment>
                <declaration name="size" type="int" line="253"/>
                <declaration name="crc32" type="CRC32" line="257"/>
                <scope line="263">
                    <declaration name="newSize" type="int" line="264"/>
                    <scope line="265">
                        <scope line="267"/>
                    </scope>
                </scope>
                <declaration name="fillp" type="int" line="276"/>
                <scope line="277">
                    <declaration name="size0" type="int" line="278"/>
                </scope>
                <scope line="282">
                    <declaration name="size1" type="int" line="283"/>
                </scope>
                <scope line="287">
                    <declaration name="nr" type="int" line="289"/>
                </scope>
                <declaration name="z" type="ZipEntry" line="294"/>
                <scope line="297"/>
                <scope line="302"/>
                <scope line="309"/>
            </method>
        </class>
    </source>