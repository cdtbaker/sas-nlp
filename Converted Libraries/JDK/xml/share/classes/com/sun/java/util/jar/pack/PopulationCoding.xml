<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Set"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="PopulationCoding" line="37">
            <comment line="43">
                This tactic alone reduces the final zipped rt.jar by about a percent.                
            </comment>
            <comment line="45">
                histogram of all values                
            </comment>
            <comment line="46">
                list of favored values                
            </comment>
            <comment line="47">
                inclusive max index                
            </comment>
            <comment line="48">
                int map of favored value -&gt; token [1..#fValues]                
            </comment>
            <comment line="54">
                preferred L value for tokenCoding                
            </comment>
            <comment line="238">
                CodingMethod methods.                
            </comment>
            <comment line="389">
                private static int moreCentral2(int x, int y, int min) {                
            </comment>
            <comment line="390">
                // Strict implementation of buggy 150.7 specification.                
            </comment>
            <comment line="391">
                // The bug is that the spec. says absolute-value ties are broken                
            </comment>
            <comment line="392">
                // in favor of positive numbers, but the suggested implementation                
            </comment>
            <comment line="393">
                // (also mentioned in the spec.) breaks ties in favor of negatives.                
            </comment>
            <comment line="394">
                if (x + y == 0)  return (x &gt; y? x : y);                
            </comment>
            <comment line="395">
                return min;                
            </comment>
            <comment line="396">
                }                
            </comment>
            <implements interface="CodingMethod"/>
            <javadoc line="37">
                Population-based coding.
                  See the section &quot;Encodings of Uncorrelated Values&quot; in the Pack200 spec.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="vHist" type="Histogram" line="44"/>
            <declaration name="fValues" type="int[]" line="45"/>
            <declaration name="fVlen" type="int" line="46"/>
            <declaration name="symtab" type="long[]" line="47"/>
            <declaration name="favoredCoding" type="CodingMethod" line="49"/>
            <declaration name="tokenCoding" type="CodingMethod" line="50"/>
            <declaration name="unfavoredCoding" type="CodingMethod" line="51"/>
            <declaration name="L" type="int" line="53"/>
            <method name="setFavoredValues" type="void" line="55">
                <params>
                    <param name="fValues" type="int[]"/>
                    <param name="fVlen" type="int"/>
                </params>
                <comment line="56">
                    Note:  {f} is allFavoredValues[1..fvlen], not [0..fvlen-1].                    
                </comment>
                <comment line="57">
                    This is because zero is an exceptional favored value index.                    
                </comment>
                <comment line="58">
                    must be empty                    
                </comment>
                <comment line="59">
                    do not do this twice                    
                </comment>
                <comment line="63">
                    reassert                    
                </comment>
                <scope line="62"/>
            </method>
            <method name="setFavoredValues" type="void" line="66">
                <params>
                    <param name="fValues" type="int[]"/>
                </params>
                <declaration name="lfVlen" type="int" line="67"/>
            </method>
            <method name="setHistogram" type="void" line="70">
                <params>
                    <param name="vHist" type="Histogram"/>
                </params>
            </method>
            <method name="setL" type="void" line="73">
                <params>
                    <param name="L" type="int"/>
                </params>
                <scope line="75"/>
            </method>
            <method name="fitTokenCoding" type="Coding" line="81">
                <params>
                    <param name="fVlen" type="int"/>
                    <param name="L" type="int"/>
                </params>
                <comment line="82">
                    Find the smallest B s.t. (B,H,0) covers fVlen.                    
                </comment>
                <comment line="84">
                    H/L do not matter when B==1                    
                </comment>
                <comment line="88">
                    failure; L is too sharp and fVlen too large                    
                </comment>
                <comment line="94">
                    shorten it by reducing B                    
                </comment>
                <declaration name="longest" type="Coding" line="86"/>
                <declaration name="tc" type="Coding" line="89"/>
                <scope line="90"/>
            </method>
            <method name="setFavoredCoding" type="void" line="99">
                <params>
                    <param name="favoredCoding" type="CodingMethod"/>
                </params>
            </method>
            <method name="setTokenCoding" type="void" line="102">
                <params>
                    <param name="tokenCoding" type="CodingMethod"/>
                </params>
                <comment line="109">
                    Otherwise, it&apos;s a non-default coding.                    
                </comment>
                <scope line="105">
                    <declaration name="tc" type="Coding" line="106"/>
                </scope>
            </method>
            <method name="setUnfavoredCoding" type="void" line="112">
                <params>
                    <param name="unfavoredCoding" type="CodingMethod"/>
                </params>
            </method>
            <method name="favoredValueMaxLength" type="int" line="116"/>
            <method name="resortFavoredValues" type="void" line="123">
                <comment line="125">
                    Make a local copy before reordering.                    
                </comment>
                <comment line="127">
                    Resort favoredValues within each byte-size cadre.                    
                </comment>
                <comment line="128">
                    skip initial zero                    
                </comment>
                <comment line="148">
                    Divide the values into cadres, and sort within each.                    
                </comment>
                <comment line="156">
                    For the single-byte encoding, keep strict order                    
                </comment>
                <comment line="157">
                    among frequency groups.                    
                </comment>
                <comment line="161">
                    Find a single inflection point                    
                </comment>
                <comment line="162">
                    close to the middle of the byte-size cadre.                    
                </comment>
                <comment line="172">
                    Sort up to the midpoint, if any.                    
                </comment>
                <comment line="182">
                    Reset symtab.                    
                </comment>
                <declaration name="tc" type="Coding" line="124"/>
                <declaration name="fillp" type="int" line="128"/>
                <scope line="129">
                    <declaration name="nmax" type="int" line="130"/>
                    <declaration name="low" type="int" line="135"/>
                    <declaration name="high" type="int" line="136"/>
                    <declaration name="midTarget" type="int" line="146"/>
                    <declaration name="mid" type="int" line="147"/>
                    <declaration name="prevCount" type="int" line="149"/>
                    <declaration name="prevLimit" type="int" line="150"/>
                    <scope line="151">
                        <declaration name="val" type="int" line="152"/>
                        <declaration name="count" type="int" line="153"/>
                        <scope line="154">
                            <scope line="155"/>
                            <scope line="160"/>
                        </scope>
                    </scope>
                    <scope line="169"/>
                    <scope line="171"/>
                </scope>
            </method>
            <method name="getToken" type="int" line="186">
                <params>
                    <param name="value" type="int"/>
                </params>
                <declaration name="pos" type="int" line="189"/>
            </method>
            <method name="encodeValues" type="int[][]" line="197">
                <params>
                    <param name="values" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <comment line="198">
                    Compute token sequence.                    
                </comment>
                <comment line="209">
                    Compute unfavored value sequence.                    
                </comment>
                <comment line="211">
                    reset                    
                </comment>
                <comment line="213">
                    already covered                    
                </comment>
                <declaration name="tokens" type="int[]" line="199"/>
                <declaration name="nuv" type="int" line="200"/>
                <scope line="201">
                    <declaration name="val" type="int" line="202"/>
                    <declaration name="tok" type="int" line="203"/>
                </scope>
                <declaration name="unfavoredValues" type="int[]" line="210"/>
                <scope line="212">
                    <declaration name="val" type="int" line="214"/>
                </scope>
            </method>
            <method name="makeSymtab" type="long[]" line="221">
                <comment line="226">
                    Index by value:                    
                </comment>
                <declaration name="lsymtab" type="long[]" line="222"/>
                <scope line="223"/>
            </method>
            <method name="getTailCoding" type="Coding" line="231">
                <params>
                    <param name="c" type="CodingMethod"/>
                </params>
            </method>
            <method name="writeArrayTo" type="void" line="238">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="a" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="vals" type="int[][]" line="239"/>
            </method>
            <method name="writeSequencesTo" type="void" line="242">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="tokens" type="int[]"/>
                    <param name="uValues" type="int[]"/>
                </params>
            </method>
            <method name="computeSentinelValue" type="int" line="250">
                <comment line="253">
                    repeat the last favored value, using delta=0                    
                </comment>
                <comment line="256">
                    else repeat the shorter of the min or last value                    
                </comment>
                <comment line="259">
                    (remember that fVlen is an inclusive limit in fValues)                    
                </comment>
                <declaration name="fc" type="Coding" line="251"/>
                <scope line="252"/>
                <scope line="255">
                    <declaration name="min" type="int" line="257"/>
                    <declaration name="last" type="int" line="258"/>
                    <scope line="260"/>
                    <declaration name="endVal" type="int" line="264"/>
                </scope>
            </method>
            <method name="readArrayFrom" type="void" line="272">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="a" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <comment line="273">
                    Parameters are fCode, L, uCode.                    
                </comment>
                <comment line="275">
                    Read the tokens.  Read them into the final array, for the moment.                    
                </comment>
                <comment line="277">
                    Decode the favored tokens.                    
                </comment>
                <comment line="283">
                    Make a linked list, and decode in a second pass.                    
                </comment>
                <comment line="295">
                    Walk the linked list of &quot;zero&quot; locations, decoding unfavored vals.                    
                </comment>
                <declaration name="headp" type="int" line="278"/>
                <declaration name="uVlen" type="int" line="279"/>
                <scope line="280">
                    <declaration name="tok" type="int" line="281"/>
                    <scope line="282">
                        <scope line="284"/>
                        <scope line="286"/>
                    </scope>
                    <scope line="291"/>
                </scope>
                <declaration name="uValues" type="int[]" line="296"/>
                <scope line="299">
                    <declaration name="nextp" type="int" line="300"/>
                </scope>
            </method>
            <method name="readFavoredValuesFrom" type="int[]" line="306">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="maxForDebug" type="int"/>
                </params>
                <comment line="307">
                    realloc as needed                    
                </comment>
                <comment line="308">
                    The set uniqueValuesForDebug records all favored values.                    
                </comment>
                <comment line="309">
                    As each new value is added, we assert that the value                    
                </comment>
                <comment line="310">
                    was not already in the set.                    
                </comment>
                <comment line="315">
                    farthest from the center                    
                </comment>
                <comment line="316">
                    int min2 = Integer.MIN_VALUE;  // emulate buggy 150.7 spec.                    
                </comment>
                <comment line="333">
                    min2 = moreCentral2(min2, val, min);                    
                </comment>
                <comment line="340">
                    Read a new value:                    
                </comment>
                <comment line="348">
                    || val == min2                    
                </comment>
                <comment line="357">
                    min2 = moreCentral(min2, val);                    
                </comment>
                <comment line="362">
                    || val == min2                    
                </comment>
                <comment line="371">
                    min2 = moreCentral2(min2, val, min);                    
                </comment>
                <declaration name="lfValues" type="int[]" line="307"/>
                <declaration name="uniqueValuesForDebug" type="Set&lt;Integer&gt;" line="311"/>
                <declaration name="fillp" type="int" line="313"/>
                <declaration name="min" type="int" line="315"/>
                <declaration name="last" type="int" line="317"/>
                <declaration name="fcm" type="CodingMethod" line="318"/>
                <scope line="319">
                    <declaration name="ac" type="AdaptiveCoding" line="320"/>
                    <declaration name="len" type="int" line="321"/>
                    <scope line="322"/>
                    <declaration name="newFillp" type="int" line="325"/>
                    <scope line="327">
                        <declaration name="val" type="int" line="328"/>
                    </scope>
                </scope>
                <declaration name="fc" type="Coding" line="337"/>
                <scope line="338">
                    <scope line="339">
                        <declaration name="val" type="int" line="342"/>
                    </scope>
                </scope>
                <scope line="359">
                    <scope line="360">
                        <declaration name="val" type="int" line="361"/>
                    </scope>
                </scope>
            </method>
            <method name="moreCentral" type="int" line="377">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <comment line="380">
                    bias kx/ky to get an unsigned comparison:                    
                </comment>
                <comment line="384">
                    assert that this ALU-ish version is the same:                    
                </comment>
                <declaration name="kx" type="int" line="378"/>
                <declaration name="ky" type="int" line="379"/>
                <declaration name="xy" type="int" line="383"/>
            </method>
            <method name="moreCentralSlow" type="int" line="396">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <comment line="399">
                    x is MIN_VALUE                    
                </comment>
                <comment line="402">
                    y is MIN_VALUE                    
                </comment>
                <comment line="405">
                    At this point the absolute values agree, and the negative wins.                    
                </comment>
                <declaration name="ax" type="int" line="397"/>
                <declaration name="ay" type="int" line="400"/>
            </method>
            <declaration name="LValuesCoded" type="int[]" line="409"/>
            <method name="getMetaCoding" type="byte[]" line="412">
                <params>
                    <param name="dflt" type="Coding"/>
                </params>
                <comment line="428">
                    A simple L value is enough to recover the tokenCoding.                    
                </comment>
                <declaration name="K" type="int" line="413"/>
                <declaration name="LCoded" type="int" line="414"/>
                <scope line="415">
                    <declaration name="tc" type="Coding" line="416"/>
                    <scope line="417"/>
                    <scope line="419">
                        <scope line="421">
                            <scope line="422"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tokenDflt" type="CodingMethod" line="426"/>
                <scope line="427"/>
                <declaration name="FDef" type="int" line="431"/>
                <declaration name="UDef" type="int" line="432"/>
                <declaration name="TDef" type="int" line="433"/>
                <declaration name="TDefL" type="int" line="434"/>
                <declaration name="bytes" type="ByteArrayOutputStream" line="436"/>
                <scope line="438"/>
                <scope line="442"/>
            </method>
            <method name="parseMetaCoding" type="int" line="447">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pos" type="int"/>
                    <param name="dflt" type="Coding"/>
                    <param name="res" type="CodingMethod"/>
                </params>
                <comment line="449">
                    backup                    
                </comment>
                <comment line="464">
                    might be -1                    
                </comment>
                <comment line="466">
                    might be null!                    
                </comment>
                <declaration name="op" type="int" line="448"/>
                <declaration name="FDef" type="int" line="451"/>
                <declaration name="UDef" type="int" line="452"/>
                <declaration name="TDefL" type="int" line="453"/>
                <declaration name="TDef" type="int" line="454"/>
                <declaration name="L" type="int" line="455"/>
                <declaration name="FCode" type="CodingMethod[]" line="456"/>
                <declaration name="pop" type="PopulationCoding" line="463"/>
            </method>
            <method name="keyString" type="String" line="472">
                <params>
                    <param name="m" type="CodingMethod"/>
                </params>
            </method>
            <method name="toString" type="String" line="479">
                <declaration name="p200" type="PropMap" line="480"/>
                <declaration name="verbose" type="boolean" line="481"/>
                <declaration name="res" type="StringBuilder" line="484"/>
                <scope line="486">
                    <scope line="488"/>
                </scope>
            </method>
        </class>
    </source>