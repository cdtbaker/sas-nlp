<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.windows">
        <import package="java.awt"/>
        <import package="java.awt.image"/>
        <import package="java.security.AccessController"/>
        <import package="java.util"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="sun.awt.image.SunWritableRaster"/>
        <import package="sun.awt.windows.ThemeReader"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.swing.CachedPainter"/>
        <import package="com.sun.java.swing.plaf.windows.TMSchema"/>
        <class name="XPStyle" line="15">
            <javadoc line="15">
                Implements Windows XP Styles for the Windows Look and Feel.                
                <author>
                    Leif Samuelsson                    
                </author>
            </javadoc>
            <declaration name="xp" type="XPStyle" line="20"/>
            <declaration name="skinPainter" type="SkinPainter" line="21"/>
            <declaration name="themeActive" type="Boolean" line="22"/>
            <declaration name="borderMap" type="HashMap&lt;String,Border&gt;" line="23"/>
            <declaration name="colorMap" type="HashMap&lt;String,Color&gt;" line="24"/>
            <declaration name="flatMenus" type="boolean" line="25"/>
            <scope line="26"/>
            <javadoc line="29">
                Static method for clearing the hashmap and loading the
                  current XP style and theme                
            </javadoc>
            <method name="invalidateStyle" type="void" line="33"/>
            <javadoc line="38">
                Get the singleton instance of this class                
                <return>
                    the singleton instance of this class or null if XP styles
                      are not active or if this is not Windows XP                    
                </return>
            </javadoc>
            <method name="getXP" type="XPStyle" line="43">
                <scope line="44">
                    <declaration name="toolkit" type="Toolkit" line="45"/>
                    <scope line="47"/>
                    <scope line="50">
                        <declaration name="propertyAction" type="GetPropertyAction" line="51"/>
                        <scope line="52"/>
                    </scope>
                </scope>
            </method>
            <method name="isVista" type="boolean" line="59">
                <declaration name="xp" type="XPStyle" line="60"/>
            </method>
            <javadoc line="63">
                Get a named &lt;code&gt;String&lt;/code&gt; value from the current style                
                <param>
                    part a <code>Part</code>                    
                </param>
                <param>
                    state a <code>String</code>                    
                </param>
                <param>
                    attributeKey a <code>String</code>                    
                </param>
                <return>
                    a <code>String</code> or null if key is not found
                      in the current style
                      This is currently only used by WindowsInternalFrameTitlePane for painting
                      title foregound and can be removed when no longer needed                    
                </return>
            </javadoc>
            <method name="getString" type="String" line="73">
                <params>
                    <param name="c" type="Component"/>
                    <param name="part" type="Part"/>
                    <param name="state" type="State"/>
                    <param name="prop" type="Prop"/>
                </params>
            </method>
            <method name="getTypeEnum" type="TypeEnum" line="76">
                <params>
                    <param name="c" type="Component"/>
                    <param name="part" type="Part"/>
                    <param name="state" type="State"/>
                    <param name="prop" type="Prop"/>
                </params>
                <declaration name="enumValue" type="int" line="77"/>
            </method>
            <method name="getTypeEnumName" type="String" line="80">
                <params>
                    <param name="c" type="Component"/>
                    <param name="part" type="Part"/>
                    <param name="state" type="State"/>
                    <param name="prop" type="Prop"/>
                </params>
                <declaration name="enumValue" type="int" line="81"/>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                Get a named &lt;code&gt;int&lt;/code&gt; value from the current style                
                <param>
                    part a <code>Part</code>                    
                </param>
                <return>
                    an <code>int</code> or null if key is not found
                      in the current style                    
                </return>
            </javadoc>
            <method name="getInt" type="int" line="93">
                <params>
                    <param name="c" type="Component"/>
                    <param name="part" type="Part"/>
                    <param name="state" type="State"/>
                    <param name="prop" type="Prop"/>
                    <param name="fallback" type="int"/>
                </params>
            </method>
            <javadoc line="96">
                Get a named &lt;code&gt;Dimension&lt;/code&gt; value from the current style                
                <param>
                    key a <code>String</code>                    
                </param>
                <return>
                    a <code>Dimension</code> or null if key is not found
                      in the current style
                      This is currently only used by WindowsProgressBarUI and the value
                      should probably be cached there instead of here.                    
                </return>
            </javadoc>
            <method name="getDimension" type="Dimension" line="104">
                <params>
                    <param name="c" type="Component"/>
                    <param name="part" type="Part"/>
                    <param name="state" type="State"/>
                    <param name="prop" type="Prop"/>
                </params>
            </method>
            <javadoc line="107">
                Get a named &lt;code&gt;Point&lt;/code&gt; (e.g. a location or an offset) value
                  from the current style                
                <param>
                    key a <code>String</code>                    
                </param>
                <return>
                    a <code>Point</code> or null if key is not found
                      in the current style
                      This is currently only used by WindowsInternalFrameTitlePane for painting
                      title foregound and can be removed when no longer needed                    
                </return>
            </javadoc>
            <method name="getPoint" type="Point" line="116">
                <params>
                    <param name="c" type="Component"/>
                    <param name="part" type="Part"/>
                    <param name="state" type="State"/>
                    <param name="prop" type="Prop"/>
                </params>
                <declaration name="d" type="Dimension" line="117"/>
                <scope line="118"/>
                <scope line="121"/>
            </method>
            <javadoc line="125">
                Get a named &lt;code&gt;Insets&lt;/code&gt; value from the current style                
                <param>
                    key a <code>String</code>                    
                </param>
                <return>
                    an <code>Insets</code> object or null if key is not found
                      in the current style
                      This is currently only used to create borders and by
                      WindowsInternalFrameTitlePane for painting title foregound.
                      The return value is already cached in those places.                    
                </return>
            </javadoc>
            <method name="getMargin" type="Insets" line="134">
                <params>
                    <param name="c" type="Component"/>
                    <param name="part" type="Part"/>
                    <param name="state" type="State"/>
                    <param name="prop" type="Prop"/>
                </params>
            </method>
            <javadoc line="137">
                Get a named &lt;code&gt;Color&lt;/code&gt; value from the current style                
                <param>
                    part a <code>Part</code>                    
                </param>
                <return>
                    a <code>Color</code> or null if key is not found
                      in the current style                    
                </return>
            </javadoc>
            <method name="getColor" type="Color" line="143">
                <params>
                    <param name="skin" type="Skin"/>
                    <param name="prop" type="Prop"/>
                    <param name="fallback" type="Color"/>
                </params>
                <declaration name="key" type="String" line="144"/>
                <declaration name="part" type="Part" line="145"/>
                <declaration name="color" type="Color" line="146"/>
                <scope line="147">
                    <scope line="149"/>
                </scope>
            </method>
            <method name="getColor" type="Color" line="156">
                <params>
                    <param name="c" type="Component"/>
                    <param name="part" type="Part"/>
                    <param name="state" type="State"/>
                    <param name="prop" type="Prop"/>
                    <param name="fallback" type="Color"/>
                </params>
            </method>
            <javadoc line="159">
                Get a named &lt;code&gt;Border&lt;/code&gt; value from the current style                
                <param>
                    part a <code>Part</code>                    
                </param>
                <return>
                    a <code>Border</code> or null if key is not found
                      in the current style or if the style for the particular
                      part is not defined as "borderfill".                    
                </return>
            </javadoc>
            <method name="getBorder" type="Border" line="166">
                <params>
                    <param name="c" type="Component"/>
                    <param name="part" type="Part"/>
                </params>
                <scope line="167">
                    <scope line="168"/>
                    <scope line="171"/>
                </scope>
                <declaration name="skin" type="Skin" line="175"/>
                <declaration name="border" type="Border" line="176"/>
                <scope line="177">
                    <declaration name="bgType" type="String" line="178"/>
                    <scope line="179">
                        <declaration name="thickness" type="int" line="180"/>
                        <declaration name="color" type="Color" line="181"/>
                        <scope line="183"/>
                    </scope>
                    <scope line="187">
                        <declaration name="m" type="Insets" line="188"/>
                        <scope line="189">
                            <scope line="190"/>
                            <scope line="193"/>
                            <scope line="196">
                                <scope line="197"/>
                                <scope line="200"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="206"/>
                </scope>
            </method>
            <class name="XPFillBorder" line="212">
                <extends class="LineBorder"/>
                <implements interface="UIResource"/>
                <method name="XPFillBorder" type="constructor" line="213">
                    <params>
                        <param name="color" type="Color"/>
                        <param name="thickness" type="int"/>
                    </params>
                </method>
                <method name="getBorderInsets" type="Insets" line="216">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="insets" type="Insets"/>
                    </params>
                    <declaration name="margin" type="Insets" line="217"/>
                    <scope line="218"/>
                    <scope line="221"/>
                    <scope line="224"/>
                </method>
            </class>
            <class name="XPStatefulFillBorder" line="234">
                <extends class="XPFillBorder"/>
                <declaration name="part" type="Part" line="235"/>
                <declaration name="prop" type="Prop" line="236"/>
                <method name="XPStatefulFillBorder" type="constructor" line="237">
                    <params>
                        <param name="color" type="Color"/>
                        <param name="thickness" type="int"/>
                        <param name="part" type="Part"/>
                        <param name="prop" type="Prop"/>
                    </params>
                </method>
                <method name="paintBorder" type="void" line="242">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                    <declaration name="state" type="State" line="243"/>
                    <scope line="244">
                        <declaration name="cb" type="JComboBox" line="245"/>
                        <scope line="246">
                            <declaration name="wcb" type="WindowsComboBoxUI" line="247"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="XPImageBorder" line="255">
                <extends class="AbstractBorder"/>
                <implements interface="UIResource"/>
                <declaration name="skin" type="Skin" line="256"/>
                <method name="XPImageBorder" type="constructor" line="257">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="part" type="Part"/>
                    </params>
                </method>
                <method name="paintBorder" type="void" line="260">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                </method>
                <method name="getBorderInsets" type="Insets" line="263">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="insets" type="Insets"/>
                    </params>
                    <declaration name="margin" type="Insets" line="264"/>
                    <declaration name="borderInsets" type="Insets" line="265"/>
                    <scope line="266"/>
                    <scope line="269"/>
                    <scope line="272"/>
                    <scope line="275"/>
                </method>
            </class>
            <class name="XPEmptyBorder" line="285">
                <extends class="EmptyBorder"/>
                <implements interface="UIResource"/>
                <method name="XPEmptyBorder" type="constructor" line="286">
                    <params>
                        <param name="m" type="Insets"/>
                    </params>
                </method>
                <method name="getBorderInsets" type="Insets" line="289">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="insets" type="Insets"/>
                    </params>
                    <declaration name="margin" type="Insets" line="291"/>
                    <scope line="292">
                        <declaration name="m" type="Insets" line="293"/>
                        <scope line="294"/>
                        <scope line="300"/>
                    </scope>
                    <scope line="304"/>
                    <scope line="307"/>
                    <scope line="310"/>
                </method>
            </class>
            <method name="isSkinDefined" type="boolean" line="319">
                <params>
                    <param name="c" type="Component"/>
                    <param name="part" type="Part"/>
                </params>
            </method>
            <javadoc line="322">
                Get a &lt;code&gt;Skin&lt;/code&gt; object from the current style
                  for a named part (component type)                
                <param>
                    part a <code>Part</code>                    
                </param>
                <return>
                    a <code>Skin</code> object                    
                </return>
            </javadoc>
            <method name="getSkin" type="Skin" line="328">
                <params>
                    <param name="c" type="Component"/>
                    <param name="part" type="Part"/>
                </params>
            </method>
            <method name="getThemeTransitionDuration" type="long" line="332">
                <params>
                    <param name="c" type="Component"/>
                    <param name="part" type="Part"/>
                    <param name="stateFrom" type="State"/>
                    <param name="stateTo" type="State"/>
                    <param name="prop" type="Prop"/>
                </params>
            </method>
            <class name="Skin" line="335">
                <javadoc line="335">
                    A class which encapsulates attributes for a given part
                      (component type) and which provides methods for painting backgrounds
                      and glyphs                    
                </javadoc>
                <declaration name="component" type="Component" line="341"/>
                <declaration name="part" type="Part" line="342"/>
                <declaration name="state" type="State" line="343"/>
                <declaration name="string" type="String" line="344"/>
                <declaration name="size" type="Dimension" line="345"/>
                <method name="Skin" type="constructor" line="346">
                    <params>
                        <param name="component" type="Component"/>
                        <param name="part" type="Part"/>
                    </params>
                </method>
                <method name="Skin" type="constructor" line="349">
                    <params>
                        <param name="part" type="Part"/>
                        <param name="state" type="State"/>
                    </params>
                </method>
                <method name="Skin" type="constructor" line="352">
                    <params>
                        <param name="component" type="Component"/>
                        <param name="part" type="Part"/>
                        <param name="state" type="State"/>
                    </params>
                    <declaration name="str" type="String" line="356"/>
                    <scope line="357"/>
                </method>
                <method name="getContentMargin" type="Insets" line="362">
                    <declaration name="boundingWidth" type="int" line="363"/>
                    <declaration name="boundingHeight" type="int" line="364"/>
                </method>
                <method name="getWidth" type="int" line="367">
                    <params>
                        <param name="state" type="State"/>
                    </params>
                    <scope line="368"/>
                </method>
                <method name="getWidth" type="int" line="373"/>
                <method name="getHeight" type="int" line="376">
                    <params>
                        <param name="state" type="State"/>
                    </params>
                    <scope line="377"/>
                </method>
                <method name="getHeight" type="int" line="382"/>
                <method name="toString" type="String" line="385"/>
                <method name="equals" type="boolean" line="388">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="391"/>
                <javadoc line="394">
                    Paint a skin at x, y.                    
                    <param>
                        g   the graphics context to use for painting                        
                    </param>
                    <param>
                        dx  the destination <i>x</i> coordinate                        
                    </param>
                    <param>
                        dy  the destination <i>y</i> coordinate                        
                    </param>
                    <param>
                        state which state to paint                        
                    </param>
                </javadoc>
                <method name="paintSkin" type="void" line="401">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="dx" type="int"/>
                        <param name="dy" type="int"/>
                        <param name="state" type="State"/>
                    </params>
                    <scope line="402"/>
                </method>
                <javadoc line="407">
                    Paint a skin in an area defined by a rectangle.                    
                    <param>
                        g the graphics context to use for painting                        
                    </param>
                    <param>
                        r     a <code>Rectangle</code> defining the area to fill,
                          may cause the image to be stretched or tiled                        
                    </param>
                    <param>
                        state which state to paint                        
                    </param>
                </javadoc>
                <method name="paintSkin" type="void" line="414">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="r" type="Rectangle"/>
                        <param name="state" type="State"/>
                    </params>
                </method>
                <javadoc line="417">
                    Paint a skin at a defined position and size
                      This method supports animation.                    
                    <param>
                        g   the graphics context to use for painting                        
                    </param>
                    <param>
                        dx  the destination <i>x</i> coordinate                        
                    </param>
                    <param>
                        dy  the destination <i>y</i> coordinate                        
                    </param>
                    <param>
                        dw  the width of the area to fill, may cause
                          the image to be stretched or tiled                        
                    </param>
                    <param>
                        dh  the height of the area to fill, may cause
                          the image to be stretched or tiled                        
                    </param>
                    <param>
                        state which state to paint                        
                    </param>
                </javadoc>
                <method name="paintSkin" type="void" line="429">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="dx" type="int"/>
                        <param name="dy" type="int"/>
                        <param name="dw" type="int"/>
                        <param name="dh" type="int"/>
                        <param name="state" type="State"/>
                    </params>
                    <scope line="430"/>
                    <scope line="433"/>
                </method>
                <javadoc line="437">
                    Paint a skin at a defined position and size. This method
                      does not trigger animation. It is needed for the animation
                      support.                    
                    <param>
                        g   the graphics context to use for painting                        
                    </param>
                    <param>
                        dx  the destination <i>x</i> coordinate.                        
                    </param>
                    <param>
                        dy  the destination <i>y</i> coordinate.                        
                    </param>
                    <param>
                        dw  the width of the area to fill, may cause
                          the image to be stretched or tiled                        
                    </param>
                    <param>
                        dh  the height of the area to fill, may cause
                          the image to be stretched or tiled                        
                    </param>
                    <param>
                        state which state to paint                        
                    </param>
                </javadoc>
                <method name="paintSkinRaw" type="void" line="450">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="dx" type="int"/>
                        <param name="dy" type="int"/>
                        <param name="dw" type="int"/>
                        <param name="dh" type="int"/>
                        <param name="state" type="State"/>
                    </params>
                </method>
                <javadoc line="453">
                    Paint a skin at a defined position and size                    
                    <param>
                        g   the graphics context to use for painting                        
                    </param>
                    <param>
                        dx  the destination <i>x</i> coordinate                        
                    </param>
                    <param>
                        dy  the destination <i>y</i> coordinate                        
                    </param>
                    <param>
                        dw  the width of the area to fill, may cause
                          the image to be stretched or tiled                        
                    </param>
                    <param>
                        dh  the height of the area to fill, may cause
                          the image to be stretched or tiled                        
                    </param>
                    <param>
                        state which state to paint                        
                    </param>
                    <param>
                        borderFill should test if the component uses a border fill
                          and skip painting if it is                        
                    </param>
                </javadoc>
                <method name="paintSkin" type="void" line="466">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="dx" type="int"/>
                        <param name="dy" type="int"/>
                        <param name="dw" type="int"/>
                        <param name="dh" type="int"/>
                        <param name="state" type="State"/>
                        <param name="borderFill" type="boolean"/>
                    </params>
                    <scope line="467"/>
                </method>
            </class>
            <class name="SkinPainter" line="473">
                <extends class="CachedPainter"/>
                <method name="SkinPainter" type="constructor" line="474"/>
                <method name="flush" type="void" line="478"/>
                <method name="paintToImage" type="void" line="481">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="image" type="Image"/>
                        <param name="g" type="Graphics"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="args" type="Object[]"/>
                    </params>
                    <declaration name="accEnabled" type="boolean" line="482"/>
                    <declaration name="skin" type="Skin" line="483"/>
                    <declaration name="part" type="Part" line="484"/>
                    <declaration name="state" type="State" line="485"/>
                    <scope line="486"/>
                    <scope line="489"/>
                    <declaration name="bi" type="BufferedImage" line="492"/>
                    <declaration name="raster" type="WritableRaster" line="493"/>
                    <declaration name="dbi" type="DataBufferInt" line="494"/>
                </method>
                <method name="createImage" type="Image" line="498">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="config" type="GraphicsConfiguration"/>
                        <param name="args" type="Object[]"/>
                    </params>
                </method>
            </class>
            <class name="GlyphButton" line="502">
                <extends class="JButton"/>
                <declaration name="skin" type="Skin" line="503"/>
                <method name="GlyphButton" type="constructor" line="504">
                    <params>
                        <param name="parent" type="Component"/>
                        <param name="part" type="Part"/>
                    </params>
                    <declaration name="xp" type="XPStyle" line="505"/>
                </method>
                <method name="isFocusTraversable" type="boolean" line="513"/>
                <method name="getState" type="State" line="516">
                    <declaration name="state" type="State" line="517"/>
                    <scope line="518"/>
                    <scope line="521"/>
                    <scope line="524"/>
                </method>
                <method name="paintComponent" type="void" line="529">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                    <declaration name="d" type="Dimension" line="530"/>
                </method>
                <method name="setPart" type="void" line="533">
                    <params>
                        <param name="parent" type="Component"/>
                        <param name="part" type="Part"/>
                    </params>
                    <declaration name="xp" type="XPStyle" line="534"/>
                </method>
                <method name="paintBorder" type="void" line="539">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                </method>
            </class>
            <method name="XPStyle" type="constructor" line="542"/>
            <method name="getBoolean" type="boolean" line="547">
                <params>
                    <param name="c" type="Component"/>
                    <param name="part" type="Part"/>
                    <param name="state" type="State"/>
                    <param name="prop" type="Prop"/>
                </params>
            </method>
            <method name="getPartSize" type="Dimension" line="550">
                <params>
                    <param name="part" type="Part"/>
                    <param name="state" type="State"/>
                </params>
            </method>
            <method name="getSysBoolean" type="boolean" line="553">
                <params>
                    <param name="prop" type="Prop"/>
                </params>
            </method>
        </class>
    </source>