<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.windows">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic.BasicTextFieldUI"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf.UIResource"/>
        <import package="sun.swing.DefaultLookup"/>
        <class name="WindowsTextFieldUI" line="40">
            <extends class="BasicTextFieldUI"/>
            <javadoc line="40">
                Provides the Windows look and feel for a text field.  This
                  is basically the following customizations to the default
                  look-and-feel.
                  &lt;ul&gt;
                  &lt;li&gt;The border is beveled (using the standard control color).
                  &lt;li&gt;The background is white by default.
                  &lt;li&gt;The highlight color is a dark color, blue by default.
                  &lt;li&gt;The foreground color is high contrast in the selected
                  area, white by default.  The unselected foreground is black.
                  &lt;li&gt;The cursor blinks at about 1/2 second intervals.
                  &lt;li&gt;The entire value is selected when focus is gained.
                  &lt;li&gt;Shift-left-arrow and shift-right-arrow extend selection
                  &lt;li&gt;Cntrl-left-arrow and cntrl-right-arrow act like home and
                  end respectively.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases.  The current serialization support is appropriate
                  for short term storage or RMI between applications running the same
                  version of Swing.  A future release of Swing will provide support for
                  long term persistence.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="68">
                Creates a UI for a JTextField.                
                <param>
                    c the text field                    
                </param>
                <return>
                    the UI                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="74">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="78">
                Paints a background for the view.  This will only be
                  called if isOpaque() on the associated component is
                  true.  The default is to paint the background color
                  of the component.                
                <param>
                    g the graphics context                    
                </param>
            </javadoc>
            <method name="paintBackground" type="void" line="86">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="90">
                Creates the caret for a field.                
                <return>
                    the caret                    
                </return>
            </javadoc>
            <method name="createCaret" type="Caret" line="95"/>
            <class name="WindowsFieldCaret" line="99">
                <extends class="DefaultCaret"/>
                <implements interface="UIResource"/>
                <javadoc line="99">
                    WindowsFieldCaret has different scrolling behavior than
                      DefaultCaret.                    
                </javadoc>
                <method name="WindowsFieldCaret" type="constructor" line="105"/>
                <javadoc line="109">
                    Adjusts the visibility of the caret according to
                      the windows feel which seems to be to move the
                      caret out into the field by about a quarter of
                      a field length if not visible.                    
                </javadoc>
                <method name="adjustVisibility" type="void" line="115">
                    <params>
                        <param name="r" type="Rectangle"/>
                    </params>
                </method>
                <javadoc line="119">
                    Gets the painter for the Highlighter.                    
                    <return>
                        the painter                        
                    </return>
                </javadoc>
                <method name="getSelectionPainter" type="Highlighter.HighlightPainter" line="124"/>
                <class name="SafeScroller" line="129">
                    <implements interface="Runnable"/>
                    <method name="SafeScroller" type="constructor" line="130">
                        <params>
                            <param name="r" type="Rectangle"/>
                        </params>
                    </method>
                    <method name="run" type="void" line="134">
                        <comment line="139">
                            PENDING: We need to expose the bias in DefaultCaret.                            
                        </comment>
                        <comment line="155">
                            If we scroll, our visual location will have changed,                            
                        </comment>
                        <comment line="156">
                            but we won&apos;t have updated our internal location as                            
                        </comment>
                        <comment line="157">
                            the model hasn&apos;t changed. This checks for the change,                            
                        </comment>
                        <comment line="158">
                            and if necessary, resets the internal location.                            
                        </comment>
                        <declaration name="field" type="JTextField" line="135"/>
                        <scope line="136">
                            <declaration name="ui" type="TextUI" line="137"/>
                            <declaration name="dot" type="int" line="138"/>
                            <declaration name="bias" type="Position.Bias" line="140"/>
                            <declaration name="startRect" type="Rectangle" line="141"/>
                            <scope line="142"/>
                            <scope line="144"/>
                            <declaration name="i" type="Insets" line="146"/>
                            <declaration name="vis" type="BoundedRangeModel" line="147"/>
                            <declaration name="x" type="int" line="148"/>
                            <declaration name="quarterSpan" type="int" line="149"/>
                            <scope line="150"/>
                            <scope line="152"/>
                            <scope line="159">
                                <scope line="160">
                                    <declaration name="endRect" type="Rectangle" line="161"/>
                                    <scope line="163"/>
                                </scope>
                                <scope line="166"/>
                            </scope>
                        </scope>
                    </method>
                    <declaration name="r" type="Rectangle" line="171"/>
                </class>
            </class>
        </class>
    </source>