<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.windows">
        <import package="java.awt"/>
        <import package="java.beans"/>
        <import package="java.lang.ref"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <class name="DesktopProperty" line="7">
            <implements interface="UIDefaults.ActiveValue"/>
            <javadoc line="7">
                Wrapper for a value from the desktop. The value is lazily looked up, and
                  can be accessed using the &lt;code&gt;UIManager.ActiveValue&lt;/code&gt; method
                  &lt;code&gt;createValue&lt;/code&gt;. If the underlying desktop property changes this
                  will force the UIs to update all known Frames. You can invoke
                  &lt;code&gt;invalidate&lt;/code&gt; to force the value to be fetched again.                
            </javadoc>
            <declaration name="updatePending" type="boolean" line="15"/>
            <javadoc line="15">
                Indicates if an updateUI call is pending.                
            </javadoc>
            <declaration name="queue" type="ReferenceQueue&lt;DesktopProperty&gt;" line="19"/>
            <javadoc line="19">
                ReferenceQueue of unreferenced WeakPCLs.                
            </javadoc>
            <declaration name="pcl" type="WeakPCL" line="23"/>
            <javadoc line="23">
                PropertyChangeListener attached to the Toolkit.                
            </javadoc>
            <declaration name="key" type="String" line="27"/>
            <javadoc line="27">
                Key used to lookup value from desktop.                
            </javadoc>
            <declaration name="value" type="Object" line="31"/>
            <javadoc line="31">
                Value to return.                
            </javadoc>
            <declaration name="fallback" type="Object" line="35"/>
            <javadoc line="35">
                Fallback value in case we get null from desktop.                
            </javadoc>
            <javadoc line="39">
                Cleans up any lingering state held by unrefeernced
                  DesktopProperties.                
            </javadoc>
            <method name="flushUnreferencedProperties" type="void" line="43">
                <declaration name="pcl" type="WeakPCL" line="44"/>
                <scope line="45"/>
            </method>
            <javadoc line="49">
                Sets whether or not an updateUI call is pending.                
            </javadoc>
            <method name="setUpdatePending" type="void" line="52">
                <params>
                    <param name="update" type="boolean"/>
                </params>
            </method>
            <javadoc line="55">
                Returns true if a UI update is pending.                
            </javadoc>
            <method name="isUpdatePending" type="boolean" line="58"/>
            <javadoc line="61">
                Updates the UIs of all the known Frames.                
            </javadoc>
            <method name="updateAllUIs" type="void" line="64">
                <declaration name="uiClass" type="Class" line="65"/>
                <scope line="66"/>
                <declaration name="appFrames" type="Frame" line="69"/>
                <scope line="70"/>
            </method>
            <javadoc line="74">
                Updates the UI of the passed in window and all its children.                
            </javadoc>
            <method name="updateWindowUI" type="void" line="77">
                <params>
                    <param name="window" type="Window"/>
                </params>
                <declaration name="ownedWins" type="Window" line="79"/>
                <scope line="80"/>
            </method>
            <javadoc line="84">
                Creates a DesktopProperty.                
                <param>
                    key Key used in looking up desktop value.                    
                </param>
                <param>
                    fallback Value used if desktop property is null.                    
                </param>
            </javadoc>
            <method name="DesktopProperty" type="constructor" line="89">
                <params>
                    <param name="key" type="String"/>
                    <param name="fallback" type="Object"/>
                </params>
            </method>
            <javadoc line="94">
                UIManager.LazyValue method, returns the value from the desktop
                  or the fallback value if the desktop value is null.                
            </javadoc>
            <method name="createValue" type="Object" line="98">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <scope line="99">
                    <scope line="101"/>
                </scope>
            </method>
            <javadoc line="107">
                Returns the value from the desktop.                
            </javadoc>
            <method name="getValueFromDesktop" type="Object" line="110">
                <declaration name="toolkit" type="Toolkit" line="111"/>
                <scope line="112"/>
            </method>
            <javadoc line="118">
                Returns the value to use if the desktop property is null.                
            </javadoc>
            <method name="getDefaultValue" type="Object" line="121"/>
            <javadoc line="124">
                Invalidates the current value.                
                <param>
                    laf the LookAndFeel this DesktopProperty was created with                    
                </param>
            </javadoc>
            <method name="invalidate" type="void" line="128">
                <params>
                    <param name="laf" type="LookAndFeel"/>
                </params>
            </method>
            <javadoc line="131">
                Invalides the current value so that the next invocation of
                  &lt;code&gt;createValue&lt;/code&gt; will ask for the property again.                
            </javadoc>
            <method name="invalidate" type="void" line="135"/>
            <javadoc line="138">
                Requests that all components in the GUI hierarchy be updated
                  to reflect dynamic changes in this look&amp;feel.  This update occurs
                  by uninstalling and re-installing the UI objects. Requests are
                  batched and collapsed into a single update pass because often
                  many desktop properties will change at once.                
            </javadoc>
            <method name="updateUI" type="void" line="145">
                <scope line="146">
                    <anonymous_class line="148">
                        <method name="run" type="void" line="149"/>
                    </anonymous_class>
                    <declaration name="uiUpdater" type="Runnable" line="148"/>
                </scope>
            </method>
            <javadoc line="158">
                Configures the value as appropriate for a defaults property in
                  the UIDefaults table.                
            </javadoc>
            <method name="configureValue" type="Object" line="162">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <scope line="163">
                    <scope line="164"/>
                    <scope line="167"/>
                    <scope line="170"/>
                    <scope line="173"/>
                </scope>
            </method>
            <javadoc line="179">
                Returns the key used to lookup the desktop properties value.                
            </javadoc>
            <method name="getKey" type="String" line="182"/>
            <class name="WeakPCL" line="185">
                <extends class="WeakReference">
                    <type_params>
                        <type_param name="DesktopProperty"/>
                    </type_params>
                </extends>
                <implements interface="PropertyChangeListener"/>
                <javadoc line="185">
                    As there is typically only one Toolkit, the PropertyChangeListener
                      is handled via a WeakReference so as not to pin down the
                      DesktopProperty.                    
                </javadoc>
                <declaration name="key" type="String" line="191"/>
                <declaration name="laf" type="LookAndFeel" line="192"/>
                <method name="WeakPCL" type="constructor" line="193">
                    <params>
                        <param name="target" type="DesktopProperty"/>
                        <param name="key" type="String"/>
                        <param name="laf" type="LookAndFeel"/>
                    </params>
                </method>
                <method name="propertyChange" type="void" line="198">
                    <params>
                        <param name="pce" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="property" type="DesktopProperty" line="199"/>
                    <scope line="200"/>
                    <scope line="203"/>
                </method>
                <method name="dispose" type="void" line="208"/>
            </class>
        </class>
    </source>