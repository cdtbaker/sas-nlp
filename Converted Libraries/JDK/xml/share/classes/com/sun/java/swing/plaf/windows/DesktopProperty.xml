<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.windows">
        <import package="java.awt"/>
        <import package="java.beans"/>
        <import package="java.lang.ref"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <class name="DesktopProperty" line="33">
            <comment line="42">
                NOTE: Don&apos;t rely on this class staying in this location. It is likely                
            </comment>
            <comment line="43">
                to move to a different package in the future.                
            </comment>
            <implements interface="UIDefaults.ActiveValue"/>
            <javadoc line="33">
                Wrapper for a value from the desktop. The value is lazily looked up, and
                  can be accessed using the &lt;code&gt;UIManager.ActiveValue&lt;/code&gt; method
                  &lt;code&gt;createValue&lt;/code&gt;. If the underlying desktop property changes this
                  will force the UIs to update all known Frames. You can invoke
                  &lt;code&gt;invalidate&lt;/code&gt; to force the value to be fetched again.                
            </javadoc>
            <declaration name="updatePending" type="boolean" line="44"/>
            <javadoc line="44">
                Indicates if an updateUI call is pending.                
            </javadoc>
            <declaration name="queue" type="ReferenceQueue&lt;DesktopProperty&gt;" line="49"/>
            <javadoc line="49">
                ReferenceQueue of unreferenced WeakPCLs.                
            </javadoc>
            <declaration name="pcl" type="WeakPCL" line="54"/>
            <javadoc line="54">
                PropertyChangeListener attached to the Toolkit.                
            </javadoc>
            <declaration name="key" type="String" line="58"/>
            <javadoc line="58">
                Key used to lookup value from desktop.                
            </javadoc>
            <declaration name="value" type="Object" line="62"/>
            <javadoc line="62">
                Value to return.                
            </javadoc>
            <declaration name="fallback" type="Object" line="66"/>
            <javadoc line="66">
                Fallback value in case we get null from desktop.                
            </javadoc>
            <javadoc line="72">
                Cleans up any lingering state held by unrefeernced
                  DesktopProperties.                
            </javadoc>
            <method name="flushUnreferencedProperties" type="void" line="76">
                <declaration name="pcl" type="WeakPCL" line="77"/>
                <scope line="79"/>
            </method>
            <javadoc line="85">
                Sets whether or not an updateUI call is pending.                
            </javadoc>
            <method name="setUpdatePending" type="void" line="88">
                <params>
                    <param name="update" type="boolean"/>
                </params>
            </method>
            <javadoc line="92">
                Returns true if a UI update is pending.                
            </javadoc>
            <method name="isUpdatePending" type="boolean" line="95"/>
            <javadoc line="99">
                Updates the UIs of all the known Frames.                
            </javadoc>
            <method name="updateAllUIs" type="void" line="102">
                <comment line="103">
                    Check if the current UI is WindowsLookAndfeel and flush the XP style map.                    
                </comment>
                <comment line="104">
                    Note: Change the package test if this class is moved to a different package.                    
                </comment>
                <declaration name="uiClass" type="Class" line="105"/>
                <scope line="106"/>
                <declaration name="appFrames" type="Frame" line="109"/>
                <scope line="110"/>
            </method>
            <javadoc line="115">
                Updates the UI of the passed in window and all its children.                
            </javadoc>
            <method name="updateWindowUI" type="void" line="118">
                <params>
                    <param name="window" type="Window"/>
                </params>
                <declaration name="ownedWins" type="Window" line="120"/>
                <scope line="121"/>
            </method>
            <javadoc line="127">
                Creates a DesktopProperty.                
                <param>
                    key Key used in looking up desktop value.                    
                </param>
                <param>
                    fallback Value used if desktop property is null.                    
                </param>
            </javadoc>
            <method name="DesktopProperty" type="constructor" line="133">
                <params>
                    <param name="key" type="String"/>
                    <param name="fallback" type="Object"/>
                </params>
                <comment line="136">
                    The only sure fire way to clear our references is to create a                    
                </comment>
                <comment line="137">
                    Thread and wait for a reference to be added to the queue.                    
                </comment>
                <comment line="138">
                    Because it is so rare that you will actually change the look                    
                </comment>
                <comment line="139">
                    and feel, this stepped is forgoed and a middle ground of                    
                </comment>
                <comment line="140">
                    flushing references from the constructor is instead done.                    
                </comment>
                <comment line="141">
                    The implication is that once one DesktopProperty is created                    
                </comment>
                <comment line="142">
                    there will most likely be n (number of DesktopProperties created                    
                </comment>
                <comment line="143">
                    by the LookAndFeel) WeakPCLs around, but this number will not                    
                </comment>
                <comment line="144">
                    grow past n.                    
                </comment>
            </method>
            <javadoc line="148">
                UIManager.LazyValue method, returns the value from the desktop
                  or the fallback value if the desktop value is null.                
            </javadoc>
            <method name="createValue" type="Object" line="152">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <scope line="153">
                    <scope line="155"/>
                </scope>
            </method>
            <javadoc line="162">
                Returns the value from the desktop.                
            </javadoc>
            <method name="getValueFromDesktop" type="Object" line="165">
                <declaration name="toolkit" type="Toolkit" line="166"/>
                <scope line="168"/>
            </method>
            <javadoc line="176">
                Returns the value to use if the desktop property is null.                
            </javadoc>
            <method name="getDefaultValue" type="Object" line="179"/>
            <javadoc line="183">
                Invalidates the current value.                
                <param>
                    laf the LookAndFeel this DesktopProperty was created with                    
                </param>
            </javadoc>
            <method name="invalidate" type="void" line="188">
                <params>
                    <param name="laf" type="LookAndFeel"/>
                </params>
            </method>
            <javadoc line="192">
                Invalides the current value so that the next invocation of
                  &lt;code&gt;createValue&lt;/code&gt; will ask for the property again.                
            </javadoc>
            <method name="invalidate" type="void" line="196"/>
            <javadoc line="200">
                Requests that all components in the GUI hierarchy be updated
                  to reflect dynamic changes in this look&amp;feel.  This update occurs
                  by uninstalling and re-installing the UI objects. Requests are
                  batched and collapsed into a single update pass because often
                  many desktop properties will change at once.                
            </javadoc>
            <method name="updateUI" type="void" line="207">
                <scope line="208">
                    <anonymous_class line="210">
                        <method name="run" type="void" line="211"/>
                    </anonymous_class>
                    <declaration name="uiUpdater" type="Runnable" line="210"/>
                </scope>
            </method>
            <javadoc line="220">
                Configures the value as appropriate for a defaults property in
                  the UIDefaults table.                
            </javadoc>
            <method name="configureValue" type="Object" line="224">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <scope line="225">
                    <scope line="226"/>
                    <scope line="229"/>
                    <scope line="232"/>
                    <scope line="235"/>
                </scope>
            </method>
            <javadoc line="242">
                Returns the key used to lookup the desktop properties value.                
            </javadoc>
            <method name="getKey" type="String" line="245"/>
            <class name="WeakPCL" line="251">
                <extends class="WeakReference">
                    <type_params>
                        <type_param name="DesktopProperty"/>
                    </type_params>
                </extends>
                <implements interface="PropertyChangeListener"/>
                <javadoc line="251">
                    As there is typically only one Toolkit, the PropertyChangeListener
                      is handled via a WeakReference so as not to pin down the
                      DesktopProperty.                    
                </javadoc>
                <declaration name="key" type="String" line="258"/>
                <declaration name="laf" type="LookAndFeel" line="259"/>
                <method name="WeakPCL" type="constructor" line="261">
                    <params>
                        <param name="target" type="DesktopProperty"/>
                        <param name="key" type="String"/>
                        <param name="laf" type="LookAndFeel"/>
                    </params>
                </method>
                <method name="propertyChange" type="void" line="267">
                    <params>
                        <param name="pce" type="PropertyChangeEvent"/>
                    </params>
                    <comment line="271">
                        The property was GC&apos;ed, we&apos;re no longer interested in                        
                    </comment>
                    <comment line="272">
                        PropertyChanges, remove the listener.                        
                    </comment>
                    <declaration name="property" type="DesktopProperty" line="268"/>
                    <scope line="270"/>
                    <scope line="275"/>
                </method>
                <method name="dispose" type="void" line="281"/>
            </class>
        </class>
    </source>