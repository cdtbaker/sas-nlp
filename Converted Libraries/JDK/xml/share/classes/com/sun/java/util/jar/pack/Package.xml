<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="com.sun.java.util.jar.pack.Attribute.Layout"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.ClassEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Index"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.LiteralEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Utf8Entry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Entry"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.SequenceInputStream"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.jar.JarFile"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="Package" line="30">
            <javadoc line="30">
                Define the main data structure transmitted by pack/unpack.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="verbose" type="int" line="35"/>
            <scope line="36">
                <declaration name="pmap" type="PropMap" line="37"/>
            </scope>
            <declaration name="magic" type="int" line="40"/>
            <declaration name="package_minver" type="int" line="41"/>
            <declaration name="package_majver" type="int" line="42"/>
            <declaration name="default_modtime" type="int" line="43"/>
            <declaration name="default_options" type="int" line="44"/>
            <declaration name="default_class_majver" type="short" line="45"/>
            <declaration name="default_class_minver" type="short" line="46"/>
            <declaration name="min_class_majver" type="short" line="47"/>
            <declaration name="min_class_minver" type="short" line="48"/>
            <declaration name="max_class_majver" type="short" line="49"/>
            <declaration name="max_class_minver" type="short" line="50"/>
            <declaration name="observed_max_class_majver" type="short" line="51"/>
            <declaration name="observed_max_class_minver" type="short" line="52"/>
            <declaration name="cp" type="ConstantPool.IndexGroup" line="53"/>
            <method name="Package" type="constructor" line="54"/>
            <method name="reset" type="void" line="59"/>
            <method name="getPackageVersion" type="int" line="65"/>
            <declaration name="attrCodeEmpty" type="Attribute.Layout" line="68"/>
            <declaration name="attrInnerClassesEmpty" type="Attribute.Layout" line="69"/>
            <declaration name="attrSourceFileSpecial" type="Attribute.Layout" line="70"/>
            <declaration name="attrDefs" type="Map&lt;Attribute.Layout,Attribute&gt;" line="71"/>
            <scope line="72">
                <declaration name="ad" type="Map&lt;Layout,Attribute&gt;" line="73"/>
            </scope>
            <method name="getDefaultClassVersion" type="int" line="79"/>
            <javadoc line="82">
                Return the highest version number of all classes,
                  or 0 if there are no classes.                
            </javadoc>
            <method name="getHighestClassVersion" type="int" line="86">
                <declaration name="res" type="int" line="87"/>
                <scope line="88">
                    <declaration name="ver" type="int" line="89"/>
                </scope>
            </method>
            <javadoc line="94">
                Convenience function to choose an archive version based
                  on the class file versions observed within the archive.                
            </javadoc>
            <method name="choosePackageVersion" type="void" line="98">
                <declaration name="classver" type="int" line="100"/>
                <scope line="101"/>
                <scope line="105"/>
                <scope line="109"/>
            </method>
            <method name="checkVersion" type="void" line="114">
                <scope line="115">
                    <declaration name="gotMag" type="String" line="116"/>
                    <declaration name="expMag" type="String" line="117"/>
                </scope>
                <scope line="120">
                    <declaration name="gotVer" type="String" line="121"/>
                    <declaration name="expVer" type="String" line="122"/>
                </scope>
            </method>
            <declaration name="classes" type="ArrayList&lt;Package.Class&gt;" line="126"/>
            <method name="getClasses" type="List<Package.Class>" line="127"/>
            <class name="Class" line="130">
                <extends class="Attribute.Holder"/>
                <implements interface="Comparable"/>
                <method name="getPackage" type="Package" line="131"/>
                <declaration name="file" type="File" line="134"/>
                <declaration name="magic" type="int" line="135"/>
                <declaration name="minver" type="short" line="136"/>
                <declaration name="cpMap" type="Entry[]" line="137"/>
                <declaration name="thisClass" type="ClassEntry" line="138"/>
                <declaration name="superClass" type="ClassEntry" line="139"/>
                <declaration name="interfaces" type="ClassEntry[]" line="140"/>
                <declaration name="fields" type="ArrayList&lt;Field&gt;" line="141"/>
                <declaration name="methods" type="ArrayList&lt;Method&gt;" line="142"/>
                <declaration name="innerClasses" type="ArrayList&lt;InnerClass&gt;" line="143"/>
                <method name="Class" type="constructor" line="144">
                    <params>
                        <param name="flags" type="int"/>
                        <param name="thisClass" type="ClassEntry"/>
                        <param name="superClass" type="ClassEntry"/>
                        <param name="interfaces" type="ClassEntry[]"/>
                    </params>
                    <declaration name="added" type="boolean" line="152"/>
                </method>
                <method name="Class" type="constructor" line="155">
                    <params>
                        <param name="classFile" type="String"/>
                    </params>
                </method>
                <method name="getFields" type="List<Field>" line="158"/>
                <method name="getMethods" type="List<Method>" line="161"/>
                <method name="getName" type="String" line="164"/>
                <method name="getVersion" type="int" line="167"/>
                <method name="getVersionString" type="String" line="170"/>
                <method name="compareTo" type="int" line="173">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="that" type="Class" line="174"/>
                    <declaration name="n0" type="String" line="175"/>
                    <declaration name="n1" type="String" line="176"/>
                </method>
                <method name="getObviousSourceFile" type="String" line="179"/>
                <method name="transformSourceFile" type="void" line="182">
                    <params>
                        <param name="minimize" type="boolean"/>
                    </params>
                    <declaration name="olda" type="Attribute" line="183"/>
                    <declaration name="obvious" type="String" line="185"/>
                    <declaration name="ref" type="List&lt;Entry&gt;" line="186"/>
                    <declaration name="sfName" type="Utf8Entry" line="188"/>
                    <declaration name="a" type="Attribute" line="189"/>
                    <scope line="190">
                        <scope line="191"/>
                        <scope line="195">
                            <declaration name="bytes" type="byte[]" line="196"/>
                            <declaration name="f" type="Object" line="198"/>
                        </scope>
                    </scope>
                    <scope line="203">
                        <scope line="204"/>
                        <scope line="207"/>
                    </scope>
                    <scope line="211">
                        <declaration name="newAttrs" type="List&lt;Attribute&gt;" line="213"/>
                        <declaration name="where" type="int" line="214"/>
                    </scope>
                </method>
                <method name="minimizeSourceFile" type="void" line="219"/>
                <method name="expandSourceFile" type="void" line="222"/>
                <method name="getCPMap" type="Entry[]" line="225"/>
                <method name="setCPMap" type="void" line="228">
                    <params>
                        <param name="cpMap" type="Entry[]"/>
                    </params>
                </method>
                <method name="hasInnerClasses" type="boolean" line="231"/>
                <method name="getInnerClasses" type="List<InnerClass>" line="234"/>
                <method name="setInnerClasses" type="void" line="237">
                    <params>
                        <param name="ics" type="Collection<InnerClass>"/>
                    </params>
                    <declaration name="a" type="Attribute" line="239"/>
                </method>
                <javadoc line="243">
                    Given a global map of ICs (keyed by thisClass),
                      compute the subset of its Map.values which are
                      required to be present in the local InnerClasses
                      attribute.  Perform this calculation without
                      reference to any actual InnerClasses attribute.
                      &lt;p&gt;
                      The order of the resulting list is consistent
                      with that of Package.this.allInnerClasses.                    
                </javadoc>
                <method name="computeGloballyImpliedICs" type="List<InnerClass>" line="253">
                    <declaration name="cpRefs" type="Set&lt;Entry&gt;" line="254"/>
                    <scope line="255">
                        <declaration name="innerClassesSaved" type="ArrayList&lt;InnerClass&gt;" line="256"/>
                    </scope>
                    <declaration name="icRefs" type="Set&lt;Entry&gt;" line="262"/>
                    <scope line="263">
                        <scope line="265">
                            <declaration name="ic" type="InnerClass" line="266"/>
                        </scope>
                    </scope>
                    <declaration name="impliedICs" type="ArrayList&lt;InnerClass&gt;" line="272"/>
                    <scope line="273">
                        <scope line="274"/>
                    </scope>
                </method>
                <method name="computeICdiff" type="List<InnerClass>" line="281">
                    <declaration name="impliedICs" type="List&lt;InnerClass&gt;" line="282"/>
                    <declaration name="actualICs" type="List&lt;InnerClass&gt;" line="283"/>
                    <scope line="285"/>
                    <scope line="288"/>
                    <declaration name="center" type="Set&lt;InnerClass&gt;" line="291"/>
                </method>
                <javadoc line="297">
                    When packing, anticipate the effect of expandLocalICs.
                      Replace the local ICs by their symmetric difference
                      with the globally implied ICs for this class; if this
                      difference is empty, remove the local ICs altogether.
                      &lt;p&gt;
                      An empty local IC attribute is reserved to signal
                      the unpacker to delete the attribute altogether,
                      so a missing local IC attribute signals the unpacker
                      to use the globally implied ICs changed.                    
                </javadoc>
                <method name="minimizeLocalICs" type="void" line="308">
                    <declaration name="diff" type="List&lt;InnerClass&gt;" line="309"/>
                    <declaration name="actualICs" type="List&lt;InnerClass&gt;" line="310"/>
                    <declaration name="localICs" type="List&lt;InnerClass&gt;" line="311"/>
                    <scope line="312">
                        <scope line="314"/>
                    </scope>
                    <scope line="318"/>
                    <scope line="321"/>
                </method>
                <javadoc line="327">
                    When unpacking, undo the effect of minimizeLocalICs.
                      Must return negative if any IC tuples may have been deleted.
                      Otherwise, return positive if any IC tuples were added.                    
                </javadoc>
                <method name="expandLocalICs" type="int" line="332">
                    <declaration name="localICs" type="List&lt;InnerClass&gt;" line="333"/>
                    <declaration name="actualICs" type="List&lt;InnerClass&gt;" line="334"/>
                    <declaration name="changed" type="int" line="335"/>
                    <scope line="336">
                        <declaration name="impliedICs" type="List&lt;InnerClass&gt;" line="337"/>
                        <scope line="338"/>
                        <scope line="342"/>
                    </scope>
                    <scope line="347"/>
                    <scope line="351"/>
                </method>
                <class name="Member" line="358">
                    <extends class="Attribute.Holder"/>
                    <implements interface="Comparable"/>
                    <declaration name="descriptor" type="DescriptorEntry" line="359"/>
                    <method name="Member" type="constructor" line="360">
                        <params>
                            <param name="flags" type="int"/>
                            <param name="descriptor" type="DescriptorEntry"/>
                        </params>
                    </method>
                    <method name="thisClass" type="Class" line="364"/>
                    <method name="getDescriptor" type="DescriptorEntry" line="367"/>
                    <method name="getName" type="String" line="370"/>
                    <method name="getType" type="String" line="373"/>
                    <method name="getCPMap" type="Entry[]" line="376"/>
                    <method name="visitRefs" type="void" line="379">
                        <params>
                            <param name="mode" type="int"/>
                            <param name="refs" type="Collection<Entry>"/>
                        </params>
                        <scope line="381"/>
                        <scope line="385"/>
                    </method>
                    <method name="toString" type="String" line="390"/>
                </class>
                <class name="Field" line="394">
                    <extends class="Member"/>
                    <declaration name="order" type="int" line="395"/>
                    <method name="Field" type="constructor" line="396">
                        <params>
                            <param name="flags" type="int"/>
                            <param name="descriptor" type="DescriptorEntry"/>
                        </params>
                        <declaration name="added" type="boolean" line="400"/>
                    </method>
                    <method name="getLiteralTag" type="byte" line="404"/>
                    <method name="compareTo" type="int" line="407">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                        <declaration name="that" type="Field" line="408"/>
                    </method>
                </class>
                <class name="Method" line="412">
                    <extends class="Member"/>
                    <declaration name="code" type="Code" line="413"/>
                    <method name="Method" type="constructor" line="414">
                        <params>
                            <param name="flags" type="int"/>
                            <param name="descriptor" type="DescriptorEntry"/>
                        </params>
                        <declaration name="added" type="boolean" line="418"/>
                    </method>
                    <method name="trimToSize" type="void" line="421"/>
                    <method name="getArgumentSize" type="int" line="425">
                        <declaration name="argSize" type="int" line="426"/>
                        <declaration name="thisSize" type="int" line="427"/>
                    </method>
                    <method name="compareTo" type="int" line="430">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                        <declaration name="that" type="Method" line="431"/>
                    </method>
                    <method name="strip" type="void" line="434">
                        <params>
                            <param name="attrName" type="String"/>
                        </params>
                    </method>
                    <method name="visitRefs" type="void" line="439">
                        <params>
                            <param name="mode" type="int"/>
                            <param name="refs" type="Collection<Entry>"/>
                        </params>
                        <scope line="441">
                            <scope line="442"/>
                        </scope>
                    </method>
                </class>
                <method name="trimToSize" type="void" line="449">
                    <scope line="451">
                        <declaration name="members" type="ArrayList" line="452"/>
                        <scope line="455">
                            <declaration name="m" type="Member" line="456"/>
                        </scope>
                    </scope>
                    <scope line="460"/>
                </method>
                <method name="strip" type="void" line="464">
                    <params>
                        <param name="attrName" type="String"/>
                    </params>
                    <scope line="466">
                        <declaration name="members" type="ArrayList" line="467"/>
                        <scope line="469">
                            <declaration name="m" type="Member" line="470"/>
                        </scope>
                    </scope>
                </method>
                <method name="visitRefs" type="void" line="476">
                    <params>
                        <param name="mode" type="int"/>
                        <param name="refs" type="Collection<Entry>"/>
                    </params>
                    <scope line="481">
                        <declaration name="members" type="ArrayList" line="482"/>
                        <scope line="484">
                            <declaration name="m" type="Member" line="485"/>
                            <declaration name="ok" type="boolean" line="486"/>
                            <scope line="487"/>
                            <scope line="491"/>
                        </scope>
                    </scope>
                </method>
                <method name="visitInnerClassRefs" type="void" line="499">
                    <params>
                        <param name="mode" type="int"/>
                        <param name="refs" type="Collection<Entry>"/>
                    </params>
                </method>
                <method name="finishReading" type="void" line="502"/>
                <method name="initFile" type="void" line="506">
                    <params>
                        <param name="file" type="File"/>
                    </params>
                    <scope line="508"/>
                </method>
                <method name="maybeChooseFileName" type="void" line="516">
                    <scope line="517"/>
                    <declaration name="canonName" type="String" line="520"/>
                    <scope line="521"/>
                    <scope line="524"/>
                    <scope line="528"/>
                </method>
                <method name="canonicalFileName" type="String" line="532"/>
                <method name="getFileName" type="java.io.File" line="536">
                    <params>
                        <param name="parent" type="java.io.File"/>
                    </params>
                    <declaration name="name" type="String" line="537"/>
                    <declaration name="fname" type="String" line="539"/>
                </method>
                <method name="getFileName" type="java.io.File" line="542"/>
                <method name="toString" type="String" line="545"/>
            </class>
            <method name="addClass" type="void" line="549">
                <params>
                    <param name="c" type="Class"/>
                </params>
                <declaration name="added" type="boolean" line="551"/>
            </method>
            <declaration name="files" type="ArrayList&lt;File&gt;" line="556"/>
            <method name="getFiles" type="List<File>" line="557"/>
            <method name="getClassStubs" type="List<File>" line="560">
                <declaration name="classStubs" type="List&lt;File&gt;" line="561"/>
                <scope line="562"/>
            </method>
            <class name="File" line="568">
                <implements interface="Comparable"/>
                <declaration name="nameString" type="String" line="569"/>
                <declaration name="name" type="Utf8Entry" line="570"/>
                <declaration name="modtime" type="int" line="571"/>
                <declaration name="options" type="int" line="572"/>
                <declaration name="stubClass" type="Class" line="573"/>
                <declaration name="prepend" type="ArrayList" line="574"/>
                <declaration name="append" type="java.io.ByteArrayOutputStream" line="575"/>
                <method name="File" type="constructor" line="576">
                    <params>
                        <param name="name" type="Utf8Entry"/>
                    </params>
                </method>
                <method name="File" type="constructor" line="580">
                    <params>
                        <param name="nameString" type="String"/>
                    </params>
                </method>
                <method name="isDirectory" type="boolean" line="585"/>
                <method name="isClassStub" type="boolean" line="588"/>
                <method name="getStubClass" type="Class" line="591"/>
                <method name="isTrivialClassStub" type="boolean" line="596"/>
                <method name="equals" type="boolean" line="599">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="that" type="File" line="601"/>
                </method>
                <method name="hashCode" type="int" line="604"/>
                <method name="compareTo" type="int" line="607">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="that" type="File" line="608"/>
                </method>
                <method name="toString" type="String" line="611"/>
                <method name="getFileName" type="java.io.File" line="614"/>
                <method name="getFileName" type="java.io.File" line="617">
                    <params>
                        <param name="parent" type="java.io.File"/>
                    </params>
                    <declaration name="lname" type="String" line="618"/>
                    <declaration name="fname" type="String" line="619"/>
                </method>
                <method name="addBytes" type="void" line="622">
                    <params>
                        <param name="bytes" type="byte[]"/>
                    </params>
                </method>
                <method name="addBytes" type="void" line="625">
                    <params>
                        <param name="bytes" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="626"/>
                </method>
                <method name="getFileLength" type="long" line="632">
                    <declaration name="len" type="long" line="633"/>
                    <scope line="635">
                        <declaration name="block" type="byte[]" line="636"/>
                    </scope>
                </method>
                <method name="writeTo" type="void" line="642">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                    <scope line="644">
                        <declaration name="block" type="byte[]" line="645"/>
                    </scope>
                </method>
                <method name="readFrom" type="void" line="650">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                    <declaration name="buf" type="byte[]" line="651"/>
                    <declaration name="nr" type="int" line="652"/>
                    <scope line="653"/>
                </method>
                <method name="getInputStream" type="InputStream" line="657">
                    <declaration name="in" type="InputStream" line="658"/>
                    <declaration name="isa" type="List&lt;InputStream&gt;" line="660"/>
                    <scope line="661">
                        <declaration name="bytes" type="byte[]" line="662"/>
                    </scope>
                </method>
                <method name="visitRefs" type="void" line="668">
                    <params>
                        <param name="mode" type="int"/>
                        <param name="refs" type="Collection<Entry>"/>
                    </params>
                </method>
            </class>
            <method name="newStub" type="File" line="673">
                <params>
                    <param name="classFileNameString" type="String"/>
                </params>
                <declaration name="stub" type="File" line="674"/>
            </method>
            <method name="fixupFileName" type="String" line="680">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="fname" type="String" line="681"/>
                <scope line="682"/>
            </method>
            <method name="addFile" type="void" line="687">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="added" type="boolean" line="688"/>
            </method>
            <declaration name="allInnerClasses" type="List&lt;InnerClass&gt;" line="691"/>
            <declaration name="allInnerClassesByThis" type="Map&lt;ClassEntry,InnerClass&gt;" line="692"/>
            <method name="getAllInnerClasses" type="List<InnerClass>" line="693"/>
            <method name="setAllInnerClasses" type="void" line="696">
                <params>
                    <param name="ics" type="Collection<InnerClass>"/>
                </params>
                <scope line="701">
                    <declaration name="pic" type="Object" line="702"/>
                </scope>
            </method>
            <javadoc line="706">
                Return a global inner class record for the given thisClass.                
            </javadoc>
            <method name="getGlobalInnerClass" type="InnerClass" line="709">
                <params>
                    <param name="thisClass" type="Entry"/>
                </params>
            </method>
            <class name="InnerClass" line="713">
                <implements interface="Comparable"/>
                <declaration name="thisClass" type="ClassEntry" line="714"/>
                <declaration name="outerClass" type="ClassEntry" line="715"/>
                <declaration name="name" type="Utf8Entry" line="716"/>
                <declaration name="flags" type="int" line="717"/>
                <declaration name="predictable" type="boolean" line="718"/>
                <method name="InnerClass" type="constructor" line="719">
                    <params>
                        <param name="thisClass" type="ClassEntry"/>
                        <param name="outerClass" type="ClassEntry"/>
                        <param name="name" type="Utf8Entry"/>
                        <param name="flags" type="int"/>
                    </params>
                </method>
                <method name="computePredictable" type="boolean" line="726">
                    <declaration name="parse" type="String[]" line="727"/>
                    <declaration name="pkgOuter" type="String" line="729"/>
                    <declaration name="lname" type="String" line="730"/>
                    <declaration name="haveName" type="String" line="731"/>
                    <declaration name="haveOuter" type="String" line="732"/>
                    <declaration name="lpredictable" type="boolean" line="733"/>
                </method>
                <method name="equals" type="boolean" line="736">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="that" type="InnerClass" line="738"/>
                </method>
                <method name="eq" type="boolean" line="741">
                    <params>
                        <param name="x" type="Object"/>
                        <param name="y" type="Object"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="744"/>
                <method name="compareTo" type="int" line="747">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="that" type="InnerClass" line="748"/>
                </method>
                <method name="visitRefs" type="void" line="751">
                    <params>
                        <param name="mode" type="int"/>
                        <param name="refs" type="Collection<Entry>"/>
                    </params>
                    <scope line="753"/>
                </method>
                <method name="toString" type="String" line="758"/>
            </class>
            <method name="visitInnerClassRefs" type="void" line="762">
                <params>
                    <param name="innerClasses" type="Collection<InnerClass>"/>
                    <param name="mode" type="int"/>
                    <param name="refs" type="Collection<Entry>"/>
                </params>
                <scope line="763"/>
                <scope line="766"/>
                <scope line="769">
                    <scope line="770"/>
                </scope>
            </method>
            <method name="parseInnerClassName" type="String[]" line="775">
                <params>
                    <param name="n" type="String"/>
                </params>
                <declaration name="pkgOuter" type="String" line="776"/>
                <declaration name="dollar1" type="int" line="777"/>
                <declaration name="nlen" type="int" line="778"/>
                <declaration name="pkglen" type="int" line="779"/>
                <scope line="782"/>
                <scope line="787"/>
                <scope line="791"/>
            </method>
            <declaration name="SLASH_MIN" type="int" line="800"/>
            <declaration name="SLASH_MAX" type="int" line="801"/>
            <declaration name="DOLLAR_MIN" type="int" line="802"/>
            <declaration name="DOLLAR_MAX" type="int" line="803"/>
            <scope line="804"/>
            <method name="lastIndexOf" type="int" line="808">
                <params>
                    <param name="chMin" type="int"/>
                    <param name="chMax" type="int"/>
                    <param name="str" type="String"/>
                    <param name="pos" type="int"/>
                </params>
                <scope line="809">
                    <declaration name="ch" type="int" line="810"/>
                    <scope line="811"/>
                </scope>
            </method>
            <method name="isDigitString" type="boolean" line="817">
                <params>
                    <param name="x" type="String"/>
                    <param name="beg" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="819">
                    <declaration name="ch" type="char" line="820"/>
                </scope>
            </method>
            <method name="getObviousSourceFile" type="String" line="825">
                <params>
                    <param name="className" type="String"/>
                </params>
                <declaration name="n" type="String" line="826"/>
                <declaration name="pkglen" type="int" line="827"/>
                <declaration name="cutoff" type="int" line="829"/>
                <scope line="830">
                    <declaration name="dollar2" type="int" line="831"/>
                </scope>
                <declaration name="obvious" type="String" line="836"/>
            </method>
            <method name="getRefString" type="Utf8Entry" line="839">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getRefLiteral" type="LiteralEntry" line="842">
                <params>
                    <param name="s" type="Comparable"/>
                </params>
            </method>
            <method name="stripAttributeKind" type="void" line="845">
                <params>
                    <param name="what" type="String"/>
                </params>
            </method>
            <method name="trimToSize" type="void" line="866">
                <scope line="868"/>
            </method>
            <method name="strip" type="void" line="873">
                <params>
                    <param name="attrName" type="String"/>
                </params>
                <scope line="874"/>
            </method>
            <method name="versionStringOf" type="String" line="878">
                <params>
                    <param name="majver" type="int"/>
                    <param name="minver" type="int"/>
                </params>
            </method>
            <method name="versionStringOf" type="String" line="881">
                <params>
                    <param name="version" type="int"/>
                </params>
            </method>
            <method name="stripConstantFields" type="void" line="884">
                <scope line="885">
                    <scope line="886">
                        <declaration name="f" type="Class.Field" line="887"/>
                        <scope line="888">
                            <scope line="889"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="visitRefs" type="void" line="897">
                <params>
                    <param name="mode" type="int"/>
                    <param name="refs" type="Collection<Entry>"/>
                </params>
                <scope line="898"/>
                <scope line="901">
                    <scope line="902"/>
                </scope>
            </method>
            <method name="reorderFiles" type="void" line="908">
                <params>
                    <param name="keepClassOrder" type="boolean"/>
                    <param name="stripDirectories" type="boolean"/>
                </params>
                <scope line="909"/>
                <declaration name="stubs" type="List&lt;File&gt;" line="912"/>
                <scope line="913">
                    <declaration name="file" type="File" line="914"/>
                    <scope line="915"/>
                </scope>
                <anonymous_class line="919">
                    <method name="compare" type="int" line="920">
                        <params>
                            <param name="o0" type="Object"/>
                            <param name="o1" type="Object"/>
                        </params>
                        <declaration name="r0" type="File" line="921"/>
                        <declaration name="r1" type="File" line="922"/>
                        <declaration name="f0" type="String" line="923"/>
                        <declaration name="f1" type="String" line="924"/>
                        <declaration name="n0" type="String" line="928"/>
                        <declaration name="n1" type="String" line="929"/>
                        <declaration name="x0" type="String" line="930"/>
                        <declaration name="x1" type="String" line="931"/>
                        <declaration name="r" type="int" line="932"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="trimStubs" type="void" line="942">
                <scope line="943">
                    <declaration name="file" type="File" line="944"/>
                    <scope line="945"/>
                </scope>
                <scope line="952"/>
            </method>
            <method name="buildGlobalConstantPool" type="void" line="956">
                <params>
                    <param name="requiredEntries" type="Set<Entry>"/>
                </params>
                <declaration name="cpAllU" type="Index" line="962"/>
                <declaration name="byTagU" type="Index[]" line="963"/>
                <scope line="964">
                    <declaration name="tag" type="byte" line="965"/>
                    <declaration name="ix" type="Index" line="966"/>
                </scope>
                <scope line="972"/>
                <scope line="975">
                    <declaration name="tag" type="byte" line="976"/>
                    <declaration name="ix" type="Index" line="977"/>
                </scope>
            </method>
            <method name="ensureAllClassFiles" type="void" line="982">
                <declaration name="fileSet" type="Set&lt;File&gt;" line="983"/>
                <scope line="984"/>
            </method>
            <declaration name="noObjects" type="List&lt;Object&gt;" line="988"/>
            <declaration name="noFields" type="List&lt;Class.Field&gt;" line="989"/>
            <declaration name="noMethods" type="List&lt;Class.Method&gt;" line="990"/>
            <declaration name="noInnerClasses" type="List&lt;InnerClass&gt;" line="991"/>
        </class>
    </source>