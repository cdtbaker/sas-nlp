<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="com.sun.java.util.jar.pack.Attribute.Layout"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.ClassEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Index"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.LiteralEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Utf8Entry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Entry"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.SequenceInputStream"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.jar.JarFile"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="Package" line="57">
            <comment line="75">
                FO_DEFLATE_HINT                
            </comment>
            <comment line="77">
                fill in later                
            </comment>
            <comment line="78">
                fill in later                
            </comment>
            <comment line="80">
                These fields can be adjusted by driver properties.                
            </comment>
            <comment line="89">
                What constants are used in this unit?                
            </comment>
            <comment line="110">
                Special empty versions of Code and InnerClasses, used for markers.                
            </comment>
            <comment line="163">
                What Java classes are in this unit?                
            </comment>
            <comment line="165">
                Fixed 6211177, converted to throw IOException                
            </comment>
            <comment line="735">
                What non-class files are in this unit?                
            </comment>
            <comment line="899">
                Is there a globally declared table of inner classes?                
            </comment>
            <comment line="1001">
                Helper for building InnerClasses attributes.                
            </comment>
            <comment line="1098">
                static {
                assert(getObviousSourceFile(&quot;foo&quot;).equals(&quot;foo.java&quot;));
                assert(getObviousSourceFile(&quot;foobar&quot;).equals(&quot;bar.java&quot;));
                assert(getObviousSourceFile(&quot;foobar$baz&quot;).equals(&quot;bar.java&quot;));
                assert(getObviousSourceFile(&quot;foobar#baz#1&quot;).equals(&quot;bar.java&quot;));
                assert(getObviousSourceFile(&quot;foo.bar.baz#1&quot;).equals(&quot;baz.java&quot;));
                }                
            </comment>
            <comment line="1198">
                Use this before writing the package file.                
            </comment>
            <comment line="1199">
                It sorts files into a new order which seems likely to                
            </comment>
            <comment line="1200">
                compress better.  It also moves classes to the end of the                
            </comment>
            <comment line="1201">
                file order.  It also removes JAR directory entries, which                
            </comment>
            <comment line="1202">
                are useless.                
            </comment>
            <comment line="1278">
                Use this before writing the package file.                
            </comment>
            <comment line="1309">
                Use this before writing the class files.                
            </comment>
            <javadoc line="57">
                Define the main data structure transmitted by pack/unpack.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="verbose" type="int" line="62"/>
            <scope line="63">
                <declaration name="pmap" type="PropMap" line="64"/>
            </scope>
            <declaration name="magic" type="int" line="69"/>
            <declaration name="package_minver" type="int" line="70"/>
            <declaration name="package_majver" type="int" line="71"/>
            <declaration name="default_modtime" type="int" line="73"/>
            <declaration name="default_options" type="int" line="74"/>
            <declaration name="default_class_majver" type="short" line="76"/>
            <declaration name="default_class_minver" type="short" line="77"/>
            <declaration name="min_class_majver" type="short" line="80"/>
            <declaration name="min_class_minver" type="short" line="81"/>
            <declaration name="max_class_majver" type="short" line="82"/>
            <declaration name="max_class_minver" type="short" line="83"/>
            <declaration name="observed_max_class_majver" type="short" line="85"/>
            <declaration name="observed_max_class_minver" type="short" line="86"/>
            <declaration name="cp" type="ConstantPool.IndexGroup" line="89"/>
            <method name="Package" type="constructor" line="91">
                <comment line="93">
                    fill in later                    
                </comment>
                <comment line="94">
                    fill in later                    
                </comment>
            </method>
            <method name="reset" type="void" line="98"/>
            <method name="getPackageVersion" type="int" line="105"/>
            <declaration name="attrCodeEmpty" type="Attribute.Layout" line="110"/>
            <declaration name="attrInnerClassesEmpty" type="Attribute.Layout" line="111"/>
            <declaration name="attrSourceFileSpecial" type="Attribute.Layout" line="112"/>
            <declaration name="attrDefs" type="Map&lt;Attribute.Layout,Attribute&gt;" line="113"/>
            <scope line="114">
                <declaration name="ad" type="Map&lt;Layout,Attribute&gt;" line="115"/>
            </scope>
            <method name="getDefaultClassVersion" type="int" line="125"/>
            <javadoc line="129">
                Return the highest version number of all classes,
                  or 0 if there are no classes.                
            </javadoc>
            <method name="getHighestClassVersion" type="int" line="132">
                <comment line="133">
                    initial low value                    
                </comment>
                <declaration name="res" type="int" line="133"/>
                <scope line="134">
                    <declaration name="ver" type="int" line="135"/>
                </scope>
            </method>
            <javadoc line="141">
                Convenience function to choose an archive version based
                  on the class file versions observed within the archive.                
            </javadoc>
            <method name="choosePackageVersion" type="void" line="144">
                <comment line="145">
                    do not call this twice                    
                </comment>
                <comment line="148">
                    There are only old classfiles in this segment or resources                    
                </comment>
                <comment line="155">
                    Normal case.  Use the newest archive format, when available                    
                </comment>
                <comment line="156">
                    TODO: replace the following with JAVA7* when the need arises                    
                </comment>
                <declaration name="classver" type="int" line="146"/>
                <scope line="147"/>
                <scope line="151"/>
                <scope line="154"/>
            </method>
            <method name="checkVersion" type="void" line="165">
                <scope line="166">
                    <declaration name="gotMag" type="String" line="167"/>
                    <declaration name="expMag" type="String" line="168"/>
                </scope>
                <scope line="174">
                    <declaration name="gotVer" type="String" line="176"/>
                    <declaration name="expVer" type="String" line="177"/>
                </scope>
            </method>
            <declaration name="classes" type="ArrayList&lt;Package.Class&gt;" line="184"/>
            <method name="getClasses" type="List<Package.Class>" line="186"/>
            <class name="Class" line="190">
                <extends class="Attribute.Holder"/>
                <comment line="195">
                    Optional file characteristics and data source (a &quot;class stub&quot;)                    
                </comment>
                <comment line="198">
                    File header                    
                </comment>
                <comment line="202">
                    Local constant pool (one-way mapping of index =&gt; package cp).                    
                </comment>
                <comment line="205">
                    Class header                    
                </comment>
                <comment line="206">
                    int flags;  // in Attribute.Holder.this.flags                    
                </comment>
                <comment line="211">
                    Class parts                    
                </comment>
                <comment line="214">
                    ArrayList attributes;  // in Attribute.Holder.this.attributes                    
                </comment>
                <comment line="215">
                    Note that InnerClasses may be collected at the package level.                    
                </comment>
                <comment line="250">
                    Note:  equals and hashCode are identity-based.                    
                </comment>
                <comment line="388">
                    Helper for both minimizing and expanding.                    
                </comment>
                <comment line="389">
                    Computes a symmetric difference.                    
                </comment>
                <comment line="668">
                    Hook called by ClassReader when it&apos;s done.                    
                </comment>
                <comment line="752">
                    true name of this file                    
                </comment>
                <comment line="755">
                    random flag bits, such as deflate_hint                    
                </comment>
                <comment line="756">
                    if this is a stub, here&apos;s the class                    
                </comment>
                <comment line="757">
                    list of byte[]                    
                </comment>
                <comment line="790">
                    The nameString is the key.  Ignore other things.                    
                </comment>
                <comment line="791">
                    (Note:  The name might be &quot;&quot;, in the case of a trivial class stub.)                    
                </comment>
                <comment line="801">
                    Simple alphabetic sort.  PackageWriter uses a better comparator.                    
                </comment>
                <comment line="936">
                    Can name and outerClass be derived from thisClass?                    
                </comment>
                <comment line="939">
                    About 30% of inner classes are anonymous (in rt.jar).                    
                </comment>
                <comment line="940">
                    About 60% are class members; the rest are named locals.                    
                </comment>
                <comment line="941">
                    Nearly all have predictable outers and names.                    
                </comment>
                <implements interface="Comparable"/>
                <method name="getPackage" type="Package" line="192"/>
                <declaration name="file" type="File" line="195"/>
                <declaration name="magic" type="int" line="198"/>
                <declaration name="minver" type="short" line="199"/>
                <declaration name="cpMap" type="Entry[]" line="202"/>
                <declaration name="thisClass" type="ClassEntry" line="206"/>
                <declaration name="superClass" type="ClassEntry" line="207"/>
                <declaration name="interfaces" type="ClassEntry[]" line="208"/>
                <declaration name="fields" type="ArrayList&lt;Field&gt;" line="211"/>
                <declaration name="methods" type="ArrayList&lt;Method&gt;" line="212"/>
                <declaration name="innerClasses" type="ArrayList&lt;InnerClass&gt;" line="215"/>
                <method name="Class" type="constructor" line="217">
                    <params>
                        <param name="flags" type="int"/>
                        <param name="thisClass" type="ClassEntry"/>
                        <param name="superClass" type="ClassEntry"/>
                        <param name="interfaces" type="ClassEntry[]"/>
                    </params>
                    <declaration name="added" type="boolean" line="226"/>
                </method>
                <method name="Class" type="constructor" line="230">
                    <params>
                        <param name="classFile" type="String"/>
                    </params>
                    <comment line="231">
                        A blank class; must be read with a ClassReader, etc.                        
                    </comment>
                </method>
                <method name="getFields" type="List<Field>" line="235"/>
                <method name="getMethods" type="List<Method>" line="236"/>
                <method name="getName" type="String" line="238"/>
                <method name="getVersion" type="int" line="242"/>
                <method name="getVersionString" type="String" line="245"/>
                <method name="compareTo" type="int" line="250">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="that" type="Class" line="251"/>
                    <declaration name="n0" type="String" line="252"/>
                    <declaration name="n1" type="String" line="253"/>
                </method>
                <method name="getObviousSourceFile" type="String" line="257"/>
                <method name="transformSourceFile" type="void" line="261">
                    <params>
                        <param name="minimize" type="boolean"/>
                    </params>
                    <comment line="262">
                        Replace &quot;obvious&quot; SourceFile by null.                        
                    </comment>
                    <comment line="265">
                        no SourceFile attr.                        
                    </comment>
                    <comment line="273">
                        A pair of zero bytes.  Cannot use predef. layout.                        
                    </comment>
                    <comment line="277">
                        Expand null attribute to the obvious string.                        
                    </comment>
                    <comment line="286">
                        Replace by an all-zero attribute.                        
                    </comment>
                    <declaration name="olda" type="Attribute" line="263"/>
                    <declaration name="obvious" type="String" line="266"/>
                    <declaration name="ref" type="List&lt;Entry&gt;" line="267"/>
                    <declaration name="sfName" type="Utf8Entry" line="269"/>
                    <declaration name="a" type="Attribute" line="270"/>
                    <scope line="271">
                        <scope line="272"/>
                        <scope line="276">
                            <declaration name="bytes" type="byte[]" line="278"/>
                            <declaration name="f" type="Object" line="280"/>
                        </scope>
                    </scope>
                    <scope line="284">
                        <scope line="285"/>
                        <scope line="288"/>
                    </scope>
                    <scope line="292">
                        <declaration name="newAttrs" type="List&lt;Attribute&gt;" line="295"/>
                        <declaration name="where" type="int" line="296"/>
                    </scope>
                </method>
                <method name="minimizeSourceFile" type="void" line="302"/>
                <method name="expandSourceFile" type="void" line="305"/>
                <method name="getCPMap" type="Entry[]" line="309"/>
                <method name="setCPMap" type="void" line="313">
                    <params>
                        <param name="cpMap" type="Entry[]"/>
                    </params>
                </method>
                <method name="hasInnerClasses" type="boolean" line="317"/>
                <method name="getInnerClasses" type="List<InnerClass>" line="320"/>
                <method name="setInnerClasses" type="void" line="324">
                    <params>
                        <param name="ics" type="Collection<InnerClass>"/>
                    </params>
                    <comment line="326">
                        Edit the attribute list, if necessary.                        
                    </comment>
                    <declaration name="a" type="Attribute" line="327"/>
                </method>
                <javadoc line="334">
                    Given a global map of ICs (keyed by thisClass),
                      compute the subset of its Map.values which are
                      required to be present in the local InnerClasses
                      attribute.  Perform this calculation without
                      reference to any actual InnerClasses attribute.
                      &lt;p&gt;
                      The order of the resulting list is consistent
                      with that of Package.this.allInnerClasses.                    
                </javadoc>
                <method name="computeGloballyImpliedICs" type="List<InnerClass>" line="343">
                    <comment line="345">
                        This block temporarily displaces this.innerClasses.                        
                    </comment>
                    <comment line="347">
                        ignore for the moment                        
                    </comment>
                    <comment line="355">
                        Restrict cpRefs to InnerClasses entries only.                        
                    </comment>
                    <comment line="357">
                        For every IC reference, add its outers also.                        
                    </comment>
                    <comment line="363">
                        If we add A$B$C to the mix, we must also add A$B.                        
                    </comment>
                    <comment line="366">
                        This loop is structured this way so as to accumulate                        
                    </comment>
                    <comment line="367">
                        entries into impliedICs in an order which reflects                        
                    </comment>
                    <comment line="368">
                        the order of allInnerClasses.                        
                    </comment>
                    <comment line="371">
                        This one is locally relevant if it describes                        
                    </comment>
                    <comment line="372">
                        a member of the current class, or if the current                        
                    </comment>
                    <comment line="373">
                        class uses it somehow.  In the particular case                        
                    </comment>
                    <comment line="374">
                        where thisClass is an inner class, it will already                        
                    </comment>
                    <comment line="375">
                        be a member of icRefs.                        
                    </comment>
                    <comment line="378">
                        Add every relevant class to the IC attribute:                        
                    </comment>
                    <declaration name="cpRefs" type="Set&lt;Entry&gt;" line="344"/>
                    <scope line="345">
                        <declaration name="innerClassesSaved" type="ArrayList&lt;InnerClass&gt;" line="346"/>
                    </scope>
                    <declaration name="icRefs" type="Set&lt;Entry&gt;" line="353"/>
                    <scope line="354">
                        <scope line="358">
                            <declaration name="ic" type="InnerClass" line="359"/>
                        </scope>
                    </scope>
                    <declaration name="impliedICs" type="ArrayList&lt;InnerClass&gt;" line="369"/>
                    <scope line="370">
                        <scope line="377"/>
                    </scope>
                </method>
                <method name="computeICdiff" type="List<InnerClass>" line="389">
                    <comment line="395">
                        Symmetric difference is calculated from I, A like this:                        
                    </comment>
                    <comment line="396">
                        diff = (I+A) - (I*A)                        
                    </comment>
                    <comment line="397">
                        Note that the center C is unordered, but the result                        
                    </comment>
                    <comment line="398">
                        preserves the original ordering of I and A.                        
                    </comment>
                    <comment line="399">
                                                
                    </comment>
                    <comment line="400">
                        Class file rules require that outers precede inners.                        
                    </comment>
                    <comment line="401">
                        So, add I before A, in case A$B$Z is local, but A$B                        
                    </comment>
                    <comment line="402">
                        is implicit.  The reverse is never the case.                        
                    </comment>
                    <comment line="405">
                        Diff is I since A is empty.                        
                    </comment>
                    <comment line="409">
                        Diff is A since I is empty.                        
                    </comment>
                    <comment line="411">
                        (I*A) is non-trivial                        
                    </comment>
                    <comment line="416">
                        Diff is now I^A = (I+A)-(I*A).                        
                    </comment>
                    <declaration name="impliedICs" type="List&lt;InnerClass&gt;" line="390"/>
                    <declaration name="actualICs" type="List&lt;InnerClass&gt;" line="391"/>
                    <scope line="403"/>
                    <scope line="407"/>
                    <declaration name="center" type="Set&lt;InnerClass&gt;" line="412"/>
                </method>
                <javadoc line="420">
                    When packing, anticipate the effect of expandLocalICs.
                      Replace the local ICs by their symmetric difference
                      with the globally implied ICs for this class; if this
                      difference is empty, remove the local ICs altogether.
                      &lt;p&gt;
                      An empty local IC attribute is reserved to signal
                      the unpacker to delete the attribute altogether,
                      so a missing local IC attribute signals the unpacker
                      to use the globally implied ICs changed.                    
                </javadoc>
                <method name="minimizeLocalICs" type="void" line="430">
                    <comment line="433">
                        will be the diff, modulo edge cases                        
                    </comment>
                    <comment line="435">
                        No diff, so transmit no attribute.                        
                    </comment>
                    <comment line="438">
                        Odd case:  No implied ICs, and a zero length attr.                        
                    </comment>
                    <comment line="439">
                        Do not support it directly.                        
                    </comment>
                    <comment line="444">
                        No local IC attribute, even though some are implied.                        
                    </comment>
                    <comment line="445">
                        Signal with trivial attribute.                        
                    </comment>
                    <comment line="448">
                        Transmit a non-empty diff, which will create                        
                    </comment>
                    <comment line="449">
                        a local ICs attribute.                        
                    </comment>
                    <comment line="452">
                        Reduce the set to the symmetric difference.                        
                    </comment>
                    <declaration name="diff" type="List&lt;InnerClass&gt;" line="431"/>
                    <declaration name="actualICs" type="List&lt;InnerClass&gt;" line="432"/>
                    <declaration name="localICs" type="List&lt;InnerClass&gt;" line="433"/>
                    <scope line="434">
                        <scope line="437"/>
                    </scope>
                    <scope line="443"/>
                    <scope line="447"/>
                </method>
                <javadoc line="458">
                    When unpacking, undo the effect of minimizeLocalICs.
                      Must return negative if any IC tuples may have been deleted.
                      Otherwise, return positive if any IC tuples were added.                    
                </javadoc>
                <method name="expandLocalICs" type="int" line="462">
                    <comment line="467">
                        Diff was empty.  (Common case.)                        
                    </comment>
                    <comment line="474">
                        added more tuples                        
                    </comment>
                    <comment line="477">
                        It was a non-empty diff, but the local ICs were absent.                        
                    </comment>
                    <comment line="479">
                        [] =&gt; null, no tuple change                        
                    </comment>
                    <comment line="481">
                        Non-trivial diff was transmitted.                        
                    </comment>
                    <comment line="483">
                        If we only added more ICs, return +1.                        
                    </comment>
                    <declaration name="localICs" type="List&lt;InnerClass&gt;" line="463"/>
                    <declaration name="actualICs" type="List&lt;InnerClass&gt;" line="464"/>
                    <declaration name="changed" type="int" line="465"/>
                    <scope line="466">
                        <declaration name="impliedICs" type="List&lt;InnerClass&gt;" line="468"/>
                        <scope line="469"/>
                        <scope line="472"/>
                    </scope>
                    <scope line="476"/>
                    <scope line="480"/>
                </method>
                <class name="Member" line="490">
                    <extends class="Attribute.Holder"/>
                    <comment line="536">
                        Order is significant for fields:  It is visible to reflection.                        
                    </comment>
                    <comment line="561">
                        Code attribute is specially hardwired.                        
                    </comment>
                    <comment line="585">
                        Sort methods in a canonical order (by type, then by name).                        
                    </comment>
                    <implements interface="Comparable"/>
                    <declaration name="descriptor" type="DescriptorEntry" line="492"/>
                    <method name="Member" type="constructor" line="494">
                        <params>
                            <param name="flags" type="int"/>
                            <param name="descriptor" type="DescriptorEntry"/>
                        </params>
                    </method>
                    <method name="thisClass" type="Class" line="499"/>
                    <method name="getDescriptor" type="DescriptorEntry" line="501"/>
                    <method name="getName" type="String" line="504"/>
                    <method name="getType" type="String" line="507"/>
                    <method name="getCPMap" type="Entry[]" line="511"/>
                    <method name="visitRefs" type="void" line="514">
                        <params>
                            <param name="mode" type="int"/>
                            <param name="refs" type="Collection<Entry>"/>
                        </params>
                        <comment line="516">
                            Careful:  The descriptor is used by the package,                            
                        </comment>
                        <comment line="517">
                            but the classfile breaks it into component refs.                            
                        </comment>
                        <comment line="524">
                            Handle attribute list:                            
                        </comment>
                        <scope line="518"/>
                        <scope line="521"/>
                    </method>
                    <method name="toString" type="String" line="528"/>
                </class>
                <class name="Field" line="533">
                    <extends class="Member"/>
                    <comment line="536">
                        Order is significant for fields:  It is visible to reflection.                        
                    </comment>
                    <comment line="561">
                        Code attribute is specially hardwired.                        
                    </comment>
                    <comment line="585">
                        Sort methods in a canonical order (by type, then by name).                        
                    </comment>
                    <declaration name="order" type="int" line="536"/>
                    <method name="Field" type="constructor" line="538">
                        <params>
                            <param name="flags" type="int"/>
                            <param name="descriptor" type="DescriptorEntry"/>
                        </params>
                        <declaration name="added" type="boolean" line="543"/>
                    </method>
                    <method name="getLiteralTag" type="byte" line="548"/>
                    <method name="compareTo" type="int" line="552">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                        <declaration name="that" type="Field" line="553"/>
                    </method>
                </class>
                <class name="Method" line="558">
                    <extends class="Member"/>
                    <comment line="536">
                        Order is significant for fields:  It is visible to reflection.                        
                    </comment>
                    <comment line="561">
                        Code attribute is specially hardwired.                        
                    </comment>
                    <comment line="585">
                        Sort methods in a canonical order (by type, then by name).                        
                    </comment>
                    <declaration name="code" type="Code" line="561"/>
                    <method name="Method" type="constructor" line="563">
                        <params>
                            <param name="flags" type="int"/>
                            <param name="descriptor" type="DescriptorEntry"/>
                        </params>
                        <declaration name="added" type="boolean" line="568"/>
                    </method>
                    <method name="trimToSize" type="void" line="572"/>
                    <method name="getArgumentSize" type="int" line="578">
                        <declaration name="argSize" type="int" line="579"/>
                        <declaration name="thisSize" type="int" line="580"/>
                    </method>
                    <method name="compareTo" type="int" line="585">
                        <params>
                            <param name="o" type="Object"/>
                        </params>
                        <declaration name="that" type="Method" line="586"/>
                    </method>
                    <method name="strip" type="void" line="590">
                        <params>
                            <param name="attrName" type="String"/>
                        </params>
                    </method>
                    <method name="visitRefs" type="void" line="597">
                        <params>
                            <param name="mode" type="int"/>
                            <param name="refs" type="Collection<Entry>"/>
                        </params>
                        <scope line="599">
                            <scope line="600"/>
                        </scope>
                    </method>
                </class>
                <method name="trimToSize" type="void" line="608">
                    <scope line="610">
                        <declaration name="members" type="ArrayList" line="611"/>
                        <scope line="614">
                            <declaration name="m" type="Member" line="615"/>
                        </scope>
                    </scope>
                    <scope line="619"/>
                </method>
                <method name="strip" type="void" line="624">
                    <params>
                        <param name="attrName" type="String"/>
                    </params>
                    <scope line="627">
                        <declaration name="members" type="ArrayList" line="628"/>
                        <scope line="630">
                            <declaration name="m" type="Member" line="631"/>
                        </scope>
                    </scope>
                </method>
                <method name="visitRefs" type="void" line="638">
                    <params>
                        <param name="mode" type="int"/>
                        <param name="refs" type="Collection<Entry>"/>
                    </params>
                    <comment line="659">
                        Handle attribute list:                        
                    </comment>
                    <scope line="643">
                        <declaration name="members" type="ArrayList" line="644"/>
                        <scope line="646">
                            <declaration name="m" type="Member" line="647"/>
                            <declaration name="ok" type="boolean" line="648"/>
                            <scope line="649"/>
                            <scope line="652"/>
                        </scope>
                    </scope>
                </method>
                <method name="visitInnerClassRefs" type="void" line="663">
                    <params>
                        <param name="mode" type="int"/>
                        <param name="refs" type="Collection<Entry>"/>
                    </params>
                </method>
                <method name="finishReading" type="void" line="668"/>
                <method name="initFile" type="void" line="673">
                    <params>
                        <param name="file" type="File"/>
                    </params>
                    <comment line="674">
                        set-once                        
                    </comment>
                    <comment line="676">
                        Build a trivial stub.                        
                    </comment>
                    <scope line="675"/>
                </method>
                <method name="maybeChooseFileName" type="void" line="685">
                    <comment line="687">
                        do not choose yet                        
                    </comment>
                    <comment line="694">
                        The file name is predictable.  Transmit &quot;&quot;.                        
                    </comment>
                    <comment line="698">
                        If name has not yet been looked up, find it now.                        
                    </comment>
                    <scope line="686"/>
                    <declaration name="canonName" type="String" line="689"/>
                    <scope line="690"/>
                    <scope line="693"/>
                    <scope line="699"/>
                </method>
                <method name="canonicalFileName" type="String" line="704"/>
                <method name="getFileName" type="java.io.File" line="709">
                    <params>
                        <param name="parent" type="java.io.File"/>
                    </params>
                    <declaration name="name" type="String" line="710"/>
                    <declaration name="fname" type="String" line="713"/>
                </method>
                <method name="getFileName" type="java.io.File" line="716"/>
                <method name="toString" type="String" line="720"/>
            </class>
            <method name="addClass" type="void" line="725">
                <params>
                    <param name="c" type="Class"/>
                </params>
                <comment line="729">
                    Make sure the class is represented in the total file order:                    
                </comment>
                <declaration name="added" type="boolean" line="727"/>
            </method>
            <declaration name="files" type="ArrayList&lt;File&gt;" line="735"/>
            <method name="getFiles" type="List<File>" line="737"/>
            <method name="getClassStubs" type="List<File>" line="741">
                <declaration name="classStubs" type="List&lt;File&gt;" line="742"/>
                <scope line="743"/>
            </method>
            <class name="File" line="750">
                <comment line="195">
                    Optional file characteristics and data source (a &quot;class stub&quot;)                    
                </comment>
                <comment line="198">
                    File header                    
                </comment>
                <comment line="202">
                    Local constant pool (one-way mapping of index =&gt; package cp).                    
                </comment>
                <comment line="205">
                    Class header                    
                </comment>
                <comment line="206">
                    int flags;  // in Attribute.Holder.this.flags                    
                </comment>
                <comment line="211">
                    Class parts                    
                </comment>
                <comment line="214">
                    ArrayList attributes;  // in Attribute.Holder.this.attributes                    
                </comment>
                <comment line="215">
                    Note that InnerClasses may be collected at the package level.                    
                </comment>
                <comment line="250">
                    Note:  equals and hashCode are identity-based.                    
                </comment>
                <comment line="388">
                    Helper for both minimizing and expanding.                    
                </comment>
                <comment line="389">
                    Computes a symmetric difference.                    
                </comment>
                <comment line="668">
                    Hook called by ClassReader when it&apos;s done.                    
                </comment>
                <comment line="752">
                    true name of this file                    
                </comment>
                <comment line="755">
                    random flag bits, such as deflate_hint                    
                </comment>
                <comment line="756">
                    if this is a stub, here&apos;s the class                    
                </comment>
                <comment line="757">
                    list of byte[]                    
                </comment>
                <comment line="790">
                    The nameString is the key.  Ignore other things.                    
                </comment>
                <comment line="791">
                    (Note:  The name might be &quot;&quot;, in the case of a trivial class stub.)                    
                </comment>
                <comment line="801">
                    Simple alphabetic sort.  PackageWriter uses a better comparator.                    
                </comment>
                <comment line="936">
                    Can name and outerClass be derived from thisClass?                    
                </comment>
                <comment line="939">
                    About 30% of inner classes are anonymous (in rt.jar).                    
                </comment>
                <comment line="940">
                    About 60% are class members; the rest are named locals.                    
                </comment>
                <comment line="941">
                    Nearly all have predictable outers and names.                    
                </comment>
                <implements interface="Comparable"/>
                <declaration name="nameString" type="String" line="751"/>
                <declaration name="name" type="Utf8Entry" line="752"/>
                <declaration name="modtime" type="int" line="753"/>
                <declaration name="options" type="int" line="754"/>
                <declaration name="stubClass" type="Class" line="755"/>
                <declaration name="prepend" type="ArrayList" line="756"/>
                <declaration name="append" type="java.io.ByteArrayOutputStream" line="757"/>
                <method name="File" type="constructor" line="759">
                    <params>
                        <param name="name" type="Utf8Entry"/>
                    </params>
                    <comment line="762">
                        caller must fill in contents                        
                    </comment>
                </method>
                <method name="File" type="constructor" line="764">
                    <params>
                        <param name="nameString" type="String"/>
                    </params>
                </method>
                <method name="isDirectory" type="boolean" line="770">
                    <comment line="771">
                        JAR directory.  Useless.                        
                    </comment>
                </method>
                <method name="isClassStub" type="boolean" line="774"/>
                <method name="getStubClass" type="Class" line="777"/>
                <method name="isTrivialClassStub" type="boolean" line="782"/>
                <method name="equals" type="boolean" line="791">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="that" type="File" line="794"/>
                </method>
                <method name="hashCode" type="int" line="797"/>
                <method name="compareTo" type="int" line="801">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="that" type="File" line="802"/>
                </method>
                <method name="toString" type="String" line="805"/>
                <method name="getFileName" type="java.io.File" line="814"/>
                <method name="getFileName" type="java.io.File" line="817">
                    <params>
                        <param name="parent" type="java.io.File"/>
                    </params>
                    <comment line="819">
                        if (name.startsWith(&quot;./&quot;))  name = name.substring(2);                        
                    </comment>
                    <declaration name="lname" type="String" line="818"/>
                    <declaration name="fname" type="String" line="820"/>
                </method>
                <method name="addBytes" type="void" line="824">
                    <params>
                        <param name="bytes" type="byte[]"/>
                    </params>
                </method>
                <method name="addBytes" type="void" line="827">
                    <params>
                        <param name="bytes" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="828"/>
                </method>
                <method name="getFileLength" type="long" line="834">
                    <declaration name="len" type="long" line="835"/>
                    <scope line="837">
                        <declaration name="block" type="byte[]" line="838"/>
                    </scope>
                </method>
                <method name="writeTo" type="void" line="844">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                    <scope line="846">
                        <declaration name="block" type="byte[]" line="847"/>
                    </scope>
                </method>
                <method name="readFrom" type="void" line="852">
                    <params>
                        <param name="in" type="InputStream"/>
                    </params>
                    <declaration name="buf" type="byte[]" line="853"/>
                    <declaration name="nr" type="int" line="854"/>
                    <scope line="855"/>
                </method>
                <method name="getInputStream" type="InputStream" line="859">
                    <declaration name="in" type="InputStream" line="860"/>
                    <declaration name="isa" type="List&lt;InputStream&gt;" line="862"/>
                    <scope line="863">
                        <declaration name="bytes" type="byte[]" line="864"/>
                    </scope>
                </method>
                <method name="visitRefs" type="void" line="871">
                    <params>
                        <param name="mode" type="int"/>
                        <param name="refs" type="Collection<Entry>"/>
                    </params>
                </method>
            </class>
            <method name="newStub" type="File" line="877">
                <params>
                    <param name="classFileNameString" type="String"/>
                </params>
                <comment line="881">
                    do not collect data                    
                </comment>
                <declaration name="stub" type="File" line="878"/>
            </method>
            <method name="fixupFileName" type="String" line="885">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="fname" type="String" line="886"/>
                <scope line="887"/>
            </method>
            <method name="addFile" type="void" line="893">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="added" type="boolean" line="894"/>
            </method>
            <declaration name="allInnerClasses" type="List&lt;InnerClass&gt;" line="899"/>
            <declaration name="allInnerClassesByThis" type="Map&lt;ClassEntry,InnerClass&gt;" line="900"/>
            <method name="getAllInnerClasses" type="List<InnerClass>" line="903"/>
            <method name="setAllInnerClasses" type="void" line="908">
                <params>
                    <param name="ics" type="Collection<InnerClass>"/>
                </params>
                <comment line="913">
                    Make an index:                    
                </comment>
                <comment line="917">
                    caller must ensure key uniqueness!                    
                </comment>
                <scope line="915">
                    <declaration name="pic" type="Object" line="916"/>
                </scope>
            </method>
            <javadoc line="921">
                Return a global inner class record for the given thisClass.                
            </javadoc>
            <method name="getGlobalInnerClass" type="InnerClass" line="923">
                <params>
                    <param name="thisClass" type="Entry"/>
                </params>
            </method>
            <class name="InnerClass" line="928">
                <comment line="195">
                    Optional file characteristics and data source (a &quot;class stub&quot;)                    
                </comment>
                <comment line="198">
                    File header                    
                </comment>
                <comment line="202">
                    Local constant pool (one-way mapping of index =&gt; package cp).                    
                </comment>
                <comment line="205">
                    Class header                    
                </comment>
                <comment line="206">
                    int flags;  // in Attribute.Holder.this.flags                    
                </comment>
                <comment line="211">
                    Class parts                    
                </comment>
                <comment line="214">
                    ArrayList attributes;  // in Attribute.Holder.this.attributes                    
                </comment>
                <comment line="215">
                    Note that InnerClasses may be collected at the package level.                    
                </comment>
                <comment line="250">
                    Note:  equals and hashCode are identity-based.                    
                </comment>
                <comment line="388">
                    Helper for both minimizing and expanding.                    
                </comment>
                <comment line="389">
                    Computes a symmetric difference.                    
                </comment>
                <comment line="668">
                    Hook called by ClassReader when it&apos;s done.                    
                </comment>
                <comment line="752">
                    true name of this file                    
                </comment>
                <comment line="755">
                    random flag bits, such as deflate_hint                    
                </comment>
                <comment line="756">
                    if this is a stub, here&apos;s the class                    
                </comment>
                <comment line="757">
                    list of byte[]                    
                </comment>
                <comment line="790">
                    The nameString is the key.  Ignore other things.                    
                </comment>
                <comment line="791">
                    (Note:  The name might be &quot;&quot;, in the case of a trivial class stub.)                    
                </comment>
                <comment line="801">
                    Simple alphabetic sort.  PackageWriter uses a better comparator.                    
                </comment>
                <comment line="936">
                    Can name and outerClass be derived from thisClass?                    
                </comment>
                <comment line="939">
                    About 30% of inner classes are anonymous (in rt.jar).                    
                </comment>
                <comment line="940">
                    About 60% are class members; the rest are named locals.                    
                </comment>
                <comment line="941">
                    Nearly all have predictable outers and names.                    
                </comment>
                <implements interface="Comparable"/>
                <declaration name="thisClass" type="ClassEntry" line="930"/>
                <declaration name="outerClass" type="ClassEntry" line="931"/>
                <declaration name="name" type="Utf8Entry" line="932"/>
                <declaration name="flags" type="int" line="933"/>
                <declaration name="predictable" type="boolean" line="936"/>
                <method name="InnerClass" type="constructor" line="943">
                    <params>
                        <param name="thisClass" type="ClassEntry"/>
                        <param name="outerClass" type="ClassEntry"/>
                        <param name="name" type="Utf8Entry"/>
                        <param name="flags" type="int"/>
                    </params>
                </method>
                <method name="computePredictable" type="boolean" line="951">
                    <comment line="952">
                        System.out.println(&quot;computePredictable &quot;+outerClass+&quot; &quot;+this.name);                        
                    </comment>
                    <comment line="956">
                        String number = parse[1];                        
                    </comment>
                    <comment line="961">
                        System.out.println(&quot;computePredictable =&gt; &quot;+predictable);                        
                    </comment>
                    <declaration name="parse" type="String[]" line="953"/>
                    <declaration name="pkgOuter" type="String" line="955"/>
                    <declaration name="lname" type="String" line="957"/>
                    <declaration name="haveName" type="String" line="958"/>
                    <declaration name="haveOuter" type="String" line="959"/>
                    <declaration name="lpredictable" type="boolean" line="960"/>
                </method>
                <method name="equals" type="boolean" line="965">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="that" type="InnerClass" line="968"/>
                </method>
                <method name="eq" type="boolean" line="974">
                    <params>
                        <param name="x" type="Object"/>
                        <param name="y" type="Object"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="977"/>
                <method name="compareTo" type="int" line="980">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="that" type="InnerClass" line="981"/>
                </method>
                <method name="visitRefs" type="void" line="985">
                    <params>
                        <param name="mode" type="int"/>
                        <param name="refs" type="Collection<Entry>"/>
                    </params>
                    <comment line="988">
                        If the name can be demangled, the package omits                        
                    </comment>
                    <comment line="989">
                        the products of demangling.  Otherwise, include them.                        
                    </comment>
                    <scope line="987"/>
                </method>
                <method name="toString" type="String" line="995"/>
            </class>
            <method name="visitInnerClassRefs" type="void" line="1002">
                <params>
                    <param name="innerClasses" type="Collection<InnerClass>"/>
                    <param name="mode" type="int"/>
                    <param name="refs" type="Collection<Entry>"/>
                </params>
                <comment line="1004">
                    no attribute; nothing to do                    
                </comment>
                <comment line="1010">
                    Count the entries themselves:                    
                </comment>
                <scope line="1003"/>
                <scope line="1006"/>
                <scope line="1009">
                    <scope line="1011"/>
                </scope>
            </method>
            <method name="parseInnerClassName" type="String[]" line="1017">
                <params>
                    <param name="n" type="String"/>
                </params>
                <comment line="1018">
                    System.out.println(&quot;parseInnerClassName &quot;+n);                    
                </comment>
                <comment line="1020">
                    pointers to $ in the pattern                    
                </comment>
                <comment line="1021">
                    parse n = (&lt;pkg&gt;/)*&lt;outer&gt;($&lt;number&gt;)?($&lt;name&gt;)?                    
                </comment>
                <comment line="1027">
                    n = (&lt;pkg&gt;/)*&lt;outer&gt;$&lt;number&gt;                    
                </comment>
                <comment line="1035">
                    n = (&lt;pkg&gt;/)*&lt;outer&gt;$&lt;number&gt;$&lt;name&gt;                    
                </comment>
                <comment line="1039">
                    n = (&lt;pkg&gt;/)*&lt;outer&gt;$&lt;name&gt;                    
                </comment>
                <comment line="1048">
                    System.out.println(&quot;parseInnerClassName parses &quot;+pkgOuter+&quot; &quot;+number+&quot; &quot;+name);                    
                </comment>
                <declaration name="pkgOuter" type="String" line="1019"/>
                <declaration name="dollar1" type="int" line="1020"/>
                <declaration name="nlen" type="int" line="1022"/>
                <declaration name="pkglen" type="int" line="1023"/>
                <scope line="1026"/>
                <scope line="1034"/>
                <scope line="1038"/>
            </method>
            <declaration name="SLASH_MIN" type="int" line="1052"/>
            <declaration name="SLASH_MAX" type="int" line="1053"/>
            <declaration name="DOLLAR_MIN" type="int" line="1054"/>
            <declaration name="DOLLAR_MAX" type="int" line="1055"/>
            <scope line="1056"/>
            <method name="lastIndexOf" type="int" line="1061">
                <params>
                    <param name="chMin" type="int"/>
                    <param name="chMax" type="int"/>
                    <param name="str" type="String"/>
                    <param name="pos" type="int"/>
                </params>
                <scope line="1062">
                    <declaration name="ch" type="int" line="1063"/>
                    <scope line="1064"/>
                </scope>
            </method>
            <method name="isDigitString" type="boolean" line="1071">
                <params>
                    <param name="x" type="String"/>
                    <param name="beg" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <comment line="1072">
                    null string                    
                </comment>
                <scope line="1073">
                    <declaration name="ch" type="char" line="1074"/>
                </scope>
            </method>
            <method name="getObviousSourceFile" type="String" line="1080">
                <params>
                    <param name="className" type="String"/>
                </params>
                <comment line="1086">
                    Work backwards, finding all &apos;$&apos;, &apos;#&apos;, etc.                    
                </comment>
                <declaration name="n" type="String" line="1081"/>
                <declaration name="pkglen" type="int" line="1082"/>
                <declaration name="cutoff" type="int" line="1084"/>
                <scope line="1085">
                    <declaration name="dollar2" type="int" line="1087"/>
                </scope>
                <declaration name="obvious" type="String" line="1094"/>
            </method>
            <method name="getRefString" type="Utf8Entry" line="1107">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getRefLiteral" type="LiteralEntry" line="1111">
                <params>
                    <param name="s" type="Comparable"/>
                </params>
            </method>
            <method name="stripAttributeKind" type="void" line="1115">
                <params>
                    <param name="what" type="String"/>
                </params>
                <comment line="1116">
                    what is one of { Debug, Compile, Constant, Exceptions, InnerClasses }                    
                </comment>
                <comment line="1127">
                    Keep the inner classes normally.                    
                </comment>
                <comment line="1128">
                    Although they have no effect on execution,                    
                </comment>
                <comment line="1129">
                    the Reflection API exposes them, and JCK checks them.                    
                </comment>
                <comment line="1130">
                    NO: // strip(&quot;InnerClasses&quot;);                    
                </comment>
                <comment line="1135">
                    Keep the exceptions normally.                    
                </comment>
                <comment line="1136">
                    Although they have no effect on execution,                    
                </comment>
                <comment line="1137">
                    the Reflection API exposes them, and JCK checks them.                    
                </comment>
            </method>
            <method name="trimToSize" type="void" line="1146">
                <scope line="1148"/>
            </method>
            <method name="strip" type="void" line="1154">
                <params>
                    <param name="attrName" type="String"/>
                </params>
                <scope line="1155"/>
            </method>
            <method name="versionStringOf" type="String" line="1160">
                <params>
                    <param name="majver" type="int"/>
                    <param name="minver" type="int"/>
                </params>
            </method>
            <method name="versionStringOf" type="String" line="1163">
                <params>
                    <param name="version" type="int"/>
                </params>
            </method>
            <method name="stripConstantFields" type="void" line="1167">
                <comment line="1172">
                    do not strip non-static finals:                    
                </comment>
                <scope line="1168">
                    <scope line="1169">
                        <declaration name="f" type="Class.Field" line="1170"/>
                        <scope line="1175">
                            <scope line="1176"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="visitRefs" type="void" line="1185">
                <params>
                    <param name="mode" type="int"/>
                    <param name="refs" type="Collection<Entry>"/>
                </params>
                <scope line="1186"/>
                <scope line="1189">
                    <scope line="1190"/>
                </scope>
            </method>
            <method name="reorderFiles" type="void" line="1203">
                <params>
                    <param name="keepClassOrder" type="boolean"/>
                    <param name="stripDirectories" type="boolean"/>
                </params>
                <comment line="1204">
                    First reorder the classes, if that is allowed.                    
                </comment>
                <comment line="1206">
                    In one test with rt.jar, this trick gained 0.7%                    
                </comment>
                <comment line="1210">
                    Remove stubs from resources; maybe we&apos;ll add them on at the end,                    
                </comment>
                <comment line="1211">
                    if there are some non-trivial ones.  The best case is that                    
                </comment>
                <comment line="1212">
                    modtimes and options are not transmitted, and the stub files                    
                </comment>
                <comment line="1213">
                    for class files do not need to be transmitted at all.                    
                </comment>
                <comment line="1214">
                    Also                    
                </comment>
                <comment line="1224">
                    Sort the remaining non-class files.                    
                </comment>
                <comment line="1225">
                    We sort them by file type.                    
                </comment>
                <comment line="1226">
                    This keeps files of similar format near each other.                    
                </comment>
                <comment line="1227">
                    Put class files at the end, keeping their fixed order.                    
                </comment>
                <comment line="1228">
                    Be sure the JAR file&apos;s required manifest stays at the front. (4893051)                    
                </comment>
                <comment line="1233">
                    Get the file name.                    
                </comment>
                <comment line="1239">
                    Extract file basename.                    
                </comment>
                <comment line="1242">
                    Extract basename extension.                    
                </comment>
                <comment line="1246">
                    Primary sort key is file extension.                    
                </comment>
                <comment line="1254">
                    Add back the class stubs after sorting, before trimStubs.                    
                </comment>
                <scope line="1205"/>
                <declaration name="stubs" type="List&lt;File&gt;" line="1215"/>
                <scope line="1216">
                    <declaration name="file" type="File" line="1217"/>
                    <scope line="1219"/>
                </scope>
                <anonymous_class line="1229">
                    <method name="compare" type="int" line="1230">
                        <params>
                            <param name="o0" type="Object"/>
                            <param name="o1" type="Object"/>
                        </params>
                        <comment line="1233">
                            Get the file name.                            
                        </comment>
                        <comment line="1239">
                            Extract file basename.                            
                        </comment>
                        <comment line="1242">
                            Extract basename extension.                            
                        </comment>
                        <comment line="1246">
                            Primary sort key is file extension.                            
                        </comment>
                        <declaration name="r0" type="File" line="1231"/>
                        <declaration name="r1" type="File" line="1232"/>
                        <declaration name="f0" type="String" line="1234"/>
                        <declaration name="f1" type="String" line="1235"/>
                        <declaration name="n0" type="String" line="1240"/>
                        <declaration name="n1" type="String" line="1241"/>
                        <declaration name="x0" type="String" line="1243"/>
                        <declaration name="x1" type="String" line="1244"/>
                        <declaration name="r" type="int" line="1245"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="trimStubs" type="void" line="1258">
                <comment line="1259">
                    Restore enough non-trivial stubs to carry the needed class modtimes.                    
                </comment>
                <scope line="1260">
                    <declaration name="file" type="File" line="1261"/>
                    <scope line="1262"/>
                </scope>
                <scope line="1272"/>
            </method>
            <method name="buildGlobalConstantPool" type="void" line="1278">
                <params>
                    <param name="requiredEntries" type="Set<Entry>"/>
                </params>
                <comment line="1281">
                    uconditionally present                    
                </comment>
                <comment line="1290">
                    Work on all entries of a given kind.                    
                </comment>
                <comment line="1295">
                    done with it                    
                </comment>
                <comment line="1298">
                    all consumed                    
                </comment>
                <declaration name="cpAllU" type="Index" line="1286"/>
                <declaration name="byTagU" type="Index[]" line="1287"/>
                <scope line="1288">
                    <declaration name="tag" type="byte" line="1289"/>
                    <declaration name="ix" type="Index" line="1291"/>
                </scope>
                <scope line="1297"/>
                <scope line="1300">
                    <declaration name="tag" type="byte" line="1301"/>
                    <declaration name="ix" type="Index" line="1302"/>
                </scope>
            </method>
            <method name="ensureAllClassFiles" type="void" line="1309">
                <comment line="1312">
                    Add to the end of ths list:                    
                </comment>
                <declaration name="fileSet" type="Set&lt;File&gt;" line="1310"/>
                <scope line="1311"/>
            </method>
            <declaration name="noObjects" type="List&lt;Object&gt;" line="1318"/>
            <declaration name="noFields" type="List&lt;Class.Field&gt;" line="1319"/>
            <declaration name="noMethods" type="List&lt;Class.Method&gt;" line="1320"/>
            <declaration name="noInnerClasses" type="List&lt;InnerClass&gt;" line="1321"/>
        </class>
    </source>