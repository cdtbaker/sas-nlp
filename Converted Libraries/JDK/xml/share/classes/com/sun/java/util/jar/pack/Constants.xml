<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <class name="Constants" line="31">
            <comment line="42">
                Java Class Version numbers history
                1.0 to 1.3.X 45,3
                1.4 to 1.4.X 46,0
                1.5 to 1.5.X 49,0
                1.6 to 1.5.x 50,0 NOTE Assumed for now                
            </comment>
            <comment line="75">
                unused, was Unicode                
            </comment>
            <comment line="87">
                pseudo-constants:                
            </comment>
            <comment line="92">
                combined global map                
            </comment>
            <comment line="93">
                used only for ldc fields                
            </comment>
            <comment line="95">
                pseudo-access bits                
            </comment>
            <comment line="96">
                for ic_flags                
            </comment>
            <comment line="98">
                attribute &quot;context types&quot;                
            </comment>
            <comment line="107">
                predefined attr bits                
            </comment>
            <comment line="129">
                File option bits, from LSB in ascending bit position.                
            </comment>
            <comment line="133">
                Archive option bits, from LSB in ascending bit position:                
            </comment>
            <comment line="150">
                visitRefs modes:                
            </comment>
            <comment line="154">
                null modtime value                
            </comment>
            <comment line="156">
                some comstantly empty containers                
            </comment>
            <comment line="163">
                meta-coding                
            </comment>
            <comment line="173">
                bytecodes                
            </comment>
            <comment line="377">
                0xca                
            </comment>
            <comment line="379">
                End marker, used to terminate bytecode sequences:                
            </comment>
            <comment line="381">
                Escapes:                
            </comment>
            <comment line="385">
                Self-relative pseudo-opcodes for better compression.
                 A &quot;linker op&quot; is a bytecode which links to a class member.
                 (But in what follows, &quot;invokeinterface&quot; ops are excluded.)
                
                 A &quot;self linker op&quot; is a variant bytecode which works only
                 with the current class or its super.  Because the number of
                 possible targets is small, it admits a more compact encoding.
                 Self linker ops are allowed to absorb a previous &quot;aload_0&quot; op.
                 There are (7 * 4) self linker ops (super or not, aload_0 or not).
                
                 For simplicity, we define the full symmetric set of variants.
                 However, some of them are relatively useless.
                 Self linker ops are enabled by Pack.selfCallVariants (true).                
            </comment>
            <comment line="405">
                An &quot;invoke init&quot; op is a variant of invokespecial which works
                 only with the method name &quot;&lt;init&gt;&quot;.  There are variants which
                 link to the current class, the super class, or the class of the
                 immediately previous &quot;newinstance&quot; op.  There are 3 of these ops.
                 They all take method signature references as operands.
                 Invoke init ops are enabled by Pack.initCallVariants (true).                
            </comment>
            <comment line="418">
                linker variant limit == 202+(7*4)+3 == 233                
            </comment>
            <comment line="420">
                Ldc variants support strongly typed references to constants.
                 This lets us index constant pool entries completely according to tag,
                 which is a great simplification.
                 Ldc variants gain us only 0.007% improvement in compression ratio,
                 but they simplify the file format greatly.                
            </comment>
            <javadoc line="31">
                Shared constants                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <method name="Constants" type="constructor" line="37"/>
            <declaration name="JAVA_MAGIC" type="int" line="39"/>
            <declaration name="JAVA_MIN_CLASS_MAJOR_VERSION" type="short" line="49"/>
            <declaration name="JAVA_MIN_CLASS_MINOR_VERSION" type="short" line="50"/>
            <declaration name="JAVA5_MAX_CLASS_MAJOR_VERSION" type="short" line="52"/>
            <declaration name="JAVA5_MAX_CLASS_MINOR_VERSION" type="short" line="53"/>
            <declaration name="JAVA6_MAX_CLASS_MAJOR_VERSION" type="short" line="55"/>
            <declaration name="JAVA6_MAX_CLASS_MINOR_VERSION" type="short" line="56"/>
            <declaration name="JAVA7_MAX_CLASS_MAJOR_VERSION" type="short" line="58"/>
            <declaration name="JAVA7_MAX_CLASS_MINOR_VERSION" type="short" line="59"/>
            <declaration name="JAVA_PACKAGE_MAGIC" type="int" line="61"/>
            <declaration name="JAVA5_PACKAGE_MAJOR_VERSION" type="int" line="62"/>
            <declaration name="JAVA5_PACKAGE_MINOR_VERSION" type="int" line="63"/>
            <declaration name="JAVA6_PACKAGE_MAJOR_VERSION" type="int" line="65"/>
            <declaration name="JAVA6_PACKAGE_MINOR_VERSION" type="int" line="66"/>
            <declaration name="CONSTANT_POOL_INDEX_LIMIT" type="int" line="68"/>
            <declaration name="CONSTANT_POOL_NARROW_LIMIT" type="int" line="69"/>
            <declaration name="JAVA_SIGNATURE_CHARS" type="String" line="71"/>
            <declaration name="CONSTANT_Utf8" type="byte" line="73"/>
            <declaration name="CONSTANT_unused2" type="byte" line="74"/>
            <declaration name="CONSTANT_Integer" type="byte" line="75"/>
            <declaration name="CONSTANT_Float" type="byte" line="76"/>
            <declaration name="CONSTANT_Long" type="byte" line="77"/>
            <declaration name="CONSTANT_Double" type="byte" line="78"/>
            <declaration name="CONSTANT_Class" type="byte" line="79"/>
            <declaration name="CONSTANT_String" type="byte" line="80"/>
            <declaration name="CONSTANT_Fieldref" type="byte" line="81"/>
            <declaration name="CONSTANT_Methodref" type="byte" line="82"/>
            <declaration name="CONSTANT_InterfaceMethodref" type="byte" line="83"/>
            <declaration name="CONSTANT_NameandType" type="byte" line="84"/>
            <declaration name="CONSTANT_None" type="byte" line="87"/>
            <declaration name="CONSTANT_Signature" type="byte" line="88"/>
            <declaration name="CONSTANT_Limit" type="byte" line="89"/>
            <declaration name="CONSTANT_All" type="byte" line="91"/>
            <declaration name="CONSTANT_Literal" type="byte" line="92"/>
            <declaration name="ACC_IC_LONG_FORM" type="int" line="95"/>
            <declaration name="ATTR_CONTEXT_CLASS" type="int" line="98"/>
            <declaration name="ATTR_CONTEXT_FIELD" type="int" line="99"/>
            <declaration name="ATTR_CONTEXT_METHOD" type="int" line="100"/>
            <declaration name="ATTR_CONTEXT_CODE" type="int" line="101"/>
            <declaration name="ATTR_CONTEXT_LIMIT" type="int" line="102"/>
            <declaration name="ATTR_CONTEXT_NAME" type="String[]" line="103"/>
            <declaration name="X_ATTR_OVERFLOW" type="int" line="107"/>
            <declaration name="FO_DEFLATE_HINT" type="int" line="129"/>
            <declaration name="FO_IS_CLASS_STUB" type="int" line="130"/>
            <declaration name="AO_HAVE_SPECIAL_FORMATS" type="int" line="133"/>
            <declaration name="AO_HAVE_CP_NUMBERS" type="int" line="134"/>
            <declaration name="AO_HAVE_ALL_CODE_FLAGS" type="int" line="135"/>
            <declaration name="AO_3_UNUSED_MBZ" type="int" line="136"/>
            <declaration name="AO_HAVE_FILE_HEADERS" type="int" line="137"/>
            <declaration name="AO_DEFLATE_HINT" type="int" line="138"/>
            <declaration name="AO_HAVE_FILE_MODTIME" type="int" line="139"/>
            <declaration name="AO_HAVE_FILE_OPTIONS" type="int" line="140"/>
            <declaration name="AO_HAVE_FILE_SIZE_HI" type="int" line="141"/>
            <declaration name="AO_HAVE_CLASS_FLAGS_HI" type="int" line="142"/>
            <declaration name="AO_HAVE_FIELD_FLAGS_HI" type="int" line="143"/>
            <declaration name="AO_HAVE_METHOD_FLAGS_HI" type="int" line="144"/>
            <declaration name="AO_HAVE_CODE_FLAGS_HI" type="int" line="145"/>
            <declaration name="LG_AO_HAVE_XXX_FLAGS_HI" type="int" line="147"/>
            <declaration name="VRM_CLASSIC" type="int" line="150"/>
            <declaration name="VRM_PACKAGE" type="int" line="151"/>
            <declaration name="NO_MODTIME" type="int" line="153"/>
            <declaration name="noInts" type="int[]" line="156"/>
            <declaration name="noBytes" type="byte[]" line="157"/>
            <declaration name="noValues" type="Object[]" line="158"/>
            <declaration name="noStrings" type="String[]" line="159"/>
            <declaration name="emptyList" type="List" line="160"/>
            <declaration name="_meta_default" type="int" line="163"/>
            <declaration name="_nop" type="int" line="173"/>
            <declaration name="_end_marker" type="int" line="379"/>
            <declaration name="_byte_escape" type="int" line="381"/>
            <declaration name="_ref_escape" type="int" line="382"/>
            <declaration name="_first_linker_op" type="int" line="397"/>
            <declaration name="_last_linker_op" type="int" line="398"/>
            <declaration name="_num_linker_ops" type="int" line="399"/>
            <declaration name="_self_linker_op" type="int" line="400"/>
            <declaration name="_self_linker_aload_flag" type="int" line="401"/>
            <declaration name="_self_linker_super_flag" type="int" line="402"/>
            <declaration name="_self_linker_limit" type="int" line="403"/>
            <declaration name="_invokeinit_op" type="int" line="410"/>
            <declaration name="_invokeinit_self_option" type="int" line="411"/>
            <declaration name="_invokeinit_super_option" type="int" line="412"/>
            <declaration name="_invokeinit_new_option" type="int" line="413"/>
            <declaration name="_invokeinit_limit" type="int" line="414"/>
            <declaration name="_pseudo_instruction_limit" type="int" line="416"/>
            <declaration name="_xldc_op" type="int" line="424"/>
            <declaration name="_aldc" type="int" line="425"/>
            <declaration name="_cldc" type="int" line="426"/>
            <declaration name="_ildc" type="int" line="427"/>
            <declaration name="_fldc" type="int" line="428"/>
            <declaration name="_aldc_w" type="int" line="429"/>
            <declaration name="_cldc_w" type="int" line="430"/>
            <declaration name="_ildc_w" type="int" line="431"/>
            <declaration name="_fldc_w" type="int" line="432"/>
            <declaration name="_lldc2_w" type="int" line="433"/>
            <declaration name="_dldc2_w" type="int" line="434"/>
            <declaration name="_xldc_limit" type="int" line="435"/>
        </class>
    </source>