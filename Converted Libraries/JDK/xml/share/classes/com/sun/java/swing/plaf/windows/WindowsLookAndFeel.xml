<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.windows">
        <import package="java.awt"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ImageFilter"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.FilteredImageSource"/>
        <import package="java.awt.image.RGBImageFilter"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.text.DefaultEditorKit"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.security.AccessController"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.OSInfo"/>
        <import package="sun.awt.shell.ShellFolder"/>
        <import package="sun.font.FontUtilities"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.swing.DefaultLayoutStyle"/>
        <import package="sun.swing.ImageIconUIResource"/>
        <import package="sun.swing.SwingLazyValue"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.swing.StringUIClientPropertyKey"/>
        <import package="com.sun.java.swing.plaf.windows.TMSchema"/>
        <import package="com.sun.java.swing.plaf.windows.XPStyle.Skin"/>
        <import package="com.sun.java.swing.plaf.windows.WindowsIconFactory.VistaMenuItemCheckIconFactory"/>
        <class name="WindowsLookAndFeel" line="31">
            <extends class="BasicLookAndFeel"/>
            <javadoc line="31">
                Implements the Windows95/98/NT/2000 Look and Feel.
                  UI classes not implemented specifically for Windows will
                  default to those implemented in Basic.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases.  The current serialization support is appropriate
                  for short term storage or RMI between applications running the same
                  version of Swing.  A future release of Swing will provide support for
                  long term persistence.                
                <author>
                    unattributed                    
                </author>
            </javadoc>
            <declaration name="HI_RES_DISABLED_ICON_CLIENT_KEY" type="Object" line="45"/>
            <javadoc line="45">
                A client property that can be used with any JComponent that will end up
                  calling the LookAndFeel.getDisabledIcon method. This client property,
                  when set to Boolean.TRUE, will cause getDisabledIcon to use an
                  alternate algorithm for creating disabled icons to produce icons
                  that appear similar to the native Windows file chooser                
            </javadoc>
            <declaration name="updatePending" type="boolean" line="53"/>
            <declaration name="useSystemFontSettings" type="boolean" line="54"/>
            <declaration name="useSystemFontSizeSettings" type="boolean" line="55"/>
            <declaration name="themeActive" type="DesktopProperty" line="56"/>
            <declaration name="aaSettings" type="DesktopProperty" line="57"/>
            <declaration name="style" type="LayoutStyle" line="58"/>
            <declaration name="baseUnitX" type="int" line="59"/>
            <javadoc line="59">
                Base dialog units along the horizontal axis.                
            </javadoc>
            <declaration name="baseUnitY" type="int" line="63"/>
            <javadoc line="63">
                Base dialog units along the vertical axis.                
            </javadoc>
            <method name="getName" type="String" line="67"/>
            <method name="getDescription" type="String" line="70"/>
            <method name="getID" type="String" line="73"/>
            <method name="isNativeLookAndFeel" type="boolean" line="76"/>
            <method name="isSupportedLookAndFeel" type="boolean" line="79"/>
            <method name="initialize" type="void" line="82">
                <scope line="84"/>
                <scope line="87"/>
                <declaration name="systemFonts" type="String" line="91"/>
                <scope line="93">
                    <declaration name="value" type="Object" line="94"/>
                </scope>
            </method>
            <javadoc line="99">
                Initialize the uiClassID to BasicComponentUI mapping.
                  The JComponent classes define their own uiClassID constants
                  (see AbstractComponent.getUIClassID).  This table must
                  map those constants to a BasicComponentUI class of the
                  appropriate type.                
                <see>
                    BasicLookAndFeel#getDefaults                    
                </see>
            </javadoc>
            <method name="initClassDefaults" type="void" line="107">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <declaration name="windowsPackageName" type="String" line="109"/>
                <declaration name="uiDefaults" type="Object[]" line="110"/>
            </method>
            <javadoc line="113">
                Load the SystemColors into the defaults table.  The keys
                  for SystemColor defaults are the same as the names of
                  the public fields in SystemColor.  If the table is being
                  created on a native Windows platform we use the SystemColor
                  values, otherwise we create color objects whose values match
                  the defaults Windows95 colors.                
            </javadoc>
            <method name="initSystemColorDefaults" type="void" line="121">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <declaration name="defaultSystemColors" type="String[]" line="122"/>
            </method>
            <javadoc line="125">
                Initialize the defaults table with the name of the ResourceBundle
                  used for getting localized defaults.                
            </javadoc>
            <method name="initResourceBundle" type="void" line="129">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
            </method>
            <method name="initComponentDefaults" type="void" line="132">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <declaration name="twelve" type="Integer" line="135"/>
                <declaration name="fontPlain" type="Integer" line="136"/>
                <declaration name="fontBold" type="Integer" line="137"/>
                <declaration name="dialogPlain12" type="Object" line="138"/>
                <declaration name="sansSerifPlain12" type="Object" line="139"/>
                <declaration name="monospacedPlain12" type="Object" line="140"/>
                <declaration name="dialogBold12" type="Object" line="141"/>
                <declaration name="red" type="ColorUIResource" line="142"/>
                <declaration name="black" type="ColorUIResource" line="143"/>
                <declaration name="white" type="ColorUIResource" line="144"/>
                <declaration name="gray" type="ColorUIResource" line="145"/>
                <declaration name="darkGray" type="ColorUIResource" line="146"/>
                <declaration name="scrollBarTrackHighlight" type="ColorUIResource" line="147"/>
                <declaration name="treeExpandedIcon" type="Object" line="149"/>
                <declaration name="treeCollapsedIcon" type="Object" line="150"/>
                <declaration name="fieldInputMap" type="Object" line="151"/>
                <declaration name="passwordInputMap" type="Object" line="152"/>
                <declaration name="multilineInputMap" type="Object" line="153"/>
                <declaration name="menuItemAcceleratorDelimiter" type="Object" line="154"/>
                <declaration name="ControlBackgroundColor" type="Object" line="155"/>
                <declaration name="ControlLightColor" type="Object" line="156"/>
                <declaration name="ControlHighlightColor" type="Object" line="157"/>
                <declaration name="ControlShadowColor" type="Object" line="158"/>
                <declaration name="ControlDarkShadowColor" type="Object" line="159"/>
                <declaration name="ControlTextColor" type="Object" line="160"/>
                <declaration name="MenuBackgroundColor" type="Object" line="161"/>
                <declaration name="MenuBarBackgroundColor" type="Object" line="162"/>
                <declaration name="MenuTextColor" type="Object" line="163"/>
                <declaration name="SelectionBackgroundColor" type="Object" line="164"/>
                <declaration name="SelectionTextColor" type="Object" line="165"/>
                <declaration name="WindowBackgroundColor" type="Object" line="166"/>
                <declaration name="WindowTextColor" type="Object" line="167"/>
                <declaration name="WindowBorderWidth" type="Object" line="168"/>
                <declaration name="TitlePaneHeight" type="Object" line="169"/>
                <declaration name="TitleButtonWidth" type="Object" line="170"/>
                <declaration name="TitleButtonHeight" type="Object" line="171"/>
                <declaration name="InactiveTextColor" type="Object" line="172"/>
                <declaration name="ScrollbarBackgroundColor" type="Object" line="173"/>
                <declaration name="TextBackground" type="Object" line="174"/>
                <declaration name="ReadOnlyTextBackground" type="Object" line="175"/>
                <declaration name="DisabledTextBackground" type="Object" line="176"/>
                <declaration name="MenuFont" type="Object" line="177"/>
                <declaration name="FixedControlFont" type="Object" line="178"/>
                <declaration name="ControlFont" type="Object" line="179"/>
                <declaration name="MessageFont" type="Object" line="180"/>
                <declaration name="WindowFont" type="Object" line="181"/>
                <declaration name="ToolTipFont" type="Object" line="182"/>
                <declaration name="IconFont" type="Object" line="183"/>
                <declaration name="scrollBarWidth" type="Object" line="184"/>
                <declaration name="menuBarHeight" type="Object" line="185"/>
                <declaration name="hotTrackingOn" type="Object" line="186"/>
                <declaration name="showMnemonics" type="Object" line="187"/>
                <scope line="188">
                    <declaration name="aaTextInfo" type="Object" line="196"/>
                </scope>
                <scope line="200"/>
                <scope line="209"/>
                <declaration name="defaults" type="Object[]" line="215"/>
            </method>
            <method name="isOnVista" type="boolean" line="220"/>
            <method name="initVistaComponentDefaults" type="void" line="223">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <scope line="224"/>
                <declaration name="menuClasses" type="String[]" line="227"/>
                <declaration name="menuDefaults" type="Object" line="228"/>
                <scope line="229">
                    <declaration name="key" type="String" line="230"/>
                    <declaration name="oldValue" type="Object" line="231"/>
                </scope>
                <scope line="236">
                    <declaration name="key" type="String" line="237"/>
                    <declaration name="oldValue" type="Object" line="238"/>
                </scope>
                <declaration name="menuItemCheckIconFactory" type="VistaMenuItemCheckIconFactory" line="243"/>
                <scope line="244">
                    <declaration name="key" type="String" line="245"/>
                    <declaration name="oldValue" type="Object" line="246"/>
                </scope>
                <scope line="251">
                    <declaration name="key" type="String" line="252"/>
                    <declaration name="oldValue" type="Object" line="253"/>
                </scope>
                <scope line="258">
                    <declaration name="key" type="String" line="259"/>
                    <declaration name="oldValue" type="Object" line="260"/>
                </scope>
                <declaration name="insets" type="InsetsUIResource" line="265"/>
                <scope line="266">
                    <declaration name="key" type="String" line="267"/>
                    <declaration name="oldValue" type="Object" line="268"/>
                </scope>
                <declaration name="checkIconOffsetInteger" type="Integer" line="273"/>
                <scope line="274">
                    <declaration name="key" type="String" line="275"/>
                    <declaration name="oldValue" type="Object" line="276"/>
                </scope>
                <declaration name="afterCheckIconGap" type="Integer" line="281"/>
                <scope line="282">
                    <declaration name="key" type="String" line="283"/>
                    <declaration name="oldValue" type="Object" line="284"/>
                </scope>
                <anonymous_class line="289">
                    <method name="createValue" type="Object" line="290">
                        <params>
                            <param name="table" type="UIDefaults"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="minimumTextOffset" type="Object" line="289"/>
                <scope line="295">
                    <declaration name="key" type="String" line="296"/>
                    <declaration name="oldValue" type="Object" line="297"/>
                </scope>
                <declaration name="POPUP_MENU_BORDER" type="String" line="302"/>
                <declaration name="popupMenuBorder" type="Object" line="303"/>
            </method>
            <javadoc line="308">
                If we support loading of fonts from the desktop this will return
                  a DesktopProperty representing the font. If the font can&apos;t be
                  represented in the current encoding this will return null and
                  turn off the use of system fonts.                
            </javadoc>
            <method name="getDesktopFontValue" type="Object" line="314">
                <params>
                    <param name="fontName" type="String"/>
                    <param name="backup" type="Object"/>
                </params>
                <scope line="315"/>
            </method>
            <method name="getLazyValueDefaults" type="Object[]" line="320">
                <declaration name="buttonBorder" type="Object" line="321"/>
                <declaration name="textFieldBorder" type="Object" line="322"/>
                <declaration name="textFieldMargin" type="Object" line="323"/>
                <declaration name="spinnerBorder" type="Object" line="324"/>
                <declaration name="spinnerArrowInsets" type="Object" line="325"/>
                <declaration name="comboBoxBorder" type="Object" line="326"/>
                <declaration name="focusCellHighlightBorder" type="Object" line="327"/>
                <declaration name="etchedBorder" type="Object" line="328"/>
                <declaration name="internalFrameBorder" type="Object" line="329"/>
                <declaration name="loweredBevelBorder" type="Object" line="330"/>
                <declaration name="marginBorder" type="Object" line="331"/>
                <declaration name="menuBarBorder" type="Object" line="332"/>
                <declaration name="popupMenuBorder" type="Object" line="333"/>
                <declaration name="progressBarBorder" type="Object" line="334"/>
                <declaration name="radioButtonBorder" type="Object" line="335"/>
                <declaration name="scrollPaneBorder" type="Object" line="336"/>
                <declaration name="tableScrollPaneBorder" type="Object" line="337"/>
                <declaration name="tableHeaderBorder" type="Object" line="338"/>
                <declaration name="toolBarBorder" type="Object" line="339"/>
                <declaration name="toolTipBorder" type="Object" line="340"/>
                <declaration name="checkBoxIcon" type="Object" line="341"/>
                <declaration name="radioButtonIcon" type="Object" line="342"/>
                <declaration name="radioButtonMenuItemIcon" type="Object" line="343"/>
                <declaration name="menuItemCheckIcon" type="Object" line="344"/>
                <declaration name="menuItemArrowIcon" type="Object" line="345"/>
                <declaration name="menuArrowIcon" type="Object" line="346"/>
                <declaration name="lazyDefaults" type="Object[]" line="347"/>
            </method>
            <method name="uninitialize" type="void" line="350">
                <scope line="352"/>
            </method>
            <declaration name="isMnemonicHidden" type="boolean" line="358"/>
            <declaration name="isClassicWindows" type="boolean" line="359"/>
            <javadoc line="360">
                Sets the state of the hide mnemonic flag. This flag is used by the
                  component UI delegates to determine if the mnemonic should be rendered.
                  This method is a non operation if the underlying operating system
                  does not support the mnemonic hiding feature.                
                <param>
                    hide true if mnemonics should be hidden                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setMnemonicHidden" type="void" line="368">
                <params>
                    <param name="hide" type="boolean"/>
                </params>
                <scope line="369"/>
                <scope line="372"/>
            </method>
            <javadoc line="376">
                Gets the state of the hide mnemonic flag. This only has meaning
                  if this feature is supported by the underlying OS.                
                <return>
                    true if mnemonics are hidden, otherwise, false                    
                </return>
                <see>
                    #setMnemonicHidden                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMnemonicHidden" type="boolean" line="383">
                <scope line="384"/>
            </method>
            <javadoc line="389">
                Gets the state of the flag which indicates if the old Windows
                  look and feel should be rendered. This flag is used by the
                  component UI delegates as a hint to determine which style the component
                  should be rendered.                
                <return>
                    true if Windows 95 and Windows NT 4 look and feel should
                      be rendered                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isClassicWindows" type="boolean" line="398"/>
            <javadoc line="401">
                &lt;p&gt;
                  Invoked when the user attempts an invalid operation,
                  such as pasting into an uneditable &lt;code&gt;JTextField&lt;/code&gt;
                  that has focus.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the user has enabled visual error indication on
                  the desktop, this method will flash the caption bar
                  of the active window. The user can also set the
                  property awt.visualbell=true to achieve the same
                  results.
                  &lt;/p&gt;                
                <param>
                    component Component the error occured in, may be
                      null indicating the error condition is
                      not directly associated with a
                      <code>Component</code>.                    
                </param>
                <see>
                    javax.swing.LookAndFeel#provideErrorFeedback                    
                </see>
            </javadoc>
            <method name="provideErrorFeedback" type="void" line="420">
                <params>
                    <param name="component" type="Component"/>
                </params>
            </method>
            <javadoc line="423">
                {@inheritDoc}                
            </javadoc>
            <method name="getLayoutStyle" type="LayoutStyle" line="426">
                <declaration name="style" type="LayoutStyle" line="427"/>
                <scope line="428"/>
            </method>
            <javadoc line="434">
                Returns an &lt;code&gt;Action&lt;/code&gt;.
                  &lt;P&gt;
                  This Action contains the information and logic to render an
                  auditory cue. The &lt;code&gt;Object&lt;/code&gt; that is passed to this
                  method contains the information needed to render the auditory
                  cue. Normally, this &lt;code&gt;Object&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt;
                  that points to a &lt;code&gt;Toolkit&lt;/code&gt; &lt;code&gt;desktopProperty&lt;/code&gt;.
                  This &lt;code&gt;desktopProperty&lt;/code&gt; is resolved by AWT and the
                  Windows OS.
                  &lt;P&gt;
                  This &lt;code&gt;Action&lt;/code&gt;&apos;s &lt;code&gt;actionPerformed&lt;/code&gt; method
                  is fired by the &lt;code&gt;playSound&lt;/code&gt; method.                
                <return>
                    an Action which knows how to render the auditory
                      cue for one particular system or user activity                    
                </return>
                <see>
                    #playSound(Action)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createAudioAction" type="Action" line="452">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="453">
                    <declaration name="audioKey" type="String" line="454"/>
                    <declaration name="audioValue" type="String" line="455"/>
                </scope>
                <scope line="458"/>
            </method>
            <method name="repaintRootPane" type="void" line="462">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="root" type="JRootPane" line="463"/>
                <scope line="464">
                    <scope line="465"/>
                </scope>
                <scope line="469"/>
                <scope line="472"/>
            </method>
            <class name="AudioAction" line="476">
                <extends class="AbstractAction"/>
                <javadoc line="476">
                    Pass the name String to the super constructor. This is used
                      later to identify the Action and decide whether to play it or
                      not. Store the resource String. It is used to get the audio
                      resource. In this case, the resource is a &lt;code&gt;Runnable&lt;/code&gt;
                      supplied by &lt;code&gt;Toolkit&lt;/code&gt;. This &lt;code&gt;Runnable&lt;/code&gt; is
                      effectively a pointer down into the Win32 OS that knows how to
                      play the right sound.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="audioRunnable" type="Runnable" line="487"/>
                <declaration name="audioResource" type="String" line="488"/>
                <javadoc line="489">
                    We use the String as the name of the Action and as a pointer to
                      the underlying OSes audio resource.                    
                </javadoc>
                <method name="AudioAction" type="constructor" line="493">
                    <params>
                        <param name="name" type="String"/>
                        <param name="resource" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="497">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="498"/>
                    <scope line="501"/>
                </method>
            </class>
            <class name="LazyWindowsIcon" line="506">
                <implements interface="UIDefaults.LazyValue"/>
                <javadoc line="506">
                    Gets an &lt;code&gt;Icon&lt;/code&gt; from the native libraries if available,
                      otherwise gets it from an image resource file.                    
                </javadoc>
                <declaration name="nativeImage" type="String" line="511"/>
                <declaration name="resource" type="String" line="512"/>
                <method name="LazyWindowsIcon" type="constructor" line="513">
                    <params>
                        <param name="nativeImage" type="String"/>
                        <param name="resource" type="String"/>
                    </params>
                </method>
                <method name="createValue" type="Object" line="517">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <scope line="518">
                        <declaration name="image" type="Image" line="519"/>
                        <scope line="520"/>
                    </scope>
                </method>
            </class>
            <class name="ActiveWindowsIcon" line="527">
                <implements interface="UIDefaults.ActiveValue"/>
                <javadoc line="527">
                    Gets an &lt;code&gt;Icon&lt;/code&gt; from the native libraries if available.
                      A desktop property is used to trigger reloading the icon when needed.                    
                </javadoc>
                <declaration name="icon" type="Icon" line="532"/>
                <declaration name="nativeImageName" type="String" line="533"/>
                <declaration name="fallbackName" type="String" line="534"/>
                <declaration name="desktopProperty" type="DesktopProperty" line="535"/>
                <method name="ActiveWindowsIcon" type="constructor" line="536">
                    <params>
                        <param name="desktopPropertyName" type="String"/>
                        <param name="nativeImageName" type="String"/>
                        <param name="fallbackName" type="String"/>
                    </params>
                    <scope line="539">
                        <anonymous_class line="540">
                            <method name="updateUI" type="void" line="541"/>
                        </anonymous_class>
                    </scope>
                </method>
                <method name="createValue" type="Object" line="549">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <scope line="550">
                        <declaration name="image" type="Image" line="551"/>
                        <scope line="552"/>
                    </scope>
                    <scope line="556">
                        <declaration name="fallback" type="UIDefaults.LazyValue" line="557"/>
                    </scope>
                </method>
            </class>
            <class name="SkinIcon" line="563">
                <implements interface="Icon"/>
                <implements interface="UIResource"/>
                <javadoc line="563">
                    Icon backed-up by XP Skin.                    
                </javadoc>
                <declaration name="part" type="Part" line="567"/>
                <declaration name="state" type="State" line="568"/>
                <method name="SkinIcon" type="constructor" line="569">
                    <params>
                        <param name="part" type="Part"/>
                        <param name="state" type="State"/>
                    </params>
                </method>
                <javadoc line="573">
                    Draw the icon at the specified location.  Icon implementations
                      may use the Component argument to get properties useful for
                      painting, e.g. the foreground or background color.                    
                </javadoc>
                <method name="paintIcon" type="void" line="578">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                </method>
                <javadoc line="586">
                    Returns the icon&apos;s width.                    
                    <return>
                        an int specifying the fixed width of the icon.                        
                    </return>
                </javadoc>
                <method name="getIconWidth" type="int" line="590"/>
                <javadoc line="600">
                    Returns the icon&apos;s height.                    
                    <return>
                        an int specifying the fixed height of the icon.                        
                    </return>
                </javadoc>
                <method name="getIconHeight" type="int" line="604">
                    <declaration name="height" type="int" line="605"/>
                    <declaration name="xp" type="XPStyle" line="606"/>
                    <scope line="607">
                        <declaration name="skin" type="Skin" line="608"/>
                    </scope>
                </method>
            </class>
            <class name="WindowsFontProperty" line="614">
                <extends class="DesktopProperty"/>
                <javadoc line="614">
                    DesktopProperty for fonts. If a font with the name &apos;MS Sans Serif&apos;
                      is returned, it is mapped to &apos;Microsoft Sans Serif&apos;.                    
                </javadoc>
                <method name="WindowsFontProperty" type="constructor" line="619">
                    <params>
                        <param name="key" type="String"/>
                        <param name="backup" type="Object"/>
                    </params>
                </method>
                <method name="invalidate" type="void" line="622">
                    <params>
                        <param name="laf" type="LookAndFeel"/>
                    </params>
                    <scope line="623"/>
                </method>
                <method name="configureValue" type="Object" line="628">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                    <scope line="629">
                        <declaration name="font" type="Font" line="630"/>
                        <scope line="631">
                            <declaration name="size" type="int" line="632"/>
                            <declaration name="dpi" type="int" line="633"/>
                            <scope line="634"/>
                            <scope line="637"/>
                            <scope line="640"/>
                            <declaration name="msFont" type="Font" line="643"/>
                            <scope line="644"/>
                            <scope line="647"/>
                        </scope>
                        <scope line="651">
                            <scope line="652"/>
                        </scope>
                        <scope line="656"/>
                    </scope>
                </method>
            </class>
            <class name="WindowsFontSizeProperty" line="664">
                <extends class="DesktopProperty"/>
                <javadoc line="664">
                    DesktopProperty for fonts that only gets sizes from the desktop,
                      font name and style are passed into the constructor                    
                </javadoc>
                <declaration name="fontName" type="String" line="669"/>
                <declaration name="fontSize" type="int" line="670"/>
                <declaration name="fontStyle" type="int" line="671"/>
                <method name="WindowsFontSizeProperty" type="constructor" line="672">
                    <params>
                        <param name="key" type="String"/>
                        <param name="fontName" type="String"/>
                        <param name="fontStyle" type="int"/>
                        <param name="fontSize" type="int"/>
                    </params>
                </method>
                <method name="configureValue" type="Object" line="678">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                    <scope line="679"/>
                    <scope line="682"/>
                </method>
            </class>
            <class name="XPValue" line="688">
                <implements interface="UIDefaults.ActiveValue"/>
                <javadoc line="688">
                    A value wrapper that actively retrieves values from xp or falls back
                      to the classic value if not running XP styles.                    
                </javadoc>
                <declaration name="classicValue" type="Object" line="693"/>
                <declaration name="NULL_VALUE" type="Object" line="694"/>
                <method name="XPValue" type="constructor" line="695">
                    <params>
                        <param name="xpValue" type="Object"/>
                        <param name="classicValue" type="Object"/>
                    </params>
                </method>
                <method name="createValue" type="Object" line="699">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <declaration name="value" type="Object" line="700"/>
                    <scope line="701"/>
                    <scope line="704"/>
                    <scope line="707"/>
                </method>
                <method name="getXPValue" type="Object" line="712">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                </method>
                <method name="getClassicValue" type="Object" line="715">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                </method>
                <method name="recursiveCreateValue" type="Object" line="718">
                    <params>
                        <param name="value" type="Object"/>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <scope line="719"/>
                    <scope line="722"/>
                    <scope line="725"/>
                </method>
            </class>
            <class name="XPBorderValue" line="730">
                <extends class="XPValue"/>
                <declaration name="extraMargin" type="Border" line="731"/>
                <method name="XPBorderValue" type="constructor" line="732">
                    <params>
                        <param name="xpValue" type="Part"/>
                        <param name="classicValue" type="Object"/>
                    </params>
                </method>
                <method name="XPBorderValue" type="constructor" line="735">
                    <params>
                        <param name="xpValue" type="Part"/>
                        <param name="classicValue" type="Object"/>
                        <param name="extraMargin" type="Border"/>
                    </params>
                </method>
                <method name="getXPValue" type="Object" line="739">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <declaration name="xpBorder" type="Border" line="740"/>
                    <scope line="741"/>
                    <scope line="744"/>
                </method>
            </class>
            <class name="XPColorValue" line="749">
                <extends class="XPValue"/>
                <method name="XPColorValue" type="constructor" line="750">
                    <params>
                        <param name="part" type="Part"/>
                        <param name="state" type="State"/>
                        <param name="prop" type="Prop"/>
                        <param name="classicValue" type="Object"/>
                    </params>
                </method>
                <method name="getXPValue" type="Object" line="753">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <declaration name="key" type="XPColorValueKey" line="754"/>
                </method>
                <class name="XPColorValueKey" line="757">
                    <declaration name="skin" type="Skin" line="758"/>
                    <declaration name="prop" type="Prop" line="759"/>
                    <method name="XPColorValueKey" type="constructor" line="760">
                        <params>
                            <param name="part" type="Part"/>
                            <param name="state" type="State"/>
                            <param name="prop" type="Prop"/>
                        </params>
                    </method>
                </class>
            </class>
            <class name="XPDLUValue" line="766">
                <extends class="XPValue"/>
                <declaration name="direction" type="int" line="767"/>
                <method name="XPDLUValue" type="constructor" line="768">
                    <params>
                        <param name="xpdlu" type="int"/>
                        <param name="classicdlu" type="int"/>
                        <param name="direction" type="int"/>
                    </params>
                </method>
                <method name="getXPValue" type="Object" line="772">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <declaration name="px" type="int" line="773"/>
                </method>
                <method name="getClassicValue" type="Object" line="776">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <declaration name="px" type="int" line="777"/>
                </method>
            </class>
            <class name="TriggerDesktopProperty" line="781">
                <extends class="DesktopProperty"/>
                <method name="TriggerDesktopProperty" type="constructor" line="782">
                    <params>
                        <param name="key" type="String"/>
                    </params>
                </method>
                <method name="updateUI" type="void" line="786"/>
            </class>
            <class name="FontDesktopProperty" line="791">
                <extends class="TriggerDesktopProperty"/>
                <method name="FontDesktopProperty" type="constructor" line="792">
                    <params>
                        <param name="key" type="String"/>
                    </params>
                </method>
                <method name="updateUI" type="void" line="795">
                    <declaration name="aaTextInfo" type="Object" line="796"/>
                    <declaration name="defaults" type="UIDefaults" line="797"/>
                </method>
            </class>
            <class name="WindowsLayoutStyle" line="802">
                <extends class="DefaultLayoutStyle"/>
                <method name="getPreferredGap" type="int" line="803">
                    <params>
                        <param name="component1" type="JComponent"/>
                        <param name="component2" type="JComponent"/>
                        <param name="type" type="ComponentPlacement"/>
                        <param name="position" type="int"/>
                        <param name="parent" type="Container"/>
                    </params>
                    <scope line="807">
                        <declaration name="indent" type="int" line="808"/>
                        <scope line="809"/>
                    </scope>
                    <scope line="815"/>
                </method>
                <method name="getContainerGap" type="int" line="824">
                    <params>
                        <param name="component" type="JComponent"/>
                        <param name="position" type="int"/>
                        <param name="parent" type="Container"/>
                    </params>
                </method>
            </class>
            <javadoc line="829">
                Converts the dialog unit argument to pixels along the specified
                  axis.                
            </javadoc>
            <method name="dluToPixels" type="int" line="833">
                <params>
                    <param name="dlu" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <scope line="834"/>
                <scope line="837"/>
            </method>
            <javadoc line="843">
                Calculates the dialog unit mapping.                
            </javadoc>
            <method name="calculateBaseUnits" type="void" line="846">
                <declaration name="metrics" type="FontMetrics" line="847"/>
            </method>
            <javadoc line="852">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDisabledIcon" type="Icon" line="856">
                <params>
                    <param name="component" type="JComponent"/>
                    <param name="icon" type="Icon"/>
                </params>
                <scope line="857">
                    <declaration name="img" type="BufferedImage" line="858"/>
                    <declaration name="filter" type="ImageFilter" line="860"/>
                    <declaration name="producer" type="ImageProducer" line="861"/>
                    <declaration name="resultImage" type="Image" line="862"/>
                </scope>
            </method>
            <class name="RGBGrayFilter" line="867">
                <extends class="RGBImageFilter"/>
                <method name="RGBGrayFilter" type="constructor" line="868"/>
                <method name="filterRGB" type="int" line="871">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="rgb" type="int"/>
                    </params>
                    <declaration name="avg" type="float" line="872"/>
                    <declaration name="alpha" type="float" line="873"/>
                    <declaration name="rgbval" type="int" line="875"/>
                </method>
            </class>
        </class>
    </source>