<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.windows">
        <import package="java.awt"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.ImageFilter"/>
        <import package="java.awt.image.ImageProducer"/>
        <import package="java.awt.image.FilteredImageSource"/>
        <import package="java.awt.image.RGBImageFilter"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.text.DefaultEditorKit"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.security.AccessController"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.OSInfo"/>
        <import package="sun.awt.shell.ShellFolder"/>
        <import package="sun.font.FontUtilities"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.swing.DefaultLayoutStyle"/>
        <import package="sun.swing.ImageIconUIResource"/>
        <import package="sun.swing.SwingLazyValue"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.swing.StringUIClientPropertyKey"/>
        <import package="com.sun.java.swing.plaf.windows.TMSchema"/>
        <import package="com.sun.java.swing.plaf.windows.XPStyle.Skin"/>
        <import package="com.sun.java.swing.plaf.windows.WindowsIconFactory.VistaMenuItemCheckIconFactory"/>
        <class name="WindowsLookAndFeel" line="80">
            <extends class="BasicLookAndFeel"/>
            <comment line="113">
                These properties are not used directly, but are kept as
                 private members to avoid being GC&apos;d.                
            </comment>
            <comment line="292">
                XXX - there are probably a lot of redundant values that could be removed.
                 ie. Take a look at RadioButtonBorder, etc...                
            </comment>
            <comment line="1753">
                When a desktop property change is detected, these classes must be
                 reinitialized in the defaults table to ensure the classes reference
                 the updated desktop property values (colors mostly)                
            </comment>
            <comment line="1947">
                Toggle flag for drawing the mnemonic state                
            </comment>
            <comment line="1950">
                Flag which indicates that the Win98/Win2k/WinME features
                 should be disabled.                
            </comment>
            <comment line="2039">
                ********* Auditory Cue support methods and objects *********                
            </comment>
            <comment line="2483">
                Windows LayoutStyle.  From:
                 http:msdn.microsoft.com/library/default.asp?url=/library/en-us/dnwue/html/ch14e.asp                
            </comment>
            <javadoc line="80">
                Implements the Windows95/98/NT/2000 Look and Feel.
                  UI classes not implemented specifically for Windows will
                  default to those implemented in Basic.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases.  The current serialization support is appropriate
                  for short term storage or RMI between applications running the same
                  version of Swing.  A future release of Swing will provide support for
                  long term persistence.                
                <author>
                    unattributed                    
                </author>
            </javadoc>
            <declaration name="HI_RES_DISABLED_ICON_CLIENT_KEY" type="Object" line="96"/>
            <javadoc line="96">
                A client property that can be used with any JComponent that will end up
                  calling the LookAndFeel.getDisabledIcon method. This client property,
                  when set to Boolean.TRUE, will cause getDisabledIcon to use an
                  alternate algorithm for creating disabled icons to produce icons
                  that appear similar to the native Windows file chooser                
            </javadoc>
            <declaration name="updatePending" type="boolean" line="107"/>
            <declaration name="useSystemFontSettings" type="boolean" line="109"/>
            <declaration name="useSystemFontSizeSettings" type="boolean" line="110"/>
            <declaration name="themeActive" type="DesktopProperty" line="114"/>
            <declaration name="aaSettings" type="DesktopProperty" line="115"/>
            <declaration name="style" type="LayoutStyle" line="117"/>
            <declaration name="baseUnitX" type="int" line="119"/>
            <javadoc line="119">
                Base dialog units along the horizontal axis.                
            </javadoc>
            <declaration name="baseUnitY" type="int" line="124"/>
            <javadoc line="124">
                Base dialog units along the vertical axis.                
            </javadoc>
            <method name="getName" type="String" line="129"/>
            <method name="getDescription" type="String" line="133"/>
            <method name="getID" type="String" line="137"/>
            <method name="isNativeLookAndFeel" type="boolean" line="141"/>
            <method name="isSupportedLookAndFeel" type="boolean" line="145"/>
            <method name="initialize" type="void" line="149">
                <comment line="153">
                    Set the flag which determines which version of Windows should
                     be rendered. This flag only need to be set once.
                     if version &lt;= 4.0 then the classic LAF should be loaded.                    
                </comment>
                <comment line="163">
                    Using the fonts set by the user can potentially cause
                     performance and compatibility issues, so allow this feature
                     to be switched off either at runtime or programmatically                    
                </comment>
                <scope line="155"/>
                <scope line="157"/>
                <declaration name="systemFonts" type="String" line="166"/>
                <scope line="171">
                    <declaration name="value" type="Object" line="172"/>
                </scope>
            </method>
            <javadoc line="182">
                Initialize the uiClassID to BasicComponentUI mapping.
                  The JComponent classes define their own uiClassID constants
                  (see AbstractComponent.getUIClassID).  This table must
                  map those constants to a BasicComponentUI class of the
                  appropriate type.                
                <see>
                    BasicLookAndFeel#getDefaults                    
                </see>
            </javadoc>
            <method name="initClassDefaults" type="void" line="192">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <declaration name="windowsPackageName" type="String" line="195"/>
                <declaration name="uiDefaults" type="Object[]" line="197"/>
            </method>
            <javadoc line="237">
                Load the SystemColors into the defaults table.  The keys
                  for SystemColor defaults are the same as the names of
                  the public fields in SystemColor.  If the table is being
                  created on a native Windows platform we use the SystemColor
                  values, otherwise we create color objects whose values match
                  the defaults Windows95 colors.                
            </javadoc>
            <method name="initSystemColorDefaults" type="void" line="246">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <comment line="249">
                                        
                </comment>
                <comment line="250">
                                        
                </comment>
                <comment line="251">
                                        
                </comment>
                <comment line="252">
                                        
                </comment>
                <comment line="253">
                                        
                </comment>
                <comment line="254">
                                        
                </comment>
                <comment line="255">
                                        
                </comment>
                <comment line="256">
                                        
                </comment>
                <comment line="257">
                                        
                </comment>
                <comment line="258">
                                        
                </comment>
                <comment line="259">
                                        
                </comment>
                <comment line="260">
                                        
                </comment>
                <comment line="261">
                                        
                </comment>
                <comment line="262">
                                        
                </comment>
                <comment line="263">
                                        
                </comment>
                <comment line="264">
                                        
                </comment>
                <comment line="265">
                                        
                </comment>
                <comment line="266">
                                        
                </comment>
                <comment line="267">
                                        
                </comment>
                <comment line="268">
                                        
                </comment>
                <comment line="269">
                                        
                </comment>
                <comment line="272">
                                        
                </comment>
                <comment line="272">
                                        
                </comment>
                <comment line="273">
                                        
                </comment>
                <comment line="274">
                                        
                </comment>
                <comment line="275">
                                        
                </comment>
                <comment line="276">
                                        
                </comment>
                <comment line="277">
                                        
                </comment>
                <comment line="278">
                                        
                </comment>
                <declaration name="defaultSystemColors" type="String[]" line="247"/>
            </method>
            <javadoc line="283">
                Initialize the defaults table with the name of the ResourceBundle
                  used for getting localized defaults.                
            </javadoc>
            <method name="initResourceBundle" type="void" line="287">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
            </method>
            <method name="initComponentDefaults" type="void" line="294">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <comment line="300">
                    *** Shared Fonts                    
                </comment>
                <comment line="323">
                    *** Colors
                     XXX - some of these doens&apos;t seem to be used                    
                </comment>
                <comment line="332">
                    Set the flag which determines which version of Windows should
                     be rendered. This flag only need to be set once.
                     if version &lt;= 4.0 then the classic LAF should be loaded.                    
                </comment>
                <comment line="337">
                    *** Tree                    
                </comment>
                <comment line="343">
                    *** Text                    
                </comment>
                <comment line="355">
                                        
                </comment>
                <comment line="377">
                                        
                </comment>
                <comment line="391">
                                        
                </comment>
                <comment line="411">
                                        
                </comment>
                <comment line="431">
                                        
                </comment>
                <comment line="465">
                                        
                </comment>
                <comment line="530">
                    The following four lines were commented out as part of bug 4991597
                    This code *is* correct, however it differs from WindowsXP and is, apparently
                    a Windows XP bug. Until Windows fixes this bug, we shall also exhibit the same
                    behavior
                    Object ReadOnlyTextBackground = new XPColorValue(Part.EP_EDITTEXT, State.READONLY, Prop.FILLCOLOR,
                                                                     ControlBackgroundColor);
                    Object DisabledTextBackground = new XPColorValue(Part.EP_EDITTEXT, State.DISABLED, Prop.FILLCOLOR,
                                                                     ControlBackgroundColor);                    
                </comment>
                <comment line="566">
                    Put the desktop AA settings in the defaults.
                     JComponent.setUI() retrieves this and makes it available
                     as a client property on the JComponent. Use the same key name
                     for both client property and UIDefaults.
                     Also need to set up listeners for changes in these settings.                    
                </comment>
                <comment line="594">
                    These desktop properties are not used directly, but are needed to
                     trigger realoading of UI&apos;s.                    
                </comment>
                <comment line="604">
                    *** Auditory Feedback
                     this key defines which of the various cues to render
                     Overridden from BasicL&amp;F. This L&amp;F should play all sounds
                     all the time. The infrastructure decides what to play.
                     This is disabled until sound bugs can be resolved.                    
                </comment>
                <comment line="609">
                    table.get(&quot;AuditoryCues.cueList&quot;),                    
                </comment>
                <comment line="619">
                    Buttons                    
                </comment>
                <comment line="622">
                    Button.foreground, Button.shadow, Button.darkShadow,
                     Button.disabledForground, and Button.disabledShadow are only
                     used for Windows Classic. Windows XP will use colors
                     from the current visual style.                    
                </comment>
                <comment line="640">
                    W2K keyboard navigation hidding.                    
                </comment>
                <comment line="662">
                    margin is 2 all the way around, BasicBorders.RadioButtonBorder
                     (checkbox uses RadioButtonBorder) is 2 all the way around too.                    
                </comment>
                <comment line="710">
                    DeskTop.                    
                </comment>
                <comment line="739">
                    DesktopIcon                    
                </comment>
                <comment line="855">
                    The constructor takes one arg: an array of UIDefaults.LazyValue
                     representing the icons                    
                </comment>
                <comment line="862">
                    Internal Frame Auditory Cue Mappings                    
                </comment>
                <comment line="874">
                    Label                    
                </comment>
                <comment line="881">
                    List.                    
                </comment>
                <comment line="956">
                    PopupMenu                    
                </comment>
                <comment line="963">
                    Menus                    
                </comment>
                <comment line="979">
                    MenuBar.                    
                </comment>
                <comment line="1001">
                    Menu Item Auditory Cue Mapping                    
                </comment>
                <comment line="1003">
                    indicates that keyboard navigation won&apos;t skip disabled menu items                    
                </comment>
                <comment line="1020">
                    margin is 2 all the way around, BasicBorders.RadioButtonBorder
                     is 2 all the way around too.                    
                </comment>
                <comment line="1035">
                    OptionPane.                    
                </comment>
                <comment line="1053">
                    Option Pane Auditory Cue Mappings                    
                </comment>
                <comment line="1054">
                    Error                    
                </comment>
                <comment line="1055">
                    Info Plain                    
                </comment>
                <comment line="1056">
                    Question                    
                </comment>
                <comment line="1057">
                    Warning                    
                </comment>
                <comment line="1109">
                    *** Panel                    
                </comment>
                <comment line="1114">
                    *** PasswordField                    
                </comment>
                <comment line="1118">
                    for disabled                    
                </comment>
                <comment line="1119">
                    for readonly                    
                </comment>
                <comment line="1120">
                    for disabled                    
                </comment>
                <comment line="1127">
                    *** ProgressBar                    
                </comment>
                <comment line="1139">
                    *** RootPane.
                     These bindings are only enabled when there is a default
                     button set on the rootpane.                    
                </comment>
                <comment line="1149">
                    *** ScrollBar.                    
                </comment>
                <comment line="1179">
                    *** ScrollPane.                    
                </comment>
                <comment line="1201">
                    *** Separator                    
                </comment>
                <comment line="1205">
                    *** Slider.                    
                </comment>
                <comment line="1228">
                    Spinner                    
                </comment>
                <comment line="1238">
                    *** SplitPane                    
                </comment>
                <comment line="1262">
                    *** TabbedPane                    
                </comment>
                <comment line="1299">
                    *** Table                    
                </comment>
                <comment line="1301">
                    cell text color                    
                </comment>
                <comment line="1302">
                    cell background color                    
                </comment>
                <comment line="1309">
                    grid line color                    
                </comment>
                <comment line="1390">
                    header text color                    
                </comment>
                <comment line="1391">
                    header background                    
                </comment>
                <comment line="1393">
                    use default bg from XP styles                    
                </comment>
                <comment line="1394">
                    or white bg otherwise                    
                </comment>
                <comment line="1396">
                    *** TextArea                    
                </comment>
                <comment line="1407">
                    *** TextField                    
                </comment>
                <comment line="1415">
                    for disabled                    
                </comment>
                <comment line="1416">
                    for readonly                    
                </comment>
                <comment line="1417">
                    for disabled                    
                </comment>
                <comment line="1422">
                    *** TextPane                    
                </comment>
                <comment line="1432">
                    *** TitledBorder                    
                </comment>
                <comment line="1438">
                    *** ToggleButton                    
                </comment>
                <comment line="1454">
                    *** ToolBar                    
                </comment>
                <comment line="1479">
                    *** ToolTip                    
                </comment>
                <comment line="1484">
                    *** ToolTipManager                    
                </comment>
                <comment line="1487">
                    *** Tree                    
                </comment>
                <comment line="1574">
                    *** Viewport                    
                </comment>
                <declaration name="twelve" type="Integer" line="300"/>
                <declaration name="fontPlain" type="Integer" line="301"/>
                <declaration name="fontBold" type="Integer" line="302"/>
                <declaration name="dialogPlain12" type="Object" line="304"/>
                <declaration name="sansSerifPlain12" type="Object" line="309"/>
                <declaration name="monospacedPlain12" type="Object" line="313"/>
                <declaration name="dialogBold12" type="Object" line="317"/>
                <declaration name="red" type="ColorUIResource" line="324"/>
                <declaration name="black" type="ColorUIResource" line="325"/>
                <declaration name="white" type="ColorUIResource" line="326"/>
                <declaration name="gray" type="ColorUIResource" line="327"/>
                <declaration name="darkGray" type="ColorUIResource" line="328"/>
                <declaration name="scrollBarTrackHighlight" type="ColorUIResource" line="329"/>
                <declaration name="treeExpandedIcon" type="Object" line="337"/>
                <declaration name="treeCollapsedIcon" type="Object" line="339"/>
                <declaration name="fieldInputMap" type="Object" line="343"/>
                <declaration name="passwordInputMap" type="Object" line="379"/>
                <declaration name="multilineInputMap" type="Object" line="413"/>
                <declaration name="menuItemAcceleratorDelimiter" type="Object" line="467"/>
                <declaration name="ControlBackgroundColor" type="Object" line="469"/>
                <declaration name="ControlLightColor" type="Object" line="472"/>
                <declaration name="ControlHighlightColor" type="Object" line="475"/>
                <declaration name="ControlShadowColor" type="Object" line="478"/>
                <declaration name="ControlDarkShadowColor" type="Object" line="481"/>
                <declaration name="ControlTextColor" type="Object" line="484"/>
                <declaration name="MenuBackgroundColor" type="Object" line="487"/>
                <declaration name="MenuBarBackgroundColor" type="Object" line="490"/>
                <declaration name="MenuTextColor" type="Object" line="493"/>
                <declaration name="SelectionBackgroundColor" type="Object" line="496"/>
                <declaration name="SelectionTextColor" type="Object" line="499"/>
                <declaration name="WindowBackgroundColor" type="Object" line="502"/>
                <declaration name="WindowTextColor" type="Object" line="505"/>
                <declaration name="WindowBorderWidth" type="Object" line="508"/>
                <declaration name="TitlePaneHeight" type="Object" line="511"/>
                <declaration name="TitleButtonWidth" type="Object" line="514"/>
                <declaration name="TitleButtonHeight" type="Object" line="517"/>
                <declaration name="InactiveTextColor" type="Object" line="520"/>
                <declaration name="ScrollbarBackgroundColor" type="Object" line="523"/>
                <declaration name="TextBackground" type="Object" line="527"/>
                <declaration name="ReadOnlyTextBackground" type="Object" line="537"/>
                <declaration name="DisabledTextBackground" type="Object" line="538"/>
                <declaration name="MenuFont" type="Object" line="540"/>
                <declaration name="FixedControlFont" type="Object" line="541"/>
                <declaration name="ControlFont" type="Object" line="542"/>
                <declaration name="MessageFont" type="Object" line="543"/>
                <declaration name="WindowFont" type="Object" line="544"/>
                <declaration name="ToolTipFont" type="Object" line="545"/>
                <declaration name="IconFont" type="Object" line="546"/>
                <declaration name="scrollBarWidth" type="Object" line="548"/>
                <declaration name="menuBarHeight" type="Object" line="550"/>
                <declaration name="hotTrackingOn" type="Object" line="552"/>
                <declaration name="showMnemonics" type="Object" line="554"/>
                <scope line="556">
                    <declaration name="aaTextInfo" type="Object" line="571"/>
                </scope>
                <scope line="576"/>
                <scope line="591"/>
                <declaration name="defaults" type="Object[]" line="602"/>
            </method>
            <method name="isOnVista" type="boolean" line="1586"/>
            <method name="initVistaComponentDefaults" type="void" line="1591">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <comment line="1596">
                                        
                </comment>
                <comment line="1603">
                                        
                </comment>
                <comment line="1613">
                    acceleratorSelectionForeground color is the same as
                     acceleratorForeground                    
                </comment>
                <comment line="1629">
                                        
                </comment>
                <comment line="1652">
                                        
                </comment>
                <comment line="1661">
                                        
                </comment>
                <comment line="1671">
                                        
                </comment>
                <comment line="1683">
                                        
                </comment>
                <comment line="1696">
                                        
                </comment>
                <comment line="1713">
                    JPopupMenu has a bit of free space around menu items                    
                </comment>
                <comment line="1724">
                                        
                </comment>
                <comment line="1726">
                                        
                </comment>
                <comment line="1737">
                                        
                </comment>
                <scope line="1592"/>
                <declaration name="menuClasses" type="String[]" line="1596"/>
                <declaration name="menuDefaults" type="Object" line="1600"/>
                <scope line="1603">
                    <declaration name="key" type="String" line="1604"/>
                    <declaration name="oldValue" type="Object" line="1605"/>
                </scope>
                <scope line="1616">
                    <declaration name="key" type="String" line="1617"/>
                    <declaration name="oldValue" type="Object" line="1618"/>
                </scope>
                <declaration name="menuItemCheckIconFactory" type="VistaMenuItemCheckIconFactory" line="1629"/>
                <scope line="1631">
                    <declaration name="key" type="String" line="1632"/>
                    <declaration name="oldValue" type="Object" line="1633"/>
                </scope>
                <scope line="1640">
                    <declaration name="key" type="String" line="1641"/>
                    <declaration name="oldValue" type="Object" line="1642"/>
                </scope>
                <scope line="1652">
                    <declaration name="key" type="String" line="1653"/>
                    <declaration name="oldValue" type="Object" line="1654"/>
                </scope>
                <declaration name="insets" type="InsetsUIResource" line="1661"/>
                <scope line="1662">
                    <declaration name="key" type="String" line="1663"/>
                    <declaration name="oldValue" type="Object" line="1664"/>
                </scope>
                <declaration name="checkIconOffsetInteger" type="Integer" line="1671"/>
                <scope line="1673">
                    <declaration name="key" type="String" line="1674"/>
                    <declaration name="oldValue" type="Object" line="1675"/>
                </scope>
                <declaration name="afterCheckIconGap" type="Integer" line="1683"/>
                <scope line="1686">
                    <declaration name="key" type="String" line="1687"/>
                    <declaration name="oldValue" type="Object" line="1688"/>
                </scope>
                <anonymous_class line="1696">
                    <method name="createValue" type="Object" line="1697">
                        <params>
                            <param name="table" type="UIDefaults"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="minimumTextOffset" type="Object" line="1696"/>
                <scope line="1704">
                    <declaration name="key" type="String" line="1705"/>
                    <declaration name="oldValue" type="Object" line="1706"/>
                </scope>
                <declaration name="POPUP_MENU_BORDER" type="String" line="1715"/>
                <declaration name="popupMenuBorder" type="Object" line="1717"/>
            </method>
            <javadoc line="1739">
                If we support loading of fonts from the desktop this will return
                  a DesktopProperty representing the font. If the font can&apos;t be
                  represented in the current encoding this will return null and
                  turn off the use of system fonts.                
            </javadoc>
            <method name="getDesktopFontValue" type="Object" line="1745">
                <params>
                    <param name="fontName" type="String"/>
                    <param name="backup" type="Object"/>
                </params>
                <scope line="1746"/>
            </method>
            <method name="getLazyValueDefaults" type="Object[]" line="1756">
                <comment line="1785">
                    For focus rectangle for cells and trees.                    
                </comment>
                <comment line="1816">
                    *** ProgressBar                    
                </comment>
                <comment line="1835">
                    *** ToolBar                    
                </comment>
                <comment line="1840">
                    *** ToolTips                    
                </comment>
                <declaration name="buttonBorder" type="Object" line="1758"/>
                <declaration name="textFieldBorder" type="Object" line="1764"/>
                <declaration name="textFieldMargin" type="Object" line="1770"/>
                <declaration name="spinnerBorder" type="Object" line="1774"/>
                <declaration name="spinnerArrowInsets" type="Object" line="1778"/>
                <declaration name="comboBoxBorder" type="Object" line="1782"/>
                <declaration name="focusCellHighlightBorder" type="Object" line="1785"/>
                <declaration name="etchedBorder" type="Object" line="1789"/>
                <declaration name="internalFrameBorder" type="Object" line="1793"/>
                <declaration name="loweredBevelBorder" type="Object" line="1797"/>
                <declaration name="marginBorder" type="Object" line="1802"/>
                <declaration name="menuBarBorder" type="Object" line="1805"/>
                <declaration name="popupMenuBorder" type="Object" line="1810"/>
                <declaration name="progressBarBorder" type="Object" line="1816"/>
                <declaration name="radioButtonBorder" type="Object" line="1820"/>
                <declaration name="scrollPaneBorder" type="Object" line="1824"/>
                <declaration name="tableScrollPaneBorder" type="Object" line="1827"/>
                <declaration name="tableHeaderBorder" type="Object" line="1830"/>
                <declaration name="toolBarBorder" type="Object" line="1835"/>
                <declaration name="toolTipBorder" type="Object" line="1840"/>
                <declaration name="checkBoxIcon" type="Object" line="1846"/>
                <declaration name="radioButtonIcon" type="Object" line="1850"/>
                <declaration name="radioButtonMenuItemIcon" type="Object" line="1854"/>
                <declaration name="menuItemCheckIcon" type="Object" line="1858"/>
                <declaration name="menuItemArrowIcon" type="Object" line="1862"/>
                <declaration name="menuArrowIcon" type="Object" line="1866"/>
                <declaration name="lazyDefaults" type="Object[]" line="1871"/>
            </method>
            <method name="uninitialize" type="void" line="1933">
                <scope line="1936"/>
            </method>
            <declaration name="isMnemonicHidden" type="boolean" line="1947"/>
            <declaration name="isClassicWindows" type="boolean" line="1951"/>
            <javadoc line="1953">
                Sets the state of the hide mnemonic flag. This flag is used by the
                  component UI delegates to determine if the mnemonic should be rendered.
                  This method is a non operation if the underlying operating system
                  does not support the mnemonic hiding feature.                
                <param>
                    hide true if mnemonics should be hidden                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setMnemonicHidden" type="void" line="1962">
                <params>
                    <param name="hide" type="boolean"/>
                </params>
                <comment line="1965">
                    Do not hide mnemonics if the UI defaults do not support this                    
                </comment>
                <scope line="1963"/>
                <scope line="1966"/>
            </method>
            <javadoc line="1971">
                Gets the state of the hide mnemonic flag. This only has meaning
                  if this feature is supported by the underlying OS.                
                <return>
                    true if mnemonics are hidden, otherwise, false                    
                </return>
                <see>
                    #setMnemonicHidden                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isMnemonicHidden" type="boolean" line="1979">
                <comment line="1982">
                    Do not hide mnemonics if the UI defaults do not support this                    
                </comment>
                <scope line="1980"/>
            </method>
            <javadoc line="1987">
                Gets the state of the flag which indicates if the old Windows
                  look and feel should be rendered. This flag is used by the
                  component UI delegates as a hint to determine which style the component
                  should be rendered.                
                <return>
                    true if Windows 95 and Windows NT 4 look and feel should
                      be rendered                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isClassicWindows" type="boolean" line="1997"/>
            <javadoc line="2001">
                &lt;p&gt;
                  Invoked when the user attempts an invalid operation,
                  such as pasting into an uneditable &lt;code&gt;JTextField&lt;/code&gt;
                  that has focus.
                  &lt;/p&gt;
                  &lt;p&gt;
                  If the user has enabled visual error indication on
                  the desktop, this method will flash the caption bar
                  of the active window. The user can also set the
                  property awt.visualbell=true to achieve the same
                  results.
                  &lt;/p&gt;                
                <param>
                    component Component the error occured in, may be
                      null indicating the error condition is
                      not directly associated with a
                      <code>Component</code>.                    
                </param>
                <see>
                    javax.swing.LookAndFeel#provideErrorFeedback                    
                </see>
            </javadoc>
            <method name="provideErrorFeedback" type="void" line="2022">
                <params>
                    <param name="component" type="Component"/>
                </params>
            </method>
            <javadoc line="2026">
                {@inheritDoc}                
            </javadoc>
            <method name="getLayoutStyle" type="LayoutStyle" line="2029">
                <declaration name="style" type="LayoutStyle" line="2030"/>
                <scope line="2031"/>
            </method>
            <javadoc line="2040">
                Returns an &lt;code&gt;Action&lt;/code&gt;.
                  &lt;P&gt;
                  This Action contains the information and logic to render an
                  auditory cue. The &lt;code&gt;Object&lt;/code&gt; that is passed to this
                  method contains the information needed to render the auditory
                  cue. Normally, this &lt;code&gt;Object&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt;
                  that points to a &lt;code&gt;Toolkit&lt;/code&gt; &lt;code&gt;desktopProperty&lt;/code&gt;.
                  This &lt;code&gt;desktopProperty&lt;/code&gt; is resolved by AWT and the
                  Windows OS.
                  &lt;P&gt;
                  This &lt;code&gt;Action&lt;/code&gt;&apos;s &lt;code&gt;actionPerformed&lt;/code&gt; method
                  is fired by the &lt;code&gt;playSound&lt;/code&gt; method.                
                <return>
                    an Action which knows how to render the auditory
                      cue for one particular system or user activity                    
                </return>
                <see>
                    #playSound(Action)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createAudioAction" type="Action" line="2059">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="2060">
                    <declaration name="audioKey" type="String" line="2061"/>
                    <declaration name="audioValue" type="String" line="2062"/>
                </scope>
                <scope line="2064"/>
            </method>
            <method name="repaintRootPane" type="void" line="2069">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="root" type="JRootPane" line="2070"/>
                <scope line="2071">
                    <scope line="2072"/>
                </scope>
                <scope line="2077"/>
                <scope line="2079"/>
            </method>
            <class name="AudioAction" line="2084">
                <extends class="AbstractAction"/>
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <javadoc line="2084">
                    Pass the name String to the super constructor. This is used
                      later to identify the Action and decide whether to play it or
                      not. Store the resource String. It is used to get the audio
                      resource. In this case, the resource is a &lt;code&gt;Runnable&lt;/code&gt;
                      supplied by &lt;code&gt;Toolkit&lt;/code&gt;. This &lt;code&gt;Runnable&lt;/code&gt; is
                      effectively a pointer down into the Win32 OS that knows how to
                      play the right sound.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="audioRunnable" type="Runnable" line="2096"/>
                <declaration name="audioResource" type="String" line="2097"/>
                <javadoc line="2098">
                    We use the String as the name of the Action and as a pointer to
                      the underlying OSes audio resource.                    
                </javadoc>
                <method name="AudioAction" type="constructor" line="2102">
                    <params>
                        <param name="name" type="String"/>
                        <param name="resource" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="2106">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <comment line="2112">
                        Runnable appears to block until completed playing, hence
                         start up another thread to handle playing.                        
                    </comment>
                    <scope line="2107"/>
                    <scope line="2110"/>
                </method>
            </class>
            <class name="LazyWindowsIcon" line="2118">
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <implements interface="UIDefaults.LazyValue"/>
                <javadoc line="2118">
                    Gets an &lt;code&gt;Icon&lt;/code&gt; from the native libraries if available,
                      otherwise gets it from an image resource file.                    
                </javadoc>
                <declaration name="nativeImage" type="String" line="2123"/>
                <declaration name="resource" type="String" line="2124"/>
                <method name="LazyWindowsIcon" type="constructor" line="2126">
                    <params>
                        <param name="nativeImage" type="String"/>
                        <param name="resource" type="String"/>
                    </params>
                </method>
                <method name="createValue" type="Object" line="2131">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <scope line="2132">
                        <declaration name="image" type="Image" line="2133"/>
                        <scope line="2134"/>
                    </scope>
                </method>
            </class>
            <class name="ActiveWindowsIcon" line="2145">
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <implements interface="UIDefaults.ActiveValue"/>
                <javadoc line="2145">
                    Gets an &lt;code&gt;Icon&lt;/code&gt; from the native libraries if available.
                      A desktop property is used to trigger reloading the icon when needed.                    
                </javadoc>
                <declaration name="icon" type="Icon" line="2150"/>
                <declaration name="nativeImageName" type="String" line="2151"/>
                <declaration name="fallbackName" type="String" line="2152"/>
                <declaration name="desktopProperty" type="DesktopProperty" line="2153"/>
                <method name="ActiveWindowsIcon" type="constructor" line="2156">
                    <params>
                        <param name="desktopPropertyName" type="String"/>
                        <param name="nativeImageName" type="String"/>
                        <param name="fallbackName" type="String"/>
                    </params>
                    <comment line="2163">
                        This desktop property is needed to trigger reloading the icon.
                         It is kept in member variable to avoid GC.                        
                    </comment>
                    <scope line="2161">
                        <anonymous_class line="2164">
                            <method name="updateUI" type="void" line="2165"/>
                        </anonymous_class>
                    </scope>
                </method>
                <method name="createValue" type="Object" line="2174">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <scope line="2175">
                        <declaration name="image" type="Image" line="2176"/>
                        <scope line="2177"/>
                    </scope>
                    <scope line="2181">
                        <declaration name="fallback" type="UIDefaults.LazyValue" line="2182"/>
                    </scope>
                </method>
            </class>
            <class name="SkinIcon" line="2191">
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <implements interface="Icon"/>
                <implements interface="UIResource"/>
                <javadoc line="2191">
                    Icon backed-up by XP Skin.                    
                </javadoc>
                <declaration name="part" type="Part" line="2195"/>
                <declaration name="state" type="State" line="2196"/>
                <method name="SkinIcon" type="constructor" line="2197">
                    <params>
                        <param name="part" type="Part"/>
                        <param name="state" type="State"/>
                    </params>
                </method>
                <javadoc line="2202">
                    Draw the icon at the specified location.  Icon implementations
                      may use the Component argument to get properties useful for
                      painting, e.g. the foreground or background color.                    
                </javadoc>
                <method name="paintIcon" type="void" line="2207">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                    <declaration name="xp" type="XPStyle" line="2208"/>
                    <scope line="2210">
                        <declaration name="skin" type="Skin" line="2211"/>
                    </scope>
                </method>
                <javadoc line="2216">
                    Returns the icon&apos;s width.                    
                    <return>
                        an int specifying the fixed width of the icon.                        
                    </return>
                </javadoc>
                <method name="getIconWidth" type="int" line="2221">
                    <declaration name="width" type="int" line="2222"/>
                    <declaration name="xp" type="XPStyle" line="2223"/>
                    <scope line="2225">
                        <declaration name="skin" type="Skin" line="2226"/>
                    </scope>
                </method>
                <javadoc line="2232">
                    Returns the icon&apos;s height.                    
                    <return>
                        an int specifying the fixed height of the icon.                        
                    </return>
                </javadoc>
                <method name="getIconHeight" type="int" line="2237">
                    <declaration name="height" type="int" line="2238"/>
                    <declaration name="xp" type="XPStyle" line="2239"/>
                    <scope line="2240">
                        <declaration name="skin" type="Skin" line="2241"/>
                    </scope>
                </method>
            </class>
            <class name="WindowsFontProperty" line="2249">
                <extends class="DesktopProperty"/>
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <javadoc line="2249">
                    DesktopProperty for fonts. If a font with the name &apos;MS Sans Serif&apos;
                      is returned, it is mapped to &apos;Microsoft Sans Serif&apos;.                    
                </javadoc>
                <method name="WindowsFontProperty" type="constructor" line="2254">
                    <params>
                        <param name="key" type="String"/>
                        <param name="backup" type="Object"/>
                    </params>
                </method>
                <method name="invalidate" type="void" line="2258">
                    <params>
                        <param name="laf" type="LookAndFeel"/>
                    </params>
                    <scope line="2259"/>
                </method>
                <method name="configureValue" type="Object" line="2265">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                    <comment line="2271">
                        4950968: Workaround to mimic the way Windows maps the default
                         font size of 6 pts to the smallest available bitmap font size.
                         This happens mostly on Win 98/Me &amp; NT.                        
                    </comment>
                    <scope line="2266">
                        <declaration name="font" type="Font" line="2267"/>
                        <scope line="2268">
                            <declaration name="size" type="int" line="2269"/>
                            <declaration name="dpi" type="int" line="2273"/>
                            <scope line="2274"/>
                            <scope line="2276"/>
                            <scope line="2279"/>
                            <declaration name="msFont" type="Font" line="2282"/>
                            <scope line="2285"/>
                            <scope line="2287"/>
                        </scope>
                        <scope line="2293">
                            <scope line="2294"/>
                        </scope>
                        <scope line="2298"/>
                    </scope>
                </method>
            </class>
            <class name="WindowsFontSizeProperty" line="2309">
                <extends class="DesktopProperty"/>
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <javadoc line="2309">
                    DesktopProperty for fonts that only gets sizes from the desktop,
                      font name and style are passed into the constructor                    
                </javadoc>
                <declaration name="fontName" type="String" line="2314"/>
                <declaration name="fontSize" type="int" line="2315"/>
                <declaration name="fontStyle" type="int" line="2316"/>
                <method name="WindowsFontSizeProperty" type="constructor" line="2319">
                    <params>
                        <param name="key" type="String"/>
                        <param name="fontName" type="String"/>
                        <param name="fontStyle" type="int"/>
                        <param name="fontSize" type="int"/>
                    </params>
                </method>
                <method name="configureValue" type="Object" line="2326">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                    <scope line="2327"/>
                    <scope line="2330"/>
                </method>
            </class>
            <class name="XPValue" line="2339">
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <implements interface="UIDefaults.ActiveValue"/>
                <javadoc line="2339">
                    A value wrapper that actively retrieves values from xp or falls back
                      to the classic value if not running XP styles.                    
                </javadoc>
                <declaration name="classicValue" type="Object" line="2344"/>
                <declaration name="NULL_VALUE" type="Object" line="2347"/>
                <method name="XPValue" type="constructor" line="2349">
                    <params>
                        <param name="xpValue" type="Object"/>
                        <param name="classicValue" type="Object"/>
                    </params>
                </method>
                <method name="createValue" type="Object" line="2354">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <declaration name="value" type="Object" line="2355"/>
                    <scope line="2356"/>
                    <scope line="2360"/>
                    <scope line="2362"/>
                </method>
                <method name="getXPValue" type="Object" line="2369">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                </method>
                <method name="getClassicValue" type="Object" line="2373">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                </method>
                <method name="recursiveCreateValue" type="Object" line="2377">
                    <params>
                        <param name="value" type="Object"/>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <scope line="2378"/>
                    <scope line="2381"/>
                    <scope line="2383"/>
                </method>
            </class>
            <class name="XPBorderValue" line="2389">
                <extends class="XPValue"/>
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <declaration name="extraMargin" type="Border" line="2390"/>
                <method name="XPBorderValue" type="constructor" line="2392">
                    <params>
                        <param name="xpValue" type="Part"/>
                        <param name="classicValue" type="Object"/>
                    </params>
                </method>
                <method name="XPBorderValue" type="constructor" line="2396">
                    <params>
                        <param name="xpValue" type="Part"/>
                        <param name="classicValue" type="Object"/>
                        <param name="extraMargin" type="Border"/>
                    </params>
                </method>
                <method name="getXPValue" type="Object" line="2401">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <declaration name="xpBorder" type="Border" line="2402"/>
                    <scope line="2403"/>
                    <scope line="2406"/>
                </method>
            </class>
            <class name="XPColorValue" line="2412">
                <extends class="XPValue"/>
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <method name="XPColorValue" type="constructor" line="2413">
                    <params>
                        <param name="part" type="Part"/>
                        <param name="state" type="State"/>
                        <param name="prop" type="Prop"/>
                        <param name="classicValue" type="Object"/>
                    </params>
                </method>
                <method name="getXPValue" type="Object" line="2417">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <declaration name="key" type="XPColorValueKey" line="2418"/>
                </method>
                <class name="XPColorValueKey" line="2422">
                    <declaration name="skin" type="Skin" line="2423"/>
                    <declaration name="prop" type="Prop" line="2424"/>
                    <method name="XPColorValueKey" type="constructor" line="2426">
                        <params>
                            <param name="part" type="Part"/>
                            <param name="state" type="State"/>
                            <param name="prop" type="Prop"/>
                        </params>
                    </method>
                </class>
            </class>
            <class name="XPDLUValue" line="2433">
                <extends class="XPValue"/>
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <declaration name="direction" type="int" line="2434"/>
                <method name="XPDLUValue" type="constructor" line="2436">
                    <params>
                        <param name="xpdlu" type="int"/>
                        <param name="classicdlu" type="int"/>
                        <param name="direction" type="int"/>
                    </params>
                </method>
                <method name="getXPValue" type="Object" line="2441">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <declaration name="px" type="int" line="2442"/>
                </method>
                <method name="getClassicValue" type="Object" line="2446">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <declaration name="px" type="int" line="2447"/>
                </method>
            </class>
            <class name="TriggerDesktopProperty" line="2452">
                <extends class="DesktopProperty"/>
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <method name="TriggerDesktopProperty" type="constructor" line="2453">
                    <params>
                        <param name="key" type="String"/>
                    </params>
                    <comment line="2456">
                        This call adds a property change listener for the property,
                         which triggers a call to updateUI(). The value returned
                         is not interesting here.                        
                    </comment>
                </method>
                <method name="updateUI" type="void" line="2461">
                    <comment line="2465">
                        Make sure property change listener is readded each time                        
                    </comment>
                </method>
            </class>
            <class name="FontDesktopProperty" line="2469">
                <extends class="TriggerDesktopProperty"/>
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <method name="FontDesktopProperty" type="constructor" line="2470">
                    <params>
                        <param name="key" type="String"/>
                    </params>
                </method>
                <method name="updateUI" type="void" line="2474">
                    <declaration name="aaTextInfo" type="Object" line="2475"/>
                    <declaration name="defaults" type="UIDefaults" line="2476"/>
                </method>
            </class>
            <class name="WindowsLayoutStyle" line="2484">
                <extends class="DefaultLayoutStyle"/>
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <method name="getPreferredGap" type="int" line="2488">
                    <params>
                        <param name="component1" type="JComponent"/>
                        <param name="component2" type="JComponent"/>
                        <param name="type" type="ComponentPlacement"/>
                        <param name="position" type="int"/>
                        <param name="parent" type="Container"/>
                    </params>
                    <comment line="2490">
                        Checks args                        
                    </comment>
                    <comment line="2496">
                        Windows doesn&apos;t spec this                        
                    </comment>
                    <comment line="2505">
                        Fall through to related.                        
                    </comment>
                    <comment line="2508">
                        Between text labels and their associated controls (for
                         example, text boxes and list boxes): 3
                         NOTE: We&apos;re not honoring:
                         &apos;Text label beside a button 3 down from the top of
                         the button,&apos; but I suspect that is an attempt to
                         enforce a baseline layout which will be handled
                         separately.  In order to enforce this we would need
                         this API to return a more complicated type (Insets,
                         or something else).                        
                    </comment>
                    <comment line="2520">
                        Between related controls: 4                        
                    </comment>
                    <comment line="2524">
                        Between unrelated controls: 7                        
                    </comment>
                    <scope line="2497">
                        <declaration name="indent" type="int" line="2498"/>
                        <scope line="2499"/>
                    </scope>
                    <scope line="2506"/>
                </method>
                <method name="getContainerGap" type="int" line="2532">
                    <params>
                        <param name="component" type="JComponent"/>
                        <param name="position" type="int"/>
                        <param name="parent" type="Container"/>
                    </params>
                    <comment line="2534">
                        Checks args                        
                    </comment>
                </method>
            </class>
            <javadoc line="2540">
                Converts the dialog unit argument to pixels along the specified
                  axis.                
            </javadoc>
            <method name="dluToPixels" type="int" line="2544">
                <params>
                    <param name="dlu" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <scope line="2545"/>
                <scope line="2549"/>
            </method>
            <javadoc line="2557">
                Calculates the dialog unit mapping.                
            </javadoc>
            <method name="calculateBaseUnits" type="void" line="2560">
                <comment line="2562">
                    This calculation comes from:
                     http:support.microsoft.com/default.aspx?scid=kb;EN-US;125681                    
                </comment>
                <comment line="2569">
                    The -1 comes from experimentation.                    
                </comment>
                <declaration name="metrics" type="FontMetrics" line="2563"/>
            </method>
            <javadoc line="2572">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDisabledIcon" type="Icon" line="2577">
                <params>
                    <param name="component" type="JComponent"/>
                    <param name="icon" type="Icon"/>
                </params>
                <comment line="2579">
                    if the component has a HI_RES_DISABLED_ICON_CLIENT_KEY
                     client property set to Boolean.TRUE, then use the new
                     hi res algorithm for creating the disabled icon (used
                     in particular by the WindowsFileChooserUI class)                    
                </comment>
                <scope line="2586">
                    <declaration name="img" type="BufferedImage" line="2587"/>
                    <declaration name="filter" type="ImageFilter" line="2590"/>
                    <declaration name="producer" type="ImageProducer" line="2591"/>
                    <declaration name="resultImage" type="Image" line="2592"/>
                </scope>
            </method>
            <class name="RGBGrayFilter" line="2598">
                <extends class="RGBImageFilter"/>
                <comment line="2347">
                    A constant that lets you specify null when using XP styles.                    
                </comment>
                <method name="RGBGrayFilter" type="constructor" line="2599"/>
                <method name="filterRGB" type="int" line="2602">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="rgb" type="int"/>
                    </params>
                    <comment line="2604">
                        find the average of red, green, and blue                        
                    </comment>
                    <comment line="2608">
                        pull out the alpha channel                        
                    </comment>
                    <comment line="2610">
                        calc the average                        
                    </comment>
                    <comment line="2612">
                        turn back into rgb                        
                    </comment>
                    <declaration name="avg" type="float" line="2604"/>
                    <declaration name="alpha" type="float" line="2608"/>
                    <declaration name="rgbval" type="int" line="2612"/>
                </method>
            </class>
        </class>
    </source>