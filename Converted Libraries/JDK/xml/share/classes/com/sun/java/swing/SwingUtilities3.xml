<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing">
        <import package="sun.awt.EventQueueDelegate"/>
        <import package="sun.awt.AppContext"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <import package="java.util.concurrent.Callable"/>
        <import package="java.applet.Applet"/>
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.EventQueue"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Window"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.RepaintManager"/>
        <class name="SwingUtilities3" line="43">
            <comment line="140">
                We use maps to avoid reflection. Hopefully it should perform better
                 this way.                
            </comment>
            <javadoc line="43">
                A collection of utility methods for Swing.
                  &lt;p&gt;
                  &lt;b&gt;WARNING:&lt;/b&gt; While this class is public, it should not be treated as
                  public API and its API may change in incompatable ways between dot dot
                  releases and even patch releases. You should not rely on this class even
                  existing.
                  This is a second part of sun.swing.SwingUtilities2. It is required
                  to provide services for JavaFX applets.                
            </javadoc>
            <declaration name="DELEGATE_REPAINT_MANAGER_KEY" type="Object" line="56"/>
            <javadoc line="56">
                The {@code clientProperty} key for delegate {@code RepaintManager}                
            </javadoc>
            <javadoc line="62">
                Registers delegate RepaintManager for {@code JComponent}.                
            </javadoc>
            <method name="setDelegateRepaintManager" type="void" line="66">
                <params>
                    <param name="component" type="JComponent"/>
                    <param name="repaintManager" type="RepaintManager"/>
                </params>
                <comment line="67">
                    setting up flag in AppContext to speed up lookups in case
                     there are no delegate RepaintManagers used.                    
                </comment>
            </method>
            <declaration name="vsyncedMap" type="Map&lt;Container,Boolean&gt;" line="77"/>
            <javadoc line="80">
                Sets vsyncRequested state for the {@code rootContainer}.  If{@code isRequested} is {@code true} then vsynced{@code BufferStrategy} is enabled for this {@code rootContainer}.
                  Note: requesting vsynced painting does not guarantee one. The outcome
                  depends on current RepaintManager&apos;s RepaintManager.PaintManager
                  and on the capabilities of the graphics hardware/software and what not.                
                <param>
                    rootContainer topmost container. Should be either {@code Window}or {@code Applet}                    
                </param>
                <param>
                    isRequested the value to set vsyncRequested state to                    
                </param>
            </javadoc>
            <method name="setVsyncRequested" type="void" line="94">
                <params>
                    <param name="rootContainer" type="Container"/>
                    <param name="isRequested" type="boolean"/>
                </params>
                <scope line="96"/>
                <scope line="98"/>
            </method>
            <javadoc line="103">
                Checks if vsync painting is requested for {@code rootContainer}                
                <param>
                    rootContainer topmost container. Should be either Window or Applet                    
                </param>
                <return>
                    {@code true} if vsync painting is requested for {@code rootContainer}                    
                </return>
            </javadoc>
            <method name="isVsyncRequested" type="boolean" line="109">
                <params>
                    <param name="rootContainer" type="Container"/>
                </params>
            </method>
            <javadoc line="114">
                Returns delegate {@code RepaintManager} for {@code component} hierarchy.                
            </javadoc>
            <method name="getDelegateRepaintManager" type="RepaintManager" line="118">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <declaration name="delegate" type="RepaintManager" line="119"/>
                <scope line="121">
                    <scope line="122">
                        <scope line="124"/>
                        <scope line="127"/>
                    </scope>
                </scope>
            </method>
            <method name="setEventQueueDelegate" type="void" line="144">
                <params>
                    <param name="map" type="Map<String,Map<String,Object>>"/>
                </params>
            </method>
            <class name="EventQueueDelegateFromMap" line="148">
                <implements interface="EventQueueDelegate.Delegate"/>
                <declaration name="afterDispatchEventArgument" type="AWTEvent[]" line="150"/>
                <declaration name="afterDispatchHandleArgument" type="Object[]" line="151"/>
                <declaration name="afterDispatchCallable" type="Callable&lt;Void&gt;" line="152"/>
                <declaration name="beforeDispatchEventArgument" type="AWTEvent[]" line="154"/>
                <declaration name="beforeDispatchCallable" type="Callable&lt;Object&gt;" line="155"/>
                <declaration name="getNextEventEventQueueArgument" type="EventQueue[]" line="157"/>
                <declaration name="getNextEventCallable" type="Callable&lt;AWTEvent&gt;" line="158"/>
                <method name="EventQueueDelegateFromMap" type="constructor" line="161">
                    <params>
                        <param name="objectMap" type="Map<String,Map<String,Object>>"/>
                    </params>
                    <declaration name="methodMap" type="Map&lt;String,Object&gt;" line="162"/>
                </method>
                <method name="afterDispatch" type="void" line="178">
                    <params>
                        <param name="event" type="AWTEvent"/>
                        <param name="handle" type="Object"/>
                    </params>
                    <scope line="181"/>
                    <scope line="183"/>
                    <scope line="185"/>
                    <scope line="187"/>
                </method>
                <method name="beforeDispatch" type="Object" line="193">
                    <params>
                        <param name="event" type="AWTEvent"/>
                    </params>
                    <scope line="195"/>
                    <scope line="197"/>
                    <scope line="199"/>
                    <scope line="201"/>
                </method>
                <method name="getNextEvent" type="AWTEvent" line="207">
                    <params>
                        <param name="eventQueue" type="EventQueue"/>
                    </params>
                    <scope line="209"/>
                    <scope line="211"/>
                    <scope line="213"/>
                    <scope line="215"/>
                </method>
            </class>
        </class>
    </source>