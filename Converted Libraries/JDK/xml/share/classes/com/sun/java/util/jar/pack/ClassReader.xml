<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="com.sun.java.util.jar.pack.ConstantPool.ClassEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Entry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.SignatureEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Utf8Entry"/>
        <import package="com.sun.java.util.jar.pack.Package.Class"/>
        <import package="com.sun.java.util.jar.pack.Package.InnerClass"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.FilterInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Map"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="ClassReader" line="43">
            <javadoc line="43">
                Reader for a class file that is being incorporated into a package.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="verbose" type="int" line="48"/>
            <declaration name="pkg" type="Package" line="50"/>
            <declaration name="cls" type="Class" line="51"/>
            <declaration name="inPos" type="long" line="52"/>
            <declaration name="in" type="DataInputStream" line="53"/>
            <declaration name="attrDefs" type="Map&lt;Attribute.Layout,Attribute&gt;" line="54"/>
            <declaration name="attrCommands" type="Map" line="55"/>
            <declaration name="unknownAttrCommand" type="String" line="56"/>
            <method name="ClassReader" type="constructor" line="58">
                <params>
                    <param name="cls" type="Class"/>
                    <param name="in" type="InputStream"/>
                </params>
                <anonymous_class line="62">
                    <method name="read" type="int" line="63">
                        <params>
                            <param name="b" type="byte"/>
                            <param name="off" type="int"/>
                            <param name="len" type="int"/>
                        </params>
                        <declaration name="nr" type="int" line="64"/>
                    </method>
                    <method name="read" type="int" line="68">
                        <declaration name="ch" type="int" line="69"/>
                    </method>
                    <method name="skip" type="long" line="73">
                        <params>
                            <param name="n" type="long"/>
                        </params>
                        <declaration name="ns" type="long" line="74"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="setAttrDefs" type="void" line="81">
                <params>
                    <param name="attrDefs" type="Map<Attribute.Layout,Attribute>"/>
                </params>
            </method>
            <method name="setAttrCommands" type="void" line="85">
                <params>
                    <param name="attrCommands" type="Map"/>
                </params>
            </method>
            <method name="skip" type="void" line="89">
                <params>
                    <param name="n" type="int"/>
                    <param name="what" type="String"/>
                </params>
                <declaration name="skipped" type="long" line="91"/>
                <scope line="92">
                    <declaration name="j" type="long" line="93"/>
                </scope>
            </method>
            <method name="readUnsignedShort" type="int" line="100"/>
            <method name="readInt" type="int" line="104"/>
            <javadoc line="108">
                Read a 2-byte int, and return the &lt;em&gt;global&lt;/em&gt; CP entry for it.                
            </javadoc>
            <method name="readRef" type="Entry" line="109">
                <declaration name="i" type="int" line="110"/>
            </method>
            <method name="readRef" type="Entry" line="114">
                <params>
                    <param name="tag" type="byte"/>
                </params>
                <declaration name="e" type="Entry" line="115"/>
            </method>
            <method name="readRefOrNull" type="Entry" line="121">
                <params>
                    <param name="tag" type="byte"/>
                </params>
                <declaration name="e" type="Entry" line="122"/>
            </method>
            <method name="readUtf8Ref" type="Utf8Entry" line="127"/>
            <method name="readClassRef" type="ClassEntry" line="131"/>
            <method name="readClassRefOrNull" type="ClassEntry" line="135"/>
            <method name="readSignatureRef" type="SignatureEntry" line="139">
                <comment line="140">
                    The class file stores a Utf8, but we want a Signature.                    
                </comment>
                <declaration name="e" type="Entry" line="141"/>
            </method>
            <method name="read" type="void" line="145">
                <comment line="151">
                    fields                    
                </comment>
                <comment line="152">
                    methods                    
                </comment>
                <declaration name="ok" type="boolean" line="146"/>
                <scope line="147"/>
                <scope line="157">
                    <scope line="158"/>
                </scope>
            </method>
            <method name="readMagicNumbers" type="void" line="164">
                <comment line="173">
                    System.out.println(&quot;ClassFile.version=&quot;+cls.majver+&quot;.&quot;+cls.minver);                    
                </comment>
                <declaration name="bad" type="String" line="174"/>
                <scope line="175"/>
            </method>
            <method name="checkVersion" type="String" line="183">
                <params>
                    <param name="majver" type="int"/>
                    <param name="minver" type="int"/>
                </params>
                <comment line="194">
                    OK                    
                </comment>
                <scope line="186"/>
                <scope line="191"/>
            </method>
            <method name="readConstantPool" type="void" line="197">
                <comment line="199">
                    System.err.println(&quot;reading CP, length=&quot;+length);                    
                </comment>
                <comment line="207">
                    System.err.println(&quot;reading CP elt, i=&quot;+i);                    
                </comment>
                <comment line="236">
                    just read the refs; do not attempt to resolve while reading                    
                </comment>
                <comment line="242">
                    empty ref2                    
                </comment>
                <comment line="260">
                    Fix up refs, which might be out of order.                    
                </comment>
                <comment line="274">
                    Defer.                    
                </comment>
                <comment line="304">
                    Must make progress.                    
                </comment>
                <declaration name="length" type="int" line="198"/>
                <declaration name="fixups" type="int[]" line="201"/>
                <declaration name="fptr" type="int" line="202"/>
                <declaration name="cpMap" type="Entry[]" line="204"/>
                <scope line="206">
                    <declaration name="tag" type="int" line="208"/>
                    <scope line="214"/>
                    <scope line="219"/>
                    <scope line="224"/>
                    <scope line="230"/>
                </scope>
                <scope line="261">
                    <declaration name="flimit" type="int" line="264"/>
                    <scope line="266">
                        <declaration name="cpi" type="int" line="267"/>
                        <declaration name="tag" type="int" line="268"/>
                        <declaration name="ref" type="int" line="269"/>
                        <declaration name="ref2" type="int" line="270"/>
                        <scope line="273"/>
                        <declaration name="mclass" type="ClassEntry" line="291"/>
                        <declaration name="mdescr" type="DescriptorEntry" line="292"/>
                        <declaration name="mname" type="Utf8Entry" line="296"/>
                        <declaration name="mtype" type="Utf8Entry" line="297"/>
                    </scope>
                </scope>
            </method>
            <method name="readHeader" type="void" line="310">
                <declaration name="ni" type="int" line="314"/>
                <scope line="316"/>
            </method>
            <method name="readMembers" type="void" line="321">
                <params>
                    <param name="doMethods" type="boolean"/>
                </params>
                <declaration name="nm" type="int" line="322"/>
                <scope line="323"/>
            </method>
            <method name="readMember" type="void" line="328">
                <params>
                    <param name="doMethod" type="boolean"/>
                </params>
                <declaration name="mflags" type="int" line="329"/>
                <declaration name="mname" type="Utf8Entry" line="330"/>
                <declaration name="mtype" type="SignatureEntry" line="331"/>
                <declaration name="descr" type="DescriptorEntry" line="332"/>
                <declaration name="m" type="Class.Member" line="333"/>
            </method>
            <method name="readAttributes" type="void" line="341">
                <params>
                    <param name="ctype" type="int"/>
                    <param name="h" type="Attribute.Holder"/>
                </params>
                <comment line="343">
                    nothing to do here                    
                </comment>
                <comment line="349">
                    See if there is a special command that applies.                    
                </comment>
                <comment line="367">
                    Find canonical instance of the requested attribute.                    
                </comment>
                <comment line="382">
                    Any zero-length attr is &quot;known&quot;...                    
                </comment>
                <comment line="383">
                    We can assume an empty attr. has an empty layout.                    
                </comment>
                <comment line="384">
                    Handles markers like Enum, Bridge, Synthetic, Deprecated.                    
                </comment>
                <comment line="391">
                    Known attribute but with a corner case format, &quot;pass&quot; it.                    
                </comment>
                <comment line="398">
                    No, we don&apos;t really know what to do this this one.                    
                </comment>
                <comment line="399">
                    Do not compress the rare and strange &quot;u4&quot; and &quot;X&quot; cases.                    
                </comment>
                <comment line="405">
                    Known attribute but w/o a format; pass it.                    
                </comment>
                <comment line="410">
                    Skip the unknown attribute.                    
                </comment>
                <comment line="421">
                    These are hardwired.                    
                </comment>
                <comment line="437">
                    Keep empty attribute a...                    
                </comment>
                <declaration name="na" type="int" line="342"/>
                <scope line="346">
                    <declaration name="name" type="String" line="347"/>
                    <declaration name="length" type="int" line="348"/>
                    <scope line="350">
                        <declaration name="lkey" type="Object" line="351"/>
                        <declaration name="cmd" type="String" line="352"/>
                        <scope line="353">
                            <declaration name="message1" type="String" line="356"/>
                            <declaration name="message2" type="String" line="359"/>
                        </scope>
                    </scope>
                    <declaration name="a" type="Attribute" line="368"/>
                    <scope line="371"/>
                    <scope line="376"/>
                    <scope line="381"/>
                    <declaration name="isStackMap" type="boolean" line="387"/>
                    <scope line="390">
                        <declaration name="code" type="Code" line="392"/>
                        <declaration name="TOO_BIG" type="int" line="393"/>
                        <scope line="397"/>
                    </scope>
                    <scope line="403">
                        <scope line="404">
                            <declaration name="message" type="String" line="406"/>
                        </scope>
                        <scope line="409"/>
                        <scope line="413">
                            <declaration name="message" type="String" line="414"/>
                        </scope>
                    </scope>
                    <scope line="420">
                        <declaration name="pos0" type="long" line="422"/>
                        <scope line="423">
                            <declaration name="m" type="Class.Method" line="424"/>
                            <scope line="426"/>
                            <scope line="428">
                                <declaration name="message" type="String" line="429"/>
                            </scope>
                        </scope>
                        <scope line="432"/>
                    </scope>
                    <scope line="438">
                        <declaration name="bytes" type="byte[]" line="439"/>
                    </scope>
                    <scope line="443"/>
                </scope>
            </method>
            <method name="readCode" type="void" line="453">
                <params>
                    <param name="code" type="Code"/>
                </params>
                <declaration name="nh" type="int" line="459"/>
                <scope line="461"/>
            </method>
            <method name="readInnerClasses" type="void" line="470">
                <params>
                    <param name="cls" type="Class"/>
                </params>
                <comment line="481">
                    set directly; do not use setInnerClasses.                    
                </comment>
                <comment line="482">
                    (Later, ics may be transferred to the pkg.)                    
                </comment>
                <declaration name="nc" type="int" line="471"/>
                <declaration name="ics" type="ArrayList&lt;InnerClass&gt;" line="472"/>
                <scope line="473">
                    <declaration name="ic" type="InnerClass" line="474"/>
                </scope>
            </method>
            <class name="ClassFormatException" line="485">
                <extends class="IOException"/>
                <method name="ClassFormatException" type="constructor" line="486">
                    <params>
                        <param name="message" type="String"/>
                    </params>
                </method>
                <method name="ClassFormatException" type="constructor" line="490">
                    <params>
                        <param name="message" type="String"/>
                        <param name="cause" type="Throwable"/>
                    </params>
                </method>
            </class>
        </class>
    </source>