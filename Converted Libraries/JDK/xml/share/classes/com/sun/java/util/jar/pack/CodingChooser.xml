<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Random"/>
        <import package="java.util.Set"/>
        <import package="java.util.zip.Deflater"/>
        <import package="java.util.zip.DeflaterOutputStream"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="CodingChooser" line="41">
            <comment line="57">
                Derived from effort; &gt;1 (&lt;1) means try more (less) experiments
                 when looking to beat a best score.                
            </comment>
            <comment line="67">
                If not null, stress mode oracle.                
            </comment>
            <comment line="69">
                Element in sorted set of coding choices:                
            </comment>
            <comment line="194">
                These variables are reset and reused:                
            </comment>
            <comment line="196">
                slice of values                
            </comment>
            <comment line="207">
                fuzzed target byte size                
            </comment>
            <comment line="444">
                Find an arbitrary choice at least dlo away from a previously
                 evaluated choices, and at most dhi.  Try also to regulate its
                 min distance to all previously evaluated choices, in this range.                
            </comment>
            <comment line="545">
                Compute the coded size of a sequence of values.
                 The first int is the size in uncompressed bytes.
                 The second is an estimate of the compressed size of these bytes.                
            </comment>
            <comment line="573">
                This version uses the implicit local arguments                
            </comment>
            <comment line="1218">
                / Stress-test helpers.                
            </comment>
            <comment line="1225">
                Pick a random pop-coding.                
            </comment>
            <comment line="1300">
                Pick a random adaptive coding.                
            </comment>
            <comment line="1360">
                Return a random value in [0..len], gently biased toward extremes.                
            </comment>
            <comment line="1378">
                Return a random value in [0..len], gently biased toward extremes.                
            </comment>
            <comment line="1391">
                For debug only.                
            </comment>
            <comment line="1392">
                public static
                int[] readValuesFrom(InputStream instr) {
                return readValuesFrom(new InputStreamReader(instr));
                }
                public static
                int[] readValuesFrom(Reader inrdr) {
                inrdr = new BufferedReader(inrdr);
                final StreamTokenizer in = new StreamTokenizer(inrdr);
                final int TT_NOTHING = -99;
                in.commentChar(&apos;#&apos;);
                return readValuesFrom(new Iterator() {
                int token = TT_NOTHING;
                private int getToken() {
                if (token == TT_NOTHING) {
                try {
                token = in.nextToken();
                assert(token != TT_NOTHING);
                } catch (IOException ee) {
                throw new RuntimeException(ee);
                }
                }
                return token;
                }
                public boolean hasNext() {
                return getToken() != StreamTokenizer.TT_EOF;
                }
                public Object next() {
                int ntok = getToken();
                token = TT_NOTHING;
                switch (ntok) {
                case StreamTokenizer.TT_EOF:
                throw new NoSuchElementException();
                case StreamTokenizer.TT_NUMBER:
                return Integer.valueOf((int) in.nval);
                default:
                assert(false);
                return null;
                }
                }
                public void remove() {
                throw new UnsupportedOperationException();
                }
                });
                }
                public static
                int[] readValuesFrom(Iterator iter) {
                return readValuesFrom(iter, 0);
                }
                public static
                int[] readValuesFrom(Iterator iter, int initSize) {
                int[] na = new int[Math.max(10, initSize)];
                int np = 0;
                while (iter.hasNext()) {
                Integer val = (Integer) iter.next();
                if (np == na.length) {
                na = BandStructure.realloc(na);
                }
                na[np++] = val.intValue();
                }
                if (np != na.length) {
                na = BandStructure.realloc(na, np);
                }
                return na;
                }
                
                public static
                void main(String[] av) throws IOException {
                int effort = MID_EFFORT;
                int ap = 0;
                if (ap &lt; av.length &amp;&amp; av[ap].equals(&quot;-e&quot;)) {
                ap++;
                effort = Integer.parseInt(av[ap++]);
                }
                int verbose = 1;
                if (ap &lt; av.length &amp;&amp; av[ap].equals(&quot;-v&quot;)) {
                ap++;
                verbose = Integer.parseInt(av[ap++]);
                }
                Coding[] bcs = BandStructure.getBasicCodings();
                CodingChooser cc = new CodingChooser(effort, bcs);
                if (ap &lt; av.length &amp;&amp; av[ap].equals(&quot;-p&quot;)) {
                ap++;
                cc.optUsePopulationCoding = false;
                }
                if (ap &lt; av.length &amp;&amp; av[ap].equals(&quot;-a&quot;)) {
                ap++;
                cc.optUseAdaptiveCoding = false;
                }
                cc.verbose = verbose;
                int[] values = readValuesFrom(System.in);
                int[] sizes = {0,0};
                CodingMethod cm = cc.choose(values, BandStructure.UNSIGNED5, sizes);
                System.out.println(&quot;size: &quot;+sizes[BYTE_SIZE]+&quot;zs=&quot;+sizes[ZIP_SIZE]);
                System.out.println(cm);
                }                
            </comment>
            <javadoc line="41">
                Heuristic chooser of basic encodings.
                  Runs &quot;zip&quot; to measure the apparent information content after coding.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="verbose" type="int" line="47"/>
            <declaration name="effort" type="int" line="48"/>
            <declaration name="optUseHistogram" type="boolean" line="49"/>
            <declaration name="optUsePopulationCoding" type="boolean" line="50"/>
            <declaration name="optUseAdaptiveCoding" type="boolean" line="51"/>
            <declaration name="disablePopCoding" type="boolean" line="52"/>
            <declaration name="disableRunCoding" type="boolean" line="53"/>
            <declaration name="topLevel" type="boolean" line="54"/>
            <declaration name="fuzz" type="double" line="58"/>
            <declaration name="allCodingChoices" type="Coding[]" line="60"/>
            <declaration name="choices" type="Choice[]" line="61"/>
            <declaration name="context" type="ByteArrayOutputStream" line="62"/>
            <declaration name="popHelper" type="CodingChooser" line="63"/>
            <declaration name="runHelper" type="CodingChooser" line="64"/>
            <declaration name="stress" type="Random" line="66"/>
            <class name="Choice" line="69">
                <comment line="73">
                    index in choices                    
                </comment>
                <comment line="74">
                    cache of distance                    
                </comment>
                <comment line="80">
                    These variables are reset and reused:                    
                </comment>
                <comment line="81">
                    order in which it is checked                    
                </comment>
                <comment line="82">
                    min distance from already-checked choices                    
                </comment>
                <comment line="83">
                    size of encoding in sample, zipped output                    
                </comment>
                <comment line="84">
                    size of encoding in sample (debug only)                    
                </comment>
                <comment line="85">
                    size of encoding, according to histogram                    
                </comment>
                <comment line="1150">
                    if non-null, copy output here also                    
                </comment>
                <declaration name="coding" type="Coding" line="71"/>
                <declaration name="index" type="int" line="72"/>
                <declaration name="distance" type="int[]" line="73"/>
                <method name="Choice" type="constructor" line="74">
                    <params>
                        <param name="coding" type="Coding"/>
                        <param name="index" type="int"/>
                        <param name="distance" type="int[]"/>
                    </params>
                </method>
                <declaration name="searchOrder" type="int" line="80"/>
                <declaration name="minDistance" type="int" line="81"/>
                <declaration name="zipSize" type="int" line="82"/>
                <declaration name="byteSize" type="int" line="83"/>
                <declaration name="histSize" type="int" line="84"/>
                <method name="reset" type="void" line="86"/>
                <method name="isExtra" type="boolean" line="92"/>
                <method name="toString" type="String" line="96"/>
                <method name="stringForDebug" type="String" line="100">
                    <declaration name="s" type="String" line="101"/>
                </method>
            </class>
            <method name="CodingChooser" type="constructor" line="116">
                <params>
                    <param name="effort" type="int"/>
                    <param name="allCodingChoices" type="Coding[]"/>
                </params>
                <comment line="136">
                    The following line &quot;makes sense&quot; but is too much
                     work for a simple heuristic.
                    if (effort &gt; 5)  zipDef.setLevel(effort);                    
                </comment>
                <comment line="142">
                    If effort = 9, look carefully at any solution
                     whose initial metrics are within 1% of the best
                     so far.  If effort = 1, look carefully only at
                     solutions whose initial metrics promise a 1% win.                    
                </comment>
                <declaration name="p200" type="PropMap" line="117"/>
                <scope line="118">
                    <declaration name="lstress" type="int" line="128"/>
                </scope>
                <declaration name="nc" type="int" line="147"/>
                <scope line="148"/>
                <scope line="154">
                    <declaration name="distance" type="int[]" line="156"/>
                </scope>
                <scope line="159">
                    <declaration name="ci" type="Coding" line="160"/>
                    <scope line="162">
                        <declaration name="cj" type="Coding" line="163"/>
                        <declaration name="dij" type="int" line="164"/>
                    </scope>
                </scope>
            </method>
            <method name="makeExtraChoice" type="Choice" line="173">
                <params>
                    <param name="coding" type="Coding"/>
                </params>
                <declaration name="distance" type="int[]" line="174"/>
                <scope line="175">
                    <declaration name="ci" type="Coding" line="176"/>
                    <declaration name="dij" type="int" line="177"/>
                </scope>
                <declaration name="c" type="Choice" line="182"/>
            </method>
            <method name="getContext" type="ByteArrayOutputStream" line="187"/>
            <declaration name="values" type="int[]" line="194"/>
            <declaration name="start" type="int" line="195"/>
            <declaration name="deltas" type="int[]" line="196"/>
            <declaration name="min" type="int" line="197"/>
            <declaration name="vHist" type="Histogram" line="198"/>
            <declaration name="dHist" type="Histogram" line="199"/>
            <declaration name="searchOrder" type="int" line="200"/>
            <declaration name="regularChoice" type="Choice" line="201"/>
            <declaration name="bestChoice" type="Choice" line="202"/>
            <declaration name="bestMethod" type="CodingMethod" line="203"/>
            <declaration name="bestByteSize" type="int" line="204"/>
            <declaration name="bestZipSize" type="int" line="205"/>
            <declaration name="targetSize" type="int" line="206"/>
            <method name="reset" type="void" line="208">
                <params>
                    <param name="values" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
            </method>
            <declaration name="MIN_EFFORT" type="int" line="226"/>
            <declaration name="MID_EFFORT" type="int" line="227"/>
            <declaration name="MAX_EFFORT" type="int" line="228"/>
            <declaration name="POP_EFFORT" type="int" line="230"/>
            <declaration name="RUN_EFFORT" type="int" line="231"/>
            <declaration name="BYTE_SIZE" type="int" line="233"/>
            <declaration name="ZIP_SIZE" type="int" line="234"/>
            <method name="choose" type="CodingMethod" line="236">
                <params>
                    <param name="values" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                    <param name="regular" type="Coding"/>
                    <param name="sizes" type="int[]"/>
                </params>
                <comment line="238">
                    Save the value array                    
                </comment>
                <comment line="261">
                    Find all the preset choices that might be worth looking at:                    
                </comment>
                <comment line="265">
                    Make a random choice.                    
                </comment>
                <comment line="279">
                    Pick a totally random coding 6% of the time.                    
                </comment>
                <comment line="298">
                    every 2 effort points doubles work                    
                </comment>
                <comment line="302">
                    Start by evaluating the &quot;regular&quot; choice.                    
                </comment>
                <comment line="307">
                    save these first-cut numbers for later                    
                </comment>
                <comment line="312">
                    Give credit for being the default; no band header is needed.
                     Rather than increasing every other size value by the band
                     header amount, we decrement this one metric, to give it an edge.
                     Decreasing zipSize by a byte length is conservatively correct,
                     especially considering that the escape byte is not likely to
                     zip well with other bytes in the band.                    
                </comment>
                <comment line="320">
                    band coding header                    
                </comment>
                <comment line="321">
                    regularChoice.histSize -= Xlen; // keep exact byteSize
                    regularChoice.byteSize -= Xlen;  keep exact byteSize                    
                </comment>
                <comment line="330">
                    Continually select a new choice to evaluate.                    
                </comment>
                <comment line="333">
                    cycle dscale values!                    
                </comment>
                <comment line="347">
                    Record best &quot;plain coding&quot; choice.                    
                </comment>
                <comment line="370">
                    Pass back the requested information:                    
                </comment>
                <comment line="382">
                    for GC                    
                </comment>
                <scope line="240">
                    <scope line="241">
                        <declaration name="computed" type="int[]" line="242"/>
                    </scope>
                </scope>
                <scope line="249"/>
                <scope line="254">
                    <declaration name="val" type="int" line="255"/>
                </scope>
                <declaration name="numChoices" type="int" line="261"/>
                <scope line="263">
                    <declaration name="rand" type="int" line="265"/>
                    <declaration name="coding" type="CodingMethod" line="266"/>
                    <scope line="267">
                        <declaration name="c" type="Choice" line="268"/>
                        <scope line="269"/>
                    </scope>
                    <scope line="274">
                        <scope line="275"/>
                        <scope line="277"/>
                    </scope>
                    <scope line="284"/>
                    <scope line="289"/>
                </scope>
                <declaration name="searchScale" type="double" line="295"/>
                <scope line="296"/>
                <declaration name="searchOrderLimit" type="int" line="299"/>
                <declaration name="maxd" type="int" line="304"/>
                <declaration name="zipSize1" type="int" line="307"/>
                <declaration name="byteSize1" type="int" line="308"/>
                <scope line="310">
                    <declaration name="X" type="int" line="317"/>
                    <scope line="318">
                        <declaration name="Xlen" type="int" line="319"/>
                    </scope>
                </scope>
                <declaration name="dscale" type="int" line="328"/>
                <scope line="330">
                    <declaration name="nextChoice" type="Choice" line="331"/>
                    <declaration name="dhi" type="int" line="333"/>
                    <declaration name="dlo" type="int" line="334"/>
                    <declaration name="nextMaxd" type="int" line="339"/>
                    <scope line="340"/>
                </scope>
                <declaration name="plainBest" type="Coding" line="347"/>
                <scope line="350"/>
                <scope line="358"/>
                <scope line="365"/>
                <scope line="370"/>
                <scope line="374"/>
                <declaration name="lbestMethod" type="CodingMethod" line="380"/>
            </method>
            <method name="choose" type="CodingMethod" line="384">
                <params>
                    <param name="values" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                    <param name="regular" type="Coding"/>
                </params>
            </method>
            <method name="choose" type="CodingMethod" line="387">
                <params>
                    <param name="values" type="int[]"/>
                    <param name="regular" type="Coding"/>
                    <param name="sizes" type="int[]"/>
                </params>
            </method>
            <method name="choose" type="CodingMethod" line="390">
                <params>
                    <param name="values" type="int[]"/>
                    <param name="regular" type="Coding"/>
                </params>
            </method>
            <method name="markUsableChoices" type="int" line="394">
                <params>
                    <param name="regular" type="Coding"/>
                </params>
                <comment line="401">
                    Mark as already visited:                    
                </comment>
                <comment line="422">
                    arbitrary pick                    
                </comment>
                <declaration name="numChoices" type="int" line="395"/>
                <scope line="396">
                    <declaration name="c" type="Choice" line="397"/>
                    <scope line="399">
                        <scope line="402"/>
                    </scope>
                </scope>
                <scope line="411">
                    <scope line="413"/>
                </scope>
                <scope line="417">
                    <scope line="418">
                        <declaration name="c" type="Choice" line="419"/>
                        <scope line="420"/>
                    </scope>
                    <scope line="425"/>
                </scope>
                <scope line="430">
                    <scope line="432">
                        <scope line="433">
                            <declaration name="c" type="Choice" line="434"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="findChoiceNear" type="Choice" line="446">
                <params>
                    <param name="near" type="Choice"/>
                    <param name="dhi" type="int"/>
                    <param name="dlo" type="int"/>
                </params>
                <comment line="455">
                    already searched                    
                </comment>
                <comment line="456">
                    Distance from &quot;near&quot; guy must be in bounds:                    
                </comment>
                <comment line="458">
                    Try also to keep min-distance from other guys in bounds:                    
                </comment>
                <declaration name="distance" type="int[]" line="449"/>
                <declaration name="found" type="Choice" line="450"/>
                <scope line="451">
                    <declaration name="c" type="Choice" line="452"/>
                    <scope line="456">
                        <scope line="458"/>
                    </scope>
                </scope>
            </method>
            <method name="evaluate" type="void" line="471">
                <params>
                    <param name="c" type="Choice"/>
                </params>
                <comment line="494">
                    models should agree                    
                </comment>
                <declaration name="mustComputeSize" type="boolean" line="474"/>
                <scope line="475"/>
                <scope line="477">
                    <declaration name="hist" type="Histogram" line="478"/>
                </scope>
                <scope line="482"/>
                <scope line="485">
                    <declaration name="sizes" type="int[]" line="486"/>
                </scope>
                <scope line="492"/>
                <scope line="495"/>
            </method>
            <method name="noteSizes" type="boolean" line="500">
                <params>
                    <param name="c" type="CodingMethod"/>
                    <param name="byteSize" type="int"/>
                    <param name="zipSize" type="int"/>
                </params>
                <declaration name="better" type="boolean" line="502"/>
                <scope line="508"/>
                <scope line="514"/>
            </method>
            <method name="updateDistances" type="int" line="520">
                <params>
                    <param name="c" type="Choice"/>
                </params>
                <comment line="522">
                    update all minDistance values in still unevaluated choices                    
                </comment>
                <comment line="524">
                    how far is c from everybody else?                    
                </comment>
                <comment line="538">
                    Now maxd has the distance of the farthest outlier
                     from all evaluated choices.                    
                </comment>
                <declaration name="distance" type="int[]" line="522"/>
                <declaration name="maxd" type="int" line="523"/>
                <scope line="524">
                    <declaration name="c2" type="Choice" line="525"/>
                    <declaration name="d" type="int" line="528"/>
                    <declaration name="mind" type="int" line="531"/>
                </scope>
            </method>
            <method name="computeSize" type="void" line="547">
                <params>
                    <param name="c" type="CodingMethod"/>
                    <param name="values" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                    <param name="sizes" type="int[]"/>
                </params>
                <comment line="559">
                    cannot happen                    
                </comment>
                <scope line="548"/>
                <scope line="552"/>
                <scope line="557"/>
            </method>
            <method name="computeSize" type="void" line="561">
                <params>
                    <param name="c" type="CodingMethod"/>
                    <param name="values" type="int[]"/>
                    <param name="sizes" type="int[]"/>
                </params>
            </method>
            <method name="computeSize" type="int[]" line="564">
                <params>
                    <param name="c" type="CodingMethod"/>
                    <param name="values" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="sizes" type="int[]" line="565"/>
            </method>
            <method name="computeSize" type="int[]" line="569">
                <params>
                    <param name="c" type="CodingMethod"/>
                    <param name="values" type="int[]"/>
                </params>
            </method>
            <method name="computeSizePrivate" type="int[]" line="573">
                <params>
                    <param name="c" type="CodingMethod"/>
                </params>
                <declaration name="sizes" type="int[]" line="574"/>
            </method>
            <method name="computeByteSize" type="int" line="578">
                <params>
                    <param name="cm" type="CodingMethod"/>
                    <param name="values" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="len" type="int" line="579"/>
                <scope line="580"/>
                <scope line="583">
                    <declaration name="c" type="Coding" line="584"/>
                    <declaration name="size" type="int" line="585"/>
                    <declaration name="size2" type="int" line="586"/>
                </scope>
            </method>
            <method name="countBytesToSizer" type="int" line="593">
                <params>
                    <param name="cm" type="CodingMethod"/>
                    <param name="values" type="int[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <comment line="600">
                    cannot happen                    
                </comment>
                <scope line="594"/>
                <scope line="598"/>
            </method>
            <method name="getDeltas" type="int[]" line="603">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <scope line="606"/>
            </method>
            <method name="getValueHistogram" type="Histogram" line="611">
                <scope line="612">
                    <scope line="614"/>
                    <scope line="616"/>
                </scope>
            </method>
            <method name="getDeltaHistogram" type="Histogram" line="622">
                <scope line="623">
                    <scope line="625"/>
                    <scope line="627"/>
                </scope>
            </method>
            <method name="getHistogram" type="Histogram" line="633">
                <params>
                    <param name="isDelta" type="boolean"/>
                </params>
            </method>
            <method name="tryPopulationCoding" type="void" line="637">
                <params>
                    <param name="plainCoding" type="Coding"/>
                </params>
                <comment line="639">
                    assert(plainCoding.canRepresent(min, max));                    
                </comment>
                <comment line="641">
                    Start with &quot;reasonable&quot; default codings.                    
                </comment>
                <comment line="646">
                    There&apos;s going to be a band header.  Estimate conservatively large.                    
                </comment>
                <comment line="648">
                    Keep a running model of the predicted sizes of the F/T/U sequences.                    
                </comment>
                <comment line="652">
                    Start by assuming a degenerate favored-value length of 0,
                     which looks like a bunch of zero tokens followed by the
                     original sequence.
                     The {F} list ends with a repeated F value; find worst case:                    
                </comment>
                <comment line="659">
                    The {T} list starts out a bunch of zeros, each of length 1.                    
                </comment>
                <comment line="662">
                    The {U} list starts out a copy of the plainCoding:                    
                </comment>
                <comment line="668">
                    Record all the values, in decreasing order of favor.                    
                </comment>
                <comment line="670">
                    int[] allPopSizes    = new int[1+hist.getTotalLength()];                    
                </comment>
                <comment line="672">
                    What sizes are &quot;interesting&quot;?                    
                </comment>
                <comment line="676">
                    For each length, adjust the currentXSize model, and look for a win.                    
                </comment>
                <comment line="682">
                    The {F} list gets an additional member.
                     Take it from the end of the current matrix row.
                     (It&apos;s the end, so that we get larger favored values first.)                    
                </comment>
                <comment line="694">
                    The token list replaces occurrences of zero with a new token:                    
                </comment>
                <comment line="699">
                    The unfavored list loses occurrences of the newly favored value.
                     (This is the whole point of the exercise!)                    
                </comment>
                <comment line="703">
                    allPopSizes[fvcount] = currentSize;                    
                </comment>
                <comment line="720">
                    Complete loss.                    
                </comment>
                <comment line="736">
                    Now close onto a specific coding, testing more rigorously
                     with the zipSize metric.
                     Questions to decide:
                       1. How many favored values?
                       2. What token coding (TC)?
                       3. Sort favored values by value within length brackets?
                       4. What favored coding?
                       5. What unfavored coding?
                     Steps 1/2/3 are interdependent, and may be iterated.
                     Steps 4 and 5 may be decided independently afterward.                    
                </comment>
                <comment line="780">
                    interleave all B greater than bestB with best and full fits                    
                </comment>
                <comment line="820">
                    Kludge:  setS(PACK_TO_MAX_S) means packToMax here.                    
                </comment>
                <comment line="834">
                    redundant test                    
                </comment>
                <comment line="840">
                    predict correctly                    
                </comment>
                <declaration name="hist" type="Histogram" line="639"/>
                <declaration name="approxL" type="int" line="641"/>
                <declaration name="favoredCoding" type="Coding" line="642"/>
                <declaration name="tokenCoding" type="Coding" line="643"/>
                <declaration name="unfavoredCoding" type="Coding" line="644"/>
                <declaration name="BAND_HEADER" type="int" line="646"/>
                <declaration name="currentFSize" type="int" line="648"/>
                <declaration name="currentTSize" type="int" line="649"/>
                <declaration name="currentUSize" type="int" line="650"/>
                <declaration name="ZERO_LEN" type="int" line="659"/>
                <declaration name="bestPopSize" type="int" line="664"/>
                <declaration name="bestPopFVC" type="int" line="665"/>
                <declaration name="allFavoredValues" type="int[]" line="668"/>
                <declaration name="targetLowFVC" type="int" line="672"/>
                <declaration name="targetHighFVC" type="int" line="673"/>
                <declaration name="matrix" type="int[][]" line="676"/>
                <declaration name="mrow" type="int" line="677"/>
                <declaration name="mcol" type="int" line="678"/>
                <declaration name="mrowFreq" type="int" line="679"/>
                <scope line="680">
                    <scope line="684"/>
                    <declaration name="thisValue" type="int" line="689"/>
                    <declaration name="thisVLen" type="int" line="691"/>
                    <declaration name="thisVCount" type="int" line="694"/>
                    <declaration name="thisToken" type="int" line="695"/>
                    <declaration name="currentSize" type="int" line="701"/>
                    <scope line="703">
                        <scope line="704"/>
                    </scope>
                </scope>
                <scope line="717">
                    <scope line="718"/>
                </scope>
                <declaration name="oldZipSize" type="int" line="734"/>
                <declaration name="LValuesCoded" type="int[]" line="745"/>
                <declaration name="bestFits" type="List&lt;Coding&gt;" line="746"/>
                <declaration name="fullFits" type="List&lt;Coding&gt;" line="747"/>
                <declaration name="longFits" type="List&lt;Coding&gt;" line="748"/>
                <declaration name="PACK_TO_MAX_S" type="int" line="749"/>
                <scope line="750"/>
                <scope line="752">
                    <declaration name="bestB" type="int" line="753"/>
                    <declaration name="doFullAlso" type="boolean" line="754"/>
                    <scope line="757">
                        <declaration name="L" type="int" line="758"/>
                        <declaration name="c0" type="Coding" line="759"/>
                        <declaration name="c1" type="Coding" line="760"/>
                        <declaration name="c3" type="Coding" line="761"/>
                        <scope line="762"/>
                        <scope line="768">
                            <scope line="770">
                                <declaration name="c2" type="Coding" line="773"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="780">
                        <declaration name="c" type="Coding" line="781"/>
                        <scope line="782"/>
                    </scope>
                </scope>
                <declaration name="allFits" type="List&lt;Coding&gt;" line="788"/>
                <scope line="792"/>
                <declaration name="maxFits" type="int" line="800"/>
                <scope line="803"/>
                <scope line="809"/>
                <scope line="816">
                    <declaration name="packToMax" type="boolean" line="817"/>
                    <scope line="818"/>
                    <declaration name="fVlen" type="int" line="823"/>
                    <scope line="824"/>
                    <scope line="828"/>
                    <declaration name="pop" type="PopulationCoding" line="835"/>
                    <declaration name="tcsizes" type="int[]" line="841"/>
                </scope>
                <scope line="846">
                    <scope line="851"/>
                </scope>
            </method>
            <method name="computePopSizePrivate" type="int[]" line="861">
                <params>
                    <param name="pop" type="PopulationCoding"/>
                    <param name="favoredCoding" type="Coding"/>
                    <param name="unfavoredCoding" type="Coding"/>
                </params>
                <comment line="872">
                    No nested run codings.                    
                </comment>
                <comment line="882">
                    Find good coding choices for the token and unfavored sequences.                    
                </comment>
                <comment line="913">
                    pop.hist.print(&quot;pop-hist&quot;, null, System.out);                    
                </comment>
                <comment line="929">
                    do not bother with size computation                    
                </comment>
                <comment line="934">
                    Write the array of favored values.                    
                </comment>
                <comment line="938">
                    cannot happen                    
                </comment>
                <scope line="862"/>
                <declaration name="fVlen" type="int" line="874"/>
                <scope line="875"/>
                <declaration name="favoredValues" type="int[]" line="882"/>
                <declaration name="vals" type="int[][]" line="883"/>
                <declaration name="tokens" type="int[]" line="884"/>
                <declaration name="unfavoredValues" type="int[]" line="885"/>
                <scope line="890">
                    <declaration name="tc" type="CodingMethod" line="893"/>
                    <scope line="894"/>
                </scope>
                <scope line="902"/>
                <scope line="907">
                    <declaration name="sb" type="StringBuilder" line="913"/>
                    <scope line="915"/>
                </scope>
                <scope line="924"/>
                <scope line="927"/>
                <declaration name="sizes" type="int[]" line="930"/>
                <scope line="931"/>
                <scope line="936"/>
                <declaration name="checkSizes" type="int[]" line="939"/>
            </method>
            <method name="tryAdaptiveCoding" type="void" line="946">
                <params>
                    <param name="plainCoding" type="Coding"/>
                </params>
                <comment line="949">
                    Scan the value sequence, determining whether an interesting
                     run occupies too much space.  (&quot;Too much&quot; means, say 5% more
                     than the average integer size of the band as a whole.)
                     Try to find a better coding for those segments.                    
                </comment>
                <comment line="958">
                    %%% not quite right!                    
                </comment>
                <comment line="970">
                    System.out.println(&quot;len &quot;+val+&quot; = &quot;+size);                    
                </comment>
                <comment line="990">
                    for now:                    
                </comment>
                <comment line="991">
                    double the thresh                    
                </comment>
                <comment line="994">
                    Find some mesh scales we like.                    
                </comment>
                <comment line="1010">
                    There&apos;s going to be a band header.  Estimate conservatively large.                    
                </comment>
                <comment line="1011">
                    op, KB, A, B                    
                </comment>
                <comment line="1012">
                    Threshold values for a &quot;too big&quot; mesh.                    
                </comment>
                <comment line="1045">
                    No nested pop codings.                    
                </comment>
                <comment line="1057">
                    Found a size bulge.                    
                </comment>
                <comment line="1088">
                    No use working further.                    
                </comment>
                <declaration name="oldZipSize" type="int" line="947"/>
                <declaration name="lstart" type="int" line="952"/>
                <declaration name="lend" type="int" line="953"/>
                <declaration name="lvalues" type="int[]" line="954"/>
                <declaration name="len" type="int" line="955"/>
                <scope line="956"/>
                <declaration name="sizes" type="int[]" line="961"/>
                <declaration name="fillp" type="int" line="962"/>
                <declaration name="totalSize" type="int" line="963"/>
                <scope line="964">
                    <declaration name="val" type="int" line="965"/>
                    <declaration name="size" type="int" line="967"/>
                </scope>
                <declaration name="avgSize" type="double" line="974"/>
                <declaration name="sizeFuzz" type="double" line="975"/>
                <declaration name="sizeFuzz2" type="double" line="976"/>
                <declaration name="sizeFuzz3" type="double" line="977"/>
                <scope line="978"/>
                <scope line="983"/>
                <declaration name="dmeshes" type="double[]" line="994"/>
                <declaration name="logLen" type="double" line="995"/>
                <scope line="996"/>
                <declaration name="meshes" type="int[]" line="999"/>
                <declaration name="mfillp" type="int" line="1000"/>
                <scope line="1001">
                    <declaration name="m" type="int" line="1002"/>
                </scope>
                <declaration name="BAND_HEADER" type="int" line="1010"/>
                <declaration name="threshes" type="int[]" line="1012"/>
                <declaration name="fuzzes" type="double[]" line="1013"/>
                <scope line="1014">
                    <declaration name="mesh" type="int" line="1015"/>
                    <declaration name="lfuzz" type="double" line="1016"/>
                </scope>
                <scope line="1026">
                    <scope line="1030"/>
                </scope>
                <scope line="1035"/>
                <scope line="1047">
                    <scope line="1050">
                        <declaration name="mesh" type="int" line="1051"/>
                        <declaration name="thresh" type="int" line="1052"/>
                        <declaration name="size" type="int" line="1054"/>
                        <scope line="1055">
                            <declaration name="bend" type="int" line="1057"/>
                            <declaration name="bsize" type="int" line="1058"/>
                            <declaration name="bigSize" type="double" line="1059"/>
                            <scope line="1060">
                                <declaration name="bend0" type="int" line="1061"/>
                                <declaration name="bsize0" type="int" line="1062"/>
                                <scope line="1068"/>
                            </scope>
                            <declaration name="nexti" type="int" line="1074"/>
                            <scope line="1075"/>
                            <declaration name="begcm" type="CodingMethod" line="1081"/>
                            <scope line="1086"/>
                            <scope line="1090"/>
                            <scope line="1103"/>
                            <scope line="1106"/>
                            <scope line="1111">
                                <declaration name="chain" type="CodingMethod" line="1112"/>
                                <declaration name="hlen" type="int" line="1113"/>
                                <scope line="1114"/>
                                <scope line="1116"/>
                                <scope line="1120"/>
                                <declaration name="chainSize" type="int[]" line="1124"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1134">
                    <scope line="1135"/>
                </scope>
            </method>
            <method name="pct" type="String" line="1143">
                <params>
                    <param name="num" type="double"/>
                    <param name="den" type="double"/>
                </params>
            </method>
            <class name="Sizer" line="1147">
                <extends class="OutputStream"/>
                <comment line="73">
                    index in choices                    
                </comment>
                <comment line="74">
                    cache of distance                    
                </comment>
                <comment line="80">
                    These variables are reset and reused:                    
                </comment>
                <comment line="81">
                    order in which it is checked                    
                </comment>
                <comment line="82">
                    min distance from already-checked choices                    
                </comment>
                <comment line="83">
                    size of encoding in sample, zipped output                    
                </comment>
                <comment line="84">
                    size of encoding in sample (debug only)                    
                </comment>
                <comment line="85">
                    size of encoding, according to histogram                    
                </comment>
                <comment line="1150">
                    if non-null, copy output here also                    
                </comment>
                <declaration name="out" type="OutputStream" line="1149"/>
                <method name="Sizer" type="constructor" line="1150">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                </method>
                <method name="Sizer" type="constructor" line="1153"/>
                <declaration name="count" type="int" line="1156"/>
                <method name="write" type="void" line="1157">
                    <params>
                        <param name="b" type="int"/>
                    </params>
                </method>
                <method name="write" type="void" line="1161">
                    <params>
                        <param name="b" type="byte"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="reset" type="void" line="1165"/>
                <method name="getSize" type="int" line="1168"/>
                <method name="toString" type="String" line="1170">
                    <comment line="1173">
                        If -ea, print out more informative strings!                        
                    </comment>
                    <declaration name="str" type="String" line="1171"/>
                </method>
                <method name="stringForDebug" type="String" line="1176"/>
            </class>
            <declaration name="zipSizer" type="Sizer" line="1181"/>
            <declaration name="zipDef" type="Deflater" line="1182"/>
            <declaration name="zipOut" type="DeflaterOutputStream" line="1183"/>
            <declaration name="byteSizer" type="Sizer" line="1184"/>
            <declaration name="byteOnlySizer" type="Sizer" line="1185"/>
            <method name="resetData" type="void" line="1187">
                <comment line="1192">
                    Prepend given salt to the test output.                    
                </comment>
                <comment line="1196">
                    cannot happen                    
                </comment>
                <scope line="1190">
                    <scope line="1192"/>
                    <scope line="1194"/>
                </scope>
            </method>
            <method name="flushData" type="void" line="1201">
                <comment line="1206">
                    cannot happen                    
                </comment>
                <scope line="1202"/>
                <scope line="1204"/>
            </method>
            <method name="getByteSize" type="int" line="1208"/>
            <method name="getZipSize" type="int" line="1211"/>
            <method name="addStressSeed" type="void" line="1219">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="stressPopCoding" type="CodingMethod" line="1225">
                <params>
                    <param name="coding" type="CodingMethod"/>
                </params>
                <comment line="1227">
                    this method is only for testing                    
                </comment>
                <comment line="1228">
                    Don&apos;t turn it into a pop coding if it&apos;s already something special.                    
                </comment>
                <comment line="1236">
                    Build the population from the value list.                    
                </comment>
                <comment line="1252">
                    Lose the order.                    
                </comment>
                <comment line="1255">
                    Keep the order, mostly.                    
                </comment>
                <comment line="1261">
                    Cut the list down.                    
                </comment>
                <comment line="1263">
                    Cut at end.                    
                </comment>
                <comment line="1266">
                    Cut at start.                    
                </comment>
                <declaration name="valueCoding" type="Coding" line="1229"/>
                <declaration name="hist" type="Histogram" line="1230"/>
                <declaration name="fVlen" type="int" line="1231"/>
                <declaration name="popvals" type="List&lt;Integer&gt;" line="1233"/>
                <scope line="1234">
                    <declaration name="popset" type="Set&lt;Integer&gt;" line="1236"/>
                    <scope line="1237"/>
                </scope>
                <scope line="1240">
                    <declaration name="matrix" type="int[][]" line="1241"/>
                    <scope line="1242">
                        <declaration name="row" type="int[]" line="1243"/>
                        <scope line="1244"/>
                    </scope>
                </scope>
                <declaration name="reorder" type="int" line="1249"/>
                <scope line="1250"/>
                <scope line="1253"/>
                <scope line="1259">
                    <scope line="1261"/>
                    <scope line="1264"/>
                </scope>
                <declaration name="fvals" type="int[]" line="1270"/>
                <scope line="1271"/>
                <declaration name="pop" type="PopulationCoding" line="1274"/>
                <declaration name="lvals" type="int[]" line="1276"/>
                <scope line="1277">
                    <declaration name="popl" type="int" line="1278"/>
                    <scope line="1280"/>
                </scope>
                <scope line="1285">
                    <declaration name="lmin" type="int" line="1286"/>
                    <scope line="1287">
                        <declaration name="val" type="int" line="1288"/>
                    </scope>
                </scope>
            </method>
            <method name="stressAdaptiveCoding" type="CodingMethod" line="1300">
                <params>
                    <param name="coding" type="CodingMethod"/>
                </params>
                <comment line="1302">
                    this method is only for testing                    
                </comment>
                <comment line="1303">
                    Don&apos;t turn it into a run coding if it&apos;s already something special.                    
                </comment>
                <comment line="1308">
                    Decide how many spans we&apos;ll create.                    
                </comment>
                <comment line="1313">
                    temporary, while I decide spans                    
                </comment>
                <comment line="1324">
                    Every so often generate a value based on KX/KB format.                    
                </comment>
                <comment line="1330">
                    Try smaller and smaller codings:                    
                </comment>
                <comment line="1336">
                    System.out.println(&quot;KX=&quot;+KX+&quot; KB=&quot;+KB+&quot; K=&quot;+thisspan);                    
                </comment>
                <comment line="1346">
                    Choose a coding for the span [split..scan).                    
                </comment>
                <comment line="1349">
                    the caboose                    
                </comment>
                <comment line="1356">
                    return to normal value                    
                </comment>
                <declaration name="plainCoding" type="Coding" line="1304"/>
                <declaration name="len" type="int" line="1305"/>
                <declaration name="spanlen" type="int" line="1308"/>
                <scope line="1310">
                    <declaration name="allValues" type="int[]" line="1313"/>
                    <declaration name="result" type="CodingMethod" line="1314"/>
                    <declaration name="scan" type="int" line="1315"/>
                    <declaration name="lstart" type="int" line="1316"/>
                    <scope line="1317">
                        <declaration name="thisspan" type="int" line="1318"/>
                        <declaration name="rand" type="int" line="1319"/>
                        <scope line="1320"/>
                        <scope line="1322">
                            <declaration name="KX" type="int" line="1324"/>
                            <declaration name="KB" type="int" line="1325"/>
                            <scope line="1326"/>
                        </scope>
                        <scope line="1339"/>
                        <declaration name="sc" type="CodingMethod" line="1346"/>
                        <scope line="1347"/>
                        <scope line="1349"/>
                    </scope>
                </scope>
                <scope line="1354"/>
            </method>
            <method name="stressCoding" type="Coding" line="1360">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <comment line="1362">
                    this method is only for testing                    
                </comment>
                <scope line="1362">
                    <declaration name="c" type="Coding" line="1363"/>
                    <scope line="1368">
                        <declaration name="dc" type="Coding" line="1369"/>
                    </scope>
                </scope>
            </method>
            <method name="stressLen" type="int" line="1378">
                <params>
                    <param name="len" type="int"/>
                </params>
                <comment line="1380">
                    this method is only for testing                    
                </comment>
                <declaration name="rand" type="int" line="1381"/>
            </method>
        </class>
    </source>