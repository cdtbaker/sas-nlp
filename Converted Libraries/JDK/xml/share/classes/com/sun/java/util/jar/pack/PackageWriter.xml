<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="com.sun.java.util.jar.pack.ConstantPool.ClassEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.DescriptorEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Entry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.Index"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.IndexGroup"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.MemberEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.NumberEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.SignatureEntry"/>
        <import package="com.sun.java.util.jar.pack.ConstantPool.StringEntry"/>
        <import package="com.sun.java.util.jar.pack.Package.Class"/>
        <import package="com.sun.java.util.jar.pack.Package.File"/>
        <import package="com.sun.java.util.jar.pack.Package.InnerClass"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.PrintStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="PackageWriter" line="53">
            <extends class="BandStructure"/>
            <comment line="115">
                for the CP                
            </comment>
            <comment line="116">
                for layout callables                
            </comment>
            <comment line="117">
                count attr. occurences                
            </comment>
            <comment line="269">
                Local routine used to format fixed-format scalars
                 in the file_header:                
            </comment>
            <comment line="429">
                (The following observations are out of date; they apply only to
                 &quot;banding&quot; the constant pool itself.  Later revisions of this algorithm
                 applied the banding technique to every part of the package file,
                 applying the benefits more broadly.)                
            </comment>
            <comment line="434">
                Note:  Keeping the data separate in passes (or &quot;bands&quot;) allows the
                 compressor to issue significantly shorter indexes for repeated data.
                 The difference in zipped size is 4%, which is remarkable since the
                 unzipped sizes are the same (only the byte order differs).                
            </comment>
            <comment line="439">
                After moving similar data into bands, it becomes natural to delta-encode
                 each band.  (This is especially useful if we sort the constant pool first.)
                 Delta encoding saves an extra 5% in the output size (13% of the CP itself).
                 Because a typical delta usees much less data than a byte, the savings after
                 zipping is even better:  A zipped delta-encoded package is 8% smaller than
                 a zipped non-delta-encoded package.  Thus, in the zipped file, a banded,
                 delta-encoded constant pool saves over 11% (of the total file size) compared
                 with a zipped unbanded file.                
            </comment>
            <comment line="862">
                Scratch variables for processing attributes and flags.                
            </comment>
            <comment line="1169">
                Generic routines for writing attributes and flags of
                 classes, fields, methods, and codes.                
            </comment>
            <comment line="1269">
                temporary scratch variables for processing code blocks                
            </comment>
            <comment line="1285">
                Return an _invokeinit_op variant, if the instruction matches one,
                 else -1.                
            </comment>
            <comment line="1302">
                Return a _self_linker_op variant, if the instruction matches one,
                 else -1.                
            </comment>
            <javadoc line="53">
                Writer for a package file.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="pkg" type="Package" line="58"/>
            <declaration name="finalOut" type="OutputStream" line="59"/>
            <method name="PackageWriter" type="constructor" line="61">
                <params>
                    <param name="pkg" type="Package"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <comment line="65">
                    Caller has specified archive version in the package:                    
                </comment>
            </method>
            <method name="write" type="void" line="68">
                <comment line="81">
                    writeFileHeader() is done last, since it has ultimate counts
                     writeBandHeaders() is called after all other bands are done                    
                </comment>
                <comment line="92">
                    choose codings (fill band_headers if needed)                    
                </comment>
                <comment line="98">
                    now we can write the headers:                    
                </comment>
                <comment line="106">
                    if (verbose &gt; 0)  ee.printStackTrace();
                     Write partial output only if we are verbose.                    
                </comment>
                <declaration name="ok" type="boolean" line="69"/>
                <scope line="70">
                    <scope line="71"/>
                    <scope line="76"/>
                    <scope line="92"/>
                </scope>
                <scope line="103"/>
            </method>
            <declaration name="requiredEntries" type="Set&lt;Entry&gt;" line="114"/>
            <declaration name="backCountTable" type="Map&lt;Attribute.Layout,int[]&gt;" line="115"/>
            <declaration name="attrCounts" type="int[][]" line="116"/>
            <method name="setup" type="void" line="118"/>
            <method name="setArchiveOptions" type="void" line="129">
                <comment line="131">
                    Decide on some archive options early.
                     Does not decide on: AO_HAVE_SPECIAL_FORMATS,
                     AO_HAVE_CP_NUMBERS, AO_HAVE_FILE_HEADERS.
                     Also, AO_HAVE_FILE_OPTIONS may be forced on later.                    
                </comment>
                <comment line="140">
                    Import defaults from package (deflate hint, etc.).                    
                </comment>
                <comment line="157">
                    Make everything else be a positive offset from here.                    
                </comment>
                <comment line="161">
                    Put them into a band.                    
                </comment>
                <comment line="164">
                    If the archive deflation is set do not bother with each file.                    
                </comment>
                <comment line="167">
                    Every file has the deflate_hint set.
                     Set it for the whole archive, and omit options.                    
                </comment>
                <comment line="179">
                    Decide on default version number (majority rule).                    
                </comment>
                <comment line="191">
                    System.out.println(&quot;version=&quot;+version+&quot; count=&quot;+count);                    
                </comment>
                <comment line="198">
                    degenerate case                    
                </comment>
                <comment line="210">
                    Now add explicit pseudo-attrs. to classes with odd versions.                    
                </comment>
                <comment line="221">
                    Note:  Does not add in &quot;natural&quot; order.  (Who cares?)                    
                </comment>
                <comment line="226">
                    Decide if we are transmitting a huge resource file:                    
                </comment>
                <comment line="237">
                    Decide if code attributes typically have sub-attributes.
                     In that case, to preserve compact 1-byte code headers,
                     we must declare unconditional presence of code flags.                    
                </comment>
                <comment line="246">
                    cost of a useless unconditional flags byte                    
                </comment>
                <comment line="249">
                    cost of inflating a short header                    
                </comment>
                <declaration name="minModtime" type="int" line="134"/>
                <declaration name="maxModtime" type="int" line="135"/>
                <declaration name="minOptions" type="int" line="136"/>
                <declaration name="maxOptions" type="int" line="137"/>
                <scope line="142">
                    <declaration name="modtime" type="int" line="143"/>
                    <declaration name="options" type="int" line="144"/>
                    <scope line="146"/>
                    <scope line="148"/>
                </scope>
                <scope line="155"/>
                <scope line="159"/>
                <scope line="164">
                    <scope line="165"/>
                    <scope line="174"/>
                </scope>
                <declaration name="verCounts" type="Map&lt;Integer,int[]&gt;" line="179"/>
                <declaration name="bestCount" type="int" line="180"/>
                <declaration name="bestVersion" type="int" line="181"/>
                <scope line="182">
                    <declaration name="version" type="int" line="183"/>
                    <declaration name="var" type="int[]" line="184"/>
                    <scope line="185"/>
                    <declaration name="count" type="int" line="189"/>
                    <scope line="191"/>
                </scope>
                <declaration name="bestMajver" type="int" line="198"/>
                <declaration name="bestMinver" type="int" line="199"/>
                <declaration name="bestVerStr" type="String" line="202"/>
                <scope line="210">
                    <scope line="211">
                        <declaration name="a" type="Attribute" line="212"/>
                        <scope line="213">
                            <declaration name="clsVer" type="String" line="214"/>
                            <declaration name="pkgVer" type="String" line="215"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="226">
                    <declaration name="len" type="long" line="227"/>
                    <scope line="228"/>
                </scope>
                <declaration name="cost0" type="int" line="239"/>
                <declaration name="cost1" type="int" line="240"/>
                <scope line="241">
                    <scope line="242">
                        <scope line="243">
                            <scope line="244"/>
                            <scope line="247"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="254"/>
            </method>
            <method name="writeFileHeader" type="void" line="262"/>
            <method name="putMagicInt32" type="void" line="270">
                <params>
                    <param name="val" type="int"/>
                </params>
                <declaration name="res" type="int" line="271"/>
                <scope line="272"/>
            </method>
            <method name="writeArchiveMagic" type="void" line="278"/>
            <method name="writeArchiveHeader" type="void" line="282">
                <comment line="284">
                    for debug only:  number of words optimized away                    
                </comment>
                <comment line="287">
                    AO_HAVE_SPECIAL_FORMATS is set if non-default
                     coding techniques are used, or if there are
                     compressor-defined attributes transmitted.                    
                </comment>
                <comment line="300">
                    AO_HAVE_FILE_HEADERS is set if there is any
                     file or segment envelope information present.                    
                </comment>
                <comment line="312">
                    AO_HAVE_CP_NUMBERS is set if there are any numbers
                     in the global constant pool.  (Numbers are in 15% of classes.)                    
                </comment>
                <comment line="323">
                    caller must specify!                    
                </comment>
                <comment line="329">
                    controls header format                    
                </comment>
                <comment line="335">
                    (archiveSize1 &gt;&gt;&gt; 32)                    
                </comment>
                <comment line="337">
                    (archiveSize1 &gt;&gt;&gt; 0)                    
                </comment>
                <comment line="341">
                    Done with unsized part of header....                    
                </comment>
                <comment line="344">
                    usually zero                    
                </comment>
                <comment line="366">
                    Sanity:  Make sure we came out to 26 (less optional fields):                    
                </comment>
                <comment line="372">
                    Figure out all the sizes now, first cut:                    
                </comment>
                <comment line="375">
                    Second cut:                    
                </comment>
                <comment line="379">
                    Make the adjustments:                    
                </comment>
                <comment line="382">
                    Patch the header:                    
                </comment>
                <declaration name="headerDiscountForDebug" type="int" line="284"/>
                <declaration name="haveSpecial" type="boolean" line="289"/>
                <scope line="290"/>
                <declaration name="haveFiles" type="boolean" line="301"/>
                <scope line="302"/>
                <declaration name="haveNumbers" type="boolean" line="313"/>
                <scope line="314"/>
                <declaration name="DUMMY" type="int" line="331"/>
                <scope line="332"/>
                <scope line="342"/>
                <scope line="346"/>
                <scope line="350"/>
                <scope line="353"/>
                <scope line="382">
                    <declaration name="archiveSizeHi" type="int" line="383"/>
                    <declaration name="archiveSizeLo" type="int" line="384"/>
                    <declaration name="zeroLen" type="int" line="387"/>
                </scope>
            </method>
            <method name="writeConstantPoolCounts" type="void" line="397">
                <params>
                    <param name="haveNumbers" type="boolean"/>
                </params>
                <comment line="404">
                    The null string is always first.                    
                </comment>
                <comment line="414">
                    Omit counts for numbers if possible.                    
                </comment>
                <scope line="398">
                    <declaration name="tag" type="byte" line="399"/>
                    <declaration name="count" type="int" line="400"/>
                    <scope line="414"/>
                </scope>
            </method>
            <method name="getCPIndex" type="Index" line="424">
                <params>
                    <param name="tag" type="byte"/>
                </params>
            </method>
            <method name="writeConstantPool" type="void" line="447">
                <declaration name="cp" type="IndexGroup" line="448"/>
                <scope line="452">
                    <declaration name="tag" type="byte" line="453"/>
                    <declaration name="index" type="Index" line="454"/>
                    <declaration name="cpMap" type="Entry[]" line="456"/>
                    <scope line="460">
                        <scope line="461"/>
                    </scope>
                    <scope line="471">
                        <declaration name="e" type="NumberEntry" line="472"/>
                        <declaration name="x" type="int" line="473"/>
                    </scope>
                    <scope line="478">
                        <declaration name="e" type="NumberEntry" line="479"/>
                        <declaration name="fx" type="float" line="480"/>
                        <declaration name="x" type="int" line="481"/>
                    </scope>
                    <scope line="486">
                        <declaration name="e" type="NumberEntry" line="487"/>
                        <declaration name="x" type="long" line="488"/>
                    </scope>
                    <scope line="494">
                        <declaration name="e" type="NumberEntry" line="495"/>
                        <declaration name="dx" type="double" line="496"/>
                        <declaration name="x" type="long" line="497"/>
                    </scope>
                    <scope line="503">
                        <declaration name="e" type="StringEntry" line="504"/>
                    </scope>
                    <scope line="509">
                        <declaration name="e" type="ClassEntry" line="510"/>
                    </scope>
                    <scope line="518">
                        <declaration name="e" type="DescriptorEntry" line="519"/>
                    </scope>
                </scope>
            </method>
            <method name="writeUtf8Bands" type="void" line="539">
                <params>
                    <param name="cpMap" type="Entry[]"/>
                </params>
                <comment line="542">
                    nothing to write                    
                </comment>
                <comment line="544">
                    The first element must always be the empty string.                    
                </comment>
                <comment line="549">
                    Fetch the char arrays, first of all.                    
                </comment>
                <comment line="555">
                    First band:  Write lengths of shared prefixes.                    
                </comment>
                <comment line="556">
                    includes 2 skipped zeroes                    
                </comment>
                <comment line="572">
                    Second band:  Write lengths of unshared suffixes.
                     Third band:  Write the char values in the unshared suffixes.                    
                </comment>
                <comment line="580">
                    Zero suffix length is special flag to indicate
                     separate treatment in cp_Utf8_big bands.
                     This suffix length never occurs naturally,
                     except in the one case of a zero-length string.
                     (If it occurs, it is the first, due to sorting.)
                     The zero length string must, paradoxically, be
                     encoded as a zero-length cp_Utf8_big band.
                     This wastes exactly (&amp; tolerably) one null byte.                    
                </comment>
                <comment line="589">
                    Do not bother to add an empty &quot;(Utf8_big_0)&quot; band.
                     Also, the initial empty string does not require a band.                    
                </comment>
                <comment line="599">
                    Try packing the chars with an alternate encoding.                    
                </comment>
                <comment line="604">
                    No output.                    
                </comment>
                <comment line="608">
                    Mark packed string with zero-length suffix count.
                     This tells the unpacker to go elsewhere for the suffix bits.
                     Fourth band:  Write unshared suffix with alternate coding.                    
                </comment>
                <comment line="614">
                    would be ambiguous                    
                </comment>
                <comment line="615">
                    Normal string.  Save suffix in third and fourth bands.                    
                </comment>
                <declaration name="SUFFIX_SKIP_1" type="int" line="545"/>
                <declaration name="PREFIX_SKIP_2" type="int" line="546"/>
                <declaration name="chars" type="char[][]" line="549"/>
                <scope line="550"/>
                <declaration name="prefixes" type="int[]" line="555"/>
                <declaration name="prevChars" type="char[]" line="556"/>
                <scope line="557">
                    <declaration name="prefix" type="int" line="558"/>
                    <declaration name="curChars" type="char[]" line="559"/>
                    <declaration name="limit" type="int" line="560"/>
                </scope>
                <scope line="573">
                    <declaration name="str" type="char[]" line="574"/>
                    <declaration name="prefix" type="int" line="575"/>
                    <declaration name="suffix" type="int" line="576"/>
                    <declaration name="isPacked" type="boolean" line="577"/>
                    <scope line="578"/>
                    <scope line="590">
                        <declaration name="numWide" type="int" line="591"/>
                        <scope line="592">
                            <scope line="593"/>
                        </scope>
                        <scope line="597"/>
                    </scope>
                    <scope line="602"/>
                    <scope line="606"/>
                    <scope line="612">
                        <scope line="616">
                            <declaration name="ch" type="int" line="617"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="622">
                    <declaration name="normCharCount" type="int" line="623"/>
                    <declaration name="packCharCount" type="int" line="624"/>
                    <declaration name="charCount" type="int" line="625"/>
                </scope>
            </method>
            <method name="tryAlternateEncoding" type="boolean" line="631">
                <params>
                    <param name="i" type="int"/>
                    <param name="numWide" type="int"/>
                    <param name="str" type="char[]"/>
                    <param name="prefix" type="int"/>
                </params>
                <declaration name="suffix" type="int" line="632"/>
                <declaration name="cvals" type="int[]" line="633"/>
                <scope line="634"/>
                <declaration name="cc" type="CodingChooser" line="637"/>
                <declaration name="bigRegular" type="Coding" line="638"/>
                <declaration name="bandName" type="String" line="639"/>
                <declaration name="sizes" type="int[]" line="640"/>
                <declaration name="BYTE_SIZE" type="int" line="641"/>
                <declaration name="ZIP_SIZE" type="int" line="642"/>
                <scope line="643"/>
                <declaration name="special" type="CodingMethod" line="646"/>
                <declaration name="charRegular" type="Coding" line="647"/>
                <scope line="650">
                    <declaration name="specialZipSize" type="int" line="651"/>
                    <declaration name="normalSizes" type="int[]" line="652"/>
                    <declaration name="normalZipSize" type="int" line="653"/>
                    <declaration name="minWin" type="int" line="654"/>
                    <scope line="657">
                        <declaration name="big" type="IntBand" line="658"/>
                    </scope>
                </scope>
            </method>
            <method name="writeSignatureBands" type="void" line="666">
                <params>
                    <param name="cpMap" type="Entry[]"/>
                </params>
                <scope line="667">
                    <declaration name="e" type="SignatureEntry" line="668"/>
                    <scope line="670"/>
                </scope>
            </method>
            <method name="writeMemberRefs" type="void" line="676">
                <params>
                    <param name="tag" type="byte"/>
                    <param name="cpMap" type="Entry[]"/>
                    <param name="cp_class" type="CPRefBand"/>
                    <param name="cp_desc" type="CPRefBand"/>
                </params>
                <scope line="677">
                    <declaration name="e" type="MemberEntry" line="678"/>
                </scope>
            </method>
            <method name="writeFiles" type="void" line="684">
                <declaration name="numFiles" type="int" line="685"/>
                <declaration name="options" type="int" line="687"/>
                <declaration name="haveSizeHi" type="boolean" line="688"/>
                <declaration name="haveModtime" type="boolean" line="689"/>
                <declaration name="haveOptions" type="boolean" line="690"/>
                <scope line="691">
                    <scope line="692">
                        <scope line="693"/>
                    </scope>
                </scope>
                <scope line="701"/>
                <scope line="705">
                    <declaration name="len" type="long" line="707"/>
                </scope>
            </method>
            <method name="collectAttributeLayouts" type="void" line="724">
                <comment line="731">
                    Collect maxFlags and allLayouts.                    
                </comment>
                <comment line="744">
                    If there are many species of attributes, use 63-bit flags.                    
                </comment>
                <comment line="748">
                                        
                </comment>
                <comment line="749">
                                        
                </comment>
                <comment line="750">
                                        
                </comment>
                <comment line="751">
                    heuristic                    
                </comment>
                <comment line="766">
                    Standard indexes can never conflict with flag bits.  Assert it.                    
                </comment>
                <comment line="770">
                    Collect counts for both predefs. and custom defs.
                     Decide on custom, local attribute definitions.                    
                </comment>
                <comment line="775">
                    Now the remaining defs in allLayouts[i] need attr. indexes.
                     Fill up unused flag bits with new defs.
                     Unused bits are those which are not used by predefined attrs,
                     and which are always clear in the classfiles.                    
                </comment>
                <comment line="781">
                    all bits fit into a Java long                    
                </comment>
                <comment line="787">
                    Sort by count, most frequent first.
                     Predefs. participate in this sort, though it does not matter.                    
                </comment>
                <comment line="793">
                    Primary sort key is count, reversed.                    
                </comment>
                <comment line="808">
                    The index is already set.                    
                </comment>
                <comment line="815">
                    clear low bit; we are using it now                    
                </comment>
                <comment line="816">
                    Update attrIndexTable:                    
                </comment>
                <comment line="819">
                    Update attrIndexTable:                    
                </comment>
                <comment line="823">
                    Now that we know the index, record the count of this def.                    
                </comment>
                <comment line="826">
                    For all callables in the def, keep a tally of back-calls.                    
                </comment>
                <comment line="832">
                    no count to accumulate here                    
                </comment>
                <comment line="838">
                    Make sure the package CP can name the local attribute.                    
                </comment>
                <comment line="853">
                    Later, when emitting attr_definition_bands, we will look at
                     attrDefSeen and attrDefs at position 32/63 and beyond.
                     The attrIndexTable will provide elements of xxx_attr_indexes bands.                    
                </comment>
                <comment line="857">
                    Done with scratch variables:                    
                </comment>
                <scope line="727"/>
                <scope line="731">
                    <scope line="733"/>
                    <scope line="736">
                        <scope line="738"/>
                    </scope>
                </scope>
                <scope line="744">
                    <declaration name="nl" type="int" line="745"/>
                    <declaration name="haveLongFlags" type="boolean" line="746"/>
                    <declaration name="TOO_MANY_ATTRS" type="int" line="747"/>
                    <scope line="750">
                        <declaration name="mask" type="int" line="751"/>
                    </scope>
                    <scope line="757"/>
                </scope>
                <scope line="766"/>
                <scope line="773">
                    <declaration name="avHiBits" type="long" line="778"/>
                    <declaration name="nextLoBit" type="int" line="782"/>
                    <declaration name="defMap" type="Map&lt;Attribute.Layout,int[]&gt;" line="783"/>
                    <declaration name="layoutsAndCounts" type="Map.Entry[]" line="784"/>
                    <anonymous_class line="788">
                        <method name="compare" type="int" line="789">
                            <params>
                                <param name="o0" type="Object"/>
                                <param name="o1" type="Object"/>
                            </params>
                            <comment line="793">
                                Primary sort key is count, reversed.                                
                            </comment>
                            <declaration name="e0" type="Map.Entry" line="790"/>
                            <declaration name="e1" type="Map.Entry" line="791"/>
                            <declaration name="r" type="int" line="793"/>
                        </method>
                    </anonymous_class>
                    <scope line="800">
                        <declaration name="e" type="Map.Entry" line="801"/>
                        <declaration name="def" type="Attribute.Layout" line="802"/>
                        <declaration name="count" type="int" line="803"/>
                        <declaration name="index" type="int" line="804"/>
                        <declaration name="predefIndex" type="Integer" line="805"/>
                        <scope line="806"/>
                        <scope line="809">
                            <scope line="810"/>
                        </scope>
                        <scope line="817"/>
                        <declaration name="cbles" type="Attribute.Layout.Element[]" line="826"/>
                        <declaration name="bc" type="int[]" line="827"/>
                        <scope line="828">
                            <scope line="830"/>
                        </scope>
                        <scope line="836">
                            <declaration name="ne" type="Entry" line="838"/>
                            <declaration name="layout" type="String" line="839"/>
                            <declaration name="le" type="Entry" line="840"/>
                            <scope line="843"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="maxFlags" type="int[]" line="862"/>
            <declaration name="allLayouts" type="List&lt;Map&lt;Attribute.Layout,int[]&gt;&gt;" line="863"/>
            <method name="visitAttributeLayoutsIn" type="void" line="865">
                <params>
                    <param name="ctype" type="int"/>
                    <param name="h" type="Attribute.Holder"/>
                </params>
                <comment line="867">
                    Make note of which flags appear in the class file.
                     Set them in maxFlags.                    
                </comment>
                <scope line="869">
                    <declaration name="def" type="Attribute.Layout" line="870"/>
                    <declaration name="defMap" type="Map&lt;Attribute.Layout,int[]&gt;" line="871"/>
                    <declaration name="count" type="int[]" line="872"/>
                    <scope line="873"/>
                    <scope line="876"/>
                </scope>
            </method>
            <declaration name="attrDefsWritten" type="Attribute.Layout[]" line="882"/>
            <method name="writeAttrDefs" type="void" line="885">
                <comment line="891">
                    ctype                    
                </comment>
                <comment line="894">
                    must fit into a byte                    
                </comment>
                <comment line="895">
                    (...else header is simply ctype, with zero high bits.)                    
                </comment>
                <comment line="897">
                    either undefined or predefined; nothing to write                    
                </comment>
                <comment line="906">
                    Sort the new attr defs into some &quot;natural&quot; order.                    
                </comment>
                <comment line="914">
                    Primary sort key is attr def header.                    
                </comment>
                <comment line="919">
                    Secondary sort key is attribute index.
                     (This must be so, in order to keep overflow attr order.)                    
                </comment>
                <comment line="940">
                    Check that we are transmitting that correct attribute index:                    
                </comment>
                <declaration name="defList" type="List&lt;Object[]&gt;" line="886"/>
                <scope line="887">
                    <declaration name="limit" type="int" line="888"/>
                    <scope line="889">
                        <declaration name="header" type="int" line="890"/>
                        <scope line="891">
                            <scope line="895"/>
                        </scope>
                        <declaration name="def" type="Attribute.Layout" line="900"/>
                    </scope>
                </scope>
                <declaration name="numAttrDefs" type="int" line="906"/>
                <declaration name="defs" type="Object[][]" line="907"/>
                <anonymous_class line="909">
                    <method name="compare" type="int" line="910">
                        <params>
                            <param name="o0" type="Object"/>
                            <param name="o1" type="Object"/>
                        </params>
                        <comment line="914">
                            Primary sort key is attr def header.                            
                        </comment>
                        <comment line="919">
                            Secondary sort key is attribute index.
                             (This must be so, in order to keep overflow attr order.)                            
                        </comment>
                        <declaration name="a0" type="Object[]" line="911"/>
                        <declaration name="a1" type="Object[]" line="912"/>
                        <declaration name="r" type="int" line="914"/>
                        <declaration name="ind0" type="Object" line="916"/>
                        <declaration name="ind1" type="Object" line="917"/>
                    </method>
                </anonymous_class>
                <scope line="928">
                    <declaration name="indexForDebug" type="int[]" line="929"/>
                    <scope line="930">
                        <declaration name="header" type="int" line="931"/>
                        <declaration name="def" type="Attribute.Layout" line="932"/>
                        <declaration name="layout" type="String" line="937"/>
                        <declaration name="debug" type="boolean" line="940"/>
                        <scope line="942">
                            <declaration name="hdrIndex" type="int" line="943"/>
                            <declaration name="realIndex" type="int" line="945"/>
                        </scope>
                        <scope line="948">
                            <declaration name="index" type="int" line="949"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="writeAttrCounts" type="void" line="956">
                <comment line="958">
                    Write the four xxx_attr_calls bands.                    
                </comment>
                <comment line="967">
                    unused index                    
                </comment>
                <comment line="969">
                    wrong pass                    
                </comment>
                <comment line="972">
                    irrelevant                    
                </comment>
                <comment line="977">
                    close out; do not collect further counts                    
                </comment>
                <scope line="958">
                    <declaration name="xxx_attr_bands" type="MultiBand" line="959"/>
                    <declaration name="xxx_attr_calls" type="IntBand" line="960"/>
                    <declaration name="defs" type="Attribute.Layout[]" line="961"/>
                    <scope line="963">
                        <scope line="964">
                            <declaration name="def" type="Attribute.Layout" line="965"/>
                            <declaration name="totalCount" type="int" line="969"/>
                            <declaration name="bc" type="int[]" line="972"/>
                            <scope line="973">
                                <scope line="974">
                                    <declaration name="backCount" type="int" line="975"/>
                                </scope>
                                <scope line="979"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="trimClassAttributes" type="void" line="989">
                <comment line="992">
                    Replace &quot;obvious&quot; SourceFile attrs by null.                    
                </comment>
                <scope line="990"/>
            </method>
            <method name="collectInnerClasses" type="void" line="996">
                <comment line="998">
                    Capture inner classes, removing them from individual classes.
                     Irregular inner classes must stay local, though.                    
                </comment>
                <comment line="1001">
                    First, collect a consistent global set.                    
                </comment>
                <comment line="1007">
                    Different ICs.  Choose the better to make global.                    
                </comment>
                <comment line="1015">
                    done with it                    
                </comment>
                <comment line="1017">
                    Note: The InnerClasses attribute must be in a valid order,
                     so that A$B always occurs earlier than A$B$C.  This is an
                     important side-effect of sorting lexically by class name.                    
                </comment>
                <comment line="1020">
                    put in canonical order                    
                </comment>
                <comment line="1023">
                    Next, empty out of every local set the consistent entries.
                     Calculate whether there is any remaining need to have a local
                     set, and whether it needs to be locked.                    
                </comment>
                <declaration name="allICMap" type="Map&lt;ClassEntry,InnerClass&gt;" line="999"/>
                <scope line="1001">
                    <scope line="1003">
                        <declaration name="pic" type="InnerClass" line="1004"/>
                        <scope line="1005"/>
                    </scope>
                </scope>
                <declaration name="allICs" type="InnerClass[]" line="1012"/>
                <scope line="1025"/>
            </method>
            <method name="writeInnerClasses" type="void" line="1030">
                <scope line="1031">
                    <declaration name="flags" type="int" line="1032"/>
                    <scope line="1034"/>
                    <scope line="1039"/>
                </scope>
            </method>
            <javadoc line="1046">
                If there are any extra InnerClasses entries to write which are
                  not already implied by the global table, put them into a
                  local attribute.  This is expected to be rare.                
            </javadoc>
            <method name="writeLocalInnerClasses" type="void" line="1050">
                <params>
                    <param name="cls" type="Class"/>
                </params>
                <comment line="1056">
                    Is it redundant with the global version?                    
                </comment>
                <comment line="1058">
                    A zero flag means copy a global IC here.                    
                </comment>
                <comment line="1063">
                    force it to be non-zero                    
                </comment>
                <declaration name="localICs" type="List&lt;InnerClass&gt;" line="1051"/>
                <scope line="1053">
                    <scope line="1056"/>
                    <scope line="1059">
                        <declaration name="flags" type="int" line="1060"/>
                    </scope>
                </scope>
            </method>
            <method name="writeClassesAndByteCodes" type="void" line="1070">
                <comment line="1074">
                    Note:  This code respects the order in which caller put classes.                    
                </comment>
                <comment line="1080">
                    Collect the class body, sans bytecodes.                    
                </comment>
                <comment line="1088">
                    Encode rare case of null superClass as thisClass:                    
                </comment>
                <comment line="1089">
                    bad class file!?                    
                </comment>
                <declaration name="classes" type="Class[]" line="1071"/>
                <declaration name="nwritten" type="int" line="1077"/>
                <scope line="1078">
                    <declaration name="cls" type="Class" line="1080"/>
                    <declaration name="thisClass" type="ClassEntry" line="1084"/>
                    <declaration name="superClass" type="ClassEntry" line="1085"/>
                    <declaration name="interfaces" type="ClassEntry[]" line="1086"/>
                    <scope line="1093"/>
                </scope>
            </method>
            <method name="writeMembers" type="void" line="1106">
                <params>
                    <param name="cls" type="Class"/>
                </params>
                <declaration name="fields" type="List&lt;Class.Field&gt;" line="1107"/>
                <scope line="1109"/>
                <declaration name="methods" type="List&lt;Class.Method&gt;" line="1114"/>
                <scope line="1116">
                    <scope line="1120"/>
                </scope>
            </method>
            <method name="writeCodeHeader" type="void" line="1127">
                <params>
                    <param name="c" type="Code"/>
                </params>
                <comment line="1133">
                    We must write flags, and can only do so for long headers.                    
                </comment>
                <declaration name="attrsOK" type="boolean" line="1128"/>
                <declaration name="na" type="int" line="1129"/>
                <declaration name="sc" type="int" line="1130"/>
                <scope line="1134">
                    <declaration name="siglen" type="int" line="1135"/>
                </scope>
                <scope line="1139"/>
                <scope line="1143"/>
            </method>
            <method name="writeCodeHandlers" type="void" line="1152">
                <params>
                    <param name="c" type="Code"/>
                </params>
                <comment line="1156">
                    null OK                    
                </comment>
                <comment line="1157">
                    Encode end as offset from start, and catch as offset from end,
                     because they are strongly correlated.                    
                </comment>
                <declaration name="sum" type="int" line="1153"/>
                <scope line="1154"/>
            </method>
            <method name="writeAttrs" type="void" line="1172">
                <params>
                    <param name="ctype" type="int"/>
                    <param name="h" type="Attribute.Holder"/>
                    <param name="cls" type="Class"/>
                </params>
                <comment line="1180">
                    no extra bits to set here                    
                </comment>
                <comment line="1188">
                    which flags are attr bits?                    
                </comment>
                <comment line="1202">
                    do not use this bit twice here                    
                </comment>
                <comment line="1204">
                    an overflow attr.                    
                </comment>
                <comment line="1211">
                    System.out.println(&quot;overflow @&quot;+index);                    
                </comment>
                <comment line="1215">
                    Special logic to write this attr.                    
                </comment>
                <comment line="1219">
                    Empty attr; nothing more to write here.                    
                </comment>
                <comment line="1229">
                    Write one attribute of type def into ab.                    
                </comment>
                <comment line="1250">
                    clean up                    
                </comment>
                <declaration name="xxx_attr_bands" type="MultiBand" line="1173"/>
                <declaration name="xxx_flags_hi" type="IntBand" line="1174"/>
                <declaration name="xxx_flags_lo" type="IntBand" line="1175"/>
                <declaration name="haveLongFlags" type="boolean" line="1176"/>
                <scope line="1178"/>
                <declaration name="flagMask" type="long" line="1187"/>
                <declaration name="flagsToAdd" type="long" line="1188"/>
                <declaration name="overflowCount" type="int" line="1189"/>
                <scope line="1190">
                    <declaration name="def" type="Attribute.Layout" line="1191"/>
                    <declaration name="index" type="int" line="1192"/>
                    <scope line="1196"/>
                    <scope line="1202">
                        <declaration name="xxx_attr_indexes" type="IntBand" line="1208"/>
                    </scope>
                    <scope line="1212">
                        <scope line="1213"/>
                    </scope>
                    <declaration name="ab" type="Band[]" line="1222"/>
                    <declaration name="bc" type="int[]" line="1225"/>
                    <declaration name="isCV" type="boolean" line="1230"/>
                    <anonymous_class line="1233">
                        <method name="putInt" type="void" line="1234">
                            <params>
                                <param name="bandIndex" type="int"/>
                                <param name="value" type="int"/>
                            </params>
                        </method>
                        <method name="putRef" type="void" line="1237">
                            <params>
                                <param name="bandIndex" type="int"/>
                                <param name="ref" type="Entry"/>
                            </params>
                        </method>
                        <method name="encodeBCI" type="int" line="1240">
                            <params>
                                <param name="bci" type="int"/>
                            </params>
                            <declaration name="code" type="Code" line="1241"/>
                        </method>
                        <method name="noteBackCall" type="void" line="1244">
                            <params>
                                <param name="whichCallable" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="1252">
                    <declaration name="xxx_attr_count" type="IntBand" line="1253"/>
                </scope>
            </method>
            <declaration name="curCode" type="Code" line="1269"/>
            <declaration name="curClass" type="Class" line="1270"/>
            <declaration name="curCPMap" type="Entry[]" line="1271"/>
            <method name="beginCode" type="void" line="1272">
                <params>
                    <param name="c" type="Code"/>
                </params>
            </method>
            <method name="endCode" type="void" line="1278"/>
            <method name="initOpVariant" type="int" line="1286">
                <params>
                    <param name="i" type="Instruction"/>
                    <param name="newClass" type="Entry"/>
                </params>
                <declaration name="ref" type="MemberEntry" line="1288"/>
                <declaration name="refClass" type="ClassEntry" line="1291"/>
            </method>
            <method name="selfOpVariant" type="int" line="1303">
                <params>
                    <param name="i" type="Instruction"/>
                </params>
                <declaration name="bc" type="int" line="1304"/>
                <declaration name="ref" type="MemberEntry" line="1306"/>
                <declaration name="refClass" type="ClassEntry" line="1307"/>
                <declaration name="self_bc" type="int" line="1308"/>
            </method>
            <method name="writeByteCodes" type="void" line="1316">
                <params>
                    <param name="code" type="Code"/>
                </params>
                <comment line="1321">
                    true if the previous instruction is an aload to absorb                    
                </comment>
                <comment line="1324">
                    class of most recent new; helps compress &lt;init&gt; calls                    
                </comment>
                <comment line="1328">
                    %%% Add a stress mode which issues _ref/_byte_escape.                    
                </comment>
                <comment line="1334">
                    Crash and burn with a complaint if there are funny
                     bytecodes in this class file.                    
                </comment>
                <comment line="1354">
                    Begin &quot;bc_linker&quot; compression.                    
                </comment>
                <comment line="1356">
                    Try to group aload_0 with a following operation.                    
                </comment>
                <comment line="1364">
                    Test for &lt;init&gt; invocations:                    
                </comment>
                <comment line="1368">
                    get rid of it                    
                </comment>
                <comment line="1371">
                    used up                    
                </comment>
                <comment line="1373">
                    Write special bytecode.                    
                </comment>
                <comment line="1377">
                    Write operand to a separate band.                    
                </comment>
                <comment line="1388">
                    used up                    
                </comment>
                <comment line="1391">
                    Write special bytecode.                    
                </comment>
                <comment line="1394">
                    Write field or method ref to a separate band.                    
                </comment>
                <comment line="1402">
                    End &quot;bc_linker&quot; compression.                    
                </comment>
                <comment line="1404">
                    Normal bytecode.                    
                </comment>
                <comment line="1407">
                    apc:  (df, lo, hi, (hi-lo+1)*(label))                    
                </comment>
                <comment line="1408">
                    apc:  (df, nc, nc*(case, label))                    
                </comment>
                <comment line="1411">
                    Note that we do not write the alignment bytes.                    
                </comment>
                <comment line="1414">
                    write a length specification into the bytecode stream                    
                </comment>
                <comment line="1421">
                    Transmit case values in their own band.                    
                </comment>
                <comment line="1429">
                    Done with the switch.                    
                </comment>
                <comment line="1434">
                    %%% pretend this is invokedynamic                    
                </comment>
                <comment line="1439">
                    transmit the opcode, carefully:                    
                </comment>
                <comment line="1441">
                    one byte of opcode                    
                </comment>
                <comment line="1442">
                    the opcode                    
                </comment>
                <comment line="1443">
                    transmit the CP reference, carefully:                    
                </comment>
                <comment line="1445">
                    two bytes of ref                    
                </comment>
                <comment line="1446">
                    the ref                    
                </comment>
                <comment line="1514">
                    Use a special shorthand for the current class:                    
                </comment>
                <comment line="1529">
                    handle trailing junk                    
                </comment>
                <comment line="1532">
                    Just dump the byte into the bipush pile                    
                </comment>
                <comment line="1536">
                    Make sure the discarded bytes are sane:                    
                </comment>
                <comment line="1539">
                    Make sure there is nothing else to write.                    
                </comment>
                <comment line="1560">
                    Generic instruction.  Copy the body.                    
                </comment>
                <comment line="1565">
                    Do a few remaining multi-byte instructions.                    
                </comment>
                <comment line="1577">
                    that&apos;s it                    
                </comment>
                <declaration name="cp" type="IndexGroup" line="1318"/>
                <declaration name="prevAload" type="boolean" line="1321"/>
                <declaration name="newClass" type="Entry" line="1324"/>
                <scope line="1326">
                    <scope line="1332">
                        <declaration name="complaint" type="String" line="1335"/>
                    </scope>
                    <scope line="1342">
                        <scope line="1343"/>
                    </scope>
                    <declaration name="bc" type="int" line="1351"/>
                    <scope line="1354">
                        <declaration name="ni" type="Instruction" line="1356"/>
                        <scope line="1357"/>
                    </scope>
                    <declaration name="init_bc" type="int" line="1364"/>
                    <scope line="1365">
                        <scope line="1366"/>
                        <declaration name="ref" type="MemberEntry" line="1375"/>
                        <declaration name="coding" type="int" line="1377"/>
                    </scope>
                    <declaration name="self_bc" type="int" line="1382"/>
                    <scope line="1383">
                        <declaration name="isField" type="boolean" line="1384"/>
                        <declaration name="isSuper" type="boolean" line="1385"/>
                        <declaration name="isAload" type="boolean" line="1386"/>
                        <declaration name="ref" type="MemberEntry" line="1394"/>
                        <declaration name="bc_which" type="CPRefBand" line="1395"/>
                        <declaration name="which_ix" type="Index" line="1396"/>
                    </scope>
                    <declaration name="isw" type="Instruction.Switch" line="1409"/>
                    <declaration name="apc" type="int" line="1411"/>
                    <declaration name="npc" type="int" line="1412"/>
                    <declaration name="caseCount" type="int" line="1414"/>
                    <scope line="1417"/>
                    <scope line="1421"/>
                    <scope line="1423">
                        <scope line="1424"/>
                    </scope>
                    <scope line="1434">
                        <declaration name="refx" type="int" line="1436"/>
                        <declaration name="ref" type="Entry" line="1437"/>
                    </scope>
                    <declaration name="branch" type="int" line="1450"/>
                    <scope line="1451"/>
                    <declaration name="ref" type="Entry" line="1456"/>
                    <scope line="1457">
                        <declaration name="bc_which" type="CPRefBand" line="1460"/>
                        <declaration name="vbc" type="int" line="1461"/>
                        <scope line="1529"/>
                        <scope line="1533"/>
                        <scope line="1537"/>
                    </scope>
                    <declaration name="slot" type="int" line="1543"/>
                    <scope line="1544">
                        <declaration name="con" type="int" line="1547"/>
                        <scope line="1548">
                            <scope line="1549"/>
                            <scope line="1551"/>
                        </scope>
                        <scope line="1554"/>
                    </scope>
                    <declaration name="pc" type="int" line="1561"/>
                    <declaration name="npc" type="int" line="1562"/>
                    <scope line="1563"/>
                </scope>
            </method>
            <declaration name="codeHist" type="int[]" line="1586"/>
            <declaration name="ldcHist" type="int[]" line="1587"/>
            <method name="printCodeHist" type="void" line="1588">
                <declaration name="hist" type="String[]" line="1590"/>
                <declaration name="totalBytes" type="int" line="1591"/>
                <scope line="1592"/>
                <scope line="1595">
                    <scope line="1596"/>
                    <declaration name="iname" type="String" line="1597"/>
                    <declaration name="count" type="String" line="1598"/>
                    <declaration name="pct" type="String" line="1600"/>
                    <scope line="1601"/>
                </scope>
                <scope line="1609"/>
                <scope line="1613">
                    <declaration name="count" type="int" line="1614"/>
                </scope>
            </method>
        </class>
    </source>