<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="java.io.IOException"/>
        <import package="java.util.Arrays"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="Instruction" line="32">
            <comment line="39">
                bytecodes                
            </comment>
            <comment line="40">
                location of this instruction                
            </comment>
            <comment line="41">
                opcode of this instruction                
            </comment>
            <comment line="42">
                0 if normal, 1 if a _wide prefix at pc                
            </comment>
            <comment line="43">
                bytes in this instruction                
            </comment>
            <comment line="142">
                Return the constant pool reference type, or 0 if none.                
            </comment>
            <comment line="147">
                Return the constant pool index, or -1 if none.                
            </comment>
            <comment line="173">
                Return the slot of the affected local, or -1 if none.                
            </comment>
            <comment line="183">
                Return the target of the branch, or -1 if none.                
            </comment>
            <comment line="209">
                Return the trailing constant in the instruction (as a signed value).                
            </comment>
            <comment line="210">
                Return 0 if there is none.                
            </comment>
            <comment line="383">
                public static byte constantPoolTagFor(int bc) { return BC_TAG[0][bc]; }                
            </comment>
            <comment line="385">
                / Fetching values from byte arrays:                
            </comment>
            <comment line="421">
                some bytecode classifiers                
            </comment>
            <comment line="471">
                / Format definitions.                
            </comment>
            <comment line="479">
                debug only                
            </comment>
            <comment line="480">
                debug only                
            </comment>
            <comment line="600">
                width of classification field                
            </comment>
            <javadoc line="32">
                A parsed bytecode instruction.
                  Provides accessors to various relevant bits.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="bytes" type="byte[]" line="38"/>
            <declaration name="pc" type="int" line="39"/>
            <declaration name="bc" type="int" line="40"/>
            <declaration name="w" type="int" line="41"/>
            <declaration name="length" type="int" line="42"/>
            <declaration name="special" type="boolean" line="44"/>
            <method name="Instruction" type="constructor" line="46">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                    <param name="bc" type="int"/>
                    <param name="w" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="reset" type="void" line="49">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                    <param name="bc" type="int"/>
                    <param name="w" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="getBC" type="int" line="57"/>
            <method name="isWide" type="boolean" line="60"/>
            <method name="getBytes" type="byte[]" line="63"/>
            <method name="getPC" type="int" line="66"/>
            <method name="getLength" type="int" line="69"/>
            <method name="getNextPC" type="int" line="72"/>
            <method name="next" type="Instruction" line="76">
                <declaration name="npc" type="int" line="77"/>
            </method>
            <method name="isNonstandard" type="boolean" line="84"/>
            <method name="setNonstandardLength" type="void" line="88">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="94">
                A fake instruction at this pc whose next() will be at nextpc.                
            </javadoc>
            <method name="forceNextPC" type="Instruction" line="95">
                <params>
                    <param name="nextpc" type="int"/>
                </params>
                <declaration name="llength" type="int" line="96"/>
            </method>
            <method name="at" type="Instruction" line="100">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="at" type="Instruction" line="104">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                    <param name="reuse" type="Instruction"/>
                </params>
                <comment line="110">
                    Hard cases:                    
                </comment>
                <comment line="117">
                    unknown instruction; treat as one byte                    
                </comment>
                <comment line="126">
                    unknown instruction; treat as one byte                    
                </comment>
                <comment line="133">
                    Speed hack:  Instruction.next reuses self if possible.                    
                </comment>
                <declaration name="bc" type="int" line="105"/>
                <declaration name="prefix" type="int" line="106"/>
                <declaration name="w" type="int" line="107"/>
                <declaration name="length" type="int" line="108"/>
                <scope line="109">
                    <scope line="116"/>
                </scope>
                <scope line="134"/>
            </method>
            <method name="getCPTag" type="byte" line="142"/>
            <method name="getCPIndex" type="int" line="147">
                <comment line="152">
                    _ldc opcode only                    
                </comment>
                <declaration name="indexLoc" type="int" line="148"/>
            </method>
            <method name="setCPIndex" type="void" line="157">
                <params>
                    <param name="cpi" type="int"/>
                </params>
                <comment line="161">
                    _ldc opcode only                    
                </comment>
                <declaration name="indexLoc" type="int" line="158"/>
            </method>
            <method name="getCPRef" type="ConstantPool.Entry" line="167">
                <params>
                    <param name="cpMap" type="ConstantPool.Entry[]"/>
                </params>
                <declaration name="index" type="int" line="168"/>
            </method>
            <method name="getLocalSlot" type="int" line="173">
                <declaration name="slotLoc" type="int" line="174"/>
            </method>
            <method name="getBranchLabel" type="int" line="183">
                <declaration name="branchLoc" type="int" line="184"/>
                <declaration name="offset" type="int" line="188"/>
            </method>
            <method name="setBranchLabel" type="void" line="198">
                <params>
                    <param name="targetPC" type="int"/>
                </params>
                <declaration name="branchLoc" type="int" line="199"/>
            </method>
            <method name="getConstant" type="int" line="210">
                <declaration name="conLoc" type="int" line="211"/>
            </method>
            <method name="setConstant" type="void" line="221">
                <params>
                    <param name="con" type="int"/>
                </params>
                <declaration name="conLoc" type="int" line="222"/>
            </method>
            <class name="Switch" line="231">
                <extends class="Instruction"/>
                <comment line="233">
                    Each case is a (value, label) pair, indexed 0 &lt;= n &lt; caseCount                    
                </comment>
                <comment line="245">
                    aligned pc (table base)                    
                </comment>
                <comment line="271">
                    apc:  (df, lo, hi, (hi-lo+1)*(label))                    
                </comment>
                <comment line="301">
                    apc:  (df, nc, nc*(case, label))                    
                </comment>
                <method name="getCaseCount" type="int" line="233"/>
                <method name="getCaseValue" type="int" line="234"/>
                <method name="getCaseLabel" type="int" line="235"/>
                <method name="setCaseCount" type="void" line="236"/>
                <method name="setCaseValue" type="void" line="237"/>
                <method name="setCaseLabel" type="void" line="238"/>
                <method name="getLength" type="int" line="239"/>
                <method name="getDefaultLabel" type="int" line="241"/>
                <method name="setDefaultLabel" type="void" line="242">
                    <params>
                        <param name="targetPC" type="int"/>
                    </params>
                </method>
                <declaration name="apc" type="int" line="244"/>
                <method name="intAt" type="int" line="245">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="setIntAt" type="void" line="246">
                    <params>
                        <param name="n" type="int"/>
                        <param name="x" type="int"/>
                    </params>
                </method>
                <method name="Switch" type="constructor" line="247">
                    <params>
                        <param name="bytes" type="byte[]"/>
                        <param name="pc" type="int"/>
                        <param name="bc" type="int"/>
                    </params>
                    <comment line="248">
                                                
                    </comment>
                    <comment line="248">
                                                
                    </comment>
                </method>
                <method name="getAlignedPC" type="int" line="253"/>
                <method name="toString" type="String" line="254">
                    <declaration name="s" type="String" line="255"/>
                    <declaration name="caseCount" type="int" line="257"/>
                    <scope line="258"/>
                </method>
                <method name="alignPC" type="int" line="263">
                    <params>
                        <param name="apc" type="int"/>
                    </params>
                </method>
            </class>
            <class name="TableSwitch" line="269">
                <extends class="Switch"/>
                <comment line="233">
                    Each case is a (value, label) pair, indexed 0 &lt;= n &lt; caseCount                    
                </comment>
                <comment line="245">
                    aligned pc (table base)                    
                </comment>
                <comment line="271">
                    apc:  (df, lo, hi, (hi-lo+1)*(label))                    
                </comment>
                <comment line="301">
                    apc:  (df, nc, nc*(case, label))                    
                </comment>
                <method name="getLowCase" type="int" line="271"/>
                <method name="getHighCase" type="int" line="272"/>
                <method name="getCaseCount" type="int" line="273"/>
                <method name="getCaseValue" type="int" line="274">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="getCaseLabel" type="int" line="275">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="setLowCase" type="void" line="277">
                    <params>
                        <param name="val" type="int"/>
                    </params>
                </method>
                <method name="setHighCase" type="void" line="278">
                    <params>
                        <param name="val" type="int"/>
                    </params>
                </method>
                <method name="setCaseLabel" type="void" line="279">
                    <params>
                        <param name="n" type="int"/>
                        <param name="tpc" type="int"/>
                    </params>
                </method>
                <method name="setCaseCount" type="void" line="280">
                    <params>
                        <param name="caseCount" type="int"/>
                    </params>
                </method>
                <method name="setCaseValue" type="void" line="284">
                    <params>
                        <param name="n" type="int"/>
                        <param name="val" type="int"/>
                    </params>
                    <comment line="288">
                        keep invariant                        
                    </comment>
                    <declaration name="caseCount" type="int" line="286"/>
                </method>
                <method name="TableSwitch" type="constructor" line="291">
                    <params>
                        <param name="bytes" type="byte[]"/>
                        <param name="pc" type="int"/>
                    </params>
                </method>
                <method name="getLength" type="int" line="294">
                    <params>
                        <param name="caseCount" type="int"/>
                    </params>
                </method>
            </class>
            <class name="LookupSwitch" line="299">
                <extends class="Switch"/>
                <comment line="233">
                    Each case is a (value, label) pair, indexed 0 &lt;= n &lt; caseCount                    
                </comment>
                <comment line="245">
                    aligned pc (table base)                    
                </comment>
                <comment line="271">
                    apc:  (df, lo, hi, (hi-lo+1)*(label))                    
                </comment>
                <comment line="301">
                    apc:  (df, nc, nc*(case, label))                    
                </comment>
                <method name="getCaseCount" type="int" line="301"/>
                <method name="getCaseValue" type="int" line="302">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="getCaseLabel" type="int" line="303">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="setCaseCount" type="void" line="305">
                    <params>
                        <param name="caseCount" type="int"/>
                    </params>
                </method>
                <method name="setCaseValue" type="void" line="309">
                    <params>
                        <param name="n" type="int"/>
                        <param name="val" type="int"/>
                    </params>
                </method>
                <method name="setCaseLabel" type="void" line="310">
                    <params>
                        <param name="n" type="int"/>
                        <param name="tpc" type="int"/>
                    </params>
                </method>
                <method name="LookupSwitch" type="constructor" line="312">
                    <params>
                        <param name="bytes" type="byte[]"/>
                        <param name="pc" type="int"/>
                    </params>
                </method>
                <method name="getLength" type="int" line="315">
                    <params>
                        <param name="caseCount" type="int"/>
                    </params>
                </method>
            </class>
            <javadoc line="320">
                Two instructions are equal if they have the same bytes.                
            </javadoc>
            <method name="equals" type="boolean" line="321">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="326">
                <declaration name="hash" type="int" line="327"/>
            </method>
            <method name="equals" type="boolean" line="336">
                <params>
                    <param name="that" type="Instruction"/>
                </params>
                <scope line="341"/>
            </method>
            <method name="labstr" type="String" line="348">
                <params>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="toString" type="String" line="353"/>
            <method name="toString" type="String" line="356">
                <params>
                    <param name="cpMap" type="ConstantPool.Entry[]"/>
                </params>
                <declaration name="s" type="String" line="357"/>
                <scope line="358"/>
                <declaration name="bcname" type="String" line="363"/>
                <scope line="364"/>
                <declaration name="tag" type="int" line="368"/>
                <declaration name="idx" type="int" line="370"/>
                <declaration name="slt" type="int" line="372"/>
                <declaration name="lab" type="int" line="374"/>
                <declaration name="con" type="int" line="376"/>
            </method>
            <method name="getIntAt" type="int" line="386">
                <params>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="getShortAt" type="int" line="389">
                <params>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="getByteAt" type="int" line="392">
                <params>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="getInt" type="int" line="397">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="getShort" type="int" line="400">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="getByte" type="int" line="403">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="setInt" type="void" line="408">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="setShort" type="void" line="412">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="setByte" type="void" line="416">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="isNonstandard" type="boolean" line="423">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="opLength" type="int" line="427">
                <params>
                    <param name="bc" type="int"/>
                </params>
                <declaration name="l" type="int" line="428"/>
            </method>
            <method name="opWideLength" type="int" line="432">
                <params>
                    <param name="bc" type="int"/>
                </params>
                <declaration name="l" type="int" line="433"/>
            </method>
            <method name="isLocalSlotOp" type="boolean" line="438">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="isBranchOp" type="boolean" line="442">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="isCPRefOp" type="boolean" line="446">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="getCPRefOpTag" type="byte" line="452">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="isFieldOp" type="boolean" line="458">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="isInvokeInitOp" type="boolean" line="462">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="isSelfLinkerOp" type="boolean" line="466">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <declaration name="BC_LENGTH" type="byte[][]" line="472"/>
            <declaration name="BC_INDEX" type="byte[][]" line="473"/>
            <declaration name="BC_TAG" type="byte[][]" line="474"/>
            <declaration name="BC_BRANCH" type="byte[][]" line="475"/>
            <declaration name="BC_SLOT" type="byte[][]" line="476"/>
            <declaration name="BC_CON" type="byte[][]" line="477"/>
            <declaration name="BC_NAME" type="String[]" line="478"/>
            <declaration name="BC_FORMAT" type="String[][]" line="479"/>
            <scope line="480">
                <scope line="481"/>
                <scope line="514">
                    <scope line="517"/>
                </scope>
                <declaration name="names" type="String" line="527"/>
                <scope line="549">
                    <declaration name="sp" type="int" line="550"/>
                </scope>
            </scope>
            <method name="byteName" type="String" line="555">
                <params>
                    <param name="bc" type="int"/>
                </params>
                <declaration name="iname" type="String" line="556"/>
                <scope line="557"/>
                <scope line="559">
                    <declaration name="idx" type="int" line="560"/>
                    <declaration name="isSuper" type="boolean" line="561"/>
                    <declaration name="isAload" type="boolean" line="563"/>
                    <declaration name="origBC" type="int" line="565"/>
                </scope>
                <scope line="571">
                    <declaration name="idx" type="int" line="572"/>
                </scope>
                <scope line="582"/>
            </method>
            <declaration name="BW" type="int" line="599"/>
            <method name="def" type="void" line="600">
                <params>
                    <param name="fmt" type="String"/>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="def" type="void" line="603">
                <params>
                    <param name="fmt" type="String"/>
                    <param name="from_bc" type="int"/>
                    <param name="to_bc" type="int"/>
                </params>
                <comment line="629">
                    _ldc opcode only                    
                </comment>
                <comment line="640">
                    not both branch &amp; local                    
                </comment>
                <comment line="641">
                    not both branch &amp; cp                    
                </comment>
                <comment line="642">
                    not both local &amp; cp                    
                </comment>
                <declaration name="fmts" type="String[]" line="604"/>
                <scope line="605"/>
                <scope line="609">
                    <declaration name="length" type="int" line="612"/>
                    <declaration name="index" type="int" line="613"/>
                    <declaration name="tag" type="int" line="614"/>
                    <declaration name="branch" type="int" line="615"/>
                    <declaration name="slot" type="int" line="616"/>
                    <declaration name="con" type="int" line="617"/>
                    <scope line="618"/>
                    <scope line="627"/>
                    <scope line="631"/>
                </scope>
            </method>
            <method name="opcodeChecker" type="void" line="648">
                <params>
                    <param name="code" type="byte[]"/>
                </params>
                <declaration name="i" type="Instruction" line="649"/>
                <scope line="650">
                    <declaration name="opcode" type="int" line="651"/>
                    <scope line="652">
                        <declaration name="message" type="String" line="653"/>
                    </scope>
                </scope>
            </method>
            <class name="FormatException" line="659">
                <extends class="IOException"/>
                <comment line="233">
                    Each case is a (value, label) pair, indexed 0 &lt;= n &lt; caseCount                    
                </comment>
                <comment line="245">
                    aligned pc (table base)                    
                </comment>
                <comment line="271">
                    apc:  (df, lo, hi, (hi-lo+1)*(label))                    
                </comment>
                <comment line="301">
                    apc:  (df, nc, nc*(case, label))                    
                </comment>
                <method name="FormatException" type="constructor" line="660">
                    <params>
                        <param name="message" type="String"/>
                    </params>
                </method>
            </class>
        </class>
    </source>