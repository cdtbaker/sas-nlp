<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="java.io.IOException"/>
        <import package="java.util.Arrays"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="Instruction" line="5">
            <javadoc line="5">
                A parsed bytecode instruction.
                  Provides accessors to various relevant bits.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <declaration name="bytes" type="byte[]" line="11"/>
            <declaration name="pc" type="int" line="12"/>
            <declaration name="bc" type="int" line="13"/>
            <declaration name="w" type="int" line="14"/>
            <declaration name="length" type="int" line="15"/>
            <declaration name="special" type="boolean" line="16"/>
            <method name="Instruction" type="constructor" line="17">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                    <param name="bc" type="int"/>
                    <param name="w" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="reset" type="void" line="20">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                    <param name="bc" type="int"/>
                    <param name="w" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <method name="getBC" type="int" line="27"/>
            <method name="isWide" type="boolean" line="30"/>
            <method name="getBytes" type="byte[]" line="33"/>
            <method name="getPC" type="int" line="36"/>
            <method name="getLength" type="int" line="39"/>
            <method name="getNextPC" type="int" line="42"/>
            <method name="next" type="Instruction" line="45">
                <declaration name="npc" type="int" line="46"/>
            </method>
            <method name="isNonstandard" type="boolean" line="50"/>
            <method name="setNonstandardLength" type="void" line="53">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="57">
                A fake instruction at this pc whose next() will be at nextpc.                
            </javadoc>
            <method name="forceNextPC" type="Instruction" line="60">
                <params>
                    <param name="nextpc" type="int"/>
                </params>
                <declaration name="llength" type="int" line="61"/>
            </method>
            <method name="at" type="Instruction" line="64">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="at" type="Instruction" line="67">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                    <param name="reuse" type="Instruction"/>
                </params>
                <declaration name="bc" type="int" line="68"/>
                <declaration name="prefix" type="int" line="69"/>
                <declaration name="w" type="int" line="70"/>
                <declaration name="length" type="int" line="71"/>
                <scope line="72">
                    <scope line="78"/>
                </scope>
                <scope line="93"/>
            </method>
            <method name="getCPTag" type="byte" line="99"/>
            <method name="getCPIndex" type="int" line="102">
                <declaration name="indexLoc" type="int" line="103"/>
            </method>
            <method name="setCPIndex" type="void" line="109">
                <params>
                    <param name="cpi" type="int"/>
                </params>
                <declaration name="indexLoc" type="int" line="110"/>
            </method>
            <method name="getCPRef" type="ConstantPool.Entry" line="116">
                <params>
                    <param name="cpMap" type="ConstantPool.Entry[]"/>
                </params>
                <declaration name="index" type="int" line="117"/>
            </method>
            <method name="getLocalSlot" type="int" line="120">
                <declaration name="slotLoc" type="int" line="121"/>
            </method>
            <method name="getBranchLabel" type="int" line="126">
                <declaration name="branchLoc" type="int" line="127"/>
                <declaration name="offset" type="int" line="131"/>
            </method>
            <method name="setBranchLabel" type="void" line="138">
                <params>
                    <param name="targetPC" type="int"/>
                </params>
                <declaration name="branchLoc" type="int" line="139"/>
            </method>
            <method name="getConstant" type="int" line="145">
                <declaration name="conLoc" type="int" line="146"/>
            </method>
            <method name="setConstant" type="void" line="157">
                <params>
                    <param name="con" type="int"/>
                </params>
                <declaration name="conLoc" type="int" line="158"/>
            </method>
            <class name="Switch" line="170">
                <extends class="Instruction"/>
                <method name="getCaseCount" type="int" line="171"/>
                <method name="getCaseValue" type="int" line="172"/>
                <method name="getCaseLabel" type="int" line="173"/>
                <method name="setCaseCount" type="void" line="174"/>
                <method name="setCaseValue" type="void" line="175"/>
                <method name="setCaseLabel" type="void" line="176"/>
                <method name="getLength" type="int" line="177"/>
                <method name="getDefaultLabel" type="int" line="178"/>
                <method name="setDefaultLabel" type="void" line="181">
                    <params>
                        <param name="targetPC" type="int"/>
                    </params>
                </method>
                <declaration name="apc" type="int" line="184"/>
                <method name="intAt" type="int" line="185">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="setIntAt" type="void" line="188">
                    <params>
                        <param name="n" type="int"/>
                        <param name="x" type="int"/>
                    </params>
                </method>
                <method name="Switch" type="constructor" line="191">
                    <params>
                        <param name="bytes" type="byte[]"/>
                        <param name="pc" type="int"/>
                        <param name="bc" type="int"/>
                    </params>
                </method>
                <method name="getAlignedPC" type="int" line="197"/>
                <method name="toString" type="String" line="200">
                    <declaration name="s" type="String" line="201"/>
                    <declaration name="caseCount" type="int" line="203"/>
                    <scope line="204"/>
                </method>
                <method name="alignPC" type="int" line="209">
                    <params>
                        <param name="apc" type="int"/>
                    </params>
                </method>
            </class>
            <class name="TableSwitch" line="214">
                <extends class="Switch"/>
                <method name="getLowCase" type="int" line="215"/>
                <method name="getHighCase" type="int" line="218"/>
                <method name="getCaseCount" type="int" line="221"/>
                <method name="getCaseValue" type="int" line="224">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="getCaseLabel" type="int" line="227">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="setLowCase" type="void" line="230">
                    <params>
                        <param name="val" type="int"/>
                    </params>
                </method>
                <method name="setHighCase" type="void" line="233">
                    <params>
                        <param name="val" type="int"/>
                    </params>
                </method>
                <method name="setCaseLabel" type="void" line="236">
                    <params>
                        <param name="n" type="int"/>
                        <param name="tpc" type="int"/>
                    </params>
                </method>
                <method name="setCaseCount" type="void" line="239">
                    <params>
                        <param name="caseCount" type="int"/>
                    </params>
                </method>
                <method name="setCaseValue" type="void" line="243">
                    <params>
                        <param name="n" type="int"/>
                        <param name="val" type="int"/>
                    </params>
                    <declaration name="caseCount" type="int" line="245"/>
                </method>
                <method name="TableSwitch" type="constructor" line="249">
                    <params>
                        <param name="bytes" type="byte[]"/>
                        <param name="pc" type="int"/>
                    </params>
                </method>
                <method name="getLength" type="int" line="252">
                    <params>
                        <param name="caseCount" type="int"/>
                    </params>
                </method>
            </class>
            <class name="LookupSwitch" line="256">
                <extends class="Switch"/>
                <method name="getCaseCount" type="int" line="257"/>
                <method name="getCaseValue" type="int" line="260">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="getCaseLabel" type="int" line="263">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="setCaseCount" type="void" line="266">
                    <params>
                        <param name="caseCount" type="int"/>
                    </params>
                </method>
                <method name="setCaseValue" type="void" line="270">
                    <params>
                        <param name="n" type="int"/>
                        <param name="val" type="int"/>
                    </params>
                </method>
                <method name="setCaseLabel" type="void" line="273">
                    <params>
                        <param name="n" type="int"/>
                        <param name="tpc" type="int"/>
                    </params>
                </method>
                <method name="LookupSwitch" type="constructor" line="276">
                    <params>
                        <param name="bytes" type="byte[]"/>
                        <param name="pc" type="int"/>
                    </params>
                </method>
                <method name="getLength" type="int" line="279">
                    <params>
                        <param name="caseCount" type="int"/>
                    </params>
                </method>
            </class>
            <javadoc line="283">
                Two instructions are equal if they have the same bytes.                
            </javadoc>
            <method name="equals" type="boolean" line="286">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="hashCode" type="int" line="289">
                <declaration name="hash" type="int" line="290"/>
            </method>
            <method name="equals" type="boolean" line="298">
                <params>
                    <param name="that" type="Instruction"/>
                </params>
                <scope line="303"/>
            </method>
            <method name="labstr" type="String" line="308">
                <params>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="toString" type="String" line="312"/>
            <method name="toString" type="String" line="315">
                <params>
                    <param name="cpMap" type="ConstantPool.Entry[]"/>
                </params>
                <declaration name="s" type="String" line="316"/>
                <scope line="317"/>
                <declaration name="bcname" type="String" line="322"/>
                <scope line="323"/>
                <declaration name="tag" type="int" line="327"/>
                <declaration name="idx" type="int" line="329"/>
                <declaration name="slt" type="int" line="331"/>
                <declaration name="lab" type="int" line="333"/>
                <declaration name="con" type="int" line="335"/>
            </method>
            <method name="getIntAt" type="int" line="339">
                <params>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="getShortAt" type="int" line="342">
                <params>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="getByteAt" type="int" line="345">
                <params>
                    <param name="off" type="int"/>
                </params>
            </method>
            <method name="getInt" type="int" line="348">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="getShort" type="int" line="351">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="getByte" type="int" line="354">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                </params>
            </method>
            <method name="setInt" type="void" line="357">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="setShort" type="void" line="361">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="setByte" type="void" line="365">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="pc" type="int"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <method name="isNonstandard" type="boolean" line="368">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="opLength" type="int" line="371">
                <params>
                    <param name="bc" type="int"/>
                </params>
                <declaration name="l" type="int" line="372"/>
            </method>
            <method name="opWideLength" type="int" line="376">
                <params>
                    <param name="bc" type="int"/>
                </params>
                <declaration name="l" type="int" line="377"/>
            </method>
            <method name="isLocalSlotOp" type="boolean" line="381">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="isBranchOp" type="boolean" line="384">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="isCPRefOp" type="boolean" line="387">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="getCPRefOpTag" type="byte" line="392">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="isFieldOp" type="boolean" line="397">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="isInvokeInitOp" type="boolean" line="400">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="isSelfLinkerOp" type="boolean" line="403">
                <params>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <declaration name="BC_LENGTH" type="byte[][]" line="406"/>
            <declaration name="BC_INDEX" type="byte[][]" line="407"/>
            <declaration name="BC_TAG" type="byte[][]" line="408"/>
            <declaration name="BC_BRANCH" type="byte[][]" line="409"/>
            <declaration name="BC_SLOT" type="byte[][]" line="410"/>
            <declaration name="BC_CON" type="byte[][]" line="411"/>
            <declaration name="BC_NAME" type="String[]" line="412"/>
            <declaration name="BC_FORMAT" type="String[][]" line="413"/>
            <scope line="414">
                <scope line="415"/>
                <scope line="448">
                    <scope line="449"/>
                </scope>
                <declaration name="names" type="String" line="455"/>
                <scope line="456">
                    <declaration name="sp" type="int" line="457"/>
                </scope>
            </scope>
            <method name="byteName" type="String" line="462">
                <params>
                    <param name="bc" type="int"/>
                </params>
                <declaration name="iname" type="String" line="463"/>
                <scope line="464"/>
                <scope line="467">
                    <declaration name="idx" type="int" line="468"/>
                    <declaration name="isSuper" type="boolean" line="469"/>
                    <declaration name="isAload" type="boolean" line="471"/>
                    <declaration name="origBC" type="int" line="473"/>
                </scope>
                <scope line="480">
                    <declaration name="idx" type="int" line="481"/>
                </scope>
                <scope line="495"/>
            </method>
            <declaration name="BW" type="int" line="534"/>
            <method name="def" type="void" line="535">
                <params>
                    <param name="fmt" type="String"/>
                    <param name="bc" type="int"/>
                </params>
            </method>
            <method name="def" type="void" line="538">
                <params>
                    <param name="fmt" type="String"/>
                    <param name="from_bc" type="int"/>
                    <param name="to_bc" type="int"/>
                </params>
                <declaration name="fmts" type="String[]" line="539"/>
                <scope line="540"/>
                <scope line="544">
                    <declaration name="length" type="int" line="547"/>
                    <declaration name="index" type="int" line="548"/>
                    <declaration name="tag" type="int" line="549"/>
                    <declaration name="branch" type="int" line="550"/>
                    <declaration name="slot" type="int" line="551"/>
                    <declaration name="con" type="int" line="552"/>
                    <scope line="553"/>
                    <scope line="573"/>
                    <scope line="577"/>
                </scope>
            </method>
            <method name="opcodeChecker" type="void" line="593">
                <params>
                    <param name="code" type="byte[]"/>
                </params>
                <declaration name="i" type="Instruction" line="594"/>
                <scope line="595">
                    <declaration name="opcode" type="int" line="596"/>
                    <scope line="597">
                        <declaration name="message" type="String" line="598"/>
                    </scope>
                </scope>
            </method>
            <class name="FormatException" line="604">
                <extends class="IOException"/>
                <method name="FormatException" type="constructor" line="605">
                    <params>
                        <param name="message" type="String"/>
                    </params>
                </method>
            </class>
        </class>
    </source>