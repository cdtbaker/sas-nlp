<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.gtk">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="java.io.File"/>
        <import package="java.lang.ref"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Locale"/>
        <import package="javax.swing"/>
        <import package="javax.swing.colorchooser"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.synth"/>
        <import package="javax.swing.text.DefaultEditorKit"/>
        <import package="com.sun.java.swing.plaf.gtk.GTKConstants.PositionType"/>
        <import package="com.sun.java.swing.plaf.gtk.GTKConstants.StateType"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.UNIXToolkit"/>
        <import package="sun.awt.OSInfo"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.swing.DefaultLayoutStyle"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="GTKLookAndFeel" line="51">
            <extends class="SynthLookAndFeel"/>
            <comment line="72">
                Used to override if system (desktop) text anti-aliasing settings should
                 be used. The reasons for this are are is that currently its &quot;off&quot;
                 for CJK locales which is not likely to be a good universal answer, and
                 also its off for remote display. So this provides an unsupported
                 way to explicitly request that it be &quot;on&quot;.                
            </comment>
            <comment line="1558">
                Subclassed to pass in false to the superclass, we don&apos;t want to try
                 and load the system colors.                
            </comment>
            <javadoc line="51">
                @author Scott Violet                
            </javadoc>
            <declaration name="IS_22" type="boolean" line="55"/>
            <declaration name="aaTextInfo" type="Object" line="57"/>
            <javadoc line="57">
                Whether or not text is drawn antialiased.  This keys off the
                  desktop property &apos;gnome.Xft/Antialias&apos; and &apos;gnome.Xft/RGBA&apos;
                  We should assume ON - or some variation of ON as no GTK desktop
                  ships with it OFF.                
            </javadoc>
            <declaration name="isSunCJK" type="boolean" line="65"/>
            <javadoc line="65">
                Solaris, or Linux with Sun JDS in a CJK Locale.
                  Used to determine if Sun&apos;s high quality CJK fonts are present.                
            </javadoc>
            <declaration name="gtkAAFontSettingsCond" type="boolean" line="78"/>
            <declaration name="fallbackFont" type="Font" line="80"/>
            <javadoc line="80">
                Font to use in places where there is no widget.                
            </javadoc>
            <declaration name="inInitialize" type="boolean" line="85"/>
            <javadoc line="85">
                If true, GTKLookAndFeel is inside the &lt;code&gt;initialize&lt;/code&gt;
                  method.                
            </javadoc>
            <declaration name="pclInstalled" type="boolean" line="91"/>
            <javadoc line="91">
                If true, PropertyChangeListeners have been installed for the
                  Toolkit.                
            </javadoc>
            <declaration name="styleFactory" type="GTKStyleFactory" line="97"/>
            <javadoc line="97">
                StyleFactory needs to be created only the first time.                
            </javadoc>
            <declaration name="gtkThemeName" type="String" line="102"/>
            <javadoc line="102">
                Cached theme name. Used by GTKGraphicsUtils                
            </javadoc>
            <scope line="107">
                <declaration name="version" type="String" line="110"/>
                <scope line="112"/>
                <scope line="115"/>
                <declaration name="language" type="String" line="119"/>
                <declaration name="cjkLocale" type="boolean" line="120"/>
                <scope line="125">
                    <declaration name="isSunDesktop" type="boolean" line="126"/>
                    <anonymous_class line="134">
                        <method name="run" type="Boolean" line="135">
                            <declaration name="f" type="File" line="136"/>
                        </method>
                    </anonymous_class>
                    <declaration name="val" type="Boolean" line="133"/>
                    <scope line="142"/>
                </scope>
            </scope>
            <javadoc line="148">
                Returns true if running on system containing at least 2.2.                
            </javadoc>
            <method name="is2_2" type="boolean" line="151">
                <comment line="153">
                    NOTE: We&apos;re currently hard coding to use 2.2.
                     If we want to support both GTK 2.0 and 2.2, we&apos;ll
                     need to get the major/minor/micro version from the .so.
                     Refer to bug 4912613 for details.                    
                </comment>
            </method>
            <javadoc line="159">
                Maps a swing constant to a GTK constant.                
            </javadoc>
            <method name="SwingOrientationConstantToGTK" type="PositionType" line="162">
                <params>
                    <param name="side" type="int"/>
                </params>
            </method>
            <javadoc line="177">
                Maps from Synth state to native GTK state using typesafe enumeration
                  StateType.  This is only used by GTKEngine.                
            </javadoc>
            <method name="synthStateToGTKStateType" type="StateType" line="181">
                <params>
                    <param name="state" type="int"/>
                </params>
                <declaration name="result" type="StateType" line="182"/>
            </method>
            <javadoc line="204">
                Maps from a Synth state to the corresponding GTK state.
                  The GTK states are named differently than Synth&apos;s states, the
                  following gives the mapping:
                  &lt;table&gt;&lt;tr&gt;&lt;td&gt;Synth&lt;td&gt;GTK
                  &lt;tr&gt;&lt;td&gt;SynthConstants.PRESSED&lt;td&gt;ACTIVE
                  &lt;tr&gt;&lt;td&gt;SynthConstants.SELECTED&lt;td&gt;SELECTED
                  &lt;tr&gt;&lt;td&gt;SynthConstants.MOUSE_OVER&lt;td&gt;PRELIGHT
                  &lt;tr&gt;&lt;td&gt;SynthConstants.DISABLED&lt;td&gt;INSENSITIVE
                  &lt;tr&gt;&lt;td&gt;SynthConstants.ENABLED&lt;td&gt;NORMAL
                  &lt;/table&gt;
                  Additionally some widgets are special cased.                
            </javadoc>
            <method name="synthStateToGTKState" type="int" line="217">
                <params>
                    <param name="region" type="Region"/>
                    <param name="state" type="int"/>
                </params>
                <comment line="254">
                    If the button is SELECTED and is PRELIGHT we need to
                     make the state MOUSE_OVER otherwise we don&apos;t paint the
                     PRELIGHT.                    
                </comment>
                <scope line="218">
                    <scope line="225"/>
                    <scope line="227"/>
                </scope>
                <scope line="231">
                    <scope line="232"/>
                    <scope line="235"/>
                    <scope line="237"/>
                </scope>
                <scope line="241">
                    <scope line="242"/>
                    <scope line="249">
                        <scope line="250"/>
                        <scope line="256"/>
                        <scope line="258"/>
                    </scope>
                    <scope line="261"/>
                </scope>
                <scope line="266"/>
                <scope line="269"/>
                <scope line="272">
                    <scope line="273"/>
                    <scope line="275"/>
                </scope>
            </method>
            <method name="isText" type="boolean" line="282">
                <params>
                    <param name="region" type="Region"/>
                </params>
                <comment line="284">
                    These Regions treat FOREGROUND as TEXT.                    
                </comment>
            </method>
            <method name="getDefaults" type="UIDefaults" line="296">
                <comment line="298">
                    We need to call super for basic&apos;s properties file.                    
                </comment>
                <comment line="301">
                    SynthTabbedPaneUI supports rollover on tabs, GTK does not                    
                </comment>
                <comment line="304">
                    Prevents Synth from setting text AA by itself                    
                </comment>
                <comment line="308">
                    For compatability with apps expecting certain defaults we&apos;ll
                     populate the table with the values from basic.                    
                </comment>
                <declaration name="table" type="UIDefaults" line="298"/>
            </method>
            <method name="installPropertyChangeListeners" type="void" line="315">
                <scope line="316">
                    <declaration name="kit" type="Toolkit" line="317"/>
                    <declaration name="pcl" type="WeakPCL" line="318"/>
                </scope>
            </method>
            <method name="initResourceBundle" type="void" line="330">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
            </method>
            <method name="initComponentDefaults" type="void" line="334">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <comment line="336">
                    For compatability with apps expecting certain defaults we&apos;ll
                     populate the table with the values from basic.                    
                </comment>
                <comment line="363">
                    The following progress bar size calculations come from
                     gtkprogressbar.c (version 2.8.20), see MIN_* constants and
                     the gtk_progress_bar_size_request() method.                    
                </comment>
                <comment line="420">
                                        
                </comment>
                <comment line="421">
                                        
                </comment>
                <comment line="460">
                                        
                </comment>
                <comment line="461">
                                        
                </comment>
                <comment line="520">
                                        
                </comment>
                <comment line="528">
                                        
                </comment>
                <comment line="886">
                    These bindings are only enabled when there is a default
                     button set on the rootpane.                    
                </comment>
                <declaration name="zero" type="Integer" line="339"/>
                <declaration name="zeroBorder" type="Object" line="340"/>
                <declaration name="focusBorder" type="Object" line="343"/>
                <declaration name="focusSelectedBorder" type="Object" line="346"/>
                <declaration name="noFocusBorder" type="Object" line="349"/>
                <declaration name="factory" type="GTKStyleFactory" line="353"/>
                <declaration name="tableStyle" type="GTKStyle" line="354"/>
                <declaration name="tableBg" type="Color" line="355"/>
                <declaration name="tableFocusCellBg" type="Color" line="357"/>
                <declaration name="tableFocusCellFg" type="Color" line="359"/>
                <declaration name="progStyle" type="GTKStyle" line="365"/>
                <declaration name="progXThickness" type="int" line="367"/>
                <declaration name="progYThickness" type="int" line="368"/>
                <declaration name="hProgWidth" type="int" line="369"/>
                <declaration name="hProgHeight" type="int" line="370"/>
                <declaration name="vProgWidth" type="int" line="371"/>
                <declaration name="vProgHeight" type="int" line="372"/>
                <declaration name="caretBlinkRate" type="Integer" line="374"/>
                <declaration name="zeroInsets" type="Insets" line="375"/>
                <declaration name="defaultCaretAspectRatio" type="Double" line="377"/>
                <declaration name="caretColor" type="Color" line="378"/>
                <declaration name="controlText" type="Color" line="379"/>
                <declaration name="fieldInputMap" type="Object" line="381"/>
                <declaration name="passwordInputMap" type="Object" line="423"/>
                <declaration name="editorMargin" type="Object" line="463"/>
                <declaration name="multilineInputMap" type="Object" line="465"/>
                <class name="FontLazyValue" line="530">
                    <implements interface="UIDefaults.LazyValue"/>
                    <declaration name="region" type="Region" line="531"/>
                    <method name="FontLazyValue" type="constructor" line="532">
                        <params>
                            <param name="region" type="Region"/>
                        </params>
                    </method>
                    <method name="createValue" type="Object" line="535">
                        <params>
                            <param name="table" type="UIDefaults"/>
                        </params>
                        <declaration name="factory" type="GTKStyleFactory" line="536"/>
                        <declaration name="style" type="GTKStyle" line="537"/>
                    </method>
                </class>
                <anonymous_class line="579">
                    <method name="createValue" type="Object" line="580">
                        <params>
                            <param name="table" type="UIDefaults"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="1190">
                    <method name="createValue" type="Object" line="1191">
                        <params>
                            <param name="table" type="UIDefaults"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="1206">
                    <method name="createValue" type="Object" line="1207">
                        <params>
                            <param name="table" type="UIDefaults"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="defaults" type="Object[]" line="542"/>
                <scope line="1327"/>
            </method>
            <method name="initSystemColorDefaults" type="void" line="1333">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <comment line="1384">
                    colors specific only for GTK
                     It is impossible to create a simple GtkWidget without specifying the
                     type. So for GtkWidget we can use any appropriate concrete type of
                     wigdet. LABEL in this case.                    
                </comment>
                <declaration name="factory" type="GTKStyleFactory" line="1334"/>
                <declaration name="windowStyle" type="GTKStyle" line="1335"/>
                <declaration name="entryStyle" type="GTKStyle" line="1342"/>
                <declaration name="caretColor" type="Object" line="1356"/>
                <scope line="1358"/>
                <declaration name="menuStyle" type="GTKStyle" line="1363"/>
                <declaration name="scrollbarStyle" type="GTKStyle" line="1369"/>
                <declaration name="infoStyle" type="GTKStyle" line="1373"/>
                <declaration name="desktopStyle" type="GTKStyle" line="1379"/>
                <declaration name="widgetStyle" type="GTKStyle" line="1387"/>
                <declaration name="bg" type="Color" line="1388"/>
            </method>
            <javadoc line="1412">
                Creates the GTK look and feel class for the passed in Component.                
            </javadoc>
            <method name="createUI" type="ComponentUI" line="1415">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="key" type="String" line="1416"/>
                <scope line="1418"/>
            </method>
            <javadoc line="1424">
                Returns the cached gtkThemeName                
            </javadoc>
            <method name="getGtkThemeName" type="String" line="1427"/>
            <method name="isLeftToRight" type="boolean" line="1431">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="initialize" type="void" line="1435">
                <comment line="1437">
                    We need to call loadGTK() to ensure that the native GTK
                     libraries are loaded.  It is very unlikely that this call will
                     fail (since we&apos;ve already verified native GTK support in
                     isSupportedLookAndFeel()), but we can throw an error in the
                     failure situation just in case.                    
                </comment>
                <comment line="1456">
                    Check if system AA font settings should be used.
                     Sun&apos;s JDS (for Linux and Solaris) ships with high quality CJK
                     fonts and specifies via fontconfig that these be rendered in
                     B&amp;W to take advantage of the embedded bitmaps.
                     If is a Sun CJK locale or remote display, indicate by the condition
                     variable that in this case the L&amp;F recommends ignoring desktop
                     settings. On other Unixes (eg Linux) this doesn&apos;t apply.
                     REMIND 1: The isSunCJK test is really just a place holder
                     until we can properly query fontconfig and use the properties
                     set for specific fonts.
                     REMIND 2: See comment on isLocalDisplay() definition regarding
                     XRender.                    
                </comment>
                <declaration name="toolkit" type="Toolkit" line="1443"/>
                <scope line="1446"/>
            </method>
            <declaration name="queue" type="ReferenceQueue&lt;GTKLookAndFeel&gt;" line="1473"/>
            <method name="flushUnreferenced" type="void" line="1475">
                <declaration name="pcl" type="WeakPCL" line="1476"/>
                <scope line="1478"/>
            </method>
            <class name="WeakPCL" line="1483">
                <extends class="WeakReference">
                    <type_params>
                        <type_param name="GTKLookAndFeel"/>
                    </type_params>
                </extends>
                <implements interface="PropertyChangeListener"/>
                <declaration name="kit" type="Toolkit" line="1485"/>
                <declaration name="key" type="String" line="1486"/>
                <method name="WeakPCL" type="constructor" line="1488">
                    <params>
                        <param name="target" type="GTKLookAndFeel"/>
                        <param name="kit" type="Toolkit"/>
                        <param name="key" type="String"/>
                    </params>
                </method>
                <method name="getKey" type="String" line="1494"/>
                <method name="propertyChange" type="void" line="1496">
                    <params>
                        <param name="pce" type="PropertyChangeEvent"/>
                    </params>
                    <comment line="1501">
                        The property was GC&apos;ed, we&apos;re no longer interested in
                         PropertyChanges, remove the listener.                        
                    </comment>
                    <comment line="1506">
                        We are using invokeLater here because we are getting called
                         on the AWT-Motif thread which can cause a deadlock.                        
                    </comment>
                    <comment line="1511">
                        We are listening for GTK desktop text AA settings:
                         &quot;gnome.XftAntialias&quot; and &quot;gnome.XftRGBA&quot;.
                         However we don&apos;t need to read these here as
                         the UIDefaults reads them and this event causes
                         those to be reinitialised.                        
                    </comment>
                    <declaration name="lnf" type="GTKLookAndFeel" line="1497"/>
                    <scope line="1499"/>
                    <scope line="1504">
                        <anonymous_class line="1507">
                            <method name="run" type="void" line="1508">
                                <comment line="1511">
                                    We are listening for GTK desktop text AA settings:
                                     &quot;gnome.XftAntialias&quot; and &quot;gnome.XftRGBA&quot;.
                                     However we don&apos;t need to read these here as
                                     the UIDefaults reads them and this event causes
                                     those to be reinitialised.                                    
                                </comment>
                                <declaration name="name" type="String" line="1509"/>
                                <scope line="1516"/>
                                <declaration name="appWindows" type="Window" line="1521"/>
                                <scope line="1522"/>
                            </method>
                        </anonymous_class>
                    </scope>
                </method>
                <method name="dispose" type="void" line="1530"/>
            </class>
            <method name="isSupportedLookAndFeel" type="boolean" line="1535">
                <declaration name="toolkit" type="Toolkit" line="1536"/>
            </method>
            <method name="isNativeLookAndFeel" type="boolean" line="1541"/>
            <method name="getDescription" type="String" line="1545"/>
            <method name="getName" type="String" line="1549"/>
            <method name="getID" type="String" line="1553"/>
            <method name="loadSystemColors" type="void" line="1559">
                <params>
                    <param name="table" type="UIDefaults"/>
                    <param name="systemColors" type="String[]"/>
                    <param name="useNative" type="boolean"/>
                </params>
            </method>
            <method name="loadStyles" type="void" line="1563">
                <comment line="1570">
                    If we are in initialize initializations will be
                     called later, don&apos;t do it now.                    
                </comment>
                <scope line="1571">
                    <declaration name="table" type="UIDefaults" line="1572"/>
                </scope>
            </method>
            <method name="getGTKStyleFactory" type="GTKStyleFactory" line="1578">
                <comment line="1589">
                    Desktop property appears to have preference over rc font.                    
                </comment>
                <declaration name="engine" type="GTKEngine" line="1580"/>
                <declaration name="iconSizes" type="Object" line="1581"/>
                <scope line="1582">
                    <scope line="1583"/>
                </scope>
                <declaration name="fontName" type="Object" line="1589"/>
                <scope line="1592">
                    <scope line="1594"/>
                </scope>
                <scope line="1599"/>
                <declaration name="defaultFont" type="Font" line="1603"/>
            </method>
            <method name="configIconSizes" type="boolean" line="1610">
                <params>
                    <param name="sizeString" type="String"/>
                </params>
                <declaration name="sizes" type="String[]" line="1611"/>
                <scope line="1612">
                    <declaration name="splits" type="String[]" line="1613"/>
                    <scope line="1615"/>
                    <declaration name="size" type="String" line="1619"/>
                    <scope line="1620"/>
                    <scope line="1626"/>
                    <declaration name="width" type="String" line="1630"/>
                    <declaration name="height" type="String" line="1631"/>
                    <scope line="1633"/>
                    <declaration name="w" type="int" line="1637"/>
                    <declaration name="h" type="int" line="1638"/>
                    <scope line="1640"/>
                    <scope line="1643"/>
                    <scope line="1647">
                        <declaration name="type" type="int" line="1648"/>
                    </scope>
                    <scope line="1650"/>
                </scope>
            </method>
            <javadoc line="1658">
                Returns whether or not the UIs should update their
                  &lt;code&gt;SynthStyles&lt;/code&gt; from the &lt;code&gt;SynthStyleFactory&lt;/code&gt;
                  when the ancestor of the Component changes.                
                <return>
                    whether or not the UIs should update their
                      &lt;code&gt;SynthStyles&lt;/code&gt; from the &lt;code&gt;SynthStyleFactory&lt;/code&gt;
                      when the ancestor changed.                    
                </return>
            </javadoc>
            <method name="shouldUpdateStyleOnAncestorChanged" type="boolean" line="1667"/>
            <javadoc line="1671">
                {@inheritDoc}                
            </javadoc>
            <method name="getLayoutStyle" type="LayoutStyle" line="1674"/>
            <class name="GnomeLayoutStyle" line="1679">
                <extends class="DefaultLayoutStyle"/>
                <javadoc line="1679">
                    Gnome layout style.  From:
                      http://developer.gnome.org/projects/gup/hig/2.0/design-window.html#window-layout-spacing
                      You&apos;ll notice this doesn&apos;t do the radiobutton/checkbox border
                      adjustments that windows/metal do.  This is because gtk doesn&apos;t
                      provide margins/insets for checkbox/radiobuttons.                    
                </javadoc>
                <declaration name="INSTANCE" type="GnomeLayoutStyle" line="1687"/>
                <method name="getPreferredGap" type="int" line="1692">
                    <params>
                        <param name="component1" type="JComponent"/>
                        <param name="component2" type="JComponent"/>
                        <param name="type" type="ComponentPlacement"/>
                        <param name="position" type="int"/>
                        <param name="parent" type="Container"/>
                    </params>
                    <comment line="1694">
                        Checks args                        
                    </comment>
                    <comment line="1702">
                        Indent group members 12 pixels to denote hierarchy and
                         association.                        
                    </comment>
                    <comment line="1706">
                        Fall through to related                        
                    </comment>
                    <comment line="1707">
                        As a basic rule of thumb, leave space between user
                         interface components in increments of 6 pixels, going up as
                         the relationship between related elements becomes more
                         distant. For example, between icon labels and associated
                         graphics within an icon, 6 pixels are adequate. Between
                         labels and associated components, leave 12 horizontal
                         pixels. For vertical spacing between groups of components,
                         18 pixels is adequate.
                        
                         The first part of this is handled automatically by Icon (which
                         won&apos;t give you 6 pixels).                        
                    </comment>
                    <scope line="1700"/>
                    <scope line="1718"/>
                </method>
                <method name="getContainerGap" type="int" line="1730">
                    <params>
                        <param name="component" type="JComponent"/>
                        <param name="position" type="int"/>
                        <param name="parent" type="Container"/>
                    </params>
                    <comment line="1732">
                        Checks args                        
                    </comment>
                    <comment line="1734">
                        A general padding of 12 pixels is
                         recommended between the contents of a dialog window and the
                         window borders.                        
                    </comment>
                </method>
            </class>
        </class>
    </source>