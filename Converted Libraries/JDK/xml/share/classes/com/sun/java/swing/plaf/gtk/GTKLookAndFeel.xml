<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.gtk">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="java.io.File"/>
        <import package="java.lang.ref"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Locale"/>
        <import package="javax.swing"/>
        <import package="javax.swing.colorchooser"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.synth"/>
        <import package="javax.swing.text.DefaultEditorKit"/>
        <import package="com.sun.java.swing.plaf.gtk.GTKConstants.PositionType"/>
        <import package="com.sun.java.swing.plaf.gtk.GTKConstants.StateType"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.UNIXToolkit"/>
        <import package="sun.awt.OSInfo"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.swing.DefaultLayoutStyle"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="GTKLookAndFeel" line="23">
            <extends class="SynthLookAndFeel"/>
            <javadoc line="23">
                @author Scott Violet                
            </javadoc>
            <declaration name="IS_22" type="boolean" line="27"/>
            <declaration name="aaTextInfo" type="Object" line="28"/>
            <javadoc line="28">
                Whether or not text is drawn antialiased.  This keys off the
                  desktop property &apos;gnome.Xft/Antialias&apos; and &apos;gnome.Xft/RGBA&apos;
                  We should assume ON - or some variation of ON as no GTK desktop
                  ships with it OFF.                
            </javadoc>
            <declaration name="isSunCJK" type="boolean" line="35"/>
            <javadoc line="35">
                Solaris, or Linux with Sun JDS in a CJK Locale.
                  Used to determine if Sun&apos;s high quality CJK fonts are present.                
            </javadoc>
            <declaration name="gtkAAFontSettingsCond" type="boolean" line="40"/>
            <declaration name="fallbackFont" type="Font" line="41"/>
            <javadoc line="41">
                Font to use in places where there is no widget.                
            </javadoc>
            <declaration name="inInitialize" type="boolean" line="45"/>
            <javadoc line="45">
                If true, GTKLookAndFeel is inside the &lt;code&gt;initialize&lt;/code&gt;
                  method.                
            </javadoc>
            <declaration name="pclInstalled" type="boolean" line="50"/>
            <javadoc line="50">
                If true, PropertyChangeListeners have been installed for the
                  Toolkit.                
            </javadoc>
            <declaration name="styleFactory" type="GTKStyleFactory" line="55"/>
            <javadoc line="55">
                StyleFactory needs to be created only the first time.                
            </javadoc>
            <declaration name="gtkThemeName" type="String" line="59"/>
            <javadoc line="59">
                Cached theme name. Used by GTKGraphicsUtils                
            </javadoc>
            <scope line="63">
                <declaration name="version" type="String" line="64"/>
                <scope line="65"/>
                <scope line="68"/>
                <declaration name="language" type="String" line="71"/>
                <declaration name="cjkLocale" type="boolean" line="72"/>
                <scope line="73">
                    <declaration name="isSunDesktop" type="boolean" line="74"/>
                    <anonymous_class line="80">
                        <method name="run" type="Boolean" line="81">
                            <declaration name="f" type="File" line="82"/>
                        </method>
                    </anonymous_class>
                    <declaration name="val" type="Boolean" line="80"/>
                    <scope line="89"/>
                </scope>
            </scope>
            <javadoc line="94">
                Returns true if running on system containing at least 2.2.                
            </javadoc>
            <method name="is2_2" type="boolean" line="97"/>
            <javadoc line="100">
                Maps a swing constant to a GTK constant.                
            </javadoc>
            <method name="SwingOrientationConstantToGTK" type="PositionType" line="103">
                <params>
                    <param name="side" type="int"/>
                </params>
            </method>
            <javadoc line="117">
                Maps from Synth state to native GTK state using typesafe enumeration
                  StateType.  This is only used by GTKEngine.                
            </javadoc>
            <method name="synthStateToGTKStateType" type="StateType" line="121">
                <params>
                    <param name="state" type="int"/>
                </params>
                <declaration name="result" type="StateType" line="122"/>
            </method>
            <javadoc line="143">
                Maps from a Synth state to the corresponding GTK state.
                  The GTK states are named differently than Synth&apos;s states, the
                  following gives the mapping:
                  &lt;table&gt;&lt;tr&gt;&lt;td&gt;Synth&lt;td&gt;GTK
                  &lt;tr&gt;&lt;td&gt;SynthConstants.PRESSED&lt;td&gt;ACTIVE
                  &lt;tr&gt;&lt;td&gt;SynthConstants.SELECTED&lt;td&gt;SELECTED
                  &lt;tr&gt;&lt;td&gt;SynthConstants.MOUSE_OVER&lt;td&gt;PRELIGHT
                  &lt;tr&gt;&lt;td&gt;SynthConstants.DISABLED&lt;td&gt;INSENSITIVE
                  &lt;tr&gt;&lt;td&gt;SynthConstants.ENABLED&lt;td&gt;NORMAL
                  &lt;/table&gt;
                  Additionally some widgets are special cased.                
            </javadoc>
            <method name="synthStateToGTKState" type="int" line="156">
                <params>
                    <param name="region" type="Region"/>
                    <param name="state" type="int"/>
                </params>
                <scope line="157">
                    <scope line="158"/>
                    <scope line="161"/>
                </scope>
                <scope line="165">
                    <scope line="166"/>
                    <scope line="169"/>
                    <scope line="172"/>
                </scope>
                <scope line="176">
                    <scope line="177"/>
                    <scope line="180">
                        <scope line="181"/>
                        <scope line="184"/>
                        <scope line="187"/>
                    </scope>
                    <scope line="191"/>
                </scope>
                <scope line="195"/>
                <scope line="198"/>
                <scope line="201">
                    <scope line="202"/>
                    <scope line="205"/>
                </scope>
            </method>
            <method name="isText" type="boolean" line="211">
                <params>
                    <param name="region" type="Region"/>
                </params>
            </method>
            <method name="getDefaults" type="UIDefaults" line="214">
                <declaration name="table" type="UIDefaults" line="215"/>
            </method>
            <method name="installPropertyChangeListeners" type="void" line="224">
                <scope line="225">
                    <declaration name="kit" type="Toolkit" line="226"/>
                    <declaration name="pcl" type="WeakPCL" line="227"/>
                </scope>
            </method>
            <method name="initResourceBundle" type="void" line="237">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
            </method>
            <method name="initComponentDefaults" type="void" line="240">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <declaration name="zero" type="Integer" line="242"/>
                <declaration name="zeroBorder" type="Object" line="243"/>
                <declaration name="focusBorder" type="Object" line="244"/>
                <declaration name="focusSelectedBorder" type="Object" line="245"/>
                <declaration name="noFocusBorder" type="Object" line="246"/>
                <declaration name="factory" type="GTKStyleFactory" line="247"/>
                <declaration name="tableStyle" type="GTKStyle" line="248"/>
                <declaration name="tableBg" type="Color" line="249"/>
                <declaration name="tableFocusCellBg" type="Color" line="250"/>
                <declaration name="tableFocusCellFg" type="Color" line="251"/>
                <declaration name="progStyle" type="GTKStyle" line="252"/>
                <declaration name="progXThickness" type="int" line="253"/>
                <declaration name="progYThickness" type="int" line="254"/>
                <declaration name="hProgWidth" type="int" line="255"/>
                <declaration name="hProgHeight" type="int" line="256"/>
                <declaration name="vProgWidth" type="int" line="257"/>
                <declaration name="vProgHeight" type="int" line="258"/>
                <declaration name="caretBlinkRate" type="Integer" line="259"/>
                <declaration name="zeroInsets" type="Insets" line="260"/>
                <declaration name="defaultCaretAspectRatio" type="Double" line="261"/>
                <declaration name="caretColor" type="Color" line="262"/>
                <declaration name="controlText" type="Color" line="263"/>
                <declaration name="fieldInputMap" type="Object" line="264"/>
                <declaration name="passwordInputMap" type="Object" line="265"/>
                <declaration name="editorMargin" type="Object" line="266"/>
                <declaration name="multilineInputMap" type="Object" line="267"/>
                <class name="FontLazyValue" line="268">
                    <implements interface="UIDefaults.LazyValue"/>
                    <declaration name="region" type="Region" line="269"/>
                    <method name="FontLazyValue" type="constructor" line="270">
                        <params>
                            <param name="region" type="Region"/>
                        </params>
                    </method>
                    <method name="createValue" type="Object" line="273">
                        <params>
                            <param name="table" type="UIDefaults"/>
                        </params>
                        <declaration name="factory" type="GTKStyleFactory" line="274"/>
                        <declaration name="style" type="GTKStyle" line="275"/>
                    </method>
                </class>
                <anonymous_class line="279">
                    <method name="createValue" type="Object" line="280">
                        <params>
                            <param name="table" type="UIDefaults"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="284">
                    <method name="createValue" type="Object" line="285">
                        <params>
                            <param name="table" type="UIDefaults"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="289">
                    <method name="createValue" type="Object" line="290">
                        <params>
                            <param name="table" type="UIDefaults"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="defaults" type="Object[]" line="279"/>
                <scope line="296"/>
            </method>
            <method name="initSystemColorDefaults" type="void" line="301">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <declaration name="factory" type="GTKStyleFactory" line="302"/>
                <declaration name="windowStyle" type="GTKStyle" line="303"/>
                <declaration name="entryStyle" type="GTKStyle" line="306"/>
                <declaration name="caretColor" type="Object" line="312"/>
                <scope line="313"/>
                <declaration name="menuStyle" type="GTKStyle" line="317"/>
                <declaration name="scrollbarStyle" type="GTKStyle" line="320"/>
                <declaration name="infoStyle" type="GTKStyle" line="322"/>
                <declaration name="desktopStyle" type="GTKStyle" line="325"/>
                <declaration name="widgetStyle" type="GTKStyle" line="327"/>
                <declaration name="bg" type="Color" line="328"/>
            </method>
            <javadoc line="341">
                Creates the GTK look and feel class for the passed in Component.                
            </javadoc>
            <method name="createUI" type="ComponentUI" line="344">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="key" type="String" line="345"/>
                <scope line="346"/>
            </method>
            <javadoc line="351">
                Returns the cached gtkThemeName                
            </javadoc>
            <method name="getGtkThemeName" type="String" line="354"/>
            <method name="isLeftToRight" type="boolean" line="357">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="initialize" type="void" line="360">
                <declaration name="toolkit" type="Toolkit" line="361"/>
                <scope line="362"/>
            </method>
            <declaration name="queue" type="ReferenceQueue&amp;lt;GTKLookAndFeel&amp;gt;" line="372"/>
            <method name="flushUnreferenced" type="void" line="373">
                <declaration name="pcl" type="WeakPCL" line="374"/>
                <scope line="375"/>
            </method>
            <class name="WeakPCL" line="379">
                <extends class="WeakReference">
                    <type_params>
                        <type_param name="GTKLookAndFeel"/>
                    </type_params>
                </extends>
                <implements interface="PropertyChangeListener"/>
                <declaration name="kit" type="Toolkit" line="380"/>
                <declaration name="key" type="String" line="381"/>
                <method name="WeakPCL" type="constructor" line="382">
                    <params>
                        <param name="target" type="GTKLookAndFeel"/>
                        <param name="kit" type="Toolkit"/>
                        <param name="key" type="String"/>
                    </params>
                </method>
                <method name="getKey" type="String" line="387"/>
                <method name="propertyChange" type="void" line="390">
                    <params>
                        <param name="pce" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="lnf" type="GTKLookAndFeel" line="391"/>
                    <scope line="392"/>
                    <scope line="395">
                        <anonymous_class line="396">
                            <method name="run" type="void" line="397">
                                <declaration name="name" type="String" line="398"/>
                                <scope line="399"/>
                                <declaration name="appWindows" type="Window" line="404"/>
                                <scope line="405"/>
                            </method>
                        </anonymous_class>
                    </scope>
                </method>
                <method name="dispose" type="void" line="413"/>
            </class>
            <method name="isSupportedLookAndFeel" type="boolean" line="417">
                <declaration name="toolkit" type="Toolkit" line="418"/>
            </method>
            <method name="isNativeLookAndFeel" type="boolean" line="421"/>
            <method name="getDescription" type="String" line="424"/>
            <method name="getName" type="String" line="427"/>
            <method name="getID" type="String" line="430"/>
            <method name="loadSystemColors" type="void" line="433">
                <params>
                    <param name="table" type="UIDefaults"/>
                    <param name="systemColors" type="String[]"/>
                    <param name="useNative" type="boolean"/>
                </params>
            </method>
            <method name="loadStyles" type="void" line="436">
                <scope line="439">
                    <declaration name="table" type="UIDefaults" line="440"/>
                </scope>
            </method>
            <method name="getGTKStyleFactory" type="GTKStyleFactory" line="445">
                <declaration name="engine" type="GTKEngine" line="446"/>
                <declaration name="iconSizes" type="Object" line="447"/>
                <scope line="448">
                    <scope line="449"/>
                </scope>
                <declaration name="fontName" type="Object" line="453"/>
                <scope line="454">
                    <scope line="456"/>
                </scope>
                <scope line="460"/>
                <declaration name="defaultFont" type="Font" line="463"/>
            </method>
            <method name="configIconSizes" type="boolean" line="468">
                <params>
                    <param name="sizeString" type="String"/>
                </params>
                <declaration name="sizes" type="String[]" line="469"/>
                <scope line="470">
                    <declaration name="splits" type="String[]" line="471"/>
                    <scope line="472"/>
                    <declaration name="size" type="String" line="475"/>
                    <scope line="476"/>
                    <scope line="480"/>
                    <declaration name="width" type="String" line="483"/>
                    <declaration name="height" type="String" line="484"/>
                    <scope line="485"/>
                    <declaration name="w" type="int" line="488"/>
                    <declaration name="h" type="int" line="489"/>
                    <scope line="490"/>
                    <scope line="494"/>
                    <scope line="497">
                        <declaration name="type" type="int" line="498"/>
                    </scope>
                    <scope line="501"/>
                </scope>
            </method>
            <javadoc line="507">
                Returns whether or not the UIs should update their
                  &lt;code&gt;SynthStyles&lt;/code&gt; from the &lt;code&gt;SynthStyleFactory&lt;/code&gt;
                  when the ancestor of the Component changes.                
                <return>
                    whether or not the UIs should update their
                      &lt;code&gt;SynthStyles&lt;/code&gt; from the &lt;code&gt;SynthStyleFactory&lt;/code&gt;
                      when the ancestor changed.                    
                </return>
            </javadoc>
            <method name="shouldUpdateStyleOnAncestorChanged" type="boolean" line="515"/>
            <javadoc line="518">
                {@inheritDoc}                
            </javadoc>
            <method name="getLayoutStyle" type="LayoutStyle" line="521"/>
            <class name="GnomeLayoutStyle" line="524">
                <extends class="DefaultLayoutStyle"/>
                <javadoc line="524">
                    Gnome layout style.  From:
                      http://developer.gnome.org/projects/gup/hig/2.0/design-window.html#window-layout-spacing
                      You&apos;ll notice this doesn&apos;t do the radiobutton/checkbox border
                      adjustments that windows/metal do.  This is because gtk doesn&apos;t
                      provide margins/insets for checkbox/radiobuttons.                    
                </javadoc>
                <declaration name="INSTANCE" type="GnomeLayoutStyle" line="532"/>
                <method name="getPreferredGap" type="int" line="533">
                    <params>
                        <param name="component1" type="JComponent"/>
                        <param name="component2" type="JComponent"/>
                        <param name="type" type="ComponentPlacement"/>
                        <param name="position" type="int"/>
                        <param name="parent" type="Container"/>
                    </params>
                    <scope line="537"/>
                    <scope line="541"/>
                </method>
                <method name="getContainerGap" type="int" line="550">
                    <params>
                        <param name="component" type="JComponent"/>
                        <param name="position" type="int"/>
                        <param name="parent" type="Container"/>
                    </params>
                </method>
            </class>
        </class>
    </source>