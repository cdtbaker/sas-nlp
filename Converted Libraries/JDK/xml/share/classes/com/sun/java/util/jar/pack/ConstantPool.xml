<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="java.util.AbstractList"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.List"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="com.sun.java.util.jar.pack.Constants"/>
        <class name="ConstantPool" line="11">
            <javadoc line="11">
                Representation of constant pool entries and indexes.                
                <author>
                    John Rose                    
                </author>
            </javadoc>
            <method name="ConstantPool" type="constructor" line="16"/>
            <method name="verbose" type="int" line="18"/>
            <javadoc line="21">
                Factory for Utf8 string constants.
                  Used for well-known strings like &quot;SourceFile&quot;, &quot;&lt;init&gt;&quot;, etc.
                  Also used to back up more complex constant pool entries, like Class.                
            </javadoc>
            <method name="getUtf8Entry" type="Utf8Entry" line="26">
                <params>
                    <param name="value" type="String"/>
                </params>
                <declaration name="utf8Entries" type="Map&lt;String,Utf8Entry&gt;" line="27"/>
                <declaration name="e" type="Utf8Entry" line="28"/>
                <scope line="29"/>
            </method>
            <javadoc line="35">
                Factory for Class constants.                
            </javadoc>
            <method name="getClassEntry" type="ClassEntry" line="38">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="classEntries" type="Map&lt;String,ClassEntry&gt;" line="39"/>
                <declaration name="e" type="ClassEntry" line="40"/>
                <scope line="41"/>
            </method>
            <javadoc line="48">
                Factory for literal constants (String, Integer, etc.).                
            </javadoc>
            <method name="getLiteralEntry" type="LiteralEntry" line="51">
                <params>
                    <param name="value" type="Comparable"/>
                </params>
                <declaration name="literalEntries" type="Map&lt;Object,LiteralEntry&gt;" line="52"/>
                <declaration name="e" type="LiteralEntry" line="53"/>
                <scope line="54"/>
            </method>
            <javadoc line="61">
                Factory for literal constants (String, Integer, etc.).                
            </javadoc>
            <method name="getStringEntry" type="StringEntry" line="64">
                <params>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="67">
                Factory for signature (type) constants.                
            </javadoc>
            <method name="getSignatureEntry" type="SignatureEntry" line="70">
                <params>
                    <param name="type" type="String"/>
                </params>
                <declaration name="signatureEntries" type="Map&lt;String,SignatureEntry&gt;" line="71"/>
                <declaration name="e" type="SignatureEntry" line="72"/>
                <scope line="73"/>
            </method>
            <method name="getSignatureEntry" type="SignatureEntry" line="80">
                <params>
                    <param name="formRef" type="Utf8Entry"/>
                    <param name="classRefs" type="ClassEntry[]"/>
                </params>
            </method>
            <javadoc line="83">
                Factory for descriptor (name-and-type) constants.                
            </javadoc>
            <method name="getDescriptorEntry" type="DescriptorEntry" line="86">
                <params>
                    <param name="nameRef" type="Utf8Entry"/>
                    <param name="typeRef" type="SignatureEntry"/>
                </params>
            </method>
            <method name="getDescriptorEntry" type="DescriptorEntry" line="97">
                <params>
                    <param name="nameRef" type="Utf8Entry"/>
                    <param name="typeRef" type="Utf8Entry"/>
                </params>
            </method>
            <javadoc line="100">
                Factory for member reference constants.                
            </javadoc>
            <method name="getMemberEntry" type="MemberEntry" line="103">
                <params>
                    <param name="tag" type="byte"/>
                    <param name="classRef" type="ClassEntry"/>
                    <param name="descRef" type="DescriptorEntry"/>
                </params>
            </method>
            <class name="Entry" line="114">
                <implements interface="Comparable"/>
                <javadoc line="114">
                    Entries in the constant pool.                    
                </javadoc>
                <declaration name="tag" type="byte" line="118"/>
                <declaration name="valueHash" type="int" line="119"/>
                <method name="Entry" type="constructor" line="120">
                    <params>
                        <param name="tag" type="byte"/>
                    </params>
                </method>
                <method name="getTag" type="byte" line="123"/>
                <method name="getRef" type="Entry" line="126">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="eq" type="boolean" line="129">
                    <params>
                        <param name="that" type="Entry"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="133"/>
                <method name="hashCode" type="int" line="134">
                    <scope line="135"/>
                </method>
                <method name="computeValueHash" type="int" line="141"/>
                <method name="compareTo" type="int" line="142"/>
                <method name="superCompareTo" type="int" line="143">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="that" type="Entry" line="144"/>
                    <scope line="145"/>
                </method>
                <method name="isDoubleWord" type="boolean" line="150"/>
                <method name="tagMatches" type="boolean" line="153">
                    <params>
                        <param name="tag" type="int"/>
                    </params>
                </method>
                <method name="toString" type="String" line="156">
                    <declaration name="valuePrint" type="String" line="157"/>
                    <scope line="158"/>
                </method>
                <method name="stringValue" type="String" line="164"/>
            </class>
            <class name="Utf8Entry" line="166">
                <extends class="Entry"/>
                <declaration name="value" type="String" line="167"/>
                <method name="Utf8Entry" type="constructor" line="168">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <method name="computeValueHash" type="int" line="173"/>
                <method name="equals" type="boolean" line="176">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="179">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="x" type="int" line="180"/>
                    <scope line="181"/>
                </method>
                <method name="stringValue" type="String" line="186"/>
            </class>
            <method name="isMemberTag" type="boolean" line="190">
                <params>
                    <param name="tag" type="byte"/>
                </params>
            </method>
            <method name="numberTagOf" type="byte" line="199">
                <params>
                    <param name="value" type="Number"/>
                </params>
            </method>
            <class name="LiteralEntry" line="206">
                <extends class="Entry"/>
                <method name="LiteralEntry" type="constructor" line="207">
                    <params>
                        <param name="tag" type="byte"/>
                    </params>
                </method>
                <method name="literalValue" type="Comparable" line="210"/>
            </class>
            <class name="NumberEntry" line="212">
                <extends class="LiteralEntry"/>
                <declaration name="value" type="Number" line="213"/>
                <method name="NumberEntry" type="constructor" line="214">
                    <params>
                        <param name="value" type="Number"/>
                    </params>
                </method>
                <method name="computeValueHash" type="int" line="219"/>
                <method name="equals" type="boolean" line="222">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="225">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="x" type="int" line="226"/>
                    <scope line="227"/>
                </method>
                <method name="numberValue" type="Number" line="232"/>
                <method name="literalValue" type="Comparable" line="235"/>
                <method name="stringValue" type="String" line="238"/>
            </class>
            <class name="StringEntry" line="242">
                <extends class="LiteralEntry"/>
                <declaration name="ref" type="Utf8Entry" line="243"/>
                <method name="getRef" type="Entry" line="244">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="StringEntry" type="constructor" line="247">
                    <params>
                        <param name="ref" type="Entry"/>
                    </params>
                </method>
                <method name="computeValueHash" type="int" line="252"/>
                <method name="equals" type="boolean" line="255">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="258">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="x" type="int" line="259"/>
                    <scope line="260"/>
                </method>
                <method name="literalValue" type="Comparable" line="265"/>
                <method name="stringValue" type="String" line="268"/>
            </class>
            <class name="ClassEntry" line="272">
                <extends class="Entry"/>
                <declaration name="ref" type="Utf8Entry" line="273"/>
                <method name="getRef" type="Entry" line="274">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="computeValueHash" type="int" line="277"/>
                <method name="ClassEntry" type="constructor" line="280">
                    <params>
                        <param name="ref" type="Entry"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="285">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="288">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="x" type="int" line="289"/>
                    <scope line="290"/>
                </method>
                <method name="stringValue" type="String" line="295"/>
            </class>
            <class name="DescriptorEntry" line="299">
                <extends class="Entry"/>
                <declaration name="nameRef" type="Utf8Entry" line="300"/>
                <declaration name="typeRef" type="SignatureEntry" line="301"/>
                <method name="getRef" type="Entry" line="302">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="DescriptorEntry" type="constructor" line="307">
                    <params>
                        <param name="nameRef" type="Entry"/>
                        <param name="typeRef" type="Entry"/>
                    </params>
                    <scope line="309"/>
                </method>
                <method name="computeValueHash" type="int" line="316">
                    <declaration name="hc2" type="int" line="317"/>
                </method>
                <method name="equals" type="boolean" line="320">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="321"/>
                    <declaration name="that" type="DescriptorEntry" line="324"/>
                </method>
                <method name="compareTo" type="int" line="327">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="x" type="int" line="328"/>
                    <scope line="329">
                        <declaration name="that" type="DescriptorEntry" line="330"/>
                    </scope>
                </method>
                <method name="stringValue" type="String" line="336"/>
                <method name="stringValueOf" type="String" line="339">
                    <params>
                        <param name="nameRef" type="Entry"/>
                        <param name="typeRef" type="Entry"/>
                    </params>
                </method>
                <method name="prettyString" type="String" line="342"/>
                <method name="isMethod" type="boolean" line="345"/>
                <method name="getLiteralTag" type="byte" line="348"/>
            </class>
            <class name="MemberEntry" line="352">
                <extends class="Entry"/>
                <declaration name="classRef" type="ClassEntry" line="353"/>
                <declaration name="descRef" type="DescriptorEntry" line="354"/>
                <method name="getRef" type="Entry" line="355">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="computeValueHash" type="int" line="360">
                    <declaration name="hc2" type="int" line="361"/>
                </method>
                <method name="MemberEntry" type="constructor" line="364">
                    <params>
                        <param name="tag" type="byte"/>
                        <param name="classRef" type="ClassEntry"/>
                        <param name="descRef" type="DescriptorEntry"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="371">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="372"/>
                    <declaration name="that" type="MemberEntry" line="375"/>
                </method>
                <method name="compareTo" type="int" line="378">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="x" type="int" line="379"/>
                    <scope line="380">
                        <declaration name="that" type="MemberEntry" line="381"/>
                    </scope>
                </method>
                <method name="stringValue" type="String" line="387"/>
                <method name="stringValueOf" type="String" line="390">
                    <params>
                        <param name="tag" type="byte"/>
                        <param name="classRef" type="ClassEntry"/>
                        <param name="descRef" type="DescriptorEntry"/>
                    </params>
                    <declaration name="pfx" type="String" line="392"/>
                </method>
                <method name="isMethod" type="boolean" line="409"/>
            </class>
            <class name="SignatureEntry" line="413">
                <extends class="Entry"/>
                <declaration name="formRef" type="Utf8Entry" line="414"/>
                <declaration name="classRefs" type="ClassEntry[]" line="415"/>
                <declaration name="value" type="String" line="416"/>
                <declaration name="asUtf8Entry" type="Utf8Entry" line="417"/>
                <method name="getRef" type="Entry" line="418">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="SignatureEntry" type="constructor" line="422">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="parts" type="String[]" line="426"/>
                    <scope line="429"/>
                </method>
                <method name="computeValueHash" type="int" line="434"/>
                <method name="asUtf8Entry" type="Utf8Entry" line="438">
                    <scope line="439"/>
                </method>
                <method name="equals" type="boolean" line="444">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="447">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="x" type="int" line="448"/>
                    <scope line="449">
                        <declaration name="that" type="SignatureEntry" line="450"/>
                    </scope>
                </method>
                <method name="stringValue" type="String" line="455">
                    <scope line="456"/>
                </method>
                <method name="stringValueOf" type="String" line="461">
                    <params>
                        <param name="formRef" type="Utf8Entry"/>
                        <param name="classRefs" type="ClassEntry[]"/>
                    </params>
                    <declaration name="parts" type="String[]" line="462"/>
                    <scope line="464"/>
                </method>
                <method name="computeSize" type="int" line="469">
                    <params>
                        <param name="countDoublesTwice" type="boolean"/>
                    </params>
                    <declaration name="form" type="String" line="470"/>
                    <declaration name="min" type="int" line="471"/>
                    <declaration name="max" type="int" line="472"/>
                    <scope line="473"/>
                    <declaration name="size" type="int" line="477"/>
                    <scope line="478">
                        <scope line="482"/>
                        <scope line="487"/>
                    </scope>
                </method>
                <method name="isMethod" type="boolean" line="501"/>
                <method name="getLiteralTag" type="byte" line="504"/>
                <method name="prettyString" type="String" line="525">
                    <declaration name="s" type="String" line="526"/>
                    <scope line="527"/>
                    <scope line="531"/>
                    <declaration name="i" type="int" line="534"/>
                    <scope line="535"/>
                </method>
            </class>
            <method name="compareSignatures" type="int" line="541">
                <params>
                    <param name="s1" type="String"/>
                    <param name="s2" type="String"/>
                </params>
            </method>
            <method name="compareSignatures" type="int" line="544">
                <params>
                    <param name="s1" type="String"/>
                    <param name="s2" type="String"/>
                    <param name="p1" type="String[]"/>
                    <param name="p2" type="String[]"/>
                </params>
                <declaration name="S1_COMES_FIRST" type="int" line="545"/>
                <declaration name="S2_COMES_FIRST" type="int" line="546"/>
                <declaration name="c1" type="char" line="547"/>
                <declaration name="c2" type="char" line="548"/>
                <declaration name="length" type="int" line="554"/>
                <scope line="555">
                    <declaration name="res" type="int" line="556"/>
                </scope>
            </method>
            <method name="countClassParts" type="int" line="562">
                <params>
                    <param name="formRef" type="Utf8Entry"/>
                </params>
                <declaration name="num" type="int" line="563"/>
                <declaration name="s" type="String" line="564"/>
                <scope line="565"/>
            </method>
            <method name="flattenSignature" type="String" line="570">
                <params>
                    <param name="parts" type="String[]"/>
                </params>
                <declaration name="form" type="String" line="571"/>
                <declaration name="len" type="int" line="573"/>
                <scope line="574"/>
                <declaration name="sig" type="char[]" line="577"/>
                <declaration name="j" type="int" line="578"/>
                <declaration name="k" type="int" line="579"/>
                <scope line="580">
                    <declaration name="ch" type="char" line="581"/>
                    <scope line="583">
                        <declaration name="cls" type="String" line="584"/>
                    </scope>
                </scope>
            </method>
            <method name="skipClassNameChars" type="int" line="593">
                <params>
                    <param name="sig" type="String"/>
                    <param name="i" type="int"/>
                </params>
                <declaration name="len" type="int" line="594"/>
                <scope line="595">
                    <declaration name="ch" type="char" line="596"/>
                </scope>
            </method>
            <method name="structureSignature" type="String[]" line="602">
                <params>
                    <param name="sig" type="String"/>
                </params>
                <declaration name="formLen" type="int" line="604"/>
                <declaration name="nparts" type="int" line="605"/>
                <scope line="606">
                    <declaration name="ch" type="char" line="607"/>
                    <scope line="609">
                        <declaration name="i2" type="int" line="611"/>
                        <declaration name="i3" type="int" line="613"/>
                    </scope>
                </scope>
                <declaration name="form" type="char[]" line="617"/>
                <scope line="618">
                    <declaration name="parts" type="String[]" line="619"/>
                </scope>
                <declaration name="parts" type="String[]" line="622"/>
                <declaration name="j" type="int" line="623"/>
                <declaration name="k" type="int" line="624"/>
                <scope line="625">
                    <declaration name="ch" type="char" line="626"/>
                    <scope line="628">
                        <declaration name="i2" type="int" line="629"/>
                    </scope>
                </scope>
            </method>
            <declaration name="noRefs" type="Entry[]" line="640"/>
            <declaration name="noClassRefs" type="ClassEntry[]" line="641"/>
            <class name="Index" line="642">
                <extends class="AbstractList"/>
                <javadoc line="642">
                    An Index is a mapping between CP entries and small integers.                    
                </javadoc>
                <declaration name="debugName" type="String" line="646"/>
                <declaration name="cpMap" type="Entry[]" line="647"/>
                <declaration name="flattenSigs" type="boolean" line="648"/>
                <method name="getMap" type="Entry[]" line="649"/>
                <method name="Index" type="constructor" line="652">
                    <params>
                        <param name="debugName" type="String"/>
                    </params>
                </method>
                <method name="Index" type="constructor" line="655">
                    <params>
                        <param name="debugName" type="String"/>
                        <param name="cpMap" type="Entry[]"/>
                    </params>
                </method>
                <method name="setMap" type="void" line="659">
                    <params>
                        <param name="cpMap" type="Entry[]"/>
                    </params>
                </method>
                <method name="Index" type="constructor" line="663">
                    <params>
                        <param name="debugName" type="String"/>
                        <param name="cpMapList" type="Collection<Entry>"/>
                    </params>
                </method>
                <method name="setMap" type="void" line="667">
                    <params>
                        <param name="cpMapList" type="Collection<Entry>"/>
                    </params>
                </method>
                <method name="size" type="int" line="672"/>
                <method name="get" type="Object" line="675">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="getEntry" type="Entry" line="678">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="findIndexOf" type="int" line="681">
                    <params>
                        <param name="e" type="Entry"/>
                    </params>
                    <scope line="682"/>
                    <declaration name="probe" type="int" line="685"/>
                    <scope line="686">
                        <scope line="687">
                            <declaration name="se" type="SignatureEntry" line="688"/>
                        </scope>
                    </scope>
                    <declaration name="index" type="int" line="693"/>
                </method>
                <method name="contains" type="boolean" line="697">
                    <params>
                        <param name="e" type="Entry"/>
                    </params>
                </method>
                <method name="indexOf" type="int" line="700">
                    <params>
                        <param name="e" type="Entry"/>
                    </params>
                    <declaration name="index" type="int" line="701"/>
                    <scope line="702"/>
                </method>
                <method name="contains" type="boolean" line="710">
                    <params>
                        <param name="e" type="Object"/>
                    </params>
                </method>
                <method name="indexOf" type="int" line="713">
                    <params>
                        <param name="e" type="Object"/>
                    </params>
                </method>
                <method name="lastIndexOf" type="int" line="716">
                    <params>
                        <param name="e" type="Object"/>
                    </params>
                </method>
                <method name="assertIsSorted" type="boolean" line="719">
                    <scope line="720">
                        <scope line="721"/>
                    </scope>
                </method>
                <declaration name="indexKey" type="Entry[]" line="728"/>
                <declaration name="indexValue" type="int[]" line="729"/>
                <method name="clearIndex" type="void" line="730"/>
                <method name="findIndexLocation" type="int" line="734">
                    <params>
                        <param name="e" type="Entry"/>
                    </params>
                    <declaration name="size" type="int" line="735"/>
                    <declaration name="hash" type="int" line="736"/>
                    <declaration name="probe" type="int" line="737"/>
                    <declaration name="stride" type="int" line="738"/>
                    <scope line="739">
                        <declaration name="e1" type="Entry" line="740"/>
                    </scope>
                </method>
                <method name="initializeIndex" type="void" line="746">
                    <declaration name="hsize0" type="int" line="748"/>
                    <declaration name="hsize" type="int" line="749"/>
                    <scope line="750"/>
                    <scope line="755">
                        <declaration name="e" type="Entry" line="756"/>
                        <declaration name="probe" type="int" line="758"/>
                    </scope>
                </method>
                <method name="toArray" type="Object[]" line="764">
                    <params>
                        <param name="a" type="Object[]"/>
                    </params>
                    <declaration name="sz" type="int" line="765"/>
                </method>
                <method name="toArray" type="Object[]" line="771"/>
                <method name="clone" type="Object" line="774"/>
                <method name="toString" type="String" line="777"/>
                <method name="dumpString" type="String" line="780">
                    <declaration name="s" type="String" line="781"/>
                    <scope line="783"/>
                </method>
            </class>
            <method name="makeIndex" type="Index" line="790">
                <params>
                    <param name="debugName" type="String"/>
                    <param name="cpMap" type="Entry[]"/>
                </params>
            </method>
            <method name="makeIndex" type="Index" line="793">
                <params>
                    <param name="debugName" type="String"/>
                    <param name="cpMapList" type="Collection<Entry>"/>
                </params>
            </method>
            <javadoc line="796">
                Sort this index (destructively) into canonical order.                
            </javadoc>
            <method name="sort" type="void" line="799">
                <params>
                    <param name="ix" type="Index"/>
                </params>
            </method>
            <javadoc line="804">
                Return a set of indexes partitioning these entries.
                  The keys array must of length this.size(), and marks entries.
                  The result array is as long as one plus the largest key value.
                  Entries with a negative key are dropped from the partition.                
            </javadoc>
            <method name="partition" type="Index[]" line="810">
                <params>
                    <param name="ix" type="Index"/>
                    <param name="keys" type="int[]"/>
                </params>
                <declaration name="parts" type="List&lt;List&lt;Entry&gt;&gt;" line="811"/>
                <declaration name="cpMap" type="Entry[]" line="812"/>
                <scope line="814">
                    <declaration name="key" type="int" line="815"/>
                    <scope line="817"/>
                    <declaration name="part" type="List&lt;Entry&gt;" line="820"/>
                    <scope line="821"/>
                </scope>
                <declaration name="indexes" type="Index[]" line="826"/>
                <scope line="827">
                    <declaration name="part" type="List&lt;Entry&gt;" line="828"/>
                </scope>
            </method>
            <method name="partitionByTag" type="Index[]" line="835">
                <params>
                    <param name="ix" type="Index"/>
                </params>
                <declaration name="cpMap" type="Entry[]" line="836"/>
                <declaration name="keys" type="int[]" line="837"/>
                <scope line="838">
                    <declaration name="e" type="Entry" line="839"/>
                </scope>
                <declaration name="byTag" type="Index[]" line="842"/>
                <scope line="843"/>
                <scope line="847">
                    <declaration name="longer" type="Index[]" line="848"/>
                </scope>
            </method>
            <class name="IndexGroup" line="854">
                <javadoc line="854">
                    Coherent group of constant pool indexes.                    
                </javadoc>
                <declaration name="indexUntyped" type="Index" line="858"/>
                <declaration name="indexByTag" type="Index[]" line="859"/>
                <declaration name="untypedFirstIndexByTag" type="int[]" line="860"/>
                <declaration name="totalSize" type="int" line="861"/>
                <declaration name="indexByTagAndClass" type="Index[][]" line="862"/>
                <javadoc line="863">
                    Index of all CP entries of all types, in definition order.                    
                </javadoc>
                <method name="getUntypedIndex" type="Index" line="866">
                    <scope line="867">
                        <declaration name="cpMap" type="Entry[]" line="869"/>
                        <scope line="870">
                            <declaration name="ix" type="Index" line="871"/>
                            <declaration name="ixLen" type="int" line="873"/>
                            <declaration name="fillp" type="int" line="875"/>
                        </scope>
                    </scope>
                </method>
                <method name="untypedIndexOf" type="int" line="884">
                    <params>
                        <param name="e" type="Entry"/>
                    </params>
                    <scope line="885">
                        <declaration name="fillp" type="int" line="887"/>
                        <scope line="888">
                            <declaration name="tag" type="byte" line="889"/>
                            <declaration name="ix" type="Index" line="890"/>
                            <declaration name="ixLen" type="int" line="892"/>
                        </scope>
                    </scope>
                    <declaration name="tag" type="int" line="899"/>
                    <declaration name="ix" type="Index" line="900"/>
                    <declaration name="idx" type="int" line="902"/>
                </method>
                <method name="initIndexByTag" type="void" line="906">
                    <params>
                        <param name="tag" type="byte"/>
                        <param name="ix" type="Index"/>
                    </params>
                    <declaration name="cpMap" type="Entry[]" line="908"/>
                    <scope line="909"/>
                    <scope line="912"/>
                </method>
                <javadoc line="920">
                    Index of all CP entries of a given tag.                    
                </javadoc>
                <method name="getIndexByTag" type="Index" line="923">
                    <params>
                        <param name="tag" type="byte"/>
                    </params>
                    <scope line="924"/>
                    <declaration name="ix" type="Index" line="927"/>
                    <scope line="928"/>
                </method>
                <javadoc line="934">
                    Index of all CP entries of a given tag and class.                    
                </javadoc>
                <method name="getMemberIndex" type="Index" line="937">
                    <params>
                        <param name="tag" type="byte"/>
                        <param name="classRef" type="ClassEntry"/>
                    </params>
                    <declaration name="allClasses" type="Index" line="939"/>
                    <declaration name="perClassIndexes" type="Index[]" line="940"/>
                    <scope line="941">
                        <declaration name="allMembers" type="Index" line="942"/>
                        <declaration name="whichClasses" type="int[]" line="943"/>
                        <scope line="944">
                            <declaration name="e" type="MemberEntry" line="945"/>
                            <declaration name="whichClass" type="int" line="946"/>
                        </scope>
                        <scope line="950"/>
                    </scope>
                    <declaration name="whichClass" type="int" line="955"/>
                </method>
                <method name="getOverloadingIndex" type="int" line="958">
                    <params>
                        <param name="methodRef" type="MemberEntry"/>
                    </params>
                    <declaration name="ix" type="Index" line="959"/>
                    <declaration name="nameRef" type="Utf8Entry" line="960"/>
                    <declaration name="ord" type="int" line="961"/>
                    <scope line="962">
                        <declaration name="e" type="MemberEntry" line="963"/>
                    </scope>
                </method>
                <method name="getOverloadingForIndex" type="MemberEntry" line="969">
                    <params>
                        <param name="tag" type="byte"/>
                        <param name="classRef" type="ClassEntry"/>
                        <param name="name" type="String"/>
                        <param name="which" type="int"/>
                    </params>
                    <declaration name="ix" type="Index" line="971"/>
                    <declaration name="ord" type="int" line="972"/>
                    <scope line="973">
                        <declaration name="e" type="MemberEntry" line="974"/>
                        <scope line="975"/>
                    </scope>
                </method>
                <method name="haveNumbers" type="boolean" line="982">
                    <scope line="983"/>
                </method>
            </class>
            <javadoc line="998">
                Close the set cpRefs under the getRef() relation.
                  Also, if flattenSigs, replace all signatures in cpRefs
                  by their equivalent Utf8s.
                  Also, discard null from cpRefs.                
            </javadoc>
            <method name="completeReferencesIn" type="void" line="1004">
                <params>
                    <param name="cpRefs" type="Set<Entry>"/>
                    <param name="flattenSigs" type="boolean"/>
                </params>
                <scope line="1006">
                    <declaration name="e" type="Entry" line="1007"/>
                    <scope line="1010">
                        <declaration name="se" type="SignatureEntry" line="1011"/>
                        <declaration name="ue" type="Utf8Entry" line="1012"/>
                    </scope>
                    <scope line="1017">
                        <declaration name="re" type="Entry" line="1018"/>
                    </scope>
                </scope>
            </method>
            <method name="percent" type="double" line="1024">
                <params>
                    <param name="num" type="int"/>
                    <param name="den" type="int"/>
                </params>
            </method>
            <method name="tagName" type="String" line="1027">
                <params>
                    <param name="tag" type="int"/>
                </params>
            </method>
            <declaration name="TAGS_IN_ORDER" type="byte" line="1060"/>
            <declaration name="TAG_ORDER" type="byte" line="1061"/>
            <scope line="1062">
                <scope line="1064"/>
            </scope>
        </class>
    </source>