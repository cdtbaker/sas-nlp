<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.gtk">
        <import package="java.awt"/>
        <import package="java.lang.reflect"/>
        <import package="java.security"/>
        <import package="java.util"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.synth"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.UNIXToolkit"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.swing.plaf.synth.SynthIcon"/>
        <import package="com.sun.java.swing.plaf.gtk.GTKEngine.WidgetType"/>
        <class name="GTKStyle" line="14">
            <extends class="SynthStyle"/>
            <implements interface="GTKConstants"/>
            <javadoc line="14">
                @author Scott Violet                
            </javadoc>
            <method name="nativeGetXThickness" type="int" line="18"/>
            <method name="nativeGetYThickness" type="int" line="19"/>
            <method name="nativeGetColorForState" type="int" line="20"/>
            <method name="nativeGetClassValue" type="Object" line="21"/>
            <method name="nativeGetPangoFontName" type="String" line="22"/>
            <declaration name="ICON_PROPERTY_PREFIX" type="String" line="23"/>
            <declaration name="BLACK_COLOR" type="Color" line="24"/>
            <declaration name="WHITE_COLOR" type="Color" line="25"/>
            <declaration name="DEFAULT_FONT" type="Font" line="26"/>
            <declaration name="BUTTON_DEFAULT_BORDER_INSETS" type="Insets" line="27"/>
            <declaration name="GTK_GRAPHICS" type="GTKGraphicsUtils" line="28"/>
            <declaration name="CLASS_SPECIFIC_MAP" type="Map&amp;lt;String,String&amp;gt;" line="29"/>
            <javadoc line="29">
                Maps from a key that is passed to Style.get to the equivalent class
                  specific key.                
            </javadoc>
            <declaration name="ICONS_MAP" type="Map&amp;lt;String,GTKStockIcon&amp;gt;" line="34"/>
            <javadoc line="34">
                Backing style properties that are used if the style does not
                  defined the property.                
            </javadoc>
            <declaration name="font" type="Font" line="39"/>
            <javadoc line="39">
                The font used for this particular style, as determined at
                  construction time.                
            </javadoc>
            <declaration name="widgetType" type="int" line="44"/>
            <javadoc line="44">
                Widget type used when looking up class specific values.                
            </javadoc>
            <declaration name="xThickness" type="int" line="48"/>
            <javadoc line="48">
                The x/y thickness values for this particular style.                
            </javadoc>
            <method name="GTKStyle" type="constructor" line="52">
                <params>
                    <param name="userFont" type="Font"/>
                    <param name="widgetType" type="WidgetType"/>
                </params>
                <declaration name="pangoFontName" type="String" line="54"/>
                <scope line="55"/>
                <declaration name="pangoFont" type="Font" line="60"/>
                <scope line="61"/>
                <scope line="64"/>
                <scope line="67"/>
                <scope line="70"/>
            </method>
            <method name="installDefaults" type="void" line="74">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <scope line="76"/>
            </method>
            <method name="getGraphicsUtils" type="SynthGraphicsUtils" line="80">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="83">
                Returns a &lt;code&gt;SynthPainter&lt;/code&gt; that will route the appropriate
                  calls to a &lt;code&gt;GTKEngine&lt;/code&gt;.                
                <param>
                    state SynthContext indentifying requestor                    
                </param>
                <return>
                    SynthPainter                    
                </return>
            </javadoc>
            <method name="getPainter" type="SynthPainter" line="89">
                <params>
                    <param name="state" type="SynthContext"/>
                </params>
            </method>
            <method name="getColorForState" type="Color" line="92">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="type" type="ColorType"/>
                </params>
                <scope line="93"/>
                <scope line="96"/>
                <declaration name="id" type="Region" line="99"/>
                <declaration name="state" type="int" line="100"/>
                <scope line="102"/>
                <scope line="105">
                    <scope line="106">
                        <scope line="108"/>
                    </scope>
                    <scope line="112"/>
                </scope>
            </method>
            <javadoc line="118">
                Returns color specific to the current style. This method is
                  invoked when other variants don&apos;t fit.                
            </javadoc>
            <method name="getStyleSpecificColor" type="Color" line="122">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="state" type="int"/>
                    <param name="type" type="ColorType"/>
                </params>
                <scope line="124">
                    <declaration name="rgb" type="int" line="125"/>
                </scope>
            </method>
            <method name="getGTKColor" type="Color" line="129">
                <params>
                    <param name="state" type="int"/>
                    <param name="type" type="ColorType"/>
                </params>
            </method>
            <javadoc line="132">
                Returns the color for the specified state.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    state to get the color for                    
                </param>
                <param>
                    type of the color                    
                </param>
                <return>
                    Color to render with                    
                </return>
            </javadoc>
            <method name="getGTKColor" type="Color" line="139">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="state" type="int"/>
                    <param name="type" type="ColorType"/>
                </params>
                <scope line="140">
                    <declaration name="c" type="JComponent" line="141"/>
                    <declaration name="id" type="Region" line="142"/>
                    <scope line="144">
                        <scope line="145">
                            <declaration name="bg" type="Color" line="146"/>
                            <scope line="147"/>
                        </scope>
                        <scope line="151">
                            <declaration name="fg" type="Color" line="152"/>
                            <scope line="153"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getColor" type="Color" line="161">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="type" type="ColorType"/>
                </params>
                <declaration name="c" type="JComponent" line="162"/>
                <declaration name="id" type="Region" line="163"/>
                <declaration name="state" type="int" line="164"/>
                <scope line="165">
                    <scope line="166"/>
                    <scope line="169"/>
                </scope>
                <scope line="173"/>
                <scope line="176">
                    <scope line="177"/>
                    <scope line="180"/>
                    <scope line="183">
                        <declaration name="color" type="Color" line="184"/>
                        <scope line="185"/>
                    </scope>
                </scope>
            </method>
            <method name="getFontForState" type="Font" line="192">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="195">
                Returns the X thickness to use for this GTKStyle.                
                <return>
                    x thickness.                    
                </return>
            </javadoc>
            <method name="getXThickness" type="int" line="199"/>
            <javadoc line="202">
                Returns the Y thickness to use for this GTKStyle.                
                <return>
                    y thickness.                    
                </return>
            </javadoc>
            <method name="getYThickness" type="int" line="206"/>
            <javadoc line="209">
                Returns the Insets. If &lt;code&gt;insets&lt;/code&gt; is non-null the resulting
                  insets will be placed in it, otherwise a new Insets object will be
                  created and returned.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <param>
                    insets Where to place Insets                    
                </param>
                <return>
                    Insets.                    
                </return>
            </javadoc>
            <method name="getInsets" type="Insets" line="217">
                <params>
                    <param name="state" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="id" type="Region" line="218"/>
                <declaration name="component" type="JComponent" line="219"/>
                <declaration name="name" type="String" line="220"/>
                <scope line="221"/>
                <scope line="224"/>
                <scope line="227">
                    <scope line="228"/>
                    <scope line="231"/>
                </scope>
                <scope line="235"/>
                <scope line="238"/>
                <scope line="241"/>
                <scope line="244"/>
                <scope line="247"/>
                <scope line="250">
                    <scope line="251"/>
                    <scope line="254"/>
                    <scope line="257"/>
                </scope>
                <scope line="261"/>
                <scope line="264"/>
                <scope line="267"/>
                <scope line="270"/>
                <scope line="273"/>
                <scope line="276"/>
                <scope line="279">
                    <scope line="280"/>
                </scope>
                <scope line="285"/>
                <scope line="288"/>
            </method>
            <method name="getButtonInsets" type="Insets" line="293">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="CHILD_SPACING" type="int" line="294"/>
                <declaration name="focusSize" type="int" line="295"/>
                <declaration name="focusPad" type="int" line="296"/>
                <declaration name="xThickness" type="int" line="297"/>
                <declaration name="yThickness" type="int" line="298"/>
                <declaration name="w" type="int" line="299"/>
                <declaration name="h" type="int" line="300"/>
                <declaration name="component" type="Component" line="303"/>
                <scope line="304">
                    <declaration name="defaultInsets" type="Insets" line="305"/>
                </scope>
            </method>
            <method name="getRadioInsets" type="Insets" line="313">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="focusSize" type="int" line="314"/>
                <declaration name="focusPad" type="int" line="315"/>
                <declaration name="totalFocus" type="int" line="316"/>
                <scope line="319"/>
                <scope line="323"/>
            </method>
            <method name="getMenuBarInsets" type="Insets" line="329">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="internalPadding" type="int" line="330"/>
                <declaration name="xThickness" type="int" line="331"/>
                <declaration name="yThickness" type="int" line="332"/>
            </method>
            <method name="getMenuItemInsets" type="Insets" line="337">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="horizPadding" type="int" line="338"/>
                <declaration name="xThickness" type="int" line="339"/>
                <declaration name="yThickness" type="int" line="340"/>
            </method>
            <method name="getThicknessInsets" type="Insets" line="345">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
            </method>
            <method name="getSeparatorInsets" type="Insets" line="350">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="horizPadding" type="int" line="351"/>
                <scope line="352"/>
            </method>
            <method name="getSliderTrackInsets" type="Insets" line="359">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="focusSize" type="int" line="360"/>
                <declaration name="focusPad" type="int" line="361"/>
            </method>
            <method name="getSimpleInsets" type="Insets" line="365">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="getTabbedPaneTabInsets" type="Insets" line="369">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="xThickness" type="int" line="370"/>
                <declaration name="yThickness" type="int" line="371"/>
                <declaration name="focusSize" type="int" line="372"/>
                <declaration name="pad" type="int" line="373"/>
            </method>
            <method name="getTextFieldInsets" type="Insets" line="378">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="xThickness" type="int" line="380"/>
                <declaration name="yThickness" type="int" line="381"/>
                <declaration name="interiorFocus" type="boolean" line="382"/>
                <declaration name="focusSize" type="int" line="383"/>
                <scope line="384"/>
            </method>
            <method name="getScrollBarInsets" type="Insets" line="393">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="troughBorder" type="int" line="394"/>
                <declaration name="c" type="JComponent" line="396"/>
                <scope line="397">
                    <declaration name="spacing" type="int" line="398"/>
                    <scope line="399"/>
                    <scope line="402">
                        <scope line="403"/>
                        <scope line="406"/>
                    </scope>
                </scope>
                <scope line="411">
                    <scope line="412">
                        <declaration name="focusSize" type="int" line="413"/>
                        <declaration name="focusPad" type="int" line="414"/>
                        <declaration name="totalFocus" type="int" line="415"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="424">
                Returns the value for a class specific property for a particular
                  WidgetType.  This method is useful in those cases where we need to
                  fetch a value for a Region that is not associated with the component
                  currently in use (e.g. we need to figure out the insets for a
                  SCROLL_BAR, but certain values can only be extracted from a
                  SCROLL_PANE region).                
                <param>
                    wt WidgetType for which to fetch the value                    
                </param>
                <param>
                    key Key identifying class specific value                    
                </param>
                <return>
                    Value, or null if one has not been defined                    
                </return>
            </javadoc>
            <method name="getClassSpecificValue" type="Object" line="435">
                <params>
                    <param name="wt" type="WidgetType"/>
                    <param name="key" type="String"/>
                </params>
                <scope line="436"/>
            </method>
            <javadoc line="440">
                Convenience method to get a class specific integer value for
                  a particular WidgetType.                
                <param>
                    wt WidgetType for which to fetch the value                    
                </param>
                <param>
                    key Key identifying class specific value                    
                </param>
                <param>
                    defaultValue Returned if there is no value for the specified
                      type                    
                </param>
                <return>
                    Value, or defaultValue if &lt;code&gt;key&lt;/code&gt; is not defined                    
                </return>
            </javadoc>
            <method name="getClassSpecificIntValue" type="int" line="449">
                <params>
                    <param name="wt" type="WidgetType"/>
                    <param name="key" type="String"/>
                    <param name="defaultValue" type="int"/>
                </params>
                <declaration name="value" type="Object" line="450"/>
                <scope line="451"/>
            </method>
            <javadoc line="456">
                Returns the value for a class specific property. A class specific value
                  is a value that will be picked up based on class hierarchy.                
                <param>
                    key Key identifying class specific value                    
                </param>
                <return>
                    Value, or null if one has not been defined.                    
                </return>
            </javadoc>
            <method name="getClassSpecificValue" type="Object" line="462">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="463"/>
            </method>
            <javadoc line="467">
                Convenience method to get a class specific integer value.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <param>
                    key Key identifying class specific value                    
                </param>
                <param>
                    defaultValue Returned if there is no value for the specified
                      type                    
                </param>
                <return>
                    Value, or defaultValue if &lt;code&gt;key&lt;/code&gt; is not defined                    
                </return>
            </javadoc>
            <method name="getClassSpecificIntValue" type="int" line="475">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="String"/>
                    <param name="defaultValue" type="int"/>
                </params>
                <declaration name="value" type="Object" line="476"/>
                <scope line="477"/>
            </method>
            <javadoc line="482">
                Convenience method to get a class specific Insets value.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <param>
                    key Key identifying class specific value                    
                </param>
                <param>
                    defaultValue Returned if there is no value for the specified
                      type                    
                </param>
                <return>
                    Value, or defaultValue if &lt;code&gt;key&lt;/code&gt; is not defined                    
                </return>
            </javadoc>
            <method name="getClassSpecificInsetsValue" type="Insets" line="490">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="String"/>
                    <param name="defaultValue" type="Insets"/>
                </params>
                <declaration name="value" type="Object" line="491"/>
                <scope line="492"/>
            </method>
            <javadoc line="497">
                Convenience method to get a class specific Boolean value.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <param>
                    key Key identifying class specific value                    
                </param>
                <param>
                    defaultValue Returned if there is no value for the specified
                      type                    
                </param>
                <return>
                    Value, or defaultValue if &lt;code&gt;key&lt;/code&gt; is not defined                    
                </return>
            </javadoc>
            <method name="getClassSpecificBoolValue" type="boolean" line="505">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="String"/>
                    <param name="defaultValue" type="boolean"/>
                </params>
                <declaration name="value" type="Object" line="506"/>
                <scope line="507"/>
            </method>
            <javadoc line="512">
                Returns the value to initialize the opacity property of the Component
                  to. A Style should NOT assume the opacity will remain this value, the
                  developer may reset it or override it.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <return>
                    opaque Whether or not the JComponent is opaque.                    
                </return>
            </javadoc>
            <method name="isOpaque" type="boolean" line="519">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <declaration name="region" type="Region" line="520"/>
                <scope line="521"/>
                <declaration name="c" type="Component" line="524"/>
                <declaration name="name" type="String" line="525"/>
                <scope line="526"/>
            </method>
            <method name="get" type="Object" line="531">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="classKey" type="String" line="532"/>
                <scope line="533">
                    <declaration name="value" type="Object" line="534"/>
                    <scope line="535"/>
                </scope>
                <scope line="539"/>
                <scope line="542"/>
                <scope line="545">
                    <declaration name="len" type="int" line="546"/>
                    <declaration name="sb" type="JScrollBar" line="547"/>
                    <scope line="548"/>
                    <scope line="551"/>
                </scope>
                <scope line="555">
                    <declaration name="sep" type="JSeparator" line="556"/>
                    <scope line="557"/>
                    <scope line="560"/>
                </scope>
                <scope line="564">
                    <declaration name="size" type="int" line="565"/>
                </scope>
                <scope line="568">
                    <declaration name="sb" type="JScrollBar" line="569"/>
                    <declaration name="horiz" type="boolean" line="570"/>
                    <declaration name="wt" type="WidgetType" line="571"/>
                    <declaration name="sliderWidth" type="int" line="572"/>
                    <declaration name="stepperSize" type="int" line="573"/>
                </scope>
                <scope line="576">
                    <declaration name="name" type="String" line="577"/>
                    <scope line="578">
                        <declaration name="pangoFontName" type="String" line="579"/>
                        <scope line="580"/>
                        <declaration name="arrowSize" type="int" line="583"/>
                    </scope>
                </scope>
                <scope line="587">
                    <declaration name="indicatorSpacing" type="int" line="588"/>
                    <declaration name="focusSize" type="int" line="589"/>
                    <declaration name="focusPad" type="int" line="590"/>
                </scope>
                <declaration name="stockIcon" type="GTKStockIcon" line="593"/>
                <scope line="594"/>
                <scope line="597"/>
                <scope line="600">
                    <declaration name="value" type="Object" line="601"/>
                    <scope line="602">
                        <declaration name="focusLineWidth" type="int" line="603"/>
                        <scope line="604"/>
                    </scope>
                </scope>
            </method>
            <method name="getStockIcon" type="Icon" line="612">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <declaration name="direction" type="TextDirection" line="613"/>
                <scope line="614">
                    <declaration name="co" type="ComponentOrientation" line="615"/>
                    <scope line="616"/>
                </scope>
                <declaration name="icon" type="Icon" line="620"/>
                <scope line="621"/>
                <declaration name="propName" type="String" line="624"/>
                <declaration name="img" type="Image" line="625"/>
                <scope line="626"/>
            </method>
            <method name="getStyleSpecificIcon" type="Icon" line="631">
                <params>
                    <param name="key" type="String"/>
                    <param name="direction" type="TextDirection"/>
                    <param name="type" type="int"/>
                </params>
                <declaration name="tk" type="UNIXToolkit" line="632"/>
                <declaration name="img" type="Image" line="633"/>
            </method>
            <class name="GTKStockIconInfo" line="636">
                <declaration name="ICON_TYPE_MAP" type="Map&amp;lt;String,Integer&amp;gt;" line="637"/>
                <declaration name="ICON_SIZE_KEY" type="Object" line="638"/>
                <method name="getIconSizesMap" type="Dimension[]" line="639">
                    <declaration name="appContext" type="AppContext" line="640"/>
                    <declaration name="iconSizes" type="Dimension[]" line="641"/>
                    <scope line="642"/>
                </method>
                <javadoc line="655">
                    Return the size of a particular icon type (logical size)                    
                    <param>
                        type icon type (GtkIconSize value)                        
                    </param>
                    <return>
                        a Dimension object, or null if lsize is invalid                        
                    </return>
                </javadoc>
                <method name="getIconSize" type="Dimension" line="660">
                    <params>
                        <param name="type" type="int"/>
                    </params>
                    <declaration name="iconSizes" type="Dimension[]" line="661"/>
                </method>
                <javadoc line="664">
                    Change icon size in a type to size mapping. This is called by code
                      that parses the gtk-icon-sizes setting                    
                    <param>
                        type icon type (GtkIconSize value)                        
                    </param>
                    <param>
                        w the new icon width                        
                    </param>
                    <param>
                        h the new icon height                        
                    </param>
                </javadoc>
                <method name="setIconSize" type="void" line="671">
                    <params>
                        <param name="type" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <declaration name="iconSizes" type="Dimension[]" line="672"/>
                    <scope line="673"/>
                </method>
                <javadoc line="677">
                    Return icon type (GtkIconSize value) given a symbolic name which can
                      occur in a theme file.                    
                    <param>
                        size symbolic name, e.g. gtk-button                        
                    </param>
                    <return>
                        icon type. Valid types are 1 to 6                        
                    </return>
                </javadoc>
                <method name="getIconType" type="int" line="683">
                    <params>
                        <param name="size" type="String"/>
                    </params>
                    <scope line="684"/>
                    <scope line="687"/>
                    <declaration name="n" type="Integer" line="690"/>
                </method>
                <method name="initIconTypeMap" type="void" line="693"/>
            </class>
            <class name="GTKStockIcon" line="703">
                <extends class="SynthIcon"/>
                <javadoc line="703">
                    An Icon that is fetched using getStockIcon.                    
                </javadoc>
                <declaration name="key" type="String" line="707"/>
                <declaration name="size" type="int" line="708"/>
                <declaration name="loadedLTR" type="boolean" line="709"/>
                <declaration name="loadedRTL" type="boolean" line="710"/>
                <declaration name="ltrIcon" type="Icon" line="711"/>
                <declaration name="rtlIcon" type="Icon" line="712"/>
                <declaration name="style" type="SynthStyle" line="713"/>
                <method name="GTKStockIcon" type="constructor" line="714">
                    <params>
                        <param name="key" type="String"/>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <method name="paintIcon" type="void" line="718">
                    <params>
                        <param name="context" type="SynthContext"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <declaration name="icon" type="Icon" line="719"/>
                    <scope line="720">
                        <scope line="721"/>
                        <scope line="724"/>
                    </scope>
                </method>
                <method name="getIconWidth" type="int" line="729">
                    <params>
                        <param name="context" type="SynthContext"/>
                    </params>
                    <declaration name="icon" type="Icon" line="730"/>
                    <scope line="731"/>
                </method>
                <method name="getIconHeight" type="int" line="736">
                    <params>
                        <param name="context" type="SynthContext"/>
                    </params>
                    <declaration name="icon" type="Icon" line="737"/>
                    <scope line="738"/>
                </method>
                <method name="getIcon" type="Icon" line="743">
                    <params>
                        <param name="context" type="SynthContext"/>
                    </params>
                    <scope line="744">
                        <declaration name="co" type="ComponentOrientation" line="745"/>
                        <declaration name="style" type="SynthStyle" line="746"/>
                        <scope line="747"/>
                        <scope line="751">
                            <scope line="752"/>
                        </scope>
                        <scope line="758"/>
                    </scope>
                </method>
            </class>
            <class name="GTKLazyValue" line="767">
                <implements interface="UIDefaults.LazyValue"/>
                <javadoc line="767">
                    GTKLazyValue is a slimmed down version of &lt;code&gt;ProxyLaxyValue&lt;/code&gt;.
                      The code is duplicate so that it can get at the package private
                      classes in gtk.                    
                </javadoc>
                <declaration name="className" type="String" line="773"/>
                <javadoc line="773">
                    Name of the class to create.                    
                </javadoc>
                <declaration name="methodName" type="String" line="777"/>
                <method name="GTKLazyValue" type="constructor" line="778">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="GTKLazyValue" type="constructor" line="781">
                    <params>
                        <param name="name" type="String"/>
                        <param name="methodName" type="String"/>
                    </params>
                </method>
                <method name="createValue" type="Object" line="785">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <scope line="786">
                        <declaration name="c" type="Class" line="787"/>
                        <scope line="788"/>
                        <declaration name="m" type="Method" line="791"/>
                    </scope>
                    <scope line="794"/>
                    <scope line="796"/>
                    <scope line="798"/>
                    <scope line="800"/>
                    <scope line="802"/>
                </method>
            </class>
            <scope line="807"/>
        </class>
    </source>