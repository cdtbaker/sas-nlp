<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.gtk">
        <import package="java.awt"/>
        <import package="java.lang.reflect"/>
        <import package="java.security"/>
        <import package="java.util"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.synth"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.UNIXToolkit"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.swing.plaf.synth.SynthIcon"/>
        <import package="com.sun.java.swing.plaf.gtk.GTKEngine.WidgetType"/>
        <class name="GTKStyle" line="43">
            <extends class="SynthStyle"/>
            <comment line="434">
                This is used for both RADIO_BUTTON and CHECK_BOX.                
            </comment>
            <comment line="528">
                NOTE: this is called for ComboBox, and FormattedTextField also                
            </comment>
            <implements interface="GTKConstants"/>
            <javadoc line="43">
                @author Scott Violet                
            </javadoc>
            <method name="nativeGetXThickness" type="int" line="49"/>
            <method name="nativeGetYThickness" type="int" line="50"/>
            <method name="nativeGetColorForState" type="int" line="51"/>
            <method name="nativeGetClassValue" type="Object" line="53"/>
            <method name="nativeGetPangoFontName" type="String" line="55"/>
            <declaration name="ICON_PROPERTY_PREFIX" type="String" line="57"/>
            <declaration name="BLACK_COLOR" type="Color" line="59"/>
            <declaration name="WHITE_COLOR" type="Color" line="60"/>
            <declaration name="DEFAULT_FONT" type="Font" line="62"/>
            <declaration name="BUTTON_DEFAULT_BORDER_INSETS" type="Insets" line="64"/>
            <declaration name="GTK_GRAPHICS" type="GTKGraphicsUtils" line="66"/>
            <declaration name="CLASS_SPECIFIC_MAP" type="Map&lt;String,String&gt;" line="68"/>
            <javadoc line="68">
                Maps from a key that is passed to Style.get to the equivalent class
                  specific key.                
            </javadoc>
            <declaration name="ICONS_MAP" type="Map&lt;String,GTKStockIcon&gt;" line="74"/>
            <javadoc line="74">
                Backing style properties that are used if the style does not
                  defined the property.                
            </javadoc>
            <declaration name="font" type="Font" line="80"/>
            <javadoc line="80">
                The font used for this particular style, as determined at
                  construction time.                
            </javadoc>
            <declaration name="widgetType" type="int" line="86"/>
            <javadoc line="86">
                Widget type used when looking up class specific values.                
            </javadoc>
            <declaration name="xThickness" type="int" line="89"/>
            <javadoc line="89">
                The x/y thickness values for this particular style.                
            </javadoc>
            <method name="GTKStyle" type="constructor" line="92">
                <params>
                    <param name="userFont" type="Font"/>
                    <param name="widgetType" type="WidgetType"/>
                </params>
                <declaration name="pangoFontName" type="String" line="95"/>
                <scope line="96"/>
                <declaration name="pangoFont" type="Font" line="102"/>
                <scope line="103"/>
                <scope line="106"/>
                <scope line="108"/>
                <scope line="110"/>
            </method>
            <method name="installDefaults" type="void" line="116">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <scope line="118"/>
            </method>
            <method name="getGraphicsUtils" type="SynthGraphicsUtils" line="126">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="130">
                Returns a &lt;code&gt;SynthPainter&lt;/code&gt; that will route the appropriate
                  calls to a &lt;code&gt;GTKEngine&lt;/code&gt;.                
                <param>
                    state SynthContext indentifying requestor                    
                </param>
                <return>
                    SynthPainter                    
                </return>
            </javadoc>
            <method name="getPainter" type="SynthPainter" line="138">
                <params>
                    <param name="state" type="SynthContext"/>
                </params>
            </method>
            <method name="getColorForState" type="Color" line="142">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="type" type="ColorType"/>
                </params>
                <scope line="143"/>
                <scope line="146"/>
                <declaration name="id" type="Region" line="150"/>
                <declaration name="state" type="int" line="151"/>
                <scope line="166"/>
                <scope line="171">
                    <scope line="172">
                        <scope line="174"/>
                    </scope>
                    <scope line="177"/>
                </scope>
            </method>
            <javadoc line="185">
                Returns color specific to the current style. This method is
                  invoked when other variants don&apos;t fit.                
            </javadoc>
            <method name="getStyleSpecificColor" type="Color" line="191">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="state" type="int"/>
                    <param name="type" type="ColorType"/>
                </params>
                <scope line="193">
                    <declaration name="rgb" type="int" line="194"/>
                </scope>
            </method>
            <method name="getGTKColor" type="Color" line="200">
                <params>
                    <param name="state" type="int"/>
                    <param name="type" type="ColorType"/>
                </params>
            </method>
            <javadoc line="204">
                Returns the color for the specified state.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    state to get the color for                    
                </param>
                <param>
                    type of the color                    
                </param>
                <return>
                    Color to render with                    
                </return>
            </javadoc>
            <method name="getGTKColor" type="Color" line="212">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="state" type="int"/>
                    <param name="type" type="ColorType"/>
                </params>
                <scope line="213">
                    <declaration name="c" type="JComponent" line="214"/>
                    <declaration name="id" type="Region" line="215"/>
                    <scope line="219">
                        <scope line="221">
                            <declaration name="bg" type="Color" line="222"/>
                            <scope line="223"/>
                        </scope>
                        <scope line="228">
                            <declaration name="fg" type="Color" line="229"/>
                            <scope line="230"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getColor" type="Color" line="241">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="type" type="ColorType"/>
                </params>
                <comment line="260">
                    For the enabled state, prefer the widget&apos;s colors                    
                </comment>
                <comment line="269">
                    If getForeground returns a non-UIResource it means the
                     developer has explicitly set the foreground, use it over
                     that of TEXT_FOREGROUND as that is typically the expected
                     behavior.                    
                </comment>
                <declaration name="c" type="JComponent" line="242"/>
                <declaration name="id" type="Region" line="243"/>
                <declaration name="state" type="int" line="244"/>
                <scope line="246">
                    <scope line="247"/>
                    <scope line="250"/>
                </scope>
                <scope line="255"/>
                <scope line="260">
                    <scope line="261"/>
                    <scope line="264"/>
                    <scope line="267">
                        <declaration name="color" type="Color" line="272"/>
                        <scope line="273"/>
                    </scope>
                </scope>
            </method>
            <method name="getFontForState" type="Font" line="281">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="285">
                Returns the X thickness to use for this GTKStyle.                
                <return>
                    x thickness.                    
                </return>
            </javadoc>
            <method name="getXThickness" type="int" line="290"/>
            <javadoc line="294">
                Returns the Y thickness to use for this GTKStyle.                
                <return>
                    y thickness.                    
                </return>
            </javadoc>
            <method name="getYThickness" type="int" line="299"/>
            <javadoc line="303">
                Returns the Insets. If &lt;code&gt;insets&lt;/code&gt; is non-null the resulting
                  insets will be placed in it, otherwise a new Insets object will be
                  created and returned.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <param>
                    insets Where to place Insets                    
                </param>
                <return>
                    Insets.                    
                </return>
            </javadoc>
            <method name="getInsets" type="Insets" line="313">
                <params>
                    <param name="state" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="id" type="Region" line="314"/>
                <declaration name="component" type="JComponent" line="315"/>
                <declaration name="name" type="String" line="316"/>
                <scope line="318"/>
                <scope line="320"/>
                <scope line="325">
                    <scope line="327"/>
                    <scope line="329"/>
                </scope>
                <scope line="333"/>
                <scope line="336"/>
                <scope line="342"/>
                <scope line="345"/>
                <scope line="348"/>
                <scope line="351">
                    <scope line="352"/>
                    <scope line="355"/>
                    <scope line="358"/>
                </scope>
                <scope line="362"/>
                <scope line="365"/>
                <scope line="372"/>
                <scope line="375"/>
                <scope line="378"/>
                <scope line="381"/>
                <scope line="384">
                    <scope line="385"/>
                </scope>
                <scope line="391"/>
                <scope line="393"/>
            </method>
            <method name="getButtonInsets" type="Insets" line="399">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <comment line="401">
                    The following calculations are derived from gtkbutton.c
                     (GTK+ version 2.8.20), gtk_button_size_allocate() method.                    
                </comment>
                <comment line="418">
                    Include the default border insets, but only for JButtons
                     that are default capable.  Note that
                     JButton.getDefaultCapable() returns true by default, but
                     GtkToolButtons are never default capable, so we skip this
                     step if the button is contained in a toolbar.                    
                </comment>
                <declaration name="CHILD_SPACING" type="int" line="402"/>
                <declaration name="focusSize" type="int" line="403"/>
                <declaration name="focusPad" type="int" line="404"/>
                <declaration name="xThickness" type="int" line="405"/>
                <declaration name="yThickness" type="int" line="406"/>
                <declaration name="w" type="int" line="407"/>
                <declaration name="h" type="int" line="408"/>
                <declaration name="component" type="Component" line="412"/>
                <scope line="416">
                    <declaration name="defaultInsets" type="Insets" line="422"/>
                </scope>
            </method>
            <method name="getRadioInsets" type="Insets" line="436">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <comment line="438">
                    The following calculations are derived from gtkcheckbutton.c
                     (GTK+ version 2.8.20), gtk_check_button_size_allocate() method.                    
                </comment>
                <comment line="446">
                    Note: GTKIconFactory.DelegateIcon will have already included the
                     &quot;indicator-spacing&quot; value in the size of the indicator icon,
                     which explains why we use zero as the left inset (or right inset
                     in the RTL case); see 6489585 for more details.                    
                </comment>
                <declaration name="focusSize" type="int" line="439"/>
                <declaration name="focusPad" type="int" line="441"/>
                <declaration name="totalFocus" type="int" line="443"/>
                <scope line="451"/>
                <scope line="454"/>
            </method>
            <method name="getMenuBarInsets" type="Insets" line="462">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <comment line="464">
                    The following calculations are derived from gtkmenubar.c
                     (GTK+ version 2.8.20), gtk_menu_bar_size_allocate() method.                    
                </comment>
                <declaration name="internalPadding" type="int" line="465"/>
                <declaration name="xThickness" type="int" line="467"/>
                <declaration name="yThickness" type="int" line="468"/>
            </method>
            <method name="getMenuItemInsets" type="Insets" line="474">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <comment line="476">
                    The following calculations are derived from gtkmenuitem.c
                     (GTK+ version 2.8.20), gtk_menu_item_size_allocate() method.                    
                </comment>
                <declaration name="horizPadding" type="int" line="477"/>
                <declaration name="xThickness" type="int" line="479"/>
                <declaration name="yThickness" type="int" line="480"/>
            </method>
            <method name="getThicknessInsets" type="Insets" line="486">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
            </method>
            <method name="getSeparatorInsets" type="Insets" line="492">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="horizPadding" type="int" line="493"/>
                <scope line="494"/>
            </method>
            <method name="getSliderTrackInsets" type="Insets" line="503">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="focusSize" type="int" line="504"/>
                <declaration name="focusPad" type="int" line="505"/>
            </method>
            <method name="getSimpleInsets" type="Insets" line="511">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="getTabbedPaneTabInsets" type="Insets" line="516">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="xThickness" type="int" line="517"/>
                <declaration name="yThickness" type="int" line="518"/>
                <declaration name="focusSize" type="int" line="519"/>
                <declaration name="pad" type="int" line="520"/>
            </method>
            <method name="getTextFieldInsets" type="Insets" line="528">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="xThickness" type="int" line="532"/>
                <declaration name="yThickness" type="int" line="533"/>
                <declaration name="interiorFocus" type="boolean" line="534"/>
                <declaration name="focusSize" type="int" line="536"/>
                <scope line="538"/>
            </method>
            <method name="getScrollBarInsets" type="Insets" line="549">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <comment line="557">
                    This scrollbar is part of a scrollpane; use only the
                     &quot;scrollbar-spacing&quot; style property to determine the padding
                     between the scrollbar and its parent scrollpane.                    
                </comment>
                <comment line="573">
                    This is a standalone scrollbar; leave enough room for the
                     focus line in addition to the trough border.                    
                </comment>
                <declaration name="troughBorder" type="int" line="550"/>
                <declaration name="c" type="JComponent" line="554"/>
                <scope line="555">
                    <declaration name="spacing" type="int" line="559"/>
                    <scope line="562"/>
                    <scope line="564">
                        <scope line="565"/>
                        <scope line="567"/>
                    </scope>
                </scope>
                <scope line="571">
                    <scope line="574">
                        <declaration name="focusSize" type="int" line="575"/>
                        <declaration name="focusPad" type="int" line="577"/>
                        <declaration name="totalFocus" type="int" line="579"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="589">
                Returns the value for a class specific property for a particular
                  WidgetType.  This method is useful in those cases where we need to
                  fetch a value for a Region that is not associated with the component
                  currently in use (e.g. we need to figure out the insets for a
                  SCROLL_BAR, but certain values can only be extracted from a
                  SCROLL_PANE region).                
                <param>
                    wt WidgetType for which to fetch the value                    
                </param>
                <param>
                    key Key identifying class specific value                    
                </param>
                <return>
                    Value, or null if one has not been defined                    
                </return>
            </javadoc>
            <method name="getClassSpecificValue" type="Object" line="601">
                <params>
                    <param name="wt" type="WidgetType"/>
                    <param name="key" type="String"/>
                </params>
                <scope line="602"/>
            </method>
            <javadoc line="607">
                Convenience method to get a class specific integer value for
                  a particular WidgetType.                
                <param>
                    wt WidgetType for which to fetch the value                    
                </param>
                <param>
                    key Key identifying class specific value                    
                </param>
                <param>
                    defaultValue Returned if there is no value for the specified
                      type                    
                </param>
                <return>
                    Value, or defaultValue if &lt;code&gt;key&lt;/code&gt; is not defined                    
                </return>
            </javadoc>
            <method name="getClassSpecificIntValue" type="int" line="619">
                <params>
                    <param name="wt" type="WidgetType"/>
                    <param name="key" type="String"/>
                    <param name="defaultValue" type="int"/>
                </params>
                <declaration name="value" type="Object" line="620"/>
                <scope line="621"/>
            </method>
            <javadoc line="627">
                Returns the value for a class specific property. A class specific value
                  is a value that will be picked up based on class hierarchy.                
                <param>
                    key Key identifying class specific value                    
                </param>
                <return>
                    Value, or null if one has not been defined.                    
                </return>
            </javadoc>
            <method name="getClassSpecificValue" type="Object" line="634">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="635"/>
            </method>
            <javadoc line="640">
                Convenience method to get a class specific integer value.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <param>
                    key Key identifying class specific value                    
                </param>
                <param>
                    defaultValue Returned if there is no value for the specified
                      type                    
                </param>
                <return>
                    Value, or defaultValue if &lt;code&gt;key&lt;/code&gt; is not defined                    
                </return>
            </javadoc>
            <method name="getClassSpecificIntValue" type="int" line="651">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="String"/>
                    <param name="defaultValue" type="int"/>
                </params>
                <declaration name="value" type="Object" line="652"/>
                <scope line="654"/>
            </method>
            <javadoc line="660">
                Convenience method to get a class specific Insets value.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <param>
                    key Key identifying class specific value                    
                </param>
                <param>
                    defaultValue Returned if there is no value for the specified
                      type                    
                </param>
                <return>
                    Value, or defaultValue if &lt;code&gt;key&lt;/code&gt; is not defined                    
                </return>
            </javadoc>
            <method name="getClassSpecificInsetsValue" type="Insets" line="671">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="String"/>
                    <param name="defaultValue" type="Insets"/>
                </params>
                <declaration name="value" type="Object" line="672"/>
                <scope line="674"/>
            </method>
            <javadoc line="680">
                Convenience method to get a class specific Boolean value.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <param>
                    key Key identifying class specific value                    
                </param>
                <param>
                    defaultValue Returned if there is no value for the specified
                      type                    
                </param>
                <return>
                    Value, or defaultValue if &lt;code&gt;key&lt;/code&gt; is not defined                    
                </return>
            </javadoc>
            <method name="getClassSpecificBoolValue" type="boolean" line="691">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="String"/>
                    <param name="defaultValue" type="boolean"/>
                </params>
                <declaration name="value" type="Object" line="692"/>
                <scope line="694"/>
            </method>
            <javadoc line="700">
                Returns the value to initialize the opacity property of the Component
                  to. A Style should NOT assume the opacity will remain this value, the
                  developer may reset it or override it.                
                <param>
                    context SynthContext indentifying requestor                    
                </param>
                <return>
                    opaque Whether or not the JComponent is opaque.                    
                </return>
            </javadoc>
            <method name="isOpaque" type="boolean" line="709">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <declaration name="region" type="Region" line="710"/>
                <scope line="734"/>
                <declaration name="c" type="Component" line="737"/>
                <declaration name="name" type="String" line="738"/>
                <scope line="739"/>
            </method>
            <method name="get" type="Object" line="746">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                </params>
                <comment line="748">
                    See if this is a class specific value.                    
                </comment>
                <comment line="757">
                    Is it a specific value ?                    
                </comment>
                <comment line="801">
                    Believe it or not, the size of a spinner arrow button is
                     dependent upon the size of the spinner&apos;s font.  These
                     calculations come from gtkspinbutton.c (version 2.8.20),
                     spin_button_get_arrow_size() method.                    
                </comment>
                <comment line="814">
                    For all other kinds of arrow buttons (e.g. combobox arrow
                     buttons), we will simply fall back on the value of
                     ArrowButton.size as defined in the UIDefaults for
                     GTKLookAndFeel when we call UIManager.get() below...                    
                </comment>
                <comment line="822">
                    The iconTextGap value needs to include &quot;indicator-spacing&quot;
                     and it also needs to leave enough space for the focus line,
                     which falls between the indicator icon and the text.
                     See getRadioInsets() and 6489585 for more details.                    
                </comment>
                <comment line="835">
                    Is it a stock icon ?                    
                </comment>
                <comment line="845">
                    Is it another kind of value ?                    
                </comment>
                <comment line="847">
                    For backward compatability we&apos;ll fallback to the UIManager.
                     We don&apos;t go to the UIManager for engine as the engine is GTK
                     specific.                    
                </comment>
                <comment line="861">
                    Don&apos;t call super, we don&apos;t want to pick up defaults from
                     SynthStyle.                    
                </comment>
                <declaration name="classKey" type="String" line="748"/>
                <scope line="749">
                    <declaration name="value" type="Object" line="750"/>
                    <scope line="751"/>
                </scope>
                <scope line="757"/>
                <scope line="760"/>
                <scope line="763">
                    <declaration name="len" type="int" line="764"/>
                    <declaration name="sb" type="JScrollBar" line="766"/>
                    <scope line="767"/>
                    <scope line="769"/>
                </scope>
                <scope line="773">
                    <declaration name="sep" type="JSeparator" line="774"/>
                    <scope line="775"/>
                    <scope line="777"/>
                </scope>
                <scope line="781">
                    <declaration name="size" type="int" line="782"/>
                </scope>
                <scope line="786">
                    <declaration name="sb" type="JScrollBar" line="787"/>
                    <declaration name="horiz" type="boolean" line="788"/>
                    <declaration name="wt" type="WidgetType" line="789"/>
                    <declaration name="sliderWidth" type="int" line="791"/>
                    <declaration name="stepperSize" type="int" line="792"/>
                </scope>
                <scope line="797">
                    <declaration name="name" type="String" line="798"/>
                    <scope line="799">
                        <declaration name="pangoFontName" type="String" line="804"/>
                        <scope line="805"/>
                        <declaration name="arrowSize" type="int" line="809"/>
                    </scope>
                </scope>
                <scope line="820">
                    <declaration name="indicatorSpacing" type="int" line="825"/>
                    <declaration name="focusSize" type="int" line="827"/>
                    <declaration name="focusPad" type="int" line="829"/>
                </scope>
                <declaration name="stockIcon" type="GTKStockIcon" line="835"/>
                <scope line="836"/>
                <scope line="840"/>
                <scope line="845">
                    <declaration name="value" type="Object" line="849"/>
                    <scope line="850">
                        <declaration name="focusLineWidth" type="int" line="851"/>
                        <scope line="853"/>
                    </scope>
                </scope>
            </method>
            <method name="getStockIcon" type="Icon" line="865">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <comment line="878">
                    First try loading a theme-specific icon using the native
                     GTK libraries (native GTK handles the resizing for us).                    
                </comment>
                <comment line="885">
                    In a failure case where native GTK (unexpectedly) returns a
                     null icon, we can try loading a default icon as a fallback.                    
                </comment>
                <comment line="895">
                    In an extreme failure situation, just return null (callers are
                     already prepared to handle a null icon, so the worst that can
                     happen is that an icon won&apos;t be included in the button/dialog).                    
                </comment>
                <declaration name="direction" type="TextDirection" line="866"/>
                <scope line="868">
                    <declaration name="co" type="ComponentOrientation" line="869"/>
                    <scope line="872"/>
                </scope>
                <declaration name="icon" type="Icon" line="879"/>
                <scope line="880"/>
                <declaration name="propName" type="String" line="886"/>
                <declaration name="img" type="Image" line="888"/>
                <scope line="890"/>
            </method>
            <method name="getStyleSpecificIcon" type="Icon" line="902">
                <params>
                    <param name="key" type="String"/>
                    <param name="direction" type="TextDirection"/>
                    <param name="type" type="int"/>
                </params>
                <declaration name="tk" type="UNIXToolkit" line="903"/>
                <declaration name="img" type="Image" line="904"/>
            </method>
            <class name="GTKStockIconInfo" line="909">
                <declaration name="ICON_TYPE_MAP" type="Map&lt;String,Integer&gt;" line="910"/>
                <declaration name="ICON_SIZE_KEY" type="Object" line="911"/>
                <method name="getIconSizesMap" type="Dimension[]" line="913">
                    <comment line="920">
                        GTK_ICON_SIZE_INVALID                        
                    </comment>
                    <comment line="921">
                        GTK_ICON_SIZE_MENU                        
                    </comment>
                    <comment line="922">
                        GTK_ICON_SIZE_SMALL_TOOLBAR                        
                    </comment>
                    <comment line="923">
                        GTK_ICON_SIZE_LARGE_TOOLBAR                        
                    </comment>
                    <comment line="924">
                        GTK_ICON_SIZE_BUTTON                        
                    </comment>
                    <comment line="925">
                        GTK_ICON_SIZE_DND                        
                    </comment>
                    <comment line="926">
                        GTK_ICON_SIZE_DIALOG                        
                    </comment>
                    <declaration name="appContext" type="AppContext" line="914"/>
                    <declaration name="iconSizes" type="Dimension[]" line="915"/>
                    <scope line="917"/>
                </method>
                <javadoc line="931">
                    Return the size of a particular icon type (logical size)                    
                    <param>
                        type icon type (GtkIconSize value)                        
                    </param>
                    <return>
                        a Dimension object, or null if lsize is invalid                        
                    </return>
                </javadoc>
                <method name="getIconSize" type="Dimension" line="937">
                    <params>
                        <param name="type" type="int"/>
                    </params>
                    <declaration name="iconSizes" type="Dimension[]" line="938"/>
                </method>
                <javadoc line="943">
                    Change icon size in a type to size mapping. This is called by code
                      that parses the gtk-icon-sizes setting                    
                    <param>
                        type icon type (GtkIconSize value)                        
                    </param>
                    <param>
                        w the new icon width                        
                    </param>
                    <param>
                        h the new icon height                        
                    </param>
                </javadoc>
                <method name="setIconSize" type="void" line="951">
                    <params>
                        <param name="type" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <declaration name="iconSizes" type="Dimension[]" line="952"/>
                    <scope line="953"/>
                </method>
                <javadoc line="958">
                    Return icon type (GtkIconSize value) given a symbolic name which can
                      occur in a theme file.                    
                    <param>
                        size symbolic name, e.g. gtk-button                        
                    </param>
                    <return>
                        icon type. Valid types are 1 to 6                        
                    </return>
                </javadoc>
                <method name="getIconType" type="int" line="965">
                    <params>
                        <param name="size" type="String"/>
                    </params>
                    <scope line="966"/>
                    <scope line="969"/>
                    <declaration name="n" type="Integer" line="972"/>
                </method>
                <method name="initIconTypeMap" type="void" line="976"/>
            </class>
            <class name="GTKStockIcon" line="988">
                <extends class="SynthIcon"/>
                <javadoc line="988">
                    An Icon that is fetched using getStockIcon.                    
                </javadoc>
                <declaration name="key" type="String" line="992"/>
                <declaration name="size" type="int" line="993"/>
                <declaration name="loadedLTR" type="boolean" line="994"/>
                <declaration name="loadedRTL" type="boolean" line="995"/>
                <declaration name="ltrIcon" type="Icon" line="996"/>
                <declaration name="rtlIcon" type="Icon" line="997"/>
                <declaration name="style" type="SynthStyle" line="998"/>
                <method name="GTKStockIcon" type="constructor" line="1000">
                    <params>
                        <param name="key" type="String"/>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <method name="paintIcon" type="void" line="1006">
                    <params>
                        <param name="context" type="SynthContext"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <declaration name="icon" type="Icon" line="1007"/>
                    <scope line="1009">
                        <scope line="1010"/>
                        <scope line="1013"/>
                    </scope>
                </method>
                <method name="getIconWidth" type="int" line="1019">
                    <params>
                        <param name="context" type="SynthContext"/>
                    </params>
                    <declaration name="icon" type="Icon" line="1020"/>
                    <scope line="1022"/>
                </method>
                <method name="getIconHeight" type="int" line="1028">
                    <params>
                        <param name="context" type="SynthContext"/>
                    </params>
                    <declaration name="icon" type="Icon" line="1029"/>
                    <scope line="1031"/>
                </method>
                <method name="getIcon" type="Icon" line="1037">
                    <params>
                        <param name="context" type="SynthContext"/>
                    </params>
                    <scope line="1038">
                        <declaration name="co" type="ComponentOrientation" line="1039"/>
                        <declaration name="style" type="SynthStyle" line="1041"/>
                        <scope line="1043"/>
                        <scope line="1047">
                            <scope line="1048"/>
                        </scope>
                        <scope line="1055"/>
                    </scope>
                </method>
            </class>
            <class name="GTKLazyValue" line="1066">
                <implements interface="UIDefaults.LazyValue"/>
                <javadoc line="1066">
                    GTKLazyValue is a slimmed down version of &lt;code&gt;ProxyLaxyValue&lt;/code&gt;.
                      The code is duplicate so that it can get at the package private
                      classes in gtk.                    
                </javadoc>
                <declaration name="className" type="String" line="1072"/>
                <javadoc line="1072">
                    Name of the class to create.                    
                </javadoc>
                <declaration name="methodName" type="String" line="1076"/>
                <method name="GTKLazyValue" type="constructor" line="1078">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="GTKLazyValue" type="constructor" line="1082">
                    <params>
                        <param name="name" type="String"/>
                        <param name="methodName" type="String"/>
                    </params>
                </method>
                <method name="createValue" type="Object" line="1087">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <scope line="1088">
                        <declaration name="c" type="Class" line="1089"/>
                        <scope line="1092"/>
                        <declaration name="m" type="Method" line="1095"/>
                    </scope>
                    <scope line="1098"/>
                    <scope line="1099"/>
                    <scope line="1100"/>
                    <scope line="1101"/>
                    <scope line="1102"/>
                </method>
            </class>
            <scope line="1108"/>
        </class>
    </source>