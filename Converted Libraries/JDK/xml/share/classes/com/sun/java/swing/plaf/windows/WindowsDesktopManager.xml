<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.windows">
        <import package="javax.swing.DefaultDesktopManager"/>
        <import package="javax.swing.JInternalFrame"/>
        <import package="javax.swing.JLayeredPane"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dimension"/>
        <import package="java.beans.PropertyVetoException"/>
        <import package="java.util.Vector"/>
        <import package="java.lang.ref.WeakReference"/>
        <class name="WindowsDesktopManager" line="39">
            <extends class="DefaultDesktopManager"/>
            <comment line="58">
                The frame which is currently selectedactivated.
                 We store this value to enforce MDI&apos;s single-selection model.                
            </comment>
            <implements interface="java.io.Serializable"/>
            <implements interface="javax.swing.plaf.UIResource"/>
            <javadoc line="39">
                This class implements a DesktopManager which more closely follows
                  the MDI model than the DefaultDesktopManager.  Unlike the
                  DefaultDesktopManager policy, MDI requires that the selected
                  and activated child frames are the same, and that that frame
                  always be the top-most window.
                  &lt;p&gt;
                  The maximized state is managed by the DesktopManager with MDI,
                  instead of just being a property of the individual child frame.
                  This means that if the currently selected window is maximized
                  and another window is selected, that new window will be maximized.                
                <see>
                    javax.swing.DefaultDesktopManager                    
                </see>
                <author>
                    Thomas Ball                    
                </author>
            </javadoc>
            <declaration name="currentFrameRef" type="WeakReference&lt;JInternalFrame&gt;" line="60"/>
            <method name="activateFrame" type="void" line="62">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
                <comment line="69">
                    If the current frame is maximized, transfer that
                     attribute to the frame being activated.                    
                </comment>
                <comment line="74">
                    Special case.  If key binding was used to select next
                    frame instead of minimizing the icon via the minimize
                    icon.                    
                </comment>
                <declaration name="currentFrame" type="JInternalFrame" line="63"/>
                <scope line="65">
                    <scope line="67">
                        <scope line="72">
                            <scope line="76">
                                <scope line="78">
                                    <scope line="79"/>
                                    <scope line="81"/>
                                    <scope line="83"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="89"/>
                    </scope>
                    <scope line="94"/>
                </scope>
                <scope line="97"/>
                <scope line="98"/>
            </method>
        </class>
    </source>