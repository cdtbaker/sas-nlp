<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.util.jar.pack">
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Set"/>
        <import package="java.util.SortedMap"/>
        <import package="java.util.TimeZone"/>
        <import package="java.util.jar.JarEntry"/>
        <import package="java.util.jar.JarInputStream"/>
        <import package="java.util.jar.JarOutputStream"/>
        <import package="java.util.jar.Pack200"/>
        <import package="java.util.zip.CRC32"/>
        <import package="java.util.zip.CheckedOutputStream"/>
        <import package="java.util.zip.ZipEntry"/>
        <class name="UnpackerImpl" line="56">
            <extends class="TLGlobals"/>
            <comment line="90">
                Back-pointer to NativeUnpacker, when active.                
            </comment>
            <comment line="98">
                Driver routines                
            </comment>
            <comment line="100">
                The unpack worker...                
            </comment>
            <implements interface="Pack200.Unpacker"/>
            <javadoc line="59">
                Register a listener for changes to options.                
                <param>
                    listener  An object to be invoked when a property is changed.                    
                </param>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="63">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
            </method>
            <javadoc line="68">
                Remove a listener for the PropertyChange event.                
                <param>
                    listener  The PropertyChange listener to be removed.                    
                </param>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="72">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
            </method>
            <method name="UnpackerImpl" type="constructor" line="76"/>
            <javadoc line="80">
                Get the set of options for the pack and unpack engines.                
                <return>
                    A sorted association of option key strings to option values.                    
                </return>
            </javadoc>
            <method name="properties" type="SortedMap" line="85"/>
            <declaration name="_nunp" type="Object" line="90"/>
            <method name="toString" type="String" line="93"/>
            <javadoc line="100">
                Takes a packed-stream InputStream, and writes to a JarOutputStream. Internally
                  the entire buffer must be read, it may be more efficient to read the packed-stream
                  to a file and pass the File object, in the alternate method described below.
                  &lt;p&gt;
                  Closes its input but not its output.  (The output can accumulate more elements.)                
                <param>
                    in an InputStream.                    
                </param>
                <param>
                    out a JarOutputStream.                    
                </param>
                <exception>
                    IOException if an error is encountered.                    
                </exception>
            </javadoc>
            <method name="unpack" type="void" line="110">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="out" type="JarOutputStream"/>
                </params>
                <scope line="111"/>
                <scope line="114"/>
                <declaration name="tz" type="TimeZone" line="118"/>
                <scope line="122">
                    <declaration name="verbose" type="int" line="125"/>
                    <declaration name="in0" type="BufferedInputStream" line="126"/>
                    <scope line="127"/>
                    <scope line="131"/>
                    <scope line="135"/>
                </scope>
                <scope line="140"/>
            </method>
            <javadoc line="147">
                Takes an input File containing the pack file, and generates a JarOutputStream.
                  &lt;p&gt;
                  Does not close its output.  (The output can accumulate more elements.)                
                <param>
                    in a File.                    
                </param>
                <param>
                    out a JarOutputStream.                    
                </param>
                <exception>
                    IOException if an error is encountered.                    
                </exception>
            </javadoc>
            <method name="unpack" type="void" line="155">
                <params>
                    <param name="in" type="File"/>
                    <param name="out" type="JarOutputStream"/>
                </params>
                <comment line="163">
                    Use the stream-based implementation.
                     %%% Reconsider if native unpacker learns to memory-map the file.                    
                </comment>
                <scope line="156"/>
                <scope line="159"/>
                <scope line="164"/>
                <scope line="167"/>
            </method>
            <class name="DoUnpack" line="172">
                <comment line="180">
                    Here&apos;s where the bits are read from disk:                    
                </comment>
                <comment line="202">
                    Checksum apparatus.                    
                </comment>
                <declaration name="verbose" type="int" line="173"/>
                <scope line="175"/>
                <declaration name="pkg" type="Package" line="180"/>
                <declaration name="keepModtime" type="boolean" line="182"/>
                <declaration name="keepDeflateHint" type="boolean" line="185"/>
                <declaration name="modtime" type="int" line="188"/>
                <declaration name="deflateHint" type="boolean" line="189"/>
                <scope line="190">
                    <scope line="191"/>
                    <scope line="193"/>
                </scope>
                <declaration name="crc" type="CRC32" line="202"/>
                <declaration name="bufOut" type="ByteArrayOutputStream" line="203"/>
                <declaration name="crcOut" type="OutputStream" line="204"/>
                <method name="run" type="void" line="206">
                    <params>
                        <param name="in" type="BufferedInputStream"/>
                        <param name="out" type="JarOutputStream"/>
                    </params>
                    <comment line="214">
                        Try to get another segment.                        
                    </comment>
                    <scope line="207"/>
                    <scope line="210"/>
                </method>
                <method name="unpackSegment" type="void" line="220">
                    <params>
                        <param name="in" type="InputStream"/>
                        <param name="out" type="JarOutputStream"/>
                    </params>
                    <comment line="223">
                        Process the output directory or jar output.                        
                    </comment>
                    <comment line="230">
                        Now write out the files.                        
                    </comment>
                    <comment line="242">
                        STORE mode requires CRC                        
                    </comment>
                    <comment line="250">
                        for an error check                        
                    </comment>
                    <comment line="252">
                        collect data &amp; maybe CRC                        
                    </comment>
                    <comment line="266">
                        Convert back to milliseconds                        
                    </comment>
                    <comment line="279">
                        reset for the next segment, if any                        
                    </comment>
                    <declaration name="classesToWrite" type="Set&lt;Package.Class&gt;" line="230"/>
                    <scope line="231">
                        <declaration name="name" type="String" line="232"/>
                        <declaration name="je" type="JarEntry" line="233"/>
                        <declaration name="deflate" type="boolean" line="234"/>
                        <declaration name="needCRC" type="boolean" line="241"/>
                        <scope line="245">
                            <declaration name="cls" type="Package.Class" line="246"/>
                        </scope>
                        <scope line="250"/>
                        <scope line="255"/>
                        <scope line="263"/>
                        <scope line="267"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>