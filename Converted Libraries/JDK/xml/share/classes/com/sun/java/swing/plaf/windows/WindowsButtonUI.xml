<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.java.swing.plaf.windows">
        <import package="javax.swing.plaf.basic"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing"/>
        <import package="java.awt"/>
        <import package="com.sun.java.swing.plaf.windows.TMSchema"/>
        <import package="com.sun.java.swing.plaf.windows.TMSchema.Part"/>
        <import package="com.sun.java.swing.plaf.windows.XPStyle.Skin"/>
        <import package="sun.awt.AppContext"/>
        <class name="WindowsButtonUI" line="41">
            <extends class="BasicButtonUI"/>
            <comment line="68">
                ********************************
                          Create PLAF
                 ********************************                
            </comment>
            <comment line="83">
                ********************************
                            Defaults
                 ********************************                
            </comment>
            <comment line="114">
                ********************************
                         Paint Methods
                 ********************************                
            </comment>
            <comment line="139">
                ********************************
                          Layout Methods
                 ********************************                
            </comment>
            <comment line="157">
                These rectanglesinsets are allocated once for all
                 ButtonUI.paint() calls.  Re-using rectangles rather than
                 allocating them in each paint call substantially reduced the time
                 it took paint to run.  Obviously, this method can&apos;t be re-entered.                
            </comment>
            <javadoc line="41">
                Windows button.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases.  The current serialization support is appropriate
                  for short term storage or RMI between applications running the same
                  version of Swing.  A future release of Swing will provide support for
                  long term persistence.                
                <author>
                    Jeff Dinkins                    
                </author>
            </javadoc>
            <declaration name="dashedRectGapX" type="int" line="56"/>
            <declaration name="dashedRectGapY" type="int" line="57"/>
            <declaration name="dashedRectGapWidth" type="int" line="58"/>
            <declaration name="dashedRectGapHeight" type="int" line="59"/>
            <declaration name="focusColor" type="Color" line="61"/>
            <declaration name="defaults_initialized" type="boolean" line="63"/>
            <declaration name="WINDOWS_BUTTON_UI_KEY" type="Object" line="65"/>
            <method name="createUI" type="ComponentUI" line="70">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="appContext" type="AppContext" line="71"/>
                <declaration name="windowsButtonUI" type="WindowsButtonUI" line="72"/>
                <scope line="74"/>
            </method>
            <method name="installDefaults" type="void" line="85">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <scope line="87">
                    <declaration name="pp" type="String" line="88"/>
                </scope>
                <declaration name="xp" type="XPStyle" line="97"/>
                <scope line="98"/>
            </method>
            <method name="uninstallDefaults" type="void" line="104">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
            </method>
            <method name="getFocusColor" type="Color" line="109"/>
            <javadoc line="117">
                Overridden method to render the text without the mnemonic                
            </javadoc>
            <method name="paintText" type="void" line="120">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="b" type="AbstractButton"/>
                    <param name="textRect" type="Rectangle"/>
                    <param name="text" type="String"/>
                </params>
            </method>
            <method name="paintFocus" type="void" line="124">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="b" type="AbstractButton"/>
                    <param name="viewRect" type="Rectangle"/>
                    <param name="textRect" type="Rectangle"/>
                    <param name="iconRect" type="Rectangle"/>
                </params>
                <comment line="127">
                    focus painted same color as text on Basic??                    
                </comment>
                <declaration name="width" type="int" line="127"/>
                <declaration name="height" type="int" line="128"/>
            </method>
            <method name="paintButtonPressed" type="void" line="134">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="b" type="AbstractButton"/>
                </params>
            </method>
            <method name="getPreferredSize" type="Dimension" line="141">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <comment line="145">
                    Ensure that the width and height of the button is odd,
                     to allow for the focus line if focus is painted                    
                </comment>
                <declaration name="d" type="Dimension" line="142"/>
                <declaration name="b" type="AbstractButton" line="147"/>
                <scope line="148">
                    <scope line="149"/>
                    <scope line="150"/>
                </scope>
            </method>
            <declaration name="viewRect" type="Rectangle" line="161"/>
            <method name="paint" type="void" line="163">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="164"/>
            </method>
            <method name="getXPButtonType" type="Part" line="170">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <scope line="171"/>
                <scope line="174"/>
                <declaration name="toolbar" type="boolean" line="177"/>
            </method>
            <method name="getXPButtonState" type="State" line="181">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <comment line="188">
                                        
                </comment>
                <comment line="205">
                                        
                </comment>
                <declaration name="part" type="Part" line="182"/>
                <declaration name="model" type="ButtonModel" line="183"/>
                <declaration name="state" type="State" line="184"/>
                <scope line="189"/>
                <scope line="192"/>
                <scope line="195"/>
                <scope line="198"/>
                <declaration name="toolbar" type="boolean" line="206"/>
                <scope line="207">
                    <scope line="208"/>
                    <scope line="210"/>
                    <scope line="212"/>
                    <scope line="214"/>
                    <scope line="216"/>
                    <scope line="218"/>
                </scope>
                <scope line="221">
                    <scope line="223"/>
                    <scope line="225"/>
                    <scope line="227"/>
                    <scope line="230"/>
                    <scope line="232"/>
                </scope>
            </method>
            <method name="paintXPButtonBackground" type="void" line="244">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <comment line="266">
                    Note: The border may be compound, containing an outer
                     opaque border (supplied by the application), plus an
                     inner transparent margin border. We want to size the
                     background to fill the transparent part, but stay
                     inside the opaque part.                    
                </comment>
                <declaration name="b" type="AbstractButton" line="245"/>
                <declaration name="xp" type="XPStyle" line="247"/>
                <declaration name="part" type="Part" line="249"/>
                <scope line="251">
                    <declaration name="skin" type="Skin" line="253"/>
                    <declaration name="state" type="State" line="255"/>
                    <declaration name="d" type="Dimension" line="256"/>
                    <declaration name="dx" type="int" line="257"/>
                    <declaration name="dy" type="int" line="258"/>
                    <declaration name="dw" type="int" line="259"/>
                    <declaration name="dh" type="int" line="260"/>
                    <declaration name="border" type="Border" line="262"/>
                    <declaration name="insets" type="Insets" line="263"/>
                    <scope line="264"/>
                    <scope line="271"/>
                    <scope line="274"/>
                </scope>
            </method>
            <javadoc line="284">
                returns - b.getBorderInsets(c) if border is opaque
                  - null if border is completely non-opaque
                  - somewhere inbetween if border is compound and
                  outside border is opaque and inside isn&apos;t                
            </javadoc>
            <method name="getOpaqueInsets" type="Insets" line="290">
                <params>
                    <param name="b" type="Border"/>
                    <param name="c" type="Component"/>
                </params>
                <comment line="301">
                    Outside border is opaque, keep looking                    
                </comment>
                <comment line="304">
                    Inside is non-opaque, use outside insets                    
                </comment>
                <comment line="307">
                    Found non-opaque somewhere in the inside (which is
                     also compound).                    
                </comment>
                <comment line="313">
                    Outside is either all non-opaque or has non-opaque
                     border inside another compound border                    
                </comment>
                <scope line="291"/>
                <scope line="294"/>
                <scope line="296">
                    <declaration name="cb" type="CompoundBorder" line="297"/>
                    <declaration name="iOut" type="Insets" line="298"/>
                    <scope line="299">
                        <declaration name="iIn" type="Insets" line="301"/>
                        <scope line="302"/>
                        <scope line="305"/>
                    </scope>
                    <scope line="311"/>
                </scope>
                <scope line="316"/>
            </method>
        </class>
    </source>