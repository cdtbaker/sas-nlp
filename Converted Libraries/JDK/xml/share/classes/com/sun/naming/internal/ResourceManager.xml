<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.naming.internal">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.net.URL"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Map"/>
        <import package="java.util.Properties"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.WeakHashMap"/>
        <import package="javax.naming"/>
        <class name="ResourceManager" line="18">
            <javadoc line="18">
                The ResourceManager class facilitates the reading of JNDI resource files.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="PROVIDER_RESOURCE_FILE_NAME" type="String" line="24"/>
            <declaration name="APP_RESOURCE_FILE_NAME" type="String" line="25"/>
            <declaration name="JRELIB_PROPERTY_FILE_NAME" type="String" line="26"/>
            <declaration name="listProperties" type="String[]" line="27"/>
            <declaration name="helper" type="VersionHelper" line="28"/>
            <declaration name="propertiesCache" type="WeakHashMap" line="29"/>
            <declaration name="factoryCache" type="WeakHashMap" line="30"/>
            <declaration name="urlFactoryCache" type="WeakHashMap" line="31"/>
            <declaration name="NO_FACTORY" type="WeakReference" line="32"/>
            <class name="AppletParameter" line="33">
                <javadoc line="33">
                    A class to allow JNDI properties be specified as applet parameters
                      without creating a static dependency on java.applet.                    
                </javadoc>
                <declaration name="clazz" type="Class&amp;lt;?&amp;gt;" line="38"/>
                <declaration name="getMethod" type="Method" line="39"/>
                <method name="getClass" type="Class&lt;?&gt;" line="40">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="41"/>
                    <scope line="44"/>
                </method>
                <method name="getMethod" type="Method" line="48">
                    <params>
                        <param name="clazz" type="Class&lt;?&gt;"/>
                        <param name="name" type="String"/>
                        <param name="paramTypes" type="Class&lt;?&gt;"/>
                    </params>
                    <scope line="49">
                        <scope line="50"/>
                        <scope line="53"/>
                    </scope>
                    <scope line="57"/>
                </method>
                <javadoc line="61">
                    Returns the value of the applet&apos;s named parameter.                    
                </javadoc>
                <method name="get" type="Object" line="64">
                    <params>
                        <param name="applet" type="Object"/>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="66"/>
                    <scope line="69"/>
                    <scope line="72"/>
                </method>
            </class>
            <method name="ResourceManager" type="constructor" line="77"/>
            <method name="getInitialEnvironment" type="Hashtable" line="79">
                <params>
                    <param name="env" type="Hashtable"/>
                </params>
                <declaration name="props" type="String[]" line="80"/>
                <scope line="81"/>
                <declaration name="applet" type="Object" line="84"/>
                <declaration name="jndiSysProps" type="String[]" line="85"/>
                <scope line="86">
                    <declaration name="val" type="Object" line="87"/>
                    <scope line="88">
                        <scope line="89"/>
                        <scope line="92"/>
                        <scope line="95"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="103">
                Retrieves the property from the environment, or from the provider
                  resource file associated with the given context.  The environment
                  may in turn contain values that come from applet parameters,
                  system properties, or application resource files.
                  If &lt;tt&gt;concat&lt;/tt&gt; is true and both the environment and the provider
                  resource file contain the property, the two values are concatenated
                  (with a &apos;:&apos; separator).
                  Returns null if no value is found.                
                <param>
                    propName The non-null property name                    
                </param>
                <param>
                    env      The possibly null environment properties                    
                </param>
                <param>
                    ctx      The possibly null context                    
                </param>
                <param>
                    concat   True if multiple values should be concatenated                    
                </param>
                <return>
                    the property value, or null is there is none.                    
                </return>
                <throws>
                    NamingException if an error occurs while reading the provider
                      resource file.                    
                </throws>
            </javadoc>
            <method name="getProperty" type="String" line="120">
                <params>
                    <param name="propName" type="String"/>
                    <param name="env" type="Hashtable"/>
                    <param name="ctx" type="Context"/>
                    <param name="concat" type="boolean"/>
                </params>
                <declaration name="val1" type="String" line="121"/>
                <scope line="122"/>
                <declaration name="val2" type="String" line="125"/>
                <scope line="126"/>
                <scope line="129"/>
                <scope line="132"/>
            </method>
            <javadoc line="136">
                Retrieves an enumeration of factory classes/object specified by a
                  property.
                  The property is gotten from the environment and the provider
                  resource file associated with the given context and concantenated.
                  See getProperty(). The resulting property value is a list of class names.
                  &lt;p&gt;
                  This method then loads each class using the current thread&apos;s context
                  class loader and keeps them in a list. Any class that cannot be loaded
                  is ignored. The resulting list is then cached in a two-level
                  hash table, keyed first by the context class loader and then by
                  the property&apos;s value.
                  The next time threads of the same context class loader call this
                  method, they can use the cached list.
                  &lt;p&gt;
                  After obtaining the list either from the cache or by creating one from
                  the property value, this method then creates and returns a
                  FactoryEnumeration using the list. As the FactoryEnumeration is
                  traversed, the cached Class object in the list is instantiated and
                  replaced by an instance of the factory object itself.  Both class
                  objects and factories are wrapped in weak references so as not to
                  prevent GC of the class loader.
                  &lt;p&gt;
                  Note that multiple threads can be accessing the same cached list
                  via FactoryEnumeration, which locks the list during each next().
                  The size of the list will not change,
                  but a cached Class object might be replaced by an instantiated factory
                  object.                
                <param>
                    propName  The non-null property name                    
                </param>
                <param>
                    env       The possibly null environment properties                    
                </param>
                <param>
                    ctx       The possibly null context                    
                </param>
                <return>
                    An enumeration of factory classes/objects; null if none.                    
                </return>
                <exception>
                    NamingException If encounter problem while reading the provider
                      property file.                    
                </exception>
                <see>
                    javax.naming.spi.NamingManager#getObjectInstance                    
                </see>
                <see>
                    javax.naming.spi.NamingManager#getStateToBind                    
                </see>
                <see>
                    javax.naming.spi.DirectoryManager#getObjectInstance                    
                </see>
                <see>
                    javax.naming.spi.DirectoryManager#getStateToBind                    
                </see>
                <see>
                    javax.naming.ldap.ControlFactory#getControlInstance                    
                </see>
            </javadoc>
            <method name="getFactories" type="FactoryEnumeration" line="176">
                <params>
                    <param name="propName" type="String"/>
                    <param name="env" type="Hashtable"/>
                    <param name="ctx" type="Context"/>
                </params>
                <declaration name="facProp" type="String" line="177"/>
                <declaration name="loader" type="ClassLoader" line="179"/>
                <declaration name="perLoaderCache" type="Map" line="180"/>
                <scope line="181">
                    <scope line="183"/>
                </scope>
                <scope line="188">
                    <declaration name="factories" type="List" line="189"/>
                    <scope line="190"/>
                    <scope line="193">
                        <declaration name="parser" type="StringTokenizer" line="194"/>
                        <scope line="196">
                            <scope line="197">
                                <declaration name="className" type="String" line="198"/>
                                <declaration name="c" type="Class" line="199"/>
                            </scope>
                            <scope line="202"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="210">
                Retrieves a factory from a list of packages specified in a
                  property.
                  The property is gotten from the environment and the provider
                  resource file associated with the given context and concatenated.
                  classSuffix is added to the end of this list.
                  See getProperty(). The resulting property value is a list of package
                  prefixes.
                  &lt;p&gt;
                  This method then constructs a list of class names by concatenating
                  each package prefix with classSuffix and attempts to load and
                  instantiate the class until one succeeds.
                  Any class that cannot be loaded is ignored.
                  The resulting object is then cached in a two-level hash table,
                  keyed first by the context class loader and then by the property&apos;s
                  value and classSuffix.
                  The next time threads of the same context class loader call this
                  method, they use the cached factory.
                  If no factory can be loaded, NO_FACTORY is recorded in the table
                  so that next time it&apos;ll return quickly.                
                <param>
                    propName  The non-null property name                    
                </param>
                <param>
                    env       The possibly null environment properties                    
                </param>
                <param>
                    ctx       The possibly null context                    
                </param>
                <param>
                    classSuffix The non-null class name
                      (e.g. &quot;.ldap.ldapURLContextFactory).                    
                </param>
                <param>
                    defaultPkgPrefix The non-null default package prefix.
                      (e.g., &quot;com.sun.jndi.url&quot;).                    
                </param>
                <return>
                    An factory object; null if none.                    
                </return>
                <exception>
                    NamingException If encounter problem while reading the provider
                      property file, or problem instantiating the factory.                    
                </exception>
                <see>
                    javax.naming.spi.NamingManager#getURLContext                    
                </see>
                <see>
                    javax.naming.spi.NamingManager#getURLObject                    
                </see>
            </javadoc>
            <method name="getFactory" type="Object" line="243">
                <params>
                    <param name="propName" type="String"/>
                    <param name="env" type="Hashtable"/>
                    <param name="ctx" type="Context"/>
                    <param name="classSuffix" type="String"/>
                    <param name="defaultPkgPrefix" type="String"/>
                </params>
                <declaration name="facProp" type="String" line="244"/>
                <declaration name="loader" type="ClassLoader" line="247"/>
                <declaration name="key" type="String" line="248"/>
                <declaration name="perLoaderCache" type="Map" line="249"/>
                <scope line="250">
                    <scope line="252"/>
                </scope>
                <scope line="257">
                    <declaration name="factory" type="Object" line="258"/>
                    <declaration name="factoryRef" type="WeakReference" line="259"/>
                    <scope line="260"/>
                    <scope line="263">
                        <scope line="265"/>
                    </scope>
                    <declaration name="parser" type="StringTokenizer" line="269"/>
                    <declaration name="className" type="String" line="270"/>
                    <scope line="271">
                        <scope line="273"/>
                        <scope line="276">
                            <declaration name="ne" type="NamingException" line="277"/>
                        </scope>
                        <scope line="281">
                            <declaration name="ne" type="NamingException" line="282"/>
                        </scope>
                        <scope line="286"/>
                    </scope>
                </scope>
            </method>
            <method name="getProviderResource" type="Hashtable" line="293">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="294"/>
                <scope line="297">
                    <declaration name="c" type="Class" line="298"/>
                    <declaration name="props" type="Hashtable" line="299"/>
                    <scope line="300"/>
                    <declaration name="istream" type="InputStream" line="304"/>
                    <scope line="305">
                        <scope line="306"/>
                        <scope line="309">
                            <declaration name="ne" type="NamingException" line="310"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getApplicationResources" type="Hashtable" line="319">
                <declaration name="cl" type="ClassLoader" line="320"/>
                <scope line="321">
                    <declaration name="result" type="Hashtable" line="322"/>
                    <scope line="323"/>
                    <scope line="326">
                        <declaration name="resources" type="NamingEnumeration" line="327"/>
                        <scope line="328">
                            <declaration name="props" type="Properties" line="329"/>
                            <scope line="331"/>
                            <scope line="334"/>
                        </scope>
                        <declaration name="istream" type="InputStream" line="338"/>
                        <scope line="339">
                            <declaration name="props" type="Properties" line="340"/>
                            <scope line="342"/>
                            <scope line="345"/>
                        </scope>
                    </scope>
                    <scope line="350">
                        <declaration name="ne" type="NamingException" line="351"/>
                    </scope>
                    <scope line="355"/>
                </scope>
            </method>
            <method name="mergeTables" type="void" line="362">
                <params>
                    <param name="props1" type="Hashtable"/>
                    <param name="props2" type="Hashtable"/>
                </params>
                <declaration name="keys" type="Enumeration" line="363"/>
                <scope line="364">
                    <declaration name="prop" type="String" line="365"/>
                    <declaration name="val1" type="Object" line="366"/>
                    <scope line="367"/>
                    <scope line="370">
                        <declaration name="val2" type="String" line="371"/>
                    </scope>
                </scope>
            </method>
            <method name="isListProperty" type="boolean" line="376">
                <params>
                    <param name="prop" type="String"/>
                </params>
                <scope line="378">
                    <scope line="379"/>
                </scope>
            </method>
        </class>
    </source>