<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.naming.internal">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.net.URL"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Map"/>
        <import package="java.util.Properties"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.WeakHashMap"/>
        <import package="javax.naming"/>
        <class name="ResourceManager" line="46">
            <comment line="56">
                Name of provider resource files (without the package-name prefix.)                
            </comment>
            <comment line="62">
                Name of application resource files.                
            </comment>
            <comment line="67">
                Name of properties file in &lt;java.home&gt;lib.                
            </comment>
            <comment line="72">
                The standard JNDI properties that specify colon-separated lists.                
            </comment>
            <comment line="86">
                A cache of the properties that have been constructed by
                 the ResourceManager.  A Hashtable from a provider resource
                 file is keyed on a class in the resource file&apos;s package.
                 One from application resource files is keyed on the thread&apos;s
                 context class loader.                
            </comment>
            <comment line="95">
                A cache of factory objects (ObjectFactory, StateFactory, ControlFactory).
                
                 A two-level cache keyed first on context class loader and then
                 on propValue.  Value is a list of class or factory objects,
                 weakly referenced so as not to prevent GC of the class loader.
                 Used in getFactories().                
            </comment>
            <comment line="105">
                A cache of URL factory objects (ObjectFactory).
                
                 A two-level cache keyed first on context class loader and then
                 on classSuffix+propValue.  Value is the factory itself (weakly
                 referenced so as not to prevent GC of the class loader) or
                 NO_FACTORY if a previous search revealed no factory.  Used in
                 getFactory().                
            </comment>
            <comment line="164">
                There should be no instances of this class.                
            </comment>
            <comment line="169">
                ---------- Public methods ----------                
            </comment>
            <comment line="171">
                Given the environment parameter passed to the initial context
                 constructor, returns the full environment for that initial
                 context (never null).  This is based on the environment
                 parameter, the applet parameters (where appropriate), the
                 system properties, and all application resource files.
                
                 &lt;p&gt; This method will modify &lt;tt&gt;env&lt;tt&gt; and save
                 a reference to it.  The caller may no longer modify it.
                
                 @param env       environment passed to initial context constructor.
                                  Null indicates an empty environment.
                
                 @throws NamingException if an error occurs while reading a
                          resource file                
            </comment>
            <comment line="462">
                ---------- Private methods ----------                
            </comment>
            <comment line="464">
                Returns the properties contained in the provider resource file
                 of an object&apos;s package.  Returns an empty hash table if the
                 object is null or the resource file cannot be found.  The
                 results are cached.
                
                 @throws NamingException if an error occurs while reading the file.                
            </comment>
            <comment line="506">
                Returns the Hashtable (never null) that results from merging
                 all application resource files available to this thread&apos;s
                 context class loader.  The properties file in &lt;java.home&gt;lib
                 is also merged in.  The results are cached.
                
                 SECURITY NOTES:
                 1.  JNDI needs permission to read the application resource files.
                 2.  Any class will be able to use JNDI to view the contents of
                 the application resource files in its own classpath.  Give
                 careful consideration to this before storing sensitive
                 information there.
                
                 @throws NamingException if an error occurs while reading a resource
                  file.                
            </comment>
            <comment line="574">
                Merge the properties from one hash table into another.  Each
                 property in props2 that is not in props1 is added to props1.
                 For each property in both hash tables that is one of the
                 standard JNDI properties that specify colon-separated lists,
                 the values are concatenated and stored in props1.                
            </comment>
            <comment line="596">
                Is a property one of the standard JNDI properties that specify
                 colon-separated lists?                
            </comment>
            <javadoc line="46">
                The ResourceManager class facilitates the reading of JNDI resource files.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
            </javadoc>
            <declaration name="PROVIDER_RESOURCE_FILE_NAME" type="String" line="58"/>
            <declaration name="APP_RESOURCE_FILE_NAME" type="String" line="64"/>
            <declaration name="JRELIB_PROPERTY_FILE_NAME" type="String" line="69"/>
            <declaration name="listProperties" type="String[]" line="74"/>
            <declaration name="helper" type="VersionHelper" line="82"/>
            <declaration name="propertiesCache" type="WeakHashMap" line="92"/>
            <declaration name="factoryCache" type="WeakHashMap" line="102"/>
            <declaration name="urlFactoryCache" type="WeakHashMap" line="113"/>
            <declaration name="NO_FACTORY" type="WeakReference" line="114"/>
            <class name="AppletParameter" line="116">
                <javadoc line="116">
                    A class to allow JNDI properties be specified as applet parameters
                      without creating a static dependency on java.applet.                    
                </javadoc>
                <declaration name="clazz" type="Class&lt;?&gt;" line="121"/>
                <declaration name="getMethod" type="Method" line="122"/>
                <method name="getClass" type="Class<?>" line="124">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="125"/>
                    <scope line="127"/>
                </method>
                <method name="getMethod" type="Method" line="134">
                    <params>
                        <param name="clazz" type="Class<?>"/>
                        <param name="name" type="String"/>
                        <param name="paramTypes" type="Class<?>"/>
                    </params>
                    <scope line="135">
                        <scope line="136"/>
                        <scope line="138"/>
                    </scope>
                    <scope line="141"/>
                </method>
                <javadoc line="146">
                    Returns the value of the applet&apos;s named parameter.                    
                </javadoc>
                <method name="get" type="Object" line="149">
                    <params>
                        <param name="applet" type="Object"/>
                        <param name="name" type="String"/>
                    </params>
                    <comment line="151">
                        if clazz is null then applet cannot be an Applet.                        
                    </comment>
                    <scope line="153"/>
                    <scope line="155"/>
                    <scope line="157"/>
                </method>
            </class>
            <method name="ResourceManager" type="constructor" line="164"/>
            <method name="getInitialEnvironment" type="Hashtable" line="188">
                <params>
                    <param name="env" type="Hashtable"/>
                </params>
                <comment line="190">
                    system/applet properties                    
                </comment>
                <comment line="196">
                    Merge property values from env param, applet params, and system
                     properties.  The first value wins:  there&apos;s no concatenation of
                     colon-separated lists.
                     Read system properties by first trying System.getProperties(),
                     and then trying System.getProperty() if that fails.  The former
                     is more efficient due to fewer permission checks.                    
                </comment>
                <comment line="211">
                    Read system property.                    
                </comment>
                <comment line="222">
                    Merge the above with the values read from all application
                     resource files.  Colon-separated lists are concatenated.                    
                </comment>
                <declaration name="props" type="String[]" line="189"/>
                <scope line="190"/>
                <declaration name="applet" type="Object" line="193"/>
                <declaration name="jndiSysProps" type="String[]" line="202"/>
                <scope line="203">
                    <declaration name="val" type="Object" line="204"/>
                    <scope line="205">
                        <scope line="206"/>
                        <scope line="209"/>
                        <scope line="215"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="227">
                Retrieves the property from the environment, or from the provider
                  resource file associated with the given context.  The environment
                  may in turn contain values that come from applet parameters,
                  system properties, or application resource files.
                  If &lt;tt&gt;concat&lt;/tt&gt; is true and both the environment and the provider
                  resource file contain the property, the two values are concatenated
                  (with a &apos;:&apos; separator).
                  Returns null if no value is found.                
                <param>
                    propName The non-null property name                    
                </param>
                <param>
                    env      The possibly null environment properties                    
                </param>
                <param>
                    ctx      The possibly null context                    
                </param>
                <param>
                    concat   True if multiple values should be concatenated                    
                </param>
                <return>
                    the property value, or null is there is none.                    
                </return>
                <throws>
                    NamingException if an error occurs while reading the provider
                      resource file.                    
                </throws>
            </javadoc>
            <method name="getProperty" type="String" line="249">
                <params>
                    <param name="propName" type="String"/>
                    <param name="env" type="Hashtable"/>
                    <param name="ctx" type="Context"/>
                    <param name="concat" type="boolean"/>
                </params>
                <declaration name="val1" type="String" line="251"/>
                <scope line="253"/>
                <declaration name="val2" type="String" line="256"/>
                <scope line="257"/>
                <scope line="259"/>
                <scope line="261"/>
            </method>
            <javadoc line="266">
                Retrieves an enumeration of factory classes/object specified by a
                  property.
                  The property is gotten from the environment and the provider
                  resource file associated with the given context and concantenated.
                  See getProperty(). The resulting property value is a list of class names.
                  &lt;p&gt;
                  This method then loads each class using the current thread&apos;s context
                  class loader and keeps them in a list. Any class that cannot be loaded
                  is ignored. The resulting list is then cached in a two-level
                  hash table, keyed first by the context class loader and then by
                  the property&apos;s value.
                  The next time threads of the same context class loader call this
                  method, they can use the cached list.
                  &lt;p&gt;
                  After obtaining the list either from the cache or by creating one from
                  the property value, this method then creates and returns a
                  FactoryEnumeration using the list. As the FactoryEnumeration is
                  traversed, the cached Class object in the list is instantiated and
                  replaced by an instance of the factory object itself.  Both class
                  objects and factories are wrapped in weak references so as not to
                  prevent GC of the class loader.
                  &lt;p&gt;
                  Note that multiple threads can be accessing the same cached list
                  via FactoryEnumeration, which locks the list during each next().
                  The size of the list will not change,
                  but a cached Class object might be replaced by an instantiated factory
                  object.                
                <param>
                    propName  The non-null property name                    
                </param>
                <param>
                    env       The possibly null environment properties                    
                </param>
                <param>
                    ctx       The possibly null context                    
                </param>
                <return>
                    An enumeration of factory classes/objects; null if none.                    
                </return>
                <exception>
                    NamingException If encounter problem while reading the provider
                      property file.                    
                </exception>
                <see>
                    javax.naming.spi.NamingManager#getObjectInstance                    
                </see>
                <see>
                    javax.naming.spi.NamingManager#getStateToBind                    
                </see>
                <see>
                    javax.naming.spi.DirectoryManager#getObjectInstance                    
                </see>
                <see>
                    javax.naming.spi.DirectoryManager#getStateToBind                    
                </see>
                <see>
                    javax.naming.ldap.ControlFactory#getControlInstance                    
                </see>
            </javadoc>
            <method name="getFactories" type="FactoryEnumeration" line="309">
                <params>
                    <param name="propName" type="String"/>
                    <param name="env" type="Hashtable"/>
                    <param name="ctx" type="Context"/>
                </params>
                <comment line="314">
                    no classes specified; return null                    
                </comment>
                <comment line="316">
                    Cache is based on context class loader and property val                    
                </comment>
                <comment line="331">
                    Cached list                    
                </comment>
                <comment line="335">
                    Populate list with classes named in facProp; skipping
                     those that we cannot load                    
                </comment>
                <comment line="341">
                    System.out.println(&quot;loading&quot;);                    
                </comment>
                <comment line="346">
                    ignore ClassNotFoundException, IllegalArgumentException                    
                </comment>
                <comment line="349">
                    System.out.println(&quot;adding to cache: &quot; + factories);                    
                </comment>
                <declaration name="facProp" type="String" line="311"/>
                <declaration name="loader" type="ClassLoader" line="316"/>
                <declaration name="perLoaderCache" type="Map" line="318"/>
                <scope line="319">
                    <scope line="321"/>
                </scope>
                <scope line="327">
                    <declaration name="factories" type="List" line="328"/>
                    <scope line="329"/>
                    <scope line="333">
                        <declaration name="parser" type="StringTokenizer" line="336"/>
                        <scope line="338">
                            <scope line="339">
                                <declaration name="className" type="String" line="341"/>
                                <declaration name="c" type="Class" line="342"/>
                            </scope>
                            <scope line="344"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="355">
                Retrieves a factory from a list of packages specified in a
                  property.
                  The property is gotten from the environment and the provider
                  resource file associated with the given context and concatenated.
                  classSuffix is added to the end of this list.
                  See getProperty(). The resulting property value is a list of package
                  prefixes.
                  &lt;p&gt;
                  This method then constructs a list of class names by concatenating
                  each package prefix with classSuffix and attempts to load and
                  instantiate the class until one succeeds.
                  Any class that cannot be loaded is ignored.
                  The resulting object is then cached in a two-level hash table,
                  keyed first by the context class loader and then by the property&apos;s
                  value and classSuffix.
                  The next time threads of the same context class loader call this
                  method, they use the cached factory.
                  If no factory can be loaded, NO_FACTORY is recorded in the table
                  so that next time it&apos;ll return quickly.                
                <param>
                    propName  The non-null property name                    
                </param>
                <param>
                    env       The possibly null environment properties                    
                </param>
                <param>
                    ctx       The possibly null context                    
                </param>
                <param>
                    classSuffix The non-null class name
                      (e.g. &quot;.ldap.ldapURLContextFactory).                    
                </param>
                <param>
                    defaultPkgPrefix The non-null default package prefix.
                      (e.g., &quot;com.sun.jndi.url&quot;).                    
                </param>
                <return>
                    An factory object; null if none.                    
                </return>
                <exception>
                    NamingException If encounter problem while reading the provider
                      property file, or problem instantiating the factory.                    
                </exception>
                <see>
                    javax.naming.spi.NamingManager#getURLContext                    
                </see>
                <see>
                    javax.naming.spi.NamingManager#getURLObject                    
                </see>
            </javadoc>
            <method name="getFactory" type="Object" line="392">
                <params>
                    <param name="propName" type="String"/>
                    <param name="env" type="Hashtable"/>
                    <param name="ctx" type="Context"/>
                    <param name="classSuffix" type="String"/>
                    <param name="defaultPkgPrefix" type="String"/>
                </params>
                <comment line="395">
                    Merge property with provider property and supplied default                    
                </comment>
                <comment line="402">
                    Cache factory based on context class loader, class name, and
                     property val                    
                </comment>
                <comment line="424">
                    check if weak ref has been cleared                    
                </comment>
                <comment line="429">
                    Not cached; find first factory and cache                    
                </comment>
                <comment line="435">
                    System.out.println(&quot;loading &quot; + className);                    
                </comment>
                <comment line="448">
                    ignore ClassNotFoundException, IllegalArgumentException,
                     etc.                    
                </comment>
                <comment line="453">
                    Cache it.                    
                </comment>
                <declaration name="facProp" type="String" line="395"/>
                <declaration name="loader" type="ClassLoader" line="403"/>
                <declaration name="key" type="String" line="404"/>
                <declaration name="perLoaderCache" type="Map" line="406"/>
                <scope line="407">
                    <scope line="409"/>
                </scope>
                <scope line="415">
                    <declaration name="factory" type="Object" line="416"/>
                    <declaration name="factoryRef" type="WeakReference" line="418"/>
                    <scope line="419"/>
                    <scope line="421">
                        <scope line="423"/>
                    </scope>
                    <declaration name="parser" type="StringTokenizer" line="429"/>
                    <declaration name="className" type="String" line="430"/>
                    <scope line="431">
                        <scope line="433"/>
                        <scope line="436">
                            <declaration name="ne" type="NamingException" line="437"/>
                        </scope>
                        <scope line="441">
                            <declaration name="ne" type="NamingException" line="442"/>
                        </scope>
                        <scope line="446"/>
                    </scope>
                </scope>
            </method>
            <method name="getProviderResource" type="Hashtable" line="473">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="474"/>
                <scope line="477">
                    <declaration name="c" type="Class" line="478"/>
                    <declaration name="props" type="Hashtable" line="480"/>
                    <scope line="481"/>
                    <declaration name="istream" type="InputStream" line="486"/>
                    <scope line="489">
                        <scope line="490"/>
                        <scope line="492">
                            <declaration name="ne" type="NamingException" line="493"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getApplicationResources" type="Hashtable" line="521">
                <comment line="546">
                    Merge in properties from file in &lt;java.home&gt;/lib.                    
                </comment>
                <declaration name="cl" type="ClassLoader" line="523"/>
                <scope line="525">
                    <declaration name="result" type="Hashtable" line="526"/>
                    <scope line="527"/>
                    <scope line="531">
                        <declaration name="resources" type="NamingEnumeration" line="532"/>
                        <scope line="534">
                            <declaration name="props" type="Properties" line="535"/>
                            <scope line="538"/>
                            <scope line="540"/>
                        </scope>
                        <declaration name="istream" type="InputStream" line="546"/>
                        <scope line="548">
                            <declaration name="props" type="Properties" line="549"/>
                            <scope line="552"/>
                            <scope line="554"/>
                        </scope>
                    </scope>
                    <scope line="559">
                        <declaration name="ne" type="NamingException" line="560"/>
                    </scope>
                    <scope line="565"/>
                </scope>
            </method>
            <method name="mergeTables" type="void" line="580">
                <params>
                    <param name="props1" type="Hashtable"/>
                    <param name="props2" type="Hashtable"/>
                </params>
                <declaration name="keys" type="Enumeration" line="581"/>
                <scope line="583">
                    <declaration name="prop" type="String" line="584"/>
                    <declaration name="val1" type="Object" line="585"/>
                    <scope line="586"/>
                    <scope line="588">
                        <declaration name="val2" type="String" line="589"/>
                    </scope>
                </scope>
            </method>
            <method name="isListProperty" type="boolean" line="599">
                <params>
                    <param name="prop" type="String"/>
                </params>
                <scope line="601">
                    <scope line="602"/>
                </scope>
            </method>
        </class>
    </source>