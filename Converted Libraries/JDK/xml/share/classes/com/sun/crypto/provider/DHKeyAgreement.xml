<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.util"/>
        <import package="java.lang"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.Key"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="javax.crypto.KeyAgreementSpi"/>
        <import package="javax.crypto.ShortBufferException"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec"/>
        <class name="DHKeyAgreement" line="43">
            <extends class="KeyAgreementSpi"/>
            <comment line="58">
                the private value                
            </comment>
            <javadoc line="43">
                This class implements the Diffie-Hellman key agreement protocol between
                  any number of parties.                
                <author>
                    Jan Luehe                    
                </author>
            </javadoc>
            <declaration name="generateSecret" type="boolean" line="54"/>
            <declaration name="init_p" type="BigInteger" line="55"/>
            <declaration name="init_g" type="BigInteger" line="56"/>
            <declaration name="x" type="BigInteger" line="57"/>
            <declaration name="y" type="BigInteger" line="58"/>
            <javadoc line="60">
                Empty constructor                
            </javadoc>
            <method name="DHKeyAgreement" type="constructor" line="63"/>
            <javadoc line="66">
                Initializes this key agreement with the given key and source of
                  randomness. The given key is required to contain all the algorithm
                  parameters required for this key agreement.
                  &lt;p&gt; If the key agreement algorithm requires random bytes, it gets them
                  from the given source of randomness, &lt;code&gt;random&lt;/code&gt;.
                  However, if the underlying
                  algorithm implementation does not require any random bytes,
                  &lt;code&gt;random&lt;/code&gt; is ignored.                
                <param>
                    key the party's private information. For example, in the case
                      of the Diffie-Hellman key agreement, this would be the party's own
                      Diffie-Hellman private key.                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidKeyException if the given key is
                      inappropriate for this key agreement, e.g., is of the wrong type or
                      has an incompatible algorithm type.                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="88">
                <params>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <comment line="93">
                    never happens, because we did not pass any parameters                    
                </comment>
                <scope line="89"/>
                <scope line="91"/>
            </method>
            <javadoc line="96">
                Initializes this key agreement with the given key, set of
                  algorithm parameters, and source of randomness.                
                <param>
                    key the party's private information. For example, in the case
                      of the Diffie-Hellman key agreement, this would be the party's own
                      Diffie-Hellman private key.                    
                </param>
                <param>
                    params the key agreement parameters                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidKeyException if the given key is
                      inappropriate for this key agreement, e.g., is of the wrong type or
                      has an incompatible algorithm type.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given parameters
                      are inappropriate for this key agreement.                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="115">
                <params>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <comment line="117">
                    ignore &quot;random&quot; parameter, because our implementation does not
                     require any source of randomness                    
                </comment>
                <comment line="134">
                    check if private key parameters are compatible with
                     initialized ones                    
                </comment>
                <comment line="155">
                    store the x value                    
                </comment>
                <scope line="122"/>
                <scope line="126"/>
                <declaration name="dhPrivKey" type="javax.crypto.interfaces.DHPrivateKey" line="130"/>
                <scope line="135"/>
                <declaration name="priv_p" type="BigInteger" line="139"/>
                <declaration name="priv_g" type="BigInteger" line="140"/>
                <scope line="141"/>
                <scope line="144"/>
                <scope line="148"/>
            </method>
            <javadoc line="158">
                Executes the next phase of this key agreement with the given
                  key that was received from one of the other parties involved in this key
                  agreement.                
                <param>
                    key the key for this phase. For example, in the case of
                      Diffie-Hellman between 2 parties, this would be the other party's
                      Diffie-Hellman public key.                    
                </param>
                <param>
                    lastPhase flag which indicates whether or not this is the last
                      phase of this key agreement.                    
                </param>
                <return>
                    the (intermediate) key resulting from this phase, or null if
                      this phase does not yield a key                    
                </return>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      this phase.                    
                </exception>
                <exception>
                    IllegalStateException if this key agreement has not been
                      initialized.                    
                </exception>
            </javadoc>
            <method name="engineDoPhase" type="Key" line="179">
                <params>
                    <param name="key" type="Key"/>
                    <param name="lastPhase" type="boolean"/>
                </params>
                <comment line="192">
                    check if public key parameters are compatible with
                     initialized ones                    
                </comment>
                <comment line="203">
                    store the y value                    
                </comment>
                <comment line="206">
                    we&apos;ve received a public key (from one of the other parties),
                     so we are ready to create the secret, which may be an
                     intermediate secret, in which case we wrap it into a
                     Diffie-Hellman public key object and return it.                    
                </comment>
                <scope line="180"/>
                <declaration name="dhPubKey" type="javax.crypto.interfaces.DHPublicKey" line="184"/>
                <scope line="187"/>
                <declaration name="pub_p" type="BigInteger" line="193"/>
                <declaration name="pub_g" type="BigInteger" line="194"/>
                <scope line="195"/>
                <scope line="198"/>
                <scope line="210">
                    <declaration name="intermediate" type="byte[]" line="211"/>
                </scope>
                <scope line="214"/>
            </method>
            <javadoc line="219">
                Generates the shared secret and returns it in a new buffer.
                  &lt;p&gt;This method resets this &lt;code&gt;KeyAgreementSpi&lt;/code&gt; object,
                  so that it
                  can be reused for further key agreements. Unless this key agreement is
                  reinitialized with one of the &lt;code&gt;engineInit&lt;/code&gt; methods, the same
                  private information and algorithm parameters will be used for
                  subsequent key agreements.                
                <return>
                    the new buffer with the shared secret                    
                </return>
                <exception>
                    IllegalStateException if this key agreement has not been
                      completed yet                    
                </exception>
            </javadoc>
            <method name="engineGenerateSecret" type="byte[]" line="236">
                <comment line="243">
                    Reset the key agreement here (in case anything goes wrong)                    
                </comment>
                <comment line="246">
                    get the modulus                    
                </comment>
                <comment line="252">
                    BigInteger.toByteArray will sometimes put a sign byte up front, but
                     we NEVER want one.                    
                </comment>
                <scope line="237"/>
                <declaration name="modulus" type="BigInteger" line="246"/>
                <declaration name="tmpResult" type="BigInteger" line="248"/>
                <declaration name="secret" type="byte[]" line="249"/>
                <scope line="255">
                    <declaration name="retval" type="byte" line="256"/>
                </scope>
                <scope line="259"/>
            </method>
            <javadoc line="264">
                Generates the shared secret, and places it into the buffer
                  &lt;code&gt;sharedSecret&lt;/code&gt;, beginning at &lt;code&gt;offset&lt;/code&gt;.
                  &lt;p&gt;If the &lt;code&gt;sharedSecret&lt;/code&gt; buffer is too small to hold the
                  result, a &lt;code&gt;ShortBufferException&lt;/code&gt; is thrown.
                  In this case, this call should be repeated with a larger output buffer.
                  &lt;p&gt;This method resets this &lt;code&gt;KeyAgreementSpi&lt;/code&gt; object,
                  so that it
                  can be reused for further key agreements. Unless this key agreement is
                  reinitialized with one of the &lt;code&gt;engineInit&lt;/code&gt; methods, the same
                  private information and algorithm parameters will be used for
                  subsequent key agreements.                
                <param>
                    sharedSecret the buffer for the shared secret                    
                </param>
                <param>
                    offset the offset in <code>sharedSecret</code> where the
                      shared secret will be stored                    
                </param>
                <return>
                    the number of bytes placed into <code>sharedSecret</code>                    
                </return>
                <exception>
                    IllegalStateException if this key agreement has not been
                      completed yet                    
                </exception>
                <exception>
                    ShortBufferException if the given output buffer is too small
                      to hold the secret                    
                </exception>
            </javadoc>
            <method name="engineGenerateSecret" type="int" line="292">
                <params>
                    <param name="sharedSecret" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
                <comment line="307">
                    BigInteger.toByteArray will sometimes put a sign byte up front,
                     but we NEVER want one.                    
                </comment>
                <comment line="317">
                    Reset the key agreement here (not earlier!), so that people
                     can recover from ShortBufferException above without losing
                     internal state                    
                </comment>
                <comment line="331">
                    Reset the key agreement here (not earlier!), so that people
                     can recover from ShortBufferException above without losing
                     internal state                    
                </comment>
                <scope line="293"/>
                <scope line="298"/>
                <declaration name="modulus" type="BigInteger" line="303"/>
                <declaration name="secret" type="byte[]" line="304"/>
                <scope line="308">
                    <scope line="309"/>
                </scope>
                <scope line="323">
                    <scope line="324"/>
                </scope>
            </method>
            <javadoc line="339">
                Creates the shared secret and returns it as a secret key object
                  of the requested algorithm type.
                  &lt;p&gt;This method resets this &lt;code&gt;KeyAgreementSpi&lt;/code&gt; object,
                  so that it
                  can be reused for further key agreements. Unless this key agreement is
                  reinitialized with one of the &lt;code&gt;engineInit&lt;/code&gt; methods, the same
                  private information and algorithm parameters will be used for
                  subsequent key agreements.                
                <param>
                    algorithm the requested secret key algorithm                    
                </param>
                <return>
                    the shared secret key                    
                </return>
                <exception>
                    IllegalStateException if this key agreement has not been
                      completed yet                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the requested secret key
                      algorithm is not available                    
                </exception>
                <exception>
                    InvalidKeyException if the shared secret key material cannot
                      be used to generate a secret key of the requested algorithm type (e.g.,
                      the key material is too short)                    
                </exception>
            </javadoc>
            <method name="engineGenerateSecret" type="SecretKey" line="365">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <comment line="372">
                    DES                    
                </comment>
                <comment line="376">
                    Triple DES                    
                </comment>
                <comment line="379">
                    Blowfish                    
                </comment>
                <comment line="387">
                    AES                    
                </comment>
                <comment line="392">
                    Generate the strongest key using the shared secret
                     assuming the key sizes in AESConstants class are
                     in ascending order                    
                </comment>
                <comment line="406">
                    return entire secret                    
                </comment>
                <scope line="366"/>
                <declaration name="secret" type="byte[]" line="369"/>
                <scope line="370"/>
                <scope line="374"/>
                <scope line="377">
                    <declaration name="keysize" type="int" line="379"/>
                    <declaration name="skey" type="SecretKeySpec" line="382"/>
                </scope>
                <scope line="385">
                    <declaration name="keysize" type="int" line="387"/>
                    <declaration name="skey" type="SecretKeySpec" line="388"/>
                    <declaration name="idx" type="int" line="389"/>
                    <scope line="390">
                        <scope line="394"/>
                    </scope>
                    <scope line="400"/>
                </scope>
                <scope line="404"/>
                <scope line="407"/>
            </method>
        </class>
    </source>