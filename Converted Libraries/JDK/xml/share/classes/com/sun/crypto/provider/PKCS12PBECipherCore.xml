<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.spec"/>
        <import package="java.util.Arrays"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <class name="PKCS12PBECipherCore" line="36">
            <javadoc line="36">
                This class implements password-base encryption algorithm with
                  SHA1 digest and the following Ciphers in CBC mode
                  - DESede cipher and
                  - RC2 Cipher with 40-bit effective key length
                  as defined by PKCS #12 version 1.0 standard.                
                <author>
                    Valerie Peng                    
                </author>
                <see>
                    javax.crypto.CipherSpi                    
                </see>
            </javadoc>
            <declaration name="cipher" type="CipherCore" line="47"/>
            <declaration name="blockSize" type="int" line="48"/>
            <declaration name="keySize" type="int" line="49"/>
            <declaration name="algo" type="String" line="50"/>
            <declaration name="salt" type="byte[]" line="51"/>
            <declaration name="iCount" type="int" line="52"/>
            <declaration name="DEFAULT_SALT_LENGTH" type="int" line="54"/>
            <declaration name="DEFAULT_COUNT" type="int" line="55"/>
            <declaration name="CIPHER_KEY" type="int" line="57"/>
            <declaration name="CIPHER_IV" type="int" line="58"/>
            <declaration name="MAC_KEY" type="int" line="59"/>
            <method name="derive" type="byte[]" line="62">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="salt" type="byte[]"/>
                    <param name="ic" type="int"/>
                    <param name="n" type="int"/>
                    <param name="type" type="int"/>
                </params>
                <comment line="63">
                    Add in trailing NULL terminator.                    
                </comment>
                <declaration name="length" type="int" line="64"/>
                <scope line="65"/>
                <declaration name="passwd" type="byte[]" line="68"/>
                <scope line="69"/>
                <declaration name="v" type="int" line="73"/>
                <declaration name="u" type="int" line="74"/>
                <declaration name="c" type="int" line="75"/>
                <declaration name="D" type="byte[]" line="76"/>
                <declaration name="s" type="int" line="77"/>
                <declaration name="p" type="int" line="78"/>
                <declaration name="I" type="byte[]" line="79"/>
                <declaration name="key" type="byte[]" line="80"/>
                <scope line="86">
                    <declaration name="sha" type="MessageDigest" line="87"/>
                    <declaration name="Ai" type="byte[]" line="88"/>
                    <declaration name="B" type="byte[]" line="89"/>
                    <declaration name="tmp" type="byte[]" line="90"/>
                    <declaration name="i" type="int" line="92"/>
                    <scope line="93">
                        <declaration name="B1" type="BigInteger" line="103"/>
                        <scope line="106">
                            <declaration name="Ij" type="BigInteger" line="107"/>
                            <declaration name="trunc" type="int" line="108"/>
                            <scope line="117"/>
                            <scope line="119"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="125"/>
            </method>
            <method name="roundup" type="int" line="131">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <method name="concat" type="void" line="135">
                <params>
                    <param name="src" type="byte[]"/>
                    <param name="dst" type="byte[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="loop" type="int" line="136"/>
                <declaration name="off" type="int" line="137"/>
            </method>
            <method name="PKCS12PBECipherCore" type="constructor" line="144">
                <params>
                    <param name="symmCipherAlg" type="String"/>
                    <param name="defKeySize" type="int"/>
                </params>
                <comment line="161">
                    should not happen                    
                </comment>
                <declaration name="symmCipher" type="SymmetricCipher" line="146"/>
                <scope line="147"/>
                <scope line="149"/>
                <scope line="151"/>
                <scope line="158"/>
                <scope line="160"/>
            </method>
            <method name="implSetMode" type="void" line="166">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <scope line="167"/>
            </method>
            <method name="implSetPadding" type="void" line="173">
                <params>
                    <param name="padding" type="String"/>
                </params>
                <scope line="175"/>
            </method>
            <method name="implGetBlockSize" type="int" line="181"/>
            <method name="implGetOutputSize" type="int" line="185">
                <params>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <method name="implGetIV" type="byte[]" line="189"/>
            <method name="implGetParameters" type="AlgorithmParameters" line="193">
                <comment line="196">
                    Cipher is not initialized with parameters;                    
                </comment>
                <comment line="197">
                    follow the recommendation in PKCS12 v1.0                    
                </comment>
                <comment line="198">
                    section B.4 to generate salt and iCount.                    
                </comment>
                <comment line="208">
                    should never happen                    
                </comment>
                <comment line="215">
                    should never happen                    
                </comment>
                <declaration name="params" type="AlgorithmParameters" line="194"/>
                <scope line="195"/>
                <declaration name="pbeSpec" type="PBEParameterSpec" line="203"/>
                <scope line="204"/>
                <scope line="207"/>
                <scope line="212"/>
                <scope line="214"/>
            </method>
            <method name="implInit" type="void" line="223">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <comment line="231">
                    maybe null if unspecified                    
                </comment>
                <comment line="232">
                    maybe 0 if unspecified                    
                </comment>
                <comment line="255">
                    generate default for salt and iteration count if necessary                    
                </comment>
                <comment line="270">
                    make sure the parameter values are consistent                    
                </comment>
                <comment line="288">
                    salt is recommended to be ideally as long as the output                    
                </comment>
                <comment line="289">
                    of the hash function. However, it may be too strict to                    
                </comment>
                <comment line="290">
                    force this; so instead, we&apos;ll just require the minimum                    
                </comment>
                <comment line="291">
                    salt length to be 8-byte which is what PKCS#5 recommends                    
                </comment>
                <comment line="292">
                    and openssl does.                    
                </comment>
                <comment line="308">
                    initialize the underlying cipher                    
                </comment>
                <declaration name="passwdChars" type="char[]" line="224"/>
                <scope line="227">
                    <declaration name="pbeKey" type="javax.crypto.interfaces.PBEKey" line="228"/>
                </scope>
                <scope line="233">
                    <declaration name="passwdBytes" type="byte[]" line="234"/>
                    <scope line="236"/>
                    <scope line="240"/>
                </scope>
                <scope line="243"/>
                <scope line="249"/>
                <scope line="254">
                    <scope line="256">
                        <scope line="258"/>
                        <scope line="260"/>
                    </scope>
                </scope>
                <scope line="265"/>
                <scope line="268">
                    <declaration name="pbeParams" type="PBEParameterSpec" line="269"/>
                    <scope line="271">
                        <scope line="272"/>
                    </scope>
                    <scope line="276"/>
                    <scope line="279">
                        <scope line="280"/>
                    </scope>
                    <scope line="284"/>
                </scope>
                <scope line="293"/>
                <scope line="297"/>
                <declaration name="derivedKey" type="byte[]" line="301"/>
                <declaration name="cipherKey" type="SecretKey" line="303"/>
                <declaration name="derivedIv" type="byte[]" line="304"/>
                <declaration name="ivSpec" type="IvParameterSpec" line="306"/>
            </method>
            <method name="implInit" type="void" line="314">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="paramSpec" type="AlgorithmParameterSpec" line="315"/>
                <scope line="316">
                    <scope line="317"/>
                    <scope line="319"/>
                </scope>
            </method>
            <method name="implInit" type="void" line="328">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="329"/>
                <scope line="331"/>
            </method>
            <method name="implUpdate" type="byte[]" line="336">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOff" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <method name="implUpdate" type="int" line="341">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOff" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOff" type="int"/>
                </params>
            </method>
            <method name="implDoFinal" type="byte[]" line="346">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOff" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <method name="implDoFinal" type="int" line="352">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOff" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOff" type="int"/>
                </params>
            </method>
            <method name="implGetKeySize" type="int" line="356">
                <params>
                    <param name="key" type="Key"/>
                </params>
            </method>
            <method name="implWrap" type="byte[]" line="361">
                <params>
                    <param name="key" type="Key"/>
                </params>
            </method>
            <method name="implUnwrap" type="Key" line="367">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="wrappedKeyAlgorithm" type="String"/>
                    <param name="wrappedKeyType" type="int"/>
                </params>
            </method>
            <class name="PBEWithSHA1AndDESede" line="372">
                <extends class="CipherSpi"/>
                <declaration name="core" type="PKCS12PBECipherCore" line="373"/>
                <method name="PBEWithSHA1AndDESede" type="constructor" line="374"/>
                <method name="engineDoFinal" type="byte[]" line="378">
                    <params>
                        <param name="in" type="byte[]"/>
                        <param name="inOff" type="int"/>
                        <param name="inLen" type="int"/>
                    </params>
                </method>
                <method name="engineDoFinal" type="int" line="384">
                    <params>
                        <param name="in" type="byte[]"/>
                        <param name="inOff" type="int"/>
                        <param name="inLen" type="int"/>
                        <param name="out" type="byte[]"/>
                        <param name="outOff" type="int"/>
                    </params>
                </method>
                <method name="engineGetBlockSize" type="int" line="387"/>
                <method name="engineGetIV" type="byte[]" line="390"/>
                <method name="engineGetKeySize" type="int" line="393">
                    <params>
                        <param name="key" type="Key"/>
                    </params>
                </method>
                <method name="engineGetOutputSize" type="int" line="396">
                    <params>
                        <param name="inLen" type="int"/>
                    </params>
                </method>
                <method name="engineGetParameters" type="AlgorithmParameters" line="399"/>
                <method name="engineInit" type="void" line="405">
                    <params>
                        <param name="opmode" type="int"/>
                        <param name="key" type="Key"/>
                        <param name="params" type="AlgorithmParameterSpec"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                </method>
                <method name="engineInit" type="void" line="411">
                    <params>
                        <param name="opmode" type="int"/>
                        <param name="key" type="Key"/>
                        <param name="params" type="AlgorithmParameters"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                </method>
                <method name="engineInit" type="void" line="415">
                    <params>
                        <param name="opmode" type="int"/>
                        <param name="key" type="Key"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                </method>
                <method name="engineSetMode" type="void" line="419">
                    <params>
                        <param name="mode" type="String"/>
                    </params>
                </method>
                <method name="engineSetPadding" type="void" line="423">
                    <params>
                        <param name="paddingScheme" type="String"/>
                    </params>
                </method>
                <method name="engineUnwrap" type="Key" line="429">
                    <params>
                        <param name="wrappedKey" type="byte[]"/>
                        <param name="wrappedKeyAlgorithm" type="String"/>
                        <param name="wrappedKeyType" type="int"/>
                    </params>
                </method>
                <method name="engineUpdate" type="byte[]" line="433">
                    <params>
                        <param name="in" type="byte[]"/>
                        <param name="inOff" type="int"/>
                        <param name="inLen" type="int"/>
                    </params>
                </method>
                <method name="engineUpdate" type="int" line="438">
                    <params>
                        <param name="in" type="byte[]"/>
                        <param name="inOff" type="int"/>
                        <param name="inLen" type="int"/>
                        <param name="out" type="byte[]"/>
                        <param name="outOff" type="int"/>
                    </params>
                </method>
                <method name="engineWrap" type="byte[]" line="442">
                    <params>
                        <param name="key" type="Key"/>
                    </params>
                </method>
            </class>
            <class name="PBEWithSHA1AndRC2_40" line="447">
                <extends class="CipherSpi"/>
                <declaration name="core" type="PKCS12PBECipherCore" line="448"/>
                <method name="PBEWithSHA1AndRC2_40" type="constructor" line="449"/>
                <method name="engineDoFinal" type="byte[]" line="453">
                    <params>
                        <param name="in" type="byte[]"/>
                        <param name="inOff" type="int"/>
                        <param name="inLen" type="int"/>
                    </params>
                </method>
                <method name="engineDoFinal" type="int" line="459">
                    <params>
                        <param name="in" type="byte[]"/>
                        <param name="inOff" type="int"/>
                        <param name="inLen" type="int"/>
                        <param name="out" type="byte[]"/>
                        <param name="outOff" type="int"/>
                    </params>
                </method>
                <method name="engineGetBlockSize" type="int" line="462"/>
                <method name="engineGetIV" type="byte[]" line="465"/>
                <method name="engineGetKeySize" type="int" line="468">
                    <params>
                        <param name="key" type="Key"/>
                    </params>
                </method>
                <method name="engineGetOutputSize" type="int" line="471">
                    <params>
                        <param name="inLen" type="int"/>
                    </params>
                </method>
                <method name="engineGetParameters" type="AlgorithmParameters" line="474"/>
                <method name="engineInit" type="void" line="480">
                    <params>
                        <param name="opmode" type="int"/>
                        <param name="key" type="Key"/>
                        <param name="params" type="AlgorithmParameterSpec"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                </method>
                <method name="engineInit" type="void" line="486">
                    <params>
                        <param name="opmode" type="int"/>
                        <param name="key" type="Key"/>
                        <param name="params" type="AlgorithmParameters"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                </method>
                <method name="engineInit" type="void" line="490">
                    <params>
                        <param name="opmode" type="int"/>
                        <param name="key" type="Key"/>
                        <param name="random" type="SecureRandom"/>
                    </params>
                </method>
                <method name="engineSetMode" type="void" line="494">
                    <params>
                        <param name="mode" type="String"/>
                    </params>
                </method>
                <method name="engineSetPadding" type="void" line="498">
                    <params>
                        <param name="paddingScheme" type="String"/>
                    </params>
                </method>
                <method name="engineUnwrap" type="Key" line="504">
                    <params>
                        <param name="wrappedKey" type="byte[]"/>
                        <param name="wrappedKeyAlgorithm" type="String"/>
                        <param name="wrappedKeyType" type="int"/>
                    </params>
                </method>
                <method name="engineUpdate" type="byte[]" line="508">
                    <params>
                        <param name="in" type="byte[]"/>
                        <param name="inOff" type="int"/>
                        <param name="inLen" type="int"/>
                    </params>
                </method>
                <method name="engineUpdate" type="int" line="513">
                    <params>
                        <param name="in" type="byte[]"/>
                        <param name="inOff" type="int"/>
                        <param name="inLen" type="int"/>
                        <param name="out" type="byte[]"/>
                        <param name="outOff" type="int"/>
                    </params>
                </method>
                <method name="engineWrap" type="byte[]" line="517">
                    <params>
                        <param name="key" type="Key"/>
                    </params>
                </method>
            </class>
        </class>
    </source>