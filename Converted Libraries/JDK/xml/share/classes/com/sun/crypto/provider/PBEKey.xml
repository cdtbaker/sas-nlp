<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.security.KeyRep"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec.PBEKeySpec"/>
        <class name="PBEKey" line="34">
            <implements interface="SecretKey"/>
            <javadoc line="34">
                This class represents a PBE key.                
                <author>
                    Jan Luehe                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="42"/>
            <declaration name="key" type="byte[]" line="44"/>
            <declaration name="type" type="String" line="46"/>
            <javadoc line="48">
                Creates a PBE key from a given PBE key specification.                
                <param>
                    key the given PBE key specification                    
                </param>
            </javadoc>
            <method name="PBEKey" type="constructor" line="53">
                <params>
                    <param name="keySpec" type="PBEKeySpec"/>
                    <param name="keytype" type="String"/>
                </params>
                <comment line="57">
                    Should allow an empty password.                    
                </comment>
                <declaration name="passwd" type="char[]" line="54"/>
                <scope line="55"/>
                <scope line="59">
                    <scope line="60"/>
                </scope>
            </method>
            <method name="getEncoded" type="byte[]" line="71"/>
            <method name="getAlgorithm" type="String" line="75"/>
            <method name="getFormat" type="String" line="79"/>
            <javadoc line="83">
                Calculates a hash code value for the object.
                  Objects that are equal will also have the same hashcode.                
            </javadoc>
            <method name="hashCode" type="int" line="87">
                <declaration name="retval" type="int" line="88"/>
                <scope line="89"/>
            </method>
            <method name="equals" type="boolean" line="95">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="SecretKey" line="102"/>
                <declaration name="thatEncoded" type="byte[]" line="107"/>
                <declaration name="ret" type="boolean" line="108"/>
            </method>
            <javadoc line="113">
                readObject is called to restore the state of this key from
                  a stream.                
            </javadoc>
            <method name="readObject" type="void" line="119">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="125">
                Replace the PBE key to be serialized.                
                <return>
                    the standard KeyRep object to be serialized                    
                </return>
                <throws>
                    java.io.ObjectStreamException if a new object representing
                      this PBE key could not be created                    
                </throws>
            </javadoc>
            <method name="writeReplace" type="Object" line="133"/>
            <javadoc line="140">
                Ensures that the password bytes of this key are
                  set to zero when there are no more references to it.                
            </javadoc>
            <method name="finalize" type="void" line="144">
                <scope line="145">
                    <scope line="146"/>
                </scope>
                <scope line="150"/>
            </method>
        </class>
    </source>