<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.InvalidKeyException"/>
        <import package="javax.crypto.IllegalBlockSizeException"/>
        <class name="FeedbackCipher" line="4">
            <javadoc line="4">
                This class represents a block cipher in one of its modes. It wraps
                  a SymmetricCipher maintaining the mode state and providing
                  the capability to encrypt amounts of data larger than a single block.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    ElectronicCodeBook                    
                </see>
                <see>
                    CipherBlockChaining                    
                </see>
                <see>
                    CipherFeedback                    
                </see>
                <see>
                    OutputFeedback                    
                </see>
                <see>
                    PCBC                    
                </see>
            </javadoc>
            <declaration name="embeddedCipher" type="SymmetricCipher" line="16"/>
            <declaration name="blockSize" type="int" line="17"/>
            <declaration name="iv" type="byte[]" line="18"/>
            <method name="FeedbackCipher" type="constructor" line="19">
                <params>
                    <param name="embeddedCipher" type="SymmetricCipher"/>
                </params>
            </method>
            <method name="getEmbeddedCipher" type="SymmetricCipher" line="23"/>
            <javadoc line="26">
                Gets the block size of the embedded cipher.                
                <return>
                    the block size of the embedded cipher                    
                </return>
            </javadoc>
            <method name="getBlockSize" type="int" line="30"/>
            <method name="getFeedback" type="String" line="33"/>
            <javadoc line="33">
                Gets the name of the feedback mechanism                
                <return>
                    the name of the feedback mechanism                    
                </return>
            </javadoc>
            <method name="save" type="void" line="38"/>
            <javadoc line="38">
                Save the current content of this cipher.                
            </javadoc>
            <method name="restore" type="void" line="42"/>
            <javadoc line="42">
                Restores the content of this cipher to the previous saved one.                
            </javadoc>
            <method name="init" type="void" line="46"/>
            <javadoc line="46">
                Initializes the cipher in the specified mode with the given key
                  and iv.                
                <param>
                    decrypting flag indicating encryption or decryption mode                    
                </param>
                <param>
                    algorithm the algorithm name (never null)                    
                </param>
                <param>
                    key the key (never null)                    
                </param>
                <param>
                    iv the iv (either null or blockSize bytes long)                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this cipher                    
                </exception>
            </javadoc>
            <javadoc line="57">
                Gets the initialization vector.                
                <return>
                    the initialization vector                    
                </return>
            </javadoc>
            <method name="getIV" type="byte[]" line="61"/>
            <method name="reset" type="void" line="64"/>
            <javadoc line="64">
                Resets the iv to its original value.
                  This is used when doFinal is called in the Cipher class, so that the
                  cipher can be reused (with its original iv).                
            </javadoc>
            <method name="encrypt" type="void" line="70"/>
            <javadoc line="70">
                Performs encryption operation.
                  &lt;p&gt;The input &lt;code&gt;plain&lt;/code&gt;, starting at &lt;code&gt;plainOffset&lt;/code&gt;
                  and ending at &lt;code&gt;(plainOffset+plainLen-1)&lt;/code&gt;, is encrypted.
                  The result is stored in &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt;.
                  &lt;p&gt;The subclass that implements Cipher should ensure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.                
                <param>
                    plain the input buffer with the data to be encrypted                    
                </param>
                <param>
                    plainOffset the offset in &lt;code&gt;plain&lt;/code&gt;                    
                </param>
                <param>
                    plainLen the length of the input data                    
                </param>
                <param>
                    cipher the buffer for the encryption result                    
                </param>
                <param>
                    cipherOffset the offset in &lt;code&gt;cipher&lt;/code&gt;                    
                </param>
            </javadoc>
            <javadoc line="85">
                Performs encryption operation for the last time.
                  &lt;p&gt;NOTE: For cipher feedback modes which does not perform
                  special handling for the last few blocks, this is essentially
                  the same as &lt;code&gt;encrypt(...)&lt;/code&gt;. Given most modes do
                  not do special handling, the default impl for this method is
                  to simply call &lt;code&gt;encrypt(...)&lt;/code&gt;.                
                <param>
                    plain the input buffer with the data to be encrypted                    
                </param>
                <param>
                    plainOffset the offset in &lt;code&gt;plain&lt;/code&gt;                    
                </param>
                <param>
                    plainLen the length of the input data                    
                </param>
                <param>
                    cipher the buffer for the encryption result                    
                </param>
                <param>
                    cipherOffset the offset in &lt;code&gt;cipher&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="encryptFinal" type="void" line="98">
                <params>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                    <param name="plainLen" type="int"/>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                </params>
            </method>
            <method name="decrypt" type="void" line="101"/>
            <javadoc line="101">
                Performs decryption operation.
                  &lt;p&gt;The input &lt;code&gt;cipher&lt;/code&gt;, starting at &lt;code&gt;cipherOffset&lt;/code&gt;
                  and ending at &lt;code&gt;(cipherOffset+cipherLen-1)&lt;/code&gt;, is decrypted.
                  The result is stored in &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt;.
                  &lt;p&gt;The subclass that implements Cipher should ensure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.                
                <param>
                    cipher the input buffer with the data to be decrypted                    
                </param>
                <param>
                    cipherOffset the offset in &lt;code&gt;cipher&lt;/code&gt;                    
                </param>
                <param>
                    cipherLen the length of the input data                    
                </param>
                <param>
                    plain the buffer for the decryption result                    
                </param>
                <param>
                    plainOffset the offset in &lt;code&gt;plain&lt;/code&gt;                    
                </param>
            </javadoc>
            <javadoc line="116">
                Performs decryption operation for the last time.
                  &lt;p&gt;NOTE: For cipher feedback modes which does not perform
                  special handling for the last few blocks, this is essentially
                  the same as &lt;code&gt;encrypt(...)&lt;/code&gt;. Given most modes do
                  not do special handling, the default impl for this method is
                  to simply call &lt;code&gt;decrypt(...)&lt;/code&gt;.                
                <param>
                    cipher the input buffer with the data to be decrypted                    
                </param>
                <param>
                    cipherOffset the offset in &lt;code&gt;cipher&lt;/code&gt;                    
                </param>
                <param>
                    cipherLen the length of the input data                    
                </param>
                <param>
                    plain the buffer for the decryption result                    
                </param>
                <param>
                    plainOffset the offset in &lt;code&gt;plain&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="decryptFinal" type="void" line="129">
                <params>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                    <param name="cipherLen" type="int"/>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                </params>
            </method>
        </class>
    </source>