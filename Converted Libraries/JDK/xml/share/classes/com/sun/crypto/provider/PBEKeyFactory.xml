<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.spec.KeySpec"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.SecretKeyFactorySpi"/>
        <import package="javax.crypto.spec.PBEKeySpec"/>
        <import package="java.util.HashSet"/>
        <class name="PBEKeyFactory" line="37">
            <extends class="SecretKeyFactorySpi"/>
            <comment line="89">
                Private proprietary algorithm for supporting JCEKS.                
            </comment>
            <javadoc line="37">
                This class implements a key factory for PBE keys according to PKCS#5,
                  meaning that the password must consist of printable ASCII characters
                  (values 32 to 126 decimal inclusive) and only the low order 8 bits
                  of each password character are used.                
                <author>
                    Jan Luehe                    
                </author>
            </javadoc>
            <declaration name="type" type="String" line="48"/>
            <declaration name="validTypes" type="HashSet&lt;String&gt;" line="49"/>
            <javadoc line="51">
                Simple constructor                
            </javadoc>
            <method name="PBEKeyFactory" type="constructor" line="54">
                <params>
                    <param name="keytype" type="String"/>
                </params>
            </method>
            <scope line="58"/>
            <class name="PBEWithMD5AndDES" line="67">
                <extends class="PBEKeyFactory"/>
                <method name="PBEWithMD5AndDES" type="constructor" line="69"/>
            </class>
            <class name="PBEWithSHA1AndDESede" line="74">
                <extends class="PBEKeyFactory"/>
                <method name="PBEWithSHA1AndDESede" type="constructor" line="76"/>
            </class>
            <class name="PBEWithSHA1AndRC2_40" line="81">
                <extends class="PBEKeyFactory"/>
                <method name="PBEWithSHA1AndRC2_40" type="constructor" line="83"/>
            </class>
            <class name="PBEWithMD5AndTripleDES" line="91">
                <extends class="PBEKeyFactory"/>
                <method name="PBEWithMD5AndTripleDES" type="constructor" line="93"/>
            </class>
            <javadoc line="99">
                Generates a &lt;code&gt;SecretKey&lt;/code&gt; object from the provided key
                  specification (key material).                
                <param>
                    keySpec the specification (key material) of the secret key                    
                </param>
                <return>
                    the secret key                    
                </return>
                <exception>
                    InvalidKeySpecException if the given key specification
                      is inappropriate for this key factory to produce a public key.                    
                </exception>
            </javadoc>
            <method name="engineGenerateSecret" type="SecretKey" line="112">
                <params>
                    <param name="keySpec" type="KeySpec"/>
                </params>
                <scope line="113"/>
            </method>
            <javadoc line="119">
                Returns a specification (key material) of the given key
                  in the requested format.                
                <param>
                    key the key                    
                </param>
                <param>
                    keySpec the requested format in which the key material shall be
                      returned                    
                </param>
                <return>
                    the underlying key specification (key material) in the
                      requested format                    
                </return>
                <exception>
                    InvalidKeySpecException if the requested key specification is
                      inappropriate for the given key, or the given key cannot be processed
                      (e.g., the given key has an unrecognized algorithm or format).                    
                </exception>
            </javadoc>
            <method name="engineGetKeySpec" type="KeySpec" line="136">
                <params>
                    <param name="key" type="SecretKey"/>
                    <param name="keySpecCl" type="Class"/>
                </params>
                <comment line="141">
                    Check if requested key spec is amongst the valid ones                    
                </comment>
                <comment line="149">
                    password char[] was cloned in PBEKeySpec constructor,                    
                </comment>
                <comment line="150">
                    so we can zero it out here                    
                </comment>
                <scope line="139">
                    <scope line="143">
                        <declaration name="passwdBytes" type="byte[]" line="144"/>
                        <declaration name="passwdChars" type="char[]" line="145"/>
                        <declaration name="ret" type="PBEKeySpec" line="148"/>
                    </scope>
                    <scope line="154"/>
                </scope>
                <scope line="157"/>
            </method>
            <javadoc line="163">
                Translates a &lt;code&gt;SecretKey&lt;/code&gt; object, whose provider may be
                  unknown or potentially untrusted, into a corresponding
                  &lt;code&gt;SecretKey&lt;/code&gt; object of this key factory.                
                <param>
                    key the key whose provider is unknown or untrusted                    
                </param>
                <return>
                    the translated key                    
                </return>
                <exception>
                    InvalidKeyException if the given key cannot be processed by
                      this key factory.                    
                </exception>
            </javadoc>
            <method name="engineTranslateKey" type="SecretKey" line="177">
                <params>
                    <param name="key" type="SecretKey"/>
                </params>
                <comment line="183">
                    Check if key originates from this factory                    
                </comment>
                <comment line="188">
                    Convert key to spec                    
                </comment>
                <comment line="192">
                    Create key from spec, and return it                    
                </comment>
                <scope line="178">
                    <scope line="181">
                        <scope line="184"/>
                        <declaration name="pbeKeySpec" type="PBEKeySpec" line="189"/>
                    </scope>
                    <scope line="194"/>
                </scope>
                <scope line="198"/>
            </method>
        </class>
    </source>