<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.KeyRep"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.ProviderException"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec.DHParameterSpec"/>
        <import package="sun.security.util"/>
        <class name="DHPrivateKey" line="38">
            <comment line="54">
                only supported version of PKCS#8 PrivateKeyInfo                
            </comment>
            <comment line="57">
                the private key                
            </comment>
            <comment line="60">
                the key bytes, without the algorithm information                
            </comment>
            <comment line="63">
                the encoded key                
            </comment>
            <comment line="66">
                the prime modulus                
            </comment>
            <comment line="69">
                the base generator                
            </comment>
            <comment line="72">
                the private-value length                
            </comment>
            <implements interface="PrivateKey"/>
            <implements interface="javax.crypto.interfaces.DHPrivateKey"/>
            <implements interface="Serializable"/>
            <javadoc line="38">
                A private key in PKCS#8 format for the Diffie-Hellman key agreement
                  algorithm.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    DHPublicKey                    
                </see>
                <see>
                    java.security.KeyAgreement                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="51"/>
            <declaration name="PKCS8_VERSION" type="BigInteger" line="54"/>
            <declaration name="x" type="BigInteger" line="57"/>
            <declaration name="key" type="byte[]" line="60"/>
            <declaration name="encodedKey" type="byte[]" line="63"/>
            <declaration name="p" type="BigInteger" line="66"/>
            <declaration name="g" type="BigInteger" line="69"/>
            <declaration name="l" type="int" line="72"/>
            <declaration name="DH_data" type="int" line="74"/>
            <javadoc line="76">
                Make a DH private key out of a private value &lt;code&gt;x&lt;/code&gt;, a prime
                  modulus &lt;code&gt;p&lt;/code&gt;, and a base generator &lt;code&gt;g&lt;/code&gt;.                
                <param>
                    x the private value                    
                </param>
                <param>
                    p the prime modulus                    
                </param>
                <param>
                    g the base generator                    
                </param>
                <exception>
                    ProviderException if the key cannot be encoded                    
                </exception>
            </javadoc>
            <method name="DHPrivateKey" type="constructor" line="87">
                <params>
                    <param name="x" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="91">
                Make a DH private key out of a private value &lt;code&gt;x&lt;/code&gt;, a prime
                  modulus &lt;code&gt;p&lt;/code&gt;, a base generator &lt;code&gt;g&lt;/code&gt;, and a
                  private-value length &lt;code&gt;l&lt;/code&gt;.                
                <param>
                    x the private value                    
                </param>
                <param>
                    p the prime modulus                    
                </param>
                <param>
                    g the base generator                    
                </param>
                <param>
                    l the private-value length                    
                </param>
                <exception>
                    InvalidKeyException if the key cannot be encoded                    
                </exception>
            </javadoc>
            <method name="DHPrivateKey" type="constructor" line="103">
                <params>
                    <param name="x" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                    <param name="l" type="int"/>
                </params>
                <scope line="108"/>
                <scope line="112"/>
            </method>
            <javadoc line="117">
                Make a DH private key from its DER encoding (PKCS #8).                
                <param>
                    encodedKey the encoded key                    
                </param>
                <exception>
                    InvalidKeyException if the encoded key does not represent
                      a Diffie-Hellman private key                    
                </exception>
            </javadoc>
            <method name="DHPrivateKey" type="constructor" line="125">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                </params>
                <comment line="134">
                    version                    
                </comment>
                <comment line="144">
                    privateKeyAlgorithm                    
                </comment>
                <comment line="159">
                    parse the parameters                    
                </comment>
                <comment line="170">
                    Private-value length is OPTIONAL                    
                </comment>
                <comment line="178">
                    privateKey                    
                </comment>
                <comment line="184">
                    ignore OPTIONAL attributes                    
                </comment>
                <declaration name="inStream" type="InputStream" line="126"/>
                <scope line="127">
                    <declaration name="val" type="DerValue" line="128"/>
                    <scope line="129"/>
                    <declaration name="parsedVersion" type="BigInteger" line="136"/>
                    <scope line="137"/>
                    <declaration name="algid" type="DerValue" line="146"/>
                    <scope line="147"/>
                    <declaration name="derInStream" type="DerInputStream" line="150"/>
                    <declaration name="oid" type="ObjectIdentifier" line="151"/>
                    <scope line="152"/>
                    <scope line="155"/>
                    <declaration name="params" type="DerValue" line="159"/>
                    <scope line="160"/>
                    <scope line="163"/>
                    <scope line="170"/>
                    <scope line="173"/>
                </scope>
                <scope line="187">
                    <declaration name="ike" type="InvalidKeyException" line="188"/>
                </scope>
                <scope line="192">
                    <declaration name="ike" type="InvalidKeyException" line="193"/>
                </scope>
            </method>
            <javadoc line="200">
                Returns the encoding format of this key: &quot;PKCS#8&quot;                
            </javadoc>
            <method name="getFormat" type="String" line="203"/>
            <javadoc line="207">
                Returns the name of the algorithm associated with this key: &quot;DH&quot;                
            </javadoc>
            <method name="getAlgorithm" type="String" line="210"/>
            <javadoc line="214">
                Get the encoding of the key.                
            </javadoc>
            <method name="getEncoded" type="byte[]" line="217">
                <comment line="223">
                    version                    
                </comment>
                <comment line="228">
                    privateKeyAlgorithm                    
                </comment>
                <comment line="233">
                    store OID                    
                </comment>
                <comment line="235">
                    encode parameters                    
                </comment>
                <comment line="241">
                    wrap parameters into SEQUENCE                    
                </comment>
                <comment line="244">
                    store parameter SEQUENCE in algid                    
                </comment>
                <comment line="246">
                    wrap algid into SEQUENCE                    
                </comment>
                <comment line="249">
                    privateKey                    
                </comment>
                <comment line="252">
                    make it a SEQUENCE                    
                </comment>
                <scope line="218">
                    <scope line="219">
                        <declaration name="tmp" type="DerOutputStream" line="220"/>
                        <declaration name="algid" type="DerOutputStream" line="230"/>
                        <declaration name="params" type="DerOutputStream" line="235"/>
                        <declaration name="paramSequence" type="DerValue" line="241"/>
                        <declaration name="derKey" type="DerOutputStream" line="252"/>
                    </scope>
                    <scope line="255"/>
                </scope>
            </method>
            <javadoc line="262">
                Returns the private value, &lt;code&gt;x&lt;/code&gt;.                
                <return>
                    the private value, &lt;code&gt;x&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getX" type="BigInteger" line="267"/>
            <javadoc line="271">
                Returns the key parameters.                
                <return>
                    the key parameters                    
                </return>
            </javadoc>
            <method name="getParams" type="DHParameterSpec" line="276"/>
            <method name="toString" type="String" line="283">
                <declaration name="LINE_SEP" type="String" line="284"/>
                <declaration name="strbuf" type="StringBuffer" line="286"/>
            </method>
            <method name="parseKeyBits" type="void" line="299">
                <scope line="300">
                    <declaration name="in" type="DerInputStream" line="301"/>
                </scope>
                <scope line="303">
                    <declaration name="ike" type="InvalidKeyException" line="304"/>
                </scope>
            </method>
            <javadoc line="311">
                Calculates a hash code value for the object.
                  Objects that are equal will also have the same hashcode.                
            </javadoc>
            <method name="hashCode" type="int" line="315">
                <declaration name="retval" type="int" line="316"/>
                <declaration name="enc" type="byte[]" line="317"/>
                <scope line="319"/>
            </method>
            <method name="equals" type="boolean" line="325">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="thisEncoded" type="byte[]" line="332"/>
                <declaration name="thatEncoded" type="byte[]" line="333"/>
            </method>
            <javadoc line="338">
                Replace the DH private key to be serialized.                
                <return>
                    the standard KeyRep object to be serialized                    
                </return>
                <throws>
                    java.io.ObjectStreamException if a new object representing
                      this DH private key could not be created                    
                </throws>
            </javadoc>
            <method name="writeReplace" type="Object" line="346"/>
        </class>
    </source>