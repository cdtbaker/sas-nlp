<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.KeyRep"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.ProviderException"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec.DHParameterSpec"/>
        <import package="sun.security.util"/>
        <class name="DHPrivateKey" line="11">
            <implements interface="PrivateKey"/>
            <implements interface="javax.crypto.interfaces.DHPrivateKey"/>
            <implements interface="Serializable"/>
            <javadoc line="11">
                A private key in PKCS#8 format for the Diffie-Hellman key agreement
                  algorithm.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    DHPublicKey                    
                </see>
                <see>
                    java.security.KeyAgreement                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="19"/>
            <declaration name="PKCS8_VERSION" type="BigInteger" line="20"/>
            <declaration name="x" type="BigInteger" line="21"/>
            <declaration name="key" type="byte[]" line="22"/>
            <declaration name="encodedKey" type="byte[]" line="23"/>
            <declaration name="p" type="BigInteger" line="24"/>
            <declaration name="g" type="BigInteger" line="25"/>
            <declaration name="l" type="int" line="26"/>
            <declaration name="DH_data" type="int" line="27"/>
            <javadoc line="28">
                Make a DH private key out of a private value &lt;code&gt;x&lt;/code&gt;, a prime
                  modulus &lt;code&gt;p&lt;/code&gt;, and a base generator &lt;code&gt;g&lt;/code&gt;.                
                <param>
                    x the private value                    
                </param>
                <param>
                    p the prime modulus                    
                </param>
                <param>
                    g the base generator                    
                </param>
                <exception>
                    ProviderException if the key cannot be encoded                    
                </exception>
            </javadoc>
            <method name="DHPrivateKey" type="constructor" line="36">
                <params>
                    <param name="x" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="39">
                Make a DH private key out of a private value &lt;code&gt;x&lt;/code&gt;, a prime
                  modulus &lt;code&gt;p&lt;/code&gt;, a base generator &lt;code&gt;g&lt;/code&gt;, and a
                  private-value length &lt;code&gt;l&lt;/code&gt;.                
                <param>
                    x the private value                    
                </param>
                <param>
                    p the prime modulus                    
                </param>
                <param>
                    g the base generator                    
                </param>
                <param>
                    l the private-value length                    
                </param>
                <exception>
                    InvalidKeyException if the key cannot be encoded                    
                </exception>
            </javadoc>
            <method name="DHPrivateKey" type="constructor" line="49">
                <params>
                    <param name="x" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                    <param name="l" type="int"/>
                </params>
                <scope line="54"/>
                <scope line="58"/>
            </method>
            <javadoc line="62">
                Make a DH private key from its DER encoding (PKCS #8).                
                <param>
                    encodedKey the encoded key                    
                </param>
                <exception>
                    InvalidKeyException if the encoded key does not represent
                      a Diffie-Hellman private key                    
                </exception>
            </javadoc>
            <method name="DHPrivateKey" type="constructor" line="68">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                </params>
                <declaration name="inStream" type="InputStream" line="69"/>
                <scope line="70">
                    <declaration name="val" type="DerValue" line="71"/>
                    <scope line="72"/>
                    <declaration name="parsedVersion" type="BigInteger" line="75"/>
                    <scope line="76"/>
                    <declaration name="algid" type="DerValue" line="79"/>
                    <scope line="80"/>
                    <declaration name="derInStream" type="DerInputStream" line="83"/>
                    <declaration name="oid" type="ObjectIdentifier" line="84"/>
                    <scope line="85"/>
                    <scope line="88"/>
                    <declaration name="params" type="DerValue" line="91"/>
                    <scope line="92"/>
                    <scope line="95"/>
                    <scope line="101"/>
                    <scope line="104"/>
                </scope>
                <scope line="111">
                    <declaration name="ike" type="InvalidKeyException" line="112"/>
                </scope>
                <scope line="116">
                    <declaration name="ike" type="InvalidKeyException" line="117"/>
                </scope>
            </method>
            <javadoc line="122">
                Returns the encoding format of this key: &quot;PKCS#8&quot;                
            </javadoc>
            <method name="getFormat" type="String" line="125"/>
            <javadoc line="128">
                Returns the name of the algorithm associated with this key: &quot;DH&quot;                
            </javadoc>
            <method name="getAlgorithm" type="String" line="131"/>
            <javadoc line="134">
                Get the encoding of the key.                
            </javadoc>
            <method name="getEncoded" type="byte[]" line="137">
                <scope line="138">
                    <scope line="139">
                        <declaration name="tmp" type="DerOutputStream" line="140"/>
                        <declaration name="algid" type="DerOutputStream" line="142"/>
                        <declaration name="params" type="DerOutputStream" line="144"/>
                        <declaration name="paramSequence" type="DerValue" line="148"/>
                        <declaration name="derKey" type="DerOutputStream" line="152"/>
                    </scope>
                    <scope line="156"/>
                </scope>
            </method>
            <javadoc line="162">
                Returns the private value, &lt;code&gt;x&lt;/code&gt;.                
                <return>
                    the private value, &lt;code&gt;x&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getX" type="BigInteger" line="166"/>
            <javadoc line="169">
                Returns the key parameters.                
                <return>
                    the key parameters                    
                </return>
            </javadoc>
            <method name="getParams" type="DHParameterSpec" line="173"/>
            <method name="toString" type="String" line="177">
                <declaration name="LINE_SEP" type="String" line="178"/>
                <declaration name="strbuf" type="StringBuffer" line="179"/>
            </method>
            <method name="parseKeyBits" type="void" line="183">
                <scope line="184">
                    <declaration name="in" type="DerInputStream" line="185"/>
                </scope>
                <scope line="188">
                    <declaration name="ike" type="InvalidKeyException" line="189"/>
                </scope>
            </method>
            <javadoc line="194">
                Calculates a hash code value for the object.
                  Objects that are equal will also have the same hashcode.                
            </javadoc>
            <method name="hashCode" type="int" line="198">
                <declaration name="retval" type="int" line="199"/>
                <declaration name="enc" type="byte[]" line="200"/>
                <scope line="201"/>
            </method>
            <method name="equals" type="boolean" line="206">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="thisEncoded" type="byte[]" line="209"/>
                <declaration name="thatEncoded" type="byte[]" line="210"/>
            </method>
            <javadoc line="213">
                Replace the DH private key to be serialized.                
                <return>
                    the standard KeyRep object to be serialized                    
                </return>
                <throws>
                    java.io.ObjectStreamException if a new object representing
                      this DH private key could not be created                    
                </throws>
            </javadoc>
            <method name="writeReplace" type="Object" line="219"/>
        </class>
    </source>