<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.util.Arrays"/>
        <import package="java.security"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="sun.security.internal.spec.TlsPrfParameterSpec"/>
        <class name="TlsPrfGenerator" line="8">
            <extends class="KeyGeneratorSpi"/>
            <javadoc line="8">
                KeyGenerator implementation for the TLS PRF function.
                  &lt;p&gt;
                  This class duplicates the HMAC functionality (RFC 2104) with
                  performance optimizations (e.g. XOR&apos;ing keys with padding doesn&apos;t
                  need to be redone for each HMAC operation).                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="B0" type="byte[]" line="18"/>
            <declaration name="LABEL_MASTER_SECRET" type="byte[]" line="19"/>
            <declaration name="LABEL_KEY_EXPANSION" type="byte[]" line="20"/>
            <declaration name="LABEL_CLIENT_WRITE_KEY" type="byte[]" line="21"/>
            <declaration name="LABEL_SERVER_WRITE_KEY" type="byte[]" line="22"/>
            <declaration name="LABEL_IV_BLOCK" type="byte[]" line="23"/>
            <declaration name="HMAC_ipad64" type="byte[]" line="24"/>
            <declaration name="HMAC_ipad128" type="byte[]" line="25"/>
            <declaration name="HMAC_opad64" type="byte[]" line="26"/>
            <declaration name="HMAC_opad128" type="byte[]" line="27"/>
            <declaration name="SSL3_CONST" type="byte[][]" line="28"/>
            <method name="genPad" type="byte[]" line="29">
                <params>
                    <param name="b" type="byte"/>
                    <param name="count" type="int"/>
                </params>
                <declaration name="padding" type="byte[]" line="30"/>
            </method>
            <method name="concat" type="byte[]" line="34">
                <params>
                    <param name="b1" type="byte[]"/>
                    <param name="b2" type="byte[]"/>
                </params>
                <declaration name="n1" type="int" line="35"/>
                <declaration name="n2" type="int" line="36"/>
                <declaration name="b" type="byte[]" line="37"/>
            </method>
            <method name="genConst" type="byte[][]" line="42">
                <declaration name="n" type="int" line="43"/>
                <declaration name="arr" type="byte[][]" line="44"/>
                <scope line="45">
                    <declaration name="b" type="byte[]" line="46"/>
                </scope>
            </method>
            <declaration name="MSG" type="String" line="52"/>
            <declaration name="spec" type="TlsPrfParameterSpec" line="53"/>
            <method name="TlsPrfGenerator" type="constructor" line="54"/>
            <method name="engineInit" type="void" line="56">
                <params>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="59">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="60"/>
                <declaration name="key" type="SecretKey" line="64"/>
                <scope line="65"/>
            </method>
            <method name="engineInit" type="void" line="69">
                <params>
                    <param name="keysize" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineGenerateKey0" type="SecretKey" line="72">
                <params>
                    <param name="tls12" type="boolean"/>
                </params>
                <scope line="73"/>
                <declaration name="key" type="SecretKey" line="76"/>
                <declaration name="secret" type="byte[]" line="77"/>
                <scope line="78">
                    <declaration name="labelBytes" type="byte[]" line="79"/>
                    <declaration name="n" type="int" line="80"/>
                    <declaration name="prfBytes" type="byte[]" line="81"/>
                </scope>
                <scope line="84"/>
                <scope line="87"/>
            </method>
            <method name="doTLS12PRF" type="byte[]" line="91">
                <params>
                    <param name="secret" type="byte[]"/>
                    <param name="labelBytes" type="byte[]"/>
                    <param name="seed" type="byte[]"/>
                    <param name="outputLength" type="int"/>
                    <param name="prfHash" type="String"/>
                    <param name="prfHashLength" type="int"/>
                    <param name="prfBlockSize" type="int"/>
                </params>
                <scope line="92"/>
                <declaration name="prfMD" type="MessageDigest" line="95"/>
            </method>
            <method name="doTLS12PRF" type="byte[]" line="98">
                <params>
                    <param name="secret" type="byte[]"/>
                    <param name="labelBytes" type="byte[]"/>
                    <param name="seed" type="byte[]"/>
                    <param name="outputLength" type="int"/>
                    <param name="mdPRF" type="MessageDigest"/>
                    <param name="mdPRFLen" type="int"/>
                    <param name="mdPRFBlockSize" type="int"/>
                </params>
                <scope line="99"/>
                <scope line="102"/>
                <declaration name="output" type="byte[]" line="105"/>
                <declaration name="ipad" type="byte[]" line="106"/>
                <declaration name="opad" type="byte[]" line="107"/>
            </method>
            <method name="doTLS10PRF" type="byte[]" line="123">
                <params>
                    <param name="secret" type="byte[]"/>
                    <param name="labelBytes" type="byte[]"/>
                    <param name="seed" type="byte[]"/>
                    <param name="outputLength" type="int"/>
                </params>
                <declaration name="md5" type="MessageDigest" line="124"/>
                <declaration name="sha" type="MessageDigest" line="125"/>
            </method>
            <method name="doTLS10PRF" type="byte[]" line="128">
                <params>
                    <param name="secret" type="byte[]"/>
                    <param name="labelBytes" type="byte[]"/>
                    <param name="seed" type="byte[]"/>
                    <param name="outputLength" type="int"/>
                    <param name="md5" type="MessageDigest"/>
                    <param name="sha" type="MessageDigest"/>
                </params>
                <scope line="129"/>
                <declaration name="off" type="int" line="132"/>
                <declaration name="seclen" type="int" line="133"/>
                <declaration name="output" type="byte[]" line="134"/>
            </method>
            <method name="expand" type="void" line="139">
                <params>
                    <param name="digest" type="MessageDigest"/>
                    <param name="hmacSize" type="int"/>
                    <param name="secret" type="byte[]"/>
                    <param name="secOff" type="int"/>
                    <param name="secLen" type="int"/>
                    <param name="label" type="byte[]"/>
                    <param name="seed" type="byte[]"/>
                    <param name="output" type="byte[]"/>
                    <param name="pad1" type="byte[]"/>
                    <param name="pad2" type="byte[]"/>
                </params>
                <scope line="140"/>
                <declaration name="tmp" type="byte[]" line="144"/>
                <declaration name="aBytes" type="byte[]" line="145"/>
                <declaration name="remaining" type="int" line="146"/>
                <declaration name="ofs" type="int" line="147"/>
                <scope line="148">
                    <scope line="150"/>
                    <scope line="154"/>
                    <scope line="160"/>
                    <declaration name="k" type="int" line="172"/>
                    <scope line="173"/>
                </scope>
            </method>
            <class name="V12" line="179">
                <extends class="TlsPrfGenerator"/>
                <javadoc line="179">
                    A KeyGenerator implementation that supports TLS 1.2.
                      &lt;p&gt;
                      TLS 1.2 uses a different hash algorithm than 1.0/1.1 for the PRF
                      calculations.  As of 2010, there is no PKCS11-level support for TLS
                      1.2 PRF calculations, and no known OS&apos;s have an internal variant
                      we could use.  Therefore for TLS 1.2, we are updating JSSE to request
                      a different provider algorithm:  &quot;SunTls12Prf&quot;.  If we reused the
                      name &quot;SunTlsPrf&quot;, the PKCS11 provider would need be updated to
                      fail correctly when presented with the wrong version number
                      (via Provider.Service.supportsParameters()), and add the
                      appropriate supportsParamters() checks into KeyGenerators (not
                      currently there).                    
                </javadoc>
                <method name="engineGenerateKey" type="SecretKey" line="194"/>
            </class>
            <class name="V10" line="198">
                <extends class="TlsPrfGenerator"/>
                <javadoc line="198">
                    A KeyGenerator implementation that supports TLS 1.0/1.1.                    
                </javadoc>
                <method name="engineGenerateKey" type="SecretKey" line="202"/>
            </class>
        </class>
    </source>