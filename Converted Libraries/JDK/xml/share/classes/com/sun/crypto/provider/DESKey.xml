<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.KeyRep"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec.DESKeySpec"/>
        <class name="DESKey" line="33">
            <implements interface="SecretKey"/>
            <javadoc line="33">
                This class represents a DES key.                
                <author>
                    Jan Luehe                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="42"/>
            <declaration name="key" type="byte[]" line="44"/>
            <javadoc line="46">
                Uses the first 8 bytes of the given key as the DES key.                
                <param>
                    key the buffer with the DES key bytes.                    
                </param>
                <exception>
                    InvalidKeyException if less than 8 bytes are available for
                      the key.                    
                </exception>
            </javadoc>
            <method name="DESKey" type="constructor" line="54">
                <params>
                    <param name="key" type="byte[]"/>
                </params>
            </method>
            <javadoc line="58">
                Uses the first 8 bytes in &lt;code&gt;key&lt;/code&gt;, beginning at
                  &lt;code&gt;offset&lt;/code&gt;, as the DES key                
                <param>
                    key the buffer with the DES key bytes.                    
                </param>
                <param>
                    offset the offset in &lt;code&gt;key&lt;/code&gt;, where the DES key bytes
                      start.                    
                </param>
                <exception>
                    InvalidKeyException if less than 8 bytes are available for
                      the key.                    
                </exception>
            </javadoc>
            <method name="DESKey" type="constructor" line="69">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
                <scope line="70"/>
            </method>
            <method name="getEncoded" type="byte[]" line="78">
                <comment line="80">
                    Return a copy of the key, rather than a reference,
                     so that the key data cannot be modified from outside                    
                </comment>
            </method>
            <method name="getAlgorithm" type="String" line="84"/>
            <method name="getFormat" type="String" line="88"/>
            <javadoc line="92">
                Calculates a hash code value for the object.
                  Objects that are equal will also have the same hashcode.                
            </javadoc>
            <method name="hashCode" type="int" line="96">
                <declaration name="retval" type="int" line="97"/>
                <scope line="98"/>
            </method>
            <method name="equals" type="boolean" line="104">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="thatAlg" type="String" line="111"/>
                <declaration name="thatKey" type="byte[]" line="115"/>
                <declaration name="ret" type="boolean" line="116"/>
            </method>
            <javadoc line="121">
                readObject is called to restore the state of this key from
                  a stream.                
            </javadoc>
            <method name="readObject" type="void" line="127">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="132">
                Replace the DES key to be serialized.                
                <return>
                    the standard KeyRep object to be serialized                    
                </return>
                <throws>
                    java.io.ObjectStreamException if a new object representing
                      this DES key could not be created                    
                </throws>
            </javadoc>
            <method name="writeReplace" type="Object" line="140"/>
            <javadoc line="147">
                Ensures that the bytes of this key are
                  set to zero when there are no more references to it.                
            </javadoc>
            <method name="finalize" type="void" line="151">
                <scope line="152">
                    <scope line="153"/>
                </scope>
                <scope line="157"/>
            </method>
        </class>
    </source>