<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.InvalidKeyException"/>
        <class name="SymmetricCipher" line="3">
            <javadoc line="3">
                This abstract class represents the core of all block ciphers. It allows to
                  intialize the cipher and encrypt/decrypt single blocks. Larger quantities
                  are handled by modes, which are subclasses of FeedbackCipher.                
                <author>
                    Gigi Ankeny                    
                </author>
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    AESCrypt                    
                </see>
                <see>
                    DESCrypt                    
                </see>
                <see>
                    DESedeCrypt                    
                </see>
                <see>
                    BlowfishCrypt                    
                </see>
                <see>
                    FeedbackCipher                    
                </see>
            </javadoc>
            <method name="SymmetricCipher" type="constructor" line="16"/>
            <method name="getBlockSize" type="int" line="18"/>
            <javadoc line="18">
                Retrieves this cipher&apos;s block size.                
                <return>
                    the block size of this cipher                    
                </return>
            </javadoc>
            <method name="init" type="void" line="23"/>
            <javadoc line="23">
                Initializes the cipher in the specified mode with the given key.                
                <param>
                    decrypting flag indicating encryption or decryption                    
                </param>
                <param>
                    algorithm the algorithm name                    
                </param>
                <param>
                    key the key                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this cipher                    
                </exception>
            </javadoc>
            <method name="encryptBlock" type="void" line="32"/>
            <javadoc line="32">
                Encrypt one cipher block.
                  &lt;p&gt;The input &lt;code&gt;plain&lt;/code&gt;, starting at &lt;code&gt;plainOffset&lt;/code&gt;
                  and ending at &lt;code&gt;(plainOffset+blockSize-1)&lt;/code&gt;, is encrypted.
                  The result is stored in &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt;.                
                <param>
                    plain the input buffer with the data to be encrypted                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
                <param>
                    cipher the buffer for the encryption result                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipher</code>                    
                </param>
            </javadoc>
            <method name="decryptBlock" type="void" line="44"/>
            <javadoc line="44">
                Decrypt one cipher block.
                  &lt;p&gt;The input &lt;code&gt;cipher&lt;/code&gt;, starting at &lt;code&gt;cipherOffset&lt;/code&gt;
                  and ending at &lt;code&gt;(cipherOffset+blockSize-1)&lt;/code&gt;, is decrypted.
                  The result is stored in &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt;.                
                <param>
                    cipher the input buffer with the data to be decrypted                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipher</code>                    
                </param>
                <param>
                    plain the buffer for the decryption result                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
            </javadoc>
        </class>
    </source>