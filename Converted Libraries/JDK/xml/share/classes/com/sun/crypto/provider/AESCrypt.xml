<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.InvalidKeyException"/>
        <class name="AESCrypt" line="3">
            <extends class="SymmetricCipher"/>
            <implements interface="AESConstants"/>
            <javadoc line="3">
                Rijndael --pronounced Reindaal-- is a symmetric cipher with a 128-bit
                  block size and variable key-size (128-, 192- and 256-bit).
                  &lt;p&gt;
                  Rijndael was designed by &lt;a href=&quot;mailto:rijmen@esat.kuleuven.ac.be&quot;&gt;Vincent
                  Rijmen&lt;/a&gt; and &lt;a href=&quot;mailto:Joan.Daemen@village.uunet.be&quot;&gt;Joan Daemen&lt;/a&gt;.                
            </javadoc>
            <declaration name="ROUNDS_12" type="boolean" line="11"/>
            <declaration name="ROUNDS_14" type="boolean" line="12"/>
            <declaration name="sessionK" type="Object[]" line="13"/>
            <javadoc line="13">
                Session and Sub keys                
            </javadoc>
            <declaration name="K" type="int[]" line="17"/>
            <declaration name="limit" type="int" line="18"/>
            <javadoc line="18">
                (ROUNDS-1)  4                
            </javadoc>
            <method name="AESCrypt" type="constructor" line="22"/>
            <javadoc line="24">
                Returns this cipher&apos;s block size.                
                <return>
                    this cipher&apos;s block size                    
                </return>
            </javadoc>
            <method name="getBlockSize" type="int" line="28"/>
            <method name="init" type="void" line="31">
                <params>
                    <param name="decrypting" type="boolean"/>
                    <param name="algorithm" type="String"/>
                    <param name="key" type="byte[]"/>
                </params>
                <scope line="32"/>
                <scope line="35"/>
            </method>
            <method name="setSubKey" type="void" line="41">
                <params>
                    <param name="decrypting" type="boolean"/>
                </params>
                <declaration name="Kd" type="int[][]" line="42"/>
                <declaration name="rounds" type="int" line="43"/>
                <scope line="45">
                    <scope line="46"/>
                </scope>
                <scope line="50">
                    <declaration name="j0" type="int" line="51"/>
                    <declaration name="j1" type="int" line="52"/>
                    <declaration name="j2" type="int" line="53"/>
                    <declaration name="j3" type="int" line="54"/>
                    <scope line="55"/>
                </scope>
            </method>
            <declaration name="alog" type="int[]" line="68"/>
            <declaration name="S" type="byte[]" line="69"/>
            <declaration name="T1" type="int[]" line="70"/>
            <declaration name="U1" type="int[]" line="71"/>
            <declaration name="rcon" type="byte[]" line="72"/>
            <scope line="73">
                <declaration name="ROOT" type="int" line="74"/>
                <declaration name="i" type="int" line="75"/>
                <scope line="77">
                    <scope line="79"/>
                </scope>
                <scope line="84"/>
                <declaration name="A" type="byte[][]" line="87"/>
                <declaration name="B" type="byte[]" line="88"/>
                <declaration name="t" type="int" line="89"/>
                <declaration name="box" type="byte[][]" line="90"/>
                <scope line="92">
                    <scope line="94"/>
                </scope>
                <declaration name="cox" type="byte[][]" line="98"/>
                <scope line="99">
                    <scope line="100">
                        <scope line="102"/>
                    </scope>
                </scope>
                <scope line="107">
                    <scope line="109"/>
                </scope>
                <declaration name="G" type="byte[][]" line="114"/>
                <declaration name="AA" type="byte[][]" line="115"/>
                <scope line="116"/>
                <declaration name="pivot" type="byte" line="120"/>
                <declaration name="iG" type="byte[][]" line="121"/>
                <scope line="122">
                    <scope line="124">
                        <scope line="126"/>
                        <scope line="129"/>
                        <scope line="132">
                            <scope line="133"/>
                        </scope>
                    </scope>
                    <scope line="141">
                        <scope line="142"/>
                    </scope>
                    <scope line="146">
                        <scope line="147">
                            <scope line="148"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="155">
                    <scope line="156"/>
                </scope>
                <declaration name="s" type="int" line="160"/>
                <scope line="161"/>
                <declaration name="r" type="int" line="178"/>
                <scope line="179"/>
            </scope>
            <method name="mul" type="int" line="186">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="mul4" type="int" line="189">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="byte[]"/>
                </params>
                <declaration name="a0" type="int" line="192"/>
                <declaration name="a1" type="int" line="193"/>
                <declaration name="a2" type="int" line="194"/>
                <declaration name="a3" type="int" line="195"/>
            </method>
            <method name="isKeySizeValid" type="boolean" line="198">
                <params>
                    <param name="len" type="int"/>
                </params>
                <scope line="199">
                    <scope line="200"/>
                </scope>
            </method>
            <javadoc line="206">
                Encrypt exactly one block of plaintext.                
            </javadoc>
            <method name="encryptBlock" type="void" line="209">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                </params>
                <declaration name="keyOffset" type="int" line="210"/>
                <declaration name="t0" type="int" line="211"/>
                <declaration name="t1" type="int" line="212"/>
                <declaration name="t2" type="int" line="213"/>
                <declaration name="t3" type="int" line="214"/>
                <scope line="215">
                    <declaration name="a0" type="int" line="216"/>
                </scope>
                <declaration name="tt" type="int" line="225"/>
            </method>
            <javadoc line="246">
                Decrypt exactly one block of plaintext.                
            </javadoc>
            <method name="decryptBlock" type="void" line="249">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                </params>
                <declaration name="keyOffset" type="int" line="250"/>
                <declaration name="t0" type="int" line="251"/>
                <declaration name="t1" type="int" line="252"/>
                <declaration name="t2" type="int" line="253"/>
                <declaration name="t3" type="int" line="254"/>
                <declaration name="a0" type="int" line="255"/>
                <scope line="256">
                    <scope line="265"/>
                </scope>
            </method>
            <javadoc line="333">
                Expand a user-supplied key material into a session key.                
                <param>
                    key The 128/192/256-bit user-key to use.                    
                </param>
                <exception>
                    InvalidKeyException  If the key is invalid.                    
                </exception>
            </javadoc>
            <method name="makeKey" type="Object[]" line="338">
                <params>
                    <param name="k" type="byte[]"/>
                </params>
                <scope line="339"/>
                <scope line="342"/>
                <declaration name="ROUNDS" type="int" line="345"/>
                <declaration name="ROUND_KEY_COUNT" type="int" line="346"/>
                <declaration name="BC" type="int" line="347"/>
                <declaration name="Ke" type="int[][]" line="348"/>
                <declaration name="Kd" type="int[][]" line="349"/>
                <declaration name="KC" type="int" line="350"/>
                <declaration name="tk" type="int[]" line="351"/>
                <declaration name="i" type="int" line="352"/>
                <scope line="353"/>
                <declaration name="t" type="int" line="356"/>
                <scope line="357"/>
                <declaration name="tt" type="int" line="361"/>
                <scope line="362">
                    <scope line="366"/>
                    <scope line="372"/>
                </scope>
                <scope line="377">
                    <scope line="378"/>
                </scope>
                <declaration name="result" type="Object[]" line="383"/>
            </method>
            <javadoc line="386">
                Return The number of rounds for a given Rijndael keysize.                
                <param>
                    keySize  The size of the user key material in bytes.
                      MUST be one of (16, 24, 32).                    
                </param>
                <return>
                    The number of rounds.                    
                </return>
            </javadoc>
            <method name="getRounds" type="int" line="392">
                <params>
                    <param name="keySize" type="int"/>
                </params>
            </method>
        </class>
    </source>