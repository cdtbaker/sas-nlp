<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.InvalidKeyException"/>
        <class name="AESCrypt" line="41">
            <extends class="SymmetricCipher"/>
            <comment line="150">
                Static code - to intialise S-boxes and T-boxes                
            </comment>
            <comment line="308">
                multiply two elements of GF(2^m)                
            </comment>
            <comment line="315">
                convenience method used in generating Transposition boxes                
            </comment>
            <comment line="326">
                check if the specified length (in bytes) is a valid keysize for AES                
            </comment>
            <implements interface="AESConstants"/>
            <javadoc line="41">
                Rijndael --pronounced Reindaal-- is a symmetric cipher with a 128-bit
                  block size and variable key-size (128-, 192- and 256-bit).
                  &lt;p&gt;
                  Rijndael was designed by &lt;a href=&quot;mailto:rijmen@esat.kuleuven.ac.be&quot;&gt;Vincent
                  Rijmen&lt;/a&gt; and &lt;a href=&quot;mailto:Joan.Daemen@village.uunet.be&quot;&gt;Joan Daemen&lt;/a&gt;.                
            </javadoc>
            <declaration name="ROUNDS_12" type="boolean" line="50"/>
            <declaration name="ROUNDS_14" type="boolean" line="51"/>
            <declaration name="sessionK" type="Object[]" line="53"/>
            <javadoc line="53">
                Session and Sub keys                
            </javadoc>
            <declaration name="K" type="int[]" line="55"/>
            <declaration name="limit" type="int" line="57"/>
            <javadoc line="57">
                (ROUNDS-1)  4                
            </javadoc>
            <method name="AESCrypt" type="constructor" line="60">
                <comment line="62">
                    empty                    
                </comment>
            </method>
            <javadoc line="64">
                Returns this cipher&apos;s block size.                
                <return>
                    this cipher&apos;s block size                    
                </return>
            </javadoc>
            <method name="getBlockSize" type="int" line="69"/>
            <method name="init" type="void" line="74">
                <params>
                    <param name="decrypting" type="boolean"/>
                    <param name="algorithm" type="String"/>
                    <param name="key" type="byte[]"/>
                </params>
                <comment line="86">
                    generate session key and reset sub key.                    
                </comment>
                <scope line="76"/>
                <scope line="80"/>
            </method>
            <method name="setSubKey" type="void" line="90">
                <params>
                    <param name="decrypting" type="boolean"/>
                </params>
                <declaration name="Kd" type="int[][]" line="91"/>
                <declaration name="rounds" type="int" line="92"/>
                <scope line="94">
                    <scope line="95"/>
                </scope>
                <scope line="100">
                    <declaration name="j0" type="int" line="101"/>
                    <declaration name="j1" type="int" line="102"/>
                    <declaration name="j2" type="int" line="103"/>
                    <declaration name="j3" type="int" line="104"/>
                    <scope line="106"/>
                </scope>
            </method>
            <declaration name="alog" type="int[]" line="122"/>
            <declaration name="S" type="byte[]" line="126"/>
            <declaration name="T1" type="int[]" line="130"/>
            <declaration name="U1" type="int[]" line="140"/>
            <declaration name="rcon" type="byte[]" line="146"/>
            <scope line="151">
                <declaration name="ROOT" type="int" line="152"/>
                <declaration name="i" type="int" line="153"/>
                <scope line="161">
                    <scope line="163"/>
                </scope>
                <scope line="168"/>
                <declaration name="A" type="byte[][]" line="171"/>
                <declaration name="B" type="byte[]" line="182"/>
                <declaration name="t" type="int" line="187"/>
                <declaration name="box" type="byte[][]" line="188"/>
                <scope line="190">
                    <scope line="192"/>
                </scope>
                <declaration name="cox" type="byte[][]" line="199"/>
                <scope line="200">
                    <scope line="201">
                        <scope line="203"/>
                    </scope>
                </scope>
                <scope line="211">
                    <scope line="213"/>
                </scope>
                <declaration name="G" type="byte[][]" line="221"/>
                <declaration name="AA" type="byte[][]" line="227"/>
                <scope line="228"/>
                <declaration name="pivot" type="byte" line="232"/>
                <declaration name="iG" type="byte[][]" line="233"/>
                <scope line="234">
                    <scope line="236">
                        <scope line="238"/>
                        <scope line="241"/>
                        <scope line="244">
                            <scope line="245"/>
                        </scope>
                    </scope>
                    <scope line="253">
                        <scope line="254"/>
                    </scope>
                    <scope line="260">
                        <scope line="261">
                            <scope line="262"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="269">
                    <scope line="270"/>
                </scope>
                <declaration name="s" type="int" line="275"/>
                <scope line="276"/>
                <declaration name="r" type="int" line="298"/>
                <scope line="299"/>
            </scope>
            <method name="mul" type="int" line="308">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="mul4" type="int" line="315">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="byte[]"/>
                </params>
                <declaration name="a0" type="int" line="318"/>
                <declaration name="a1" type="int" line="319"/>
                <declaration name="a2" type="int" line="320"/>
                <declaration name="a3" type="int" line="321"/>
            </method>
            <method name="isKeySizeValid" type="boolean" line="326">
                <params>
                    <param name="len" type="int"/>
                </params>
                <scope line="327">
                    <scope line="328"/>
                </scope>
            </method>
            <javadoc line="335">
                Encrypt exactly one block of plaintext.                
            </javadoc>
            <method name="encryptBlock" type="void" line="340">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                </params>
                <comment line="360">
                    apply round transforms                    
                </comment>
                <comment line="383">
                    last round is special                    
                </comment>
                <declaration name="keyOffset" type="int" line="341"/>
                <declaration name="t0" type="int" line="342"/>
                <declaration name="t1" type="int" line="346"/>
                <declaration name="t2" type="int" line="350"/>
                <declaration name="t3" type="int" line="354"/>
                <scope line="361">
                    <declaration name="a0" type="int" line="362"/>
                </scope>
                <declaration name="tt" type="int" line="383"/>
            </method>
            <javadoc line="406">
                Decrypt exactly one block of plaintext.                
            </javadoc>
            <method name="decryptBlock" type="void" line="411">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                </params>
                <declaration name="keyOffset" type="int" line="412"/>
                <declaration name="t0" type="int" line="413"/>
                <declaration name="t1" type="int" line="417"/>
                <declaration name="t2" type="int" line="421"/>
                <declaration name="t3" type="int" line="425"/>
                <declaration name="a0" type="int" line="430"/>
                <scope line="432">
                    <scope line="451"/>
                </scope>
            </method>
            <javadoc line="566">
                Expand a user-supplied key material into a session key.                
                <param>
                    key The 128/192/256-bit user-key to use.                    
                </param>
                <exception>
                    InvalidKeyException  If the key is invalid.                    
                </exception>
            </javadoc>
            <method name="makeKey" type="Object[]" line="572">
                <params>
                    <param name="k" type="byte[]"/>
                </params>
                <comment line="585">
                    encryption round keys                    
                </comment>
                <comment line="586">
                    decryption round keys                    
                </comment>
                <comment line="588">
                    keylen in 32-bit elements                    
                </comment>
                <comment line="593">
                    copy user material bytes into temporary ints                    
                </comment>
                <comment line="601">
                    copy values into round key arrays                    
                </comment>
                <comment line="609">
                    extrapolate using phi (the round key evolution function)                    
                </comment>
                <comment line="627">
                    copy values into round key arrays                    
                </comment>
                <comment line="634">
                    inverse MixColumn where needed                    
                </comment>
                <comment line="643">
                    assemble the encryption (Ke) and decryption (Kd) round keys into
                     one sessionKey object                    
                </comment>
                <scope line="573"/>
                <scope line="576"/>
                <declaration name="ROUNDS" type="int" line="580"/>
                <declaration name="ROUND_KEY_COUNT" type="int" line="581"/>
                <declaration name="BC" type="int" line="583"/>
                <declaration name="Ke" type="int[][]" line="584"/>
                <declaration name="Kd" type="int[][]" line="585"/>
                <declaration name="KC" type="int" line="587"/>
                <declaration name="tk" type="int[]" line="589"/>
                <declaration name="i" type="int" line="590"/>
                <scope line="593"/>
                <declaration name="t" type="int" line="601"/>
                <scope line="602"/>
                <declaration name="tt" type="int" line="606"/>
                <scope line="607">
                    <scope line="617"/>
                    <scope line="627"/>
                </scope>
                <scope line="632">
                    <scope line="634"/>
                </scope>
                <declaration name="result" type="Object[]" line="644"/>
            </method>
            <javadoc line="649">
                Return The number of rounds for a given Rijndael keysize.                
                <param>
                    keySize  The size of the user key material in bytes.
                      MUST be one of (16, 24, 32).                    
                </param>
                <return>
                    The number of rounds.                    
                </return>
            </javadoc>
            <method name="getRounds" type="int" line="656">
                <params>
                    <param name="keySize" type="int"/>
                </params>
            </method>
        </class>
    </source>