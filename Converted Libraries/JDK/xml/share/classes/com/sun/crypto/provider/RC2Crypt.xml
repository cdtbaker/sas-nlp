<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.InvalidKeyException"/>
        <class name="RC2Crypt" line="3">
            <extends class="SymmetricCipher"/>
            <javadoc line="3">
                Implementation of the RC2(tm) algorithm as described in RFC 2268.
                  RC2 is a 16-bit based algorithm and not particularly fast on 32/64 bit
                  architectures. Also, note that although the JVM has a 16-bit integer
                  type (short), all expressions are evaluated either in 32 or 64 bit
                  (int or long). Expression such as &quot;s1 = s2 + s3&quot; are implemented by
                  first promoting s2 and s3 to int, performing an int addition, and
                  then demoting the result back to short to store in s1. To avoid this
                  fairly slow process, we use the int type throughout and manually insert
                  &quot;&amp; 0xffff&quot; where necessary.                
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="PI_TABLE" type="int[]" line="17"/>
            <declaration name="expandedKey" type="int[]" line="18"/>
            <declaration name="effectiveKeyBits" type="int" line="19"/>
            <method name="RC2Crypt" type="constructor" line="20"/>
            <method name="getBlockSize" type="int" line="23"/>
            <method name="getEffectiveKeyBits" type="int" line="26"/>
            <javadoc line="29">
                Initializes the effective key bit size. This method is a hook to
                  allow RC2Cipher to initialize the effective key size.                
            </javadoc>
            <method name="initEffectiveKeyBits" type="void" line="33">
                <params>
                    <param name="effectiveKeyBits" type="int"/>
                </params>
            </method>
            <method name="checkKey" type="void" line="36">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="keyLength" type="int"/>
                </params>
                <scope line="37"/>
                <scope line="40"/>
            </method>
            <method name="init" type="void" line="44">
                <params>
                    <param name="decrypting" type="boolean"/>
                    <param name="algorithm" type="String"/>
                    <param name="key" type="byte[]"/>
                </params>
                <declaration name="keyLength" type="int" line="45"/>
                <scope line="46"/>
                <declaration name="expandedKeyBytes" type="byte[]" line="50"/>
                <declaration name="t" type="int" line="52"/>
                <scope line="53"/>
                <declaration name="t8" type="int" line="57"/>
                <declaration name="tm" type="int" line="58"/>
                <scope line="61"/>
                <scope line="65"/>
            </method>
            <javadoc line="70">
                Encrypt a single block. Note that in a few places we omit a &quot;&amp; 0xffff&quot;
                  and allow variables to become larger than 16 bit. This still works
                  because there is never a 32 bit overflow.                
            </javadoc>
            <method name="encryptBlock" type="void" line="75">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
                <declaration name="R0" type="int" line="76"/>
                <declaration name="R1" type="int" line="77"/>
                <declaration name="R2" type="int" line="78"/>
                <declaration name="R3" type="int" line="79"/>
                <scope line="80"/>
                <scope line="94"/>
                <scope line="108"/>
            </method>
            <method name="decryptBlock" type="void" line="127">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
                <declaration name="R0" type="int" line="128"/>
                <declaration name="R1" type="int" line="129"/>
                <declaration name="R2" type="int" line="130"/>
                <declaration name="R3" type="int" line="131"/>
                <scope line="132"/>
                <scope line="146"/>
                <scope line="160"/>
            </method>
        </class>
    </source>