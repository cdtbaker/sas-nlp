<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.util.Locale"/>
        <import package="java.security"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <import package="javax.crypto.BadPaddingException"/>
        <class name="CipherCore" line="36">
            <comment line="57">
                internal buffer                
            </comment>
            <comment line="62">
                internal buffer                
            </comment>
            <comment line="67">
                unit size (number of input bytes that can be processed at a time)                
            </comment>
            <comment line="72">
                index of the content size left in the buffer                
            </comment>
            <comment line="77">
                minimum number of bytes in the buffer required for
                 FeedbackCipher.encryptFinal()decryptFinal() call.
                 update() must buffer this many bytes before before starting
                 to encryptdecrypt data.
                 currently, only CTS mode has a non-zero value due to its special
                 handling on the last two blocks (the last one may be incomplete).                
            </comment>
            <comment line="87">
                number of bytes needed to make the total input length a multiple
                 of the blocksize (this is used in feedback mode, when the number of
                 input bytes that are processed at a time is different from the block
                 size)                
            </comment>
            <comment line="95">
                padding class                
            </comment>
            <comment line="100">
                internal cipher engine                
            </comment>
            <comment line="105">
                the cipher mode                
            </comment>
            <comment line="110">
                are we encrypting or decrypting?                
            </comment>
            <comment line="115">
                Block Mode constants                
            </comment>
            <comment line="870">
                Note: Wrap() and Unwrap() are the same in
                 each of SunJCE CipherSpi implementation classes.
                 They are duplicated due to export control requirements:
                 All CipherSpi implementation must be final.                
            </comment>
            <javadoc line="36">
                This class represents the symmetric algorithms in its various modes
                  (&lt;code&gt;ECB&lt;/code&gt;, &lt;code&gt;CFB&lt;/code&gt;, &lt;code&gt;OFB&lt;/code&gt;, &lt;code&gt;CBC&lt;/code&gt;,
                  &lt;code&gt;PCBC&lt;/code&gt;, &lt;code&gt;CTR&lt;/code&gt;, and &lt;code&gt;CTS&lt;/code&gt;) and
                  padding schemes (&lt;code&gt;PKCS5Padding&lt;/code&gt;, &lt;code&gt;NoPadding&lt;/code&gt;,
                  &lt;code&gt;ISO10126Padding&lt;/code&gt;).                
                <author>
                    Gigi Ankeny                    
                </author>
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    ElectronicCodeBook                    
                </see>
                <see>
                    CipherFeedback                    
                </see>
                <see>
                    OutputFeedback                    
                </see>
                <see>
                    CipherBlockChaining                    
                </see>
                <see>
                    PCBC                    
                </see>
                <see>
                    CounterMode                    
                </see>
                <see>
                    CipherTextStealing                    
                </see>
            </javadoc>
            <declaration name="buffer" type="byte[]" line="59"/>
            <declaration name="blockSize" type="int" line="64"/>
            <declaration name="unitBytes" type="int" line="69"/>
            <declaration name="buffered" type="int" line="74"/>
            <declaration name="minBytes" type="int" line="84"/>
            <declaration name="diffBlocksize" type="int" line="92"/>
            <declaration name="padding" type="Padding" line="97"/>
            <declaration name="cipher" type="FeedbackCipher" line="102"/>
            <declaration name="cipherMode" type="int" line="107"/>
            <declaration name="decrypting" type="boolean" line="112"/>
            <declaration name="ECB_MODE" type="int" line="117"/>
            <declaration name="CBC_MODE" type="int" line="118"/>
            <declaration name="CFB_MODE" type="int" line="119"/>
            <declaration name="OFB_MODE" type="int" line="120"/>
            <declaration name="PCBC_MODE" type="int" line="121"/>
            <declaration name="CTR_MODE" type="int" line="122"/>
            <declaration name="CTS_MODE" type="int" line="123"/>
            <javadoc line="125">
                Creates an instance of CipherCore with default ECB mode and
                  PKCS5Padding.                
            </javadoc>
            <method name="CipherCore" type="constructor" line="129">
                <params>
                    <param name="impl" type="SymmetricCipher"/>
                    <param name="blkSize" type="int"/>
                </params>
                <comment line="135">
                    The buffer should be usable for all cipher mode and padding
                     schemes. Thus, it has to be at least (blockSize+1) for CTS.
                     In decryption mode, it also hold the possible padding block.                    
                </comment>
                <comment line="142">
                    set mode and padding                    
                </comment>
            </method>
            <javadoc line="146">
                Sets the mode of this cipher.                
                <param>
                    mode the cipher mode                    
                </param>
                <exception>
                    NoSuchAlgorithmException if the requested cipher mode does
                      not exist                    
                </exception>
            </javadoc>
            <method name="setMode" type="void" line="154">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <declaration name="modeUpperCase" type="String" line="158"/>
                <scope line="160"/>
                <declaration name="rawImpl" type="SymmetricCipher" line="164"/>
                <scope line="165"/>
                <scope line="169"/>
                <scope line="175"/>
                <scope line="181"/>
                <scope line="186"/>
                <scope line="191"/>
                <scope line="195"/>
            </method>
            <method name="getNumOfUnit" type="int" line="202">
                <params>
                    <param name="mode" type="String"/>
                    <param name="offset" type="int"/>
                    <param name="blockSize" type="int"/>
                </params>
                <comment line="204">
                    use blockSize as default value                    
                </comment>
                <declaration name="result" type="int" line="203"/>
                <scope line="204">
                    <declaration name="numInt" type="int" line="205"/>
                    <scope line="206">
                        <declaration name="num" type="Integer" line="207"/>
                    </scope>
                    <scope line="210"/>
                    <scope line="214"/>
                </scope>
            </method>
            <javadoc line="222">
                Sets the padding mechanism of this cipher.                
                <param>
                    padding the padding mechanism                    
                </param>
                <exception>
                    NoSuchPaddingException if the requested padding mechanism
                      does not exist                    
                </exception>
            </javadoc>
            <method name="setPadding" type="void" line="232">
                <params>
                    <param name="paddingScheme" type="String"/>
                </params>
                <scope line="233"/>
                <scope line="236"/>
                <scope line="238"/>
                <scope line="240"/>
                <scope line="245"/>
            </method>
            <javadoc line="253">
                Returns the length in bytes that an output buffer would need to be in
                  order to hold the result of the next &lt;code&gt;update&lt;/code&gt; or
                  &lt;code&gt;doFinal&lt;/code&gt; operation, given the input length
                  &lt;code&gt;inputLen&lt;/code&gt; (in bytes).
                  &lt;p&gt;This call takes into account any unprocessed (buffered) data from a
                  previous &lt;code&gt;update&lt;/code&gt; call, and padding.
                  &lt;p&gt;The actual output length of the next &lt;code&gt;update&lt;/code&gt; or
                  &lt;code&gt;doFinal&lt;/code&gt; call may be smaller than the length returned by
                  this method.                
                <param>
                    inputLen the input length (in bytes)                    
                </param>
                <return>
                    the required output buffer size (in bytes)                    
                </return>
            </javadoc>
            <method name="getOutputSize" type="int" line="270">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
                <declaration name="totalLen" type="int" line="271"/>
                <scope line="279"/>
                <scope line="285"/>
            </method>
            <javadoc line="290">
                Returns the initialization vector (IV) in a new buffer.
                  &lt;p&gt;This is useful in the case where a random IV has been created
                  (see &lt;a href = &quot;#init&quot;&gt;init&lt;/a&gt;),
                  or in the context of password-based encryption or
                  decryption, where the IV is derived from a user-provided password.                
                <return>
                    the initialization vector in a new buffer, or null if the
                      underlying algorithm does not use an IV, or if the IV has not yet
                      been set.                    
                </return>
            </javadoc>
            <method name="getIV" type="byte[]" line="302">
                <declaration name="iv" type="byte[]" line="303"/>
            </method>
            <javadoc line="307">
                Returns the parameters used with this cipher.
                  &lt;p&gt;The returned parameters may be the same that were used to initialize
                  this cipher, or may contain the default set of parameters or a set of
                  randomly generated parameters used by the underlying cipher
                  implementation (provided that the underlying cipher implementation
                  uses a default set of parameters or creates new parameters if it needs
                  parameters but was not initialized with any).                
                <return>
                    the parameters used with this cipher, or null if this cipher
                      does not use any parameters.                    
                </return>
            </javadoc>
            <method name="getParameters" type="AlgorithmParameters" line="320">
                <params>
                    <param name="algName" type="String"/>
                </params>
                <comment line="337">
                    should never happen                    
                </comment>
                <comment line="341">
                    should never happen                    
                </comment>
                <comment line="347">
                    should never happen                    
                </comment>
                <declaration name="params" type="AlgorithmParameters" line="321"/>
                <declaration name="iv" type="byte[]" line="323"/>
                <scope line="324">
                    <declaration name="ivSpec" type="AlgorithmParameterSpec" line="325"/>
                    <scope line="326">
                        <declaration name="rawImpl" type="RC2Crypt" line="327"/>
                    </scope>
                    <scope line="330"/>
                    <scope line="333"/>
                    <scope line="335"/>
                    <scope line="339"/>
                    <scope line="343"/>
                    <scope line="345"/>
                </scope>
            </method>
            <javadoc line="353">
                Initializes this cipher with a key and a source of randomness.
                  &lt;p&gt;The cipher is initialized for one of the following four operations:
                  encryption, decryption, key wrapping or key unwrapping, depending on
                  the value of &lt;code&gt;opmode&lt;/code&gt;.
                  &lt;p&gt;If this cipher requires an initialization vector (IV), it will get
                  it from &lt;code&gt;random&lt;/code&gt;.
                  This behaviour should only be used in encryption or key wrapping
                  mode, however.
                  When initializing a cipher that requires an IV for decryption or
                  key unwrapping, the IV
                  (same IV that was used for encryption or key wrapping) must be provided
                  explicitly as a
                  parameter, in order to get the correct result.
                  &lt;p&gt;This method also cleans existing buffer and other related state
                  information.                
                <param>
                    opmode the operation mode of this cipher (this is one of
                      the following:
                      <code>ENCRYPT_MODE</code>, <code>DECRYPT_MODE</code>,
                      <code>WRAP_MODE</code> or <code>UNWRAP_MODE</code>)                    
                </param>
                <param>
                    key the secret key                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this cipher                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="384">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="385"/>
                <scope line="387"/>
            </method>
            <javadoc line="392">
                Initializes this cipher with a key, a set of
                  algorithm parameters, and a source of randomness.
                  &lt;p&gt;The cipher is initialized for one of the following four operations:
                  encryption, decryption, key wrapping or key unwrapping, depending on
                  the value of &lt;code&gt;opmode&lt;/code&gt;.
                  &lt;p&gt;If this cipher (including its underlying feedback or padding scheme)
                  requires any random bytes, it will get them from &lt;code&gt;random&lt;/code&gt;.                
                <param>
                    opmode the operation mode of this cipher (this is one of
                      the following:
                      <code>ENCRYPT_MODE</code>, <code>DECRYPT_MODE</code>,
                      <code>WRAP_MODE</code> or <code>UNWRAP_MODE</code>)                    
                </param>
                <param>
                    key the encryption key                    
                </param>
                <param>
                    params the algorithm parameters                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this cipher                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given algorithm
                      parameters are inappropriate for this cipher                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="418">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="keyBytes" type="byte[]" line="422"/>
                <declaration name="ivBytes" type="byte[]" line="424"/>
                <scope line="425"/>
                <scope line="427">
                    <scope line="429"/>
                </scope>
                <scope line="434">
                    <scope line="436"/>
                </scope>
                <scope line="441"/>
                <scope line="447">
                    <scope line="448"/>
                </scope>
                <scope line="452">
                    <scope line="453"/>
                    <scope line="457"/>
                </scope>
                <declaration name="algorithm" type="String" line="467"/>
            </method>
            <method name="init" type="void" line="474">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="ivSpec" type="IvParameterSpec" line="475"/>
                <scope line="476">
                    <scope line="477"/>
                    <scope line="480"/>
                </scope>
            </method>
            <javadoc line="489">
                Return the key bytes of the specified key. Throw an InvalidKeyException
                  if the key is not usable.                
            </javadoc>
            <method name="getKeyBytes" type="byte[]" line="493">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <comment line="498">
                    note: key.getFormat() may return null                    
                </comment>
                <scope line="494"/>
                <scope line="498"/>
                <declaration name="keyBytes" type="byte[]" line="501"/>
                <scope line="502"/>
            </method>
            <javadoc line="508">
                Continues a multiple-part encryption or decryption operation
                  (depending on how this cipher was initialized), processing another data
                  part.
                  &lt;p&gt;The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt;
                  buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt;, are processed, and the
                  result is stored in a new buffer.                
                <param>
                    input the input buffer                    
                </param>
                <param>
                    inputOffset the offset in <code>input</code> where the input
                      starts                    
                </param>
                <param>
                    inputLen the input length                    
                </param>
                <return>
                    the new buffer with the result                    
                </return>
                <exception>
                    IllegalStateException if this cipher is in a wrong state
                      (e.g., has not been initialized)                    
                </exception>
            </javadoc>
            <method name="update" type="byte[]" line="527">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                </params>
                <comment line="542">
                    never thrown                    
                </comment>
                <declaration name="output" type="byte[]" line="528"/>
                <declaration name="out" type="byte[]" line="529"/>
                <scope line="530">
                    <declaration name="len" type="int" line="532"/>
                    <scope line="534"/>
                    <scope line="536"/>
                </scope>
                <scope line="540"/>
            </method>
            <javadoc line="546">
                Continues a multiple-part encryption or decryption operation
                  (depending on how this cipher was initialized), processing another data
                  part.
                  &lt;p&gt;The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt;
                  buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt;, are processed, and the
                  result is stored in the &lt;code&gt;output&lt;/code&gt; buffer, starting at
                  &lt;code&gt;outputOffset&lt;/code&gt;.                
                <param>
                    input the input buffer                    
                </param>
                <param>
                    inputOffset the offset in <code>input</code> where the input
                      starts                    
                </param>
                <param>
                    inputLen the input length                    
                </param>
                <param>
                    output the buffer for the result                    
                </param>
                <param>
                    outputOffset the offset in <code>output</code> where the result
                      is stored                    
                </param>
                <return>
                    the number of bytes stored in <code>output</code>                    
                </return>
                <exception>
                    ShortBufferException if the given output buffer is too small
                      to hold the result                    
                </exception>
            </javadoc>
            <method name="update" type="int" line="570">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                    <param name="output" type="byte[]"/>
                    <param name="outputOffset" type="int"/>
                </params>
                <comment line="572">
                    figure out how much can be sent to crypto function                    
                </comment>
                <comment line="575">
                    do not include the padding bytes when decrypting                    
                </comment>
                <comment line="578">
                    do not count the trailing bytes which do not make up a unit                    
                </comment>
                <comment line="581">
                    check output buffer capacity                    
                </comment>
                <comment line="588">
                    there is some work to do                    
                </comment>
                <comment line="612">
                    Let&apos;s keep track of how many bytes are needed to make
                     the total input length a multiple of blocksize when
                     padding is applied                    
                </comment>
                <comment line="632">
                    left over again                    
                </comment>
                <declaration name="len" type="int" line="572"/>
                <scope line="573"/>
                <scope line="581"/>
                <scope line="586">
                    <declaration name="in" type="byte[]" line="588"/>
                    <declaration name="inputConsumed" type="int" line="590"/>
                    <declaration name="bufferedConsumed" type="int" line="591"/>
                    <scope line="592"/>
                    <scope line="597"/>
                    <scope line="600"/>
                    <scope line="605"/>
                    <scope line="607"/>
                    <scope line="614"/>
                    <scope line="626"/>
                </scope>
                <scope line="632"/>
            </method>
            <javadoc line="640">
                Encrypts or decrypts data in a single-part operation,
                  or finishes a multiple-part operation.
                  The data is encrypted or decrypted, depending on how this cipher was
                  initialized.
                  &lt;p&gt;The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt;
                  buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt;, and any input bytes that
                  may have been buffered during a previous &lt;code&gt;update&lt;/code&gt; operation,
                  are processed, with padding (if requested) being applied.
                  The result is stored in a new buffer.
                  &lt;p&gt;The cipher is reset to its initial state (uninitialized) after this
                  call.                
                <param>
                    input the input buffer                    
                </param>
                <param>
                    inputOffset the offset in <code>input</code> where the input
                      starts                    
                </param>
                <param>
                    inputLen the input length                    
                </param>
                <return>
                    the new buffer with the result                    
                </return>
                <exception>
                    IllegalBlockSizeException if this cipher is a block cipher,
                      no padding has been requested (only in encryption mode), and the total
                      input length of the data processed by this cipher is not a multiple of
                      block size                    
                </exception>
                <exception>
                    BadPaddingException if this cipher is in decryption mode,
                      and (un)padding has been requested, but the decrypted data is not
                      bounded by the appropriate padding bytes                    
                </exception>
            </javadoc>
            <method name="doFinal" type="byte[]" line="671">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                </params>
                <comment line="686">
                    never thrown                    
                </comment>
                <declaration name="output" type="byte[]" line="672"/>
                <declaration name="out" type="byte[]" line="673"/>
                <scope line="674">
                    <declaration name="len" type="int" line="676"/>
                    <scope line="677"/>
                    <scope line="681"/>
                </scope>
                <scope line="684"/>
            </method>
            <javadoc line="690">
                Encrypts or decrypts data in a single-part operation,
                  or finishes a multiple-part operation.
                  The data is encrypted or decrypted, depending on how this cipher was
                  initialized.
                  &lt;p&gt;The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt;
                  buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt;, and any input bytes that
                  may have been buffered during a previous &lt;code&gt;update&lt;/code&gt; operation,
                  are processed, with padding (if requested) being applied.
                  The result is stored in the &lt;code&gt;output&lt;/code&gt; buffer, starting at
                  &lt;code&gt;outputOffset&lt;/code&gt;.
                  &lt;p&gt;The cipher is reset to its initial state (uninitialized) after this
                  call.                
                <param>
                    input the input buffer                    
                </param>
                <param>
                    inputOffset the offset in <code>input</code> where the input
                      starts                    
                </param>
                <param>
                    inputLen the input length                    
                </param>
                <param>
                    output the buffer for the result                    
                </param>
                <param>
                    outputOffset the offset in <code>output</code> where the result
                      is stored                    
                </param>
                <return>
                    the number of bytes stored in <code>output</code>                    
                </return>
                <exception>
                    IllegalBlockSizeException if this cipher is a block cipher,
                      no padding has been requested (only in encryption mode), and the total
                      input length of the data processed by this cipher is not a multiple of
                      block size                    
                </exception>
                <exception>
                    ShortBufferException if the given output buffer is too small
                      to hold the result                    
                </exception>
                <exception>
                    BadPaddingException if this cipher is in decryption mode,
                      and (un)padding has been requested, but the decrypted data is not
                      bounded by the appropriate padding bytes                    
                </exception>
            </javadoc>
            <method name="doFinal" type="int" line="729">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                    <param name="output" type="byte[]"/>
                    <param name="outputOffset" type="int"/>
                </params>
                <comment line="732">
                    calculate the total input length                    
                </comment>
                <comment line="737">
                    will the total input length be a multiple of blockSize?                    
                </comment>
                <comment line="756">
                    if encrypting and padding not null, add padding                    
                </comment>
                <comment line="760">
                    check output buffer capacity.
                     if we are decrypting with padding applied, we can perform this
                     check only after we have determined how many padding bytes there
                     are.                    
                </comment>
                <comment line="776">
                    prepare the final input avoiding copying if possible                    
                </comment>
                <comment line="795">
                    if the size of specified output buffer is less than
                     the length of the cipher text, then the current
                     content of cipher has to be preserved in order for
                     users to retry the call with a larger buffer in the
                     case of ShortBufferException.                    
                </comment>
                <comment line="803">
                    create temporary output buffer so that only &quot;real&quot;
                     data bytes are passed to user&apos;s output buffer.                    
                </comment>
                <comment line="818">
                    restore so users can retry with a larger buffer                    
                </comment>
                <comment line="828">
                    encrypting                    
                </comment>
                <declaration name="totalLen" type="int" line="732"/>
                <declaration name="paddedLen" type="int" line="733"/>
                <declaration name="paddingLen" type="int" line="734"/>
                <scope line="737">
                    <scope line="738"/>
                    <scope line="740"/>
                </scope>
                <scope line="744"/>
                <scope line="749"/>
                <scope line="763"/>
                <declaration name="outputCapacity" type="int" line="766"/>
                <scope line="769"/>
                <declaration name="finalBuf" type="byte[]" line="776"/>
                <declaration name="finalOffset" type="int" line="777"/>
                <scope line="778">
                    <scope line="781"/>
                    <scope line="784"/>
                    <scope line="788"/>
                </scope>
                <scope line="793">
                    <scope line="799"/>
                    <declaration name="outWithPadding" type="byte[]" line="804"/>
                    <scope line="808">
                        <declaration name="padStart" type="int" line="809"/>
                        <scope line="810"/>
                    </scope>
                    <scope line="816"/>
                    <scope line="824"/>
                </scope>
                <scope line="827"/>
                <scope line="834"/>
            </method>
            <method name="finalNoPadding" type="int" line="843">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOff" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOff" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="848">
                    <scope line="849"/>
                    <scope line="853"/>
                </scope>
                <scope line="860"/>
                <scope line="862"/>
            </method>
            <javadoc line="873">
                Wrap a key.                
                <param>
                    key the key to be wrapped.                    
                </param>
                <return>
                    the wrapped key.                    
                </return>
                <exception>
                    IllegalBlockSizeException if this cipher is a block
                      cipher, no padding has been requested, and the length of the
                      encoding of the key to be wrapped is not a
                      multiple of the block size.                    
                </exception>
                <exception>
                    InvalidKeyException if it is impossible or unsafe to
                      wrap the key with this cipher (e.g., a hardware protected key is
                      being passed to a software only cipher).                    
                </exception>
            </javadoc>
            <method name="wrap" type="byte[]" line="890">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <comment line="902">
                    Should never happen                    
                </comment>
                <declaration name="result" type="byte[]" line="891"/>
                <scope line="893">
                    <declaration name="encodedKey" type="byte[]" line="894"/>
                    <scope line="895"/>
                </scope>
                <scope line="900"/>
            </method>
            <javadoc line="906">
                Unwrap a previously wrapped key.                
                <param>
                    wrappedKey the key to be unwrapped.                    
                </param>
                <param>
                    wrappedKeyAlgorithm the algorithm the wrapped key is for.                    
                </param>
                <param>
                    wrappedKeyType the type of the wrapped key.
                      This is one of <code>Cipher.SECRET_KEY</code>,
                      <code>Cipher.PRIVATE_KEY</code>, or <code>Cipher.PUBLIC_KEY</code>.                    
                </param>
                <return>
                    the unwrapped key.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no installed providers
                      can create keys of type <code>wrappedKeyType</code> for the
                      <code>wrappedKeyAlgorithm</code>.                    
                </exception>
                <exception>
                    InvalidKeyException if <code>wrappedKey</code> does not
                      represent a wrapped key of type <code>wrappedKeyType</code> for
                      the <code>wrappedKeyAlgorithm</code>.                    
                </exception>
            </javadoc>
            <method name="unwrap" type="Key" line="929">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="wrappedKeyAlgorithm" type="String"/>
                    <param name="wrappedKeyType" type="int"/>
                </params>
                <declaration name="encodedKey" type="byte[]" line="930"/>
                <scope line="931"/>
                <scope line="933"/>
                <scope line="936"/>
            </method>
        </class>
    </source>