<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.util.Locale"/>
        <import package="java.security"/>
        <import package="java.security.interfaces"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.security.spec.InvalidParameterSpecException"/>
        <import package="java.security.spec.MGF1ParameterSpec"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec.PSource"/>
        <import package="javax.crypto.spec.OAEPParameterSpec"/>
        <import package="sun.security.rsa"/>
        <import package="sun.security.jca.Providers"/>
        <class name="RSACipher" line="43">
            <extends class="CipherSpi"/>
            <comment line="67">
                constant for an empty byte array                
            </comment>
            <comment line="70">
                mode constant for public key encryption                
            </comment>
            <comment line="72">
                mode constant for private key decryption                
            </comment>
            <comment line="74">
                mode constant for private key encryption (signing)                
            </comment>
            <comment line="76">
                mode constant for public key decryption (verifying)                
            </comment>
            <comment line="79">
                constant for raw RSA                
            </comment>
            <comment line="81">
                constant for PKCS#1 v1.5 RSA                
            </comment>
            <comment line="83">
                constant for PKCS#2 v2.0 OAEP with MGF1                
            </comment>
            <comment line="86">
                current mode, one of MODE_* above. Set when init() is called                
            </comment>
            <comment line="89">
                active padding type, one of PAD_* above. Set by setPadding()                
            </comment>
            <comment line="92">
                padding object                
            </comment>
            <comment line="95">
                cipher parameter for OAEP padding                
            </comment>
            <comment line="98">
                buffer for the data                
            </comment>
            <comment line="100">
                offset into the buffer (number of bytes buffered)                
            </comment>
            <comment line="103">
                size of the output                
            </comment>
            <comment line="106">
                the public key, if we were initialized using a public key                
            </comment>
            <comment line="108">
                the private key, if we were initialized using a private key                
            </comment>
            <comment line="111">
                hash algorithm for OAEP                
            </comment>
            <comment line="118">
                modes do not make sense for RSA, but allow ECB                
            </comment>
            <comment line="119">
                see JCE spec                
            </comment>
            <comment line="126">
                set the padding type                
            </comment>
            <comment line="127">
                see JCE spec                
            </comment>
            <comment line="159">
                return 0 as block size, we are not a block cipher                
            </comment>
            <comment line="160">
                see JCE spec                
            </comment>
            <comment line="165">
                return the output size                
            </comment>
            <comment line="166">
                see JCE spec                
            </comment>
            <comment line="171">
                no iv, return null                
            </comment>
            <comment line="172">
                see JCE spec                
            </comment>
            <comment line="177">
                see JCE spec                
            </comment>
            <comment line="201">
                see JCE spec                
            </comment>
            <comment line="216">
                see JCE spec                
            </comment>
            <comment line="223">
                see JCE spec                
            </comment>
            <comment line="243">
                initialize this cipher                
            </comment>
            <comment line="321">
                internal update method                
            </comment>
            <comment line="334">
                internal doFinal() method. Here we perform the actual RSA operation                
            </comment>
            <comment line="366">
                see JCE spec                
            </comment>
            <comment line="372">
                see JCE spec                
            </comment>
            <comment line="379">
                see JCE spec                
            </comment>
            <comment line="386">
                see JCE spec                
            </comment>
            <comment line="401">
                see JCE spec                
            </comment>
            <comment line="420">
                see JCE spec                
            </comment>
            <comment line="439">
                see JCE spec                
            </comment>
            <javadoc line="43">
                RSA cipher implementation. Supports RSA en/decryption and signing/verifying
                  using PKCS#1 v1.5 padding and without padding (raw RSA). Note that raw RSA
                  is supported mostly for completeness and should only be used in rare cases.
                  Objects should be instantiated by calling Cipher.getInstance() using the
                  following algorithm names:
                  . &quot;RSA/ECB/PKCS1Padding&quot; (or &quot;RSA&quot;) for PKCS#1 padding. The mode (blocktype)
                  is selected based on the en/decryption mode and public/private key used
                  . &quot;RSA/ECB/NoPadding&quot; for rsa RSA.
                  We only do one RSA operation per doFinal() call. If the application passes
                  more data via calls to update() or doFinal(), we throw an
                  IllegalBlockSizeException when doFinal() is called (see JCE API spec).
                  Bulk encryption using RSA does not make sense and is not standardized.
                  Note: RSA keys should be at least 512 bits long                
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="B0" type="byte[]" line="67"/>
            <declaration name="MODE_ENCRYPT" type="int" line="70"/>
            <declaration name="MODE_DECRYPT" type="int" line="72"/>
            <declaration name="MODE_SIGN" type="int" line="74"/>
            <declaration name="MODE_VERIFY" type="int" line="76"/>
            <declaration name="PAD_NONE" type="String" line="79"/>
            <declaration name="PAD_PKCS1" type="String" line="81"/>
            <declaration name="PAD_OAEP_MGF1" type="String" line="83"/>
            <declaration name="mode" type="int" line="86"/>
            <declaration name="paddingType" type="String" line="89"/>
            <declaration name="padding" type="RSAPadding" line="92"/>
            <declaration name="spec" type="OAEPParameterSpec" line="95"/>
            <declaration name="buffer" type="byte[]" line="98"/>
            <declaration name="bufOfs" type="int" line="100"/>
            <declaration name="outputSize" type="int" line="103"/>
            <declaration name="publicKey" type="RSAPublicKey" line="106"/>
            <declaration name="privateKey" type="RSAPrivateKey" line="108"/>
            <declaration name="oaepHashAlgorithm" type="String" line="111"/>
            <method name="RSACipher" type="constructor" line="113"/>
            <method name="engineSetMode" type="void" line="119">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <scope line="120"/>
            </method>
            <method name="engineSetPadding" type="void" line="128">
                <params>
                    <param name="paddingName" type="String"/>
                </params>
                <comment line="140">
                    &quot;oaepwith&quot;.length() == 8                    
                </comment>
                <comment line="141">
                    &quot;andmgf1padding&quot;.length() == 14                    
                </comment>
                <comment line="144">
                    check if MessageDigest appears to be available                    
                </comment>
                <comment line="145">
                    avoid getInstance() call here                    
                </comment>
                <scope line="129"/>
                <scope line="131"/>
                <scope line="133">
                    <declaration name="lowerPadding" type="String" line="134"/>
                    <scope line="135"/>
                    <scope line="138">
                        <scope line="147"/>
                    </scope>
                    <scope line="151"/>
                </scope>
            </method>
            <method name="engineGetBlockSize" type="int" line="160"/>
            <method name="engineGetOutputSize" type="int" line="166">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <method name="engineGetIV" type="byte[]" line="172"/>
            <method name="engineGetParameters" type="AlgorithmParameters" line="177">
                <comment line="185">
                    should never happen                    
                </comment>
                <comment line="189">
                    should never happen                    
                </comment>
                <comment line="192">
                    should never happen                    
                </comment>
                <scope line="178">
                    <scope line="179">
                        <declaration name="params" type="AlgorithmParameters" line="180"/>
                    </scope>
                    <scope line="184"/>
                    <scope line="188"/>
                    <scope line="191"/>
                </scope>
                <scope line="195"/>
            </method>
            <method name="engineInit" type="void" line="202">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <comment line="206">
                    never thrown when null parameters are used;                    
                </comment>
                <comment line="207">
                    but re-throw it just in case                    
                </comment>
                <scope line="203"/>
                <scope line="205">
                    <declaration name="ike" type="InvalidKeyException" line="208"/>
                </scope>
            </method>
            <method name="engineInit" type="void" line="218">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="225">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="226"/>
                <scope line="228">
                    <scope line="229">
                        <declaration name="spec" type="OAEPParameterSpec" line="230"/>
                    </scope>
                    <scope line="233">
                        <declaration name="iape" type="InvalidAlgorithmParameterException" line="234"/>
                    </scope>
                </scope>
            </method>
            <method name="init" type="void" line="245">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
                <comment line="264">
                    must be RSAPrivateKey per check in toRSAKey                    
                </comment>
                <comment line="293">
                    PAD_OAEP_MGF1                    
                </comment>
                <declaration name="encrypt" type="boolean" line="246"/>
                <declaration name="rsaKey" type="RSAKey" line="259"/>
                <scope line="260"/>
                <scope line="264"/>
                <declaration name="n" type="int" line="269"/>
                <scope line="272">
                    <scope line="273"/>
                </scope>
                <scope line="279">
                    <scope line="280"/>
                    <declaration name="blockType" type="int" line="284"/>
                    <scope line="287">
                        <declaration name="k" type="int" line="288"/>
                    </scope>
                    <scope line="290"/>
                </scope>
                <scope line="293">
                    <scope line="294"/>
                    <declaration name="myParams" type="OAEPParameterSpec" line="298"/>
                    <scope line="299">
                        <scope line="300"/>
                    </scope>
                    <scope line="305"/>
                    <scope line="311">
                        <declaration name="k" type="int" line="312"/>
                    </scope>
                    <scope line="314"/>
                </scope>
            </method>
            <method name="update" type="void" line="321">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
                <scope line="322"/>
                <scope line="325"/>
            </method>
            <method name="doFinal" type="byte[]" line="335">
                <scope line="336"/>
                <scope line="340">
                    <declaration name="data" type="byte[]" line="341"/>
                    <declaration name="verifyBuffer" type="byte[]" line="347"/>
                    <declaration name="decryptBuffer" type="byte[]" line="354"/>
                </scope>
                <scope line="360"/>
            </method>
            <method name="engineUpdate" type="byte[]" line="366">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <method name="engineUpdate" type="int" line="373">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
            </method>
            <method name="engineDoFinal" type="byte[]" line="380">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <method name="engineDoFinal" type="int" line="388">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
                <scope line="389"/>
                <declaration name="result" type="byte[]" line="394"/>
                <declaration name="n" type="int" line="395"/>
            </method>
            <method name="engineWrap" type="byte[]" line="402">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <comment line="414">
                    should not occur                    
                </comment>
                <declaration name="encoded" type="byte[]" line="403"/>
                <scope line="404"/>
                <scope line="407"/>
                <scope line="411"/>
                <scope line="413"/>
            </method>
            <method name="engineUnwrap" type="Key" line="421">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="algorithm" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <comment line="430">
                    should not occur                    
                </comment>
                <comment line="433">
                    should not occur, handled with length check above                    
                </comment>
                <scope line="422"/>
                <scope line="426">
                    <declaration name="encoded" type="byte[]" line="427"/>
                </scope>
                <scope line="429"/>
                <scope line="432"/>
            </method>
            <method name="engineGetKeySize" type="int" line="439">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="rsaKey" type="RSAKey" line="440"/>
            </method>
        </class>
    </source>