<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.InvalidKeyException"/>
        <class name="BlowfishCrypt" line="3">
            <extends class="SymmetricCipher"/>
            <implements interface="BlowfishConstants"/>
            <javadoc line="3">
                This is the internal Blowfish class responsible for encryption and
                  decryption of a byte array of size &lt;code&gt;BLOWFISH_BLOCK_SIZE&lt;/code&gt;.                
                <author>
                    Jan Luehe                    
                </author>
                <author>
                    David Brownell                    
                </author>
                <see>
                    BlowfishCipher                    
                </see>
            </javadoc>
            <declaration name="decrypting" type="boolean" line="11"/>
            <javadoc line="12">
                Gets this cipher&apos;s block size.                
                <return>
                    this cipher's block size                    
                </return>
            </javadoc>
            <method name="getBlockSize" type="int" line="16"/>
            <method name="init" type="void" line="19">
                <params>
                    <param name="decrypting" type="boolean"/>
                    <param name="algorithm" type="String"/>
                    <param name="rawKey" type="byte[]"/>
                </params>
                <scope line="21"/>
                <scope line="24"/>
                <declaration name="i" type="int" line="27"/>
                <declaration name="tmp" type="int" line="33"/>
                <declaration name="nLen" type="int" line="34"/>
                <declaration name="nKeyPos" type="int" line="35"/>
                <scope line="36">
                    <scope line="37"/>
                </scope>
                <declaration name="data" type="int[]" line="44"/>
                <scope line="45"/>
                <scope line="50"/>
                <scope line="55"/>
                <scope line="60"/>
                <scope line="65"/>
            </method>
            <javadoc line="71">
                Performs encryption operation.
                  &lt;p&gt;The input plain text &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(plainOffset + len - 1)&lt;/code&gt;, is encrypted.
                  The result is stored in &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt;.
                  &lt;p&gt;The subclass that implements Cipher should ensure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.                
                <param>
                    plain the buffer with the input data to be encrypted                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
                <param>
                    plainLen the length of the input data                    
                </param>
                <param>
                    cipher the buffer for the result                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipher</code>                    
                </param>
            </javadoc>
            <method name="encryptBlock" type="void" line="86">
                <params>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                </params>
            </method>
            <javadoc line="89">
                Performs decryption operation.
                  &lt;p&gt;The input cipher text &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(cipherOffset + len - 1)&lt;/code&gt;, is decrypted.
                  The result is stored in &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt;.
                  &lt;p&gt;The subclass that implements Cipher should ensure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.                
                <param>
                    cipher the buffer with the input data to be decrypted                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipherOffset</code>                    
                </param>
                <param>
                    cipherLen the length of the input data                    
                </param>
                <param>
                    plain the buffer for the result                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
            </javadoc>
            <method name="decryptBlock" type="void" line="104">
                <params>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                </params>
            </method>
            <javadoc line="107">
                Encrypts, or decrypts, the blocks of data passed in.                
            </javadoc>
            <method name="cipherBlock" type="void" line="110">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                </params>
                <scope line="113"/>
                <scope line="116"/>
                <declaration name="t" type="int" line="119"/>
            </method>
            <javadoc line="130">
                Encrypts a single block, in place.                
            </javadoc>
            <method name="encryptBlock" type="void" line="133">
                <params>
                    <param name="value" type="int[]"/>
                </params>
                <declaration name="left" type="int" line="134"/>
                <declaration name="right" type="int" line="135"/>
            </method>
            <javadoc line="157">
                Decrypts a single block, in place.                
            </javadoc>
            <method name="decryptBlock" type="void" line="160">
                <params>
                    <param name="value" type="int[]"/>
                </params>
                <declaration name="left" type="int" line="161"/>
                <declaration name="right" type="int" line="162"/>
            </method>
            <javadoc line="184">
                Calculates the S-Box function F().
                  This gets used &quot;rounds&quot; times on each encryption/decryption.                
            </javadoc>
            <method name="F" type="int" line="188">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <declaration name="p" type="int[]" line="191"/>
            <declaration name="s0" type="int[]" line="192"/>
            <declaration name="s1" type="int[]" line="193"/>
            <declaration name="s2" type="int[]" line="194"/>
            <declaration name="s3" type="int[]" line="195"/>
            <declaration name="temp" type="int[]" line="196"/>
            <declaration name="pi" type="int[]" line="197"/>
        </class>
    </source>