<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.InvalidKeyException"/>
        <class name="BlowfishCrypt" line="30">
            <extends class="SymmetricCipher"/>
            <comment line="44">
                Are we encrypting or decrypting?                
            </comment>
            <comment line="284">
                subkeys                
            </comment>
            <comment line="285">
                s-boxes                
            </comment>
            <comment line="289">
                to avoid encrypt/decrypt mallocs                
            </comment>
            <comment line="291">
                many digits of pi, for initializing p and s                
            </comment>
            <implements interface="BlowfishConstants"/>
            <javadoc line="30">
                This is the internal Blowfish class responsible for encryption and
                  decryption of a byte array of size &lt;code&gt;BLOWFISH_BLOCK_SIZE&lt;/code&gt;.                
                <author>
                    Jan Luehe                    
                </author>
                <author>
                    David Brownell                    
                </author>
                <see>
                    BlowfishCipher                    
                </see>
            </javadoc>
            <declaration name="decrypting" type="boolean" line="46"/>
            <javadoc line="48">
                Gets this cipher&apos;s block size.                
                <return>
                    this cipher's block size                    
                </return>
            </javadoc>
            <method name="getBlockSize" type="int" line="53"/>
            <method name="init" type="void" line="58">
                <params>
                    <param name="decrypting" type="boolean"/>
                    <param name="algorithm" type="String"/>
                    <param name="rawKey" type="byte[]"/>
                </params>
                <comment line="66">
                    Step 1: Init P and then S arrays from pi bytes                    
                </comment>
                <comment line="75">
                    Step 2: XOR all parts of P with key data                    
                </comment>
                <comment line="88">
                    Steps 3-7: Replace all P, S values with computed values                    
                </comment>
                <scope line="60"/>
                <scope line="63"/>
                <declaration name="i" type="int" line="67"/>
                <declaration name="tmp" type="int" line="76"/>
                <declaration name="nLen" type="int" line="77"/>
                <declaration name="nKeyPos" type="int" line="78"/>
                <scope line="79">
                    <scope line="80"/>
                </scope>
                <declaration name="data" type="int[]" line="89"/>
                <scope line="91"/>
                <scope line="97"/>
                <scope line="102"/>
                <scope line="107"/>
                <scope line="112"/>
            </method>
            <javadoc line="119">
                Performs encryption operation.
                  &lt;p&gt;The input plain text &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(plainOffset + len - 1)&lt;/code&gt;, is encrypted.
                  The result is stored in &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt;.
                  &lt;p&gt;The subclass that implements Cipher should ensure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.                
                <param>
                    plain the buffer with the input data to be encrypted                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
                <param>
                    plainLen the length of the input data                    
                </param>
                <param>
                    cipher the buffer for the result                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipher</code>                    
                </param>
            </javadoc>
            <method name="encryptBlock" type="void" line="139">
                <params>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                </params>
            </method>
            <javadoc line="143">
                Performs decryption operation.
                  &lt;p&gt;The input cipher text &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(cipherOffset + len - 1)&lt;/code&gt;, is decrypted.
                  The result is stored in &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt;.
                  &lt;p&gt;The subclass that implements Cipher should ensure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.                
                <param>
                    cipher the buffer with the input data to be decrypted                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipherOffset</code>                    
                </param>
                <param>
                    cipherLen the length of the input data                    
                </param>
                <param>
                    plain the buffer for the result                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
            </javadoc>
            <method name="decryptBlock" type="void" line="163">
                <params>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                </params>
            </method>
            <javadoc line="167">
                Encrypts, or decrypts, the blocks of data passed in.                
            </javadoc>
            <method name="cipherBlock" type="void" line="171">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                </params>
                <scope line="182"/>
                <scope line="184"/>
                <declaration name="t" type="int" line="188"/>
            </method>
            <javadoc line="201">
                Encrypts a single block, in place.                
            </javadoc>
            <method name="encryptBlock" type="void" line="204">
                <params>
                    <param name="value" type="int[]"/>
                </params>
                <declaration name="left" type="int" line="205"/>
                <declaration name="right" type="int" line="206"/>
            </method>
            <javadoc line="236">
                Decrypts a single block, in place.                
            </javadoc>
            <method name="decryptBlock" type="void" line="239">
                <params>
                    <param name="value" type="int[]"/>
                </params>
                <declaration name="left" type="int" line="240"/>
                <declaration name="right" type="int" line="241"/>
            </method>
            <javadoc line="271">
                Calculates the S-Box function F().
                  This gets used &quot;rounds&quot; times on each encryption/decryption.                
            </javadoc>
            <method name="F" type="int" line="276">
                <params>
                    <param name="v" type="int"/>
                </params>
            </method>
            <declaration name="p" type="int[]" line="283"/>
            <declaration name="s0" type="int[]" line="284"/>
            <declaration name="s1" type="int[]" line="285"/>
            <declaration name="s2" type="int[]" line="286"/>
            <declaration name="s3" type="int[]" line="287"/>
            <declaration name="temp" type="int[]" line="288"/>
            <declaration name="pi" type="int[]" line="291"/>
        </class>
    </source>