<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream.GetField"/>
        <import package="java.security.Security"/>
        <import package="java.security.Key"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.Provider"/>
        <import package="java.security.KeyFactory"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.UnrecoverableKeyException"/>
        <import package="java.security.InvalidParameterException"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.AlgorithmParameters"/>
        <import package="java.security.spec.InvalidParameterSpecException"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="java.security.spec.PKCS8EncodedKeySpec"/>
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.CipherSpi"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.NoSuchPaddingException"/>
        <import package="javax.crypto.IllegalBlockSizeException"/>
        <import package="javax.crypto.BadPaddingException"/>
        <import package="javax.crypto.SealedObject"/>
        <import package="javax.crypto.spec"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <import package="sun.security.util.ObjectIdentifier"/>
        <class name="KeyProtector" line="66">
            <comment line="84">
                defined by SunSoft (SKI project)                
            </comment>
            <comment line="88">
                JavaSoft proprietary key-protection algorithm (used to protect private
                 keys in the keystore implementation that comes with JDK 1.2)                
            </comment>
            <comment line="92">
                the salt length                
            </comment>
            <comment line="95">
                the password used for protecting/recovering keys passed through this
                 key protector                
            </comment>
            <comment line="145">
                Recovers the cleartext version of the given key (in protected format),
                 using the password provided at construction time.                
            </comment>
            <comment line="208">
                Recovers the cleartext version of the given key (in protected format),
                 using the password provided at construction time. This method implements
                 the recovery algorithm used by Sun&apos;s keystore implementation in
                 JDK 1.2.                
            </comment>
            <javadoc line="66">
                This class implements a protection mechanism for private keys. In JCE, we
                  use a stronger protection mechanism than in the JDK, because we can use
                  the &lt;code&gt;Cipher&lt;/code&gt; class.
                  Private keys are protected using the JCE mechanism, and are recovered using
                  either the JDK or JCE mechanism, depending on how the key has been
                  protected. This allows us to parse Sun&apos;s keystore implementation that ships
                  with JDK 1.2.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    JceKeyStore                    
                </see>
            </javadoc>
            <declaration name="PBE_WITH_MD5_AND_DES3_CBC_OID" type="String" line="84"/>
            <declaration name="KEY_PROTECTOR_OID" type="String" line="89"/>
            <declaration name="SALT_LEN" type="int" line="91"/>
            <declaration name="DIGEST_LEN" type="int" line="92"/>
            <declaration name="password" type="char[]" line="96"/>
            <declaration name="PROV" type="Provider" line="98"/>
            <method name="KeyProtector" type="constructor" line="100">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="101"/>
            </method>
            <javadoc line="107">
                Protects the given cleartext private key, using the password provided at
                  construction time.                
            </javadoc>
            <method name="protect" type="byte[]" line="113">
                <params>
                    <param name="key" type="PrivateKey"/>
                </params>
                <comment line="115">
                    create a random salt (8 bytes)                    
                </comment>
                <comment line="119">
                    create PBE parameters from salt and iteration count                    
                </comment>
                <comment line="122">
                    create PBE key from password                    
                </comment>
                <comment line="127">
                    encrypt private key                    
                </comment>
                <comment line="134">
                    wrap encrypted private key in EncryptedPrivateKeyInfo
                     (as defined in PKCS#8)                    
                </comment>
                <declaration name="salt" type="byte[]" line="115"/>
                <declaration name="pbeSpec" type="PBEParameterSpec" line="119"/>
                <declaration name="pbeKeySpec" type="PBEKeySpec" line="122"/>
                <declaration name="sKey" type="SecretKey" line="123"/>
                <declaration name="cipher" type="PBEWithMD5AndTripleDESCipher" line="127"/>
                <declaration name="plain" type="byte[]" line="130"/>
                <declaration name="encrKey" type="byte[]" line="131"/>
                <declaration name="pbeParams" type="AlgorithmParameters" line="135"/>
                <declaration name="encrAlg" type="AlgorithmId" line="139"/>
            </method>
            <method name="recover" type="Key" line="150">
                <params>
                    <param name="encrInfo" type="EncryptedPrivateKeyInfo"/>
                </params>
                <comment line="163">
                    JDK 1.2 style recovery                    
                </comment>
                <comment line="169">
                    parse the PBE parameters into the corresponding spec                    
                </comment>
                <comment line="176">
                    create PBE key from password                    
                </comment>
                <comment line="182">
                    decrypt private key                    
                </comment>
                <comment line="190">
                    determine the private-key algorithm, and parse private key
                     using the appropriate key factory                    
                </comment>
                <comment line="198">
                    Note: this catch needed to be here because of the
                     later catch of GeneralSecurityException                    
                </comment>
                <declaration name="plain" type="byte[]" line="151"/>
                <scope line="153">
                    <declaration name="encrAlg" type="String" line="154"/>
                    <scope line="156"/>
                    <scope line="161"/>
                    <scope line="164">
                        <declaration name="encodedParams" type="byte[]" line="165"/>
                        <declaration name="pbeParams" type="AlgorithmParameters" line="169"/>
                        <declaration name="pbeSpec" type="PBEParameterSpec" line="172"/>
                        <declaration name="pbeKeySpec" type="PBEKeySpec" line="176"/>
                        <declaration name="sKey" type="SecretKey" line="177"/>
                        <declaration name="cipher" type="PBEWithMD5AndTripleDESCipher" line="182"/>
                    </scope>
                    <declaration name="oidName" type="String" line="191"/>
                    <declaration name="kFac" type="KeyFactory" line="193"/>
                </scope>
                <scope line="196"/>
                <scope line="200"/>
                <scope line="202"/>
            </method>
            <method name="recover" type="byte[]" line="215">
                <params>
                    <param name="protectedKey" type="byte[]"/>
                </params>
                <comment line="220">
                    offset in xorKey where next digest will be stored                    
                </comment>
                <comment line="221">
                    the length of the encrpyted key                    
                </comment>
                <comment line="225">
                    Get the salt associated with this key (the first SALT_LEN bytes of
                     &lt;code&gt;protectedKey&lt;/code&gt;)                    
                </comment>
                <comment line="230">
                    Determine the number of digest rounds                    
                </comment>
                <comment line="236">
                    Get the encrypted key portion and store it in &quot;encrKey&quot;                    
                </comment>
                <comment line="240">
                    Set up the byte array which will be XORed with &quot;encrKey&quot;                    
                </comment>
                <comment line="243">
                    Convert password to byte array, so that it can be digested                    
                </comment>
                <comment line="250">
                    Compute the digests, and store them in &quot;xorKey&quot;                    
                </comment>
                <comment line="258">
                    Copy the digest into &quot;xorKey&quot;                    
                </comment>
                <comment line="268">
                    XOR &quot;encrKey&quot; with &quot;xorKey&quot;, and store the result in &quot;plainKey&quot;                    
                </comment>
                <comment line="274">
                    Check the integrity of the recovered key by concatenating it with
                     the password, digesting the concatenation, and comparing the
                     result of the digest operation with the digest provided at the end
                     of &lt;code&gt;protectedKey&lt;/code&gt;. If the two digest values are
                     different, throw an exception.                    
                </comment>
                <declaration name="i" type="int" line="216"/>
                <declaration name="digest" type="byte[]" line="217"/>
                <declaration name="numRounds" type="int" line="218"/>
                <declaration name="xorOffset" type="int" line="219"/>
                <declaration name="encrKeyLen" type="int" line="220"/>
                <declaration name="md" type="MessageDigest" line="222"/>
                <declaration name="salt" type="byte[]" line="226"/>
                <declaration name="encrKey" type="byte[]" line="236"/>
                <declaration name="xorKey" type="byte[]" line="240"/>
                <declaration name="passwdBytes" type="byte[]" line="243"/>
                <scope line="244"/>
                <scope line="252">
                    <scope line="258"/>
                    <scope line="261"/>
                </scope>
                <declaration name="plainKey" type="byte[]" line="268"/>
                <scope line="269"/>
                <scope line="284">
                    <scope line="285"/>
                </scope>
            </method>
            <javadoc line="292">
                Seals the given cleartext key, using the password provided at
                  construction time                
            </javadoc>
            <method name="seal" type="SealedObject" line="298">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <comment line="300">
                    create a random salt (8 bytes)                    
                </comment>
                <comment line="304">
                    create PBE parameters from salt and iteration count                    
                </comment>
                <comment line="307">
                    create PBE key from password                    
                </comment>
                <comment line="312">
                    seal key                    
                </comment>
                <declaration name="salt" type="byte[]" line="300"/>
                <declaration name="pbeSpec" type="PBEParameterSpec" line="304"/>
                <declaration name="pbeKeySpec" type="PBEKeySpec" line="307"/>
                <declaration name="sKey" type="SecretKey" line="308"/>
                <declaration name="cipher" type="Cipher" line="312"/>
                <declaration name="cipherSpi" type="PBEWithMD5AndTripleDESCipher" line="314"/>
            </method>
            <javadoc line="322">
                Unseals the sealed key.                
            </javadoc>
            <method name="unseal" type="Key" line="327">
                <params>
                    <param name="so" type="SealedObject"/>
                </params>
                <comment line="330">
                    create PBE key from password                    
                </comment>
                <comment line="353">
                    Note: this catch needed to be here because of the
                     later catch of GeneralSecurityException                    
                </comment>
                <scope line="328">
                    <declaration name="pbeKeySpec" type="PBEKeySpec" line="330"/>
                    <declaration name="skey" type="SecretKey" line="331"/>
                    <declaration name="soForKeyProtector" type="SealedObjectForKeyProtector" line="334"/>
                    <scope line="335"/>
                    <scope line="337"/>
                    <declaration name="params" type="AlgorithmParameters" line="340"/>
                    <scope line="341"/>
                    <declaration name="cipherSpi" type="PBEWithMD5AndTripleDESCipher" line="345"/>
                    <declaration name="cipher" type="Cipher" line="347"/>
                </scope>
                <scope line="351"/>
                <scope line="355"/>
                <scope line="357"/>
                <scope line="359"/>
            </method>
        </class>
        <class name="CipherForKeyProtector" line="366">
            <extends class="javax.crypto.Cipher"/>
            <comment line="84">
                defined by SunSoft (SKI project)                
            </comment>
            <comment line="88">
                JavaSoft proprietary key-protection algorithm (used to protect private
                 keys in the keystore implementation that comes with JDK 1.2)                
            </comment>
            <comment line="92">
                the salt length                
            </comment>
            <comment line="95">
                the password used for protecting/recovering keys passed through this
                 key protector                
            </comment>
            <comment line="145">
                Recovers the cleartext version of the given key (in protected format),
                 using the password provided at construction time.                
            </comment>
            <comment line="208">
                Recovers the cleartext version of the given key (in protected format),
                 using the password provided at construction time. This method implements
                 the recovery algorithm used by Sun&apos;s keystore implementation in
                 JDK 1.2.                
            </comment>
            <javadoc line="367">
                Creates a Cipher object.                
                <param>
                    cipherSpi the delegate                    
                </param>
                <param>
                    provider the provider                    
                </param>
                <param>
                    transformation the transformation                    
                </param>
            </javadoc>
            <method name="CipherForKeyProtector" type="constructor" line="376">
                <params>
                    <param name="cipherSpi" type="CipherSpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="transformation" type="String"/>
                </params>
            </method>
        </class>
        <class name="SealedObjectForKeyProtector" line="381">
            <extends class="javax.crypto.SealedObject"/>
            <comment line="84">
                defined by SunSoft (SKI project)                
            </comment>
            <comment line="88">
                JavaSoft proprietary key-protection algorithm (used to protect private
                 keys in the keystore implementation that comes with JDK 1.2)                
            </comment>
            <comment line="92">
                the salt length                
            </comment>
            <comment line="95">
                the password used for protecting/recovering keys passed through this
                 key protector                
            </comment>
            <comment line="145">
                Recovers the cleartext version of the given key (in protected format),
                 using the password provided at construction time.                
            </comment>
            <comment line="208">
                Recovers the cleartext version of the given key (in protected format),
                 using the password provided at construction time. This method implements
                 the recovery algorithm used by Sun&apos;s keystore implementation in
                 JDK 1.2.                
            </comment>
            <declaration name="serialVersionUID" type="long" line="383"/>
            <method name="SealedObjectForKeyProtector" type="constructor" line="386">
                <params>
                    <param name="object" type="Serializable"/>
                    <param name="c" type="Cipher"/>
                </params>
            </method>
            <method name="SealedObjectForKeyProtector" type="constructor" line="390">
                <params>
                    <param name="so" type="SealedObject"/>
                </params>
            </method>
            <method name="getParameters" type="AlgorithmParameters" line="394">
                <comment line="402">
                    eat.                    
                </comment>
                <comment line="404">
                    eat.                    
                </comment>
                <comment line="406">
                    eat.                    
                </comment>
                <declaration name="params" type="AlgorithmParameters" line="395"/>
                <scope line="396">
                    <scope line="397"/>
                    <scope line="400"/>
                    <scope line="402"/>
                    <scope line="404"/>
                </scope>
            </method>
        </class>
    </source>