<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream.GetField"/>
        <import package="java.security.Security"/>
        <import package="java.security.Key"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.Provider"/>
        <import package="java.security.KeyFactory"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.SecureRandom"/>
        <import package="java.security.UnrecoverableKeyException"/>
        <import package="java.security.InvalidParameterException"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.AlgorithmParameters"/>
        <import package="java.security.spec.InvalidParameterSpecException"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="java.security.spec.PKCS8EncodedKeySpec"/>
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.CipherSpi"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.NoSuchPaddingException"/>
        <import package="javax.crypto.IllegalBlockSizeException"/>
        <import package="javax.crypto.BadPaddingException"/>
        <import package="javax.crypto.SealedObject"/>
        <import package="javax.crypto.spec"/>
        <import package="sun.security.x509.AlgorithmId"/>
        <import package="sun.security.util.ObjectIdentifier"/>
        <class name="KeyProtector" line="38">
            <javadoc line="38">
                This class implements a protection mechanism for private keys. In JCE, we
                  use a stronger protection mechanism than in the JDK, because we can use
                  the &lt;code&gt;Cipher&lt;/code&gt; class.
                  Private keys are protected using the JCE mechanism, and are recovered using
                  either the JDK or JCE mechanism, depending on how the key has been
                  protected. This allows us to parse Sun&apos;s keystore implementation that ships
                  with JDK 1.2.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    JceKeyStore                    
                </see>
            </javadoc>
            <declaration name="PBE_WITH_MD5_AND_DES3_CBC_OID" type="String" line="50"/>
            <declaration name="KEY_PROTECTOR_OID" type="String" line="51"/>
            <declaration name="SALT_LEN" type="int" line="52"/>
            <declaration name="DIGEST_LEN" type="int" line="53"/>
            <declaration name="password" type="char[]" line="54"/>
            <declaration name="PROV" type="Provider" line="55"/>
            <method name="KeyProtector" type="constructor" line="56">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="57"/>
            </method>
            <javadoc line="62">
                Protects the given cleartext private key, using the password provided at
                  construction time.                
            </javadoc>
            <method name="protect" type="byte[]" line="66">
                <params>
                    <param name="key" type="PrivateKey"/>
                </params>
                <declaration name="salt" type="byte[]" line="67"/>
                <declaration name="pbeSpec" type="PBEParameterSpec" line="69"/>
                <declaration name="pbeKeySpec" type="PBEKeySpec" line="70"/>
                <declaration name="sKey" type="SecretKey" line="71"/>
                <declaration name="cipher" type="PBEWithMD5AndTripleDESCipher" line="73"/>
                <declaration name="plain" type="byte[]" line="76"/>
                <declaration name="encrKey" type="byte[]" line="77"/>
                <declaration name="pbeParams" type="AlgorithmParameters" line="78"/>
                <declaration name="encrAlg" type="AlgorithmId" line="80"/>
            </method>
            <method name="recover" type="Key" line="83">
                <params>
                    <param name="encrInfo" type="EncryptedPrivateKeyInfo"/>
                </params>
                <declaration name="plain" type="byte[]" line="84"/>
                <scope line="85">
                    <declaration name="encrAlg" type="String" line="86"/>
                    <scope line="87"/>
                    <scope line="90"/>
                    <scope line="93">
                        <declaration name="encodedParams" type="byte[]" line="94"/>
                        <declaration name="pbeParams" type="AlgorithmParameters" line="95"/>
                        <declaration name="pbeSpec" type="PBEParameterSpec" line="97"/>
                        <declaration name="pbeKeySpec" type="PBEKeySpec" line="98"/>
                        <declaration name="sKey" type="SecretKey" line="99"/>
                        <declaration name="cipher" type="PBEWithMD5AndTripleDESCipher" line="101"/>
                    </scope>
                    <declaration name="oidName" type="String" line="106"/>
                    <declaration name="kFac" type="KeyFactory" line="107"/>
                </scope>
                <scope line="110"/>
                <scope line="113"/>
                <scope line="116"/>
            </method>
            <method name="recover" type="byte[]" line="120">
                <params>
                    <param name="protectedKey" type="byte[]"/>
                </params>
                <declaration name="i" type="int" line="121"/>
                <declaration name="digest" type="byte[]" line="122"/>
                <declaration name="numRounds" type="int" line="123"/>
                <declaration name="xorOffset" type="int" line="124"/>
                <declaration name="encrKeyLen" type="int" line="125"/>
                <declaration name="md" type="MessageDigest" line="126"/>
                <declaration name="salt" type="byte[]" line="127"/>
                <declaration name="encrKey" type="byte[]" line="132"/>
                <declaration name="xorKey" type="byte[]" line="134"/>
                <declaration name="passwdBytes" type="byte[]" line="135"/>
                <scope line="136"/>
                <scope line="140">
                    <scope line="145"/>
                    <scope line="148"/>
                </scope>
                <declaration name="plainKey" type="byte[]" line="152"/>
                <scope line="153"/>
                <scope line="162">
                    <scope line="163"/>
                </scope>
            </method>
            <javadoc line="169">
                Seals the given cleartext key, using the password provided at
                  construction time                
            </javadoc>
            <method name="seal" type="SealedObject" line="173">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="salt" type="byte[]" line="174"/>
                <declaration name="pbeSpec" type="PBEParameterSpec" line="176"/>
                <declaration name="pbeKeySpec" type="PBEKeySpec" line="177"/>
                <declaration name="sKey" type="SecretKey" line="178"/>
                <declaration name="cipher" type="Cipher" line="180"/>
                <declaration name="cipherSpi" type="PBEWithMD5AndTripleDESCipher" line="181"/>
            </method>
            <javadoc line="187">
                Unseals the sealed key.                
            </javadoc>
            <method name="unseal" type="Key" line="190">
                <params>
                    <param name="so" type="SealedObject"/>
                </params>
                <scope line="191">
                    <declaration name="pbeKeySpec" type="PBEKeySpec" line="192"/>
                    <declaration name="skey" type="SecretKey" line="193"/>
                    <declaration name="soForKeyProtector" type="SealedObjectForKeyProtector" line="195"/>
                    <scope line="196"/>
                    <scope line="199"/>
                    <declaration name="params" type="AlgorithmParameters" line="202"/>
                    <scope line="203"/>
                    <declaration name="cipherSpi" type="PBEWithMD5AndTripleDESCipher" line="206"/>
                    <declaration name="cipher" type="Cipher" line="208"/>
                </scope>
                <scope line="212"/>
                <scope line="215"/>
                <scope line="218"/>
                <scope line="221"/>
            </method>
        </class>
        <class name="CipherForKeyProtector" line="226">
            <extends class="javax.crypto.Cipher"/>
            <javadoc line="227">
                Creates a Cipher object.                
                <param>
                    cipherSpi the delegate                    
                </param>
                <param>
                    provider the provider                    
                </param>
                <param>
                    transformation the transformation                    
                </param>
            </javadoc>
            <method name="CipherForKeyProtector" type="constructor" line="233">
                <params>
                    <param name="cipherSpi" type="CipherSpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="transformation" type="String"/>
                </params>
            </method>
        </class>
        <class name="SealedObjectForKeyProtector" line="237">
            <extends class="javax.crypto.SealedObject"/>
            <declaration name="serialVersionUID" type="long" line="238"/>
            <method name="SealedObjectForKeyProtector" type="constructor" line="239">
                <params>
                    <param name="object" type="Serializable"/>
                    <param name="c" type="Cipher"/>
                </params>
            </method>
            <method name="SealedObjectForKeyProtector" type="constructor" line="242">
                <params>
                    <param name="so" type="SealedObject"/>
                </params>
            </method>
            <method name="getParameters" type="AlgorithmParameters" line="245">
                <declaration name="params" type="AlgorithmParameters" line="246"/>
                <scope line="247">
                    <scope line="248"/>
                    <scope line="252"/>
                    <scope line="254"/>
                    <scope line="256"/>
                </scope>
            </method>
        </class>
    </source>