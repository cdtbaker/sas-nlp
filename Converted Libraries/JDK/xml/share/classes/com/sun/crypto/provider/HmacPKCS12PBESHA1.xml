<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.util.Arrays"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="javax.crypto.MacSpi"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <import package="javax.crypto.spec.PBEParameterSpec"/>
        <import package="java.security"/>
        <import package="java.security.spec"/>
        <class name="HmacPKCS12PBESHA1" line="38">
            <extends class="MacSpi"/>
            <comment line="192">
                Clones this object.                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="38">
                This is an implementation of the HMAC-PBESHA1 algorithm as defined
                  in PKCS#12 v1.0 standard.                
                <author>
                    Valerie Peng                    
                </author>
            </javadoc>
            <declaration name="hmac" type="HmacCore" line="46"/>
            <declaration name="SHA1_BLOCK_LENGTH" type="int" line="47"/>
            <javadoc line="49">
                Standard constructor, creates a new HmacSHA1 instance.                
            </javadoc>
            <method name="HmacPKCS12PBESHA1" type="constructor" line="52"/>
            <javadoc line="57">
                Returns the length of the HMAC in bytes.                
                <return>
                    the HMAC length in bytes.                    
                </return>
            </javadoc>
            <method name="engineGetMacLength" type="int" line="62"/>
            <javadoc line="66">
                Initializes the HMAC with the given secret key and algorithm parameters.                
                <param>
                    key the secret key.                    
                </param>
                <param>
                    params the algorithm parameters.                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this MAC.
                      u @exception InvalidAlgorithmParameterException if the given algorithm
                      parameters are inappropriate for this MAC.                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="78">
                <params>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
                <comment line="86">
                    maybe null if unspecified                    
                </comment>
                <comment line="87">
                    maybe 0 if unspecified                    
                </comment>
                <comment line="102">
                    generate default for salt and iteration count if necessary                    
                </comment>
                <comment line="113">
                    make sure the parameter values are consistent                    
                </comment>
                <comment line="131">
                    For security purpose, we need to enforce a minimum length                    
                </comment>
                <comment line="132">
                    for salt; just require the minimum salt length to be 8-byte                    
                </comment>
                <comment line="133">
                    which is what PKCS#5 recommends and openssl does.                    
                </comment>
                <declaration name="passwdChars" type="char[]" line="79"/>
                <declaration name="salt" type="byte[]" line="80"/>
                <declaration name="iCount" type="int" line="81"/>
                <scope line="82">
                    <declaration name="pbeKey" type="javax.crypto.interfaces.PBEKey" line="83"/>
                </scope>
                <scope line="88">
                    <declaration name="passwdBytes" type="byte[]" line="89"/>
                    <scope line="91"/>
                    <scope line="95"/>
                </scope>
                <scope line="98"/>
                <scope line="101">
                    <scope line="103"/>
                </scope>
                <scope line="108"/>
                <scope line="111">
                    <declaration name="pbeParams" type="PBEParameterSpec" line="112"/>
                    <scope line="114">
                        <scope line="115"/>
                    </scope>
                    <scope line="119"/>
                    <scope line="122">
                        <scope line="123"/>
                    </scope>
                    <scope line="127"/>
                </scope>
                <scope line="134"/>
                <scope line="138"/>
                <declaration name="derivedKey" type="byte[]" line="142"/>
                <declaration name="cipherKey" type="SecretKey" line="144"/>
            </method>
            <javadoc line="148">
                Processes the given byte.                
                <param>
                    input the input byte to be processed.                    
                </param>
            </javadoc>
            <method name="engineUpdate" type="void" line="153">
                <params>
                    <param name="input" type="byte"/>
                </params>
            </method>
            <javadoc line="157">
                Processes the first &lt;code&gt;len&lt;/code&gt; bytes in &lt;code&gt;input&lt;/code&gt;,
                  starting at &lt;code&gt;offset&lt;/code&gt;.                
                <param>
                    input the input buffer.                    
                </param>
                <param>
                    offset the offset in <code>input</code> where the input starts.                    
                </param>
                <param>
                    len the number of bytes to process.                    
                </param>
            </javadoc>
            <method name="engineUpdate" type="void" line="165">
                <params>
                    <param name="input" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="engineUpdate" type="void" line="169">
                <params>
                    <param name="input" type="ByteBuffer"/>
                </params>
            </method>
            <javadoc line="173">
                Completes the HMAC computation and resets the HMAC for further use,
                  maintaining the secret key that the HMAC was initialized with.                
                <return>
                    the HMAC result.                    
                </return>
            </javadoc>
            <method name="engineDoFinal" type="byte[]" line="179"/>
            <javadoc line="183">
                Resets the HMAC for further use, maintaining the secret key that the
                  HMAC was initialized with.                
            </javadoc>
            <method name="engineReset" type="void" line="187"/>
            <method name="clone" type="Object" line="194">
                <declaration name="that" type="HmacPKCS12PBESHA1" line="195"/>
                <scope line="196"/>
                <scope line="199"/>
            </method>
        </class>
    </source>