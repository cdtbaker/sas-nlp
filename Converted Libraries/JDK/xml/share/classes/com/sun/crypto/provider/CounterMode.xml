<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.InvalidKeyException"/>
        <class name="CounterMode" line="30">
            <extends class="FeedbackCipher"/>
            <comment line="45">
                current counter value                
            </comment>
            <comment line="48">
                encrypted bytes of the previous counter value                
            </comment>
            <comment line="51">
                number of bytes in encryptedCounter already used up                
            </comment>
            <comment line="54">
                variables for save/restore calls                
            </comment>
            <javadoc line="30">
                This class represents ciphers in counter (CTR) mode.
                  &lt;p&gt;This mode is implemented independently of a particular cipher.
                  Ciphers to which this mode should apply (e.g., DES) must be
                  &lt;i&gt;plugged-in&lt;/i&gt; using the constructor.
                  &lt;p&gt;NOTE: This class does not deal with buffering or padding.                
                <author>
                    Andreas Sterbenz                    
                </author>
                <since>
                    1.4.2                    
                </since>
            </javadoc>
            <declaration name="counter" type="byte[]" line="45"/>
            <declaration name="encryptedCounter" type="byte[]" line="48"/>
            <declaration name="used" type="int" line="51"/>
            <declaration name="counterSave" type="byte[]" line="54"/>
            <declaration name="encryptedCounterSave" type="byte[]" line="55"/>
            <declaration name="usedSave" type="int" line="56"/>
            <method name="CounterMode" type="constructor" line="58">
                <params>
                    <param name="embeddedCipher" type="SymmetricCipher"/>
                </params>
            </method>
            <javadoc line="64">
                Gets the name of the feedback mechanism                
                <return>
                    the name of the feedback mechanism                    
                </return>
            </javadoc>
            <method name="getFeedback" type="String" line="69"/>
            <javadoc line="73">
                Resets the iv to its original value.
                  This is used when doFinal is called in the Cipher class, so that the
                  cipher can be reused (with its original iv).                
            </javadoc>
            <method name="reset" type="void" line="78"/>
            <javadoc line="83">
                Save the current content of this cipher.                
            </javadoc>
            <method name="save" type="void" line="86">
                <scope line="87"/>
            </method>
            <javadoc line="97">
                Restores the content of this cipher to the previous saved one.                
            </javadoc>
            <method name="restore" type="void" line="100"/>
            <javadoc line="107">
                Initializes the cipher in the specified mode with the given key
                  and iv.                
                <param>
                    decrypting flag indicating encryption or decryption                    
                </param>
                <param>
                    algorithm the algorithm name                    
                </param>
                <param>
                    key the key                    
                </param>
                <param>
                    iv the iv                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this cipher                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="120">
                <params>
                    <param name="decrypting" type="boolean"/>
                    <param name="algorithm" type="String"/>
                    <param name="key" type="byte[]"/>
                    <param name="iv" type="byte[]"/>
                </params>
                <comment line="127">
                    always encrypt mode for embedded cipher                    
                </comment>
                <scope line="121"/>
            </method>
            <javadoc line="130">
                Performs encryption operation.
                  &lt;p&gt;The input plain text &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(plainOffset + len - 1)&lt;/code&gt;, is encrypted.
                  The result is stored in &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt;.
                  &lt;p&gt;It is the application&apos;s responsibility to make sure that
                  &lt;code&gt;plainLen&lt;/code&gt; is a multiple of the embedded cipher&apos;s block size,
                  as any excess bytes are ignored.
                  &lt;p&gt;It is also the application&apos;s responsibility to make sure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.
                  (This check is omitted here, to avoid double checking.)                
                <param>
                    in the buffer with the input data to be encrypted                    
                </param>
                <param>
                    inOffset the offset in &lt;code&gt;plain&lt;/code&gt;                    
                </param>
                <param>
                    len the length of the input data                    
                </param>
                <param>
                    out the buffer for the result                    
                </param>
                <param>
                    outOff the offset in &lt;code&gt;cipher&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="encrypt" type="void" line="153">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOff" type="int"/>
                    <param name="len" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOff" type="int"/>
                </params>
            </method>
            <javadoc line="157">
                Performs decryption operation.
                  &lt;p&gt;The input cipher text &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(cipherOffset + len - 1)&lt;/code&gt;, is decrypted.
                  The result is stored in &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt;.
                  &lt;p&gt;It is the application&apos;s responsibility to make sure that
                  &lt;code&gt;cipherLen&lt;/code&gt; is a multiple of the embedded cipher&apos;s block
                  size, as any excess bytes are ignored.
                  &lt;p&gt;It is also the application&apos;s responsibility to make sure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.
                  (This check is omitted here, to avoid double checking.)                
                <param>
                    in the buffer with the input data to be decrypted                    
                </param>
                <param>
                    inOff the offset in &lt;code&gt;cipherOffset&lt;/code&gt;                    
                </param>
                <param>
                    len the length of the input data                    
                </param>
                <param>
                    out the buffer for the result                    
                </param>
                <param>
                    outOff the offset in &lt;code&gt;plain&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="decrypt" type="void" line="180">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOff" type="int"/>
                    <param name="len" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOff" type="int"/>
                </params>
            </method>
            <javadoc line="184">
                Increment the counter value.                
            </javadoc>
            <method name="increment" type="void" line="187">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
                <declaration name="n" type="int" line="188"/>
                <scope line="189"/>
            </method>
            <javadoc line="194">
                Do the actual encryption/decryption operation.
                  Essentially we XOR the input plaintext/ciphertext stream with a
                  keystream generated by encrypting the counter values. Counter values
                  are encrypted on demand.                
            </javadoc>
            <method name="crypt" type="void" line="200">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOff" type="int"/>
                    <param name="len" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOff" type="int"/>
                </params>
                <scope line="201">
                    <scope line="202"/>
                </scope>
            </method>
        </class>
    </source>