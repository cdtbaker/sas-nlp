<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="javax.crypto"/>
        <class name="ARCFOURCipher" line="5">
            <extends class="CipherSpi"/>
            <javadoc line="5">
                Implementation of the ARCFOUR cipher, an algorithm apparently compatible
                  with RSA Security&apos;s RC4(tm) cipher. The description of this algorithm was
                  taken from Bruce Schneier&apos;s book Applied Cryptography, 2nd ed.,
                  section 17.1.
                  We support keys from 40 to 1024 bits. ARCFOUR would allow for keys shorter
                  than 40 bits, but that is too insecure for us to permit.
                  Note that we subclass CipherSpi directly and do not use the CipherCore
                  framework. That was designed to simplify implementation of block ciphers
                  and does not offer any advantages for stream ciphers such as ARCFOUR.                
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="S" type="int[]" line="19"/>
            <declaration name="is" type="int" line="20"/>
            <declaration name="lastKey" type="byte[]" line="21"/>
            <method name="ARCFOURCipher" type="constructor" line="22"/>
            <method name="init" type="void" line="25">
                <params>
                    <param name="key" type="byte[]"/>
                </params>
                <scope line="26"/>
                <scope line="29">
                    <declaration name="Si" type="int" line="30"/>
                    <scope line="35"/>
                </scope>
            </method>
            <method name="crypt" type="void" line="42">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
                <scope line="43"/>
                <scope line="46">
                    <declaration name="Si" type="int" line="48"/>
                    <declaration name="Sj" type="int" line="50"/>
                </scope>
            </method>
            <method name="engineSetMode" type="void" line="56">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <scope line="57"/>
            </method>
            <method name="engineSetPadding" type="void" line="61">
                <params>
                    <param name="padding" type="String"/>
                </params>
                <scope line="62"/>
            </method>
            <method name="engineGetBlockSize" type="int" line="66"/>
            <method name="engineGetOutputSize" type="int" line="69">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <method name="engineGetIV" type="byte[]" line="72"/>
            <method name="engineGetParameters" type="AlgorithmParameters" line="75"/>
            <method name="engineInit" type="void" line="78">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="81">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="82"/>
            </method>
            <method name="engineInit" type="void" line="87">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="88"/>
            </method>
            <method name="init" type="void" line="93">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                </params>
                <scope line="94"/>
            </method>
            <method name="getEncodedKey" type="byte[]" line="100">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="keyAlg" type="String" line="101"/>
                <scope line="102"/>
                <scope line="105"/>
                <declaration name="encodedKey" type="byte[]" line="108"/>
                <scope line="109"/>
            </method>
            <method name="engineUpdate" type="byte[]" line="114">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
                <declaration name="out" type="byte[]" line="115"/>
            </method>
            <method name="engineUpdate" type="int" line="119">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
                <scope line="120"/>
            </method>
            <method name="engineDoFinal" type="byte[]" line="126">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
                <declaration name="out" type="byte[]" line="127"/>
            </method>
            <method name="engineDoFinal" type="int" line="131">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
                <declaration name="outLen" type="int" line="132"/>
            </method>
            <method name="engineWrap" type="byte[]" line="136">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="encoded" type="byte[]" line="137"/>
                <scope line="138"/>
            </method>
            <method name="engineUnwrap" type="Key" line="143">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="algorithm" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <declaration name="encoded" type="byte[]" line="144"/>
            </method>
            <method name="engineGetKeySize" type="int" line="147">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="encodedKey" type="byte[]" line="148"/>
            </method>
        </class>
    </source>