<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="javax.crypto"/>
        <class name="ARCFOURCipher" line="33">
            <extends class="CipherSpi"/>
            <comment line="52">
                state array S, 256 entries. The entries are 8-bit, but we use an int[]                
            </comment>
            <comment line="53">
                because int arithmetic is much faster than in Java than bytes.                
            </comment>
            <comment line="56">
                state indices i and j. Called is and js to avoid collision with                
            </comment>
            <comment line="57">
                local variables. &apos;is&apos; is set to -1 after a call to doFinal()                
            </comment>
            <comment line="60">
                the bytes of the last key used (if any)                
            </comment>
            <comment line="61">
                we need this to re-initialize after a call to doFinal()                
            </comment>
            <comment line="64">
                called by the JCE framework                
            </comment>
            <comment line="69">
                core key setup code. initializes S, is, and js                
            </comment>
            <comment line="70">
                assumes key is non-null and between 40 and 1024 bit                
            </comment>
            <comment line="95">
                core crypt code. OFB style, so works for both encryption and decryption                
            </comment>
            <comment line="113">
                Modes do not make sense with stream ciphers, but allow ECB                
            </comment>
            <comment line="114">
                see JCE spec.                
            </comment>
            <comment line="121">
                Padding does not make sense with stream ciphers, but allow NoPadding                
            </comment>
            <comment line="122">
                see JCE spec.                
            </comment>
            <comment line="130">
                Return 0 to indicate stream cipher                
            </comment>
            <comment line="131">
                see JCE spec.                
            </comment>
            <comment line="136">
                output length is always the same as input length                
            </comment>
            <comment line="137">
                see JCE spec                
            </comment>
            <comment line="142">
                no IV, return null                
            </comment>
            <comment line="143">
                see JCE spec                
            </comment>
            <comment line="148">
                no parameters                
            </comment>
            <comment line="149">
                see JCE spec                
            </comment>
            <comment line="154">
                see JCE spec                
            </comment>
            <comment line="160">
                see JCE spec                
            </comment>
            <comment line="171">
                see JCE spec                
            </comment>
            <comment line="182">
                init method. Check opmode and key, then call init(byte[]).                
            </comment>
            <comment line="191">
                return the encoding of key if key is a valid ARCFOUR key.                
            </comment>
            <comment line="192">
                otherwise, throw an InvalidKeyException                
            </comment>
            <comment line="209">
                see JCE spec                
            </comment>
            <comment line="216">
                see JCE spec                
            </comment>
            <comment line="226">
                see JCE spec                
            </comment>
            <comment line="233">
                see JCE spec                
            </comment>
            <comment line="241">
                see JCE spec                
            </comment>
            <comment line="251">
                see JCE spec                
            </comment>
            <comment line="258">
                see JCE spec                
            </comment>
            <javadoc line="33">
                Implementation of the ARCFOUR cipher, an algorithm apparently compatible
                  with RSA Security&apos;s RC4(tm) cipher. The description of this algorithm was
                  taken from Bruce Schneier&apos;s book Applied Cryptography, 2nd ed.,
                  section 17.1.
                  We support keys from 40 to 1024 bits. ARCFOUR would allow for keys shorter
                  than 40 bits, but that is too insecure for us to permit.
                  Note that we subclass CipherSpi directly and do not use the CipherCore
                  framework. That was designed to simplify implementation of block ciphers
                  and does not offer any advantages for stream ciphers such as ARCFOUR.                
                <since>
                    1.5                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
            </javadoc>
            <declaration name="S" type="int[]" line="53"/>
            <declaration name="is" type="int" line="57"/>
            <declaration name="lastKey" type="byte[]" line="61"/>
            <method name="ARCFOURCipher" type="constructor" line="64"/>
            <method name="init" type="void" line="70">
                <params>
                    <param name="key" type="byte[]"/>
                </params>
                <comment line="71">
                    initialize S[i] to i                    
                </comment>
                <comment line="76">
                    we avoid expanding key to 256 bytes and instead keep a separate                    
                </comment>
                <comment line="77">
                    counter ki = i mod key.length.                    
                </comment>
                <comment line="89">
                    set indices to 0                    
                </comment>
                <scope line="72"/>
                <scope line="78">
                    <declaration name="Si" type="int" line="79"/>
                    <scope line="84"/>
                </scope>
            </method>
            <method name="crypt" type="void" line="96">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
                <comment line="98">
                    doFinal() was called, need to reset the cipher to initial state                    
                </comment>
                <scope line="97"/>
                <scope line="101">
                    <declaration name="Si" type="int" line="103"/>
                    <declaration name="Sj" type="int" line="105"/>
                </scope>
            </method>
            <method name="engineSetMode" type="void" line="114">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <scope line="115"/>
            </method>
            <method name="engineSetPadding" type="void" line="123">
                <params>
                    <param name="padding" type="String"/>
                </params>
                <scope line="124"/>
            </method>
            <method name="engineGetBlockSize" type="int" line="131"/>
            <method name="engineGetOutputSize" type="int" line="137">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <method name="engineGetIV" type="byte[]" line="143"/>
            <method name="engineGetParameters" type="AlgorithmParameters" line="149"/>
            <method name="engineInit" type="void" line="155">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="162">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="163"/>
            </method>
            <method name="engineInit" type="void" line="173">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="174"/>
            </method>
            <method name="init" type="void" line="182">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                </params>
                <scope line="183"/>
            </method>
            <method name="getEncodedKey" type="byte[]" line="192">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="keyAlg" type="String" line="193"/>
                <scope line="194"/>
                <scope line="197"/>
                <declaration name="encodedKey" type="byte[]" line="200"/>
                <scope line="201"/>
            </method>
            <method name="engineUpdate" type="byte[]" line="209">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
                <declaration name="out" type="byte[]" line="210"/>
            </method>
            <method name="engineUpdate" type="int" line="217">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
                <scope line="218"/>
            </method>
            <method name="engineDoFinal" type="byte[]" line="226">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
                <declaration name="out" type="byte[]" line="227"/>
            </method>
            <method name="engineDoFinal" type="int" line="234">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOfs" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOfs" type="int"/>
                </params>
                <declaration name="outLen" type="int" line="235"/>
            </method>
            <method name="engineWrap" type="byte[]" line="242">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="encoded" type="byte[]" line="243"/>
                <scope line="244"/>
            </method>
            <method name="engineUnwrap" type="Key" line="252">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="algorithm" type="String"/>
                    <param name="type" type="int"/>
                </params>
                <declaration name="encoded" type="byte[]" line="253"/>
            </method>
            <method name="engineGetKeySize" type="int" line="258">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="encodedKey" type="byte[]" line="259"/>
            </method>
        </class>
    </source>