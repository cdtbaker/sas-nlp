<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.util.Arrays"/>
        <import package="java.security"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <class name="AESWrapCipher" line="7">
            <extends class="CipherSpi"/>
            <javadoc line="7">
                This class implements the AES KeyWrap algorithm as defined
                  in &lt;a href=http://www.w3.org/TR/xmlenc-core/#sec-Alg-SymmetricKeyWrap&gt;
                  &quot;XML Encryption Syntax and Processing&quot; section 5.6.3 &quot;AES Key Wrap&quot;.
                  Note: only &lt;code&gt;ECB&lt;/code&gt; mode and &lt;code&gt;NoPadding&lt;/code&gt; padding
                  can be used for this algorithm.                
                <author>
                    Valerie Peng                    
                </author>
                <see>
                    AESCipher                    
                </see>
            </javadoc>
            <declaration name="IV" type="byte[]" line="17"/>
            <declaration name="blksize" type="int" line="18"/>
            <declaration name="cipher" type="AESCrypt" line="19"/>
            <declaration name="decrypting" type="boolean" line="20"/>
            <javadoc line="21">
                Creates an instance of AES KeyWrap cipher with default
                  mode, i.e. &quot;ECB&quot; and padding scheme, i.e. &quot;NoPadding&quot;.                
            </javadoc>
            <method name="AESWrapCipher" type="constructor" line="25"/>
            <javadoc line="28">
                Sets the mode of this cipher. Only &quot;ECB&quot; mode is accepted for this
                  cipher.                
                <param>
                    mode the cipher mode                    
                </param>
                <exception>
                    NoSuchAlgorithmException if the requested cipher mode
                      is not &quot;ECB&quot;.                    
                </exception>
            </javadoc>
            <method name="engineSetMode" type="void" line="35">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <scope line="36"/>
            </method>
            <javadoc line="40">
                Sets the padding mechanism of this cipher. Only &quot;NoPadding&quot; schmem
                  is accepted for this cipher.                
                <param>
                    padding the padding mechanism                    
                </param>
                <exception>
                    NoSuchPaddingException if the requested padding mechanism
                      is not &quot;NoPadding&quot;.                    
                </exception>
            </javadoc>
            <method name="engineSetPadding" type="void" line="47">
                <params>
                    <param name="padding" type="String"/>
                </params>
                <scope line="48"/>
            </method>
            <javadoc line="52">
                Returns the block size (in bytes). i.e. 16 bytes.                
                <return>
                    the block size (in bytes), i.e. 16 bytes.                    
                </return>
            </javadoc>
            <method name="engineGetBlockSize" type="int" line="56"/>
            <javadoc line="59">
                Returns the length in bytes that an output buffer would need to be
                  given the input length &lt;code&gt;inputLen&lt;/code&gt; (in bytes).
                  &lt;p&gt;The actual output length of the next &lt;code&gt;update&lt;/code&gt; or
                  &lt;code&gt;doFinal&lt;/code&gt; call may be smaller than the length returned
                  by this method.                
                <param>
                    inputLen the input length (in bytes)                    
                </param>
                <return>
                    the required output buffer size (in bytes)                    
                </return>
            </javadoc>
            <method name="engineGetOutputSize" type="int" line="68">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
                <declaration name="result" type="int" line="69"/>
                <scope line="70"/>
                <scope line="73"/>
            </method>
            <javadoc line="78">
                Returns the initialization vector (IV) which is null for this cipher.                
                <return>
                    null for this cipher.                    
                </return>
            </javadoc>
            <method name="engineGetIV" type="byte[]" line="82"/>
            <javadoc line="85">
                Initializes this cipher with a key and a source of randomness.
                  &lt;p&gt;The cipher only supports the following two operation modes:&lt;b&gt;
                  Cipher.WRAP_MODE, and &lt;b&gt;
                  Cipher.UNWRAP_MODE.
                  &lt;p&gt;For modes other than the above two, UnsupportedOperationException
                  will be thrown.                
                <param>
                    opmode the operation mode of this cipher. Only
                      &lt;code&gt;WRAP_MODE&lt;/code&gt; or &lt;code&gt;UNWRAP_MODE&lt;/code&gt;) are accepted.                    
                </param>
                <param>
                    key the secret key.                    
                </param>
                <param>
                    random the source of randomness.                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this cipher.                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="99">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="100"/>
                <scope line="103"/>
                <scope line="106"/>
            </method>
            <javadoc line="111">
                Initializes this cipher with a key, a set of algorithm parameters,
                  and a source of randomness.
                  &lt;p&gt;The cipher only supports the following two operation modes:&lt;b&gt;
                  Cipher.WRAP_MODE, and &lt;b&gt;
                  Cipher.UNWRAP_MODE.
                  &lt;p&gt;For modes other than the above two, UnsupportedOperationException
                  will be thrown.                
                <param>
                    opmode the operation mode of this cipher. Only
                      &lt;code&gt;WRAP_MODE&lt;/code&gt; or &lt;code&gt;UNWRAP_MODE&lt;/code&gt;) are accepted.                    
                </param>
                <param>
                    key the secret key.                    
                </param>
                <param>
                    params the algorithm parameters; must be null for this cipher.                    
                </param>
                <param>
                    random the source of randomness.                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this cipher                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given algorithm
                      parameters is not null.                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="129">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="130"/>
            </method>
            <javadoc line="135">
                Initializes this cipher with a key, a set of algorithm parameters,
                  and a source of randomness.
                  &lt;p&gt;The cipher only supports the following two operation modes:&lt;b&gt;
                  Cipher.WRAP_MODE, and &lt;b&gt;
                  Cipher.UNWRAP_MODE.
                  &lt;p&gt;For modes other than the above two, UnsupportedOperationException
                  will be thrown.                
                <param>
                    opmode the operation mode of this cipher. Only
                      &lt;code&gt;WRAP_MODE&lt;/code&gt; or &lt;code&gt;UNWRAP_MODE&lt;/code&gt;) are accepted.                    
                </param>
                <param>
                    key the secret key.                    
                </param>
                <param>
                    params the algorithm parameters; must be null for this cipher.                    
                </param>
                <param>
                    random the source of randomness.                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given algorithm
                      parameters is not null.                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="152">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="153"/>
            </method>
            <javadoc line="158">
                This operation is not supported by this cipher.
                  Since it&apos;s impossible to initialize this cipher given the
                  current Cipher.engineInit(...) implementation,
                  IllegalStateException will always be thrown upon invocation.                
                <param>
                    in the input buffer.                    
                </param>
                <param>
                    inOffset the offset in &lt;code&gt;in&lt;/code&gt; where the input
                      starts.                    
                </param>
                <param>
                    inLen the input length.                    
                </param>
                <return>
                    n/a.                    
                </return>
                <exception>
                    IllegalStateException upon invocation of this method.                    
                </exception>
            </javadoc>
            <method name="engineUpdate" type="byte[]" line="170">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <javadoc line="173">
                This operation is not supported by this cipher.
                  Since it&apos;s impossible to initialize this cipher given the
                  current Cipher.engineInit(...) implementation,
                  IllegalStateException will always be thrown upon invocation.                
                <param>
                    in the input buffer.                    
                </param>
                <param>
                    inOffset the offset in &lt;code&gt;in&lt;/code&gt; where the input
                      starts.                    
                </param>
                <param>
                    inLen the input length.                    
                </param>
                <param>
                    out the buffer for the result.                    
                </param>
                <param>
                    outOffset the offset in &lt;code&gt;out&lt;/code&gt; where the result
                      is stored.                    
                </param>
                <return>
                    n/a.                    
                </return>
                <exception>
                    IllegalStateException upon invocation of this method.                    
                </exception>
            </javadoc>
            <method name="engineUpdate" type="int" line="188">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                </params>
            </method>
            <javadoc line="191">
                This operation is not supported by this cipher.
                  Since it&apos;s impossible to initialize this cipher given the
                  current Cipher.engineInit(...) implementation,
                  IllegalStateException will always be thrown upon invocation.                
                <param>
                    in the input buffer                    
                </param>
                <param>
                    inOffset the offset in &lt;code&gt;in&lt;/code&gt; where the input
                      starts                    
                </param>
                <param>
                    inLen the input length.                    
                </param>
                <return>
                    n/a.                    
                </return>
                <exception>
                    IllegalStateException upon invocation of this method.                    
                </exception>
            </javadoc>
            <method name="engineDoFinal" type="byte[]" line="203">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <javadoc line="206">
                This operation is not supported by this cipher.
                  Since it&apos;s impossible to initialize this cipher given the
                  current Cipher.engineInit(...) implementation,
                  IllegalStateException will always be thrown upon invocation.                
                <param>
                    in the input buffer.                    
                </param>
                <param>
                    inOffset the offset in &lt;code&gt;in&lt;/code&gt; where the input
                      starts.                    
                </param>
                <param>
                    inLen the input length.                    
                </param>
                <param>
                    out the buffer for the result.                    
                </param>
                <param>
                    outOffset the ofset in &lt;code&gt;out&lt;/code&gt; where the result
                      is stored.                    
                </param>
                <return>
                    n/a.                    
                </return>
                <exception>
                    IllegalStateException upon invocation of this method.                    
                </exception>
            </javadoc>
            <method name="engineDoFinal" type="int" line="221">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                </params>
            </method>
            <javadoc line="224">
                Returns the parameters used with this cipher which is always null
                  for this cipher.                
                <return>
                    null since this cipher does not use any parameters.                    
                </return>
            </javadoc>
            <method name="engineGetParameters" type="AlgorithmParameters" line="229"/>
            <javadoc line="232">
                Returns the key size of the given key object in number of bits.                
                <param>
                    key the key object.                    
                </param>
                <return>
                    the &quot;effective&quot; key size of the given key object.                    
                </return>
                <exception>
                    InvalidKeyException if &lt;code&gt;key&lt;/code&gt; is invalid.                    
                </exception>
            </javadoc>
            <method name="engineGetKeySize" type="int" line="238">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="encoded" type="byte[]" line="239"/>
                <scope line="240"/>
            </method>
            <javadoc line="245">
                Wrap a key.                
                <param>
                    key the key to be wrapped.                    
                </param>
                <return>
                    the wrapped key.                    
                </return>
                <exception>
                    IllegalBlockSizeException if this cipher is a block
                      cipher, no padding has been requested, and the length of the
                      encoding of the key to be wrapped is not a
                      multiple of the block size.                    
                </exception>
                <exception>
                    InvalidKeyException if it is impossible or unsafe to
                      wrap the key with this cipher (e.g., a hardware protected key is
                      being passed to a software only cipher).                    
                </exception>
            </javadoc>
            <method name="engineWrap" type="byte[]" line="257">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="keyVal" type="byte[]" line="258"/>
                <scope line="259"/>
                <declaration name="out" type="byte[]" line="262"/>
                <scope line="263"/>
                <scope line="268">
                    <scope line="269"/>
                    <declaration name="N" type="int" line="274"/>
                    <declaration name="buffer" type="byte[]" line="275"/>
                    <scope line="276">
                        <scope line="277">
                            <declaration name="T" type="int" line="278"/>
                            <scope line="282">
                                <declaration name="v" type="byte" line="283"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="294">
                Unwrap a previously wrapped key.                
                <param>
                    wrappedKey the key to be unwrapped.                    
                </param>
                <param>
                    wrappedKeyAlgorithm the algorithm the wrapped key is for.                    
                </param>
                <param>
                    wrappedKeyType the type of the wrapped key.
                      This is one of &lt;code&gt;Cipher.SECRET_KEY&lt;/code&gt;,
                      &lt;code&gt;Cipher.PRIVATE_KEY&lt;/code&gt;, or &lt;code&gt;Cipher.PUBLIC_KEY&lt;/code&gt;.                    
                </param>
                <return>
                    the unwrapped key.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no installed providers
                      can create keys of type &lt;code&gt;wrappedKeyType&lt;/code&gt; for the
                      &lt;code&gt;wrappedKeyAlgorithm&lt;/code&gt;.                    
                </exception>
                <exception>
                    InvalidKeyException if &lt;code&gt;wrappedKey&lt;/code&gt; does not
                      represent a wrapped key of type &lt;code&gt;wrappedKeyType&lt;/code&gt; for
                      the &lt;code&gt;wrappedKeyAlgorithm&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="engineUnwrap" type="Key" line="309">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="wrappedKeyAlgorithm" type="String"/>
                    <param name="wrappedKeyType" type="int"/>
                </params>
                <declaration name="wrappedKeyLen" type="int" line="310"/>
                <scope line="311"/>
                <scope line="314"/>
                <declaration name="out" type="byte[]" line="317"/>
                <declaration name="buffer" type="byte[]" line="318"/>
                <scope line="319">
                    <scope line="321">
                        <scope line="322"/>
                    </scope>
                </scope>
                <scope line="328">
                    <declaration name="N" type="int" line="331"/>
                    <scope line="332">
                        <scope line="333">
                            <declaration name="T" type="int" line="334"/>
                            <scope line="336">
                                <declaration name="v" type="byte" line="337"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="345">
                        <scope line="346"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>