<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.security"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <class name="PBEWithMD5AndTripleDESCipher" line="7">
            <extends class="CipherSpi"/>
            <javadoc line="7">
                This class implements a proprietary password-based encryption algorithm.
                  It is based on password-based encryption as defined by the PKCS #5
                  standard, except that is uses triple DES instead of DES.
                  Here&apos;s how this algorithm works:
                  1. Create random salt and split it in two halves. If the two halves are
                  identical, invert one of them.
                  2. Concatenate password with each of the halves.
                  3. Digest each concatenation with c iterations, where c is the
                  iterationCount. Concatenate the output from each digest round with the
                  password, and use the result as the input to the next digest operation.
                  The digest algorithm is MD5.
                  4. After c iterations, use the 2 resulting digests as follows:
                  The 16 bytes of the first digest and the 1st 8 bytes of the 2nd digest
                  form the triple DES key, and the last 8 bytes of the 2nd digest form the
                  IV.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    javax.crypto.Cipher                    
                </see>
            </javadoc>
            <declaration name="core" type="PBECipherCore" line="27"/>
            <javadoc line="28">
                Creates an instance of this cipher, and initializes its mode (CBC) and
                  padding (PKCS5).                
                <exception>
                    NoSuchAlgorithmException if the required cipher mode (CBC) is
                      unavailable                    
                </exception>
                <exception>
                    NoSuchPaddingException if the required padding mechanism
                      (PKCS5Padding) is unavailable                    
                </exception>
            </javadoc>
            <method name="PBEWithMD5AndTripleDESCipher" type="constructor" line="36"/>
            <javadoc line="39">
                Sets the mode of this cipher. This algorithm can only be run in CBC
                  mode.                
                <param>
                    mode the cipher mode                    
                </param>
                <exception>
                    NoSuchAlgorithmException if the requested cipher mode is
                      invalid                    
                </exception>
            </javadoc>
            <method name="engineSetMode" type="void" line="46">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <scope line="47"/>
            </method>
            <javadoc line="51">
                Sets the padding mechanism of this cipher. This algorithm only uses
                  PKCS #5 padding.                
                <param>
                    padding the padding mechanism                    
                </param>
                <exception>
                    NoSuchPaddingException if the requested padding mechanism
                      is invalid                    
                </exception>
            </javadoc>
            <method name="engineSetPadding" type="void" line="58">
                <params>
                    <param name="paddingScheme" type="String"/>
                </params>
                <scope line="59"/>
            </method>
            <javadoc line="63">
                Returns the block size (in bytes).                
                <return>
                    the block size (in bytes)                    
                </return>
            </javadoc>
            <method name="engineGetBlockSize" type="int" line="67"/>
            <javadoc line="70">
                Returns the length in bytes that an output buffer would need to be in
                  order to hold the result of the next &lt;code&gt;update&lt;/code&gt; or
                  &lt;code&gt;doFinal&lt;/code&gt; operation, given the input length
                  &lt;code&gt;inputLen&lt;/code&gt; (in bytes).
                  &lt;p&gt;This call takes into account any unprocessed (buffered) data from a
                  previous &lt;code&gt;update&lt;/code&gt; call, and padding.
                  &lt;p&gt;The actual output length of the next &lt;code&gt;update&lt;/code&gt; or
                  &lt;code&gt;doFinal&lt;/code&gt; call may be smaller than the length returned by
                  this method.                
                <param>
                    inputLen the input length (in bytes)                    
                </param>
                <return>
                    the required output buffer size (in bytes)                    
                </return>
            </javadoc>
            <method name="engineGetOutputSize" type="int" line="83">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <javadoc line="86">
                Returns the initialization vector (IV) in a new buffer.
                  &lt;p&gt; This is useful in the case where a random IV has been created
                  (see &lt;a href = &quot;#init&quot;&gt;init&lt;/a&gt;),
                  or in the context of password-based encryption or
                  decryption, where the IV is derived from a user-supplied password.                
                <return>
                    the initialization vector in a new buffer, or null if the
                      underlying algorithm does not use an IV, or if the IV has not yet
                      been set.                    
                </return>
            </javadoc>
            <method name="engineGetIV" type="byte[]" line="96"/>
            <javadoc line="99">
                Returns the parameters used with this cipher.
                  &lt;p&gt;The returned parameters may be the same that were used to initialize
                  this cipher, or may contain the default set of parameters or a set of
                  randomly generated parameters used by the underlying cipher
                  implementation (provided that the underlying cipher implementation
                  uses a default set of parameters or creates new parameters if it needs
                  parameters but was not initialized with any).                
                <return>
                    the parameters used with this cipher, or null if this cipher
                      does not use any parameters.                    
                </return>
            </javadoc>
            <method name="engineGetParameters" type="AlgorithmParameters" line="110"/>
            <javadoc line="113">
                Initializes this cipher with a key and a source
                  of randomness.
                  The cipher is initialized for one of the following four operations:
                  encryption, decryption, key wrapping or key unwrapping, depending on
                  the value of &lt;code&gt;opmode&lt;/code&gt;.
                  &lt;p&gt;If this cipher (including its underlying feedback or padding scheme)
                  requires any random bytes, it will get them from &lt;code&gt;random&lt;/code&gt;.                
                <param>
                    opmode the operation mode of this cipher (this is one of
                      the following:
                      &lt;code&gt;ENCRYPT_MODE&lt;/code&gt;, &lt;code&gt;DECRYPT_MODE&lt;/code&gt;),
                      &lt;code&gt;WRAP_MODE&lt;/code&gt; or &lt;code&gt;UNWRAP_MODE&lt;/code&gt;)                    
                </param>
                <param>
                    key the encryption key                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this cipher                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="130">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="131"/>
                <scope line="134">
                    <declaration name="ike" type="InvalidKeyException" line="135"/>
                </scope>
            </method>
            <javadoc line="140">
                Initializes this cipher with a key, a set of
                  algorithm parameters, and a source of randomness.
                  The cipher is initialized for encryption or decryption, depending on
                  the value of &lt;code&gt;opmode&lt;/code&gt;.
                  &lt;p&gt;If this cipher (including its underlying feedback or padding scheme)
                  requires any random bytes, it will get them from &lt;code&gt;random&lt;/code&gt;.                
                <param>
                    opmode the operation mode of this cipher (this is either
                      &lt;code&gt;ENCRYPT_MODE&lt;/code&gt; or &lt;code&gt;DECRYPT_MODE&lt;/code&gt;)                    
                </param>
                <param>
                    key the encryption key                    
                </param>
                <param>
                    params the algorithm parameters                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this cipher                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given algorithm
                      parameters are inappropriate for this cipher                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="157">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <method name="engineInit" type="void" line="160">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="163">
                Continues a multiple-part encryption or decryption operation
                  (depending on how this cipher was initialized), processing another data
                  part.
                  &lt;p&gt;The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt;
                  buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt;, are processed, and the
                  result is stored in a new buffer.                
                <param>
                    input the input buffer                    
                </param>
                <param>
                    inputOffset the offset in &lt;code&gt;input&lt;/code&gt; where the input
                      starts                    
                </param>
                <param>
                    inputLen the input length                    
                </param>
                <return>
                    the new buffer with the result                    
                </return>
            </javadoc>
            <method name="engineUpdate" type="byte[]" line="176">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <javadoc line="179">
                Continues a multiple-part encryption or decryption operation
                  (depending on how this cipher was initialized), processing another data
                  part.
                  &lt;p&gt;The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt;
                  buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt;, are processed, and the
                  result is stored in the &lt;code&gt;output&lt;/code&gt; buffer, starting at
                  &lt;code&gt;outputOffset&lt;/code&gt;.                
                <param>
                    input the input buffer                    
                </param>
                <param>
                    inputOffset the offset in &lt;code&gt;input&lt;/code&gt; where the input
                      starts                    
                </param>
                <param>
                    inputLen the input length                    
                </param>
                <param>
                    output the buffer for the result                    
                </param>
                <param>
                    outputOffset the offset in &lt;code&gt;output&lt;/code&gt; where the result
                      is stored                    
                </param>
                <return>
                    the number of bytes stored in &lt;code&gt;output&lt;/code&gt;                    
                </return>
                <exception>
                    ShortBufferException if the given output buffer is too small
                      to hold the result                    
                </exception>
            </javadoc>
            <method name="engineUpdate" type="int" line="198">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                    <param name="output" type="byte[]"/>
                    <param name="outputOffset" type="int"/>
                </params>
            </method>
            <javadoc line="201">
                Encrypts or decrypts data in a single-part operation,
                  or finishes a multiple-part operation.
                  The data is encrypted or decrypted, depending on how this cipher was
                  initialized.
                  &lt;p&gt;The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt;
                  buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt;, and any input bytes that
                  may have been buffered during a previous &lt;code&gt;update&lt;/code&gt; operation,
                  are processed, with padding (if requested) being applied.
                  The result is stored in a new buffer.
                  &lt;p&gt;The cipher is reset to its initial state (uninitialized) after this
                  call.                
                <param>
                    input the input buffer                    
                </param>
                <param>
                    inputOffset the offset in &lt;code&gt;input&lt;/code&gt; where the input
                      starts                    
                </param>
                <param>
                    inputLen the input length                    
                </param>
                <return>
                    the new buffer with the result                    
                </return>
                <exception>
                    IllegalBlockSizeException if this cipher is a block cipher,
                      no padding has been requested (only in encryption mode), and the total
                      input length of the data processed by this cipher is not a multiple of
                      block size                    
                </exception>
                <exception>
                    BadPaddingException if decrypting and padding is choosen,
                      but the last input data does not have proper padding bytes.                    
                </exception>
            </javadoc>
            <method name="engineDoFinal" type="byte[]" line="225">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <javadoc line="228">
                Encrypts or decrypts data in a single-part operation,
                  or finishes a multiple-part operation.
                  The data is encrypted or decrypted, depending on how this cipher was
                  initialized.
                  &lt;p&gt;The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt;
                  buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt;, and any input bytes that
                  may have been buffered during a previous &lt;code&gt;update&lt;/code&gt; operation,
                  are processed, with padding (if requested) being applied.
                  The result is stored in the &lt;code&gt;output&lt;/code&gt; buffer, starting at
                  &lt;code&gt;outputOffset&lt;/code&gt;.
                  &lt;p&gt;The cipher is reset to its initial state (uninitialized) after this
                  call.                
                <param>
                    input the input buffer                    
                </param>
                <param>
                    inputOffset the offset in &lt;code&gt;input&lt;/code&gt; where the input
                      starts                    
                </param>
                <param>
                    inputLen the input length                    
                </param>
                <param>
                    output the buffer for the result                    
                </param>
                <param>
                    outputOffset the offset in &lt;code&gt;output&lt;/code&gt; where the result
                      is stored                    
                </param>
                <return>
                    the number of bytes stored in &lt;code&gt;output&lt;/code&gt;                    
                </return>
                <exception>
                    IllegalBlockSizeException if this cipher is a block cipher,
                      no padding has been requested (only in encryption mode), and the total
                      input length of the data processed by this cipher is not a multiple of
                      block size                    
                </exception>
                <exception>
                    ShortBufferException if the given output buffer is too small
                      to hold the result                    
                </exception>
                <exception>
                    BadPaddingException if decrypting and padding is choosen,
                      but the last input data does not have proper padding bytes.                    
                </exception>
            </javadoc>
            <method name="engineDoFinal" type="int" line="258">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                    <param name="output" type="byte[]"/>
                    <param name="outputOffset" type="int"/>
                </params>
            </method>
            <javadoc line="261">
                Returns the key size of the given key object.                
                <param>
                    key the key object.                    
                </param>
                <return>
                    the key size of the given key object.                    
                </return>
                <exception>
                    InvalidKeyException if &lt;code&gt;key&lt;/code&gt; is invalid.                    
                </exception>
            </javadoc>
            <method name="engineGetKeySize" type="int" line="267">
                <params>
                    <param name="key" type="Key"/>
                </params>
            </method>
            <javadoc line="270">
                Wrap a key.                
                <param>
                    key the key to be wrapped.                    
                </param>
                <return>
                    the wrapped key.                    
                </return>
                <exception>
                    IllegalBlockSizeException if this cipher is a block
                      cipher, no padding has been requested, and the length of the
                      encoding of the key to be wrapped is not a
                      multiple of the block size.                    
                </exception>
                <exception>
                    InvalidKeyException if it is impossible or unsafe to
                      wrap the key with this cipher (e.g., a hardware protected key is
                      being passed to a software only cipher).                    
                </exception>
            </javadoc>
            <method name="engineWrap" type="byte[]" line="282">
                <params>
                    <param name="key" type="Key"/>
                </params>
            </method>
            <javadoc line="285">
                Unwrap a previously wrapped key.                
                <param>
                    wrappedKey the key to be unwrapped.                    
                </param>
                <param>
                    wrappedKeyAlgorithm the algorithm the wrapped key is for.                    
                </param>
                <param>
                    wrappedKeyType the type of the wrapped key.
                      This is one of &lt;code&gt;Cipher.SECRET_KEY&lt;/code&gt;,
                      &lt;code&gt;Cipher.PRIVATE_KEY&lt;/code&gt;, or &lt;code&gt;Cipher.PUBLIC_KEY&lt;/code&gt;.                    
                </param>
                <return>
                    the unwrapped key.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no installed providers
                      can create keys of type &lt;code&gt;wrappedKeyType&lt;/code&gt; for the
                      &lt;code&gt;wrappedKeyAlgorithm&lt;/code&gt;.                    
                </exception>
                <exception>
                    InvalidKeyException if &lt;code&gt;wrappedKey&lt;/code&gt; does not
                      represent a wrapped key of type &lt;code&gt;wrappedKeyType&lt;/code&gt; for
                      the &lt;code&gt;wrappedKeyAlgorithm&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="engineUnwrap" type="Key" line="300">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="wrappedKeyAlgorithm" type="String"/>
                    <param name="wrappedKeyType" type="int"/>
                </params>
            </method>
        </class>
    </source>