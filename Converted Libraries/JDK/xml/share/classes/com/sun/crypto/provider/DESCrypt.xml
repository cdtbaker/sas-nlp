<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.InvalidKeyException"/>
        <class name="DESCrypt" line="30">
            <extends class="SymmetricCipher"/>
            <comment line="284">
                Initial Permutation                
            </comment>
            <comment line="511">
                the encryption key array after expansion and permutation                
            </comment>
            <comment line="516">
                Are we encrypting or decrypting?                
            </comment>
            <implements interface="DESConstants"/>
            <javadoc line="30">
                This is the internal DES class responsible for encryption and
                  decryption of a byte array of size &lt;code&gt;DES_BLOCK_SIZE&lt;/code&gt;.                
                <author>
                    Gigi Ankeny                    
                </author>
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    DESConstants                    
                </see>
                <see>
                    DESCipher                    
                </see>
            </javadoc>
            <declaration name="s0p" type="int" line="43"/>
            <declaration name="s1p" type="int" line="59"/>
            <declaration name="s2p" type="int" line="75"/>
            <declaration name="s3p" type="int" line="91"/>
            <declaration name="s4p" type="int" line="107"/>
            <declaration name="s5p" type="int" line="123"/>
            <declaration name="s6p" type="int" line="139"/>
            <declaration name="s7p" type="int" line="155"/>
            <declaration name="permRight0" type="int" line="171"/>
            <declaration name="permLeft1" type="int" line="178"/>
            <declaration name="permRight2" type="int" line="185"/>
            <declaration name="permLeft3" type="int" line="192"/>
            <declaration name="permRight4" type="int" line="199"/>
            <declaration name="permLeft5" type="int" line="206"/>
            <declaration name="permRight6" type="int" line="213"/>
            <declaration name="permLeft7" type="int" line="220"/>
            <declaration name="permRight8" type="int" line="227"/>
            <declaration name="permLeft9" type="int" line="234"/>
            <declaration name="permRightA" type="int" line="241"/>
            <declaration name="permLeftB" type="int" line="248"/>
            <declaration name="permRightC" type="int" line="255"/>
            <declaration name="permLeftD" type="int" line="262"/>
            <declaration name="permRightE" type="int" line="269"/>
            <declaration name="permLeftF" type="int" line="276"/>
            <declaration name="initPermLeft0" type="int" line="286"/>
            <declaration name="initPermRight0" type="int" line="293"/>
            <declaration name="initPermLeft1" type="int" line="300"/>
            <declaration name="initPermRight1" type="int" line="307"/>
            <declaration name="initPermLeft2" type="int" line="314"/>
            <declaration name="initPermRight2" type="int" line="321"/>
            <declaration name="initPermLeft3" type="int" line="328"/>
            <declaration name="initPermRight3" type="int" line="335"/>
            <declaration name="initPermLeft4" type="int" line="342"/>
            <declaration name="initPermRight4" type="int" line="349"/>
            <declaration name="initPermLeft5" type="int" line="356"/>
            <declaration name="initPermRight5" type="int" line="363"/>
            <declaration name="initPermLeft6" type="int" line="370"/>
            <declaration name="initPermRight6" type="int" line="377"/>
            <declaration name="initPermLeft7" type="int" line="384"/>
            <declaration name="initPermRight7" type="int" line="391"/>
            <declaration name="initPermLeft8" type="int" line="398"/>
            <declaration name="initPermRight8" type="int" line="405"/>
            <declaration name="initPermLeft9" type="int" line="412"/>
            <declaration name="initPermRight9" type="int" line="419"/>
            <declaration name="initPermLeftA" type="int" line="426"/>
            <declaration name="initPermRightA" type="int" line="433"/>
            <declaration name="initPermLeftB" type="int" line="440"/>
            <declaration name="initPermRightB" type="int" line="447"/>
            <declaration name="initPermLeftC" type="int" line="454"/>
            <declaration name="initPermRightC" type="int" line="461"/>
            <declaration name="initPermLeftD" type="int" line="468"/>
            <declaration name="initPermRightD" type="int" line="475"/>
            <declaration name="initPermLeftE" type="int" line="482"/>
            <declaration name="initPermRightE" type="int" line="489"/>
            <declaration name="initPermLeftF" type="int" line="496"/>
            <declaration name="initPermRightF" type="int" line="503"/>
            <declaration name="expandedKey" type="byte[]" line="513"/>
            <declaration name="decrypting" type="boolean" line="518"/>
            <javadoc line="520">
                Returns this cipher&apos;s block size.                
                <return>
                    this cipher's block size                    
                </return>
            </javadoc>
            <method name="getBlockSize" type="int" line="525"/>
            <method name="init" type="void" line="530">
                <params>
                    <param name="decrypting" type="boolean"/>
                    <param name="algorithm" type="String"/>
                    <param name="rawKey" type="byte[]"/>
                </params>
                <scope line="532"/>
                <scope line="535"/>
            </method>
            <javadoc line="541">
                Performs encryption operation.
                  &lt;p&gt;The input plain text &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(plainOffset + len - 1)&lt;/code&gt;, is encrypted.
                  The result is stored in &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt;.
                  &lt;p&gt;The subclass that implements Cipher should ensure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.                
                <param>
                    plain the buffer with the input data to be encrypted                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
                <param>
                    plainLen the length of the input data                    
                </param>
                <param>
                    cipher the buffer for the result                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipher</code>                    
                </param>
                <exception>
                    IllegalBlockSizeException if the input length is different
                      from the cipher's block size                    
                </exception>
            </javadoc>
            <method name="encryptBlock" type="void" line="564">
                <params>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                </params>
            </method>
            <javadoc line="568">
                Performs decryption operation.
                  &lt;p&gt;The input cipher text &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(cipherOffset + len - 1)&lt;/code&gt;, is decrypted.
                  The result is stored in &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt;.
                  &lt;p&gt;The subclass that implements Cipher should ensure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.                
                <param>
                    cipher the buffer with the input data to be decrypted                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipherOffset</code>                    
                </param>
                <param>
                    cipherLen the length of the input data                    
                </param>
                <param>
                    plain the buffer for the result                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
                <exception>
                    IllegalBlockSizeException if the input length is different
                      from the cipher's block size                    
                </exception>
            </javadoc>
            <method name="decryptBlock" type="void" line="591">
                <params>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                </params>
            </method>
            <method name="cipherBlock" type="void" line="596">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                </params>
                <comment line="618">
                    make the first and last bit adjacent                    
                </comment>
                <comment line="619">
                    move the first bit to the last                    
                </comment>
                <comment line="622">
                    mangler function:                    
                </comment>
                <comment line="623">
                    every 6 bit is fed into the sbox, which                    
                </comment>
                <comment line="624">
                    produces 4-bit output                    
                </comment>
                <comment line="633">
                    make the last sbox input the last bit from right[0]                    
                </comment>
                <declaration name="key" type="byte" line="597"/>
                <declaration name="temp" type="int" line="598"/>
                <declaration name="i" type="int" line="599"/>
                <declaration name="offset" type="int" line="600"/>
                <declaration name="left" type="int" line="601"/>
                <scope line="608"/>
                <scope line="612"/>
                <scope line="617"/>
            </method>
            <method name="perm" type="void" line="649">
                <params>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                    <param name="out" type="byte"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="low" type="int" line="650"/>
            </method>
            <method name="initialPermutationLeft" type="int" line="698">
                <params>
                    <param name="block" type="byte"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="l" type="int" line="699"/>
            </method>
            <method name="initialPermutationRight" type="int" line="720">
                <params>
                    <param name="block" type="byte"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="l" type="int" line="721"/>
            </method>
            <method name="expandKey" type="void" line="742">
                <params>
                    <param name="key" type="byte"/>
                </params>
                <declaration name="octet" type="int" line="743"/>
                <declaration name="ek" type="byte" line="744"/>
                <scope line="747"/>
                <scope line="754"/>
                <scope line="761"/>
                <scope line="767"/>
                <scope line="774"/>
                <scope line="781"/>
                <scope line="788"/>
                <scope line="796"/>
                <scope line="803"/>
                <scope line="810"/>
                <scope line="817"/>
                <scope line="824"/>
                <scope line="831"/>
                <scope line="838"/>
                <scope line="846"/>
                <scope line="853"/>
                <scope line="860"/>
                <scope line="867"/>
                <scope line="874"/>
                <scope line="881"/>
                <scope line="888"/>
                <scope line="896"/>
                <scope line="903"/>
                <scope line="910"/>
                <scope line="917"/>
                <scope line="924"/>
                <scope line="931"/>
                <scope line="938"/>
                <scope line="946"/>
                <scope line="953"/>
                <scope line="960"/>
                <scope line="967"/>
                <scope line="974"/>
                <scope line="981"/>
                <scope line="988"/>
                <scope line="996"/>
                <scope line="1003"/>
                <scope line="1009"/>
                <scope line="1016"/>
                <scope line="1023"/>
                <scope line="1030"/>
                <scope line="1037"/>
                <scope line="1045"/>
                <scope line="1052"/>
                <scope line="1059"/>
                <scope line="1066"/>
                <scope line="1072"/>
                <scope line="1079"/>
                <scope line="1086"/>
                <scope line="1094"/>
                <scope line="1101"/>
                <scope line="1107"/>
                <scope line="1114"/>
                <scope line="1121"/>
                <scope line="1128"/>
                <scope line="1135"/>
            </method>
        </class>
    </source>