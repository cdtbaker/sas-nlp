<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.InvalidKeyException"/>
        <class name="DESCrypt" line="3">
            <extends class="SymmetricCipher"/>
            <implements interface="DESConstants"/>
            <javadoc line="3">
                This is the internal DES class responsible for encryption and
                  decryption of a byte array of size &lt;code&gt;DES_BLOCK_SIZE&lt;/code&gt;.                
                <author>
                    Gigi Ankeny                    
                </author>
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    DESConstants                    
                </see>
                <see>
                    DESCipher                    
                </see>
            </javadoc>
            <declaration name="s0p" type="int" line="12"/>
            <declaration name="s1p" type="int" line="13"/>
            <declaration name="s2p" type="int" line="14"/>
            <declaration name="s3p" type="int" line="15"/>
            <declaration name="s4p" type="int" line="16"/>
            <declaration name="s5p" type="int" line="17"/>
            <declaration name="s6p" type="int" line="18"/>
            <declaration name="s7p" type="int" line="19"/>
            <declaration name="permRight0" type="int" line="20"/>
            <declaration name="permLeft1" type="int" line="21"/>
            <declaration name="permRight2" type="int" line="22"/>
            <declaration name="permLeft3" type="int" line="23"/>
            <declaration name="permRight4" type="int" line="24"/>
            <declaration name="permLeft5" type="int" line="25"/>
            <declaration name="permRight6" type="int" line="26"/>
            <declaration name="permLeft7" type="int" line="27"/>
            <declaration name="permRight8" type="int" line="28"/>
            <declaration name="permLeft9" type="int" line="29"/>
            <declaration name="permRightA" type="int" line="30"/>
            <declaration name="permLeftB" type="int" line="31"/>
            <declaration name="permRightC" type="int" line="32"/>
            <declaration name="permLeftD" type="int" line="33"/>
            <declaration name="permRightE" type="int" line="34"/>
            <declaration name="permLeftF" type="int" line="35"/>
            <declaration name="initPermLeft0" type="int" line="36"/>
            <declaration name="initPermRight0" type="int" line="37"/>
            <declaration name="initPermLeft1" type="int" line="38"/>
            <declaration name="initPermRight1" type="int" line="39"/>
            <declaration name="initPermLeft2" type="int" line="40"/>
            <declaration name="initPermRight2" type="int" line="41"/>
            <declaration name="initPermLeft3" type="int" line="42"/>
            <declaration name="initPermRight3" type="int" line="43"/>
            <declaration name="initPermLeft4" type="int" line="44"/>
            <declaration name="initPermRight4" type="int" line="45"/>
            <declaration name="initPermLeft5" type="int" line="46"/>
            <declaration name="initPermRight5" type="int" line="47"/>
            <declaration name="initPermLeft6" type="int" line="48"/>
            <declaration name="initPermRight6" type="int" line="49"/>
            <declaration name="initPermLeft7" type="int" line="50"/>
            <declaration name="initPermRight7" type="int" line="51"/>
            <declaration name="initPermLeft8" type="int" line="52"/>
            <declaration name="initPermRight8" type="int" line="53"/>
            <declaration name="initPermLeft9" type="int" line="54"/>
            <declaration name="initPermRight9" type="int" line="55"/>
            <declaration name="initPermLeftA" type="int" line="56"/>
            <declaration name="initPermRightA" type="int" line="57"/>
            <declaration name="initPermLeftB" type="int" line="58"/>
            <declaration name="initPermRightB" type="int" line="59"/>
            <declaration name="initPermLeftC" type="int" line="60"/>
            <declaration name="initPermRightC" type="int" line="61"/>
            <declaration name="initPermLeftD" type="int" line="62"/>
            <declaration name="initPermRightD" type="int" line="63"/>
            <declaration name="initPermLeftE" type="int" line="64"/>
            <declaration name="initPermRightE" type="int" line="65"/>
            <declaration name="initPermLeftF" type="int" line="66"/>
            <declaration name="initPermRightF" type="int" line="67"/>
            <declaration name="expandedKey" type="byte[]" line="68"/>
            <declaration name="decrypting" type="boolean" line="69"/>
            <javadoc line="70">
                Returns this cipher&apos;s block size.                
                <return>
                    this cipher's block size                    
                </return>
            </javadoc>
            <method name="getBlockSize" type="int" line="74"/>
            <method name="init" type="void" line="77">
                <params>
                    <param name="decrypting" type="boolean"/>
                    <param name="algorithm" type="String"/>
                    <param name="rawKey" type="byte[]"/>
                </params>
                <scope line="79"/>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                Performs encryption operation.
                  &lt;p&gt;The input plain text &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(plainOffset + len - 1)&lt;/code&gt;, is encrypted.
                  The result is stored in &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt;.
                  &lt;p&gt;The subclass that implements Cipher should ensure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.                
                <param>
                    plain the buffer with the input data to be encrypted                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
                <param>
                    plainLen the length of the input data                    
                </param>
                <param>
                    cipher the buffer for the result                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipher</code>                    
                </param>
                <exception>
                    IllegalBlockSizeException if the input length is different
                      from the cipher's block size                    
                </exception>
            </javadoc>
            <method name="encryptBlock" type="void" line="104">
                <params>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                </params>
            </method>
            <javadoc line="107">
                Performs decryption operation.
                  &lt;p&gt;The input cipher text &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(cipherOffset + len - 1)&lt;/code&gt;, is decrypted.
                  The result is stored in &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt;.
                  &lt;p&gt;The subclass that implements Cipher should ensure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.                
                <param>
                    cipher the buffer with the input data to be decrypted                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipherOffset</code>                    
                </param>
                <param>
                    cipherLen the length of the input data                    
                </param>
                <param>
                    plain the buffer for the result                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
                <exception>
                    IllegalBlockSizeException if the input length is different
                      from the cipher's block size                    
                </exception>
            </javadoc>
            <method name="decryptBlock" type="void" line="124">
                <params>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                </params>
            </method>
            <method name="cipherBlock" type="void" line="127">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                </params>
                <declaration name="key" type="byte" line="128"/>
                <declaration name="temp" type="int" line="129"/>
                <declaration name="i" type="int" line="130"/>
                <declaration name="offset" type="int" line="131"/>
                <declaration name="left" type="int" line="132"/>
                <scope line="136"/>
                <scope line="140"/>
                <scope line="144"/>
            </method>
            <method name="perm" type="void" line="159">
                <params>
                    <param name="left" type="int"/>
                    <param name="right" type="int"/>
                    <param name="out" type="byte"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="low" type="int" line="160"/>
            </method>
            <method name="initialPermutationLeft" type="int" line="202">
                <params>
                    <param name="block" type="byte"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="l" type="int" line="203"/>
            </method>
            <method name="initialPermutationRight" type="int" line="222">
                <params>
                    <param name="block" type="byte"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="l" type="int" line="223"/>
            </method>
            <method name="expandKey" type="void" line="242">
                <params>
                    <param name="key" type="byte"/>
                </params>
                <declaration name="octet" type="int" line="243"/>
                <declaration name="ek" type="byte" line="244"/>
                <scope line="246"/>
                <scope line="262"/>
                <scope line="279"/>
                <scope line="293"/>
                <scope line="309"/>
                <scope line="325"/>
                <scope line="341"/>
                <scope line="357"/>
                <scope line="373"/>
                <scope line="388"/>
                <scope line="404"/>
                <scope line="419"/>
                <scope line="435"/>
                <scope line="450"/>
                <scope line="467"/>
                <scope line="483"/>
                <scope line="500"/>
                <scope line="515"/>
                <scope line="531"/>
                <scope line="547"/>
                <scope line="563"/>
                <scope line="579"/>
                <scope line="595"/>
                <scope line="610"/>
                <scope line="626"/>
                <scope line="641"/>
                <scope line="656"/>
                <scope line="672"/>
                <scope line="690"/>
                <scope line="705"/>
                <scope line="722"/>
                <scope line="738"/>
                <scope line="753"/>
                <scope line="770"/>
                <scope line="785"/>
                <scope line="801"/>
                <scope line="818"/>
                <scope line="832"/>
                <scope line="847"/>
                <scope line="864"/>
                <scope line="879"/>
                <scope line="895"/>
                <scope line="913"/>
                <scope line="928"/>
                <scope line="945"/>
                <scope line="961"/>
                <scope line="975"/>
                <scope line="992"/>
                <scope line="1007"/>
                <scope line="1023"/>
                <scope line="1040"/>
                <scope line="1054"/>
                <scope line="1069"/>
                <scope line="1086"/>
                <scope line="1101"/>
                <scope line="1117"/>
            </method>
        </class>
    </source>