<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io.ObjectStreamException"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.CharBuffer"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.util.Arrays"/>
        <import package="java.security.KeyRep"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="javax.crypto.Mac"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec.PBEKeySpec"/>
        <class name="PBKDF2KeyImpl" line="42">
            <implements interface="javax.crypto.interfaces.PBEKey"/>
            <javadoc line="42">
                This class represents a PBE key derived using PBKDF2 defined
                  in PKCS#5 v2.0. meaning that
                  1) the password must consist of characters which will be converted
                  to bytes using UTF-8 character encoding.
                  2) salt, iteration count, and to be derived key length are supplied                
                <author>
                    Valerie Peng                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="54"/>
            <declaration name="passwd" type="char[]" line="56"/>
            <declaration name="salt" type="byte[]" line="57"/>
            <declaration name="iterCount" type="int" line="58"/>
            <declaration name="key" type="byte[]" line="59"/>
            <declaration name="prf" type="Mac" line="61"/>
            <method name="getPasswordBytes" type="byte[]" line="63">
                <params>
                    <param name="passwd" type="char[]"/>
                </params>
                <declaration name="utf8" type="Charset" line="64"/>
                <declaration name="cb" type="CharBuffer" line="65"/>
                <declaration name="bb" type="ByteBuffer" line="66"/>
                <declaration name="len" type="int" line="68"/>
                <declaration name="passwdBytes" type="byte[]" line="69"/>
            </method>
            <javadoc line="75">
                Creates a PBE key from a given PBE key specification.                
                <param>
                    key the given PBE key specification                    
                </param>
            </javadoc>
            <method name="PBKDF2KeyImpl" type="constructor" line="81">
                <params>
                    <param name="keySpec" type="PBEKeySpec"/>
                    <param name="prfAlgo" type="String"/>
                </params>
                <comment line="85">
                    Should allow an empty password.                    
                </comment>
                <comment line="90">
                    Convert the password from char[] to byte[]                    
                </comment>
                <comment line="112">
                    not gonna happen; re-throw just in case                    
                </comment>
                <comment line="117">
                    Again, not gonna happen; re-throw just in case                    
                </comment>
                <declaration name="passwd" type="char[]" line="82"/>
                <scope line="83"/>
                <scope line="86"/>
                <declaration name="passwdBytes" type="byte[]" line="90"/>
                <scope line="93"/>
                <scope line="97"/>
                <scope line="99"/>
                <declaration name="keyLength" type="int" line="102"/>
                <scope line="103"/>
                <scope line="105"/>
                <scope line="108"/>
                <scope line="110">
                    <declaration name="ike" type="InvalidKeySpecException" line="112"/>
                </scope>
                <scope line="115">
                    <declaration name="ike" type="InvalidKeySpecException" line="117"/>
                </scope>
            </method>
            <method name="deriveKey" type="byte[]" line="125">
                <params>
                    <param name="prf" type="Mac"/>
                    <param name="password" type="byte[]"/>
                    <param name="salt" type="byte[]"/>
                    <param name="iterCount" type="int"/>
                    <param name="keyLengthInBit" type="int"/>
                </params>
                <comment line="131">
                    ceiling                    
                </comment>
                <comment line="132">
                    residue                    
                </comment>
                <comment line="135">
                    SecretKeySpec cannot be used, since password can be empty here.                    
                </comment>
                <comment line="180">
                    XOR the intermediate Ui&apos;s together.                    
                </comment>
                <declaration name="keyLength" type="int" line="126"/>
                <declaration name="key" type="byte[]" line="127"/>
                <scope line="128">
                    <declaration name="hlen" type="int" line="129"/>
                    <declaration name="intL" type="int" line="130"/>
                    <declaration name="intR" type="int" line="131"/>
                    <declaration name="ui" type="byte[]" line="132"/>
                    <declaration name="ti" type="byte[]" line="133"/>
                    <anonymous_class line="135">
                        <method name="getAlgorithm" type="String" line="137"/>
                        <method name="getFormat" type="String" line="141"/>
                        <method name="getEncoded" type="byte[]" line="145"/>
                        <method name="hashCode" type="int" line="149"/>
                        <method name="equals" type="boolean" line="154">
                            <params>
                                <param name="obj" type="Object"/>
                            </params>
                            <declaration name="sk" type="SecretKey" line="157"/>
                        </method>
                    </anonymous_class>
                    <declaration name="macKey" type="SecretKey" line="135"/>
                    <declaration name="ibytes" type="byte[]" line="165"/>
                    <scope line="166">
                        <scope line="176">
                            <scope line="180"/>
                        </scope>
                        <scope line="184"/>
                        <scope line="186"/>
                    </scope>
                </scope>
                <scope line="190"/>
            </method>
            <method name="getEncoded" type="byte[]" line="196"/>
            <method name="getAlgorithm" type="String" line="200"/>
            <method name="getIterationCount" type="int" line="204"/>
            <method name="getPassword" type="char[]" line="208"/>
            <method name="getSalt" type="byte[]" line="212"/>
            <method name="getFormat" type="String" line="216"/>
            <javadoc line="220">
                Calculates a hash code value for the object.
                  Objects that are equal will also have the same hashcode.                
            </javadoc>
            <method name="hashCode" type="int" line="224">
                <declaration name="retval" type="int" line="225"/>
                <scope line="226"/>
            </method>
            <method name="equals" type="boolean" line="232">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="SecretKey" line="239"/>
                <declaration name="thatEncoded" type="byte[]" line="245"/>
                <declaration name="ret" type="boolean" line="246"/>
            </method>
            <javadoc line="251">
                Replace the PBE key to be serialized.                
                <return>
                    the standard KeyRep object to be serialized                    
                </return>
                <throws>
                    ObjectStreamException if a new object representing
                      this PBE key could not be created                    
                </throws>
            </javadoc>
            <method name="writeReplace" type="Object" line="259"/>
            <javadoc line="264">
                Ensures that the password bytes of this key are
                  erased when there are no more references to it.                
            </javadoc>
            <method name="finalize" type="void" line="268">
                <scope line="269">
                    <scope line="270"/>
                    <scope line="274"/>
                </scope>
                <scope line="278"/>
            </method>
        </class>
    </source>