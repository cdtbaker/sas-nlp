<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io.ObjectStreamException"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.CharBuffer"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.util.Arrays"/>
        <import package="java.security.KeyRep"/>
        <import package="java.security.GeneralSecurityException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="javax.crypto.Mac"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec.PBEKeySpec"/>
        <class name="PBKDF2KeyImpl" line="15">
            <implements interface="javax.crypto.interfaces.PBEKey"/>
            <javadoc line="15">
                This class represents a PBE key derived using PBKDF2 defined
                  in PKCS#5 v2.0. meaning that
                  1) the password must consist of characters which will be converted
                  to bytes using UTF-8 character encoding.
                  2) salt, iteration count, and to be derived key length are supplied                
                <author>
                    Valerie Peng                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="24"/>
            <declaration name="passwd" type="char[]" line="25"/>
            <declaration name="salt" type="byte[]" line="26"/>
            <declaration name="iterCount" type="int" line="27"/>
            <declaration name="key" type="byte[]" line="28"/>
            <declaration name="prf" type="Mac" line="29"/>
            <method name="getPasswordBytes" type="byte[]" line="30">
                <params>
                    <param name="passwd" type="char[]"/>
                </params>
                <declaration name="utf8" type="Charset" line="31"/>
                <declaration name="cb" type="CharBuffer" line="32"/>
                <declaration name="bb" type="ByteBuffer" line="33"/>
                <declaration name="len" type="int" line="34"/>
                <declaration name="passwdBytes" type="byte[]" line="35"/>
            </method>
            <javadoc line="39">
                Creates a PBE key from a given PBE key specification.                
                <param>
                    key the given PBE key specification                    
                </param>
            </javadoc>
            <method name="PBKDF2KeyImpl" type="constructor" line="43">
                <params>
                    <param name="keySpec" type="PBEKeySpec"/>
                    <param name="prfAlgo" type="String"/>
                </params>
                <declaration name="passwd" type="char[]" line="44"/>
                <scope line="45"/>
                <scope line="48"/>
                <declaration name="passwdBytes" type="byte[]" line="51"/>
                <scope line="53"/>
                <scope line="57"/>
                <scope line="60"/>
                <declaration name="keyLength" type="int" line="63"/>
                <scope line="64"/>
                <scope line="67"/>
                <scope line="70"/>
                <scope line="73">
                    <declaration name="ike" type="InvalidKeySpecException" line="74"/>
                </scope>
                <scope line="78">
                    <declaration name="ike" type="InvalidKeySpecException" line="79"/>
                </scope>
            </method>
            <method name="deriveKey" type="byte[]" line="85">
                <params>
                    <param name="prf" type="Mac"/>
                    <param name="password" type="byte[]"/>
                    <param name="salt" type="byte[]"/>
                    <param name="iterCount" type="int"/>
                    <param name="keyLengthInBit" type="int"/>
                </params>
                <declaration name="keyLength" type="int" line="86"/>
                <declaration name="key" type="byte[]" line="87"/>
                <scope line="88">
                    <declaration name="hlen" type="int" line="89"/>
                    <declaration name="intL" type="int" line="90"/>
                    <declaration name="intR" type="int" line="91"/>
                    <declaration name="ui" type="byte[]" line="92"/>
                    <declaration name="ti" type="byte[]" line="93"/>
                    <anonymous_class line="94">
                        <method name="getAlgorithm" type="String" line="95"/>
                        <method name="getFormat" type="String" line="98"/>
                        <method name="getEncoded" type="byte[]" line="101"/>
                        <method name="hashCode" type="int" line="104"/>
                        <method name="equals" type="boolean" line="107">
                            <params>
                                <param name="obj" type="Object"/>
                            </params>
                            <declaration name="sk" type="SecretKey" line="110"/>
                        </method>
                    </anonymous_class>
                    <declaration name="macKey" type="SecretKey" line="94"/>
                    <declaration name="ibytes" type="byte[]" line="116"/>
                    <scope line="117">
                        <scope line="126">
                            <scope line="129"/>
                        </scope>
                        <scope line="133"/>
                        <scope line="136"/>
                    </scope>
                </scope>
                <scope line="141"/>
            </method>
            <method name="getEncoded" type="byte[]" line="146"/>
            <method name="getAlgorithm" type="String" line="149"/>
            <method name="getIterationCount" type="int" line="152"/>
            <method name="getPassword" type="char[]" line="155"/>
            <method name="getSalt" type="byte[]" line="158"/>
            <method name="getFormat" type="String" line="161"/>
            <javadoc line="164">
                Calculates a hash code value for the object.
                  Objects that are equal will also have the same hashcode.                
            </javadoc>
            <method name="hashCode" type="int" line="168">
                <declaration name="retval" type="int" line="169"/>
                <scope line="170"/>
            </method>
            <method name="equals" type="boolean" line="175">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="SecretKey" line="178"/>
                <declaration name="thatEncoded" type="byte[]" line="181"/>
                <declaration name="ret" type="boolean" line="182"/>
            </method>
            <javadoc line="186">
                Replace the PBE key to be serialized.                
                <return>
                    the standard KeyRep object to be serialized                    
                </return>
                <throws>
                    ObjectStreamException if a new object representing
                      this PBE key could not be created                    
                </throws>
            </javadoc>
            <method name="writeReplace" type="Object" line="192"/>
            <javadoc line="195">
                Ensures that the password bytes of this key are
                  erased when there are no more references to it.                
            </javadoc>
            <method name="finalize" type="void" line="199">
                <scope line="200">
                    <scope line="201"/>
                    <scope line="205"/>
                </scope>
                <scope line="210"/>
            </method>
        </class>
    </source>