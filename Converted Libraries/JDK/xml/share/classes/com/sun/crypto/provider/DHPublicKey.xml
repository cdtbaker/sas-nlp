<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.KeyRep"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.ProviderException"/>
        <import package="java.security.PublicKey"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec.DHParameterSpec"/>
        <import package="sun.security.util"/>
        <class name="DHPublicKey" line="12">
            <implements interface="PublicKey"/>
            <implements interface="javax.crypto.interfaces.DHPublicKey"/>
            <implements interface="Serializable"/>
            <javadoc line="12">
                A public key in X.509 format for the Diffie-Hellman key agreement algorithm.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    DHPrivateKey                    
                </see>
                <see>
                    java.security.KeyAgreement                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="19"/>
            <declaration name="y" type="BigInteger" line="20"/>
            <declaration name="key" type="byte[]" line="21"/>
            <declaration name="encodedKey" type="byte[]" line="22"/>
            <declaration name="p" type="BigInteger" line="23"/>
            <declaration name="g" type="BigInteger" line="24"/>
            <declaration name="l" type="int" line="25"/>
            <declaration name="DH_data" type="int" line="26"/>
            <javadoc line="27">
                Make a DH public key out of a public value &lt;code&gt;y&lt;/code&gt;, a prime
                  modulus &lt;code&gt;p&lt;/code&gt;, and a base generator &lt;code&gt;g&lt;/code&gt;.                
                <param>
                    y the public value                    
                </param>
                <param>
                    p the prime modulus                    
                </param>
                <param>
                    g the base generator                    
                </param>
                <exception>
                    InvalidKeyException if the key cannot be encoded                    
                </exception>
            </javadoc>
            <method name="DHPublicKey" type="constructor" line="35">
                <params>
                    <param name="y" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="38">
                Make a DH public key out of a public value &lt;code&gt;y&lt;/code&gt;, a prime
                  modulus &lt;code&gt;p&lt;/code&gt;, a base generator &lt;code&gt;g&lt;/code&gt;, and a
                  private-value length &lt;code&gt;l&lt;/code&gt;.                
                <param>
                    y the public value                    
                </param>
                <param>
                    p the prime modulus                    
                </param>
                <param>
                    g the base generator                    
                </param>
                <param>
                    l the private-value length                    
                </param>
                <exception>
                    ProviderException if the key cannot be encoded                    
                </exception>
            </javadoc>
            <method name="DHPublicKey" type="constructor" line="48">
                <params>
                    <param name="y" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                    <param name="l" type="int"/>
                </params>
                <scope line="53"/>
                <scope line="57"/>
            </method>
            <javadoc line="61">
                Make a DH public key from its DER encoding (X.509).                
                <param>
                    encodedKey the encoded key                    
                </param>
                <exception>
                    InvalidKeyException if the encoded key does not represent
                      a Diffie-Hellman public key                    
                </exception>
            </javadoc>
            <method name="DHPublicKey" type="constructor" line="67">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                </params>
                <declaration name="inStream" type="InputStream" line="68"/>
                <scope line="69">
                    <declaration name="derKeyVal" type="DerValue" line="70"/>
                    <scope line="71"/>
                    <declaration name="algid" type="DerValue" line="74"/>
                    <scope line="75"/>
                    <declaration name="derInStream" type="DerInputStream" line="78"/>
                    <declaration name="oid" type="ObjectIdentifier" line="79"/>
                    <scope line="80"/>
                    <scope line="83"/>
                    <declaration name="params" type="DerValue" line="86"/>
                    <scope line="87"/>
                    <scope line="90"/>
                    <scope line="96"/>
                    <scope line="99"/>
                    <scope line="104"/>
                </scope>
                <scope line="109"/>
                <scope line="112"/>
            </method>
            <javadoc line="116">
                Returns the encoding format of this key: &quot;X.509&quot;                
            </javadoc>
            <method name="getFormat" type="String" line="119"/>
            <javadoc line="122">
                Returns the name of the algorithm associated with this key: &quot;DH&quot;                
            </javadoc>
            <method name="getAlgorithm" type="String" line="125"/>
            <javadoc line="128">
                Get the encoding of the key.                
            </javadoc>
            <method name="getEncoded" type="byte[]" line="131">
                <scope line="132">
                    <scope line="133">
                        <declaration name="algid" type="DerOutputStream" line="134"/>
                        <declaration name="params" type="DerOutputStream" line="136"/>
                        <declaration name="paramSequence" type="DerValue" line="140"/>
                        <declaration name="tmpDerKey" type="DerOutputStream" line="142"/>
                        <declaration name="derKey" type="DerOutputStream" line="145"/>
                    </scope>
                    <scope line="149"/>
                </scope>
            </method>
            <javadoc line="155">
                Returns the public value, &lt;code&gt;y&lt;/code&gt;.                
                <return>
                    the public value, <code>y</code>                    
                </return>
            </javadoc>
            <method name="getY" type="BigInteger" line="159"/>
            <javadoc line="162">
                Returns the key parameters.                
                <return>
                    the key parameters                    
                </return>
            </javadoc>
            <method name="getParams" type="DHParameterSpec" line="166"/>
            <method name="toString" type="String" line="170">
                <declaration name="LINE_SEP" type="String" line="171"/>
                <declaration name="strbuf" type="StringBuffer" line="172"/>
            </method>
            <method name="parseKeyBits" type="void" line="176">
                <scope line="177">
                    <declaration name="in" type="DerInputStream" line="178"/>
                </scope>
                <scope line="181"/>
            </method>
            <javadoc line="185">
                Calculates a hash code value for the object.
                  Objects that are equal will also have the same hashcode.                
            </javadoc>
            <method name="hashCode" type="int" line="189">
                <declaration name="retval" type="int" line="190"/>
                <declaration name="enc" type="byte[]" line="191"/>
                <scope line="192"/>
            </method>
            <method name="equals" type="boolean" line="197">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="thisEncoded" type="byte[]" line="200"/>
                <declaration name="thatEncoded" type="byte[]" line="201"/>
            </method>
            <javadoc line="204">
                Replace the DH public key to be serialized.                
                <return>
                    the standard KeyRep object to be serialized                    
                </return>
                <throws>
                    java.io.ObjectStreamException if a new object representing
                      this DH public key could not be created                    
                </throws>
            </javadoc>
            <method name="writeReplace" type="Object" line="210"/>
        </class>
    </source>