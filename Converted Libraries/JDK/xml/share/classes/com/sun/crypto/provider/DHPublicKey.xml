<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.KeyRep"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.ProviderException"/>
        <import package="java.security.PublicKey"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec.DHParameterSpec"/>
        <import package="sun.security.util"/>
        <class name="DHPublicKey" line="40">
            <comment line="55">
                the public key                
            </comment>
            <comment line="58">
                the key bytes, without the algorithm information                
            </comment>
            <comment line="61">
                the encoded key                
            </comment>
            <comment line="64">
                the prime modulus                
            </comment>
            <comment line="67">
                the base generator                
            </comment>
            <comment line="70">
                the private-value length                
            </comment>
            <implements interface="PublicKey"/>
            <implements interface="javax.crypto.interfaces.DHPublicKey"/>
            <implements interface="Serializable"/>
            <javadoc line="40">
                A public key in X.509 format for the Diffie-Hellman key agreement algorithm.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    DHPrivateKey                    
                </see>
                <see>
                    java.security.KeyAgreement                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="52"/>
            <declaration name="y" type="BigInteger" line="55"/>
            <declaration name="key" type="byte[]" line="58"/>
            <declaration name="encodedKey" type="byte[]" line="61"/>
            <declaration name="p" type="BigInteger" line="64"/>
            <declaration name="g" type="BigInteger" line="67"/>
            <declaration name="l" type="int" line="70"/>
            <declaration name="DH_data" type="int" line="72"/>
            <javadoc line="74">
                Make a DH public key out of a public value &lt;code&gt;y&lt;/code&gt;, a prime
                  modulus &lt;code&gt;p&lt;/code&gt;, and a base generator &lt;code&gt;g&lt;/code&gt;.                
                <param>
                    y the public value                    
                </param>
                <param>
                    p the prime modulus                    
                </param>
                <param>
                    g the base generator                    
                </param>
                <exception>
                    InvalidKeyException if the key cannot be encoded                    
                </exception>
            </javadoc>
            <method name="DHPublicKey" type="constructor" line="85">
                <params>
                    <param name="y" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="89">
                Make a DH public key out of a public value &lt;code&gt;y&lt;/code&gt;, a prime
                  modulus &lt;code&gt;p&lt;/code&gt;, a base generator &lt;code&gt;g&lt;/code&gt;, and a
                  private-value length &lt;code&gt;l&lt;/code&gt;.                
                <param>
                    y the public value                    
                </param>
                <param>
                    p the prime modulus                    
                </param>
                <param>
                    g the base generator                    
                </param>
                <param>
                    l the private-value length                    
                </param>
                <exception>
                    ProviderException if the key cannot be encoded                    
                </exception>
            </javadoc>
            <method name="DHPublicKey" type="constructor" line="101">
                <params>
                    <param name="y" type="BigInteger"/>
                    <param name="p" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                    <param name="l" type="int"/>
                </params>
                <scope line="106"/>
                <scope line="110"/>
            </method>
            <javadoc line="115">
                Make a DH public key from its DER encoding (X.509).                
                <param>
                    encodedKey the encoded key                    
                </param>
                <exception>
                    InvalidKeyException if the encoded key does not represent
                      a Diffie-Hellman public key                    
                </exception>
            </javadoc>
            <method name="DHPublicKey" type="constructor" line="123">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                </params>
                <comment line="131">
                    Parse the algorithm identifier                    
                </comment>
                <comment line="147">
                    Parse the parameters                    
                </comment>
                <comment line="160">
                    Private-value length is OPTIONAL                    
                </comment>
                <comment line="168">
                    Parse the key                    
                </comment>
                <declaration name="inStream" type="InputStream" line="124"/>
                <scope line="125">
                    <declaration name="derKeyVal" type="DerValue" line="126"/>
                    <scope line="127"/>
                    <declaration name="algid" type="DerValue" line="134"/>
                    <scope line="135"/>
                    <declaration name="derInStream" type="DerInputStream" line="138"/>
                    <declaration name="oid" type="ObjectIdentifier" line="139"/>
                    <scope line="140"/>
                    <scope line="143"/>
                    <declaration name="params" type="DerValue" line="150"/>
                    <scope line="151"/>
                    <scope line="154"/>
                    <scope line="161"/>
                    <scope line="164"/>
                    <scope line="173"/>
                </scope>
                <scope line="179"/>
                <scope line="182"/>
            </method>
            <javadoc line="188">
                Returns the encoding format of this key: &quot;X.509&quot;                
            </javadoc>
            <method name="getFormat" type="String" line="191"/>
            <javadoc line="195">
                Returns the name of the algorithm associated with this key: &quot;DH&quot;                
            </javadoc>
            <method name="getAlgorithm" type="String" line="198"/>
            <javadoc line="202">
                Get the encoding of the key.                
            </javadoc>
            <method name="getEncoded" type="byte[]" line="205">
                <comment line="210">
                    store oid in algid                    
                </comment>
                <comment line="213">
                    encode parameters                    
                </comment>
                <comment line="219">
                    wrap parameters into SEQUENCE                    
                </comment>
                <comment line="222">
                    store parameter SEQUENCE in algid                    
                </comment>
                <comment line="225">
                    wrap algid into SEQUENCE, and store it in key encoding                    
                </comment>
                <comment line="229">
                    store key data                    
                </comment>
                <comment line="232">
                    wrap algid and key into SEQUENCE                    
                </comment>
                <scope line="206">
                    <scope line="207">
                        <declaration name="algid" type="DerOutputStream" line="208"/>
                        <declaration name="params" type="DerOutputStream" line="214"/>
                        <declaration name="paramSequence" type="DerValue" line="220"/>
                        <declaration name="tmpDerKey" type="DerOutputStream" line="226"/>
                        <declaration name="derKey" type="DerOutputStream" line="233"/>
                    </scope>
                    <scope line="236"/>
                </scope>
            </method>
            <javadoc line="243">
                Returns the public value, &lt;code&gt;y&lt;/code&gt;.                
                <return>
                    the public value, <code>y</code>                    
                </return>
            </javadoc>
            <method name="getY" type="BigInteger" line="248"/>
            <javadoc line="252">
                Returns the key parameters.                
                <return>
                    the key parameters                    
                </return>
            </javadoc>
            <method name="getParams" type="DHParameterSpec" line="257"/>
            <method name="toString" type="String" line="264">
                <declaration name="LINE_SEP" type="String" line="265"/>
                <declaration name="strbuf" type="StringBuffer" line="267"/>
            </method>
            <method name="parseKeyBits" type="void" line="280">
                <scope line="281">
                    <declaration name="in" type="DerInputStream" line="282"/>
                </scope>
                <scope line="284"/>
            </method>
            <javadoc line="290">
                Calculates a hash code value for the object.
                  Objects that are equal will also have the same hashcode.                
            </javadoc>
            <method name="hashCode" type="int" line="294">
                <declaration name="retval" type="int" line="295"/>
                <declaration name="enc" type="byte[]" line="296"/>
                <scope line="298"/>
            </method>
            <method name="equals" type="boolean" line="304">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="thisEncoded" type="byte[]" line="311"/>
                <declaration name="thatEncoded" type="byte[]" line="312"/>
            </method>
            <javadoc line="317">
                Replace the DH public key to be serialized.                
                <return>
                    the standard KeyRep object to be serialized                    
                </return>
                <throws>
                    java.io.ObjectStreamException if a new object representing
                      this DH public key could not be created                    
                </throws>
            </javadoc>
            <method name="writeReplace" type="Object" line="325"/>
        </class>
    </source>