<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.security.DigestInputStream"/>
        <import package="java.security.DigestOutputStream"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.Key"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.KeyStoreSpi"/>
        <import package="java.security.KeyStoreException"/>
        <import package="java.security.UnrecoverableKeyException"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="javax.crypto.SealedObject"/>
        <class name="JceKeyStore" line="19">
            <extends class="KeyStoreSpi"/>
            <javadoc line="19">
                This class provides the keystore implementation referred to as &quot;jceks&quot;.
                  This implementation strongly protects the keystore private keys using
                  triple-DES, where the triple-DES encryption/decryption key is derived from
                  the user&apos;s password.
                  The encrypted private keys are stored in the keystore in a standard format,
                  namely the &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; format defined in PKCS #8.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    java.security.KeyStoreSpi                    
                </see>
            </javadoc>
            <declaration name="JCEKS_MAGIC" type="int" line="30"/>
            <declaration name="JKS_MAGIC" type="int" line="31"/>
            <declaration name="VERSION_1" type="int" line="32"/>
            <declaration name="VERSION_2" type="int" line="33"/>
            <class name="PrivateKeyEntry" line="34">
                <declaration name="date" type="Date" line="35"/>
                <declaration name="protectedKey" type="byte[]" line="36"/>
                <declaration name="chain" type="Certificate" line="37"/>
            </class>
            <class name="SecretKeyEntry" line="39">
                <declaration name="date" type="Date" line="40"/>
                <declaration name="sealedKey" type="SealedObject" line="41"/>
            </class>
            <class name="TrustedCertEntry" line="43">
                <declaration name="date" type="Date" line="44"/>
                <declaration name="cert" type="Certificate" line="45"/>
            </class>
            <declaration name="entries" type="Hashtable" line="47"/>
            <javadoc line="47">
                Private keys and certificates are stored in a hashtable.
                  Hash entries are keyed by alias names.                
            </javadoc>
            <javadoc line="52">
                Returns the key associated with the given alias, using the given
                  password to recover it.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    password the password for recovering the key                    
                </param>
                <return>
                    the requested key, or null if the given alias does not exist
                      or does not identify a &lt;i&gt;key entry&lt;/i&gt;.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      key cannot be found                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the key cannot be recovered
                      (e.g., the given password is wrong).                    
                </exception>
            </javadoc>
            <method name="engineGetKey" type="Key" line="64">
                <params>
                    <param name="alias" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="key" type="Key" line="65"/>
                <declaration name="entry" type="Object" line="66"/>
                <scope line="67"/>
                <declaration name="keyProtector" type="KeyProtector" line="70"/>
                <scope line="71">
                    <declaration name="encrBytes" type="byte[]" line="72"/>
                    <declaration name="encrInfo" type="EncryptedPrivateKeyInfo" line="73"/>
                    <scope line="74"/>
                    <scope line="77"/>
                </scope>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                Returns the certificate chain associated with the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user&apos;s certificate first
                      and the root certificate authority last), or null if the given alias
                      does not exist or does not contain a certificate chain (i.e., the given
                      alias identifies either a &lt;i&gt;trusted certificate entry&lt;/i&gt; or a
                      &lt;i&gt;key entry&lt;/i&gt; without a certificate chain).                    
                </return>
            </javadoc>
            <method name="engineGetCertificateChain" type="Certificate[]" line="96">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="chain" type="Certificate[]" line="97"/>
                <declaration name="entry" type="Object" line="98"/>
                <scope line="99"/>
            </method>
            <javadoc line="104">
                Returns the certificate associated with the given alias.
                  &lt;p&gt;If the given alias name identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with that
                  entry is returned. If the given alias name identifies a
                  &lt;i&gt;key entry&lt;/i&gt;, the first element of the certificate chain of that
                  entry is returned, or null if that entry does not have a certificate
                  chain.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate, or null if the given alias does not exist or
                      does not contain a certificate.                    
                </return>
            </javadoc>
            <method name="engineGetCertificate" type="Certificate" line="116">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="cert" type="Certificate" line="117"/>
                <declaration name="entry" type="Object" line="118"/>
                <scope line="119">
                    <scope line="120"/>
                    <scope line="123"/>
                </scope>
            </method>
            <javadoc line="129">
                Returns the creation date of the entry identified by the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the creation date of this entry, or null if the given alias does
                      not exist                    
                </return>
            </javadoc>
            <method name="engineGetCreationDate" type="Date" line="135">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="date" type="Date" line="136"/>
                <declaration name="entry" type="Object" line="137"/>
                <scope line="138">
                    <scope line="139"/>
                    <scope line="142"/>
                    <scope line="145"/>
                </scope>
            </method>
            <javadoc line="151">
                Assigns the given key to the given alias, protecting it with the given
                  password.
                  &lt;p&gt;If the given key is of type &lt;code&gt;java.security.PrivateKey&lt;/code&gt;,
                  it must be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key to be associated with the alias                    
                </param>
                <param>
                    password the password to protect the key                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only required if the given key is of type
                      &lt;code&gt;java.security.PrivateKey&lt;/code&gt;).                    
                </param>
                <exception>
                    KeyStoreException if the given key cannot be protected, or
                      this operation fails for some other reason                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="169">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="Key"/>
                    <param name="password" type="char[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <scope line="170">
                    <scope line="171">
                        <declaration name="keyProtector" type="KeyProtector" line="172"/>
                        <scope line="173">
                            <declaration name="entry" type="PrivateKeyEntry" line="174"/>
                            <scope line="177"/>
                            <scope line="180"/>
                        </scope>
                        <scope line="185">
                            <declaration name="entry" type="SecretKeyEntry" line="186"/>
                        </scope>
                    </scope>
                    <scope line="192"/>
                </scope>
            </method>
            <javadoc line="197">
                Assigns the given key (that has already been protected) to the given
                  alias.
                  &lt;p&gt;If the protected key is of type
                  &lt;code&gt;java.security.PrivateKey&lt;/code&gt;,
                  it must be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key (in protected format) to be associated with the alias                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only useful if the protected key is of type
                      &lt;code&gt;java.security.PrivateKey&lt;/code&gt;).                    
                </param>
                <exception>
                    KeyStoreException if this operation fails.                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="214">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="byte[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <scope line="215">
                    <declaration name="entry" type="PrivateKeyEntry" line="216"/>
                    <scope line="219"/>
                    <scope line="222"/>
                </scope>
            </method>
            <javadoc line="228">
                Assigns the given certificate to the given alias.
                  &lt;p&gt;If the given alias already exists in this keystore and identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with it is
                  overridden by the given certificate.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    cert the certificate                    
                </param>
                <exception>
                    KeyStoreException if the given alias already exists and does
                      not identify a &lt;i&gt;trusted certificate entry&lt;/i&gt;, or this operation
                      fails for some other reason.                    
                </exception>
            </javadoc>
            <method name="engineSetCertificateEntry" type="void" line="239">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="240">
                    <declaration name="entry" type="Object" line="241"/>
                    <scope line="242">
                        <scope line="243"/>
                        <scope line="246"/>
                    </scope>
                    <declaration name="trustedCertEntry" type="TrustedCertEntry" line="250"/>
                </scope>
            </method>
            <javadoc line="256">
                Deletes the entry identified by the given alias from this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <exception>
                    KeyStoreException if the entry cannot be removed.                    
                </exception>
            </javadoc>
            <method name="engineDeleteEntry" type="void" line="261">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="262"/>
            </method>
            <javadoc line="266">
                Lists all the alias names of this keystore.                
                <return>
                    enumeration of the alias names                    
                </return>
            </javadoc>
            <method name="engineAliases" type="Enumeration" line="270"/>
            <javadoc line="273">
                Checks if the given alias exists in this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    true if the alias exists, false otherwise                    
                </return>
            </javadoc>
            <method name="engineContainsAlias" type="boolean" line="278">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="281">
                Retrieves the number of entries in this keystore.                
                <return>
                    the number of entries in this keystore                    
                </return>
            </javadoc>
            <method name="engineSize" type="int" line="285"/>
            <javadoc line="288">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;key entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      &lt;i&gt;key entry&lt;/i&gt;, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsKeyEntry" type="boolean" line="294">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="isKey" type="boolean" line="295"/>
                <declaration name="entry" type="Object" line="296"/>
                <scope line="297"/>
            </method>
            <javadoc line="302">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      &lt;i&gt;trusted certificate entry&lt;/i&gt;, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsCertificateEntry" type="boolean" line="308">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="isCert" type="boolean" line="309"/>
                <declaration name="entry" type="Object" line="310"/>
                <scope line="311"/>
            </method>
            <javadoc line="316">
                Returns the (alias) name of the first keystore entry whose certificate
                  matches the given certificate.
                  &lt;p&gt;This method attempts to match the given certificate with each
                  keystore entry. If the entry being considered
                  is a &lt;i&gt;trusted certificate entry&lt;/i&gt;, the given certificate is
                  compared to that entry&apos;s certificate. If the entry being considered is
                  a &lt;i&gt;key entry&lt;/i&gt;, the given certificate is compared to the first
                  element of that entry&apos;s certificate chain (if a chain exists).                
                <param>
                    cert the certificate to match with.                    
                </param>
                <return>
                    the (alias) name of the first entry with matching certificate,
                      or null if no such entry exists in this keystore.                    
                </return>
            </javadoc>
            <method name="engineGetCertificateAlias" type="String" line="329">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <declaration name="certElem" type="Certificate" line="330"/>
                <declaration name="e" type="Enumeration" line="331"/>
                <scope line="332">
                    <declaration name="alias" type="String" line="333"/>
                    <declaration name="entry" type="Object" line="334"/>
                    <scope line="335"/>
                    <scope line="338"/>
                    <scope line="341"/>
                    <scope line="344"/>
                </scope>
            </method>
            <javadoc line="350">
                Stores this keystore to the given output stream, and protects its
                  integrity with the given password.                
                <param>
                    stream the output stream to which this keystore is written.                    
                </param>
                <param>
                    password the password to generate the keystore integrity check                    
                </param>
                <exception>
                    IOException if there was an I/O problem with data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the appropriate data integrity
                      algorithm could not be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates included in
                      the keystore data could not be stored                    
                </exception>
            </javadoc>
            <method name="engineStore" type="void" line="361">
                <params>
                    <param name="stream" type="OutputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="362">
                    <scope line="363"/>
                    <declaration name="encoded" type="byte[]" line="366"/>
                    <declaration name="md" type="MessageDigest" line="367"/>
                    <declaration name="dos" type="DataOutputStream" line="368"/>
                    <declaration name="oos" type="ObjectOutputStream" line="369"/>
                    <scope line="370">
                        <declaration name="e" type="Enumeration" line="374"/>
                        <scope line="375">
                            <declaration name="alias" type="String" line="376"/>
                            <declaration name="entry" type="Object" line="377"/>
                            <scope line="378">
                                <declaration name="pentry" type="PrivateKeyEntry" line="379"/>
                                <declaration name="chainLen" type="int" line="385"/>
                                <scope line="386"/>
                                <scope line="389"/>
                                <scope line="393"/>
                            </scope>
                            <scope line="400"/>
                            <scope line="409"/>
                        </scope>
                        <declaration name="digest" type="byte" line="417"/>
                    </scope>
                    <scope line="421">
                        <scope line="422"/>
                        <scope line="425"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="431">
                Loads the keystore from the given input stream.
                  &lt;p&gt;If a password is given, it is used to check the integrity of the
                  keystore data. Otherwise, the integrity of the keystore is not checked.                
                <param>
                    stream the input stream from which the keystore is loaded                    
                </param>
                <param>
                    password the (optional) password used to check the integrity of
                      the keystore.                    
                </param>
                <exception>
                    IOException if there is an I/O or format problem with the
                      keystore data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm used to check
                      the integrity of the keystore cannot be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates in the
                      keystore could not be loaded                    
                </exception>
            </javadoc>
            <method name="engineLoad" type="void" line="445">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <scope line="446">
                    <declaration name="dis" type="DataInputStream" line="447"/>
                    <declaration name="md" type="MessageDigest" line="448"/>
                    <declaration name="cf" type="CertificateFactory" line="449"/>
                    <declaration name="cfs" type="Hashtable" line="450"/>
                    <declaration name="bais" type="ByteArrayInputStream" line="451"/>
                    <declaration name="encoded" type="byte[]" line="452"/>
                    <scope line="454"/>
                    <scope line="458"/>
                    <declaration name="ois" type="ObjectInputStream" line="461"/>
                    <scope line="462">
                        <declaration name="xMagic" type="int" line="463"/>
                        <declaration name="xVersion" type="int" line="464"/>
                        <scope line="465"/>
                        <scope line="468"/>
                        <scope line="471"/>
                        <declaration name="count" type="int" line="475"/>
                        <scope line="476">
                            <declaration name="tag" type="int" line="477"/>
                            <declaration name="alias" type="String" line="478"/>
                            <scope line="480">
                                <declaration name="entry" type="PrivateKeyEntry" line="481"/>
                                <scope line="484"/>
                                <scope line="487"/>
                                <declaration name="numOfCerts" type="int" line="491"/>
                                <scope line="492">
                                    <scope line="493"/>
                                </scope>
                                <scope line="497"/>
                                <scope line="500">
                                    <scope line="501">
                                        <declaration name="certType" type="String" line="502"/>
                                        <scope line="503"/>
                                        <scope line="506"/>
                                    </scope>
                                    <scope line="511"/>
                                    <scope line="514"/>
                                </scope>
                            </scope>
                            <scope line="523">
                                <declaration name="entry" type="TrustedCertEntry" line="524"/>
                                <scope line="527">
                                    <declaration name="certType" type="String" line="528"/>
                                    <scope line="529"/>
                                    <scope line="532"/>
                                </scope>
                                <scope line="537"/>
                                <scope line="540"/>
                            </scope>
                            <scope line="548">
                                <declaration name="entry" type="SecretKeyEntry" line="549"/>
                                <scope line="552"/>
                                <scope line="556"/>
                            </scope>
                            <scope line="561"/>
                        </scope>
                        <scope line="565">
                            <declaration name="computed" type="byte" line="566"/>
                            <scope line="570">
                                <scope line="571"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="577">
                        <scope line="578"/>
                        <scope line="581"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="587">
                To guard against tampering with the keystore, we append a keyed
                  hash with a bit of whitener.                
            </javadoc>
            <method name="getPreKeyedHash" type="MessageDigest" line="591">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="i" type="int" line="592"/>
                <declaration name="md" type="MessageDigest" line="593"/>
                <declaration name="passwdBytes" type="byte[]" line="594"/>
                <scope line="595"/>
            </method>
        </class>
    </source>