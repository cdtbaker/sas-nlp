<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.security.DigestInputStream"/>
        <import package="java.security.DigestOutputStream"/>
        <import package="java.security.MessageDigest"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.Key"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.KeyStoreSpi"/>
        <import package="java.security.KeyStoreException"/>
        <import package="java.security.UnrecoverableKeyException"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.cert.CertificateFactory"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="javax.crypto.SealedObject"/>
        <class name="JceKeyStore" line="46">
            <extends class="KeyStoreSpi"/>
            <comment line="68">
                Private key and supporting certificate chain                
            </comment>
            <comment line="75">
                Secret key                
            </comment>
            <comment line="81">
                Trusted certificate                
            </comment>
            <javadoc line="46">
                This class provides the keystore implementation referred to as &quot;jceks&quot;.
                  This implementation strongly protects the keystore private keys using
                  triple-DES, where the triple-DES encryption/decryption key is derived from
                  the user&apos;s password.
                  The encrypted private keys are stored in the keystore in a standard format,
                  namely the &lt;code&gt;EncryptedPrivateKeyInfo&lt;/code&gt; format defined in PKCS #8.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    java.security.KeyStoreSpi                    
                </see>
            </javadoc>
            <declaration name="JCEKS_MAGIC" type="int" line="62"/>
            <declaration name="JKS_MAGIC" type="int" line="63"/>
            <declaration name="VERSION_1" type="int" line="64"/>
            <declaration name="VERSION_2" type="int" line="65"/>
            <class name="PrivateKeyEntry" line="68">
                <comment line="70">
                    the creation date of this entry                    
                </comment>
                <comment line="77">
                    the creation date of this entry                    
                </comment>
                <comment line="83">
                    the creation date of this entry                    
                </comment>
                <declaration name="date" type="Date" line="69"/>
                <declaration name="protectedKey" type="byte[]" line="70"/>
                <declaration name="chain" type="Certificate" line="71"/>
            </class>
            <class name="SecretKeyEntry" line="75">
                <comment line="70">
                    the creation date of this entry                    
                </comment>
                <comment line="77">
                    the creation date of this entry                    
                </comment>
                <comment line="83">
                    the creation date of this entry                    
                </comment>
                <declaration name="date" type="Date" line="76"/>
                <declaration name="sealedKey" type="SealedObject" line="77"/>
            </class>
            <class name="TrustedCertEntry" line="81">
                <comment line="70">
                    the creation date of this entry                    
                </comment>
                <comment line="77">
                    the creation date of this entry                    
                </comment>
                <comment line="83">
                    the creation date of this entry                    
                </comment>
                <declaration name="date" type="Date" line="82"/>
                <declaration name="cert" type="Certificate" line="83"/>
            </class>
            <declaration name="entries" type="Hashtable" line="86"/>
            <javadoc line="86">
                Private keys and certificates are stored in a hashtable.
                  Hash entries are keyed by alias names.                
            </javadoc>
            <javadoc line="92">
                Returns the key associated with the given alias, using the given
                  password to recover it.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    password the password for recovering the key                    
                </param>
                <return>
                    the requested key, or null if the given alias does not exist
                      or does not identify a <i>key entry</i>.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if the algorithm for recovering the
                      key cannot be found                    
                </exception>
                <exception>
                    UnrecoverableKeyException if the key cannot be recovered
                      (e.g., the given password is wrong).                    
                </exception>
            </javadoc>
            <method name="engineGetKey" type="Key" line="109">
                <params>
                    <param name="alias" type="String"/>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="key" type="Key" line="110"/>
                <declaration name="entry" type="Object" line="112"/>
                <scope line="115"/>
                <declaration name="keyProtector" type="KeyProtector" line="119"/>
                <scope line="121">
                    <declaration name="encrBytes" type="byte[]" line="122"/>
                    <declaration name="encrInfo" type="EncryptedPrivateKeyInfo" line="123"/>
                    <scope line="124"/>
                    <scope line="126"/>
                </scope>
                <scope line="132"/>
            </method>
            <javadoc line="140">
                Returns the certificate chain associated with the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate chain (ordered with the user's certificate first
                      and the root certificate authority last), or null if the given alias
                      does not exist or does not contain a certificate chain (i.e., the given
                      alias identifies either a <i>trusted certificate entry</i> or a
                      <i>key entry</i> without a certificate chain).                    
                </return>
            </javadoc>
            <method name="engineGetCertificateChain" type="Certificate[]" line="152">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="chain" type="Certificate[]" line="153"/>
                <declaration name="entry" type="Object" line="155"/>
                <scope line="158"/>
            </method>
            <javadoc line="165">
                Returns the certificate associated with the given alias.
                  &lt;p&gt;If the given alias name identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with that
                  entry is returned. If the given alias name identifies a
                  &lt;i&gt;key entry&lt;/i&gt;, the first element of the certificate chain of that
                  entry is returned, or null if that entry does not have a certificate
                  chain.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the certificate, or null if the given alias does not exist or
                      does not contain a certificate.                    
                </return>
            </javadoc>
            <method name="engineGetCertificate" type="Certificate" line="180">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="cert" type="Certificate" line="181"/>
                <declaration name="entry" type="Object" line="183"/>
                <scope line="185">
                    <scope line="186"/>
                    <scope line="189"/>
                </scope>
            </method>
            <javadoc line="197">
                Returns the creation date of the entry identified by the given alias.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    the creation date of this entry, or null if the given alias does
                      not exist                    
                </return>
            </javadoc>
            <method name="engineGetCreationDate" type="Date" line="205">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <comment line="211">
                    We have to create a new instance of java.util.Date because                    
                </comment>
                <comment line="212">
                    dates are not immutable                    
                </comment>
                <declaration name="date" type="Date" line="206"/>
                <declaration name="entry" type="Object" line="208"/>
                <scope line="210">
                    <scope line="213"/>
                    <scope line="215"/>
                    <scope line="217"/>
                </scope>
            </method>
            <javadoc line="225">
                Assigns the given key to the given alias, protecting it with the given
                  password.
                  &lt;p&gt;If the given key is of type &lt;code&gt;java.security.PrivateKey&lt;/code&gt;,
                  it must be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key to be associated with the alias                    
                </param>
                <param>
                    password the password to protect the key                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only required if the given key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if the given key cannot be protected, or
                      this operation fails for some other reason                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="250">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="Key"/>
                    <param name="password" type="char[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <comment line="259">
                    protect the private key                    
                </comment>
                <comment line="262">
                    clone the chain                    
                </comment>
                <comment line="270">
                    store the entry                    
                </comment>
                <comment line="277">
                    seal and store the key                    
                </comment>
                <scope line="251">
                    <scope line="252">
                        <declaration name="keyProtector" type="KeyProtector" line="253"/>
                        <scope line="255">
                            <declaration name="entry" type="PrivateKeyEntry" line="256"/>
                            <scope line="264"/>
                            <scope line="266"/>
                        </scope>
                        <scope line="273">
                            <declaration name="entry" type="SecretKeyEntry" line="274"/>
                        </scope>
                    </scope>
                    <scope line="282"/>
                </scope>
            </method>
            <javadoc line="288">
                Assigns the given key (that has already been protected) to the given
                  alias.
                  &lt;p&gt;If the protected key is of type
                  &lt;code&gt;java.security.PrivateKey&lt;/code&gt;,
                  it must be accompanied by a certificate chain certifying the
                  corresponding public key.
                  &lt;p&gt;If the given alias already exists, the keystore information
                  associated with it is overridden by the given key (and possibly
                  certificate chain).                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    key the key (in protected format) to be associated with the alias                    
                </param>
                <param>
                    chain the certificate chain for the corresponding public
                      key (only useful if the protected key is of type
                      <code>java.security.PrivateKey</code>).                    
                </param>
                <exception>
                    KeyStoreException if this operation fails.                    
                </exception>
            </javadoc>
            <method name="engineSetKeyEntry" type="void" line="312">
                <params>
                    <param name="alias" type="String"/>
                    <param name="key" type="byte[]"/>
                    <param name="chain" type="Certificate[]"/>
                </params>
                <comment line="314">
                    We assume it&apos;s a private key, because there is no standard                    
                </comment>
                <comment line="315">
                    (ASN.1) encoding format for wrapped secret keys                    
                </comment>
                <scope line="313">
                    <declaration name="entry" type="PrivateKeyEntry" line="316"/>
                    <scope line="321"/>
                    <scope line="323"/>
                </scope>
            </method>
            <javadoc line="331">
                Assigns the given certificate to the given alias.
                  &lt;p&gt;If the given alias already exists in this keystore and identifies a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, the certificate associated with it is
                  overridden by the given certificate.                
                <param>
                    alias the alias name                    
                </param>
                <param>
                    cert the certificate                    
                </param>
                <exception>
                    KeyStoreException if the given alias already exists and does
                      not identify a <i>trusted certificate entry</i>, or this operation
                      fails for some other reason.                    
                </exception>
            </javadoc>
            <method name="engineSetCertificateEntry" type="void" line="347">
                <params>
                    <param name="alias" type="String"/>
                    <param name="cert" type="Certificate"/>
                </params>
                <scope line="348">
                    <declaration name="entry" type="Object" line="350"/>
                    <scope line="351">
                        <scope line="352"/>
                        <scope line="355"/>
                    </scope>
                    <declaration name="trustedCertEntry" type="TrustedCertEntry" line="360"/>
                </scope>
            </method>
            <javadoc line="367">
                Deletes the entry identified by the given alias from this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <exception>
                    KeyStoreException if the entry cannot be removed.                    
                </exception>
            </javadoc>
            <method name="engineDeleteEntry" type="void" line="376">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <scope line="377"/>
            </method>
            <javadoc line="382">
                Lists all the alias names of this keystore.                
                <return>
                    enumeration of the alias names                    
                </return>
            </javadoc>
            <method name="engineAliases" type="Enumeration" line="387"/>
            <javadoc line="391">
                Checks if the given alias exists in this keystore.                
                <param>
                    alias the alias name                    
                </param>
                <return>
                    true if the alias exists, false otherwise                    
                </return>
            </javadoc>
            <method name="engineContainsAlias" type="boolean" line="398">
                <params>
                    <param name="alias" type="String"/>
                </params>
            </method>
            <javadoc line="402">
                Retrieves the number of entries in this keystore.                
                <return>
                    the number of entries in this keystore                    
                </return>
            </javadoc>
            <method name="engineSize" type="int" line="407"/>
            <javadoc line="411">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;key entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      <i>key entry</i>, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsKeyEntry" type="boolean" line="418">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="isKey" type="boolean" line="419"/>
                <declaration name="entry" type="Object" line="421"/>
                <scope line="423"/>
            </method>
            <javadoc line="430">
                Returns true if the entry identified by the given alias is a
                  &lt;i&gt;trusted certificate entry&lt;/i&gt;, and false otherwise.                
                <return>
                    true if the entry identified by the given alias is a
                      <i>trusted certificate entry</i>, false otherwise.                    
                </return>
            </javadoc>
            <method name="engineIsCertificateEntry" type="boolean" line="437">
                <params>
                    <param name="alias" type="String"/>
                </params>
                <declaration name="isCert" type="boolean" line="438"/>
                <declaration name="entry" type="Object" line="439"/>
                <scope line="440"/>
            </method>
            <javadoc line="446">
                Returns the (alias) name of the first keystore entry whose certificate
                  matches the given certificate.
                  &lt;p&gt;This method attempts to match the given certificate with each
                  keystore entry. If the entry being considered
                  is a &lt;i&gt;trusted certificate entry&lt;/i&gt;, the given certificate is
                  compared to that entry&apos;s certificate. If the entry being considered is
                  a &lt;i&gt;key entry&lt;/i&gt;, the given certificate is compared to the first
                  element of that entry&apos;s certificate chain (if a chain exists).                
                <param>
                    cert the certificate to match with.                    
                </param>
                <return>
                    the (alias) name of the first entry with matching certificate,
                      or null if no such entry exists in this keystore.                    
                </return>
            </javadoc>
            <method name="engineGetCertificateAlias" type="String" line="462">
                <params>
                    <param name="cert" type="Certificate"/>
                </params>
                <declaration name="certElem" type="Certificate" line="463"/>
                <declaration name="e" type="Enumeration" line="465"/>
                <scope line="466">
                    <declaration name="alias" type="String" line="467"/>
                    <declaration name="entry" type="Object" line="468"/>
                    <scope line="469"/>
                    <scope line="472"/>
                    <scope line="474"/>
                    <scope line="477"/>
                </scope>
            </method>
            <javadoc line="484">
                Stores this keystore to the given output stream, and protects its
                  integrity with the given password.                
                <param>
                    stream the output stream to which this keystore is written.                    
                </param>
                <param>
                    password the password to generate the keystore integrity check                    
                </param>
                <exception>
                    IOException if there was an I/O problem with data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the appropriate data integrity
                      algorithm could not be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates included in
                      the keystore data could not be stored                    
                </exception>
            </javadoc>
            <method name="engineStore" type="void" line="499">
                <params>
                    <param name="stream" type="OutputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="501">
                    KEYSTORE FORMAT:
                    
                     Magic number (big-endian integer),
                     Version of this file format (big-endian integer),
                    
                     Count (big-endian integer),
                     followed by &quot;count&quot; instances of either:
                    
                         {
                          tag=1 (big-endian integer)
                          alias (UTF string)
                          timestamp
                          encrypted private-key info according to PKCS #8
                              (integer length followed by encoding)
                          cert chain (integer count followed by certs;
                              for each cert: type UTF string, followed by integer
                                  length, followed by encoding)
                         }
                    
                     or:
                    
                         {
                          tag=2 (big-endian integer)
                          alias (UTF string)
                          timestamp
                          cert (type UTF string, followed by integer length,
                              followed by encoding)
                         }
                    
                     or:
                    
                         {
                          tag=3 (big-endian integer)
                          alias (UTF string)
                          timestamp
                          sealed secret key (in serialized form)
                         }
                    
                     ended by a keyed SHA1 hash (bytes only) of
                         { password + whitener + preceding body }                    
                </comment>
                <comment line="544">
                    password is mandatory when storing                    
                </comment>
                <comment line="549">
                    the certificate encoding                    
                </comment>
                <comment line="554">
                    NOTE: don&apos;t pass dos to oos at this point or it&apos;ll corrupt                    
                </comment>
                <comment line="555">
                    the keystore!!!                    
                </comment>
                <comment line="559">
                    always write the latest version                    
                </comment>
                <comment line="573">
                    write PrivateKeyEntry tag                    
                </comment>
                <comment line="576">
                    write the alias                    
                </comment>
                <comment line="579">
                    write the (entry creation) date                    
                </comment>
                <comment line="582">
                    write the protected private key                    
                </comment>
                <comment line="586">
                    write the certificate chain                    
                </comment>
                <comment line="603">
                    write TrustedCertEntry tag                    
                </comment>
                <comment line="606">
                    write the alias                    
                </comment>
                <comment line="609">
                    write the (entry creation) date                    
                </comment>
                <comment line="612">
                    write the trusted certificate                    
                </comment>
                <comment line="620">
                    write SecretKeyEntry tag                    
                </comment>
                <comment line="623">
                    write the alias                    
                </comment>
                <comment line="626">
                    write the (entry creation) date                    
                </comment>
                <comment line="629">
                    write the sealed key                    
                </comment>
                <comment line="632">
                    NOTE: don&apos;t close oos here since we are still                    
                </comment>
                <comment line="633">
                    using dos!!!                    
                </comment>
                <comment line="637">
                    Write the keyed hash which is used to detect tampering with
                     the keystore (such as deleting or modifying key or
                     certificate entries).                    
                </comment>
                <scope line="500">
                    <scope line="545"/>
                    <declaration name="encoded" type="byte[]" line="549"/>
                    <declaration name="md" type="MessageDigest" line="551"/>
                    <declaration name="dos" type="DataOutputStream" line="552"/>
                    <declaration name="oos" type="ObjectOutputStream" line="556"/>
                    <scope line="557">
                        <declaration name="e" type="Enumeration" line="563"/>
                        <scope line="564">
                            <declaration name="alias" type="String" line="566"/>
                            <declaration name="entry" type="Object" line="567"/>
                            <scope line="569">
                                <declaration name="pentry" type="PrivateKeyEntry" line="571"/>
                                <declaration name="chainLen" type="int" line="587"/>
                                <scope line="588"/>
                                <scope line="590"/>
                                <scope line="594"/>
                            </scope>
                            <scope line="601"/>
                            <scope line="618"/>
                        </scope>
                        <declaration name="digest" type="byte" line="642"/>
                    </scope>
                    <scope line="646">
                        <scope line="647"/>
                        <scope line="649"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="656">
                Loads the keystore from the given input stream.
                  &lt;p&gt;If a password is given, it is used to check the integrity of the
                  keystore data. Otherwise, the integrity of the keystore is not checked.                
                <param>
                    stream the input stream from which the keystore is loaded                    
                </param>
                <param>
                    password the (optional) password used to check the integrity of
                      the keystore.                    
                </param>
                <exception>
                    IOException if there is an I/O or format problem with the
                      keystore data                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the algorithm used to check
                      the integrity of the keystore cannot be found                    
                </exception>
                <exception>
                    CertificateException if any of the certificates in the
                      keystore could not be loaded                    
                </exception>
            </javadoc>
            <method name="engineLoad" type="void" line="675">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="password" type="char[]"/>
                </params>
                <comment line="693">
                    NOTE: don&apos;t pass dis to ois at this point or it&apos;ll fail to load                    
                </comment>
                <comment line="694">
                    the keystore!!!                    
                </comment>
                <comment line="698">
                    Body format: see store method                    
                </comment>
                <comment line="703">
                    Accept the following keystore implementations:                    
                </comment>
                <comment line="704">
                    - JCEKS (this implementation), versions 1 and 2                    
                </comment>
                <comment line="705">
                    - JKS (Sun&apos;s keystore implementation in JDK 1.2),                    
                </comment>
                <comment line="706">
                    versions 1 and 2                    
                </comment>
                <comment line="715">
                    version 2                    
                </comment>
                <comment line="728">
                    private-key entry                    
                </comment>
                <comment line="732">
                    read the alias                    
                </comment>
                <comment line="735">
                    read the (entry creation) date                    
                </comment>
                <comment line="738">
                    read the private key                    
                </comment>
                <comment line="746">
                    read the certificate chain                    
                </comment>
                <comment line="758">
                    read the certificate type, and instantiate a                    
                </comment>
                <comment line="759">
                    certificate factory of that type (reuse                    
                </comment>
                <comment line="760">
                    existing factory if possible)                    
                </comment>
                <comment line="763">
                    reuse certificate factory                    
                </comment>
                <comment line="766">
                    create new certificate factory                    
                </comment>
                <comment line="769">
                    store the certificate factory so we can                    
                </comment>
                <comment line="770">
                    reuse it later                    
                </comment>
                <comment line="774">
                    instantiate the certificate                    
                </comment>
                <comment line="785">
                    Add the entry to the list                    
                </comment>
                <comment line="788">
                    trusted certificate entry                    
                </comment>
                <comment line="792">
                    read the alias                    
                </comment>
                <comment line="795">
                    read the (entry creation) date                    
                </comment>
                <comment line="798">
                    read the trusted certificate                    
                </comment>
                <comment line="800">
                    read the certificate type, and instantiate a                    
                </comment>
                <comment line="801">
                    certificate factory of that type (reuse                    
                </comment>
                <comment line="802">
                    existing factory if possible)                    
                </comment>
                <comment line="805">
                    reuse certificate factory                    
                </comment>
                <comment line="808">
                    create new certificate factory                    
                </comment>
                <comment line="810">
                    store the certificate factory so we can                    
                </comment>
                <comment line="811">
                    reuse it later                    
                </comment>
                <comment line="824">
                    Add the entry to the list                    
                </comment>
                <comment line="827">
                    secret-key entry                    
                </comment>
                <comment line="831">
                    read the alias                    
                </comment>
                <comment line="834">
                    read the (entry creation) date                    
                </comment>
                <comment line="837">
                    read the sealed key                    
                </comment>
                <comment line="841">
                    NOTE: don&apos;t close ois here since we are still                    
                </comment>
                <comment line="842">
                    using dis!!!                    
                </comment>
                <comment line="847">
                    Add the entry to the list                    
                </comment>
                <comment line="855">
                    If a password has been provided, we check the keyed digest
                     at the end. If this check fails, the store has been tampered
                     with                    
                </comment>
                <scope line="676">
                    <declaration name="dis" type="DataInputStream" line="677"/>
                    <declaration name="md" type="MessageDigest" line="678"/>
                    <declaration name="cf" type="CertificateFactory" line="679"/>
                    <declaration name="cfs" type="Hashtable" line="680"/>
                    <declaration name="bais" type="ByteArrayInputStream" line="681"/>
                    <declaration name="encoded" type="byte[]" line="682"/>
                    <scope line="687"/>
                    <scope line="690"/>
                    <declaration name="ois" type="ObjectInputStream" line="695"/>
                    <scope line="697">
                        <declaration name="xMagic" type="int" line="700"/>
                        <declaration name="xVersion" type="int" line="701"/>
                        <scope line="708"/>
                        <scope line="712"/>
                        <scope line="714"/>
                        <declaration name="count" type="int" line="720"/>
                        <scope line="722">
                            <declaration name="tag" type="int" line="723"/>
                            <declaration name="alias" type="String" line="724"/>
                            <scope line="728">
                                <declaration name="entry" type="PrivateKeyEntry" line="730"/>
                                <scope line="739"/>
                                <scope line="741"/>
                                <declaration name="numOfCerts" type="int" line="747"/>
                                <scope line="748">
                                    <scope line="749"/>
                                </scope>
                                <scope line="752"/>
                                <scope line="756">
                                    <scope line="757">
                                        <declaration name="certType" type="String" line="761"/>
                                        <scope line="762"/>
                                        <scope line="765"/>
                                    </scope>
                                    <scope line="775"/>
                                    <scope line="777"/>
                                </scope>
                            </scope>
                            <scope line="788">
                                <declaration name="entry" type="TrustedCertEntry" line="790"/>
                                <scope line="799">
                                    <declaration name="certType" type="String" line="803"/>
                                    <scope line="804"/>
                                    <scope line="807"/>
                                </scope>
                                <scope line="815"/>
                                <scope line="817"/>
                            </scope>
                            <scope line="827">
                                <declaration name="entry" type="SecretKeyEntry" line="829"/>
                                <scope line="838"/>
                                <scope line="843"/>
                            </scope>
                            <scope line="850"/>
                        </scope>
                        <scope line="860">
                            <declaration name="computed" type="byte" line="861"/>
                            <scope line="865">
                                <scope line="866"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="873">
                        <scope line="874"/>
                        <scope line="876"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="883">
                To guard against tampering with the keystore, we append a keyed
                  hash with a bit of whitener.                
            </javadoc>
            <method name="getPreKeyedHash" type="MessageDigest" line="888">
                <params>
                    <param name="password" type="char[]"/>
                </params>
                <declaration name="i" type="int" line="889"/>
                <declaration name="md" type="MessageDigest" line="891"/>
                <declaration name="passwdBytes" type="byte[]" line="892"/>
                <scope line="893"/>
            </method>
        </class>
    </source>