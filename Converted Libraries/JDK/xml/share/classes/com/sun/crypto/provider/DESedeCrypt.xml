<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.InvalidKeyException"/>
        <class name="DESedeCrypt" line="30">
            <extends class="DESCrypt"/>
            <comment line="46">
                the expanded key used in encryptdecryptencrypt phase                
            </comment>
            <comment line="54">
                constructor                
            </comment>
            <implements interface="DESConstants"/>
            <javadoc line="30">
                This class implements the Triple DES algorithm (DES encryption, followed by
                  DES decryption, followed by DES encryption) on a byte array of size
                  &lt;code&gt;DES_BLOCK_SIZE&lt;/code&gt;. Each DES operation has its own key.                
                <author>
                    Gigi Ankeny                    
                </author>
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    DESConstants                    
                </see>
                <see>
                    DESCipher                    
                </see>
            </javadoc>
            <declaration name="key1" type="byte[]" line="48"/>
            <declaration name="key2" type="byte[]" line="49"/>
            <declaration name="key3" type="byte[]" line="50"/>
            <declaration name="buf1" type="byte[]" line="51"/>
            <method name="DESedeCrypt" type="constructor" line="56"/>
            <method name="init" type="void" line="62">
                <params>
                    <param name="decrypting" type="boolean"/>
                    <param name="algorithm" type="String"/>
                    <param name="keys" type="byte[]"/>
                </params>
                <comment line="75">
                    retrieve the first key                    
                </comment>
                <comment line="81">
                    check if the third key is the same                    
                </comment>
                <comment line="92">
                    retrieve the second key                    
                </comment>
                <scope line="64"/>
                <scope line="68"/>
                <declaration name="keybuf" type="byte[]" line="72"/>
                <scope line="81"/>
                <scope line="83"/>
            </method>
            <javadoc line="99">
                Performs encryption operation.
                  &lt;p&gt;The input plain text &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(plainOffset + blockSize - 1)&lt;/code&gt;, is encrypted.
                  The result is stored in &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt;.                
                <param>
                    plain the buffer with the input data to be encrypted                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
                <param>
                    cipher the buffer for the result                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipher</code>                    
                </param>
            </javadoc>
            <method name="encryptBlock" type="void" line="115">
                <params>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                </params>
            </method>
            <javadoc line="129">
                Performs decryption operation.
                  &lt;p&gt;The input cipher text &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(cipherOffset + blockSize - 1)&lt;/code&gt;, is decrypted.
                  The result is stored in &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt;.                
                <param>
                    cipher the buffer with the input data to be decrypted                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipherOffset</code>                    
                </param>
                <param>
                    plain the buffer for the result                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
            </javadoc>
            <method name="decryptBlock" type="void" line="145">
                <params>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                </params>
            </method>
            <method name="keyEquals" type="boolean" line="160">
                <params>
                    <param name="key1" type="byte[]"/>
                    <param name="off1" type="int"/>
                    <param name="key2" type="byte[]"/>
                    <param name="off2" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="162"/>
            </method>
        </class>
    </source>