<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="javax.crypto.IllegalBlockSizeException"/>
        <import package="javax.crypto.ShortBufferException"/>
        <class name="CipherTextStealing" line="31">
            <extends class="CipherBlockChaining"/>
            <javadoc line="31">
                This class represents ciphers in cipher text stealing (CTS) mode.
                  &lt;br&gt;CTS provides a way to allow block ciphers to operate on partial
                  blocks without padding, and all bits of the message go through
                  the encryption algorithm, rather than simply being XOR&apos;d.
                  &lt;br&gt;More details can be found in RFC 2040 section 8 &quot;Description
                  of RC5-CTS&quot;.
                  &lt;p&gt;This mode is implemented independently of a particular cipher.
                  Ciphers to which this mode should apply (e.g., DES) must be
                  &lt;i&gt;plugged-in&lt;/i&gt; using the constructor.
                  &lt;p&gt;NOTE#1: CTS requires the input data to be at least one block
                  long. Thus, callers of this class has to buffer the input data
                  to make sure the input data passed to encryptFinal()/decryptFinal()
                  is not shorter than a block.
                  &lt;p&gt;NOTE#2: This class does not deal with buffering or padding
                  just like all other cipher mode implementations.                
                <author>
                    Valerie Peng                    
                </author>
            </javadoc>
            <method name="CipherTextStealing" type="constructor" line="55">
                <params>
                    <param name="embeddedCipher" type="SymmetricCipher"/>
                </params>
            </method>
            <javadoc line="59">
                Gets the name of this feedback mode.                
                <return>
                    the string <code>CBC</code>                    
                </return>
            </javadoc>
            <method name="getFeedback" type="String" line="64"/>
            <javadoc line="68">
                Performs the last encryption operation.
                  &lt;p&gt;The input plain text &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(plainOffset + len - 1)&lt;/code&gt;, is encrypted.
                  The result is stored in &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt;.
                  &lt;p&gt;It is the application&apos;s responsibility to make sure that
                  &lt;code&gt;plainLen&lt;/code&gt; is a multiple of the embedded cipher&apos;s block size,
                  as any excess bytes are ignored.                
                <param>
                    plain the buffer with the input data to be encrypted                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
                <param>
                    plainLen the length of the input data                    
                </param>
                <param>
                    cipher the buffer for the result                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipher</code>                    
                </param>
            </javadoc>
            <method name="encryptFinal" type="void" line="89">
                <params>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                    <param name="plainLen" type="int"/>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                </params>
                <comment line="96">
                    number of bytes in the last block                    
                </comment>
                <comment line="100">
                    swap the last two blocks after encryption                    
                </comment>
                <comment line="118">
                    Do final CTS step for last two blocks (the second of which                    
                </comment>
                <comment line="119">
                    may or may not be incomplete).                    
                </comment>
                <comment line="121">
                    now encrypt the next-to-last block                    
                </comment>
                <comment line="129">
                    encrypt the last block                    
                </comment>
                <scope line="91"/>
                <scope line="93"/>
                <scope line="95">
                    <declaration name="nLeft" type="int" line="97"/>
                    <scope line="98">
                        <declaration name="lastBlkIndex" type="int" line="101"/>
                        <declaration name="nextToLastBlkIndex" type="int" line="102"/>
                        <declaration name="tmp" type="byte[]" line="103"/>
                    </scope>
                    <scope line="109">
                        <declaration name="newPlainLen" type="int" line="110"/>
                        <scope line="111"/>
                        <declaration name="tmp" type="byte[]" line="120"/>
                        <scope line="122"/>
                        <declaration name="tmp2" type="byte[]" line="125"/>
                        <scope line="130"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="139">
                Performs decryption operation.
                  &lt;p&gt;The input cipher text &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(cipherOffset + len - 1)&lt;/code&gt;, is decrypted.
                  The result is stored in &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt;.
                  &lt;p&gt;It is the application&apos;s responsibility to make sure that
                  &lt;code&gt;cipherLen&lt;/code&gt; is a multiple of the embedded cipher&apos;s block
                  size, as any excess bytes are ignored.
                  &lt;p&gt;It is also the application&apos;s responsibility to make sure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.
                  (This check is omitted here, to avoid double checking.)                
                <param>
                    cipher the buffer with the input data to be decrypted                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipherOffset</code>                    
                </param>
                <param>
                    cipherLen the length of the input data                    
                </param>
                <param>
                    plain the buffer for the result                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
            </javadoc>
            <method name="decryptFinal" type="void" line="164">
                <params>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                    <param name="cipherLen" type="int"/>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                </params>
                <comment line="170">
                    number of bytes in the last block                    
                </comment>
                <comment line="173">
                    swap the last two blocks before decryption                    
                </comment>
                <comment line="192">
                    Do final CTS step for last two blocks (the second of which                    
                </comment>
                <comment line="193">
                    may or may not be incomplete).                    
                </comment>
                <comment line="195">
                    now decrypt the next-to-last block                    
                </comment>
                <comment line="203">
                    decrypt the last block                    
                </comment>
                <comment line="207">
                    System.arraycopy(r, 0, tmp, 0, r.length);                    
                </comment>
                <scope line="165"/>
                <scope line="167"/>
                <scope line="169">
                    <declaration name="nLeft" type="int" line="171"/>
                    <scope line="172">
                        <declaration name="lastBlkIndex" type="int" line="174"/>
                        <declaration name="nextToLastBlkIndex" type="int" line="175"/>
                        <declaration name="tmp" type="byte[]" line="177"/>
                        <declaration name="cipherLen2" type="int" line="181"/>
                    </scope>
                    <scope line="184">
                        <declaration name="newCipherLen" type="int" line="185"/>
                        <scope line="186"/>
                        <declaration name="tmp" type="byte[]" line="196"/>
                        <scope line="198"/>
                        <scope line="208"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>