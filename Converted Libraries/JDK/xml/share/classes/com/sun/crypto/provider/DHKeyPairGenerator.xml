<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.math.BigInteger"/>
        <import package="java.security"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.security.spec.InvalidParameterSpecException"/>
        <import package="javax.crypto.spec.DHParameterSpec"/>
        <import package="javax.crypto.spec.DHGenParameterSpec"/>
        <import package="sun.security.provider.ParameterCache"/>
        <class name="DHKeyPairGenerator" line="37">
            <extends class="KeyPairGeneratorSpi"/>
            <comment line="58">
                parameters to use or null if not specified                
            </comment>
            <comment line="61">
                The size in bits of the prime modulus                
            </comment>
            <comment line="64">
                The size in bits of the random exponent (private value)                
            </comment>
            <comment line="67">
                The source of randomness                
            </comment>
            <javadoc line="37">
                This class represents the key pair generator for Diffie-Hellman key pairs.
                  &lt;p&gt;This key pair generator may be initialized in two different ways:
                  &lt;ul&gt;
                  &lt;li&gt;By providing the size in bits of the prime modulus -
                  This will be used to create a prime modulus and base generator, which will
                  then be used to create the Diffie-Hellman key pair. The default size of the
                  prime modulus is 1024 bits.
                  &lt;li&gt;By providing a prime modulus and base generator
                  &lt;/ul&gt;                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    java.security.KeyPairGenerator                    
                </see>
            </javadoc>
            <declaration name="params" type="DHParameterSpec" line="58"/>
            <declaration name="pSize" type="int" line="61"/>
            <declaration name="lSize" type="int" line="64"/>
            <declaration name="random" type="SecureRandom" line="67"/>
            <method name="DHKeyPairGenerator" type="constructor" line="69"/>
            <javadoc line="74">
                Initializes this key pair generator for a certain keysize and source of
                  randomness.
                  The keysize is specified as the size in bits of the prime modulus.                
                <param>
                    keysize the keysize (size of prime modulus) in bits                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
            </javadoc>
            <method name="initialize" type="void" line="82">
                <params>
                    <param name="keysize" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="83"/>
            </method>
            <javadoc line="95">
                Initializes this key pair generator for the specified parameter
                  set and source of randomness.
                  &lt;p&gt;The given parameter set contains the prime modulus, the base
                  generator, and optionally the requested size in bits of the random
                  exponent (private value).                
                <param>
                    params the parameter set used to generate the key pair                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if the given parameters
                      are inappropriate for this key pair generator                    
                </exception>
            </javadoc>
            <method name="initialize" type="void" line="110">
                <params>
                    <param name="algParams" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <comment line="126">
                    exponent size is optional, could be 0                    
                </comment>
                <comment line="129">
                    Require exponentSize &lt; primeSize                    
                </comment>
                <scope line="111"/>
                <scope line="119"/>
                <scope line="129"/>
            </method>
            <javadoc line="136">
                Generates a key pair.                
                <return>
                    the new key pair                    
                </return>
            </javadoc>
            <method name="generateKeyPair" type="KeyPair" line="141">
                <comment line="151">
                    should never happen                    
                </comment>
                <comment line="160">
                    use an exponent size of (pSize / 2) but at least 384 bits                    
                </comment>
                <comment line="162">
                    if lSize is larger than pSize, limit by pSize                    
                </comment>
                <comment line="169">
                    Handbook of Applied Cryptography:  Menezes, et.al.
                     Repeat if the following does not hold:
                         1 &lt;= x &lt;= p-2                    
                </comment>
                <comment line="175">
                    generate random x up to 2^lSize bits long                    
                </comment>
                <comment line="180">
                    calculate public value y                    
                </comment>
                <scope line="142"/>
                <scope line="146">
                    <scope line="147"/>
                    <scope line="149"/>
                </scope>
                <declaration name="p" type="BigInteger" line="155"/>
                <declaration name="g" type="BigInteger" line="156"/>
                <scope line="158"/>
                <declaration name="x" type="BigInteger" line="165"/>
                <declaration name="pMinus2" type="BigInteger" line="166"/>
                <scope line="173"/>
                <declaration name="y" type="BigInteger" line="180"/>
                <declaration name="pubKey" type="DHPublicKey" line="182"/>
                <declaration name="privKey" type="DHPrivateKey" line="183"/>
            </method>
        </class>
    </source>