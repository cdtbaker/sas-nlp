<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.InvalidKeyException"/>
        <class name="OutputFeedback" line="30">
            <extends class="FeedbackCipher"/>
            <comment line="44">
                output buffer                
            </comment>
            <comment line="49">
                register buffer                
            </comment>
            <comment line="54">
                number of bytes for each stream unit, defaults to the blocksize
                 of the embedded cipher                
            </comment>
            <comment line="60">
                variables for save/restore calls                
            </comment>
            <javadoc line="30">
                This class represents ciphers in output-feedback (OFB) mode.
                  &lt;p&gt;This mode is implemented independently of a particular cipher.
                  Ciphers to which this mode should apply (e.g., DES) must be
                  &lt;i&gt;plugged-in&lt;/i&gt; using the constructor.
                  &lt;p&gt;NOTE: This class does not deal with buffering or padding.                
                <author>
                    Gigi Ankeny                    
                </author>
            </javadoc>
            <declaration name="k" type="byte[]" line="46"/>
            <declaration name="register" type="byte[]" line="51"/>
            <declaration name="numBytes" type="int" line="57"/>
            <declaration name="registerSave" type="byte[]" line="60"/>
            <method name="OutputFeedback" type="constructor" line="62">
                <params>
                    <param name="embeddedCipher" type="SymmetricCipher"/>
                    <param name="numBytes" type="int"/>
                </params>
                <scope line="64"/>
            </method>
            <javadoc line="72">
                Gets the name of this feedback mode.                
                <return>
                    the string <code>OFB</code>                    
                </return>
            </javadoc>
            <method name="getFeedback" type="String" line="77"/>
            <javadoc line="81">
                Initializes the cipher in the specified mode with the given key
                  and iv.                
                <param>
                    decrypting flag indicating encryption or decryption                    
                </param>
                <param>
                    algorithm the algorithm name                    
                </param>
                <param>
                    key the key                    
                </param>
                <param>
                    iv the iv                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this cipher                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="94">
                <params>
                    <param name="decrypting" type="boolean"/>
                    <param name="algorithm" type="String"/>
                    <param name="key" type="byte[]"/>
                    <param name="iv" type="byte[]"/>
                </params>
                <comment line="101">
                    always encrypt mode for embedded cipher                    
                </comment>
                <scope line="95"/>
            </method>
            <javadoc line="104">
                Resets the iv to its original value.
                  This is used when doFinal is called in the Cipher class, so that the
                  cipher can be reused (with its original iv).                
            </javadoc>
            <method name="reset" type="void" line="109"/>
            <javadoc line="113">
                Save the current content of this cipher.                
            </javadoc>
            <method name="save" type="void" line="116">
                <scope line="117"/>
            </method>
            <javadoc line="123">
                Restores the content of this cipher to the previous saved one.                
            </javadoc>
            <method name="restore" type="void" line="126"/>
            <javadoc line="130">
                Performs encryption operation.
                  &lt;p&gt;The input plain text &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(plainOffset + len - 1)&lt;/code&gt;, is encrypted.
                  The result is stored in &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt;.
                  &lt;p&gt;It is the application&apos;s responsibility to make sure that
                  &lt;code&gt;plainLen&lt;/code&gt; is a multiple of the stream unit size
                  &lt;code&gt;numBytes&lt;/code&gt;, as any excess bytes are ignored.
                  &lt;p&gt;It is also the application&apos;s responsibility to make sure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.
                  (This check is omitted here, to avoid double checking.)                
                <param>
                    plain the buffer with the input data to be encrypted                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
                <param>
                    plainLen the length of the input data                    
                </param>
                <param>
                    cipher the buffer for the result                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipher</code>                    
                </param>
            </javadoc>
            <method name="encrypt" type="void" line="155">
                <params>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                    <param name="plainLen" type="int"/>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                </params>
                <declaration name="i" type="int" line="156"/>
                <declaration name="len" type="int" line="157"/>
                <declaration name="loopCount" type="int" line="158"/>
                <declaration name="oddBytes" type="int" line="159"/>
                <scope line="161">
                    <scope line="164"/>
                    <scope line="171"/>
                </scope>
                <scope line="178">
                    <scope line="181"/>
                    <scope line="189"/>
                </scope>
            </method>
            <javadoc line="200">
                Performs decryption operation.
                  &lt;p&gt;The input cipher text &lt;code&gt;cipher&lt;/code&gt;, starting at
                  &lt;code&gt;cipherOffset&lt;/code&gt; and ending at
                  &lt;code&gt;(cipherOffset + len - 1)&lt;/code&gt;, is decrypted.
                  The result is stored in &lt;code&gt;plain&lt;/code&gt;, starting at
                  &lt;code&gt;plainOffset&lt;/code&gt;.
                  &lt;p&gt;It is the application&apos;s responsibility to make sure that
                  &lt;code&gt;cipherLen&lt;/code&gt; is a multiple of the stream unit size
                  &lt;code&gt;numBytes&lt;/code&gt;, as any excess bytes are ignored.
                  &lt;p&gt;It is also the application&apos;s responsibility to make sure that
                  &lt;code&gt;init&lt;/code&gt; has been called before this method is called.
                  (This check is omitted here, to avoid double checking.)                
                <param>
                    cipher the buffer with the input data to be decrypted                    
                </param>
                <param>
                    cipherOffset the offset in <code>cipherOffset</code>                    
                </param>
                <param>
                    cipherLen the length of the input data                    
                </param>
                <param>
                    plain the buffer for the result                    
                </param>
                <param>
                    plainOffset the offset in <code>plain</code>                    
                </param>
            </javadoc>
            <method name="decrypt" type="void" line="225">
                <params>
                    <param name="cipher" type="byte[]"/>
                    <param name="cipherOffset" type="int"/>
                    <param name="cipherLen" type="int"/>
                    <param name="plain" type="byte[]"/>
                    <param name="plainOffset" type="int"/>
                </params>
                <comment line="227">
                    OFB encrypt and decrypt are identical                    
                </comment>
            </method>
        </class>
    </source>