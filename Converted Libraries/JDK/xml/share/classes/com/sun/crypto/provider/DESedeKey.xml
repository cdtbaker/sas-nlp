<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.KeyRep"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.spec.DESedeKeySpec"/>
        <class name="DESedeKey" line="6">
            <implements interface="SecretKey"/>
            <javadoc line="6">
                This class represents a DES-EDE key.                
                <author>
                    Jan Luehe                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="11"/>
            <declaration name="key" type="byte[]" line="12"/>
            <javadoc line="13">
                Creates a DES-EDE key from a given key.                
                <param>
                    key the given key                    
                </param>
                <exception>
                    InvalidKeyException if the given key has a wrong size                    
                </exception>
            </javadoc>
            <method name="DESedeKey" type="constructor" line="18">
                <params>
                    <param name="key" type="byte[]"/>
                </params>
            </method>
            <javadoc line="21">
                Uses the first 24 bytes in &lt;code&gt;key&lt;/code&gt;, beginning at
                  &lt;code&gt;offset&lt;/code&gt;, as the DES-EDE key                
                <param>
                    key the buffer with the DES-EDE key                    
                </param>
                <param>
                    offset the offset in <code>key</code>, where the DES-EDE key
                      starts                    
                </param>
                <exception>
                    InvalidKeyException if the given key has a wrong size                    
                </exception>
            </javadoc>
            <method name="DESedeKey" type="constructor" line="29">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
                <scope line="30"/>
            </method>
            <method name="getEncoded" type="byte[]" line="39"/>
            <method name="getAlgorithm" type="String" line="42"/>
            <method name="getFormat" type="String" line="45"/>
            <javadoc line="48">
                Calculates a hash code value for the object.
                  Objects that are equal will also have the same hashcode.                
            </javadoc>
            <method name="hashCode" type="int" line="52">
                <declaration name="retval" type="int" line="53"/>
                <scope line="54"/>
            </method>
            <method name="equals" type="boolean" line="59">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="thatAlg" type="String" line="62"/>
                <declaration name="thatKey" type="byte[]" line="64"/>
                <declaration name="ret" type="boolean" line="65"/>
            </method>
            <javadoc line="69">
                readObject is called to restore the state of this key from
                  a stream.                
            </javadoc>
            <method name="readObject" type="void" line="73">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="77">
                Replace the DESede key to be serialized.                
                <return>
                    the standard KeyRep object to be serialized                    
                </return>
                <throws>
                    java.io.ObjectStreamException if a new object representing
                      this DESede key could not be created                    
                </throws>
            </javadoc>
            <method name="writeReplace" type="Object" line="83"/>
            <javadoc line="86">
                Ensures that the bytes of this key are
                  set to zero when there are no more references to it.                
            </javadoc>
            <method name="finalize" type="void" line="90">
                <scope line="91">
                    <scope line="92"/>
                </scope>
                <scope line="97"/>
            </method>
        </class>
    </source>