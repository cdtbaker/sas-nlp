<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.util.Arrays"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="javax.crypto.MacSpi"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="java.security"/>
        <import package="java.security.spec"/>
        <class name="HmacCore" line="37">
            <comment line="50">
                inner padding - key XORd with ipad                
            </comment>
            <comment line="51">
                outer padding - key XORd with opad                
            </comment>
            <comment line="52">
                Is this the first data to be processed?                
            </comment>
            <comment line="234">
                Clones this object.                
            </comment>
            <comment line="241">
                nested static class for the HmacSHA256 implementation                
            </comment>
            <comment line="277">
                nested static class for the HmacSHA384 implementation                
            </comment>
            <comment line="313">
                nested static class for the HmacSHA512 implementation                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="37">
                This class constitutes the core of HMAC-&lt;MD&gt; algorithms, where
                  &lt;MD&gt; can be SHA1 or MD5, etc. See RFC 2104 for spec.
                  It also contains the implementation classes for the SHA-256,
                  SHA-384, and SHA-512 HMACs.                
                <author>
                    Jan Luehe                    
                </author>
            </javadoc>
            <declaration name="md" type="MessageDigest" line="48"/>
            <declaration name="k_ipad" type="byte[]" line="49"/>
            <declaration name="k_opad" type="byte[]" line="50"/>
            <declaration name="first" type="boolean" line="51"/>
            <declaration name="blockLen" type="int" line="53"/>
            <javadoc line="55">
                Standard constructor, creates a new HmacCore instance using the
                  specified MessageDigest object.                
            </javadoc>
            <method name="HmacCore" type="constructor" line="59">
                <params>
                    <param name="md" type="MessageDigest"/>
                    <param name="bl" type="int"/>
                </params>
            </method>
            <javadoc line="67">
                Standard constructor, creates a new HmacCore instance instantiating
                  a MessageDigest of the specified name.                
            </javadoc>
            <method name="HmacCore" type="constructor" line="71">
                <params>
                    <param name="digestAlgorithm" type="String"/>
                    <param name="bl" type="int"/>
                </params>
            </method>
            <javadoc line="75">
                Constructor used for cloning.                
            </javadoc>
            <method name="HmacCore" type="constructor" line="78">
                <params>
                    <param name="other" type="HmacCore"/>
                </params>
            </method>
            <javadoc line="86">
                Returns the length of the HMAC in bytes.                
                <return>
                    the HMAC length in bytes.                    
                </return>
            </javadoc>
            <method name="getDigestLength" type="int" line="91"/>
            <javadoc line="95">
                Initializes the HMAC with the given secret key and algorithm parameters.                
                <param>
                    key the secret key.                    
                </param>
                <param>
                    params the algorithm parameters.                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this MAC.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given algorithm
                      parameters are inappropriate for this MAC.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="107">
                <params>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
                <comment line="124">
                    if key is longer than the block length, reset it using
                     the message digest object.                    
                </comment>
                <comment line="128">
                    now erase the secret                    
                </comment>
                <comment line="133">
                    XOR k with ipad and opad, respectively                    
                </comment>
                <comment line="140">
                    now erase the secret                    
                </comment>
                <scope line="109"/>
                <scope line="114"/>
                <declaration name="secret" type="byte[]" line="118"/>
                <scope line="119"/>
                <scope line="125">
                    <declaration name="tmp" type="byte[]" line="126"/>
                </scope>
                <scope line="133">
                    <declaration name="si" type="int" line="134"/>
                </scope>
            </method>
            <javadoc line="146">
                Processes the given byte.                
                <param>
                    input the input byte to be processed.                    
                </param>
            </javadoc>
            <method name="update" type="void" line="151">
                <params>
                    <param name="input" type="byte"/>
                </params>
                <comment line="154">
                    compute digest for 1st pass; start with inner pad                    
                </comment>
                <comment line="159">
                    add the passed byte to the inner digest                    
                </comment>
                <scope line="152"/>
            </method>
            <javadoc line="162">
                Processes the first &lt;code&gt;len&lt;/code&gt; bytes in &lt;code&gt;input&lt;/code&gt;,
                  starting at &lt;code&gt;offset&lt;/code&gt;.                
                <param>
                    input the input buffer.                    
                </param>
                <param>
                    offset the offset in <code>input</code> where the input starts.                    
                </param>
                <param>
                    len the number of bytes to process.                    
                </param>
            </javadoc>
            <method name="update" type="void" line="170">
                <params>
                    <param name="input" type="byte"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <comment line="173">
                    compute digest for 1st pass; start with inner pad                    
                </comment>
                <comment line="178">
                    add the selected part of an array of bytes to the inner digest                    
                </comment>
                <scope line="171"/>
            </method>
            <method name="update" type="void" line="181">
                <params>
                    <param name="input" type="ByteBuffer"/>
                </params>
                <comment line="184">
                    compute digest for 1st pass; start with inner pad                    
                </comment>
                <scope line="182"/>
            </method>
            <javadoc line="191">
                Completes the HMAC computation and resets the HMAC for further use,
                  maintaining the secret key that the HMAC was initialized with.                
                <return>
                    the HMAC result.                    
                </return>
            </javadoc>
            <method name="doFinal" type="byte[]" line="197">
                <comment line="200">
                    compute digest for 1st pass; start with inner pad                    
                </comment>
                <comment line="207">
                    finish the inner digest                    
                </comment>
                <comment line="210">
                    compute digest for 2nd pass; start with outer pad                    
                </comment>
                <comment line="212">
                    add result of 1st hash                    
                </comment>
                <comment line="218">
                    should never occur                    
                </comment>
                <scope line="198"/>
                <scope line="201"/>
                <scope line="205">
                    <declaration name="tmp" type="byte[]" line="207"/>
                </scope>
                <scope line="216"/>
            </method>
            <javadoc line="222">
                Resets the HMAC for further use, maintaining the secret key that the
                  HMAC was initialized with.                
            </javadoc>
            <method name="reset" type="void" line="226">
                <scope line="227"/>
            </method>
            <method name="clone" type="Object" line="236"/>
            <class name="HmacSHA256" line="241">
                <extends class="MacSpi"/>
                <implements interface="Cloneable"/>
                <declaration name="core" type="HmacCore" line="242"/>
                <method name="HmacSHA256" type="constructor" line="243"/>
                <method name="HmacSHA256" type="constructor" line="246">
                    <params>
                        <param name="base" type="HmacSHA256"/>
                    </params>
                </method>
                <method name="engineGetMacLength" type="int" line="249"/>
                <method name="engineInit" type="void" line="253">
                    <params>
                        <param name="key" type="Key"/>
                        <param name="params" type="AlgorithmParameterSpec"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="256">
                    <params>
                        <param name="input" type="byte"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="259">
                    <params>
                        <param name="input" type="byte"/>
                        <param name="offset" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="262">
                    <params>
                        <param name="input" type="ByteBuffer"/>
                    </params>
                </method>
                <method name="engineDoFinal" type="byte[]" line="265"/>
                <method name="engineReset" type="void" line="268"/>
                <method name="clone" type="Object" line="271"/>
            </class>
            <class name="HmacSHA384" line="277">
                <extends class="MacSpi"/>
                <implements interface="Cloneable"/>
                <declaration name="core" type="HmacCore" line="278"/>
                <method name="HmacSHA384" type="constructor" line="279"/>
                <method name="HmacSHA384" type="constructor" line="282">
                    <params>
                        <param name="base" type="HmacSHA384"/>
                    </params>
                </method>
                <method name="engineGetMacLength" type="int" line="285"/>
                <method name="engineInit" type="void" line="289">
                    <params>
                        <param name="key" type="Key"/>
                        <param name="params" type="AlgorithmParameterSpec"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="292">
                    <params>
                        <param name="input" type="byte"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="295">
                    <params>
                        <param name="input" type="byte"/>
                        <param name="offset" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="298">
                    <params>
                        <param name="input" type="ByteBuffer"/>
                    </params>
                </method>
                <method name="engineDoFinal" type="byte[]" line="301"/>
                <method name="engineReset" type="void" line="304"/>
                <method name="clone" type="Object" line="307"/>
            </class>
            <class name="HmacSHA512" line="313">
                <extends class="MacSpi"/>
                <implements interface="Cloneable"/>
                <declaration name="core" type="HmacCore" line="314"/>
                <method name="HmacSHA512" type="constructor" line="315"/>
                <method name="HmacSHA512" type="constructor" line="318">
                    <params>
                        <param name="base" type="HmacSHA512"/>
                    </params>
                </method>
                <method name="engineGetMacLength" type="int" line="321"/>
                <method name="engineInit" type="void" line="325">
                    <params>
                        <param name="key" type="Key"/>
                        <param name="params" type="AlgorithmParameterSpec"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="328">
                    <params>
                        <param name="input" type="byte"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="331">
                    <params>
                        <param name="input" type="byte"/>
                        <param name="offset" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <method name="engineUpdate" type="void" line="334">
                    <params>
                        <param name="input" type="ByteBuffer"/>
                    </params>
                </method>
                <method name="engineDoFinal" type="byte[]" line="337"/>
                <method name="engineReset" type="void" line="340"/>
                <method name="clone" type="Object" line="343"/>
            </class>
        </class>
    </source>