<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.Key"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.KeyFactory"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.spec.PKCS8EncodedKeySpec"/>
        <import package="java.security.spec.X509EncodedKeySpec"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.CipherSpi"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.IllegalBlockSizeException"/>
        <import package="javax.crypto.BadPaddingException"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <class name="CipherWithWrappingSpi" line="46">
            <extends class="CipherSpi"/>
            <javadoc line="46">
                This class entends the javax.crypto.CipherSpi class with a concrete
                  implementation of the methods for wrapping and unwrapping
                  keys.                
                <author>
                    Sharon Liu                    
                </author>
                <see>
                    javax.crypto.CipherSpi                    
                </see>
                <see>
                    BlowfishCipher                    
                </see>
                <see>
                    DESCipher                    
                </see>
                <see>
                    PBEWithMD5AndDESCipher                    
                </see>
            </javadoc>
            <javadoc line="62">
                Wrap a key.                
                <param>
                    key the key to be wrapped.                    
                </param>
                <return>
                    the wrapped key.                    
                </return>
                <exception>
                    IllegalBlockSizeException if this cipher is a block
                      cipher, no padding has been requested, and the length of the
                      encoding of the key to be wrapped is not a
                      multiple of the block size.                    
                </exception>
                <exception>
                    InvalidKeyException if it is impossible or unsafe to
                      wrap the key with this cipher (e.g., a hardware protected key is
                      being passed to a software only cipher).                    
                </exception>
            </javadoc>
            <method name="engineWrap" type="byte[]" line="80">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <comment line="92">
                    Should never happen                    
                </comment>
                <declaration name="result" type="byte[]" line="81"/>
                <scope line="83">
                    <declaration name="encodedKey" type="byte[]" line="84"/>
                    <scope line="85"/>
                </scope>
                <scope line="91"/>
            </method>
            <javadoc line="98">
                Unwrap a previously wrapped key.                
                <param>
                    wrappedKey the key to be unwrapped.                    
                </param>
                <param>
                    wrappedKeyAlgorithm the algorithm the wrapped key is for.                    
                </param>
                <param>
                    wrappedKeyType the type of the wrapped key.
                      This is one of <code>Cipher.SECRET_KEY</code>,
                      <code>Cipher.PRIVATE_KEY</code>, or <code>Cipher.PUBLIC_KEY</code>.                    
                </param>
                <return>
                    the unwrapped key.                    
                </return>
                <exception>
                    InvalidKeyException if <code>wrappedKey</code> does not
                      represent a wrapped key, or if the algorithm associated with the
                      wrapped key is different from <code>wrappedKeyAlgorithm</code>
                      and/or its key type is different from <code>wrappedKeyType</code>.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if no installed providers
                      can create keys for the <code>wrappedKeyAlgorithm</code>.                    
                </exception>
            </javadoc>
            <method name="engineUnwrap" type="Key" line="123">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="wrappedKeyAlgorithm" type="String"/>
                    <param name="wrappedKeyType" type="int"/>
                </params>
                <declaration name="encodedKey" type="byte[]" line="124"/>
                <declaration name="result" type="Key" line="125"/>
                <scope line="127"/>
                <scope line="130"/>
                <scope line="132"/>
            </method>
            <javadoc line="155">
                Construct a public key from its encoding.                
                <param>
                    encodedKey the encoding of a public key.                    
                </param>
                <param>
                    encodedKeyAlgorithm the algorithm the encodedKey is for.                    
                </param>
                <return>
                    a public key constructed from the encodedKey.                    
                </return>
            </javadoc>
            <method name="constructPublicKey" type="PublicKey" line="167">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
                <comment line="176">
                    Try to see whether there is another                    
                </comment>
                <comment line="177">
                    provider which supports this algorithm                    
                </comment>
                <comment line="190">
                    Should never happen.                    
                </comment>
                <comment line="193">
                    Should never happen.                    
                </comment>
                <comment line="195">
                    Should never happen.                    
                </comment>
                <declaration name="key" type="PublicKey" line="168"/>
                <scope line="170">
                    <declaration name="keyFactory" type="KeyFactory" line="171"/>
                    <declaration name="keySpec" type="X509EncodedKeySpec" line="173"/>
                </scope>
                <scope line="175">
                    <scope line="178">
                        <declaration name="keyFactory" type="KeyFactory" line="179"/>
                        <declaration name="keySpec" type="X509EncodedKeySpec" line="181"/>
                    </scope>
                    <scope line="184"/>
                    <scope line="189"/>
                </scope>
                <scope line="192"/>
                <scope line="194"/>
            </method>
            <javadoc line="201">
                Construct a private key from its encoding.                
                <param>
                    encodedKey the encoding of a private key.                    
                </param>
                <param>
                    encodedKeyAlgorithm the algorithm the wrapped key is for.                    
                </param>
                <return>
                    a private key constructed from the encodedKey.                    
                </return>
            </javadoc>
            <method name="constructPrivateKey" type="PrivateKey" line="213">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
                <comment line="222">
                    Try to see whether there is another                    
                </comment>
                <comment line="223">
                    provider which supports this algorithm                    
                </comment>
                <comment line="236">
                    Should never happen.                    
                </comment>
                <comment line="239">
                    Should never happen.                    
                </comment>
                <comment line="241">
                    Should never happen.                    
                </comment>
                <declaration name="key" type="PrivateKey" line="214"/>
                <scope line="216">
                    <declaration name="keyFactory" type="KeyFactory" line="217"/>
                    <declaration name="keySpec" type="PKCS8EncodedKeySpec" line="219"/>
                </scope>
                <scope line="221">
                    <scope line="224">
                        <declaration name="keyFactory" type="KeyFactory" line="225"/>
                        <declaration name="keySpec" type="PKCS8EncodedKeySpec" line="227"/>
                    </scope>
                    <scope line="230"/>
                    <scope line="235"/>
                </scope>
                <scope line="238"/>
                <scope line="240"/>
            </method>
            <javadoc line="247">
                Construct a secret key from its encoding.                
                <param>
                    encodedKey the encoding of a secret key.                    
                </param>
                <param>
                    encodedKeyAlgorithm the algorithm the secret key is for.                    
                </param>
                <return>
                    a secret key constructed from the encodedKey.                    
                </return>
            </javadoc>
            <method name="constructSecretKey" type="SecretKey" line="258">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
            </method>
        </class>
    </source>