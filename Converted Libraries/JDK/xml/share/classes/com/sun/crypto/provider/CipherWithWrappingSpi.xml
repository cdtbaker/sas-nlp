<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.security.Key"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.PrivateKey"/>
        <import package="java.security.KeyFactory"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.spec.PKCS8EncodedKeySpec"/>
        <import package="java.security.spec.X509EncodedKeySpec"/>
        <import package="java.security.spec.InvalidKeySpecException"/>
        <import package="javax.crypto.Cipher"/>
        <import package="javax.crypto.CipherSpi"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.crypto.IllegalBlockSizeException"/>
        <import package="javax.crypto.BadPaddingException"/>
        <import package="javax.crypto.spec.SecretKeySpec"/>
        <class name="CipherWithWrappingSpi" line="18">
            <extends class="CipherSpi"/>
            <javadoc line="18">
                This class entends the javax.crypto.CipherSpi class with a concrete
                  implementation of the methods for wrapping and unwrapping
                  keys.                
                <author>
                    Sharon Liu                    
                </author>
                <see>
                    javax.crypto.CipherSpi                    
                </see>
                <see>
                    BlowfishCipher                    
                </see>
                <see>
                    DESCipher                    
                </see>
                <see>
                    PBEWithMD5AndDESCipher                    
                </see>
            </javadoc>
            <javadoc line="29">
                Wrap a key.                
                <param>
                    key the key to be wrapped.                    
                </param>
                <return>
                    the wrapped key.                    
                </return>
                <exception>
                    IllegalBlockSizeException if this cipher is a block
                      cipher, no padding has been requested, and the length of the
                      encoding of the key to be wrapped is not a
                      multiple of the block size.                    
                </exception>
                <exception>
                    InvalidKeyException if it is impossible or unsafe to
                      wrap the key with this cipher (e.g., a hardware protected key is
                      being passed to a software only cipher).                    
                </exception>
            </javadoc>
            <method name="engineWrap" type="byte[]" line="41">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="result" type="byte[]" line="42"/>
                <scope line="43">
                    <declaration name="encodedKey" type="byte[]" line="44"/>
                    <scope line="45"/>
                </scope>
                <scope line="50"/>
            </method>
            <javadoc line="54">
                Unwrap a previously wrapped key.                
                <param>
                    wrappedKey the key to be unwrapped.                    
                </param>
                <param>
                    wrappedKeyAlgorithm the algorithm the wrapped key is for.                    
                </param>
                <param>
                    wrappedKeyType the type of the wrapped key.
                      This is one of &lt;code&gt;Cipher.SECRET_KEY&lt;/code&gt;,
                      &lt;code&gt;Cipher.PRIVATE_KEY&lt;/code&gt;, or &lt;code&gt;Cipher.PUBLIC_KEY&lt;/code&gt;.                    
                </param>
                <return>
                    the unwrapped key.                    
                </return>
                <exception>
                    InvalidKeyException if &lt;code&gt;wrappedKey&lt;/code&gt; does not
                      represent a wrapped key, or if the algorithm associated with the
                      wrapped key is different from &lt;code&gt;wrappedKeyAlgorithm&lt;/code&gt;
                      and/or its key type is different from &lt;code&gt;wrappedKeyType&lt;/code&gt;.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if no installed providers
                      can create keys for the &lt;code&gt;wrappedKeyAlgorithm&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="engineUnwrap" type="Key" line="69">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="wrappedKeyAlgorithm" type="String"/>
                    <param name="wrappedKeyType" type="int"/>
                </params>
                <declaration name="encodedKey" type="byte[]" line="70"/>
                <declaration name="result" type="Key" line="71"/>
                <scope line="72"/>
                <scope line="75"/>
                <scope line="78"/>
            </method>
            <javadoc line="94">
                Construct a public key from its encoding.                
                <param>
                    encodedKey the encoding of a public key.                    
                </param>
                <param>
                    encodedKeyAlgorithm the algorithm the encodedKey is for.                    
                </param>
                <return>
                    a public key constructed from the encodedKey.                    
                </return>
            </javadoc>
            <method name="constructPublicKey" type="PublicKey" line="100">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
                <declaration name="key" type="PublicKey" line="101"/>
                <scope line="102">
                    <declaration name="keyFactory" type="KeyFactory" line="103"/>
                    <declaration name="keySpec" type="X509EncodedKeySpec" line="104"/>
                </scope>
                <scope line="107">
                    <scope line="108">
                        <declaration name="keyFactory" type="KeyFactory" line="109"/>
                        <declaration name="keySpec" type="X509EncodedKeySpec" line="110"/>
                    </scope>
                    <scope line="113"/>
                    <scope line="116"/>
                </scope>
                <scope line="119"/>
                <scope line="121"/>
            </method>
            <javadoc line="125">
                Construct a private key from its encoding.                
                <param>
                    encodedKey the encoding of a private key.                    
                </param>
                <param>
                    encodedKeyAlgorithm the algorithm the wrapped key is for.                    
                </param>
                <return>
                    a private key constructed from the encodedKey.                    
                </return>
            </javadoc>
            <method name="constructPrivateKey" type="PrivateKey" line="131">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
                <declaration name="key" type="PrivateKey" line="132"/>
                <scope line="133">
                    <declaration name="keyFactory" type="KeyFactory" line="134"/>
                    <declaration name="keySpec" type="PKCS8EncodedKeySpec" line="135"/>
                </scope>
                <scope line="138">
                    <scope line="139">
                        <declaration name="keyFactory" type="KeyFactory" line="140"/>
                        <declaration name="keySpec" type="PKCS8EncodedKeySpec" line="141"/>
                    </scope>
                    <scope line="144"/>
                    <scope line="147"/>
                </scope>
                <scope line="150"/>
                <scope line="152"/>
            </method>
            <javadoc line="156">
                Construct a secret key from its encoding.                
                <param>
                    encodedKey the encoding of a secret key.                    
                </param>
                <param>
                    encodedKeyAlgorithm the algorithm the secret key is for.                    
                </param>
                <return>
                    a secret key constructed from the encodedKey.                    
                </return>
            </javadoc>
            <method name="constructSecretKey" type="SecretKey" line="162">
                <params>
                    <param name="encodedKey" type="byte[]"/>
                    <param name="encodedKeyAlgorithm" type="String"/>
                </params>
            </method>
        </class>
    </source>