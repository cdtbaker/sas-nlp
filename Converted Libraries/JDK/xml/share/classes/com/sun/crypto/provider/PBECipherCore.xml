<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.security"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <class name="PBECipherCore" line="7">
            <javadoc line="7">
                This class represents password-based encryption as defined by the PKCS #5
                  standard.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    javax.crypto.Cipher                    
                </see>
            </javadoc>
            <declaration name="cipher" type="CipherCore" line="14"/>
            <declaration name="md" type="MessageDigest" line="15"/>
            <declaration name="blkSize" type="int" line="16"/>
            <declaration name="algo" type="String" line="17"/>
            <declaration name="salt" type="byte[]" line="18"/>
            <declaration name="iCount" type="int" line="19"/>
            <javadoc line="20">
                Creates an instance of PBE Cipher using the specified CipherSpi
                  instance.                
            </javadoc>
            <method name="PBECipherCore" type="constructor" line="24">
                <params>
                    <param name="cipherAlg" type="String"/>
                </params>
                <scope line="26"/>
                <scope line="29"/>
                <scope line="32"/>
            </method>
            <javadoc line="39">
                Sets the mode of this cipher. This algorithm can only be run in CBC
                  mode.                
                <param>
                    mode the cipher mode                    
                </param>
                <exception>
                    NoSuchAlgorithmException if the requested cipher mode is
                      invalid                    
                </exception>
            </javadoc>
            <method name="setMode" type="void" line="46">
                <params>
                    <param name="mode" type="String"/>
                </params>
            </method>
            <javadoc line="49">
                Sets the padding mechanism of this cipher. This algorithm only uses
                  PKCS #5 padding.                
                <param>
                    padding the padding mechanism                    
                </param>
                <exception>
                    NoSuchPaddingException if the requested padding mechanism
                      is invalid                    
                </exception>
            </javadoc>
            <method name="setPadding" type="void" line="56">
                <params>
                    <param name="paddingScheme" type="String"/>
                </params>
            </method>
            <javadoc line="59">
                Returns the block size (in bytes).                
                <return>
                    the block size (in bytes)                    
                </return>
            </javadoc>
            <method name="getBlockSize" type="int" line="63"/>
            <javadoc line="66">
                Returns the length in bytes that an output buffer would need to be in
                  order to hold the result of the next &lt;code&gt;update&lt;/code&gt; or
                  &lt;code&gt;doFinal&lt;/code&gt; operation, given the input length
                  &lt;code&gt;inputLen&lt;/code&gt; (in bytes).
                  &lt;p&gt;This call takes into account any unprocessed (buffered) data from a
                  previous &lt;code&gt;update&lt;/code&gt; call, and padding.
                  &lt;p&gt;The actual output length of the next &lt;code&gt;update&lt;/code&gt; or
                  &lt;code&gt;doFinal&lt;/code&gt; call may be smaller than the length returned by
                  this method.                
                <param>
                    inputLen the input length (in bytes)                    
                </param>
                <return>
                    the required output buffer size (in bytes)                    
                </return>
            </javadoc>
            <method name="getOutputSize" type="int" line="79">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <javadoc line="82">
                Returns the initialization vector (IV) in a new buffer.
                  &lt;p&gt; This is useful in the case where a random IV has been created
                  (see &lt;a href = &quot;#init&quot;&gt;init&lt;/a&gt;),
                  or in the context of password-based encryption or
                  decryption, where the IV is derived from a user-supplied password.                
                <return>
                    the initialization vector in a new buffer, or null if the
                      underlying algorithm does not use an IV, or if the IV has not yet
                      been set.                    
                </return>
            </javadoc>
            <method name="getIV" type="byte[]" line="92"/>
            <javadoc line="95">
                Returns the parameters used with this cipher.
                  &lt;p&gt;The returned parameters may be the same that were used to initialize
                  this cipher, or may contain the default set of parameters or a set of
                  randomly generated parameters used by the underlying cipher
                  implementation (provided that the underlying cipher implementation
                  uses a default set of parameters or creates new parameters if it needs
                  parameters but was not initialized with any).                
                <return>
                    the parameters used with this cipher, or null if this cipher
                      does not use any parameters.                    
                </return>
            </javadoc>
            <method name="getParameters" type="AlgorithmParameters" line="106">
                <declaration name="params" type="AlgorithmParameters" line="107"/>
                <scope line="108"/>
                <declaration name="pbeSpec" type="PBEParameterSpec" line="112"/>
                <scope line="113"/>
                <scope line="116"/>
                <scope line="119"/>
                <scope line="122"/>
                <scope line="125"/>
            </method>
            <javadoc line="130">
                Initializes this cipher with a key, a set of
                  algorithm parameters, and a source of randomness.
                  The cipher is initialized for one of the following four operations:
                  encryption, decryption, key wrapping or key unwrapping, depending on
                  the value of &lt;code&gt;opmode&lt;/code&gt;.
                  &lt;p&gt;If this cipher (including its underlying feedback or padding scheme)
                  requires any random bytes, it will get them from &lt;code&gt;random&lt;/code&gt;.                
                <param>
                    opmode the operation mode of this cipher (this is one of
                      the following:
                      <code>ENCRYPT_MODE</code>, <code>DECRYPT_MODE</code>),
                      <code>WRAP_MODE</code> or <code>UNWRAP_MODE</code>)                    
                </param>
                <param>
                    key the encryption key                    
                </param>
                <param>
                    params the algorithm parameters                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      initializing this cipher                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given algorithm
                      parameters are inappropriate for this cipher                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="150">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="151"/>
                <scope line="154"/>
                <scope line="157"/>
                <scope line="161">
                    <scope line="162"/>
                    <scope line="166"/>
                    <scope line="170"/>
                </scope>
                <declaration name="derivedKey" type="byte[]" line="174"/>
                <declaration name="cipherKey" type="SecretKeySpec" line="175"/>
                <declaration name="ivSpec" type="IvParameterSpec" line="176"/>
            </method>
            <method name="deriveCipherKey" type="byte[]" line="179">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="result" type="byte[]" line="180"/>
                <declaration name="passwdBytes" type="byte[]" line="181"/>
                <scope line="182">
                    <declaration name="concat" type="byte[]" line="183"/>
                    <declaration name="toBeHashed" type="byte[]" line="187"/>
                    <scope line="188"/>
                </scope>
                <scope line="195">
                    <declaration name="i" type="int" line="196"/>
                    <scope line="197"/>
                    <scope line="200">
                        <scope line="201">
                            <declaration name="tmp" type="byte" line="202"/>
                        </scope>
                    </scope>
                    <declaration name="kBytes" type="byte[]" line="207"/>
                    <declaration name="iv" type="IvParameterSpec" line="208"/>
                    <declaration name="toBeHashed" type="byte[]" line="209"/>
                    <scope line="211">
                        <scope line="214"/>
                    </scope>
                </scope>
            </method>
            <method name="init" type="void" line="224">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="pbeSpec" type="PBEParameterSpec" line="225"/>
                <scope line="226">
                    <scope line="227"/>
                    <scope line="230"/>
                </scope>
            </method>
            <javadoc line="236">
                Continues a multiple-part encryption or decryption operation
                  (depending on how this cipher was initialized), processing another data
                  part.
                  &lt;p&gt;The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt;
                  buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt;, are processed, and the
                  result is stored in a new buffer.                
                <param>
                    input the input buffer                    
                </param>
                <param>
                    inputOffset the offset in <code>input</code> where the input
                      starts                    
                </param>
                <param>
                    inputLen the input length                    
                </param>
                <return>
                    the new buffer with the result                    
                </return>
            </javadoc>
            <method name="update" type="byte[]" line="249">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <javadoc line="252">
                Continues a multiple-part encryption or decryption operation
                  (depending on how this cipher was initialized), processing another data
                  part.
                  &lt;p&gt;The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt;
                  buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt;, are processed, and the
                  result is stored in the &lt;code&gt;output&lt;/code&gt; buffer, starting at
                  &lt;code&gt;outputOffset&lt;/code&gt;.                
                <param>
                    input the input buffer                    
                </param>
                <param>
                    inputOffset the offset in <code>input</code> where the input
                      starts                    
                </param>
                <param>
                    inputLen the input length                    
                </param>
                <param>
                    output the buffer for the result                    
                </param>
                <param>
                    outputOffset the offset in <code>output</code> where the result
                      is stored                    
                </param>
                <return>
                    the number of bytes stored in <code>output</code>                    
                </return>
                <exception>
                    ShortBufferException if the given output buffer is too small
                      to hold the result                    
                </exception>
            </javadoc>
            <method name="update" type="int" line="271">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                    <param name="output" type="byte[]"/>
                    <param name="outputOffset" type="int"/>
                </params>
            </method>
            <javadoc line="274">
                Encrypts or decrypts data in a single-part operation,
                  or finishes a multiple-part operation.
                  The data is encrypted or decrypted, depending on how this cipher was
                  initialized.
                  &lt;p&gt;The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt;
                  buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt;, and any input bytes that
                  may have been buffered during a previous &lt;code&gt;update&lt;/code&gt; operation,
                  are processed, with padding (if requested) being applied.
                  The result is stored in a new buffer.
                  &lt;p&gt;The cipher is reset to its initial state (uninitialized) after this
                  call.                
                <param>
                    input the input buffer                    
                </param>
                <param>
                    inputOffset the offset in <code>input</code> where the input
                      starts                    
                </param>
                <param>
                    inputLen the input length                    
                </param>
                <return>
                    the new buffer with the result                    
                </return>
                <exception>
                    IllegalBlockSizeException if this cipher is a block cipher,
                      no padding has been requested (only in encryption mode), and the total
                      input length of the data processed by this cipher is not a multiple of
                      block size                    
                </exception>
                <exception>
                    BadPaddingException if decrypting and padding is choosen,
                      but the last input data does not have proper padding bytes.                    
                </exception>
            </javadoc>
            <method name="doFinal" type="byte[]" line="298">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                </params>
            </method>
            <javadoc line="301">
                Encrypts or decrypts data in a single-part operation,
                  or finishes a multiple-part operation.
                  The data is encrypted or decrypted, depending on how this cipher was
                  initialized.
                  &lt;p&gt;The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt;
                  buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt;, and any input bytes that
                  may have been buffered during a previous &lt;code&gt;update&lt;/code&gt; operation,
                  are processed, with padding (if requested) being applied.
                  The result is stored in the &lt;code&gt;output&lt;/code&gt; buffer, starting at
                  &lt;code&gt;outputOffset&lt;/code&gt;.
                  &lt;p&gt;The cipher is reset to its initial state (uninitialized) after this
                  call.                
                <param>
                    input the input buffer                    
                </param>
                <param>
                    inputOffset the offset in <code>input</code> where the input
                      starts                    
                </param>
                <param>
                    inputLen the input length                    
                </param>
                <param>
                    output the buffer for the result                    
                </param>
                <param>
                    outputOffset the offset in <code>output</code> where the result
                      is stored                    
                </param>
                <return>
                    the number of bytes stored in <code>output</code>                    
                </return>
                <exception>
                    IllegalBlockSizeException if this cipher is a block cipher,
                      no padding has been requested (only in encryption mode), and the total
                      input length of the data processed by this cipher is not a multiple of
                      block size                    
                </exception>
                <exception>
                    ShortBufferException if the given output buffer is too small
                      to hold the result                    
                </exception>
                <exception>
                    BadPaddingException if decrypting and padding is choosen,
                      but the last input data does not have proper padding bytes.                    
                </exception>
            </javadoc>
            <method name="doFinal" type="int" line="331">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                    <param name="output" type="byte[]"/>
                    <param name="outputOffset" type="int"/>
                </params>
            </method>
            <javadoc line="334">
                Wrap a key.                
                <param>
                    key the key to be wrapped.                    
                </param>
                <return>
                    the wrapped key.                    
                </return>
                <exception>
                    IllegalBlockSizeException if this cipher is a block
                      cipher, no padding has been requested, and the length of the
                      encoding of the key to be wrapped is not a
                      multiple of the block size.                    
                </exception>
                <exception>
                    InvalidKeyException if it is impossible or unsafe to
                      wrap the key with this cipher (e.g., a hardware protected key is
                      being passed to a software only cipher).                    
                </exception>
            </javadoc>
            <method name="wrap" type="byte[]" line="346">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="result" type="byte[]" line="347"/>
                <scope line="348">
                    <declaration name="encodedKey" type="byte[]" line="349"/>
                    <scope line="350"/>
                </scope>
                <scope line="355"/>
            </method>
            <javadoc line="359">
                Unwrap a previously wrapped key.                
                <param>
                    wrappedKey the key to be unwrapped.                    
                </param>
                <param>
                    wrappedKeyAlgorithm the algorithm the wrapped key is for.                    
                </param>
                <param>
                    wrappedKeyType the type of the wrapped key.
                      This is one of <code>Cipher.SECRET_KEY</code>,
                      <code>Cipher.PRIVATE_KEY</code>, or <code>Cipher.PUBLIC_KEY</code>.                    
                </param>
                <return>
                    the unwrapped key.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no installed providers
                      can create keys of type <code>wrappedKeyType</code> for the
                      <code>wrappedKeyAlgorithm</code>.                    
                </exception>
                <exception>
                    InvalidKeyException if <code>wrappedKey</code> does not
                      represent a wrapped key of type <code>wrappedKeyType</code> for
                      the <code>wrappedKeyAlgorithm</code>.                    
                </exception>
            </javadoc>
            <method name="unwrap" type="Key" line="374">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="wrappedKeyAlgorithm" type="String"/>
                    <param name="wrappedKeyType" type="int"/>
                </params>
                <declaration name="encodedKey" type="byte[]" line="375"/>
                <scope line="376"/>
                <scope line="379"/>
                <scope line="382"/>
            </method>
        </class>
    </source>