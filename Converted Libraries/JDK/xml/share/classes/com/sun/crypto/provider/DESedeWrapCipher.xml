<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.crypto.provider">
        <import package="java.util.Arrays"/>
        <import package="java.security"/>
        <import package="java.security.spec"/>
        <import package="javax.crypto"/>
        <import package="javax.crypto.spec"/>
        <class name="DESedeWrapCipher" line="7">
            <extends class="CipherSpi"/>
            <javadoc line="7">
                This class implements the CMS DESede KeyWrap algorithm as defined
                  in &lt;a href=http://www.w3.org/TR/xmlenc-core/#sec-Alg-SymmetricKeyWrap&gt;
                  &quot;XML Encryption Syntax and Processing&quot; section 5.6.2
                  &quot;CMS Triple DES Key Wrap&quot;.
                  Note: only &lt;code&gt;CBC&lt;/code&gt; mode and &lt;code&gt;NoPadding&lt;/code&gt; padding
                  scheme can be used for this algorithm.                
                <author>
                    Valerie Peng                    
                </author>
                <see>
                    DESedeCipher                    
                </see>
            </javadoc>
            <declaration name="IV2" type="byte[]" line="18"/>
            <declaration name="cipher" type="FeedbackCipher" line="19"/>
            <declaration name="iv" type="byte[]" line="20"/>
            <declaration name="cipherKey" type="Key" line="21"/>
            <declaration name="decrypting" type="boolean" line="22"/>
            <javadoc line="23">
                Creates an instance of CMS DESede KeyWrap cipher with default
                  mode, i.e. &quot;CBC&quot; and padding scheme, i.e. &quot;NoPadding&quot;.                
            </javadoc>
            <method name="DESedeWrapCipher" type="constructor" line="27"/>
            <javadoc line="30">
                Sets the mode of this cipher. Only &quot;CBC&quot; mode is accepted for this
                  cipher.                
                <param>
                    mode the cipher mode.                    
                </param>
                <exception>
                    NoSuchAlgorithmException if the requested cipher mode
                      is not &quot;CBC&quot;.                    
                </exception>
            </javadoc>
            <method name="engineSetMode" type="void" line="37">
                <params>
                    <param name="mode" type="String"/>
                </params>
                <scope line="38"/>
            </method>
            <javadoc line="42">
                Sets the padding mechanism of this cipher. Only &quot;NoPadding&quot; schmem
                  is accepted for this cipher.                
                <param>
                    padding the padding mechanism.                    
                </param>
                <exception>
                    NoSuchPaddingException if the requested padding mechanism
                      is not &quot;NoPadding&quot;.                    
                </exception>
            </javadoc>
            <method name="engineSetPadding" type="void" line="49">
                <params>
                    <param name="padding" type="String"/>
                </params>
                <scope line="50"/>
            </method>
            <javadoc line="54">
                Returns the block size (in bytes), i.e. 8 bytes.                
                <return>
                    the block size (in bytes), i.e. 8 bytes.                    
                </return>
            </javadoc>
            <method name="engineGetBlockSize" type="int" line="58"/>
            <javadoc line="61">
                Returns the length in bytes that an output buffer would need to be
                  given the input length &lt;code&gt;inputLen&lt;/code&gt; (in bytes).
                  &lt;p&gt;The actual output length of the next &lt;code&gt;update&lt;/code&gt; or
                  &lt;code&gt;doFinal&lt;/code&gt; call may be smaller than the length returned
                  by this method.                
                <param>
                    inputLen the input length (in bytes).                    
                </param>
                <return>
                    the required output buffer size (in bytes).                    
                </return>
            </javadoc>
            <method name="engineGetOutputSize" type="int" line="70">
                <params>
                    <param name="inputLen" type="int"/>
                </params>
                <declaration name="result" type="int" line="71"/>
                <scope line="72"/>
                <scope line="75"/>
            </method>
            <javadoc line="80">
                Returns the initialization vector (IV) in a new buffer.                
                <return>
                    the initialization vector, or null if the underlying
                      algorithm does not use an IV, or if the IV has not yet
                      been set.                    
                </return>
            </javadoc>
            <method name="engineGetIV" type="byte[]" line="86"/>
            <javadoc line="89">
                Initializes this cipher with a key and a source of randomness.
                  &lt;p&gt;The cipher only supports the following two operation modes:&lt;b&gt;
                  Cipher.WRAP_MODE, and &lt;b&gt;
                  Cipher.UNWRAP_MODE.
                  &lt;p&gt;For modes other than the above two, UnsupportedOperationException
                  will be thrown.
                  &lt;p&gt;If this cipher requires an initialization vector (IV), it will get
                  it from &lt;code&gt;random&lt;/code&gt;.                
                <param>
                    opmode the operation mode of this cipher. Only
                      &lt;code&gt;WRAP_MODE&lt;/code&gt; or &lt;code&gt;UNWRAP_MODE&lt;/code&gt;) are accepted.                    
                </param>
                <param>
                    key the secret key.                    
                </param>
                <param>
                    random the source of randomness.                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate
                      or if parameters are required but not supplied.                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="105">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="106"/>
                <scope line="109">
                    <declaration name="ike" type="InvalidKeyException" line="110"/>
                </scope>
            </method>
            <javadoc line="115">
                Initializes this cipher with a key, a set of algorithm parameters,
                  and a source of randomness.
                  &lt;p&gt;The cipher only supports the following two operation modes:&lt;b&gt;
                  Cipher.WRAP_MODE, and &lt;b&gt;
                  Cipher.UNWRAP_MODE.
                  &lt;p&gt;For modes other than the above two, UnsupportedOperationException
                  will be thrown.
                  &lt;p&gt;If this cipher requires an initialization vector (IV), it will get
                  it from &lt;code&gt;random&lt;/code&gt;.                
                <param>
                    opmode the operation mode of this cipher. Only
                      &lt;code&gt;WRAP_MODE&lt;/code&gt; or &lt;code&gt;UNWRAP_MODE&lt;/code&gt;) are accepted.                    
                </param>
                <param>
                    key the secret key.                    
                </param>
                <param>
                    params the algorithm parameters.                    
                </param>
                <param>
                    random the source of randomness.                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given algorithm
                      parameters are inappropriate for this cipher.                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="134">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="currIv" type="byte[]" line="135"/>
                <scope line="136">
                    <scope line="138">
                        <scope line="140"/>
                    </scope>
                    <scope line="145"/>
                    <scope line="148"/>
                </scope>
                <scope line="153">
                    <scope line="154"/>
                </scope>
                <scope line="161"/>
            </method>
            <javadoc line="167">
                Initializes this cipher with a key, a set of algorithm parameters,
                  and a source of randomness.
                  &lt;p&gt;The cipher only supports the following two operation modes:&lt;b&gt;
                  Cipher.WRAP_MODE, and &lt;b&gt;
                  Cipher.UNWRAP_MODE.
                  &lt;p&gt;For modes other than the above two, UnsupportedOperationException
                  will be thrown.
                  &lt;p&gt;If this cipher requires an initialization vector (IV), it will get
                  it from &lt;code&gt;random&lt;/code&gt;.                
                <param>
                    opmode the operation mode of this cipher. Only
                      &lt;code&gt;WRAP_MODE&lt;/code&gt; or &lt;code&gt;UNWRAP_MODE&lt;/code&gt;) are accepted.                    
                </param>
                <param>
                    key the secret key.                    
                </param>
                <param>
                    params the algorithm parameters.                    
                </param>
                <param>
                    random the source of randomness.                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given algorithm
                      parameters are inappropriate for this cipher.                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="186">
                <params>
                    <param name="opmode" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameters"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <declaration name="ivSpec" type="IvParameterSpec" line="187"/>
                <scope line="188">
                    <scope line="189">
                        <declaration name="paramsEng" type="DESedeParameters" line="190"/>
                    </scope>
                    <scope line="194">
                        <declaration name="iape" type="InvalidAlgorithmParameterException" line="195"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="202">
                This operation is not supported by this cipher.
                  Since it&apos;s impossible to initialize this cipher given the
                  current Cipher.engineInit(...) implementation,
                  IllegalStateException will always be thrown upon invocation.                
                <param>
                    in the input buffer.                    
                </param>
                <param>
                    inOffset the offset in &lt;code&gt;in&lt;/code&gt; where the input
                      starts.                    
                </param>
                <param>
                    inLen the input length.                    
                </param>
                <return>
                    n/a.                    
                </return>
                <exception>
                    IllegalStateException upon invocation of this method.                    
                </exception>
            </javadoc>
            <method name="engineUpdate" type="byte[]" line="214">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <javadoc line="217">
                This operation is not supported by this cipher.
                  Since it&apos;s impossible to initialize this cipher given the
                  current Cipher.engineInit(...) implementation,
                  IllegalStateException will always be thrown upon invocation.                
                <param>
                    in the input buffer.                    
                </param>
                <param>
                    inOffset the offset in &lt;code&gt;in&lt;/code&gt; where the input
                      starts.                    
                </param>
                <param>
                    inLen the input length.                    
                </param>
                <param>
                    out the buffer for the result.                    
                </param>
                <param>
                    outOffset the offset in &lt;code&gt;out&lt;/code&gt; where the result
                      is stored.                    
                </param>
                <return>
                    n/a.                    
                </return>
                <exception>
                    IllegalStateException upon invocation of this method.                    
                </exception>
            </javadoc>
            <method name="engineUpdate" type="int" line="232">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="inLen" type="int"/>
                    <param name="out" type="byte[]"/>
                    <param name="outOffset" type="int"/>
                </params>
            </method>
            <javadoc line="235">
                This operation is not supported by this cipher.
                  Since it&apos;s impossible to initialize this cipher given the
                  current Cipher.engineInit(...) implementation,
                  IllegalStateException will always be thrown upon invocation.                
                <param>
                    in the input buffer.                    
                </param>
                <param>
                    inOffset the offset in &lt;code&gt;in&lt;/code&gt; where the input
                      starts.                    
                </param>
                <param>
                    inLen the input length.                    
                </param>
                <return>
                    the new buffer with the result.                    
                </return>
                <exception>
                    IllegalStateException upon invocation of this method.                    
                </exception>
            </javadoc>
            <method name="engineDoFinal" type="byte[]" line="247">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="inOffset" type="int"/>
                    <param name="inLen" type="int"/>
                </params>
            </method>
            <javadoc line="250">
                This operation is not supported by this cipher.
                  Since it&apos;s impossible to initialize this cipher given the
                  current Cipher.engineInit(...) implementation,
                  IllegalStateException will always be thrown upon invocation.                
                <param>
                    in the input buffer.                    
                </param>
                <param>
                    inOffset the offset in &lt;code&gt;in&lt;/code&gt; where the input
                      starts.                    
                </param>
                <param>
                    inLen the input length.                    
                </param>
                <param>
                    out the buffer for the result.                    
                </param>
                <param>
                    outOffset the ofset in &lt;code&gt;out&lt;/code&gt; where the result
                      is stored.                    
                </param>
                <return>
                    the number of bytes stored in &lt;code&gt;out&lt;/code&gt;.                    
                </return>
                <exception>
                    IllegalStateException upon invocation of this method.                    
                </exception>
            </javadoc>
            <method name="engineDoFinal" type="int" line="265">
                <params>
                    <param name="input" type="byte[]"/>
                    <param name="inputOffset" type="int"/>
                    <param name="inputLen" type="int"/>
                    <param name="output" type="byte[]"/>
                    <param name="outputOffset" type="int"/>
                </params>
            </method>
            <javadoc line="268">
                Returns the parameters used with this cipher.
                  Note that null maybe returned if this cipher does not use any
                  parameters or when it has not be set, e.g. initialized with
                  UNWRAP_MODE but wrapped key data has not been given.                
                <return>
                    the parameters used with this cipher; can be null.                    
                </return>
            </javadoc>
            <method name="engineGetParameters" type="AlgorithmParameters" line="275">
                <declaration name="params" type="AlgorithmParameters" line="276"/>
                <scope line="277">
                    <declaration name="algo" type="String" line="278"/>
                    <scope line="279"/>
                    <scope line="282"/>
                    <scope line="285"/>
                    <scope line="288"/>
                    <scope line="291"/>
                </scope>
            </method>
            <javadoc line="297">
                Returns the key size of the given key object in number of bits.
                  This cipher always return the same key size as the DESede ciphers.                
                <param>
                    key the key object.                    
                </param>
                <return>
                    the &quot;effective&quot; key size of the given key object.                    
                </return>
                <exception>
                    InvalidKeyException if &lt;code&gt;key&lt;/code&gt; is invalid.                    
                </exception>
            </javadoc>
            <method name="engineGetKeySize" type="int" line="304">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="encoded" type="byte[]" line="305"/>
                <scope line="306"/>
            </method>
            <javadoc line="311">
                Wrap a key.                
                <param>
                    key the key to be wrapped.                    
                </param>
                <return>
                    the wrapped key.                    
                </return>
                <exception>
                    IllegalBlockSizeException if this cipher is a block
                      cipher, no padding has been requested, and the length of the
                      encoding of the key to be wrapped is not a
                      multiple of the block size.                    
                </exception>
                <exception>
                    InvalidKeyException if it is impossible or unsafe to
                      wrap the key with this cipher (e.g., a hardware protected key is
                      being passed to a software only cipher).                    
                </exception>
            </javadoc>
            <method name="engineWrap" type="byte[]" line="323">
                <params>
                    <param name="key" type="Key"/>
                </params>
                <declaration name="keyVal" type="byte[]" line="324"/>
                <scope line="325"/>
                <declaration name="cks" type="byte[]" line="328"/>
                <declaration name="out" type="byte[]" line="329"/>
                <scope line="334">
                    <declaration name="temp" type="byte" line="335"/>
                </scope>
                <scope line="339"/>
                <scope line="342"/>
                <scope line="346"/>
                <scope line="349"/>
            </method>
            <javadoc line="354">
                Unwrap a previously wrapped key.                
                <param>
                    wrappedKey the key to be unwrapped.                    
                </param>
                <param>
                    wrappedKeyAlgorithm the algorithm the wrapped key is for.                    
                </param>
                <param>
                    wrappedKeyType the type of the wrapped key.
                      This is one of &lt;code&gt;Cipher.SECRET_KEY&lt;/code&gt;,
                      &lt;code&gt;Cipher.PRIVATE_KEY&lt;/code&gt;, or &lt;code&gt;Cipher.PUBLIC_KEY&lt;/code&gt;.                    
                </param>
                <return>
                    the unwrapped key.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no installed providers
                      can create keys of type &lt;code&gt;wrappedKeyType&lt;/code&gt; for the
                      &lt;code&gt;wrappedKeyAlgorithm&lt;/code&gt;.                    
                </exception>
                <exception>
                    InvalidKeyException if &lt;code&gt;wrappedKey&lt;/code&gt; does not
                      represent a wrapped key of type &lt;code&gt;wrappedKeyType&lt;/code&gt; for
                      the &lt;code&gt;wrappedKeyAlgorithm&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="engineUnwrap" type="Key" line="369">
                <params>
                    <param name="wrappedKey" type="byte[]"/>
                    <param name="wrappedKeyAlgorithm" type="String"/>
                    <param name="wrappedKeyType" type="int"/>
                </params>
                <scope line="370"/>
                <declaration name="buffer" type="byte[]" line="373"/>
                <scope line="375">
                    <declaration name="temp" type="byte" line="376"/>
                </scope>
                <declaration name="origLen" type="int" line="384"/>
                <declaration name="cks" type="byte[]" line="385"/>
                <declaration name="offset" type="int" line="386"/>
                <scope line="387">
                    <scope line="388"/>
                </scope>
                <declaration name="out" type="byte[]" line="393"/>
            </method>
            <method name="getChecksum" type="byte[]" line="397">
                <params>
                    <param name="in" type="byte[]"/>
                </params>
            </method>
            <method name="getChecksum" type="byte[]" line="400">
                <params>
                    <param name="in" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="md" type="MessageDigest" line="401"/>
                <scope line="402"/>
                <scope line="405"/>
                <declaration name="cks" type="byte[]" line="409"/>
            </method>
        </class>
    </source>