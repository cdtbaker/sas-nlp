<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.rowset">
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="javax.naming"/>
        <import package="java.io"/>
        <import package="java.math"/>
        <import package="java.util"/>
        <import package="java.beans"/>
        <import package="javax.sql.rowset"/>
        <class name="JdbcRowSetImpl" line="38">
            <extends class="BaseRowSet"/>
            <comment line="525">
                ---------------------------------------------------------------------                
            </comment>
            <comment line="526">
                Reading and writing data                
            </comment>
            <comment line="527">
                ---------------------------------------------------------------------                
            </comment>
            <comment line="624">
                An alternate solution is required instead of having the                
            </comment>
            <comment line="625">
                connect method as protected.                
            </comment>
            <comment line="626">
                This is a work around to assist Rave Team                
            </comment>
            <comment line="627">
                :ah                
            </comment>
            <comment line="874">
                ======================================================================                
            </comment>
            <comment line="875">
                Methods for accessing results by column index                
            </comment>
            <comment line="876">
                ======================================================================                
            </comment>
            <comment line="1210">
                ======================================================================                
            </comment>
            <comment line="1211">
                Methods for accessing results by column name                
            </comment>
            <comment line="1212">
                ======================================================================                
            </comment>
            <comment line="1513">
                =====================================================================                
            </comment>
            <comment line="1514">
                Advanced features:                
            </comment>
            <comment line="1515">
                =====================================================================                
            </comment>
            <comment line="1685">
                ----------------------------------------------------------------                
            </comment>
            <comment line="1705">
                --------------------------JDBC 2.0-----------------------------------                
            </comment>
            <comment line="1707">
                ---------------------------------------------------------------------                
            </comment>
            <comment line="1708">
                Getters and Setters                
            </comment>
            <comment line="1709">
                ---------------------------------------------------------------------                
            </comment>
            <comment line="1779">
                ---------------------------------------------------------------------                
            </comment>
            <comment line="1780">
                Traversal/Positioning                
            </comment>
            <comment line="1781">
                ---------------------------------------------------------------------                
            </comment>
            <comment line="2146">
                ---------------------------------------------------------------------                
            </comment>
            <comment line="2147">
                Updates                
            </comment>
            <comment line="2148">
                ---------------------------------------------------------------------                
            </comment>
            <comment line="4139">
                Setting the ResultSet Type and Concurrency                
            </comment>
            <comment line="4152">
                Checking ResultSet Type and Concurrency                
            </comment>
            <comment line="4160">
                Returns a Connection Handle                
            </comment>
            <comment line="4161">
                Added as per Rave requirements                
            </comment>
            <comment line="4174">
                Sets the connection handle with the parameter                
            </comment>
            <comment line="4175">
                Added as per rave requirements                
            </comment>
            <comment line="4188">
                Returns a PreparedStatement Handle                
            </comment>
            <comment line="4189">
                Added as per Rave requirements                
            </comment>
            <comment line="4202">
                Sets the prepared statement handle to the parameter                
            </comment>
            <comment line="4203">
                Added as per Rave requirements                
            </comment>
            <comment line="4216">
                Returns a ResultSet handle                
            </comment>
            <comment line="4217">
                Added as per Rave requirements                
            </comment>
            <comment line="4233">
                Sets the result set handle to the parameter                
            </comment>
            <comment line="4234">
                Added as per Rave requirements                
            </comment>
            <comment line="4248">
                Over riding the setCommand from BaseRowSet for                
            </comment>
            <comment line="4249">
                firing the propertyChangeSupport Event for                
            </comment>
            <comment line="4250">
                Rave requirements when this property&apos;s value                
            </comment>
            <comment line="4251">
                changes.                
            </comment>
            <comment line="4294">
                Over riding the setDataSourceName from BaseRowSet for                
            </comment>
            <comment line="4295">
                firing the propertyChangeSupport Event for                
            </comment>
            <comment line="4296">
                Rave requirements when this property&apos;s values                
            </comment>
            <comment line="4297">
                changes.                
            </comment>
            <comment line="4347">
                Over riding the setUrl from BaseRowSet for                
            </comment>
            <comment line="4348">
                firing the propertyChangeSupport Event for                
            </comment>
            <comment line="4349">
                Rave requirements when this property&apos;s values                
            </comment>
            <comment line="4350">
                changes.                
            </comment>
            <comment line="4412">
                Over riding the setUsername from BaseRowSet for                
            </comment>
            <comment line="4413">
                firing the propertyChangeSupport Event for                
            </comment>
            <comment line="4414">
                Rave requirements when this property&apos;s values                
            </comment>
            <comment line="4415">
                changes.                
            </comment>
            <comment line="4456">
                Over riding the setPassword from BaseRowSet for                
            </comment>
            <comment line="4457">
                firing the propertyChangeSupport Event for                
            </comment>
            <comment line="4458">
                Rave requirements when this property&apos;s values                
            </comment>
            <comment line="4459">
                changes.                
            </comment>
            <comment line="4768">
                o
                 This method is used for updating SQL &lt;code&gt;NCLOB&lt;code&gt;  type that maps
                 to &lt;code&gt;java.sql.Types.NCLOB&lt;code&gt;
                 @param columnIndex the first column is 1, the second 2, ...
                 @param nClob the value for the column to be updated
                 @throws SQLException if a database access error occurs
                 @since 6.0                
            </comment>
            <comment line="7039">
                ------------------------- JDBC 4.1 -----------------------------------                
            </comment>
            <implements interface="JdbcRowSet"/>
            <implements interface="Joinable"/>
            <javadoc line="38">
                The standard implementation of the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface. See the interface
                  defintion for full behavior and implementation requirements.                
                <author>
                    Jonathan Bruce, Amit Handa                    
                </author>
            </javadoc>
            <declaration name="conn" type="Connection" line="47"/>
            <javadoc line="47">
                The &lt;code&gt;Connection&lt;/code&gt; object that is this rowset&apos;s
                  current connection to the database.  This field is set
                  internally when the connection is established.                
            </javadoc>
            <declaration name="ps" type="PreparedStatement" line="54"/>
            <javadoc line="54">
                The &lt;code&gt;PreparedStatement&lt;/code&gt; object that is this rowset&apos;s
                  current command.  This field is set internally when the method
                  &lt;code&gt;execute&lt;/code&gt; creates the &lt;code&gt;PreparedStatement&lt;/code&gt;
                  object.                
            </javadoc>
            <declaration name="rs" type="ResultSet" line="62"/>
            <javadoc line="62">
                The &lt;code&gt;ResultSet&lt;/code&gt; object that is this rowset&apos;s
                  current result set.  This field is set internally when the method
                  &lt;code&gt;execute&lt;/code&gt; executes the rowset&apos;s command and thereby
                  creates the rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object.                
            </javadoc>
            <declaration name="rowsMD" type="RowSetMetaDataImpl" line="70"/>
            <javadoc line="70">
                The &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; object that is contructed when
                  a &lt;code&gt;ResultSet&lt;/code&gt; object is passed to the &lt;code&gt;JdbcRowSet&lt;/code&gt;
                  constructor. This helps in constructing all metadata associated
                  with the &lt;code&gt;ResultSet&lt;/code&gt; object using the setter methods of
                  &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt;.                
            </javadoc>
            <declaration name="resMD" type="ResultSetMetaData" line="79"/>
            <javadoc line="79">
                The &lt;code&gt;ResultSetMetaData&lt;/code&gt; object from which this
                  &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; is formed and which  helps in getting
                  the metadata information.                
            </javadoc>
            <declaration name="propertyChangeSupport" type="PropertyChangeSupport" line="86"/>
            <javadoc line="86">
                The property that helps to fire the property changed event when certain
                  properties are changed in the &lt;code&gt;JdbcRowSet&lt;/code&gt; object. This property
                  is being added to satisfy Rave requirements.                
            </javadoc>
            <declaration name="iMatchColumns" type="Vector&lt;Integer&gt;" line="93"/>
            <javadoc line="93">
                The Vector holding the Match Columns                
            </javadoc>
            <declaration name="strMatchColumns" type="Vector&lt;String&gt;" line="98"/>
            <javadoc line="98">
                The Vector that will hold the Match Column names.                
            </javadoc>
            <declaration name="resBundle" type="JdbcRowSetResourceBundle" line="104"/>
            <javadoc line="106">
                Constructs a default &lt;code&gt;JdbcRowSet&lt;/code&gt; object.
                  The new instance of &lt;code&gt;JdbcRowSet&lt;/code&gt; will serve as a proxy
                  for the &lt;code&gt;ResultSet&lt;/code&gt; object it creates, and by so doing,
                  it will make it possible to use the result set as a JavaBeans
                  component.
                  &lt;P&gt;
                  The following is true of a default &lt;code&gt;JdbcRowSet&lt;/code&gt; instance:
                  &lt;UL&gt;
                  &lt;LI&gt;Does not show deleted rows
                  &lt;LI&gt;Has no time limit for how long a driver may take to
                  execute the rowset&apos;s command
                  &lt;LI&gt;Has no limit for the number of rows it may contain
                  &lt;LI&gt;Has no limit for the number of bytes a column may contain
                  &lt;LI&gt;Has a scrollable cursor and does not show changes
                  made by others
                  &lt;LI&gt;Will not see uncommitted data (make &quot;dirty&quot; reads)
                  &lt;LI&gt;Has escape processing turned on
                  &lt;LI&gt;Has its connection&apos;s type map set to &lt;code&gt;null&lt;/code&gt;
                  &lt;LI&gt;Has an empty &lt;code&gt;Hashtable&lt;/code&gt; object for storing any
                  parameters that are set
                  &lt;/UL&gt;
                  A newly created &lt;code&gt;JdbcRowSet&lt;/code&gt; object must have its
                  &lt;code&gt;execute&lt;/code&gt; method invoked before other public methods
                  are called on it; otherwise, such method calls will cause an
                  exception to be thrown.                
                <throws>
                    SQLException [1] if any of its public methods are called prior
                      to calling the <code>execute</code> method; [2] if invalid JDBC driver
                      properties are set or [3] if no connection to a data source exists.                    
                </throws>
            </javadoc>
            <method name="JdbcRowSetImpl" type="constructor" line="137">
                <comment line="152">
                    set the defaults                    
                </comment>
                <comment line="214">
                    Instantiating the vector for MatchColumns                    
                </comment>
                <scope line="142"/>
                <scope line="144"/>
                <scope line="154"/>
                <scope line="156"/>
                <scope line="161"/>
                <scope line="163"/>
                <scope line="168"/>
                <scope line="170"/>
                <scope line="175"/>
                <scope line="177"/>
                <scope line="182"/>
                <scope line="184"/>
                <scope line="189"/>
                <scope line="191"/>
                <scope line="198"/>
                <scope line="200"/>
                <scope line="207"/>
                <scope line="209"/>
                <scope line="217"/>
                <scope line="222"/>
            </method>
            <javadoc line="227">
                Constructs a default &lt;code&gt;JdbcRowSet&lt;/code&gt; object given a
                  valid &lt;code&gt;Connection&lt;/code&gt; object. The new
                  instance of &lt;code&gt;JdbcRowSet&lt;/code&gt; will serve as a proxy for
                  the &lt;code&gt;ResultSet&lt;/code&gt; object it creates, and by so doing,
                  it will make it possible to use the result set as a JavaBeans
                  component.
                  &lt;P&gt;
                  The following is true of a default &lt;code&gt;JdbcRowSet&lt;/code&gt; instance:
                  &lt;UL&gt;
                  &lt;LI&gt;Does not show deleted rows
                  &lt;LI&gt;Has no time limit for how long a driver may take to
                  execute the rowset&apos;s command
                  &lt;LI&gt;Has no limit for the number of rows it may contain
                  &lt;LI&gt;Has no limit for the number of bytes a column may contain
                  &lt;LI&gt;Has a scrollable cursor and does not show changes
                  made by others
                  &lt;LI&gt;Will not see uncommitted data (make &quot;dirty&quot; reads)
                  &lt;LI&gt;Has escape processing turned on
                  &lt;LI&gt;Has its connection&apos;s type map set to &lt;code&gt;null&lt;/code&gt;
                  &lt;LI&gt;Has an empty &lt;code&gt;Hashtable&lt;/code&gt; object for storing any
                  parameters that are set
                  &lt;/UL&gt;
                  A newly created &lt;code&gt;JdbcRowSet&lt;/code&gt; object must have its
                  &lt;code&gt;execute&lt;/code&gt; method invoked before other public methods
                  are called on it; otherwise, such method calls will cause an
                  exception to be thrown.                
                <throws>
                    SQLException [1] if any of its public methods are called prior
                      to calling the <code>execute</code> method, [2] if invalid JDBC driver
                      properties are set, or [3] if no connection to a data source exists.                    
                </throws>
            </javadoc>
            <method name="JdbcRowSetImpl" type="constructor" line="259">
                <params>
                    <param name="con" type="Connection"/>
                </params>
                <comment line="274">
                    set the defaults                    
                </comment>
                <comment line="287">
                    Instantiating the vector for MatchColumns                    
                </comment>
                <scope line="265"/>
                <scope line="267"/>
                <scope line="290"/>
                <scope line="295"/>
            </method>
            <javadoc line="300">
                Constructs a default &lt;code&gt;JdbcRowSet&lt;/code&gt; object using the
                  URL, username, and password arguments supplied. The new
                  instance of &lt;code&gt;JdbcRowSet&lt;/code&gt; will serve as a proxy for
                  the &lt;code&gt;ResultSet&lt;/code&gt; object it creates, and by so doing,
                  it will make it possible to use the result set as a JavaBeans
                  component.
                  &lt;P&gt;
                  The following is true of a default &lt;code&gt;JdbcRowSet&lt;/code&gt; instance:
                  &lt;UL&gt;
                  &lt;LI&gt;Does not show deleted rows
                  &lt;LI&gt;Has no time limit for how long a driver may take to
                  execute the rowset&apos;s command
                  &lt;LI&gt;Has no limit for the number of rows it may contain
                  &lt;LI&gt;Has no limit for the number of bytes a column may contain
                  &lt;LI&gt;Has a scrollable cursor and does not show changes
                  made by others
                  &lt;LI&gt;Will not see uncommitted data (make &quot;dirty&quot; reads)
                  &lt;LI&gt;Has escape processing turned on
                  &lt;LI&gt;Has its connection&apos;s type map set to &lt;code&gt;null&lt;/code&gt;
                  &lt;LI&gt;Has an empty &lt;code&gt;Hashtable&lt;/code&gt; object for storing any
                  parameters that are set
                  &lt;/UL&gt;                
                <param>
                    url - a JDBC URL for the database to which this <code>JdbcRowSet</code>
                      object will be connected. The form for a JDBC URL is
                      <code>jdbc:subprotocol:subname</code>.                    
                </param>
                <param>
                    user - the database user on whose behalf the connection
                      is being made                    
                </param>
                <param>
                    password - the user's password                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="JdbcRowSetImpl" type="constructor" line="335">
                <params>
                    <param name="url" type="String"/>
                    <param name="user" type="String"/>
                    <param name="password" type="String"/>
                </params>
                <comment line="350">
                    Pass the arguments to BaseRowSet                    
                </comment>
                <comment line="351">
                    setter methods now.                    
                </comment>
                <comment line="357">
                    set the defaults                    
                </comment>
                <comment line="363">
                    to ensure connection to a db call connect now                    
                </comment>
                <comment line="364">
                    and associate a conn with &quot;this&quot; object                    
                </comment>
                <comment line="365">
                    in this case.                    
                </comment>
                <comment line="374">
                    Instantiating the vector for MatchColumns                    
                </comment>
                <scope line="340"/>
                <scope line="342"/>
                <scope line="377"/>
                <scope line="382"/>
            </method>
            <javadoc line="388">
                Constructs a &lt;code&gt;JdbcRowSet&lt;/code&gt; object using the given valid
                  &lt;code&gt;ResultSet&lt;/code&gt; object. The new
                  instance of &lt;code&gt;JdbcRowSet&lt;/code&gt; will serve as a proxy for
                  the &lt;code&gt;ResultSet&lt;/code&gt; object, and by so doing,
                  it will make it possible to use the result set as a JavaBeans
                  component.
                  &lt;P&gt;
                  The following is true of a default &lt;code&gt;JdbcRowSet&lt;/code&gt; instance:
                  &lt;UL&gt;
                  &lt;LI&gt;Does not show deleted rows
                  &lt;LI&gt;Has no time limit for how long a driver may take to
                  execute the rowset&apos;s command
                  &lt;LI&gt;Has no limit for the number of rows it may contain
                  &lt;LI&gt;Has no limit for the number of bytes a column may contain
                  &lt;LI&gt;Has a scrollable cursor and does not show changes
                  made by others
                  &lt;LI&gt;Will not see uncommitted data (make &quot;dirty&quot; reads)
                  &lt;LI&gt;Has escape processing turned on
                  &lt;LI&gt;Has its connection&apos;s type map set to &lt;code&gt;null&lt;/code&gt;
                  &lt;LI&gt;Has an empty &lt;code&gt;Hashtable&lt;/code&gt; object for storing any
                  parameters that are set
                  &lt;/UL&gt;                
                <param>
                    res a valid <code>ResultSet</code> object                    
                </param>
                <throws>
                    SQLException if a database access occurs due to a non
                      valid ResultSet handle.                    
                </throws>
            </javadoc>
            <method name="JdbcRowSetImpl" type="constructor" line="418">
                <params>
                    <param name="res" type="ResultSet"/>
                </params>
                <comment line="420">
                    A ResultSet handle encapsulates a connection handle.                    
                </comment>
                <comment line="421">
                    But there is no way we can retrieve a Connection handle                    
                </comment>
                <comment line="422">
                    from a ResultSet object.                    
                </comment>
                <comment line="423">
                    So to avoid any anomalies we keep the conn = null                    
                </comment>
                <comment line="424">
                    The passed rs handle will be a wrapper around for                    
                </comment>
                <comment line="425">
                    &quot;this&quot; object&apos;s all operations.                    
                </comment>
                <comment line="442">
                    get the values from the resultset handle.                    
                </comment>
                <comment line="455">
                    Get a handle to ResultSetMetaData                    
                </comment>
                <comment line="456">
                    Construct RowSetMetaData out of it.                    
                </comment>
                <comment line="464">
                    Instantiating the vector for MatchColumns                    
                </comment>
                <scope line="432"/>
                <scope line="434"/>
                <scope line="467"/>
                <scope line="472"/>
            </method>
            <javadoc line="477">
                Initializes the given &lt;code&gt;RowSetMetaData&lt;/code&gt; object with the values
                  in the given &lt;code&gt;ResultSetMetaData&lt;/code&gt; object.                
                <param>
                    md the <code>RowSetMetaData</code> object for this
                      <code>JdbcRowSetImpl</code> object, which will be set with
                      values from rsmd                    
                </param>
                <param>
                    rsmd the <code>ResultSetMetaData</code> object from which new
                      values for md will be read                    
                </param>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="initMetaData" type="void" line="488">
                <params>
                    <param name="md" type="RowSetMetaData"/>
                    <param name="rsmd" type="ResultSetMetaData"/>
                </params>
                <declaration name="numCols" type="int" line="489"/>
                <scope line="492"/>
            </method>
            <method name="checkState" type="void" line="513">
                <comment line="515">
                    If all the three i.e.  conn, ps &amp; rs are                    
                </comment>
                <comment line="516">
                    simultaneously null implies we are not connected                    
                </comment>
                <comment line="517">
                    to the db, implies undesirable state so throw exception                    
                </comment>
                <scope line="519"/>
            </method>
            <javadoc line="528">
                Creates the internal &lt;code&gt;ResultSet&lt;/code&gt; object for which this
                  &lt;code&gt;JdbcRowSet&lt;/code&gt; object is a wrapper, effectively
                  making the result set a JavaBeans component.
                  &lt;P&gt;
                  Certain properties must have been set before this method is called
                  so that it can establish a connection to a database and execute the
                  query that will create the result set.  If a &lt;code&gt;DataSource&lt;/code&gt;
                  object will be used to create the connection, properties for the
                  data source name, user name, and password must be set.  If the
                  &lt;code&gt;DriverManager&lt;/code&gt; will be used, the properties for the
                  URL, user name, and password must be set.  In either case, the
                  property for the command must be set.  If the command has placeholder
                  parameters, those must also be set. This method throws
                  an exception if the required properties are not set.
                  &lt;P&gt;
                  Other properties have default values that may optionally be set
                  to new values. The &lt;code&gt;execute&lt;/code&gt; method will use the value
                  for the command property to create a &lt;code&gt;PreparedStatement&lt;/code&gt;
                  object and set its properties (escape processing, maximum field
                  size, maximum number of rows, and query timeout limit) to be those
                  of this rowset.                
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) any required JDBC properties are not set, or (3) if an
                      invalid connection exists.                    
                </throws>
            </javadoc>
            <method name="execute" type="void" line="555">
                <comment line="556">
                    To execute based on the properties:
                     i) determine how to get a connection
                     ii) prepare the statement
                     iii) set the properties of the statement
                     iv) parse the params. and set them
                     v) execute the statement
                    
                     During all of this try to tolerate as many errors
                     as possible, many drivers will not support all of
                     the properties and willshould throw SQLException
                     at us...                    
                </comment>
                <comment line="573">
                    set the properties of our shiny new statement                    
                </comment>
                <comment line="577">
                    set the parameters                    
                </comment>
                <comment line="581">
                    execute the statement                    
                </comment>
                <comment line="585">
                    notify listeners                    
                </comment>
            </method>
            <method name="setProperties" type="void" line="591">
                <params>
                    <param name="ps" type="PreparedStatement"/>
                </params>
                <scope line="593"/>
                <scope line="595"/>
                <scope line="600"/>
                <scope line="602"/>
                <scope line="607"/>
                <scope line="609"/>
                <scope line="614"/>
                <scope line="616"/>
            </method>
            <method name="connect" type="Connection" line="628">
                <comment line="630">
                    Get a JDBC connection.                    
                </comment>
                <comment line="632">
                    First check for Connection handle object as such if                    
                </comment>
                <comment line="633">
                    &quot;this&quot; initialized  using conn.                    
                </comment>
                <comment line="640">
                    Connect using JNDI.                    
                </comment>
                <comment line="645">
                    return ds.getConnection(getUsername(),getPassword());                    
                </comment>
                <comment line="658">
                    Check only for getUrl() != null because                    
                </comment>
                <comment line="659">
                    user, passwd can be null                    
                </comment>
                <comment line="660">
                    Connect using the driver manager.                    
                </comment>
                <scope line="635"/>
                <scope line="638">
                    <scope line="641">
                        <declaration name="ctx" type="Context" line="642"/>
                        <declaration name="ds" type="DataSource" line="643"/>
                        <scope line="647"/>
                        <scope line="649"/>
                    </scope>
                    <scope line="653"/>
                </scope>
                <scope line="657"/>
                <scope line="665"/>
            </method>
            <method name="prepare" type="PreparedStatement" line="672">
                <comment line="673">
                    get a connection                    
                </comment>
                <scope line="676">
                    <declaration name="aMap" type="Map&lt;String,Class&lt;?&gt;&gt;" line="678"/>
                    <scope line="679"/>
                </scope>
                <scope line="683"/>
            </method>
            <method name="decodeParams" type="void" line="699">
                <params>
                    <param name="params" type="Object[]"/>
                    <param name="ps" type="PreparedStatement"/>
                </params>
                <comment line="701">
                    There is a corresponding decodeParams in JdbcRowSetImpl                    
                </comment>
                <comment line="702">
                    which does the same as this method. This is a design flaw.                    
                </comment>
                <comment line="703">
                    Update the CachedRowsetReader.decodeParams when you update                    
                </comment>
                <comment line="704">
                    this method.                    
                </comment>
                <comment line="706">
                    Adding the same comments to CachedRowsetReader.decodeParams.                    
                </comment>
                <comment line="742">
                    What&apos;s left should be setObject(int, Object, scale)                    
                </comment>
                <comment line="777">
                    no point at looking at the first element now;
                     what&apos;s left must be the setObject() cases.                    
                </comment>
                <comment line="790">
                    common case - this catches all SQL92 types                    
                </comment>
                <comment line="795">
                    Try to get all the params to be set here                    
                </comment>
                <declaration name="arraySize" type="int" line="708"/>
                <declaration name="param" type="Object[]" line="709"/>
                <scope line="711">
                    <scope line="712">
                        <scope line="715">
                            <scope line="716"/>
                            <scope line="723">
                                <scope line="725"/>
                                <scope line="731"/>
                            </scope>
                            <scope line="736"/>
                            <scope line="745"/>
                        </scope>
                        <scope line="750">
                            <scope line="752"/>
                            <scope line="758"/>
                            <scope line="781"/>
                        </scope>
                        <scope line="789"/>
                    </scope>
                    <scope line="794"/>
                </scope>
            </method>
            <javadoc line="802">
                Moves the cursor for this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt;
                  object down one row from its current position.
                  A &lt;code&gt;ResultSet&lt;/code&gt; cursor is initially positioned
                  before the first row; the first call to the method
                  &lt;code&gt;next&lt;/code&gt; makes the first row the current row; the
                  second call makes the second row the current row, and so on.
                  &lt;P&gt;If an input stream is open for the current row, a call
                  to the method &lt;code&gt;next&lt;/code&gt; will
                  implicitly close it. A &lt;code&gt;ResultSet&lt;/code&gt; object&apos;s
                  warning chain is cleared when a new row is read.                
                <return>
                    <code>true</code> if the new current row is valid;
                      <code>false</code> if there are no more rows                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="next" type="boolean" line="821">
                <declaration name="b" type="boolean" line="824"/>
            </method>
            <javadoc line="829">
                Releases this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object&apos;s database and
                  JDBC resources immediately instead of waiting for
                  this to happen when it is automatically closed.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; A &lt;code&gt;ResultSet&lt;/code&gt; object
                  is automatically closed by the
                  &lt;code&gt;Statement&lt;/code&gt; object that generated it when
                  that &lt;code&gt;Statement&lt;/code&gt; object is closed,
                  re-executed, or is used to retrieve the next result from a
                  sequence of multiple results. A &lt;code&gt;ResultSet&lt;/code&gt; object
                  is also automatically closed when it is garbage collected.                
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="844"/>
            <javadoc line="853">
                Reports whether the last column read from this rowset&apos;s
                  &lt;code&gt;ResultSet&lt;/code&gt; object had a value of SQL &lt;code&gt;NULL&lt;/code&gt;.
                  Note that you must first call one of the &lt;code&gt;getXXX&lt;/code&gt; methods
                  on a column to try to read its value and then call
                  the method &lt;code&gt;wasNull&lt;/code&gt; to see if the value read was
                  SQL &lt;code&gt;NULL&lt;/code&gt;.                
                <return>
                    <code>true</code> if the last column value read was SQL
                      <code>NULL</code> and <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="wasNull" type="boolean" line="867"/>
            <javadoc line="877">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;String&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getString" type="String" line="889">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="895">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;boolean&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>false</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getBoolean" type="boolean" line="907">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="913">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;byte&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getByte" type="byte" line="925">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="931">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;short&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getShort" type="short" line="943">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="949">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  an &lt;code&gt;int&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getInt" type="int" line="961">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="967">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;long&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getLong" type="long" line="979">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="985">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;float&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getFloat" type="float" line="997">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1003">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;double&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getDouble" type="double" line="1015">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1021">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.BigDecimal&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="1035">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="1041">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;byte&lt;/code&gt; array in the Java programming language.
                  The bytes represent the raw values returned by the driver.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getBytes" type="byte[]" line="1054">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1060">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.Date&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="1072">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1078">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.Time&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="1090">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1096">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="1108">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1114">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a stream of ASCII characters. The value can then be read in chunks from the
                  stream. This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt; values.
                  The JDBC driver will
                  do any necessary conversion from the database format into ASCII.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream.  Also, a
                  stream may return &lt;code&gt;0&lt;/code&gt; when the method
                  &lt;code&gt;InputStream.available&lt;/code&gt;
                  is called whether there is data available or not.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of one-byte ASCII characters;
                      if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) database access error occurs
                      (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getAsciiStream" type="java.io.InputStream" line="1139">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1145">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  as a stream of Unicode characters.
                  The value can then be read in chunks from the
                  stream. This method is particularly
                  suitable for retrieving large&lt;code&gt;LONGVARCHAR&lt;/code&gt;values.  The JDBC driver will
                  do any necessary conversion from the database format into Unicode.
                  The byte format of the Unicode stream must be Java UTF-8,
                  as specified in the Java virtual machine specification.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream.  Also, a
                  stream may return &lt;code&gt;0&lt;/code&gt; when the method
                  &lt;code&gt;InputStream.available&lt;/code&gt;
                  is called whether there is data available or not.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream in Java UTF-8 byte format;
                      if the value is SQL <code>NULL</code>, the value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
                <deprecated>
                    use <code>getCharacterStream</code> in place of
                      <code>getUnicodeStream</code>                    
                </deprecated>
            </javadoc>
            <method name="getUnicodeStream" type="java.io.InputStream" line="1173">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1179">
                Gets the value of a column in the current row as a stream of
                  the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a binary stream of
                  uninterpreted bytes. The value can then be read in chunks from the
                  stream. This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARBINARY&lt;/code&gt; values.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream.  Also, a
                  stream may return &lt;code&gt;0&lt;/code&gt; when the method
                  &lt;code&gt;InputStream.available&lt;/code&gt;
                  is called whether there is data available or not.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of uninterpreted bytes;
                      if the value is SQL <code>NULL</code>, the value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getBinaryStream" type="java.io.InputStream" line="1202">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1213">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;String&lt;/code&gt;.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getString" type="String" line="1225">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1229">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;boolean&lt;/code&gt;.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>false</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getBoolean" type="boolean" line="1241">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1245">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;byte&lt;/code&gt;.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getByte" type="byte" line="1257">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1261">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;short&lt;/code&gt;.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getShort" type="short" line="1273">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1277">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  an &lt;code&gt;int&lt;/code&gt;.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getInt" type="int" line="1289">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1293">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;long&lt;/code&gt;.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>0</code>                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getLong" type="long" line="1305">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1309">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;float&lt;/code&gt;.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getFloat" type="float" line="1321">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1325">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;double&lt;/code&gt;.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getDouble" type="double" line="1337">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1341">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.math.BigDecimal&lt;/code&gt;.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) adatabase access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="1355">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="1359">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;byte&lt;/code&gt; array in the Java programming language.
                  The bytes represent the raw values returned by the driver.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getBytes" type="byte[]" line="1372">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1376">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.Date&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="1388">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1392">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.Time&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value;
                      if the value is SQL <code>NULL</code>,
                      the value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="1405">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1409">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="1421">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1425">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a stream of
                  ASCII characters. The value can then be read in chunks from the
                  stream. This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt; values.
                  The JDBC driver will
                  do any necessary conversion from the database format into ASCII.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream. Also, a
                  stream may return &lt;code&gt;0&lt;/code&gt; when the method &lt;code&gt;available&lt;/code&gt;
                  is called whether there is data available or not.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of one-byte ASCII characters.
                      If the value is SQL <code>NULL</code>,
                      the value returned is <code>null</code>.                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getAsciiStream" type="java.io.InputStream" line="1449">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1453">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a stream of
                  Unicode characters. The value can then be read in chunks from the
                  stream. This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt; values.
                  The JDBC driver will
                  do any necessary conversion from the database format into Unicode.
                  The byte format of the Unicode stream must be Java UTF-8,
                  as defined in the Java virtual machine specification.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream. Also, a
                  stream may return &lt;code&gt;0&lt;/code&gt; when the method &lt;code&gt;available&lt;/code&gt;
                  is called whether there is data available or not.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of two-byte Unicode characters.
                      If the value is SQL <code>NULL</code>,
                      the value returned is <code>null</code>.                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="getUnicodeStream" type="java.io.InputStream" line="1480">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1484">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a stream of uninterpreted
                  &lt;code&gt;byte&lt;/code&gt;s.
                  The value can then be read in chunks from the
                  stream. This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  values.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream. Also, a
                  stream may return &lt;code&gt;0&lt;/code&gt; when the method &lt;code&gt;available&lt;/code&gt;
                  is called whether there is data available or not.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of uninterpreted bytes;
                      if the value is SQL <code>NULL</code>, the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getBinaryStream" type="java.io.InputStream" line="1507">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1516">
                Returns the first warning reported by calls on this rowset&apos;s
                  &lt;code&gt;ResultSet&lt;/code&gt; object.
                  Subsequent warnings on this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object
                  will be chained to the &lt;code&gt;SQLWarning&lt;/code&gt; object that
                  this method returns.
                  &lt;P&gt;The warning chain is automatically cleared each time a new
                  row is read.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This warning chain only covers warnings caused
                  by &lt;code&gt;ResultSet&lt;/code&gt; methods.  Any warning caused by
                  &lt;code&gt;Statement&lt;/code&gt; methods
                  (such as reading OUT parameters) will be chained on the
                  &lt;code&gt;Statement&lt;/code&gt; object.                
                <return>
                    the first <code>SQLWarning</code> object reported or <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getWarnings" type="SQLWarning" line="1537"/>
            <javadoc line="1543">
                Clears all warnings reported on this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object.
                  After this method is called, the method &lt;code&gt;getWarnings&lt;/code&gt;
                  returns &lt;code&gt;null&lt;/code&gt; until a new warning is
                  reported for this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="clearWarnings" type="void" line="1553"/>
            <javadoc line="1559">
                Gets the name of the SQL cursor used by this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt;
                  object.
                  &lt;P&gt;In SQL, a result table is retrieved through a cursor that is
                  named. The current row of a result set can be updated or deleted
                  using a positioned update/delete statement that references the
                  cursor name. To insure that the cursor has the proper isolation
                  level to support update, the cursor&apos;s &lt;code&gt;select&lt;/code&gt; statement should be
                  of the form &apos;select for update&apos;. If the &apos;for update&apos; clause is
                  omitted, the positioned updates may fail.
                  &lt;P&gt;The JDBC API supports this SQL feature by providing the name of the
                  SQL cursor used by a &lt;code&gt;ResultSet&lt;/code&gt; object.
                  The current row of a &lt;code&gt;ResultSet&lt;/code&gt; object
                  is also the current row of this SQL cursor.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; If positioned update is not supported, a
                  &lt;code&gt;SQLException&lt;/code&gt; is thrown.                
                <return>
                    the SQL name for this rowset's <code>ResultSet</code> object's cursor                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) xthis rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getCursorName" type="String" line="1584"/>
            <javadoc line="1590">
                Retrieves the  number, types and properties of
                  this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object&apos;s columns.                
                <return>
                    the description of this rowset's <code>ResultSet</code>
                      object's columns                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getMetaData" type="ResultSetMetaData" line="1600">
                <comment line="1604">
                    It may be the case that JdbcRowSet might not have been                    
                </comment>
                <comment line="1605">
                    initialized with ResultSet handle and may be by PreparedStatement                    
                </comment>
                <comment line="1606">
                    internally when we set JdbcRowSet.setCommand().                    
                </comment>
                <comment line="1607">
                    We may require all the basic properties of setEscapeProcessing                    
                </comment>
                <comment line="1608">
                    setMaxFieldSize etc. which an application can use before we call                    
                </comment>
                <comment line="1609">
                    execute.                    
                </comment>
                <comment line="1614">
                    will return ResultSetMetaData                    
                </comment>
                <scope line="1610"/>
                <scope line="1612"/>
            </method>
            <javadoc line="1620">
                &lt;p&gt;Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  an &lt;code&gt;Object&lt;/code&gt;.
                  &lt;p&gt;This method will return the value of the given column as a
                  Java object.  The type of the Java object will be the default
                  Java object type corresponding to the column&apos;s SQL type,
                  following the mapping for built-in types specified in the JDBC
                  specification.
                  &lt;p&gt;This method may also be used to read datatabase-specific
                  abstract data types.
                  In the JDBC 3.0 API, the behavior of method
                  &lt;code&gt;getObject&lt;/code&gt; is extended to materialize
                  data of SQL user-defined types.  When a column contains
                  a structured or distinct value, the behavior of this method is as
                  if it were a call to: &lt;code&gt;getObject(columnIndex,
                  this.getStatement().getConnection().getTypeMap())&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    a <code>java.lang.Object</code> holding the column value                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getObject" type="Object" line="1647">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1653">
                &lt;p&gt;Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as
                  an &lt;code&gt;Object&lt;/code&gt;.
                  &lt;p&gt;This method will return the value of the given column as a
                  Java object.  The type of the Java object will be the default
                  Java object type corresponding to the column&apos;s SQL type,
                  following the mapping for built-in types specified in the JDBC
                  specification.
                  &lt;p&gt;This method may also be used to read datatabase-specific
                  abstract data types.
                  In the JDBC 3.0 API, the behavior of the method
                  &lt;code&gt;getObject&lt;/code&gt; is extended to materialize
                  data of SQL user-defined types.  When a column contains
                  a structured or distinct value, the behavior of this method is as
                  if it were a call to: &lt;code&gt;getObject(columnIndex,
                  this.getStatement().getConnection().getTypeMap())&lt;/code&gt;.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    a <code>java.lang.Object</code> holding the column value                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getObject" type="Object" line="1680">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1686">
                Maps the given &lt;code&gt;JdbcRowSetImpl&lt;/code&gt; column name to its
                  &lt;code&gt;JdbcRowSetImpl&lt;/code&gt; column index and reflects this on
                  the internal &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <param>
                    columnName the name of the column                    
                </param>
                <return>
                    the column index of the given column name                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      (2) this rowset does not have a currently valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="findColumn" type="int" line="1697">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1710">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.                
                <return>
                    a <code>java.io.Reader</code> object that contains the column
                      value; if the value is SQL <code>NULL</code>, the value returned is
                      <code>null</code>.                    
                </return>
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
            </javadoc>
            <method name="getCharacterStream" type="java.io.Reader" line="1720">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1726">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.                
                <return>
                    a <code>java.io.Reader</code> object that contains the column
                      value; if the value is SQL <code>NULL</code>, the value returned is
                      <code>null</code>.                    
                </return>
                <param>
                    columnName the name of the column                    
                </param>
                <return>
                    the value in the specified column as a <code>java.io.Reader</code>                    
                </return>
            </javadoc>
            <method name="getCharacterStream" type="java.io.Reader" line="1738">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1742">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; with full precision.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    the column value (full precision);
                      if the value is SQL <code>NULL</code>, the value returned is
                      <code>null</code>.                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid
                      connection, prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="1755">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1761">
                Gets the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; with full precision.                
                <param>
                    columnName the column name                    
                </param>
                <return>
                    the column value (full precision);
                      if the value is SQL <code>NULL</code>, the value returned is
                      <code>null</code>.                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid
                      connection, prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="1774">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1782">
                Indicates whether the cursor is before the first row in
                  this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <return>
                    <code>true</code> if the cursor is before the first row;
                      <code>false</code> if the cursor is at any other position or the
                      result set contains no rows                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid
                      connection, prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="isBeforeFirst" type="boolean" line="1793"/>
            <javadoc line="1799">
                Indicates whether the cursor is after the last row in
                  this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <return>
                    <code>true</code> if the cursor is after the last row;
                      <code>false</code> if the cursor is at any other position or the
                      result set contains no rows                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid
                      connection, prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="isAfterLast" type="boolean" line="1810"/>
            <javadoc line="1816">
                Indicates whether the cursor is on the first row of
                  this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <return>
                    <code>true</code> if the cursor is on the first row;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid
                      connection, prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="isFirst" type="boolean" line="1826"/>
            <javadoc line="1832">
                Indicates whether the cursor is on the last row of
                  this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object.
                  Note: Calling the method &lt;code&gt;isLast&lt;/code&gt; may be expensive
                  because the JDBC driver
                  might need to fetch ahead one row in order to determine
                  whether the current row is the last row in the result set.                
                <return>
                    <code>true</code> if the cursor is on the last row;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid
                      connection, prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="isLast" type="boolean" line="1847"/>
            <javadoc line="1853">
                Moves the cursor to the front of
                  this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object, just before the
                  first row. This method has no effect if the result set contains no rows.                
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) the result set type is <code>TYPE_FORWARD_ONLY</code>,
                      or (3) this rowset does not currently have a valid
                      connection, prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="beforeFirst" type="void" line="1863"/>
            <javadoc line="1870">
                Moves the cursor to the end of
                  this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object, just after the
                  last row. This method has no effect if the result set contains no rows.                
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) the result set type is <code>TYPE_FORWARD_ONLY</code>,
                      or (3) this rowset does not currently have a valid
                      connection, prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="afterLast" type="void" line="1879"/>
            <javadoc line="1886">
                Moves the cursor to the first row in
                  this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <return>
                    <code>true</code> if the cursor is on a valid row;
                      <code>false</code> if there are no rows in the result set                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) the result set type is <code>TYPE_FORWARD_ONLY</code>,
                      or (3) this rowset does not currently have a valid
                      connection, prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="first" type="boolean" line="1897">
                <declaration name="b" type="boolean" line="1900"/>
            </method>
            <javadoc line="1906">
                Moves the cursor to the last row in
                  this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <return>
                    <code>true</code> if the cursor is on a valid row;
                      <code>false</code> if there are no rows in the result set                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) the result set type is <code>TYPE_FORWARD_ONLY</code>,
                      or (3) this rowset does not currently have a valid
                      connection, prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="last" type="boolean" line="1917">
                <declaration name="b" type="boolean" line="1920"/>
            </method>
            <javadoc line="1925">
                Retrieves the current row number.  The first row is number 1, the
                  second is number 2, and so on.                
                <return>
                    the current row number; <code>0</code> if there is no current row                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getRow" type="int" line="1934"/>
            <javadoc line="1940">
                Moves the cursor to the given row number in
                  this rowset&apos;s internal &lt;code&gt;ResultSet&lt;/code&gt; object.
                  &lt;p&gt;If the row number is positive, the cursor moves to
                  the given row number with respect to the
                  beginning of the result set.  The first row is row 1, the second
                  is row 2, and so on.
                  &lt;p&gt;If the given row number is negative, the cursor moves to
                  an absolute row position with respect to
                  the end of the result set.  For example, calling the method
                  &lt;code&gt;absolute(-1)&lt;/code&gt; positions the
                  cursor on the last row, calling the method &lt;code&gt;absolute(-2)&lt;/code&gt;
                  moves the cursor to the next-to-last row, and so on.
                  &lt;p&gt;An attempt to position the cursor beyond the first/last row in
                  the result set leaves the cursor before the first row or after
                  the last row.
                  &lt;p&gt;&lt;B&gt;Note:&lt;/B&gt; Calling &lt;code&gt;absolute(1)&lt;/code&gt; is the same
                  as calling &lt;code&gt;first()&lt;/code&gt;. Calling &lt;code&gt;absolute(-1)&lt;/code&gt;
                  is the same as calling &lt;code&gt;last()&lt;/code&gt;.                
                <return>
                    <code>true</code> if the cursor is on the result set;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) the row is <code>0</code>, (3) the result set
                      type is <code>TYPE_FORWARD_ONLY</code>, or (4) this
                      rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="absolute" type="boolean" line="1972">
                <params>
                    <param name="row" type="int"/>
                </params>
                <declaration name="b" type="boolean" line="1975"/>
            </method>
            <javadoc line="1980">
                Moves the cursor a relative number of rows, either positive or negative.
                  Attempting to move beyond the first/last row in the
                  result set positions the cursor before/after the
                  the first/last row. Calling &lt;code&gt;relative(0)&lt;/code&gt; is valid, but does
                  not change the cursor position.
                  &lt;p&gt;Note: Calling the method &lt;code&gt;relative(1)&lt;/code&gt;
                  is different from calling the method &lt;code&gt;next()&lt;/code&gt;
                  because is makes sense to call &lt;code&gt;next()&lt;/code&gt; when there
                  is no current row,
                  for example, when the cursor is positioned before the first row
                  or after the last row of the result set.                
                <return>
                    <code>true</code> if the cursor is on a row;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) there is no current row, (3) the result set
                      type is <code>TYPE_FORWARD_ONLY</code>, or (4) this
                      rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="relative" type="boolean" line="2002">
                <params>
                    <param name="rows" type="int"/>
                </params>
                <declaration name="b" type="boolean" line="2005"/>
            </method>
            <javadoc line="2010">
                Moves the cursor to the previous row in this
                  &lt;code&gt;ResultSet&lt;/code&gt; object.
                  &lt;p&gt;&lt;B&gt;Note:&lt;/B&gt; Calling the method &lt;code&gt;previous()&lt;/code&gt; is not the same as
                  calling the method &lt;code&gt;relative(-1)&lt;/code&gt; because it
                  makes sense to call &lt;code&gt;previous()&lt;/code&gt; when there is no current row.                
                <return>
                    <code>true</code> if the cursor is on a valid row;
                      <code>false</code> if it is off the result set                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) the result set type is <code>TYPE_FORWARD_ONLY</code>,
                      or (3) this rowset does not currently have a valid
                      connection, prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="previous" type="boolean" line="2025">
                <declaration name="b" type="boolean" line="2028"/>
            </method>
            <javadoc line="2033">
                Gives a hint as to the direction in which the rows in this
                  &lt;code&gt;ResultSet&lt;/code&gt; object will be processed.
                  The initial value is determined by the
                  &lt;code&gt;Statement&lt;/code&gt; object
                  that produced this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object.
                  The fetch direction may be changed at any time.                
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) the result set type is <code>TYPE_FORWARD_ONLY</code>
                      and the fetch direction is not <code>FETCH_FORWARD</code>,
                      or (3) this rowset does not currently have a valid
                      connection, prepared statement, and result set                    
                </throws>
                <see>
                    java.sql.Statement#setFetchDirection                    
                </see>
            </javadoc>
            <method name="setFetchDirection" type="void" line="2048">
                <params>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <javadoc line="2054">
                Returns the fetch direction for this
                  &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <return>
                    the current fetch direction for this rowset's
                      <code>ResultSet</code> object                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getFetchDirection" type="int" line="2064">
                <scope line="2065"/>
                <scope line="2067"/>
            </method>
            <javadoc line="2073">
                Gives the JDBC driver a hint as to the number of rows that should
                  be fetched from the database when more rows are needed for this
                  &lt;code&gt;ResultSet&lt;/code&gt; object.
                  If the fetch size specified is zero, the JDBC driver
                  ignores the value and is free to make its own best guess as to what
                  the fetch size should be.  The default value is set by the
                  &lt;code&gt;Statement&lt;/code&gt; object
                  that created the result set.  The fetch size may be changed at any time.                
                <param>
                    rows the number of rows to fetch                    
                </param>
                <throws>
                    SQLException if (1) a database access error occurs, (2) the
                      condition <code>0 <= rows <= this.getMaxRows()</code> is not
                      satisfied, or (3) this rowset does not currently have a valid
                      connection, prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="setFetchSize" type="void" line="2090">
                <params>
                    <param name="rows" type="int"/>
                </params>
            </method>
            <javadoc line="2096">
                Returns the fetch size for this
                  &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <return>
                    the current fetch size for this rowset's <code>ResultSet</code> object                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getType" type="int" line="2106">
                <comment line="2113">
                    If the ResultSet has not been created, then return the default type                    
                </comment>
                <comment line="2114">
                    otherwise return the type from the ResultSet.                    
                </comment>
                <scope line="2107"/>
                <scope line="2109"/>
                <scope line="2115"/>
                <scope line="2117">
                    <declaration name="rstype" type="int" line="2118"/>
                </scope>
            </method>
            <javadoc line="2125">
                Returns the concurrency mode of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object.
                  The concurrency used is determined by the
                  &lt;code&gt;Statement&lt;/code&gt; object that created the result set.                
                <return>
                    the concurrency type, either <code>CONCUR_READ_ONLY</code>
                      or <code>CONCUR_UPDATABLE</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getConcurrency" type="int" line="2136">
                <scope line="2137"/>
                <scope line="2139"/>
            </method>
            <javadoc line="2149">
                Indicates whether the current row has been updated.  The value returned
                  depends on whether or not the result set can detect updates.                
                <return>
                    <code>true</code> if the row has been visibly updated
                      by the owner or another, and updates are detected                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
                <see>
                    java.sql.DatabaseMetaData#updatesAreDetected                    
                </see>
            </javadoc>
            <method name="rowUpdated" type="boolean" line="2160"/>
            <javadoc line="2166">
                Indicates whether the current row has had an insertion.
                  The value returned depends on whether or not this
                  &lt;code&gt;ResultSet&lt;/code&gt; object can detect visible inserts.                
                <return>
                    <code>true</code> if a row has had an insertion
                      and insertions are detected; <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
                <see>
                    java.sql.DatabaseMetaData#insertsAreDetected                    
                </see>
            </javadoc>
            <method name="rowInserted" type="boolean" line="2179"/>
            <javadoc line="2185">
                Indicates whether a row has been deleted.  A deleted row may leave
                  a visible &quot;hole&quot; in a result set.  This method can be used to
                  detect holes in a result set.  The value returned depends on whether
                  or not this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object can detect deletions.                
                <return>
                    <code>true</code> if a row was deleted and deletions are detected;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
                <see>
                    java.sql.DatabaseMetaData#deletesAreDetected                    
                </see>
            </javadoc>
            <method name="rowDeleted" type="boolean" line="2198"/>
            <javadoc line="2204">
                Gives a nullable column a null value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt;
                  or &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateNull" type="void" line="2217">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="2220">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2221">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2227">
                Updates the designated column with a &lt;code&gt;boolean&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateBoolean" type="void" line="2241">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="boolean"/>
                </params>
                <comment line="2244">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2245">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2251">
                Updates the designated column with a &lt;code&gt;byte&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateByte" type="void" line="2266">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="byte"/>
                </params>
                <comment line="2269">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2270">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2276">
                Updates the designated column with a &lt;code&gt;short&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateShort" type="void" line="2290">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="short"/>
                </params>
                <comment line="2293">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2294">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2300">
                Updates the designated column with an &lt;code&gt;int&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateInt" type="void" line="2313">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="int"/>
                </params>
                <comment line="2316">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2317">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2323">
                Updates the designated column with a &lt;code&gt;long&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateLong" type="void" line="2337">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="long"/>
                </params>
                <comment line="2340">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2341">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2347">
                Updates the designated column with a &lt;code&gt;float&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateFloat" type="void" line="2361">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="float"/>
                </params>
                <comment line="2364">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2365">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2371">
                Updates the designated column with a &lt;code&gt;double&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateDouble" type="void" line="2385">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="double"/>
                </params>
                <comment line="2388">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2389">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2395">
                Updates the designated column with a &lt;code&gt;java.math.BigDecimal&lt;/code&gt;
                  value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateBigDecimal" type="void" line="2410">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="BigDecimal"/>
                </params>
                <comment line="2413">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2414">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2420">
                Updates the designated column with a &lt;code&gt;String&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateString" type="void" line="2434">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="String"/>
                </params>
                <comment line="2437">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2438">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2444">
                Updates the designated column with a &lt;code&gt;byte&lt;/code&gt; array value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateBytes" type="void" line="2458">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="byte"/>
                </params>
                <comment line="2461">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2462">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2468">
                Updates the designated column with a &lt;code&gt;java.sql.Date&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateDate" type="void" line="2482">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.sql.Date"/>
                </params>
                <comment line="2485">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2486">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2493">
                Updates the designated column with a &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateTime" type="void" line="2507">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.sql.Time"/>
                </params>
                <comment line="2510">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2511">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2517">
                Updates the designated column with a &lt;code&gt;java.sql.Timestamp&lt;/code&gt;
                  value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateTimestamp" type="void" line="2532">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.sql.Timestamp"/>
                </params>
                <comment line="2535">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2536">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2542">
                Updates the designated column with an ascii stream value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <throws>
                    SQLException if (1) a database access error occurs
                      (2) or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="2557">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="2560">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2561">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2567">
                Updates the designated column with a binary stream value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="2582">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="2585">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2586">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2592">
                Updates the designated column with a character stream value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="2607">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.Reader"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="2610">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2611">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2617">
                Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    scale for <code>java.sql.Types.DECIMAl</code>
                      or <code>java.sql.Types.NUMERIC</code> types,
                      this is the number of digits after the decimal point.  For all other
                      types this value will be ignored.                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateObject" type="void" line="2635">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="Object"/>
                    <param name="scale" type="int"/>
                </params>
                <comment line="2638">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2639">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2645">
                Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateObject" type="void" line="2659">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="Object"/>
                </params>
                <comment line="2662">
                    To check the type and concurrency of the ResultSet                    
                </comment>
                <comment line="2663">
                    to verify whether updates are possible or not                    
                </comment>
            </method>
            <javadoc line="2669">
                Updates the designated column with a &lt;code&gt;null&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateNull" type="void" line="2682">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2686">
                Updates the designated column with a &lt;code&gt;boolean&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateBoolean" type="void" line="2698">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="boolean"/>
                </params>
            </method>
            <javadoc line="2702">
                Updates the designated column with a &lt;code&gt;byte&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateByte" type="void" line="2714">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="2718">
                Updates the designated column with a &lt;code&gt;short&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateShort" type="void" line="2730">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="short"/>
                </params>
            </method>
            <javadoc line="2734">
                Updates the designated column with an &lt;code&gt;int&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateInt" type="void" line="2746">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="2750">
                Updates the designated column with a &lt;code&gt;long&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateLong" type="void" line="2762">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="long"/>
                </params>
            </method>
            <javadoc line="2766">
                Updates the designated column with a &lt;code&gt;float &lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateFloat" type="void" line="2778">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="float"/>
                </params>
            </method>
            <javadoc line="2782">
                Updates the designated column with a &lt;code&gt;double&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateDouble" type="void" line="2794">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="2798">
                Updates the designated column with a &lt;code&gt;java.sql.BigDecimal&lt;/code&gt;
                  value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateBigDecimal" type="void" line="2811">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="BigDecimal"/>
                </params>
            </method>
            <javadoc line="2815">
                Updates the designated column with a &lt;code&gt;String&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateString" type="void" line="2827">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="String"/>
                </params>
            </method>
            <javadoc line="2831">
                Updates the designated column with a &lt;code&gt;boolean&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  JDBC 2.0
                  Updates a column with a byte array value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row, or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;insertRow&lt;/code&gt;
                  methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateBytes" type="void" line="2852">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="2856">
                Updates the designated column with a &lt;code&gt;java.sql.Date&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateDate" type="void" line="2868">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.sql.Date"/>
                </params>
            </method>
            <javadoc line="2872">
                Updates the designated column with a &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateTime" type="void" line="2884">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.sql.Time"/>
                </params>
            </method>
            <javadoc line="2888">
                Updates the designated column with a &lt;code&gt;java.sql.Timestamp&lt;/code&gt;
                  value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateTimestamp" type="void" line="2901">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.sql.Timestamp"/>
                </params>
            </method>
            <javadoc line="2905">
                Updates the designated column with an ascii stream value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="2918">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="2922">
                Updates the designated column with a binary stream value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="2935">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="2939">
                Updates the designated column with a character stream value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values
                  in the current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt;
                  methods do not update the underlying database; instead the
                  &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;insertRow&lt;/code&gt; methods are called
                  to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    reader the new column <code>Reader</code> stream value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="2953">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="2957">
                Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    scale for <code>java.sql.Types.DECIMAL</code>
                      or <code>java.sql.Types.NUMERIC</code> types,
                      this is the number of digits after the decimal point.  For all other
                      types this value will be ignored.                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateObject" type="void" line="2973">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="Object"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="2977">
                Updates the designated column with an &lt;code&gt;Object&lt;/code&gt; value.
                  The &lt;code&gt;updateXXX&lt;/code&gt; methods are used to update column values in the
                  current row or the insert row.  The &lt;code&gt;updateXXX&lt;/code&gt; methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateObject" type="void" line="2989">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <javadoc line="2993">
                Inserts the contents of the insert row into this
                  &lt;code&gt;ResultSet&lt;/code&gt; object and into the database
                  and also notifies listeners that a row has changed.
                  The cursor must be on the insert row when this method is called.                
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) this method is called when the cursor is not
                      on the insert row, (3) not all non-nullable columns in
                      the insert row have been given a value, or (4) this
                      rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="insertRow" type="void" line="3006"/>
            <javadoc line="3013">
                Updates the underlying database with the new contents of the
                  current row of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object
                  and notifies listeners that a row has changed.
                  This method cannot be called when the cursor is on the insert row.                
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) this method is called when the cursor is
                      on the insert row, (3) the concurrency of the result
                      set is <code>ResultSet.CONCUR_READ_ONLY</code>, or
                      (4) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="updateRow" type="void" line="3026"/>
            <javadoc line="3033">
                Deletes the current row from this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object
                  and from the underlying database and also notifies listeners that a row
                  has changed.  This method cannot be called when the cursor is on the insert
                  row.                
                <throws>
                    SQLException if a database access error occurs
                      or if this method is called when the cursor is on the insert row                    
                </throws>
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) this method is called when the cursor is before the
                      first row, after the last row, or on the insert row,
                      (3) the concurrency of this rowset's result
                      set is <code>ResultSet.CONCUR_READ_ONLY</code>, or
                      (4) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="deleteRow" type="void" line="3049"/>
            <javadoc line="3056">
                Refreshes the current row of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt;
                  object with its most recent value in the database.  This method
                  cannot be called when the cursor is on the insert row.
                  &lt;P&gt;The &lt;code&gt;refreshRow&lt;/code&gt; method provides a way for an
                  application to explicitly tell the JDBC driver to refetch
                  a row(s) from the database.  An application may want to call
                  &lt;code&gt;refreshRow&lt;/code&gt; when caching or prefetching is being
                  done by the JDBC driver to fetch the latest value of a row
                  from the database.  The JDBC driver may actually refresh multiple
                  rows at once if the fetch size is greater than one.
                  &lt;P&gt; All values are refetched subject to the transaction isolation
                  level and cursor sensitivity.  If &lt;code&gt;refreshRow&lt;/code&gt; is called after
                  calling an &lt;code&gt;updateXXX&lt;/code&gt; method, but before calling
                  the method &lt;code&gt;updateRow&lt;/code&gt;, then the
                  updates made to the row are lost.  Calling the method
                  &lt;code&gt;refreshRow&lt;/code&gt; frequently will likely slow performance.                
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) this method is called when the cursor is
                      on the insert row, or (3) this rowset does not
                      currently have a valid connection, prepared statement,
                      and result set                    
                </throws>
            </javadoc>
            <method name="refreshRow" type="void" line="3083"/>
            <javadoc line="3089">
                Cancels the updates made to the current row in this
                  &lt;code&gt;ResultSet&lt;/code&gt; object and notifies listeners that a row
                  has changed. This method may be called after calling an
                  &lt;code&gt;updateXXX&lt;/code&gt; method(s) and before calling
                  the method &lt;code&gt;updateRow&lt;/code&gt; to roll back
                  the updates made to a row.  If no updates have been made or
                  &lt;code&gt;updateRow&lt;/code&gt; has already been called, this method has no
                  effect.                
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) this method is called when the cursor is
                      on the insert row, or (3) this rowset does not
                      currently have a valid connection, prepared statement,
                      and result set                    
                </throws>
            </javadoc>
            <method name="cancelRowUpdates" type="void" line="3105"/>
            <javadoc line="3113">
                Moves the cursor to the insert row.  The current cursor position is
                  remembered while the cursor is positioned on the insert row.
                  The insert row is a special row associated with an updatable
                  result set.  It is essentially a buffer where a new row may
                  be constructed by calling the &lt;code&gt;updateXXX&lt;/code&gt; methods prior to
                  inserting the row into the result set.
                  Only the &lt;code&gt;updateXXX&lt;/code&gt;, &lt;code&gt;getXXX&lt;/code&gt;,
                  and &lt;code&gt;insertRow&lt;/code&gt; methods may be
                  called when the cursor is on the insert row.  All of the columns in
                  a result set must be given a value each time this method is
                  called before calling &lt;code&gt;insertRow&lt;/code&gt;.
                  An &lt;code&gt;updateXXX&lt;/code&gt; method must be called before a
                  &lt;code&gt;getXXX&lt;/code&gt; method can be called on a column value.                
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) this rowset's <code>ResultSet</code> object is
                      not updatable, or (3) this rowset does not
                      currently have a valid connection, prepared statement,
                      and result set                    
                </throws>
            </javadoc>
            <method name="moveToInsertRow" type="void" line="3137"/>
            <javadoc line="3143">
                Moves the cursor to the remembered cursor position, usually the
                  current row.  This method has no effect if the cursor is not on
                  the insert row.                
                <throws>
                    SQLException if (1) a database access error occurs,
                      (2) this rowset's <code>ResultSet</code> object is
                      not updatable, or (3) this rowset does not
                      currently have a valid connection, prepared statement,
                      and result set                    
                </throws>
            </javadoc>
            <method name="moveToCurrentRow" type="void" line="3154"/>
            <javadoc line="3160">
                Returns the &lt;code&gt;Statement&lt;/code&gt; object that produced this
                  &lt;code&gt;ResultSet&lt;/code&gt; object.
                  If the result set was generated some other way, such as by a
                  &lt;code&gt;DatabaseMetaData&lt;/code&gt; method, this method returns
                  &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the <code>Statment</code> object that produced
                      this rowset's <code>ResultSet</code> object or <code>null</code>
                      if the result set was produced some other way                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="getStatement" type="java.sql.Statement" line="3172">
                <scope line="3175"/>
                <scope line="3177"/>
            </method>
            <javadoc line="3182">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as an &lt;code&gt;Object&lt;/code&gt;.
                  This method uses the given &lt;code&gt;Map&lt;/code&gt; object
                  for the custom mapping of the
                  SQL structured or distinct type that is being retrieved.                
                <param>
                    i the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    map a <code>java.util.Map</code> object that contains the mapping
                      from SQL type names to classes in the Java programming language                    
                </param>
                <return>
                    an <code>Object</code> in the Java programming language
                      representing the SQL value                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getObject" type="Object" line="3200">
                <params>
                    <param name="i" type="int"/>
                    <param name="map" type="java.util.Map<String,Class<?>>"/>
                </params>
            </method>
            <javadoc line="3206">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Ref&lt;/code&gt; object.                
                <param>
                    i the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    a <code>Ref</code> object representing an SQL <code>REF</code> value                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getRef" type="Ref" line="3216">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="3223">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Blob&lt;/code&gt; object.                
                <param>
                    i the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    a <code>Blob</code> object representing the SQL <code>BLOB</code>
                      value in the specified column                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getBlob" type="Blob" line="3234">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="3240">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Clob&lt;/code&gt; object.                
                <param>
                    i the first column is 1, the second is 2, and so on                    
                </param>
                <return>
                    a <code>Clob</code> object representing the SQL <code>CLOB</code>
                      value in the specified column                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getClob" type="Clob" line="3251">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="3257">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as an &lt;code&gt;Array&lt;/code&gt; object.                
                <param>
                    i the first column is 1, the second is 2, and so on.                    
                </param>
                <return>
                    an <code>Array</code> object representing the SQL <code>ARRAY</code>
                      value in the specified column                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getArray" type="Array" line="3268">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="3274">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as an &lt;code&gt;Object&lt;/code&gt;.
                  This method uses the specified &lt;code&gt;Map&lt;/code&gt; object for
                  custom mapping if appropriate.                
                <param>
                    colName the name of the column from which to retrieve the value                    
                </param>
                <param>
                    map a <code>java.util.Map</code> object that contains the mapping
                      from SQL type names to classes in the Java programming language                    
                </param>
                <return>
                    an <code>Object</code> representing the SQL
                      value in the specified column                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getObject" type="Object" line="3291">
                <params>
                    <param name="colName" type="String"/>
                    <param name="map" type="java.util.Map<String,Class<?>>"/>
                </params>
            </method>
            <javadoc line="3295">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Ref&lt;/code&gt; object.                
                <param>
                    colName the column name                    
                </param>
                <return>
                    a <code>Ref</code> object representing the SQL <code>REF</code> value in
                      the specified column                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getRef" type="Ref" line="3306">
                <params>
                    <param name="colName" type="String"/>
                </params>
            </method>
            <javadoc line="3310">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Blob&lt;/code&gt; object.                
                <param>
                    colName the name of the column from which to retrieve the value                    
                </param>
                <return>
                    a <code>Blob</code> object representing the SQL <code>BLOB</code>
                      value in the specified column                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getBlob" type="Blob" line="3321">
                <params>
                    <param name="colName" type="String"/>
                </params>
            </method>
            <javadoc line="3325">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;Clob&lt;/code&gt; object.                
                <param>
                    colName the name of the column from which to retrieve the value                    
                </param>
                <return>
                    a <code>Clob</code> object representing the SQL <code>CLOB</code>
                      value in the specified column                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getClob" type="Clob" line="3336">
                <params>
                    <param name="colName" type="String"/>
                </params>
            </method>
            <javadoc line="3340">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as an &lt;code&gt;Array&lt;/code&gt; object.                
                <param>
                    colName the name of the column from which to retrieve the value                    
                </param>
                <return>
                    an <code>Array</code> object representing the SQL <code>ARRAY</code>
                      value in the specified column                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getArray" type="Array" line="3351">
                <params>
                    <param name="colName" type="String"/>
                </params>
            </method>
            <javadoc line="3355">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Date&lt;/code&gt;
                  object. This method uses the given calendar to construct an appropriate
                  millisecond value for the date if the underlying database does not store
                  timezone information.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object
                      to use in constructing the date                    
                </param>
                <return>
                    the column value as a <code>java.sql.Date</code> object;
                      if the value is SQL <code>NULL</code>,
                      the value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) a database access error occurs
                      or (2) this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="3372">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="3378">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Date&lt;/code&gt;
                  object. This method uses the given calendar to construct an appropriate
                  millisecond value for the date if the underlying database does not store
                  timezone information.                
                <param>
                    columnName the SQL name of the column from which to retrieve the value                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object
                      to use in constructing the date                    
                </param>
                <return>
                    the column value as a <code>java.sql.Date</code> object;
                      if the value is SQL <code>NULL</code>,
                      the value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="3396">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="3400">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Time&lt;/code&gt;
                  object. This method uses the given calendar to construct an appropriate
                  millisecond value for the date if the underlying database does not store
                  timezone information.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object
                      to use in constructing the time                    
                </param>
                <return>
                    the column value as a <code>java.sql.Time</code> object;
                      if the value is SQL <code>NULL</code>,
                      the value returned is <code>null</code> in the Java programming language                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="3417">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="3423">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;java.sql.Time&lt;/code&gt;
                  object. This method uses the given calendar to construct an appropriate
                  millisecond value for the date if the underlying database does not store
                  timezone information.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object
                      to use in constructing the time                    
                </param>
                <return>
                    the column value as a <code>java.sql.Time</code> object;
                      if the value is SQL <code>NULL</code>,
                      the value returned is <code>null</code> in the Java programming language                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="3440">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="3444">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.
                  This method uses the given calendar to construct an appropriate millisecond
                  value for the timestamp if the underlying database does not store
                  timezone information.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object
                      to use in constructing the timestamp                    
                </param>
                <return>
                    the column value as a <code>java.sql.Timestamp</code> object;
                      if the value is SQL <code>NULL</code>,
                      the value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="3462">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="3468">
                Returns the value of the designated column in the current row
                  of this rowset&apos;s &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.
                  This method uses the given calendar to construct an appropriate millisecond
                  value for the timestamp if the underlying database does not store
                  timezone information.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object
                      to use in constructing the timestamp                    
                </param>
                <return>
                    the column value as a <code>java.sql.Timestamp</code> object;
                      if the value is SQL <code>NULL</code>,
                      the value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or this rowset does not currently have a valid connection,
                      prepared statement, and result set                    
                </throws>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="3486">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="3491">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JdbcRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;double&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    ref the new <code>Ref</code> column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateRef" type="void" line="3515">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="ref" type="java.sql.Ref"/>
                </params>
            </method>
            <javadoc line="3520">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JdbcRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;double&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    ref the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateRef" type="void" line="3543">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="ref" type="java.sql.Ref"/>
                </params>
            </method>
            <javadoc line="3547">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JdbcRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;double&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    c the new column <code>Clob</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateClob" type="void" line="3570">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="c" type="Clob"/>
                </params>
            </method>
            <javadoc line="3576">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JdbcRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;double&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    c the new column <code>Clob</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateClob" type="void" line="3598">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="c" type="Clob"/>
                </params>
            </method>
            <javadoc line="3602">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JdbcRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.sql.Blob&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    b the new column <code>Blob</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateBlob" type="void" line="3625">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="b" type="Blob"/>
                </params>
            </method>
            <javadoc line="3630">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JdbcRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.sql.Blob &lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    b the new column <code>Blob</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateBlob" type="void" line="3652">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="b" type="Blob"/>
                </params>
            </method>
            <javadoc line="3656">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JdbcRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.sql.Array&lt;/code&gt; values.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    a the new column <code>Array</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateArray" type="void" line="3679">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="a" type="Array"/>
                </params>
            </method>
            <javadoc line="3684">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JdbcRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.sql.Array&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    a the new column <code>Array</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateArray" type="void" line="3706">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="a" type="Array"/>
                </params>
            </method>
            <javadoc line="3710">
                Provide interface coverage for getURL(int) in ResultSet-&gt;RowSet                
            </javadoc>
            <method name="getURL" type="java.net.URL" line="3713">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="3718">
                Provide interface coverage for getURL(String) in ResultSet-&gt;RowSet                
            </javadoc>
            <method name="getURL" type="java.net.URL" line="3721">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="3725">
                Return the RowSetWarning object for the current row of a
                  &lt;code&gt;JdbcRowSetImpl&lt;/code&gt;                
            </javadoc>
            <method name="getRowSetWarnings" type="RowSetWarning" line="3729"/>
            <javadoc line="3732">
                Unsets the designated parameter to the given int array.
                  This was set using &lt;code&gt;setMatchColumn&lt;/code&gt;
                  as the column which will form the basis of the join.
                  &lt;P&gt;
                  The parameter value unset by this method should be same
                  as was set.                
                <param>
                    columnIdxes the index into this rowset
                      object's internal representation of parameter values                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds or if the columnIdx is
                      not the same as set using <code>setMatchColumn(int [])</code>                    
                </throws>
            </javadoc>
            <method name="unsetMatchColumn" type="void" line="3746">
                <params>
                    <param name="columnIdxes" type="int[]"/>
                </params>
                <declaration name="i_val" type="int" line="3748"/>
                <scope line="3749">
                    <scope line="3751"/>
                </scope>
                <scope line="3756"/>
            </method>
            <javadoc line="3761">
                Unsets the designated parameter to the given String array.
                  This was set using &lt;code&gt;setMatchColumn&lt;/code&gt;
                  as the column which will form the basis of the join.
                  &lt;P&gt;
                  The parameter value unset by this method should be same
                  as was set.                
                <param>
                    columnIdxes the index into this rowset
                      object's internal representation of parameter values                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds or if the columnName is
                      not the same as set using <code>setMatchColumn(String [])</code>                    
                </throws>
            </javadoc>
            <method name="unsetMatchColumn" type="void" line="3775">
                <params>
                    <param name="columnIdxes" type="String[]"/>
                </params>
                <scope line="3777">
                    <scope line="3778"/>
                </scope>
                <scope line="3783"/>
            </method>
            <javadoc line="3788">
                Retrieves the column name as &lt;code&gt;String&lt;/code&gt; array
                  that was set using &lt;code&gt;setMatchColumn(String [])&lt;/code&gt;
                  for this rowset.                
                <return>
                    a <code>String</code> array object that contains the column names
                      for the rowset which has this the match columns                    
                </return>
                <throws>
                    SQLException if an error occurs or column name is not set                    
                </throws>
            </javadoc>
            <method name="getMatchColumnNames" type="String[]" line="3798">
                <declaration name="str_temp" type="String[]" line="3800"/>
                <scope line="3802"/>
            </method>
            <javadoc line="3810">
                Retrieves the column id as &lt;code&gt;int&lt;/code&gt; array that was set using
                  &lt;code&gt;setMatchColumn(int [])&lt;/code&gt; for this rowset.                
                <return>
                    a <code>int</code> array object that contains the column ids
                      for the rowset which has this as the match columns.                    
                </return>
                <throws>
                    SQLException if an error occurs or column index is not set                    
                </throws>
            </javadoc>
            <method name="getMatchColumnIndexes" type="int[]" line="3819">
                <declaration name="int_temp" type="Integer[]" line="3821"/>
                <declaration name="i_temp" type="int[]" line="3822"/>
                <declaration name="i_val" type="int" line="3823"/>
                <scope line="3827"/>
                <scope line="3834"/>
            </method>
            <javadoc line="3841">
                Sets the designated parameter to the given int array.
                  This forms the basis of the join for the
                  &lt;code&gt;JoinRowSet&lt;/code&gt; as the column which will form the basis of the
                  join.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this rowset&apos;s
                  command when the method &lt;code&gt;getMatchColumnIndexes&lt;/code&gt; is called.                
                <param>
                    columnIdxes the indexes into this rowset
                      object's internal representation of parameter values; the
                      first parameter is 0, the second is 1, and so on; must be
                      <code>0</code> or greater                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
            </javadoc>
            <method name="setMatchColumn" type="void" line="3858">
                <params>
                    <param name="columnIdxes" type="int[]"/>
                </params>
                <scope line="3860">
                    <scope line="3861"/>
                </scope>
                <scope line="3865"/>
            </method>
            <javadoc line="3870">
                Sets the designated parameter to the given String array.
                  This forms the basis of the join for the
                  &lt;code&gt;JoinRowSet&lt;/code&gt; as the column which will form the basis of the
                  join.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this rowset&apos;s
                  command when the method &lt;code&gt;getMatchColumn&lt;/code&gt; is called.                
                <param>
                    columnNames the name of the column into this rowset
                      object's internal representation of parameter values                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
            </javadoc>
            <method name="setMatchColumn" type="void" line="3885">
                <params>
                    <param name="columnNames" type="String[]"/>
                </params>
                <scope line="3887">
                    <scope line="3888"/>
                </scope>
                <scope line="3892"/>
            </method>
            <javadoc line="3898">
                Sets the designated parameter to the given &lt;code&gt;int&lt;/code&gt;
                  object.  This forms the basis of the join for the
                  &lt;code&gt;JoinRowSet&lt;/code&gt; as the column which will form the basis of the
                  join.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this rowset&apos;s
                  command when the method &lt;code&gt;getMatchColumn&lt;/code&gt; is called.                
                <param>
                    columnIdx the index into this rowset
                      object's internal representation of parameter values; the
                      first parameter is 0, the second is 1, and so on; must be
                      <code>0</code> or greater                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
            </javadoc>
            <method name="setMatchColumn" type="void" line="3915">
                <params>
                    <param name="columnIdx" type="int"/>
                </params>
                <comment line="3916">
                    validate, if col is ok to be set                    
                </comment>
                <comment line="3920">
                    set iMatchColumn                    
                </comment>
                <comment line="3922">
                    strMatchColumn = null;                    
                </comment>
                <scope line="3917"/>
                <scope line="3919"/>
            </method>
            <javadoc line="3926">
                Sets the designated parameter to the given &lt;code&gt;String&lt;/code&gt;
                  object.  This forms the basis of the join for the
                  &lt;code&gt;JoinRowSet&lt;/code&gt; as the column which will form the basis of the
                  join.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this rowset&apos;s
                  command when the method &lt;code&gt;getMatchColumn&lt;/code&gt; is called.                
                <param>
                    columnName the name of the column into this rowset
                      object's internal representation of parameter values                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
            </javadoc>
            <method name="setMatchColumn" type="void" line="3941">
                <params>
                    <param name="columnName" type="String"/>
                </params>
                <comment line="3942">
                    validate, if col is ok to be set                    
                </comment>
                <comment line="3946">
                    set strMatchColumn                    
                </comment>
                <comment line="3948">
                    iMatchColumn = -1;                    
                </comment>
                <scope line="3943"/>
                <scope line="3945"/>
            </method>
            <javadoc line="3952">
                Unsets the designated parameter to the given &lt;code&gt;int&lt;/code&gt;
                  object.  This was set using &lt;code&gt;setMatchColumn&lt;/code&gt;
                  as the column which will form the basis of the join.
                  &lt;P&gt;
                  The parameter value unset by this method should be same
                  as was set.                
                <param>
                    columnIdx the index into this rowset
                      object's internal representation of parameter values                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds or if the columnIdx is
                      not the same as set using <code>setMatchColumn(int)</code>                    
                </throws>
            </javadoc>
            <method name="unsetMatchColumn" type="void" line="3966">
                <params>
                    <param name="columnIdx" type="int"/>
                </params>
                <comment line="3967">
                    check if we are unsetting the SAME column                    
                </comment>
                <comment line="3973">
                    that is, we are unsetting it.                    
                </comment>
                <scope line="3968"/>
                <scope line="3970"/>
                <scope line="3972"/>
            </method>
            <javadoc line="3978">
                Unsets the designated parameter to the given &lt;code&gt;String&lt;/code&gt;
                  object.  This was set using &lt;code&gt;setMatchColumn&lt;/code&gt;
                  as the column which will form the basis of the join.
                  &lt;P&gt;
                  The parameter value unset by this method should be same
                  as was set.                
                <param>
                    columnName the index into this rowset
                      object's internal representation of parameter values                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds or if the columnName is
                      not the same as set using <code>setMatchColumn(String)</code>                    
                </throws>
            </javadoc>
            <method name="unsetMatchColumn" type="void" line="3993">
                <params>
                    <param name="columnName" type="String"/>
                </params>
                <comment line="3994">
                    check if we are unsetting the same column                    
                </comment>
                <comment line="4002">
                    that is, we are unsetting it.                    
                </comment>
                <scope line="3997"/>
                <scope line="3999"/>
                <scope line="4001"/>
            </method>
            <javadoc line="4006">
                Retrieves the &lt;code&gt;DatabaseMetaData&lt;/code&gt; associated with
                  the connection handle associated this this
                  &lt;code&gt;JdbcRowSet&lt;/code&gt; object.                
                <return>
                    the <code>DatabaseMetadata</code> associated
                      with the rowset's connection.                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="getDatabaseMetaData" type="DatabaseMetaData" line="4015">
                <declaration name="con" type="Connection" line="4016"/>
            </method>
            <javadoc line="4020">
                Retrieves the &lt;code&gt;ParameterMetaData&lt;/code&gt; associated with
                  the connection handle associated this this
                  &lt;code&gt;JdbcRowSet&lt;/code&gt; object.                
                <return>
                    the <code>ParameterMetadata</code> associated
                      with the rowset's connection.                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="getParameterMetaData" type="ParameterMetaData" line="4029"/>
            <javadoc line="4034">
                Commits all updates in this &lt;code&gt;JdbcRowSet&lt;/code&gt; object by
                  wrapping the internal &lt;code&gt;Connection&lt;/code&gt; object and calling
                  its &lt;code&gt;commit&lt;/code&gt; method.
                  This method sets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s private field
                  &lt;code&gt;rs&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; after saving its value to another
                  object, but only if the &lt;code&gt;ResultSet&lt;/code&gt;
                  constant &lt;code&gt;HOLD_CURSORS_OVER_COMMIT&lt;/code&gt; has not been set.
                  (The field &lt;code&gt;rs&lt;/code&gt; is this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s
                  &lt;code&gt;ResultSet&lt;/code&gt; object.)                
                <throws>
                    SQLException if autoCommit is set to true or if a database
                      access error occurs                    
                </throws>
            </javadoc>
            <method name="commit" type="void" line="4048">
                <comment line="4051">
                    Checking the holadbility value and making the result set handle null                    
                </comment>
                <comment line="4052">
                    Added as per Rave requirements                    
                </comment>
                <comment line="4057">
                    propertyChangeSupport.firePropertyChange(&quot;ResultSet&quot;,oldVal,rs);                    
                </comment>
                <scope line="4054">
                    <declaration name="oldVal" type="ResultSet" line="4055"/>
                </scope>
            </method>
            <javadoc line="4061">
                Sets auto-commit on the internal &lt;code&gt;Connection&lt;/code&gt; object with this
                  &lt;code&gt;JdbcRowSet&lt;/code&gt;                
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="setAutoCommit" type="void" line="4067">
                <params>
                    <param name="autoCommit" type="boolean"/>
                </params>
                <comment line="4068">
                    The connection object should be there                    
                </comment>
                <comment line="4069">
                    in order to commit the connection handle on or off.                    
                </comment>
                <comment line="4074">
                    Coming here means the connection object is null.                    
                </comment>
                <comment line="4075">
                    So generate a connection handle internally, since                    
                </comment>
                <comment line="4076">
                    a JdbcRowSet is always connected to a db, it is fine                    
                </comment>
                <comment line="4077">
                    to get a handle to the connection.                    
                </comment>
                <comment line="4079">
                    Get hold of a connection handle                    
                </comment>
                <comment line="4080">
                    and change the autcommit as passesd.                    
                </comment>
                <comment line="4083">
                    After setting the below the conn.getAutoCommit()                    
                </comment>
                <comment line="4084">
                    should return the same value.                    
                </comment>
                <scope line="4071"/>
                <scope line="4073"/>
            </method>
            <javadoc line="4090">
                Returns the auto-commit status with this &lt;code&gt;JdbcRowSet&lt;/code&gt;.                
                <return>
                    true if auto commit is true; false otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="getAutoCommit" type="boolean" line="4096"/>
            <javadoc line="4100">
                Rolls back all the updates in this &lt;code&gt;JdbcRowSet&lt;/code&gt; object by
                  wrapping the internal &lt;code&gt;Connection&lt;/code&gt; object and calling its
                  &lt;code&gt;rollback&lt;/code&gt; method.
                  This method sets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s private field
                  &lt;code&gt;rs&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; after saving its value to another object.
                  (The field &lt;code&gt;rs&lt;/code&gt; is this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s
                  internal &lt;code&gt;ResultSet&lt;/code&gt; object.)                
                <throws>
                    SQLException if autoCommit is set to true or a database
                      access error occurs                    
                </throws>
            </javadoc>
            <method name="rollback" type="void" line="4112">
                <comment line="4115">
                    Makes the result ste handle null after rollback                    
                </comment>
                <comment line="4116">
                    Added as per Rave requirements                    
                </comment>
                <comment line="4120">
                    propertyChangeSupport.firePropertyChange(&quot;ResultSet&quot;, oldVal,rs);                    
                </comment>
                <declaration name="oldVal" type="ResultSet" line="4118"/>
            </method>
            <javadoc line="4124">
                Rollbacks all the updates in the &lt;code&gt;JdbcRowSet&lt;/code&gt; back to the
                  last &lt;code&gt;Savepoint&lt;/code&gt; transaction marker. Wraps the internal
                  &lt;code&gt;Connection&lt;/code&gt; object and call it&apos;s rollback method                
                <param>
                    s the <code>Savepoint</code> transaction marker to roll the
                      transaction to.                    
                </param>
                <throws>
                    SQLException if autoCommit is set to true; or ia a database
                      access error occurs                    
                </throws>
            </javadoc>
            <method name="rollback" type="void" line="4134">
                <params>
                    <param name="s" type="Savepoint"/>
                </params>
            </method>
            <method name="setParams" type="void" line="4139">
                <scope line="4140"/>
                <scope line="4144"/>
            </method>
            <method name="checkTypeConcurrency" type="void" line="4152">
                <scope line="4154"/>
            </method>
            <javadoc line="4162">
                Gets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s Connection property                
                <return>
                    the <code>Connection</code> object associated with this rowset;                    
                </return>
            </javadoc>
            <method name="getConnection" type="Connection" line="4169"/>
            <javadoc line="4176">
                Sets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s connection property
                  to the given &lt;code&gt;Connection&lt;/code&gt; object.                
                <param>
                    connection the <code>Connection</code> object.                    
                </param>
            </javadoc>
            <method name="setConnection" type="void" line="4183">
                <params>
                    <param name="connection" type="Connection"/>
                </params>
            </method>
            <javadoc line="4190">
                Gets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s PreparedStatement property                
                <return>
                    the <code>PreparedStatement</code> object associated with this rowset;                    
                </return>
            </javadoc>
            <method name="getPreparedStatement" type="PreparedStatement" line="4197"/>
            <javadoc line="4204">
                Sets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s preparedtsatement property
                  to the given &lt;code&gt;PreparedStatemennt&lt;/code&gt; object.                
                <param>
                    preparedStatement the <code>PreparedStatement</code> object                    
                </param>
            </javadoc>
            <method name="setPreparedStatement" type="void" line="4211">
                <params>
                    <param name="preparedStatement" type="PreparedStatement"/>
                </params>
            </method>
            <javadoc line="4218">
                Gets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s ResultSet property                
                <return>
                    the <code>ResultSet</code> object associated with this rowset;                    
                </return>
            </javadoc>
            <method name="getResultSet" type="ResultSet" line="4225"/>
            <javadoc line="4235">
                Sets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s resultset property
                  to the given &lt;code&gt;ResultSet&lt;/code&gt; object.                
                <param>
                    resultSet the <code>ResultSet</code> object                    
                </param>
            </javadoc>
            <method name="setResultSet" type="void" line="4242">
                <params>
                    <param name="resultSet" type="ResultSet"/>
                </params>
            </method>
            <javadoc line="4252">
                Sets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s &lt;code&gt;command&lt;/code&gt; property to
                  the given &lt;code&gt;String&lt;/code&gt; object and clears the parameters, if any,
                  that were set for the previous command. In addition,
                  if the &lt;code&gt;command&lt;/code&gt; property has previously been set to a
                  non-null value and it is
                  different from the &lt;code&gt;String&lt;/code&gt; object supplied,
                  this method sets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s private fields
                  &lt;code&gt;ps&lt;/code&gt; and &lt;code&gt;rs&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;.
                  (The field &lt;code&gt;ps&lt;/code&gt; is its &lt;code&gt;PreparedStatement&lt;/code&gt; object, and
                  the field &lt;code&gt;rs&lt;/code&gt; is its &lt;code&gt;ResultSet&lt;/code&gt; object.)
                  &lt;P&gt;
                  The &lt;code&gt;command&lt;/code&gt; property may not be needed if the &lt;code&gt;RowSet&lt;/code&gt;
                  object gets its data from a source that does not support commands,
                  such as a spreadsheet or other tabular file.
                  Thus, this property is optional and may be &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    command a <code>String</code> object containing an SQL query
                      that will be set as this <code>RowSet</code> object's command
                      property; may be <code>null</code> but may not be an empty string                    
                </param>
                <throws>
                    SQLException if an empty string is provided as the command value                    
                </throws>
                <see>
                    #getCommand                    
                </see>
            </javadoc>
            <method name="setCommand" type="void" line="4275">
                <params>
                    <param name="command" type="String"/>
                </params>
                <declaration name="oldVal" type="String" line="4276"/>
                <scope line="4278">
                    <scope line="4279"/>
                </scope>
                <scope line="4287"/>
            </method>
            <javadoc line="4298">
                Sets the &lt;code&gt;dataSourceName&lt;/code&gt; property for this &lt;code&gt;JdbcRowSet&lt;/code&gt;
                  object to the given logical name and sets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s
                  Url property to &lt;code&gt;null&lt;/code&gt;. In addition, if the &lt;code&gt;dataSourceName&lt;/code&gt;
                  property has previously been set and is different from the one supplied,
                  this method sets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s private fields
                  &lt;code&gt;ps&lt;/code&gt;, &lt;code&gt;rs&lt;/code&gt;, and &lt;code&gt;conn&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;.
                  (The field &lt;code&gt;ps&lt;/code&gt; is its &lt;code&gt;PreparedStatement&lt;/code&gt; object,
                  the field &lt;code&gt;rs&lt;/code&gt; is its &lt;code&gt;ResultSet&lt;/code&gt; object, and
                  the field &lt;code&gt;conn&lt;/code&gt; is its &lt;code&gt;Connection&lt;/code&gt; object.)
                  &lt;P&gt;
                  The name supplied to this method must have been bound to a
                  &lt;code&gt;DataSource&lt;/code&gt; object in a JNDI naming service so that an
                  application can do a lookup using that name to retrieve the
                  &lt;code&gt;DataSource&lt;/code&gt; object bound to it. The &lt;code&gt;DataSource&lt;/code&gt;
                  object can then be used to establish a connection to the data source it
                  represents.
                  &lt;P&gt;
                  Users should set either the Url property or the dataSourceName property.
                  If both properties are set, the driver will use the property set most recently.                
                <param>
                    dsName a <code>String</code> object with the name that can be supplied
                      to a naming service based on JNDI technology to retrieve the
                      <code>DataSource</code> object that can be used to get a connection;
                      may be <code>null</code>                    
                </param>
                <throws>
                    SQLException if there is a problem setting the
                      <code>dataSourceName</code> property                    
                </throws>
                <see>
                    #getDataSourceName                    
                </see>
            </javadoc>
            <method name="setDataSourceName" type="void" line="4327">
                <params>
                    <param name="dsName" type="String"/>
                </params>
                <declaration name="oldVal" type="String" line="4328"/>
                <scope line="4330">
                    <scope line="4331"/>
                </scope>
                <scope line="4340"/>
            </method>
            <javadoc line="4351">
                Sets the Url property for this &lt;code&gt;JdbcRowSet&lt;/code&gt; object
                  to the given &lt;code&gt;String&lt;/code&gt; object and sets the dataSource name
                  property to &lt;code&gt;null&lt;/code&gt;. In addition, if the Url property has
                  previously been set to a non &lt;code&gt;null&lt;/code&gt; value and its value
                  is different from the value to be set,
                  this method sets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s private fields
                  &lt;code&gt;ps&lt;/code&gt;, &lt;code&gt;rs&lt;/code&gt;, and &lt;code&gt;conn&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;.
                  (The field &lt;code&gt;ps&lt;/code&gt; is its &lt;code&gt;PreparedStatement&lt;/code&gt; object,
                  the field &lt;code&gt;rs&lt;/code&gt; is its &lt;code&gt;ResultSet&lt;/code&gt; object, and
                  the field &lt;code&gt;conn&lt;/code&gt; is its &lt;code&gt;Connection&lt;/code&gt; object.)
                  &lt;P&gt;
                  The Url property is a JDBC URL that is used when
                  the connection is created using a JDBC technology-enabled driver
                  (&quot;JDBC driver&quot;) and the &lt;code&gt;DriverManager&lt;/code&gt;.
                  The correct JDBC URL for the specific driver to be used can be found
                  in the driver documentation.  Although there are guidelines for for how
                  a JDBC URL is formed,
                  a driver vendor can specify any &lt;code&gt;String&lt;/code&gt; object except
                  one with a length of &lt;code&gt;0&lt;/code&gt; (an empty string).
                  &lt;P&gt;
                  Setting the Url property is optional if connections are established using
                  a &lt;code&gt;DataSource&lt;/code&gt; object instead of the &lt;code&gt;DriverManager&lt;/code&gt;.
                  The driver will use either the URL property or the
                  dataSourceName property to create a connection, whichever was
                  specified most recently. If an application uses a JDBC URL, it
                  must load a JDBC driver that accepts the JDBC URL before it uses the
                  &lt;code&gt;RowSet&lt;/code&gt; object to connect to a database.  The &lt;code&gt;RowSet&lt;/code&gt;
                  object will use the URL internally to create a database connection in order
                  to read or write data.                
                <param>
                    url a <code>String</code> object that contains the JDBC URL
                      that will be used to establish the connection to a database for this
                      <code>RowSet</code> object; may be <code>null</code> but must not
                      be an empty string                    
                </param>
                <throws>
                    SQLException if an error occurs setting the Url property or the
                      parameter supplied is a string with a length of <code>0</code> (an
                      empty string)                    
                </throws>
                <see>
                    #getUrl                    
                </see>
            </javadoc>
            <method name="setUrl" type="void" line="4392">
                <params>
                    <param name="url" type="String"/>
                </params>
                <declaration name="oldVal" type="String" line="4393"/>
                <scope line="4395">
                    <scope line="4396"/>
                </scope>
                <scope line="4405"/>
            </method>
            <javadoc line="4416">
                Sets the username property for this &lt;code&gt;JdbcRowSet&lt;/code&gt; object
                  to the given user name. Because it
                  is not serialized, the username property is set at run time before
                  calling the method &lt;code&gt;execute&lt;/code&gt;. In addition,
                  if the &lt;code&gt;username&lt;/code&gt; property is already set with a
                  non-null value and that value is different from the &lt;code&gt;String&lt;/code&gt;
                  object to be set,
                  this method sets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s private fields
                  &lt;code&gt;ps&lt;/code&gt;, &lt;code&gt;rs&lt;/code&gt;, and &lt;code&gt;conn&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;.
                  (The field &lt;code&gt;ps&lt;/code&gt; is its &lt;code&gt;PreparedStatement&lt;/code&gt; object,
                  &lt;code&gt;rs&lt;/code&gt; is its &lt;code&gt;ResultSet&lt;/code&gt; object, and
                  &lt;code&gt;conn&lt;/code&gt; is its &lt;code&gt;Connection&lt;/code&gt; object.)
                  Setting these fields to &lt;code&gt;null&lt;/code&gt; ensures that only current
                  values will be used.                
                <param>
                    uname the <code>String</code> object containing the user name that
                      is supplied to the data source to create a connection. It may be null.                    
                </param>
                <see>
                    #getUsername                    
                </see>
            </javadoc>
            <method name="setUsername" type="void" line="4436">
                <params>
                    <param name="uname" type="String"/>
                </params>
                <declaration name="oldVal" type="String" line="4437"/>
                <scope line="4439">
                    <scope line="4440"/>
                </scope>
                <scope line="4449"/>
            </method>
            <javadoc line="4460">
                Sets the password property for this &lt;code&gt;JdbcRowSet&lt;/code&gt; object
                  to the given &lt;code&gt;String&lt;/code&gt; object. Because it
                  is not serialized, the password property is set at run time before
                  calling the method &lt;code&gt;execute&lt;/code&gt;. Its default valus is
                  &lt;code&gt;null&lt;/code&gt;. In addition,
                  if the &lt;code&gt;password&lt;/code&gt; property is already set with a
                  non-null value and that value is different from the one being set,
                  this method sets this &lt;code&gt;JdbcRowSet&lt;/code&gt; object&apos;s private fields
                  &lt;code&gt;ps&lt;/code&gt;, &lt;code&gt;rs&lt;/code&gt;, and &lt;code&gt;conn&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;.
                  (The field &lt;code&gt;ps&lt;/code&gt; is its &lt;code&gt;PreparedStatement&lt;/code&gt; object,
                  &lt;code&gt;rs&lt;/code&gt; is its &lt;code&gt;ResultSet&lt;/code&gt; object, and
                  &lt;code&gt;conn&lt;/code&gt; is its &lt;code&gt;Connection&lt;/code&gt; object.)
                  Setting these fields to &lt;code&gt;null&lt;/code&gt; ensures that only current
                  values will be used.                
                <param>
                    password the <code>String</code> object that represents the password
                      that must be supplied to the database to create a connection                    
                </param>
            </javadoc>
            <method name="setPassword" type="void" line="4479">
                <params>
                    <param name="password" type="String"/>
                </params>
                <declaration name="oldVal" type="String" line="4480"/>
                <scope line="4482">
                    <scope line="4483"/>
                </scope>
                <scope line="4492"/>
            </method>
            <javadoc line="4498">
                Sets the type for this &lt;code&gt;RowSet&lt;/code&gt; object to the specified type.
                  The default type is &lt;code&gt;ResultSet.TYPE_SCROLL_INSENSITIVE&lt;/code&gt;.                
                <param>
                    type one of the following constants:
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <throws>
                    SQLException if the parameter supplied is not one of the
                      following constants:
                      <code>ResultSet.TYPE_FORWARD_ONLY</code> or
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </throws>
                <see>
                    #getConcurrency                    
                </see>
                <see>
                    #getType                    
                </see>
            </javadoc>
            <method name="setType" type="void" line="4515">
                <params>
                    <param name="type" type="int"/>
                </params>
                <declaration name="oldVal" type="int" line="4517"/>
                <scope line="4519"/>
                <scope line="4521"/>
                <scope line="4525"/>
            </method>
            <javadoc line="4532">
                Sets the concurrency for this &lt;code&gt;RowSet&lt;/code&gt; object to
                  the specified concurrency. The default concurrency for any &lt;code&gt;RowSet&lt;/code&gt;
                  object (connected or disconnected) is &lt;code&gt;ResultSet.CONCUR_UPDATABLE&lt;/code&gt;,
                  but this method may be called at any time to change the concurrency.                
                <param>
                    concur one of the following constants:
                      <code>ResultSet.CONCUR_READ_ONLY</code> or
                      <code>ResultSet.CONCUR_UPDATABLE</code>                    
                </param>
                <throws>
                    SQLException if the parameter supplied is not one of the
                      following constants:
                      <code>ResultSet.CONCUR_UPDATABLE</code> or
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
                <see>
                    #getConcurrency                    
                </see>
                <see>
                    #isReadOnly                    
                </see>
            </javadoc>
            <method name="setConcurrency" type="void" line="4548">
                <params>
                    <param name="concur" type="int"/>
                </params>
                <declaration name="oldVal" type="int" line="4550"/>
                <scope line="4552"/>
                <scope line="4554"/>
                <scope line="4558"/>
            </method>
            <javadoc line="4565">
                Sets the transaction isolation property for this JDBC &lt;code&gt;RowSet&lt;/code&gt; object to the given
                  constant. The DBMS will use this transaction isolation level for
                  transactions if it can.
                  &lt;p&gt;
                  For &lt;code&gt;RowSet&lt;/code&gt; implementations such as
                  the &lt;code&gt;CachedRowSet&lt;/code&gt; that operate in a disconnected environment,
                  the &lt;code&gt;SyncProvider&lt;/code&gt; object being used
                  offers complementary locking and data integrity options. The
                  options described below are pertinent only to connected &lt;code&gt;RowSet&lt;/code&gt;
                  objects (&lt;code&gt;JdbcRowSet&lt;/code&gt; objects).                
                <param>
                    transIso one of the following constants, listed in ascending order:
                      <code>Connection.TRANSACTION_NONE</code>,
                      <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
                      <code>Connection.TRANSACTION_READ_COMMITTED</code>,
                      <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
                      <code>Connection.TRANSACTION_SERIALIZABLE</code>                    
                </param>
                <throws>
                    SQLException if the given parameter is not one of the Connection
                      constants                    
                </throws>
                <see>
                    javax.sql.rowset.spi.SyncFactory                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncProvider                    
                </see>
                <see>
                    #getTransactionIsolation                    
                </see>
            </javadoc>
            <method name="setTransactionIsolation" type="void" line="4589">
                <params>
                    <param name="transIso" type="int"/>
                </params>
                <declaration name="oldVal" type="int" line="4591"/>
                <scope line="4593"/>
                <scope line="4595"/>
                <scope line="4599"/>
            </method>
            <javadoc line="4606">
                Sets the maximum number of rows that this &lt;code&gt;RowSet&lt;/code&gt; object may contain to
                  the given number. If this limit is exceeded, the excess rows are
                  silently dropped.                
                <param>
                    mRows an <code>int</code> indicating the current maximum number
                      of rows; zero means that there is no limit                    
                </param>
                <throws>
                    SQLException if an error occurs internally setting the
                      maximum limit on the number of rows that a JDBC <code>RowSet</code> object
                      can contain; or if <i>max</i> is less than <code>0</code>; or
                      if <i>max</i> is less than the <code>fetchSize</code> of the
                      <code>RowSet</code>                    
                </throws>
            </javadoc>
            <method name="setMaxRows" type="void" line="4619">
                <params>
                    <param name="mRows" type="int"/>
                </params>
                <declaration name="oldVal" type="int" line="4621"/>
                <scope line="4623"/>
                <scope line="4625"/>
                <scope line="4629"/>
            </method>
            <javadoc line="4636">
                Retrieves the value of the designated &lt;code&gt;SQL XML&lt;/code&gt; parameter as a
                  &lt;code&gt;SQLXML&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    a SQLXML object that maps an SQL XML value                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="getSQLXML" type="SQLXML" line="4644">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="4648">
                Retrieves the value of the designated &lt;code&gt;SQL XML&lt;/code&gt; parameter as a
                  &lt;code&gt;SQLXML&lt;/code&gt; object in the Java programming language.                
                <param>
                    colName the name of the column from which to retrieve the value                    
                </param>
                <return>
                    a SQLXML object that maps an SQL XML value                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="getSQLXML" type="SQLXML" line="4655">
                <params>
                    <param name="colName" type="String"/>
                </params>
            </method>
            <javadoc line="4659">
                Retrieves the value of the designated column in the current row of this
                  &lt;code&gt;ResultSet&lt;/code&gt; object as a java.sql.RowId object in the Java
                  programming language.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <return>
                    the column value if the value is a SQL <code>NULL</code> the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="getRowId" type="RowId" line="4670">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="4674">
                Retrieves the value of the designated column in the current row of this
                  &lt;code&gt;ResultSet&lt;/code&gt; object as a java.sql.RowId object in the Java
                  programming language.                
                <param>
                    columnName the name of the column                    
                </param>
                <return>
                    the column value if the value is a SQL <code>NULL</code> the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="getRowId" type="RowId" line="4685">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="4689">
                Updates the designated column with a &lt;code&gt;RowId&lt;/code&gt; value. The updater
                  methods are used to update column values in the current row or the insert
                  row. The updater methods do not update the underlying database; instead
                  the &lt;code&gt;updateRow&lt;code&gt; or &lt;code&gt;insertRow&lt;/code&gt; methods are called
                  to update the database.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    x the column value                    
                </param>
                <throws>
                    SQLException if a database access occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="updateRowId" type="void" line="4701">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="RowId"/>
                </params>
            </method>
            <javadoc line="4705">
                Updates the designated column with a &lt;code&gt;RowId&lt;/code&gt; value. The updater
                  methods are used to update column values in the current row or the insert
                  row. The updater methods do not update the underlying database; instead
                  the &lt;code&gt;updateRow&lt;code&gt; or &lt;code&gt;insertRow&lt;/code&gt; methods are called
                  to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the column value                    
                </param>
                <throws>
                    SQLException if a database access occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="updateRowId" type="void" line="4717">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="RowId"/>
                </params>
            </method>
            <javadoc line="4721">
                Retrieves the holdability of this ResultSet object                
                <return>
                    either ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT                    
                </return>
                <throws>
                    SQLException if a database error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="getHoldability" type="int" line="4727"/>
            <javadoc line="4731">
                Retrieves whether this ResultSet object has been closed. A ResultSet is closed if the
                  method close has been called on it, or if it is automatically closed.                
                <return>
                    true if this ResultSet object is closed; false if it is still open                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="isClosed" type="boolean" line="4738"/>
            <javadoc line="4742">
                This method is used for updating columns that support National Character sets.
                  It can be used for updating NCHAR,NVARCHAR and LONGNVARCHAR columns.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    nString the value for the column to be updated                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="updateNString" type="void" line="4750">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="nString" type="String"/>
                </params>
            </method>
            <javadoc line="4754">
                This method is used for updating columns that support National Character sets.
                  It can be used for updating NCHAR,NVARCHAR and LONGNVARCHAR columns.                
                <param>
                    columnName name of the Column                    
                </param>
                <param>
                    nString the value for the column to be updated                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="updateNString" type="void" line="4762">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="nString" type="String"/>
                </params>
            </method>
            <method name="updateNClob" type="void" line="4775">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="nClob" type="NClob"/>
                </params>
            </method>
            <javadoc line="4779">
                This method is used for updating SQL &lt;code&gt;NCLOB&lt;/code&gt;  type that maps
                  to &lt;code&gt;java.sql.Types.NCLOB&lt;/code&gt;                
                <param>
                    columnName name of the column                    
                </param>
                <param>
                    nClob the value for the column to be updated                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="4787">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="nClob" type="NClob"/>
                </params>
            </method>
            <javadoc line="4791">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;NClob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    i the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    a <code>NClob</code> object representing the SQL
                      <code>NCLOB</code> value in the specified column                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="getNClob" type="NClob" line="4802">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="4807">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;NClob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    colName the name of the column from which to retrieve the value                    
                </param>
                <return>
                    a <code>NClob</code> object representing the SQL <code>NCLOB</code>
                      value in the specified column                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="getNClob" type="NClob" line="4818">
                <params>
                    <param name="colName" type="String"/>
                </params>
            </method>
            <method name="unwrap" type="T" line="4822">
                <params>
                    <param name="iface" type="java.lang.Class<T>"/>
                </params>
            </method>
            <method name="isWrapperFor" type="boolean" line="4826">
                <params>
                    <param name="interfaces" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="4830">
                Sets the designated parameter to the given &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object. The driver converts this to an
                  SQL &lt;code&gt;XML&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    xmlObject a <code>SQLXML</code> object that maps an SQL <code>XML</code> value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setSQLXML" type="void" line="4838">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="xmlObject" type="SQLXML"/>
                </params>
            </method>
            <javadoc line="4842">
                Sets the designated parameter to the given &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object. The driver converts this to an
                  &lt;code&gt;SQL XML&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    xmlObject a <code>SQLXML</code> object that maps an <code>SQL XML</code> value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setSQLXML" type="void" line="4850">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="xmlObject" type="SQLXML"/>
                </params>
            </method>
            <javadoc line="4854">
                Sets the designated parameter to the given &lt;code&gt;java.sql.RowId&lt;/code&gt; object. The
                  driver converts this to a SQL &lt;code&gt;ROWID&lt;/code&gt; value when it sends it
                  to the database                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setRowId" type="void" line="4865">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="RowId"/>
                </params>
            </method>
            <javadoc line="4869">
                Sets the designated parameter to the given &lt;code&gt;java.sql.RowId&lt;/code&gt; object. The
                  driver converts this to a SQL &lt;code&gt;ROWID&lt;/code&gt; when it sends it to the
                  database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setRowId" type="void" line="4879">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="RowId"/>
                </params>
            </method>
            <javadoc line="4884">
                Sets the designated paramter to the given &lt;code&gt;String&lt;/code&gt; object.
                  The driver converts this to a SQL &lt;code&gt;NCHAR&lt;/code&gt; or
                  &lt;code&gt;NVARCHAR&lt;/code&gt; or &lt;code&gt;LONGNVARCHAR&lt;/code&gt; value
                  (depending on the argument&apos;s
                  size relative to the driver&apos;s limits on &lt;code&gt;NVARCHAR&lt;/code&gt; values)
                  when it sends it to the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNString" type="void" line="4899">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="4904">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; if a database access error occurs; or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="4927">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="value" type="Reader"/>
                </params>
            </method>
            <javadoc line="4931">
                Sets the designated parameter to a &lt;code&gt;java.sql.NClob&lt;/code&gt; object. The object
                  implements the &lt;code&gt;java.sql.NClob&lt;/code&gt; interface. This &lt;code&gt;NClob&lt;/code&gt;
                  object maps to a SQL &lt;code&gt;NCLOB&lt;/code&gt;.                
                <param>
                    parameterName the name of the column to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="4942">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="value" type="NClob"/>
                </params>
            </method>
            <javadoc line="4947">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.                
                <return>
                    a <code>java.io.Reader</code> object that contains the column
                      value; if the value is SQL <code>NULL</code>, the value returned is
                      <code>null</code> in the Java programming language.                    
                </return>
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNCharacterStream" type="java.io.Reader" line="4962">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="4967">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.                
                <param>
                    columnName the name of the column                    
                </param>
                <return>
                    a <code>java.io.Reader</code> object that contains the column
                      value; if the value is SQL <code>NULL</code>, the value returned is
                      <code>null</code> in the Java programming language                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNCharacterStream" type="java.io.Reader" line="4982">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="4986">
                Updates the designated column with a &lt;code&gt;java.sql.SQLXML&lt;/code&gt; value.
                  The updater
                  methods are used to update column values in the current row or the insert
                  row. The updater methods do not update the underlying database; instead
                  the &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;insertRow&lt;/code&gt; methods are called
                  to update the database.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    xmlObject the value for the column to be updated                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateSQLXML" type="void" line="4998">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="xmlObject" type="SQLXML"/>
                </params>
            </method>
            <javadoc line="5002">
                Updates the designated column with a &lt;code&gt;java.sql.SQLXML&lt;/code&gt; value.
                  The updater
                  methods are used to update column values in the current row or the insert
                  row. The updater methods do not update the underlying database; instead
                  the &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;insertRow&lt;/code&gt; methods are called
                  to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    xmlObject the column value                    
                </param>
                <throws>
                    SQLException if a database access occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateSQLXML" type="void" line="5015">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="xmlObject" type="SQLXML"/>
                </params>
            </method>
            <javadoc line="5019">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;String&lt;/code&gt; in the Java programming language.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNString" type="String" line="5033">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="5037">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;String&lt;/code&gt; in the Java programming language.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNString" type="String" line="5051">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="5055">
                Updates the designated column with a character stream value, which will
                  have the specified number of bytes. The driver does the necessary conversion
                  from Java character format to the national character set in the database.
                  It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns.
                  The updater methods are used to update column values in the current row or
                  the insert row. The updater methods do not update the underlying database;
                  instead the updateRow or insertRow methods are called to update the database.                
                <param>
                    columnIndex - the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x - the new column value                    
                </param>
                <param>
                    length - the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNCharacterStream" type="void" line="5073">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5077">
                Updates the designated column with a character stream value, which will
                  have the specified number of bytes. The driver does the necessary conversion
                  from Java character format to the national character set in the database.
                  It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns.
                  The updater methods are used to update column values in the current row or
                  the insert row. The updater methods do not update the underlying database;
                  instead the updateRow or insertRow methods are called to update the database.                
                <param>
                    columnName - name of the Column                    
                </param>
                <param>
                    x - the new column value                    
                </param>
                <param>
                    length - the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNCharacterStream" type="void" line="5095">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.io.Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5099">
                Updates the designated column with a character stream value.   The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  It is intended for use when
                  updating  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNCharacterStream" type="void" line="5125">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.Reader"/>
                </params>
            </method>
            <javadoc line="5129">
                Updates the designated column with a character stream value.  The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  It is intended for use when
                  updating  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object containing
                      the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNCharacterStream" type="void" line="5157">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                </params>
            </method>
            <javadoc line="5161">
                Updates the designated column using the given input stream, which
                  will have the specified number of bytes.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="5190">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="inputStream" type="InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5194">
                Updates the designated column using the given input stream, which
                  will have the specified number of bytes.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="5223">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="inputStream" type="InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5227">
                Updates the designated column using the given input stream.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateBlob&lt;/code&gt; which takes a length parameter.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="5258">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="inputStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="5262">
                Updates the designated column using the given input stream.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateBlob&lt;/code&gt; which takes a length parameter.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="5293">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="inputStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="5297">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="5325">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5329">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="5357">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5361">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateClob&lt;/code&gt; which takes a length parameter.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="5391">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="5395">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateClob&lt;/code&gt; which takes a length parameter.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="5426">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="5430">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set,
                      if a database access error occurs or
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="5460">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5464">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set;
                      if a database access error occurs or
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="5494">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5498">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateNClob&lt;/code&gt; which takes a length parameter.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set,
                      if a database access error occurs or
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="5530">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="5534">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateNClob&lt;/code&gt; which takes a length parameter.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set;
                      if a database access error occurs or
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="5567">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="5572">
                Updates the designated column with an ascii stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="5592">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5596">
                Updates the designated column with a binary stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="5616">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5620">
                Updates the designated column with a character stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="5640">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5644">
                Updates the designated column with an ascii stream value, which will have
                  the specified number of bytes..
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="5664">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5668">
                Updates the designated column with an ascii stream value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="5689">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="5693">
                Updates the designated column with an ascii stream value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="5715">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="5720">
                Updates the designated column with a binary stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="5740">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5744">
                Updates the designated column with a binary stream value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="5765">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="5770">
                Updates the designated column with a binary stream value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="5792">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="5797">
                Updates the designated column with a character stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object containing
                      the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="5818">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5822">
                Updates the designated column with a character stream value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="5843">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.Reader"/>
                </params>
            </method>
            <javadoc line="5847">
                Updates the designated column with a character stream value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object containing
                      the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="5870">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                </params>
            </method>
            <javadoc line="5875">
                Sets the designated parameter to the given &lt;code&gt;java.net.URL&lt;/code&gt; value.
                  The driver converts this to an SQL &lt;code&gt;DATALINK&lt;/code&gt; value
                  when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the <code>java.net.URL</code> object to be set                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setURL" type="void" line="5887">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.net.URL"/>
                </params>
            </method>
            <javadoc line="5892">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement;
                      if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="5916">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="5920">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The &lt;code&gt;reader&lt;/code&gt; must contain the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the length specified is less than zero;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="5944">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="5949">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="5971">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="5976">
                of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will becontain  the number
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the length specified is less than zero;
                      if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="5998">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="6003">
                Sets the designated parameter to a &lt;code&gt;java.sql.NClob&lt;/code&gt; object. The driver converts this to
                  a
                  SQL &lt;code&gt;NCLOB&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="6014">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="value" type="NClob"/>
                </params>
            </method>
            <javadoc line="6019">
                Sets the designated paramter to the given &lt;code&gt;String&lt;/code&gt; object.
                  The driver converts this to a SQL &lt;code&gt;NCHAR&lt;/code&gt; or
                  &lt;code&gt;NVARCHAR&lt;/code&gt; or &lt;code&gt;LONGNVARCHAR&lt;/code&gt;                
                <param>
                    parameterName the name of the column to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNString" type="void" line="6031">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="6035">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="6048">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="value" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="6054">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.                
                <param>
                    parameterName the name of the column to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="6068">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="value" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="6072">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; if a database access error occurs; or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="6094">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="value" type="Reader"/>
                </params>
            </method>
            <javadoc line="6098">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the timestamp
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the timestamp                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTimestamp                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTimestamp" type="void" line="6120">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Timestamp"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="6124">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The &lt;code&gt;reader&lt;/code&gt; must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the length specified is less than zero;
                      a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="6146">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="6152">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Clob&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;CLOB&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="6165">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Clob"/>
                </params>
            </method>
            <javadoc line="6169">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs or this method is called on
                      a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="6190">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="6195">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value
                  using the default time zone of the virtual machine that is running
                  the application.
                  The driver converts this
                  to an SQL &lt;code&gt;DATE&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getDate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDate" type="void" line="6212">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Date"/>
                </params>
            </method>
            <javadoc line="6216">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;DATE&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the date
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the date                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getDate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDate" type="void" line="6238">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Date"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="6243">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;TIME&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTime                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTime" type="void" line="6258">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Time"/>
                </params>
            </method>
            <javadoc line="6262">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIME&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the time
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the time                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTime                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTime" type="void" line="6284">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Time"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="6288">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs, this method is called on
                      a closed <code>PreparedStatement</code>or if parameterIndex does not correspond to a parameter
                      marker in the SQL statement                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="6310">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="6315">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The reader must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if a database access error occurs, this method is called on
                      a closed <code>PreparedStatement</code>, if parameterIndex does not correspond to a parameter
                      marker in the SQL statement, or if the length specified is less than zero.                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="6335">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="6340">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.  The inputstream must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream, int)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1,
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <throws>
                    SQLException if a database access error occurs,
                      this method is called on a closed <code>PreparedStatement</code>,
                      if parameterIndex does not correspond
                      to a parameter marker in the SQL statement,  if the length specified
                      is less than zero or if the number of bytes in the inputstream does not match
                      the specfied length.                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="6365">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="inputStream" type="InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="6369">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream)&lt;/code&gt;
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBlob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1,
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs,
                      this method is called on a closed <code>PreparedStatement</code> or
                      if parameterIndex does not correspond
                      to a parameter marker in the SQL statement,                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="6397">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="inputStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="6401">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.  The &lt;code&gt;inputstream&lt;/code&gt; must contain  the number
                  of characters specified by length, otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream, int)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <throws>
                    SQLException  if parameterIndex does not correspond
                      to a parameter marker in the SQL statement,  or if the length specified
                      is less than zero; if the number of bytes in the inputstream does not match
                      the specfied length; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="6428">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="inputStream" type="InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="6433">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Blob&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;BLOB&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="6446">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Blob"/>
                </params>
            </method>
            <javadoc line="6450">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBlob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="6472">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="inputStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="6476">
                Sets the value of the designated parameter with the given object. The second
                  argument must be an object type; for integral values, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used.
                  &lt;p&gt;The given Java object will be converted to the given targetSqlType
                  before being sent to the database.
                  If the object has a custom mapping (is of a class implementing the
                  interface &lt;code&gt;SQLData&lt;/code&gt;),
                  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt; to write it
                  to the SQL data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;,
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;P&gt;
                  Note that this method may be used to pass datatabase-
                  specific abstract data types.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in java.sql.Types) to be
                      sent to the database. The scale argument may further qualify this type.                    
                </param>
                <param>
                    scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,
                      this is the number of digits after the decimal point.  For all other
                      types, this value will be ignored.                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>targetSqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    Types                    
                </see>
                <see>
                    #getObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="6518">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Object"/>
                    <param name="targetSqlType" type="int"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="6522">
                Sets the value of the designated parameter with the given object.
                  This method is like the method &lt;code&gt;setObject&lt;/code&gt;
                  above, except that it assumes a scale of zero.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in java.sql.Types) to be
                      sent to the database                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>targetSqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    #getObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="6544">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Object"/>
                    <param name="targetSqlType" type="int"/>
                </params>
            </method>
            <javadoc line="6548">
                Sets the value of the designated parameter with the given object.
                  The second parameter must be of type &lt;code&gt;Object&lt;/code&gt;; therefore, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used for built-in types.
                  &lt;p&gt;The JDBC specification specifies a standard mapping from
                  Java &lt;code&gt;Object&lt;/code&gt; types to SQL types.  The given argument
                  will be converted to the corresponding SQL type before being
                  sent to the database.
                  &lt;p&gt;Note that this method may be used to pass datatabase-
                  specific abstract data types, by using a driver-specific Java
                  type.
                  If the object is of a class implementing the interface &lt;code&gt;SQLData&lt;/code&gt;,
                  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;
                  to write it to the SQL data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;,
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;P&gt;
                  This method throws an exception if there is an ambiguity, for example, if the
                  object is of a class implementing more than one of the interfaces named above.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      this method is called on a closed <code>CallableStatement</code> or if the given
                      <code>Object</code> parameter is ambiguous                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="6584">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <javadoc line="6588">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="6611">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="6616">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="6638">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="6642">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object that
                      contains the UNICODE data used as the designated parameter                    
                </param>
                <param>
                    length the number of characters in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="6667">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="6671">
                Sets the designated parameter to the given input stream.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="6694">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="6699">
                Sets the designated parameter to the given input stream.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the
                  stream as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="6721">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="6725">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object that contains the
                      Unicode data                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="6750">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                </params>
            </method>
            <javadoc line="6754">
                Sets the designated parameter to the given
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; value.
                  The driver converts this to an SQL &lt;code&gt;NUMERIC&lt;/code&gt; value when
                  it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getBigDecimal                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBigDecimal" type="void" line="6769">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="BigDecimal"/>
                </params>
            </method>
            <javadoc line="6773">
                Sets the designated parameter to the given Java &lt;code&gt;String&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;LONGVARCHAR&lt;/code&gt; value
                  (depending on the argument&apos;s
                  size relative to the driver&apos;s limits on &lt;code&gt;VARCHAR&lt;/code&gt; values)
                  when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getString                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setString" type="void" line="6790">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="String"/>
                </params>
            </method>
            <javadoc line="6796">
                Sets the designated parameter to the given Java array of bytes.
                  The driver converts this to an SQL &lt;code&gt;VARBINARY&lt;/code&gt; or
                  &lt;code&gt;LONGVARBINARY&lt;/code&gt; (depending on the argument&apos;s size relative
                  to the driver&apos;s limits on &lt;code&gt;VARBINARY&lt;/code&gt; values) when it sends
                  it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getBytes                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBytes" type="void" line="6812">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="6816">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value.
                  The driver
                  converts this to an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value when it sends it to the
                  database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTimestamp                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTimestamp" type="void" line="6832">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Timestamp"/>
                </params>
            </method>
            <javadoc line="6836">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; You must specify the parameter&apos;s SQL type.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    sqlType the SQL type code defined in <code>java.sql.Types</code>                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setNull" type="void" line="6849">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="sqlType" type="int"/>
                </params>
            </method>
            <javadoc line="6853">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  This version of the method &lt;code&gt;setNull&lt;/code&gt; should
                  be used for user-defined types and REF type parameters.  Examples
                  of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
                  named array types.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; To be portable, applications must give the
                  SQL type code and the fully-qualified SQL type name when specifying
                  a NULL user-defined or REF parameter.  In the case of a user-defined type
                  the name is the type name of the parameter itself.  For a REF
                  parameter, the name is the type name of the referenced type.  If
                  a JDBC driver does not need the type code or type name information,
                  it may ignore it.
                  Although it is intended for user-defined and Ref parameters,
                  this method may be used to set a null parameter of any JDBC type.
                  If the parameter does not have a user-defined or REF type, the given
                  typeName is ignored.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    sqlType a value from <code>java.sql.Types</code>                    
                </param>
                <param>
                    typeName the fully-qualified name of an SQL user-defined type;
                      ignored if the parameter is not a user-defined type or
                      SQL <code>REF</code> value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setNull" type="void" line="6886">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="sqlType" type="int"/>
                    <param name="typeName" type="String"/>
                </params>
            </method>
            <javadoc line="6890">
                Sets the designated parameter to the given Java &lt;code&gt;boolean&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;BIT&lt;/code&gt; or &lt;code&gt;BOOLEAN&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #getBoolean                    
                </see>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBoolean" type="void" line="6904">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="boolean"/>
                </params>
            </method>
            <javadoc line="6910">
                Sets the designated parameter to the given Java &lt;code&gt;byte&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;TINYINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getByte                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setByte" type="void" line="6924">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="6929">
                Sets the designated parameter to the given Java &lt;code&gt;short&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;SMALLINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getShort                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setShort" type="void" line="6943">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="short"/>
                </params>
            </method>
            <javadoc line="6948">
                Sets the designated parameter to the given Java &lt;code&gt;int&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;INTEGER&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getInt                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setInt" type="void" line="6962">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="6966">
                Sets the designated parameter to the given Java &lt;code&gt;long&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;BIGINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getLong                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setLong" type="void" line="6980">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="long"/>
                </params>
            </method>
            <javadoc line="6985">
                Sets the designated parameter to the given Java &lt;code&gt;float&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;FLOAT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getFloat                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setFloat" type="void" line="6999">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="float"/>
                </params>
            </method>
            <javadoc line="7003">
                Sets the designated parameter to the given Java &lt;code&gt;double&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;DOUBLE&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getDouble                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDouble" type="void" line="7017">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="7021">
                This method re populates the resBundle
                  during the deserialization process                
            </javadoc>
            <method name="readObject" type="void" line="7026">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <comment line="7027">
                    Default state initialization happens here                    
                </comment>
                <comment line="7029">
                    Initialization of transient Res Bundle happens here .                    
                </comment>
                <scope line="7030"/>
                <scope line="7032"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="7036"/>
            <method name="getObject" type="T" line="7040">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="type" type="Class<T>"/>
                </params>
            </method>
            <method name="getObject" type="T" line="7044">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="type" type="Class<T>"/>
                </params>
            </method>
        </class>
    </source>