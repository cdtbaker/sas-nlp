<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.rowset">
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="java.io"/>
        <import package="java.math"/>
        <import package="java.util"/>
        <import package="java.text"/>
        <import package="javax.sql.rowset"/>
        <import package="javax.sql.rowset.spi"/>
        <import package="javax.sql.rowset.serial"/>
        <import package="com.sun.rowset.internal"/>
        <import package="com.sun.rowset.providers"/>
        <class name="CachedRowSetImpl" line="41">
            <extends class="BaseRowSet"/>
            <comment line="96">
                Properties of this RowSet                
            </comment>
            <comment line="564">
                -----------------------------------------------------------------------
                 Properties
                -----------------------------------------------------------------------                
            </comment>
            <comment line="592">
                ---------------------------------------------------------------------
                 Reading and writing data
                ---------------------------------------------------------------------                
            </comment>
            <comment line="1089">
                --------------------------------------------------------------------
                 Views
                --------------------------------------------------------------------                
            </comment>
            <comment line="1355">
                --------------------------------------------------------------------
                 Advanced features
                --------------------------------------------------------------------                
            </comment>
            <comment line="1390">
                -----------------
                 methods inherited from RowSet
                -----------------                
            </comment>
            <comment line="1399">
                ---------------------------------------------------------------------
                 Reading and writing data
                ---------------------------------------------------------------------                
            </comment>
            <comment line="1432">
                -----------------------------------
                 Methods inherited from ResultSet
                -----------------------------------                
            </comment>
            <comment line="1576">
                Methods for accessing results by column index                
            </comment>
            <comment line="2463">
                Methods for accessing results by column name                
            </comment>
            <comment line="2819">
                Advanced features:                
            </comment>
            <comment line="3023">
                ----------------------------------------------------------------                
            </comment>
            <comment line="3040">
                --------------------------JDBC 2.0-----------------------------------                
            </comment>
            <comment line="3042">
                ---------------------------------------------------------------------
                 Getter&apos;s and Setter&apos;s
                ---------------------------------------------------------------------                
            </comment>
            <comment line="3188">
                ---------------------------------------------------------------------
                 Traversal/Positioning
                ---------------------------------------------------------------------                
            </comment>
            <comment line="3749">
                ---------------------------------------------------------------------
                 Updates
                ---------------------------------------------------------------------                
            </comment>
            <comment line="6239">
                RowSetInternal Interface                
            </comment>
            <comment line="7505">
                Goes to the page number passed as the parameter
                 @param page , the page loaded on a call to this function
                 @return true if the page exists false otherwise
                 @throws SQLException if an error occurs                
            </comment>
            <comment line="7511">
                public boolean absolutePage(int page) throws SQLException{
                
                boolean isAbs = true, retVal = true;
                int counter;
                
                if( page &lt;= 0 ){
                throw new SQLException(&quot;Absolute positoin is invalid&quot;);
                }
                counter = 0;
                
                firstPage();
                counter++;
                while((counter &lt; page) &amp;&amp; isAbs) {
                isAbs = nextPage();
                counter ++;
                }
                
                if( !isAbs &amp;&amp; counter &lt; page){
                retVal = false;
                }
                else if(counter == page){
                retVal = true;
                }
                
                return retVal;
                }                
            </comment>
            <comment line="7541">
                Goes to the page number passed as the parameter  from the current page.
                 The parameter can take postive or negative value accordingly.
                 @param page , the page loaded on a call to this function
                 @return true if the page exists false otherwise
                 @throws SQLException if an error occurs                
            </comment>
            <comment line="7548">
                public boolean relativePage(int page) throws SQLException {
                
                boolean isRel = true,retVal = true;
                int counter;
                
                if(page &gt; 0){
                counter  = 0;
                while((counter &lt; page) &amp;&amp; isRel){
                isRel = nextPage();
                counter++;
                }
                
                if(!isRel &amp;&amp; counter &lt; page){
                retVal = false;
                }
                else if( counter == page){
                retVal = true;
                }
                return retVal;
                }
                else {
                counter = page;
                isRel = true;
                while((counter &lt; 0) &amp;&amp; isRel){
                isRel = previousPage();
                counter++;
                }
                
                if( !isRel &amp;&amp; counter &lt; 0){
                retVal = false;
                }
                else if(counter == 0){
                retVal = true;
                }
                return retVal;
                }
                }                
            </comment>
            <comment line="7588">
                Retrieves the first page of data as specified by the page size.
                 @return boolean value true if present on first page, false otherwise
                 @throws SQLException if it called before populate or ResultSet is of
                         type &lt;code&gt;ResultSet.TYPE_FORWARD_ONLY&lt;code&gt; or an error occurs                
            </comment>
            <comment line="7594">
                public boolean firstPage() throws SQLException {
                if (populatecallcount == 0){
                throw new SQLException(&quot;Populate the data before calling &quot;);
                }
                if( !callWithCon){
                if(resultSet.getType() == ResultSet.TYPE_FORWARD_ONLY) {
                throw new SQLException(&quot;Result of type forward only&quot;);
                }
                }
                endPos = 0;
                maxRowsreached = 0;
                pagenotend = true;
                if(callWithCon){
                crsReader.setStartPosition(startPos);
                crsReader.readData((RowSetInternal)this);
                resultSet = null;
                }
                else {
                populate(resultSet,startPos);
                }
                onFirstPage = true;
                return onFirstPage;
                }                
            </comment>
            <comment line="7620">
                Retrives the last page of data as specified by the page size.
                 @return boolean value tur if present on the last page, false otherwise
                 @throws SQLException if called before populate or if an error occurs.                
            </comment>
            <comment line="7625">
                public boolean lastPage() throws SQLException{
                int pS;
                int mR;
                int quo;
                int rem;
                
                pS = getPageSize();
                mR = getMaxRows();
                
                if(pS == 0){
                onLastPage = true;
                return onLastPage;
                }
                
                if(getMaxRows() == 0){
                mR = totalRows;
                }
                
                if (populatecallcount == 0){
                throw new SQLException(&quot;Populate the data before calling &quot;);
                }
                
                onFirstPage = false;
                
                if((mR % pS) == 0){
                quo = mR  pS;
                int start = startPos + (pS  (quo - 1));
                maxRowsreached = mR - pS;
                if(callWithCon){
                crsReader.setStartPosition(start);
                crsReader.readData((RowSetInternal)this);
                resultSet = null;
                }
                else {
                populate(resultSet,start);
                }
                onLastPage = true;
                return onLastPage;
                }
                else {
                quo = mR pS;
                rem = mR % pS;
                int start = startPos + (pS  quo);
                maxRowsreached = mR - (rem);
                if(callWithCon){
                crsReader.setStartPosition(start);
                crsReader.readData((RowSetInternal)this);
                resultSet = null;
                }
                else {
                populate(resultSet,start);
                }
                onLastPage = true;
                return onLastPage;
                }
                }                
            </comment>
            <comment line="7836">
                o
                 This method is used for updating SQL &lt;code&gt;NCLOB&lt;code&gt;  type that maps
                 to &lt;code&gt;java.sql.Types.NCLOB&lt;code&gt;
                 @param columnIndex the first column is 1, the second 2, ...
                 @param nClob the value for the column to be updated
                 @throws SQLException if a database access error occurs
                 @since 6.0                
            </comment>
            <comment line="8214">
                ////////////////////////                
            </comment>
            <comment line="10124">
                ------------------------- JDBC 4.1 -----------------------------------                
            </comment>
            <implements interface="RowSet"/>
            <implements interface="RowSetInternal"/>
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <implements interface="CachedRowSet"/>
            <javadoc line="41">
                The standard implementation of the &lt;code&gt;CachedRowSet&lt;/code&gt; interface.
                  See interface defintion for full behaviour and implementation requirements.
                  This reference implementation has made provision for a one-to-one write back
                  facility and it is curremtly be possible to change the peristence provider
                  during the life-time of any CachedRowSetImpl.                
                <author>
                    Jonathan Bruce, Amit Handa                    
                </author>
            </javadoc>
            <declaration name="provider" type="SyncProvider" line="54"/>
            <javadoc line="54">
                The &lt;code&gt;SyncProvider&lt;/code&gt; used by the CachedRowSet                
            </javadoc>
            <declaration name="rowSetReader" type="RowSetReader" line="59"/>
            <javadoc line="59">
                The &lt;code&gt;RowSetReaderImpl&lt;/code&gt; object that is the reader
                  for this rowset.  The method &lt;code&gt;execute&lt;/code&gt; uses this
                  reader as part of its implementation.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="rowSetWriter" type="RowSetWriter" line="67"/>
            <javadoc line="67">
                The &lt;code&gt;RowSetWriterImpl&lt;/code&gt; object that is the writer
                  for this rowset.  The method &lt;code&gt;acceptChanges&lt;/code&gt; uses
                  this writer as part of its implementation.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="conn" type="Connection" line="75"/>
            <javadoc line="75">
                The &lt;code&gt;Connection&lt;/code&gt; object that connects with this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s current underlying data source.                
            </javadoc>
            <declaration name="RSMD" type="ResultSetMetaData" line="81"/>
            <javadoc line="81">
                The &lt;code&gt;ResultSetMetaData&lt;/code&gt; object that contains information
                  about the columns in the &lt;code&gt;ResultSet&lt;/code&gt; object that is the
                  current source of data for this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.                
            </javadoc>
            <declaration name="RowSetMD" type="RowSetMetaDataImpl" line="88"/>
            <javadoc line="88">
                The &lt;code&gt;RowSetMetaData&lt;/code&gt; object that contains information about
                  the columns in this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="keyCols" type="int" line="97"/>
            <javadoc line="97">
                An array containing the columns in this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object that form a unique identifier for a row. This array
                  is used by the writer.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="tableName" type="String" line="105"/>
            <javadoc line="105">
                The name of the table in the underlying database to which updates
                  should be written.  This name is needed because most drivers
                  do not return this information in a &lt;code&gt;ResultSetMetaData&lt;/code&gt;
                  object.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="rvh" type="Vector&lt;Object&gt;" line="114"/>
            <javadoc line="114">
                A &lt;code&gt;Vector&lt;/code&gt; object containing the &lt;code&gt;Row&lt;/code&gt;
                  objects that comprise  this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="cursorPos" type="int" line="121"/>
            <javadoc line="121">
                The current postion of the cursor in this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="absolutePos" type="int" line="128"/>
            <javadoc line="128">
                The current postion of the cursor in this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object not counting rows that have been deleted, if any.
                  &lt;P&gt;
                  For example, suppose that the cursor is on the last row of a rowset
                  that started with five rows and subsequently had the second and third
                  rows deleted. The &lt;code&gt;absolutePos&lt;/code&gt; would be &lt;code&gt;3&lt;/code&gt;,
                  whereas the &lt;code&gt;cursorPos&lt;/code&gt; would be &lt;code&gt;5&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="numDeleted" type="int" line="140"/>
            <javadoc line="140">
                The number of deleted rows currently in this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="numRows" type="int" line="147"/>
            <javadoc line="147">
                The total number of rows currently in this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="insertRow" type="InsertRow" line="154"/>
            <javadoc line="154">
                A special row used for constructing a new row. A new
                  row is constructed by using &lt;code&gt;ResultSet.updateXXX&lt;/code&gt;
                  methods to insert column values into the insert row.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="onInsertRow" type="boolean" line="162"/>
            <javadoc line="162">
                A &lt;code&gt;boolean&lt;/code&gt; indicating whether the cursor is
                  currently on the insert row.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="currentRow" type="int" line="169"/>
            <javadoc line="169">
                The field that temporarily holds the last position of the
                  cursor before it moved to the insert row, thus preserving
                  the number of the current row to which the cursor may return.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="lastValueNull" type="boolean" line="177"/>
            <javadoc line="177">
                A &lt;code&gt;boolean&lt;/code&gt; indicating whether the last value
                  returned was an SQL &lt;code&gt;NULL&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="sqlwarn" type="SQLWarning" line="184"/>
            <javadoc line="184">
                A &lt;code&gt;SQLWarning&lt;/code&gt; which logs on the warnings                
            </javadoc>
            <declaration name="strMatchColumn" type="String" line="189"/>
            <javadoc line="189">
                Used to track match column for JoinRowSet consumption                
            </javadoc>
            <declaration name="iMatchColumn" type="int" line="194"/>
            <javadoc line="194">
                Used to track match column for JoinRowSet consumption                
            </javadoc>
            <declaration name="rowsetWarning" type="RowSetWarning" line="199"/>
            <javadoc line="199">
                A &lt;code&gt;RowSetWarning&lt;/code&gt; which logs on the warnings                
            </javadoc>
            <declaration name="DEFAULT_SYNC_PROVIDER" type="String" line="204"/>
            <javadoc line="204">
                The default SyncProvider for the RI CachedRowSetImpl                
            </javadoc>
            <declaration name="dbmslocatorsUpdateCopy" type="boolean" line="209"/>
            <javadoc line="209">
                The boolean variable indicating locatorsUpdateValue                
            </javadoc>
            <declaration name="resultSet" type="ResultSet" line="214"/>
            <javadoc line="214">
                The &lt;code&gt;ResultSet&lt;/code&gt; object that is used to maintain the data when
                  a ResultSet and start position are passed as parameters to the populate function                
            </javadoc>
            <declaration name="endPos" type="int" line="220"/>
            <javadoc line="220">
                The integer value indicating the end position in the ResultSetwhere the picking
                  up of rows for populating a CachedRowSet object was left off.                
            </javadoc>
            <declaration name="prevEndPos" type="int" line="226"/>
            <javadoc line="226">
                The integer value indicating the end position in the ResultSetwhere the picking
                  up of rows for populating a CachedRowSet object was left off.                
            </javadoc>
            <declaration name="startPos" type="int" line="232"/>
            <javadoc line="232">
                The integer value indicating the position in the ResultSet, to populate the
                  CachedRowSet object.                
            </javadoc>
            <declaration name="startPrev" type="int" line="238"/>
            <javadoc line="238">
                The integer value indicating the positon from where the page prior to this
                  was populated.                
            </javadoc>
            <declaration name="pageSize" type="int" line="244"/>
            <javadoc line="244">
                The integer value indicating size of the page.                
            </javadoc>
            <declaration name="maxRowsreached" type="int" line="249"/>
            <javadoc line="249">
                The integer value indicating number of rows that have been processed so far.
                  Used for checking whether maxRows has been reached or not.                
            </javadoc>
            <declaration name="pagenotend" type="boolean" line="254"/>
            <javadoc line="254">
                The boolean value when true signifies that pages are still to follow and a
                  false value indicates that this is the last page.                
            </javadoc>
            <declaration name="onFirstPage" type="boolean" line="260"/>
            <javadoc line="260">
                The boolean value indicating whether this is the first page or not.                
            </javadoc>
            <declaration name="onLastPage" type="boolean" line="265"/>
            <javadoc line="265">
                The boolean value indicating whether this is the last page or not.                
            </javadoc>
            <declaration name="populatecallcount" type="int" line="270"/>
            <javadoc line="270">
                The integer value indicating how many times the populate function has been called.                
            </javadoc>
            <declaration name="totalRows" type="int" line="275"/>
            <javadoc line="275">
                The integer value indicating the total number of rows to be processed in the
                  ResultSet object passed to the populate function.                
            </javadoc>
            <declaration name="callWithCon" type="boolean" line="281"/>
            <javadoc line="281">
                The boolean value indicating how the CahedRowSet object has been populated for
                  paging purpose. True indicates that connection parameter is passed.                
            </javadoc>
            <declaration name="crsReader" type="CachedRowSetReader" line="287"/>
            <javadoc line="287">
                CachedRowSet reader object to read the data from the ResultSet when a connection
                  parameter is passed to populate the CachedRowSet object for paging.                
            </javadoc>
            <declaration name="iMatchColumns" type="Vector&lt;Integer&gt;" line="293"/>
            <javadoc line="293">
                The Vector holding the Match Columns                
            </javadoc>
            <declaration name="strMatchColumns" type="Vector&lt;String&gt;" line="298"/>
            <javadoc line="298">
                The Vector that will hold the Match Column names.                
            </javadoc>
            <declaration name="tXWriter" type="boolean" line="303"/>
            <javadoc line="303">
                Trigger that indicates whether the active SyncProvider is exposes the
                  additional TransactionalWriter method                
            </javadoc>
            <declaration name="tWriter" type="TransactionalWriter" line="309"/>
            <javadoc line="309">
                The field object for a transactional RowSet writer                
            </javadoc>
            <declaration name="resBundle" type="JdbcRowSetResourceBundle" line="314"/>
            <declaration name="updateOnInsert" type="boolean" line="316"/>
            <javadoc line="320">
                Constructs a new default &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with
                  the capacity to hold 100 rows. This new object has no metadata
                  and has the following default values:
                  &lt;pre&gt;
                  onInsertRow = false
                  insertRow = null
                  cursorPos = 0
                  numRows = 0
                  showDeleted = false
                  queryTimeout = 0
                  maxRows = 0
                  maxFieldSize = 0
                  rowSetType = ResultSet.TYPE_SCROLL_INSENSITIVE
                  concurrency = ResultSet.CONCUR_UPDATABLE
                  readOnly = false
                  isolation = Connection.TRANSACTION_READ_COMMITTED
                  escapeProcessing = true
                  onInsertRow = false
                  insertRow = null
                  cursorPos = 0
                  absolutePos = 0
                  numRows = 0
                  &lt;/pre&gt;
                  A &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object is configured to use the default
                  &lt;code&gt;RIOptimisticProvider&lt;/code&gt; implementation to provide connectivity
                  and synchronization capabilities to the set data source.
                  &lt;P&gt;                
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="CachedRowSetImpl" type="constructor" line="350">
                <comment line="359">
                    set the Reader, this maybe overridden latter                    
                </comment>
                <comment line="370">
                    allocate the parameters collection                    
                </comment>
                <comment line="375">
                    set up some default values                    
                </comment>
                <comment line="378">
                    insert row setup                    
                </comment>
                <comment line="382">
                    set the warninings                    
                </comment>
                <scope line="352"/>
                <scope line="354"/>
                <scope line="362"/>
            </method>
            <javadoc line="387">
                Provides a &lt;code&gt;CachedRowSetImpl&lt;/code&gt; instance with the same default properties as
                  as the zero parameter constructor.
                  &lt;pre&gt;
                  onInsertRow = false
                  insertRow = null
                  cursorPos = 0
                  numRows = 0
                  showDeleted = false
                  queryTimeout = 0
                  maxRows = 0
                  maxFieldSize = 0
                  rowSetType = ResultSet.TYPE_SCROLL_INSENSITIVE
                  concurrency = ResultSet.CONCUR_UPDATABLE
                  readOnly = false
                  isolation = Connection.TRANSACTION_READ_COMMITTED
                  escapeProcessing = true
                  onInsertRow = false
                  insertRow = null
                  cursorPos = 0
                  absolutePos = 0
                  numRows = 0
                  &lt;/pre&gt;
                  However, applications will have the means to specify at runtime the
                  desired &lt;code&gt;SyncProvider&lt;/code&gt; object.
                  &lt;p&gt;
                  For example, creating a &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as follows ensures
                  that a it is established with the &lt;code&gt;com.foo.provider.Impl&lt;/code&gt; synchronization
                  implementation providing the synchronization mechanism for this disconnected
                  &lt;code&gt;RowSet&lt;/code&gt; object.
                  &lt;pre&gt;
                  Hashtable env = new Hashtable();
                  env.put(javax.sql.rowset.spi.SyncFactory.ROWSET_PROVIDER_NAME,
                  &quot;com.foo.provider.Impl&quot;);
                  CachedRowSetImpl crs = new CachedRowSet(env);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Calling this constructor with a &lt;code&gt;null&lt;/code&gt; parameter will
                  cause the &lt;code&gt;SyncFactory&lt;/code&gt; to provide the reference
                  optimistic provider &lt;code&gt;com.sun.rowset.providers.RIOptimisticProvider&lt;/code&gt;.
                  &lt;p&gt;
                  In addition, the following properties can be associated with the
                  provider to assist in determining the choice of the synchronizaton
                  provider such as:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;ROWSET_SYNC_PROVIDER&lt;/code&gt; - the property specifying the the
                  &lt;code&gt;SyncProvider&lt;/code&gt; class name to be instantiated by the
                  &lt;code&gt;SyncFacttory&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;ROWSET_SYNC_VENDOR&lt;/code&gt; - the property specifying the software
                  vendor associated with a &lt;code&gt;SyncProvider&lt;/code&gt; implementation.
                  &lt;li&gt;&lt;code&gt;ROWSET_SYNC_PROVIDER_VER&lt;/code&gt; - the property specifying the
                  version of the &lt;code&gt;SyncProvider&lt;/code&gt; implementation provided by the
                  software vendor.
                  &lt;/ul&gt;
                  More specific detailes are available in the &lt;code&gt;SyncFactory&lt;/code&gt;
                  and &lt;code&gt;SyncProvider&lt;/code&gt; specificiations later in this document.
                  &lt;p&gt;                
                <param>
                    env a <code>Hashtable</code> object with a list of desired
                      synchronization providers                    
                </param>
                <throws>
                    SQLException if the requested provider cannot be found by the
                      synchonization factory                    
                </throws>
                <see>
                    SyncProvider                    
                </see>
            </javadoc>
            <method name="CachedRowSetImpl" type="constructor" line="452">
                <params>
                    <param name="env" type="Hashtable"/>
                </params>
                <comment line="469">
                    set the Reader, this maybe overridden latter                    
                </comment>
                <comment line="476">
                    allocate the parameters collection                    
                </comment>
                <comment line="478">
                    set up some default values                    
                </comment>
                <scope line="455"/>
                <scope line="457"/>
                <scope line="461"/>
                <declaration name="providerName" type="String" line="465"/>
            </method>
            <javadoc line="480">
                Sets the &lt;code&gt;rvh&lt;/code&gt; field to a new &lt;code&gt;Vector&lt;/code&gt;
                  object with a capacity of 100 and sets the
                  &lt;code&gt;cursorPos&lt;/code&gt; and &lt;code&gt;numRows&lt;/code&gt; fields to zero.                
            </javadoc>
            <method name="initContainer" type="void" line="485"/>
            <javadoc line="494">
                Sets the properties for this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object to
                  their default values. This method is called internally by the
                  default constructor.                
            </javadoc>
            <method name="initProperties" type="void" line="500">
                <comment line="522">
                    setTypeMap(null);                    
                </comment>
                <comment line="525">
                    Instantiating the vector for MatchColumns                    
                </comment>
                <scope line="502">
                    <scope line="503"/>
                    <scope line="505"/>
                </scope>
                <scope line="527"/>
                <scope line="532"/>
            </method>
            <javadoc line="537">
                Determine whether the SyncProvider&apos;s writer implements the
                  &lt;code&gt;TransactionalWriter&lt;code&gt; interface                
            </javadoc>
            <method name="checkTransactionalWriter" type="void" line="541">
                <scope line="542">
                    <declaration name="c" type="Class" line="543"/>
                    <scope line="544">
                        <declaration name="theInterfaces" type="Class[]" line="545"/>
                        <scope line="546">
                            <scope line="547"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="556">
                Sets an private field to all transaction bounddaries to be set                
            </javadoc>
            <method name="establishTransactionalWriter" type="void" line="559"/>
            <javadoc line="567">
                Sets this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s command property
                  to the given &lt;code&gt;String&lt;/code&gt; object and clears the parameters,
                  if any, that were set for the previous command.
                  &lt;P&gt;
                  The command property may not be needed
                  if the rowset is produced by a data source, such as a spreadsheet,
                  that does not support commands. Thus, this property is optional
                  and may be &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    cmd a <code>String</code> object containing an SQL query
                      that will be set as the command; may be <code>null</code>                    
                </param>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="setCommand" type="void" line="581">
                <params>
                    <param name="cmd" type="String"/>
                </params>
                <scope line="585"/>
            </method>
            <javadoc line="595">
                Populates this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with data from
                  the given &lt;code&gt;ResultSet&lt;/code&gt; object.  This
                  method is an alternative to the method &lt;code&gt;execute&lt;/code&gt;
                  for filling the rowset with data.  The method &lt;code&gt;populate&lt;/code&gt;
                  does not require that the properties needed by the method
                  &lt;code&gt;execute&lt;/code&gt;, such as the &lt;code&gt;command&lt;/code&gt; property,
                  be set. This is true because the method &lt;code&gt;populate&lt;/code&gt;
                  is given the &lt;code&gt;ResultSet&lt;/code&gt; object from
                  which to get data and thus does not need to use the properties
                  required for setting up a connection and executing this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s command.
                  &lt;P&gt;
                  After populating this rowset with data, the method
                  &lt;code&gt;populate&lt;/code&gt; sets the rowset&apos;s metadata and
                  then sends a &lt;code&gt;RowSetChangedEvent&lt;/code&gt; object
                  to all registered listeners prior to returning.                
                <param>
                    data the <code>ResultSet</code> object containing the data
                      to be read into this <code>CachedRowSetImpl</code> object                    
                </param>
                <throws>
                    SQLException if an error occurs; or the max row setting is
                      violated while populating the RowSet                    
                </throws>
                <see>
                    #execute                    
                </see>
            </javadoc>
            <method name="populate" type="void" line="620">
                <params>
                    <param name="data" type="ResultSet"/>
                </params>
                <comment line="635">
                    get the meta data for this ResultSet                    
                </comment>
                <comment line="638">
                    set up the metadata                    
                </comment>
                <comment line="642">
                    release the meta-data so that aren&apos;t tempted to use it.                    
                </comment>
                <comment line="658">
                    check if the user has set a map. If no map
                     is set then use plain getObject. This lets
                     us work with drivers that do not support
                     getObject with a map in fairly sensible way                    
                </comment>
                <comment line="669">
                    the following block checks for the various
                     types that we have to serialize in order to
                     store - right now only structs have been tested                    
                </comment>
                <comment line="696">
                    Also rowsFetched should be equal to rvh.size()                    
                </comment>
                <comment line="698">
                    notify any listeners that the rowset has changed                    
                </comment>
                <declaration name="rowsFetched" type="int" line="621"/>
                <declaration name="currentRow" type="Row" line="622"/>
                <declaration name="numCols" type="int" line="623"/>
                <declaration name="i" type="int" line="624"/>
                <declaration name="map" type="Map&lt;String,Class&lt;?&gt;&gt;" line="625"/>
                <declaration name="obj" type="Object" line="626"/>
                <declaration name="mRows" type="int" line="627"/>
                <scope line="629"/>
                <scope line="648">
                    <scope line="652"/>
                    <scope line="656">
                        <scope line="663"/>
                        <scope line="665"/>
                        <scope line="673"/>
                        <scope line="675"/>
                        <scope line="677"/>
                        <scope line="679"/>
                        <scope line="681"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="703">
                Initializes the given &lt;code&gt;RowSetMetaData&lt;/code&gt; object with the values
                  in the given &lt;code&gt;ResultSetMetaData&lt;/code&gt; object.                
                <param>
                    md the <code>RowSetMetaData</code> object for this
                      <code>CachedRowSetImpl</code> object, which will be set with
                      values from rsmd                    
                </param>
                <param>
                    rsmd the <code>ResultSetMetaData</code> object from which new
                      values for md will be read                    
                </param>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="initMetaData" type="void" line="714">
                <params>
                    <param name="md" type="RowSetMetaDataImpl"/>
                    <param name="rsmd" type="ResultSetMetaData"/>
                </params>
                <comment line="728">
                    The PostgreSQL drivers sometimes return negative columnDisplaySize,
                     which causes an exception to be thrown.  Check for it.                    
                </comment>
                <comment line="740">
                    Drivers return some strange values for precision, for non-numeric data, including reports of
                     non-integer values; maybe we should check type, &amp; set to 0 for non-numeric types.                    
                </comment>
                <comment line="750">
                    It seems, from a bug report, that a driver can sometimes return a negative
                     value for scale.  javax.sql.rowset.RowSetMetaDataImpl will throw an exception
                     if we attempt to set a negative value.  As such, we&apos;ll check for this case.                    
                </comment>
                <comment line="767">
                    JDBC 4.0 mandates as does the Java EE spec that all DataBaseMetaData methods
                     must be implemented, therefore, the previous fix for 5055528 is being backed out                    
                </comment>
                <declaration name="numCols" type="int" line="715"/>
                <scope line="718">
                    <declaration name="size" type="int" line="731"/>
                    <scope line="732"/>
                    <declaration name="precision" type="int" line="743"/>
                    <scope line="744"/>
                    <declaration name="scale" type="int" line="754"/>
                    <scope line="755"/>
                </scope>
                <scope line="765"/>
            </method>
            <javadoc line="772">
                Populates this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with data,
                  using the given connection to produce the result set from
                  which data will be read.  A second form of this method,
                  which takes no arguments, uses the values from this rowset&apos;s
                  user, password, and either url or data source properties to
                  create a new database connection. The form of &lt;code&gt;execute&lt;/code&gt;
                  that is given a connection ignores these properties.                
                <param>
                    conn A standard JDBC <code>Connection</code> object that this
                      <code>CachedRowSet</code> object can pass to a synchronization provider
                      to establish a connection to the data source                    
                </param>
                <throws>
                    SQLException if an invalid <code>Connection</code> is supplied
                      or an error occurs in establishing the connection to the
                      data source                    
                </throws>
                <see>
                    #populate                    
                </see>
                <see>
                    java.sql.Connection                    
                </see>
            </javadoc>
            <method name="execute" type="void" line="790">
                <params>
                    <param name="conn" type="Connection"/>
                </params>
                <comment line="792">
                    store the connection so the reader can find it.                    
                </comment>
                <comment line="802">
                    Now call the current reader&apos;s readData method                    
                </comment>
                <comment line="809">
                    JDBC 4.0 mandates as does the Java EE spec that all DataBaseMetaData methods
                     must be implemented, therefore, the previous fix for 5055528 is being backed out                    
                </comment>
                <scope line="794"/>
                <scope line="802"/>
                <scope line="807"/>
            </method>
            <javadoc line="815">
                Sets this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s connection property
                  to the given &lt;code&gt;Connection&lt;/code&gt; object.  This method is called
                  internally by the version of the method &lt;code&gt;execute&lt;/code&gt; that takes a
                  &lt;code&gt;Connection&lt;/code&gt; object as an argument. The reader for this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object can retrieve the connection stored
                  in the rowset&apos;s connection property by calling its
                  &lt;code&gt;getConnection&lt;/code&gt; method.                
                <param>
                    connection the <code>Connection</code> object that was passed in
                      to the method <code>execute</code> and is to be stored
                      in this <code>CachedRowSetImpl</code> object's connection
                      property                    
                </param>
            </javadoc>
            <method name="setConnection" type="void" line="829">
                <params>
                    <param name="connection" type="Connection"/>
                </params>
            </method>
            <javadoc line="834">
                Propagates all row update, insert, and delete changes to the
                  underlying data source backing this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object.
                  &lt;P&gt;
                  &lt;b&gt;Note&lt;/b&gt;In the reference implementation an optimistic concurrency implementation
                  is provided as a sample implementation of a the &lt;code&gt;SyncProvider&lt;/code&gt;
                  abstract class.
                  &lt;P&gt;
                  This method fails if any of the updates cannot be propagated back
                  to the data source.  When it fails, the caller can assume that
                  none of the updates are reflected in the data source.
                  When an exception is thrown, the current row
                  is set to the first &quot;updated&quot; row that resulted in an exception
                  unless the row that caused the exception is a &quot;deleted&quot; row.
                  In that case, when deleted rows are not shown, which is usually true,
                  the current row is not affected.
                  &lt;P&gt;
                  If no &lt;code&gt;SyncProvider&lt;/code&gt; is configured, the reference implementation
                  leverages the &lt;code&gt;RIOptimisticProvider&lt;/code&gt; available which provides the
                  default and reference synchronization capabilities for disconnected
                  &lt;code&gt;RowSets&lt;/code&gt;.                
                <throws>
                    SQLException if the cursor is on the insert row or the underlying
                      reference synchronization provider fails to commit the updates
                      to the datasource                    
                </throws>
                <throws>
                    SyncProviderException if an internal error occurs within the
                      <code>SyncProvider</code> instance during either during the
                      process or at any time when the <code>SyncProvider</code>
                      instance touches the data source.                    
                </throws>
                <see>
                    #acceptChanges(java.sql.Connection)                    
                </see>
                <see>
                    javax.sql.RowSetWriter                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncProvider                    
                </see>
            </javadoc>
            <method name="acceptChanges" type="void" line="868">
                <comment line="886">
                    do commit/rollback&apos;s here                    
                </comment>
                <scope line="869"/>
                <declaration name="saveCursorPos" type="int" line="873"/>
                <declaration name="success" type="boolean" line="874"/>
                <declaration name="conflict" type="boolean" line="875"/>
                <scope line="877">
                    <scope line="878"/>
                    <scope line="884">
                        <scope line="886"/>
                        <scope line="890">
                            <scope line="892"/>
                            <scope line="894"/>
                        </scope>
                    </scope>
                    <scope line="902"/>
                    <scope line="904"/>
                </scope>
                <scope line="908"/>
                <scope line="910"/>
                <scope line="913"/>
            </method>
            <javadoc line="918">
                Propagates all row update, insert, and delete changes to the
                  data source backing this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object
                  using the given &lt;code&gt;Connection&lt;/code&gt; object.
                  &lt;P&gt;
                  The reference implementation &lt;code&gt;RIOptimisticProvider&lt;/code&gt;
                  modifies its synchronization to a write back function given
                  the updated connection
                  The reference implementation modifies its synchronization behaviour
                  via the &lt;code&gt;SyncProvider&lt;/code&gt; to ensure the synchronization
                  occurs according to the updated JDBC &lt;code&gt;Connection&lt;/code&gt;
                  properties.                
                <param>
                    con a standard JDBC <code>Connection</code> object                    
                </param>
                <throws>
                    SQLException if the cursor is on the insert row or the underlying
                      synchronization provider fails to commit the updates
                      back to the data source                    
                </throws>
                <see>
                    #acceptChanges                    
                </see>
                <see>
                    javax.sql.RowSetWriter                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncFactory                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncProvider                    
                </see>
            </javadoc>
            <method name="acceptChanges" type="void" line="940">
                <params>
                    <param name="con" type="Connection"/>
                </params>
            </method>
            <javadoc line="947">
                Restores this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object to its original state,
                  that is, its state before the last set of changes.
                  &lt;P&gt;
                  Before returning, this method moves the cursor before the first row
                  and sends a &lt;code&gt;rowSetChanged&lt;/code&gt; event to all registered
                  listeners.                
                <throws>
                    SQLException if an error is occurs rolling back the RowSet
                      state to the definied original value.                    
                </throws>
                <see>
                    javax.sql.RowSetListener#rowSetChanged                    
                </see>
            </javadoc>
            <method name="restoreOriginal" type="void" line="958">
                <comment line="975">
                    move to before the first                    
                </comment>
                <comment line="978">
                    notify any listeners                    
                </comment>
                <declaration name="currentRow" type="Row" line="959"/>
                <scope line="960">
                    <scope line="962"/>
                    <scope line="965">
                        <scope line="966"/>
                        <scope line="969"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="981">
                Releases the current contents of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object and sends a &lt;code&gt;rowSetChanged&lt;/code&gt; event object to all
                  registered listeners.                
                <throws>
                    SQLException if an error occurs flushing the contents of
                      RowSet.                    
                </throws>
                <see>
                    javax.sql.RowSetListener#rowSetChanged                    
                </see>
            </javadoc>
            <method name="release" type="void" line="990"/>
            <javadoc line="995">
                Cancels deletion of the current row and notifies listeners that
                  a row has changed.
                  &lt;P&gt;
                  Note:  This method can be ignored if deleted rows are not being shown,
                  which is the normal case.                
                <throws>
                    SQLException if the cursor is not on a valid row                    
                </throws>
            </javadoc>
            <method name="undoDelete" type="void" line="1004">
                <comment line="1009">
                    make sure we are on a row                    
                </comment>
                <comment line="1012">
                    don&apos;t want this to happen...                    
                </comment>
                <scope line="1005"/>
                <scope line="1012"/>
                <declaration name="currentRow" type="Row" line="1016"/>
                <scope line="1017"/>
            </method>
            <javadoc line="1024">
                Immediately removes the current row from this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object if the row has been inserted, and
                  also notifies listeners the a row has changed.  An exception is thrown
                  if the row is not a row that has been inserted or the cursor is before
                  the first row, after the last row, or on the insert row.
                  &lt;P&gt;
                  This operation cannot be undone.                
                <throws>
                    SQLException if an error occurs,
                      the cursor is not on a valid row,
                      or the row has not been inserted                    
                </throws>
            </javadoc>
            <method name="undoInsert" type="void" line="1037">
                <comment line="1039">
                    make sure we are on a row                    
                </comment>
                <comment line="1042">
                    don&apos;t want this to happen...                    
                </comment>
                <scope line="1042"/>
                <declaration name="currentRow" type="Row" line="1046"/>
                <scope line="1047"/>
                <scope line="1051"/>
            </method>
            <javadoc line="1056">
                Immediately reverses the last update operation if the
                  row has been modified. This method can be
                  called to reverse updates on a all columns until all updates in a row have
                  been rolled back to their originating state since the last synchronization
                  (&lt;code&gt;acceptChanges&lt;/code&gt;) or population. This method may also be called
                  while performing updates to the insert row.
                  &lt;P&gt;
                  &lt;code&gt;undoUpdate&lt;/code may be called at any time during the life-time of a
                  rowset, however after a synchronization has occurs this method has no
                  affect until further modification to the RowSet data occurs.                
                <throws>
                    SQLException if cursor is before the first row, after the last
                      row in rowset.                    
                </throws>
                <see>
                    #undoDelete                    
                </see>
                <see>
                    #undoInsert                    
                </see>
                <see>
                    java.sql.ResultSet#cancelRowUpdates                    
                </see>
            </javadoc>
            <method name="undoUpdate" type="void" line="1074">
                <comment line="1076">
                    if on insert row, cancel the insert row
                     make the insert row flag,
                     cursorPos back to the current row                    
                </comment>
                <comment line="1081">
                    else if not on insert row
                     call undoUpdate or undoInsert                    
                </comment>
            </method>
            <javadoc line="1092">
                Returns a new &lt;code&gt;RowSet&lt;/code&gt; object backed by the same data as
                  that of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object and sharing a set of cursors
                  with it. This allows cursors to interate over a shared set of rows, providing
                  multiple views of the underlying data.                
                <return>
                    a <code>RowSet</code> object that is a copy of this <code>CachedRowSetImpl</code>
                      object and shares a set of cursors with it                    
                </return>
                <throws>
                    SQLException if an error occurs or cloning is
                      not supported                    
                </throws>
                <see>
                    javax.sql.RowSetEvent                    
                </see>
                <see>
                    javax.sql.RowSetListener                    
                </see>
            </javadoc>
            <method name="createShared" type="RowSet" line="1105">
                <declaration name="clone" type="RowSet" line="1106"/>
                <scope line="1107"/>
                <scope line="1109"/>
            </method>
            <javadoc line="1115">
                Returns a new &lt;code&gt;RowSet&lt;/code&gt; object containing by the same data
                  as this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.  This method
                  differs from the method &lt;code&gt;createCopy&lt;/code&gt; in that it throws a
                  &lt;code&gt;CloneNotSupportedException&lt;/code&gt; object instead of an
                  &lt;code&gt;SQLException&lt;/code&gt; object, as the method &lt;code&gt;createShared&lt;/code&gt;
                  does.  This &lt;code&gt;clone&lt;/code&gt;
                  method is called internally by the method &lt;code&gt;createShared&lt;/code&gt;,
                  which catches the &lt;code&gt;CloneNotSupportedException&lt;/code&gt; object
                  and in turn throws a new &lt;code&gt;SQLException&lt;/code&gt; object.                
                <return>
                    a copy of this <code>CachedRowSetImpl</code> object                    
                </return>
                <throws>
                    CloneNotSupportedException if an error occurs when
                      attempting to clone this <code>CachedRowSetImpl</code> object                    
                </throws>
                <see>
                    #createShared                    
                </see>
            </javadoc>
            <method name="clone" type="Object" line="1131"/>
            <javadoc line="1135">
                Creates a &lt;code&gt;RowSet&lt;/code&gt; object that is a deep copy of
                  this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s data, including
                  constraints.  Updates made
                  on a copy are not visible to the original rowset;
                  a copy of a rowset is completely independent from the original.
                  &lt;P&gt;
                  Making a copy saves the cost of creating an identical rowset
                  from first principles, which can be quite expensive.
                  For example, it can eliminate the need to query a
                  remote database server.                
                <return>
                    a new <code>CachedRowSet</code> object that is a deep copy
                      of this <code>CachedRowSet</code> object and is
                      completely independent from this <code>CachedRowSetImpl</code>
                      object.                    
                </return>
                <throws>
                    SQLException if an error occurs in generating the copy of this
                      of the <code>CachedRowSetImpl</code>                    
                </throws>
                <see>
                    #createShared                    
                </see>
                <see>
                    javax.sql.RowSetEvent                    
                </see>
                <see>
                    javax.sql.RowSetListener                    
                </see>
            </javadoc>
            <method name="createCopy" type="CachedRowSet" line="1156">
                <comment line="1179">
                    return ((CachedRowSet)(in.readObject()));                    
                </comment>
                <declaration name="out" type="ObjectOutputStream" line="1157"/>
                <declaration name="bOut" type="ByteArrayOutputStream" line="1158"/>
                <scope line="1159"/>
                <scope line="1162"/>
                <declaration name="in" type="ObjectInputStream" line="1166"/>
                <scope line="1168">
                    <declaration name="bIn" type="ByteArrayInputStream" line="1169"/>
                </scope>
                <scope line="1171"/>
                <scope line="1173"/>
                <scope line="1177">
                    <declaration name="crsTemp" type="CachedRowSetImpl" line="1179"/>
                </scope>
                <scope line="1183"/>
                <scope line="1185"/>
                <scope line="1187"/>
            </method>
            <javadoc line="1192">
                Creates a &lt;code&gt;RowSet&lt;/code&gt; object that is a copy of
                  this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s table structure
                  and the constraints only.
                  There will be no data in the object being returned.
                  Updates made on a copy are not visible to the original rowset.
                  &lt;P&gt;
                  This helps in getting the underlying XML schema which can
                  be used as the basis for populating a &lt;code&gt;WebRowSet&lt;/code&gt;.                
                <return>
                    a new <code>CachedRowSet</code> object that is a copy
                      of this <code>CachedRowSetImpl</code> object's schema and
                      retains all the constraints on the original rowset but contains
                      no data                    
                </return>
                <throws>
                    SQLException if an error occurs in generating the copy
                      of the <code>CachedRowSet</code> object                    
                </throws>
                <see>
                    #createShared                    
                </see>
                <see>
                    #createCopy                    
                </see>
                <see>
                    #createCopyNoConstraints                    
                </see>
                <see>
                    javax.sql.RowSetEvent                    
                </see>
                <see>
                    javax.sql.RowSetListener                    
                </see>
            </javadoc>
            <method name="createCopySchema" type="CachedRowSet" line="1214">
                <comment line="1216">
                    Copy everything except data i.e all constraints                    
                </comment>
                <comment line="1218">
                    Store the number of rows of &quot;this&quot;
                     and make numRows equals zero.
                     and make data also zero.                    
                </comment>
                <comment line="1226">
                    reset this object back to number of rows.                    
                </comment>
                <declaration name="nRows" type="int" line="1220"/>
                <declaration name="crs" type="CachedRowSet" line="1223"/>
            </method>
            <javadoc line="1231">
                Creates a &lt;code&gt;CachedRowSet&lt;/code&gt; object that is a copy of
                  this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s data only.
                  All constraints set in this object will not be there
                  in the returning object.  Updates made
                  on a copy are not visible to the original rowset.                
                <return>
                    a new <code>CachedRowSet</code> object that is a deep copy
                      of this <code>CachedRowSetImpl</code> object and is
                      completely independent from this <code>CachedRowSetImpl</code> object                    
                </return>
                <throws>
                    SQLException if an error occurs in generating the copy of the
                      of the <code>CachedRowSet</code>                    
                </throws>
                <see>
                    #createShared                    
                </see>
                <see>
                    #createCopy                    
                </see>
                <see>
                    #createCopySchema                    
                </see>
                <see>
                    javax.sql.RowSetEvent                    
                </see>
                <see>
                    javax.sql.RowSetListener                    
                </see>
            </javadoc>
            <method name="createCopyNoConstraints" type="CachedRowSet" line="1249">
                <comment line="1251">
                    Copy the whole data ONLY without any constraints.                    
                </comment>
                <comment line="1259">
                    do nothing, if the setMatchColumn is not set.                    
                </comment>
                <comment line="1265">
                    do nothing, if the setMatchColumn is not set.                    
                </comment>
                <declaration name="crs" type="CachedRowSetImpl" line="1251"/>
                <scope line="1255"/>
                <scope line="1257"/>
                <scope line="1261"/>
                <scope line="1263"/>
            </method>
            <javadoc line="1270">
                Converts this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object to a collection
                  of tables. The sample implementation utilitizes the &lt;code&gt;TreeMap&lt;/code&gt;
                  collection type.
                  This class guarantees that the map will be in ascending key order,
                  sorted according to the natural order for the key&apos;s class.                
                <return>
                    a <code>Collection</code> object consisting of tables,
                      each of which is a copy of a row in this
                      <code>CachedRowSetImpl</code> object                    
                </return>
                <throws>
                    SQLException if an error occurs in generating the collection                    
                </throws>
                <see>
                    #toCollection(int)                    
                </see>
                <see>
                    #toCollection(String)                    
                </see>
                <see>
                    java.util.TreeMap                    
                </see>
            </javadoc>
            <method name="toCollection" type="Collection<?>" line="1285">
                <declaration name="tMap" type="TreeMap&lt;Integer,Object&gt;" line="1287"/>
                <scope line="1289"/>
            </method>
            <javadoc line="1296">
                Returns the specified column of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object
                  as a &lt;code&gt;Collection&lt;/code&gt; object.  This method makes a copy of the
                  column&apos;s data and utilitizes the &lt;code&gt;Vector&lt;/code&gt; to establish the
                  collection. The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array
                  objects allowing the individual components to be accessed using an
                  an integer index similar to that of an array.                
                <return>
                    a <code>Collection</code> object that contains the value(s)
                      stored in the specified column of this
                      <code>CachedRowSetImpl</code>
                      object                    
                </return>
                <throws>
                    SQLException if an error occurs generated the collection; or
                      an invalid column is provided.                    
                </throws>
                <see>
                    #toCollection()                    
                </see>
                <see>
                    #toCollection(String)                    
                </see>
                <see>
                    java.util.Vector                    
                </see>
            </javadoc>
            <method name="toCollection" type="Collection<?>" line="1314">
                <params>
                    <param name="column" type="int"/>
                </params>
                <comment line="1320">
                    create a copy                    
                </comment>
                <declaration name="nRows" type="int" line="1316"/>
                <declaration name="vec" type="Vector&lt;Object&gt;" line="1317"/>
                <declaration name="crsTemp" type="CachedRowSetImpl" line="1320"/>
                <scope line="1323"/>
            </method>
            <javadoc line="1332">
                Returns the specified column of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object
                  as a &lt;code&gt;Collection&lt;/code&gt; object.  This method makes a copy of the
                  column&apos;s data and utilitizes the &lt;code&gt;Vector&lt;/code&gt; to establish the
                  collection. The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array
                  objects allowing the individual components to be accessed using an
                  an integer index similar to that of an array.                
                <return>
                    a <code>Collection</code> object that contains the value(s)
                      stored in the specified column of this
                      <code>CachedRowSetImpl</code>
                      object                    
                </return>
                <throws>
                    SQLException if an error occurs generated the collection; or
                      an invalid column is provided.                    
                </throws>
                <see>
                    #toCollection()                    
                </see>
                <see>
                    #toCollection(int)                    
                </see>
                <see>
                    java.util.Vector                    
                </see>
            </javadoc>
            <method name="toCollection" type="Collection<?>" line="1350">
                <params>
                    <param name="column" type="String"/>
                </params>
            </method>
            <javadoc line="1359">
                Returns the &lt;code&gt;SyncProvider&lt;/code&gt; implementation being used
                  with this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; implementation rowset.                
                <return>
                    the SyncProvider used by the rowset. If not provider was
                      set when the rowset was instantiated, the reference
                      implementation (default) provider is returned.                    
                </return>
                <throws>
                    SQLException if error occurs while return the
                      <code>SyncProvider</code> instance.                    
                </throws>
            </javadoc>
            <method name="getSyncProvider" type="SyncProvider" line="1369"/>
            <javadoc line="1373">
                Sets the active &lt;code&gt;SyncProvider&lt;/code&gt; and attempts to load
                  load the new provider using the &lt;code&gt;SyncFactory&lt;/code&gt; SPI.                
                <throws>
                    SQLException if an error occurs while resetting the
                      <code>SyncProvider</code>.                    
                </throws>
            </javadoc>
            <method name="setSyncProvider" type="void" line="1380">
                <params>
                    <param name="providerStr" type="String"/>
                </params>
            </method>
            <javadoc line="1402">
                Populates this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with data.
                  This form of the method uses the rowset&apos;s user, password, and url or
                  data source name properties to create a database
                  connection.  If properties that are needed
                  have not been set, this method will throw an exception.
                  &lt;P&gt;
                  Another form of this method uses an existing JDBC &lt;code&gt;Connection&lt;/code&gt;
                  object instead of creating a new one; therefore, it ignores the
                  properties used for establishing a new connection.
                  &lt;P&gt;
                  The query specified by the command property is executed to create a
                  &lt;code&gt;ResultSet&lt;/code&gt; object from which to retrieve data.
                  The current contents of the rowset are discarded, and the
                  rowset&apos;s metadata is also (re)set.  If there are outstanding updates,
                  they are also ignored.
                  &lt;P&gt;
                  The method &lt;code&gt;execute&lt;/code&gt; closes any database connections that it
                  creates.                
                <throws>
                    SQLException if an error occurs or the
                      necessary properties have not been set                    
                </throws>
            </javadoc>
            <method name="execute" type="void" line="1425"/>
            <javadoc line="1435">
                Moves the cursor down one row from its current position and
                  returns &lt;code&gt;true&lt;/code&gt; if the new cursor position is a
                  valid row.
                  The cursor for a new &lt;code&gt;ResultSet&lt;/code&gt; object is initially
                  positioned before the first row. The first call to the method
                  &lt;code&gt;next&lt;/code&gt; moves the cursor to the first row, making it
                  the current row; the second call makes the second row the
                  current row, and so on.
                  &lt;P&gt;If an input stream from the previous row is open, it is
                  implicitly closed. The &lt;code&gt;ResultSet&lt;/code&gt; object&apos;s warning
                  chain is cleared when a new row is read.                
                <return>
                    <code>true</code> if the new current row is valid;
                      <code>false</code> if there are no more rows                    
                </return>
                <throws>
                    SQLException if an error occurs or
                      the cursor is not positioned in the rowset, before
                      the first row, or after the last row                    
                </throws>
            </javadoc>
            <method name="next" type="boolean" line="1455">
                <comment line="1457">
                    make sure things look sane. The cursor must be
                     positioned in the rowset or before first (0) or
                     after last (numRows + 1)                    
                </comment>
                <comment line="1465">
                    now move and notify                    
                </comment>
                <scope line="1461"/>
                <declaration name="ret" type="boolean" line="1465"/>
            </method>
            <javadoc line="1471">
                Moves this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s cursor to the next
                  row and returns &lt;code&gt;true&lt;/code&gt; if the cursor is still in the rowset;
                  returns &lt;code&gt;false&lt;/code&gt; if the cursor has moved to the position after
                  the last row.
                  &lt;P&gt;
                  This method handles the cases where the cursor moves to a row that
                  has been deleted.
                  If this rowset shows deleted rows and the cursor moves to a row
                  that has been deleted, this method moves the cursor to the next
                  row until the cursor is on a row that has not been deleted.
                  &lt;P&gt;
                  The method &lt;code&gt;internalNext&lt;/code&gt; is called by methods such as
                  &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;absolute&lt;/code&gt;, and &lt;code&gt;relative&lt;/code&gt;,
                  and, as its name implies, is only called internally.
                  &lt;p&gt;
                  This is a implementation only method and is not required as a standard
                  implementation of the &lt;code&gt;CachedRowSet&lt;/code&gt; interface.                
                <return>
                    <code>true</code> if the cursor is on a valid row in this
                      rowset; <code>false</code> if it is after the last row                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="internalNext" type="boolean" line="1494">
                <comment line="1503">
                    increment to after last                    
                </comment>
                <comment line="1510">
                    each call to internalNext may increment cursorPos multiple
                     times however, the absolutePos only increments once per call.                    
                </comment>
                <declaration name="ret" type="boolean" line="1495"/>
                <scope line="1497">
                    <scope line="1498"/>
                    <scope line="1501"/>
                </scope>
            </method>
            <javadoc line="1520">
                Closes this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; objecy and releases any resources
                  it was using.                
                <throws>
                    SQLException if an error occurs when releasing any resources in use
                      by this <code>CachedRowSetImpl</code> object                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="1527">
                <comment line="1530">
                    close all data structures holding
                     the disconnected rowset                    
                </comment>
                <comment line="1538">
                    set all insert(s), update(s) &amp; delete(s),
                     if at all, to their initial values.                    
                </comment>
                <comment line="1542">
                    clear the vector of it&apos;s present contents                    
                </comment>
                <comment line="1545">
                    this will make it eligible for gc
                     rvh = null;                    
                </comment>
            </method>
            <javadoc line="1548">
                Reports whether the last column read was SQL &lt;code&gt;NULL&lt;/code&gt;.
                  Note that you must first call the method &lt;code&gt;getXXX&lt;/code&gt;
                  on a column to try to read its value and then call the method
                  &lt;code&gt;wasNull&lt;/code&gt; to determine whether the value was
                  SQL &lt;code&gt;NULL&lt;/code&gt;.                
                <return>
                    <code>true</code> if the value in the last column read
                      was SQL <code>NULL</code>; <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="wasNull" type="boolean" line="1559"/>
            <javadoc line="1563">
                Sets the field &lt;code&gt;lastValueNull&lt;/code&gt; to the given
                  &lt;code&gt;boolean&lt;/code&gt; value.                
                <param>
                    value <code>true</code> to indicate that the value of
                      the last column read was SQL <code>NULL</code>;
                      <code>false</code> to indicate that it was not                    
                </param>
            </javadoc>
            <method name="setLastValueNull" type="void" line="1571">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="1577">
                Checks to see whether the given index is a valid column number
                  in this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object and throws
                  an &lt;code&gt;SQLException&lt;/code&gt; if it is not. The index is out of bounds
                  if it is less than &lt;code&gt;1&lt;/code&gt; or greater than the number of
                  columns in this rowset.
                  &lt;P&gt;
                  This method is called internally by the &lt;code&gt;getXXX&lt;/code&gt; and
                  &lt;code&gt;updateXXX&lt;/code&gt; methods.                
                <param>
                    idx the number of a column in this <code>CachedRowSetImpl</code>
                      object; must be between <code>1</code> and the number of
                      rows in this rowset                    
                </param>
                <throws>
                    SQLException if the given index is out of bounds                    
                </throws>
            </javadoc>
            <method name="checkIndex" type="void" line="1592">
                <params>
                    <param name="idx" type="int"/>
                </params>
                <scope line="1593"/>
            </method>
            <javadoc line="1598">
                Checks to see whether the cursor for this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object is on a row in the rowset and throws an
                  &lt;code&gt;SQLException&lt;/code&gt; if it is not.
                  &lt;P&gt;
                  This method is called internally by &lt;code&gt;getXXX&lt;/code&gt; methods, by
                  &lt;code&gt;updateXXX&lt;/code&gt; methods, and by methods that update, insert,
                  or delete a row or that cancel a row update, insert, or delete.                
                <throws>
                    SQLException if the cursor for this <code>CachedRowSetImpl</code>
                      object is not on a valid row                    
                </throws>
            </javadoc>
            <method name="checkCursor" type="void" line="1610">
                <scope line="1611"/>
            </method>
            <javadoc line="1616">
                Returns the column number of the column with the given name in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.  This method throws an
                  &lt;code&gt;SQLException&lt;/code&gt; if the given name is not the name of
                  one of the columns in this rowset.                
                <param>
                    name a <code>String</code> object that is the name of a column in
                      this <code>CachedRowSetImpl</code> object                    
                </param>
                <throws>
                    SQLException if the given name does not match the name of one of
                      the columns in this rowset                    
                </throws>
            </javadoc>
            <method name="getColIdxByName" type="int" line="1627">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="cols" type="int" line="1629"/>
                <scope line="1631">
                    <declaration name="colName" type="String" line="1632"/>
                </scope>
            </method>
            <javadoc line="1643">
                Returns the insert row or the current row of this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt;object.                
                <return>
                    the <code>Row</code> object on which this <code>CachedRowSetImpl</code>
                      objects's cursor is positioned                    
                </return>
            </javadoc>
            <method name="getCurrentRow" type="BaseRow" line="1650">
                <scope line="1651"/>
                <scope line="1653"/>
            </method>
            <javadoc line="1658">
                Removes the row on which the cursor is positioned.
                  &lt;p&gt;
                  This is a implementation only method and is not required as a standard
                  implementation of the &lt;code&gt;CachedRowSet&lt;/code&gt; interface.                
                <throws>
                    SQLException if the cursor is positioned on the insert
                      row                    
                </throws>
            </javadoc>
            <method name="removeCurrentRow" type="void" line="1667"/>
            <javadoc line="1674">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;String&lt;/code&gt; object.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>TINYINT, SMALLINT, INTEGER, BIGINT, REAL,
                      FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, <b>CHAR</b>, <b>VARCHAR</b></code>
                      or <code>LONGVARCHAR</code> value. The bold SQL type designates the
                      recommended return type.                    
                </throws>
            </javadoc>
            <method name="getString" type="String" line="1692">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="1696">
                    sanity check.                    
                </comment>
                <comment line="1698">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="1704">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="Object" line="1693"/>
                <scope line="1704"/>
            </method>
            <javadoc line="1712">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;boolean&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value as a <code>boolean</code> in the Java progamming language;
                      if the value is SQL <code>NULL</code>, the result is <code>false</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>BOOLEAN</code> value                    
                </throws>
                <see>
                    #getBoolean(String)                    
                </see>
            </javadoc>
            <method name="getBoolean" type="boolean" line="1728">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="1732">
                    sanity check.                    
                </comment>
                <comment line="1734">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="1740">
                    check for SQL NULL                    
                </comment>
                <comment line="1746">
                    check for Boolean...                    
                </comment>
                <comment line="1751">
                    convert to a Double and compare to zero                    
                </comment>
                <declaration name="value" type="Object" line="1729"/>
                <scope line="1740"/>
                <scope line="1746"/>
                <scope line="1751">
                    <declaration name="d" type="Double" line="1752"/>
                    <scope line="1753"/>
                    <scope line="1755"/>
                </scope>
                <scope line="1758"/>
            </method>
            <javadoc line="1764">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;byte&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value as a <code>byte</code> in the Java programming
                      language; if the value is SQL <code>NULL</code>, the result is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code><b>TINYINT</b>, SMALLINT, INTEGER, BIGINT, REAL,
                      FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</code>
                      or <code>LONGVARCHAR</code> value. The bold SQL type
                      designates the recommended return type.                    
                </throws>
                <see>
                    #getByte(String)                    
                </see>
            </javadoc>
            <method name="getByte" type="byte" line="1783">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="1787">
                    sanity check.                    
                </comment>
                <comment line="1789">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="1795">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="Object" line="1784"/>
                <scope line="1795"/>
                <scope line="1799"/>
                <scope line="1801"/>
            </method>
            <javadoc line="1807">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;short&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      result is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>TINYINT, <b>SMALLINT</b>, INTEGER, BIGINT, REAL
                      FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</code>
                      or <code>LONGVARCHAR</code> value. The bold SQL type designates the
                      recommended return type.                    
                </throws>
                <see>
                    #getShort(String)                    
                </see>
            </javadoc>
            <method name="getShort" type="short" line="1826">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="1830">
                    sanity check.                    
                </comment>
                <comment line="1832">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="1838">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="Object" line="1827"/>
                <scope line="1838"/>
                <scope line="1843"/>
                <scope line="1845"/>
            </method>
            <javadoc line="1851">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as an
                  &lt;code&gt;int&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      result is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>TINYINT, SMALLINT, <b>INTEGER</b>, BIGINT, REAL
                      FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</code>
                      or <code>LONGVARCHAR</code> value. The bold SQL type designates the
                      recommended return type.                    
                </throws>
            </javadoc>
            <method name="getInt" type="int" line="1869">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="1873">
                    sanity check.                    
                </comment>
                <comment line="1875">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="1881">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="Object" line="1870"/>
                <scope line="1881"/>
                <scope line="1886"/>
                <scope line="1888"/>
            </method>
            <javadoc line="1894">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;long&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      result is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>TINYINT, SMALLINT, INTEGER, <b>BIGINT</b>, REAL
                      FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</code>
                      or <code>LONGVARCHAR</code> value. The bold SQL type designates the
                      recommended return type.                    
                </throws>
                <see>
                    #getLong(String)                    
                </see>
            </javadoc>
            <method name="getLong" type="long" line="1913">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="1917">
                    sanity check.                    
                </comment>
                <comment line="1919">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="1925">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="Object" line="1914"/>
                <scope line="1925"/>
                <scope line="1929"/>
                <scope line="1931"/>
            </method>
            <javadoc line="1937">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;float&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      result is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>TINYINT, SMALLINT, INTEGER, BIGINT, <b>REAL</b>,
                      FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</code>
                      or <code>LONGVARCHAR</code> value. The bold SQL type designates the
                      recommended return type.                    
                </throws>
                <see>
                    #getFloat(String)                    
                </see>
            </javadoc>
            <method name="getFloat" type="float" line="1956">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="1960">
                    sanity check.                    
                </comment>
                <comment line="1962">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="1968">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="Object" line="1957"/>
                <scope line="1968"/>
                <scope line="1972"/>
                <scope line="1974"/>
            </method>
            <javadoc line="1980">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;double&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      result is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>TINYINT, SMALLINT, INTEGER, BIGINT, REAL,
                      <b>FLOAT</b>, <b>DOUBLE</b>, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</code>
                      or <code>LONGVARCHAR</code> value. The bold SQL type designates the
                      recommended return type.                    
                </throws>
                <see>
                    #getDouble(String)                    
                </see>
            </javadoc>
            <method name="getDouble" type="double" line="2000">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="2004">
                    sanity check.                    
                </comment>
                <comment line="2006">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="2012">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="Object" line="2001"/>
                <scope line="2012"/>
                <scope line="2016"/>
                <scope line="2018"/>
            </method>
            <javadoc line="2024">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object.
                  &lt;P&gt;
                  This method is deprecated; use the version of &lt;code&gt;getBigDecimal&lt;/code&gt;
                  that does not take a scale parameter and returns a value with full
                  precision.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point in the
                      value returned                    
                </param>
                <return>
                    the column value with the specified number of digits to the right
                      of the decimal point; if the value is SQL <code>NULL</code>, the
                      result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="2045">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="scale" type="int"/>
                </params>
                <comment line="2050">
                    sanity check.                    
                </comment>
                <comment line="2052">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="2058">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="Object" line="2046"/>
                <declaration name="bDecimal" type="BigDecimal" line="2047"/>
                <scope line="2058"/>
            </method>
            <javadoc line="2070">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;byte&lt;/code&gt; array value.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value as a <code>byte</code> array in the Java programming
                      language; if the value is SQL <code>NULL</code>, the
                      result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code><b>BINARY</b>, <b>VARBINARY</b> or
                      LONGVARBINARY</code> value.
                      The bold SQL type designates the recommended return type.                    
                </throws>
                <see>
                    #getBytes(String)                    
                </see>
            </javadoc>
            <method name="getBytes" type="byte[]" line="2090">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="2092">
                    sanity check.                    
                </comment>
                <comment line="2094">
                    make sure the cursor is on a valid row                    
                </comment>
                <scope line="2096"/>
            </method>
            <javadoc line="2103">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.sql.Date&lt;/code&gt; object.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value as a <code>java.sql.Data</code> object; if
                      the value is SQL <code>NULL</code>, the
                      result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="2117">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="2121">
                    sanity check.                    
                </comment>
                <comment line="2123">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="2129">
                    check for SQL NULL                    
                </comment>
                <comment line="2135">
                    The object coming back from the db could be
                     a date, a timestamp, or a char field variety.
                     If it&apos;s a date type return it, a timestamp
                     we turn into a long and then into a date,
                     char strings we try to parse. Yuck.                    
                </comment>
                <declaration name="value" type="Object" line="2118"/>
                <scope line="2129"/>
                <scope line="2142">
                    <declaration name="sec" type="long" line="2143"/>
                </scope>
                <scope line="2146">
                    <declaration name="sec" type="long" line="2147"/>
                </scope>
                <scope line="2152">
                    <scope line="2153">
                        <declaration name="df" type="DateFormat" line="2154"/>
                    </scope>
                    <scope line="2156"/>
                </scope>
                <scope line="2161"/>
            </method>
            <javadoc line="2168">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.sql.Time&lt;/code&gt; object.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="2181">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="2185">
                    sanity check.                    
                </comment>
                <comment line="2187">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="2193">
                    check for SQL NULL                    
                </comment>
                <comment line="2199">
                    The object coming back from the db could be
                     a date, a timestamp, or a char field variety.
                     If it&apos;s a date type return it, a timestamp
                     we turn into a long and then into a date,
                     char strings we try to parse. Yuck.                    
                </comment>
                <declaration name="value" type="Object" line="2182"/>
                <scope line="2193"/>
                <scope line="2206"/>
                <scope line="2209">
                    <declaration name="sec" type="long" line="2210"/>
                </scope>
                <scope line="2215">
                    <scope line="2216">
                        <declaration name="tf" type="DateFormat" line="2217"/>
                    </scope>
                    <scope line="2219"/>
                </scope>
                <scope line="2224"/>
            </method>
            <javadoc line="2231">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="2244">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="2248">
                    sanity check.                    
                </comment>
                <comment line="2250">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="2256">
                    check for SQL NULL                    
                </comment>
                <comment line="2262">
                    The object coming back from the db could be
                     a date, a timestamp, or a char field variety.
                     If it&apos;s a date type return it; a timestamp
                     we turn into a long and then into a date;
                     char strings we try to parse. Yuck.                    
                </comment>
                <declaration name="value" type="Object" line="2245"/>
                <scope line="2256"/>
                <scope line="2269"/>
                <scope line="2272">
                    <declaration name="sec" type="long" line="2273"/>
                </scope>
                <scope line="2276">
                    <declaration name="sec" type="long" line="2277"/>
                </scope>
                <scope line="2282">
                    <scope line="2283">
                        <declaration name="tf" type="DateFormat" line="2284"/>
                    </scope>
                    <scope line="2286"/>
                </scope>
                <scope line="2291"/>
            </method>
            <javadoc line="2298">
                Retrieves the value of the designated column in the current row of this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.io.InputStream&lt;/code&gt;
                  object.
                  A column value can be retrieved as a stream of ASCII characters
                  and then read in chunks from the stream.  This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt; values.  The JDBC
                  driver will do any necessary conversion from the database format into ASCII.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a get method implicitly closes the stream. . Also, a
                  stream may return &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;CachedRowSetImpl.available()&lt;/code&gt;
                  whether there is data available or not.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of one-byte ASCII characters.  If the value is SQL
                      <code>NULL</code>, the result is <code>null</code>.                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>CHAR, VARCHAR</code>, <code><b>LONGVARCHAR</b></code>
                      <code>BINARY, VARBINARY</code> or <code>LONGVARBINARY</code> value. The
                      bold SQL type designates the recommended return types that this method is
                      used to retrieve.                    
                </throws>
                <see>
                    #getAsciiStream(String)                    
                </see>
            </javadoc>
            <method name="getAsciiStream" type="java.io.InputStream" line="2329">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="2333">
                    always free an old stream                    
                </comment>
                <comment line="2336">
                    sanity check                    
                </comment>
                <comment line="2338">
                    make sure the cursor is on a vlid row                    
                </comment>
                <declaration name="value" type="Object" line="2330"/>
                <scope line="2341"/>
                <scope line="2346">
                    <scope line="2347"/>
                    <scope line="2349"/>
                </scope>
                <scope line="2352"/>
            </method>
            <javadoc line="2359">
                A column value can be retrieved as a stream of Unicode characters
                  and then read in chunks from the stream.  This method is particularly
                  suitable for retrieving large LONGVARCHAR values.  The JDBC driver will
                  do any necessary conversion from the database format into Unicode.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a get method implicitly closes the stream. . Also, a
                  stream may return 0 for available() whether there is data
                  available or not.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of two byte Unicode characters.  If the value is SQL NULL
                      then the result is null.                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="getUnicodeStream" type="java.io.InputStream" line="2380">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="2382">
                    always free an old stream                    
                </comment>
                <comment line="2385">
                    sanity check.                    
                </comment>
                <comment line="2387">
                    make sure the cursor is on a valid row                    
                </comment>
                <scope line="2390"/>
                <declaration name="value" type="Object" line="2394"/>
                <scope line="2395"/>
            </method>
            <javadoc line="2405">
                Retrieves the value of the designated column in the current row of this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.io.InputStream&lt;/code&gt;
                  object.
                  &lt;P&gt;
                  A column value can be retrieved as a stream of uninterpreted bytes
                  and then read in chunks from the stream.  This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARBINARY&lt;/code&gt; values.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a get method implicitly closes the stream. Also, a
                  stream may return &lt;code&gt;0&lt;/code&gt; for
                  &lt;code&gt;CachedRowSetImpl.available()&lt;/code&gt; whether there is data
                  available or not.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of uninterpreted bytes.  If the value is SQL <code>NULL</code>
                      then the result is <code>null</code>.                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>BINARY, VARBINARY</code> or <code><b>LONGVARBINARY</b></code>
                      The bold type indicates the SQL type that this method is recommened
                      to retrieve.                    
                </throws>
                <see>
                    #getBinaryStream(String)                    
                </see>
            </javadoc>
            <method name="getBinaryStream" type="java.io.InputStream" line="2435">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="2438">
                    always free an old stream                    
                </comment>
                <comment line="2441">
                    sanity check.                    
                </comment>
                <comment line="2443">
                    make sure the cursor is on a valid row                    
                </comment>
                <scope line="2445"/>
                <declaration name="value" type="Object" line="2449"/>
                <scope line="2450"/>
            </method>
            <javadoc line="2464">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;String&lt;/code&gt; object.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>TINYINT, SMALLINT, INTEGER
                      BIGINT, REAL, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, <b>CHAR</b>,
                      <b>VARCHAR</b></code> or <code>LONGVARCHAR<</code> value. The bold SQL type
                      designates the recommended return type.                    
                </throws>
            </javadoc>
            <method name="getString" type="String" line="2480">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2484">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;boolean&lt;/code&gt; value.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    the column value as a <code>boolean</code> in the Java programming
                      language; if the value is SQL <code>NULL</code>,
                      the result is <code>false</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>BOOLEAN</code> value                    
                </throws>
                <see>
                    #getBoolean(int)                    
                </see>
            </javadoc>
            <method name="getBoolean" type="boolean" line="2499">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2503">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;byte&lt;/code&gt; value.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    the column value as a <code>byte</code> in the Java programming
                      language; if the value is SQL <code>NULL</code>, the result is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code><B>TINYINT</B>, SMALLINT, INTEGER,
                      BIGINT, REAL, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR,
                      VARCHAR</code> or <code>LONGVARCHAR</code> value. The
                      bold type designates the recommended return type                    
                </throws>
            </javadoc>
            <method name="getByte" type="byte" line="2519">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2523">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;short&lt;/code&gt; value.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>TINYINT, <b>SMALLINT</b>, INTEGER
                      BIGINT, REAL, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR,
                      VARCHAR</code> or <code>LONGVARCHAR</code> value. The bold SQL type
                      designates the recommended return type.                    
                </throws>
                <see>
                    #getShort(int)                    
                </see>
            </javadoc>
            <method name="getShort" type="short" line="2540">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2544">
                Retrieves the value stored in the designated column
                  of the current row as an &lt;code&gt;int&lt;/code&gt; value.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name
                      of a column in this rowset,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>TINYINT, SMALLINT, <b>INTEGER</b>, BIGINT, REAL
                      FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR, VARCHAR</code>
                      or <code>LONGVARCHAR</code> value. The bold SQL type designates the
                      recommended return type.                    
                </throws>
            </javadoc>
            <method name="getInt" type="int" line="2561">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2565">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;long&lt;/code&gt; value.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>TINYINT, SMALLINT, INTEGER
                      <b>BIGINT</b>, REAL, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR,
                      VARCHAR</code> or <code>LONGVARCHAR</code> value. The bold SQL type
                      designates the recommended return type.                    
                </throws>
                <see>
                    #getLong(int)                    
                </see>
            </javadoc>
            <method name="getLong" type="long" line="2582">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2586">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;float&lt;/code&gt; value.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>TINYINT, SMALLINT, INTEGER
                      BIGINT, <b>REAL</b>, FLOAT, DOUBLE, DECIMAL, NUMERIC, BIT, CHAR,
                      VARCHAR</code> or <code>LONGVARCHAR</code> value. The bold SQL type
                      designates the recommended return type.                    
                </throws>
                <see>
                    #getFloat(String)                    
                </see>
            </javadoc>
            <method name="getFloat" type="float" line="2603">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2607">
                Retrieves the value stored in the designated column
                  of the current row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object
                  as a &lt;code&gt;double&lt;/code&gt; value.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>0</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>TINYINT, SMALLINT, INTEGER
                      BIGINT, REAL, <b>FLOAT</b>, <b>DOUBLE</b>, DECIMAL, NUMERIC, BIT, CHAR,
                      VARCHAR</code> or <code>LONGVARCHAR</code> value. The bold SQL type
                      designates the recommended return types.                    
                </throws>
                <see>
                    #getDouble(int)                    
                </see>
            </javadoc>
            <method name="getDouble" type="double" line="2625">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2629">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point                    
                </param>
                <return>
                    a java.math.BugDecimal object with <code><i>scale</i></code>
                      number of digits to the right of the decimal point.                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>TINYINT, SMALLINT, INTEGER
                      BIGINT, REAL, FLOAT, DOUBLE, <b>DECIMAL</b>, <b>NUMERIC</b>, BIT CHAR,
                      VARCHAR</code> or <code>LONGVARCHAR</code> value. The bold SQL type
                      designates the recommended return type that this method is used to
                      retrieve.                    
                </throws>
                <deprecated>
                    Use the <code>getBigDecimal(String columnName)</code>
                      method instead                    
                </deprecated>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="2649">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="2653">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;byte&lt;/code&gt; array.
                  The bytes represent the raw values returned by the driver.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    the column value as a <code>byte</code> array in the Java programming
                      language; if the value is SQL <code>NULL</code>, the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code><b>BINARY</b>, <b>VARBINARY</b>
                      </code> or <code>LONGVARBINARY</code> values
                      The bold SQL type designates the recommended return type.                    
                </throws>
                <see>
                    #getBytes(int)                    
                </see>
            </javadoc>
            <method name="getBytes" type="byte[]" line="2670">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2674">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.sql.Date&lt;/code&gt; object.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>DATE</code> or
                      <code>TIMESTAMP</code> value                    
                </throws>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="2688">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2692">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.sql.Time&lt;/code&gt; object.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset's column names or the cursor is not on one of
                      this rowset's rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="2704">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2708">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset's column names or the cursor is not on one of
                      this rowset's rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="2720">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2724">
                Retrieves the value of the designated column in the current row of this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.io.InputStream&lt;/code&gt;
                  object.
                  A column value can be retrieved as a stream of ASCII characters
                  and then read in chunks from the stream. This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt; values. The
                  &lt;code&gt;SyncProvider&lt;/code&gt; will rely on the JDBC driver to do any necessary
                  conversion from the database format into ASCII format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must
                  be read prior to getting the value of any other column. The
                  next call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of one-byte ASCII characters.  If the value is SQL
                      <code>NULL</code>, the result is <code>null</code>.                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>CHAR, VARCHAR</code>, <code><b>LONGVARCHAR</b></code>
                      <code>BINARY, VARBINARY</code> or <code>LONGVARBINARY</code> value. The
                      bold SQL type designates the recommended return types that this method is
                      used to retrieve.                    
                </throws>
                <see>
                    #getAsciiStream(int)                    
                </see>
            </javadoc>
            <method name="getAsciiStream" type="java.io.InputStream" line="2754">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2759">
                A column value can be retrieved as a stream of Unicode characters
                  and then read in chunks from the stream.  This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt; values.
                  The JDBC driver will do any necessary conversion from the database
                  format into Unicode.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must
                  be read prior to getting the value of any other column. The
                  next call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of two-byte Unicode characters.  If the value is
                      SQL <code>NULL</code>, the result is <code>null</code>.                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset's column names or the cursor is not on one of
                      this rowset's rows or its insert row                    
                </throws>
                <deprecated>
                    use the method <code>getCharacterStream</code> instead                    
                </deprecated>
            </javadoc>
            <method name="getUnicodeStream" type="java.io.InputStream" line="2780">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2784">
                Retrieves the value of the designated column in the current row of this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.io.InputStream&lt;/code&gt;
                  object.
                  &lt;P&gt;
                  A column value can be retrieved as a stream of uninterpreted bytes
                  and then read in chunks from the stream.  This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARBINARY&lt;/code&gt; values.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a get method implicitly closes the stream. Also, a
                  stream may return &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;CachedRowSetImpl.available()&lt;/code&gt;
                  whether there is data available or not.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of uninterpreted bytes.  If the value is SQL
                      <code>NULL</code>, the result is <code>null</code>.                    
                </return>
                <throws>
                    SQLException if (1) the given column name is unknown,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>BINARY, VARBINARY</code> or <code><b>LONGVARBINARY</b></code>
                      The bold type indicates the SQL type that this method is recommened
                      to retrieve.                    
                </throws>
                <see>
                    #getBinaryStream(int)                    
                </see>
            </javadoc>
            <method name="getBinaryStream" type="java.io.InputStream" line="2813">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2820">
                The first warning reported by calls on this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object is returned. Subsequent &lt;code&gt;CachedRowSetImpl&lt;/code&gt; warnings will
                  be chained to this &lt;code&gt;SQLWarning&lt;/code&gt;.
                  &lt;P&gt;The warning chain is automatically cleared each time a new
                  row is read.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This warning chain only covers warnings caused
                  by &lt;code&gt;ResultSet&lt;/code&gt; methods.  Any warning caused by statement
                  methods (such as reading OUT parameters) will be chained on the
                  &lt;code&gt;Statement&lt;/code&gt; object.                
                <return>
                    the first SQLWarning or null                    
                </return>
            </javadoc>
            <method name="getWarnings" type="SQLWarning" line="2835"/>
            <javadoc line="2839">
                Clears all the warnings reporeted for the &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object. After a call to this method, the &lt;code&gt;getWarnings&lt;/code&gt; method
                  returns &lt;code&gt;null&lt;/code&gt; until a new warning is reported for this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.                
            </javadoc>
            <method name="clearWarnings" type="void" line="2845"/>
            <javadoc line="2849">
                Retrieves the name of the SQL cursor used by this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.
                  &lt;P&gt;In SQL, a result table is retrieved through a cursor that is
                  named. The current row of a &lt;code&gt;ResultSet&lt;/code&gt; can be updated or deleted
                  using a positioned update/delete statement that references the
                  cursor name. To ensure that the cursor has the proper isolation
                  level to support an update operation, the cursor&apos;s &lt;code&gt;SELECT&lt;/code&gt;
                  statement should be of the form &lt;code&gt;select for update&lt;/code&gt;.
                  If the &lt;code&gt;for update&lt;/code&gt; clause
                  is omitted, positioned updates may fail.
                  &lt;P&gt;JDBC supports this SQL feature by providing the name of the
                  SQL cursor used by a &lt;code&gt;ResultSet&lt;/code&gt; object. The current row
                  of a result set is also the current row of this SQL cursor.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; If positioned updates are not supported, an
                  &lt;code&gt;SQLException&lt;/code&gt; is thrown.                
                <return>
                    the SQL cursor name for this <code>CachedRowSetImpl</code> object's
                      cursor                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getCursorName" type="String" line="2873"/>
            <javadoc line="2877">
                Retrieves a &lt;code&gt;ResultSetMetaData&lt;/code&gt; object instance that
                  contains information about the &lt;code&gt;CachedRowSet&lt;/code&gt; object.
                  However, applications should cast the returned object to a
                  &lt;code&gt;RowSetMetaData&lt;/code&gt; interface implementation. In the
                  reference implementation, this cast can be done on the
                  &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; class.
                  &lt;P&gt;
                  For example:
                  &lt;pre&gt;
                  CachedRowSet crs = new CachedRowSetImpl();
                  RowSetMetaDataImpl metaData =
                  (RowSetMetaDataImpl)crs.getMetaData();
                  // Set the number of columns in the RowSet object for
                  // which this RowSetMetaDataImpl object was created to the
                  // given number.
                  metaData.setColumnCount(3);
                  crs.setMetaData(metaData);
                  &lt;/pre&gt;                
                <return>
                    the <code>ResultSetMetaData</code> object that describes this
                      <code>CachedRowSetImpl</code> object's columns                    
                </return>
                <throws>
                    SQLException if an error occurs in generating the RowSet
                      meta data; or if the <code>CachedRowSetImpl</code> is empty.                    
                </throws>
                <see>
                    javax.sql.RowSetMetaData                    
                </see>
            </javadoc>
            <method name="getMetaData" type="ResultSetMetaData" line="2903"/>
            <javadoc line="2908">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as an
                  &lt;code&gt;Object&lt;/code&gt; value.
                  &lt;P&gt;
                  The type of the &lt;code&gt;Object&lt;/code&gt; will be the default
                  Java object type corresponding to the column&apos;s SQL type,
                  following the mapping for built-in types specified in the JDBC 3.0
                  specification.
                  &lt;P&gt;
                  This method may also be used to read datatabase-specific
                  abstract data types.
                  &lt;P&gt;
                  This implementation of the method &lt;code&gt;getObject&lt;/code&gt; extends its
                  behavior so that it gets the attributes of an SQL structured type
                  as an array of &lt;code&gt;Object&lt;/code&gt; values.  This method also custom
                  maps SQL user-defined types to classes in the Java programming language.
                  When the specified column contains
                  a structured or distinct value, the behavior of this method is as
                  if it were a call to the method &lt;code&gt;getObject(columnIndex,
                  this.getStatement().getConnection().getTypeMap())&lt;/code&gt;.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    a <code>java.lang.Object</code> holding the column value;
                      if the value is SQL <code>NULL</code>, the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or there is a problem getting
                      the <code>Class</code> object for a custom mapping                    
                </throws>
                <see>
                    #getObject(String)                    
                </see>
            </javadoc>
            <method name="getObject" type="Object" line="2940">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="2945">
                    sanity check.                    
                </comment>
                <comment line="2947">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="2953">
                    check for SQL NULL                    
                </comment>
                <comment line="2961">
                    look up the class in the map                    
                </comment>
                <comment line="2964">
                    create new instance of the class                    
                </comment>
                <comment line="2975">
                    get the attributes from the struct                    
                </comment>
                <comment line="2977">
                    create the SQLInput &quot;stream&quot;                    
                </comment>
                <comment line="2979">
                    read the values...                    
                </comment>
                <declaration name="value" type="Object" line="2941"/>
                <declaration name="map" type="Map&lt;String,Class&lt;?&gt;&gt;" line="2942"/>
                <scope line="2953"/>
                <scope line="2957">
                    <declaration name="s" type="Struct" line="2958"/>
                    <declaration name="c" type="Class" line="2961"/>
                    <scope line="2962">
                        <declaration name="obj" type="SQLData" line="2964"/>
                        <scope line="2965"/>
                        <scope line="2967"/>
                        <scope line="2970"/>
                        <declaration name="attribs" type="Object" line="2975"/>
                        <declaration name="sqlInput" type="SQLInputImpl" line="2977"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2986">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as an
                  &lt;code&gt;Object&lt;/code&gt; value.
                  &lt;P&gt;
                  The type of the &lt;code&gt;Object&lt;/code&gt; will be the default
                  Java object type corresponding to the column&apos;s SQL type,
                  following the mapping for built-in types specified in the JDBC 3.0
                  specification.
                  &lt;P&gt;
                  This method may also be used to read datatabase-specific
                  abstract data types.
                  &lt;P&gt;
                  This implementation of the method &lt;code&gt;getObject&lt;/code&gt; extends its
                  behavior so that it gets the attributes of an SQL structured type
                  as an array of &lt;code&gt;Object&lt;/code&gt; values.  This method also custom
                  maps SQL user-defined types to classes
                  in the Java programming language. When the specified column contains
                  a structured or distinct value, the behavior of this method is as
                  if it were a call to the method &lt;code&gt;getObject(columnIndex,
                  this.getStatement().getConnection().getTypeMap())&lt;/code&gt;.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <return>
                    a <code>java.lang.Object</code> holding the column value;
                      if the value is SQL <code>NULL</code>, the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name does not match one of
                      this rowset's column names, (2) the cursor is not
                      on a valid row, or (3) there is a problem getting
                      the <code>Class</code> object for a custom mapping                    
                </throws>
                <see>
                    #getObject(int)                    
                </see>
            </javadoc>
            <method name="getObject" type="Object" line="3018">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="3024">
                Maps the given column name for one of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object&apos;s columns to its column number.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <return>
                    the column index of the given column name                    
                </return>
                <throws>
                    SQLException if the given column name does not match one
                      of this rowset's column names                    
                </throws>
            </javadoc>
            <method name="findColumn" type="int" line="3034">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="3045">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must
                  be read prior to getting the value of any other column. The
                  next call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    a Java character stream that delivers the database column value
                      as a stream of two-byte unicode characters in a
                      <code>java.io.Reader</code> object.  If the value is
                      SQL <code>NULL</code>, the result is <code>null</code>.                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>CHAR, VARCHAR, <b>LONGVARCHAR</b>, BINARY, VARBINARY</code> or
                      <code>LONGVARBINARY</code> value.
                      The bold SQL type designates the recommended return type.                    
                </throws>
                <see>
                    #getCharacterStream(String)                    
                </see>
            </javadoc>
            <method name="getCharacterStream" type="java.io.Reader" line="3068">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="3071">
                    sanity check.                    
                </comment>
                <comment line="3073">
                    make sure the cursor is on a valid row                    
                </comment>
                <scope line="3075">
                    <declaration name="value" type="Object" line="3076"/>
                    <scope line="3077"/>
                </scope>
                <scope line="3083">
                    <declaration name="value" type="Object" line="3084"/>
                    <scope line="3085"/>
                </scope>
                <scope line="3090"/>
            </method>
            <javadoc line="3097">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must
                  be read prior to getting the value of any other column. The
                  next call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream.                
                <param>
                    columnName a <code>String</code> object giving the SQL name of
                      a column in this <code>CachedRowSetImpl</code> object                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of two-byte Unicode characters.  If the value is
                      SQL <code>NULL</code>, the result is <code>null</code>.                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>CHAR, VARCHAR, <b>LONGVARCHAR</b>,
                      BINARY, VARYBINARY</code> or <code>LONGVARBINARY</code> value.
                      The bold SQL type designates the recommended return type.                    
                </throws>
            </javadoc>
            <method name="getCharacterStream" type="java.io.Reader" line="3117">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="3121">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    a <code>java.math.BigDecimal</code> value with full precision;
                      if the value is SQL <code>NULL</code>, the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>TINYINT, SMALLINT, INTEGER, BIGINT, REAL,
                      FLOAT, DOUBLE, <b>DECIMAL</b>, <b>NUMERIC</b>, BIT, CHAR, VARCHAR</code>
                      or <code>LONGVARCHAR</code> value. The bold SQL type designates the
                      recommended return types that this method is used to retrieve.                    
                </throws>
                <see>
                    #getBigDecimal(String)                    
                </see>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="3140">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="3144">
                    sanity check.                    
                </comment>
                <comment line="3146">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="3152">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="Object" line="3141"/>
                <scope line="3152"/>
                <scope line="3156"/>
                <scope line="3158"/>
            </method>
            <javadoc line="3164">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <return>
                    a <code>java.math.BigDecimal</code> value with full precision;
                      if the value is SQL <code>NULL</code>, the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>TINYINT, SMALLINT, INTEGER
                      BIGINT, REAL, FLOAT, DOUBLE, <b>DECIMAL</b>, <b>NUMERIC</b>, BIT CHAR,
                      VARCHAR</code> or <code>LONGVARCHAR</code> value. The bold SQL type
                      designates the recommended return type that this method is used to
                      retrieve                    
                </throws>
                <see>
                    #getBigDecimal(int)                    
                </see>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="3183">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="3191">
                Returns the number of rows in this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.                
                <return>
                    number of rows in the rowset                    
                </return>
            </javadoc>
            <method name="size" type="int" line="3196"/>
            <javadoc line="3200">
                Indicates whether the cursor is before the first row in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.                
                <return>
                    <code>true</code> if the cursor is before the first row;
                      <code>false</code> otherwise or if the rowset contains no rows                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="isBeforeFirst" type="boolean" line="3208">
                <scope line="3209"/>
                <scope line="3211"/>
            </method>
            <javadoc line="3216">
                Indicates whether the cursor is after the last row in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.                
                <return>
                    <code>true</code> if the cursor is after the last row;
                      <code>false</code> otherwise or if the rowset contains no rows                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="isAfterLast" type="boolean" line="3224">
                <scope line="3225"/>
                <scope line="3227"/>
            </method>
            <javadoc line="3232">
                Indicates whether the cursor is on the first row in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.                
                <return>
                    <code>true</code> if the cursor is on the first row;
                      <code>false</code> otherwise or if the rowset contains no rows                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="isFirst" type="boolean" line="3240">
                <comment line="3242">
                    this becomes nasty because of deletes.                    
                </comment>
                <declaration name="saveCursorPos" type="int" line="3242"/>
                <declaration name="saveAbsoluteCursorPos" type="int" line="3243"/>
                <scope line="3245"/>
                <scope line="3247"/>
            </method>
            <javadoc line="3254">
                Indicates whether the cursor is on the last row in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.
                  &lt;P&gt;
                  Note: Calling the method &lt;code&gt;isLast&lt;/code&gt; may be expensive
                  because the JDBC driver might need to fetch ahead one row in order
                  to determine whether the current row is the last row in this rowset.                
                <return>
                    <code>true</code> if the cursor is on the last row;
                      <code>false</code> otherwise or if this rowset contains no rows                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="isLast" type="boolean" line="3266">
                <declaration name="saveCursorPos" type="int" line="3267"/>
                <declaration name="saveAbsoluteCursorPos" type="int" line="3268"/>
                <declaration name="saveShowDeleted" type="boolean" line="3269"/>
                <scope line="3272"/>
                <scope line="3275"/>
            </method>
            <javadoc line="3283">
                Moves this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s cursor to the front of
                  the rowset, just before the first row. This method has no effect if
                  this rowset contains no rows.                
                <throws>
                    SQLException if an error occurs or the type of this rowset
                      is <code>ResultSet.TYPE_FORWARD_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="beforeFirst" type="void" line="3291">
                <scope line="3292"/>
            </method>
            <javadoc line="3300">
                Moves this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s cursor to the end of
                  the rowset, just after the last row. This method has no effect if
                  this rowset contains no rows.                
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="afterLast" type="void" line="3307">
                <scope line="3308"/>
            </method>
            <javadoc line="3315">
                Moves this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s cursor to the first row
                  and returns &lt;code&gt;true&lt;/code&gt; if the operation was successful.  This
                  method also notifies registered listeners that the cursor has moved.                
                <return>
                    <code>true</code> if the cursor is on a valid row;
                      <code>false</code> otherwise or if there are no rows in this
                      <code>CachedRowSetImpl</code> object                    
                </return>
                <throws>
                    SQLException if the type of this rowset
                      is <code>ResultSet.TYPE_FORWARD_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="first" type="boolean" line="3326">
                <comment line="3332">
                    move and notify                    
                </comment>
                <scope line="3327"/>
                <declaration name="ret" type="boolean" line="3332"/>
            </method>
            <javadoc line="3338">
                Moves this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s cursor to the first
                  row and returns &lt;code&gt;true&lt;/code&gt; if the operation is successful.
                  &lt;P&gt;
                  This method is called internally by the methods &lt;code&gt;first&lt;/code&gt;,
                  &lt;code&gt;isFirst&lt;/code&gt;, and &lt;code&gt;absolute&lt;/code&gt;.
                  It in turn calls the method &lt;code&gt;internalNext&lt;/code&gt; in order to
                  handle the case where the first row is a deleted row that is not visible.
                  &lt;p&gt;
                  This is a implementation only method and is not required as a standard
                  implementation of the &lt;code&gt;CachedRowSet&lt;/code&gt; interface.                
                <return>
                    <code>true</code> if the cursor moved to the first row;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="internalFirst" type="boolean" line="3354">
                <declaration name="ret" type="boolean" line="3355"/>
                <scope line="3357">
                    <scope line="3359"/>
                    <scope line="3361"/>
                </scope>
            </method>
            <javadoc line="3374">
                Moves this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s cursor to the last row
                  and returns &lt;code&gt;true&lt;/code&gt; if the operation was successful.  This
                  method also notifies registered listeners that the cursor has moved.                
                <return>
                    <code>true</code> if the cursor is on a valid row;
                      <code>false</code> otherwise or if there are no rows in this
                      <code>CachedRowSetImpl</code> object                    
                </return>
                <throws>
                    SQLException if the type of this rowset
                      is <code>ResultSet.TYPE_FORWARD_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="last" type="boolean" line="3385">
                <comment line="3391">
                    move and notify                    
                </comment>
                <scope line="3386"/>
                <declaration name="ret" type="boolean" line="3391"/>
            </method>
            <javadoc line="3397">
                Moves this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s cursor to the last
                  row and returns &lt;code&gt;true&lt;/code&gt; if the operation is successful.
                  &lt;P&gt;
                  This method is called internally by the method &lt;code&gt;last&lt;/code&gt;
                  when rows have been deleted and the deletions are not visible.
                  The method &lt;code&gt;internalLast&lt;/code&gt; handles the case where the
                  last row is a deleted row that is not visible by in turn calling
                  the method &lt;code&gt;internalPrevious&lt;/code&gt;.
                  &lt;p&gt;
                  This is a implementation only method and is not required as a standard
                  implementation of the &lt;code&gt;CachedRowSet&lt;/code&gt; interface.                
                <return>
                    <code>true</code> if the cursor moved to the last row;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="internalLast" type="boolean" line="3414">
                <declaration name="ret" type="boolean" line="3415"/>
                <scope line="3417">
                    <scope line="3419"/>
                    <scope line="3421"/>
                </scope>
            </method>
            <javadoc line="3432">
                Returns the number of the current row in this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object. The first row is number 1, the second number 2, and so on.                
                <return>
                    the number of the current row;  <code>0</code> if there is no
                      current row                    
                </return>
                <throws>
                    SQLException if an error occurs; or if the <code>CacheRowSetImpl</code>
                      is empty                    
                </throws>
            </javadoc>
            <method name="getRow" type="int" line="3441">
                <comment line="3443">
                    are we on a valid row? Valid rows are between first and last                    
                </comment>
                <scope line="3446"/>
                <scope line="3448"/>
                <scope line="3450"/>
            </method>
            <javadoc line="3455">
                Moves this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s cursor to the row number
                  specified.
                  &lt;p&gt;If the number is positive, the cursor moves to an absolute row with
                  respect to the beginning of the rowset.  The first row is row 1, the second
                  is row 2, and so on.  For example, the following command, in which
                  &lt;code&gt;crs&lt;/code&gt; is a &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object, moves the cursor
                  to the fourth row, starting from the beginning of the rowset.
                  &lt;PRE&gt;&lt;code&gt;
                  crs.absolute(4);
                  &lt;/code&gt; &lt;/PRE&gt;
                  &lt;P&gt;
                  If the number is negative, the cursor moves to an absolute row position
                  with respect to the end of the rowset.  For example, calling
                  &lt;code&gt;absolute(-1)&lt;/code&gt; positions the cursor on the last row,
                  &lt;code&gt;absolute(-2)&lt;/code&gt; moves it on the next-to-last row, and so on.
                  If the &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object &lt;code&gt;crs&lt;/code&gt; has five rows,
                  the following command moves the cursor to the fourth-to-last row, which
                  in the case of a  rowset with five rows, is also the second row, counting
                  from the beginning.
                  &lt;PRE&gt;&lt;code&gt;
                  crs.absolute(-4);
                  &lt;/code&gt; &lt;/PRE&gt;
                  If the number specified is larger than the number of rows, the cursor
                  will move to the position after the last row. If the number specified
                  would move the cursor one or more rows before the first row, the cursor
                  moves to the position before the first row.
                  &lt;P&gt;
                  Note: Calling &lt;code&gt;absolute(1)&lt;/code&gt; is the same as calling the
                  method &lt;code&gt;first()&lt;/code&gt;.  Calling &lt;code&gt;absolute(-1)&lt;/code&gt; is the
                  same as calling &lt;code&gt;last()&lt;/code&gt;.                
                <param>
                    row a positive number to indicate the row, starting row numbering from
                      the first row, which is <code>1</code>; a negative number to indicate
                      the row, starting row numbering from the last row, which is
                      <code>-1</code>; it must not be <code>0</code>                    
                </param>
                <return>
                    <code>true</code> if the cursor is on the rowset; <code>false</code>
                      otherwise                    
                </return>
                <throws>
                    SQLException if the given cursor position is <code>0</code> or the
                      type of this rowset is <code>ResultSet.TYPE_FORWARD_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="absolute" type="boolean" line="3502">
                <params>
                    <param name="row" type="int"/>
                </params>
                <comment line="3508">
                    we are moving foward                    
                </comment>
                <comment line="3510">
                    fell off the end                    
                </comment>
                <comment line="3517">
                    we are moving backward                    
                </comment>
                <comment line="3519">
                    fell off the front                    
                </comment>
                <comment line="3528">
                    Now move towards the absolute row that we&apos;re looking for                    
                </comment>
                <scope line="3503"/>
                <scope line="3507">
                    <scope line="3508"/>
                    <scope line="3512"/>
                </scope>
                <scope line="3516">
                    <scope line="3517"/>
                    <scope line="3521"/>
                </scope>
                <scope line="3528">
                    <scope line="3529"/>
                    <scope line="3533"/>
                </scope>
                <scope line="3541"/>
                <scope line="3543"/>
            </method>
            <javadoc line="3548">
                Moves the cursor the specified number of rows from the current
                  position, with a positive number moving it forward and a
                  negative number moving it backward.
                  &lt;P&gt;
                  If the number is positive, the cursor moves the specified number of
                  rows toward the end of the rowset, starting at the current row.
                  For example, the following command, in which
                  &lt;code&gt;crs&lt;/code&gt; is a &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with 100 rows,
                  moves the cursor forward four rows from the current row.  If the
                  current row is 50, the cursor would move to row 54.
                  &lt;PRE&gt;&lt;code&gt;
                  crs.relative(4);
                  &lt;/code&gt; &lt;/PRE&gt;
                  &lt;P&gt;
                  If the number is negative, the cursor moves back toward the beginning
                  the specified number of rows, starting at the current row.
                  For example, calling the method
                  &lt;code&gt;absolute(-1)&lt;/code&gt; positions the cursor on the last row,
                  &lt;code&gt;absolute(-2)&lt;/code&gt; moves it on the next-to-last row, and so on.
                  If the &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object &lt;code&gt;crs&lt;/code&gt; has five rows,
                  the following command moves the cursor to the fourth-to-last row, which
                  in the case of a  rowset with five rows, is also the second row
                  from the beginning.
                  &lt;PRE&gt;&lt;code&gt;
                  crs.absolute(-4);
                  &lt;/code&gt; &lt;/PRE&gt;
                  If the number specified is larger than the number of rows, the cursor
                  will move to the position after the last row. If the number specified
                  would move the cursor one or more rows before the first row, the cursor
                  moves to the position before the first row. In both cases, this method
                  throws an &lt;code&gt;SQLException&lt;/code&gt;.
                  &lt;P&gt;
                  Note: Calling &lt;code&gt;absolute(1)&lt;/code&gt; is the same as calling the
                  method &lt;code&gt;first()&lt;/code&gt;.  Calling &lt;code&gt;absolute(-1)&lt;/code&gt; is the
                  same as calling &lt;code&gt;last()&lt;/code&gt;.  Calling &lt;code&gt;relative(0)&lt;/code&gt;
                  is valid, but it does not change the cursor position.                
                <param>
                    rows an <code>int</code> indicating the number of rows to move
                      the cursor, starting at the current row; a positive number
                      moves the cursor forward; a negative number moves the cursor
                      backward; must not move the cursor past the valid
                      rows                    
                </param>
                <return>
                    <code>true</code> if the cursor is on a row in this
                      <code>CachedRowSetImpl</code> object; <code>false</code>
                      otherwise                    
                </return>
                <throws>
                    SQLException if there are no rows in this rowset, the cursor is
                      positioned either before the first row or after the last row, or
                      the rowset is type <code>ResultSet.TYPE_FORWARD_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="relative" type="boolean" line="3603">
                <params>
                    <param name="rows" type="int"/>
                </params>
                <comment line="3614">
                    we are moving forward                    
                </comment>
                <comment line="3616">
                    fell off the end                    
                </comment>
                <comment line="3624">
                    we are moving backward                    
                </comment>
                <comment line="3626">
                    fell off the front                    
                </comment>
                <scope line="3605"/>
                <scope line="3609"/>
                <scope line="3613">
                    <scope line="3614"/>
                    <scope line="3617">
                        <scope line="3618"/>
                    </scope>
                </scope>
                <scope line="3623">
                    <scope line="3624"/>
                    <scope line="3627">
                        <scope line="3628"/>
                    </scope>
                </scope>
                <scope line="3636"/>
                <scope line="3638"/>
            </method>
            <javadoc line="3643">
                Moves this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s cursor to the
                  previous row and returns &lt;code&gt;true&lt;/code&gt; if the cursor is on
                  a valid row or &lt;code&gt;false&lt;/code&gt; if it is not.
                  This method also notifies all listeners registered with this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object that its cursor has moved.
                  &lt;P&gt;
                  Note: calling the method &lt;code&gt;previous()&lt;/code&gt; is not the same
                  as calling the method &lt;code&gt;relative(-1)&lt;/code&gt;.  This is true
                  because it is possible to call &lt;code&gt;previous()&lt;/code&gt; from the insert
                  row, from after the last row, or from the current row, whereas
                  &lt;code&gt;relative&lt;/code&gt; may only be called from the current row.
                  &lt;P&gt;
                  The method &lt;code&gt;previous&lt;/code&gt; may used in a &lt;code&gt;while&lt;/code&gt;
                  loop to iterate through a rowset starting after the last row
                  and moving toward the beginning. The loop ends when &lt;code&gt;previous&lt;/code&gt;
                  returns &lt;code&gt;false&lt;/code&gt;, meaning that there are no more rows.
                  For example, the following code fragment retrieves all the data in
                  the &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object &lt;code&gt;crs&lt;/code&gt;, which has
                  three columns.  Note that the cursor must initially be positioned
                  after the last row so that the first call to the method
                  &lt;code&gt;previous&lt;/code&gt; places the cursor on the last line.
                  &lt;PRE&gt; &lt;code&gt;
                  crs.afterLast();
                  while (previous()) {
                  String name = crs.getString(1);
                  int age = crs.getInt(2);
                  short ssn = crs.getShort(3);
                  System.out.println(name + &quot;   &quot; + age + &quot;   &quot; + ssn);
                  }
                  &lt;/code&gt; &lt;/PRE&gt;
                  This method throws an &lt;code&gt;SQLException&lt;/code&gt; if the cursor is not
                  on a row in the rowset, before the first row, or after the last row.                
                <return>
                    <code>true</code> if the cursor is on a valid row;
                      <code>false</code> if it is before the first row or after the
                      last row                    
                </return>
                <throws>
                    SQLException if the cursor is not on a valid position or the
                      type of this rowset is <code>ResultSet.TYPE_FORWARD_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="previous" type="boolean" line="3685">
                <comment line="3690">
                    make sure things look sane. The cursor must be
                     positioned in the rowset or before first (0) or
                     after last (numRows + 1)                    
                </comment>
                <comment line="3698">
                    move and notify                    
                </comment>
                <scope line="3686"/>
                <scope line="3694"/>
                <declaration name="ret" type="boolean" line="3698"/>
            </method>
            <javadoc line="3704">
                Moves the cursor to the previous row in this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object, skipping past deleted rows that are not visible; returns
                  &lt;code&gt;true&lt;/code&gt; if the cursor is on a row in this rowset and
                  &lt;code&gt;false&lt;/code&gt; when the cursor goes before the first row.
                  &lt;P&gt;
                  This method is called internally by the method &lt;code&gt;previous&lt;/code&gt;.
                  &lt;P&gt;
                  This is a implementation only method and is not required as a standard
                  implementation of the &lt;code&gt;CachedRowSet&lt;/code&gt; interface.                
                <return>
                    <code>true</code> if the cursor is on a row in this rowset;
                      <code>false</code> when the cursor reaches the position before
                      the first row                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="internalPrevious" type="boolean" line="3720">
                <comment line="3729">
                    decrement to before first                    
                </comment>
                <comment line="3736">
                    Each call to internalPrevious may move the cursor
                     over multiple rows, the absolute postion moves one one row                    
                </comment>
                <declaration name="ret" type="boolean" line="3721"/>
                <scope line="3723">
                    <scope line="3724"/>
                    <scope line="3727"/>
                </scope>
            </method>
            <javadoc line="3752">
                Indicates whether the current row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object has been updated.  The value returned
                  depends on whether this rowset can detect updates: &lt;code&gt;false&lt;/code&gt;
                  will always be returned if it does not detect updates.                
                <return>
                    <code>true</code> if the row has been visibly updated
                      by the owner or another and updates are detected;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if the cursor is on the insert row or not
                      not on a valid row                    
                </throws>
                <see>
                    DatabaseMetaData#updatesAreDetected                    
                </see>
            </javadoc>
            <method name="rowUpdated" type="boolean" line="3766">
                <comment line="3768">
                    make sure the cursor is on a valid row                    
                </comment>
                <scope line="3769"/>
            </method>
            <javadoc line="3775">
                Indicates whether the designated column of the current row of
                  this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object has been updated. The
                  value returned depends on whether this rowset can detcted updates:
                  &lt;code&gt;false&lt;/code&gt; will always be returned if it does not detect updates.                
                <param>
                    idx the index identifier of the column that may be have been updated.                    
                </param>
                <return>
                    <code>true</code> is the designated column has been updated
                      and the rowset detects updates; <code>false</code> if the rowset has not
                      been updated or the rowset does not detect updates                    
                </return>
                <throws>
                    SQLException if the cursor is on the insert row or not
                      on a valid row                    
                </throws>
                <see>
                    DatabaseMetaData#updatesAreDetected                    
                </see>
            </javadoc>
            <method name="columnUpdated" type="boolean" line="3789">
                <params>
                    <param name="idx" type="int"/>
                </params>
                <comment line="3791">
                    make sure the cursor is on a valid row                    
                </comment>
                <scope line="3792"/>
            </method>
            <javadoc line="3798">
                Indicates whether the designated column of the current row of
                  this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object has been updated. The
                  value returned depends on whether this rowset can detcted updates:
                  &lt;code&gt;false&lt;/code&gt; will always be returned if it does not detect updates.                
                <param>
                    columnName the <code>String</code> column name column that may be have
                      been updated.                    
                </param>
                <return>
                    <code>true</code> is the designated column has been updated
                      and the rowset detects updates; <code>false</code> if the rowset has not
                      been updated or the rowset does not detect updates                    
                </return>
                <throws>
                    SQLException if the cursor is on the insert row or not
                      on a valid row                    
                </throws>
                <see>
                    DatabaseMetaData#updatesAreDetected                    
                </see>
            </javadoc>
            <method name="columnUpdated" type="boolean" line="3813">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="3817">
                Indicates whether the current row has been inserted.  The value returned
                  depends on whether or not the rowset can detect visible inserts.                
                <return>
                    <code>true</code> if a row has been inserted and inserts are detected;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if the cursor is on the insert row or not
                      not on a valid row                    
                </throws>
                <see>
                    DatabaseMetaData#insertsAreDetected                    
                </see>
            </javadoc>
            <method name="rowInserted" type="boolean" line="3828">
                <comment line="3830">
                    make sure the cursor is on a valid row                    
                </comment>
                <scope line="3831"/>
            </method>
            <javadoc line="3837">
                Indicates whether the current row has been deleted.  A deleted row
                  may leave a visible &quot;hole&quot; in a rowset.  This method can be used to
                  detect such holes if the rowset can detect deletions. This method
                  will always return &lt;code&gt;false&lt;/code&gt; if this rowset cannot detect
                  deletions.                
                <return>
                    <code>true</code> if (1)the current row is blank, indicating that
                      the row has been deleted, and (2)deletions are detected;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if the cursor is on a valid row in this rowset                    
                </throws>
                <see>
                    DatabaseMetaData#deletesAreDetected                    
                </see>
            </javadoc>
            <method name="rowDeleted" type="boolean" line="3850">
                <comment line="3852">
                    make sure the cursor is on a valid row                    
                </comment>
                <scope line="3855"/>
            </method>
            <javadoc line="3862">
                Indicates whether the given SQL data type is a numberic type.                
                <param>
                    type one of the constants from <code>java.sql.Types</code>                    
                </param>
                <return>
                    <code>true</code> if the given type is <code>NUMERIC</code>,'
                      <code>DECIMAL</code>, <code>BIT</code>, <code>TINYINT</code>,
                      <code>SMALLINT</code>, <code>INTEGER</code>, <code>BIGINT</code>,
                      <code>REAL</code>, <code>DOUBLE</code>, or <code>FLOAT</code>;
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="isNumeric" type="boolean" line="3872">
                <params>
                    <param name="type" type="int"/>
                </params>
            </method>
            <javadoc line="3890">
                Indicates whether the given SQL data type is a string type.                
                <param>
                    type one of the constants from <code>java.sql.Types</code>                    
                </param>
                <return>
                    <code>true</code> if the given type is <code>CHAR</code>,'
                      <code>VARCHAR</code>, or <code>LONGVARCHAR</code>;
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="isString" type="boolean" line="3898">
                <params>
                    <param name="type" type="int"/>
                </params>
            </method>
            <javadoc line="3909">
                Indicates whether the given SQL data type is a binary type.                
                <param>
                    type one of the constants from <code>java.sql.Types</code>                    
                </param>
                <return>
                    <code>true</code> if the given type is <code>BINARY</code>,'
                      <code>VARBINARY</code>, or <code>LONGVARBINARY</code>;
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="isBinary" type="boolean" line="3917">
                <params>
                    <param name="type" type="int"/>
                </params>
            </method>
            <javadoc line="3928">
                Indicates whether the given SQL data type is a temporal type.
                  This method is called internally by the conversion methods
                  &lt;code&gt;convertNumeric&lt;/code&gt; and &lt;code&gt;convertTemporal&lt;/code&gt;.                
                <param>
                    type one of the constants from <code>java.sql.Types</code>                    
                </param>
                <return>
                    <code>true</code> if the given type is <code>DATE</code>,
                      <code>TIME</code>, or <code>TIMESTAMP</code>;
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="isTemporal" type="boolean" line="3938">
                <params>
                    <param name="type" type="int"/>
                </params>
            </method>
            <javadoc line="3949">
                Indicates whether the given SQL data type is a boolean type.
                  This method is called internally by the conversion methods
                  &lt;code&gt;convertNumeric&lt;/code&gt; and &lt;code&gt;convertBoolean&lt;/code&gt;.                
                <param>
                    type one of the constants from <code>java.sql.Types</code>                    
                </param>
                <return>
                    <code>true</code> if the given type is <code>BIT</code>,
                      , or <code>BOOLEAN</code>;
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="isBoolean" type="boolean" line="3959">
                <params>
                    <param name="type" type="int"/>
                </params>
            </method>
            <javadoc line="3970">
                Converts the given &lt;code&gt;Object&lt;/code&gt; in the Java programming language
                  to the standard mapping for the specified SQL target data type.
                  The conversion must be to a string or numeric type, but there are no
                  restrictions on the type to be converted.  If the source type and target
                  type are the same, the given object is simply returned.                
                <param>
                    srcObj the <code>Object</code> in the Java programming language
                      that is to be converted to the target type                    
                </param>
                <param>
                    srcType the data type that is the standard mapping in SQL of the
                      object to be converted; must be one of the constants in
                      <code>java.sql.Types</code>                    
                </param>
                <param>
                    trgType the SQL data type to which to convert the given object;
                      must be one of the following constants in
                      <code>java.sql.Types</code>: <code>NUMERIC</code>,
                      <code>DECIMAL</code>, <code>BIT</code>, <code>TINYINT</code>,
                      <code>SMALLINT</code>, <code>INTEGER</code>, <code>BIGINT</code>,
                      <code>REAL</code>, <code>DOUBLE</code>, <code>FLOAT</code>,
                      <code>VARCHAR</code>, <code>LONGVARCHAR</code>, or <code>CHAR</code>                    
                </param>
                <return>
                    an <code>Object</code> value.that is
                      the standard object mapping for the target SQL type                    
                </return>
                <throws>
                    SQLException if the given target type is not one of the string or
                      numeric types in <code>java.sql.Types</code>                    
                </throws>
            </javadoc>
            <method name="convertNumeric" type="Object" line="3995">
                <params>
                    <param name="srcObj" type="Object"/>
                    <param name="srcType" type="int"/>
                    <param name="trgType" type="int"/>
                </params>
                <scope line="3997"/>
                <scope line="4001"/>
                <scope line="4005">
                    <declaration name="i" type="Integer" line="4008"/>
                </scope>
                <scope line="4035"/>
            </method>
            <javadoc line="4040">
                Converts the given &lt;code&gt;Object&lt;/code&gt; in the Java programming language
                  to the standard object mapping for the specified SQL target data type.
                  The conversion must be to a string or temporal type, and there are also
                  restrictions on the type to be converted.
                  &lt;P&gt;
                  &lt;TABLE ALIGN=&quot;CENTER&quot; BORDER CELLPADDING=10 BORDERCOLOR=&quot;#0000FF&quot;
                  &lt;CAPTION ALIGN=&quot;CENTER&quot;&gt;&lt;B&gt;Parameters and Return Values&lt;/B&gt;&lt;/CAPTION&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;B&gt;Source SQL Type&lt;/B&gt;
                  &lt;TD&gt;&lt;B&gt;Target SQL Type&lt;/B&gt;
                  &lt;TD&gt;&lt;B&gt;Object Returned&lt;/B&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;code&gt;TIMESTAMP&lt;/code&gt;
                  &lt;TD&gt;&lt;code&gt;DATE&lt;/code&gt;
                  &lt;TD&gt;&lt;code&gt;java.sql.Date&lt;/code&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;code&gt;TIMESTAMP&lt;/code&gt;
                  &lt;TD&gt;&lt;code&gt;TIME&lt;/code&gt;
                  &lt;TD&gt;&lt;code&gt;java.sql.Time&lt;/code&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;code&gt;TIME&lt;/code&gt;
                  &lt;TD&gt;&lt;code&gt;TIMESTAMP&lt;/code&gt;
                  &lt;TD&gt;&lt;code&gt;java.sql.Timestamp&lt;/code&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;code&gt;DATE&lt;/code&gt;, &lt;code&gt;TIME&lt;/code&gt;, or &lt;code&gt;TIMESTAMP&lt;/code&gt;
                  &lt;TD&gt;&lt;code&gt;CHAR&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt;, or &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  &lt;TD&gt;&lt;code&gt;java.lang.String&lt;/code&gt;
                  &lt;/TR&gt;
                  &lt;/TABLE&gt;
                  &lt;P&gt;
                  If the source type and target type are the same,
                  the given object is simply returned.                
                <param>
                    srcObj the <code>Object</code> in the Java programming language
                      that is to be converted to the target type                    
                </param>
                <param>
                    srcType the data type that is the standard mapping in SQL of the
                      object to be converted; must be one of the constants in
                      <code>java.sql.Types</code>                    
                </param>
                <param>
                    trgType the SQL data type to which to convert the given object;
                      must be one of the following constants in
                      <code>java.sql.Types</code>: <code>DATE</code>,
                      <code>TIME</code>, <code>TIMESTAMP</code>, <code>CHAR</code>,
                      <code>VARCHAR</code>, or <code>LONGVARCHAR</code>                    
                </param>
                <return>
                    an <code>Object</code> value.that is
                      the standard object mapping for the target SQL type                    
                </return>
                <throws>
                    SQLException if the given target type is not one of the string or
                      temporal types in <code>java.sql.Types</code>                    
                </throws>
            </javadoc>
            <method name="convertTemporal" type="Object" line="4094">
                <params>
                    <param name="srcObj" type="Object"/>
                    <param name="srcType" type="int"/>
                    <param name="trgType" type="int"/>
                </params>
                <scope line="4096"/>
                <scope line="4101"/>
                <scope line="4105">
                    <scope line="4108"/>
                    <scope line="4110"/>
                    <scope line="4114"/>
                    <scope line="4116"/>
                    <scope line="4120"/>
                    <scope line="4122"/>
                </scope>
                <scope line="4132"/>
            </method>
            <javadoc line="4138">
                Converts the given &lt;code&gt;Object&lt;/code&gt; in the Java programming language
                  to the standard mapping for the specified SQL target data type.
                  The conversion must be to a string or numeric type, but there are no
                  restrictions on the type to be converted.  If the source type and target
                  type are the same, the given object is simply returned.                
                <param>
                    srcObj the <code>Object</code> in the Java programming language
                      that is to be converted to the target type                    
                </param>
                <param>
                    srcType the data type that is the standard mapping in SQL of the
                      object to be converted; must be one of the constants in
                      <code>java.sql.Types</code>                    
                </param>
                <param>
                    trgType the SQL data type to which to convert the given object;
                      must be one of the following constants in
                      <code>java.sql.Types</code>: <code>BIT</code>,
                      or <code>BOOLEAN</code>                    
                </param>
                <return>
                    an <code>Object</code> value.that is
                      the standard object mapping for the target SQL type                    
                </return>
                <throws>
                    SQLException if the given target type is not one of the Boolean
                      types in <code>java.sql.Types</code>                    
                </throws>
            </javadoc>
            <method name="convertBoolean" type="Object" line="4160">
                <params>
                    <param name="srcObj" type="Object"/>
                    <param name="srcType" type="int"/>
                    <param name="trgType" type="int"/>
                </params>
                <scope line="4162"/>
                <scope line="4167"/>
                <scope line="4172">
                    <declaration name="i" type="Integer" line="4175"/>
                </scope>
                <scope line="4184"/>
            </method>
            <javadoc line="4189">
                Sets the designated nullable column in the current row or the
                  insert row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with
                  &lt;code&gt;null&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset; however, another method must be called to complete
                  the update process. If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to mark the row as updated
                  and to notify listeners that the row has changed.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called to insert the new row into this rowset and to notify
                  listeners that a row has changed.
                  &lt;P&gt;
                  In order to propagate updates in this rowset to the underlying
                  data source, an application must call the method {@link #acceptChanges}after it calls either &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;insertRow&lt;/code&gt;.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateNull" type="void" line="4215">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="4217">
                    sanity check.                    
                </comment>
                <comment line="4219">
                    make sure the cursor is on a valid row                    
                </comment>
                <declaration name="row" type="BaseRow" line="4221"/>
            </method>
            <javadoc line="4226">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;boolean&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateBoolean" type="void" line="4249">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="boolean"/>
                </params>
                <comment line="4251">
                    sanity check.                    
                </comment>
                <comment line="4253">
                    make sure the cursor is on a valid row                    
                </comment>
                <declaration name="obj" type="Object" line="4254"/>
            </method>
            <javadoc line="4261">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;byte&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateByte" type="void" line="4284">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="byte"/>
                </params>
                <comment line="4286">
                    sanity check.                    
                </comment>
                <comment line="4288">
                    make sure the cursor is on a valid row                    
                </comment>
                <declaration name="obj" type="Object" line="4290"/>
            </method>
            <javadoc line="4297">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;short&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateShort" type="void" line="4320">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="short"/>
                </params>
                <comment line="4322">
                    sanity check.                    
                </comment>
                <comment line="4324">
                    make sure the cursor is on a valid row                    
                </comment>
                <declaration name="obj" type="Object" line="4326"/>
            </method>
            <javadoc line="4333">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;int&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateInt" type="void" line="4356">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="int"/>
                </params>
                <comment line="4358">
                    sanity check.                    
                </comment>
                <comment line="4360">
                    make sure the cursor is on a valid row                    
                </comment>
                <declaration name="obj" type="Object" line="4361"/>
            </method>
            <javadoc line="4368">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;long&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateLong" type="void" line="4391">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="long"/>
                </params>
                <comment line="4393">
                    sanity check.                    
                </comment>
                <comment line="4395">
                    make sure the cursor is on a valid row                    
                </comment>
                <declaration name="obj" type="Object" line="4397"/>
            </method>
            <javadoc line="4405">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;float&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateFloat" type="void" line="4428">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="float"/>
                </params>
                <comment line="4430">
                    sanity check.                    
                </comment>
                <comment line="4432">
                    make sure the cursor is on a valid row                    
                </comment>
                <declaration name="obj" type="Object" line="4434"/>
            </method>
            <javadoc line="4441">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;double&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateDouble" type="void" line="4464">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="double"/>
                </params>
                <comment line="4466">
                    sanity check.                    
                </comment>
                <comment line="4468">
                    make sure the cursor is on a valid row                    
                </comment>
                <declaration name="obj" type="Object" line="4469"/>
            </method>
            <javadoc line="4476">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateBigDecimal" type="void" line="4499">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="BigDecimal"/>
                </params>
                <comment line="4501">
                    sanity check.                    
                </comment>
                <comment line="4503">
                    make sure the cursor is on a valid row                    
                </comment>
                <declaration name="obj" type="Object" line="4505"/>
            </method>
            <javadoc line="4512">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;String&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to mark the row as updated.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called to insert the new row into this rowset and mark it
                  as inserted. Both of these methods must be called before the
                  cursor moves to another row.
                  &lt;P&gt;
                  The method &lt;code&gt;acceptChanges&lt;/code&gt; must be called if the
                  updated values are to be written back to the underlying database.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateString" type="void" line="4538">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="String"/>
                </params>
                <comment line="4540">
                    sanity check.                    
                </comment>
                <comment line="4542">
                    make sure the cursor is on a valid row                    
                </comment>
            </method>
            <javadoc line="4547">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;byte&lt;/code&gt; array.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateBytes" type="void" line="4570">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="byte"/>
                </params>
                <comment line="4572">
                    sanity check.                    
                </comment>
                <comment line="4574">
                    make sure the cursor is on a valid row                    
                </comment>
                <scope line="4576"/>
            </method>
            <javadoc line="4583">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Date&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, (3) the type of the designated column is not
                      an SQL <code>DATE</code> or <code>TIMESTAMP</code>, or
                      (4) this rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateDate" type="void" line="4607">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.sql.Date"/>
                </params>
                <comment line="4609">
                    sanity check.                    
                </comment>
                <comment line="4611">
                    make sure the cursor is on a valid row                    
                </comment>
                <declaration name="obj" type="Object" line="4613"/>
            </method>
            <javadoc line="4620">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Time&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, (3) the type of the designated column is not
                      an SQL <code>TIME</code> or <code>TIMESTAMP</code>, or
                      (4) this rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateTime" type="void" line="4644">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.sql.Time"/>
                </params>
                <comment line="4646">
                    sanity check.                    
                </comment>
                <comment line="4648">
                    make sure the cursor is on a valid row                    
                </comment>
                <declaration name="obj" type="Object" line="4650"/>
            </method>
            <javadoc line="4657">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Timestamp&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, (3) the type of the designated column is not
                      an SQL <code>DATE</code>, <code>TIME</code>, or
                      <code>TIMESTAMP</code>, or (4) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateTimestamp" type="void" line="4682">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.sql.Timestamp"/>
                </params>
                <comment line="4684">
                    sanity check.                    
                </comment>
                <comment line="4686">
                    make sure the cursor is on a valid row                    
                </comment>
                <declaration name="obj" type="Object" line="4688"/>
            </method>
            <javadoc line="4695">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  ASCII stream value.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the number of one-byte ASCII characters in the stream                    
                </param>
                <throws>
                    SQLException if this method is invoked                    
                </throws>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="4716">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="4718">
                    sanity Check                    
                </comment>
                <comment line="4720">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="4735">
                    Changed the condition check to check for length instead of -1                    
                </comment>
                <scope line="4724"/>
                <declaration name="buf" type="byte" line="4728"/>
                <scope line="4729">
                    <declaration name="charsRead" type="int" line="4730"/>
                    <scope line="4731"/>
                </scope>
                <scope line="4735"/>
                <declaration name="str" type="String" line="4738"/>
            </method>
            <javadoc line="4744">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value; must be a <code>java.io.InputStream</code>
                      containing <code>BINARY</code>, <code>VARBINARY</code>, or
                      <code>LONGVARBINARY</code> data                    
                </param>
                <param>
                    length the length of the stream in bytes                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, (3) the data in the stream is not binary, or
                      (4) this rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="4770">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="4772">
                    sanity Check                    
                </comment>
                <comment line="4774">
                    make sure the cursor is on a valid row                    
                </comment>
                <scope line="4776"/>
                <declaration name="buf" type="byte" line="4780"/>
                <scope line="4781">
                    <declaration name="bytesRead" type="int" line="4782"/>
                    <scope line="4783"/>
                </scope>
                <scope line="4786"/>
            </method>
            <javadoc line="4793">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value; must be a <code>java.io.Reader</code>
                      containing <code>BINARY</code>, <code>VARBINARY</code>,
                      <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>,
                      or <code>LONGVARCHAR</code> data                    
                </param>
                <param>
                    length the length of the stream in characters                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, (3) the data in the stream is not a binary or
                      character type, or (4) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="4821">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.Reader"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="4823">
                    sanity Check                    
                </comment>
                <comment line="4825">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="4839">
                    Changed the condition checking to check for length instead of -1                    
                </comment>
                <scope line="4828"/>
                <declaration name="buf" type="char" line="4832"/>
                <scope line="4833">
                    <declaration name="charsRead" type="int" line="4834"/>
                    <scope line="4835"/>
                </scope>
                <scope line="4839"/>
                <declaration name="str" type="String" line="4842"/>
            </method>
            <javadoc line="4847">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Object&lt;/code&gt; value.  The &lt;code&gt;scale&lt;/code&gt; parameter indicates
                  the number of digits to the right of the decimal point and is ignored
                  if the new column value is not a type that will be mapped to an SQL
                  &lt;code&gt;DECIMAL&lt;/code&gt; or &lt;code&gt;NUMERIC&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point (for
                      <code>DECIMAL</code> and <code>NUMERIC</code> types only)                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateObject" type="void" line="4875">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="Object"/>
                    <param name="scale" type="int"/>
                </params>
                <comment line="4877">
                    sanity check.                    
                </comment>
                <comment line="4879">
                    make sure the cursor is on a valid row                    
                </comment>
                <declaration name="type" type="int" line="4881"/>
                <scope line="4882"/>
            </method>
            <javadoc line="4888">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Object&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateObject" type="void" line="4911">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="Object"/>
                </params>
                <comment line="4913">
                    sanity check.                    
                </comment>
                <comment line="4915">
                    make sure the cursor is on a valid row                    
                </comment>
            </method>
            <javadoc line="4920">
                Sets the designated nullable column in the current row or the
                  insert row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with
                  &lt;code&gt;null&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateNull" type="void" line="4940">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="4944">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;boolean&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateBoolean" type="void" line="4966">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="boolean"/>
                </params>
            </method>
            <javadoc line="4970">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;byte&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateByte" type="void" line="4992">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="4996">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;short&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateShort" type="void" line="5018">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="short"/>
                </params>
            </method>
            <javadoc line="5022">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;int&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateInt" type="void" line="5044">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="5048">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;long&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateLong" type="void" line="5070">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="long"/>
                </params>
            </method>
            <javadoc line="5074">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;float&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateFloat" type="void" line="5096">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="float"/>
                </params>
            </method>
            <javadoc line="5100">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;double&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateDouble" type="void" line="5122">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="5126">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateBigDecimal" type="void" line="5148">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="BigDecimal"/>
                </params>
            </method>
            <javadoc line="5152">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;String&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateString" type="void" line="5174">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="String"/>
                </params>
            </method>
            <javadoc line="5178">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;byte&lt;/code&gt; array.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateBytes" type="void" line="5200">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="5204">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Date&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, (3) the type
                      of the designated column is not an SQL <code>DATE</code> or
                      <code>TIMESTAMP</code>, or (4) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateDate" type="void" line="5228">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.sql.Date"/>
                </params>
            </method>
            <javadoc line="5232">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Time&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, (3) the type
                      of the designated column is not an SQL <code>TIME</code> or
                      <code>TIMESTAMP</code>, or (4) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateTime" type="void" line="5256">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.sql.Time"/>
                </params>
            </method>
            <javadoc line="5260">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Timestamp&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if the given column index is out of bounds or
                      the cursor is not on one of this rowset's rows or its
                      insert row                    
                </throws>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, (3) the type
                      of the designated column is not an SQL <code>DATE</code>,
                      <code>TIME</code>, or <code>TIMESTAMP</code>, or (4) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateTimestamp" type="void" line="5287">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.sql.Timestamp"/>
                </params>
            </method>
            <javadoc line="5291">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  ASCII stream value.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the number of one-byte ASCII characters in the stream                    
                </param>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="5312">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="5316">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value; must be a <code>java.io.InputStream</code>
                      containing <code>BINARY</code>, <code>VARBINARY</code>, or
                      <code>LONGVARBINARY</code> data                    
                </param>
                <param>
                    length the length of the stream in bytes                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, (3) the data
                      in the stream is not binary, or (4) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="5342">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="5346">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    reader the new column value; must be a
                      <code>java.io.Reader</code> containing <code>BINARY</code>,
                      <code>VARBINARY</code>, <code>LONGVARBINARY</code>, <code>CHAR</code>,
                      <code>VARCHAR</code>, or <code>LONGVARCHAR</code> data                    
                </param>
                <param>
                    length the length of the stream in characters                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, (3) the data
                      in the stream is not a binary or character type, or (4) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="5375">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="5379">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Object&lt;/code&gt; value.  The &lt;code&gt;scale&lt;/code&gt; parameter
                  indicates the number of digits to the right of the decimal point
                  and is ignored if the new column value is not a type that will be
                  mapped to an SQL &lt;code&gt;DECIMAL&lt;/code&gt; or &lt;code&gt;NUMERIC&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point (for
                      <code>DECIMAL</code> and <code>NUMERIC</code> types only)                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateObject" type="void" line="5406">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="Object"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="5410">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Object&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateObject" type="void" line="5432">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <javadoc line="5436">
                Inserts the contents of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s insert
                  row into this rowset immediately following the current row.
                  If the current row is the
                  position after the last row or before the first row, the new row will
                  be inserted at the end of the rowset.  This method also notifies
                  listeners registered with this rowset that the row has changed.
                  &lt;P&gt;
                  The cursor must be on the insert row when this method is called.                
                <throws>
                    SQLException if (1) the cursor is not on the insert row,
                      (2) one or more of the non-nullable columns in the insert
                      row has not been given a value, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="insertRow" type="void" line="5451">
                <comment line="5459">
                    Added the setting of parameters that are passed
                     to setXXX methods after an empty CRS Object is
                     created through RowSetMetaData object                    
                </comment>
                <comment line="5471">
                    The new row is inserted into the RowSet
                     immediately following the current row.
                    
                     If we are afterlast then the rows are
                     inserted at the end.                    
                </comment>
                <comment line="5486">
                    notify the listeners that the row changed.                    
                </comment>
                <declaration name="pos" type="int" line="5452"/>
                <scope line="5455"/>
                <declaration name="toInsert" type="Object[]" line="5461"/>
                <scope line="5463"/>
                <declaration name="insRow" type="Row" line="5467"/>
                <scope line="5477"/>
                <scope line="5479"/>
            </method>
            <javadoc line="5489">
                Marks the current row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as
                  updated and notifies listeners registered with this rowset that the
                  row has changed.
                  &lt;P&gt;
                  This method  cannot be called when the cursor is on the insert row, and
                  it should be called before the cursor moves to another row.  If it is
                  called after the cursor moves to another row, this method has no effect,
                  and the updates made before the cursor moved will be lost.                
                <throws>
                    SQLException if the cursor is on the insert row or this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateRow" type="void" line="5502">
                <comment line="5504">
                    make sure we aren&apos;t on the insert row                    
                </comment>
                <comment line="5511">
                    notify the listeners that the row changed.                    
                </comment>
                <scope line="5504"/>
            </method>
            <javadoc line="5514">
                Deletes the current row from this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object and
                  notifies listeners registered with this rowset that a row has changed.
                  This method cannot be called when the cursor is on the insert row.
                  &lt;P&gt;
                  This method marks the current row as deleted, but it does not delete
                  the row from the underlying data source.  The method
                  &lt;code&gt;acceptChanges&lt;/code&gt; must be called to delete the row in
                  the data source.                
                <throws>
                    SQLException if (1) this method is called when the cursor
                      is on the insert row, before the first row, or after the
                      last row or (2) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="deleteRow" type="void" line="5529">
                <comment line="5531">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="5537">
                    notify the listeners that the row changed.                    
                </comment>
            </method>
            <javadoc line="5540">
                Sets the current row with its original value and marks the row as
                  not updated, thus undoing any changes made to the row since the
                  last call to the methods &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;deleteRow&lt;/code&gt;.
                  This method should be called only when the cursor is on a row in
                  this rowset.                
                <throws>
                    SQLException if the cursor is on the insert row, before the
                      first row, or after the last row                    
                </throws>
            </javadoc>
            <method name="refreshRow" type="void" line="5550">
                <comment line="5552">
                    make sure we are on a row                    
                </comment>
                <comment line="5555">
                    don&apos;t want this to happen...                    
                </comment>
                <comment line="5561">
                    just undo any changes made to this row.                    
                </comment>
                <scope line="5555"/>
                <declaration name="currentRow" type="Row" line="5559"/>
            </method>
            <javadoc line="5565">
                Rolls back any updates made to the current row of this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object and notifies listeners that
                  a row has changed.  To have an effect, this method
                  must be called after an &lt;code&gt;updateXXX&lt;/code&gt; method has been
                  called and before the method &lt;code&gt;updateRow&lt;/code&gt; has been called.
                  If no updates have been made or the method &lt;code&gt;updateRow&lt;/code&gt;
                  has already been called, this method has no effect.                
                <throws>
                    SQLException if the cursor is on the insert row, before the
                      first row, or after the last row                    
                </throws>
            </javadoc>
            <method name="cancelRowUpdates" type="void" line="5577">
                <comment line="5579">
                    make sure we are on a row                    
                </comment>
                <comment line="5582">
                    don&apos;t want this to happen...                    
                </comment>
                <scope line="5582"/>
                <declaration name="currentRow" type="Row" line="5586"/>
                <scope line="5587"/>
            </method>
            <javadoc line="5593">
                Moves the cursor for this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object
                  to the insert row.  The current row in the rowset is remembered
                  while the cursor is on the insert row.
                  &lt;P&gt;
                  The insert row is a special row associated with an updatable
                  rowset.  It is essentially a buffer where a new row may
                  be constructed by calling the appropriate &lt;code&gt;updateXXX&lt;/code&gt;
                  methods to assign a value to each column in the row.  A complete
                  row must be constructed; that is, every column that is not nullable
                  must be assigned a value.  In order for the new row to become part
                  of this rowset, the method &lt;code&gt;insertRow&lt;/code&gt; must be called
                  before the cursor is moved back to the rowset.
                  &lt;P&gt;
                  Only certain methods may be invoked while the cursor is on the insert
                  row; many methods throw an exception if they are called while the
                  cursor is there.  In addition to the &lt;code&gt;updateXXX&lt;/code&gt;
                  and &lt;code&gt;insertRow&lt;/code&gt; methods, only the &lt;code&gt;getXXX&lt;/code&gt; methods
                  may be called when the cursor is on the insert row.  A &lt;code&gt;getXXX&lt;/code&gt;
                  method should be called on a column only after an &lt;code&gt;updateXXX&lt;/code&gt;
                  method has been called on that column; otherwise, the value returned is
                  undetermined.                
                <throws>
                    SQLException if this <code>CachedRowSetImpl</code> object is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="moveToInsertRow" type="void" line="5619">
                <comment line="5635">
                    %%% setCurrentRow called in BaseRow                    
                </comment>
                <scope line="5620"/>
                <scope line="5623">
                    <declaration name="numCols" type="int" line="5626"/>
                    <scope line="5627"/>
                    <scope line="5629"/>
                </scope>
            </method>
            <javadoc line="5642">
                Moves the cursor for this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object to
                  the current row.  The current row is the row the cursor was on
                  when the method &lt;code&gt;moveToInsertRow&lt;/code&gt; was called.
                  &lt;P&gt;
                  Calling this method has no effect unless it is called while the
                  cursor is on the insert row.                
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="moveToCurrentRow" type="void" line="5652">
                <scope line="5653"/>
                <scope line="5655"/>
            </method>
            <javadoc line="5661">
                Returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    <code>null</code>                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getStatement" type="Statement" line="5667"/>
            <javadoc line="5671">
                Retrieves the value of the designated column in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as an &lt;code&gt;Object&lt;/code&gt; in
                  the Java programming language, using the given
                  &lt;code&gt;java.util.Map&lt;/code&gt; object to custom map the value if
                  appropriate.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    map a <code>java.util.Map</code> object showing the mapping
                      from SQL type names to classes in the Java programming
                      language                    
                </param>
                <return>
                    an <code>Object</code> representing the SQL value                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds or
                      the cursor is not on one of this rowset's rows or its
                      insert row                    
                </throws>
            </javadoc>
            <method name="getObject" type="Object" line="5692">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="map" type="java.util.Map<String,Class<?>>"/>
                </params>
                <comment line="5696">
                    sanity check.                    
                </comment>
                <comment line="5698">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="5704">
                    check for SQL NULL                    
                </comment>
                <comment line="5712">
                    look up the class in the map                    
                </comment>
                <comment line="5715">
                    create new instance of the class                    
                </comment>
                <comment line="5726">
                    get the attributes from the struct                    
                </comment>
                <comment line="5728">
                    create the SQLInput &quot;stream&quot;                    
                </comment>
                <comment line="5730">
                    read the values...                    
                </comment>
                <declaration name="value" type="Object" line="5693"/>
                <scope line="5704"/>
                <scope line="5708">
                    <declaration name="s" type="Struct" line="5709"/>
                    <declaration name="c" type="Class" line="5712"/>
                    <scope line="5713">
                        <declaration name="obj" type="SQLData" line="5715"/>
                        <scope line="5716"/>
                        <scope line="5718"/>
                        <scope line="5721"/>
                        <declaration name="attribs" type="Object" line="5726"/>
                        <declaration name="sqlInput" type="SQLInputImpl" line="5728"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="5737">
                Retrieves the value of the designated column in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;Ref&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <return>
                    a <code>Ref</code> object representing an SQL<code> REF</code> value                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>REF</code> value                    
                </throws>
                <see>
                    #getRef(String)                    
                </see>
            </javadoc>
            <method name="getRef" type="Ref" line="5752">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="5756">
                    sanity check.                    
                </comment>
                <comment line="5758">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="5768">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="Ref" line="5753"/>
                <scope line="5760"/>
                <scope line="5768"/>
            </method>
            <javadoc line="5776">
                Retrieves the value of the designated column in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;Blob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <return>
                    a <code>Blob</code> object representing an SQL <code>BLOB</code> value                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>BLOB</code> value                    
                </throws>
                <see>
                    #getBlob(String)                    
                </see>
            </javadoc>
            <method name="getBlob" type="Blob" line="5791">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="5795">
                    sanity check.                    
                </comment>
                <comment line="5797">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="5808">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="Blob" line="5792"/>
                <scope line="5799"/>
                <scope line="5808"/>
            </method>
            <javadoc line="5816">
                Retrieves the value of the designated column in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;Clob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <return>
                    a <code>Clob</code> object representing an SQL <code>CLOB</code> value                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>CLOB</code> value                    
                </throws>
                <see>
                    #getClob(String)                    
                </see>
            </javadoc>
            <method name="getClob" type="Clob" line="5831">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="5835">
                    sanity check.                    
                </comment>
                <comment line="5837">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="5848">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="Clob" line="5832"/>
                <scope line="5839"/>
                <scope line="5848"/>
            </method>
            <javadoc line="5856">
                Retrieves the value of the designated column in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as an &lt;code&gt;Array&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <return>
                    an <code>Array</code> object representing an SQL
                      <code>ARRAY</code> value                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>ARRAY</code> value                    
                </throws>
                <see>
                    #getArray(String)                    
                </see>
            </javadoc>
            <method name="getArray" type="Array" line="5872">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="5876">
                    sanity check.                    
                </comment>
                <comment line="5878">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="5888">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="java.sql.Array" line="5873"/>
                <scope line="5880"/>
                <scope line="5888"/>
            </method>
            <javadoc line="5896">
                Retrieves the value of the designated column in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as an &lt;code&gt;Object&lt;/code&gt; in
                  the Java programming language, using the given
                  &lt;code&gt;java.util.Map&lt;/code&gt; object to custom map the value if
                  appropriate.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    map a <code>java.util.Map</code> object showing the mapping
                      from SQL type names to classes in the Java programming
                      language                    
                </param>
                <return>
                    an <code>Object</code> representing the SQL value                    
                </return>
                <throws>
                    SQLException if the given column name is not the name of
                      a column in this rowset or the cursor is not on one of
                      this rowset's rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getObject" type="Object" line="5915">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="map" type="java.util.Map<String,Class<?>>"/>
                </params>
            </method>
            <javadoc line="5919">
                Retrieves the value of the designated column in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;Ref&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    colName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <return>
                    a <code>Ref</code> object representing an SQL<code> REF</code> value                    
                </return>
                <throws>
                    SQLException  if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the column value
                      is not an SQL <code>REF</code> value                    
                </throws>
                <see>
                    #getRef(int)                    
                </see>
            </javadoc>
            <method name="getRef" type="Ref" line="5933">
                <params>
                    <param name="colName" type="String"/>
                </params>
            </method>
            <javadoc line="5937">
                Retrieves the value of the designated column in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;Blob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    colName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <return>
                    a <code>Blob</code> object representing an SQL <code>BLOB</code> value                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>BLOB</code> value                    
                </throws>
                <see>
                    #getBlob(int)                    
                </see>
            </javadoc>
            <method name="getBlob" type="Blob" line="5951">
                <params>
                    <param name="colName" type="String"/>
                </params>
            </method>
            <javadoc line="5955">
                Retrieves the value of the designated column in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;Clob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    colName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <return>
                    a <code>Clob</code> object representing an SQL
                      <code>CLOB</code> value                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>CLOB</code> value                    
                </throws>
                <see>
                    #getClob(int)                    
                </see>
            </javadoc>
            <method name="getClob" type="Clob" line="5970">
                <params>
                    <param name="colName" type="String"/>
                </params>
            </method>
            <javadoc line="5974">
                Retrieves the value of the designated column in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as an &lt;code&gt;Array&lt;/code&gt; object
                  in the Java programming langugage.                
                <param>
                    colName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <return>
                    an <code>Array</code> object representing an SQL
                      <code>ARRAY</code> value                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>ARRAY</code> value                    
                </throws>
                <see>
                    #getArray(int)                    
                </see>
            </javadoc>
            <method name="getArray" type="Array" line="5989">
                <params>
                    <param name="colName" type="String"/>
                </params>
            </method>
            <javadoc line="5993">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.sql.Date&lt;/code&gt;
                  object, using the given &lt;code&gt;Calendar&lt;/code&gt; object to construct an
                  appropriate millisecond value for the date.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object to use in
                      constructing the date                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>DATE</code> or
                      <code>TIMESTAMP</code> value                    
                </throws>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="6012">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="cal" type="Calendar"/>
                </params>
                <comment line="6016">
                    sanity check.                    
                </comment>
                <comment line="6018">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="6024">
                    check for SQL NULL                    
                </comment>
                <comment line="6034">
                    create a default calendar                    
                </comment>
                <comment line="6036">
                    set this Calendar to the time we have                    
                </comment>
                <comment line="6039">
                    Now we can pull the pieces of the date out
                     of the default calendar and put them into
                     the user provided calendar                    
                </comment>
                <comment line="6048">
                    This looks a little odd but it is correct -
                     Calendar.getTime() returns a Date...                    
                </comment>
                <declaration name="value" type="Object" line="6013"/>
                <scope line="6024"/>
                <declaration name="defaultCal" type="Calendar" line="6034"/>
            </method>
            <javadoc line="6054">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.sql.Date&lt;/code&gt;
                  object, using the given &lt;code&gt;Calendar&lt;/code&gt; object to construct an
                  appropriate millisecond value for the date.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object to use in
                      constructing the date                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>DATE</code> or
                      <code>TIMESTAMP</code> value                    
                </throws>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="6072">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="6076">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.sql.Time&lt;/code&gt;
                  object, using the given &lt;code&gt;Calendar&lt;/code&gt; object to construct an
                  appropriate millisecond value for the date.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object to use in
                      constructing the date                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>TIME</code> or
                      <code>TIMESTAMP</code> value                    
                </throws>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="6095">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="cal" type="Calendar"/>
                </params>
                <comment line="6099">
                    sanity check.                    
                </comment>
                <comment line="6101">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="6107">
                    check for SQL NULL                    
                </comment>
                <comment line="6117">
                    create a default calendar                    
                </comment>
                <comment line="6119">
                    set the time in the default calendar                    
                </comment>
                <comment line="6122">
                    Now we can pull the pieces of the date out
                     of the default calendar and put them into
                     the user provided calendar                    
                </comment>
                <declaration name="value" type="Object" line="6096"/>
                <scope line="6107"/>
                <declaration name="defaultCal" type="Calendar" line="6117"/>
            </method>
            <javadoc line="6133">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.sql.Time&lt;/code&gt;
                  object, using the given &lt;code&gt;Calendar&lt;/code&gt; object to construct an
                  appropriate millisecond value for the date.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object to use in
                      constructing the date                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>TIME</code> or
                      <code>TIMESTAMP</code> value                    
                </throws>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="6151">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="6155">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.sql.Timestamp&lt;/code&gt;
                  object, using the given &lt;code&gt;Calendar&lt;/code&gt; object to construct an
                  appropriate millisecond value for the date.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object to use in
                      constructing the date                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>TIME</code> or
                      <code>TIMESTAMP</code> value                    
                </throws>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="6174">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="cal" type="Calendar"/>
                </params>
                <comment line="6178">
                    sanity check.                    
                </comment>
                <comment line="6180">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="6186">
                    check for SQL NULL                    
                </comment>
                <comment line="6196">
                    create a default calendar                    
                </comment>
                <comment line="6198">
                    set the time in the default calendar                    
                </comment>
                <comment line="6201">
                    Now we can pull the pieces of the date out
                     of the default calendar and put them into
                     the user provided calendar                    
                </comment>
                <declaration name="value" type="Object" line="6175"/>
                <scope line="6186"/>
                <declaration name="defaultCal" type="Calendar" line="6196"/>
            </method>
            <javadoc line="6215">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object, using the given
                  &lt;code&gt;Calendar&lt;/code&gt; object to construct an appropriate
                  millisecond value for the date.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object to use in
                      constructing the date                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>,
                      the result is <code>null</code>                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset's rows or its insert row, or (3) the designated
                      column does not store an SQL <code>DATE</code>,
                      <code>TIME</code>, or <code>TIMESTAMP</code> value                    
                </throws>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="6234">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="6242">
                Retrieves the &lt;code&gt;Connection&lt;/code&gt; object passed to this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.  This connection may be
                  used to populate this rowset with data or to write data back
                  to its underlying data source.                
                <return>
                    the <code>Connection</code> object passed to this rowset;
                      may be <code>null</code> if there is no connection                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getConnection" type="Connection" line="6252"/>
            <javadoc line="6256">
                Sets the metadata for this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object
                  with the given &lt;code&gt;RowSetMetaData&lt;/code&gt; object.                
                <param>
                    md a <code>RowSetMetaData</code> object instance containing
                      metadata about the columsn in the rowset                    
                </param>
                <throws>
                    SQLException if invalid meta data is supplied to the
                      rowset                    
                </throws>
            </javadoc>
            <method name="setMetaData" type="void" line="6265">
                <params>
                    <param name="md" type="RowSetMetaData"/>
                </params>
            </method>
            <javadoc line="6269">
                Returns a result set containing the original value of the rowset. The
                  original value is the state of the &lt;code&gt;CachedRowSetImpl&lt;/code&gt; after the
                  last population or synchronization (whichever occured most recently) with
                  the data source.
                  &lt;p&gt;
                  The cursor is positioned before the first row in the result set.
                  Only rows contained in the result set returned by &lt;code&gt;getOriginal()&lt;/code&gt;
                  are said to have an original value.                
                <return>
                    the original result set of the rowset                    
                </return>
                <throws>
                    SQLException if an error occurs produce the
                      <code>ResultSet</code> object                    
                </throws>
            </javadoc>
            <method name="getOriginal" type="ResultSet" line="6283">
                <comment line="6290">
                    make sure we don&apos;t get someone playing with these
                     %%% is this now necessary ???
                    crs.setReader(null);
                    crs.setWriter(null);                    
                </comment>
                <declaration name="crs" type="CachedRowSetImpl" line="6284"/>
                <declaration name="colCount" type="int" line="6293"/>
                <declaration name="orig" type="Row" line="6294"/>
                <scope line="6296"/>
            </method>
            <javadoc line="6303">
                Returns a result set containing the original value of the current
                  row only.
                  The original value is the state of the &lt;code&gt;CachedRowSetImpl&lt;/code&gt; after
                  the last population or synchronization (whichever occured most recently)
                  with the data source.                
                <return>
                    the original result set of the row                    
                </return>
                <throws>
                    SQLException if there is no current row                    
                </throws>
                <see>
                    #setOriginalRow                    
                </see>
            </javadoc>
            <method name="getOriginalRow" type="ResultSet" line="6314">
                <comment line="6322">
                    make sure we don&apos;t get someone playing with these
                     %%% is this now necessary ???
                    crs.setReader(null);
                    crs.setWriter(null);                    
                </comment>
                <declaration name="crs" type="CachedRowSetImpl" line="6315"/>
                <declaration name="orig" type="Row" line="6326"/>
            </method>
            <javadoc line="6335">
                Marks the current row in this rowset as being an original row.                
                <throws>
                    SQLException if there is no current row                    
                </throws>
                <see>
                    #getOriginalRow                    
                </see>
            </javadoc>
            <method name="setOriginalRow" type="void" line="6341">
                <comment line="6350">
                    this can happen if deleted rows are being shown                    
                </comment>
                <scope line="6342"/>
                <declaration name="row" type="Row" line="6346"/>
                <scope line="6350"/>
            </method>
            <javadoc line="6355">
                Makes the given row of this rowset the original row by clearing any
                  settings that mark the row as having been inserted, deleted, or updated.
                  This method is called internally by the methods
                  &lt;code&gt;setOriginalRow&lt;/code&gt;
                  and &lt;code&gt;setOriginal&lt;/code&gt;.                
                <param>
                    row the row to be made the original row                    
                </param>
            </javadoc>
            <method name="makeRowOriginal" type="void" line="6364">
                <params>
                    <param name="row" type="Row"/>
                </params>
                <scope line="6365"/>
                <scope line="6369"/>
            </method>
            <javadoc line="6374">
                Marks all rows in this rowset as being original rows. Any updates
                  made to the rows become the original values for the rowset.
                  Calls to the method &lt;code&gt;setOriginal&lt;/code&gt; connot be reversed.                
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="setOriginal" type="void" line="6381">
                <comment line="6386">
                    remove deleted rows from the collection.                    
                </comment>
                <comment line="6394">
                    notify any listeners that the rowset has changed                    
                </comment>
                <scope line="6382">
                    <declaration name="row" type="Row" line="6383"/>
                    <scope line="6386"/>
                </scope>
            </method>
            <javadoc line="6397">
                Returns an identifier for the object (table) that was used to create this
                  rowset.                
                <return>
                    a <code>String</code> object that identifies the table from
                      which this <code>CachedRowSetImpl</code> object was derived                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getTableName" type="String" line="6405"/>
            <javadoc line="6409">
                Sets the identifier for the table from which this rowset was derived
                  to the given table name.                
                <param>
                    tabName a <code>String</code> object that identifies the
                      table from which this <code>CachedRowSetImpl</code> object
                      was derived                    
                </param>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="setTableName" type="void" line="6418">
                <params>
                    <param name="tabName" type="String"/>
                </params>
            </method>
            <javadoc line="6425">
                Returns the columns that make a key to uniquely identify a
                  row in this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object.                
                <return>
                    an array of column numbers that constitutes a primary
                      key for this rowset. This array should be empty
                      if no column is representitive of a primary key                    
                </return>
                <throws>
                    SQLException if the rowset is empty or no columns
                      are designated as primary keys                    
                </throws>
                <see>
                    #setKeyColumns                    
                </see>
            </javadoc>
            <method name="getKeyColumns" type="int[]" line="6436"/>
            <javadoc line="6441">
                Sets this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s
                  &lt;code&gt;keyCols&lt;/code&gt; field with the given array of column
                  numbers, which forms a key for uniquely identifying a row
                  in this rowset.                
                <param>
                    keys an array of <code>int</code> indicating the
                      columns that form a primary key for this
                      <code>CachedRowSetImpl</code> object; every
                      element in the array must be greater than
                      <code>0</code> and less than or equal to the number
                      of columns in this rowset                    
                </param>
                <throws>
                    SQLException if any of the numbers in the
                      given array is not valid for this rowset                    
                </throws>
                <see>
                    #getKeyColumns                    
                </see>
            </javadoc>
            <method name="setKeyColumns" type="void" line="6457">
                <params>
                    <param name="keys" type="int[]"/>
                </params>
                <declaration name="numCols" type="int" line="6458"/>
                <scope line="6459"/>
                <scope line="6465">
                    <scope line="6467"/>
                </scope>
            </method>
            <javadoc line="6475">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Ref&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    ref the new column <code>java.sql.Ref</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateRef" type="void" line="6498">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="ref" type="java.sql.Ref"/>
                </params>
                <comment line="6500">
                    sanity check.                    
                </comment>
                <comment line="6502">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="6505">
                    SerialClob will help in getting the byte array and storing it.
                     We need to be checking DatabaseMetaData.locatorsUpdatorCopy()
                     or through RowSetMetaData.locatorsUpdatorCopy()                    
                </comment>
            </method>
            <javadoc line="6510">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;double&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    ref the new column <code>java.sql.Ref</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateRef" type="void" line="6532">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="ref" type="java.sql.Ref"/>
                </params>
            </method>
            <javadoc line="6536">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;double&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    c the new column <code>Clob</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateClob" type="void" line="6559">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="c" type="Clob"/>
                </params>
                <comment line="6561">
                    sanity check.                    
                </comment>
                <comment line="6563">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="6566">
                    SerialClob will help in getting the byte array and storing it.
                     We need to be checking DatabaseMetaData.locatorsUpdatorCopy()
                     or through RowSetMetaData.locatorsUpdatorCopy()                    
                </comment>
                <scope line="6569"/>
                <scope line="6572"/>
            </method>
            <javadoc line="6577">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;double&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    c the new column <code>Clob</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateClob" type="void" line="6599">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="c" type="Clob"/>
                </params>
            </method>
            <javadoc line="6603">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.sql.Blob&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    b the new column <code>Blob</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateBlob" type="void" line="6626">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="b" type="Blob"/>
                </params>
                <comment line="6628">
                    sanity check.                    
                </comment>
                <comment line="6630">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="6633">
                    SerialBlob will help in getting the byte array and storing it.
                     We need to be checking DatabaseMetaData.locatorsUpdatorCopy()
                     or through RowSetMetaData.locatorsUpdatorCopy()                    
                </comment>
                <scope line="6636"/>
                <scope line="6639"/>
            </method>
            <javadoc line="6644">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.sql.Blob &lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    b the new column <code>Blob</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateBlob" type="void" line="6666">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="b" type="Blob"/>
                </params>
            </method>
            <javadoc line="6670">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.sql.Array&lt;/code&gt; values.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is <code>1</code>, the second
                      is <code>2</code>, and so on; must be <code>1</code> or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    a the new column <code>Array</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) this rowset is
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateArray" type="void" line="6693">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="a" type="Array"/>
                </params>
                <comment line="6695">
                    sanity check.                    
                </comment>
                <comment line="6697">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="6700">
                    SerialArray will help in getting the byte array and storing it.
                     We need to be checking DatabaseMetaData.locatorsUpdatorCopy()
                     or through RowSetMetaData.locatorsUpdatorCopy()                    
                </comment>
            </method>
            <javadoc line="6705">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.sql.Array&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a <code>String</code> object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    a the new column <code>Array</code> value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset's rows or its insert row, or (3) this
                      rowset is <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="updateArray" type="void" line="6727">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="a" type="Array"/>
                </params>
            </method>
            <javadoc line="6732">
                Retrieves the value of the designated column in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.net.URL&lt;/code&gt; object
                  in the Java programming language.                
                <return>
                    a java.net.URL object containing the resource reference described by
                      the URL                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>DATALINK</code> value.                    
                </throws>
                <see>
                    #getURL(String)                    
                </see>
            </javadoc>
            <method name="getURL" type="java.net.URL" line="6745">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <comment line="6747">
                    throw new SQLException(&quot;Operation not supported&quot;);                    
                </comment>
                <comment line="6751">
                    sanity check.                    
                </comment>
                <comment line="6753">
                    make sure the cursor is on a valid row                    
                </comment>
                <comment line="6763">
                    check for SQL NULL                    
                </comment>
                <declaration name="value" type="java.net.URL" line="6748"/>
                <scope line="6755"/>
                <scope line="6763"/>
            </method>
            <javadoc line="6771">
                Retrieves the value of the designated column in this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.net.URL&lt;/code&gt; object
                  in the Java programming language.                
                <return>
                    a java.net.URL object containing the resource reference described by
                      the URL                    
                </return>
                <throws>
                    SQLException if (1) the given column name not the name of a column
                      in this rowset, or
                      (2) the cursor is not on one of this rowset's rows or its
                      insert row, or (3) the designated column does not store an
                      SQL <code>DATALINK</code> value.                    
                </throws>
                <see>
                    #getURL(int)                    
                </see>
            </javadoc>
            <method name="getURL" type="java.net.URL" line="6785">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="6790">
                The first warning reported by calls on this &lt;code&gt;CachedRowSetImpl&lt;/code&gt;
                  object is returned. Subsequent &lt;code&gt;CachedRowSetImpl&lt;/code&gt; warnings will
                  be chained to this &lt;code&gt;SQLWarning&lt;/code&gt;. All &lt;code&gt;RowSetWarnings&lt;/code&gt;
                  warnings are generated in the disconnected environment and remain a
                  seperate warning chain to that provided by the &lt;code&gt;getWarnings&lt;/code&gt;
                  method.
                  &lt;P&gt;The warning chain is automatically cleared each time a new
                  row is read.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This warning chain only covers warnings caused
                  by &lt;code&gt;CachedRowSet&lt;/code&gt; (and their child interface)
                  methods. All &lt;code&gt;SQLWarnings&lt;/code&gt; can be obtained using the
                  &lt;code&gt;getWarnings&lt;/code&gt; method which tracks warnings generated
                  by the underlying JDBC driver.                
                <return>
                    the first SQLWarning or null                    
                </return>
            </javadoc>
            <method name="getRowSetWarnings" type="RowSetWarning" line="6809">
                <comment line="6813">
                    mask exception                    
                </comment>
                <scope line="6810"/>
                <scope line="6812"/>
            </method>
            <javadoc line="6817">
                The function tries to isolate the tablename when only setCommand
                  is set and not setTablename is called provided there is only one table
                  name in the query else just leaves the setting of table name as such.
                  If setTablename is set later it will over ride this table name
                  value so retrieved.                
                <return>
                    the tablename if only one table in query else return ""                    
                </return>
            </javadoc>
            <method name="buildTableName" type="String" line="6826">
                <params>
                    <param name="command" type="String"/>
                </params>
                <comment line="6829">
                    If we have a query from one table,
                     we set the table name implicitly
                     else user has to explicitly set the table name.                    
                </comment>
                <comment line="6837">
                    Query can be a select, insert or  update                    
                </comment>
                <comment line="6840">
                    look for &quot;from&quot; keyword, after that look for a
                     comma after from. If comma is there don&apos;t set
                     table name else isolate table name.                    
                </comment>
                <comment line="6848">
                    implies only one table                    
                </comment>
                <comment line="6855">
                    Adding the addtional check for conditions following the table name.
                     If a condition is found truncate it.                    
                </comment>
                <comment line="6868">
                    strTablename=&quot;&quot;;                    
                </comment>
                <comment line="6872">
                    strTablename=&quot;&quot;;                    
                </comment>
                <comment line="6874">
                    strTablename=&quot;&quot;;                    
                </comment>
                <declaration name="indexFrom" type="int" line="6832"/>
                <declaration name="strTablename" type="String" line="6833"/>
                <scope line="6838">
                    <scope line="6846">
                        <declaration name="tabName" type="String" line="6850"/>
                        <declaration name="idxWhere" type="int" line="6852"/>
                        <scope line="6860"/>
                    </scope>
                    <scope line="6866"/>
                </scope>
                <scope line="6870"/>
                <scope line="6872"/>
            </method>
            <javadoc line="6878">
                Commits all changes performed by the &lt;code&gt;acceptChanges()&lt;/code&gt;
                  methods                
                <see>
                    java.sql.Connection#commit                    
                </see>
            </javadoc>
            <method name="commit" type="void" line="6884"/>
            <javadoc line="6888">
                Rolls back all changes performed by the &lt;code&gt;acceptChanges()&lt;/code&gt;
                  methods                
                <see>
                    java.sql.Connection#rollback                    
                </see>
            </javadoc>
            <method name="rollback" type="void" line="6894"/>
            <javadoc line="6898">
                Rolls back all changes performed by the &lt;code&gt;acceptChanges()&lt;/code&gt;
                  to the last &lt;code&gt;Savepoint&lt;/code&gt; transaction marker.                
                <see>
                    java.sql.Connection#rollback(Savepoint)                    
                </see>
            </javadoc>
            <method name="rollback" type="void" line="6904">
                <params>
                    <param name="s" type="Savepoint"/>
                </params>
            </method>
            <javadoc line="6908">
                Unsets the designated parameter to the given int array.
                  This was set using &lt;code&gt;setMatchColumn&lt;/code&gt;
                  as the column which will form the basis of the join.
                  &lt;P&gt;
                  The parameter value unset by this method should be same
                  as was set.                
                <param>
                    columnIdxes the index into this rowset
                      object's internal representation of parameter values                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds or if the columnIdx is
                      not the same as set using <code>setMatchColumn(int [])</code>                    
                </throws>
            </javadoc>
            <method name="unsetMatchColumn" type="void" line="6922">
                <params>
                    <param name="columnIdxes" type="int[]"/>
                </params>
                <declaration name="i_val" type="int" line="6924"/>
                <scope line="6925">
                    <scope line="6927"/>
                </scope>
                <scope line="6932"/>
            </method>
            <javadoc line="6937">
                Unsets the designated parameter to the given String array.
                  This was set using &lt;code&gt;setMatchColumn&lt;/code&gt;
                  as the column which will form the basis of the join.
                  &lt;P&gt;
                  The parameter value unset by this method should be same
                  as was set.                
                <param>
                    columnIdxes the index into this rowset
                      object's internal representation of parameter values                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds or if the columnName is
                      not the same as set using <code>setMatchColumn(String [])</code>                    
                </throws>
            </javadoc>
            <method name="unsetMatchColumn" type="void" line="6951">
                <params>
                    <param name="columnIdxes" type="String[]"/>
                </params>
                <scope line="6953">
                    <scope line="6954"/>
                </scope>
                <scope line="6959"/>
            </method>
            <javadoc line="6964">
                Retrieves the column name as &lt;code&gt;String&lt;/code&gt; array
                  that was set using &lt;code&gt;setMatchColumn(String [])&lt;/code&gt;
                  for this rowset.                
                <return>
                    a <code>String</code> array object that contains the column names
                      for the rowset which has this the match columns                    
                </return>
                <throws>
                    SQLException if an error occurs or column name is not set                    
                </throws>
            </javadoc>
            <method name="getMatchColumnNames" type="String[]" line="6974">
                <declaration name="str_temp" type="String[]" line="6976"/>
                <scope line="6978"/>
            </method>
            <javadoc line="6986">
                Retrieves the column id as &lt;code&gt;int&lt;/code&gt; array that was set using
                  &lt;code&gt;setMatchColumn(int [])&lt;/code&gt; for this rowset.                
                <return>
                    a <code>int</code> array object that contains the column ids
                      for the rowset which has this as the match columns.                    
                </return>
                <throws>
                    SQLException if an error occurs or column index is not set                    
                </throws>
            </javadoc>
            <method name="getMatchColumnIndexes" type="int[]" line="6995">
                <declaration name="int_temp" type="Integer[]" line="6997"/>
                <declaration name="i_temp" type="int[]" line="6998"/>
                <declaration name="i_val" type="int" line="6999"/>
                <scope line="7003"/>
                <scope line="7010"/>
            </method>
            <javadoc line="7017">
                Sets the designated parameter to the given int array.
                  This forms the basis of the join for the
                  &lt;code&gt;JoinRowSet&lt;/code&gt; as the column which will form the basis of the
                  join.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this rowset&apos;s
                  command when the method &lt;code&gt;getMatchColumnIndexes&lt;/code&gt; is called.                
                <param>
                    columnIdxes the indexes into this rowset
                      object's internal representation of parameter values; the
                      first parameter is 0, the second is 1, and so on; must be
                      <code>0</code> or greater                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
            </javadoc>
            <method name="setMatchColumn" type="void" line="7034">
                <params>
                    <param name="columnIdxes" type="int[]"/>
                </params>
                <scope line="7036">
                    <scope line="7037"/>
                </scope>
                <scope line="7041"/>
            </method>
            <javadoc line="7046">
                Sets the designated parameter to the given String array.
                  This forms the basis of the join for the
                  &lt;code&gt;JoinRowSet&lt;/code&gt; as the column which will form the basis of the
                  join.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this rowset&apos;s
                  command when the method &lt;code&gt;getMatchColumn&lt;/code&gt; is called.                
                <param>
                    columnNames the name of the column into this rowset
                      object's internal representation of parameter values                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
            </javadoc>
            <method name="setMatchColumn" type="void" line="7061">
                <params>
                    <param name="columnNames" type="String[]"/>
                </params>
                <scope line="7063">
                    <scope line="7064"/>
                </scope>
                <scope line="7068"/>
            </method>
            <javadoc line="7074">
                Sets the designated parameter to the given &lt;code&gt;int&lt;/code&gt;
                  object.  This forms the basis of the join for the
                  &lt;code&gt;JoinRowSet&lt;/code&gt; as the column which will form the basis of the
                  join.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this rowset&apos;s
                  command when the method &lt;code&gt;getMatchColumn&lt;/code&gt; is called.                
                <param>
                    columnIdx the index into this rowset
                      object's internal representation of parameter values; the
                      first parameter is 0, the second is 1, and so on; must be
                      <code>0</code> or greater                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
            </javadoc>
            <method name="setMatchColumn" type="void" line="7091">
                <params>
                    <param name="columnIdx" type="int"/>
                </params>
                <comment line="7093">
                    validate, if col is ok to be set                    
                </comment>
                <comment line="7097">
                    set iMatchColumn                    
                </comment>
                <comment line="7099">
                    strMatchColumn = null;                    
                </comment>
                <scope line="7093"/>
                <scope line="7095"/>
            </method>
            <javadoc line="7102">
                Sets the designated parameter to the given &lt;code&gt;String&lt;/code&gt;
                  object.  This forms the basis of the join for the
                  &lt;code&gt;JoinRowSet&lt;/code&gt; as the column which will form the basis of the
                  join.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this rowset&apos;s
                  command when the method &lt;code&gt;getMatchColumn&lt;/code&gt; is called.                
                <param>
                    columnName the name of the column into this rowset
                      object's internal representation of parameter values                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
            </javadoc>
            <method name="setMatchColumn" type="void" line="7117">
                <params>
                    <param name="columnName" type="String"/>
                </params>
                <comment line="7119">
                    validate, if col is ok to be set                    
                </comment>
                <comment line="7123">
                    set strMatchColumn                    
                </comment>
                <comment line="7125">
                    iMatchColumn = -1;                    
                </comment>
                <scope line="7119"/>
                <scope line="7121"/>
            </method>
            <javadoc line="7128">
                Unsets the designated parameter to the given &lt;code&gt;int&lt;/code&gt;
                  object.  This was set using &lt;code&gt;setMatchColumn&lt;/code&gt;
                  as the column which will form the basis of the join.
                  &lt;P&gt;
                  The parameter value unset by this method should be same
                  as was set.                
                <param>
                    columnIdx the index into this rowset
                      object's internal representation of parameter values                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds or if the columnIdx is
                      not the same as set using <code>setMatchColumn(int)</code>                    
                </throws>
            </javadoc>
            <method name="unsetMatchColumn" type="void" line="7142">
                <params>
                    <param name="columnIdx" type="int"/>
                </params>
                <comment line="7144">
                    check if we are unsetting the SAME column                    
                </comment>
                <comment line="7150">
                    that is, we are unsetting it.                    
                </comment>
                <scope line="7144"/>
                <scope line="7146"/>
                <scope line="7148"/>
            </method>
            <javadoc line="7154">
                Unsets the designated parameter to the given &lt;code&gt;String&lt;/code&gt;
                  object.  This was set using &lt;code&gt;setMatchColumn&lt;/code&gt;
                  as the column which will form the basis of the join.
                  &lt;P&gt;
                  The parameter value unset by this method should be same
                  as was set.                
                <param>
                    columnName the index into this rowset
                      object's internal representation of parameter values                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds or if the columnName is
                      not the same as set using <code>setMatchColumn(String)</code>                    
                </throws>
            </javadoc>
            <method name="unsetMatchColumn" type="void" line="7168">
                <params>
                    <param name="columnName" type="String"/>
                </params>
                <comment line="7170">
                    check if we are unsetting the same column                    
                </comment>
                <comment line="7178">
                    that is, we are unsetting it.                    
                </comment>
                <scope line="7172"/>
                <scope line="7174"/>
                <scope line="7176"/>
            </method>
            <javadoc line="7181">
                Notifies registered listeners that a RowSet object in the given RowSetEvent
                  object has populated a number of additional rows. The &lt;code&gt;numRows&lt;/code&gt; parameter
                  ensures that this event will only be fired every &lt;code&gt;numRow&lt;/code&gt;.
                  &lt;p&gt;
                  The source of the event can be retrieved with the method event.getSource.                
                <param>
                    event a <code>RowSetEvent</code> object that contains the
                      <code>RowSet</code> object that is the source of the events                    
                </param>
                <param>
                    numRows when populating, the number of rows interval on which the
                      <code>CachedRowSet</code> populated should fire; the default value
                      is zero; cannot be less than <code>fetchSize</code> or zero                    
                </param>
            </javadoc>
            <method name="rowSetPopulated" type="void" line="7194">
                <params>
                    <param name="event" type="RowSetEvent"/>
                    <param name="numRows" type="int"/>
                </params>
                <scope line="7196"/>
                <scope line="7200">
                    <declaration name="event_temp" type="RowSetEvent" line="7201"/>
                </scope>
            </method>
            <javadoc line="7207">
                Populates this &lt;code&gt;CachedRowSet&lt;/code&gt; object with data from
                  the given &lt;code&gt;ResultSet&lt;/code&gt; object. While related to the &lt;code&gt;populate(ResultSet)&lt;/code&gt;
                  method, an additional parameter is provided to allow starting position within
                  the &lt;code&gt;ResultSet&lt;/code&gt; from where to populate the CachedRowSet
                  instance.
                  This method is an alternative to the method &lt;code&gt;execute&lt;/code&gt;
                  for filling the rowset with data.  The method &lt;code&gt;populate&lt;/code&gt;
                  does not require that the properties needed by the method
                  &lt;code&gt;execute&lt;/code&gt;, such as the &lt;code&gt;command&lt;/code&gt; property,
                  be set. This is true because the method &lt;code&gt;populate&lt;/code&gt;
                  is given the &lt;code&gt;ResultSet&lt;/code&gt; object from
                  which to get data and thus does not need to use the properties
                  required for setting up a connection and executing this
                  &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object&apos;s command.
                  &lt;P&gt;
                  After populating this rowset with data, the method
                  &lt;code&gt;populate&lt;/code&gt; sets the rowset&apos;s metadata and
                  then sends a &lt;code&gt;RowSetChangedEvent&lt;/code&gt; object
                  to all registered listeners prior to returning.                
                <param>
                    data the <code>ResultSet</code> object containing the data
                      to be read into this <code>CachedRowSetImpl</code> object                    
                </param>
                <param>
                    start the integer specifing the position in the
                      <code>ResultSet</code> object to popultate the
                      <code>CachedRowSetImpl</code> object.                    
                </param>
                <throws>
                    SQLException if an error occurs; or the max row setting is
                      violated while populating the RowSet.Also id the start position
                      is negative.                    
                </throws>
                <see>
                    #execute                    
                </see>
            </javadoc>
            <method name="populate" type="void" line="7239">
                <params>
                    <param name="data" type="ResultSet"/>
                    <param name="start" type="int"/>
                </params>
                <comment line="7304">
                    get the meta data for this ResultSet                    
                </comment>
                <comment line="7307">
                    set up the metadata                    
                </comment>
                <comment line="7311">
                    release the meta-data so that aren&apos;t tempted to use it.                    
                </comment>
                <comment line="7345">
                    check if the user has set a map. If no map
                     is set then use plain getObject. This lets
                     us work with drivers that do not support
                     getObject with a map in fairly sensible way                    
                </comment>
                <comment line="7356">
                    the following block checks for the various
                     types that we have to serialize in order to
                     store - right now only structs have been tested                    
                </comment>
                <comment line="7380">
                    Also rowsFetched should be equal to rvh.size()
                     notify any listeners that the rowset has changed                    
                </comment>
                <declaration name="rowsFetched" type="int" line="7241"/>
                <declaration name="currentRow" type="Row" line="7242"/>
                <declaration name="numCols" type="int" line="7243"/>
                <declaration name="i" type="int" line="7244"/>
                <declaration name="map" type="Map&lt;String,Class&lt;?&gt;&gt;" line="7245"/>
                <declaration name="obj" type="Object" line="7246"/>
                <declaration name="mRows" type="int" line="7247"/>
                <scope line="7250">
                    <scope line="7251"/>
                    <scope line="7254">
                        <scope line="7256"/>
                    </scope>
                </scope>
                <scope line="7265"/>
                <scope line="7271"/>
                <scope line="7275"/>
                <scope line="7279"/>
                <scope line="7285"/>
                <scope line="7288"/>
                <scope line="7291"/>
                <scope line="7295"/>
                <scope line="7299"/>
                <scope line="7317"/>
                <scope line="7325">
                    <scope line="7328">
                        <scope line="7329"/>
                    </scope>
                    <scope line="7335">
                        <scope line="7336"/>
                    </scope>
                    <scope line="7343">
                        <scope line="7350"/>
                        <scope line="7352"/>
                        <scope line="7360"/>
                        <scope line="7362"/>
                        <scope line="7364"/>
                        <scope line="7366"/>
                        <scope line="7368"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="7385">
                The nextPage gets the next page, that is a &lt;code&gt;CachedRowSetImpl&lt;/code&gt; object
                  containing the number of rows specified by page size.                
                <return>
                    boolean value true indicating whether there are more pages to come and
                      false indicating that this is the last page.                    
                </return>
                <throws>
                    SQLException if an error occurs or this called before calling populate.                    
                </throws>
            </javadoc>
            <method name="nextPage" type="boolean" line="7392">
                <comment line="7398">
                    Fix for 6554186                    
                </comment>
                <scope line="7394"/>
                <scope line="7399"/>
                <scope line="7404"/>
            </method>
            <javadoc line="7410">
                This is the setter function for setting the size of the page, which specifies
                  how many rows have to be retrived at a time.                
                <param>
                    size which is the page size                    
                </param>
                <throws>
                    SQLException if size is less than zero or greater than max rows.                    
                </throws>
            </javadoc>
            <method name="setPageSize" type="void" line="7417">
                <params>
                    <param name="size" type="int"/>
                </params>
                <scope line="7418"/>
                <scope line="7421"/>
            </method>
            <javadoc line="7427">
                This is the getter function for the size of the page.                
                <return>
                    an integer that is the page size.                    
                </return>
            </javadoc>
            <method name="getPageSize" type="int" line="7432"/>
            <javadoc line="7437">
                Retrieves the data present in the page prior to the page from where it is
                  called.                
                <return>
                    boolean value true if it retrieves the previous page, flase if it
                      is on the first page.                    
                </return>
                <throws>
                    SQLException if it is called before populate is called or ResultSet
                      is of type <code>ResultSet.TYPE_FORWARD_ONLY</code> or if an error
                      occurs.                    
                </throws>
            </javadoc>
            <method name="previousPage" type="boolean" line="7446">
                <declaration name="pS" type="int" line="7447"/>
                <declaration name="mR" type="int" line="7448"/>
                <declaration name="rem" type="int" line="7449"/>
                <scope line="7454"/>
                <scope line="7458">
                    <scope line="7459"/>
                </scope>
                <scope line="7466"/>
                <scope line="7471"/>
                <scope line="7477">
                    <scope line="7479"/>
                    <scope line="7484"/>
                </scope>
                <scope line="7490">
                    <scope line="7492"/>
                    <scope line="7497"/>
                </scope>
            </method>
            <javadoc line="7683">
                Sets the status for the row on which the cursor is positioned. The insertFlag is used
                  to mention the toggle status for this row                
                <param>
                    insertFlag if it is true  - marks this row as inserted
                      if it is false - marks it as not a newly inserted row                    
                </param>
                <throws>
                    SQLException if an error occurs while doing this operation                    
                </throws>
            </javadoc>
            <method name="setRowInserted" type="void" line="7690">
                <params>
                    <param name="insertFlag" type="boolean"/>
                </params>
                <scope line="7697"/>
                <scope line="7699"/>
            </method>
            <javadoc line="7704">
                Retrieves the value of the designated &lt;code&gt;SQL XML&lt;/code&gt; parameter as a
                  &lt;code&gt;SQLXML&lt;/code&gt; object in the Java programming language.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    a SQLXML object that maps an SQL XML value                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="getSQLXML" type="SQLXML" line="7712">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="7716">
                Retrieves the value of the designated &lt;code&gt;SQL XML&lt;/code&gt; parameter as a
                  &lt;code&gt;SQLXML&lt;/code&gt; object in the Java programming language.                
                <param>
                    colName the name of the column from which to retrieve the value                    
                </param>
                <return>
                    a SQLXML object that maps an SQL XML value                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="getSQLXML" type="SQLXML" line="7723">
                <params>
                    <param name="colName" type="String"/>
                </params>
            </method>
            <javadoc line="7727">
                Retrieves the value of the designated column in the current row of this
                  &lt;code&gt;ResultSet&lt;/code&gt; object as a java.sql.RowId object in the Java
                  programming language.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <return>
                    the column value if the value is a SQL <code>NULL</code> the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="getRowId" type="RowId" line="7738">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="7742">
                Retrieves the value of the designated column in the current row of this
                  &lt;code&gt;ResultSet&lt;/code&gt; object as a java.sql.RowId object in the Java
                  programming language.                
                <param>
                    columnName the name of the column                    
                </param>
                <return>
                    the column value if the value is a SQL <code>NULL</code> the
                      value returned is <code>null</code>                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="getRowId" type="RowId" line="7753">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="7757">
                Updates the designated column with a &lt;code&gt;RowId&lt;/code&gt; value. The updater
                  methods are used to update column values in the current row or the insert
                  row. The updater methods do not update the underlying database; instead
                  the &lt;code&gt;updateRow&lt;code&gt; or &lt;code&gt;insertRow&lt;/code&gt; methods are called
                  to update the database.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    x the column value                    
                </param>
                <throws>
                    SQLException if a database access occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="updateRowId" type="void" line="7769">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="RowId"/>
                </params>
            </method>
            <javadoc line="7773">
                Updates the designated column with a &lt;code&gt;RowId&lt;/code&gt; value. The updater
                  methods are used to update column values in the current row or the insert
                  row. The updater methods do not update the underlying database; instead
                  the &lt;code&gt;updateRow&lt;code&gt; or &lt;code&gt;insertRow&lt;/code&gt; methods are called
                  to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    x the column value                    
                </param>
                <throws>
                    SQLException if a database access occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="updateRowId" type="void" line="7785">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="RowId"/>
                </params>
            </method>
            <javadoc line="7789">
                Retrieves the holdability of this ResultSet object                
                <return>
                    either ResultSet.HOLD_CURSORS_OVER_COMMIT or ResultSet.CLOSE_CURSORS_AT_COMMIT                    
                </return>
                <throws>
                    SQLException if a database error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="getHoldability" type="int" line="7795"/>
            <javadoc line="7799">
                Retrieves whether this ResultSet object has been closed. A ResultSet is closed if the
                  method close has been called on it, or if it is automatically closed.                
                <return>
                    true if this ResultSet object is closed; false if it is still open                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="isClosed" type="boolean" line="7806"/>
            <javadoc line="7810">
                This method is used for updating columns that support National Character sets.
                  It can be used for updating NCHAR,NVARCHAR and LONGNVARCHAR columns.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    nString the value for the column to be updated                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="updateNString" type="void" line="7818">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="nString" type="String"/>
                </params>
            </method>
            <javadoc line="7822">
                This method is used for updating columns that support National Character sets.
                  It can be used for updating NCHAR,NVARCHAR and LONGNVARCHAR columns.                
                <param>
                    columnName name of the Column                    
                </param>
                <param>
                    nString the value for the column to be updated                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="updateNString" type="void" line="7830">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="nString" type="String"/>
                </params>
            </method>
            <method name="updateNClob" type="void" line="7843">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="nClob" type="NClob"/>
                </params>
            </method>
            <javadoc line="7847">
                This method is used for updating SQL &lt;code&gt;NCLOB&lt;/code&gt;  type that maps
                  to &lt;code&gt;java.sql.Types.NCLOB&lt;/code&gt;                
                <param>
                    columnName name of the column                    
                </param>
                <param>
                    nClob the value for the column to be updated                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="7855">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="nClob" type="NClob"/>
                </params>
            </method>
            <javadoc line="7859">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;NClob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    i the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    a <code>NClob</code> object representing the SQL
                      <code>NCLOB</code> value in the specified column                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="getNClob" type="NClob" line="7870">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="7875">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a &lt;code&gt;NClob&lt;/code&gt; object
                  in the Java programming language.                
                <param>
                    colName the name of the column from which to retrieve the value                    
                </param>
                <return>
                    a <code>NClob</code> object representing the SQL <code>NCLOB</code>
                      value in the specified column                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    6.0                    
                </since>
            </javadoc>
            <method name="getNClob" type="NClob" line="7886">
                <params>
                    <param name="colName" type="String"/>
                </params>
            </method>
            <method name="unwrap" type="T" line="7890">
                <params>
                    <param name="iface" type="java.lang.Class<T>"/>
                </params>
            </method>
            <method name="isWrapperFor" type="boolean" line="7894">
                <params>
                    <param name="interfaces" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="7899">
                Sets the designated parameter to the given &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object. The driver converts this to an
                  SQL &lt;code&gt;XML&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    xmlObject a <code>SQLXML</code> object that maps an SQL <code>XML</code> value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setSQLXML" type="void" line="7907">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="xmlObject" type="SQLXML"/>
                </params>
            </method>
            <javadoc line="7911">
                Sets the designated parameter to the given &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object. The driver converts this to an
                  &lt;code&gt;SQL XML&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    xmlObject a <code>SQLXML</code> object that maps an <code>SQL XML</code> value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setSQLXML" type="void" line="7919">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="xmlObject" type="SQLXML"/>
                </params>
            </method>
            <javadoc line="7924">
                Sets the designated parameter to the given &lt;code&gt;java.sql.RowId&lt;/code&gt; object. The
                  driver converts this to a SQL &lt;code&gt;ROWID&lt;/code&gt; value when it sends it
                  to the database                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setRowId" type="void" line="7935">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="RowId"/>
                </params>
            </method>
            <javadoc line="7940">
                Sets the designated parameter to the given &lt;code&gt;java.sql.RowId&lt;/code&gt; object. The
                  driver converts this to a SQL &lt;code&gt;ROWID&lt;/code&gt; when it sends it to the
                  database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setRowId" type="void" line="7950">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="RowId"/>
                </params>
            </method>
            <javadoc line="7955">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; if a database access error occurs; or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="7977">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="value" type="Reader"/>
                </params>
            </method>
            <javadoc line="7982">
                Sets the designated parameter to a &lt;code&gt;java.sql.NClob&lt;/code&gt; object. The object
                  implements the &lt;code&gt;java.sql.NClob&lt;/code&gt; interface. This &lt;code&gt;NClob&lt;/code&gt;
                  object maps to a SQL &lt;code&gt;NCLOB&lt;/code&gt;.                
                <param>
                    parameterName the name of the column to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="7993">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="value" type="NClob"/>
                </params>
            </method>
            <javadoc line="7998">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.                
                <return>
                    a <code>java.io.Reader</code> object that contains the column
                      value; if the value is SQL <code>NULL</code>, the value returned is
                      <code>null</code> in the Java programming language.                    
                </return>
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNCharacterStream" type="java.io.Reader" line="8013">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="8018">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.                
                <param>
                    columnName the name of the column                    
                </param>
                <return>
                    a <code>java.io.Reader</code> object that contains the column
                      value; if the value is SQL <code>NULL</code>, the value returned is
                      <code>null</code> in the Java programming language                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNCharacterStream" type="java.io.Reader" line="8033">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="8038">
                Updates the designated column with a &lt;code&gt;java.sql.SQLXML&lt;/code&gt; value.
                  The updater
                  methods are used to update column values in the current row or the insert
                  row. The updater methods do not update the underlying database; instead
                  the &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;insertRow&lt;/code&gt; methods are called
                  to update the database.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    xmlObject the value for the column to be updated                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateSQLXML" type="void" line="8050">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="xmlObject" type="SQLXML"/>
                </params>
            </method>
            <javadoc line="8054">
                Updates the designated column with a &lt;code&gt;java.sql.SQLXML&lt;/code&gt; value.
                  The updater
                  methods are used to update column values in the current row or the insert
                  row. The updater methods do not update the underlying database; instead
                  the &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;insertRow&lt;/code&gt; methods are called
                  to update the database.                
                <param>
                    columnName the name of the column                    
                </param>
                <param>
                    xmlObject the column value                    
                </param>
                <throws>
                    SQLException if a database access occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateSQLXML" type="void" line="8067">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="xmlObject" type="SQLXML"/>
                </params>
            </method>
            <javadoc line="8071">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;String&lt;/code&gt; in the Java programming language.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNString" type="String" line="8085">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="8089">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;ResultSet&lt;/code&gt; object as
                  a &lt;code&gt;String&lt;/code&gt; in the Java programming language.
                  It is intended for use when
                  accessing  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.                
                <param>
                    columnName the SQL name of the column                    
                </param>
                <return>
                    the column value; if the value is SQL <code>NULL</code>, the
                      value returned is <code>null</code>                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNString" type="String" line="8103">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="8107">
                Updates the designated column with a character stream value, which will
                  have the specified number of bytes. The driver does the necessary conversion
                  from Java character format to the national character set in the database.
                  It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns.
                  The updater methods are used to update column values in the current row or
                  the insert row. The updater methods do not update the underlying database;
                  instead the updateRow or insertRow methods are called to update the database.                
                <param>
                    columnIndex - the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x - the new column value                    
                </param>
                <param>
                    length - the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNCharacterStream" type="void" line="8125">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8129">
                Updates the designated column with a character stream value, which will
                  have the specified number of bytes. The driver does the necessary conversion
                  from Java character format to the national character set in the database.
                  It is intended for use when updating NCHAR,NVARCHAR and LONGNVARCHAR columns.
                  The updater methods are used to update column values in the current row or
                  the insert row. The updater methods do not update the underlying database;
                  instead the updateRow or insertRow methods are called to update the database.                
                <param>
                    columnName - name of the Column                    
                </param>
                <param>
                    x - the new column value                    
                </param>
                <param>
                    length - the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNCharacterStream" type="void" line="8147">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.io.Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8151">
                Updates the designated column with a character stream value.   The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  It is intended for use when
                  updating  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNCharacterStream" type="void" line="8177">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.Reader"/>
                </params>
            </method>
            <javadoc line="8181">
                Updates the designated column with a character stream value.  The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  It is intended for use when
                  updating  &lt;code&gt;NCHAR&lt;/code&gt;,&lt;code&gt;NVARCHAR&lt;/code&gt;
                  and &lt;code&gt;LONGNVARCHAR&lt;/code&gt; columns.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object containing
                      the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code> or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNCharacterStream" type="void" line="8209">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                </params>
            </method>
            <javadoc line="8215">
                Updates the designated column using the given input stream, which
                  will have the specified number of bytes.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="8244">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="inputStream" type="InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8248">
                Updates the designated column using the given input stream, which
                  will have the specified number of bytes.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="8277">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="inputStream" type="InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8281">
                Updates the designated column using the given input stream.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateBlob&lt;/code&gt; which takes a length parameter.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="8312">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="inputStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="8316">
                Updates the designated column using the given input stream.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateBlob&lt;/code&gt; which takes a length parameter.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBlob" type="void" line="8347">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="inputStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="8351">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="8379">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8383">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="8411">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8415">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateClob&lt;/code&gt; which takes a length parameter.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="8445">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="8449">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateClob&lt;/code&gt; which takes a length parameter.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateClob" type="void" line="8480">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="8484">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set,
                      if a database access error occurs or
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="8514">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8518">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set;
                      if a database access error occurs or
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="8548">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8552">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateNClob&lt;/code&gt; which takes a length parameter.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set,
                      if a database access error occurs or
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="8584">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="8588">
                Updates the designated column using the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateNClob&lt;/code&gt; which takes a length parameter.
                  &lt;p&gt;
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; this method is called on a closed result set;
                      if a database access error occurs or
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateNClob" type="void" line="8621">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="8625">
                Updates the designated column with an ascii stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="8645">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8649">
                Updates the designated column with a binary stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="8669">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8672">
                Updates the designated column with a character stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="8692">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8696">
                Updates the designated column with a character stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object containing
                      the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="8718">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8721">
                Updates the designated column with an ascii stream value, which will have
                  the specified number of bytes..
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="8741">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8744">
                Updates the designated column with a binary stream value, which will have
                  the specified number of bytes.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the label is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the length of the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="8764">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8767">
                Updates the designated column with a binary stream value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="8788">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="8793">
                Updates the designated column with a binary stream value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="8815">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="8819">
                Updates the designated column with a character stream value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="8840">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.Reader"/>
                </params>
            </method>
            <javadoc line="8844">
                Updates the designated column with a character stream value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object containing
                      the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="8867">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                </params>
            </method>
            <javadoc line="8871">
                Updates the designated column with an ascii stream value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnIndex the first column is 1, the second is 2, ...                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="8892">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="8896">
                Updates the designated column with an ascii stream value.
                  The updater methods are used to update column values in the
                  current row or the insert row.  The updater methods do not
                  update the underlying database; instead the &lt;code&gt;updateRow&lt;/code&gt; or
                  &lt;code&gt;insertRow&lt;/code&gt; methods are called to update the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;updateAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    columnLabel the label for the column specified with the SQL AS clause.  If the SQL AS clause was not specified, then the la
                      bel is the name of the column                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      the result set concurrency is <code>CONCUR_READ_ONLY</code>
                      or this method is called on a closed result set                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="8918">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="8922">
                Sets the designated parameter to the given &lt;code&gt;java.net.URL&lt;/code&gt; value.
                  The driver converts this to an SQL &lt;code&gt;DATALINK&lt;/code&gt; value
                  when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the <code>java.net.URL</code> object to be set                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setURL" type="void" line="8934">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.net.URL"/>
                </params>
            </method>
            <javadoc line="8938">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement;
                      if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="8962">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="8966">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The &lt;code&gt;reader&lt;/code&gt; must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the length specified is less than zero;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="8990">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="8995">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="9017">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="9022">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The reader must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the length specified is less than zero;
                      if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="9045">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="9050">
                Sets the designated parameter to a &lt;code&gt;java.sql.NClob&lt;/code&gt; object. The driver converts this to
                  a
                  SQL &lt;code&gt;NCLOB&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="9061">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="value" type="NClob"/>
                </params>
            </method>
            <javadoc line="9066">
                Sets the designated paramter to the given &lt;code&gt;String&lt;/code&gt; object.
                  The driver converts this to a SQL &lt;code&gt;NCHAR&lt;/code&gt; or
                  &lt;code&gt;NVARCHAR&lt;/code&gt; or &lt;code&gt;LONGNVARCHAR&lt;/code&gt; value
                  (depending on the argument&apos;s
                  size relative to the driver&apos;s limits on &lt;code&gt;NVARCHAR&lt;/code&gt; values)
                  when it sends it to the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNString" type="void" line="9081">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="9086">
                Sets the designated paramter to the given &lt;code&gt;String&lt;/code&gt; object.
                  The driver converts this to a SQL &lt;code&gt;NCHAR&lt;/code&gt; or
                  &lt;code&gt;NVARCHAR&lt;/code&gt; or &lt;code&gt;LONGNVARCHAR&lt;/code&gt;                
                <param>
                    parameterName the name of the column to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNString" type="void" line="9098">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="9103">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="9116">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="value" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="9121">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.                
                <param>
                    parameterName the name of the column to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="9135">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="value" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="9139">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; if a database access error occurs; or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="9161">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="value" type="Reader"/>
                </params>
            </method>
            <javadoc line="9165">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the timestamp
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the timestamp                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTimestamp                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTimestamp" type="void" line="9187">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Timestamp"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="9191">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The &lt;code&gt;reader&lt;/code&gt; must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the length specified is less than zero;
                      a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="9213">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="9218">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Clob&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;CLOB&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="9231">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Clob"/>
                </params>
            </method>
            <javadoc line="9236">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs or this method is called on
                      a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="9257">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="9262">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value
                  using the default time zone of the virtual machine that is running
                  the application.
                  The driver converts this
                  to an SQL &lt;code&gt;DATE&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getDate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDate" type="void" line="9279">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Date"/>
                </params>
            </method>
            <javadoc line="9284">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;DATE&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the date
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the date                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getDate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDate" type="void" line="9306">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Date"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="9311">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;TIME&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTime                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTime" type="void" line="9326">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Time"/>
                </params>
            </method>
            <javadoc line="9331">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIME&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the time
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the time                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTime                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTime" type="void" line="9353">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Time"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="9357">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs, this method is called on
                      a closed <code>PreparedStatement</code>or if parameterIndex does not correspond to a parameter
                      marker in the SQL statement                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="9379">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="9383">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The reader must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if a database access error occurs, this method is called on
                      a closed <code>PreparedStatement</code>, if parameterIndex does not correspond to a parameter
                      marker in the SQL statement, or if the length specified is less than zero.                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="9403">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="9408">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.  The inputstream must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream, int)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1,
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <throws>
                    SQLException if a database access error occurs,
                      this method is called on a closed <code>PreparedStatement</code>,
                      if parameterIndex does not correspond
                      to a parameter marker in the SQL statement,  if the length specified
                      is less than zero or if the number of bytes in the inputstream does not match
                      the specfied length.                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="9433">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="inputStream" type="InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="9438">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBlob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1,
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs,
                      this method is called on a closed <code>PreparedStatement</code> or
                      if parameterIndex does not correspond
                      to a parameter marker in the SQL statement,                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="9463">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="inputStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="9468">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.  The &lt;code&gt;inputstream&lt;/code&gt; must contain  the number
                  of characters specified by length, otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream, int)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <throws>
                    SQLException  if parameterIndex does not correspond
                      to a parameter marker in the SQL statement,  or if the length specified
                      is less than zero; if the number of bytes in the inputstream does not match
                      the specfied length; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="9495">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="inputStream" type="InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="9500">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Blob&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;BLOB&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="9513">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Blob"/>
                </params>
            </method>
            <javadoc line="9518">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBlob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="9540">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="inputStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="9544">
                Sets the value of the designated parameter with the given object. The second
                  argument must be an object type; for integral values, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used.
                  &lt;p&gt;The given Java object will be converted to the given targetSqlType
                  before being sent to the database.
                  If the object has a custom mapping (is of a class implementing the
                  interface &lt;code&gt;SQLData&lt;/code&gt;),
                  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt; to write it
                  to the SQL data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;,
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;P&gt;
                  Note that this method may be used to pass datatabase-
                  specific abstract data types.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in java.sql.Types) to be
                      sent to the database. The scale argument may further qualify this type.                    
                </param>
                <param>
                    scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,
                      this is the number of digits after the decimal point.  For all other
                      types, this value will be ignored.                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>targetSqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    Types                    
                </see>
                <see>
                    #getObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="9586">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Object"/>
                    <param name="targetSqlType" type="int"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="9592">
                Sets the value of the designated parameter with the given object.
                  This method is like the method &lt;code&gt;setObject&lt;/code&gt;
                  above, except that it assumes a scale of zero.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in java.sql.Types) to be
                      sent to the database                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>targetSqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    #getObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="9614">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Object"/>
                    <param name="targetSqlType" type="int"/>
                </params>
            </method>
            <javadoc line="9619">
                Sets the value of the designated parameter with the given object.
                  The second parameter must be of type &lt;code&gt;Object&lt;/code&gt;; therefore, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used for built-in types.
                  &lt;p&gt;The JDBC specification specifies a standard mapping from
                  Java &lt;code&gt;Object&lt;/code&gt; types to SQL types.  The given argument
                  will be converted to the corresponding SQL type before being
                  sent to the database.
                  &lt;p&gt;Note that this method may be used to pass datatabase-
                  specific abstract data types, by using a driver-specific Java
                  type.
                  If the object is of a class implementing the interface &lt;code&gt;SQLData&lt;/code&gt;,
                  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;
                  to write it to the SQL data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;,
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;P&gt;
                  This method throws an exception if there is an ambiguity, for example, if the
                  object is of a class implementing more than one of the interfaces named above.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      this method is called on a closed <code>CallableStatement</code> or if the given
                      <code>Object</code> parameter is ambiguous                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="9655">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <javadoc line="9659">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="9682">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="9687">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="9709">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="9714">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object that
                      contains the UNICODE data used as the designated parameter                    
                </param>
                <param>
                    length the number of characters in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="9739">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="9744">
                Sets the designated parameter to the given input stream.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="9767">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="9772">
                Sets the designated parameter to the given input stream.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the
                  stream as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="9794">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="9800">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object that contains the
                      Unicode data                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="9825">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                </params>
            </method>
            <javadoc line="9829">
                Sets the designated parameter to the given
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; value.
                  The driver converts this to an SQL &lt;code&gt;NUMERIC&lt;/code&gt; value when
                  it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getBigDecimal                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBigDecimal" type="void" line="9844">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="BigDecimal"/>
                </params>
            </method>
            <javadoc line="9850">
                Sets the designated parameter to the given Java &lt;code&gt;String&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;LONGVARCHAR&lt;/code&gt; value
                  (depending on the argument&apos;s
                  size relative to the driver&apos;s limits on &lt;code&gt;VARCHAR&lt;/code&gt; values)
                  when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getString                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setString" type="void" line="9867">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="String"/>
                </params>
            </method>
            <javadoc line="9873">
                Sets the designated parameter to the given Java array of bytes.
                  The driver converts this to an SQL &lt;code&gt;VARBINARY&lt;/code&gt; or
                  &lt;code&gt;LONGVARBINARY&lt;/code&gt; (depending on the argument&apos;s size relative
                  to the driver&apos;s limits on &lt;code&gt;VARBINARY&lt;/code&gt; values) when it sends
                  it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getBytes                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBytes" type="void" line="9889">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="9895">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value.
                  The driver
                  converts this to an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value when it sends it to the
                  database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTimestamp                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTimestamp" type="void" line="9911">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Timestamp"/>
                </params>
            </method>
            <javadoc line="9915">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; You must specify the parameter&apos;s SQL type.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    sqlType the SQL type code defined in <code>java.sql.Types</code>                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setNull" type="void" line="9928">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="sqlType" type="int"/>
                </params>
            </method>
            <javadoc line="9933">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  This version of the method &lt;code&gt;setNull&lt;/code&gt; should
                  be used for user-defined types and REF type parameters.  Examples
                  of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
                  named array types.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; To be portable, applications must give the
                  SQL type code and the fully-qualified SQL type name when specifying
                  a NULL user-defined or REF parameter.  In the case of a user-defined type
                  the name is the type name of the parameter itself.  For a REF
                  parameter, the name is the type name of the referenced type.  If
                  a JDBC driver does not need the type code or type name information,
                  it may ignore it.
                  Although it is intended for user-defined and Ref parameters,
                  this method may be used to set a null parameter of any JDBC type.
                  If the parameter does not have a user-defined or REF type, the given
                  typeName is ignored.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    sqlType a value from <code>java.sql.Types</code>                    
                </param>
                <param>
                    typeName the fully-qualified name of an SQL user-defined type;
                      ignored if the parameter is not a user-defined type or
                      SQL <code>REF</code> value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setNull" type="void" line="9966">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="sqlType" type="int"/>
                    <param name="typeName" type="String"/>
                </params>
            </method>
            <javadoc line="9972">
                Sets the designated parameter to the given Java &lt;code&gt;boolean&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;BIT&lt;/code&gt; or &lt;code&gt;BOOLEAN&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #getBoolean                    
                </see>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBoolean" type="void" line="9986">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="boolean"/>
                </params>
            </method>
            <javadoc line="9992">
                Sets the designated parameter to the given Java &lt;code&gt;byte&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;TINYINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getByte                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setByte" type="void" line="10006">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="10012">
                Sets the designated parameter to the given Java &lt;code&gt;short&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;SMALLINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getShort                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setShort" type="void" line="10026">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="short"/>
                </params>
            </method>
            <javadoc line="10031">
                Sets the designated parameter to the given Java &lt;code&gt;int&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;INTEGER&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getInt                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setInt" type="void" line="10045">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="10050">
                Sets the designated parameter to the given Java &lt;code&gt;long&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;BIGINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getLong                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setLong" type="void" line="10064">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="long"/>
                </params>
            </method>
            <javadoc line="10069">
                Sets the designated parameter to the given Java &lt;code&gt;float&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;FLOAT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getFloat                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setFloat" type="void" line="10083">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="float"/>
                </params>
            </method>
            <javadoc line="10088">
                Sets the designated parameter to the given Java &lt;code&gt;double&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;DOUBLE&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getDouble                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDouble" type="void" line="10102">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="10106">
                This method re populates the resBundle
                  during the deserialization process                
            </javadoc>
            <method name="readObject" type="void" line="10111">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <comment line="10113">
                    Default state initialization happens here                    
                </comment>
                <comment line="10115">
                    Initialization of transient Res Bundle happens here .                    
                </comment>
                <scope line="10115"/>
                <scope line="10117"/>
            </method>
            <method name="getObject" type="T" line="10124">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="type" type="Class<T>"/>
                </params>
            </method>
            <method name="getObject" type="T" line="10128">
                <params>
                    <param name="columnLabel" type="String"/>
                    <param name="type" type="Class<T>"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="10132"/>
        </class>
    </source>