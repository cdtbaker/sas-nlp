<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.rowset.internal">
        <import package="java.util"/>
        <import package="org.xml.sax"/>
        <import package="org.xml.sax.helpers"/>
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="javax.sql.rowset"/>
        <import package="com.sun.rowset"/>
        <import package="java.io.IOException"/>
        <import package="java.text.MessageFormat"/>
        <class name="XmlReaderContentHandler" line="11">
            <extends class="DefaultHandler"/>
            <javadoc line="11">
                The document handler that receives parse events that an XML parser sends while it
                  is parsing an XML document representing a &lt;code&gt;WebRowSet&lt;/code&gt; object. The
                  parser sends strings to this &lt;code&gt;XmlReaderContentHandler&lt;/code&gt; and then uses
                  these strings as arguments for the &lt;code&gt;XmlReaderContentHandler&lt;/code&gt; methods
                  it invokes. The final goal of the SAX parser working with an
                  &lt;code&gt;XmlReaderContentHandler&lt;/code&gt; object is to read an XML document that represents
                  a &lt;code&gt;RowSet&lt;/code&gt; object.
                  &lt;P&gt;
                  A rowset consists of its properties, metadata, and data values. An XML document
                  representating a rowset includes the values in these three categories along with
                  appropriate XML tags to identify them.  It also includes a top-level XML tag for
                  the rowset and three section tags identifying the three categories of values.
                  &lt;P&gt;
                  The tags in an XML document are hierarchical.
                  This means that the top-level tag, &lt;code&gt;RowSet&lt;/code&gt;, is
                  followed by the three sections with appropriate tags, which are in turn each
                  followed by their constituent elements. For example, the &lt;code&gt;properties&lt;/code&gt;
                  element will be followed by an element for each of the properties listed in
                  in this &lt;code&gt;XmlReaderContentHandler&lt;/code&gt; object&apos;s &lt;code&gt;properties&lt;/code&gt;
                  field.  The content of the other two fields, &lt;code&gt;colDef&lt;/code&gt;, which lists
                  the rowset&apos;s metadata elements, and &lt;code&gt;data&lt;/code&gt;, which lists the rowset&apos;s data
                  elements, are handled similarly .
                  &lt;P&gt;
                  This implementation of &lt;code&gt;XmlReaderContentHandler&lt;/code&gt; provides the means for the
                  parser to determine which elements need to have a value set and then to set
                  those values. The methods in this class are all called by the parser; an
                  application programmer never calls them directly.                
            </javadoc>
            <declaration name="propMap" type="HashMap" line="41"/>
            <declaration name="colDefMap" type="HashMap" line="42"/>
            <declaration name="dataMap" type="HashMap" line="43"/>
            <declaration name="typeMap" type="HashMap" line="44"/>
            <declaration name="updates" type="Vector" line="45"/>
            <declaration name="keyCols" type="Vector" line="46"/>
            <declaration name="columnValue" type="String" line="47"/>
            <declaration name="propertyValue" type="String" line="48"/>
            <declaration name="metaDataValue" type="String" line="49"/>
            <declaration name="tag" type="int" line="50"/>
            <declaration name="state" type="int" line="51"/>
            <declaration name="rs" type="WebRowSetImpl" line="52"/>
            <declaration name="nullVal" type="boolean" line="53"/>
            <declaration name="emptyStringVal" type="boolean" line="54"/>
            <declaration name="md" type="RowSetMetaData" line="55"/>
            <declaration name="idx" type="int" line="56"/>
            <declaration name="lastval" type="String" line="57"/>
            <declaration name="Key_map" type="String" line="58"/>
            <declaration name="Value_map" type="String" line="59"/>
            <declaration name="tempStr" type="String" line="60"/>
            <declaration name="tempUpdate" type="String" line="61"/>
            <declaration name="tempCommand" type="String" line="62"/>
            <declaration name="upd" type="Object[]" line="63"/>
            <declaration name="properties" type="String[]" line="64"/>
            <javadoc line="64">
                A list of the properties for a rowset. There is a constant defined to
                  correspond to each of these properties so that a &lt;code&gt;HashMap&lt;/code&gt;
                  object can be created to map the properties, which are strings, to
                  the constants, which are integers.                
            </javadoc>
            <declaration name="CommandTag" type="int" line="71"/>
            <javadoc line="71">
                A constant representing the tag for the command property.                
            </javadoc>
            <declaration name="ConcurrencyTag" type="int" line="75"/>
            <javadoc line="75">
                A constant representing the tag for the concurrency property.                
            </javadoc>
            <declaration name="DatasourceTag" type="int" line="79"/>
            <javadoc line="79">
                A constant representing the tag for the datasource property.                
            </javadoc>
            <declaration name="EscapeProcessingTag" type="int" line="83"/>
            <javadoc line="83">
                A constant representing the tag for the escape-processing property.                
            </javadoc>
            <declaration name="FetchDirectionTag" type="int" line="87"/>
            <javadoc line="87">
                A constant representing the tag for the fetch-direction property.                
            </javadoc>
            <declaration name="FetchSizeTag" type="int" line="91"/>
            <javadoc line="91">
                A constant representing the tag for the fetch-size property.                
            </javadoc>
            <declaration name="IsolationLevelTag" type="int" line="95"/>
            <javadoc line="95">
                A constant representing the tag for the isolation-level property                
            </javadoc>
            <declaration name="KeycolsTag" type="int" line="99"/>
            <javadoc line="99">
                A constant representing the tag for the key-columns property.                
            </javadoc>
            <declaration name="MapTag" type="int" line="103"/>
            <javadoc line="103">
                A constant representing the tag for the map property.
                  This map is the type map that specifies the custom mapping
                  for an SQL user-defined type.                
            </javadoc>
            <declaration name="MaxFieldSizeTag" type="int" line="109"/>
            <javadoc line="109">
                A constant representing the tag for the max-field-size property.                
            </javadoc>
            <declaration name="MaxRowsTag" type="int" line="113"/>
            <javadoc line="113">
                A constant representing the tag for the max-rows property.                
            </javadoc>
            <declaration name="QueryTimeoutTag" type="int" line="117"/>
            <javadoc line="117">
                A constant representing the tag for the query-timeout property.                
            </javadoc>
            <declaration name="ReadOnlyTag" type="int" line="121"/>
            <javadoc line="121">
                A constant representing the tag for the read-only property.                
            </javadoc>
            <declaration name="RowsetTypeTag" type="int" line="125"/>
            <javadoc line="125">
                A constant representing the tag for the rowset-type property.                
            </javadoc>
            <declaration name="ShowDeletedTag" type="int" line="129"/>
            <javadoc line="129">
                A constant representing the tag for the show-deleted property.                
            </javadoc>
            <declaration name="TableNameTag" type="int" line="133"/>
            <javadoc line="133">
                A constant representing the tag for the table-name property.                
            </javadoc>
            <declaration name="UrlTag" type="int" line="137"/>
            <javadoc line="137">
                A constant representing the tag for the URL property.                
            </javadoc>
            <declaration name="PropNullTag" type="int" line="141"/>
            <javadoc line="141">
                A constant representing the tag for the null property.                
            </javadoc>
            <declaration name="PropColumnTag" type="int" line="145"/>
            <javadoc line="145">
                A constant representing the tag for the column property.                
            </javadoc>
            <declaration name="PropTypeTag" type="int" line="149"/>
            <javadoc line="149">
                A constant representing the tag for the type property.                
            </javadoc>
            <declaration name="PropClassTag" type="int" line="153"/>
            <javadoc line="153">
                A constant representing the tag for the class property.                
            </javadoc>
            <declaration name="SyncProviderTag" type="int" line="157"/>
            <javadoc line="157">
                A constant representing the tag for the sync-provider.                
            </javadoc>
            <declaration name="SyncProviderNameTag" type="int" line="161"/>
            <javadoc line="161">
                A constant representing the tag for the sync-provider
                  name                
            </javadoc>
            <declaration name="SyncProviderVendorTag" type="int" line="166"/>
            <javadoc line="166">
                A constant representing the tag for the sync-provider
                  vendor tag.                
            </javadoc>
            <declaration name="SyncProviderVersionTag" type="int" line="171"/>
            <javadoc line="171">
                A constant representing the tag for the sync-provider
                  version tag.                
            </javadoc>
            <declaration name="SyncProviderGradeTag" type="int" line="176"/>
            <javadoc line="176">
                A constant representing the tag for the sync-provider
                  grade tag.                
            </javadoc>
            <declaration name="DataSourceLock" type="int" line="181"/>
            <javadoc line="181">
                A constant representing the tag for the data source lock.                
            </javadoc>
            <declaration name="colDef" type="String[]" line="185"/>
            <javadoc line="185">
                A listing of the kinds of metadata information available about
                  the columns in a &lt;code&gt;WebRowSet&lt;/code&gt; object.                
            </javadoc>
            <declaration name="ColumnCountTag" type="int" line="190"/>
            <javadoc line="190">
                A constant representing the tag for column-count.                
            </javadoc>
            <declaration name="ColumnDefinitionTag" type="int" line="194"/>
            <javadoc line="194">
                A constant representing the tag for column-definition.                
            </javadoc>
            <declaration name="ColumnIndexTag" type="int" line="198"/>
            <javadoc line="198">
                A constant representing the tag for column-index.                
            </javadoc>
            <declaration name="AutoIncrementTag" type="int" line="202"/>
            <javadoc line="202">
                A constant representing the tag for auto-increment.                
            </javadoc>
            <declaration name="CaseSensitiveTag" type="int" line="206"/>
            <javadoc line="206">
                A constant representing the tag for case-sensitive.                
            </javadoc>
            <declaration name="CurrencyTag" type="int" line="210"/>
            <javadoc line="210">
                A constant representing the tag for currency.                
            </javadoc>
            <declaration name="NullableTag" type="int" line="214"/>
            <javadoc line="214">
                A constant representing the tag for nullable.                
            </javadoc>
            <declaration name="SignedTag" type="int" line="218"/>
            <javadoc line="218">
                A constant representing the tag for signed.                
            </javadoc>
            <declaration name="SearchableTag" type="int" line="222"/>
            <javadoc line="222">
                A constant representing the tag for searchable.                
            </javadoc>
            <declaration name="ColumnDisplaySizeTag" type="int" line="226"/>
            <javadoc line="226">
                A constant representing the tag for column-display-size.                
            </javadoc>
            <declaration name="ColumnLabelTag" type="int" line="230"/>
            <javadoc line="230">
                A constant representing the tag for column-label.                
            </javadoc>
            <declaration name="ColumnNameTag" type="int" line="234"/>
            <javadoc line="234">
                A constant representing the tag for column-name.                
            </javadoc>
            <declaration name="SchemaNameTag" type="int" line="238"/>
            <javadoc line="238">
                A constant representing the tag for schema-name.                
            </javadoc>
            <declaration name="ColumnPrecisionTag" type="int" line="242"/>
            <javadoc line="242">
                A constant representing the tag for column-precision.                
            </javadoc>
            <declaration name="ColumnScaleTag" type="int" line="246"/>
            <javadoc line="246">
                A constant representing the tag for column-scale.                
            </javadoc>
            <declaration name="MetaTableNameTag" type="int" line="250"/>
            <javadoc line="250">
                A constant representing the tag for table-name.                
            </javadoc>
            <declaration name="CatalogNameTag" type="int" line="254"/>
            <javadoc line="254">
                A constant representing the tag for catalog-name.                
            </javadoc>
            <declaration name="ColumnTypeTag" type="int" line="258"/>
            <javadoc line="258">
                A constant representing the tag for column-type.                
            </javadoc>
            <declaration name="ColumnTypeNameTag" type="int" line="262"/>
            <javadoc line="262">
                A constant representing the tag for column-type-name.                
            </javadoc>
            <declaration name="MetaNullTag" type="int" line="266"/>
            <javadoc line="266">
                A constant representing the tag for null.                
            </javadoc>
            <declaration name="data" type="String[]" line="270"/>
            <declaration name="RowTag" type="int" line="271"/>
            <declaration name="ColTag" type="int" line="272"/>
            <declaration name="InsTag" type="int" line="273"/>
            <declaration name="DelTag" type="int" line="274"/>
            <declaration name="InsDelTag" type="int" line="275"/>
            <declaration name="UpdTag" type="int" line="276"/>
            <declaration name="NullTag" type="int" line="277"/>
            <declaration name="EmptyStringTag" type="int" line="278"/>
            <declaration name="INITIAL" type="int" line="279"/>
            <javadoc line="279">
                A constant indicating the state of this &lt;code&gt;XmlReaderContentHandler&lt;/code&gt;
                  object in which it has not yet been called by the SAX parser and therefore
                  has no indication of what type of input to expect from the parser next.
                  &lt;P&gt;
                  The state is set to &lt;code&gt;INITIAL&lt;/code&gt; at the end of each
                  section, which allows the sections to appear in any order and
                  still be parsed correctly (except that metadata must be
                  set before data values can be set).                
            </javadoc>
            <declaration name="PROPERTIES" type="int" line="290"/>
            <javadoc line="290">
                A constant indicating the state in which this &lt;code&gt;XmlReaderContentHandler&lt;/code&gt;
                  object expects the next input received from the
                  SAX parser to be a string corresponding to one of the elements in
                  &lt;code&gt;properties&lt;/code&gt;.                
            </javadoc>
            <declaration name="METADATA" type="int" line="297"/>
            <javadoc line="297">
                A constant indicating the state in which this &lt;code&gt;XmlReaderContentHandler&lt;/code&gt;
                  object expects the next input received from the
                  SAX parser to be a string corresponding to one of the elements in
                  &lt;code&gt;colDef&lt;/code&gt;.                
            </javadoc>
            <declaration name="DATA" type="int" line="304"/>
            <javadoc line="304">
                A constant indicating the state in which this &lt;code&gt;XmlReaderContentHandler&lt;/code&gt;
                  object expects the next input received from the
                  SAX parser to be a string corresponding to one of the elements in
                  &lt;code&gt;data&lt;/code&gt;.                
            </javadoc>
            <declaration name="resBundle" type="JdbcRowSetResourceBundle" line="311"/>
            <javadoc line="312">
                Constructs a new &lt;code&gt;XmlReaderContentHandler&lt;/code&gt; object that will
                  assist the SAX parser in reading a &lt;code&gt;WebRowSet&lt;/code&gt; object in the
                  format of an XML document. In addition to setting some default values,
                  this constructor creates three &lt;code&gt;HashMap&lt;/code&gt; objects, one for
                  properties, one for metadata, and one for data.  These hash maps map the
                  strings sent by the SAX parser to integer constants so that they can be
                  compared more efficiently in &lt;code&gt;switch&lt;/code&gt; statements.                
                <param>
                    r the <code>RowSet</code> object in XML format that will be read                    
                </param>
            </javadoc>
            <method name="XmlReaderContentHandler" type="constructor" line="322">
                <params>
                    <param name="r" type="RowSet"/>
                </params>
                <scope line="334"/>
                <scope line="337"/>
            </method>
            <javadoc line="341">
                Creates and initializes three new &lt;code&gt;HashMap&lt;/code&gt; objects that map
                  the strings returned by the SAX parser to &lt;code&gt;Integer&lt;/code&gt;
                  objects.  The strings returned by the parser will match the strings that
                  are array elements in this &lt;code&gt;XmlReaderContentHandler&lt;/code&gt; object&apos;s
                  &lt;code&gt;properties&lt;/code&gt;, &lt;code&gt;colDef&lt;/code&gt;, or &lt;code&gt;data&lt;/code&gt;
                  fields. For each array element in these fields, there is a corresponding
                  constant defined. It is to these constants that the strings are mapped.
                  In the &lt;code&gt;HashMap&lt;/code&gt; objects, the string is the key, and the
                  integer is the value.
                  &lt;P&gt;
                  The purpose of the mapping is to make comparisons faster.  Because comparing
                  numbers is more efficient than comparing strings, the strings returned
                  by the parser are mapped to integers, which can then be used in a
                  &lt;code&gt;switch&lt;/code&gt; statement.                
            </javadoc>
            <method name="initMaps" type="void" line="357">
                <declaration name="items" type="int" line="358"/>
                <scope line="361"/>
                <scope line="366"/>
                <scope line="371"/>
            </method>
            <method name="startDocument" type="void" line="376"/>
            <method name="endDocument" type="void" line="378"/>
            <javadoc line="380">
                Sets this &lt;code&gt;XmlReaderContentHandler&lt;/code&gt; object&apos;s &lt;code&gt;tag&lt;/code&gt;
                  field if the given name is the key for a tag and this object&apos;s state
                  is not &lt;code&gt;INITIAL&lt;/code&gt;.  The field is set
                  to the constant that corresponds to the given element name.
                  If the state is &lt;code&gt;INITIAL&lt;/code&gt;, the state is set to the given
                  name, which will be one of the sections &lt;code&gt;PROPERTIES&lt;/code&gt;,
                  &lt;code&gt;METADATA&lt;/code&gt;, or &lt;code&gt;DATA&lt;/code&gt;.  In either case, this
                  method puts this document handler in the proper state for calling
                  the method &lt;code&gt;endElement&lt;/code&gt;.
                  &lt;P&gt;
                  If the state is &lt;code&gt;DATA&lt;/code&gt; and the tag is &lt;code&gt;RowTag&lt;/code&gt;,
                  &lt;code&gt;DelTag&lt;/code&gt;, or &lt;code&gt;InsTag&lt;/code&gt;, this method moves the
                  rowset&apos;s cursor to the insert row and sets this
                  &lt;code&gt;XmlReaderContentHandler&lt;/code&gt; object&apos;s &lt;code&gt;idx&lt;/code&gt;
                  field to &lt;code&gt;0&lt;/code&gt; so that it will be in the proper
                  state when the parser calls the method &lt;code&gt;endElement&lt;/code&gt;.                
                <param>
                    lName the name of the element; either (1) one of the array
                      elements in the fields <code>properties</code>,
                      <code>colDef</code>, or <code>data</code> or
                      (2) one of the <code>RowSet</code> elements
                      <code>"properties"</code>, <code>"metadata"</code>, or
                      <code>"data"</code>                    
                </param>
                <param>
                    attributes <code>org.xml.sax.AttributeList</code> objects that are
                      attributes of the named section element; may be <code>null</code>
                      if there are no attributes, which is the case for
                      <code>WebRowSet</code> objects                    
                </param>
                <exception>
                    SAXException if a general SAX error occurs                    
                </exception>
            </javadoc>
            <method name="startElement" type="void" line="409">
                <params>
                    <param name="uri" type="String"/>
                    <param name="lName" type="String"/>
                    <param name="qName" type="String"/>
                    <param name="attributes" type="Attributes"/>
                </params>
                <declaration name="tag" type="int" line="410"/>
                <declaration name="name" type="String" line="411"/>
                <scope line="428"/>
                <scope line="431"/>
                <scope line="434"/>
                <scope line="437"/>
                <scope line="440"/>
                <scope line="443">
                    <scope line="445">
                        <scope line="447"/>
                        <scope line="450"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="460">
                Sets the value for the given element if &lt;code&gt;name&lt;/code&gt; is one of
                  the array elements in the fields &lt;code&gt;properties&lt;/code&gt;,
                  &lt;code&gt;colDef&lt;/code&gt;, or &lt;code&gt;data&lt;/code&gt; and this
                  &lt;code&gt;XmlReaderContentHandler&lt;/code&gt; object&apos;s state is not
                  &lt;code&gt;INITIAL&lt;/code&gt;. If the state is &lt;code&gt;INITIAL&lt;/code&gt;,
                  this method does nothing.
                  &lt;P&gt;
                  If the state is &lt;code&gt;METADATA&lt;/code&gt; and
                  the argument supplied is &lt;code&gt;&quot;metadata&quot;&lt;/code&gt;, the rowset&apos;s
                  metadata is set. If the state is &lt;code&gt;PROPERTIES&lt;/code&gt;, the
                  appropriate property is set using the given name to determine
                  the appropriate value. If the state is &lt;code&gt;DATA&lt;/code&gt; and
                  the argument supplied is &lt;code&gt;&quot;data&quot;&lt;/code&gt;, this method sets
                  the state to &lt;code&gt;INITIAL&lt;/code&gt; and returns.  If the argument
                  supplied is one of the elements in the field &lt;code&gt;data&lt;/code&gt;,
                  this method makes the appropriate changes to the rowset&apos;s data.                
                <param>
                    lName the name of the element; either (1) one of the array
                      elements in the fields <code>properties</code>,
                      <code>colDef</code>, or <code>data</code> or
                      (2) one of the <code>RowSet</code> elements
                      <code>"properties"</code>, <code>"metadata"</code>, or
                      <code>"data"</code>                    
                </param>
                <exception>
                    SAXException if a general SAX error occurs                    
                </exception>
            </javadoc>
            <method name="endElement" type="void" line="485">
                <params>
                    <param name="uri" type="String"/>
                    <param name="lName" type="String"/>
                    <param name="qName" type="String"/>
                </params>
                <declaration name="tag" type="int" line="486"/>
                <declaration name="name" type="String" line="487"/>
                <scope line="491"/>
                <scope line="495">
                    <scope line="499">
                        <declaration name="i" type="int" line="500"/>
                    </scope>
                    <scope line="506"/>
                    <scope line="509"/>
                    <scope line="519"/>
                    <scope line="523"/>
                </scope>
                <scope line="527"/>
                <scope line="534">
                    <scope line="535"/>
                    <scope line="539"/>
                </scope>
                <scope line="543">
                    <scope line="544">
                        <scope line="545"/>
                        <scope line="549"/>
                    </scope>
                    <scope line="553"/>
                </scope>
                <scope line="561"/>
                <scope line="565"/>
                <scope line="568"/>
                <scope line="573">
                    <scope line="575"/>
                    <scope line="579"/>
                </scope>
                <scope line="584"/>
                <scope line="589"/>
                <scope line="596"/>
                <scope line="601"/>
                <scope line="608"/>
                <scope line="613"/>
                <scope line="619"/>
                <scope line="624"/>
                <scope line="631"/>
                <scope line="636">
                    <scope line="637"/>
                    <scope line="641"/>
                    <scope line="645"/>
                </scope>
                <scope line="649"/>
            </method>
            <method name="applyUpdates" type="void" line="660">
                <scope line="661">
                    <scope line="662">
                        <declaration name="upd" type="Object" line="663"/>
                        <declaration name="i" type="Iterator" line="664"/>
                        <scope line="665">
                            <scope line="668"/>
                        </scope>
                    </scope>
                    <scope line="674"/>
                </scope>
            </method>
            <javadoc line="680">
                Sets a property, metadata, or data value with the characters in
                  the given array of characters, starting with the array element
                  indicated by &lt;code&gt;start&lt;/code&gt; and continuing for &lt;code&gt;length&lt;/code&gt;
                  number of characters.
                  &lt;P&gt;
                  The SAX parser invokes this method and supplies
                  the character array, start position, and length parameter values it
                  got from parsing the XML document.  An application programmer never
                  invokes this method directly.                
                <param>
                    ch an array of characters supplied by the SAX parser, all or part of
                      which will be used to set a value                    
                </param>
                <param>
                    start the position in the given array at which to start                    
                </param>
                <param>
                    length the number of consecutive characters to use                    
                </param>
            </javadoc>
            <method name="characters" type="void" line="695">
                <params>
                    <param name="ch" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="696">
                    <scope line="702"/>
                    <scope line="705"/>
                    <scope line="710"/>
                </scope>
                <scope line="722"/>
            </method>
            <method name="setState" type="void" line="726">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="727"/>
                <scope line="730"/>
                <scope line="734"/>
                <scope line="738"/>
            </method>
            <javadoc line="743">
                Retrieves the current state of this &lt;code&gt;XmlReaderContentHandler&lt;/code&gt;
                  object&apos;s rowset, which is stored in the document handler&apos;s
                  &lt;code&gt;state&lt;/code&gt; field.                
                <return>
                    one of the following constants:
                      <code>XmlReaderContentHandler.PROPERTIES</code>
                      <code>XmlReaderContentHandler.METADATA</code>
                      <code>XmlReaderContentHandler.DATA</code>
                      <code>XmlReaderContentHandler.INITIAL</code>                    
                </return>
            </javadoc>
            <method name="getState" type="int" line="753"/>
            <method name="setTag" type="void" line="756">
                <params>
                    <param name="t" type="int"/>
                </params>
            </method>
            <method name="getTag" type="int" line="759"/>
            <method name="setNullValue" type="void" line="762">
                <params>
                    <param name="n" type="boolean"/>
                </params>
            </method>
            <method name="getNullValue" type="boolean" line="765"/>
            <method name="setEmptyStringValue" type="void" line="768">
                <params>
                    <param name="e" type="boolean"/>
                </params>
            </method>
            <method name="getEmptyStringValue" type="boolean" line="771"/>
            <method name="getStringValue" type="String" line="774">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getIntegerValue" type="int" line="777">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getBooleanValue" type="boolean" line="780">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getBigDecimalValue" type="java.math.BigDecimal" line="783">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getByteValue" type="byte" line="786">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getShortValue" type="short" line="789">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getLongValue" type="long" line="792">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getFloatValue" type="float" line="795">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getDoubleValue" type="double" line="798">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getBinaryValue" type="byte[]" line="801">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getDateValue" type="java.sql.Date" line="804">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getTimeValue" type="java.sql.Time" line="807">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getTimestampValue" type="java.sql.Timestamp" line="810">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="setPropertyValue" type="void" line="813">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="nullValue" type="boolean" line="814"/>
                <scope line="869"/>
                <scope line="872">
                    <declaration name="strType" type="String" line="873"/>
                    <declaration name="iType" type="int" line="874"/>
                    <scope line="875"/>
                    <scope line="878"/>
                    <scope line="881"/>
                </scope>
                <scope line="900"/>
                <scope line="903">
                    <declaration name="str" type="String" line="904"/>
                </scope>
            </method>
            <method name="setMetaDataValue" type="void" line="920">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="nullValue" type="boolean" line="921"/>
                <scope line="926"/>
                <scope line="929"/>
                <scope line="975"/>
            </method>
            <method name="setDataValue" type="void" line="1008">
                <params>
                    <param name="ch" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="insertValue" type="void" line="1024">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="1025"/>
                <declaration name="type" type="int" line="1029"/>
            </method>
            <javadoc line="1080">
                Throws the given &lt;code&gt;SAXParseException&lt;/code&gt; object. This
                  exception was originally thrown by the SAX parser and is passed
                  to the method &lt;code&gt;error&lt;/code&gt; when the SAX parser invokes it.                
                <param>
                    e the <code>SAXParseException</code> object to throw                    
                </param>
            </javadoc>
            <method name="error" type="void" line="1086">
                <params>
                    <param name="e" type="SAXParseException"/>
                </params>
            </method>
            <javadoc line="1089">
                Prints a warning message to &lt;code&gt;System.out&lt;/code&gt; giving the line
                  number and uri for what caused the warning plus a message explaining
                  the reason for the warning. This method is invoked by the SAX parser.                
                <param>
                    err a warning generated by the SAX parser                    
                </param>
            </javadoc>
            <method name="warning" type="void" line="1095">
                <params>
                    <param name="err" type="SAXParseException"/>
                </params>
            </method>
            <javadoc line="1098">
                                
            </javadoc>
            <method name="notationDecl" type="void" line="1100">
                <params>
                    <param name="name" type="String"/>
                    <param name="publicId" type="String"/>
                    <param name="systemId" type="String"/>
                </params>
            </method>
            <javadoc line="1102">
                                
            </javadoc>
            <method name="unparsedEntityDecl" type="void" line="1104">
                <params>
                    <param name="name" type="String"/>
                    <param name="publicId" type="String"/>
                    <param name="systemId" type="String"/>
                    <param name="notationName" type="String"/>
                </params>
            </method>
            <javadoc line="1106">
                Returns the current row of this &lt;code&gt;Rowset&lt;/code&gt;object.
                  The ResultSet&apos;s cursor is positioned at the Row which is needed                
                <return>
                    the <code>Row</code> object on which the <code>RowSet</code>
                      implementation objects's cursor is positioned                    
                </return>
            </javadoc>
            <method name="getPresentRow" type="Row" line="1112">
                <params>
                    <param name="rs" type="WebRowSetImpl"/>
                </params>
            </method>
        </class>
    </source>