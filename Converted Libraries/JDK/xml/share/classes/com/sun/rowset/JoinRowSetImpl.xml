<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.rowset">
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="javax.naming"/>
        <import package="java.io"/>
        <import package="java.math"/>
        <import package="java.util"/>
        <import package="javax.sql.rowset"/>
        <import package="javax.sql.rowset.spi.SyncProvider"/>
        <import package="javax.sql.rowset.spi.SyncProviderException"/>
        <class name="JoinRowSetImpl" line="39">
            <extends class="WebRowSetImpl"/>
            <comment line="1294">
                ColumnName methods                
            </comment>
            <comment line="1583">
                The first warning reported by calls on this &lt;code&gt;JoinRowSetImpl&lt;code&gt;
                 object is returned. Subsequent &lt;code&gt;JoinRowSetImpl&lt;code&gt; warnings will
                 be chained to this &lt;code&gt;SQLWarning&lt;code&gt;.
                
                 &lt;P&gt;The warning chain is automatically cleared each time a new
                 row is read.
                
                 &lt;P&gt;&lt;B&gt;Note:&lt;B&gt; This warning chain only covers warnings caused
                 by &lt;code&gt;ResultSet&lt;code&gt; methods.  Any warning caused by statement
                 methods (such as reading OUT parameters) will be chained on the
                 &lt;code&gt;Statement&lt;code&gt; object.
                
                 @return the first SQLWarning or null
                 @throws UnsupportedOperationException if this method is called                
            </comment>
            <comment line="2618">
                Sets the designated column in either the current row or the insert
                 row of this &lt;code&gt;JoinRowSetImpl&lt;code&gt; object with the given
                 ASCII stream value.
                 &lt;P&gt;
                 This method updates a column value in either the current row or
                 the insert row of this rowset, but it does not update the
                 database.  If the cursor is on a row in the rowset, the
                 method {@link #updateRow} must be called to update the database.
                 If the cursor is on the insert row, the method {@link #insertRow}
                 must be called, which will insert the new row into both this rowset
                 and the database. Both of these methods must be called before the
                 cursor moves to another row.
                
                 @param columnIndex the first column is &lt;code&gt;1&lt;code&gt;, the second
                        is &lt;code&gt;2&lt;code&gt;, and so on; must be &lt;code&gt;1&lt;code&gt; or larger
                        and equal to or less than the number of columns in this rowset
                 @param x the new column value
                 @param length the number of one-byte ASCII characters in the stream
                 @throws UnsupportedOperationException if this method is invoked                
            </comment>
            <comment line="2764">
                columnName updates                
            </comment>
            <comment line="3502">
                ColumnName                
            </comment>
            <comment line="4114">
                Stream based methods                
            </comment>
            <implements interface="JoinRowSet"/>
            <javadoc line="39">
                The standard implementation of the &lt;code&gt;JoinRowSet&lt;/code&gt;
                  interface providing an SQL &lt;code&gt;JOIN&lt;/code&gt; between &lt;code&gt;RowSet&lt;/code&gt;
                  objects.
                  &lt;P&gt;
                  The implementation provides an ANSI-style &lt;code&gt;JOIN&lt;/code&gt; providing an
                  inner join between two tables. Any unmatched rows in either table of the
                  join are  discarded.
                  &lt;p&gt;
                  Typically, a &lt;code&gt;JoinRowSet&lt;/code&gt; implementation is leveraged by
                  &lt;code&gt;RowSet&lt;/code&gt; instances that are in a disconnected environment and
                  thus do not have the luxury of an open connection to the data source to
                  establish logical relationships between themselves. In other words, it is
                  largely &lt;code&gt;CachedRowSet&lt;/code&gt; objects and implementations derived from
                  the &lt;code&gt;CachedRowSet&lt;/code&gt; interface that will use the &lt;code&gt;JoinRowSetImpl&lt;/code&gt;
                  implementation.                
                <author>
                    Amit Handa, Jonathan Bruce                    
                </author>
            </javadoc>
            <declaration name="vecRowSetsInJOIN" type="Vector&lt;CachedRowSetImpl&gt;" line="59"/>
            <javadoc line="59">
                A &lt;code&gt;Vector&lt;/code&gt; object that contains the &lt;code&gt;RowSet&lt;/code&gt; objects
                  that have been added to this &lt;code&gt;JoinRowSet&lt;/code&gt; object.                
            </javadoc>
            <declaration name="crsInternal" type="CachedRowSetImpl" line="65"/>
            <javadoc line="65">
                The &lt;code&gt;CachedRowSet&lt;/code&gt; object that encapsulates this
                  &lt;code&gt;JoinRowSet&lt;/code&gt; object.
                  When &lt;code&gt;RowSet&lt;/code&gt; objects are added to this &lt;code&gt;JoinRowSet&lt;/code&gt;
                  object, they are also added to &lt;i&gt;crsInternal&lt;/i&gt; to form the same kind of
                  SQL &lt;code&gt;JOIN&lt;/code&gt;.  As a result, methods for making updates to this
                  &lt;code&gt;JoinRowSet&lt;/code&gt; object can use &lt;i&gt;crsInternal&lt;/i&gt; methods in their
                  implementations.                
            </javadoc>
            <declaration name="vecJoinType" type="Vector&lt;Integer&gt;" line="76"/>
            <javadoc line="76">
                A &lt;code&gt;Vector&lt;/code&gt; object containing the types of join that have been set
                  for this &lt;code&gt;JoinRowSet&lt;/code&gt; object.
                  The last join type set forms the basis of succeeding joins.                
            </javadoc>
            <declaration name="vecTableNames" type="Vector&lt;String&gt;" line="83"/>
            <javadoc line="83">
                A &lt;code&gt;Vector&lt;/code&gt; object containing the names of all the tables entering
                  the join.                
            </javadoc>
            <declaration name="iMatchKey" type="int" line="89"/>
            <javadoc line="89">
                An &lt;code&gt;int&lt;/code&gt; that indicates the column index of the match column.                
            </javadoc>
            <declaration name="strMatchKey" type="String" line="94"/>
            <javadoc line="94">
                A &lt;code&gt;String&lt;/code&gt; object that stores the name of the match column.                
            </javadoc>
            <declaration name="supportedJOINs" type="boolean[]" line="99"/>
            <javadoc line="99">
                An array of &lt;code&gt;boolean&lt;/code&gt; values indicating the types of joins supported
                  by this &lt;code&gt;JoinRowSet&lt;/code&gt; implementation.                
            </javadoc>
            <declaration name="wrs" type="WebRowSet" line="105"/>
            <javadoc line="105">
                The &lt;code&gt;WebRowSet&lt;/code&gt; object that encapsulates this &lt;code&gt;JoinRowSet&lt;/code&gt;
                  object. This &lt;code&gt;WebRowSet&lt;/code&gt; object allows this &lt;code&gt;JoinRowSet&lt;/code&gt;
                  object to leverage the properties and methods of a &lt;code&gt;WebRowSet&lt;/code&gt;
                  object.                
            </javadoc>
            <javadoc line="114">
                Constructor for &lt;code&gt;JoinRowSetImpl&lt;/code&gt; class. Configures various internal data
                  structures to provide mechanisms required for &lt;code&gt;JoinRowSet&lt;/code&gt; interface
                  implementation.                
                <throws>
                    SQLException if an error occurs in instantiating an instance of
                      &lt;code&gt;JoinRowSetImpl&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="JoinRowSetImpl" type="constructor" line="122">
                <scope line="132"/>
                <scope line="134"/>
            </method>
            <javadoc line="140">
                Adds the given &lt;code&gt;RowSet&lt;/code&gt; object to this
                  &lt;code&gt;JoinRowSet&lt;/code&gt; object.  If this
                  rowset is the first to be added to the &lt;code&gt;JoinRowSet&lt;/code&gt;
                  object, it forms the basis for the &lt;code&gt;JOIN&lt;/code&gt;
                  relationships to be formed.
                  &lt;p&gt;
                  This method should be used when the given &lt;code&gt;RowSet&lt;/code&gt; object
                  already has a match column set.                
                <param>
                    rowset the &lt;code&gt;RowSet&lt;/code&gt; object that implements the
                      &lt;code&gt;Joinable&lt;/code&gt; interface and is to be added
                      to this &lt;code&gt;JoinRowSet&lt;/code&gt; object                    
                </param>
                <throws>
                    SQLException if an empty &lt;code&gt;RowSet&lt;/code&gt; is added to the to the
                      &lt;code&gt;JoinRowSet&lt;/code&gt;; if a match column is not set; or if an
                      additional &lt;code&gt;RowSet&lt;/code&gt; violates the active &lt;code&gt;JOIN&lt;/code&gt;                    
                </throws>
                <see>
                    CachedRowSet#setMatchColumn                    
                </see>
            </javadoc>
            <method name="addRowSet" type="void" line="158">
                <params>
                    <param name="rowset" type="Joinable"/>
                </params>
                <comment line="201">
                    Either column id or column name will be set
                     If both not set throw exception.                    
                </comment>
                <comment line="207">
                    if not set catch the exception but do nothing now.                    
                </comment>
                <comment line="214">
                    if not set catch the exception but do nothing now.                    
                </comment>
                <comment line="219">
                    neither setter methods have been used to set                    
                </comment>
                <comment line="222">
                    if(boolColId || boolColName)
                     either of the setter methods have been set.                    
                </comment>
                <comment line="225">
                                        
                </comment>
                <comment line="239">
                    Set the match column here because join will be
                     based on columnId,
                     (nested for loop in initJOIN() checks for equality
                      based on columnIndex)                    
                </comment>
                <comment line="244">
                    do nothing, iMatchKey is set.                    
                </comment>
                <comment line="246">
                    Now both iMatchKey and strMatchKey have been set pointing
                     to the same column                    
                </comment>
                <comment line="250">
                    Till first rowset setJoinType may not be set because
                     default type is JoinRowSet.INNER_JOIN which should
                     be set and for subsequent additions of rowset, if not set
                     keep on adding join type as JoinRowSet.INNER_JOIN
                     to vecJoinType.                    
                </comment>
                <declaration name="boolColId" type="boolean" line="159"/>
                <declaration name="cRowset" type="CachedRowSetImpl" line="163"/>
                <scope line="165"/>
                <scope line="169">
                    <scope line="172"/>
                    <scope line="177">
                        <declaration name="matchColumnCount" type="int" line="178"/>
                        <scope line="179"/>
                        <declaration name="pCol" type="int[]" line="185"/>
                    </scope>
                    <scope line="189"/>
                </scope>
                <scope line="193">
                    <scope line="195"/>
                </scope>
                <scope line="203"/>
                <scope line="205"/>
                <scope line="210"/>
                <scope line="212"/>
                <scope line="217"/>
                <scope line="220">
                    <scope line="223">
                        <declaration name="indices" type="ArrayList&lt;Integer&gt;" line="225"/>
                        <scope line="226">
                            <scope line="227"/>
                        </scope>
                        <declaration name="indexes" type="int[]" line="234"/>
                    </scope>
                    <scope line="242"/>
                </scope>
            </method>
            <javadoc line="258">
                Adds the given &lt;code&gt;RowSet&lt;/code&gt; object to the &lt;code&gt;JOIN&lt;/code&gt; relation
                  and sets the designated column as the match column.
                  If the given &lt;code&gt;RowSet&lt;/code&gt;
                  object is the first to be added to this &lt;code&gt;JoinRowSet&lt;/code&gt;
                  object, it forms the basis of the &lt;code&gt;JOIN&lt;/code&gt; relationship to be formed
                  when other &lt;code&gt;RowSet&lt;/code&gt; objects are added .
                  &lt;P&gt;
                  This method should be used when the given &lt;code&gt;RowSet&lt;/code&gt; object
                  does not already have a match column set.                
                <param>
                    rowset a &lt;code&gt;RowSet&lt;/code&gt; object to be added to
                      the &lt;code&gt;JOIN&lt;/code&gt; relation; must implement the &lt;code&gt;Joinable&lt;/code&gt;
                      interface                    
                </param>
                <param>
                    columnIdx an &lt;code&gt;int&lt;/code&gt; giving the index of the column to be set as
                      the match column                    
                </param>
                <throws>
                    SQLException if (1) an empty &lt;code&gt;RowSet&lt;/code&gt; object is added to this
                      &lt;code&gt;JoinRowSet&lt;/code&gt; object, (2) a match column has not been set,
                      or (3) the &lt;code&gt;RowSet&lt;/code&gt; object being added violates the active
                      &lt;code&gt;JOIN&lt;/code&gt;                    
                </throws>
                <see>
                    CachedRowSet#unsetMatchColumn                    
                </see>
            </javadoc>
            <method name="addRowSet" type="void" line="280">
                <params>
                    <param name="rowset" type="RowSet"/>
                    <param name="columnIdx" type="int"/>
                </params>
                <comment line="282">
                    passing the rowset as well as the columnIdx to form the joinrowset.                    
                </comment>
            </method>
            <javadoc line="288">
                Adds the given &lt;code&gt;RowSet&lt;/code&gt; object to the &lt;code&gt;JOIN&lt;/code&gt; relationship
                  and sets the designated column as the match column. If the given
                  &lt;code&gt;RowSet&lt;/code&gt;
                  object is the first to be added to this &lt;code&gt;JoinRowSet&lt;/code&gt;
                  object, it forms the basis of the &lt;code&gt;JOIN&lt;/code&gt; relationship to be formed
                  when other &lt;code&gt;RowSet&lt;/code&gt; objects are added .
                  &lt;P&gt;
                  This method should be used when the given &lt;code&gt;RowSet&lt;/code&gt; object
                  does not already have a match column set.                
                <param>
                    rowset a &lt;code&gt;RowSet&lt;/code&gt; object to be added to
                      the &lt;code&gt;JOIN&lt;/code&gt; relation                    
                </param>
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the name of the column
                      to be set as the match column; must implement the &lt;code&gt;Joinable&lt;/code&gt;
                      interface                    
                </param>
                <throws>
                    SQLException if (1) an empty &lt;code&gt;RowSet&lt;/code&gt; object is added to this
                      &lt;code&gt;JoinRowSet&lt;/code&gt; object, (2) a match column has not been set,
                      or (3) the &lt;code&gt;RowSet&lt;/code&gt; object being added violates the active
                      &lt;code&gt;JOIN&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="addRowSet" type="void" line="309">
                <params>
                    <param name="rowset" type="RowSet"/>
                    <param name="columnName" type="String"/>
                </params>
                <comment line="311">
                    passing the rowset as well as the columnIdx to form the joinrowset.                    
                </comment>
            </method>
            <javadoc line="315">
                Adds the given &lt;code&gt;RowSet&lt;/code&gt; objects to the &lt;code&gt;JOIN&lt;/code&gt; relationship
                  and sets the designated columns as the match columns. If the first
                  &lt;code&gt;RowSet&lt;/code&gt; object in the array of &lt;code&gt;RowSet&lt;/code&gt; objects
                  is the first to be added to this &lt;code&gt;JoinRowSet&lt;/code&gt;
                  object, it forms the basis of the &lt;code&gt;JOIN&lt;/code&gt; relationship to be formed
                  when other &lt;code&gt;RowSet&lt;/code&gt; objects are added.
                  &lt;P&gt;
                  The first &lt;code&gt;int&lt;/code&gt;
                  in &lt;i&gt;columnIdx&lt;/i&gt; is used to set the match column for the first
                  &lt;code&gt;RowSet&lt;/code&gt; object in &lt;i&gt;rowset&lt;/i&gt;, the second &lt;code&gt;int&lt;/code&gt;
                  in &lt;i&gt;columnIdx&lt;/i&gt; is used to set the match column for the second
                  &lt;code&gt;RowSet&lt;/code&gt; object in &lt;i&gt;rowset&lt;/i&gt;, and so on.
                  &lt;P&gt;
                  This method should be used when the given &lt;code&gt;RowSet&lt;/code&gt; objects
                  do not already have match columns set.                
                <param>
                    rowset an array of &lt;code&gt;RowSet&lt;/code&gt; objects to be added to
                      the &lt;code&gt;JOIN&lt;/code&gt; relation; each &lt;code&gt;RowSet&lt;/code&gt; object must
                      implement the &lt;code&gt;Joinable&lt;/code&gt; interface                    
                </param>
                <param>
                    columnIdx an array of &lt;code&gt;int&lt;/code&gt; values designating the columns
                      to be set as the
                      match columns for the &lt;code&gt;RowSet&lt;/code&gt; objects in &lt;i&gt;rowset&lt;/i&gt;                    
                </param>
                <throws>
                    SQLException if the number of &lt;code&gt;RowSet&lt;/code&gt; objects in
                      &lt;i&gt;rowset&lt;/i&gt; is not equal to the number of &lt;code&gt;int&lt;/code&gt; values
                      in &lt;i&gt;columnIdx&lt;/i&gt;                    
                </throws>
            </javadoc>
            <method name="addRowSet" type="void" line="343">
                <params>
                    <param name="rowset" type="RowSet[]"/>
                    <param name="columnIdx" type="int[]"/>
                </params>
                <comment line="345">
                    validate if length of rowset array is same as length of int array.                    
                </comment>
                <comment line="353">
                    end for                    
                </comment>
                <comment line="354">
                    end if                    
                </comment>
                <scope line="345"/>
                <scope line="348">
                    <scope line="349"/>
                </scope>
            </method>
            <javadoc line="358">
                Adds the given &lt;code&gt;RowSet&lt;/code&gt; objects to the &lt;code&gt;JOIN&lt;/code&gt; relationship
                  and sets the designated columns as the match columns. If the first
                  &lt;code&gt;RowSet&lt;/code&gt; object in the array of &lt;code&gt;RowSet&lt;/code&gt; objects
                  is the first to be added to this &lt;code&gt;JoinRowSet&lt;/code&gt;
                  object, it forms the basis of the &lt;code&gt;JOIN&lt;/code&gt; relationship to be formed
                  when other &lt;code&gt;RowSet&lt;/code&gt; objects are added.
                  &lt;P&gt;
                  The first &lt;code&gt;String&lt;/code&gt; object
                  in &lt;i&gt;columnName&lt;/i&gt; is used to set the match column for the first
                  &lt;code&gt;RowSet&lt;/code&gt; object in &lt;i&gt;rowset&lt;/i&gt;, the second &lt;code&gt;String&lt;/code&gt;
                  object in &lt;i&gt;columnName&lt;/i&gt; is used to set the match column for the second
                  &lt;code&gt;RowSet&lt;/code&gt; object in &lt;i&gt;rowset&lt;/i&gt;, and so on.
                  &lt;P&gt;
                  This method should be used when the given &lt;code&gt;RowSet&lt;/code&gt; objects
                  do not already have match columns set.                
                <param>
                    rowset an array of &lt;code&gt;RowSet&lt;/code&gt; objects to be added to
                      the &lt;code&gt;JOIN&lt;/code&gt; relation; each &lt;code&gt;RowSet&lt;/code&gt; object must
                      implement the &lt;code&gt;Joinable&lt;/code&gt; interface                    
                </param>
                <param>
                    columnName an array of &lt;code&gt;String&lt;/code&gt; objects designating the columns
                      to be set as the
                      match columns for the &lt;code&gt;RowSet&lt;/code&gt; objects in &lt;i&gt;rowset&lt;/i&gt;                    
                </param>
                <throws>
                    SQLException if the number of &lt;code&gt;RowSet&lt;/code&gt; objects in
                      &lt;i&gt;rowset&lt;/i&gt; is not equal to the number of &lt;code&gt;String&lt;/code&gt; objects
                      in &lt;i&gt;columnName&lt;/i&gt;, an empty &lt;code&gt;JdbcRowSet&lt;/code&gt; is added to the
                      &lt;code&gt;JoinRowSet&lt;/code&gt;, if a match column is not set,
                      or one or the &lt;code&gt;RowSet&lt;/code&gt; objects in &lt;i&gt;rowset&lt;/i&gt; violates the
                      active &lt;code&gt;JOIN&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="addRowSet" type="void" line="389">
                <params>
                    <param name="rowset" type="RowSet[]"/>
                    <param name="columnName" type="String[]"/>
                </params>
                <comment line="391">
                    validate if length of rowset array is same as length of int array.                    
                </comment>
                <comment line="400">
                    end for                    
                </comment>
                <comment line="401">
                    end if                    
                </comment>
                <scope line="392"/>
                <scope line="395">
                    <scope line="396"/>
                </scope>
            </method>
            <javadoc line="404">
                Returns a Collection of the &lt;code&gt;RowSet&lt;/code&gt; object instances
                  currently residing with the instance of the &lt;code&gt;JoinRowSet&lt;/code&gt;
                  object instance. This should return the &apos;n&apos; number of RowSet contained
                  within the JOIN and maintain any updates that have occoured while in
                  this union.                
                <return>
                    A &lt;code&gt;Collection&lt;/code&gt; of the added &lt;code&gt;RowSet&lt;/code&gt;
                      object instances                    
                </return>
                <throws>
                    SQLException if an error occours generating a collection
                      of the originating RowSets contained within the JOIN.                    
                </throws>
            </javadoc>
            <method name="getRowSets" type="Collection" line="416"/>
            <javadoc line="420">
                Returns a string array of the RowSet names currently residing
                  with the &lt;code&gt;JoinRowSet&lt;/code&gt; object instance.                
                <return>
                    a string array of the RowSet names                    
                </return>
                <throws>
                    SQLException if an error occours retrieving the RowSet names                    
                </throws>
                <see>
                    CachedRowSet#setTableName                    
                </see>
            </javadoc>
            <method name="getRowSetNames" type="String[]" line="428">
                <declaration name="arr" type="Object[]" line="429"/>
                <declaration name="strArr" type="String[]" line="430"/>
                <scope line="432"/>
            </method>
            <javadoc line="439">
                Creates a separate &lt;code&gt;CachedRowSet&lt;/code&gt; object that contains the data
                  in this &lt;code&gt;JoinRowSet&lt;/code&gt; object.
                  &lt;P&gt;
                  If any updates or modifications have been applied to this &lt;code&gt;JoinRowSet&lt;/code&gt;
                  object, the &lt;code&gt;CachedRowSet&lt;/code&gt; object returned by this method will
                  not be able to persist
                  the changes back to the originating rows and tables in the
                  data source because the data may be from different tables. The
                  &lt;code&gt;CachedRowSet&lt;/code&gt; instance returned should not
                  contain modification data, such as whether a row has been updated or what the
                  original values are.  Also, the &lt;code&gt;CachedRowSet&lt;/code&gt; object should clear
                  its  properties pertaining to
                  its originating SQL statement. An application should reset the
                  SQL statement using the &lt;code&gt;RowSet.setCommand&lt;/code&gt; method.
                  &lt;p&gt;
                  To persist changes back to the data source, the &lt;code&gt;JoinRowSet&lt;/code&gt; object
                  calls the method &lt;code&gt;acceptChanges&lt;/code&gt;. Implementations
                  can leverage the internal data and update tracking in their
                  implementations to interact with the &lt;code&gt;SyncProvider&lt;/code&gt; to persist any
                  changes.                
                <return>
                    a &lt;code&gt;CachedRowSet&lt;/code&gt; object containing the contents of this
                      &lt;code&gt;JoinRowSet&lt;/code&gt; object                    
                </return>
                <throws>
                    SQLException if an error occurs assembling the &lt;code&gt;CachedRowSet&lt;/code&gt;
                      object                    
                </throws>
                <see>
                    javax.sql.RowSet                    
                </see>
                <see>
                    javax.sql.rowset.CachedRowSet                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncProvider                    
                </see>
            </javadoc>
            <method name="toCachedRowSet" type="CachedRowSet" line="469"/>
            <javadoc line="473">
                Returns &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;JoinRowSet&lt;/code&gt; object supports
                  an SQL &lt;code&gt;CROSS_JOIN&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; if it does not.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the CROSS_JOIN is supported; &lt;code&gt;false&lt;/code&gt;
                      otherwise                    
                </return>
            </javadoc>
            <method name="supportsCrossJoin" type="boolean" line="480"/>
            <javadoc line="484">
                Returns &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;JoinRowSet&lt;/code&gt; object supports
                  an SQL &lt;code&gt;INNER_JOIN&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; if it does not.                
                <return>
                    true is the INNER_JOIN is supported; false otherwise                    
                </return>
            </javadoc>
            <method name="supportsInnerJoin" type="boolean" line="490"/>
            <javadoc line="494">
                Returns &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;JoinRowSet&lt;/code&gt; object supports
                  an SQL &lt;code&gt;LEFT_OUTER_JOIN&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; if it does not.                
                <return>
                    true is the LEFT_OUTER_JOIN is supported; false otherwise                    
                </return>
            </javadoc>
            <method name="supportsLeftOuterJoin" type="boolean" line="500"/>
            <javadoc line="504">
                Returns &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;JoinRowSet&lt;/code&gt; object supports
                  an SQL &lt;code&gt;RIGHT_OUTER_JOIN&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; if it does not.                
                <return>
                    true is the RIGHT_OUTER_JOIN is supported; false otherwise                    
                </return>
            </javadoc>
            <method name="supportsRightOuterJoin" type="boolean" line="510"/>
            <javadoc line="514">
                Returns &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;JoinRowSet&lt;/code&gt; object supports
                  an SQL &lt;code&gt;FULL_JOIN&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; if it does not.                
                <return>
                    true is the FULL_JOIN is supported; false otherwise                    
                </return>
            </javadoc>
            <method name="supportsFullJoin" type="boolean" line="520"/>
            <javadoc line="525">
                Sets the type of SQL &lt;code&gt;JOIN&lt;/code&gt; that this &lt;code&gt;JoinRowSet&lt;/code&gt;
                  object will use. This method
                  allows an application to adjust the type of &lt;code&gt;JOIN&lt;/code&gt; imposed
                  on tables contained within this &lt;code&gt;JoinRowSet&lt;/code&gt; object and to do it
                  on the fly. The last &lt;code&gt;JOIN&lt;/code&gt; type set determines the type of
                  &lt;code&gt;JOIN&lt;/code&gt; to be performed.
                  &lt;P&gt;
                  Implementations should throw an &lt;code&gt;SQLException&lt;/code&gt; if they do
                  not support the given &lt;code&gt;JOIN&lt;/code&gt; type.                
                <param>
                    type one of the standard &lt;code&gt;JoinRowSet&lt;/code&gt; constants
                      indicating the type of &lt;code&gt;JOIN&lt;/code&gt;.  Must be one of the
                      following:
                      &lt;code&gt;JoinRowSet.CROSS_JOIN&lt;/code&gt;
                      &lt;code&gt;JoinRowSet.INNER_JOIN&lt;/code&gt;
                      &lt;code&gt;JoinRowSet.LEFT_OUTER_JOIN&lt;/code&gt;
                      &lt;code&gt;JoinRowSet.RIGHT_OUTER_JOIN&lt;/code&gt;, or
                      &lt;code&gt;JoinRowSet.FULL_JOIN&lt;/code&gt;                    
                </param>
                <throws>
                    SQLException if an unsupported &lt;code&gt;JOIN&lt;/code&gt; type is set                    
                </throws>
            </javadoc>
            <method name="setJoinType" type="void" line="546">
                <params>
                    <param name="type" type="int"/>
                </params>
                <comment line="548">
                    The join which governs the join of two rowsets is the last
                     join set, using setJoinType                    
                </comment>
                <comment line="553">
                    This &apos;if&apos; will be removed after all joins are implemented.                    
                </comment>
                <comment line="561">
                    end if                    
                </comment>
                <scope line="550">
                    <scope line="551"/>
                    <scope line="554">
                        <declaration name="Intgr" type="Integer" line="555"/>
                    </scope>
                </scope>
                <scope line="558"/>
            </method>
            <javadoc line="564">
                This checks for a match column for
                  whether it exists or not.                
                <param>
                    &lt;code&gt;CachedRowSet&lt;/code&gt; object whose match column needs to be checked.                    
                </param>
                <throws>
                    SQLException if MatchColumn is not set.                    
                </throws>
            </javadoc>
            <method name="checkforMatchColumn" type="boolean" line="571">
                <params>
                    <param name="rs" type="Joinable"/>
                </params>
                <declaration name="i" type="int[]" line="572"/>
                <scope line="573"/>
            </method>
            <javadoc line="579">
                Internal initialization of &lt;code&gt;JoinRowSet&lt;/code&gt;.                
            </javadoc>
            <method name="initJOIN" type="void" line="582">
                <params>
                    <param name="rowset" type="CachedRowSet"/>
                </params>
                <comment line="587">
                    Create a new CachedRowSet object local to this function.                    
                </comment>
                <comment line="591">
                    The following &apos;if block&apos; seems to be always going true.
                    commenting this out for present
                    
                    if (!supportedJOINs[1]) {
                    throw new SQLException(resBundle.handleGetObject(&quot;joinrowsetimpl.notsupported&quot;).toString());
                    }                    
                </comment>
                <comment line="602">
                    implies first cRowset to be added to the Join
                     simply add this as a CachedRowSet.
                     Also add it to the class variable of type vector
                     do not need to check &quot;type&quot; of Join but it should be set.                    
                </comment>
                <comment line="608">
                    metadata will also set the MatchColumn.                    
                </comment>
                <comment line="613">
                    At this point we are ready to add another rowset to &apos;this&apos; object
                     Check the size of vecJoinType and vecRowSetsInJoin                    
                </comment>
                <comment line="616">
                    If nothing is being set, internally call setJoinType()
                     to set to JoinRowSet.INNER_JOIN.                    
                </comment>
                <comment line="619">
                    For two rowsets one (valid) entry should be there in vecJoinType
                     For three rowsets two (valid) entries should be there in vecJoinType                    
                </comment>
                <comment line="622">
                    Maintain vecRowSetsInJoin = vecJoinType + 1                    
                </comment>
                <comment line="626">
                    we are going to add next rowset and setJoinType has not been set
                     recently, so set it to setJoinType() to JoinRowSet.INNER_JOIN.
                     the default join type                    
                </comment>
                <comment line="632">
                    do nothing setjoinType() has been set by programmer                    
                </comment>
                <comment line="635">
                    Add the table names to the class variable of type vector.                    
                </comment>
                <comment line="638">
                    Now we have two rowsets crsInternal and cRowset which need
                     to be INNER JOIN&apos;ED to form a new rowset
                     Compare table1.MatchColumn1.value1 == { table2.MatchColumn2.value1
                                                  ... upto table2.MatchColumn2.valueN }
                         ...
                     Compare table1.MatchColumn1.valueM == { table2.MatchColumn2.value1
                                                  ... upto table2.MatchColumn2.valueN }
                    
                     Assuming first rowset has M rows and second N rows.                    
                </comment>
                <comment line="651">
                    total columns in the new CachedRowSet will be sum of both -1
                     (common column)                    
                </comment>
                <comment line="690">
                    reset this variable everytime you loop                    
                </comment>
                <comment line="691">
                    re create a JoinRowSet in crsTemp object                    
                </comment>
                <comment line="694">
                    create a new rowset crsTemp with data from first rowset                    
                </comment>
                <comment line="708">
                    column type also needs to be passed.                    
                </comment>
                <comment line="731">
                    will happen only once, for that  merged column pass
                     the types as OBJECT, if types not equal                    
                </comment>
                <comment line="759">
                    don&apos;t do ++colc in the above statement                    
                </comment>
                <comment line="760">
                    end if                    
                </comment>
                <comment line="761">
                    end for                    
                </comment>
                <comment line="764">
                    append the rowset crsTemp, with data from second rowset                    
                </comment>
                <comment line="783">
                    This will happen for a special case scenario. The value of &apos;p&apos;
                     will always be one more than the number of columns in the first
                     rowset in the join. So, for a value of &apos;q&apos; which is the number of
                     columns in the second rowset that participates in the join.
                     So decrement value of &apos;p&apos; by 1 else `p+q-1` will be out of range.                    
                </comment>
                <comment line="791">
                    if((p+q-1) &gt; ((crsInternal.getMetaData().getColumnCount()) +                    
                </comment>
                <comment line="792">
                    (cRowset.getMetaData().getColumnCount())     - 1)) {
                     --p;                    
                </comment>
                <comment line="794">
                    }                    
                </comment>
                <comment line="819">
                    since not equa12
                     so do nothing                    
                </comment>
                <comment line="821">
                    end if                    
                </comment>
                <comment line="822">
                    bool1 = cRowset.next();                    
                </comment>
                <comment line="825">
                    end inner for                    
                </comment>
                <comment line="826">
                    bool2 = crsInternal.next();                    
                </comment>
                <comment line="829">
                    end outer for                    
                </comment>
                <comment line="833">
                    Now the join is done.                    
                </comment>
                <comment line="834">
                    Make crsInternal = crsTemp, to be ready for next merge, if at all.                    
                </comment>
                <comment line="842">
                    Because we add the first rowset as crsInternal to the
                     merged rowset, so pCol will point to the Match column.
                     until reset, am not sure we should set this or not(?)
                     if this is not set next inner join won&apos;t happen
                     if we explicitly do not set a set MatchColumn of
                     the new crsInternal.                    
                </comment>
                <comment line="850">
                    Add the merged rowset to the class variable of type vector.                    
                </comment>
                <comment line="853">
                    end if                    
                </comment>
                <comment line="855">
                    %%% Exception should not dump here:                    
                </comment>
                <scope line="583">
                    <declaration name="cRowset" type="CachedRowSetImpl" line="585"/>
                    <declaration name="crsTemp" type="CachedRowSetImpl" line="587"/>
                    <declaration name="rsmd" type="RowSetMetaDataImpl" line="588"/>
                    <scope line="599"/>
                    <scope line="611">
                        <scope line="624"/>
                        <scope line="630"/>
                        <declaration name="rowCount2" type="int" line="647"/>
                        <declaration name="rowCount1" type="int" line="648"/>
                        <declaration name="matchColumnCount" type="int" line="652"/>
                        <scope line="653"/>
                        <scope line="667">
                            <scope line="668"/>
                            <scope line="671">
                                <scope line="673">
                                    <scope line="674"/>
                                    <scope line="677">
                                        <declaration name="match" type="boolean" line="678"/>
                                        <scope line="679">
                                            <scope line="681"/>
                                        </scope>
                                        <scope line="686">
                                            <declaration name="p" type="int" line="688"/>
                                            <declaration name="colc" type="int" line="689"/>
                                            <scope line="695">
                                                <scope line="698">
                                                    <scope line="699"/>
                                                </scope>
                                                <scope line="704"/>
                                                <scope line="729"/>
                                            </scope>
                                            <scope line="765">
                                                <scope line="768">
                                                    <scope line="769"/>
                                                </scope>
                                                <scope line="774"/>
                                                <scope line="810"/>
                                            </scope>
                                        </scope>
                                        <scope line="817"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                        <declaration name="pCol" type="int[]" line="835"/>
                    </scope>
                </scope>
                <scope line="853"/>
                <scope line="857"/>
            </method>
            <javadoc line="863">
                Return a SQL-like description of the &lt;code&gt;WHERE&lt;/code&gt; clause being used
                  in a &lt;code&gt;JoinRowSet&lt;/code&gt; object instance. An implementation can describe
                  the &lt;code&gt;WHERE&lt;/code&gt; clause of the SQL &lt;code&gt;JOIN&lt;/code&gt; by supplying a &lt;code&gt;SQL&lt;/code&gt;
                  strings description of &lt;code&gt;JOIN&lt;/code&gt; or provide a textual description to assist
                  applications using a &lt;code&gt;JoinRowSet&lt;/code&gt;.                
                <return>
                    whereClause a textual or SQL descripition of the logical
                      &lt;code&gt;WHERE&lt;/code&gt; cluase used in the &lt;code&gt;JoinRowSet&lt;/code&gt; instance                    
                </return>
                <throws>
                    SQLException if an error occurs in generating a representation
                      of the &lt;code&gt;WHERE&lt;/code&gt; clause.                    
                </throws>
            </javadoc>
            <method name="getWhereClause" type="String" line="875">
                <comment line="886">
                    get all the column(s) names from each rowset.
                     append them with their tablenames i.e. tableName.columnName
                     Select tableName1.columnName1,..., tableNameX.columnNameY
                     from tableName1,...tableNameX where
                     tableName1.(rowset1.getMatchColumnName()) ==
                     tableName2.(rowset2.getMatchColumnName()) + &quot;and&quot; +
                     tableNameX.(rowsetX.getMatchColumnName()) ==
                     tableNameZ.(rowsetZ.getMatchColumnName()));                    
                </comment>
                <comment line="907">
                    end while                    
                </comment>
                <comment line="908">
                    end for                    
                </comment>
                <comment line="911">
                    now remove the last &quot;,&quot;                    
                </comment>
                <comment line="915">
                    Add from clause                    
                </comment>
                <comment line="918">
                    Add the table names.                    
                </comment>
                <comment line="921">
                    Remove the last &quot;,&quot;                    
                </comment>
                <comment line="925">
                    Add the where clause                    
                </comment>
                <comment line="928">
                    Get the match columns
                     rowset1.getMatchColumnName() == rowset2.getMatchColumnName()                    
                </comment>
                <declaration name="strWhereClause" type="String" line="877"/>
                <declaration name="whereClause" type="String" line="878"/>
                <declaration name="tabName" type="String" line="879"/>
                <declaration name="strTabName" type="String" line="880"/>
                <declaration name="sz" type="int" line="881"/>
                <declaration name="j" type="int" line="882"/>
                <declaration name="crs" type="CachedRowSetImpl" line="883"/>
                <scope line="895">
                    <scope line="901"/>
                </scope>
                <scope line="929">
                    <scope line="932"/>
                    <scope line="934"/>
                </scope>
            </method>
            <javadoc line="944">
                Moves the cursor down one row from its current position and
                  returns &lt;code&gt;true&lt;/code&gt; if the new cursor position is a
                  valid row.
                  The cursor for a new &lt;code&gt;ResultSet&lt;/code&gt; object is initially
                  positioned before the first row. The first call to the method
                  &lt;code&gt;next&lt;/code&gt; moves the cursor to the first row, making it
                  the current row; the second call makes the second row the
                  current row, and so on.
                  &lt;P&gt;If an input stream from the previous row is open, it is
                  implicitly closed. The &lt;code&gt;ResultSet&lt;/code&gt; object&apos;s warning
                  chain is cleared when a new row is read.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the new current row is valid;
                      &lt;code&gt;false&lt;/code&gt; if there are no more rows                    
                </return>
                <throws>
                    SQLException if an error occurs or
                      the cursor is not positioned in the rowset, before
                      the first row, or after the last row                    
                </throws>
            </javadoc>
            <method name="next" type="boolean" line="964"/>
            <javadoc line="969">
                Releases the current contents of this rowset, discarding  outstanding
                  updates.  The rowset contains no rows after the method
                  &lt;code&gt;release&lt;/code&gt; is called. This method sends a
                  &lt;code&gt;RowSetChangedEvent&lt;/code&gt; object to all registered listeners prior
                  to returning.                
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="978"/>
            <javadoc line="983">
                Reports whether the last column read was SQL &lt;code&gt;NULL&lt;/code&gt;.
                  Note that you must first call the method &lt;code&gt;getXXX&lt;/code&gt;
                  on a column to try to read its value and then call the method
                  &lt;code&gt;wasNull&lt;/code&gt; to determine whether the value was
                  SQL &lt;code&gt;NULL&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the value in the last column read
                      was SQL &lt;code&gt;NULL&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="wasNull" type="boolean" line="994"/>
            <javadoc line="998">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;String&lt;/code&gt; object.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds or
                      the cursor is not on a valid row                    
                </throws>
            </javadoc>
            <method name="getString" type="String" line="1011">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1015">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;boolean&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;false&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getBoolean" type="boolean" line="1028">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1032">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;byte&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getByte" type="byte" line="1045">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1049">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;short&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getShort" type="short" line="1062">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1066">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;short&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getInt" type="int" line="1079">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1083">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;long&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getLong" type="long" line="1096">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1100">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;float&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getFloat" type="float" line="1113">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1117">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;double&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getDouble" type="double" line="1130">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1134">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object.
                  &lt;P&gt;
                  This method is deprecated; use the version of &lt;code&gt;getBigDecimal&lt;/code&gt;
                  that does not take a scale parameter and returns a value with full
                  precision.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point in the
                      value returned                    
                </param>
                <return>
                    the column value with the specified number of digits to the right
                      of the decimal point; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="1155">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="1159">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;byte array&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or the the value to be
                      retrieved is not binary                    
                </throws>
            </javadoc>
            <method name="getBytes" type="byte[]" line="1173">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1177">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.sql.Date&lt;/code&gt; object.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="1190">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1194">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.sql.Time&lt;/code&gt; object.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="1207">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1211">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="1224">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1228">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the
                      result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getAsciiStream" type="java.io.InputStream" line="1241">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1245">
                A column value can be retrieved as a stream of Unicode characters
                  and then read in chunks from the stream.  This method is particularly
                  suitable for retrieving large LONGVARCHAR values.  The JDBC driver will
                  do any necessary conversion from the database format into Unicode.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a get method implicitly closes the stream. . Also, a
                  stream may return 0 for available() whether there is data
                  available or not.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of two byte Unicode characters.  If the value is SQL NULL
                      then the result is null.                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="getUnicodeStream" type="java.io.InputStream" line="1266">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1270">
                A column value can be retrieved as a stream of uninterpreted bytes
                  and then read in chunks from the stream.  This method is particularly
                  suitable for retrieving large LONGVARBINARY values.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must be
                  read prior to getting the value of any other column. The next
                  call to a get method implicitly closes the stream. Also, a
                  stream may return 0 for available() whether there is data
                  available or not.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of uninterpreted bytes.  If the value is SQL NULL
                      then the result is null.                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getBinaryStream" type="java.io.InputStream" line="1289">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1295">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;String&lt;/code&gt; object.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getString" type="String" line="1307">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1311">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;boolean&lt;/code&gt; value.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;false&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getBoolean" type="boolean" line="1323">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1327">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;byte&lt;/code&gt; value.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getByte" type="byte" line="1339">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1343">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;short&lt;/code&gt; value.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getShort" type="short" line="1355">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1359">
                Retrieves the value stored in the designated column
                  of the current row as an &lt;code&gt;int&lt;/code&gt; value.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getInt" type="int" line="1371">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1375">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;long&lt;/code&gt; value.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getLong" type="long" line="1387">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1391">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;float&lt;/code&gt; value.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getFloat" type="float" line="1403">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1407">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;double&lt;/code&gt; value.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;0&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getDouble" type="double" line="1419">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1423">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
                <deprecated>
                    use the method &lt;code&gt;getBigDecimal(String columnName)&lt;/code&gt;
                      instead                    
                </deprecated>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="1438">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="1442">
                Retrieves the value stored in the designated column
                  of the current row as a byte array.
                  The bytes represent the raw values returned by the driver.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getBytes" type="byte[]" line="1455">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1459">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.sql.Date&lt;/code&gt; object.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="1471">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1475">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.sql.Time&lt;/code&gt; object.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="1487">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1491">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="1503">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1507">
                This method is not supported, and it will throw an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if it is called.
                  &lt;P&gt;
                  A column value can be retrieved as a stream of ASCII characters
                  and then read in chunks from the stream.  This method is particularly
                  suitable for retrieving large LONGVARCHAR values.  The JDBC driver will
                  do any necessary conversion from the database format into ASCII format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must
                  be read prior to getting the value of any other column. The
                  next call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of one-byte ASCII characters.  If the value is SQL
                      &lt;code&gt;NULL&lt;/code&gt;, the result is &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <throws>
                    UnsupportedOperationException if this method is called                    
                </throws>
            </javadoc>
            <method name="getAsciiStream" type="java.io.InputStream" line="1527">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1531">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.io.InputStream&lt;/code&gt; object.
                  A column value can be retrieved as a stream of Unicode characters
                  and then read in chunks from the stream.  This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARCHAR&lt;/code&gt; values.
                  The JDBC driver will do any necessary conversion from the database
                  format into Unicode.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must
                  be read prior to getting the value of any other column. The
                  next call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of two-byte Unicode characters.  If the value is
                      SQL &lt;code&gt;NULL&lt;/code&gt;, the result is &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
                <deprecated>
                    use the method &lt;code&gt;getCharacterStream&lt;/code&gt; instead                    
                </deprecated>
            </javadoc>
            <method name="getUnicodeStream" type="java.io.InputStream" line="1554">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1558">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.io.InputStream&lt;/code&gt; object.
                  A column value can be retrieved as a stream of uninterpreted bytes
                  and then read in chunks from the stream.  This method is particularly
                  suitable for retrieving large &lt;code&gt;LONGVARBINARY&lt;/code&gt; values.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must
                  be read prior to getting the value of any other column. The
                  next call to a get method implicitly closes the stream.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of uninterpreted bytes.  If the value is SQL
                      &lt;code&gt;NULL&lt;/code&gt;, the result is &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <throws>
                    SQLException if the given column name does not match one of
                      this rowset&apos;s column names or the cursor is not on one of
                      this rowset&apos;s rows or its insert row                    
                </throws>
            </javadoc>
            <method name="getBinaryStream" type="java.io.InputStream" line="1578">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <method name="getWarnings" type="SQLWarning" line="1597"/>
            <javadoc line="1601">
                Throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; if called.
                  &lt;P&gt;
                  After a call to this method, the &lt;code&gt;getWarnings&lt;/code&gt; method
                  returns &lt;code&gt;null&lt;/code&gt; until a new warning is reported for this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object.                
                <throws>
                    UnsupportedOperationException if this method is called                    
                </throws>
            </javadoc>
            <method name="clearWarnings" type="void" line="1610"/>
            <javadoc line="1614">
                Retrieves the name of the SQL cursor used by this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object.
                  &lt;P&gt;In SQL, a result table is retrieved through a cursor that is
                  named. The current row of a result can be updated or deleted
                  using a positioned update/delete statement that references the
                  cursor name. To insure that the cursor has the proper isolation
                  level to support an update operation, the cursor&apos;s &lt;code&gt;SELECT&lt;/code&gt;
                  statement should be of the form &apos;select for update&apos;. If the &apos;for update&apos;
                  clause is omitted, positioned updates may fail.
                  &lt;P&gt;JDBC supports this SQL feature by providing the name of the
                  SQL cursor used by a &lt;code&gt;ResultSet&lt;/code&gt; object. The current row
                  of a result set is also the current row of this SQL cursor.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; If positioned updates are not supported, an
                  &lt;code&gt;SQLException&lt;/code&gt; is thrown.                
                <return>
                    the SQL cursor name for this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object&apos;s
                      cursor                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getCursorName" type="String" line="1637"/>
            <javadoc line="1641">
                Retrieves the &lt;code&gt;ResultSetMetaData&lt;/code&gt; object that contains
                  information about this &lt;code&gt;CachedRowsSet&lt;/code&gt; object. The
                  information includes the number of columns, the data type for each
                  column, and other properties for each column.                
                <return>
                    the &lt;code&gt;ResultSetMetaData&lt;/code&gt; object that describes this
                      &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object&apos;s columns                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getMetaData" type="ResultSetMetaData" line="1651"/>
            <javadoc line="1655">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as an
                  &lt;code&gt;Object&lt;/code&gt; value.
                  &lt;P&gt;
                  The type of the &lt;code&gt;Object&lt;/code&gt; will be the default
                  Java object type corresponding to the column&apos;s SQL type,
                  following the mapping for built-in types specified in the JDBC
                  specification.
                  &lt;P&gt;
                  This method may also be used to read datatabase-specific
                  abstract data types.
                  &lt;P&gt;
                  This implementation of the method &lt;code&gt;getObject&lt;/code&gt; extends its
                  behavior so that it gets the attributes of an SQL structured type as
                  as an array of &lt;code&gt;Object&lt;/code&gt; values.  This method also custom
                  maps SQL user-defined types to classes in the Java programming language.
                  When the specified column contains
                  a structured or distinct value, the behavior of this method is as
                  if it were a call to the method &lt;code&gt;getObject(columnIndex,
                  this.getStatement().getConnection().getTypeMap())&lt;/code&gt;.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    a &lt;code&gt;java.lang.Object&lt;/code&gt; holding the column value;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or there is a problem getting
                      the &lt;code&gt;Class&lt;/code&gt; object for a custom mapping                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getObject" type="Object" line="1687">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1691">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as an
                  &lt;code&gt;Object&lt;/code&gt; value.
                  &lt;P&gt;
                  The type of the &lt;code&gt;Object&lt;/code&gt; will be the default
                  Java object type corresponding to the column&apos;s SQL type,
                  following the mapping for built-in types specified in the JDBC
                  specification.
                  &lt;P&gt;
                  This method may also be used to read datatabase-specific
                  abstract data types.
                  &lt;P&gt;
                  This implementation of the method &lt;code&gt;getObject&lt;/code&gt; extends its
                  behavior so that it gets the attributes of an SQL structured type as
                  as an array of &lt;code&gt;Object&lt;/code&gt; values.  This method also custom
                  maps SQL user-defined types to classes
                  in the Java programming language. When the specified column contains
                  a structured or distinct value, the behavior of this method is as
                  if it were a call to the method &lt;code&gt;getObject(columnIndex,
                  this.getStatement().getConnection().getTypeMap())&lt;/code&gt;.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <param>
                    map a &lt;code&gt;java.util.Map&lt;/code&gt; object showing the mapping
                      from SQL type names to classes in the Java programming
                      language                    
                </param>
                <return>
                    a &lt;code&gt;java.lang.Object&lt;/code&gt; holding the column value;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the result is
                      &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if (1) the given column name does not match
                      one of this rowset&apos;s column names, (2) the cursor is not
                      on a valid row, or (3) there is a problem getting
                      the &lt;code&gt;Class&lt;/code&gt; object for a custom mapping                    
                </throws>
            </javadoc>
            <method name="getObject" type="Object" line="1729">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="map" type="java.util.Map<String,Class<?>>"/>
                </params>
            </method>
            <javadoc line="1733">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as an
                  &lt;code&gt;Object&lt;/code&gt; value.
                  &lt;P&gt;
                  The type of the &lt;code&gt;Object&lt;/code&gt; will be the default
                  Java object type corresponding to the column&apos;s SQL type,
                  following the mapping for built-in types specified in the JDBC
                  specification.
                  &lt;P&gt;
                  This method may also be used to read datatabase-specific
                  abstract data types.
                  &lt;P&gt;
                  This implementation of the method &lt;code&gt;getObject&lt;/code&gt; extends its
                  behavior so that it gets the attributes of an SQL structured type as
                  as an array of &lt;code&gt;Object&lt;/code&gt; values.  This method also custom
                  maps SQL user-defined types to classes
                  in the Java programming language. When the specified column contains
                  a structured or distinct value, the behavior of this method is as
                  if it were a call to the method &lt;code&gt;getObject(columnIndex,
                  this.getStatement().getConnection().getTypeMap())&lt;/code&gt;.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <return>
                    a &lt;code&gt;java.lang.Object&lt;/code&gt; holding the column value;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the result is
                      &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if (1) the given column name does not match
                      one of this rowset&apos;s column names, (2) the cursor is not
                      on a valid row, or (3) there is a problem getting
                      the &lt;code&gt;Class&lt;/code&gt; object for a custom mapping                    
                </throws>
            </javadoc>
            <method name="getObject" type="Object" line="1765">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1769">
                Retrieves the value of the designated column in this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as an &lt;code&gt;Object&lt;/code&gt; in
                  the Java programming lanugage, using the given
                  &lt;code&gt;java.util.Map&lt;/code&gt; object to custom map the value if
                  appropriate.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    map a &lt;code&gt;java.util.Map&lt;/code&gt; object showing the mapping
                      from SQL type names to classes in the Java programming
                      language                    
                </param>
                <return>
                    an &lt;code&gt;Object&lt;/code&gt; representing the SQL value                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds or
                      the cursor is not on one of this rowset&apos;s rows or its
                      insert row                    
                </throws>
            </javadoc>
            <method name="getObject" type="Object" line="1788">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="map" type="java.util.Map<String,Class<?>>"/>
                </params>
            </method>
            <javadoc line="1792">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must
                  be read prior to getting the value of any other column. The
                  next call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    a Java character stream that delivers the database column value
                      as a &lt;code&gt;java.io.Reader&lt;/code&gt; object.  If the value is
                      SQL &lt;code&gt;NULL&lt;/code&gt;, the result is &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or there is a type mismatch                    
                </throws>
            </javadoc>
            <method name="getCharacterStream" type="java.io.Reader" line="1809">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1813">
                Retrieves the value stored in the designated column
                  of the current row as a &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; All the data in the returned stream must
                  be read prior to getting the value of any other column. The
                  next call to a &lt;code&gt;getXXX&lt;/code&gt; method implicitly closes the stream.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the SQL name of
                      a column in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <return>
                    a Java input stream that delivers the database column value
                      as a stream of two-byte Unicode characters.  If the value is
                      SQL &lt;code&gt;NULL&lt;/code&gt;, the result is &lt;code&gt;null&lt;/code&gt;.                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or there is a type mismatch                    
                </throws>
            </javadoc>
            <method name="getCharacterStream" type="java.io.Reader" line="1829">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1833">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <return>
                    a &lt;code&gt;java.math.BigDecimal&lt;/code&gt; value with full precision;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="1846">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="1850">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <return>
                    a &lt;code&gt;java.math.BigDecimal&lt;/code&gt; value with full precision;
                      if the value is SQL &lt;code&gt;NULL&lt;/code&gt;, the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if the given column index is out of bounds,
                      the cursor is not on a valid row, or this method fails                    
                </throws>
            </javadoc>
            <method name="getBigDecimal" type="BigDecimal" line="1862">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="1866">
                Returns the number of rows in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object.                
                <return>
                    number of rows in the rowset                    
                </return>
            </javadoc>
            <method name="size" type="int" line="1871"/>
            <javadoc line="1875">
                Indicates whether the cursor is before the first row in this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is before the first row;
                      &lt;code&gt;false&lt;/code&gt; otherwise or if the rowset contains no rows                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="isBeforeFirst" type="boolean" line="1883"/>
            <javadoc line="1887">
                Indicates whether the cursor is after the last row in this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is after the last row;
                      &lt;code&gt;false&lt;/code&gt; otherwise or if the rowset contains no rows                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="isAfterLast" type="boolean" line="1895"/>
            <javadoc line="1899">
                Indicates whether the cursor is on the first row in this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is on the first row;
                      &lt;code&gt;false&lt;/code&gt; otherwise or if the rowset contains no rows                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="isFirst" type="boolean" line="1907"/>
            <javadoc line="1911">
                Indicates whether the cursor is on the last row in this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object.
                  &lt;P&gt;
                  Note: Calling the method &lt;code&gt;isLast&lt;/code&gt; may be expensive
                  because the JDBC driver might need to fetch ahead one row in order
                  to determine whether the current row is the last row in this rowset.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is on the last row;
                      &lt;code&gt;false&lt;/code&gt; otherwise or if this rowset contains no rows                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="isLast" type="boolean" line="1923"/>
            <javadoc line="1927">
                Moves this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object&apos;s cursor to the front of
                  the rowset, just before the first row. This method has no effect if
                  this rowset contains no rows.                
                <throws>
                    SQLException if an error occurs or the type of this rowset
                      is &lt;code&gt;ResultSet.TYPE_FORWARD_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="beforeFirst" type="void" line="1935"/>
            <javadoc line="1939">
                Moves this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object&apos;s cursor to the end of
                  the rowset, just after the last row. This method has no effect if
                  this rowset contains no rows.                
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="afterLast" type="void" line="1946"/>
            <javadoc line="1950">
                Moves this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object&apos;s cursor to the first row
                  and returns &lt;code&gt;true&lt;/code&gt; if the operation was successful.  This
                  method also notifies registered listeners that the cursor has moved.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is on a valid row;
                      &lt;code&gt;false&lt;/code&gt; otherwise or if there are no rows in this
                      &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </return>
                <throws>
                    SQLException if the type of this rowset
                      is &lt;code&gt;ResultSet.TYPE_FORWARD_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="first" type="boolean" line="1961"/>
            <javadoc line="1966">
                Moves this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object&apos;s cursor to the last row
                  and returns &lt;code&gt;true&lt;/code&gt; if the operation was successful.  This
                  method also notifies registered listeners that the cursor has moved.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is on a valid row;
                      &lt;code&gt;false&lt;/code&gt; otherwise or if there are no rows in this
                      &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </return>
                <throws>
                    SQLException if the type of this rowset
                      is &lt;code&gt;ResultSet.TYPE_FORWARD_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="last" type="boolean" line="1977"/>
            <javadoc line="1981">
                Returns the number of the current row in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt;
                  object. The first row is number 1, the second number 2, and so on.                
                <return>
                    the number of the current row;  &lt;code&gt;0&lt;/code&gt; if there is no
                      current row                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getRow" type="int" line="1989"/>
            <javadoc line="1993">
                Moves this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object&apos;s cursor to the row number
                  specified.
                  &lt;p&gt;If the number is positive, the cursor moves to an absolute row with
                  respect to the beginning of the rowset.  The first row is row 1, the second
                  is row 2, and so on.  For example, the following command, in which
                  &lt;code&gt;crs&lt;/code&gt; is a &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object, moves the cursor
                  to the fourth row, starting from the beginning of the rowset.
                  &lt;PRE&gt;&lt;code&gt;
                  crs.absolute(4);
                  &lt;/code&gt; &lt;/PRE&gt;
                  &lt;P&gt;
                  If the number is negative, the cursor moves to an absolute row position
                  with respect to the end of the rowset.  For example, calling
                  &lt;code&gt;absolute(-1)&lt;/code&gt; positions the cursor on the last row,
                  &lt;code&gt;absolute(-2)&lt;/code&gt; moves it on the next-to-last row, and so on.
                  If the &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object &lt;code&gt;crs&lt;/code&gt; has five rows,
                  the following command moves the cursor to the fourth-to-last row, which
                  in the case of a  rowset with five rows, is also the second row, counting
                  from the beginning.
                  &lt;PRE&gt;&lt;code&gt;
                  crs.absolute(-4);
                  &lt;/code&gt; &lt;/PRE&gt;
                  If the number specified is larger than the number of rows, the cursor
                  will move to the position after the last row. If the number specified
                  would move the cursor one or more rows before the first row, the cursor
                  moves to the position before the first row.
                  &lt;P&gt;
                  Note: Calling &lt;code&gt;absolute(1)&lt;/code&gt; is the same as calling the
                  method &lt;code&gt;first()&lt;/code&gt;.  Calling &lt;code&gt;absolute(-1)&lt;/code&gt; is the
                  same as calling &lt;code&gt;last()&lt;/code&gt;.                
                <param>
                    row a positive number to indicate the row, starting row numbering from
                      the first row, which is &lt;code&gt;1&lt;/code&gt;; a negative number to indicate
                      the row, starting row numbering from the last row, which is
                      &lt;code&gt;-1&lt;/code&gt;; must not be &lt;code&gt;0&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is on the rowset; &lt;code&gt;false&lt;/code&gt;
                      otherwise                    
                </return>
                <throws>
                    SQLException if the given cursor position is &lt;code&gt;0&lt;/code&gt; or the
                      type of this rowset is &lt;code&gt;ResultSet.TYPE_FORWARD_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="absolute" type="boolean" line="2040">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="2044">
                Moves the cursor the specified number of rows from the current
                  position, with a positive number moving it forward and a
                  negative number moving it backward.
                  &lt;P&gt;
                  If the number is positive, the cursor moves the specified number of
                  rows toward the end of the rowset, starting at the current row.
                  For example, the following command, in which
                  &lt;code&gt;crs&lt;/code&gt; is a &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with 100 rows,
                  moves the cursor forward four rows from the current row.  If the
                  current row is 50, the cursor would move to row 54.
                  &lt;PRE&gt;&lt;code&gt;
                  crs.relative(4);
                  &lt;/code&gt; &lt;/PRE&gt;
                  &lt;P&gt;
                  If the number is negative, the cursor moves back toward the beginning
                  the specified number of rows, starting at the current row.
                  For example, calling the method
                  &lt;code&gt;absolute(-1)&lt;/code&gt; positions the cursor on the last row,
                  &lt;code&gt;absolute(-2)&lt;/code&gt; moves it on the next-to-last row, and so on.
                  If the &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object &lt;code&gt;crs&lt;/code&gt; has five rows,
                  the following command moves the cursor to the fourth-to-last row, which
                  in the case of a  rowset with five rows, is also the second row
                  from the beginning.
                  &lt;PRE&gt;&lt;code&gt;
                  crs.absolute(-4);
                  &lt;/code&gt; &lt;/PRE&gt;
                  If the number specified is larger than the number of rows, the cursor
                  will move to the position after the last row. If the number specified
                  would move the cursor one or more rows before the first row, the cursor
                  moves to the position before the first row. In both cases, this method
                  throws an &lt;code&gt;SQLException&lt;/code&gt;.
                  &lt;P&gt;
                  Note: Calling &lt;code&gt;absolute(1)&lt;/code&gt; is the same as calling the
                  method &lt;code&gt;first()&lt;/code&gt;.  Calling &lt;code&gt;absolute(-1)&lt;/code&gt; is the
                  same as calling &lt;code&gt;last()&lt;/code&gt;.  Calling &lt;code&gt;relative(0)&lt;/code&gt;
                  is valid, but it does not change the cursor position.                
                <param>
                    rows an &lt;code&gt;int&lt;/code&gt; indicating the number of rows to move
                      the cursor, starting at the current row; a positive number
                      moves the cursor forward; a negative number moves the cursor
                      backward; must not move the cursor past the valid
                      rows                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is on a row in this
                      &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object; &lt;code&gt;false&lt;/code&gt;
                      otherwise                    
                </return>
                <throws>
                    SQLException if there are no rows in this rowset, the cursor is
                      positioned either before the first row or after the last row, or
                      the rowset is type &lt;code&gt;ResultSet.TYPE_FORWARD_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="relative" type="boolean" line="2099">
                <params>
                    <param name="rows" type="int"/>
                </params>
            </method>
            <javadoc line="2103">
                Moves this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object&apos;s cursor to the
                  previous row and returns &lt;code&gt;true&lt;/code&gt; if the cursor is on
                  a valid row or &lt;code&gt;false&lt;/code&gt; if it is not.
                  This method also notifies all listeners registered with this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object that its cursor has moved.
                  &lt;P&gt;
                  Note: calling the method &lt;code&gt;previous()&lt;/code&gt; is not the same
                  as calling the method &lt;code&gt;relative(-1)&lt;/code&gt;.  This is true
                  because it is possible to call &lt;code&gt;previous()&lt;/code&gt; from the insert
                  row, from after the last row, or from the current row, whereas
                  &lt;code&gt;relative&lt;/code&gt; may only be called from the current row.
                  &lt;P&gt;
                  The method &lt;code&gt;previous&lt;/code&gt; may used in a &lt;code&gt;while&lt;/code&gt;
                  loop to iterate through a rowset starting after the last row
                  and moving toward the beginning. The loop ends when &lt;code&gt;previous&lt;/code&gt;
                  returns &lt;code&gt;false&lt;/code&gt;, meaning that there are no more rows.
                  For example, the following code fragment retrieves all the data in
                  the &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object &lt;code&gt;crs&lt;/code&gt;, which has
                  three columns.  Note that the cursor must initially be positioned
                  after the last row so that the first call to the method
                  &lt;code&gt;previous&lt;/code&gt; places the cursor on the last line.
                  &lt;PRE&gt; &lt;code&gt;
                  crs.afterLast();
                  while (previous()) {
                  String name = crs.getString(1);
                  int age = crs.getInt(2);
                  short ssn = crs.getShort(3);
                  System.out.println(name + &quot;   &quot; + age + &quot;   &quot; + ssn);
                  }
                  &lt;/code&gt; &lt;/PRE&gt;
                  This method throws an &lt;code&gt;SQLException&lt;/code&gt; if the cursor is not
                  on a row in the rowset, before the first row, or after the last row.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the cursor is on a valid row;
                      &lt;code&gt;false&lt;/code&gt; if it is before the first row or after the
                      last row                    
                </return>
                <throws>
                    SQLException if the cursor is not on a valid position or the
                      type of this rowset is &lt;code&gt;ResultSet.TYPE_FORWARD_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="previous" type="boolean" line="2145"/>
            <javadoc line="2149">
                Returns the index of the column whose name is &lt;i&gt;columnName&lt;/i&gt;.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the name of the
                      column for which the index will be returned; the name must
                      match the SQL name of a column in this &lt;code&gt;JoinRowSet&lt;/code&gt;
                      object, ignoring case                    
                </param>
                <throws>
                    SQLException if the given column name does not match one of the
                      column names for this &lt;code&gt;JoinRowSet&lt;/code&gt; object                    
                </throws>
            </javadoc>
            <method name="findColumn" type="int" line="2159">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2163">
                Indicates whether the current row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt;
                  object has been updated.  The value returned
                  depends on whether this rowset can detect updates: &lt;code&gt;false&lt;/code&gt;
                  will always be returned if it does not detect updates.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the row has been visibly updated
                      by the owner or another and updates are detected;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <throws>
                    SQLException if the cursor is on the insert row or not
                      on a valid row                    
                </throws>
                <see>
                    DatabaseMetaData#updatesAreDetected                    
                </see>
            </javadoc>
            <method name="rowUpdated" type="boolean" line="2177"/>
            <javadoc line="2181">
                Indicates whether the designated column of the current row of
                  this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object has been updated. The
                  value returned depends on whether this rowset can detcted updates:
                  &lt;code&gt;false&lt;/code&gt; will always be returned if it does not detect updates.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the column updated
                      &lt;code&gt;false&lt;/code&gt; otherwse                    
                </return>
                <throws>
                    SQLException if the cursor is on the insert row or not
                      on a valid row                    
                </throws>
                <see>
                    DatabaseMetaData#updatesAreDetected                    
                </see>
            </javadoc>
            <method name="columnUpdated" type="boolean" line="2193">
                <params>
                    <param name="indexColumn" type="int"/>
                </params>
            </method>
            <javadoc line="2197">
                Indicates whether the current row has been inserted.  The value returned
                  depends on whether or not the rowset can detect visible inserts.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if a row has been inserted and inserts are detected;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <throws>
                    SQLException if the cursor is on the insert row or not
                      not on a valid row                    
                </throws>
                <see>
                    DatabaseMetaData#insertsAreDetected                    
                </see>
            </javadoc>
            <method name="rowInserted" type="boolean" line="2208"/>
            <javadoc line="2212">
                Indicates whether the current row has been deleted.  A deleted row
                  may leave a visible &quot;hole&quot; in a rowset.  This method can be used to
                  detect such holes if the rowset can detect deletions. This method
                  will always return &lt;code&gt;false&lt;/code&gt; if this rowset cannot detect
                  deletions.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if (1)the current row is blank, indicating that
                      the row has been deleted, and (2)deletions are detected;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <throws>
                    SQLException if the cursor is on a valid row in this rowset                    
                </throws>
                <see>
                    DatabaseMetaData#deletesAreDetected                    
                </see>
            </javadoc>
            <method name="rowDeleted" type="boolean" line="2225"/>
            <javadoc line="2229">
                Sets the designated nullable column in the current row or the
                  insert row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with
                  &lt;code&gt;null&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset; however, another method must be called to complete
                  the update process. If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to mark the row as updated
                  and to notify listeners that the row has changed.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called to insert the new row into this rowset and to notify
                  listeners that a row has changed.
                  &lt;P&gt;
                  In order to propagate updates in this rowset to the underlying
                  data source, an application must call the method acceptChanges
                  after it calls either &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;insertRow&lt;/code&gt;.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateNull" type="void" line="2255">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="2259">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;boolean&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateBoolean" type="void" line="2282">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="boolean"/>
                </params>
            </method>
            <javadoc line="2286">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;byte&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateByte" type="void" line="2309">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="2313">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;short&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateShort" type="void" line="2336">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="short"/>
                </params>
            </method>
            <javadoc line="2340">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;int&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateInt" type="void" line="2363">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="2367">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;long&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateLong" type="void" line="2390">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="long"/>
                </params>
            </method>
            <javadoc line="2394">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;float&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateFloat" type="void" line="2417">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="float"/>
                </params>
            </method>
            <javadoc line="2421">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;double&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateDouble" type="void" line="2444">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="2448">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateBigDecimal" type="void" line="2471">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="BigDecimal"/>
                </params>
            </method>
            <javadoc line="2475">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;String&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to mark the row as updated.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called to insert the new row into this rowset and mark it
                  as inserted. Both of these methods must be called before the
                  cursor moves to another row.
                  &lt;P&gt;
                  The method &lt;code&gt;acceptChanges&lt;/code&gt; must be called if the
                  updated values are to be written back to the underlying database.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateString" type="void" line="2501">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="String"/>
                </params>
            </method>
            <javadoc line="2505">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;byte&lt;/code&gt; array.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateBytes" type="void" line="2528">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="2532">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Date&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, (3) the type of the designated column is not
                      an SQL &lt;code&gt;DATE&lt;/code&gt; or &lt;code&gt;TIMESTAMP&lt;/code&gt;, or
                      (4) this rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateDate" type="void" line="2556">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.sql.Date"/>
                </params>
            </method>
            <javadoc line="2560">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Time&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, (3) the type of the designated column is not
                      an SQL &lt;code&gt;TIME&lt;/code&gt; or &lt;code&gt;TIMESTAMP&lt;/code&gt;, or
                      (4) this rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateTime" type="void" line="2584">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.sql.Time"/>
                </params>
            </method>
            <javadoc line="2588">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Timestamp&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, (3) the type of the designated column is not
                      an SQL &lt;code&gt;DATE&lt;/code&gt;, &lt;code&gt;TIME&lt;/code&gt;, or
                      &lt;code&gt;TIMESTAMP&lt;/code&gt;, or (4) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateTimestamp" type="void" line="2613">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.sql.Timestamp"/>
                </params>
            </method>
            <method name="updateAsciiStream" type="void" line="2638">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="2642">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value; must be a &lt;code&gt;java.io.InputStream&lt;/code&gt;
                      containing &lt;code&gt;BINARY&lt;/code&gt;, &lt;code&gt;VARBINARY&lt;/code&gt;, or
                      &lt;code&gt;LONGVARBINARY&lt;/code&gt; data                    
                </param>
                <param>
                    length the length of the stream in bytes                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, (3) the data in the stream is not binary, or
                      (4) this rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="2668">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="2672">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value; must be a &lt;code&gt;java.io.Reader&lt;/code&gt;
                      containing &lt;code&gt;BINARY&lt;/code&gt;, &lt;code&gt;VARBINARY&lt;/code&gt;,
                      &lt;code&gt;LONGVARBINARY&lt;/code&gt;, &lt;code&gt;CHAR&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt;,
                      or &lt;code&gt;LONGVARCHAR&lt;/code&gt; data                    
                </param>
                <param>
                    length the length of the stream in characters                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, (3) the data in the stream is not a binary or
                      character type, or (4) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="2700">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="java.io.Reader"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="2704">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Object&lt;/code&gt; value.  The &lt;code&gt;scale&lt;/code&gt; parameter indicates
                  the number of digits to the right of the decimal point and is ignored
                  if the new column value is not a type that will be mapped to an SQL
                  &lt;code&gt;DECIMAL&lt;/code&gt; or &lt;code&gt;NUMERIC&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point (for
                      &lt;code&gt;DECIMAL&lt;/code&gt; and &lt;code&gt;NUMERIC&lt;/code&gt; types only)                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateObject" type="void" line="2732">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="Object"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="2736">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Object&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateObject" type="void" line="2759">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <javadoc line="2765">
                Sets the designated nullable column in the current row or the
                  insert row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with
                  &lt;code&gt;null&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, or (3) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateNull" type="void" line="2785">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="2789">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;boolean&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, or (3) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateBoolean" type="void" line="2811">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="boolean"/>
                </params>
            </method>
            <javadoc line="2815">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;byte&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, or (3) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateByte" type="void" line="2837">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="2841">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;short&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, or (3) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateShort" type="void" line="2863">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="short"/>
                </params>
            </method>
            <javadoc line="2867">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;int&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, or (3) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateInt" type="void" line="2889">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="2893">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;long&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, or (3) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateLong" type="void" line="2915">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="long"/>
                </params>
            </method>
            <javadoc line="2919">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;float&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, or (3) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateFloat" type="void" line="2941">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="float"/>
                </params>
            </method>
            <javadoc line="2945">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;double&lt;/code&gt; value.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, or (3) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateDouble" type="void" line="2967">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="2971">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, or (3) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateBigDecimal" type="void" line="2993">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="BigDecimal"/>
                </params>
            </method>
            <javadoc line="2997">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;String&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, or (3) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateString" type="void" line="3019">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="String"/>
                </params>
            </method>
            <javadoc line="3023">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;byte&lt;/code&gt; array.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, or (3) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateBytes" type="void" line="3045">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="3049">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Date&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, (3) the type
                      of the designated column is not an SQL &lt;code&gt;DATE&lt;/code&gt; or
                      &lt;code&gt;TIMESTAMP&lt;/code&gt;, or (4) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateDate" type="void" line="3073">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.sql.Date"/>
                </params>
            </method>
            <javadoc line="3077">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Time&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, (3) the type
                      of the designated column is not an SQL &lt;code&gt;TIME&lt;/code&gt; or
                      &lt;code&gt;TIMESTAMP&lt;/code&gt;, or (4) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateTime" type="void" line="3101">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.sql.Time"/>
                </params>
            </method>
            <javadoc line="3105">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Timestamp&lt;/code&gt; object.
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if the given column index is out of bounds or
                      the cursor is not on one of this rowset&apos;s rows or its
                      insert row                    
                </throws>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, (3) the type
                      of the designated column is not an SQL &lt;code&gt;DATE&lt;/code&gt;,
                      &lt;code&gt;TIME&lt;/code&gt;, or &lt;code&gt;TIMESTAMP&lt;/code&gt;, or (4) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateTimestamp" type="void" line="3132">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.sql.Timestamp"/>
                </params>
            </method>
            <javadoc line="3136">
                Unsupported; throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;
                  if called.
                  &lt;P&gt;
                  Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  ASCII stream value.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    length the number of one-byte ASCII characters in the stream                    
                </param>
                <throws>
                    UnsupportedOperationException if this method is invoked                    
                </throws>
            </javadoc>
            <method name="updateAsciiStream" type="void" line="3159">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="3163">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value; must be a &lt;code&gt;java.io.InputStream&lt;/code&gt;
                      containing &lt;code&gt;BINARY&lt;/code&gt;, &lt;code&gt;VARBINARY&lt;/code&gt;, or
                      &lt;code&gt;LONGVARBINARY&lt;/code&gt; data                    
                </param>
                <param>
                    length the length of the stream in bytes                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, (3) the data
                      in the stream is not binary, or (4) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateBinaryStream" type="void" line="3189">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="3193">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value; must be a &lt;code&gt;java.io.Reader&lt;/code&gt;
                      containing &lt;code&gt;BINARY&lt;/code&gt;, &lt;code&gt;VARBINARY&lt;/code&gt;,
                      &lt;code&gt;LONGVARBINARY&lt;/code&gt;, &lt;code&gt;CHAR&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt;,
                      or &lt;code&gt;LONGVARCHAR&lt;/code&gt; data                    
                </param>
                <param>
                    length the length of the stream in characters                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, (3) the data
                      in the stream is not a binary or character type, or (4) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateCharacterStream" type="void" line="3220">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="java.io.Reader"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="3224">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Object&lt;/code&gt; value.  The &lt;code&gt;scale&lt;/code&gt; parameter
                  indicates the number of digits to the right of the decimal point
                  and is ignored if the new column value is not a type that will be
                  mapped to an SQL &lt;code&gt;DECIMAL&lt;/code&gt; or &lt;code&gt;NUMERIC&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point (for
                      &lt;code&gt;DECIMAL&lt;/code&gt; and &lt;code&gt;NUMERIC&lt;/code&gt; types only)                    
                </param>
                <throws>
                    SQLException if the given column index is out of bounds or
                      the cursor is not on one of this rowset&apos;s rows or its
                      insert row                    
                </throws>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, or (3) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateObject" type="void" line="3254">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="Object"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="3258">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Object&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in either the current row or
                  the insert row of this rowset, but it does not update the
                  database.  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Both of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    x the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name does not match the
                      name of a column in this rowset, (2) the cursor is not on
                      one of this rowset&apos;s rows or its insert row, or (3) this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateObject" type="void" line="3280">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <javadoc line="3284">
                Inserts the contents of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object&apos;s insert
                  row into this rowset immediately following the current row.
                  If the current row is the
                  position after the last row or before the first row, the new row will
                  be inserted at the end of the rowset.  This method also notifies
                  listeners registered with this rowset that the row has changed.
                  &lt;P&gt;
                  The cursor must be on the insert row when this method is called.                
                <throws>
                    SQLException if (1) the cursor is not on the insert row,
                      (2) one or more of the non-nullable columns in the insert
                      row has not been given a value, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="insertRow" type="void" line="3299"/>
            <javadoc line="3303">
                Marks the current row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as
                  updated and notifies listeners registered with this rowset that the
                  row has changed.
                  &lt;P&gt;
                  This method  cannot be called when the cursor is on the insert row, and
                  it should be called before the cursor moves to another row.  If it is
                  called after the cursor moves to another row, this method has no effect,
                  and the updates made before the cursor moved will be lost.                
                <throws>
                    SQLException if the cursor is on the insert row or this
                      rowset is &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateRow" type="void" line="3316"/>
            <javadoc line="3320">
                Deletes the current row from this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object and
                  notifies listeners registered with this rowset that a row has changed.
                  This method cannot be called when the cursor is on the insert row.
                  &lt;P&gt;
                  This method marks the current row as deleted, but it does not delete
                  the row from the underlying data source.  The method
                  &lt;code&gt;acceptChanges&lt;/code&gt; must be called to delete the row in
                  the data source.                
                <throws>
                    SQLException if (1) this method is called when the cursor
                      is on the insert row, before the first row, or after the
                      last row or (2) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="deleteRow" type="void" line="3335"/>
            <javadoc line="3339">
                Sets the current row with its original value and marks the row as
                  not updated, thus undoing any changes made to the row since the
                  last call to the methods &lt;code&gt;updateRow&lt;/code&gt; or &lt;code&gt;deleteRow&lt;/code&gt;.
                  This method should be called only when the cursor is on a row in
                  this rowset.                
                <throws>
                    SQLException if the cursor is on the insert row, before the
                      first row, or after the last row                    
                </throws>
            </javadoc>
            <method name="refreshRow" type="void" line="3349"/>
            <javadoc line="3353">
                Rolls back any updates made to the current row of this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object and notifies listeners that
                  a row has changed.  To have an effect, this method
                  must be called after an &lt;code&gt;updateXXX&lt;/code&gt; method has been
                  called and before the method &lt;code&gt;updateRow&lt;/code&gt; has been called.
                  If no updates have been made or the method &lt;code&gt;updateRow&lt;/code&gt;
                  has already been called, this method has no effect.
                  &lt;P&gt;
                  After &lt;code&gt;updateRow&lt;/code&gt; is called it is the
                  &lt;code&gt;cancelRowUpdates&lt;/code&gt; has no affect on the newly
                  inserted values. The method &lt;code&gt;cancelRowInsert&lt;/code&gt; can
                  be used to remove any rows inserted into the RowSet.                
                <throws>
                    SQLException if the cursor is on the insert row, before the
                      first row, or after the last row                    
                </throws>
            </javadoc>
            <method name="cancelRowUpdates" type="void" line="3370"/>
            <javadoc line="3374">
                Moves the cursor for this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object
                  to the insert row.  The current row in the rowset is remembered
                  while the cursor is on the insert row.
                  &lt;P&gt;
                  The insert row is a special row associated with an updatable
                  rowset.  It is essentially a buffer where a new row may
                  be constructed by calling the appropriate &lt;code&gt;updateXXX&lt;/code&gt;
                  methods to assign a value to each column in the row.  A complete
                  row must be constructed; that is, every column that is not nullable
                  must be assigned a value.  In order for the new row to become part
                  of this rowset, the method &lt;code&gt;insertRow&lt;/code&gt; must be called
                  before the cursor is moved back to the rowset.
                  &lt;P&gt;
                  Only certain methods may be invoked while the cursor is on the insert
                  row; many methods throw an exception if they are called while the
                  cursor is there.  In addition to the &lt;code&gt;updateXXX&lt;/code&gt;
                  and &lt;code&gt;insertRow&lt;/code&gt; methods, only the &lt;code&gt;getXXX&lt;/code&gt; methods
                  may be called when the cursor is on the insert row.  A &lt;code&gt;getXXX&lt;/code&gt;
                  method should be called on a column only after an &lt;code&gt;updateXXX&lt;/code&gt;
                  method has been called on that column; otherwise, the value returned is
                  undetermined.                
                <throws>
                    SQLException if this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="moveToInsertRow" type="void" line="3400"/>
            <javadoc line="3404">
                Moves the cursor for this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object to
                  the current row.  The current row is the row the cursor was on
                  when the method &lt;code&gt;moveToInsertRow&lt;/code&gt; was called.
                  &lt;P&gt;
                  Calling this method has no effect unless it is called while the
                  cursor is on the insert row.                
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="moveToCurrentRow" type="void" line="3414"/>
            <javadoc line="3418">
                Returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getStatement" type="Statement" line="3424"/>
            <javadoc line="3428">
                Retrieves the value of the designated column in this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a &lt;code&gt;Ref&lt;/code&gt; object
                  in the Java programming lanugage.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <return>
                    a &lt;code&gt;Ref&lt;/code&gt; object representing an SQL&lt;code&gt; REF&lt;/code&gt; value                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) the designated column does not store an
                      SQL &lt;code&gt;REF&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getRef" type="Ref" line="3442">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="3446">
                Retrieves the value of the designated column in this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a &lt;code&gt;Blob&lt;/code&gt; object
                  in the Java programming lanugage.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <return>
                    a &lt;code&gt;Blob&lt;/code&gt; object representing an SQL &lt;code&gt;BLOB&lt;/code&gt; value                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) the designated column does not store an
                      SQL &lt;code&gt;BLOB&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getBlob" type="Blob" line="3460">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="3464">
                Retrieves the value of the designated column in this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a &lt;code&gt;Clob&lt;/code&gt; object
                  in the Java programming lanugage.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <return>
                    a &lt;code&gt;Clob&lt;/code&gt; object representing an SQL &lt;code&gt;CLOB&lt;/code&gt; value                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) the designated column does not store an
                      SQL &lt;code&gt;CLOB&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getClob" type="Clob" line="3478">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="3482">
                Retrieves the value of the designated column in this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as an &lt;code&gt;Array&lt;/code&gt; object
                  in the Java programming lanugage.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <return>
                    an &lt;code&gt;Array&lt;/code&gt; object representing an SQL
                      &lt;code&gt;ARRAY&lt;/code&gt; value                    
                </return>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) the designated column does not store an
                      SQL &lt;code&gt;ARRAY&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getArray" type="Array" line="3497">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="3503">
                Retrieves the value of the designated column in this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a &lt;code&gt;Ref&lt;/code&gt; object
                  in the Java programming lanugage.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <return>
                    a &lt;code&gt;Ref&lt;/code&gt; object representing an SQL&lt;code&gt; REF&lt;/code&gt; value                    
                </return>
                <throws>
                    SQLException  if (1) the given column name is not the name
                      of a column in this rowset, (2) the cursor is not on one of
                      this rowset&apos;s rows or its insert row, or (3) the column value
                      is not an SQL &lt;code&gt;REF&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getRef" type="Ref" line="3516">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="3520">
                Retrieves the value of the designated column in this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a &lt;code&gt;Blob&lt;/code&gt; object
                  in the Java programming lanugage.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <return>
                    a &lt;code&gt;Blob&lt;/code&gt; object representing an SQL
                      &lt;code&gt;BLOB&lt;/code&gt; value                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset&apos;s rows or its insert row, or (3) the designated
                      column does not store an SQL &lt;code&gt;BLOB&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getBlob" type="Blob" line="3534">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="3538">
                Retrieves the value of the designated column in this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a &lt;code&gt;Clob&lt;/code&gt; object
                  in the Java programming lanugage.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <return>
                    a &lt;code&gt;Clob&lt;/code&gt; object representing an SQL
                      &lt;code&gt;CLOB&lt;/code&gt; value                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset&apos;s rows or its insert row, or (3) the designated
                      column does not store an SQL &lt;code&gt;CLOB&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getClob" type="Clob" line="3552">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="3556">
                Retrieves the value of the designated column in this
                  &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as an &lt;code&gt;Array&lt;/code&gt; object
                  in the Java programming lanugage.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <return>
                    an &lt;code&gt;Array&lt;/code&gt; object representing an SQL
                      &lt;code&gt;ARRAY&lt;/code&gt; value                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset&apos;s rows or its insert row, or (3) the designated
                      column does not store an SQL &lt;code&gt;ARRAY&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getArray" type="Array" line="3570">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="3574">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.sql.Date&lt;/code&gt;
                  object, using the given &lt;code&gt;Calendar&lt;/code&gt; object to construct an
                  appropriate millisecond value for the date.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <param>
                    cal the &lt;code&gt;java.util.Calendar&lt;/code&gt; object to use in
                      constructing the date                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset&apos;s rows or its insert row, or (3) the designated
                      column does not store an SQL &lt;code&gt;DATE&lt;/code&gt; or
                      &lt;code&gt;TIMESTAMP&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="3593">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="3597">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.sql.Date&lt;/code&gt;
                  object, using the given &lt;code&gt;Calendar&lt;/code&gt; object to construct an
                  appropriate millisecond value for the date.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    cal the &lt;code&gt;java.util.Calendar&lt;/code&gt; object to use in
                      constructing the date                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset&apos;s rows or its insert row, or (3) the designated
                      column does not store an SQL &lt;code&gt;DATE&lt;/code&gt; or
                      &lt;code&gt;TIMESTAMP&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getDate" type="java.sql.Date" line="3615">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="3619">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.sql.Time&lt;/code&gt;
                  object, using the given &lt;code&gt;Calendar&lt;/code&gt; object to construct an
                  appropriate millisecond value for the date.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <param>
                    cal the &lt;code&gt;java.util.Calendar&lt;/code&gt; object to use in
                      constructing the date                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset&apos;s rows or its insert row, or (3) the designated
                      column does not store an SQL &lt;code&gt;TIME&lt;/code&gt; or
                      &lt;code&gt;TIMESTAMP&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="3638">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="3642">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.sql.Time&lt;/code&gt;
                  object, using the given &lt;code&gt;Calendar&lt;/code&gt; object to construct an
                  appropriate millisecond value for the date.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    cal the &lt;code&gt;java.util.Calendar&lt;/code&gt; object to use in
                      constructing the date                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset&apos;s rows or its insert row, or (3) the designated
                      column does not store an SQL &lt;code&gt;TIME&lt;/code&gt; or
                      &lt;code&gt;TIMESTAMP&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getTime" type="java.sql.Time" line="3660">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="3664">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a &lt;code&gt;java.sql.Timestamp&lt;/code&gt;
                  object, using the given &lt;code&gt;Calendar&lt;/code&gt; object to construct an
                  appropriate millisecond value for the date.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in the rowset                    
                </param>
                <param>
                    cal the &lt;code&gt;java.util.Calendar&lt;/code&gt; object to use in
                      constructing the date                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset&apos;s rows or its insert row, or (3) the designated
                      column does not store an SQL &lt;code&gt;TIME&lt;/code&gt; or
                      &lt;code&gt;TIMESTAMP&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="3683">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="3687">
                Retrieves the value of the designated column in the current row
                  of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object as a
                  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object, using the given
                  &lt;code&gt;Calendar&lt;/code&gt; object to construct an appropriate
                  millisecond value for the date.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this rowset, ignoring case                    
                </param>
                <param>
                    cal the &lt;code&gt;java.util.Calendar&lt;/code&gt; object to use in
                      constructing the date                    
                </param>
                <return>
                    the column value; if the value is SQL &lt;code&gt;NULL&lt;/code&gt;,
                      the result is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <throws>
                    SQLException if (1) the given column name is not the name of
                      a column in this rowset, (2) the cursor is not on one of
                      this rowset&apos;s rows or its insert row, or (3) the designated
                      column does not store an SQL &lt;code&gt;DATE&lt;/code&gt;,
                      &lt;code&gt;TIME&lt;/code&gt;, or &lt;code&gt;TIMESTAMP&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="getTimestamp" type="java.sql.Timestamp" line="3706">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="3710">
                Sets the metadata for this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object
                  with the given &lt;code&gt;RowSetMetaData&lt;/code&gt; object.                
                <param>
                    md a &lt;code&gt;RowSetMetaData&lt;/code&gt; object instance containing
                      metadata about the columsn in the rowset                    
                </param>
                <throws>
                    SQLException if invalid meta data is supplied to the
                      rowset                    
                </throws>
            </javadoc>
            <method name="setMetaData" type="void" line="3719">
                <params>
                    <param name="md" type="RowSetMetaData"/>
                </params>
            </method>
            <method name="getOriginal" type="ResultSet" line="3723"/>
            <javadoc line="3727">
                Returns a result set containing the original value of the rowset.
                  The cursor is positioned before the first row in the result set.
                  Only rows contained in the result set returned by getOriginal()
                  are said to have an original value.                
                <return>
                    the original result set of the rowset                    
                </return>
                <throws>
                    SQLException if an error occurs produce the
                      &lt;code&gt;ResultSet&lt;/code&gt; object                    
                </throws>
            </javadoc>
            <method name="getOriginalRow" type="ResultSet" line="3737"/>
            <javadoc line="3741">
                Returns a result set containing the original value of the current
                  row only.                
                <throws>
                    SQLException if there is no current row                    
                </throws>
                <see>
                    #setOriginalRow                    
                </see>
            </javadoc>
            <method name="setOriginalRow" type="void" line="3748"/>
            <javadoc line="3752">
                Returns the columns that make a key to uniquely identify a
                  row in this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object.                
                <return>
                    an array of column number that constites a primary
                      key for this rowset. This array should be empty
                      if no columns is representitive of a primary key                    
                </return>
                <throws>
                    SQLException if the rowset is empty or no columns
                      are designated as primary keys                    
                </throws>
                <see>
                    #setKeyColumns                    
                </see>
            </javadoc>
            <method name="getKeyColumns" type="int[]" line="3763"/>
            <javadoc line="3767">
                Sets this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object&apos;s
                  &lt;code&gt;keyCols&lt;/code&gt; field with the given array of column
                  numbers, which forms a key for uniquely identifying a row
                  in this rowset.                
                <param>
                    cols an array of &lt;code&gt;int&lt;/code&gt; indicating the
                      columns that form a primary key for this
                      &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object; every
                      element in the array must be greater than
                      &lt;code&gt;0&lt;/code&gt; and less than or equal to the number
                      of columns in this rowset                    
                </param>
                <throws>
                    SQLException if any of the numbers in the
                      given array is not valid for this rowset                    
                </throws>
                <see>
                    #getKeyColumns                    
                </see>
            </javadoc>
            <method name="setKeyColumns" type="void" line="3783">
                <params>
                    <param name="cols" type="int[]"/>
                </params>
            </method>
            <javadoc line="3787">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Ref&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Either of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    ref the &lt;code&gt;java.sql.Ref&lt;/code&gt; object that will be set as
                      the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateRef" type="void" line="3811">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="ref" type="java.sql.Ref"/>
                </params>
            </method>
            <javadoc line="3815">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Ref&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Either of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the name of the column
                      to be updated; must match one of the column names in this
                      &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <param>
                    ref the &lt;code&gt;java.sql.Ref&lt;/code&gt; object that will be set as
                      the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name is not valid,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateRef" type="void" line="3839">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="ref" type="java.sql.Ref"/>
                </params>
            </method>
            <javadoc line="3843">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Clob&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Either of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    c the &lt;code&gt;java.sql.Clob&lt;/code&gt; object that will be set as
                      the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateClob" type="void" line="3867">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="c" type="Clob"/>
                </params>
            </method>
            <javadoc line="3871">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Clob&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Either of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the name of the column
                      to be updated; must match one of the column names in this
                      &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <param>
                    c the &lt;code&gt;java.sql.Clob&lt;/code&gt; object that will be set as
                      the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name is not valid,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateClob" type="void" line="3895">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="c" type="Clob"/>
                </params>
            </method>
            <javadoc line="3899">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Blob&lt;/code&gt; value.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Either of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    b the &lt;code&gt;java.sql.Blob&lt;/code&gt; object that will be set as
                      the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateBlob" type="void" line="3923">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="b" type="Blob"/>
                </params>
            </method>
            <javadoc line="3927">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Blob&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Either of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the name of the column
                      to be updated; must match one of the column names in this
                      &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <param>
                    b the &lt;code&gt;java.sql.Blob&lt;/code&gt; object that will be set as
                      the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name is not valid,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateBlob" type="void" line="3951">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="b" type="Blob"/>
                </params>
            </method>
            <javadoc line="3955">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Array&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Either of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnIndex the first column is &lt;code&gt;1&lt;/code&gt;, the second
                      is &lt;code&gt;2&lt;/code&gt;, and so on; must be &lt;code&gt;1&lt;/code&gt; or larger
                      and equal to or less than the number of columns in this rowset                    
                </param>
                <param>
                    a the &lt;code&gt;java.sql.Array&lt;/code&gt; object that will be set as
                      the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column index is out of bounds,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateArray" type="void" line="3979">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="a" type="Array"/>
                </params>
            </method>
            <javadoc line="3983">
                Sets the designated column in either the current row or the insert
                  row of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with the given
                  &lt;code&gt;Array&lt;/code&gt; object.
                  &lt;P&gt;
                  This method updates a column value in the current row or the insert
                  row of this rowset, but it does not update the database.
                  If the cursor is on a row in the rowset, the
                  method {@link #updateRow} must be called to update the database.
                  If the cursor is on the insert row, the method {@link #insertRow}must be called, which will insert the new row into both this rowset
                  and the database. Either of these methods must be called before the
                  cursor moves to another row.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the name of the column
                      to be updated; must match one of the column names in this
                      &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </param>
                <param>
                    a the &lt;code&gt;java.sql.Array&lt;/code&gt; object that will be set as
                      the new column value                    
                </param>
                <throws>
                    SQLException if (1) the given column name is not valid,
                      (2) the cursor is not on one of this rowset&apos;s rows or its
                      insert row, or (3) this rowset is
                      &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="updateArray" type="void" line="4007">
                <params>
                    <param name="columnName" type="String"/>
                    <param name="a" type="Array"/>
                </params>
            </method>
            <javadoc line="4011">
                Populates this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with data.
                  This form of the method uses the rowset&apos;s user, password, and url or
                  data source name properties to create a database
                  connection.  If properties that are needed
                  have not been set, this method will throw an exception.
                  &lt;P&gt;
                  Another form of this method uses an existing JDBC &lt;code&gt;Connection&lt;/code&gt;
                  object instead of creating a new one; therefore, it ignores the
                  properties used for establishing a new connection.
                  &lt;P&gt;
                  The query specified by the command property is executed to create a
                  &lt;code&gt;ResultSet&lt;/code&gt; object from which to retrieve data.
                  The current contents of the rowset are discarded, and the
                  rowset&apos;s metadata is also (re)set.  If there are outstanding updates,
                  they are also ignored.
                  &lt;P&gt;
                  The method &lt;code&gt;execute&lt;/code&gt; closes any database connections that it
                  creates.                
                <throws>
                    SQLException if an error occurs or the
                      necessary properties have not been set                    
                </throws>
            </javadoc>
            <method name="execute" type="void" line="4034"/>
            <javadoc line="4038">
                Populates this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object with data,
                  using the given connection to produce the result set from
                  which data will be read.  A second form of this method,
                  which takes no arguments, uses the values from this rowset&apos;s
                  user, password, and either url or data source properties to
                  create a new database connection. The form of &lt;code&gt;execute&lt;/code&gt;
                  that is given a connection ignores these properties.                
                <param>
                    conn A standard JDBC &lt;code&gt;Connection&lt;/code&gt; object with valid
                      properties that the &lt;code&gt;JoinRowSet&lt;/code&gt; implementation
                      can pass to a synchronization provider to establish a
                      connection to the datasource                    
                </param>
                <throws>
                    SQLException if an invalid &lt;code&gt;Connection&lt;/code&gt; is supplied
                      or an error occurs in establishing the connection to the
                      data soure                    
                </throws>
                <see>
                    java.sql.Connection                    
                </see>
            </javadoc>
            <method name="execute" type="void" line="4056">
                <params>
                    <param name="conn" type="Connection"/>
                </params>
            </method>
            <javadoc line="4060">
                Provide interface coverage for getURL(int) in ResultSet-&gt;RowSet                
            </javadoc>
            <method name="getURL" type="java.net.URL" line="4063">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="4067">
                Provide interface coverage for getURL(String) in ResultSet-&gt;RowSet                
            </javadoc>
            <method name="getURL" type="java.net.URL" line="4070">
                <params>
                    <param name="columnName" type="String"/>
                </params>
            </method>
            <javadoc line="4074">
                Creates a new &lt;code&gt;WebRowSet&lt;/code&gt; object, populates it with the
                  data in the given &lt;code&gt;ResultSet&lt;/code&gt; object, and writes it
                  to the given &lt;code&gt;java.io.Writer&lt;/code&gt; object in XML format.                
                <throws>
                    SQLException if an error occurs writing out the rowset
                      contents to XML                    
                </throws>
            </javadoc>
            <method name="writeXml" type="void" line="4083">
                <params>
                    <param name="rs" type="ResultSet"/>
                    <param name="writer" type="java.io.Writer"/>
                </params>
            </method>
            <javadoc line="4089">
                Writes this &lt;code&gt;JoinRowSet&lt;/code&gt; object to the given
                  &lt;code&gt;java.io.Writer&lt;/code&gt; object in XML format. In
                  addition to the rowset&apos;s data, its properties and metadata
                  are also included.                
                <throws>
                    SQLException if an error occurs writing out the rowset
                      contents to XML                    
                </throws>
            </javadoc>
            <method name="writeXml" type="void" line="4098">
                <params>
                    <param name="writer" type="java.io.Writer"/>
                </params>
            </method>
            <javadoc line="4102">
                Reads this &lt;code&gt;JoinRowSet&lt;/code&gt; object in its XML format.                
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="readXml" type="void" line="4107">
                <params>
                    <param name="reader" type="java.io.Reader"/>
                </params>
            </method>
            <javadoc line="4114">
                Reads a stream based XML input to populate an &lt;code&gt;WebRowSet&lt;/code&gt;                
                <throws>
                    SQLException if a data source access occurs                    
                </throws>
                <throws>
                    IOException if a IO exception occurs                    
                </throws>
            </javadoc>
            <method name="readXml" type="void" line="4120">
                <params>
                    <param name="iStream" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="4126">
                Creates an an output stream of the internal state and contents of a
                  &lt;code&gt;WebRowSet&lt;/code&gt; for XML proceessing                
                <throws>
                    SQLException if a datasource access occurs                    
                </throws>
                <throws>
                    IOException if an IO exception occurs                    
                </throws>
            </javadoc>
            <method name="writeXml" type="void" line="4133">
                <params>
                    <param name="oStream" type="java.io.OutputStream"/>
                </params>
            </method>
            <javadoc line="4137">
                Creates a new &lt;code&gt;WebRowSet&lt;/code&gt; object, populates it with
                  the contents of the &lt;code&gt;ResultSet&lt;/code&gt; and creates an output
                  streams the internal state and contents of the rowset for XML processing.                
                <throws>
                    SQLException if a datasource access occurs                    
                </throws>
                <throws>
                    IOException if an IO exception occurs                    
                </throws>
            </javadoc>
            <method name="writeXml" type="void" line="4145">
                <params>
                    <param name="rs" type="ResultSet"/>
                    <param name="oStream" type="java.io.OutputStream"/>
                </params>
            </method>
            <javadoc line="4151">
                %%% Javadoc comments to be added here                
            </javadoc>
            <method name="createWebRowSet" type="WebRowSet" line="4154">
                <comment line="4157">
                    check if it has already been initialized.                    
                </comment>
                <scope line="4155"/>
                <scope line="4158"/>
            </method>
            <javadoc line="4166">
                Returns the last set SQL &lt;code&gt;JOIN&lt;/code&gt; type in this JoinRowSetImpl
                  object                
                <return>
                    joinType One of the standard JoinRowSet static field JOIN types                    
                </return>
                <throws>
                    SQLException if an error occurs determining the current join type                    
                </throws>
            </javadoc>
            <method name="getJoinType" type="int" line="4173">
                <comment line="4176">
                    Default JoinRowSet type                    
                </comment>
                <scope line="4174"/>
                <declaration name="i" type="Integer" line="4178"/>
            </method>
            <javadoc line="4182">
                The listener will be notified whenever an event occurs on this &lt;code&gt;JoinRowSet&lt;/code&gt;
                  object.
                  &lt;P&gt;
                  A listener might, for example, be a table or graph that needs to
                  be updated in order to accurately reflect the current state of
                  the &lt;code&gt;RowSet&lt;/code&gt; object.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: if the &lt;code&gt;RowSetListener&lt;/code&gt; object is
                  &lt;code&gt;null&lt;/code&gt;, this method silently discards the &lt;code&gt;null&lt;/code&gt;
                  value and does not add a null reference to the set of listeners.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: if the listener is already set, and the new &lt;code&gt;RowSetListerner&lt;/code&gt;
                  instance is added to the set of listeners already registered to receive
                  event notifications from this &lt;code&gt;RowSet&lt;/code&gt;.                
                <param>
                    listener an object that has implemented the
                      &lt;code&gt;javax.sql.RowSetListener&lt;/code&gt; interface and wants to be notified
                      of any events that occur on this &lt;code&gt;JoinRowSet&lt;/code&gt; object; May be
                      null.                    
                </param>
                <see>
                    #removeRowSetListener                    
                </see>
            </javadoc>
            <method name="addRowSetListener" type="void" line="4204">
                <params>
                    <param name="listener" type="RowSetListener"/>
                </params>
            </method>
            <javadoc line="4208">
                Removes the designated object from this &lt;code&gt;JoinRowSet&lt;/code&gt; object&apos;s list of listeners.
                  If the given argument is not a registered listener, this method
                  does nothing.
                  &lt;b&gt;Note&lt;/b&gt;: if the &lt;code&gt;RowSetListener&lt;/code&gt; object is
                  &lt;code&gt;null&lt;/code&gt;, this method silently discards the &lt;code&gt;null&lt;/code&gt;
                  value.                
                <param>
                    listener a &lt;code&gt;RowSetListener&lt;/code&gt; object that is on the list
                      of listeners for this &lt;code&gt;JoinRowSet&lt;/code&gt; object                    
                </param>
                <see>
                    #addRowSetListener                    
                </see>
            </javadoc>
            <method name="removeRowSetListener" type="void" line="4221">
                <params>
                    <param name="listener" type="RowSetListener"/>
                </params>
            </method>
            <javadoc line="4225">
                Converts this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object to a collection
                  of tables. The sample implementation utilitizes the &lt;code&gt;TreeMap&lt;/code&gt;
                  collection type.
                  This class guarantees that the map will be in ascending key order,
                  sorted according to the natural order for the key&apos;s class.                
                <return>
                    a &lt;code&gt;Collection&lt;/code&gt; object consisting of tables,
                      each of which is a copy of a row in this
                      &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object                    
                </return>
                <throws>
                    SQLException if an error occurs in generating the collection                    
                </throws>
                <see>
                    #toCollection(int)                    
                </see>
                <see>
                    #toCollection(String)                    
                </see>
                <see>
                    java.util.TreeMap                    
                </see>
            </javadoc>
            <method name="toCollection" type="Collection<?>" line="4240"/>
            <javadoc line="4244">
                Returns the specified column of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object
                  as a &lt;code&gt;Collection&lt;/code&gt; object.  This method makes a copy of the
                  column&apos;s data and utilitizes the &lt;code&gt;Vector&lt;/code&gt; to establish the
                  collection. The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array
                  objects allowing the individual components to be accessed using an
                  an integer index similar to that of an array.                
                <return>
                    a &lt;code&gt;Collection&lt;/code&gt; object that contains the value(s)
                      stored in the specified column of this
                      &lt;code&gt;JoinRowSetImpl&lt;/code&gt;
                      object                    
                </return>
                <throws>
                    SQLException if an error occurs generated the collection; or
                      an invalid column is provided.                    
                </throws>
                <see>
                    #toCollection()                    
                </see>
                <see>
                    #toCollection(String)                    
                </see>
                <see>
                    java.util.Vector                    
                </see>
            </javadoc>
            <method name="toCollection" type="Collection<?>" line="4262">
                <params>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="4266">
                Returns the specified column of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object
                  as a &lt;code&gt;Collection&lt;/code&gt; object.  This method makes a copy of the
                  column&apos;s data and utilitizes the &lt;code&gt;Vector&lt;/code&gt; to establish the
                  collection. The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array
                  objects allowing the individual components to be accessed using an
                  an integer index similar to that of an array.                
                <return>
                    a &lt;code&gt;Collection&lt;/code&gt; object that contains the value(s)
                      stored in the specified column of this
                      &lt;code&gt;JoinRowSetImpl&lt;/code&gt;
                      object                    
                </return>
                <throws>
                    SQLException if an error occurs generated the collection; or
                      an invalid column is provided.                    
                </throws>
                <see>
                    #toCollection()                    
                </see>
                <see>
                    #toCollection(int)                    
                </see>
                <see>
                    java.util.Vector                    
                </see>
            </javadoc>
            <method name="toCollection" type="Collection<?>" line="4284">
                <params>
                    <param name="column" type="String"/>
                </params>
            </method>
            <javadoc line="4288">
                Creates a &lt;code&gt;RowSet&lt;/code&gt; object that is a copy of
                  this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object&apos;s table structure
                  and the constraints only.
                  There will be no data in the object being returned.
                  Updates made on a copy are not visible to the original rowset.
                  &lt;P&gt;
                  This helps in getting the underlying XML schema which can
                  be used as the basis for populating a &lt;code&gt;WebRowSet&lt;/code&gt;.                
                <return>
                    a new &lt;code&gt;CachedRowSet&lt;/code&gt; object that is a copy
                      of this &lt;code&gt;JoinRowSetImpl&lt;/code&gt; object&apos;s schema and
                      retains all the constraints on the original rowset but contains
                      no data                    
                </return>
                <throws>
                    SQLException if an error occurs in generating the copy
                      of the &lt;code&gt;CachedRowSet&lt;/code&gt; object                    
                </throws>
                <see>
                    #createShared                    
                </see>
                <see>
                    #createCopy                    
                </see>
                <see>
                    #createCopyNoConstraints                    
                </see>
                <see>
                    javax.sql.RowSetEvent                    
                </see>
                <see>
                    javax.sql.RowSetListener                    
                </see>
            </javadoc>
            <method name="createCopySchema" type="CachedRowSet" line="4310"/>
            <javadoc line="4314">
                {@inheritDoc}                
            </javadoc>
            <method name="setSyncProvider" type="void" line="4317">
                <params>
                    <param name="providerStr" type="String"/>
                </params>
            </method>
            <javadoc line="4321">
                {@inheritDoc}                
            </javadoc>
            <method name="acceptChanges" type="void" line="4324"/>
            <javadoc line="4328">
                {@inheritDoc}                
            </javadoc>
            <method name="getSyncProvider" type="SyncProvider" line="4331"/>
            <javadoc line="4335">
                This method re populates the resBundle
                  during the deserialization process                
            </javadoc>
            <method name="readObject" type="void" line="4340">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <comment line="4342">
                    Default state initialization happens here                    
                </comment>
                <comment line="4344">
                    Initialization of transient Res Bundle happens here .                    
                </comment>
                <scope line="4344"/>
                <scope line="4346"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="4352"/>
        </class>
    </source>