<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.rowset.internal">
        <import package="com.sun.rowset.JdbcRowSetResourceBundle"/>
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="java.io"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.util"/>
        <import package="javax.sql.rowset"/>
        <import package="javax.sql.rowset.spi"/>
        <class name="WebRowSetXmlWriter" line="10">
            <implements interface="XmlWriter"/>
            <implements interface="Serializable"/>
            <javadoc line="10">
                An implementation of the &lt;code&gt;XmlWriter&lt;/code&gt; interface, which writes a
                  &lt;code&gt;WebRowSet&lt;/code&gt; object to an output stream as an XML document.                
            </javadoc>
            <declaration name="writer" type="java.io.Writer" line="15"/>
            <javadoc line="15">
                The &lt;code&gt;java.io.Writer&lt;/code&gt; object to which this &lt;code&gt;WebRowSetXmlWriter&lt;/code&gt;
                  object will write when its &lt;code&gt;writeXML&lt;/code&gt; method is called. The value
                  for this field is set with the &lt;code&gt;java.io.Writer&lt;/code&gt; object given
                  as the second argument to the &lt;code&gt;writeXML&lt;/code&gt; method.                
            </javadoc>
            <declaration name="stack" type="java.util.Stack" line="22"/>
            <javadoc line="22">
                The &lt;code&gt;java.util.Stack&lt;/code&gt; object that this &lt;code&gt;WebRowSetXmlWriter&lt;/code&gt;
                  object will use for storing the tags to be used for writing the calling
                  &lt;code&gt;WebRowSet&lt;/code&gt; object as an XML document.                
            </javadoc>
            <declaration name="resBundle" type="JdbcRowSetResourceBundle" line="28"/>
            <method name="WebRowSetXmlWriter" type="constructor" line="29">
                <scope line="30"/>
                <scope line="33"/>
            </method>
            <javadoc line="37">
                Writes the given &lt;code&gt;WebRowSet&lt;/code&gt; object as an XML document
                  using the given &lt;code&gt;java.io.Writer&lt;/code&gt; object. The XML document
                  will include the &lt;code&gt;WebRowSet&lt;/code&gt; object&apos;s data, metadata, and
                  properties.  If a data value has been updated, that information is also
                  included.
                  &lt;P&gt;
                  This method is called by the &lt;code&gt;XmlWriter&lt;/code&gt; object that is
                  referenced in the calling &lt;code&gt;WebRowSet&lt;/code&gt; object&apos;s
                  &lt;code&gt;xmlWriter&lt;/code&gt; field.  The &lt;code&gt;XmlWriter.writeXML&lt;/code&gt;
                  method passes to this method the arguments that were supplied to it.                
                <param>
                    caller the <code>WebRowSet</code> object to be written; must
                      be a rowset for which this <code>WebRowSetXmlWriter</code> object
                      is the writer                    
                </param>
                <param>
                    wrt the <code>java.io.Writer</code> object to which
                      <code>caller</code> will be written                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this <code>WebRowSetXmlWriter</code> object is not the writer
                      for the given rowset                    
                </exception>
                <see>
                    XmlWriter#writeXML                    
                </see>
            </javadoc>
            <method name="writeXML" type="void" line="58">
                <params>
                    <param name="caller" type="WebRowSet"/>
                    <param name="wrt" type="java.io.Writer"/>
                </params>
            </method>
            <javadoc line="63">
                Writes the given &lt;code&gt;WebRowSet&lt;/code&gt; object as an XML document
                  using the given &lt;code&gt;java.io.OutputStream&lt;/code&gt; object. The XML document
                  will include the &lt;code&gt;WebRowSet&lt;/code&gt; object&apos;s data, metadata, and
                  properties.  If a data value has been updated, that information is also
                  included.
                  &lt;P&gt;
                  Using stream is a faster way than using &lt;code&gt;java.io.Writer&lt;code/&gt;
                  This method is called by the &lt;code&gt;XmlWriter&lt;/code&gt; object that is
                  referenced in the calling &lt;code&gt;WebRowSet&lt;/code&gt; object&apos;s
                  &lt;code&gt;xmlWriter&lt;/code&gt; field.  The &lt;code&gt;XmlWriter.writeXML&lt;/code&gt;
                  method passes to this method the arguments that were supplied to it.                
                <param>
                    caller the <code>WebRowSet</code> object to be written; must
                      be a rowset for which this <code>WebRowSetXmlWriter</code> object
                      is the writer                    
                </param>
                <param>
                    oStream the <code>java.io.OutputStream</code> object to which
                      <code>caller</code> will be written                    
                </param>
                <throws>
                    SQLException if a database access error occurs or
                      this <code>WebRowSetXmlWriter</code> object is not the writer
                      for the given rowset                    
                </throws>
                <see>
                    XmlWriter#writeXML                    
                </see>
            </javadoc>
            <method name="writeXML" type="void" line="85">
                <params>
                    <param name="caller" type="WebRowSet"/>
                    <param name="oStream" type="java.io.OutputStream"/>
                </params>
            </method>
            <javadoc line="90">
                @exception SQLException if a database access error occurs                
            </javadoc>
            <method name="writeRowSet" type="void" line="93">
                <params>
                    <param name="caller" type="WebRowSet"/>
                </params>
                <scope line="94"/>
                <scope line="101"/>
            </method>
            <method name="startHeader" type="void" line="105"/>
            <method name="endHeader" type="void" line="111"/>
            <javadoc line="114">
                @exception SQLException if a database access error occurs                
            </javadoc>
            <method name="writeProperties" type="void" line="117">
                <params>
                    <param name="caller" type="WebRowSet"/>
                </params>
                <scope line="119">
                    <scope line="124"/>
                    <scope line="127"/>
                    <declaration name="kc" type="int[]" line="132"/>
                    <declaration name="typeMap" type="java.util.Map" line="136"/>
                    <scope line="137">
                        <declaration name="i" type="Iterator" line="138"/>
                        <declaration name="c" type="Class" line="139"/>
                        <declaration name="type" type="String" line="140"/>
                        <scope line="141"/>
                    </scope>
                    <declaration name="itype" type="int" line="153"/>
                    <declaration name="strType" type="String" line="154"/>
                    <scope line="155"/>
                    <scope line="158"/>
                    <scope line="161"/>
                    <declaration name="strProviderInstance" type="String" line="169"/>
                    <declaration name="strProvider" type="String" line="170"/>
                </scope>
                <scope line="178"/>
            </method>
            <javadoc line="183">
                @exception SQLException if a database access error occurs                
            </javadoc>
            <method name="writeMetaData" type="void" line="186">
                <params>
                    <param name="caller" type="WebRowSet"/>
                </params>
                <declaration name="columnCount" type="int" line="187"/>
                <scope line="189">
                    <declaration name="rsmd" type="ResultSetMetaData" line="190"/>
                    <scope line="193"/>
                </scope>
                <scope line="215"/>
            </method>
            <javadoc line="220">
                @exception SQLException if a database access error occurs                
            </javadoc>
            <method name="writeData" type="void" line="223">
                <params>
                    <param name="caller" type="WebRowSet"/>
                </params>
                <declaration name="rs" type="ResultSet" line="224"/>
                <scope line="225">
                    <declaration name="rsmd" type="ResultSetMetaData" line="226"/>
                    <declaration name="columnCount" type="int" line="227"/>
                    <declaration name="i" type="int" line="228"/>
                    <scope line="232">
                        <scope line="233"/>
                        <scope line="236"/>
                        <scope line="239"/>
                        <scope line="242"/>
                        <scope line="245">
                            <scope line="246"/>
                            <scope line="256"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="266"/>
            </method>
            <method name="writeValue" type="void" line="270">
                <params>
                    <param name="idx" type="int"/>
                    <param name="caller" type="RowSet"/>
                </params>
                <scope line="271">
                    <declaration name="type" type="int" line="272"/>
                    <declaration name="b" type="boolean" line="276"/>
                    <declaration name="s" type="short" line="282"/>
                    <declaration name="i" type="int" line="287"/>
                    <declaration name="l" type="long" line="292"/>
                    <declaration name="f" type="float" line="298"/>
                    <declaration name="d" type="double" line="303"/>
                    <declaration name="date" type="java.sql.Date" line="316"/>
                    <declaration name="time" type="java.sql.Time" line="321"/>
                    <declaration name="ts" type="java.sql.Timestamp" line="326"/>
                </scope>
                <scope line="339"/>
            </method>
            <method name="beginSection" type="void" line="343">
                <params>
                    <param name="tag" type="String"/>
                </params>
            </method>
            <method name="endSection" type="void" line="348">
                <params>
                    <param name="tag" type="String"/>
                </params>
                <declaration name="beginTag" type="String" line="350"/>
                <scope line="351"/>
                <scope line="354"/>
                <scope line="357"/>
            </method>
            <method name="endSection" type="void" line="362">
                <declaration name="beginTag" type="String" line="364"/>
            </method>
            <method name="beginTag" type="void" line="368">
                <params>
                    <param name="tag" type="String"/>
                </params>
            </method>
            <method name="endTag" type="void" line="373">
                <params>
                    <param name="tag" type="String"/>
                </params>
                <declaration name="beginTag" type="String" line="374"/>
                <scope line="375"/>
                <scope line="378"/>
            </method>
            <method name="emptyTag" type="void" line="383">
                <params>
                    <param name="tag" type="String"/>
                </params>
            </method>
            <method name="setTag" type="void" line="386">
                <params>
                    <param name="tag" type="String"/>
                </params>
            </method>
            <method name="getTag" type="String" line="389"/>
            <method name="writeNull" type="void" line="392"/>
            <method name="writeStringData" type="void" line="395">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="396"/>
                <scope line="399"/>
                <scope line="402"/>
            </method>
            <method name="writeString" type="void" line="407">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="408"/>
                <scope line="411"/>
            </method>
            <method name="writeShort" type="void" line="415">
                <params>
                    <param name="s" type="short"/>
                </params>
            </method>
            <method name="writeLong" type="void" line="418">
                <params>
                    <param name="l" type="long"/>
                </params>
            </method>
            <method name="writeInteger" type="void" line="421">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="writeBoolean" type="void" line="424">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="writeFloat" type="void" line="427">
                <params>
                    <param name="f" type="float"/>
                </params>
            </method>
            <method name="writeDouble" type="void" line="430">
                <params>
                    <param name="d" type="double"/>
                </params>
            </method>
            <method name="writeBigDecimal" type="void" line="433">
                <params>
                    <param name="bd" type="java.math.BigDecimal"/>
                </params>
            </method>
            <method name="writeIndent" type="void" line="437">
                <params>
                    <param name="tabs" type="int"/>
                </params>
                <scope line="438"/>
            </method>
            <method name="propString" type="void" line="442">
                <params>
                    <param name="tag" type="String"/>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="propInteger" type="void" line="447">
                <params>
                    <param name="tag" type="String"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="propBoolean" type="void" line="452">
                <params>
                    <param name="tag" type="String"/>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="writeEmptyString" type="void" line="457"/>
            <javadoc line="460">
                Purely for code coverage purposes..                
            </javadoc>
            <method name="writeData" type="boolean" line="463">
                <params>
                    <param name="caller" type="RowSetInternal"/>
                </params>
            </method>
            <javadoc line="466">
                This function has been added for the processing of special characters
                  lik &lt;,&gt;,&apos;,&quot; and &amp; in the data to be serialized. These have to be taken
                  of specifically or else there will be parsing error while trying to read
                  the contents of the XML file.                
            </javadoc>
            <method name="processSpecialCharacters" type="String" line="472">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="473"/>
                <declaration name="charStr" type="char[]" line="476"/>
                <declaration name="specialStr" type="String" line="477"/>
                <scope line="478">
                    <scope line="479"/>
                    <scope line="482"/>
                    <scope line="485"/>
                    <scope line="488"/>
                    <scope line="491"/>
                    <scope line="494"/>
                </scope>
            </method>
            <javadoc line="501">
                This method re populates the resBundle
                  during the deserialization process                
            </javadoc>
            <method name="readObject" type="void" line="505">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <scope line="507"/>
                <scope line="510"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="514"/>
        </class>
    </source>