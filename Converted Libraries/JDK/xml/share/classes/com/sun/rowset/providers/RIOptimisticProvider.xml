<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.rowset.providers">
        <import package="com.sun.rowset.JdbcRowSetResourceBundle"/>
        <import package="javax.sql"/>
        <import package="java.io"/>
        <import package="javax.sql.rowset.spi"/>
        <import package="com.sun.rowset.internal"/>
        <class name="RIOptimisticProvider" line="35">
            <extends class="SyncProvider"/>
            <implements interface="Serializable"/>
            <javadoc line="35">
                The reference implementation of a JDBC Rowset synchronization provider
                  providing optimistic synchronization with a relational datastore
                  using any JDBC technology-enabled driver.
                  &lt;p&gt;
                  &lt;h3&gt;1.0 Backgroud&lt;/h3&gt;
                  This synchronization provider is registered with the
                  &lt;code&gt;SyncFactory&lt;/code&gt; by default as the
                  &lt;code&gt;com.sun.rowset.providers.RIOptimisticProvider&lt;/code&gt;.
                  As an extension of the &lt;code&gt;SyncProvider&lt;/code&gt; abstract
                  class, it provides the reader and writer classes required by disconnected
                  rowsets as &lt;code&gt;javax.sql.RowSetReader&lt;/code&gt; and &lt;code&gt;javax.sql.RowSetWriter&lt;/code&gt;
                  interface implementations. As a reference implementation,
                  &lt;code&gt;RIOptimisticProvider&lt;/code&gt; provides a
                  fully functional implementation offering a medium grade classification of
                  syncrhonization, namely GRADE_CHECK_MODIFIED_AT_COMMIT. A
                  disconnected &lt;code&gt;RowSet&lt;/code&gt; implementation using the
                  &lt;code&gt;RIOptimisticProvider&lt;/code&gt; can expect the writer to
                  check only rows that have been modified in the &lt;code&gt;RowSet&lt;/code&gt; against
                  the values in the data source.  If there is a conflict, that is, if a value
                  in the data source has been changed by another party, the
                  &lt;code&gt;RIOptimisticProvider&lt;/code&gt; will not write any of the changes to the data
                  source and  will throw a &lt;code&gt;SyncProviderException&lt;/code&gt; object.
                  &lt;h3&gt;2.0 Usage&lt;/h3&gt;
                  Standard disconnected &lt;code&gt;RowSet&lt;/code&gt; implementations may opt to use this
                  &lt;code&gt;SyncProvider&lt;/code&gt; implementation in one of two ways:
                  &lt;OL&gt;
                  &lt;LI&gt;By specifically calling the &lt;code&gt;setSyncProvider&lt;/code&gt; method
                  defined in the &lt;code&gt;CachedRowSet&lt;/code&gt; interface
                  &lt;pre&gt;
                  CachedRowset crs = new FooCachedRowSetImpl();
                  crs.setSyncProvider(&quot;com.sun.rowset.providers.RIOptimisticProvider&quot;);
                  &lt;/pre&gt;
                  &lt;LI&gt;By specifying it in the constructor of the &lt;code&gt;RowSet&lt;/code&gt;
                  implementation
                  &lt;pre&gt;
                  CachedRowset crs = new FooCachedRowSetImpl(
                  &quot;com.sun.rowset.providers.RIOptimisticProvider&quot;);
                  &lt;/pre&gt;
                  &lt;/OL&gt;
                  Note that because the &lt;code&gt;RIOptimisticProvider&lt;/code&gt; implementation is
                  the default provider, it will always be the provider when no provider ID is
                  specified to the constructor.
                  &lt;P&gt;
                  See the standard &lt;code&gt;RowSet&lt;/code&gt; reference implementations in the
                  &lt;code&gt;com.sun.rowset&lt;/code&gt; package for more details.                
                <author>
                    Jonathan Bruce                    
                </author>
                <see>
                    javax.sql.rowset.spi.SyncProvider                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncProviderException                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncFactory                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncFactoryException                    
                </see>
            </javadoc>
            <declaration name="reader" type="CachedRowSetReader" line="92"/>
            <declaration name="writer" type="CachedRowSetWriter" line="93"/>
            <declaration name="providerID" type="String" line="95"/>
            <javadoc line="95">
                The unique provider identifier.                
            </javadoc>
            <declaration name="vendorName" type="String" line="100"/>
            <javadoc line="100">
                The vendor name of this SyncProvider implementation                
            </javadoc>
            <declaration name="versionNumber" type="String" line="105"/>
            <javadoc line="105">
                The version number of this SyncProvider implementation                
            </javadoc>
            <declaration name="resBundle" type="JdbcRowSetResourceBundle" line="110"/>
            <javadoc line="110">
                ResourceBundle                
            </javadoc>
            <javadoc line="115">
                Creates an &lt;code&gt;RIOptimisticProvider&lt;/code&gt; object initialized with the
                  fully qualified class name of this &lt;code&gt;SyncProvider&lt;/code&gt; implementation
                  and a default reader and writer.
                  &lt;P&gt;
                  This provider is available to all disconnected &lt;code&gt;RowSet&lt;/code&gt; implementations
                  as the default persistence provider.                
            </javadoc>
            <method name="RIOptimisticProvider" type="constructor" line="123">
                <scope line="127"/>
                <scope line="129"/>
            </method>
            <javadoc line="134">
                Returns the &lt;code&gt;&apos;javax.sql.rowset.providers.RIOptimisticProvider&apos;&lt;/code&gt;
                  provider identification string.                
                <return>
                    String Provider ID of this persistence provider                    
                </return>
            </javadoc>
            <method name="getProviderID" type="String" line="140"/>
            <javadoc line="144">
                Returns the &lt;code&gt;javax.sql.RowSetWriter&lt;/code&gt; object for this
                  &lt;code&gt;RIOptimisticProvider&lt;/code&gt; object.  This is the writer that will
                  write changes made to the &lt;code&gt;Rowset&lt;/code&gt; object back to the data source.                
                <return>
                    the &lt;code&gt;javax.sql.RowSetWriter&lt;/code&gt; object for this
                      &lt;code&gt;RIOptimisticProvider&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="getRowSetWriter" type="RowSetWriter" line="152">
                <scope line="153"/>
                <scope line="155"/>
            </method>
            <javadoc line="159">
                Returns the &lt;code&gt;javax.sql.RowSetReader&lt;/code&gt; object for this
                  &lt;code&gt;RIOptimisticProvider&lt;/code&gt; object.  This is the reader that will
                  populate a &lt;code&gt;RowSet&lt;/code&gt; object using this &lt;code&gt;RIOptimisticProvider&lt;/code&gt;.                
                <return>
                    the &lt;code&gt;javax.sql.RowSetReader&lt;/code&gt; object for this
                      &lt;code&gt;RIOptimisticProvider&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="getRowSetReader" type="RowSetReader" line="167"/>
            <javadoc line="171">
                Returns the &lt;code&gt;SyncProvider&lt;/code&gt; grade of synchronization that
                  &lt;code&gt;RowSet&lt;/code&gt; objects can expect when using this
                  implementation. As an optimisic synchonization provider, the writer
                  will only check rows that have been modified in the &lt;code&gt;RowSet&lt;/code&gt;
                  object.                
            </javadoc>
            <method name="getProviderGrade" type="int" line="178"/>
            <javadoc line="182">
                Modifies the data source lock severity according to the standard
                  &lt;code&gt;SyncProvider&lt;/code&gt; classifications.                
                <param>
                    datasource_lock An &lt;code&gt;int&lt;/code&gt; indicating the level of locking to be
                      set; must be one of the following constants:
                      &lt;PRE&gt;
                      SyncProvider.DATASOURCE_NO_LOCK,
                      SyncProvider.DATASOURCE_ROW_LOCK,
                      SyncProvider.DATASOURCE_TABLE_LOCK,
                      SyncProvider.DATASOURCE_DB_LOCk
                      &lt;/PRE&gt;                    
                </param>
                <throws>
                    SyncProviderException if the parameter specified is not
                      &lt;code&gt;SyncProvider.DATASOURCE_NO_LOCK&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="setDataSourceLock" type="void" line="197">
                <params>
                    <param name="datasource_lock" type="int"/>
                </params>
                <scope line="198"/>
            </method>
            <javadoc line="203">
                Returns the active data source lock severity in this
                  reference implementation of the &lt;code&gt;SyncProvider&lt;/code&gt;
                  abstract class.                
                <return>
                    &lt;code&gt;SyncProvider.DATASOURCE_NO_LOCK&lt;/code&gt;.
                      The reference implementation does not support data source locks.                    
                </return>
            </javadoc>
            <method name="getDataSourceLock" type="int" line="211"/>
            <javadoc line="215">
                Returns the supported updatable view abilities of the
                  reference implementation of the &lt;code&gt;SyncProvider&lt;/code&gt;
                  abstract class.                
                <return>
                    &lt;code&gt;SyncProvider.NONUPDATABLE_VIEW_SYNC&lt;/code&gt;. The
                      the reference implementation does not support updating tables
                      that are the source of a view.                    
                </return>
            </javadoc>
            <method name="supportsUpdatableView" type="int" line="224"/>
            <javadoc line="228">
                Returns the release version ID of the Reference Implementation Optimistic
                  Synchronization Provider.                
                <return>
                    the &lt;code&gt;String&lt;/code&gt; detailing the version number of this SyncProvider                    
                </return>
            </javadoc>
            <method name="getVersion" type="String" line="234"/>
            <javadoc line="238">
                Returns the vendor name of the Reference Implementation Optimistic
                  Synchronization Provider                
                <return>
                    the &lt;code&gt;String&lt;/code&gt; detailing the vendor name of this
                      SyncProvider                    
                </return>
            </javadoc>
            <method name="getVendor" type="String" line="245"/>
            <method name="readObject" type="void" line="249">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <comment line="251">
                    Default state initialization happens here                    
                </comment>
                <comment line="253">
                    Initialization of transient Res Bundle happens here .                    
                </comment>
                <scope line="253"/>
                <scope line="255"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="260"/>
        </class>
    </source>