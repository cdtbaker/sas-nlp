<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.rowset.internal">
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="javax.naming"/>
        <import package="java.io"/>
        <import package="java.lang.reflect"/>
        <import package="com.sun.rowset"/>
        <import package="javax.sql.rowset"/>
        <import package="javax.sql.rowset.spi"/>
        <class name="CachedRowSetReader" line="38">
            <implements interface="RowSetReader"/>
            <implements interface="Serializable"/>
            <javadoc line="38">
                The facility called by the &lt;code&gt;RIOptimisticProvider&lt;/code&gt; object
                  internally to read data into it.  The calling &lt;code&gt;RowSet&lt;/code&gt; object
                  must have implemented the &lt;code&gt;RowSetInternal&lt;/code&gt; interface
                  and have the standard &lt;code&gt;CachedRowSetReader&lt;/code&gt; object set as its
                  reader.
                  &lt;P&gt;
                  This implementation always reads all rows of the data source,
                  and it assumes that the &lt;code&gt;command&lt;/code&gt; property for the caller
                  is set with a query that is appropriate for execution by a
                  &lt;code&gt;PreparedStatement&lt;/code&gt; object.
                  &lt;P&gt;
                  Typically the &lt;code&gt;SyncFactory&lt;/code&gt; manages the &lt;code&gt;RowSetReader&lt;/code&gt; and
                  the &lt;code&gt;RowSetWriter&lt;/code&gt; implementations using &lt;code&gt;SyncProvider&lt;/code&gt; objects.
                  Standard JDBC RowSet implementations provide an object instance of this
                  reader by invoking the &lt;code&gt;SyncProvider.getRowSetReader()&lt;/code&gt; method.                
                <author>
                    Jonathan Bruce                    
                </author>
                <see>
                    javax.sql.rowset.spi.SyncProvider                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncFactory                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncFactoryException                    
                </see>
            </javadoc>
            <declaration name="writerCalls" type="int" line="62"/>
            <javadoc line="62">
                The field that keeps track of whether the writer associated with
                  this &lt;code&gt;CachedRowSetReader&lt;/code&gt; object&apos;s rowset has been called since
                  the rowset was populated.
                  &lt;P&gt;
                  When this &lt;code&gt;CachedRowSetReader&lt;/code&gt; object reads data into
                  its rowset, it sets the field &lt;code&gt;writerCalls&lt;/code&gt; to 0.
                  When the writer associated with the rowset is called to write
                  data back to the underlying data source, its &lt;code&gt;writeData&lt;/code&gt;
                  method calls the method &lt;code&gt;CachedRowSetReader.reset&lt;/code&gt;,
                  which increments &lt;code&gt;writerCalls&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt;
                  if &lt;code&gt;writerCalls&lt;/code&gt; is 1. Thus, &lt;code&gt;writerCalls&lt;/code&gt; equals
                  1 after the first call to &lt;code&gt;writeData&lt;/code&gt; that occurs
                  after the rowset has had data read into it.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="userCon" type="boolean" line="81"/>
            <declaration name="startPosition" type="int" line="83"/>
            <declaration name="resBundle" type="JdbcRowSetResourceBundle" line="85"/>
            <method name="CachedRowSetReader" type="constructor" line="87">
                <scope line="88"/>
                <scope line="90"/>
            </method>
            <javadoc line="96">
                Reads data from a data source and populates the given
                  &lt;code&gt;RowSet&lt;/code&gt; object with that data.
                  This method is called by the rowset internally when
                  the application invokes the method &lt;code&gt;execute&lt;/code&gt;
                  to read a new set of rows.
                  &lt;P&gt;
                  After clearing the rowset of its contents, if any, and setting
                  the number of writer calls to &lt;code&gt;0&lt;/code&gt;, this reader calls
                  its &lt;code&gt;connect&lt;/code&gt; method to make
                  a connection to the rowset&apos;s data source. Depending on which
                  of the rowset&apos;s properties have been set, the &lt;code&gt;connect&lt;/code&gt;
                  method will use a &lt;code&gt;DataSource&lt;/code&gt; object or the
                  &lt;code&gt;DriverManager&lt;/code&gt; facility to make a connection to the
                  data source.
                  &lt;P&gt;
                  Once the connection to the data source is made, this reader
                  executes the query in the calling &lt;code&gt;CachedRowSet&lt;/code&gt; object&apos;s
                  &lt;code&gt;command&lt;/code&gt; property. Then it calls the rowset&apos;s
                  &lt;code&gt;populate&lt;/code&gt; method, which reads data from the
                  &lt;code&gt;ResultSet&lt;/code&gt; object produced by executing the rowset&apos;s
                  command. The rowset is then populated with this data.
                  &lt;P&gt;
                  This method&apos;s final act is to close the connection it made, thus
                  leaving the rowset disconnected from its data source.                
                <param>
                    caller a <code>RowSet</code> object that has implemented
                      the <code>RowSetInternal</code> interface and had
                      this <code>CachedRowSetReader</code> object set as
                      its reader                    
                </param>
                <throws>
                    SQLException if there is a database access error, there is a
                      problem making the connection, or the command property has not
                      been set                    
                </throws>
            </javadoc>
            <method name="readData" type="void" line="131">
                <params>
                    <param name="caller" type="RowSetInternal"/>
                </params>
                <comment line="136">
                    Get rid of the current contents of the rowset.                    
                </comment>
                <comment line="138">
                    Checking added to verify whether page size has been set or not.
                     If set then do not close the object as certain parameters need
                     to be maintained.                    
                </comment>
                <comment line="145">
                    When page size is not set,                    
                </comment>
                <comment line="146">
                    crs.size() will show the total no of rows.                    
                </comment>
                <comment line="152">
                    Get a connection.  This reader assumes that the necessary                    
                </comment>
                <comment line="153">
                    properties have been set on the caller to let it supply a                    
                </comment>
                <comment line="154">
                    connection.                    
                </comment>
                <comment line="159">
                    Check our assumptions.                    
                </comment>
                <comment line="168">
                    Use JDBC to read the data.                    
                </comment>
                <comment line="170">
                    Pass any input parameters to JDBC.                    
                </comment>
                <comment line="179">
                    drivers may not support the above - esp. older
                     drivers being used by the bridge..                    
                </comment>
                <comment line="187">
                    can be (crs.getCommand()).indexOf(&quot;select&quot;)) == 0                    
                </comment>
                <comment line="188">
                    because we will be getting resultset when                    
                </comment>
                <comment line="189">
                    it may be the case that some false select query with                    
                </comment>
                <comment line="190">
                    select coming in between instead of first.                    
                </comment>
                <comment line="192">
                    if ((crs.getCommand()).indexOf(&quot;?&quot;)) does not return -1                    
                </comment>
                <comment line="193">
                    implies a Prepared Statement like query exists.                    
                </comment>
                <comment line="200">
                    If page size has been set then create a ResultSet object that is scrollable using a
                     PreparedStatement handle.Also call the populate(ResultSet,int) function to populate
                     a page of data as specified by the page size.                    
                </comment>
                <comment line="213">
                    drivers may not support the above - esp. older
                     drivers being used by the bridge..                    
                </comment>
                <comment line="227">
                    Get the data.                    
                </comment>
                <comment line="234">
                    only close connections we created...                    
                </comment>
                <comment line="239">
                    Throw an exception if reading fails for any reason.                    
                </comment>
                <comment line="243">
                    only close connections we created...                    
                </comment>
                <comment line="250">
                    not an error condition, we&apos;re closing anyway, but
                     we&apos;d like to clean up any locks if we can since
                     it is not clear the connection pool will clean
                     these connections in a timely manner                    
                </comment>
                <comment line="261">
                    will get exception if something already went wrong, but don&apos;t                    
                </comment>
                <comment line="262">
                    override that exception with this one                    
                </comment>
                <declaration name="con" type="Connection" line="132"/>
                <scope line="133">
                    <declaration name="crs" type="CachedRowSet" line="134"/>
                    <scope line="144"/>
                    <scope line="163"/>
                    <scope line="165"/>
                    <declaration name="pstmt" type="PreparedStatement" line="169"/>
                    <scope line="173"/>
                    <scope line="178"/>
                    <scope line="186">
                        <declaration name="rs" type="ResultSet" line="195"/>
                        <scope line="196"/>
                        <scope line="199">
                            <scope line="207"/>
                            <scope line="212"/>
                        </scope>
                    </scope>
                    <scope line="223"/>
                    <scope line="229"/>
                    <scope line="231"/>
                </scope>
                <scope line="238"/>
                <scope line="241">
                    <scope line="242">
                        <scope line="244">
                            <scope line="245">
                                <scope line="246"/>
                            </scope>
                            <scope line="249"/>
                        </scope>
                    </scope>
                    <scope line="260"/>
                </scope>
            </method>
            <javadoc line="267">
                Checks to see if the writer associated with this reader needs
                  to reset its state.  The writer will need to initialize its state
                  if new contents have been read since the writer was last called.
                  This method is called by the writer that was registered with
                  this reader when components were being wired together.                
                <return>
                    <code>true</code> if writer associated with this reader needs
                      to reset the values of its fields; <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if an access error occurs                    
                </throws>
            </javadoc>
            <method name="reset" type="boolean" line="278"/>
            <javadoc line="283">
                Establishes a connection with the data source for the given
                  &lt;code&gt;RowSet&lt;/code&gt; object.  If the rowset&apos;s &lt;code&gt;dataSourceName&lt;/code&gt;
                  property has been set, this method uses the JNDI API to retrieve the
                  &lt;code&gt;DataSource&lt;/code&gt; object that it can use to make the connection.
                  If the url, username, and password properties have been set, this
                  method uses the &lt;code&gt;DriverManager.getConnection&lt;/code&gt; method to
                  make the connection.
                  &lt;P&gt;
                  This method is used internally by the reader and writer associated with
                  the calling &lt;code&gt;RowSet&lt;/code&gt; object; an application never calls it
                  directly.                
                <param>
                    caller a <code>RowSet</code> object that has implemented
                      the <code>RowSetInternal</code> interface and had
                      this <code>CachedRowSetReader</code> object set as
                      its reader                    
                </param>
                <return>
                    a <code>Connection</code> object that represents a connection
                      to the caller's data source                    
                </return>
                <throws>
                    SQLException if an access error occurs                    
                </throws>
            </javadoc>
            <method name="connect" type="Connection" line="304">
                <params>
                    <param name="caller" type="RowSetInternal"/>
                </params>
                <comment line="306">
                    Get a JDBC connection.                    
                </comment>
                <comment line="308">
                    A connection was passed to execute(), so use it.                    
                </comment>
                <comment line="309">
                    As we are using a connection the user gave us we                    
                </comment>
                <comment line="310">
                    won&apos;t close it.                    
                </comment>
                <comment line="315">
                    Connect using JNDI.                    
                </comment>
                <comment line="321">
                    Check for username, password,                    
                </comment>
                <comment line="322">
                    if it exists try getting a Connection handle through them                    
                </comment>
                <comment line="323">
                    else try without these                    
                </comment>
                <comment line="324">
                    else throw SQLException                    
                </comment>
                <comment line="339">
                    Connect using the driver manager.                    
                </comment>
                <scope line="307"/>
                <scope line="314">
                    <scope line="316">
                        <declaration name="ctx" type="Context" line="317"/>
                        <declaration name="ds" type="DataSource" line="318"/>
                        <scope line="326"/>
                        <scope line="329"/>
                    </scope>
                    <scope line="333">
                        <declaration name="sqlEx" type="SQLException" line="334"/>
                    </scope>
                </scope>
                <scope line="338"/>
                <scope line="344"/>
            </method>
            <javadoc line="349">
                Sets the parameter placeholders
                  in the rowset&apos;s command (the given &lt;code&gt;PreparedStatement&lt;/code&gt;
                  object) with the parameters in the given array.
                  This method, called internally by the method
                  &lt;code&gt;CachedRowSetReader.readData&lt;/code&gt;, reads each parameter, and
                  based on its type, determines the correct
                  &lt;code&gt;PreparedStatement.setXXX&lt;/code&gt; method to use for setting
                  that parameter.                
                <param>
                    params an array of parameters to be used with the given
                      <code>PreparedStatement</code> object                    
                </param>
                <param>
                    pstmt  the <code>PreparedStatement</code> object that is the
                      command for the calling rowset and into which
                      the given parameters are to be set                    
                </param>
                <throws>
                    SQLException if an access error occurs                    
                </throws>
            </javadoc>
            <method name="decodeParams" type="void" line="367">
                <params>
                    <param name="params" type="Object[]"/>
                    <param name="pstmt" type="PreparedStatement"/>
                </params>
                <comment line="368">
                    There is a corresponding decodeParams in JdbcRowSetImpl                    
                </comment>
                <comment line="369">
                    which does the same as this method. This is a design flaw.                    
                </comment>
                <comment line="370">
                    Update the JdbcRowSetImpl.decodeParams when you update                    
                </comment>
                <comment line="371">
                    this method.                    
                </comment>
                <comment line="373">
                    Adding the same comments to JdbcRowSetImpl.decodeParams.                    
                </comment>
                <comment line="409">
                    What&apos;s left should be setObject(int, Object, scale)                    
                </comment>
                <comment line="444">
                    no point at looking at the first element now;
                     what&apos;s left must be the setObject() cases.                    
                </comment>
                <comment line="457">
                    common case - this catches all SQL92 types                    
                </comment>
                <comment line="462">
                    Try to get all the params to be set here                    
                </comment>
                <declaration name="arraySize" type="int" line="375"/>
                <declaration name="param" type="Object[]" line="376"/>
                <scope line="378">
                    <scope line="379">
                        <scope line="382">
                            <scope line="383"/>
                            <scope line="390">
                                <scope line="392"/>
                                <scope line="398"/>
                            </scope>
                            <scope line="403"/>
                            <scope line="412"/>
                        </scope>
                        <scope line="417">
                            <scope line="419"/>
                            <scope line="425"/>
                            <scope line="448"/>
                        </scope>
                        <scope line="456"/>
                    </scope>
                    <scope line="461"/>
                </scope>
            </method>
            <javadoc line="469">
                Assists in determining whether the current connection was created by this
                  CachedRowSet to ensure incorrect connections are not prematurely terminated.                
                <return>
                    a boolean giving the status of whether the connection has been closed.                    
                </return>
            </javadoc>
            <method name="getCloseConnection" type="boolean" line="475"/>
            <javadoc line="482">
                This sets the start position in the ResultSet from where to begin. This is
                  called by the Reader in the CachedRowSetImpl to set the position on the page
                  to begin populating from.                
                <param>
                    pos integer indicating the position in the <code>ResultSet</code> to begin
                      populating from.                    
                </param>
            </javadoc>
            <method name="setStartPosition" type="void" line="489">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <method name="readObject" type="void" line="493">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <comment line="494">
                    Default state initialization happens here                    
                </comment>
                <comment line="496">
                    Initialization of  Res Bundle happens here .                    
                </comment>
                <scope line="497"/>
                <scope line="499"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="505"/>
        </class>
    </source>