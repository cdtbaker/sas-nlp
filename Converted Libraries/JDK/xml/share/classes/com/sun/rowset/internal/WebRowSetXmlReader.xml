<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.rowset.internal">
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="java.io"/>
        <import package="org.xml.sax"/>
        <import package="org.xml.sax.helpers"/>
        <import package="javax.xml.parsers"/>
        <import package="com.sun.rowset"/>
        <import package="java.text.MessageFormat"/>
        <import package="javax.sql.rowset"/>
        <import package="javax.sql.rowset.spi"/>
        <class name="WebRowSetXmlReader" line="41">
            <implements interface="XmlReader"/>
            <implements interface="Serializable"/>
            <javadoc line="41">
                An implementation of the &lt;code&gt;XmlReader&lt;/code&gt; interface, which
                  reads and parses an XML formatted &lt;code&gt;WebRowSet&lt;/code&gt; object.
                  This implementation uses an &lt;code&gt;org.xml.sax.Parser&lt;/code&gt; object
                  as its parser.                
            </javadoc>
            <declaration name="resBundle" type="JdbcRowSetResourceBundle" line="50"/>
            <method name="WebRowSetXmlReader" type="constructor" line="52">
                <scope line="53"/>
                <scope line="55"/>
            </method>
            <javadoc line="60">
                Parses the given &lt;code&gt;WebRowSet&lt;/code&gt; object, getting its input from
                  the given &lt;code&gt;java.io.Reader&lt;/code&gt; object.  The parser will send
                  notifications of parse events to the rowset&apos;s
                  &lt;code&gt;XmlReaderDocHandler&lt;/code&gt;, which will build the rowset as
                  an XML document.
                  &lt;P&gt;
                  This method is called internally by the method
                  &lt;code&gt;WebRowSet.readXml&lt;/code&gt;.
                  &lt;P&gt;
                  If a parsing error occurs, the exception thrown will include
                  information for locating the error in the original XML document.                
                <param>
                    caller the &lt;code&gt;WebRowSet&lt;/code&gt; object to be parsed, whose
                      &lt;code&gt;xmlReader&lt;/code&gt; field must contain a reference to
                      this &lt;code&gt;XmlReader&lt;/code&gt; object                    
                </param>
                <param>
                    reader the &lt;code&gt;java.io.Reader&lt;/code&gt; object from which
                      the parser will get its input                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this &lt;code&gt;WebRowSetXmlReader&lt;/code&gt; object is not the
                      reader for the given rowset                    
                </exception>
                <see>
                    XmlReaderContentHandler                    
                </see>
            </javadoc>
            <method name="readXML" type="void" line="83">
                <params>
                    <param name="caller" type="WebRowSet"/>
                    <param name="reader" type="java.io.Reader"/>
                </params>
                <comment line="86">
                    Crimson Parser(as in J2SE 1.4.1 is NOT able to handle
                     Reader(s)(FileReader).
                    
                     But getting the file as a Stream works fine. So we are going to take
                     the reader but send it as a InputStream to the parser. Note that this
                     functionality needs to work against any parser
                     Crimson(J2SE 1.4.x) / Xerces(J2SE 1.5.x).                    
                </comment>
                <comment line="126">
                    Will be here if trying to write beyond the RowSet limits                    
                </comment>
                <scope line="84">
                    <declaration name="is" type="InputSource" line="92"/>
                    <declaration name="dh" type="DefaultHandler" line="93"/>
                    <declaration name="hndr" type="XmlReaderContentHandler" line="94"/>
                    <declaration name="factory" type="SAXParserFactory" line="95"/>
                    <declaration name="parser" type="SAXParser" line="98"/>
                    <declaration name="reader1" type="XMLReader" line="103"/>
                </scope>
                <scope line="111"/>
                <scope line="116">
                    <declaration name="x" type="Exception" line="117"/>
                </scope>
                <scope line="127"/>
                <scope line="130"/>
            </method>
            <javadoc line="137">
                Parses the given &lt;code&gt;WebRowSet&lt;/code&gt; object, getting its input from
                  the given &lt;code&gt;java.io.InputStream&lt;/code&gt; object.  The parser will send
                  notifications of parse events to the rowset&apos;s
                  &lt;code&gt;XmlReaderDocHandler&lt;/code&gt;, which will build the rowset as
                  an XML document.
                  &lt;P&gt;
                  Using streams is a much faster way than using &lt;code&gt;java.io.Reader&lt;/code&gt;
                  &lt;P&gt;
                  This method is called internally by the method
                  &lt;code&gt;WebRowSet.readXml&lt;/code&gt;.
                  &lt;P&gt;
                  If a parsing error occurs, the exception thrown will include
                  information for locating the error in the original XML document.                
                <param>
                    caller the &lt;code&gt;WebRowSet&lt;/code&gt; object to be parsed, whose
                      &lt;code&gt;xmlReader&lt;/code&gt; field must contain a reference to
                      this &lt;code&gt;XmlReader&lt;/code&gt; object                    
                </param>
                <param>
                    iStream the &lt;code&gt;java.io.InputStream&lt;/code&gt; object from which
                      the parser will get its input                    
                </param>
                <throws>
                    SQLException if a database access error occurs or
                      this &lt;code&gt;WebRowSetXmlReader&lt;/code&gt; object is not the
                      reader for the given rowset                    
                </throws>
                <see>
                    XmlReaderContentHandler                    
                </see>
            </javadoc>
            <method name="readXML" type="void" line="162">
                <params>
                    <param name="caller" type="WebRowSet"/>
                    <param name="iStream" type="java.io.InputStream"/>
                </params>
                <comment line="201">
                    Will be here if trying to write beyond the RowSet limits                    
                </comment>
                <scope line="163">
                    <declaration name="is" type="InputSource" line="164"/>
                    <declaration name="dh" type="DefaultHandler" line="165"/>
                    <declaration name="hndr" type="XmlReaderContentHandler" line="167"/>
                    <declaration name="factory" type="SAXParserFactory" line="168"/>
                    <declaration name="parser" type="SAXParser" line="172"/>
                    <declaration name="reader1" type="XMLReader" line="177"/>
                </scope>
                <scope line="185"/>
                <scope line="191">
                    <declaration name="x" type="Exception" line="192"/>
                </scope>
                <scope line="202"/>
                <scope line="206"/>
            </method>
            <javadoc line="211">
                For code coverage purposes only right now                
            </javadoc>
            <method name="readData" type="void" line="216">
                <params>
                    <param name="caller" type="RowSetInternal"/>
                </params>
            </method>
            <javadoc line="219">
                This method re populates the resBundle
                  during the deserialization process                
            </javadoc>
            <method name="readObject" type="void" line="224">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <comment line="226">
                    Default state initialization happens here                    
                </comment>
                <comment line="228">
                    Initialization of transient Res Bundle happens here .                    
                </comment>
                <scope line="228"/>
                <scope line="230"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="236"/>
        </class>
    </source>