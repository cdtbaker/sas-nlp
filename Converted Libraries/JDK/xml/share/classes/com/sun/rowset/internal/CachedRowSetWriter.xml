<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.rowset.internal">
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="com.sun.rowset"/>
        <import package="java.text.MessageFormat"/>
        <import package="javax.sql.rowset"/>
        <import package="javax.sql.rowset.serial.SQLInputImpl"/>
        <import package="javax.sql.rowset.serial.SerialArray"/>
        <import package="javax.sql.rowset.serial.SerialBlob"/>
        <import package="javax.sql.rowset.serial.SerialClob"/>
        <import package="javax.sql.rowset.serial.SerialStruct"/>
        <import package="javax.sql.rowset.spi"/>
        <class name="CachedRowSetWriter" line="15">
            <implements interface="TransactionalWriter"/>
            <implements interface="Serializable"/>
            <javadoc line="15">
                The facility called on internally by the &lt;code&gt;RIOptimisticProvider&lt;/code&gt; implementation to
                  propagate changes back to the data source from which the rowset got its data.
                  &lt;P&gt;
                  A &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object, called a writer, has the public
                  method &lt;code&gt;writeData&lt;/code&gt; for writing modified data to the underlying data source.
                  This method is invoked by the rowset internally and is never invoked directly by an application.
                  A writer also has public methods for setting and getting
                  the &lt;code&gt;CachedRowSetReader&lt;/code&gt; object, called a reader, that is associated
                  with the writer. The remainder of the methods in this class are private and
                  are invoked internally, either directly or indirectly, by the method
                  &lt;code&gt;writeData&lt;/code&gt;.
                  &lt;P&gt;
                  Typically the &lt;code&gt;SyncFactory&lt;/code&gt; manages the &lt;code&gt;RowSetReader&lt;/code&gt; and
                  the &lt;code&gt;RowSetWriter&lt;/code&gt; implementations using &lt;code&gt;SyncProvider&lt;/code&gt; objects.
                  Standard JDBC RowSet implementations provide an object instance of this
                  writer by invoking the &lt;code&gt;SyncProvider.getRowSetWriter()&lt;/code&gt; method.                
                <version>
                    0.2                    
                </version>
                <author>
                    Jonathan Bruce                    
                </author>
                <see>
                    javax.sql.rowset.spi.SyncProvider                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncFactory                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncFactoryException                    
                </see>
            </javadoc>
            <declaration name="con" type="Connection" line="39"/>
            <javadoc line="39">
                The &lt;code&gt;Connection&lt;/code&gt; object that this writer will use to make a
                  connection to the data source to which it will write data.                
            </javadoc>
            <declaration name="selectCmd" type="String" line="44"/>
            <javadoc line="44">
                The SQL &lt;code&gt;SELECT&lt;/code&gt; command that this writer will call
                  internally. The method &lt;code&gt;initSQLStatements&lt;/code&gt; builds this
                  command by supplying the words &quot;SELECT&quot; and &quot;FROM,&quot; and using
                  metadata to get the table name and column names .                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="updateCmd" type="String" line="52"/>
            <javadoc line="52">
                The SQL &lt;code&gt;UPDATE&lt;/code&gt; command that this writer will call
                  internally to write data to the rowset&apos;s underlying data source.
                  The method &lt;code&gt;initSQLStatements&lt;/code&gt; builds this &lt;code&gt;String&lt;/code&gt;
                  object.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="updateWhere" type="String" line="60"/>
            <javadoc line="60">
                The SQL &lt;code&gt;WHERE&lt;/code&gt; clause the writer will use for update
                  statements in the &lt;code&gt;PreparedStatement&lt;/code&gt; object
                  it sends to the underlying data source.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="deleteCmd" type="String" line="67"/>
            <javadoc line="67">
                The SQL &lt;code&gt;DELETE&lt;/code&gt; command that this writer will call
                  internally to delete a row in the rowset&apos;s underlying data source.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="deleteWhere" type="String" line="73"/>
            <javadoc line="73">
                The SQL &lt;code&gt;WHERE&lt;/code&gt; clause the writer will use for delete
                  statements in the &lt;code&gt;PreparedStatement&lt;/code&gt; object
                  it sends to the underlying data source.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="insertCmd" type="String" line="80"/>
            <javadoc line="80">
                The SQL &lt;code&gt;INSERT INTO&lt;/code&gt; command that this writer will internally use
                  to insert data into the rowset&apos;s underlying data source.  The method
                  &lt;code&gt;initSQLStatements&lt;/code&gt; builds this command with a question
                  mark parameter placeholder for each column in the rowset.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="keyCols" type="int[]" line="88"/>
            <javadoc line="88">
                An array containing the column numbers of the columns that are
                  needed to uniquely identify a row in the &lt;code&gt;CachedRowSet&lt;/code&gt; object
                  for which this &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object is the writer.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="params" type="Object[]" line="95"/>
            <javadoc line="95">
                An array of the parameters that should be used to set the parameter
                  placeholders in a &lt;code&gt;PreparedStatement&lt;/code&gt; object that this
                  writer will execute.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="reader" type="CachedRowSetReader" line="102"/>
            <javadoc line="102">
                The &lt;code&gt;CachedRowSetReader&lt;/code&gt; object that has been
                  set as the reader for the &lt;code&gt;CachedRowSet&lt;/code&gt; object
                  for which this &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object is the writer.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="callerMd" type="ResultSetMetaData" line="109"/>
            <javadoc line="109">
                The &lt;code&gt;ResultSetMetaData&lt;/code&gt; object that contains information
                  about the columns in the &lt;code&gt;CachedRowSet&lt;/code&gt; object
                  for which this &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object is the writer.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="callerColumnCount" type="int" line="116"/>
            <javadoc line="116">
                The number of columns in the &lt;code&gt;CachedRowSet&lt;/code&gt; object
                  for which this &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object is the writer.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="crsResolve" type="CachedRowSetImpl" line="122"/>
            <javadoc line="122">
                This &lt;code&gt;CachedRowSet&lt;code&gt; will hold the conflicting values
                  retrieved from the db and hold it.                
            </javadoc>
            <declaration name="status" type="ArrayList" line="127"/>
            <javadoc line="127">
                This &lt;code&gt;ArrayList&lt;code&gt; will hold the values of SyncResolver.                
            </javadoc>
            <declaration name="iChangedValsInDbAndCRS" type="int" line="131"/>
            <javadoc line="131">
                This will check whether the same field value has changed both
                  in database and CachedRowSet.                
            </javadoc>
            <declaration name="iChangedValsinDbOnly" type="int" line="136"/>
            <javadoc line="136">
                This will hold the number of cols for which the values have
                  changed only in database.                
            </javadoc>
            <declaration name="resBundle" type="JdbcRowSetResourceBundle" line="141"/>
            <method name="CachedRowSetWriter" type="constructor" line="142">
                <scope line="143"/>
                <scope line="146"/>
            </method>
            <javadoc line="150">
                Propagates changes in the given &lt;code&gt;RowSet&lt;/code&gt; object
                  back to its underlying data source and returns &lt;code&gt;true&lt;/code&gt;
                  if successful. The writer will check to see if
                  the data in the pre-modified rowset (the original values) differ
                  from the data in the underlying data source.  If data in the data
                  source has been modified by someone else, there is a conflict,
                  and in that case, the writer will not write to the data source.
                  In other words, the writer uses an optimistic concurrency algorithm:
                  It checks for conflicts before making changes rather than restricting
                  access for concurrent users.
                  &lt;P&gt;
                  This method is called by the rowset internally when
                  the application invokes the method &lt;code&gt;acceptChanges&lt;/code&gt;.
                  The &lt;code&gt;writeData&lt;/code&gt; method in turn calls private methods that
                  it defines internally.
                  The following is a general summary of what the method
                  &lt;code&gt;writeData&lt;/code&gt; does, much of which is accomplished
                  through calls to its own internal methods.
                  &lt;OL&gt;
                  &lt;LI&gt;Creates a &lt;code&gt;CachedRowSet&lt;/code&gt; object from the given
                  &lt;code&gt;RowSet&lt;/code&gt; object
                  &lt;LI&gt;Makes a connection with the data source
                  &lt;UL&gt;
                  &lt;LI&gt;Disables autocommit mode if it is not already disabled
                  &lt;LI&gt;Sets the transaction isolation level to that of the rowset
                  &lt;/UL&gt;
                  &lt;LI&gt;Checks to see if the reader has read new data since the writer
                  was last called and, if so, calls the method
                  &lt;code&gt;initSQLStatements&lt;/code&gt; to initialize new SQL statements
                  &lt;UL&gt;
                  &lt;LI&gt;Builds new &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;,
                  &lt;code&gt;INSERT&lt;/code&gt;, and &lt;code&gt;DELETE&lt;/code&gt; statements
                  &lt;LI&gt;Uses the &lt;code&gt;CachedRowSet&lt;/code&gt; object&apos;s metadata to
                  determine the table name, column names, and the columns
                  that make up the primary key
                  &lt;/UL&gt;
                  &lt;LI&gt;When there is no conflict, propagates changes made to the
                  &lt;code&gt;CachedRowSet&lt;/code&gt; object back to its underlying data source
                  &lt;UL&gt;
                  &lt;LI&gt;Iterates through each row of the &lt;code&gt;CachedRowSet&lt;/code&gt; object
                  to determine whether it has been updated, inserted, or deleted
                  &lt;LI&gt;If the corresponding row in the data source has not been changed
                  since the rowset last read its
                  values, the writer will use the appropriate command to update,
                  insert, or delete the row
                  &lt;LI&gt;If any data in the data source does not match the original values
                  for the &lt;code&gt;CachedRowSet&lt;/code&gt; object, the writer will roll
                  back any changes it has made to the row in the data source.
                  &lt;/UL&gt;
                  &lt;/OL&gt;                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if changes to the rowset were successfully
                      written to the rowset&apos;s underlying data source;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="writeData" type="boolean" line="205">
                <params>
                    <param name="caller" type="RowSetInternal"/>
                </params>
                <declaration name="conflict" type="boolean" line="206"/>
                <declaration name="showDel" type="boolean" line="207"/>
                <declaration name="pstmtIns" type="PreparedStatement" line="208"/>
                <declaration name="crs" type="CachedRowSetImpl" line="211"/>
                <scope line="215"/>
                <declaration name="iColCount" type="int" line="219"/>
                <declaration name="rsmdWrite" type="RowSetMetaDataImpl" line="220"/>
                <declaration name="rsmdResolv" type="RowSetMetaDataImpl" line="221"/>
                <declaration name="sz" type="int" line="223"/>
                <scope line="227"/>
                <scope line="233"/>
                <declaration name="rows" type="int" line="240"/>
                <scope line="241">
                    <scope line="242">
                        <scope line="243"/>
                        <scope line="246"/>
                    </scope>
                    <scope line="250">
                        <scope line="252"/>
                        <scope line="255"/>
                    </scope>
                    <scope line="259">
                        <scope line="260"/>
                        <scope line="263"/>
                    </scope>
                    <scope line="267">
                        <declaration name="icolCount" type="int" line="268"/>
                        <scope line="271"/>
                    </scope>
                </scope>
                <declaration name="boolConf" type="boolean" line="281"/>
                <scope line="282">
                    <scope line="283"/>
                </scope>
                <scope line="290">
                    <declaration name="spe" type="SyncProviderException" line="291"/>
                    <declaration name="syncResImpl" type="SyncResolverImpl" line="292"/>
                </scope>
                <scope line="299"/>
            </method>
            <javadoc line="303">
                Updates the given &lt;code&gt;CachedRowSet&lt;/code&gt; object&apos;s underlying data
                  source so that updates to the rowset are reflected in the original
                  data source, and returns &lt;code&gt;false&lt;/code&gt; if the update was successful.
                  A return value of &lt;code&gt;true&lt;/code&gt; indicates that there is a conflict,
                  meaning that a value updated in the rowset has already been changed by
                  someone else in the underlying data source.  A conflict can also exist
                  if, for example, more than one row in the data source would be affected
                  by the update or if no rows would be affected.  In any case, if there is
                  a conflict, this method does not update the underlying data source.
                  &lt;P&gt;
                  This method is called internally by the method &lt;code&gt;writeData&lt;/code&gt;
                  if a row in the &lt;code&gt;CachedRowSet&lt;/code&gt; object for which this
                  &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object is the writer has been updated.                
                <return>
                    &lt;code&gt;false&lt;/code&gt; if the update to the underlying data source is
                      successful; &lt;code&gt;true&lt;/code&gt; otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateOriginalRow" type="boolean" line="321">
                <params>
                    <param name="crs" type="CachedRowSet"/>
                </params>
                <declaration name="pstmt" type="PreparedStatement" line="322"/>
                <declaration name="i" type="int" line="323"/>
                <declaration name="idx" type="int" line="324"/>
                <declaration name="origVals" type="ResultSet" line="325"/>
                <scope line="327">
                    <declaration name="tempselectCmd" type="String" line="329"/>
                    <declaration name="idxWhere" type="int" line="330"/>
                    <scope line="331">
                        <declaration name="tempSelect" type="String" line="332"/>
                    </scope>
                    <scope line="336">
                        <scope line="337"/>
                        <scope line="340"/>
                    </scope>
                    <scope line="344"/>
                    <scope line="350"/>
                    <declaration name="rs" type="ResultSet" line="352"/>
                    <declaration name="rsmd" type="ResultSetMetaData" line="354"/>
                    <scope line="355">
                        <scope line="356"/>
                        <declaration name="colsNotChanged" type="int" line="360"/>
                        <declaration name="cols" type="Vector" line="361"/>
                        <declaration name="updateExec" type="String" line="362"/>
                        <declaration name="orig" type="Object" line="363"/>
                        <declaration name="curr" type="Object" line="364"/>
                        <declaration name="rsval" type="Object" line="365"/>
                        <declaration name="boolNull" type="boolean" line="366"/>
                        <declaration name="objVal" type="Object" line="367"/>
                        <declaration name="first" type="boolean" line="368"/>
                        <declaration name="flag" type="boolean" line="369"/>
                        <scope line="371">
                            <declaration name="map" type="Map" line="375"/>
                            <scope line="376">
                                <declaration name="s" type="Struct" line="377"/>
                                <declaration name="c" type="Class" line="378"/>
                                <scope line="380">
                                    <declaration name="obj" type="SQLData" line="381"/>
                                    <scope line="382"/>
                                    <scope line="385"/>
                                    <scope line="388"/>
                                    <declaration name="attribs" type="Object" line="391"/>
                                    <declaration name="sqlInput" type="SQLInputImpl" line="392"/>
                                </scope>
                            </scope>
                            <scope line="397"/>
                            <scope line="400"/>
                            <scope line="403"/>
                            <scope line="406"/>
                            <scope line="410"/>
                            <scope line="415"/>
                            <scope line="420">
                                <scope line="421"/>
                            </scope>
                            <scope line="429"/>
                            <scope line="432">
                                <scope line="433">
                                    <scope line="434">
                                        <scope line="435"/>
                                    </scope>
                                    <scope line="443"/>
                                </scope>
                            </scope>
                            <scope line="450"/>
                            <scope line="453"/>
                        </scope>
                        <scope line="461"/>
                        <scope line="464"/>
                        <scope line="469">
                            <declaration name="obj" type="Object" line="470"/>
                        </scope>
                        <scope line="475">
                            <scope line="476"/>
                            <scope line="479"/>
                        </scope>
                    </scope>
                    <scope line="486"/>
                </scope>
                <scope line="490">
                    <scope line="493"/>
                </scope>
            </method>
            <javadoc line="501">
                Inserts a row that has been inserted into the given
                  &lt;code&gt;CachedRowSet&lt;/code&gt; object into the data source from which
                  the rowset is derived, returning &lt;code&gt;false&lt;/code&gt; if the insertion
                  was successful.                
                <param>
                    crs the &lt;code&gt;CachedRowSet&lt;/code&gt; object that has had a row inserted
                      and to whose underlying data source the row will be inserted                    
                </param>
                <param>
                    pstmt the &lt;code&gt;PreparedStatement&lt;/code&gt; object that will be used
                      to execute the insertion                    
                </param>
                <return>
                    &lt;code&gt;false&lt;/code&gt; to indicate that the insertion was successful;
                      &lt;code&gt;true&lt;/code&gt; otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="insertNewRow" type="boolean" line="514">
                <params>
                    <param name="crs" type="CachedRowSet"/>
                    <param name="pstmt" type="PreparedStatement"/>
                    <param name="crsRes" type="CachedRowSetImpl"/>
                </params>
                <declaration name="i" type="int" line="515"/>
                <declaration name="icolCount" type="int" line="516"/>
                <declaration name="returnVal" type="boolean" line="517"/>
                <declaration name="pstmtSel" type="PreparedStatement" line="518"/>
                <declaration name="rs" type="ResultSet" line="519"/>
                <declaration name="dbmd" type="DatabaseMetaData" line="520"/>
                <declaration name="table" type="String" line="522"/>
                <declaration name="primaryKeys" type="String[]" line="524"/>
                <declaration name="k" type="int" line="525"/>
                <scope line="526">
                    <declaration name="pkcolname" type="String" line="527"/>
                </scope>
                <scope line="531">
                    <scope line="532">
                        <scope line="533">
                            <scope line="534"/>
                            <declaration name="crsPK" type="String" line="537"/>
                            <declaration name="rsPK" type="String" line="538"/>
                            <scope line="539">
                                <scope line="542">
                                    <declaration name="colname" type="String" line="543"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="554">
                    <scope line="555">
                        <declaration name="obj" type="Object" line="556"/>
                        <scope line="557"/>
                        <scope line="560"/>
                    </scope>
                </scope>
                <scope line="567">
                    <scope line="569"/>
                </scope>
            </method>
            <javadoc line="577">
                Deletes the row in the underlying data source that corresponds to
                  a row that has been deleted in the given &lt;code&gt; CachedRowSet&lt;/code&gt; object
                  and returns &lt;code&gt;false&lt;/code&gt; if the deletion was successful.
                  &lt;P&gt;
                  This method is called internally by this writer&apos;s &lt;code&gt;writeData&lt;/code&gt;
                  method when a row in the rowset has been deleted. The values in the
                  deleted row are the same as those that are stored in the original row
                  of the given &lt;code&gt;CachedRowSet&lt;/code&gt; object.  If the values in the
                  original row differ from the row in the underlying data source, the row
                  in the data source is not deleted, and &lt;code&gt;deleteOriginalRow&lt;/code&gt;
                  returns &lt;code&gt;true&lt;/code&gt; to indicate that there was a conflict.                
                <return>
                    &lt;code&gt;false&lt;/code&gt; if the deletion was successful, which means that
                      there was no conflict; &lt;code&gt;true&lt;/code&gt; otherwise                    
                </return>
                <throws>
                    SQLException if there was a database access error                    
                </throws>
            </javadoc>
            <method name="deleteOriginalRow" type="boolean" line="593">
                <params>
                    <param name="crs" type="CachedRowSet"/>
                    <param name="crsRes" type="CachedRowSetImpl"/>
                </params>
                <declaration name="pstmt" type="PreparedStatement" line="594"/>
                <declaration name="i" type="int" line="595"/>
                <declaration name="idx" type="int" line="596"/>
                <declaration name="strSelect" type="String" line="597"/>
                <declaration name="origVals" type="ResultSet" line="598"/>
                <scope line="602">
                    <scope line="603"/>
                    <scope line="606"/>
                </scope>
                <scope line="610"/>
                <scope line="616"/>
                <declaration name="rs" type="ResultSet" line="619"/>
                <scope line="620">
                    <scope line="621"/>
                    <declaration name="boolChanged" type="boolean" line="625"/>
                    <scope line="627">
                        <declaration name="original" type="Object" line="628"/>
                        <declaration name="changed" type="Object" line="629"/>
                        <scope line="630">
                            <scope line="631"/>
                        </scope>
                        <scope line="636"/>
                    </scope>
                    <scope line="642"/>
                    <scope line="645"/>
                    <declaration name="cmd" type="String" line="647"/>
                    <scope line="650">
                        <scope line="651"/>
                        <scope line="654"/>
                    </scope>
                    <scope line="658"/>
                </scope>
                <scope line="663"/>
            </method>
            <javadoc line="668">
                Sets the reader for this writer to the given reader.                
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="setReader" type="void" line="672">
                <params>
                    <param name="reader" type="CachedRowSetReader"/>
                </params>
            </method>
            <javadoc line="675">
                Gets the reader for this writer.                
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="getReader" type="CachedRowSetReader" line="679"/>
            <javadoc line="682">
                Composes a &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;,
                  and &lt;code&gt;DELETE&lt;/code&gt; statement that can be used by this writer to
                  write data to the data source backing the given &lt;code&gt;CachedRowSet&lt;/code&gt;
                  object.                
                <empty>
                    param caller a &lt;code&gt;CachedRowSet&lt;/code&gt; object for which this
                      &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object is the writer                    
                </empty>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="initSQLStatements" type="void" line="691">
                <params>
                    <param name="caller" type="CachedRowSet"/>
                </params>
                <declaration name="i" type="int" line="692"/>
                <declaration name="table" type="String" line="696"/>
                <scope line="697">
                    <scope line="699"/>
                </scope>
                <declaration name="catalog" type="String" line="703"/>
                <declaration name="schema" type="String" line="704"/>
                <declaration name="dbmd" type="DatabaseMetaData" line="705"/>
                <scope line="707"/>
                <declaration name="tempupdCmd" type="String" line="714"/>
                <declaration name="idxupWhere" type="int" line="715"/>
                <scope line="716"/>
                <scope line="722"/>
                <scope line="727"/>
            </method>
            <javadoc line="735">
                Returns a fully qualified table name built from the given catalog and
                  table names. The given metadata object is used to get the proper order
                  and separator.                
                <param>
                    dbmd a &lt;code&gt;DatabaseMetaData&lt;/code&gt; object that contains metadata
                      about this writer&apos;s &lt;code&gt;CachedRowSet&lt;/code&gt; object                    
                </param>
                <param>
                    catalog a &lt;code&gt;String&lt;/code&gt; object with the rowset&apos;s catalog
                      name                    
                </param>
                <param>
                    table a &lt;code&gt;String&lt;/code&gt; object with the name of the table from
                      which this writer&apos;s rowset was derived                    
                </param>
                <return>
                    a &lt;code&gt;String&lt;/code&gt; object with the fully qualified name of the
                      table from which this writer&apos;s rowset was derived                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="buildTableName" type="String" line="749">
                <params>
                    <param name="dbmd" type="DatabaseMetaData"/>
                    <param name="catalog" type="String"/>
                    <param name="schema" type="String"/>
                    <param name="table" type="String"/>
                </params>
                <declaration name="cmd" type="String" line="750"/>
                <scope line="754">
                    <scope line="755"/>
                    <scope line="758"/>
                </scope>
                <scope line="763">
                    <scope line="764"/>
                    <scope line="768"/>
                </scope>
            </method>
            <javadoc line="775">
                Assigns to the given &lt;code&gt;CachedRowSet&lt;/code&gt; object&apos;s
                  &lt;code&gt;params&lt;/code&gt;
                  field an array whose length equals the number of columns needed
                  to uniquely identify a row in the rowset. The array is given
                  values by the method &lt;code&gt;buildWhereClause&lt;/code&gt;.
                  &lt;P&gt;
                  If the &lt;code&gt;CachedRowSet&lt;/code&gt; object&apos;s &lt;code&gt;keyCols&lt;/code&gt;
                  field has length &lt;code&gt;0&lt;/code&gt; or is &lt;code&gt;null&lt;/code&gt;, the array
                  is set with the column number of every column in the rowset.
                  Otherwise, the array in the field &lt;code&gt;keyCols&lt;/code&gt; is set with only
                  the column numbers of the columns that are required to form a unique
                  identifier for a row.                
                <param>
                    crs the &lt;code&gt;CachedRowSet&lt;/code&gt; object for which this
                      &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object is the writer                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="buildKeyDesc" type="void" line="792">
                <params>
                    <param name="crs" type="CachedRowSet"/>
                </params>
                <declaration name="resultsetmd" type="ResultSetMetaData" line="794"/>
                <scope line="795">
                    <declaration name="listKeys" type="ArrayList&amp;lt;Integer&amp;gt;" line="796"/>
                    <scope line="797"/>
                </scope>
            </method>
            <javadoc line="805">
                Constructs an SQL &lt;code&gt;WHERE&lt;/code&gt; clause using the given
                  string as a starting point. The resulting clause will contain
                  a column name and &quot; = ?&quot; for each key column, that is, each column
                  that is needed to form a unique identifier for a row in the rowset.
                  This &lt;code&gt;WHERE&lt;/code&gt; clause can be added to
                  a &lt;code&gt;PreparedStatement&lt;/code&gt; object that updates, inserts, or
                  deletes a row.
                  &lt;P&gt;
                  This method uses the given result set to access values in the
                  &lt;code&gt;CachedRowSet&lt;/code&gt; object that called this writer.  These
                  values are used to build the array of parameters that will serve as
                  replacements for the &quot;?&quot; parameter placeholders in the
                  &lt;code&gt;PreparedStatement&lt;/code&gt; object that is sent to the
                  &lt;code&gt;CachedRowSet&lt;/code&gt; object&apos;s underlying data source.                
                <param>
                    whereClause a &lt;code&gt;String&lt;/code&gt; object that is an empty
                      string (&quot;&quot;)                    
                </param>
                <param>
                    rs a &lt;code&gt;ResultSet&lt;/code&gt; object that can be used
                      to access the &lt;code&gt;CachedRowSet&lt;/code&gt; object&apos;s data                    
                </param>
                <return>
                    a &lt;code&gt;WHERE&lt;/code&gt; clause of the form &quot;&lt;code&gt;WHERE&lt;/code&gt;
                      columnName = ? AND columnName = ? AND columnName = ? ...&quot;                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="buildWhereClause" type="String" line="828">
                <params>
                    <param name="whereClause" type="String"/>
                    <param name="rs" type="ResultSet"/>
                </params>
                <scope line="830">
                    <scope line="831"/>
                    <scope line="836"/>
                    <scope line="839"/>
                </scope>
            </method>
            <method name="updateResolvedConflictToDB" type="void" line="845">
                <params>
                    <param name="crs" type="CachedRowSet"/>
                    <param name="con" type="Connection"/>
                </params>
                <declaration name="pStmt" type="PreparedStatement" line="846"/>
                <declaration name="strWhere" type="String" line="847"/>
                <declaration name="strExec" type="String" line="848"/>
                <declaration name="strUpdate" type="String" line="849"/>
                <declaration name="icolCount" type="int" line="850"/>
                <declaration name="keyColumns" type="int" line="851"/>
                <declaration name="param" type="Object" line="852"/>
                <declaration name="strSet" type="String" line="853"/>
                <scope line="855">
                    <scope line="857"/>
                </scope>
                <declaration name="first" type="boolean" line="864"/>
                <scope line="865">
                    <scope line="866">
                        <scope line="867"/>
                    </scope>
                </scope>
                <scope line="877">
                    <scope line="878"/>
                    <scope line="883"/>
                    <scope line="886"/>
                </scope>
                <declaration name="idx" type="int" line="892"/>
                <scope line="893">
                    <scope line="894">
                        <declaration name="obj" type="Object" line="895"/>
                        <scope line="896"/>
                        <scope line="899"/>
                    </scope>
                </scope>
                <scope line="904">
                    <scope line="905"/>
                </scope>
                <declaration name="id" type="int" line="909"/>
            </method>
            <javadoc line="911">
                                
            </javadoc>
            <method name="commit" type="void" line="913">
                <scope line="915"/>
            </method>
            <method name="commit" type="void" line="919">
                <params>
                    <param name="crs" type="CachedRowSetImpl"/>
                    <param name="updateRowset" type="boolean"/>
                </params>
                <scope line="921"/>
                <scope line="924"/>
            </method>
            <javadoc line="928">
                                
            </javadoc>
            <method name="rollback" type="void" line="930">
                <scope line="932"/>
            </method>
            <javadoc line="936">
                                
            </javadoc>
            <method name="rollback" type="void" line="938">
                <params>
                    <param name="s" type="Savepoint"/>
                </params>
                <scope line="940"/>
            </method>
            <method name="readObject" type="void" line="944">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <scope line="946"/>
                <scope line="949"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="953"/>
        </class>
    </source>