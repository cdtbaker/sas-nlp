<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.rowset.internal">
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="com.sun.rowset"/>
        <import package="java.text.MessageFormat"/>
        <import package="javax.sql.rowset"/>
        <import package="javax.sql.rowset.serial.SQLInputImpl"/>
        <import package="javax.sql.rowset.serial.SerialArray"/>
        <import package="javax.sql.rowset.serial.SerialBlob"/>
        <import package="javax.sql.rowset.serial.SerialClob"/>
        <import package="javax.sql.rowset.serial.SerialStruct"/>
        <import package="javax.sql.rowset.spi"/>
        <class name="CachedRowSetWriter" line="44">
            <comment line="441">
                end writeData                
            </comment>
            <implements interface="TransactionalWriter"/>
            <implements interface="Serializable"/>
            <javadoc line="44">
                The facility called on internally by the &lt;code&gt;RIOptimisticProvider&lt;/code&gt; implementation to
                  propagate changes back to the data source from which the rowset got its data.
                  &lt;P&gt;
                  A &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object, called a writer, has the public
                  method &lt;code&gt;writeData&lt;/code&gt; for writing modified data to the underlying data source.
                  This method is invoked by the rowset internally and is never invoked directly by an application.
                  A writer also has public methods for setting and getting
                  the &lt;code&gt;CachedRowSetReader&lt;/code&gt; object, called a reader, that is associated
                  with the writer. The remainder of the methods in this class are private and
                  are invoked internally, either directly or indirectly, by the method
                  &lt;code&gt;writeData&lt;/code&gt;.
                  &lt;P&gt;
                  Typically the &lt;code&gt;SyncFactory&lt;/code&gt; manages the &lt;code&gt;RowSetReader&lt;/code&gt; and
                  the &lt;code&gt;RowSetWriter&lt;/code&gt; implementations using &lt;code&gt;SyncProvider&lt;/code&gt; objects.
                  Standard JDBC RowSet implementations provide an object instance of this
                  writer by invoking the &lt;code&gt;SyncProvider.getRowSetWriter()&lt;/code&gt; method.                
                <version>
                    0.2                    
                </version>
                <author>
                    Jonathan Bruce                    
                </author>
                <see>
                    javax.sql.rowset.spi.SyncProvider                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncFactory                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncFactoryException                    
                </see>
            </javadoc>
            <declaration name="con" type="Connection" line="70"/>
            <javadoc line="70">
                The &lt;code&gt;Connection&lt;/code&gt; object that this writer will use to make a
                  connection to the data source to which it will write data.                
            </javadoc>
            <declaration name="selectCmd" type="String" line="77"/>
            <javadoc line="77">
                The SQL &lt;code&gt;SELECT&lt;/code&gt; command that this writer will call
                  internally. The method &lt;code&gt;initSQLStatements&lt;/code&gt; builds this
                  command by supplying the words &quot;SELECT&quot; and &quot;FROM,&quot; and using
                  metadata to get the table name and column names .                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="updateCmd" type="String" line="87"/>
            <javadoc line="87">
                The SQL &lt;code&gt;UPDATE&lt;/code&gt; command that this writer will call
                  internally to write data to the rowset&apos;s underlying data source.
                  The method &lt;code&gt;initSQLStatements&lt;/code&gt; builds this &lt;code&gt;String&lt;/code&gt;
                  object.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="updateWhere" type="String" line="97"/>
            <javadoc line="97">
                The SQL &lt;code&gt;WHERE&lt;/code&gt; clause the writer will use for update
                  statements in the &lt;code&gt;PreparedStatement&lt;/code&gt; object
                  it sends to the underlying data source.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="deleteCmd" type="String" line="106"/>
            <javadoc line="106">
                The SQL &lt;code&gt;DELETE&lt;/code&gt; command that this writer will call
                  internally to delete a row in the rowset&apos;s underlying data source.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="deleteWhere" type="String" line="114"/>
            <javadoc line="114">
                The SQL &lt;code&gt;WHERE&lt;/code&gt; clause the writer will use for delete
                  statements in the &lt;code&gt;PreparedStatement&lt;/code&gt; object
                  it sends to the underlying data source.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="insertCmd" type="String" line="123"/>
            <javadoc line="123">
                The SQL &lt;code&gt;INSERT INTO&lt;/code&gt; command that this writer will internally use
                  to insert data into the rowset&apos;s underlying data source.  The method
                  &lt;code&gt;initSQLStatements&lt;/code&gt; builds this command with a question
                  mark parameter placeholder for each column in the rowset.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="keyCols" type="int[]" line="133"/>
            <javadoc line="133">
                An array containing the column numbers of the columns that are
                  needed to uniquely identify a row in the &lt;code&gt;CachedRowSet&lt;/code&gt; object
                  for which this &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object is the writer.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="params" type="Object[]" line="142"/>
            <javadoc line="142">
                An array of the parameters that should be used to set the parameter
                  placeholders in a &lt;code&gt;PreparedStatement&lt;/code&gt; object that this
                  writer will execute.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="reader" type="CachedRowSetReader" line="151"/>
            <javadoc line="151">
                The &lt;code&gt;CachedRowSetReader&lt;/code&gt; object that has been
                  set as the reader for the &lt;code&gt;CachedRowSet&lt;/code&gt; object
                  for which this &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object is the writer.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="callerMd" type="ResultSetMetaData" line="160"/>
            <javadoc line="160">
                The &lt;code&gt;ResultSetMetaData&lt;/code&gt; object that contains information
                  about the columns in the &lt;code&gt;CachedRowSet&lt;/code&gt; object
                  for which this &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object is the writer.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="callerColumnCount" type="int" line="169"/>
            <javadoc line="169">
                The number of columns in the &lt;code&gt;CachedRowSet&lt;/code&gt; object
                  for which this &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object is the writer.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="crsResolve" type="CachedRowSetImpl" line="177"/>
            <javadoc line="177">
                This &lt;code&gt;CachedRowSet&lt;code&gt; will hold the conflicting values
                  retrieved from the db and hold it.                
            </javadoc>
            <declaration name="status" type="ArrayList" line="183"/>
            <javadoc line="183">
                This &lt;code&gt;ArrayList&lt;code&gt; will hold the values of SyncResolver.                
            </javadoc>
            <declaration name="iChangedValsInDbAndCRS" type="int" line="188"/>
            <javadoc line="188">
                This will check whether the same field value has changed both
                  in database and CachedRowSet.                
            </javadoc>
            <declaration name="iChangedValsinDbOnly" type="int" line="194"/>
            <javadoc line="194">
                This will hold the number of cols for which the values have
                  changed only in database.                
            </javadoc>
            <declaration name="resBundle" type="JdbcRowSetResourceBundle" line="200"/>
            <method name="CachedRowSetWriter" type="constructor" line="202">
                <scope line="203"/>
                <scope line="205"/>
            </method>
            <javadoc line="210">
                Propagates changes in the given &lt;code&gt;RowSet&lt;/code&gt; object
                  back to its underlying data source and returns &lt;code&gt;true&lt;/code&gt;
                  if successful. The writer will check to see if
                  the data in the pre-modified rowset (the original values) differ
                  from the data in the underlying data source.  If data in the data
                  source has been modified by someone else, there is a conflict,
                  and in that case, the writer will not write to the data source.
                  In other words, the writer uses an optimistic concurrency algorithm:
                  It checks for conflicts before making changes rather than restricting
                  access for concurrent users.
                  &lt;P&gt;
                  This method is called by the rowset internally when
                  the application invokes the method &lt;code&gt;acceptChanges&lt;/code&gt;.
                  The &lt;code&gt;writeData&lt;/code&gt; method in turn calls private methods that
                  it defines internally.
                  The following is a general summary of what the method
                  &lt;code&gt;writeData&lt;/code&gt; does, much of which is accomplished
                  through calls to its own internal methods.
                  &lt;OL&gt;
                  &lt;LI&gt;Creates a &lt;code&gt;CachedRowSet&lt;/code&gt; object from the given
                  &lt;code&gt;RowSet&lt;/code&gt; object
                  &lt;LI&gt;Makes a connection with the data source
                  &lt;UL&gt;
                  &lt;LI&gt;Disables autocommit mode if it is not already disabled
                  &lt;LI&gt;Sets the transaction isolation level to that of the rowset
                  &lt;/UL&gt;
                  &lt;LI&gt;Checks to see if the reader has read new data since the writer
                  was last called and, if so, calls the method
                  &lt;code&gt;initSQLStatements&lt;/code&gt; to initialize new SQL statements
                  &lt;UL&gt;
                  &lt;LI&gt;Builds new &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;,
                  &lt;code&gt;INSERT&lt;/code&gt;, and &lt;code&gt;DELETE&lt;/code&gt; statements
                  &lt;LI&gt;Uses the &lt;code&gt;CachedRowSet&lt;/code&gt; object&apos;s metadata to
                  determine the table name, column names, and the columns
                  that make up the primary key
                  &lt;/UL&gt;
                  &lt;LI&gt;When there is no conflict, propagates changes made to the
                  &lt;code&gt;CachedRowSet&lt;/code&gt; object back to its underlying data source
                  &lt;UL&gt;
                  &lt;LI&gt;Iterates through each row of the &lt;code&gt;CachedRowSet&lt;/code&gt; object
                  to determine whether it has been updated, inserted, or deleted
                  &lt;LI&gt;If the corresponding row in the data source has not been changed
                  since the rowset last read its
                  values, the writer will use the appropriate command to update,
                  insert, or delete the row
                  &lt;LI&gt;If any data in the data source does not match the original values
                  for the &lt;code&gt;CachedRowSet&lt;/code&gt; object, the writer will roll
                  back any changes it has made to the row in the data source.
                  &lt;/UL&gt;
                  &lt;/OL&gt;                
                <return>
                    <code>true</code> if changes to the rowset were successfully
                      written to the rowset's underlying data source;
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="writeData" type="boolean" line="266">
                <params>
                    <param name="caller" type="RowSetInternal"/>
                </params>
                <comment line="273">
                    We assume caller is a CachedRowSet                    
                </comment>
                <comment line="275">
                    crsResolve = new CachedRowSetImpl();                    
                </comment>
                <comment line="278">
                    The reader is registered with the writer at design time.                    
                </comment>
                <comment line="279">
                    This is not required, in general.  The reader has logic                    
                </comment>
                <comment line="280">
                    to get a JDBC connection, so call it.                    
                </comment>
                <comment line="289">
                    Fix 6200646.
                     Don&apos;t change the connection or transaction properties. This will fail in a
                     J2EE container.
                    if (con.getAutoCommit() == true)  {
                    con.setAutoCommit(false);
                    }
                    
                    con.setTransactionIsolation(crs.getTransactionIsolation());                    
                </comment>
                <comment line="320">
                    moved outside the insert inner loop                    
                </comment>
                <comment line="321">
                    pstmtIns = con.prepareStatement(insertCmd);                    
                </comment>
                <comment line="324">
                    No data, so return success.                    
                </comment>
                <comment line="329">
                    We need to see rows marked for deletion.                    
                </comment>
                <comment line="333">
                    Look at all the rows.                    
                </comment>
                <comment line="339">
                    The row has been deleted.                    
                </comment>
                <comment line="343">
                    delete happened without any occurrence of conflicts                    
                </comment>
                <comment line="344">
                    so update status accordingly                    
                </comment>
                <comment line="349">
                    The row has been inserted.                    
                </comment>
                <comment line="355">
                    insert happened without any occurrence of conflicts                    
                </comment>
                <comment line="356">
                    so update status accordingly                    
                </comment>
                <comment line="360">
                    The row has been updated.                    
                </comment>
                <comment line="364">
                    update happened without any occurrence of conflicts                    
                </comment>
                <comment line="365">
                    so update status accordingly                    
                </comment>
                <comment line="370">
                    The row is neither of inserted, updated or deleted.
                      So set nulls in the this.crsResolve for this row,
                      as nothing is to be done for such rows.
                      Also note that if such a row has been changed in database
                      and we have not changed(inserted, updated or deleted)
                      that is fine.                    
                </comment>
                <comment line="383">
                    end for                    
                </comment>
                <comment line="388">
                    end if                    
                </comment>
                <comment line="390">
                    end while                    
                </comment>
                <comment line="392">
                    close the insert statement                    
                </comment>
                <comment line="395">
                    reset                    
                </comment>
                <comment line="400">
                    ignore status for index = 0 which is set to null                    
                </comment>
                <comment line="402">
                    there is at least one conflict which needs to be resolved                    
                </comment>
                <comment line="413">
                    SyncResolver syncRes = spe.getSyncResolver();                    
                </comment>
                <comment line="427">
                    if (conflict == true) {
                    con.rollback();
                    return false;
                    } else {
                    con.commit();
                    if (reader.getCloseConnection() == true) {
                    con.close();
                    }
                    return true;
                    }                    
                </comment>
                <declaration name="conflict" type="boolean" line="267"/>
                <declaration name="showDel" type="boolean" line="268"/>
                <declaration name="pstmtIns" type="PreparedStatement" line="269"/>
                <declaration name="crs" type="CachedRowSetImpl" line="274"/>
                <scope line="285"/>
                <declaration name="iColCount" type="int" line="301"/>
                <declaration name="rsmdWrite" type="RowSetMetaDataImpl" line="303"/>
                <declaration name="rsmdResolv" type="RowSetMetaDataImpl" line="304"/>
                <declaration name="sz" type="int" line="307"/>
                <scope line="313"/>
                <scope line="323"/>
                <declaration name="rows" type="int" line="336"/>
                <scope line="337">
                    <scope line="338">
                        <scope line="340"/>
                        <scope line="342"/>
                    </scope>
                    <scope line="348">
                        <scope line="352"/>
                        <scope line="354"/>
                    </scope>
                    <scope line="359">
                        <scope line="361"/>
                        <scope line="363"/>
                    </scope>
                    <scope line="369">
                        <declaration name="icolCount" type="int" line="377"/>
                        <scope line="381"/>
                    </scope>
                </scope>
                <declaration name="boolConf" type="boolean" line="398"/>
                <scope line="399">
                    <scope line="401"/>
                </scope>
                <scope line="411">
                    <declaration name="spe" type="SyncProviderException" line="412"/>
                    <declaration name="syncResImpl" type="SyncResolverImpl" line="415"/>
                </scope>
                <scope line="424"/>
            </method>
            <javadoc line="442">
                Updates the given &lt;code&gt;CachedRowSet&lt;/code&gt; object&apos;s underlying data
                  source so that updates to the rowset are reflected in the original
                  data source, and returns &lt;code&gt;false&lt;/code&gt; if the update was successful.
                  A return value of &lt;code&gt;true&lt;/code&gt; indicates that there is a conflict,
                  meaning that a value updated in the rowset has already been changed by
                  someone else in the underlying data source.  A conflict can also exist
                  if, for example, more than one row in the data source would be affected
                  by the update or if no rows would be affected.  In any case, if there is
                  a conflict, this method does not update the underlying data source.
                  &lt;P&gt;
                  This method is called internally by the method &lt;code&gt;writeData&lt;/code&gt;
                  if a row in the &lt;code&gt;CachedRowSet&lt;/code&gt; object for which this
                  &lt;code&gt;CachedRowSetWriter&lt;/code&gt; object is the writer has been updated.                
                <return>
                    <code>false</code> if the update to the underlying data source is
                      successful; <code>true</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="updateOriginalRow" type="boolean" line="462">
                <params>
                    <param name="crs" type="CachedRowSet"/>
                </params>
                <comment line="467">
                    Select the row from the database.                    
                </comment>
                <comment line="475">
                    The following block of code is for checking a particular type of
                      query where in there is a where clause. Without this block, if a
                      SQL statement is built the &quot;where&quot; clause will appear twice hence
                      the DB errors out and a SQLException is thrown. This code also
                      considers that the where clause is in the right place as the
                      CachedRowSet object would already have been populated with this
                      query before coming to this point.                    
                </comment>
                <comment line="513">
                    Older driver don&apos;t support these operations.                    
                </comment>
                <comment line="522">
                    More than one row conflict.
                      If rs has only one row we are able to
                      uniquely identify the row where update
                      have to happen else if more than one
                      row implies we cannot uniquely identify the row
                      where we have to do updates.
                      crs.setKeyColumns needs to be set to
                      come out of this situation.                    
                </comment>
                <comment line="535">
                    don&apos;t close the rs                    
                </comment>
                <comment line="536">
                    we require the record in rs to be used.                    
                </comment>
                <comment line="537">
                    rs.close();                    
                </comment>
                <comment line="538">
                    pstmt.close();                    
                </comment>
                <comment line="541">
                    how many fields need to be updated                    
                </comment>
                <comment line="551">
                    There&apos;s only one row and the cursor                    
                </comment>
                <comment line="552">
                    needs to be on that row.                    
                </comment>
                <comment line="563">
                    the following block creates equivalent objects
                     that would have been created if this rs is populated
                     into a CachedRowSet so that comparison of the column values
                     from the ResultSet and CachedRowSet are possible                    
                </comment>
                <comment line="574">
                    look up the class in the map                    
                </comment>
                <comment line="578">
                    create new instance of the class                    
                </comment>
                <comment line="589">
                    get the attributes from the struct                    
                </comment>
                <comment line="591">
                    create the SQLInput &quot;stream&quot;                    
                </comment>
                <comment line="593">
                    read the values...                    
                </comment>
                <comment line="607">
                    reset boolNull if it had been set                    
                </comment>
                <comment line="610">
                    This addtional checking has been added when the current value
                      in the DB is null, but the DB had a different value when the
                      data was actaully fetched into the CachedRowSet.                    
                </comment>
                <comment line="616">
                    value in db has changed                    
                </comment>
                <comment line="617">
                    don&apos;t proceed with synchronization                    
                </comment>
                <comment line="618">
                    get the value in db and pass it to the resolver.                    
                </comment>
                <comment line="621">
                    Set the boolNull to false,                    
                </comment>
                <comment line="622">
                    in order to set the actual value;                    
                </comment>
                <comment line="627">
                    Adding the checking for rsval to be &quot;not&quot; null or else
                      it would through a NullPointerException when the values
                      are compared.                    
                </comment>
                <comment line="634">
                    value in db has changed                    
                </comment>
                <comment line="635">
                    don&apos;t proceed with synchronization                    
                </comment>
                <comment line="636">
                    get the value in db and pass it to the resolver.                    
                </comment>
                <comment line="639">
                    Set the boolNull to false,                    
                </comment>
                <comment line="640">
                    in order to set the actual value;                    
                </comment>
                <comment line="645">
                    Adding the additonal condition of checking for &quot;flag&quot;
                      boolean variable, which would otherwise result in
                      building a invalid query, as the comma would not be
                      added to the query string.                    
                </comment>
                <comment line="659">
                    Adding the extra condition for orig to be &quot;not&quot; null as the
                      condition for orig to be null is take prior to this, if this
                      is not added it will result in a NullPointerException when
                      the values are compared.                    
                </comment>
                <comment line="667">
                    nothing to update in this case since values are equal                    
                </comment>
                <comment line="669">
                    Adding the extra condition for orig to be &quot;not&quot; null as the
                      condition for orig to be null is take prior to this, if this
                      is not added it will result in a NullPointerException when
                      the values are compared.                    
                </comment>
                <comment line="676">
                    When values from db and values in CachedRowSet are not equal,                    
                </comment>
                <comment line="677">
                    if db value is same as before updation for each col in                    
                </comment>
                <comment line="678">
                    the row before fetching into CachedRowSet,                    
                </comment>
                <comment line="679">
                    only then we go ahead with updation, else we                    
                </comment>
                <comment line="680">
                    throw SyncProviderException.                    
                </comment>
                <comment line="682">
                    if value has changed in db after fetching from db                    
                </comment>
                <comment line="683">
                    for some cols of the row and at the same time, some other cols                    
                </comment>
                <comment line="684">
                    have changed in CachedRowSet, no synchronization happens                    
                </comment>
                <comment line="686">
                    Synchronization happens only when data when fetching is                    
                </comment>
                <comment line="687">
                    same or at most has changed in cachedrowset                    
                </comment>
                <comment line="689">
                    check orig value with what is there in crs for a column                    
                </comment>
                <comment line="690">
                    before updation in crs.                    
                </comment>
                <comment line="694">
                    At this point we are sure that                    
                </comment>
                <comment line="695">
                    the value updated in crs was from                    
                </comment>
                <comment line="696">
                    what is in db now and has not changed                    
                </comment>
                <comment line="705">
                    Here the value has changed in the db after                    
                </comment>
                <comment line="706">
                    data was fetched                    
                </comment>
                <comment line="707">
                    Plus store this row from CachedRowSet and keep it                    
                </comment>
                <comment line="708">
                    in a new CachedRowSet                    
                </comment>
                <comment line="721">
                    end for                    
                </comment>
                <comment line="729">
                    if nothing has changed return now - this can happen
                     if column is updated to the same value.
                     if colsNotChanged == callerColumnCount implies we are updating
                     the database with ALL COLUMNS HAVING SAME VALUES,
                     so skip going to database, else do as usual.                    
                </comment>
                <comment line="750">
                    Comments needed here                    
                </comment>
                <comment line="760">
                    Comments needed here                    
                </comment>
                <comment line="771">
                    i should be equal to 1(row count), because we update
                     one row(returned as row count) at a time, if all goes well.
                     if 1 != 1, this implies we have not been able to
                     do updations properly i.e there is a conflict in database
                     versus what is in CachedRowSet for this particular row.                    
                </comment>
                <comment line="782">
                    Cursor will be here, if the ResultSet may not return even a single row
                     i.e. we can&apos;t find the row where to update because it has been deleted
                     etc. from the db.
                     Present the whole row as null to user, to force null to be sync&apos;ed
                     and hence nothing to be synced.
                    
                     NOTE:
                     ------
                     In the database if a column that is mapped to java.sql.Types.REAL stores
                     a Double value and is compared with value got from ResultSet.getFloat()
                     no row is retrieved and will throw a SyncProviderException. For details
                     see bug Id 5053830                    
                </comment>
                <comment line="800">
                    if executeUpdate fails it will come here,                    
                </comment>
                <comment line="801">
                    update crsResolve with null rows                    
                </comment>
                <declaration name="pstmt" type="PreparedStatement" line="463"/>
                <declaration name="i" type="int" line="464"/>
                <declaration name="idx" type="int" line="465"/>
                <declaration name="origVals" type="ResultSet" line="468"/>
                <scope line="471">
                    <declaration name="tempselectCmd" type="String" line="486"/>
                    <declaration name="idxWhere" type="int" line="488"/>
                    <scope line="491">
                        <declaration name="tempSelect" type="String" line="492"/>
                    </scope>
                    <scope line="499">
                        <scope line="500"/>
                        <scope line="502"/>
                    </scope>
                    <scope line="507"/>
                    <scope line="512"/>
                    <declaration name="rs" type="ResultSet" line="516"/>
                    <declaration name="rsmd" type="ResultSetMetaData" line="518"/>
                    <scope line="520">
                        <scope line="521"/>
                        <declaration name="colsNotChanged" type="int" line="542"/>
                        <declaration name="cols" type="Vector" line="543"/>
                        <declaration name="updateExec" type="String" line="544"/>
                        <declaration name="orig" type="Object" line="545"/>
                        <declaration name="curr" type="Object" line="546"/>
                        <declaration name="rsval" type="Object" line="547"/>
                        <declaration name="boolNull" type="boolean" line="548"/>
                        <declaration name="objVal" type="Object" line="549"/>
                        <declaration name="first" type="boolean" line="554"/>
                        <declaration name="flag" type="boolean" line="555"/>
                        <scope line="559">
                            <declaration name="map" type="Map" line="569"/>
                            <scope line="570">
                                <declaration name="s" type="Struct" line="572"/>
                                <declaration name="c" type="Class" line="575"/>
                                <scope line="577">
                                    <declaration name="obj" type="SQLData" line="579"/>
                                    <scope line="580"/>
                                    <scope line="582"/>
                                    <scope line="585"/>
                                    <declaration name="attribs" type="Object" line="590"/>
                                    <declaration name="sqlInput" type="SQLInputImpl" line="592"/>
                                </scope>
                            </scope>
                            <scope line="597"/>
                            <scope line="599"/>
                            <scope line="601"/>
                            <scope line="603"/>
                            <scope line="615"/>
                            <scope line="633"/>
                            <scope line="643">
                                <scope line="651"/>
                            </scope>
                            <scope line="665"/>
                            <scope line="675">
                                <scope line="692">
                                    <scope line="693">
                                        <scope line="697"/>
                                    </scope>
                                    <scope line="704"/>
                                </scope>
                            </scope>
                            <scope line="716"/>
                            <scope line="718"/>
                        </scope>
                        <scope line="737"/>
                        <scope line="741"/>
                        <scope line="751">
                            <declaration name="obj" type="Object" line="752"/>
                        </scope>
                        <scope line="761">
                            <scope line="762"/>
                            <scope line="764"/>
                        </scope>
                    </scope>
                    <scope line="781"/>
                </scope>
                <scope line="798">
                    <scope line="804"/>
                </scope>
            </method>
            <javadoc line="815">
                Inserts a row that has been inserted into the given
                  &lt;code&gt;CachedRowSet&lt;/code&gt; object into the data source from which
                  the rowset is derived, returning &lt;code&gt;false&lt;/code&gt; if the insertion
                  was successful.                
                <param>
                    crs the <code>CachedRowSet</code> object that has had a row inserted
                      and to whose underlying data source the row will be inserted                    
                </param>
                <param>
                    pstmt the <code>PreparedStatement</code> object that will be used
                      to execute the insertion                    
                </param>
                <return>
                    <code>false</code> to indicate that the insertion was successful;
                      <code>true</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="insertNewRow" type="boolean" line="830">
                <params>
                    <param name="crs" type="CachedRowSet"/>
                    <param name="pstmt" type="PreparedStatement"/>
                    <param name="crsRes" type="CachedRowSetImpl"/>
                </params>
                <comment line="891">
                    Cursor will come here if executeUpdate fails.
                     There can be many reasons why the insertion failed,
                     one can be violation of primary key.
                     Hence we cannot exactly identify why the insertion failed
                     Present the current row as a null row to the user.                    
                </comment>
                <declaration name="i" type="int" line="831"/>
                <declaration name="icolCount" type="int" line="832"/>
                <declaration name="returnVal" type="boolean" line="834"/>
                <declaration name="pstmtSel" type="PreparedStatement" line="835"/>
                <declaration name="rs" type="ResultSet" line="837"/>
                <declaration name="dbmd" type="DatabaseMetaData" line="838"/>
                <declaration name="table" type="String" line="840"/>
                <declaration name="primaryKeys" type="String[]" line="842"/>
                <declaration name="k" type="int" line="843"/>
                <scope line="844">
                    <declaration name="pkcolname" type="String" line="845"/>
                </scope>
                <scope line="850">
                    <scope line="851">
                        <scope line="852">
                            <scope line="853"/>
                            <declaration name="crsPK" type="String" line="856"/>
                            <declaration name="rsPK" type="String" line="857"/>
                            <scope line="858">
                                <scope line="861">
                                    <declaration name="colname" type="String" line="862"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="877">
                    <scope line="878">
                        <declaration name="obj" type="Object" line="879"/>
                        <scope line="880"/>
                        <scope line="882"/>
                    </scope>
                </scope>
                <scope line="890">
                    <scope line="900"/>
                </scope>
            </method>
            <javadoc line="911">
                Deletes the row in the underlying data source that corresponds to
                  a row that has been deleted in the given &lt;code&gt; CachedRowSet&lt;/code&gt; object
                  and returns &lt;code&gt;false&lt;/code&gt; if the deletion was successful.
                  &lt;P&gt;
                  This method is called internally by this writer&apos;s &lt;code&gt;writeData&lt;/code&gt;
                  method when a row in the rowset has been deleted. The values in the
                  deleted row are the same as those that are stored in the original row
                  of the given &lt;code&gt;CachedRowSet&lt;/code&gt; object.  If the values in the
                  original row differ from the row in the underlying data source, the row
                  in the data source is not deleted, and &lt;code&gt;deleteOriginalRow&lt;/code&gt;
                  returns &lt;code&gt;true&lt;/code&gt; to indicate that there was a conflict.                
                <return>
                    <code>false</code> if the deletion was successful, which means that
                      there was no conflict; <code>true</code> otherwise                    
                </return>
                <throws>
                    SQLException if there was a database access error                    
                </throws>
            </javadoc>
            <method name="deleteOriginalRow" type="boolean" line="929">
                <params>
                    <param name="crs" type="CachedRowSet"/>
                    <param name="crsRes" type="CachedRowSetImpl"/>
                </params>
                <comment line="934">
                    Select the row from the database.                    
                </comment>
                <comment line="956">
                    Older driver don&apos;t support these operations...                    
                </comment>
                <comment line="966">
                    more than one row                    
                </comment>
                <comment line="971">
                    Now check all the values in rs to be same in                    
                </comment>
                <comment line="972">
                    db also before actually going ahead with deleting                    
                </comment>
                <comment line="996">
                    do not delete as values in db have changed                    
                </comment>
                <comment line="997">
                    deletion will not happen for this row from db                    
                </comment>
                <comment line="998">
                    exit now returning true. i.e. conflict                    
                </comment>
                <comment line="1001">
                    delete the row.                    
                </comment>
                <comment line="1002">
                    Go ahead with deleting,                    
                </comment>
                <comment line="1003">
                    don&apos;t do anything here                    
                </comment>
                <comment line="1023">
                    didn&apos;t find the row                    
                </comment>
                <comment line="1027">
                    no conflict                    
                </comment>
                <declaration name="pstmt" type="PreparedStatement" line="930"/>
                <declaration name="i" type="int" line="931"/>
                <declaration name="idx" type="int" line="932"/>
                <declaration name="strSelect" type="String" line="933"/>
                <declaration name="origVals" type="ResultSet" line="935"/>
                <scope line="942">
                    <scope line="943"/>
                    <scope line="945"/>
                </scope>
                <scope line="950"/>
                <scope line="955"/>
                <declaration name="rs" type="ResultSet" line="962"/>
                <scope line="964">
                    <scope line="965"/>
                    <declaration name="boolChanged" type="boolean" line="973"/>
                    <scope line="977">
                        <declaration name="original" type="Object" line="979"/>
                        <declaration name="changed" type="Object" line="980"/>
                        <scope line="982">
                            <scope line="983"/>
                        </scope>
                        <scope line="987"/>
                    </scope>
                    <scope line="995"/>
                    <scope line="1000"/>
                    <declaration name="cmd" type="String" line="1006"/>
                    <scope line="1010">
                        <scope line="1011"/>
                        <scope line="1013"/>
                    </scope>
                    <scope line="1018"/>
                </scope>
                <scope line="1022"/>
            </method>
            <javadoc line="1031">
                Sets the reader for this writer to the given reader.                
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="setReader" type="void" line="1036">
                <params>
                    <param name="reader" type="CachedRowSetReader"/>
                </params>
            </method>
            <javadoc line="1040">
                Gets the reader for this writer.                
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="getReader" type="CachedRowSetReader" line="1045"/>
            <javadoc line="1049">
                Composes a &lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;,
                  and &lt;code&gt;DELETE&lt;/code&gt; statement that can be used by this writer to
                  write data to the data source backing the given &lt;code&gt;CachedRowSet&lt;/code&gt;
                  object.                
                <>
                    param caller a <code>CachedRowSet</code> object for which this
                      <code>CachedRowSetWriter</code> object is the writer                    
                </>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="initSQLStatements" type="void" line="1059">
                <params>
                    <param name="caller" type="CachedRowSet"/>
                </params>
                <comment line="1066">
                    No data, so return.                    
                </comment>
                <comment line="1069">
                    If the RowSet has a Table name we should use it.
                     This is really a hack to get round the fact that
                     a lot of the jdbc drivers can&apos;t provide the tab.                    
                </comment>
                <comment line="1076">
                    attempt to build a table name using the info
                     that the driver gave us for the first column
                     in the source result set.                    
                </comment>
                <comment line="1090">
                    Compose a SELECT statement.  There are three parts.                    
                </comment>
                <comment line="1094">
                    Project List                    
                </comment>
                <comment line="1104">
                    FROM clause.                    
                </comment>
                <comment line="1107">
                    Compose an UPDATE statement.                    
                </comment>
                <comment line="1113">
                    The following block of code is for checking a particular type of
                      query where in there is a where clause. Without this block, if a
                      SQL statement is built the &quot;where&quot; clause will appear twice hence
                      the DB errors out and a SQLException is thrown. This code also
                      considers that the where clause is in the right place as the
                      CachedRowSet object would already have been populated with this
                      query before coming to this point.                    
                </comment>
                <comment line="1133">
                    Compose an INSERT statement.                    
                </comment>
                <comment line="1137">
                    Column list                    
                </comment>
                <comment line="1154">
                    Compose a DELETE statement.                    
                </comment>
                <comment line="1159">
                    set the key desriptors that will be
                     needed to construct where clauses.                    
                </comment>
                <declaration name="i" type="int" line="1061"/>
                <declaration name="table" type="String" line="1074"/>
                <scope line="1075">
                    <scope line="1082"/>
                </scope>
                <declaration name="catalog" type="String" line="1086"/>
                <declaration name="schema" type="String" line="1087"/>
                <declaration name="dbmd" type="DatabaseMetaData" line="1088"/>
                <scope line="1096"/>
                <declaration name="tempupdCmd" type="String" line="1123"/>
                <declaration name="idxupWhere" type="int" line="1125"/>
                <scope line="1128"/>
                <scope line="1139"/>
                <scope line="1146"/>
            </method>
            <javadoc line="1166">
                Returns a fully qualified table name built from the given catalog and
                  table names. The given metadata object is used to get the proper order
                  and separator.                
                <param>
                    dbmd a <code>DatabaseMetaData</code> object that contains metadata
                      about this writer's <code>CachedRowSet</code> object                    
                </param>
                <param>
                    catalog a <code>String</code> object with the rowset's catalog
                      name                    
                </param>
                <param>
                    table a <code>String</code> object with the name of the table from
                      which this writer's rowset was derived                    
                </param>
                <return>
                    a <code>String</code> object with the fully qualified name of the
                      table from which this writer's rowset was derived                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="buildTableName" type="String" line="1182">
                <params>
                    <param name="dbmd" type="DatabaseMetaData"/>
                    <param name="catalog" type="String"/>
                    <param name="schema" type="String"/>
                    <param name="table" type="String"/>
                </params>
                <comment line="1184">
                    trim all the leading and trailing whitespaces,                    
                </comment>
                <comment line="1185">
                    white spaces can never be catalog, schema or a table name.                    
                </comment>
                <declaration name="cmd" type="String" line="1187"/>
                <scope line="1193">
                    <scope line="1194"/>
                    <scope line="1197"/>
                </scope>
                <scope line="1201">
                    <scope line="1202"/>
                    <scope line="1206"/>
                </scope>
            </method>
            <javadoc line="1214">
                Assigns to the given &lt;code&gt;CachedRowSet&lt;/code&gt; object&apos;s
                  &lt;code&gt;params&lt;/code&gt;
                  field an array whose length equals the number of columns needed
                  to uniquely identify a row in the rowset. The array is given
                  values by the method &lt;code&gt;buildWhereClause&lt;/code&gt;.
                  &lt;P&gt;
                  If the &lt;code&gt;CachedRowSet&lt;/code&gt; object&apos;s &lt;code&gt;keyCols&lt;/code&gt;
                  field has length &lt;code&gt;0&lt;/code&gt; or is &lt;code&gt;null&lt;/code&gt;, the array
                  is set with the column number of every column in the rowset.
                  Otherwise, the array in the field &lt;code&gt;keyCols&lt;/code&gt; is set with only
                  the column numbers of the columns that are required to form a unique
                  identifier for a row.                
                <param>
                    crs the <code>CachedRowSet</code> object for which this
                      <code>CachedRowSetWriter</code> object is the writer                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="buildKeyDesc" type="void" line="1233">
                <params>
                    <param name="crs" type="CachedRowSet"/>
                </params>
                <declaration name="resultsetmd" type="ResultSetMetaData" line="1236"/>
                <scope line="1237">
                    <declaration name="listKeys" type="ArrayList&lt;Integer&gt;" line="1238"/>
                    <scope line="1240"/>
                </scope>
            </method>
            <javadoc line="1256">
                Constructs an SQL &lt;code&gt;WHERE&lt;/code&gt; clause using the given
                  string as a starting point. The resulting clause will contain
                  a column name and &quot; = ?&quot; for each key column, that is, each column
                  that is needed to form a unique identifier for a row in the rowset.
                  This &lt;code&gt;WHERE&lt;/code&gt; clause can be added to
                  a &lt;code&gt;PreparedStatement&lt;/code&gt; object that updates, inserts, or
                  deletes a row.
                  &lt;P&gt;
                  This method uses the given result set to access values in the
                  &lt;code&gt;CachedRowSet&lt;/code&gt; object that called this writer.  These
                  values are used to build the array of parameters that will serve as
                  replacements for the &quot;?&quot; parameter placeholders in the
                  &lt;code&gt;PreparedStatement&lt;/code&gt; object that is sent to the
                  &lt;code&gt;CachedRowSet&lt;/code&gt; object&apos;s underlying data source.                
                <param>
                    whereClause a <code>String</code> object that is an empty
                      string ("")                    
                </param>
                <param>
                    rs a <code>ResultSet</code> object that can be used
                      to access the <code>CachedRowSet</code> object's data                    
                </param>
                <return>
                    a <code>WHERE</code> clause of the form "<code>WHERE</code>
                      columnName = ? AND columnName = ? AND columnName = ? ..."                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="buildWhereClause" type="String" line="1281">
                <params>
                    <param name="whereClause" type="String"/>
                    <param name="rs" type="ResultSet"/>
                </params>
                <scope line="1284">
                    <scope line="1285"/>
                    <scope line="1290"/>
                    <scope line="1292"/>
                </scope>
            </method>
            <method name="updateResolvedConflictToDB" type="void" line="1299">
                <params>
                    <param name="crs" type="CachedRowSet"/>
                    <param name="con" type="Connection"/>
                </params>
                <comment line="1300">
                    String updateExe = ;                    
                </comment>
                <comment line="1325">
                    changed or updated values will become part of                    
                </comment>
                <comment line="1326">
                    set clause here                    
                </comment>
                <comment line="1339">
                    end if                    
                </comment>
                <comment line="1340">
                    end for                    
                </comment>
                <comment line="1342">
                    keycols will become part of where clause                    
                </comment>
                <comment line="1370">
                    end if ..else                    
                </comment>
                <comment line="1371">
                    end if crs.column...                    
                </comment>
                <comment line="1372">
                    end for                    
                </comment>
                <comment line="1374">
                    Set the key cols for after WHERE =? clause                    
                </comment>
                <declaration name="pStmt" type="PreparedStatement" line="1301"/>
                <declaration name="strWhere" type="String" line="1302"/>
                <declaration name="strExec" type="String" line="1303"/>
                <declaration name="strUpdate" type="String" line="1304"/>
                <declaration name="icolCount" type="int" line="1305"/>
                <declaration name="keyColumns" type="int" line="1306"/>
                <declaration name="param" type="Object" line="1307"/>
                <declaration name="strSet" type="String" line="1308"/>
                <scope line="1312">
                    <scope line="1314"/>
                </scope>
                <declaration name="first" type="boolean" line="1329"/>
                <scope line="1331">
                    <scope line="1332">
                        <scope line="1333"/>
                    </scope>
                </scope>
                <scope line="1346">
                    <scope line="1347"/>
                    <scope line="1352"/>
                    <scope line="1354"/>
                </scope>
                <declaration name="idx" type="int" line="1362"/>
                <scope line="1363">
                    <scope line="1364">
                        <declaration name="obj" type="Object" line="1365"/>
                        <scope line="1366"/>
                        <scope line="1368"/>
                    </scope>
                </scope>
                <scope line="1375">
                    <scope line="1376"/>
                </scope>
                <declaration name="id" type="int" line="1381"/>
            </method>
            <javadoc line="1385">
                                
            </javadoc>
            <method name="commit" type="void" line="1388">
                <scope line="1390"/>
            </method>
            <method name="commit" type="void" line="1395">
                <params>
                    <param name="crs" type="CachedRowSetImpl"/>
                    <param name="updateRowset" type="boolean"/>
                </params>
                <scope line="1397"/>
                <scope line="1402"/>
            </method>
            <javadoc line="1407">
                                
            </javadoc>
            <method name="rollback" type="void" line="1410">
                <scope line="1412"/>
            </method>
            <javadoc line="1417">
                                
            </javadoc>
            <method name="rollback" type="void" line="1420">
                <params>
                    <param name="s" type="Savepoint"/>
                </params>
                <scope line="1422"/>
            </method>
            <method name="readObject" type="void" line="1427">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <comment line="1428">
                    Default state initialization happens here                    
                </comment>
                <comment line="1430">
                    Initialization of  Res Bundle happens here .                    
                </comment>
                <scope line="1431"/>
                <scope line="1433"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="1439"/>
        </class>
    </source>