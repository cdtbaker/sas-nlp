<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.management">
        <import package="java.lang.management.PlatformManagedObject"/>
        <interface name="HotSpotDiagnosticMXBean">
            <implements interface="PlatformManagedObject"/>
            <javadoc line="30">
                Diagnostic management interface for the HotSpot Virtual Machine.
                  The diagnostic MBean is registered to the platform MBeanServer
                  as are other platform MBeans.
                  &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the diagnostic
                  MXBean within an MBeanServer is:
                  &lt;blockquote&gt;
                  &lt;tt&gt;com.sun.management:type=HotSpotDiagnostic&lt;/tt&gt;
                  &lt;/blockquote&gt;
                  .
                  It can be obtained by calling the{@link PlatformManagedObject#getObjectName} method.                
                <see>
                    ManagementFactory#getPlatformMXBeans(Class)                    
                </see>
            </javadoc>
            <method name="dumpHeap" type="void" line="47"/>
            <javadoc line="47">
                Dumps the heap to the &lt;tt&gt;outputFile&lt;/tt&gt; file in the same
                  format as the hprof heap dump.
                  &lt;p&gt;
                  If this method is called remotely from another process,
                  the heap dump output is written to a file named &lt;tt&gt;outputFile&lt;/tt&gt;
                  on the machine where the target VM is running.  If outputFile is
                  a relative path, it is relative to the working directory where
                  the target VM was started.                
                <param>
                    outputFile the system-dependent filename                    
                </param>
                <param>
                    live if &lt;tt&gt;true&lt;/tt&gt; dump only &lt;i&gt;live&lt;/i&gt; objects
                      i.e. objects that are reachable from others                    
                </param>
                <throws>
                    IOException if the &lt;tt&gt;outputFile&lt;/tt&gt;
                      cannot be created, opened, or written to.                    
                </throws>
                <throws>
                    UnsupportedOperationException if this operation is not supported.                    
                </throws>
                <throws>
                    NullPointerException if &lt;tt&gt;outputFile&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;.                    
                </throws>
            </javadoc>
            <method name="getDiagnosticOptions" type="java.util.List<VMOption>" line="67"/>
            <javadoc line="67">
                Returns a list of &lt;tt&gt;VMOption&lt;/tt&gt; objects for all diagnostic options.
                  A diagnostic option is a {@link VMOption#isWriteable writeable}VM option that can be set dynamically mainly for troubleshooting
                  and diagnosis.                
                <return>
                    a list of &lt;tt&gt;VMOption&lt;/tt&gt; objects for all diagnostic options.                    
                </return>
            </javadoc>
            <method name="getVMOption" type="VMOption" line="77"/>
            <javadoc line="77">
                Returns a &lt;tt&gt;VMOption&lt;/tt&gt; object for a VM option of the given
                  name.                
                <return>
                    a &lt;tt&gt;VMOption&lt;/tt&gt; object for a VM option of the given name.                    
                </return>
                <throws>
                    NullPointerException if name is &lt;tt&gt;null&lt;/tt&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException if a VM option of the given name
                      does not exist.                    
                </throws>
            </javadoc>
            <method name="setVMOption" type="void" line="88"/>
            <javadoc line="88">
                Sets a VM option of the given name to the specified value.
                  The new value will be reflected in a new &lt;tt&gt;VMOption&lt;/tt&gt;
                  object returned by the {@link #getVMOption} method or
                  the {@link #getDiagnosticOptions} method.  This method does
                  not change the value of this &lt;tt&gt;VMOption&lt;/tt&gt; object.                
                <param>
                    name Name of a VM option                    
                </param>
                <param>
                    value New value of the VM option to be set                    
                </param>
                <throws>
                    IllegalArgumentException if the VM option of the given name
                      does not exist.                    
                </throws>
                <throws>
                    IllegalArgumentException if the new value is invalid.                    
                </throws>
                <throws>
                    IllegalArgumentException if the VM option is not writeable.                    
                </throws>
                <throws>
                    NullPointerException if name or value is &lt;tt&gt;null&lt;/tt&gt;.                    
                </throws>
                <throws>
                    java.security.SecurityExceptionif a security manager exists and the caller does not have
                      ManagementPermission(&quot;control&quot;).                    
                </throws>
            </javadoc>
        </interface>
    </source>