<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.management">
        <import package="java.util.Map"/>
        <interface name="ThreadMXBean">
            <implements interface="java.lang.management.ThreadMXBean"/>
            <javadoc line="3">
                Platform-specific management interface for the thread system
                  of the Java virtual machine.
                  &lt;p&gt;
                  This platform extension is only available to a thread
                  implementation that supports this extension.                
                <author>
                    Paul Hohensee                    
                </author>
                <since>
                    6u25                    
                </since>
            </javadoc>
            <method name="getThreadCpuTime" type="long[]" line="13"/>
            <javadoc line="13">
                Returns the total CPU time for each thread whose ID is
                  in the input array {@code ids} in nanoseconds.
                  The returned values are of nanoseconds precision but
                  not necessarily nanoseconds accuracy.
                  &lt;p&gt;
                  This method is equivalent to calling the{@link ThreadMXBean#getThreadCpuTime(long)}method for each thread ID in the input array {@code ids} and setting the
                  returned value in the corresponding element of the returned array.                
                <param>
                    ids an array of thread IDs.                    
                </param>
                <return>
                    an array of long values, each of which is the amount of CPU
                      time the thread whose ID is in the corresponding element of the input
                      array of IDs has used,
                      if the thread of a specified ID exists, the thread is alive,
                      and CPU time measurement is enabled;{@code -1} otherwise.                    
                </return>
                <throws>
                    NullPointerException if {@code ids} is {@code null}                    
                </throws>
                <throws>
                    IllegalArgumentException if any element in the input array{@code ids} is {@code &lt;=} {@code 0}.                    
                </throws>
                <throws>
                    java.lang.UnsupportedOperationException if the Java
                      virtual machine implementation does not support CPU time
                      measurement.                    
                </throws>
                <see>
                    ThreadMXBean#getThreadCpuTime(long)                    
                </see>
                <see>
                    #getThreadUserTime                    
                </see>
                <see>
                    ThreadMXBean#isThreadCpuTimeSupported                    
                </see>
                <see>
                    ThreadMXBean#isThreadCpuTimeEnabled                    
                </see>
                <see>
                    ThreadMXBean#setThreadCpuTimeEnabled                    
                </see>
            </javadoc>
            <method name="getThreadUserTime" type="long[]" line="39"/>
            <javadoc line="39">
                Returns the CPU time that each thread whose ID is in the input array{@code ids} has executed in user mode in nanoseconds.
                  The returned values are of nanoseconds precision but
                  not necessarily nanoseconds accuracy.
                  &lt;p&gt;
                  This method is equivalent to calling the{@link ThreadMXBean#getThreadUserTime(long)}method for each thread ID in the input array {@code ids} and setting the
                  returned value in the corresponding element of the returned array.                
                <param>
                    ids an array of thread IDs.                    
                </param>
                <return>
                    an array of long values, each of which is the amount of user
                      mode CPU time the thread whose ID is in the corresponding element of
                      the input array of IDs has used,
                      if the thread of a specified ID exists, the thread is alive,
                      and CPU time measurement is enabled;{@code -1} otherwise.                    
                </return>
                <throws>
                    NullPointerException if {@code ids} is {@code null}                    
                </throws>
                <throws>
                    IllegalArgumentException if any element in the input array{@code ids} is {@code &lt;=} {@code 0}.                    
                </throws>
                <throws>
                    java.lang.UnsupportedOperationException if the Java
                      virtual machine implementation does not support CPU time
                      measurement.                    
                </throws>
                <see>
                    ThreadMXBean#getThreadUserTime(long)                    
                </see>
                <see>
                    #getThreadCpuTime                    
                </see>
                <see>
                    ThreadMXBean#isThreadCpuTimeSupported                    
                </see>
                <see>
                    ThreadMXBean#isThreadCpuTimeEnabled                    
                </see>
                <see>
                    ThreadMXBean#setThreadCpuTimeEnabled                    
                </see>
            </javadoc>
            <method name="getThreadAllocatedBytes" type="long" line="64"/>
            <javadoc line="64">
                Returns an approximation of the total amount of memory, in bytes,
                  allocated in heap memory for the thread of the specified ID.
                  The returned value is an approximation because some Java virtual machine
                  implementations may use object allocation mechanisms that result in a
                  delay between the time an object is allocated and the time its size is
                  recorded.
                  &lt;p&gt;
                  If the thread of the specified ID is not alive or does not exist,
                  this method returns {@code -1}. If thread memory allocation measurement
                  is disabled, this method returns {@code -1}.
                  A thread is alive if it has been started and has not yet died.
                  &lt;p&gt;
                  If thread memory allocation measurement is enabled after the thread has
                  started, the Java virtual machine implementation may choose any time up
                  to and including the time that the capability is enabled as the point
                  where thread memory allocation measurement starts.                
                <param>
                    id the thread ID of a thread                    
                </param>
                <return>
                    an approximation of the total memory allocated, in bytes, in
                      heap memory for a thread of the specified ID
                      if the thread of the specified ID exists, the thread is alive,
                      and thread memory allocation measurement is enabled;{@code -1} otherwise.                    
                </return>
                <throws>
                    IllegalArgumentException if {@code id} {@code &lt;=} {@code 0}.                    
                </throws>
                <throws>
                    java.lang.UnsupportedOperationException if the Java virtual
                      machine implementation does not support thread memory allocation
                      measurement.                    
                </throws>
                <see>
                    #isThreadAllocatedMemorySupported                    
                </see>
                <see>
                    #isThreadAllocatedMemoryEnabled                    
                </see>
                <see>
                    #setThreadAllocatedMemoryEnabled                    
                </see>
            </javadoc>
            <method name="getThreadAllocatedBytes" type="long[]" line="95"/>
            <javadoc line="95">
                Returns an approximation of the total amount of memory, in bytes,
                  allocated in heap memory for each thread whose ID is in the input
                  array {@code ids}.
                  The returned values are approximations because some Java virtual machine
                  implementations may use object allocation mechanisms that result in a
                  delay between the time an object is allocated and the time its size is
                  recorded.
                  &lt;p&gt;
                  This method is equivalent to calling the{@link #getThreadAllocatedBytes(long)}method for each thread ID in the input array {@code ids} and setting the
                  returned value in the corresponding element of the returned array.                
                <param>
                    ids an array of thread IDs.                    
                </param>
                <return>
                    an array of long values, each of which is an approximation of
                      the total memory allocated, in bytes, in heap memory for the thread
                      whose ID is in the corresponding element of the input array of IDs.                    
                </return>
                <throws>
                    NullPointerException if {@code ids} is {@code null}                    
                </throws>
                <throws>
                    IllegalArgumentException if any element in the input array{@code ids} is {@code &lt;=} {@code 0}.                    
                </throws>
                <throws>
                    java.lang.UnsupportedOperationException if the Java virtual
                      machine implementation does not support thread memory allocation
                      measurement.                    
                </throws>
                <see>
                    #getThreadAllocatedBytes(long)                    
                </see>
                <see>
                    #isThreadAllocatedMemorySupported                    
                </see>
                <see>
                    #isThreadAllocatedMemoryEnabled                    
                </see>
                <see>
                    #setThreadAllocatedMemoryEnabled                    
                </see>
            </javadoc>
            <method name="isThreadAllocatedMemorySupported" type="boolean" line="121"/>
            <javadoc line="121">
                Tests if the Java virtual machine implementation supports thread memory
                  allocation measurement.                
                <return>
                    {@code true}if the Java virtual machine implementation supports thread memory
                      allocation measurement;{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isThreadAllocatedMemoryEnabled" type="boolean" line="128"/>
            <javadoc line="128">
                Tests if thread memory allocation measurement is enabled.                
                <return>
                    {@code true} if thread memory allocation measurement is enabled;{@code false} otherwise.                    
                </return>
                <throws>
                    java.lang.UnsupportedOperationException if the Java virtual
                      machine does not support thread memory allocation measurement.                    
                </throws>
                <see>
                    #isThreadAllocatedMemorySupported                    
                </see>
            </javadoc>
            <method name="setThreadAllocatedMemoryEnabled" type="void" line="136"/>
            <javadoc line="136">
                Enables or disables thread memory allocation measurement.  The default
                  is platform dependent.                
                <param>
                    enable {@code true} to enable;{@code false} to disable.                    
                </param>
                <throws>
                    java.lang.UnsupportedOperationException if the Java virtual
                      machine does not support thread memory allocation measurement.                    
                </throws>
                <throws>
                    java.lang.SecurityException if a security manager
                      exists and the caller does not have
                      ManagementPermission(&quot;control&quot;).                    
                </throws>
                <see>
                    #isThreadAllocatedMemorySupported                    
                </see>
            </javadoc>
        </interface>
    </source>