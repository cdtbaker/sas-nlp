<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.rmi.rmid">
        <import package="java.security"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <class name="ExecPermission" line="32">
            <extends class="Permission"/>
            <javadoc line="32">
                The ExecPermission class represents permission for rmid to execute
                  a specific command to launch an activation group.  An ExecPermission
                  consists of a pathname of a command to launch an activation group.
                  &lt;P&gt;
                  Pathname is the pathname of the file or directory to grant rmid
                  execute permission.  A pathname that ends in &quot;/&quot; (where &quot;/&quot; is
                  the file separator character, &lt;code&gt;File.separatorChar&lt;/code&gt;) indicates
                  all the files and directories contained in that directory. A pathname
                  that ends with &quot;/-&quot; indicates (recursively) all files
                  and subdirectories contained in that directory. A pathname consisting of
                  the special token &quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot; matches &lt;bold&gt;any&lt;/bold&gt; file.
                  &lt;P&gt;
                  Note: A pathname consisting of a single &quot;&quot; indicates all the files
                  in the current directory, while a pathname consisting of a single &quot;-&quot;
                  indicates all the files in the current directory and
                  (recursively) all files and subdirectories contained in the current
                  directory.
                  &lt;P&gt;                
                <author>
                    Ann Wollrath                    
                </author>
                <serial>
                    exclude                    
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="59"/>
            <javadoc line="59">
                UID for serialization                
            </javadoc>
            <declaration name="fp" type="FilePermission" line="64"/>
            <javadoc line="66">
                Creates a new ExecPermission object with the specified path.
                  &lt;i&gt;path&lt;/i&gt; is the pathname of a file or directory.
                  &lt;p&gt;A pathname that ends in &quot;/&quot; (where &quot;/&quot; is
                  the file separator character, &lt;code&gt;File.separatorChar&lt;/code&gt;) indicates
                  a directory and all the files contained in that directory. A pathname
                  that ends with &quot;/-&quot; indicates a directory and (recursively) all files
                  and subdirectories contained in that directory. The special pathname
                  &quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot; matches all files.
                  &lt;p&gt;A pathname consisting of a single &quot;&quot; indicates all the files
                  in the current directory, while a pathname consisting of a single &quot;-&quot;
                  indicates all the files in the current directory and
                  (recursively) all files and subdirectories contained in the current
                  directory.                
                <param>
                    path the pathname of the file/directory.                    
                </param>
            </javadoc>
            <method name="ExecPermission" type="constructor" line="85">
                <params>
                    <param name="path" type="String"/>
                </params>
            </method>
            <javadoc line="90">
                Creates a new ExecPermission object with the specified path.
                  &lt;i&gt;path&lt;/i&gt; is the pathname of a file or directory.
                  &lt;p&gt;A pathname that ends in &quot;/&quot; (where &quot;/&quot; is
                  the file separator character, &lt;code&gt;File.separatorChar&lt;/code&gt;) indicates
                  a directory and all the files contained in that directory. A pathname
                  that ends with &quot;/-&quot; indicates a directory and (recursively) all files
                  and subdirectories contained in that directory. The special pathname
                  &quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot; matches all files.
                  &lt;p&gt;A pathname consisting of a single &quot;&quot; indicates all the files
                  in the current directory, while a pathname consisting of a single &quot;-&quot;
                  indicates all the files in the current directory and
                  (recursively) all files and subdirectories contained in the current
                  directory.                
                <param>
                    path the pathname of the file/directory.                    
                </param>
                <param>
                    actions the action string (unused)                    
                </param>
            </javadoc>
            <method name="ExecPermission" type="constructor" line="110">
                <params>
                    <param name="path" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
            <javadoc line="114">
                Checks if this ExecPermission object &quot;implies&quot; the specified permission.
                  &lt;P&gt;
                  More specifically, this method returns true if:&lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt; is an instanceof ExecPermission,&lt;p&gt; and
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s pathname is implied by this object&apos;s
                  pathname. For example, &quot;/tmp/&quot; implies &quot;/tmp/foo&quot;, since
                  &quot;/tmp/&quot; encompasses the &quot;/tmp&quot; directory and all files in that
                  directory, including the one named &quot;foo&quot;.
                  &lt;/ul&gt;                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    true if the specified permission is implied by this object,
                      false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="130">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <declaration name="that" type="ExecPermission" line="134"/>
            </method>
            <javadoc line="139">
                Checks two ExecPermission objects for equality.
                  Checks that &lt;i&gt;obj&lt;/i&gt;&apos;s class is the same as this object&apos;s class
                  and has the same name as this object.
                  &lt;P&gt;                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    true if &lt;i&gt;obj&lt;/i&gt; is an ExecPermission, and has the same
                      pathname as this ExecPermission object, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="148">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="ExecPermission" line="155"/>
            </method>
            <javadoc line="160">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="165"/>
            <javadoc line="169">
                Returns the canonical string representation of the actions.                
                <return>
                    the canonical string representation of the actions.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="174"/>
            <javadoc line="178">
                Returns a new PermissionCollection object for storing
                  ExecPermission objects.
                  &lt;p&gt;
                  A ExecPermissionCollection stores a collection of
                  ExecPermission permissions.
                  &lt;p&gt;ExecPermission objects must be stored in a manner that allows
                  them to be inserted in any order, but that also enables the
                  PermissionCollection &lt;code&gt;implies&lt;/code&gt; method
                  to be implemented in an efficient (and consistent) manner.                
                <return>
                    a new PermissionCollection object suitable for
                      storing ExecPermissions.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="193"/>
            <javadoc line="197">
                readObject is called to restore the state of the ExecPermission
                  from a stream.                
            </javadoc>
            <method name="readObject" type="void" line="203">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="206">
                    init is called to initialize the rest of the values.                    
                </comment>
            </method>
            <javadoc line="209">
                Initialize a ExecPermission object. Common to all constructors.
                  Also called during de-serialization.                
            </javadoc>
            <method name="init" type="void" line="213">
                <params>
                    <param name="path" type="String"/>
                </params>
            </method>
            <class name="ExecPermissionCollection" line="217">
                <extends class="PermissionCollection"/>
                <implements interface="java.io.Serializable"/>
                <javadoc line="217">
                    A ExecPermissionCollection stores a collection
                      of ExecPermission permissions. ExecPermission objects
                      must be stored in a manner that allows them to be inserted in any
                      order, but enable the implies function to evaluate the implies
                      method in an efficient (and consistent) manner.                    
                    <serial>
                        include                        
                    </serial>
                </javadoc>
                <declaration name="permissions" type="Vector" line="230"/>
                <declaration name="serialVersionUID" type="long" line="232"/>
                <javadoc line="234">
                    Create an empty ExecPermissionCollection.                    
                </javadoc>
                <method name="ExecPermissionCollection" type="constructor" line="237"/>
                <javadoc line="241">
                    Adds a permission to the collection.                    
                    <param>
                        permission the Permission object to add.                        
                    </param>
                    <exception>
                        IllegalArgumentException - if the permission is not a
                          ExecPermission                        
                    </exception>
                    <exception>
                        SecurityException - if this ExecPermissionCollection
                          object has been marked readonly                        
                    </exception>
                </javadoc>
                <method name="add" type="void" line="253">
                    <params>
                        <param name="permission" type="Permission"/>
                    </params>
                </method>
                <javadoc line="263">
                    Check and see if this set of permissions implies the permissions
                      expressed in &quot;permission&quot;.                    
                    <param>
                        p the Permission object to compare                        
                    </param>
                    <return>
                        true if &quot;permission&quot; is a proper subset of a permission in
                          the set, false if not.                        
                    </return>
                </javadoc>
                <method name="implies" type="boolean" line="273">
                    <params>
                        <param name="permission" type="Permission"/>
                    </params>
                    <declaration name="e" type="Enumeration" line="277"/>
                    <scope line="279">
                        <declaration name="x" type="ExecPermission" line="280"/>
                        <scope line="281"/>
                    </scope>
                </method>
                <javadoc line="288">
                    Returns an enumeration of all the ExecPermission objects in the
                      container.                    
                    <return>
                        an enumeration of all the ExecPermission objects.                        
                    </return>
                </javadoc>
                <method name="elements" type="Enumeration" line="295"/>
            </class>
        </class>
    </source>