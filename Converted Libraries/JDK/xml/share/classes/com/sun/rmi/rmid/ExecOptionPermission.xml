<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.rmi.rmid">
        <import package="java.security"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <class name="ExecOptionPermission" line="5">
            <extends class="Permission"/>
            <javadoc line="5">
                The ExecOptionPermission class represents permission for rmid to use
                  a specific command-line option when launching an activation group.
                  &lt;P&gt;                
                <author>
                    Ann Wollrath                    
                </author>
                <serial>
                    exclude                    
                </serial>
            </javadoc>
            <declaration name="wildcard" type="boolean" line="13"/>
            <javadoc line="13">
                does this permission have a wildcard at the end?                
            </javadoc>
            <declaration name="name" type="String" line="17"/>
            <javadoc line="17">
                the name without the wildcard on the end                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="21"/>
            <javadoc line="21">
                UID for serialization                
            </javadoc>
            <method name="ExecOptionPermission" type="constructor" line="25">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="ExecOptionPermission" type="constructor" line="29">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
            <javadoc line="32">
                Checks if the specified permission is &quot;implied&quot; by
                  this object.
                  &lt;P&gt;
                  More specifically, this method returns true if:&lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s class is the same as this object&apos;s class, and&lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s name equals or (in the case of wildcards)
                  is implied by this object&apos;s
                  name. For example, &quot;a.b.&quot; implies &quot;a.b.c&quot;, and
                  &quot;a.b=&quot; implies &quot;a.b=c&quot;
                  &lt;/ul&gt;                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    true if the passed permission is equal to or
                      implied by this permission, false otherwise.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="48">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <declaration name="that" type="ExecOptionPermission" line="50"/>
                <scope line="51">
                    <scope line="52"/>
                    <scope line="55"/>
                </scope>
                <scope line="59">
                    <scope line="60"/>
                    <scope line="63"/>
                </scope>
            </method>
            <javadoc line="68">
                Checks two ExecOptionPermission objects for equality.
                  Checks that &lt;i&gt;obj&lt;/i&gt;&apos;s class is the same as this object&apos;s class
                  and has the same name as this object.
                  &lt;P&gt;                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    true if <i>obj</i> is an ExecOptionPermission, and has the same
                      name as this ExecOptionPermission object, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="77">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="ExecOptionPermission" line="80"/>
            </method>
            <javadoc line="83">
                Returns the hash code value for this object.
                  The hash code used is the hash code of the name, that is,
                  &lt;code&gt;getName().hashCode()&lt;/code&gt;, where &lt;code&gt;getName&lt;/code&gt; is
                  from the Permission superclass.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="90"/>
            <javadoc line="93">
                Returns the canonical string representation of the actions.                
                <return>
                    the canonical string representation of the actions.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="97"/>
            <javadoc line="100">
                Returns a new PermissionCollection object for storing
                  ExecOptionPermission objects.
                  &lt;p&gt;
                  A ExecOptionPermissionCollection stores a collection of
                  ExecOptionPermission permissions.
                  &lt;p&gt;ExecOptionPermission objects must be stored in a manner that allows
                  them to be inserted in any order, but that also enables the
                  PermissionCollection &lt;code&gt;implies&lt;/code&gt; method
                  to be implemented in an efficient (and consistent) manner.                
                <return>
                    a new PermissionCollection object suitable for
                      storing ExecOptionPermissions.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="113"/>
            <javadoc line="116">
                readObject is called to restore the state of the ExecOptionPermission
                  from a stream.                
            </javadoc>
            <method name="readObject" type="void" line="120">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="124">
                Initialize a ExecOptionPermission object. Common to all constructors.
                  Also called during de-serialization.                
            </javadoc>
            <method name="init" type="void" line="128">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="130"/>
                <scope line="133">
                    <scope line="135"/>
                    <scope line="138"/>
                </scope>
                <scope line="142"/>
            </method>
            <class name="ExecOptionPermissionCollection" line="146">
                <extends class="PermissionCollection"/>
                <implements interface="java.io.Serializable"/>
                <javadoc line="146">
                    A ExecOptionPermissionCollection stores a collection
                      of ExecOptionPermission permissions. ExecOptionPermission objects
                      must be stored in a manner that allows them to be inserted in any
                      order, but enable the implies function to evaluate the implies
                      method in an efficient (and consistent) manner.
                      A ExecOptionPermissionCollection handles comparing a permission like
                      &quot;a.b.c.d.e&quot;  with a Permission such as &quot;a.b.&quot;, or &quot;&quot;.                    
                    <serial>
                        include                        
                    </serial>
                </javadoc>
                <declaration name="permissions" type="Hashtable" line="157"/>
                <declaration name="all_allowed" type="boolean" line="158"/>
                <declaration name="serialVersionUID" type="long" line="159"/>
                <javadoc line="160">
                    Create an empty ExecOptionPermissionCollection.                    
                </javadoc>
                <method name="ExecOptionPermissionCollection" type="constructor" line="163"/>
                <javadoc line="167">
                    Adds a permission to the collection. The key for the hash is
                      permission.name.                    
                    <param>
                        permission the Permission object to add.                        
                    </param>
                    <exception>
                        IllegalArgumentException - if the permission is not a
                          ExecOptionPermission                        
                    </exception>
                    <exception>
                        SecurityException - if this ExecOptionPermissionCollection
                          object has been marked readonly                        
                    </exception>
                </javadoc>
                <method name="add" type="void" line="176">
                    <params>
                        <param name="permission" type="Permission"/>
                    </params>
                    <declaration name="p" type="ExecOptionPermission" line="179"/>
                    <scope line="181"/>
                </method>
                <javadoc line="185">
                    Check and see if this set of permissions implies the permissions
                      expressed in &quot;permission&quot;.                    
                    <param>
                        p the Permission object to compare                        
                    </param>
                    <return>
                        true if "permission" is a proper subset of a permission in
                          the set, false if not.                        
                    </return>
                </javadoc>
                <method name="implies" type="boolean" line="192">
                    <params>
                        <param name="permission" type="Permission"/>
                    </params>
                    <declaration name="p" type="ExecOptionPermission" line="194"/>
                    <declaration name="pname" type="String" line="196"/>
                    <declaration name="x" type="Permission" line="197"/>
                    <declaration name="last" type="int" line="199"/>
                    <scope line="201">
                        <scope line="204"/>
                    </scope>
                    <scope line="211">
                        <scope line="214"/>
                    </scope>
                </method>
                <javadoc line="221">
                    Returns an enumeration of all the ExecOptionPermission objects in the
                      container.                    
                    <return>
                        an enumeration of all the ExecOptionPermission objects.                        
                    </return>
                </javadoc>
                <method name="elements" type="Enumeration" line="226"/>
            </class>
        </class>
    </source>