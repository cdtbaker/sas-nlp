<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.rmi.rmid">
        <import package="java.security"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <class name="ExecOptionPermission" line="32">
            <extends class="Permission"/>
            <javadoc line="32">
                The ExecOptionPermission class represents permission for rmid to use
                  a specific command-line option when launching an activation group.
                  &lt;P&gt;                
                <author>
                    Ann Wollrath                    
                </author>
                <serial>
                    exclude                    
                </serial>
            </javadoc>
            <declaration name="wildcard" type="boolean" line="43"/>
            <javadoc line="43">
                does this permission have a wildcard at the end?                
            </javadoc>
            <declaration name="name" type="String" line="48"/>
            <javadoc line="48">
                the name without the wildcard on the end                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="53"/>
            <javadoc line="53">
                UID for serialization                
            </javadoc>
            <method name="ExecOptionPermission" type="constructor" line="58">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="ExecOptionPermission" type="constructor" line="63">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
            <javadoc line="67">
                Checks if the specified permission is &quot;implied&quot; by
                  this object.
                  &lt;P&gt;
                  More specifically, this method returns true if:&lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s class is the same as this object&apos;s class, and&lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s name equals or (in the case of wildcards)
                  is implied by this object&apos;s
                  name. For example, &quot;a.b.&quot; implies &quot;a.b.c&quot;, and
                  &quot;a.b=&quot; implies &quot;a.b=c&quot;
                  &lt;/ul&gt;                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    true if the passed permission is equal to or
                      implied by this permission, false otherwise.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="85">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <comment line="93">
                    one wildcard can imply another                    
                </comment>
                <comment line="96">
                    make sure p.name is longer so a.b.* doesn&apos;t imply a.b                    
                </comment>
                <comment line="102">
                    a non-wildcard can&apos;t imply a wildcard                    
                </comment>
                <declaration name="that" type="ExecOptionPermission" line="89"/>
                <scope line="91">
                    <scope line="92"/>
                    <scope line="95"/>
                </scope>
                <scope line="100">
                    <scope line="101"/>
                    <scope line="104"/>
                </scope>
            </method>
            <javadoc line="110">
                Checks two ExecOptionPermission objects for equality.
                  Checks that &lt;i&gt;obj&lt;/i&gt;&apos;s class is the same as this object&apos;s class
                  and has the same name as this object.
                  &lt;P&gt;                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    true if <i>obj</i> is an ExecOptionPermission, and has the same
                      name as this ExecOptionPermission object, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="119">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="ExecOptionPermission" line="126"/>
            </method>
            <javadoc line="132">
                Returns the hash code value for this object.
                  The hash code used is the hash code of the name, that is,
                  &lt;code&gt;getName().hashCode()&lt;/code&gt;, where &lt;code&gt;getName&lt;/code&gt; is
                  from the Permission superclass.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="140"/>
            <javadoc line="144">
                Returns the canonical string representation of the actions.                
                <return>
                    the canonical string representation of the actions.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="149"/>
            <javadoc line="153">
                Returns a new PermissionCollection object for storing
                  ExecOptionPermission objects.
                  &lt;p&gt;
                  A ExecOptionPermissionCollection stores a collection of
                  ExecOptionPermission permissions.
                  &lt;p&gt;ExecOptionPermission objects must be stored in a manner that allows
                  them to be inserted in any order, but that also enables the
                  PermissionCollection &lt;code&gt;implies&lt;/code&gt; method
                  to be implemented in an efficient (and consistent) manner.                
                <return>
                    a new PermissionCollection object suitable for
                      storing ExecOptionPermissions.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="168"/>
            <javadoc line="172">
                readObject is called to restore the state of the ExecOptionPermission
                  from a stream.                
            </javadoc>
            <method name="readObject" type="void" line="178">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="180">
                    init is called to initialize the rest of the values.                    
                </comment>
            </method>
            <javadoc line="184">
                Initialize a ExecOptionPermission object. Common to all constructors.
                  Also called during de-serialization.                
            </javadoc>
            <method name="init" type="void" line="189">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="193"/>
                <scope line="197">
                    <scope line="199"/>
                    <scope line="201"/>
                </scope>
                <scope line="204"/>
            </method>
            <class name="ExecOptionPermissionCollection" line="209">
                <extends class="PermissionCollection"/>
                <comment line="228">
                    true if &quot;*&quot; is in the collection                    
                </comment>
                <implements interface="java.io.Serializable"/>
                <javadoc line="209">
                    A ExecOptionPermissionCollection stores a collection
                      of ExecOptionPermission permissions. ExecOptionPermission objects
                      must be stored in a manner that allows them to be inserted in any
                      order, but enable the implies function to evaluate the implies
                      method in an efficient (and consistent) manner.
                      A ExecOptionPermissionCollection handles comparing a permission like
                      &quot;a.b.c.d.e&quot;  with a Permission such as &quot;a.b.&quot;, or &quot;&quot;.                    
                    <serial>
                        include                        
                    </serial>
                </javadoc>
                <declaration name="permissions" type="Hashtable" line="226"/>
                <declaration name="all_allowed" type="boolean" line="227"/>
                <declaration name="serialVersionUID" type="long" line="228"/>
                <javadoc line="230">
                    Create an empty ExecOptionPermissionCollection.                    
                </javadoc>
                <method name="ExecOptionPermissionCollection" type="constructor" line="233"/>
                <javadoc line="238">
                    Adds a permission to the collection. The key for the hash is
                      permission.name.                    
                    <param>
                        permission the Permission object to add.                        
                    </param>
                    <exception>
                        IllegalArgumentException - if the permission is not a
                          ExecOptionPermission                        
                    </exception>
                    <exception>
                        SecurityException - if this ExecOptionPermissionCollection
                          object has been marked readonly                        
                    </exception>
                </javadoc>
                <method name="add" type="void" line="252">
                    <params>
                        <param name="permission" type="Permission"/>
                    </params>
                    <declaration name="p" type="ExecOptionPermission" line="259"/>
                    <scope line="262"/>
                </method>
                <javadoc line="268">
                    Check and see if this set of permissions implies the permissions
                      expressed in &quot;permission&quot;.                    
                    <param>
                        p the Permission object to compare                        
                    </param>
                    <return>
                        true if "permission" is a proper subset of a permission in
                          the set, false if not.                        
                    </return>
                </javadoc>
                <method name="implies" type="boolean" line="278">
                    <params>
                        <param name="permission" type="Permission"/>
                    </params>
                    <comment line="284">
                        short circuit if the &quot;*&quot; Permission was added                        
                    </comment>
                    <comment line="288">
                        strategy:                        
                    </comment>
                    <comment line="289">
                        Check for full match first. Then work our way up the                        
                    </comment>
                    <comment line="290">
                        name looking for matches on a.b.*                        
                    </comment>
                    <comment line="297">
                        we have a direct hit!                        
                    </comment>
                    <comment line="301">
                        work our way up the tree...                        
                    </comment>
                    <comment line="317">
                        check for &quot;=*&quot; wildcard match                        
                    </comment>
                    <comment line="332">
                        we don&apos;t have to check for &quot;*&quot; as it was already checked                        
                    </comment>
                    <comment line="333">
                        at the top (all_allowed), so we just return false                        
                    </comment>
                    <declaration name="p" type="ExecOptionPermission" line="282"/>
                    <declaration name="pname" type="String" line="292"/>
                    <declaration name="x" type="Permission" line="294"/>
                    <declaration name="last" type="int" line="302"/>
                    <scope line="306">
                        <scope line="311"/>
                    </scope>
                    <scope line="321">
                        <scope line="326"/>
                    </scope>
                </method>
                <javadoc line="337">
                    Returns an enumeration of all the ExecOptionPermission objects in the
                      container.                    
                    <return>
                        an enumeration of all the ExecOptionPermission objects.                        
                    </return>
                </javadoc>
                <method name="elements" type="Enumeration" line="345"/>
            </class>
        </class>
    </source>