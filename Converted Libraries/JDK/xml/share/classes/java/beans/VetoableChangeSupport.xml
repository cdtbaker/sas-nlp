<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Map.Entry"/>
        <class name="VetoableChangeSupport" line="9">
            <implements interface="Serializable"/>
            <javadoc line="9">
                This is a utility class that can be used by beans that support constrained
                  properties.  It manages a list of listeners and dispatches{@link PropertyChangeEvent}s to them.  You can use an instance of this class
                  as a member field of your bean and delegate these types of work to it.
                  The {@link VetoableChangeListener} can be registered for all properties
                  or for a property specified by name.
                  &lt;p&gt;
                  Here is an example of {@code VetoableChangeSupport} usage that follows
                  the rules and recommendations laid out in the JavaBeans&amp;trade; specification:
                  &lt;pre&gt;
                  public class MyBean {
                  private final VetoableChangeSupport vcs = new VetoableChangeSupport(this);
                  public void addVetoableChangeListener(VetoableChangeListener listener) {
                  this.vcs.addVetoableChangeListener(listener);
                  }
                  public void removeVetoableChangeListener(VetoableChangeListener listener) {
                  this.vcs.removeVetoableChangeListener(listener);
                  }
                  private String value;
                  public String getValue() {
                  return this.value;
                  }
                  public void setValue(String newValue) throws PropertyVetoException {
                  String oldValue = this.value;
                  this.vcs.fireVetoableChange(&quot;value&quot;, oldValue, newValue);
                  this.value = newValue;
                  }
                  [...]
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  A {@code VetoableChangeSupport} instance is thread-safe.
                  &lt;p&gt;
                  This class is serializable.  When it is serialized it will save
                  (and restore) any listeners that are themselves serializable.  Any
                  non-serializable listeners will be skipped during serialization.                
                <see>
                    PropertyChangeSupport                    
                </see>
            </javadoc>
            <declaration name="map" type="VetoableChangeListenerMap" line="48"/>
            <javadoc line="49">
                Constructs a &lt;code&gt;VetoableChangeSupport&lt;/code&gt; object.                
                <param>
                    sourceBean  The bean to be given as the source for any events.                    
                </param>
            </javadoc>
            <method name="VetoableChangeSupport" type="constructor" line="53">
                <params>
                    <param name="sourceBean" type="Object"/>
                </params>
                <scope line="54"/>
            </method>
            <javadoc line="59">
                Add a VetoableChangeListener to the listener list.
                  The listener is registered for all properties.
                  The same listener object may be added more than once, and will be called
                  as many times as it is added.
                  If &lt;code&gt;listener&lt;/code&gt; is null, no exception is thrown and no action
                  is taken.                
                <param>
                    listener  The VetoableChangeListener to be added                    
                </param>
            </javadoc>
            <method name="addVetoableChangeListener" type="void" line="68">
                <params>
                    <param name="listener" type="VetoableChangeListener"/>
                </params>
                <scope line="69"/>
                <scope line="72">
                    <declaration name="proxy" type="VetoableChangeListenerProxy" line="73"/>
                </scope>
                <scope line="76"/>
            </method>
            <javadoc line="80">
                Remove a VetoableChangeListener from the listener list.
                  This removes a VetoableChangeListener that was registered
                  for all properties.
                  If &lt;code&gt;listener&lt;/code&gt; was added more than once to the same event
                  source, it will be notified one less time after being removed.
                  If &lt;code&gt;listener&lt;/code&gt; is null, or was never added, no exception is
                  thrown and no action is taken.                
                <param>
                    listener  The VetoableChangeListener to be removed                    
                </param>
            </javadoc>
            <method name="removeVetoableChangeListener" type="void" line="90">
                <params>
                    <param name="listener" type="VetoableChangeListener"/>
                </params>
                <scope line="91"/>
                <scope line="94">
                    <declaration name="proxy" type="VetoableChangeListenerProxy" line="95"/>
                </scope>
                <scope line="98"/>
            </method>
            <javadoc line="102">
                Returns an array of all the listeners that were added to the
                  VetoableChangeSupport object with addVetoableChangeListener().
                  &lt;p&gt;
                  If some listeners have been added with a named property, then
                  the returned array will be a mixture of VetoableChangeListeners
                  and &lt;code&gt;VetoableChangeListenerProxy&lt;/code&gt;s. If the calling
                  method is interested in distinguishing the listeners then it must
                  test each element to see if it&apos;s a
                  &lt;code&gt;VetoableChangeListenerProxy&lt;/code&gt;, perform the cast, and examine
                  the parameter.
                  &lt;pre&gt;
                  VetoableChangeListener[] listeners = bean.getVetoableChangeListeners();
                  for (int i = 0; i &lt; listeners.length; i++) {
                  if (listeners[i] instanceof VetoableChangeListenerProxy) {
                  VetoableChangeListenerProxy proxy =
                  (VetoableChangeListenerProxy)listeners[i];
                  if (proxy.getPropertyName().equals(&quot;foo&quot;)) {
                  // proxy is a VetoableChangeListener which was associated
                  // with the property named &quot;foo&quot;
                  }
                  }
                  }
                  &lt;/pre&gt;                
                <see>
                    VetoableChangeListenerProxy                    
                </see>
                <return>
                    all of the <code>VetoableChangeListeners</code> added or an
                      empty array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getVetoableChangeListeners" type="VetoableChangeListener[]" line="131"/>
            <javadoc line="134">
                Add a VetoableChangeListener for a specific property.  The listener
                  will be invoked only when a call on fireVetoableChange names that
                  specific property.
                  The same listener object may be added more than once.  For each
                  property,  the listener will be invoked the number of times it was added
                  for that property.
                  If &lt;code&gt;propertyName&lt;/code&gt; or &lt;code&gt;listener&lt;/code&gt; is null, no
                  exception is thrown and no action is taken.                
                <param>
                    propertyName  The name of the property to listen on.                    
                </param>
                <param>
                    listener  The VetoableChangeListener to be added                    
                </param>
            </javadoc>
            <method name="addVetoableChangeListener" type="void" line="146">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="listener" type="VetoableChangeListener"/>
                </params>
                <scope line="147"/>
                <scope line="151"/>
            </method>
            <javadoc line="155">
                Remove a VetoableChangeListener for a specific property.
                  If &lt;code&gt;listener&lt;/code&gt; was added more than once to the same event
                  source for the specified property, it will be notified one less time
                  after being removed.
                  If &lt;code&gt;propertyName&lt;/code&gt; is null, no exception is thrown and no
                  action is taken.
                  If &lt;code&gt;listener&lt;/code&gt; is null, or was never added for the specified
                  property, no exception is thrown and no action is taken.                
                <param>
                    propertyName  The name of the property that was listened on.                    
                </param>
                <param>
                    listener  The VetoableChangeListener to be removed                    
                </param>
            </javadoc>
            <method name="removeVetoableChangeListener" type="void" line="167">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="listener" type="VetoableChangeListener"/>
                </params>
                <scope line="168"/>
                <scope line="172"/>
            </method>
            <javadoc line="176">
                Returns an array of all the listeners which have been associated
                  with the named property.                
                <param>
                    propertyName  The name of the property being listened to                    
                </param>
                <return>
                    all the <code>VetoableChangeListeners</code> associated with
                      the named property.  If no such listeners have been added,
                      or if <code>propertyName</code> is null, an empty array is
                      returned.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getVetoableChangeListeners" type="VetoableChangeListener[]" line="186">
                <params>
                    <param name="propertyName" type="String"/>
                </params>
            </method>
            <javadoc line="189">
                Reports a constrained property update to listeners
                  that have been registered to track updates of
                  all properties or a property with the specified name.
                  &lt;p&gt;
                  Any listener can throw a {@code PropertyVetoException} to veto the update.
                  If one of the listeners vetoes the update, this method passes
                  a new &quot;undo&quot; {@code PropertyChangeEvent} that reverts to the old value
                  to all listeners that already confirmed this update
                  and throws the {@code PropertyVetoException} again.
                  &lt;p&gt;
                  No event is fired if old and new values are equal and non-null.
                  &lt;p&gt;
                  This is merely a convenience wrapper around the more general{@link #fireVetoableChange(PropertyChangeEvent)} method.                
                <param>
                    propertyName  the programmatic name of the property that is about to change                    
                </param>
                <param>
                    oldValue      the old value of the property                    
                </param>
                <param>
                    newValue      the new value of the property                    
                </param>
                <throws>
                    PropertyVetoException if one of listeners vetoes the property update                    
                </throws>
            </javadoc>
            <method name="fireVetoableChange" type="void" line="208">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
                <scope line="209"/>
            </method>
            <javadoc line="213">
                Reports an integer constrained property update to listeners
                  that have been registered to track updates of
                  all properties or a property with the specified name.
                  &lt;p&gt;
                  Any listener can throw a {@code PropertyVetoException} to veto the update.
                  If one of the listeners vetoes the update, this method passes
                  a new &quot;undo&quot; {@code PropertyChangeEvent} that reverts to the old value
                  to all listeners that already confirmed this update
                  and throws the {@code PropertyVetoException} again.
                  &lt;p&gt;
                  No event is fired if old and new values are equal.
                  &lt;p&gt;
                  This is merely a convenience wrapper around the more general{@link #fireVetoableChange(String,Object,Object)} method.                
                <param>
                    propertyName  the programmatic name of the property that is about to change                    
                </param>
                <param>
                    oldValue      the old value of the property                    
                </param>
                <param>
                    newValue      the new value of the property                    
                </param>
                <throws>
                    PropertyVetoException if one of listeners vetoes the property update                    
                </throws>
            </javadoc>
            <method name="fireVetoableChange" type="void" line="232">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="int"/>
                    <param name="newValue" type="int"/>
                </params>
                <scope line="233"/>
            </method>
            <javadoc line="237">
                Reports a boolean constrained property update to listeners
                  that have been registered to track updates of
                  all properties or a property with the specified name.
                  &lt;p&gt;
                  Any listener can throw a {@code PropertyVetoException} to veto the update.
                  If one of the listeners vetoes the update, this method passes
                  a new &quot;undo&quot; {@code PropertyChangeEvent} that reverts to the old value
                  to all listeners that already confirmed this update
                  and throws the {@code PropertyVetoException} again.
                  &lt;p&gt;
                  No event is fired if old and new values are equal.
                  &lt;p&gt;
                  This is merely a convenience wrapper around the more general{@link #fireVetoableChange(String,Object,Object)} method.                
                <param>
                    propertyName  the programmatic name of the property that is about to change                    
                </param>
                <param>
                    oldValue      the old value of the property                    
                </param>
                <param>
                    newValue      the new value of the property                    
                </param>
                <throws>
                    PropertyVetoException if one of listeners vetoes the property update                    
                </throws>
            </javadoc>
            <method name="fireVetoableChange" type="void" line="256">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="boolean"/>
                    <param name="newValue" type="boolean"/>
                </params>
                <scope line="257"/>
            </method>
            <javadoc line="261">
                Fires a property change event to listeners
                  that have been registered to track updates of
                  all properties or a property with the specified name.
                  &lt;p&gt;
                  Any listener can throw a {@code PropertyVetoException} to veto the update.
                  If one of the listeners vetoes the update, this method passes
                  a new &quot;undo&quot; {@code PropertyChangeEvent} that reverts to the old value
                  to all listeners that already confirmed this update
                  and throws the {@code PropertyVetoException} again.
                  &lt;p&gt;
                  No event is fired if the given event&apos;s old and new values are equal and non-null.                
                <param>
                    event  the {@code PropertyChangeEvent} to be fired                    
                </param>
                <throws>
                    PropertyVetoException if one of listeners vetoes the property update                    
                </throws>
            </javadoc>
            <method name="fireVetoableChange" type="void" line="276">
                <params>
                    <param name="event" type="PropertyChangeEvent"/>
                </params>
                <declaration name="oldValue" type="Object" line="277"/>
                <declaration name="newValue" type="Object" line="278"/>
                <scope line="279">
                    <declaration name="name" type="String" line="280"/>
                    <declaration name="common" type="VetoableChangeListener[]" line="281"/>
                    <declaration name="named" type="VetoableChangeListener[]" line="282"/>
                    <declaration name="listeners" type="VetoableChangeListener[]" line="283"/>
                    <scope line="284"/>
                    <scope line="287"/>
                    <scope line="290"/>
                    <scope line="295">
                        <declaration name="current" type="int" line="296"/>
                        <scope line="297">
                            <scope line="298"/>
                        </scope>
                        <scope line="303">
                            <scope line="305">
                                <scope line="306"/>
                                <scope line="309"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="317">
                Check if there are any listeners for a specific property, including
                  those registered on all properties.  If &lt;code&gt;propertyName&lt;/code&gt;
                  is null, only check for listeners registered on all properties.                
                <param>
                    propertyName  the property name.                    
                </param>
                <return>
                    true if there are one or more listeners for the given property                    
                </return>
            </javadoc>
            <method name="hasListeners" type="boolean" line="324">
                <params>
                    <param name="propertyName" type="String"/>
                </params>
            </method>
            <javadoc line="327">
                @serialData Null terminated list of &lt;code&gt;VetoableChangeListeners&lt;/code&gt;.
                  &lt;p&gt;
                  At serialization time we skip non-serializable listeners and
                  only serialize the serializable listeners.                
            </javadoc>
            <method name="writeObject" type="void" line="333">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <declaration name="children" type="Hashtable&lt;String,VetoableChangeSupport&gt;" line="334"/>
                <declaration name="listeners" type="VetoableChangeListener[]" line="335"/>
                <scope line="336">
                    <scope line="337">
                        <declaration name="property" type="String" line="338"/>
                        <scope line="339"/>
                        <scope line="342">
                            <scope line="343"/>
                            <declaration name="vcs" type="VetoableChangeSupport" line="346"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="fields" type="ObjectOutputStream.PutField" line="352"/>
                <scope line="357">
                    <scope line="358">
                        <scope line="359"/>
                    </scope>
                </scope>
            </method>
            <method name="readObject" type="void" line="366">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="fields" type="ObjectInputStream.GetField" line="368"/>
                <declaration name="children" type="Hashtable&lt;String,VetoableChangeSupport&gt;" line="369"/>
                <declaration name="listenerOrNull" type="Object" line="372"/>
                <scope line="373"/>
                <scope line="376">
                    <scope line="377">
                        <scope line="378"/>
                    </scope>
                </scope>
            </method>
            <declaration name="source" type="Object" line="384"/>
            <javadoc line="384">
                The object to be provided as the &quot;source&quot; for any generated events.                
            </javadoc>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="388"/>
            <javadoc line="388">
                @serialField children                                   Hashtable                
                <serialField>
                    source                                     Object                    
                </serialField>
                <serialField>
                    vetoableChangeSupportSerializedDataVersion int                    
                </serialField>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="394"/>
            <javadoc line="394">
                Serialization version ID, so we&apos;re compatible with JDK 1.1                
            </javadoc>
            <class name="VetoableChangeListenerMap" line="398">
                <extends class="ChangeListenerMap">
                    <type_params>
                        <type_param name="VetoableChangeListener"/>
                    </type_params>
                </extends>
                <javadoc line="398">
                    This is a {@link ChangeListenerMap ChangeListenerMap} implementation
                      that works with {@link VetoableChangeListener VetoableChangeListener} objects.                    
                </javadoc>
                <declaration name="EMPTY" type="VetoableChangeListener[]" line="403"/>
                <javadoc line="404">
                    Creates an array of {@link VetoableChangeListener VetoableChangeListener} objects.
                      This method uses the same instance of the empty array
                      when {@code length} equals {@code 0}.                    
                    <param>
                        length  the array length                        
                    </param>
                    <return>
                        an array with specified length                        
                    </return>
                </javadoc>
                <method name="newArray" type="VetoableChangeListener[]" line="411">
                    <params>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <javadoc line="414">
                    Creates a {@link VetoableChangeListenerProxy VetoableChangeListenerProxy}object for the specified property.                    
                    <param>
                        name      the name of the property to listen on                        
                    </param>
                    <param>
                        listener  the listener to process events                        
                    </param>
                    <return>
                        a {@code VetoableChangeListenerProxy} object                        
                    </return>
                </javadoc>
                <method name="newProxy" type="VetoableChangeListener" line="420">
                    <params>
                        <param name="name" type="String"/>
                        <param name="listener" type="VetoableChangeListener"/>
                    </params>
                </method>
            </class>
        </class>
    </source>