<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <import package="com.sun.beans.TypeResolver"/>
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Map.Entry"/>
        <class name="FeatureDescriptor" line="40">
            <comment line="253">
                Package-private dup constructor
                 This must isolate the new object from any changes to the old object.                
            </comment>
            <comment line="319">
                Package private methods for recreating the weak/soft referent                
            </comment>
            <javadoc line="40">
                The FeatureDescriptor class is the common baseclass for PropertyDescriptor,
                  EventSetDescriptor, and MethodDescriptor, etc.
                  &lt;p&gt;
                  It supports some common information that can be set and retrieved for
                  any of the introspection descriptors.
                  &lt;p&gt;
                  In addition it provides an extension mechanism so that arbitrary
                  attribute/value pairs can be associated with a design feature.                
            </javadoc>
            <declaration name="TRANSIENT" type="String" line="52"/>
            <declaration name="classRef" type="Reference&lt;Class&gt;" line="54"/>
            <javadoc line="56">
                Constructs a &lt;code&gt;FeatureDescriptor&lt;/code&gt;.                
            </javadoc>
            <method name="FeatureDescriptor" type="constructor" line="59"/>
            <javadoc line="62">
                Gets the programmatic name of this feature.                
                <return>
                    The programmatic name of the property/method/event                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="67"/>
            <javadoc line="71">
                Sets the programmatic name of this feature.                
                <param>
                    name  The programmatic name of the property/method/event                    
                </param>
            </javadoc>
            <method name="setName" type="void" line="76">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="80">
                Gets the localized display name of this feature.                
                <return>
                    The localized display name for the property/method/event.
                      This defaults to the same as its programmatic name from getName.                    
                </return>
            </javadoc>
            <method name="getDisplayName" type="String" line="86">
                <scope line="87"/>
            </method>
            <javadoc line="93">
                Sets the localized display name of this feature.                
                <param>
                    displayName  The localized display name for the
                      property/method/event.                    
                </param>
            </javadoc>
            <method name="setDisplayName" type="void" line="99">
                <params>
                    <param name="displayName" type="String"/>
                </params>
            </method>
            <javadoc line="103">
                The &quot;expert&quot; flag is used to distinguish between those features that are
                  intended for expert users from those that are intended for normal users.                
                <return>
                    True if this feature is intended for use by experts only.                    
                </return>
            </javadoc>
            <method name="isExpert" type="boolean" line="109"/>
            <javadoc line="113">
                The &quot;expert&quot; flag is used to distinguish between features that are
                  intended for expert users from those that are intended for normal users.                
                <param>
                    expert True if this feature is intended for use by experts only.                    
                </param>
            </javadoc>
            <method name="setExpert" type="void" line="119">
                <params>
                    <param name="expert" type="boolean"/>
                </params>
            </method>
            <javadoc line="123">
                The &quot;hidden&quot; flag is used to identify features that are intended only
                  for tool use, and which should not be exposed to humans.                
                <return>
                    True if this feature should be hidden from human users.                    
                </return>
            </javadoc>
            <method name="isHidden" type="boolean" line="129"/>
            <javadoc line="133">
                The &quot;hidden&quot; flag is used to identify features that are intended only
                  for tool use, and which should not be exposed to humans.                
                <param>
                    hidden  True if this feature should be hidden from human users.                    
                </param>
            </javadoc>
            <method name="setHidden" type="void" line="139">
                <params>
                    <param name="hidden" type="boolean"/>
                </params>
            </method>
            <javadoc line="143">
                The &quot;preferred&quot; flag is used to identify features that are particularly
                  important for presenting to humans.                
                <return>
                    True if this feature should be preferentially shown to human users.                    
                </return>
            </javadoc>
            <method name="isPreferred" type="boolean" line="149"/>
            <javadoc line="153">
                The &quot;preferred&quot; flag is used to identify features that are particularly
                  important for presenting to humans.                
                <param>
                    preferred  True if this feature should be preferentially shown
                      to human users.                    
                </param>
            </javadoc>
            <method name="setPreferred" type="void" line="160">
                <params>
                    <param name="preferred" type="boolean"/>
                </params>
            </method>
            <javadoc line="164">
                Gets the short description of this feature.                
                <return>
                    A localized short description associated with this
                      property/method/event.  This defaults to be the display name.                    
                </return>
            </javadoc>
            <method name="getShortDescription" type="String" line="170">
                <scope line="171"/>
            </method>
            <javadoc line="177">
                You can associate a short descriptive string with a feature.  Normally
                  these descriptive strings should be less than about 40 characters.                
                <param>
                    text  A (localized) short description to be associated with
                      this property/method/event.                    
                </param>
            </javadoc>
            <method name="setShortDescription" type="void" line="183">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="187">
                Associate a named attribute with this feature.                
                <param>
                    attributeName  The locale-independent name of the attribute                    
                </param>
                <param>
                    value  The value.                    
                </param>
            </javadoc>
            <method name="setValue" type="void" line="193">
                <params>
                    <param name="attributeName" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="197">
                Retrieve a named attribute with this feature.                
                <param>
                    attributeName  The locale-independent name of the attribute                    
                </param>
                <return>
                    The value of the attribute.  May be null if
                      the attribute is unknown.                    
                </return>
            </javadoc>
            <method name="getValue" type="Object" line="204">
                <params>
                    <param name="attributeName" type="String"/>
                </params>
            </method>
            <javadoc line="210">
                Gets an enumeration of the locale-independent names of this
                  feature.                
                <return>
                    An enumeration of the locale-independent names of any
                      attributes that have been registered with setValue.                    
                </return>
            </javadoc>
            <method name="attributeNames" type="Enumeration<String>" line="217"/>
            <javadoc line="221">
                Package-private constructor,
                  Merge information from two FeatureDescriptors.
                  The merged hidden and expert flags are formed by or-ing the values.
                  In the event of other conflicts, the second argument (y) is
                  given priority over the first argument (x).                
                <param>
                    x  The first (lower priority) MethodDescriptor                    
                </param>
                <param>
                    y  The second (higher priority) MethodDescriptor                    
                </param>
            </javadoc>
            <method name="FeatureDescriptor" type="constructor" line="231">
                <params>
                    <param name="x" type="FeatureDescriptor"/>
                    <param name="y" type="FeatureDescriptor"/>
                </params>
                <scope line="237"/>
                <scope line="241"/>
                <scope line="245"/>
            </method>
            <method name="FeatureDescriptor" type="constructor" line="256">
                <params>
                    <param name="old" type="FeatureDescriptor"/>
                </params>
            </method>
            <javadoc line="268">
                Copies all values from the specified attribute table.
                  If some attribute is exist its value should be overridden.                
                <param>
                    table  the attribute table with new values                    
                </param>
            </javadoc>
            <method name="addTable" type="void" line="274">
                <params>
                    <param name="table" type="Hashtable<String,Object>"/>
                </params>
                <scope line="275"/>
            </method>
            <javadoc line="280">
                Returns the initialized attribute table.                
                <return>
                    the initialized attribute table                    
                </return>
            </javadoc>
            <method name="getTable" type="Hashtable<String,Object>" line="285">
                <scope line="286"/>
            </method>
            <javadoc line="292">
                Sets the &quot;transient&quot; attribute according to the annotation.
                  If the &quot;transient&quot; attribute is already set
                  it should not be changed.                
                <param>
                    annotation  the annotation of the element of the feature                    
                </param>
            </javadoc>
            <method name="setTransient" type="void" line="299">
                <params>
                    <param name="annotation" type="Transient"/>
                </params>
                <scope line="300"/>
            </method>
            <javadoc line="305">
                Indicates whether the feature is transient.                
                <return>
                    {@code true} if the feature is transient,{@code false} otherwise                    
                </return>
            </javadoc>
            <method name="isTransient" type="boolean" line="311">
                <declaration name="value" type="Object" line="312"/>
            </method>
            <method name="setClass0" type="void" line="320">
                <params>
                    <param name="cls" type="Class"/>
                </params>
            </method>
            <method name="getClass0" type="Class" line="324"/>
            <javadoc line="330">
                Creates a new soft reference that refers to the given object.                
                <return>
                    a new soft reference or &lt;code&gt;null&lt;/code&gt; if object is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <see>
                    SoftReference                    
                </see>
            </javadoc>
            <method name="getSoftReference" type="Reference<T>" line="337">
                <params>
                    <param name="object" type="T"/>
                </params>
            </method>
            <javadoc line="343">
                Creates a new weak reference that refers to the given object.                
                <return>
                    a new weak reference or &lt;code&gt;null&lt;/code&gt; if object is &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <see>
                    WeakReference                    
                </see>
            </javadoc>
            <method name="getWeakReference" type="Reference<T>" line="350">
                <params>
                    <param name="object" type="T"/>
                </params>
            </method>
            <javadoc line="356">
                Resolves the return type of the method.                
                <param>
                    base    the class that contains the method in the hierarchy                    
                </param>
                <param>
                    method  the object that represents the method                    
                </param>
                <return>
                    a class identifying the return type of the method                    
                </return>
                <see>
                    Method#getGenericReturnType                    
                </see>
                <see>
                    Method#getReturnType                    
                </see>
            </javadoc>
            <method name="getReturnType" type="Class" line="366">
                <params>
                    <param name="base" type="Class"/>
                    <param name="method" type="Method"/>
                </params>
                <scope line="367"/>
            </method>
            <javadoc line="373">
                Resolves the parameter types of the method.                
                <param>
                    base    the class that contains the method in the hierarchy                    
                </param>
                <param>
                    method  the object that represents the method                    
                </param>
                <return>
                    an array of classes identifying the parameter types of the method                    
                </return>
                <see>
                    Method#getGenericParameterTypes                    
                </see>
                <see>
                    Method#getParameterTypes                    
                </see>
            </javadoc>
            <method name="getParameterTypes" type="Class[]" line="383">
                <params>
                    <param name="base" type="Class"/>
                    <param name="method" type="Method"/>
                </params>
                <scope line="384"/>
            </method>
            <declaration name="expert" type="boolean" line="390"/>
            <declaration name="hidden" type="boolean" line="391"/>
            <declaration name="preferred" type="boolean" line="392"/>
            <declaration name="shortDescription" type="String" line="393"/>
            <declaration name="name" type="String" line="394"/>
            <declaration name="displayName" type="String" line="395"/>
            <declaration name="table" type="Hashtable&lt;String,Object&gt;" line="396"/>
            <javadoc line="398">
                Returns a string representation of the object.                
                <return>
                    a string representation of the object                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="toString" type="String" line="405">
                <declaration name="sb" type="StringBuilder" line="406"/>
                <scope line="413">
                    <scope line="415"/>
                </scope>
            </method>
            <method name="appendTo" type="void" line="425">
                <params>
                    <param name="sb" type="StringBuilder"/>
                </params>
            </method>
            <method name="appendTo" type="void" line="428">
                <params>
                    <param name="sb" type="StringBuilder"/>
                    <param name="name" type="String"/>
                    <param name="reference" type="Reference"/>
                </params>
                <scope line="429"/>
            </method>
            <method name="appendTo" type="void" line="434">
                <params>
                    <param name="sb" type="StringBuilder"/>
                    <param name="name" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="435"/>
            </method>
            <method name="appendTo" type="void" line="440">
                <params>
                    <param name="sb" type="StringBuilder"/>
                    <param name="name" type="String"/>
                    <param name="value" type="boolean"/>
                </params>
                <scope line="441"/>
            </method>
        </class>
    </source>