<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <import package="java.beans"/>
        <class name="PropertyEditorSupport" line="3">
            <implements interface="PropertyEditor"/>
            <javadoc line="3">
                This is a support class to help build property editors.
                  &lt;p&gt;
                  It can be used either as a base class or as a delagatee.                
            </javadoc>
            <javadoc line="9">
                Constructs a &lt;code&gt;PropertyEditorSupport&lt;/code&gt; object.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="PropertyEditorSupport" type="constructor" line="13"/>
            <javadoc line="16">
                Constructs a &lt;code&gt;PropertyEditorSupport&lt;/code&gt; object.                
                <param>
                    source the source used for event firing                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="PropertyEditorSupport" type="constructor" line="21">
                <params>
                    <param name="source" type="Object"/>
                </params>
                <scope line="22"/>
            </method>
            <javadoc line="27">
                Returns the bean that is used as the
                  source of events. If the source has not
                  been explicitly set then this instance of
                  &lt;code&gt;PropertyEditorSupport&lt;/code&gt; is returned.                
                <return>
                    the source object or this instance                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getSource" type="Object" line="35"/>
            <javadoc line="38">
                Sets the source bean.
                  &lt;p&gt;
                  The source bean is used as the source of events
                  for the property changes. This source should be used for information
                  purposes only and should not be modified by the PropertyEditor.                
                <param>
                    source source object to be used for events                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setSource" type="void" line="47">
                <params>
                    <param name="source" type="Object"/>
                </params>
            </method>
            <javadoc line="50">
                Set (or change) the object that is to be edited.                
                <param>
                    value The new target object to be edited.  Note that this
                      object should not be modified by the PropertyEditor, rather
                      the PropertyEditor should create a new object to hold any
                      modified value.                    
                </param>
            </javadoc>
            <method name="setValue" type="void" line="57">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="61">
                Gets the value of the property.                
                <return>
                    The value of the property.                    
                </return>
            </javadoc>
            <method name="getValue" type="Object" line="65"/>
            <javadoc line="68">
                Determines whether the class will honor the paintValue method.                
                <return>
                    True if the class will honor the paintValue method.                    
                </return>
            </javadoc>
            <method name="isPaintable" type="boolean" line="72"/>
            <javadoc line="75">
                Paint a representation of the value into a given area of screen
                  real estate.  Note that the propertyEditor is responsible for doing
                  its own clipping so that it fits into the given rectangle.
                  &lt;p&gt;
                  If the PropertyEditor doesn&apos;t honor paint requests (see isPaintable)
                  this method should be a silent noop.                
                <param>
                    gfx  Graphics object to paint into.                    
                </param>
                <param>
                    box  Rectangle within graphics object into which we should paint.                    
                </param>
            </javadoc>
            <method name="paintValue" type="void" line="85">
                <params>
                    <param name="gfx" type="java.awt.Graphics"/>
                    <param name="box" type="java.awt.Rectangle"/>
                </params>
            </method>
            <javadoc line="87">
                This method is intended for use when generating Java code to set
                  the value of the property.  It should return a fragment of Java code
                  that can be used to initialize a variable with the current property
                  value.
                  &lt;p&gt;
                  Example results are &quot;2&quot;, &quot;new Color(127,127,34)&quot;, &quot;Color.orange&quot;, etc.                
                <return>
                    A fragment of Java code representing an initializer for the
                      current value.                    
                </return>
            </javadoc>
            <method name="getJavaInitializationString" type="String" line="97"/>
            <javadoc line="100">
                Gets the property value as a string suitable for presentation
                  to a human to edit.                
                <return>
                    The property value as a string suitable for presentation
                      to a human to edit.
                      <p>   Returns null if the value can't be expressed as a string.
                      <p>   If a non-null value is returned, then the PropertyEditor should
                      be prepared to parse that string back in setAsText().                    
                </return>
            </javadoc>
            <method name="getAsText" type="String" line="109"/>
            <javadoc line="112">
                Sets the property value by parsing a given String.  May raise
                  java.lang.IllegalArgumentException if either the String is
                  badly formatted or if this kind of property can&apos;t be expressed
                  as text.                
                <param>
                    text  The string to be parsed.                    
                </param>
            </javadoc>
            <method name="setAsText" type="void" line="119">
                <params>
                    <param name="text" type="String"/>
                </params>
                <scope line="120"/>
            </method>
            <javadoc line="126">
                If the property value must be one of a set of known tagged values,
                  then this method should return an array of the tag values.  This can
                  be used to represent (for example) enum values.  If a PropertyEditor
                  supports tags, then it should support the use of setAsText with
                  a tag value as a way of setting the value.                
                <return>
                    The tag values for this property.  May be null if this
                      property cannot be represented as a tagged value.                    
                </return>
            </javadoc>
            <method name="getTags" type="String[]" line="135"/>
            <javadoc line="138">
                A PropertyEditor may chose to make available a full custom Component
                  that edits its property value.  It is the responsibility of the
                  PropertyEditor to hook itself up to its editor Component itself and
                  to report property value changes by firing a PropertyChange event.
                  &lt;P&gt;
                  The higher-level code that calls getCustomEditor may either embed
                  the Component in some larger property sheet, or it may put it in
                  its own individual dialog, or ...                
                <return>
                    A java.awt.Component that will allow a human to directly
                      edit the current property value.  May be null if this is
                      not supported.                    
                </return>
            </javadoc>
            <method name="getCustomEditor" type="java.awt.Component" line="151"/>
            <javadoc line="154">
                Determines whether the propertyEditor can provide a custom editor.                
                <return>
                    True if the propertyEditor can provide a custom editor.                    
                </return>
            </javadoc>
            <method name="supportsCustomEditor" type="boolean" line="158"/>
            <javadoc line="161">
                Adds a listener for the value change.
                  When the property editor changes its value
                  it should fire a {@link PropertyChangeEvent}on all registered {@link PropertyChangeListener}s,
                  specifying the {@code null} value for the property name.
                  If the source property is set,
                  it should be used as the source of the event.
                  &lt;p&gt;
                  The same listener object may be added more than once,
                  and will be called as many times as it is added.
                  If {@code listener} is {@code null},
                  no exception is thrown and no action is taken.                
                <param>
                    listener  the {@link PropertyChangeListener} to add                    
                </param>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="175">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="176"/>
            </method>
            <javadoc line="181">
                Removes a listener for the value change.
                  &lt;p&gt;
                  If the same listener was added more than once,
                  it will be notified one less time after being removed.
                  If {@code listener} is {@code null}, or was never added,
                  no exception is thrown and no action is taken.                
                <param>
                    listener  the {@link PropertyChangeListener} to remove                    
                </param>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="190">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="191"/>
            </method>
            <javadoc line="196">
                Report that we have been modified to any interested listeners.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="199">
                <declaration name="targets" type="java.util.Vector" line="200"/>
                <scope line="201">
                    <scope line="202"/>
                </scope>
                <declaration name="evt" type="PropertyChangeEvent" line="207"/>
                <scope line="208">
                    <declaration name="target" type="PropertyChangeListener" line="209"/>
                </scope>
            </method>
            <declaration name="value" type="Object" line="213"/>
            <declaration name="source" type="Object" line="214"/>
            <declaration name="listeners" type="java.util.Vector" line="215"/>
        </class>
    </source>