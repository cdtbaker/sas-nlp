<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <interface name="PropertyEditor">
            <javadoc line="2">
                A PropertyEditor class provides support for GUIs that want to
                  allow users to edit a property value of a given type.
                  &lt;p&gt;
                  PropertyEditor supports a variety of different kinds of ways of
                  displaying and updating property values.  Most PropertyEditors will
                  only need to support a subset of the different options available in
                  this API.
                  &lt;P&gt;
                  Simple PropertyEditors may only support the getAsText and setAsText
                  methods and need not support (say) paintValue or getCustomEditor.  More
                  complex types may be unable to support getAsText and setAsText but will
                  instead support paintValue and getCustomEditor.
                  &lt;p&gt;
                  Every propertyEditor must support one or more of the three simple
                  display styles.  Thus it can either (1) support isPaintable or (2)
                  both return a non-null String[] from getTags() and return a non-null
                  value from getAsText or (3) simply return a non-null String from
                  getAsText().
                  &lt;p&gt;
                  Every property editor must support a call on setValue when the argument
                  object is of the type for which this is the corresponding propertyEditor.
                  In addition, each property editor must either support a custom editor,
                  or support setAsText.
                  &lt;p&gt;
                  Each PropertyEditor should have a null constructor.                
            </javadoc>
            <method name="setValue" type="void" line="30"/>
            <javadoc line="30">
                Set (or change) the object that is to be edited.  Primitive types such
                  as &quot;int&quot; must be wrapped as the corresponding object type such as
                  &quot;java.lang.Integer&quot;.                
                <param>
                    value The new target object to be edited.  Note that this
                      object should not be modified by the PropertyEditor, rather
                      the PropertyEditor should create a new object to hold any
                      modified value.                    
                </param>
            </javadoc>
            <method name="getValue" type="Object" line="40"/>
            <javadoc line="40">
                Gets the property value.                
                <return>
                    The value of the property.  Primitive types such as &quot;int&quot; will
                      be wrapped as the corresponding object type such as &quot;java.lang.Integer&quot;.                    
                </return>
            </javadoc>
            <method name="isPaintable" type="boolean" line="46"/>
            <javadoc line="46">
                Determines whether this property editor is paintable.                
                <return>
                    True if the class will honor the paintValue method.                    
                </return>
            </javadoc>
            <method name="paintValue" type="void" line="51"/>
            <javadoc line="51">
                Paint a representation of the value into a given area of screen
                  real estate.  Note that the propertyEditor is responsible for doing
                  its own clipping so that it fits into the given rectangle.
                  &lt;p&gt;
                  If the PropertyEditor doesn&apos;t honor paint requests (see isPaintable)
                  this method should be a silent noop.
                  &lt;p&gt;
                  The given Graphics object will have the default font, color, etc of
                  the parent container.  The PropertyEditor may change graphics attributes
                  such as font and color and doesn&apos;t need to restore the old values.                
                <param>
                    gfx  Graphics object to paint into.                    
                </param>
                <param>
                    box  Rectangle within graphics object into which we should paint.                    
                </param>
            </javadoc>
            <method name="getJavaInitializationString" type="String" line="66"/>
            <javadoc line="66">
                Returns a fragment of Java code that can be used to set a property
                  to match the editors current state. This method is intended
                  for use when generating Java code to reflect changes made through the
                  property editor.
                  &lt;p&gt;
                  The code fragment should be context free and must be a legal Java
                  expression as specified by the JLS.
                  &lt;p&gt;
                  Specifically, if the expression represents a computation then all
                  classes and static members should be fully qualified. This rule
                  applies to constructors, static methods and non primitive arguments.
                  &lt;p&gt;
                  Caution should be used when evaluating the expression as it may throw
                  exceptions. In particular, code generators must ensure that generated
                  code will compile in the presence of an expression that can throw
                  checked exceptions.
                  &lt;p&gt;
                  Example results are:
                  &lt;ul&gt;
                  &lt;li&gt;Primitive expresssion: &lt;code&gt;2&lt;/code&gt;
                  &lt;li&gt;Class constructor: &lt;code&gt;new java.awt.Color(127,127,34)&lt;/code&gt;
                  &lt;li&gt;Static field: &lt;code&gt;java.awt.Color.orange&lt;/code&gt;
                  &lt;li&gt;Static method: &lt;code&gt;javax.swing.Box.createRigidArea(new
                  java.awt.Dimension(0, 5))&lt;/code&gt;
                  &lt;/ul&gt;                
                <return>
                    a fragment of Java code representing an initializer for the
                      current value. It should not contain a semi-colon
                      (&apos;&lt;code&gt;;&lt;/code&gt;&apos;) to end the expression.                    
                </return>
            </javadoc>
            <method name="getAsText" type="String" line="97"/>
            <javadoc line="97">
                Gets the property value as text.                
                <return>
                    The property value as a human editable string.
                      &lt;p&gt;   Returns null if the value can&apos;t be expressed as an editable string.
                      &lt;p&gt;   If a non-null value is returned, then the PropertyEditor should
                      be prepared to parse that string back in setAsText().                    
                </return>
            </javadoc>
            <method name="setAsText" type="void" line="105"/>
            <javadoc line="105">
                Set the property value by parsing a given String.  May raise
                  java.lang.IllegalArgumentException if either the String is
                  badly formatted or if this kind of property can&apos;t be expressed
                  as text.                
                <param>
                    text  The string to be parsed.                    
                </param>
            </javadoc>
            <method name="getTags" type="String[]" line="113"/>
            <javadoc line="113">
                If the property value must be one of a set of known tagged values,
                  then this method should return an array of the tags.  This can
                  be used to represent (for example) enum values.  If a PropertyEditor
                  supports tags, then it should support the use of setAsText with
                  a tag value as a way of setting the value and the use of getAsText
                  to identify the current value.                
                <return>
                    The tag values for this property.  May be null if this
                      property cannot be represented as a tagged value.                    
                </return>
            </javadoc>
            <method name="getCustomEditor" type="java.awt.Component" line="124"/>
            <javadoc line="124">
                A PropertyEditor may choose to make available a full custom Component
                  that edits its property value.  It is the responsibility of the
                  PropertyEditor to hook itself up to its editor Component itself and
                  to report property value changes by firing a PropertyChange event.
                  &lt;P&gt;
                  The higher-level code that calls getCustomEditor may either embed
                  the Component in some larger property sheet, or it may put it in
                  its own individual dialog, or ...                
                <return>
                    A java.awt.Component that will allow a human to directly
                      edit the current property value.  May be null if this is
                      not supported.                    
                </return>
            </javadoc>
            <method name="supportsCustomEditor" type="boolean" line="138"/>
            <javadoc line="138">
                Determines whether this property editor supports a custom editor.                
                <return>
                    True if the propertyEditor can provide a custom editor.                    
                </return>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="143"/>
            <javadoc line="143">
                Adds a listener for the value change.
                  When the property editor changes its value
                  it should fire a {@link PropertyChangeEvent}on all registered {@link PropertyChangeListener}s,
                  specifying the {@code null} value for the property name
                  and itself as the source.                
                <param>
                    listener  the {@link PropertyChangeListener} to add                    
                </param>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="152"/>
            <javadoc line="152">
                Removes a listener for the value change.                
                <param>
                    listener  the {@link PropertyChangeListener} to remove                    
                </param>
            </javadoc>
        </interface>
    </source>