<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <interface name="BeanInfo">
            <javadoc line="28">
                A bean implementor who wishes to provide explicit information about
                  their bean may provide a BeanInfo class that implements this BeanInfo
                  interface and provides explicit information about the methods,
                  properties, events, etc, of their  bean.
                  &lt;p&gt;
                  A bean implementor doesn&apos;t need to provide a complete set of
                  explicit information.  You can pick and choose which information
                  you want to provide and the rest will be obtained by automatic
                  analysis using low-level reflection of the bean classes&apos; methods
                  and applying standard design patterns.
                  &lt;p&gt;
                  You get the opportunity to provide lots and lots of different
                  information as part of the various XyZDescriptor classes.  But
                  don&apos;t panic, you only really need to provide the minimal core
                  information required by the various constructors.
                  &lt;P&gt;
                  See also the SimpleBeanInfo class which provides a convenient
                  &quot;noop&quot; base class for BeanInfo classes, which you can override
                  for those specific places where you want to return explicit info.
                  &lt;P&gt;
                  To learn about all the behaviour of a bean see the Introspector class.                
            </javadoc>
            <method name="getBeanDescriptor" type="BeanDescriptor" line="54"/>
            <javadoc line="54">
                Gets the beans &lt;code&gt;BeanDescriptor&lt;/code&gt;.                
                <return>
                    A BeanDescriptor providing overall information about
                      the bean, such as its displayName, its customizer, etc.  May
                      return null if the information should be obtained by automatic
                      analysis.                    
                </return>
            </javadoc>
            <method name="getEventSetDescriptors" type="EventSetDescriptor[]" line="64"/>
            <javadoc line="64">
                Gets the beans &lt;code&gt;EventSetDescriptor&lt;/code&gt;s.                
                <return>
                    An array of EventSetDescriptors describing the kinds of
                      events fired by this bean.  May return null if the information
                      should be obtained by automatic analysis.                    
                </return>
            </javadoc>
            <method name="getDefaultEventIndex" type="int" line="73"/>
            <javadoc line="73">
                A bean may have a &quot;default&quot; event that is the event that will
                  mostly commonly be used by humans when using the bean.                
                <return>
                    Index of default event in the EventSetDescriptor array
                      returned by getEventSetDescriptors.
                      <P>      Returns -1 if there is no default event.                    
                </return>
            </javadoc>
            <method name="getPropertyDescriptors" type="PropertyDescriptor[]" line="82"/>
            <javadoc line="82">
                Returns descriptors for all properties of the bean.
                  May return {@code null} if the information
                  should be obtained by automatic analysis.
                  &lt;p&gt;
                  If a property is indexed, then its entry in the result array
                  will belong to the {@link IndexedPropertyDescriptor} subclass
                  of the {@link PropertyDescriptor} class.
                  A client of the {@code getPropertyDescriptors} method
                  can use &quot;{@code instanceof}&quot; to check
                  whether a given {@code PropertyDescriptor}is an {@code IndexedPropertyDescriptor}.                
                <return>
                    an array of {@code PropertyDescriptor}s
                      describing all properties supported by the bean
                      or {@code null}                    
                </return>
            </javadoc>
            <method name="getDefaultPropertyIndex" type="int" line="101"/>
            <javadoc line="101">
                A bean may have a &quot;default&quot; property that is the property that will
                  mostly commonly be initially chosen for update by human&apos;s who are
                  customizing the bean.                
                <return>
                    Index of default property in the PropertyDescriptor array
                      returned by getPropertyDescriptors.
                      <P>      Returns -1 if there is no default property.                    
                </return>
            </javadoc>
            <method name="getMethodDescriptors" type="MethodDescriptor[]" line="111"/>
            <javadoc line="111">
                Gets the beans &lt;code&gt;MethodDescriptor&lt;/code&gt;s.                
                <return>
                    An array of MethodDescriptors describing the externally
                      visible methods supported by this bean.  May return null if
                      the information should be obtained by automatic analysis.                    
                </return>
            </javadoc>
            <method name="getAdditionalBeanInfo" type="BeanInfo[]" line="120"/>
            <javadoc line="120">
                This method allows a BeanInfo object to return an arbitrary collection
                  of other BeanInfo objects that provide additional information on the
                  current bean.
                  &lt;P&gt;
                  If there are conflicts or overlaps between the information provided
                  by different BeanInfo objects, then the current BeanInfo takes precedence
                  over the getAdditionalBeanInfo objects, and later elements in the array
                  take precedence over earlier ones.                
                <return>
                    an array of BeanInfo objects.  May return null.                    
                </return>
            </javadoc>
            <method name="getIcon" type="java.awt.Image" line="134"/>
            <javadoc line="134">
                This method returns an image object that can be used to
                  represent the bean in toolboxes, toolbars, etc.   Icon images
                  will typically be GIFs, but may in future include other formats.
                  &lt;p&gt;
                  Beans aren&apos;t required to provide icons and may return null from
                  this method.
                  &lt;p&gt;
                  There are four possible flavors of icons (16x16 color,
                  32x32 color, 16x16 mono, 32x32 mono).  If a bean choses to only
                  support a single icon we recommend supporting 16x16 color.
                  &lt;p&gt;
                  We recommend that icons have a &quot;transparent&quot; background
                  so they can be rendered onto an existing background.                
                <param>
                    iconKind  The kind of icon requested.  This should be
                      one of the constant values ICON_COLOR_16x16, ICON_COLOR_32x32,
                      ICON_MONO_16x16, or ICON_MONO_32x32.                    
                </param>
                <return>
                    An image object representing the requested icon.  May
                      return null if no suitable icon is available.                    
                </return>
            </javadoc>
            <declaration name="ICON_COLOR_16x16" type="int" line="157"/>
            <javadoc line="157">
                Constant to indicate a 16 x 16 color icon.                
            </javadoc>
            <declaration name="ICON_COLOR_32x32" type="int" line="162"/>
            <javadoc line="162">
                Constant to indicate a 32 x 32 color icon.                
            </javadoc>
            <declaration name="ICON_MONO_16x16" type="int" line="167"/>
            <javadoc line="167">
                Constant to indicate a 16 x 16 monochrome icon.                
            </javadoc>
            <declaration name="ICON_MONO_32x32" type="int" line="172"/>
            <javadoc line="172">
                Constant to indicate a 32 x 32 monochrome icon.                
            </javadoc>
        </interface>
    </source>