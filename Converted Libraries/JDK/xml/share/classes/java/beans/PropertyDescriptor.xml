<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Constructor"/>
        <class name="PropertyDescriptor" line="5">
            <extends class="FeatureDescriptor"/>
            <javadoc line="5">
                A PropertyDescriptor describes one property that a Java Bean
                  exports via a pair of accessor methods.                
            </javadoc>
            <declaration name="propertyTypeRef" type="Reference&lt;Class&gt;" line="10"/>
            <declaration name="readMethodRef" type="Reference&lt;Method&gt;" line="11"/>
            <declaration name="writeMethodRef" type="Reference&lt;Method&gt;" line="12"/>
            <declaration name="propertyEditorClassRef" type="Reference&lt;Class&gt;" line="13"/>
            <declaration name="bound" type="boolean" line="14"/>
            <declaration name="constrained" type="boolean" line="15"/>
            <declaration name="baseName" type="String" line="16"/>
            <declaration name="writeMethodName" type="String" line="17"/>
            <declaration name="readMethodName" type="String" line="18"/>
            <javadoc line="19">
                Constructs a PropertyDescriptor for a property that follows
                  the standard Java convention by having getFoo and setFoo
                  accessor methods.  Thus if the argument name is &quot;fred&quot;, it will
                  assume that the writer method is &quot;setFred&quot; and the reader method
                  is &quot;getFred&quot; (or &quot;isFred&quot; for a boolean property).  Note that the
                  property name should start with a lower case character, which will
                  be capitalized in the method names.                
                <param>
                    propertyName The programmatic name of the property.                    
                </param>
                <param>
                    beanClass The Class object for the target bean.  For
                      example sun.beans.OurButton.class.                    
                </param>
                <exception>
                    IntrospectionException if an exception occurs during
                      introspection.                    
                </exception>
            </javadoc>
            <method name="PropertyDescriptor" type="constructor" line="33">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="beanClass" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="36">
                This constructor takes the name of a simple property, and method
                  names for reading and writing the property.                
                <param>
                    propertyName The programmatic name of the property.                    
                </param>
                <param>
                    beanClass The Class object for the target bean.  For
                      example sun.beans.OurButton.class.                    
                </param>
                <param>
                    readMethodName The name of the method used for reading the property
                      value.  May be null if the property is write-only.                    
                </param>
                <param>
                    writeMethodName The name of the method used for writing the property
                      value.  May be null if the property is read-only.                    
                </param>
                <exception>
                    IntrospectionException if an exception occurs during
                      introspection.                    
                </exception>
            </javadoc>
            <method name="PropertyDescriptor" type="constructor" line="49">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="beanClass" type="Class<?>"/>
                    <param name="readMethodName" type="String"/>
                    <param name="writeMethodName" type="String"/>
                </params>
                <scope line="50"/>
                <scope line="53"/>
                <scope line="56"/>
                <scope line="62"/>
                <scope line="66"/>
                <declaration name="args" type="Class[]" line="69"/>
            </method>
            <javadoc line="72">
                This constructor takes the name of a simple property, and Method
                  objects for reading and writing the property.                
                <param>
                    propertyName The programmatic name of the property.                    
                </param>
                <param>
                    readMethod The method used for reading the property value.
                      May be null if the property is write-only.                    
                </param>
                <param>
                    writeMethod The method used for writing the property value.
                      May be null if the property is read-only.                    
                </param>
                <exception>
                    IntrospectionException if an exception occurs during
                      introspection.                    
                </exception>
            </javadoc>
            <method name="PropertyDescriptor" type="constructor" line="83">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="readMethod" type="Method"/>
                    <param name="writeMethod" type="Method"/>
                </params>
                <scope line="84"/>
            </method>
            <javadoc line="91">
                Creates &lt;code&gt;PropertyDescriptor&lt;/code&gt; for the specified bean
                  with the specified name and methods to read/write the property value.                
                <param>
                    bean   the type of the target bean                    
                </param>
                <param>
                    base   the base name of the property (the rest of the method name)                    
                </param>
                <param>
                    read   the method used for reading the property value                    
                </param>
                <param>
                    write  the method used for writing the property value                    
                </param>
                <exception>
                    IntrospectionException if an exception occurs during introspection                    
                </exception>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="PropertyDescriptor" type="constructor" line="101">
                <params>
                    <param name="bean" type="Class<?>"/>
                    <param name="base" type="String"/>
                    <param name="read" type="Method"/>
                    <param name="write" type="Method"/>
                </params>
                <scope line="102"/>
            </method>
            <javadoc line="111">
                Returns the Java type info for the property.
                  Note that the {@code Class} object may describe
                  primitive Java types such as {@code int}.
                  This type is returned by the read method
                  or is used as the parameter type of the write method.
                  Returns {@code null} if the type is an indexed property
                  that does not support non-indexed access.                
                <return>
                    the {@code Class} object that represents the Java type info,
                      or {@code null} if the type cannot be determined                    
                </return>
            </javadoc>
            <method name="getPropertyType" type="Class<?>" line="122">
                <declaration name="type" type="Class" line="123"/>
                <scope line="124">
                    <scope line="125"/>
                    <scope line="129"/>
                </scope>
            </method>
            <method name="setPropertyType" type="void" line="134">
                <params>
                    <param name="type" type="Class"/>
                </params>
            </method>
            <method name="getPropertyType0" type="Class" line="137"/>
            <javadoc line="140">
                Gets the method that should be used to read the property value.                
                <return>
                    The method that should be used to read the property value.
                      May return null if the property can't be read.                    
                </return>
            </javadoc>
            <method name="getReadMethod" type="Method" line="145">
                <declaration name="readMethod" type="Method" line="146"/>
                <scope line="147">
                    <declaration name="cls" type="Class" line="148"/>
                    <scope line="149"/>
                    <scope line="152">
                        <declaration name="type" type="Class" line="153"/>
                        <scope line="154"/>
                        <scope line="157"/>
                    </scope>
                    <scope line="162"/>
                    <scope line="166"/>
                    <scope line="169"/>
                </scope>
            </method>
            <javadoc line="174">
                Sets the method that should be used to read the property value.                
                <param>
                    readMethod The new read method.                    
                </param>
            </javadoc>
            <method name="setReadMethod" type="void" line="178">
                <params>
                    <param name="readMethod" type="Method"/>
                </params>
                <scope line="179"/>
            </method>
            <javadoc line="190">
                Gets the method that should be used to write the property value.                
                <return>
                    The method that should be used to write the property value.
                      May return null if the property can't be written.                    
                </return>
            </javadoc>
            <method name="getWriteMethod" type="Method" line="195">
                <declaration name="writeMethod" type="Method" line="196"/>
                <scope line="197">
                    <declaration name="cls" type="Class" line="198"/>
                    <scope line="199"/>
                    <declaration name="type" type="Class" line="202"/>
                    <scope line="203">
                        <scope line="204"/>
                        <scope line="208"/>
                    </scope>
                    <scope line="212"/>
                    <declaration name="args" type="Class[]" line="215"/>
                    <scope line="217">
                        <scope line="218"/>
                    </scope>
                    <scope line="222"/>
                    <scope line="225"/>
                </scope>
            </method>
            <javadoc line="230">
                Sets the method that should be used to write the property value.                
                <param>
                    writeMethod The new write method.                    
                </param>
            </javadoc>
            <method name="setWriteMethod" type="void" line="234">
                <params>
                    <param name="writeMethod" type="Method"/>
                </params>
                <scope line="235"/>
            </method>
            <method name="getReadMethod0" type="Method" line="246"/>
            <method name="getWriteMethod0" type="Method" line="249"/>
            <javadoc line="252">
                Overridden to ensure that a super class doesn&apos;t take precedent                
            </javadoc>
            <method name="setClass0" type="void" line="255">
                <params>
                    <param name="clz" type="Class"/>
                </params>
                <scope line="256"/>
            </method>
            <javadoc line="261">
                Updates to &quot;bound&quot; properties will cause a &quot;PropertyChange&quot; event to
                  get fired when the property is changed.                
                <return>
                    True if this is a bound property.                    
                </return>
            </javadoc>
            <method name="isBound" type="boolean" line="266"/>
            <javadoc line="269">
                Updates to &quot;bound&quot; properties will cause a &quot;PropertyChange&quot; event to
                  get fired when the property is changed.                
                <param>
                    bound True if this is a bound property.                    
                </param>
            </javadoc>
            <method name="setBound" type="void" line="274">
                <params>
                    <param name="bound" type="boolean"/>
                </params>
            </method>
            <javadoc line="277">
                Attempted updates to &quot;Constrained&quot; properties will cause a &quot;VetoableChange&quot;
                  event to get fired when the property is changed.                
                <return>
                    True if this is a constrained property.                    
                </return>
            </javadoc>
            <method name="isConstrained" type="boolean" line="282"/>
            <javadoc line="285">
                Attempted updates to &quot;Constrained&quot; properties will cause a &quot;VetoableChange&quot;
                  event to get fired when the property is changed.                
                <param>
                    constrained True if this is a constrained property.                    
                </param>
            </javadoc>
            <method name="setConstrained" type="void" line="290">
                <params>
                    <param name="constrained" type="boolean"/>
                </params>
            </method>
            <javadoc line="293">
                Normally PropertyEditors will be found using the PropertyEditorManager.
                  However if for some reason you want to associate a particular
                  PropertyEditor with a given property, then you can do it with
                  this method.                
                <param>
                    propertyEditorClass  The Class for the desired PropertyEditor.                    
                </param>
            </javadoc>
            <method name="setPropertyEditorClass" type="void" line="300">
                <params>
                    <param name="propertyEditorClass" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="303">
                Gets any explicit PropertyEditor Class that has been registered
                  for this property.                
                <return>
                    Any explicit PropertyEditor Class that has been registered
                      for this property.  Normally this will return "null",
                      indicating that no special editor has been registered,
                      so the PropertyEditorManager should be used to locate
                      a suitable PropertyEditor.                    
                </return>
            </javadoc>
            <method name="getPropertyEditorClass" type="Class<?>" line="312"/>
            <javadoc line="315">
                Constructs an instance of a property editor using the current
                  property editor class.
                  &lt;p&gt;
                  If the property editor class has a public constructor that takes an
                  Object argument then it will be invoked using the bean parameter
                  as the argument. Otherwise, the default constructor will be invoked.                
                <param>
                    bean the source object                    
                </param>
                <return>
                    a property editor instance or null if a property editor has
                      not been defined or cannot be created                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="createPropertyEditor" type="PropertyEditor" line="327">
                <params>
                    <param name="bean" type="Object"/>
                </params>
                <declaration name="editor" type="Object" line="328"/>
                <declaration name="cls" type="Class" line="329"/>
                <scope line="330">
                    <declaration name="ctor" type="Constructor" line="331"/>
                    <scope line="332">
                        <scope line="333"/>
                        <scope line="336"/>
                    </scope>
                    <scope line="339">
                        <scope line="340"/>
                        <scope line="343"/>
                    </scope>
                    <scope line="347"/>
                </scope>
            </method>
            <javadoc line="353">
                Compares this &lt;code&gt;PropertyDescriptor&lt;/code&gt; against the specified object.
                  Returns true if the objects are the same. Two &lt;code&gt;PropertyDescriptor&lt;/code&gt;s
                  are the same if the read, write, property types, property editor and
                  flags  are equivalent.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="360">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="361"/>
                <scope line="364">
                    <declaration name="other" type="PropertyDescriptor" line="365"/>
                    <declaration name="otherReadMethod" type="Method" line="366"/>
                    <declaration name="otherWriteMethod" type="Method" line="367"/>
                    <scope line="368"/>
                    <scope line="371"/>
                    <scope line="374"/>
                </scope>
            </method>
            <javadoc line="380">
                Package private helper method for Descriptor .equals methods.                
                <param>
                    a first method to compare                    
                </param>
                <param>
                    b second method to compare                    
                </param>
                <return>
                    boolean to indicate that the methods are equivalent                    
                </return>
            </javadoc>
            <method name="compareMethods" type="boolean" line="386">
                <params>
                    <param name="a" type="Method"/>
                    <param name="b" type="Method"/>
                </params>
                <scope line="387"/>
                <scope line="390">
                    <scope line="391"/>
                </scope>
            </method>
            <javadoc line="397">
                Package-private constructor.
                  Merge two property descriptors.  Where they conflict, give the
                  second argument (y) priority over the first argument (x).                
                <param>
                    x  The first (lower priority) PropertyDescriptor                    
                </param>
                <param>
                    y  The second (higher priority) PropertyDescriptor                    
                </param>
            </javadoc>
            <method name="PropertyDescriptor" type="constructor" line="404">
                <params>
                    <param name="x" type="PropertyDescriptor"/>
                    <param name="y" type="PropertyDescriptor"/>
                </params>
                <scope line="406"/>
                <scope line="409"/>
                <scope line="412"/>
                <scope line="415"/>
                <scope line="418"/>
                <scope line="421"/>
                <scope line="424"/>
                <scope line="427"/>
                <declaration name="xr" type="Method" line="430"/>
                <declaration name="yr" type="Method" line="431"/>
                <scope line="432">
                    <scope line="433"/>
                    <scope line="436"/>
                </scope>
                <scope line="440"/>
                <scope line="442">
                    <scope line="443"/>
                    <scope line="446"/>
                </scope>
                <declaration name="xw" type="Method" line="449"/>
                <declaration name="yw" type="Method" line="450"/>
                <scope line="451">
                    <scope line="452"/>
                    <scope line="455"/>
                </scope>
                <scope line="459"/>
                <scope line="461"/>
                <scope line="464"/>
            </method>
            <method name="PropertyDescriptor" type="constructor" line="470">
                <params>
                    <param name="old" type="PropertyDescriptor"/>
                </params>
            </method>
            <javadoc line="482">
                Returns the property type that corresponds to the read and write method.
                  The type precedence is given to the readMethod.                
                <return>
                    the type of the property descriptor or null if both
                      read and write methods are null.                    
                </return>
                <throws>
                    IntrospectionException if the read or write method is invalid                    
                </throws>
            </javadoc>
            <method name="findPropertyType" type="Class" line="489">
                <params>
                    <param name="readMethod" type="Method"/>
                    <param name="writeMethod" type="Method"/>
                </params>
                <declaration name="propertyType" type="Class" line="490"/>
                <scope line="491">
                    <scope line="492">
                        <declaration name="params" type="Class[]" line="493"/>
                        <scope line="494"/>
                        <scope line="498"/>
                    </scope>
                    <scope line="502">
                        <declaration name="params" type="Class" line="503"/>
                        <scope line="504"/>
                        <scope line="507"/>
                    </scope>
                </scope>
                <scope line="513"/>
            </method>
            <javadoc line="518">
                Returns a hash code value for the object.
                  See {@link java.lang.Object#hashCode} for a complete description.                
                <return>
                    a hash code value for this object.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="524">
                <declaration name="result" type="int" line="525"/>
            </method>
            <method name="getBaseName" type="String" line="537">
                <scope line="538"/>
            </method>
            <method name="appendTo" type="void" line="543">
                <params>
                    <param name="sb" type="StringBuilder"/>
                </params>
            </method>
        </class>
    </source>