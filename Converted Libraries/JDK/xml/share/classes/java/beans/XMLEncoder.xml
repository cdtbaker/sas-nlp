<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.lang.reflect"/>
        <import package="java.nio.charset.Charset"/>
        <import package="java.nio.charset.CharsetEncoder"/>
        <import package="java.nio.charset.IllegalCharsetNameException"/>
        <import package="java.nio.charset.UnsupportedCharsetException"/>
        <class name="XMLEncoder" line="35">
            <extends class="Encoder"/>
            <implements interface="AutoCloseable"/>
            <javadoc line="35">
                The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementary alternative to
                  the &lt;code&gt;ObjectOutputStream&lt;/code&gt; and can used to generate
                  a textual representation of a &lt;em&gt;JavaBean&lt;/em&gt; in the same
                  way that the &lt;code&gt;ObjectOutputStream&lt;/code&gt; can
                  be used to create binary representation of &lt;code&gt;Serializable&lt;/code&gt;
                  objects. For example, the following fragment can be used to create
                  a textual representation the supplied &lt;em&gt;JavaBean&lt;/em&gt;
                  and all its properties:
                  &lt;pre&gt;
                  XMLEncoder e = new XMLEncoder(
                  new BufferedOutputStream(
                  new FileOutputStream(&quot;Test.xml&quot;)));
                  e.writeObject(new JButton(&quot;Hello, world&quot;));
                  e.close();
                  &lt;/pre&gt;
                  Despite the similarity of their APIs, the &lt;code&gt;XMLEncoder&lt;/code&gt;
                  class is exclusively designed for the purpose of archiving graphs
                  of &lt;em&gt;JavaBean&lt;/em&gt;s as textual representations of their public
                  properties. Like Java source files, documents written this way
                  have a natural immunity to changes in the implementations of the classes
                  involved. The &lt;code&gt;ObjectOutputStream&lt;/code&gt; continues to be recommended
                  for interprocess communication and general purpose serialization.
                  &lt;p&gt;
                  The &lt;code&gt;XMLEncoder&lt;/code&gt; class provides a default denotation for
                  &lt;em&gt;JavaBean&lt;/em&gt;s in which they are represented as XML documents
                  complying with version 1.0 of the XML specification and the
                  UTF-8 character encoding of the Unicode/ISO 10646 character set.
                  The XML documents produced by the &lt;code&gt;XMLEncoder&lt;/code&gt; class are:
                  &lt;ul&gt;
                  &lt;li&gt;
                  &lt;em&gt;Portable and version resilient&lt;/em&gt;: they have no dependencies
                  on the private implementation of any class and so, like Java source
                  files, they may be exchanged between environments which may have
                  different versions of some of the classes and between VMs from
                  different vendors.
                  &lt;li&gt;
                  &lt;em&gt;Structurally compact&lt;/em&gt;: The &lt;code&gt;XMLEncoder&lt;/code&gt; class
                  uses a &lt;em&gt;redundancy elimination&lt;/em&gt; algorithm internally so that the
                  default values of a Bean&apos;s properties are not written to the stream.
                  &lt;li&gt;
                  &lt;em&gt;Fault tolerant&lt;/em&gt;: Non-structural errors in the file,
                  caused either by damage to the file or by API changes
                  made to classes in an archive remain localized
                  so that a reader can report the error and continue to load the parts
                  of the document which were not affected by the error.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Below is an example of an XML archive containing
                  some user interface components from the &lt;em&gt;swing&lt;/em&gt; toolkit:
                  &lt;pre&gt;
                  &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
                  &amp;lt;java version=&quot;1.0&quot; class=&quot;java.beans.XMLDecoder&quot;&amp;gt;
                  &amp;lt;object class=&quot;javax.swing.JFrame&quot;&amp;gt;
                  &amp;lt;void property=&quot;name&quot;&amp;gt;
                  &amp;lt;string&amp;gt;frame1&amp;lt;/string&amp;gt;
                  &amp;lt;/void&amp;gt;
                  &amp;lt;void property=&quot;bounds&quot;&amp;gt;
                  &amp;lt;object class=&quot;java.awt.Rectangle&quot;&amp;gt;
                  &amp;lt;int&amp;gt;0&amp;lt;/int&amp;gt;
                  &amp;lt;int&amp;gt;0&amp;lt;/int&amp;gt;
                  &amp;lt;int&amp;gt;200&amp;lt;/int&amp;gt;
                  &amp;lt;int&amp;gt;200&amp;lt;/int&amp;gt;
                  &amp;lt;/object&amp;gt;
                  &amp;lt;/void&amp;gt;
                  &amp;lt;void property=&quot;contentPane&quot;&amp;gt;
                  &amp;lt;void method=&quot;add&quot;&amp;gt;
                  &amp;lt;object class=&quot;javax.swing.JButton&quot;&amp;gt;
                  &amp;lt;void property=&quot;label&quot;&amp;gt;
                  &amp;lt;string&amp;gt;Hello&amp;lt;/string&amp;gt;
                  &amp;lt;/void&amp;gt;
                  &amp;lt;/object&amp;gt;
                  &amp;lt;/void&amp;gt;
                  &amp;lt;/void&amp;gt;
                  &amp;lt;void property=&quot;visible&quot;&amp;gt;
                  &amp;lt;boolean&amp;gt;true&amp;lt;/boolean&amp;gt;
                  &amp;lt;/void&amp;gt;
                  &amp;lt;/object&amp;gt;
                  &amp;lt;/java&amp;gt;
                  &lt;/pre&gt;
                  The XML syntax uses the following conventions:
                  &lt;ul&gt;
                  &lt;li&gt;
                  Each element represents a method call.
                  &lt;li&gt;
                  The &quot;object&quot; tag denotes an &lt;em&gt;expression&lt;/em&gt; whose value is
                  to be used as the argument to the enclosing element.
                  &lt;li&gt;
                  The &quot;void&quot; tag denotes a &lt;em&gt;statement&lt;/em&gt; which will
                  be executed, but whose result will not be used as an
                  argument to the enclosing method.
                  &lt;li&gt;
                  Elements which contain elements use those elements as arguments,
                  unless they have the tag: &quot;void&quot;.
                  &lt;li&gt;
                  The name of the method is denoted by the &quot;method&quot; attribute.
                  &lt;li&gt;
                  XML&apos;s standard &quot;id&quot; and &quot;idref&quot; attributes are used to make
                  references to previous expressions - so as to deal with
                  circularities in the object graph.
                  &lt;li&gt;
                  The &quot;class&quot; attribute is used to specify the target of a static
                  method or constructor explicitly; its value being the fully
                  qualified name of the class.
                  &lt;li&gt;
                  Elements with the &quot;void&quot; tag are executed using
                  the outer context as the target if no target is defined
                  by a &quot;class&quot; attribute.
                  &lt;li&gt;
                  Java&apos;s String class is treated specially and is
                  written &amp;lt;string&amp;gt;Hello, world&amp;lt;/string&amp;gt; where
                  the characters of the string are converted to bytes
                  using the UTF-8 character encoding.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Although all object graphs may be written using just these three
                  tags, the following definitions are included so that common
                  data structures can be expressed more concisely:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;
                  The default method name is &quot;new&quot;.
                  &lt;li&gt;
                  A reference to a java class is written in the form
                  &amp;lt;class&amp;gt;javax.swing.JButton&amp;lt;/class&amp;gt;.
                  &lt;li&gt;
                  Instances of the wrapper classes for Java&apos;s primitive types are written
                  using the name of the primitive type as the tag. For example, an
                  instance of the &lt;code&gt;Integer&lt;/code&gt; class could be written:
                  &amp;lt;int&amp;gt;123&amp;lt;/int&amp;gt;. Note that the &lt;code&gt;XMLEncoder&lt;/code&gt; class
                  uses Java&apos;s reflection package in which the conversion between
                  Java&apos;s primitive types and their associated &quot;wrapper classes&quot;
                  is handled internally. The API for the &lt;code&gt;XMLEncoder&lt;/code&gt; class
                  itself deals only with &lt;code&gt;Object&lt;/code&gt;s.
                  &lt;li&gt;
                  In an element representing a nullary method whose name
                  starts with &quot;get&quot;, the &quot;method&quot; attribute is replaced
                  with a &quot;property&quot; attribute whose value is given by removing
                  the &quot;get&quot; prefix and decapitalizing the result.
                  &lt;li&gt;
                  In an element representing a monadic method whose name
                  starts with &quot;set&quot;, the &quot;method&quot; attribute is replaced
                  with a &quot;property&quot; attribute whose value is given by removing
                  the &quot;set&quot; prefix and decapitalizing the result.
                  &lt;li&gt;
                  In an element representing a method named &quot;get&quot; taking one
                  integer argument, the &quot;method&quot; attribute is replaced
                  with an &quot;index&quot; attribute whose value the value of the
                  first argument.
                  &lt;li&gt;
                  In an element representing a method named &quot;set&quot; taking two arguments,
                  the first of which is an integer, the &quot;method&quot; attribute is replaced
                  with an &quot;index&quot; attribute whose value the value of the
                  first argument.
                  &lt;li&gt;
                  A reference to an array is written using the &quot;array&quot;
                  tag. The &quot;class&quot; and &quot;length&quot; attributes specify the
                  sub-type of the array and its length respectively.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  For more information you might also want to check out
                  &lt;a
                  href=&quot;http://java.sun.com/products/jfc/tsc/articles/persistence4&quot;&gt;Using XMLEncoder&lt;/a&gt;,
                  an article in &lt;em&gt;The Swing Connection.&lt;/em&gt;                
                <see>
                    XMLDecoder                    
                </see>
                <see>
                    java.io.ObjectOutputStream                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    Philip Milne                    
                </author>
            </javadoc>
            <declaration name="encoder" type="CharsetEncoder" line="209"/>
            <declaration name="charset" type="String" line="210"/>
            <declaration name="declaration" type="boolean" line="211"/>
            <declaration name="out" type="OutputStreamWriter" line="213"/>
            <declaration name="owner" type="Object" line="214"/>
            <declaration name="indentation" type="int" line="215"/>
            <declaration name="internal" type="boolean" line="216"/>
            <declaration name="valueToExpression" type="Map&lt;Object,ValueData&gt;" line="217"/>
            <declaration name="targetToStatementList" type="Map&lt;Object,List&lt;Statement&gt;&gt;" line="218"/>
            <declaration name="preambleWritten" type="boolean" line="219"/>
            <declaration name="nameGenerator" type="NameGenerator" line="220"/>
            <class name="ValueData" line="222">
                <comment line="225">
                    Marked -&gt; refs &gt; 0 unless ref was a target.                    
                </comment>
                <declaration name="refs" type="int" line="223"/>
                <declaration name="marked" type="boolean" line="224"/>
                <declaration name="name" type="String" line="225"/>
                <declaration name="exp" type="Expression" line="226"/>
            </class>
            <javadoc line="229">
                Creates a new XML encoder to write out &lt;em&gt;JavaBeans&lt;/em&gt;
                  to the stream &lt;code&gt;out&lt;/code&gt; using an XML encoding.                
                <param>
                    out  the stream to which the XML representation of
                      the objects will be written                    
                </param>
                <throws>
                    IllegalArgumentExceptionif <code>out</code> is <code>null</code>                    
                </throws>
                <see>
                    XMLDecoder#XMLDecoder(InputStream)                    
                </see>
            </javadoc>
            <method name="XMLEncoder" type="constructor" line="241">
                <params>
                    <param name="out" type="OutputStream"/>
                </params>
            </method>
            <javadoc line="245">
                Creates a new XML encoder to write out &lt;em&gt;JavaBeans&lt;/em&gt;
                  to the stream &lt;code&gt;out&lt;/code&gt; using the given &lt;code&gt;charset&lt;/code&gt;
                  starting from the given &lt;code&gt;indentation&lt;/code&gt;.                
                <param>
                    out          the stream to which the XML representation of
                      the objects will be written                    
                </param>
                <param>
                    charset      the name of the requested charset;
                      may be either a canonical name or an alias                    
                </param>
                <param>
                    declaration  whether the XML declaration should be generated;
                      set this to <code>false</code>
                      when embedding the contents in another XML document                    
                </param>
                <param>
                    indentation  the number of space characters to indent the entire XML document by                    
                </param>
                <throws>
                    IllegalArgumentExceptionif <code>out</code> or <code>charset</code> is <code>null</code>,
                      or if <code>indentation</code> is less than 0                    
                </throws>
                <throws>
                    IllegalCharsetNameExceptionif <code>charset</code> name is illegal                    
                </throws>
                <throws>
                    UnsupportedCharsetExceptionif no support for the named charset is available
                      in this instance of the Java virtual machine                    
                </throws>
                <throws>
                    UnsupportedOperationExceptionif loaded charset does not support encoding                    
                </throws>
                <see>
                    Charset#forName(String)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="XMLEncoder" type="constructor" line="277">
                <params>
                    <param name="out" type="OutputStream"/>
                    <param name="charset" type="String"/>
                    <param name="declaration" type="boolean"/>
                    <param name="indentation" type="int"/>
                </params>
                <scope line="278"/>
                <scope line="281"/>
                <declaration name="cs" type="Charset" line="284"/>
            </method>
            <javadoc line="295">
                Sets the owner of this encoder to &lt;code&gt;owner&lt;/code&gt;.                
                <param>
                    owner The owner of this encoder.                    
                </param>
                <see>
                    #getOwner                    
                </see>
            </javadoc>
            <method name="setOwner" type="void" line="302">
                <params>
                    <param name="owner" type="Object"/>
                </params>
            </method>
            <javadoc line="307">
                Gets the owner of this encoder.                
                <return>
                    The owner of this encoder.                    
                </return>
                <see>
                    #setOwner                    
                </see>
            </javadoc>
            <method name="getOwner" type="Object" line="314"/>
            <javadoc line="318">
                Write an XML representation of the specified object to the output.                
                <param>
                    o The object to be written to the stream.                    
                </param>
                <see>
                    XMLDecoder#readObject                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="325">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="326"/>
                <scope line="329"/>
            </method>
            <method name="statementList" type="List<Statement>" line="334">
                <params>
                    <param name="target" type="Object"/>
                </params>
                <declaration name="list" type="List&lt;Statement&gt;" line="335"/>
                <scope line="336"/>
            </method>
            <method name="mark" type="void" line="344">
                <params>
                    <param name="o" type="Object"/>
                    <param name="isArgument" type="boolean"/>
                </params>
                <comment line="350">
                    Do not mark liternal strings. Other strings, which might,                    
                </comment>
                <comment line="351">
                    for example, come from resource bundles should still be marked.                    
                </comment>
                <comment line="356">
                    Bump the reference counts of all arguments                    
                </comment>
                <comment line="368">
                    Pending: Why does the reference count need to                    
                </comment>
                <comment line="369">
                    be incremented here?                    
                </comment>
                <scope line="345"/>
                <declaration name="d" type="ValueData" line="348"/>
                <declaration name="exp" type="Expression" line="349"/>
                <scope line="352"/>
                <scope line="357"/>
                <scope line="360"/>
                <declaration name="target" type="Object" line="364"/>
                <scope line="366"/>
            </method>
            <method name="mark" type="void" line="374">
                <params>
                    <param name="stm" type="Statement"/>
                </params>
                <declaration name="args" type="Object[]" line="375"/>
                <scope line="376">
                    <declaration name="arg" type="Object" line="377"/>
                </scope>
            </method>
            <javadoc line="384">
                Records the Statement so that the Encoder will
                  produce the actual output when the stream is flushed.
                  &lt;P&gt;
                  This method should only be invoked within the context
                  of initializing a persistence delegate.                
                <param>
                    oldStm The statement that will be written
                      to the stream.                    
                </param>
                <see>
                    java.beans.PersistenceDelegate#initialize                    
                </see>
            </javadoc>
            <method name="writeStatement" type="void" line="395">
                <params>
                    <param name="oldStm" type="Statement"/>
                </params>
                <comment line="396">
                    System.out.println(&quot;XMLEncoder::writeStatement: &quot; + oldStm);                    
                </comment>
                <comment line="401">
                    Note we must do the mark first as we may
                    require the results of previous values in
                    this context for this statement.
                    Test case is:
                    os.setOwner(this);
                    os.writeObject(this);                    
                </comment>
                <declaration name="internal" type="boolean" line="397"/>
                <scope line="399">
                    <declaration name="target" type="Object" line="410"/>
                    <scope line="411">
                        <declaration name="method" type="String" line="412"/>
                        <declaration name="args" type="Object[]" line="413"/>
                        <scope line="414"/>
                        <scope line="416"/>
                        <scope line="419"/>
                    </scope>
                </scope>
                <scope line="425"/>
            </method>
            <javadoc line="432">
                Records the Expression so that the Encoder will
                  produce the actual output when the stream is flushed.
                  &lt;P&gt;
                  This method should only be invoked within the context of
                  initializing a persistence delegate or setting up an encoder to
                  read from a resource bundle.
                  &lt;P&gt;
                  For more information about using resource bundles with the
                  XMLEncoder, see
                  http://java.sun.com/products/jfc/tsc/articles/persistence4/#i18n                
                <param>
                    oldExp The expression that will be written
                      to the stream.                    
                </param>
                <see>
                    java.beans.PersistenceDelegate#initialize                    
                </see>
            </javadoc>
            <method name="writeExpression" type="void" line="448">
                <params>
                    <param name="oldExp" type="Expression"/>
                </params>
                <declaration name="internal" type="boolean" line="449"/>
                <declaration name="oldValue" type="Object" line="451"/>
                <scope line="452"/>
            </method>
            <javadoc line="459">
                This method writes out the preamble associated with the
                  XML encoding if it has not been written already and
                  then writes out all of the values that been
                  written to the stream since the last time &lt;code&gt;flush&lt;/code&gt;
                  was called. After flushing, all internal references to the
                  values that were written to this stream are cleared.                
            </javadoc>
            <method name="flush" type="void" line="467">
                <comment line="468">
                    Don&apos;t do this in constructor - it throws ... pending.                    
                </comment>
                <scope line="468">
                    <scope line="469"/>
                </scope>
                <declaration name="statements" type="List&lt;Statement&gt;" line="478"/>
                <scope line="479">
                    <declaration name="s" type="Statement" line="480"/>
                    <scope line="481"/>
                    <scope line="484"/>
                </scope>
                <scope line="490"/>
                <scope line="493"/>
            </method>
            <method name="clear" type="void" line="499"/>
            <javadoc line="507">
                This method calls &lt;code&gt;flush&lt;/code&gt;, writes the closing
                  postamble and then closes the output stream associated
                  with this stream.                
            </javadoc>
            <method name="close" type="void" line="512">
                <scope line="515"/>
                <scope line="518"/>
            </method>
            <method name="quote" type="String" line="523">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="getValueData" type="ValueData" line="527">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="d" type="ValueData" line="528"/>
                <scope line="529"/>
            </method>
            <javadoc line="536">
                Returns &lt;code&gt;true&lt;/code&gt; if the argument,
                  a Unicode code point, is valid in XML documents.
                  Unicode characters fit into the low sixteen bits of a Unicode code point,
                  and pairs of Unicode &lt;em&gt;surrogate characters&lt;/em&gt; can be combined
                  to encode Unicode code point in documents containing only Unicode.
                  (The &lt;code&gt;char&lt;/code&gt; datatype in the Java Programming Language
                  represents Unicode characters, including unpaired surrogates.)
                  &lt;par&gt;
                  [2] Char ::= #x0009 | #x000A | #x000D
                  | [#x0020-#xD7FF]
                  | [#xE000-#xFFFD]
                  | [#x10000-#x10ffff]
                  &lt;/par&gt;                
                <param>
                    code  the 32-bit Unicode code point being tested                    
                </param>
                <return>
                    <code>true</code> if the Unicode code point is valid,
                      <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="isValidCharCode" type="boolean" line="555">
                <params>
                    <param name="code" type="int"/>
                </params>
            </method>
            <method name="writeln" type="void" line="564">
                <params>
                    <param name="exp" type="String"/>
                </params>
                <scope line="565">
                    <declaration name="sb" type="StringBuilder" line="566"/>
                    <scope line="567"/>
                </scope>
                <scope line="574"/>
            </method>
            <method name="outputValue" type="void" line="579">
                <params>
                    <param name="value" type="Object"/>
                    <param name="outer" type="Object"/>
                    <param name="isArgument" type="boolean"/>
                </params>
                <comment line="611">
                    Make sure that character types are quoted correctly.                    
                </comment>
                <scope line="580"/>
                <scope line="585"/>
                <declaration name="d" type="ValueData" line="590"/>
                <scope line="591">
                    <declaration name="target" type="Object" line="592"/>
                    <declaration name="methodName" type="String" line="593"/>
                    <scope line="595"/>
                    <scope line="600">
                        <declaration name="f" type="Field" line="601"/>
                    </scope>
                    <declaration name="primitiveType" type="Class" line="607"/>
                    <scope line="609">
                        <declaration name="primitiveTypeName" type="String" line="610"/>
                        <scope line="612">
                            <declaration name="code" type="char" line="613"/>
                            <scope line="614"/>
                            <scope line="619"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="628"/>
                <scope line="633"/>
                <scope line="636"/>
            </method>
            <method name="quoteCharCode" type="String" line="641">
                <params>
                    <param name="code" type="int"/>
                </params>
            </method>
            <method name="createString" type="String" line="653">
                <params>
                    <param name="code" type="int"/>
                </params>
            </method>
            <method name="createString" type="String" line="657">
                <params>
                    <param name="string" type="String"/>
                </params>
                <declaration name="sb" type="StringBuilder" line="658"/>
                <declaration name="index" type="int" line="660"/>
                <scope line="661">
                    <declaration name="point" type="int" line="662"/>
                    <declaration name="count" type="int" line="663"/>
                    <scope line="665">
                        <declaration name="value" type="String" line="666"/>
                        <scope line="667"/>
                        <scope line="669"/>
                    </scope>
                    <scope line="673"/>
                </scope>
            </method>
            <method name="outputStatement" type="void" line="682">
                <params>
                    <param name="exp" type="Statement"/>
                    <param name="outer" type="Object"/>
                    <param name="isArgument" type="boolean"/>
                </params>
                <comment line="699">
                    Special cases for targets.                    
                </comment>
                <comment line="730">
                    Special cases for methods.                    
                </comment>
                <declaration name="target" type="Object" line="683"/>
                <declaration name="methodName" type="String" line="684"/>
                <scope line="686"/>
                <declaration name="args" type="Object[]" line="691"/>
                <declaration name="expression" type="boolean" line="692"/>
                <declaration name="value" type="Object" line="693"/>
                <declaration name="tag" type="String" line="695"/>
                <declaration name="attributes" type="String" line="696"/>
                <declaration name="d" type="ValueData" line="697"/>
                <scope line="700"/>
                <scope line="702"/>
                <scope line="708"/>
                <scope line="711">
                    <declaration name="statements" type="List&lt;Statement&gt;" line="714"/>
                    <scope line="715"/>
                    <scope line="719"/>
                </scope>
                <scope line="724">
                    <declaration name="instanceName" type="String" line="725"/>
                </scope>
                <scope line="734"/>
                <scope line="739">
                    <scope line="740"/>
                </scope>
                <scope line="745"/>
            </method>
            <method name="outputXML" type="void" line="751">
                <params>
                    <param name="tag" type="String"/>
                    <param name="attributes" type="String"/>
                    <param name="value" type="Object"/>
                    <param name="args" type="Object"/>
                </params>
                <comment line="753">
                    Use XML&apos;s short form when there is no body.                    
                </comment>
                <declaration name="statements" type="List&lt;Statement&gt;" line="752"/>
                <scope line="754"/>
                <scope line="762"/>
                <scope line="766">
                    <declaration name="s" type="Statement" line="767"/>
                </scope>
            </method>
        </class>
    </source>