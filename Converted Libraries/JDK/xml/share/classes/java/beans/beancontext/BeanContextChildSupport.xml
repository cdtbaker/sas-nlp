<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans.beancontext">
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeSupport"/>
        <import package="java.beans.VetoableChangeListener"/>
        <import package="java.beans.VetoableChangeSupport"/>
        <import package="java.beans.PropertyVetoException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <class name="BeanContextChildSupport" line="12">
            <implements interface="BeanContextChild"/>
            <implements interface="BeanContextServicesListener"/>
            <implements interface="Serializable"/>
            <javadoc line="12">
                &lt;p&gt;
                  This is a general support class to provide support for implementing the
                  BeanContextChild protocol.
                  This class may either be directly subclassed, or encapsulated and delegated
                  to in order to implement this interface for a given component.
                  &lt;/p&gt;                
                <author>
                    Laurence P. G. Cable                    
                </author>
                <since>
                    1.2                    
                </since>
                <see>
                    java.beans.beancontext.BeanContext                    
                </see>
                <see>
                    java.beans.beancontext.BeanContextServices                    
                </see>
                <see>
                    java.beans.beancontext.BeanContextChild                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="26"/>
            <javadoc line="27">
                construct a BeanContextChildSupport where this class has been
                  subclassed in order to implement the JavaBean component itself.                
            </javadoc>
            <method name="BeanContextChildSupport" type="constructor" line="31"/>
            <javadoc line="37">
                construct a BeanContextChildSupport where the JavaBean component
                  itself implements BeanContextChild, and encapsulates this, delegating
                  that interface to this implementation                
            </javadoc>
            <method name="BeanContextChildSupport" type="constructor" line="42">
                <params>
                    <param name="bcc" type="BeanContextChild"/>
                </params>
            </method>
            <javadoc line="48">
                Sets the &lt;code&gt;BeanContext&lt;/code&gt; for
                  this &lt;code&gt;BeanContextChildSupport&lt;/code&gt;.                
                <param>
                    bc the new value to be assigned to the &lt;code&gt;BeanContext&lt;/code&gt;
                      property                    
                </param>
                <throws>
                    &lt;code&gt;PropertyVetoException&lt;/code&gt; if the change is rejected                    
                </throws>
            </javadoc>
            <method name="setBeanContext" type="void" line="55">
                <params>
                    <param name="bc" type="BeanContext"/>
                </params>
                <declaration name="oldValue" type="BeanContext" line="57"/>
                <declaration name="newValue" type="BeanContext" line="58"/>
                <scope line="59">
                    <scope line="60"/>
                    <scope line="63"/>
                    <scope line="66"/>
                </scope>
            </method>
            <javadoc line="77">
                Gets the nesting &lt;code&gt;BeanContext&lt;/code&gt;
                  for this &lt;code&gt;BeanContextChildSupport&lt;/code&gt;.                
                <return>
                    the nesting &lt;code&gt;BeanContext&lt;/code&gt; for
                      this &lt;code&gt;BeanContextChildSupport&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getBeanContext" type="BeanContext" line="83"/>
            <javadoc line="86">
                Add a PropertyChangeListener for a specific property.
                  The same listener object may be added more than once.  For each
                  property,  the listener will be invoked the number of times it was added
                  for that property.
                  If &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;pcl&lt;/code&gt; is null, no exception is thrown
                  and no action is taken.                
                <param>
                    name The name of the property to listen on                    
                </param>
                <param>
                    pcl The &lt;code&gt;PropertyChangeListener&lt;/code&gt; to be added                    
                </param>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="96">
                <params>
                    <param name="name" type="String"/>
                    <param name="pcl" type="PropertyChangeListener"/>
                </params>
            </method>
            <javadoc line="99">
                Remove a PropertyChangeListener for a specific property.
                  If &lt;code&gt;pcl&lt;/code&gt; was added more than once to the same event
                  source for the specified property, it will be notified one less time
                  after being removed.
                  If &lt;code&gt;name&lt;/code&gt; is null, no exception is thrown
                  and no action is taken.
                  If &lt;code&gt;pcl&lt;/code&gt; is null, or was never added for the specified
                  property, no exception is thrown and no action is taken.                
                <param>
                    name The name of the property that was listened on                    
                </param>
                <param>
                    pcl The PropertyChangeListener to be removed                    
                </param>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="111">
                <params>
                    <param name="name" type="String"/>
                    <param name="pcl" type="PropertyChangeListener"/>
                </params>
            </method>
            <javadoc line="114">
                Add a VetoableChangeListener for a specific property.
                  The same listener object may be added more than once.  For each
                  property,  the listener will be invoked the number of times it was added
                  for that property.
                  If &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;vcl&lt;/code&gt; is null, no exception is thrown
                  and no action is taken.                
                <param>
                    name The name of the property to listen on                    
                </param>
                <param>
                    vcl The &lt;code&gt;VetoableChangeListener&lt;/code&gt; to be added                    
                </param>
            </javadoc>
            <method name="addVetoableChangeListener" type="void" line="124">
                <params>
                    <param name="name" type="String"/>
                    <param name="vcl" type="VetoableChangeListener"/>
                </params>
            </method>
            <javadoc line="127">
                Removes a &lt;code&gt;VetoableChangeListener&lt;/code&gt;.
                  If &lt;code&gt;pcl&lt;/code&gt; was added more than once to the same event
                  source for the specified property, it will be notified one less time
                  after being removed.
                  If &lt;code&gt;name&lt;/code&gt; is null, no exception is thrown
                  and no action is taken.
                  If &lt;code&gt;vcl&lt;/code&gt; is null, or was never added for the specified
                  property, no exception is thrown and no action is taken.                
                <param>
                    name The name of the property that was listened on                    
                </param>
                <param>
                    vcl The &lt;code&gt;VetoableChangeListener&lt;/code&gt; to be removed                    
                </param>
            </javadoc>
            <method name="removeVetoableChangeListener" type="void" line="139">
                <params>
                    <param name="name" type="String"/>
                    <param name="vcl" type="VetoableChangeListener"/>
                </params>
            </method>
            <javadoc line="142">
                A service provided by the nesting BeanContext has been revoked.
                  Subclasses may override this method in order to implement their own
                  behaviors.                
                <param>
                    bcsre The &lt;code&gt;BeanContextServiceRevokedEvent&lt;/code&gt; fired as a
                      result of a service being revoked                    
                </param>
            </javadoc>
            <method name="serviceRevoked" type="void" line="149">
                <params>
                    <param name="bcsre" type="BeanContextServiceRevokedEvent"/>
                </params>
            </method>
            <javadoc line="151">
                A new service is available from the nesting BeanContext.
                  Subclasses may override this method in order to implement their own
                  behaviors                
                <param>
                    bcsae The BeanContextServiceAvailableEvent fired as a
                      result of a service becoming available                    
                </param>
            </javadoc>
            <method name="serviceAvailable" type="void" line="158">
                <params>
                    <param name="bcsae" type="BeanContextServiceAvailableEvent"/>
                </params>
            </method>
            <javadoc line="160">
                Gets the &lt;tt&gt;BeanContextChild&lt;/tt&gt; associated with this
                  &lt;tt&gt;BeanContextChildSupport&lt;/tt&gt;.                
                <return>
                    the &lt;tt&gt;BeanContextChild&lt;/tt&gt; peer of this class                    
                </return>
            </javadoc>
            <method name="getBeanContextChildPeer" type="BeanContextChild" line="165"/>
            <javadoc line="168">
                Reports whether or not this class is a delegate of another.                
                <return>
                    true if this class is a delegate of another                    
                </return>
            </javadoc>
            <method name="isDelegated" type="boolean" line="172"/>
            <javadoc line="175">
                Report a bound property update to any registered listeners. No event is
                  fired if old and new are equal and non-null.                
                <param>
                    name The programmatic name of the property that was changed                    
                </param>
                <param>
                    oldValue  The old value of the property                    
                </param>
                <param>
                    newValue  The new value of the property                    
                </param>
            </javadoc>
            <method name="firePropertyChange" type="void" line="182">
                <params>
                    <param name="name" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
            </method>
            <javadoc line="185">
                Report a vetoable property update to any registered listeners.
                  If anyone vetos the change, then fire a new event
                  reverting everyone to the old value and then rethrow
                  the PropertyVetoException. &lt;P&gt;
                  No event is fired if old and new are equal and non-null.
                  &lt;P&gt;                
                <param>
                    name The programmatic name of the property that is about to
                      change                    
                </param>
                <param>
                    oldValue The old value of the property                    
                </param>
                <param>
                    newValue - The new value of the property                    
                </param>
                <throws>
                    PropertyVetoException if the recipient wishes the property
                      change to be rolled back.                    
                </throws>
            </javadoc>
            <method name="fireVetoableChange" type="void" line="199">
                <params>
                    <param name="name" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
            </method>
            <javadoc line="202">
                Called from setBeanContext to validate (or otherwise) the
                  pending change in the nesting BeanContext property value.
                  Returning false will cause setBeanContext to throw
                  PropertyVetoException.                
                <param>
                    newValue the new value that has been requested for
                      the BeanContext property                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the change operation is to be vetoed                    
                </return>
            </javadoc>
            <method name="validatePendingSetBeanContext" type="boolean" line="211">
                <params>
                    <param name="newValue" type="BeanContext"/>
                </params>
            </method>
            <javadoc line="214">
                This method may be overridden by subclasses to provide their own
                  release behaviors. When invoked any resources held by this instance
                  obtained from its current BeanContext property should be released
                  since the object is no longer nested within that BeanContext.                
            </javadoc>
            <method name="releaseBeanContextResources" type="void" line="220"/>
            <javadoc line="222">
                This method may be overridden by subclasses to provide their own
                  initialization behaviors. When invoked any resources requried by the
                  BeanContextChild should be obtained from the current BeanContext.                
            </javadoc>
            <method name="initializeBeanContextResources" type="void" line="227"/>
            <javadoc line="229">
                Write the persistence state of the object.                
            </javadoc>
            <method name="writeObject" type="void" line="232">
                <params>
                    <param name="oos" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="236">
                Restore a persistent object, must wait for subsequent setBeanContext()
                  to fully restore any resources obtained from the new nesting
                  BeanContext                
            </javadoc>
            <method name="readObject" type="void" line="241">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
            </method>
            <declaration name="beanContextChildPeer" type="BeanContextChild" line="244"/>
            <javadoc line="244">
                The &lt;code&gt;BeanContext&lt;/code&gt; in which
                  this &lt;code&gt;BeanContextChild&lt;/code&gt; is nested.                
            </javadoc>
            <declaration name="pcSupport" type="PropertyChangeSupport" line="249"/>
            <javadoc line="249">
                The &lt;tt&gt;PropertyChangeSupport&lt;/tt&gt; associated with this
                  &lt;tt&gt;BeanContextChildSupport&lt;/tt&gt;.                
            </javadoc>
            <declaration name="vcSupport" type="VetoableChangeSupport" line="254"/>
            <javadoc line="254">
                The &lt;tt&gt;VetoableChangeSupport&lt;/tt&gt; associated with this
                  &lt;tt&gt;BeanContextChildSupport&lt;/tt&gt;.                
            </javadoc>
            <declaration name="beanContext" type="BeanContext" line="259"/>
            <declaration name="rejectedSetBCOnce" type="boolean" line="260"/>
            <javadoc line="260">
                A flag indicating that there has been
                  at least one &lt;code&gt;PropertyChangeVetoException&lt;/code&gt;
                  thrown for the attempted setBeanContext operation.                
            </javadoc>
        </class>
    </source>