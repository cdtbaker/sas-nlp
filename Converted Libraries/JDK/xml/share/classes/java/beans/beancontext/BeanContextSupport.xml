<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans.beancontext">
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.beans.Beans"/>
        <import package="java.beans.AppletInitializer"/>
        <import package="java.beans.DesignMode"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeSupport"/>
        <import package="java.beans.VetoableChangeListener"/>
        <import package="java.beans.VetoableChangeSupport"/>
        <import package="java.beans.PropertyVetoException"/>
        <import package="java.beans.Visibility"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.net.URL"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <class name="BeanContextSupport" line="26">
            <extends class="BeanContextChildSupport"/>
            <implements interface="BeanContext"/>
            <implements interface="Serializable"/>
            <implements interface="PropertyChangeListener"/>
            <implements interface="VetoableChangeListener"/>
            <javadoc line="26">
                This helper class provides a utility implementation of the
                  java.beans.beancontext.BeanContext interface.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Since this class directly implements the BeanContext interface, the class
                  can, and is intended to be used either by subclassing this implementation,
                  or via ad-hoc delegation of an instance of this class from another.
                  &lt;/p&gt;                
                <author>
                    Laurence P. G. Cable                    
                </author>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="39"/>
            <javadoc line="40">
                Construct a BeanContextSupport instance                
                <param>
                    peer      The peer &lt;tt&gt;BeanContext&lt;/tt&gt; we are
                      supplying an implementation for,
                      or &lt;tt&gt;null&lt;/tt&gt;
                      if this object is its own peer                    
                </param>
                <param>
                    lcle      The current Locale for this BeanContext. If
                      &lt;tt&gt;lcle&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, the default locale
                      is assigned to the &lt;tt&gt;BeanContext&lt;/tt&gt; instance.                    
                </param>
                <param>
                    dTime     The initial state,
                      &lt;tt&gt;true&lt;/tt&gt; if in design mode,
                      &lt;tt&gt;false&lt;/tt&gt; if runtime.                    
                </param>
                <param>
                    visible   The initial visibility.                    
                </param>
                <see>
                    java.util.Locale#getDefault()                    
                </see>
                <see>
                    java.util.Locale#setDefault(java.util.Locale)                    
                </see>
            </javadoc>
            <method name="BeanContextSupport" type="constructor" line="56">
                <params>
                    <param name="peer" type="BeanContext"/>
                    <param name="lcle" type="Locale"/>
                    <param name="dTime" type="boolean"/>
                    <param name="visible" type="boolean"/>
                </params>
            </method>
            <javadoc line="63">
                Create an instance using the specified Locale and design mode.                
                <param>
                    peer      The peer &lt;tt&gt;BeanContext&lt;/tt&gt; we
                      are supplying an implementation for,
                      or &lt;tt&gt;null&lt;/tt&gt; if this object is its own peer                    
                </param>
                <param>
                    lcle      The current Locale for this &lt;tt&gt;BeanContext&lt;/tt&gt;. If
                      &lt;tt&gt;lcle&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, the default locale
                      is assigned to the &lt;tt&gt;BeanContext&lt;/tt&gt; instance.                    
                </param>
                <param>
                    dtime     The initial state, &lt;tt&gt;true&lt;/tt&gt;
                      if in design mode,
                      &lt;tt&gt;false&lt;/tt&gt; if runtime.                    
                </param>
                <see>
                    java.util.Locale#getDefault()                    
                </see>
                <see>
                    java.util.Locale#setDefault(java.util.Locale)                    
                </see>
            </javadoc>
            <method name="BeanContextSupport" type="constructor" line="77">
                <params>
                    <param name="peer" type="BeanContext"/>
                    <param name="lcle" type="Locale"/>
                    <param name="dtime" type="boolean"/>
                </params>
            </method>
            <javadoc line="80">
                Create an instance using the specified locale                
                <param>
                    peer      The peer BeanContext we are
                      supplying an implementation for,
                      or &lt;tt&gt;null&lt;/tt&gt; if this object
                      is its own peer                    
                </param>
                <param>
                    lcle      The current Locale for this
                      &lt;tt&gt;BeanContext&lt;/tt&gt;. If
                      &lt;tt&gt;lcle&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;,
                      the default locale
                      is assigned to the &lt;tt&gt;BeanContext&lt;/tt&gt;
                      instance.                    
                </param>
                <see>
                    java.util.Locale#getDefault()                    
                </see>
                <see>
                    java.util.Locale#setDefault(java.util.Locale)                    
                </see>
            </javadoc>
            <method name="BeanContextSupport" type="constructor" line="95">
                <params>
                    <param name="peer" type="BeanContext"/>
                    <param name="lcle" type="Locale"/>
                </params>
            </method>
            <javadoc line="98">
                Create an instance using with a default locale                
                <param>
                    peer      The peer &lt;tt&gt;BeanContext&lt;/tt&gt; we are
                      supplying an implementation for,
                      or &lt;tt&gt;null&lt;/tt&gt; if this object
                      is its own peer                    
                </param>
            </javadoc>
            <method name="BeanContextSupport" type="constructor" line="105">
                <params>
                    <param name="peer" type="BeanContext"/>
                </params>
            </method>
            <javadoc line="108">
                Create an instance that is not a delegate of another object                
            </javadoc>
            <method name="BeanContextSupport" type="constructor" line="111"/>
            <javadoc line="114">
                Gets the instance of &lt;tt&gt;BeanContext&lt;/tt&gt; that
                  this object is providing the implementation for.                
                <return>
                    the BeanContext instance                    
                </return>
            </javadoc>
            <method name="getBeanContextPeer" type="BeanContext" line="119"/>
            <javadoc line="122">
                &lt;p&gt;
                  The instantiateChild method is a convenience hook
                  in BeanContext to simplify
                  the task of instantiating a Bean, nested,
                  into a &lt;tt&gt;BeanContext&lt;/tt&gt;.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The semantics of the beanName parameter are defined by java.beans.Beans.instantate.
                  &lt;/p&gt;                
                <param>
                    beanName the name of the Bean to instantiate within this BeanContext                    
                </param>
                <throws>
                    IOException if there is an I/O error when the bean is being deserialized                    
                </throws>
                <throws>
                    ClassNotFoundException if the class
                      identified by the beanName parameter is not found                    
                </throws>
                <return>
                    the new object                    
                </return>
            </javadoc>
            <method name="instantiateChild" type="Object" line="138">
                <params>
                    <param name="beanName" type="String"/>
                </params>
                <declaration name="bc" type="BeanContext" line="139"/>
            </method>
            <javadoc line="142">
                Gets the number of children currently nested in
                  this BeanContext.                
                <return>
                    number of children                    
                </return>
            </javadoc>
            <method name="size" type="int" line="147">
                <scope line="148"/>
            </method>
            <javadoc line="152">
                Reports whether or not this
                  &lt;tt&gt;BeanContext&lt;/tt&gt; is empty.
                  A &lt;tt&gt;BeanContext&lt;/tt&gt; is considered
                  empty when it contains zero
                  nested children.                
                <return>
                    if there are not children                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="160">
                <scope line="161"/>
            </method>
            <javadoc line="165">
                Determines whether or not the specified object
                  is currently a child of this &lt;tt&gt;BeanContext&lt;/tt&gt;.                
                <param>
                    o the Object in question                    
                </param>
                <return>
                    if this object is a child                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="171">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="172"/>
            </method>
            <javadoc line="176">
                Determines whether or not the specified object
                  is currently a child of this &lt;tt&gt;BeanContext&lt;/tt&gt;.                
                <param>
                    o the Object in question                    
                </param>
                <return>
                    if this object is a child                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="182">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="183"/>
            </method>
            <javadoc line="187">
                Gets all JavaBean or &lt;tt&gt;BeanContext&lt;/tt&gt; instances
                  currently nested in this &lt;tt&gt;BeanContext&lt;/tt&gt;.                
                <return>
                    an &lt;tt&gt;Iterator&lt;/tt&gt; of the nested children                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator" line="192">
                <scope line="193"/>
            </method>
            <javadoc line="197">
                Gets all JavaBean or &lt;tt&gt;BeanContext&lt;/tt&gt;
                  instances currently nested in this BeanContext.                
            </javadoc>
            <method name="toArray" type="Object[]" line="201">
                <scope line="202"/>
            </method>
            <javadoc line="206">
                Gets an array containing all children of
                  this &lt;tt&gt;BeanContext&lt;/tt&gt; that match
                  the types contained in arry.                
                <param>
                    arry The array of object
                      types that are of interest.                    
                </param>
                <return>
                    an array of children                    
                </return>
            </javadoc>
            <method name="toArray" type="Object[]" line="214">
                <params>
                    <param name="arry" type="Object[]"/>
                </params>
                <scope line="215"/>
            </method>
            <class name="BCSIterator" line="219">
                <implements interface="Iterator"/>
                <javadoc line="219">
                    protected final subclass that encapsulates an iterator but implements
                      a noop remove() method.                    
                </javadoc>
                <method name="BCSIterator" type="constructor" line="224">
                    <params>
                        <param name="i" type="Iterator"/>
                    </params>
                </method>
                <method name="hasNext" type="boolean" line="228"/>
                <method name="next" type="Object" line="231"/>
                <method name="remove" type="void" line="234"/>
                <declaration name="src" type="Iterator" line="236"/>
            </class>
            <class name="BCSChild" line="238">
                <implements interface="Serializable"/>
                <javadoc line="238">
                                        
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="241"/>
                <method name="BCSChild" type="constructor" line="242">
                    <params>
                        <param name="bcc" type="Object"/>
                        <param name="peer" type="Object"/>
                    </params>
                </method>
                <method name="getChild" type="Object" line="247"/>
                <method name="setRemovePending" type="void" line="250">
                    <params>
                        <param name="v" type="boolean"/>
                    </params>
                </method>
                <method name="isRemovePending" type="boolean" line="253"/>
                <method name="isProxyPeer" type="boolean" line="256"/>
                <method name="getProxyPeer" type="Object" line="259"/>
                <declaration name="child" type="Object" line="262"/>
                <declaration name="proxyPeer" type="Object" line="263"/>
                <declaration name="removePending" type="boolean" line="264"/>
            </class>
            <javadoc line="266">
                &lt;p&gt;
                  Subclasses can override this method to insert their own subclass
                  of Child without having to override add() or the other Collection
                  methods that add children to the set.
                  &lt;/p&gt;                
                <param>
                    targetChild the child to create the Child on behalf of                    
                </param>
                <param>
                    peer        the peer if the tragetChild and the peer are related by an implementation of BeanContextProxy                    
                </param>
            </javadoc>
            <method name="createBCSChild" type="BCSChild" line="275">
                <params>
                    <param name="targetChild" type="Object"/>
                    <param name="peer" type="Object"/>
                </params>
            </method>
            <javadoc line="278">
                Adds/nests a child within this &lt;tt&gt;BeanContext&lt;/tt&gt;.
                  &lt;p&gt;
                  Invoked as a side effect of java.beans.Beans.instantiate().
                  If the child object is not valid for adding then this method
                  throws an IllegalStateException.
                  &lt;/p&gt;                
                <param>
                    targetChild The child objects to nest
                      within this &lt;tt&gt;BeanContext&lt;/tt&gt;                    
                </param>
                <return>
                    true if the child was added successfully.                    
                </return>
                <see>
                    #validatePendingAdd                    
                </see>
            </javadoc>
            <method name="add" type="boolean" line="290">
                <params>
                    <param name="targetChild" type="Object"/>
                </params>
                <scope line="293">
                    <scope line="295"/>
                    <declaration name="cbcc" type="BeanContextChild" line="298"/>
                    <declaration name="bccp" type="BeanContextChild" line="299"/>
                    <scope line="300">
                        <scope line="301"/>
                        <declaration name="bcsc" type="BCSChild" line="305"/>
                        <declaration name="pbcsc" type="BCSChild" line="306"/>
                        <scope line="307"/>
                        <scope line="311">
                            <scope line="312"/>
                            <scope line="315">
                                <scope line="316"/>
                            </scope>
                        </scope>
                        <declaration name="v" type="Visibility" line="325"/>
                        <scope line="326"/>
                        <scope line="332">
                            <scope line="334"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="346">
                Removes a child from this BeanContext.  If the child object is not
                  for adding then this method throws an IllegalStateException.                
                <param>
                    targetChild The child objects to remove                    
                </param>
                <see>
                    #validatePendingRemove                    
                </see>
            </javadoc>
            <method name="remove" type="boolean" line="352">
                <params>
                    <param name="targetChild" type="Object"/>
                </params>
            </method>
            <javadoc line="355">
                internal remove used when removal caused by
                  unexpected &lt;tt&gt;setBeanContext&lt;/tt&gt; or
                  by &lt;tt&gt;remove()&lt;/tt&gt; invocation.                
                <param>
                    targetChild the JavaBean, BeanContext, or Object to be removed                    
                </param>
                <param>
                    callChildSetBC used to indicate that
                      the child should be notified that it is no
                      longer nested in this &lt;tt&gt;BeanContext&lt;/tt&gt;.                    
                </param>
            </javadoc>
            <method name="remove" type="boolean" line="364">
                <params>
                    <param name="targetChild" type="Object"/>
                    <param name="callChildSetBC" type="boolean"/>
                </params>
                <scope line="366">
                    <scope line="368"/>
                    <declaration name="bcsc" type="BCSChild" line="371"/>
                    <declaration name="pbcsc" type="BCSChild" line="372"/>
                    <declaration name="peer" type="Object" line="373"/>
                    <scope line="374">
                        <scope line="375">
                            <declaration name="cbcc" type="BeanContextChild" line="376"/>
                            <scope line="377">
                                <scope line="380"/>
                                <scope line="383"/>
                            </scope>
                        </scope>
                        <scope line="390">
                            <scope line="392"/>
                        </scope>
                        <scope line="399"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="408">
                Tests to see if all objects in the
                  specified &lt;tt&gt;Collection&lt;/tt&gt; are children of
                  this &lt;tt&gt;BeanContext&lt;/tt&gt;.                
                <param>
                    c the specified &lt;tt&gt;Collection&lt;/tt&gt;                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if all objects
                      in the collection are children of
                      this &lt;tt&gt;BeanContext&lt;/tt&gt;, false if not.                    
                </return>
            </javadoc>
            <method name="containsAll" type="boolean" line="417">
                <params>
                    <param name="c" type="Collection"/>
                </params>
                <scope line="418">
                    <declaration name="i" type="Iterator" line="419"/>
                </scope>
            </method>
            <javadoc line="424">
                add Collection to set of Children (Unsupported)
                  implementations must synchronized on the hierarchy lock and &quot;children&quot; protected field                
                <throws>
                    UnsupportedOperationException                    
                </throws>
            </javadoc>
            <method name="addAll" type="boolean" line="429">
                <params>
                    <param name="c" type="Collection"/>
                </params>
            </method>
            <javadoc line="432">
                remove all specified children (Unsupported)
                  implementations must synchronized on the hierarchy lock and &quot;children&quot; protected field                
                <throws>
                    UnsupportedOperationException                    
                </throws>
            </javadoc>
            <method name="removeAll" type="boolean" line="437">
                <params>
                    <param name="c" type="Collection"/>
                </params>
            </method>
            <javadoc line="440">
                retain only specified children (Unsupported)
                  implementations must synchronized on the hierarchy lock and &quot;children&quot; protected field                
                <throws>
                    UnsupportedOperationException                    
                </throws>
            </javadoc>
            <method name="retainAll" type="boolean" line="445">
                <params>
                    <param name="c" type="Collection"/>
                </params>
            </method>
            <javadoc line="448">
                clear the children (Unsupported)
                  implementations must synchronized on the hierarchy lock and &quot;children&quot; protected field                
                <throws>
                    UnsupportedOperationException                    
                </throws>
            </javadoc>
            <method name="clear" type="void" line="453"/>
            <javadoc line="456">
                Adds a BeanContextMembershipListener                
                <param>
                    bcml the BeanContextMembershipListener to add                    
                </param>
                <throws>
                    NullPointerException                    
                </throws>
            </javadoc>
            <method name="addBeanContextMembershipListener" type="void" line="461">
                <params>
                    <param name="bcml" type="BeanContextMembershipListener"/>
                </params>
                <scope line="463"/>
            </method>
            <javadoc line="468">
                Removes a BeanContextMembershipListener                
                <param>
                    bcml the BeanContextMembershipListener to remove                    
                </param>
                <throws>
                    NullPointerException                    
                </throws>
            </javadoc>
            <method name="removeBeanContextMembershipListener" type="void" line="473">
                <params>
                    <param name="bcml" type="BeanContextMembershipListener"/>
                </params>
                <scope line="475"/>
            </method>
            <javadoc line="480">
                @param name the name of the resource requested.                
                <param>
                    bcc  the child object making the request.                    
                </param>
                <return>
                    the requested resource as an InputStream                    
                </return>
                <throws>
                    NullPointerException                    
                </throws>
            </javadoc>
            <method name="getResourceAsStream" type="InputStream" line="486">
                <params>
                    <param name="name" type="String"/>
                    <param name="bcc" type="BeanContextChild"/>
                </params>
                <scope line="489">
                    <declaration name="cl" type="ClassLoader" line="490"/>
                </scope>
            </method>
            <javadoc line="495">
                @param name the name of the resource requested.                
                <param>
                    bcc  the child object making the request.                    
                </param>
                <return>
                    the requested resource as an InputStream                    
                </return>
            </javadoc>
            <method name="getResource" type="URL" line="500">
                <params>
                    <param name="name" type="String"/>
                    <param name="bcc" type="BeanContextChild"/>
                </params>
                <scope line="503">
                    <declaration name="cl" type="ClassLoader" line="504"/>
                </scope>
            </method>
            <javadoc line="509">
                Sets the new design time value for this &lt;tt&gt;BeanContext&lt;/tt&gt;.                
                <param>
                    dTime the new designTime value                    
                </param>
            </javadoc>
            <method name="setDesignTime" type="void" line="513">
                <params>
                    <param name="dTime" type="boolean"/>
                </params>
                <scope line="514"/>
            </method>
            <javadoc line="519">
                Reports whether or not this object is in
                  currently in design time mode.                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if in design time mode,
                      &lt;tt&gt;false&lt;/tt&gt; if not                    
                </return>
            </javadoc>
            <method name="isDesignTime" type="boolean" line="525"/>
            <javadoc line="528">
                Sets the locale of this BeanContext.                
                <param>
                    newLocale the new locale. This method call will have
                      no effect if newLocale is &lt;CODE&gt;null&lt;/CODE&gt;.                    
                </param>
                <throws>
                    PropertyVetoException if the new value is rejected                    
                </throws>
            </javadoc>
            <method name="setLocale" type="void" line="534">
                <params>
                    <param name="newLocale" type="Locale"/>
                </params>
                <scope line="535">
                    <declaration name="old" type="Locale" line="536"/>
                </scope>
            </method>
            <javadoc line="542">
                Gets the locale for this &lt;tt&gt;BeanContext&lt;/tt&gt;.                
                <return>
                    the current Locale of the &lt;tt&gt;BeanContext&lt;/tt&gt;                    
                </return>
            </javadoc>
            <method name="getLocale" type="Locale" line="546"/>
            <javadoc line="549">
                &lt;p&gt;
                  This method is typically called from the environment in order to determine
                  if the implementor &quot;needs&quot; a GUI.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The algorithm used herein tests the BeanContextPeer, and its current children
                  to determine if they are either Containers, Components, or if they implement
                  Visibility and return needsGui() == true.
                  &lt;/p&gt;                
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the implementor needs a GUI                    
                </return>
            </javadoc>
            <method name="needsGui" type="boolean" line="561">
                <declaration name="bc" type="BeanContext" line="562"/>
                <scope line="563"/>
                <scope line="567">
                    <scope line="568">
                        <declaration name="c" type="Object" line="569"/>
                        <scope line="570"/>
                        <scope line="573"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="580">
                notify this instance that it may no longer render a GUI.                
            </javadoc>
            <method name="dontUseGui" type="void" line="583">
                <scope line="584">
                    <scope line="586">
                        <scope line="587">
                            <declaration name="v" type="Visibility" line="588"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="594">
                Notify this instance that it may now render a GUI                
            </javadoc>
            <method name="okToUseGui" type="void" line="597">
                <scope line="598">
                    <scope line="600">
                        <scope line="601">
                            <declaration name="v" type="Visibility" line="602"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="608">
                Used to determine if the &lt;tt&gt;BeanContext&lt;/tt&gt;
                  child is avoiding using its GUI.                
                <return>
                    is this instance avoiding using its GUI?                    
                </return>
                <see>
                    Visibility                    
                </see>
            </javadoc>
            <method name="avoidingGui" type="boolean" line="614"/>
            <javadoc line="617">
                Is this &lt;tt&gt;BeanContext&lt;/tt&gt; in the
                  process of being serialized?                
                <return>
                    if this &lt;tt&gt;BeanContext&lt;/tt&gt; is
                      currently being serialized                    
                </return>
            </javadoc>
            <method name="isSerializing" type="boolean" line="623"/>
            <javadoc line="626">
                Returns an iterator of all children
                  of this &lt;tt&gt;BeanContext&lt;/tt&gt;.                
                <return>
                    an iterator for all the current BCSChild values                    
                </return>
            </javadoc>
            <method name="bcsChildren" type="Iterator" line="631">
                <scope line="632"/>
            </method>
            <javadoc line="636">
                called by writeObject after defaultWriteObject() but prior to
                  serialization of currently serializable children.
                  This method may be overridden by subclasses to perform custom
                  serialization of their state prior to this superclass serializing
                  the children.
                  This method should not however be used by subclasses to replace their
                  own implementation (if any) of writeObject().                
            </javadoc>
            <method name="bcsPreSerializationHook" type="void" line="645">
                <params>
                    <param name="oos" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="647">
                called by readObject after defaultReadObject() but prior to
                  deserialization of any children.
                  This method may be overridden by subclasses to perform custom
                  deserialization of their state prior to this superclass deserializing
                  the children.
                  This method should not however be used by subclasses to replace their
                  own implementation (if any) of readObject().                
            </javadoc>
            <method name="bcsPreDeserializationHook" type="void" line="656">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="658">
                Called by readObject with the newly deserialized child and BCSChild.                
                <param>
                    child the newly deserialized child                    
                </param>
                <param>
                    bcsc the newly deserialized BCSChild                    
                </param>
            </javadoc>
            <method name="childDeserializedHook" type="void" line="663">
                <params>
                    <param name="child" type="Object"/>
                    <param name="bcsc" type="BCSChild"/>
                </params>
                <scope line="664"/>
            </method>
            <javadoc line="668">
                Used by writeObject to serialize a Collection.                
                <param>
                    oos the &lt;tt&gt;ObjectOutputStream&lt;/tt&gt;
                      to use during serialization                    
                </param>
                <param>
                    coll the &lt;tt&gt;Collection&lt;/tt&gt; to serialize                    
                </param>
                <throws>
                    IOException if serialization failed                    
                </throws>
            </javadoc>
            <method name="serialize" type="void" line="675">
                <params>
                    <param name="oos" type="ObjectOutputStream"/>
                    <param name="coll" type="Collection"/>
                </params>
                <declaration name="count" type="int" line="676"/>
                <declaration name="objects" type="Object[]" line="677"/>
                <scope line="678"/>
                <scope line="683">
                    <declaration name="o" type="Object" line="684"/>
                    <scope line="685"/>
                </scope>
            </method>
            <javadoc line="691">
                used by readObject to deserialize a collection.                
                <param>
                    ois the ObjectInputStream to use                    
                </param>
                <param>
                    coll the Collection                    
                </param>
            </javadoc>
            <method name="deserialize" type="void" line="696">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                    <param name="coll" type="Collection"/>
                </params>
                <declaration name="count" type="int" line="697"/>
                <scope line="699"/>
            </method>
            <javadoc line="703">
                Used to serialize all children of
                  this &lt;tt&gt;BeanContext&lt;/tt&gt;.                
                <param>
                    oos the &lt;tt&gt;ObjectOutputStream&lt;/tt&gt;
                      to use during serialization                    
                </param>
                <throws>
                    IOException if serialization failed                    
                </throws>
            </javadoc>
            <method name="writeChildren" type="void" line="710">
                <params>
                    <param name="oos" type="ObjectOutputStream"/>
                </params>
                <declaration name="prev" type="boolean" line="712"/>
                <declaration name="count" type="int" line="714"/>
                <scope line="715">
                    <declaration name="i" type="Iterator" line="716"/>
                    <scope line="717">
                        <declaration name="entry" type="Map.Entry" line="718"/>
                        <scope line="719">
                            <scope line="720"/>
                            <scope line="724"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="733"/>
            </method>
            <javadoc line="737">
                Serialize the BeanContextSupport, if this instance has a distinct
                  peer (that is this object is acting as a delegate for another) then
                  the children of this instance are not serialized here due to a
                  &apos;chicken and egg&apos; problem that occurs on deserialization of the
                  children at the same time as this instance.
                  Therefore in situations where there is a distinct peer to this instance
                  it should always call writeObject() followed by writeChildren() and
                  readObject() followed by readChildren().                
                <param>
                    oos the ObjectOutputStream                    
                </param>
            </javadoc>
            <method name="writeObject" type="void" line="748">
                <params>
                    <param name="oos" type="ObjectOutputStream"/>
                </params>
                <scope line="750">
                    <scope line="751"/>
                    <scope line="757"/>
                </scope>
            </method>
            <javadoc line="762">
                When an instance of this class is used as a delegate for the
                  implementation of the BeanContext protocols (and its subprotocols)
                  there exists a &apos;chicken and egg&apos; problem during deserialization                
            </javadoc>
            <method name="readChildren" type="void" line="767">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <declaration name="count" type="int" line="768"/>
                <scope line="769">
                    <declaration name="child" type="Object" line="770"/>
                    <declaration name="bscc" type="BeanContextSupport.BCSChild" line="771"/>
                    <scope line="772"/>
                    <scope line="776"/>
                    <scope line="779"/>
                    <scope line="782">
                        <declaration name="bcc" type="BeanContextChild" line="783"/>
                        <scope line="784"/>
                        <scope line="787"/>
                        <scope line="789">
                            <scope line="790"/>
                            <scope line="795"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="803">
                deserialize contents ... if this instance has a distinct peer the
                  children are not serialized here, the peer&apos;s readObject() must call
                  readChildren() after deserializing this instance.                
            </javadoc>
            <method name="readObject" type="void" line="808">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <scope line="809"/>
            </method>
            <javadoc line="817">
                subclasses may envelope to monitor veto child property changes.                
            </javadoc>
            <method name="vetoableChange" type="void" line="820">
                <params>
                    <param name="pce" type="PropertyChangeEvent"/>
                </params>
                <declaration name="propertyName" type="String" line="821"/>
                <declaration name="source" type="Object" line="822"/>
                <scope line="823">
                    <scope line="824">
                        <scope line="825"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="832">
                subclasses may envelope to monitor child property changes.                
            </javadoc>
            <method name="propertyChange" type="void" line="835">
                <params>
                    <param name="pce" type="PropertyChangeEvent"/>
                </params>
                <declaration name="propertyName" type="String" line="836"/>
                <declaration name="source" type="Object" line="837"/>
                <scope line="838">
                    <scope line="839">
                        <declaration name="bc" type="BeanContext" line="840"/>
                        <scope line="841"/>
                        <scope line="844"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="850">
                &lt;p&gt;
                  Subclasses of this class may override, or envelope, this method to
                  add validation behavior for the BeanContext to examine child objects
                  immediately prior to their being added to the BeanContext.
                  &lt;/p&gt;                
                <return>
                    true iff the child may be added to this BeanContext, otherwise false.                    
                </return>
            </javadoc>
            <method name="validatePendingAdd" type="boolean" line="858">
                <params>
                    <param name="targetChild" type="Object"/>
                </params>
            </method>
            <javadoc line="861">
                &lt;p&gt;
                  Subclasses of this class may override, or envelope, this method to
                  add validation behavior for the BeanContext to examine child objects
                  immediately prior to their being removed from the BeanContext.
                  &lt;/p&gt;                
                <return>
                    true iff the child may be removed from this BeanContext, otherwise false.                    
                </return>
            </javadoc>
            <method name="validatePendingRemove" type="boolean" line="869">
                <params>
                    <param name="targetChild" type="Object"/>
                </params>
            </method>
            <javadoc line="872">
                subclasses may override this method to simply extend add() semantics
                  after the child has been added and before the event notification has
                  occurred. The method is called with the child synchronized.                
            </javadoc>
            <method name="childJustAddedHook" type="void" line="877">
                <params>
                    <param name="child" type="Object"/>
                    <param name="bcsc" type="BCSChild"/>
                </params>
            </method>
            <javadoc line="879">
                subclasses may override this method to simply extend remove() semantics
                  after the child has been removed and before the event notification has
                  occurred. The method is called with the child synchronized.                
            </javadoc>
            <method name="childJustRemovedHook" type="void" line="884">
                <params>
                    <param name="child" type="Object"/>
                    <param name="bcsc" type="BCSChild"/>
                </params>
            </method>
            <javadoc line="886">
                Gets the Component (if any) associated with the specified child.                
                <param>
                    child the specified child                    
                </param>
                <return>
                    the Component (if any) associated with the specified child.                    
                </return>
            </javadoc>
            <method name="getChildVisibility" type="Visibility" line="891">
                <params>
                    <param name="child" type="Object"/>
                </params>
                <scope line="892"/>
                <scope line="895"/>
            </method>
            <javadoc line="899">
                Gets the Serializable (if any) associated with the specified Child                
                <param>
                    child the specified child                    
                </param>
                <return>
                    the Serializable (if any) associated with the specified Child                    
                </return>
            </javadoc>
            <method name="getChildSerializable" type="Serializable" line="904">
                <params>
                    <param name="child" type="Object"/>
                </params>
                <scope line="905"/>
                <scope line="908"/>
            </method>
            <javadoc line="912">
                Gets the PropertyChangeListener
                  (if any) of the specified child                
                <param>
                    child the specified child                    
                </param>
                <return>
                    the PropertyChangeListener (if any) of the specified child                    
                </return>
            </javadoc>
            <method name="getChildPropertyChangeListener" type="PropertyChangeListener" line="918">
                <params>
                    <param name="child" type="Object"/>
                </params>
                <scope line="919"/>
                <scope line="922"/>
            </method>
            <javadoc line="926">
                Gets the VetoableChangeListener
                  (if any) of the specified child                
                <param>
                    child the specified child                    
                </param>
                <return>
                    the VetoableChangeListener (if any) of the specified child                    
                </return>
            </javadoc>
            <method name="getChildVetoableChangeListener" type="VetoableChangeListener" line="932">
                <params>
                    <param name="child" type="Object"/>
                </params>
                <scope line="933"/>
                <scope line="936"/>
            </method>
            <javadoc line="940">
                Gets the BeanContextMembershipListener
                  (if any) of the specified child                
                <param>
                    child the specified child                    
                </param>
                <return>
                    the BeanContextMembershipListener (if any) of the specified child                    
                </return>
            </javadoc>
            <method name="getChildBeanContextMembershipListener" type="BeanContextMembershipListener" line="946">
                <params>
                    <param name="child" type="Object"/>
                </params>
                <scope line="947"/>
                <scope line="950"/>
            </method>
            <javadoc line="954">
                Gets the BeanContextChild (if any) of the specified child                
                <param>
                    child the specified child                    
                </param>
                <return>
                    the BeanContextChild (if any) of the specified child                    
                </return>
                <throws>
                    IllegalArgumentException if child implements both BeanContextChild and BeanContextProxy                    
                </throws>
            </javadoc>
            <method name="getChildBeanContextChild" type="BeanContextChild" line="960">
                <params>
                    <param name="child" type="Object"/>
                </params>
                <scope line="961">
                    <declaration name="bcc" type="BeanContextChild" line="962"/>
                </scope>
                <scope line="966">
                    <scope line="967"/>
                    <scope line="970"/>
                </scope>
            </method>
            <javadoc line="975">
                Fire a BeanContextshipEvent on the BeanContextMembershipListener interface                
            </javadoc>
            <method name="fireChildrenAdded" type="void" line="978">
                <params>
                    <param name="bcme" type="BeanContextMembershipEvent"/>
                </params>
                <declaration name="copy" type="Object[]" line="979"/>
                <scope line="980"/>
            </method>
            <javadoc line="985">
                Fire a BeanContextshipEvent on the BeanContextMembershipListener interface                
            </javadoc>
            <method name="fireChildrenRemoved" type="void" line="988">
                <params>
                    <param name="bcme" type="BeanContextMembershipEvent"/>
                </params>
                <declaration name="copy" type="Object[]" line="989"/>
                <scope line="990"/>
            </method>
            <javadoc line="995">
                protected method called from constructor and readObject to initialize
                  transient state of BeanContextSupport instance.
                  This class uses this method to instantiate inner class listeners used
                  to monitor PropertyChange and VetoableChange events on children.
                  subclasses may envelope this method to add their own initialization
                  behavior                
            </javadoc>
            <method name="initialize" type="void" line="1003">
                <anonymous_class line="1006">
                    <method name="propertyChange" type="void" line="1007">
                        <params>
                            <param name="pce" type="PropertyChangeEvent"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="1012">
                    <method name="vetoableChange" type="void" line="1013">
                        <params>
                            <param name="pce" type="PropertyChangeEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="1019">
                Gets a copy of the this BeanContext&apos;s children.                
                <return>
                    a copy of the current nested children                    
                </return>
            </javadoc>
            <method name="copyChildren" type="Object[]" line="1023">
                <scope line="1024"/>
            </method>
            <javadoc line="1028">
                Tests to see if two class objects,
                  or their names are equal.                
                <param>
                    first the first object                    
                </param>
                <param>
                    second the second object                    
                </param>
                <return>
                    true if equal, false if not                    
                </return>
            </javadoc>
            <method name="classEquals" type="boolean" line="1035">
                <params>
                    <param name="first" type="Class"/>
                    <param name="second" type="Class"/>
                </params>
            </method>
            <declaration name="children" type="HashMap" line="1038"/>
            <javadoc line="1038">
                all accesses to the &lt;code&gt; protected HashMap children &lt;/code&gt; field
                  shall be synchronized on that object.                
            </javadoc>
            <declaration name="serializable" type="int" line="1043"/>
            <declaration name="bcmListeners" type="ArrayList" line="1044"/>
            <javadoc line="1044">
                all accesses to the &lt;code&gt; protected ArrayList bcmListeners &lt;/code&gt; field
                  shall be synchronized on that object.                
            </javadoc>
            <declaration name="locale" type="Locale" line="1049"/>
            <javadoc line="1049">
                The current locale of this BeanContext.                
            </javadoc>
            <declaration name="okToUseGui" type="boolean" line="1053"/>
            <javadoc line="1053">
                A &lt;tt&gt;boolean&lt;/tt&gt; indicating if this
                  instance may now render a GUI.                
            </javadoc>
            <declaration name="designTime" type="boolean" line="1058"/>
            <javadoc line="1058">
                A &lt;tt&gt;boolean&lt;/tt&gt; indicating whether or not
                  this object is currently in design time mode.                
            </javadoc>
            <declaration name="childPCL" type="PropertyChangeListener" line="1063"/>
            <declaration name="childVCL" type="VetoableChangeListener" line="1064"/>
            <declaration name="serializing" type="boolean" line="1065"/>
        </class>
    </source>