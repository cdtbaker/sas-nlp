<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Modifier"/>
        <class name="EventSetDescriptor" line="5">
            <extends class="FeatureDescriptor"/>
            <javadoc line="5">
                An EventSetDescriptor describes a group of events that a given Java
                  bean fires.
                  &lt;P&gt;
                  The given group of events are all delivered as method calls on a single
                  event listener interface, and an event listener object can be registered
                  via a call on a registration method supplied by the event source.                
            </javadoc>
            <declaration name="listenerMethodDescriptors" type="MethodDescriptor[]" line="14"/>
            <declaration name="addMethodDescriptor" type="MethodDescriptor" line="15"/>
            <declaration name="removeMethodDescriptor" type="MethodDescriptor" line="16"/>
            <declaration name="getMethodDescriptor" type="MethodDescriptor" line="17"/>
            <declaration name="listenerMethodsRef" type="Reference&amp;lt;Method[]&amp;gt;" line="18"/>
            <declaration name="listenerTypeRef" type="Reference&amp;lt;Class&amp;gt;" line="19"/>
            <declaration name="unicast" type="boolean" line="20"/>
            <declaration name="inDefaultEventSet" type="boolean" line="21"/>
            <javadoc line="22">
                Creates an &lt;TT&gt;EventSetDescriptor&lt;/TT&gt; assuming that you are
                  following the most simple standard design pattern where a named
                  event &amp;quot;fred&amp;quot; is (1) delivered as a call on the single method of
                  interface FredListener, (2) has a single argument of type FredEvent,
                  and (3) where the FredListener may be registered with a call on an
                  addFredListener method of the source component and removed with a
                  call on a removeFredListener method.                
                <param>
                    sourceClass  The class firing the event.                    
                </param>
                <param>
                    eventSetName  The programmatic name of the event.  E.g. &amp;quot;fred&amp;quot;.
                      Note that this should normally start with a lower-case character.                    
                </param>
                <param>
                    listenerType  The target interface that events
                      will get delivered to.                    
                </param>
                <param>
                    listenerMethodName  The method that will get called when the event gets
                      delivered to its target listener interface.                    
                </param>
                <exception>
                    IntrospectionException if an exception occurs during
                      introspection.                    
                </exception>
            </javadoc>
            <method name="EventSetDescriptor" type="constructor" line="40">
                <params>
                    <param name="sourceClass" type="Class&lt;?&gt;"/>
                    <param name="eventSetName" type="String"/>
                    <param name="listenerType" type="Class&lt;?&gt;"/>
                    <param name="listenerMethodName" type="String"/>
                </params>
                <declaration name="eventName" type="String" line="42"/>
                <declaration name="listenerMethods" type="Method[]" line="43"/>
                <scope line="44">
                    <declaration name="args" type="Class[]" line="45"/>
                    <scope line="46"/>
                </scope>
            </method>
            <method name="getListenerClassName" type="String" line="51">
                <params>
                    <param name="cls" type="Class"/>
                </params>
                <declaration name="className" type="String" line="52"/>
            </method>
            <javadoc line="55">
                Creates an &lt;TT&gt;EventSetDescriptor&lt;/TT&gt; from scratch using
                  string names.                
                <param>
                    sourceClass  The class firing the event.                    
                </param>
                <param>
                    eventSetName The programmatic name of the event set.
                      Note that this should normally start with a lower-case character.                    
                </param>
                <param>
                    listenerType  The Class of the target interface that events
                      will get delivered to.                    
                </param>
                <param>
                    listenerMethodNames The names of the methods that will get called
                      when the event gets delivered to its target listener interface.                    
                </param>
                <param>
                    addListenerMethodName  The name of the method on the event source
                      that can be used to register an event listener object.                    
                </param>
                <param>
                    removeListenerMethodName  The name of the method on the event source
                      that can be used to de-register an event listener object.                    
                </param>
                <exception>
                    IntrospectionException if an exception occurs during
                      introspection.                    
                </exception>
            </javadoc>
            <method name="EventSetDescriptor" type="constructor" line="72">
                <params>
                    <param name="sourceClass" type="Class&lt;?&gt;"/>
                    <param name="eventSetName" type="String"/>
                    <param name="listenerType" type="Class&lt;?&gt;"/>
                    <param name="listenerMethodNames" type="String"/>
                    <param name="addListenerMethodName" type="String"/>
                    <param name="removeListenerMethodName" type="String"/>
                </params>
            </method>
            <javadoc line="75">
                This constructor creates an EventSetDescriptor from scratch using
                  string names.                
                <param>
                    sourceClass  The class firing the event.                    
                </param>
                <param>
                    eventSetName The programmatic name of the event set.
                      Note that this should normally start with a lower-case character.                    
                </param>
                <param>
                    listenerType  The Class of the target interface that events
                      will get delivered to.                    
                </param>
                <param>
                    listenerMethodNames The names of the methods that will get called
                      when the event gets delivered to its target listener interface.                    
                </param>
                <param>
                    addListenerMethodName  The name of the method on the event source
                      that can be used to register an event listener object.                    
                </param>
                <param>
                    removeListenerMethodName  The name of the method on the event source
                      that can be used to de-register an event listener object.                    
                </param>
                <param>
                    getListenerMethodName The method on the event source that
                      can be used to access the array of event listener objects.                    
                </param>
                <exception>
                    IntrospectionException if an exception occurs during
                      introspection.                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="EventSetDescriptor" type="constructor" line="95">
                <params>
                    <param name="sourceClass" type="Class&lt;?&gt;"/>
                    <param name="eventSetName" type="String"/>
                    <param name="listenerType" type="Class&lt;?&gt;"/>
                    <param name="listenerMethodNames" type="String"/>
                    <param name="addListenerMethodName" type="String"/>
                    <param name="removeListenerMethodName" type="String"/>
                    <param name="getListenerMethodName" type="String"/>
                </params>
                <scope line="96"/>
                <declaration name="listenerMethods" type="Method[]" line="102"/>
                <scope line="103">
                    <scope line="104"/>
                </scope>
                <declaration name="method" type="Method" line="112"/>
                <scope line="113"/>
            </method>
            <method name="getMethod" type="Method" line="117">
                <params>
                    <param name="cls" type="Class"/>
                    <param name="name" type="String"/>
                    <param name="args" type="int"/>
                </params>
                <scope line="118"/>
                <declaration name="method" type="Method" line="121"/>
                <scope line="122"/>
            </method>
            <javadoc line="127">
                Creates an &lt;TT&gt;EventSetDescriptor&lt;/TT&gt; from scratch using
                  &lt;TT&gt;java.lang.reflect.Method&lt;/TT&gt; and &lt;TT&gt;java.lang.Class&lt;/TT&gt; objects.                
                <param>
                    eventSetName The programmatic name of the event set.                    
                </param>
                <param>
                    listenerType The Class for the listener interface.                    
                </param>
                <param>
                    listenerMethods  An array of Method objects describing each
                      of the event handling methods in the target listener.                    
                </param>
                <param>
                    addListenerMethod  The method on the event source
                      that can be used to register an event listener object.                    
                </param>
                <param>
                    removeListenerMethod  The method on the event source
                      that can be used to de-register an event listener object.                    
                </param>
                <exception>
                    IntrospectionException if an exception occurs during
                      introspection.                    
                </exception>
            </javadoc>
            <method name="EventSetDescriptor" type="constructor" line="141">
                <params>
                    <param name="eventSetName" type="String"/>
                    <param name="listenerType" type="Class&lt;?&gt;"/>
                    <param name="listenerMethods" type="Method"/>
                    <param name="addListenerMethod" type="Method"/>
                    <param name="removeListenerMethod" type="Method"/>
                </params>
            </method>
            <javadoc line="144">
                This constructor creates an EventSetDescriptor from scratch using
                  java.lang.reflect.Method and java.lang.Class objects.                
                <param>
                    eventSetName The programmatic name of the event set.                    
                </param>
                <param>
                    listenerType The Class for the listener interface.                    
                </param>
                <param>
                    listenerMethods  An array of Method objects describing each
                      of the event handling methods in the target listener.                    
                </param>
                <param>
                    addListenerMethod  The method on the event source
                      that can be used to register an event listener object.                    
                </param>
                <param>
                    removeListenerMethod  The method on the event source
                      that can be used to de-register an event listener object.                    
                </param>
                <param>
                    getListenerMethod The method on the event source
                      that can be used to access the array of event listener objects.                    
                </param>
                <exception>
                    IntrospectionException if an exception occurs during
                      introspection.                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="EventSetDescriptor" type="constructor" line="161">
                <params>
                    <param name="eventSetName" type="String"/>
                    <param name="listenerType" type="Class&lt;?&gt;"/>
                    <param name="listenerMethods" type="Method"/>
                    <param name="addListenerMethod" type="Method"/>
                    <param name="removeListenerMethod" type="Method"/>
                    <param name="getListenerMethod" type="Method"/>
                </params>
            </method>
            <javadoc line="169">
                Creates an &lt;TT&gt;EventSetDescriptor&lt;/TT&gt; from scratch using
                  &lt;TT&gt;java.lang.reflect.MethodDescriptor&lt;/TT&gt; and &lt;TT&gt;java.lang.Class&lt;/TT&gt;
                  objects.                
                <param>
                    eventSetName The programmatic name of the event set.                    
                </param>
                <param>
                    listenerType The Class for the listener interface.                    
                </param>
                <param>
                    listenerMethodDescriptors  An array of MethodDescriptor objects
                      describing each of the event handling methods in the
                      target listener.                    
                </param>
                <param>
                    addListenerMethod  The method on the event source
                      that can be used to register an event listener object.                    
                </param>
                <param>
                    removeListenerMethod  The method on the event source
                      that can be used to de-register an event listener object.                    
                </param>
                <exception>
                    IntrospectionException if an exception occurs during
                      introspection.                    
                </exception>
            </javadoc>
            <method name="EventSetDescriptor" type="constructor" line="185">
                <params>
                    <param name="eventSetName" type="String"/>
                    <param name="listenerType" type="Class&lt;?&gt;"/>
                    <param name="listenerMethodDescriptors" type="MethodDescriptor"/>
                    <param name="addListenerMethod" type="Method"/>
                    <param name="removeListenerMethod" type="Method"/>
                </params>
            </method>
            <javadoc line="192">
                Gets the &lt;TT&gt;Class&lt;/TT&gt; object for the target interface.                
                <return>
                    The Class object for the target interface that will
                      get invoked when the event is fired.                    
                </return>
            </javadoc>
            <method name="getListenerType" type="Class&lt;?&gt;" line="197"/>
            <method name="setListenerType" type="void" line="200">
                <params>
                    <param name="cls" type="Class"/>
                </params>
            </method>
            <javadoc line="203">
                Gets the methods of the target listener interface.                
                <return>
                    An array of &lt;TT&gt;Method&lt;/TT&gt; objects for the target methods
                      within the target listener interface that will get called when
                      events are fired.                    
                </return>
            </javadoc>
            <method name="getListenerMethods" type="Method[]" line="209">
                <declaration name="methods" type="Method[]" line="210"/>
                <scope line="211">
                    <scope line="212">
                        <scope line="214"/>
                    </scope>
                </scope>
            </method>
            <method name="setListenerMethods" type="void" line="222">
                <params>
                    <param name="methods" type="Method[]"/>
                </params>
                <scope line="223"/>
                <scope line="226">
                    <scope line="228"/>
                </scope>
            </method>
            <method name="getListenerMethods0" type="Method[]" line="234"/>
            <javadoc line="237">
                Gets the &lt;code&gt;MethodDescriptor&lt;/code&gt;s of the target listener interface.                
                <return>
                    An array of &lt;code&gt;MethodDescriptor&lt;/code&gt; objects for the target methods
                      within the target listener interface that will get called when
                      events are fired.                    
                </return>
            </javadoc>
            <method name="getListenerMethodDescriptors" type="MethodDescriptor[]" line="243"/>
            <javadoc line="246">
                Gets the method used to add event listeners.                
                <return>
                    The method used to register a listener at the event source.                    
                </return>
            </javadoc>
            <method name="getAddListenerMethod" type="Method" line="250"/>
            <method name="setAddListenerMethod" type="void" line="253">
                <params>
                    <param name="method" type="Method"/>
                </params>
                <scope line="254"/>
                <scope line="257"/>
            </method>
            <javadoc line="263">
                Gets the method used to remove event listeners.                
                <return>
                    The method used to remove a listener at the event source.                    
                </return>
            </javadoc>
            <method name="getRemoveListenerMethod" type="Method" line="267"/>
            <method name="setRemoveListenerMethod" type="void" line="270">
                <params>
                    <param name="method" type="Method"/>
                </params>
                <scope line="271"/>
                <scope line="274"/>
            </method>
            <javadoc line="280">
                Gets the method used to access the registered event listeners.                
                <return>
                    The method used to access the array of listeners at the event
                      source or null if it doesn&apos;t exist.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getGetListenerMethod" type="Method" line="286"/>
            <method name="setGetListenerMethod" type="void" line="289">
                <params>
                    <param name="method" type="Method"/>
                </params>
                <scope line="290"/>
                <scope line="293"/>
            </method>
            <javadoc line="299">
                Mark an event set as unicast (or not).                
                <param>
                    unicast  True if the event set is unicast.                    
                </param>
            </javadoc>
            <method name="setUnicast" type="void" line="303">
                <params>
                    <param name="unicast" type="boolean"/>
                </params>
            </method>
            <javadoc line="306">
                Normally event sources are multicast.  However there are some
                  exceptions that are strictly unicast.                
                <return>
                    &lt;TT&gt;true&lt;/TT&gt; if the event set is unicast.
                      Defaults to &lt;TT&gt;false&lt;/TT&gt;.                    
                </return>
            </javadoc>
            <method name="isUnicast" type="boolean" line="312"/>
            <javadoc line="315">
                Marks an event set as being in the &amp;quot;default&amp;quot; set (or not).
                  By default this is &lt;TT&gt;true&lt;/TT&gt;.                
                <param>
                    inDefaultEventSet &lt;code&gt;true&lt;/code&gt; if the event set is in
                      the &amp;quot;default&amp;quot; set,
                      &lt;code&gt;false&lt;/code&gt; if not                    
                </param>
            </javadoc>
            <method name="setInDefaultEventSet" type="void" line="322">
                <params>
                    <param name="inDefaultEventSet" type="boolean"/>
                </params>
            </method>
            <javadoc line="325">
                Reports if an event set is in the &amp;quot;default&amp;quot; set.                
                <return>
                    &lt;TT&gt;true&lt;/TT&gt; if the event set is in
                      the &amp;quot;default&amp;quot; set.  Defaults to &lt;TT&gt;true&lt;/TT&gt;.                    
                </return>
            </javadoc>
            <method name="isInDefaultEventSet" type="boolean" line="330"/>
            <method name="EventSetDescriptor" type="constructor" line="333">
                <params>
                    <param name="x" type="EventSetDescriptor"/>
                    <param name="y" type="EventSetDescriptor"/>
                </params>
                <scope line="336"/>
                <scope line="340"/>
                <scope line="344"/>
                <scope line="348"/>
                <scope line="352"/>
                <scope line="356"/>
            </method>
            <method name="EventSetDescriptor" type="constructor" line="360">
                <params>
                    <param name="old" type="EventSetDescriptor"/>
                </params>
                <scope line="362">
                    <declaration name="len" type="int" line="363"/>
                    <scope line="365"/>
                </scope>
            </method>
            <method name="appendTo" type="void" line="376">
                <params>
                    <param name="sb" type="StringBuilder"/>
                </params>
            </method>
            <method name="getMethod" type="Method" line="384">
                <params>
                    <param name="descriptor" type="MethodDescriptor"/>
                </params>
            </method>
        </class>
    </source>