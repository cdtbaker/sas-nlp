<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.EventListener"/>
        <import package="java.util.EventListenerProxy"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Map.Entry"/>
        <import package="java.util.Set"/>
        <class name="ChangeListenerMap" line="37">
            <type_params>
                <type_param name="L"/>
            </type_params>
            <javadoc line="37">
                This is an abstract class that provides base functionality
                  for the {@link PropertyChangeSupport PropertyChangeSupport} class
                  and the {@link VetoableChangeSupport VetoableChangeSupport} class.                
                <see>
                    PropertyChangeListenerMap                    
                </see>
                <see>
                    VetoableChangeListenerMap                    
                </see>
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <declaration name="map" type="Map&lt;String,L[]&gt;" line="48"/>
            <method name="newArray" type="L[]" line="50"/>
            <javadoc line="50">
                Creates an array of listeners.
                  This method can be optimized by using
                  the same instance of the empty array
                  when {@code length} is equal to {@code 0}.                
                <param>
                    length  the array length                    
                </param>
                <return>
                    an array with specified length                    
                </return>
            </javadoc>
            <method name="newProxy" type="L" line="61"/>
            <javadoc line="61">
                Creates a proxy listener for the specified property.                
                <param>
                    name      the name of the property to listen on                    
                </param>
                <param>
                    listener  the listener to process events                    
                </param>
                <return>
                    a proxy listener                    
                </return>
            </javadoc>
            <javadoc line="70">
                Adds a listener to the list of listeners for the specified property.
                  This listener is called as many times as it was added.                
                <param>
                    name      the name of the property to listen on                    
                </param>
                <param>
                    listener  the listener to process events                    
                </param>
            </javadoc>
            <method name="add" type="void" line="77">
                <params>
                    <param name="name" type="String"/>
                    <param name="listener" type="L"/>
                </params>
                <scope line="78"/>
                <declaration name="array" type="L[]" line="81"/>
                <declaration name="size" type="int" line="82"/>
                <declaration name="clone" type="L[]" line="86"/>
                <scope line="88"/>
            </method>
            <javadoc line="94">
                Removes a listener from the list of listeners for the specified property.
                  If the listener was added more than once to the same event source,
                  this listener will be notified one less time after being removed.                
                <param>
                    name      the name of the property to listen on                    
                </param>
                <param>
                    listener  the listener to process events                    
                </param>
            </javadoc>
            <method name="remove" type="void" line="102">
                <params>
                    <param name="name" type="String"/>
                    <param name="listener" type="L"/>
                </params>
                <scope line="103">
                    <declaration name="array" type="L[]" line="104"/>
                    <scope line="105">
                        <scope line="106">
                            <scope line="107">
                                <declaration name="size" type="int" line="108"/>
                                <scope line="109">
                                    <declaration name="clone" type="L[]" line="110"/>
                                </scope>
                                <scope line="115">
                                    <scope line="117"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="128">
                Returns the list of listeners for the specified property.                
                <param>
                    name  the name of the property                    
                </param>
                <return>
                    the corresponding list of listeners                    
                </return>
            </javadoc>
            <method name="get" type="L[]" line="134">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="140">
                Sets new list of listeners for the specified property.                
                <param>
                    name       the name of the property                    
                </param>
                <param>
                    listeners  new list of listeners                    
                </param>
            </javadoc>
            <method name="set" type="void" line="146">
                <params>
                    <param name="name" type="String"/>
                    <param name="listeners" type="L[]"/>
                </params>
                <scope line="147">
                    <scope line="148"/>
                </scope>
                <scope line="153">
                    <scope line="155"/>
                </scope>
            </method>
            <javadoc line="161">
                Returns all listeners in the map.                
                <return>
                    an array of all listeners                    
                </return>
            </javadoc>
            <method name="getListeners" type="L[]" line="166">
                <scope line="167"/>
                <declaration name="list" type="List&lt;L&gt;" line="170"/>
                <declaration name="listeners" type="L[]" line="172"/>
                <scope line="173">
                    <scope line="174"/>
                </scope>
                <scope line="178">
                    <declaration name="name" type="String" line="179"/>
                    <scope line="180">
                        <scope line="181"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="189">
                Returns listeners that have been associated with the named property.                
                <param>
                    name  the name of the property                    
                </param>
                <return>
                    an array of listeners for the named property                    
                </return>
            </javadoc>
            <method name="getListeners" type="L[]" line="195">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="196">
                    <declaration name="listeners" type="L[]" line="197"/>
                    <scope line="198"/>
                </scope>
            </method>
            <javadoc line="205">
                Indicates whether the map contains
                  at least one listener to be notified.                
                <param>
                    name  the name of the property                    
                </param>
                <return>
                    {@code true} if at least one listener exists or{@code false} otherwise                    
                </return>
            </javadoc>
            <method name="hasListeners" type="boolean" line="213">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="214"/>
                <declaration name="array" type="L[]" line="217"/>
            </method>
            <javadoc line="221">
                Returns a set of entries from the map.
                  Each entry is a pair consisted of the property name
                  and the corresponding list of listeners.                
                <return>
                    a set of entries from the map                    
                </return>
            </javadoc>
            <method name="getEntries" type="Set<Entry<String,L[]>>" line="228"/>
            <javadoc line="234">
                Extracts a real listener from the proxy listener.
                  It is necessary because default proxy class is not serializable.                
                <return>
                    a real listener                    
                </return>
            </javadoc>
            <method name="extract" type="L" line="240">
                <params>
                    <param name="listener" type="L"/>
                </params>
                <scope line="241">
                    <declaration name="proxy" type="EventListenerProxy&lt;L&gt;" line="242"/>
                </scope>
            </method>
        </class>
    </source>