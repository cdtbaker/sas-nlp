<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <import package="com.sun.beans.WeakCache"/>
        <import package="com.sun.beans.finder.BeanInfoFinder"/>
        <import package="com.sun.beans.finder.ClassFinder"/>
        <import package="java.awt.Component"/>
        <import package="java.lang.ref.Reference"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.util.Map"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.EventListener"/>
        <import package="java.util.EventObject"/>
        <import package="java.util.List"/>
        <import package="java.util.TreeMap"/>
        <import package="java.util.WeakHashMap"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.reflect.misc.ReflectUtil"/>
        <class name="Introspector" line="21">
            <javadoc line="21">
                The Introspector class provides a standard way for tools to learn about
                  the properties, events, and methods supported by a target Java Bean.
                  &lt;p&gt;
                  For each of those three kinds of information, the Introspector will
                  separately analyze the bean&apos;s class and superclasses looking for
                  either explicit or implicit information and use that information to
                  build a BeanInfo object that comprehensively describes the target bean.
                  &lt;p&gt;
                  For each class &quot;Foo&quot;, explicit information may be available if there exists
                  a corresponding &quot;FooBeanInfo&quot; class that provides a non-null value when
                  queried for the information.   We first look for the BeanInfo class by
                  taking the full package-qualified name of the target bean class and
                  appending &quot;BeanInfo&quot; to form a new class name.  If this fails, then
                  we take the final classname component of this name, and look for that
                  class in each of the packages specified in the BeanInfo package search
                  path.
                  &lt;p&gt;
                  Thus for a class such as &quot;sun.xyz.OurButton&quot; we would first look for a
                  BeanInfo class called &quot;sun.xyz.OurButtonBeanInfo&quot; and if that failed we&apos;d
                  look in each package in the BeanInfo search path for an OurButtonBeanInfo
                  class.  With the default search path, this would mean looking for
                  &quot;sun.beans.infos.OurButtonBeanInfo&quot;.
                  &lt;p&gt;
                  If a class provides explicit BeanInfo about itself then we add that to
                  the BeanInfo information we obtained from analyzing any derived classes,
                  but we regard the explicit information as being definitive for the current
                  class and its base classes, and do not proceed any further up the superclass
                  chain.
                  &lt;p&gt;
                  If we don&apos;t find explicit BeanInfo on a class, we use low-level
                  reflection to study the methods of the class and apply standard design
                  patterns to identify property accessors, event sources, or public
                  methods.  We then proceed to analyze the class&apos;s superclass and add
                  in the information from it (and possibly on up the superclass chain).
                  &lt;p&gt;
                  For more information about introspection and design patterns, please
                  consult the
                  &lt;a href=&quot;http://java.sun.com/products/javabeans/docs/index.html&quot;&gt;JavaBeans&amp;trade; specification&lt;/a&gt;.                
            </javadoc>
            <declaration name="USE_ALL_BEANINFO" type="int" line="62"/>
            <declaration name="IGNORE_IMMEDIATE_BEANINFO" type="int" line="63"/>
            <declaration name="IGNORE_ALL_BEANINFO" type="int" line="64"/>
            <declaration name="declaredMethodCache" type="WeakCache&lt;Class&lt;?&gt;,Method[]&gt;" line="65"/>
            <declaration name="BEANINFO_CACHE" type="Object" line="66"/>
            <declaration name="beanClass" type="Class" line="67"/>
            <declaration name="explicitBeanInfo" type="BeanInfo" line="68"/>
            <declaration name="superBeanInfo" type="BeanInfo" line="69"/>
            <declaration name="additionalBeanInfo" type="BeanInfo" line="70"/>
            <declaration name="propertyChangeSource" type="boolean" line="71"/>
            <declaration name="eventListenerType" type="Class" line="72"/>
            <declaration name="defaultEventName" type="String" line="73"/>
            <declaration name="defaultPropertyName" type="String" line="74"/>
            <declaration name="defaultEventIndex" type="int" line="75"/>
            <declaration name="defaultPropertyIndex" type="int" line="76"/>
            <declaration name="methods" type="Map" line="77"/>
            <declaration name="properties" type="Map" line="78"/>
            <declaration name="events" type="Map" line="79"/>
            <declaration name="EMPTY_EVENTSETDESCRIPTORS" type="EventSetDescriptor[]" line="80"/>
            <declaration name="ADD_PREFIX" type="String" line="81"/>
            <declaration name="REMOVE_PREFIX" type="String" line="82"/>
            <declaration name="GET_PREFIX" type="String" line="83"/>
            <declaration name="SET_PREFIX" type="String" line="84"/>
            <declaration name="IS_PREFIX" type="String" line="85"/>
            <declaration name="FINDER_KEY" type="Object" line="86"/>
            <javadoc line="87">
                Introspect on a Java Bean and learn about all its properties, exposed
                  methods, and events.
                  &lt;p&gt;
                  If the BeanInfo class for a Java Bean has been previously Introspected
                  then the BeanInfo class is retrieved from the BeanInfo cache.                
                <param>
                    beanClass  The bean class to be analyzed.                    
                </param>
                <return>
                    A BeanInfo object describing the target bean.                    
                </return>
                <exception>
                    IntrospectionException if an exception occurs during
                      introspection.                    
                </exception>
                <see>
                    #flushCaches                    
                </see>
                <see>
                    #flushFromCaches                    
                </see>
            </javadoc>
            <method name="getBeanInfo" type="BeanInfo" line="100">
                <params>
                    <param name="beanClass" type="Class<?>"/>
                </params>
                <scope line="101"/>
                <declaration name="beanInfoCache" type="Map&lt;Class&lt;?&gt;,BeanInfo&gt;" line="104"/>
                <declaration name="beanInfo" type="BeanInfo" line="105"/>
                <scope line="106">
                    <scope line="108"/>
                </scope>
                <scope line="114">
                    <scope line="116"/>
                </scope>
            </method>
            <javadoc line="122">
                Introspect on a Java bean and learn about all its properties, exposed
                  methods, and events, subject to some control flags.
                  &lt;p&gt;
                  If the BeanInfo class for a Java Bean has been previously Introspected
                  based on the same arguments then the BeanInfo class is retrieved
                  from the BeanInfo cache.                
                <param>
                    beanClass  The bean class to be analyzed.                    
                </param>
                <param>
                    flags  Flags to control the introspection.
                      If flags == USE_ALL_BEANINFO then we use all of the BeanInfo
                      classes we can discover.
                      If flags == IGNORE_IMMEDIATE_BEANINFO then we ignore any
                      BeanInfo associated with the specified beanClass.
                      If flags == IGNORE_ALL_BEANINFO then we ignore all BeanInfo
                      associated with the specified beanClass or any of its
                      parent classes.                    
                </param>
                <return>
                    A BeanInfo object describing the target bean.                    
                </return>
                <exception>
                    IntrospectionException if an exception occurs during
                      introspection.                    
                </exception>
            </javadoc>
            <method name="getBeanInfo" type="BeanInfo" line="142">
                <params>
                    <param name="beanClass" type="Class<?>"/>
                    <param name="flags" type="int"/>
                </params>
            </method>
            <javadoc line="145">
                Introspect on a Java bean and learn all about its properties, exposed
                  methods, below a given &quot;stop&quot; point.
                  &lt;p&gt;
                  If the BeanInfo class for a Java Bean has been previously Introspected
                  based on the same arguments, then the BeanInfo class is retrieved
                  from the BeanInfo cache.                
                <param>
                    beanClass The bean class to be analyzed.                    
                </param>
                <param>
                    stopClass The baseclass at which to stop the analysis.  Any
                      methods/properties/events in the stopClass or in its baseclasses
                      will be ignored in the analysis.                    
                </param>
                <exception>
                    IntrospectionException if an exception occurs during
                      introspection.                    
                </exception>
            </javadoc>
            <method name="getBeanInfo" type="BeanInfo" line="159">
                <params>
                    <param name="beanClass" type="Class<?>"/>
                    <param name="stopClass" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="162">
                Introspect on a Java Bean and learn about all its properties,
                  exposed methods and events, below a given {@code stopClass} point
                  subject to some control {@code flags}.
                  &lt;dl&gt;
                  &lt;dt&gt;USE_ALL_BEANINFO&lt;/dt&gt;
                  &lt;dd&gt;Any BeanInfo that can be discovered will be used.&lt;/dd&gt;
                  &lt;dt&gt;IGNORE_IMMEDIATE_BEANINFO&lt;/dt&gt;
                  &lt;dd&gt;Any BeanInfo associated with the specified {@code beanClass} will be ignored.&lt;/dd&gt;
                  &lt;dt&gt;IGNORE_ALL_BEANINFO&lt;/dt&gt;
                  &lt;dd&gt;Any BeanInfo associated with the specified {@code beanClass}or any of its parent classes will be ignored.&lt;/dd&gt;
                  &lt;/dl&gt;
                  Any methods/properties/events in the {@code stopClass}or in its parent classes will be ignored in the analysis.
                  &lt;p&gt;
                  If the BeanInfo class for a Java Bean has been
                  previously introspected based on the same arguments then
                  the BeanInfo class is retrieved from the BeanInfo cache.                
                <param>
                    beanClass  the bean class to be analyzed                    
                </param>
                <param>
                    stopClass  the parent class at which to stop the analysis                    
                </param>
                <param>
                    flags      flags to control the introspection                    
                </param>
                <return>
                    a BeanInfo object describing the target bean                    
                </return>
                <exception>
                    IntrospectionException if an exception occurs during introspection                    
                </exception>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getBeanInfo" type="BeanInfo" line="186">
                <params>
                    <param name="beanClass" type="Class<?>"/>
                    <param name="stopClass" type="Class<?>"/>
                    <param name="flags" type="int"/>
                </params>
                <declaration name="bi" type="BeanInfo" line="187"/>
                <scope line="188"/>
                <scope line="191"/>
            </method>
            <javadoc line="196">
                Utility method to take a string and convert it to normal Java variable
                  name capitalization.  This normally means converting the first
                  character from upper case to lower case, but in the (unusual) special
                  case when there is more than one character and both the first and
                  second characters are upper case, we leave it alone.
                  &lt;p&gt;
                  Thus &quot;FooBah&quot; becomes &quot;fooBah&quot; and &quot;X&quot; becomes &quot;x&quot;, but &quot;URL&quot; stays
                  as &quot;URL&quot;.                
                <param>
                    name The string to be decapitalized.                    
                </param>
                <return>
                    The decapitalized version of the string.                    
                </return>
            </javadoc>
            <method name="decapitalize" type="String" line="208">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="209"/>
                <scope line="212"/>
                <declaration name="chars" type="char" line="215"/>
            </method>
            <javadoc line="219">
                Gets the list of package names that will be used for
                  finding BeanInfo classes.                
                <return>
                    The array of package names that will be searched in
                      order to find BeanInfo classes. The default value
                      for this array is implementation-dependent; e.g.
                      Sun implementation initially sets to {"sun.beans.infos"}.                    
                </return>
            </javadoc>
            <method name="getBeanInfoSearchPath" type="String[]" line="227"/>
            <javadoc line="230">
                Change the list of package names that will be used for
                  finding BeanInfo classes.  The behaviour of
                  this method is undefined if parameter path
                  is null.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkPropertiesAccess&lt;/code&gt;
                  method is called. This could result in a SecurityException.                
                <param>
                    path  Array of package names.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow setting
                      of system properties.                    
                </exception>
                <see>
                    SecurityManager#checkPropertiesAccess                    
                </see>
            </javadoc>
            <method name="setBeanInfoSearchPath" type="void" line="243">
                <params>
                    <param name="path" type="String[]"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="244"/>
                <scope line="245"/>
            </method>
            <javadoc line="250">
                Flush all of the Introspector&apos;s internal caches.  This method is
                  not normally required.  It is normally only needed by advanced
                  tools that update existing &quot;Class&quot; objects in-place and need
                  to make the Introspector re-analyze existing Class objects.                
            </javadoc>
            <method name="flushCaches" type="void" line="256">
                <scope line="257">
                    <declaration name="beanInfoCache" type="Map" line="258"/>
                    <scope line="259"/>
                </scope>
            </method>
            <javadoc line="265">
                Flush the Introspector&apos;s internal cached information for a given class.
                  This method is not normally required.  It is normally only needed
                  by advanced tools that update existing &quot;Class&quot; objects in-place
                  and need to make the Introspector re-analyze an existing Class object.
                  Note that only the direct state associated with the target Class
                  object is flushed.  We do not flush state for other Class objects
                  with the same name, nor do we flush state for any related Class
                  objects (such as subclasses), even though their state may include
                  information indirectly obtained from the target Class object.                
                <param>
                    clz  Class object to be flushed.                    
                </param>
                <throws>
                    NullPointerException If the Class object is null.                    
                </throws>
            </javadoc>
            <method name="flushFromCaches" type="void" line="278">
                <params>
                    <param name="clz" type="Class<?>"/>
                </params>
                <scope line="279"/>
                <scope line="282">
                    <declaration name="beanInfoCache" type="Map" line="283"/>
                    <scope line="284"/>
                </scope>
            </method>
            <method name="Introspector" type="constructor" line="290">
                <params>
                    <param name="beanClass" type="Class"/>
                    <param name="stopClass" type="Class"/>
                    <param name="flags" type="int"/>
                </params>
                <scope line="292">
                    <declaration name="isSuper" type="boolean" line="293"/>
                    <scope line="294">
                        <scope line="295"/>
                    </scope>
                    <scope line="299"/>
                </scope>
                <scope line="303"/>
                <declaration name="superClass" type="Class" line="306"/>
                <scope line="307">
                    <declaration name="newFlags" type="int" line="308"/>
                    <scope line="309"/>
                </scope>
                <scope line="314"/>
                <scope line="317"/>
            </method>
            <javadoc line="321">
                Constructs a GenericBeanInfo class from the state of the Introspector                
            </javadoc>
            <method name="getBeanInfo" type="BeanInfo" line="324">
                <declaration name="bd" type="BeanDescriptor" line="325"/>
                <declaration name="mds" type="MethodDescriptor" line="326"/>
                <declaration name="esds" type="EventSetDescriptor" line="327"/>
                <declaration name="pds" type="PropertyDescriptor" line="328"/>
                <declaration name="defaultEvent" type="int" line="329"/>
                <declaration name="defaultProperty" type="int" line="330"/>
            </method>
            <javadoc line="333">
                Looks for an explicit BeanInfo class that corresponds to the Class.
                  First it looks in the existing package that the Class is defined in,
                  then it checks to see if the class is its own BeanInfo. Finally,
                  the BeanInfo search path is prepended to the class and searched.                
                <param>
                    beanClass  the class type of the bean                    
                </param>
                <return>
                    Instance of an explicit BeanInfo class or null if one isn't found.                    
                </return>
            </javadoc>
            <method name="findExplicitBeanInfo" type="BeanInfo" line="341">
                <params>
                    <param name="beanClass" type="Class"/>
                </params>
            </method>
            <javadoc line="344">
                @return An array of PropertyDescriptors describing the editable
                  properties supported by the target bean.                
            </javadoc>
            <method name="getTargetPropertyInfo" type="PropertyDescriptor[]" line="348">
                <declaration name="explicitProperties" type="PropertyDescriptor[]" line="349"/>
                <scope line="350"/>
                <scope line="353"/>
                <scope line="356"/>
                <scope line="359"/>
                <scope line="362">
                    <declaration name="methodList" type="Method" line="363"/>
                    <scope line="364">
                        <declaration name="method" type="Method" line="365"/>
                        <scope line="366"/>
                        <declaration name="mods" type="int" line="369"/>
                        <scope line="370"/>
                        <declaration name="name" type="String" line="373"/>
                        <declaration name="argTypes" type="Class" line="374"/>
                        <declaration name="resultType" type="Class" line="375"/>
                        <declaration name="argCount" type="int" line="376"/>
                        <declaration name="pd" type="PropertyDescriptor" line="377"/>
                        <scope line="378"/>
                        <scope line="381">
                            <scope line="382">
                                <scope line="383"/>
                                <scope line="386"/>
                            </scope>
                            <scope line="390">
                                <scope line="391"/>
                                <scope line="394">
                                    <scope line="396"/>
                                </scope>
                            </scope>
                            <scope line="401">
                                <scope line="402">
                                    <scope line="404"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="410"/>
                        <scope line="413">
                            <scope line="414"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="result" type="PropertyDescriptor" line="422"/>
                <scope line="424">
                    <scope line="425">
                        <scope line="426"/>
                    </scope>
                </scope>
            </method>
            <declaration name="pdStore" type="HashMap" line="433"/>
            <javadoc line="434">
                Adds the property descriptor to the list store.                
            </javadoc>
            <method name="addPropertyDescriptor" type="void" line="437">
                <params>
                    <param name="pd" type="PropertyDescriptor"/>
                </params>
                <declaration name="propName" type="String" line="438"/>
                <declaration name="list" type="List" line="439"/>
                <scope line="440"/>
                <scope line="444">
                    <scope line="445">
                        <declaration name="name" type="String" line="446"/>
                        <declaration name="read" type="Method" line="447"/>
                        <declaration name="write" type="Method" line="448"/>
                        <declaration name="cls" type="boolean" line="449"/>
                        <scope line="452">
                            <declaration name="ipd" type="IndexedPropertyDescriptor" line="453"/>
                            <declaration name="readI" type="Method" line="454"/>
                            <declaration name="writeI" type="Method" line="455"/>
                            <scope line="458"/>
                        </scope>
                        <scope line="462"/>
                    </scope>
                    <scope line="466"/>
                </scope>
            </method>
            <method name="addPropertyDescriptors" type="void" line="471">
                <params>
                    <param name="descriptors" type="PropertyDescriptor[]"/>
                </params>
                <scope line="472">
                    <scope line="473"/>
                </scope>
            </method>
            <method name="getPropertyDescriptors" type="PropertyDescriptor[]" line="478">
                <params>
                    <param name="info" type="BeanInfo"/>
                </params>
                <declaration name="descriptors" type="PropertyDescriptor[]" line="479"/>
                <declaration name="index" type="int" line="480"/>
                <scope line="481"/>
            </method>
            <javadoc line="486">
                Populates the property descriptor table by merging the
                  lists of Property descriptors.                
            </javadoc>
            <method name="processPropertyDescriptors" type="void" line="490">
                <scope line="491"/>
                <declaration name="list" type="List" line="494"/>
                <declaration name="pd" type="PropertyDescriptor" line="495"/>
                <declaration name="ipd" type="IndexedPropertyDescriptor" line="496"/>
                <declaration name="it" type="Iterator" line="497"/>
                <scope line="498">
                    <scope line="506">
                        <scope line="508">
                            <scope line="510">
                                <scope line="511"/>
                                <scope line="514"/>
                            </scope>
                        </scope>
                        <scope line="519">
                            <scope line="520">
                                <scope line="521">
                                    <declaration name="method" type="Method" line="522"/>
                                    <scope line="523"/>
                                </scope>
                                <scope line="527"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="533">
                        <scope line="535">
                            <scope line="537">
                                <scope line="538">
                                    <scope line="539">
                                        <scope line="540"/>
                                        <scope line="543"/>
                                    </scope>
                                </scope>
                                <scope line="548">
                                    <scope line="549"/>
                                    <scope line="552"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="558">
                            <scope line="559">
                                <scope line="560">
                                    <scope line="561">
                                        <scope line="562"/>
                                        <scope line="565"/>
                                    </scope>
                                </scope>
                                <scope line="570">
                                    <scope line="571"/>
                                    <scope line="574"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="583">
                        <scope line="584">
                            <declaration name="tpd" type="PropertyDescriptor" line="585"/>
                            <scope line="586"/>
                        </scope>
                        <scope line="590">
                            <declaration name="tpd" type="PropertyDescriptor" line="591"/>
                            <scope line="592"/>
                        </scope>
                        <scope line="596"/>
                        <scope line="599"/>
                    </scope>
                    <scope line="603">
                        <scope line="604"/>
                        <scope line="607"/>
                    </scope>
                    <scope line="611">
                        <scope line="613"/>
                        <scope line="616"/>
                    </scope>
                    <scope line="620">
                        <scope line="622"/>
                        <scope line="625"/>
                    </scope>
                    <scope line="629"/>
                    <scope line="632"/>
                    <scope line="635">
                        <scope line="637"/>
                    </scope>
                    <scope line="641"/>
                    <scope line="644"/>
                </scope>
            </method>
            <javadoc line="649">
                Adds the property descriptor to the indexedproperty descriptor only if the
                  types are the same.
                  The most specific property descriptor will take precedence.                
            </javadoc>
            <method name="mergePropertyDescriptor" type="PropertyDescriptor" line="654">
                <params>
                    <param name="ipd" type="IndexedPropertyDescriptor"/>
                    <param name="pd" type="PropertyDescriptor"/>
                </params>
                <declaration name="result" type="PropertyDescriptor" line="655"/>
                <declaration name="propType" type="Class" line="656"/>
                <declaration name="ipropType" type="Class" line="657"/>
                <scope line="658">
                    <scope line="659"/>
                    <scope line="662"/>
                </scope>
                <scope line="666">
                    <scope line="667"/>
                    <scope line="670">
                        <declaration name="write" type="Method" line="672"/>
                        <declaration name="read" type="Method" line="673"/>
                        <scope line="674">
                            <scope line="676">
                                <scope line="677"/>
                                <scope line="680"/>
                            </scope>
                        </scope>
                        <scope line="684">
                            <scope line="686">
                                <scope line="687"/>
                                <scope line="690"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="mergePropertyDescriptor" type="PropertyDescriptor" line="698">
                <params>
                    <param name="pd1" type="PropertyDescriptor"/>
                    <param name="pd2" type="PropertyDescriptor"/>
                </params>
                <scope line="699"/>
                <scope line="702"/>
            </method>
            <method name="mergePropertyDescriptor" type="PropertyDescriptor" line="706">
                <params>
                    <param name="ipd1" type="IndexedPropertyDescriptor"/>
                    <param name="ipd2" type="IndexedPropertyDescriptor"/>
                </params>
                <scope line="707"/>
                <scope line="710"/>
            </method>
            <javadoc line="714">
                @return An array of EventSetDescriptors describing the kinds of
                  events fired by the target bean.                
            </javadoc>
            <method name="getTargetEventInfo" type="EventSetDescriptor[]" line="718">
                <scope line="719"/>
                <declaration name="explicitEvents" type="EventSetDescriptor[]" line="722"/>
                <scope line="723">
                    <declaration name="ix" type="int" line="725"/>
                    <scope line="726"/>
                </scope>
                <scope line="730">
                    <declaration name="supers" type="EventSetDescriptor" line="731"/>
                    <scope line="732"/>
                    <declaration name="ix" type="int" line="735"/>
                    <scope line="736"/>
                </scope>
                <scope line="740">
                    <declaration name="additional" type="EventSetDescriptor" line="741"/>
                    <scope line="742">
                        <scope line="743"/>
                    </scope>
                </scope>
                <scope line="748">
                    <scope line="749"/>
                </scope>
                <scope line="753">
                    <declaration name="methodList" type="Method" line="754"/>
                    <declaration name="adds" type="Map" line="755"/>
                    <declaration name="removes" type="Map" line="756"/>
                    <declaration name="gets" type="Map" line="757"/>
                    <scope line="758">
                        <declaration name="method" type="Method" line="759"/>
                        <scope line="760"/>
                        <declaration name="mods" type="int" line="763"/>
                        <scope line="764"/>
                        <declaration name="name" type="String" line="767"/>
                        <scope line="768"/>
                        <declaration name="argTypes" type="Class" line="771"/>
                        <declaration name="resultType" type="Class" line="772"/>
                        <scope line="773">
                            <declaration name="listenerName" type="String" line="774"/>
                            <scope line="775">
                                <scope line="776"/>
                            </scope>
                        </scope>
                        <scope line="782">
                            <declaration name="listenerName" type="String" line="783"/>
                            <scope line="784">
                                <scope line="785"/>
                            </scope>
                        </scope>
                        <scope line="791">
                            <declaration name="listenerName" type="String" line="792"/>
                            <scope line="793">
                                <scope line="794"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="801">
                        <declaration name="keys" type="Iterator" line="802"/>
                        <scope line="803">
                            <declaration name="listenerName" type="String" line="804"/>
                            <scope line="805"/>
                            <declaration name="eventName" type="String" line="808"/>
                            <declaration name="addMethod" type="Method" line="809"/>
                            <declaration name="removeMethod" type="Method" line="810"/>
                            <declaration name="getMethod" type="Method" line="811"/>
                            <scope line="812"/>
                            <declaration name="argType" type="Class" line="815"/>
                            <declaration name="allMethods" type="Method" line="816"/>
                            <declaration name="validMethods" type="List" line="817"/>
                            <scope line="818">
                                <scope line="819"/>
                                <scope line="822"/>
                            </scope>
                            <declaration name="methods" type="Method[]" line="826"/>
                            <declaration name="esd" type="EventSetDescriptor" line="827"/>
                            <scope line="828"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="result" type="EventSetDescriptor[]" line="835"/>
                <scope line="836"/>
                <scope line="839">
                    <scope line="842">
                        <scope line="843">
                            <scope line="844"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="addEvent" type="void" line="852">
                <params>
                    <param name="esd" type="EventSetDescriptor"/>
                </params>
                <declaration name="key" type="String" line="853"/>
                <scope line="854"/>
                <declaration name="old" type="EventSetDescriptor" line="857"/>
                <scope line="858"/>
                <declaration name="composite" type="EventSetDescriptor" line="862"/>
            </method>
            <javadoc line="865">
                @return An array of MethodDescriptors describing the private
                  methods supported by the target bean.                
            </javadoc>
            <method name="getTargetMethodInfo" type="MethodDescriptor[]" line="869">
                <scope line="870"/>
                <declaration name="explicitMethods" type="MethodDescriptor[]" line="873"/>
                <scope line="874"/>
                <scope line="877">
                    <declaration name="supers" type="MethodDescriptor" line="878"/>
                    <scope line="879"/>
                </scope>
                <scope line="883">
                    <declaration name="additional" type="MethodDescriptor" line="884"/>
                    <scope line="885">
                        <scope line="886"/>
                    </scope>
                </scope>
                <scope line="891">
                    <scope line="892"/>
                </scope>
                <scope line="896">
                    <declaration name="methodList" type="Method" line="897"/>
                    <scope line="898">
                        <declaration name="method" type="Method" line="899"/>
                        <scope line="900"/>
                        <declaration name="md" type="MethodDescriptor" line="903"/>
                    </scope>
                </scope>
                <declaration name="result" type="MethodDescriptor" line="907"/>
            </method>
            <method name="addMethod" type="void" line="911">
                <params>
                    <param name="md" type="MethodDescriptor"/>
                </params>
                <declaration name="name" type="String" line="912"/>
                <declaration name="old" type="MethodDescriptor" line="913"/>
                <scope line="914"/>
                <declaration name="p1" type="String[]" line="918"/>
                <declaration name="p2" type="String[]" line="919"/>
                <declaration name="match" type="boolean" line="920"/>
                <scope line="921">
                    <scope line="923">
                        <scope line="924"/>
                    </scope>
                </scope>
                <scope line="930">
                    <declaration name="composite" type="MethodDescriptor" line="931"/>
                </scope>
                <declaration name="longKey" type="String" line="935"/>
                <scope line="937"/>
                <declaration name="composite" type="MethodDescriptor" line="941"/>
            </method>
            <javadoc line="944">
                Creates a key for a method in a method cache.                
            </javadoc>
            <method name="makeQualifiedMethodName" type="String" line="947">
                <params>
                    <param name="name" type="String"/>
                    <param name="params" type="String[]"/>
                </params>
                <declaration name="sb" type="StringBuffer" line="948"/>
                <scope line="950"/>
            </method>
            <method name="getTargetDefaultEventIndex" type="int" line="956"/>
            <method name="getTargetDefaultPropertyIndex" type="int" line="959"/>
            <method name="getTargetBeanDescriptor" type="BeanDescriptor" line="962">
                <scope line="963">
                    <declaration name="bd" type="BeanDescriptor" line="964"/>
                    <scope line="965"/>
                </scope>
            </method>
            <method name="findCustomizerClass" type="Class<?>" line="971">
                <params>
                    <param name="type" type="Class<?>"/>
                </params>
                <declaration name="name" type="String" line="972"/>
                <scope line="973">
                    <scope line="975"/>
                </scope>
                <scope line="979"/>
            </method>
            <method name="isEventHandler" type="boolean" line="983">
                <params>
                    <param name="m" type="Method"/>
                </params>
                <declaration name="argTypes" type="Class" line="984"/>
                <scope line="985"/>
            </method>
            <method name="getPublicDeclaredMethods" type="Method[]" line="990">
                <params>
                    <param name="clz" type="Class"/>
                </params>
                <scope line="991"/>
                <scope line="994">
                    <declaration name="result" type="Method[]" line="995"/>
                    <scope line="996">
                        <scope line="998">
                            <declaration name="method" type="Method" line="999"/>
                            <scope line="1000"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1009">
                Internal support for finding a target methodName with a given
                  parameter list on a given class.                
            </javadoc>
            <method name="internalFindMethod" type="Method" line="1013">
                <params>
                    <param name="start" type="Class"/>
                    <param name="methodName" type="String"/>
                    <param name="argCount" type="int"/>
                    <param name="args" type="Class"/>
                </params>
                <declaration name="method" type="Method" line="1014"/>
                <scope line="1015">
                    <declaration name="methods" type="Method" line="1016"/>
                    <scope line="1017">
                        <scope line="1019"/>
                        <declaration name="params" type="Class" line="1022"/>
                        <scope line="1023">
                            <scope line="1024">
                                <declaration name="different" type="boolean" line="1025"/>
                                <scope line="1026">
                                    <scope line="1027">
                                        <scope line="1028"/>
                                    </scope>
                                    <scope line="1033"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="ifcs" type="Class" line="1043"/>
                <scope line="1044">
                    <scope line="1046"/>
                </scope>
            </method>
            <javadoc line="1052">
                Find a target methodName on a given class.                
            </javadoc>
            <method name="findMethod" type="Method" line="1055">
                <params>
                    <param name="cls" type="Class"/>
                    <param name="methodName" type="String"/>
                    <param name="argCount" type="int"/>
                </params>
            </method>
            <javadoc line="1058">
                Find a target methodName with specific parameter list on a given class.
                  &lt;p&gt;
                  Used in the contructors of the EventSetDescriptor,
                  PropertyDescriptor and the IndexedPropertyDescriptor.
                  &lt;p&gt;                
                <param>
                    cls The Class object on which to retrieve the method.                    
                </param>
                <param>
                    methodName Name of the method.                    
                </param>
                <param>
                    argCount Number of arguments for the desired method.                    
                </param>
                <param>
                    args Array of argument types for the method.                    
                </param>
                <return>
                    the method or null if not found                    
                </return>
            </javadoc>
            <method name="findMethod" type="Method" line="1070">
                <params>
                    <param name="cls" type="Class"/>
                    <param name="methodName" type="String"/>
                    <param name="argCount" type="int"/>
                    <param name="args" type="Class"/>
                </params>
                <scope line="1071"/>
            </method>
            <javadoc line="1076">
                Return true if class a is either equivalent to class b, or
                  if class a is a subclass of class b, i.e. if a either &quot;extends&quot;
                  or &quot;implements&quot; b.
                  Note tht either or both &quot;Class&quot; objects may represent interfaces.                
            </javadoc>
            <method name="isSubclass" type="boolean" line="1082">
                <params>
                    <param name="a" type="Class"/>
                    <param name="b" type="Class"/>
                </params>
                <scope line="1083"/>
                <scope line="1086"/>
                <scope line="1089">
                    <scope line="1090"/>
                    <scope line="1093">
                        <declaration name="interfaces" type="Class" line="1094"/>
                        <scope line="1095">
                            <scope line="1096"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1104">
                Return true iff the given method throws the given exception.                
            </javadoc>
            <method name="throwsException" type="boolean" line="1107">
                <params>
                    <param name="method" type="Method"/>
                    <param name="exception" type="Class"/>
                </params>
                <declaration name="exs" type="Class" line="1108"/>
                <scope line="1109">
                    <scope line="1110"/>
                </scope>
            </method>
            <method name="getFinder" type="BeanInfoFinder" line="1116">
                <declaration name="context" type="AppContext" line="1117"/>
                <declaration name="object" type="Object" line="1118"/>
                <scope line="1119"/>
                <declaration name="finder" type="BeanInfoFinder" line="1122"/>
            </method>
            <javadoc line="1126">
                Try to create an instance of a named class.
                  First try the classloader of &quot;sibling&quot;, then try the system
                  classloader then the class loader of the current Thread.                
            </javadoc>
            <method name="instantiate" type="Object" line="1131">
                <params>
                    <param name="sibling" type="Class"/>
                    <param name="className" type="String"/>
                </params>
                <declaration name="cl" type="ClassLoader" line="1132"/>
                <declaration name="cls" type="Class" line="1133"/>
            </method>
        </class>
        <class name="GenericBeanInfo" line="1137">
            <extends class="SimpleBeanInfo"/>
            <javadoc line="1137">
                Package private implementation support class for Introspector&apos;s
                  internal use.
                  &lt;p&gt;
                  Mostly this is used as a placeholder for the descriptors.                
            </javadoc>
            <declaration name="beanDescriptor" type="BeanDescriptor" line="1144"/>
            <declaration name="events" type="EventSetDescriptor[]" line="1145"/>
            <declaration name="defaultEvent" type="int" line="1146"/>
            <declaration name="properties" type="PropertyDescriptor[]" line="1147"/>
            <declaration name="defaultProperty" type="int" line="1148"/>
            <declaration name="methods" type="MethodDescriptor[]" line="1149"/>
            <declaration name="targetBeanInfoRef" type="Reference&lt;BeanInfo&gt;" line="1150"/>
            <method name="GenericBeanInfo" type="constructor" line="1151">
                <params>
                    <param name="beanDescriptor" type="BeanDescriptor"/>
                    <param name="events" type="EventSetDescriptor[]"/>
                    <param name="defaultEvent" type="int"/>
                    <param name="properties" type="PropertyDescriptor[]"/>
                    <param name="defaultProperty" type="int"/>
                    <param name="methods" type="MethodDescriptor[]"/>
                    <param name="targetBeanInfo" type="BeanInfo"/>
                </params>
            </method>
            <javadoc line="1160">
                Package-private dup constructor
                  This must isolate the new object from any changes to the old object.                
            </javadoc>
            <method name="GenericBeanInfo" type="constructor" line="1164">
                <params>
                    <param name="old" type="GenericBeanInfo"/>
                </params>
                <scope line="1166">
                    <declaration name="len" type="int" line="1167"/>
                    <scope line="1169"/>
                </scope>
                <scope line="1174">
                    <declaration name="len" type="int" line="1175"/>
                    <scope line="1177">
                        <declaration name="oldp" type="PropertyDescriptor" line="1178"/>
                        <scope line="1179"/>
                        <scope line="1182"/>
                    </scope>
                </scope>
                <scope line="1188">
                    <declaration name="len" type="int" line="1189"/>
                    <scope line="1191"/>
                </scope>
            </method>
            <method name="getPropertyDescriptors" type="PropertyDescriptor[]" line="1197"/>
            <method name="getDefaultPropertyIndex" type="int" line="1200"/>
            <method name="getEventSetDescriptors" type="EventSetDescriptor[]" line="1203"/>
            <method name="getDefaultEventIndex" type="int" line="1206"/>
            <method name="getMethodDescriptors" type="MethodDescriptor[]" line="1209"/>
            <method name="getBeanDescriptor" type="BeanDescriptor" line="1212"/>
            <method name="getIcon" type="java.awt.Image" line="1215">
                <params>
                    <param name="iconKind" type="int"/>
                </params>
                <declaration name="targetBeanInfo" type="BeanInfo" line="1216"/>
                <scope line="1217"/>
            </method>
        </class>
    </source>