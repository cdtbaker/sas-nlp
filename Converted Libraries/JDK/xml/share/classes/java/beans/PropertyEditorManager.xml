<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <import package="com.sun.beans.finder.PropertyEditorFinder"/>
        <import package="sun.awt.AppContext"/>
        <class name="PropertyEditorManager" line="31">
            <javadoc line="31">
                The PropertyEditorManager can be used to locate a property editor for
                  any given type name.  This property editor must support the
                  java.beans.PropertyEditor interface for editing a given object.
                  &lt;P&gt;
                  The PropertyEditorManager uses three techniques for locating an editor
                  for a given type.  First, it provides a registerEditor method to allow
                  an editor to be specifically registered for a given type.  Second it
                  tries to locate a suitable class by adding &quot;Editor&quot; to the full
                  qualified classname of the given type (e.g. &quot;foo.bah.FozEditor&quot;).
                  Finally it takes the simple classname (without the package name) adds
                  &quot;Editor&quot; to it and looks in a search-path of packages for a matching
                  class.
                  &lt;P&gt;
                  So for an input class foo.bah.Fred, the PropertyEditorManager would
                  first look in its tables to see if an editor had been registered for
                  foo.bah.Fred and if so use that.  Then it will look for a
                  foo.bah.FredEditor class.  Then it will look for (say)
                  standardEditorsPackage.FredEditor class.
                  &lt;p&gt;
                  Default PropertyEditors will be provided for the Java primitive types
                  &quot;boolean&quot;, &quot;byte&quot;, &quot;short&quot;, &quot;int&quot;, &quot;long&quot;, &quot;float&quot;, and &quot;double&quot;; and
                  for the classes java.lang.String. java.awt.Color, and java.awt.Font.                
            </javadoc>
            <declaration name="FINDER_KEY" type="Object" line="58"/>
            <javadoc line="60">
                Registers an editor class to edit values of the given target class.
                  If the editor class is {@code null},
                  then any existing definition will be removed.
                  Thus this method can be used to cancel the registration.
                  The registration is canceled automatically
                  if either the target or editor class is unloaded.
                  &lt;p&gt;
                  If there is a security manager, its {@code checkPropertiesAccess}method is called. This could result in a {@linkplain SecurityException}.                
                <param>
                    targetType   the class object of the type to be edited                    
                </param>
                <param>
                    editorClass  the class object of the editor class                    
                </param>
                <throws>
                    SecurityException  if a security manager exists and
                      its {@code checkPropertiesAccess} method
                      doesn't allow setting of system properties                    
                </throws>
                <see>
                    SecurityManager#checkPropertiesAccess                    
                </see>
            </javadoc>
            <method name="registerEditor" type="void" line="79">
                <params>
                    <param name="targetType" type="Class<?>"/>
                    <param name="editorClass" type="Class<?>"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="80"/>
                <scope line="81"/>
            </method>
            <javadoc line="87">
                Locate a value editor for a given target type.                
                <param>
                    targetType  The Class object for the type to be edited                    
                </param>
                <return>
                    An editor object for the given target class.
                      The result is null if no suitable editor can be found.                    
                </return>
            </javadoc>
            <method name="findEditor" type="PropertyEditor" line="94">
                <params>
                    <param name="targetType" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="98">
                Gets the package names that will be searched for property editors.                
                <return>
                    The array of package names that will be searched in
                      order to find property editors.
                      <p>     The default value for this array is implementation-dependent,
                      e.g. Sun implementation initially sets to  {"sun.beans.editors"}.                    
                </return>
            </javadoc>
            <method name="getEditorSearchPath" type="String[]" line="106"/>
            <javadoc line="110">
                Change the list of package names that will be used for
                  finding property editors.
                  &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkPropertiesAccess&lt;/code&gt;
                  method is called. This could result in a SecurityException.                
                <param>
                    path  Array of package names.                    
                </param>
                <exception>
                    SecurityException  if a security manager exists and its
                      <code>checkPropertiesAccess</code> method doesn't allow setting
                      of system properties.                    
                </exception>
                <see>
                    SecurityManager#checkPropertiesAccess                    
                </see>
            </javadoc>
            <method name="setEditorSearchPath" type="void" line="123">
                <params>
                    <param name="path" type="String[]"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="124"/>
                <scope line="125"/>
            </method>
            <method name="getFinder" type="PropertyEditorFinder" line="131">
                <declaration name="context" type="AppContext" line="132"/>
                <declaration name="object" type="Object" line="133"/>
                <scope line="134"/>
                <declaration name="finder" type="PropertyEditorFinder" line="137"/>
            </method>
        </class>
    </source>