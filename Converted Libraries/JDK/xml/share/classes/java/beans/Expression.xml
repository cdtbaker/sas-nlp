<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <class name="Expression" line="28">
            <extends class="Statement"/>
            <comment line="173">
                                
            </comment>
            <javadoc line="28">
                An &lt;code&gt;Expression&lt;/code&gt; object represents a primitive expression
                  in which a single method is applied to a target and a set of
                  arguments to return a result - as in &lt;code&gt;&quot;a.getFoo()&quot;&lt;/code&gt;.
                  &lt;p&gt;
                  In addition to the properties of the super class, the
                  &lt;code&gt;Expression&lt;/code&gt; object provides a &lt;em&gt;value&lt;/em&gt; which
                  is the object returned when this expression is evaluated.
                  The return value is typically not provided by the caller and
                  is instead computed by dynamically finding the method and invoking
                  it when the first call to &lt;code&gt;getValue&lt;/code&gt; is made.                
                <see>
                    #getValue                    
                </see>
                <see>
                    #setValue                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    Philip Milne                    
                </author>
            </javadoc>
            <declaration name="unbound" type="Object" line="49"/>
            <declaration name="value" type="Object" line="51"/>
            <javadoc line="53">
                Creates a new {@link Expression} object
                  for the specified target object to invoke the method
                  specified by the name and by the array of arguments.
                  &lt;p&gt;
                  The {@code target} and the {@code methodName} values should not be {@code null}.
                  Otherwise an attempt to execute this {@code Expression}will result in a {@code NullPointerException}.
                  If the {@code arguments} value is {@code null},
                  an empty array is used as the value of the {@code arguments} property.                
                <param>
                    target  the target object of this expression                    
                </param>
                <param>
                    methodName  the name of the method to invoke on the specified target                    
                </param>
                <param>
                    arguments  the array of arguments to invoke the specified method                    
                </param>
                <see>
                    #getValue                    
                </see>
            </javadoc>
            <method name="Expression" type="constructor" line="71">
                <params>
                    <param name="target" type="Object"/>
                    <param name="methodName" type="String"/>
                    <param name="arguments" type="Object[]"/>
                </params>
            </method>
            <javadoc line="75">
                Creates a new {@link Expression} object with the specified value
                  for the specified target object to invoke the  method
                  specified by the name and by the array of arguments.
                  The {@code value} value is used as the value of the {@code value} property,
                  so the {@link #getValue} method will return it
                  without executing this {@code Expression}.
                  &lt;p&gt;
                  The {@code target} and the {@code methodName} values should not be {@code null}.
                  Otherwise an attempt to execute this {@code Expression}will result in a {@code NullPointerException}.
                  If the {@code arguments} value is {@code null},
                  an empty array is used as the value of the {@code arguments} property.                
                <param>
                    value  the value of this expression                    
                </param>
                <param>
                    target  the target object of this expression                    
                </param>
                <param>
                    methodName  the name of the method to invoke on the specified target                    
                </param>
                <param>
                    arguments  the array of arguments to invoke the specified method                    
                </param>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <method name="Expression" type="constructor" line="96">
                <params>
                    <param name="value" type="Object"/>
                    <param name="target" type="Object"/>
                    <param name="methodName" type="String"/>
                    <param name="arguments" type="Object[]"/>
                </params>
            </method>
            <javadoc line="101">
                {@inheritDoc}&lt;p&gt;
                  If the invoked method completes normally,
                  the value it returns is copied in the {@code value} property.
                  Note that the {@code value} property is set to {@code null},
                  if the return type of the underlying method is {@code void}.                
                <throws>
                    NullPointerException if the value of the {@code target} or{@code methodName} property is {@code null}                    
                </throws>
                <throws>
                    NoSuchMethodException if a matching method is not found                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and
                      it denies the method invocation                    
                </throws>
                <throws>
                    Exception that is thrown by the invoked method                    
                </throws>
                <see>
                    java.lang.reflect.Method                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="execute" type="void" line="120"/>
            <javadoc line="124">
                If the value property of this instance is not already set,
                  this method dynamically finds the method with the specified
                  methodName on this target with these arguments and calls it.
                  The result of the method invocation is first copied
                  into the value property of this expression and then returned
                  as the result of &lt;code&gt;getValue&lt;/code&gt;. If the value property
                  was already set, either by a call to &lt;code&gt;setValue&lt;/code&gt;
                  or a previous call to &lt;code&gt;getValue&lt;/code&gt; then the value
                  property is returned without either looking up or calling the method.
                  &lt;p&gt;
                  The value property of an &lt;code&gt;Expression&lt;/code&gt; is set to
                  a unique private (non-&lt;code&gt;null&lt;/code&gt;) value by default and
                  this value is used as an internal indication that the method
                  has not yet been called. A return value of &lt;code&gt;null&lt;/code&gt;
                  replaces this default value in the same way that any other value
                  would, ensuring that expressions are never evaluated more than once.
                  &lt;p&gt;
                  See the &lt;code&gt;excecute&lt;/code&gt; method for details on how
                  methods are chosen using the dynamic types of the target
                  and arguments.                
                <see>
                    Statement#execute                    
                </see>
                <see>
                    #setValue                    
                </see>
                <return>
                    The result of applying this method to these arguments.                    
                </return>
            </javadoc>
            <method name="getValue" type="Object" line="151">
                <scope line="152"/>
            </method>
            <javadoc line="158">
                Sets the value of this expression to &lt;code&gt;value&lt;/code&gt;.
                  This value will be returned by the getValue method
                  without calling the method associated with this
                  expression.                
                <param>
                    value The value of this expression.                    
                </param>
                <see>
                    #getValue                    
                </see>
            </javadoc>
            <method name="setValue" type="void" line="168">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="instanceName" type="String" line="172">
                <params>
                    <param name="instance" type="Object"/>
                </params>
            </method>
            <javadoc line="176">
                Prints the value of this expression using a Java-style syntax.                
            </javadoc>
            <method name="toString" type="String" line="179"/>
        </class>
    </source>