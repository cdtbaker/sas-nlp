<?xml version="1.0" encoding="UTF-8"?>
    <source package="java.beans">
        <import package="com.sun.beans.finder.PrimitiveWrapperMap"/>
        <import package="java.awt.AWTKeyStroke"/>
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.GridBagConstraints"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.lang.reflect.Array"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.Field"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util"/>
        <import package="javax.swing.Box"/>
        <import package="javax.swing.JLayeredPane"/>
        <import package="javax.swing.border.MatteBorder"/>
        <import package="javax.swing.plaf.ColorUIResource"/>
        <import package="sun.swing.PrintColorUIResource"/>
        <import package="java.util.Objects"/>
        <class name="NullPersistenceDelegate" line="73">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="76">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="78">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
            </method>
            <method name="writeObject" type="void" line="80">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="81">
                    System.out.println(&quot;NullPersistenceDelegate:writeObject &quot; + oldInstance);                    
                </comment>
            </method>
        </class>
        <class name="EnumPersistenceDelegate" line="85">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <javadoc line="85">
                The persistence delegate for &lt;CODE&gt;enum&lt;/CODE&gt; classes.                
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <method name="mutatesTo" type="boolean" line="91">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="95">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="e" type="Enum" line="96"/>
            </method>
        </class>
        <class name="PrimitivePersistenceDelegate" line="101">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="mutatesTo" type="boolean" line="102">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="106">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
            </method>
        </class>
        <class name="ArrayPersistenceDelegate" line="112">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="mutatesTo" type="boolean" line="113">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
                <comment line="115">
                    Also ensures the subtype is correct.                    
                </comment>
            </method>
            <method name="instantiate" type="Expression" line="119">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="120">
                    System.out.println(&quot;instantiate: &quot; + type + &quot; &quot; + oldInstance);                    
                </comment>
                <declaration name="oldClass" type="Class" line="121"/>
            </method>
            <method name="initialize" type="void" line="127">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="131">
                    Expression oldGetExp = new Expression(Array.class, &quot;get&quot;, new Object[]{oldInstance, index});                    
                </comment>
                <comment line="132">
                    Expression newGetExp = new Expression(Array.class, &quot;get&quot;, new Object[]{newInstance, index});                    
                </comment>
                <comment line="140">
                    System.out.println(&quot;Not equal: &quot; + newGetExp + &quot; != &quot; + actualGetExp);                    
                </comment>
                <comment line="141">
                    invokeStatement(Array.class, &quot;set&quot;, new Object[]{oldInstance, index, oldValue}, out);                    
                </comment>
                <comment line="146">
                    System.err.println(&quot;Warning:: failed to write: &quot; + oldGetExp);                    
                </comment>
                <declaration name="n" type="int" line="128"/>
                <scope line="129">
                    <declaration name="index" type="Object" line="130"/>
                    <declaration name="oldGetExp" type="Expression" line="133"/>
                    <declaration name="newGetExp" type="Expression" line="134"/>
                    <scope line="135">
                        <declaration name="oldValue" type="Object" line="136"/>
                        <declaration name="newValue" type="Object" line="137"/>
                        <scope line="139"/>
                    </scope>
                    <scope line="145"/>
                </scope>
            </method>
        </class>
        <class name="ProxyPersistenceDelegate" line="153">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="instantiate" type="Expression" line="154">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="157">
                    This unappealing hack is not required but makes the                    
                </comment>
                <comment line="158">
                    representation of EventHandlers much more concise.                    
                </comment>
                <declaration name="type" type="Class" line="155"/>
                <declaration name="p" type="java.lang.reflect.Proxy" line="156"/>
                <declaration name="ih" type="java.lang.reflect.InvocationHandler" line="159"/>
                <scope line="160">
                    <declaration name="eh" type="EventHandler" line="161"/>
                    <declaration name="args" type="Vector" line="162"/>
                    <scope line="166"/>
                    <scope line="169"/>
                </scope>
            </method>
        </class>
        <class name="java_lang_String_PersistenceDelegate" line="188">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="instantiate" type="Expression" line="189">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
            </method>
            <method name="writeObject" type="void" line="191">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="192">
                    System.out.println(&quot;NullPersistenceDelegate:writeObject &quot; + oldInstance);                    
                </comment>
            </method>
        </class>
        <class name="java_lang_Class_PersistenceDelegate" line="197">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="mutatesTo" type="boolean" line="198">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="202">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="204">
                    As of 1.3 it is not possible to call Class.forName(&quot;int&quot;),                    
                </comment>
                <comment line="205">
                    so we have to generate different code for primitive types.                    
                </comment>
                <comment line="206">
                    This is needed for arrays whose subtype may be primitive.                    
                </comment>
                <declaration name="c" type="Class" line="203"/>
                <scope line="207">
                    <declaration name="field" type="Field" line="208"/>
                    <scope line="209"/>
                    <scope line="211"/>
                </scope>
                <scope line="216"/>
                <scope line="219"/>
                <scope line="222">
                    <declaration name="newInstance" type="Expression" line="223"/>
                </scope>
            </method>
        </class>
        <class name="java_lang_reflect_Field_PersistenceDelegate" line="231">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="mutatesTo" type="boolean" line="232">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="236">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="f" type="Field" line="237"/>
            </method>
        </class>
        <class name="java_lang_reflect_Method_PersistenceDelegate" line="246">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="mutatesTo" type="boolean" line="247">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="251">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="m" type="Method" line="252"/>
            </method>
        </class>
        <class name="java_util_Date_PersistenceDelegate" line="262">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <javadoc line="262">
                The persistence delegate for &lt;CODE&gt;java.util.Date&lt;/CODE&gt; classes.
                  Do not extend DefaultPersistenceDelegate to improve performance and
                  to avoid problems with &lt;CODE&gt;java.sql.Date&lt;/CODE&gt;,
                  &lt;CODE&gt;java.sql.Time&lt;/CODE&gt; and &lt;CODE&gt;java.sql.Timestamp&lt;/CODE&gt;.                
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <method name="mutatesTo" type="boolean" line="271">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
                <scope line="272"/>
                <declaration name="oldDate" type="Date" line="275"/>
                <declaration name="newDate" type="Date" line="276"/>
            </method>
            <method name="instantiate" type="Expression" line="281">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="date" type="Date" line="282"/>
            </method>
        </class>
        <class name="java_sql_Timestamp_PersistenceDelegate" line="287">
            <extends class="java_util_Date_PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <javadoc line="287">
                The persistence delegate for &lt;CODE&gt;java.sql.Timestamp&lt;/CODE&gt; classes.
                  It supports nanoseconds.                
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <declaration name="getNanosMethod" type="Method" line="294"/>
            <method name="getNanosMethod" type="Method" line="296">
                <scope line="297">
                    <declaration name="c" type="Class&lt;?&gt;" line="298"/>
                </scope>
                <scope line="300"/>
                <scope line="302"/>
            </method>
            <javadoc line="307">
                Invoke Timstamp getNanos.                
            </javadoc>
            <method name="getNanos" type="int" line="310">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="313"/>
                <scope line="315">
                    <declaration name="cause" type="Throwable" line="316"/>
                </scope>
                <scope line="322"/>
            </method>
            <method name="initialize" type="void" line="327">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="328">
                    assumes oldInstance and newInstance are Timestamps                    
                </comment>
                <declaration name="nanos" type="int" line="329"/>
                <scope line="330"/>
            </method>
        </class>
        <class name="java_util_Collections" line="351">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <javadoc line="351">
                The base class for persistence delegates for inner classes
                  that can be created using {@link Collections}.                
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <method name="mutatesTo" type="boolean" line="358">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
                <scope line="359"/>
                <scope line="362"/>
                <declaration name="oldC" type="Collection" line="365"/>
                <declaration name="newC" type="Collection" line="366"/>
            </method>
            <class name="EmptyList_PersistenceDelegate" line="370">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="371">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                </method>
            </class>
            <class name="EmptySet_PersistenceDelegate" line="376">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="377">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                </method>
            </class>
            <class name="EmptyMap_PersistenceDelegate" line="382">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="383">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                </method>
            </class>
            <class name="SingletonList_PersistenceDelegate" line="388">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="389">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="list" type="List" line="390"/>
                </method>
            </class>
            <class name="SingletonSet_PersistenceDelegate" line="395">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="396">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="set" type="Set" line="397"/>
                </method>
            </class>
            <class name="SingletonMap_PersistenceDelegate" line="402">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="403">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="map" type="Map" line="404"/>
                    <declaration name="key" type="Object" line="405"/>
                </method>
            </class>
            <class name="UnmodifiableCollection_PersistenceDelegate" line="410">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="411">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="list" type="List" line="412"/>
                </method>
            </class>
            <class name="UnmodifiableList_PersistenceDelegate" line="417">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="418">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="list" type="List" line="419"/>
                </method>
            </class>
            <class name="UnmodifiableRandomAccessList_PersistenceDelegate" line="424">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="425">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="list" type="List" line="426"/>
                </method>
            </class>
            <class name="UnmodifiableSet_PersistenceDelegate" line="431">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="432">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="set" type="Set" line="433"/>
                </method>
            </class>
            <class name="UnmodifiableSortedSet_PersistenceDelegate" line="438">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="439">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="set" type="SortedSet" line="440"/>
                </method>
            </class>
            <class name="UnmodifiableMap_PersistenceDelegate" line="445">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="446">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="map" type="Map" line="447"/>
                </method>
            </class>
            <class name="UnmodifiableSortedMap_PersistenceDelegate" line="452">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="453">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="map" type="SortedMap" line="454"/>
                </method>
            </class>
            <class name="SynchronizedCollection_PersistenceDelegate" line="459">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="460">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="list" type="List" line="461"/>
                </method>
            </class>
            <class name="SynchronizedList_PersistenceDelegate" line="466">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="467">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="list" type="List" line="468"/>
                </method>
            </class>
            <class name="SynchronizedRandomAccessList_PersistenceDelegate" line="473">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="474">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="list" type="List" line="475"/>
                </method>
            </class>
            <class name="SynchronizedSet_PersistenceDelegate" line="480">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="481">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="set" type="Set" line="482"/>
                </method>
            </class>
            <class name="SynchronizedSortedSet_PersistenceDelegate" line="487">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="488">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="set" type="SortedSet" line="489"/>
                </method>
            </class>
            <class name="SynchronizedMap_PersistenceDelegate" line="494">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="495">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="map" type="Map" line="496"/>
                </method>
            </class>
            <class name="SynchronizedSortedMap_PersistenceDelegate" line="501">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="502">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="map" type="SortedMap" line="503"/>
                </method>
            </class>
            <class name="CheckedCollection_PersistenceDelegate" line="508">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="509">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="type" type="Object" line="510"/>
                    <declaration name="list" type="List" line="511"/>
                </method>
            </class>
            <class name="CheckedList_PersistenceDelegate" line="516">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="517">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="type" type="Object" line="518"/>
                    <declaration name="list" type="List" line="519"/>
                </method>
            </class>
            <class name="CheckedRandomAccessList_PersistenceDelegate" line="524">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="525">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="type" type="Object" line="526"/>
                    <declaration name="list" type="List" line="527"/>
                </method>
            </class>
            <class name="CheckedSet_PersistenceDelegate" line="532">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="533">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="type" type="Object" line="534"/>
                    <declaration name="set" type="Set" line="535"/>
                </method>
            </class>
            <class name="CheckedSortedSet_PersistenceDelegate" line="540">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="541">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="type" type="Object" line="542"/>
                    <declaration name="set" type="SortedSet" line="543"/>
                </method>
            </class>
            <class name="CheckedMap_PersistenceDelegate" line="548">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="549">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="keyType" type="Object" line="550"/>
                    <declaration name="valueType" type="Object" line="551"/>
                    <declaration name="map" type="Map" line="552"/>
                </method>
            </class>
            <class name="CheckedSortedMap_PersistenceDelegate" line="557">
                <extends class="java_util_Collections"/>
                <method name="instantiate" type="Expression" line="558">
                    <params>
                        <param name="oldInstance" type="Object"/>
                        <param name="out" type="Encoder"/>
                    </params>
                    <declaration name="keyType" type="Object" line="559"/>
                    <declaration name="valueType" type="Object" line="560"/>
                    <declaration name="map" type="SortedMap" line="561"/>
                </method>
            </class>
        </class>
        <class name="java_util_EnumMap_PersistenceDelegate" line="567">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <javadoc line="567">
                The persistence delegate for &lt;CODE&gt;java.util.EnumMap&lt;/CODE&gt; classes.                
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <method name="mutatesTo" type="boolean" line="573">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="577">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
            </method>
            <method name="getType" type="Object" line="581">
                <params>
                    <param name="instance" type="Object"/>
                </params>
            </method>
        </class>
        <class name="java_util_EnumSet_PersistenceDelegate" line="586">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <javadoc line="586">
                The persistence delegate for &lt;CODE&gt;java.util.EnumSet&lt;/CODE&gt; classes.                
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <method name="mutatesTo" type="boolean" line="592">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="596">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
            </method>
            <method name="getType" type="Object" line="600">
                <params>
                    <param name="instance" type="Object"/>
                </params>
            </method>
        </class>
        <class name="java_util_Collection_PersistenceDelegate" line="606">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="607">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="oldO" type="java.util.Collection" line="608"/>
                <declaration name="newO" type="java.util.Collection" line="609"/>
                <scope line="611"/>
                <scope line="614"/>
            </method>
        </class>
        <class name="java_util_List_PersistenceDelegate" line="621">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="622">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="oldO" type="java.util.List" line="623"/>
                <declaration name="newO" type="java.util.List" line="624"/>
                <declaration name="oldSize" type="int" line="625"/>
                <declaration name="newSize" type="int" line="626"/>
                <scope line="627"/>
                <scope line="631">
                    <declaration name="index" type="Object" line="632"/>
                    <declaration name="oldGetExp" type="Expression" line="634"/>
                    <declaration name="newGetExp" type="Expression" line="635"/>
                    <scope line="636">
                        <declaration name="oldValue" type="Object" line="637"/>
                        <declaration name="newValue" type="Object" line="638"/>
                        <scope line="640"/>
                    </scope>
                    <scope line="644"/>
                </scope>
                <scope line="648"/>
            </method>
        </class>
        <class name="java_util_Map_PersistenceDelegate" line="656">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="657">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="658">
                    System.out.println(&quot;Initializing: &quot; + newInstance);                    
                </comment>
                <comment line="661">
                    Remove the new elements.                    
                </comment>
                <comment line="662">
                    Do this first otherwise we undo the adding work.                    
                </comment>
                <comment line="665">
                    PENDING: This &quot;key&quot; is not in the right environment.                    
                </comment>
                <comment line="671">
                    Add the new elements.                    
                </comment>
                <comment line="674">
                    Pending: should use newKey.                    
                </comment>
                <comment line="683">
                    put oldValue(=null?) if oldKey is absent in newMap                    
                </comment>
                <declaration name="oldMap" type="java.util.Map" line="659"/>
                <declaration name="newMap" type="java.util.Map" line="660"/>
                <scope line="663">
                    <scope line="664">
                        <scope line="666"/>
                    </scope>
                </scope>
                <scope line="672">
                    <declaration name="oldGetExp" type="Expression" line="673"/>
                    <declaration name="newGetExp" type="Expression" line="675"/>
                    <scope line="676">
                        <declaration name="oldValue" type="Object" line="677"/>
                        <declaration name="newValue" type="Object" line="678"/>
                        <scope line="680"/>
                        <scope line="682"/>
                    </scope>
                    <scope line="687"/>
                </scope>
            </method>
        </class>
        <class name="java_util_AbstractCollection_PersistenceDelegate" line="694">
            <extends class="java_util_Collection_PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
        </class>
        <class name="java_util_AbstractList_PersistenceDelegate" line="695">
            <extends class="java_util_List_PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
        </class>
        <class name="java_util_AbstractMap_PersistenceDelegate" line="696">
            <extends class="java_util_Map_PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
        </class>
        <class name="java_util_Hashtable_PersistenceDelegate" line="697">
            <extends class="java_util_Map_PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
        </class>
        <class name="java_beans_beancontext_BeanContextSupport_PersistenceDelegate" line="701">
            <extends class="java_util_Collection_PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
        </class>
        <class name="java_awt_Insets_PersistenceDelegate" line="705">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <javadoc line="705">
                The persistence delegate for {@link Insets}.
                  It is impossible to use {@link DefaultPersistenceDelegate}because this class does not have any properties.                
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <method name="mutatesTo" type="boolean" line="713">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="717">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="insets" type="Insets" line="718"/>
                <declaration name="args" type="Object[]" line="719"/>
            </method>
        </class>
        <class name="java_awt_Font_PersistenceDelegate" line="729">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <javadoc line="729">
                The persistence delegate for {@link Font}.
                  It is impossible to use {@link DefaultPersistenceDelegate}because size of the font can be float value.                
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <method name="mutatesTo" type="boolean" line="737">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="741">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="font" type="Font" line="742"/>
                <declaration name="count" type="int" line="744"/>
                <declaration name="family" type="String" line="745"/>
                <declaration name="style" type="int" line="746"/>
                <declaration name="size" type="int" line="747"/>
                <declaration name="basic" type="Map" line="749"/>
                <declaration name="clone" type="Map" line="750"/>
                <scope line="751">
                    <declaration name="value" type="Object" line="752"/>
                    <scope line="753"/>
                    <scope line="756">
                        <scope line="757"/>
                    </scope>
                    <scope line="762">
                        <scope line="763"/>
                        <scope line="765"/>
                    </scope>
                    <scope line="770">
                        <scope line="771"/>
                        <scope line="773"/>
                    </scope>
                    <scope line="777">
                        <scope line="778">
                            <declaration name="number" type="Number" line="779"/>
                            <scope line="781"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="type" type="Class" line="787"/>
                <scope line="788"/>
                <scope line="791"/>
            </method>
        </class>
        <class name="java_awt_AWTKeyStroke_PersistenceDelegate" line="798">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <javadoc line="798">
                The persistence delegate for {@link AWTKeyStroke}.
                  It is impossible to use {@link DefaultPersistenceDelegate}because this class have no public constructor.                
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <method name="mutatesTo" type="boolean" line="806">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="810">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="837">
                    get short name of the class                    
                </comment>
                <declaration name="key" type="AWTKeyStroke" line="811"/>
                <declaration name="ch" type="char" line="813"/>
                <declaration name="code" type="int" line="814"/>
                <declaration name="mask" type="int" line="815"/>
                <declaration name="onKeyRelease" type="boolean" line="816"/>
                <declaration name="args" type="Object[]" line="818"/>
                <scope line="819"/>
                <scope line="823">
                    <scope line="824"/>
                    <scope line="828"/>
                </scope>
                <scope line="832"/>
                <declaration name="type" type="Class" line="835"/>
                <declaration name="name" type="String" line="836"/>
                <declaration name="index" type="int" line="838"/>
                <scope line="839"/>
            </method>
        </class>
        <class name="StaticFieldsPersistenceDelegate" line="846">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="installFields" type="void" line="847">
                <params>
                    <param name="out" type="Encoder"/>
                    <param name="cls" type="Class<?>"/>
                </params>
                <comment line="851">
                    Don&apos;t install primitives, their identity will not be preserved                    
                </comment>
                <comment line="852">
                    by wrapping.                    
                </comment>
                <declaration name="fields" type="Field" line="848"/>
                <scope line="849">
                    <declaration name="field" type="Field" line="850"/>
                    <scope line="853"/>
                </scope>
            </method>
            <method name="instantiate" type="Expression" line="859">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
            </method>
            <method name="writeObject" type="void" line="863">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <scope line="864"/>
            </method>
        </class>
        <class name="java_awt_SystemColor_PersistenceDelegate" line="873">
            <extends class="StaticFieldsPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
        </class>
        <class name="java_awt_font_TextAttribute_PersistenceDelegate" line="876">
            <extends class="StaticFieldsPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
        </class>
        <class name="java_awt_MenuShortcut_PersistenceDelegate" line="879">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="mutatesTo" type="boolean" line="880">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="884">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="m" type="java.awt.MenuShortcut" line="885"/>
            </method>
        </class>
        <class name="java_awt_Component_PersistenceDelegate" line="892">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="893">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="897">
                    The &quot;background&quot;, &quot;foreground&quot; and &quot;font&quot; properties.                    
                </comment>
                <comment line="898">
                    The foreground and font properties of Windows change from                    
                </comment>
                <comment line="899">
                    null to defined values after the Windows are made visible -                    
                </comment>
                <comment line="900">
                    special case them for now.                    
                </comment>
                <comment line="919">
                    Bounds                    
                </comment>
                <comment line="922">
                    Use the most concise construct.                    
                </comment>
                <declaration name="c" type="java.awt.Component" line="895"/>
                <declaration name="c2" type="java.awt.Component" line="896"/>
                <scope line="901">
                    <declaration name="oldBackground" type="Object" line="902"/>
                    <declaration name="newBackground" type="Object" line="903"/>
                    <scope line="904"/>
                    <declaration name="oldForeground" type="Object" line="907"/>
                    <declaration name="newForeground" type="Object" line="908"/>
                    <scope line="909"/>
                    <declaration name="oldFont" type="Object" line="912"/>
                    <declaration name="newFont" type="Object" line="913"/>
                    <scope line="914"/>
                </scope>
                <declaration name="p" type="java.awt.Container" line="920"/>
                <scope line="921">
                    <declaration name="locationCorrect" type="boolean" line="923"/>
                    <declaration name="sizeCorrect" type="boolean" line="924"/>
                    <scope line="925"/>
                    <scope line="928"/>
                    <scope line="931"/>
                </scope>
            </method>
        </class>
        <class name="java_awt_Container_PersistenceDelegate" line="939">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="940">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="942">
                    Ignore the children of a JScrollPane.                    
                </comment>
                <comment line="943">
                    Pending(milne) find a better way to do this.                    
                </comment>
                <comment line="960">
                    Pending. Assume all the new children are unaltered.                    
                </comment>
                <scope line="944"/>
                <declaration name="oldC" type="java.awt.Container" line="947"/>
                <declaration name="oldChildren" type="java.awt.Component[]" line="948"/>
                <declaration name="newC" type="java.awt.Container" line="949"/>
                <declaration name="newChildren" type="java.awt.Component[]" line="950"/>
                <declaration name="layout" type="BorderLayout" line="952"/>
                <declaration name="oldLayeredPane" type="JLayeredPane" line="956"/>
                <scope line="961">
                    <declaration name="args" type="Object[]" line="962"/>
                </scope>
            </method>
        </class>
        <class name="java_awt_Choice_PersistenceDelegate" line="974">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="975">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="m" type="java.awt.Choice" line="977"/>
                <declaration name="n" type="java.awt.Choice" line="978"/>
                <scope line="979"/>
            </method>
        </class>
        <class name="java_awt_Menu_PersistenceDelegate" line="986">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="987">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="m" type="java.awt.Menu" line="989"/>
                <declaration name="n" type="java.awt.Menu" line="990"/>
                <scope line="991"/>
            </method>
        </class>
        <class name="java_awt_MenuBar_PersistenceDelegate" line="998">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="999">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="m" type="java.awt.MenuBar" line="1001"/>
                <declaration name="n" type="java.awt.MenuBar" line="1002"/>
                <scope line="1003"/>
            </method>
        </class>
        <class name="java_awt_List_PersistenceDelegate" line="1010">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="1011">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="m" type="java.awt.List" line="1013"/>
                <declaration name="n" type="java.awt.List" line="1014"/>
                <scope line="1015"/>
            </method>
        </class>
        <class name="java_awt_BorderLayout_PersistenceDelegate" line="1025">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <declaration name="CONSTRAINTS" type="String[]" line="1026"/>
            <method name="initialize" type="void" line="1039">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="1046">
                    Pending, assume any existing elements are OK.                    
                </comment>
                <declaration name="oldLayout" type="BorderLayout" line="1041"/>
                <declaration name="newLayout" type="BorderLayout" line="1042"/>
                <scope line="1043">
                    <declaration name="oldC" type="Object" line="1044"/>
                    <declaration name="newC" type="Object" line="1045"/>
                    <scope line="1047"/>
                </scope>
            </method>
        </class>
        <class name="java_awt_CardLayout_PersistenceDelegate" line="1056">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="1058">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="tab" type="Hashtable" line="1060"/>
                <scope line="1064">
                    <scope line="1065">
                        <declaration name="child" type="Object" line="1066"/>
                    </scope>
                </scope>
            </method>
        </class>
        <class name="java_awt_GridBagLayout_PersistenceDelegate" line="1075">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="1077">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="comptable" type="Hashtable" line="1079"/>
                <scope line="1083">
                    <scope line="1084">
                        <declaration name="child" type="Object" line="1085"/>
                    </scope>
                </scope>
            </method>
        </class>
        <class name="javax_swing_JFrame_PersistenceDelegate" line="1098">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="1099">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="1106">
                    false means: don&apos;t execute this statement at write time.                    
                </comment>
                <declaration name="oldC" type="java.awt.Window" line="1101"/>
                <declaration name="newC" type="java.awt.Window" line="1102"/>
                <declaration name="oldV" type="boolean" line="1103"/>
                <declaration name="newV" type="boolean" line="1104"/>
                <scope line="1105">
                    <declaration name="executeStatements" type="boolean" line="1107"/>
                </scope>
            </method>
        </class>
        <class name="javax_swing_DefaultListModel_PersistenceDelegate" line="1118">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="1119">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <comment line="1120">
                    Note, the &quot;size&quot; property will be set here.                    
                </comment>
                <comment line="1125">
                    Can also use &quot;addElement&quot;.                    
                </comment>
                <declaration name="m" type="javax.swing.DefaultListModel" line="1122"/>
                <declaration name="n" type="javax.swing.DefaultListModel" line="1123"/>
                <scope line="1124"/>
            </method>
        </class>
        <class name="javax_swing_DefaultComboBoxModel_PersistenceDelegate" line="1132">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="1133">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="m" type="javax.swing.DefaultComboBoxModel" line="1135"/>
                <scope line="1136"/>
            </method>
        </class>
        <class name="javax_swing_tree_DefaultMutableTreeNode_PersistenceDelegate" line="1144">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="1146">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="m" type="javax.swing.tree.DefaultMutableTreeNode" line="1148"/>
                <declaration name="n" type="javax.swing.tree.DefaultMutableTreeNode" line="1150"/>
                <scope line="1152"/>
            </method>
        </class>
        <class name="javax_swing_ToolTipManager_PersistenceDelegate" line="1160">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="instantiate" type="Expression" line="1161">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
            </method>
        </class>
        <class name="javax_swing_JTabbedPane_PersistenceDelegate" line="1168">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="1169">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="p" type="javax.swing.JTabbedPane" line="1171"/>
                <scope line="1172"/>
            </method>
        </class>
        <class name="javax_swing_Box_PersistenceDelegate" line="1183">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="mutatesTo" type="boolean" line="1184">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="1188">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
            </method>
            <method name="getAxis" type="Integer" line="1192">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <declaration name="box" type="Box" line="1193"/>
            </method>
        </class>
        <class name="javax_swing_JMenu_PersistenceDelegate" line="1204">
            <extends class="DefaultPersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <method name="initialize" type="void" line="1205">
                <params>
                    <param name="type" type="Class<?>"/>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="m" type="javax.swing.JMenu" line="1207"/>
                <declaration name="c" type="java.awt.Component[]" line="1208"/>
                <scope line="1209"/>
            </method>
        </class>
        <class name="javax_swing_border_MatteBorder_PersistenceDelegate" line="1215">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <javadoc line="1215">
                The persistence delegate for {@link MatteBorder}.
                  It is impossible to use {@link DefaultPersistenceDelegate}because this class does not have writable properties.                
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <method name="instantiate" type="Expression" line="1223">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="border" type="MatteBorder" line="1224"/>
                <declaration name="insets" type="Insets" line="1225"/>
                <declaration name="object" type="Object" line="1226"/>
                <scope line="1227"/>
                <declaration name="args" type="Object[]" line="1230"/>
            </method>
        </class>
        <class name="sun_swing_PrintColorUIResource_PersistenceDelegate" line="1254">
            <extends class="PersistenceDelegate"/>
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <javadoc line="1254">
                The persistence delegate for {@link PrintColorUIResource}.
                  It is impossible to use {@link DefaultPersistenceDelegate}because this class has special rule for serialization:
                  it should be converted to {@link ColorUIResource}.                
                <see>
                    PrintColorUIResource#writeReplace                    
                </see>
                <author>
                    Sergey A. Malenkov                    
                </author>
            </javadoc>
            <method name="mutatesTo" type="boolean" line="1265">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="newInstance" type="Object"/>
                </params>
            </method>
            <method name="instantiate" type="Expression" line="1269">
                <params>
                    <param name="oldInstance" type="Object"/>
                    <param name="out" type="Encoder"/>
                </params>
                <declaration name="color" type="Color" line="1270"/>
                <declaration name="args" type="Object[]" line="1271"/>
            </method>
        </class>
        <class name="MetaData" line="1276">
            <comment line="75">
                Note this will be called by all classes when they reach the                
            </comment>
            <comment line="76">
                top of their superclass chain.                
            </comment>
            <declaration name="fields" type="Map&lt;String,Field&gt;" line="1277"/>
            <declaration name="internalPersistenceDelegates" type="Hashtable" line="1278"/>
            <declaration name="nullPersistenceDelegate" type="PersistenceDelegate" line="1280"/>
            <declaration name="enumPersistenceDelegate" type="PersistenceDelegate" line="1281"/>
            <declaration name="primitivePersistenceDelegate" type="PersistenceDelegate" line="1282"/>
            <declaration name="defaultPersistenceDelegate" type="PersistenceDelegate" line="1283"/>
            <declaration name="arrayPersistenceDelegate" type="PersistenceDelegate" line="1284"/>
            <declaration name="proxyPersistenceDelegate" type="PersistenceDelegate" line="1285"/>
            <scope line="1287"/>
            <method name="getPersistenceDelegate" type="PersistenceDelegate" line="1311">
                <params>
                    <param name="type" type="Class"/>
                </params>
                <comment line="1321">
                    The persistence delegate for arrays is non-trivial; instantiate it lazily.                    
                </comment>
                <comment line="1328">
                    Handle proxies lazily for backward compatibility with 1.2.                    
                </comment>
                <comment line="1338">
                    else if (type.getDeclaringClass() != null) {                    
                </comment>
                <comment line="1339">
                    return new DefaultPersistenceDelegate(new String[]{&quot;this$0&quot;});                    
                </comment>
                <comment line="1340">
                    }                    
                </comment>
                <scope line="1312"/>
                <scope line="1315"/>
                <scope line="1318"/>
                <scope line="1322">
                    <scope line="1323"/>
                </scope>
                <scope line="1329">
                    <scope line="1330">
                        <scope line="1331"/>
                    </scope>
                </scope>
                <scope line="1337"/>
                <declaration name="typeName" type="String" line="1342"/>
                <declaration name="pd" type="PersistenceDelegate" line="1343"/>
                <scope line="1344">
                    <scope line="1346"/>
                    <scope line="1350">
                        <declaration name="name" type="String" line="1351"/>
                        <declaration name="c" type="Class" line="1352"/>
                    </scope>
                    <scope line="1357">
                        <declaration name="properties" type="String[]" line="1358"/>
                        <scope line="1359"/>
                    </scope>
                    <scope line="1364"/>
                </scope>
            </method>
            <method name="getConstructorProperties" type="String[]" line="1372">
                <params>
                    <param name="type" type="Class"/>
                </params>
                <declaration name="names" type="String[]" line="1373"/>
                <declaration name="length" type="int" line="1374"/>
                <scope line="1375">
                    <declaration name="value" type="String[]" line="1376"/>
                    <scope line="1377"/>
                </scope>
            </method>
            <method name="getAnnotationValue" type="String[]" line="1385">
                <params>
                    <param name="constructor" type="Constructor<?>"/>
                </params>
                <declaration name="annotation" type="ConstructorProperties" line="1386"/>
            </method>
            <method name="isValid" type="boolean" line="1392">
                <params>
                    <param name="constructor" type="Constructor<?>"/>
                    <param name="names" type="String[]"/>
                </params>
                <declaration name="parameters" type="Class[]" line="1393"/>
                <scope line="1394"/>
                <scope line="1397">
                    <scope line="1398"/>
                </scope>
            </method>
            <method name="getBeanAttribute" type="Object" line="1405">
                <params>
                    <param name="type" type="Class"/>
                    <param name="attribute" type="String"/>
                </params>
                <scope line="1406"/>
                <scope line="1408"/>
            </method>
            <method name="getPrivateFieldValue" type="Object" line="1413">
                <params>
                    <param name="instance" type="Object"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="field" type="Field" line="1414"/>
                <scope line="1415">
                    <declaration name="index" type="int" line="1416"/>
                    <declaration name="className" type="String" line="1417"/>
                    <declaration name="fieldName" type="String" line="1418"/>
                    <anonymous_class line="1419">
                        <method name="run" type="Field" line="1420">
                            <scope line="1421">
                                <declaration name="field" type="Field" line="1422"/>
                            </scope>
                            <scope line="1426"/>
                            <scope line="1429"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="1436"/>
                <scope line="1439"/>
            </method>
        </class>
    </source>